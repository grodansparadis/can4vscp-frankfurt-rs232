

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Fri Mar 13 16:46:03 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	text85,global,reloc=2,class=CODE,delta=1
   104                           	psect	text86,global,reloc=2,class=CODE,delta=1
   105                           	psect	text87,global,reloc=2,class=CODE,delta=1
   106                           	psect	text88,global,reloc=2,class=CODE,delta=1
   107                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   108                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   109                           	psect	pa_nodes,global,class=CODE,delta=1
   110  0000                     tblptru	equ	0xFF8
   111                           tblptrh	equ	0xFF7
   112                           tblptrl	equ	0xFF6
   113                           tablat	equ	0xFF5
   114                           prodh	equ	0xFF4
   115                           prodl	equ	0xFF3
   116                           intcon	equ	0xFF2
   117                           indf0	equ	0xFEF
   118                           fsr0h	equ	0xFEA
   119                           fsr0l	equ	0xFE9
   120                           wreg	equ	0xFE8
   121                           indf1	equ	0xFE7
   122                           postinc1	equ	0xFE6
   123                           postdec1	equ	0xFE5
   124                           fsr1h	equ	0xFE2
   125                           fsr1l	equ	0xFE1
   126                           indf2	equ	0xFDF
   127                           postinc2	equ	0xFDE
   128                           postdec2	equ	0xFDD
   129                           plusw2	equ	0xFDB
   130                           fsr2h	equ	0xFDA
   131                           fsr2l	equ	0xFD9
   132                           status	equ	0xFD8
   133                           
   134                           	psect	mediumconst
   135  006FB4                     __pmediumconst:
   136                           	opt stack 0
   137  006FB4                     _octpowers:
   138                           	opt stack 0
   139  006FB4  0001               	dw	1
   140  006FB6  0000               	dw	0
   141  006FB8  0008               	dw	8
   142  006FBA  0000               	dw	0
   143  006FBC  0040               	dw	64
   144  006FBE  0000               	dw	0
   145  006FC0  0200               	dw	512
   146  006FC2  0000               	dw	0
   147  006FC4  1000               	dw	4096
   148  006FC6  0000               	dw	0
   149  006FC8  8000               	dw	32768
   150  006FCA  0000               	dw	0
   151  006FCC  0000               	dw	0
   152  006FCE  0004               	dw	4
   153  006FD0  0000               	dw	0
   154  006FD2  0020               	dw	32
   155  006FD4  0000               	dw	0
   156  006FD6  0100               	dw	256
   157  006FD8  0000               	dw	0
   158  006FDA  0800               	dw	2048
   159  006FDC  0000               	dw	0
   160  006FDE  4000               	dw	16384
   161  006FE0  0000               	dw	0
   162  006FE2  0000               	dw	0
   163  006FE4                     __end_of_octpowers:
   164                           	opt stack 0
   165  006FE4                     _dpowers:
   166                           	opt stack 0
   167  006FE4  0001               	dw	1
   168  006FE6  0000               	dw	0
   169  006FE8  000A               	dw	10
   170  006FEA  0000               	dw	0
   171  006FEC  0064               	dw	100
   172  006FEE  0000               	dw	0
   173  006FF0  03E8               	dw	1000
   174  006FF2  0000               	dw	0
   175  006FF4  2710               	dw	10000
   176  006FF6  0000               	dw	0
   177  006FF8  86A0               	dw	34464
   178  006FFA  0001               	dw	1
   179  006FFC  4240               	dw	16960
   180  006FFE  000F               	dw	15
   181  007000  9680               	dw	38528
   182  007002  0098               	dw	152
   183  007004  E100               	dw	57600
   184  007006  05F5               	dw	1525
   185  007008  CA00               	dw	51712
   186  00700A  3B9A               	dw	15258
   187  00700C                     __end_of_dpowers:
   188                           	opt stack 0
   189  00700C                     _hexpowers:
   190                           	opt stack 0
   191  00700C  0001               	dw	1
   192  00700E  0000               	dw	0
   193  007010  0010               	dw	16
   194  007012  0000               	dw	0
   195  007014  0100               	dw	256
   196  007016  0000               	dw	0
   197  007018  1000               	dw	4096
   198  00701A  0000               	dw	0
   199  00701C  0000               	dw	0
   200  00701E  0001               	dw	1
   201  007020  0000               	dw	0
   202  007022  0010               	dw	16
   203  007024  0000               	dw	0
   204  007026  0100               	dw	256
   205  007028  0000               	dw	0
   206  00702A  1000               	dw	4096
   207  00702C                     __end_of_hexpowers:
   208                           	opt stack 0
   209  0000                     _BRGCON1	set	3952
   210  0000                     _BRGCON2	set	3953
   211  0000                     _BRGCON3	set	3954
   212  0000                     _BSEL0	set	3576
   213  0000                     _CANCON	set	3951
   214  0000                     _CIOCON	set	3955
   215  0000                     _COMSTATbits	set	3956
   216  0000                     _ECANCON	set	3959
   217  0000                     _EEADR	set	4009
   218  0000                     _EECON1bits	set	4006
   219  0000                     _EECON2	set	4007
   220  0000                     _EEDATA	set	4008
   221  0000                     _INTCONbits	set	4082
   222  0000                     _MSEL0	set	3568
   223  0000                     _MSEL1	set	3569
   224  0000                     _MSEL2	set	3570
   225  0000                     _OSCCONbits	set	4051
   226  0000                     _OSCTUNEbits	set	3995
   227  0000                     _PIE1bits	set	3997
   228  0000                     _PIR1bits	set	3998
   229  0000                     _PIR2bits	set	4001
   230  0000                     _RCREG	set	4014
   231  0000                     _RCSTA	set	4011
   232  0000                     _RCSTAbits	set	4011
   233  0000                     _RXB1CONbits	set	3920
   234  0000                     _RXERRCNT	set	3957
   235  0000                     _RXF0EIDH	set	3842
   236  0000                     _RXF0EIDL	set	3843
   237  0000                     _RXF0SIDH	set	3840
   238  0000                     _RXF0SIDL	set	3841
   239  0000                     _RXF10EIDH	set	3446
   240  0000                     _RXF10EIDL	set	3447
   241  0000                     _RXF10SIDH	set	3444
   242  0000                     _RXF10SIDL	set	3445
   243  0000                     _RXF11EIDH	set	3450
   244  0000                     _RXF11EIDL	set	3451
   245  0000                     _RXF11SIDH	set	3448
   246  0000                     _RXF11SIDL	set	3449
   247  0000                     _RXF12EIDH	set	3458
   248  0000                     _RXF12EIDL	set	3459
   249  0000                     _RXF12SIDH	set	3456
   250  0000                     _RXF12SIDL	set	3457
   251  0000                     _RXF13EIDH	set	3462
   252  0000                     _RXF13EIDL	set	3463
   253  0000                     _RXF13SIDH	set	3460
   254  0000                     _RXF13SIDL	set	3461
   255  0000                     _RXF14EIDH	set	3466
   256  0000                     _RXF14EIDL	set	3467
   257  0000                     _RXF14SIDH	set	3464
   258  0000                     _RXF14SIDL	set	3465
   259  0000                     _RXF15EIDH	set	3474
   260  0000                     _RXF15EIDL	set	3475
   261  0000                     _RXF15SIDH	set	3472
   262  0000                     _RXF15SIDL	set	3473
   263  0000                     _RXF1EIDH	set	3846
   264  0000                     _RXF1EIDL	set	3847
   265  0000                     _RXF1SIDH	set	3844
   266  0000                     _RXF1SIDL	set	3845
   267  0000                     _RXF2EIDH	set	3850
   268  0000                     _RXF2EIDL	set	3851
   269  0000                     _RXF2SIDH	set	3848
   270  0000                     _RXF2SIDL	set	3849
   271  0000                     _RXF3EIDH	set	3854
   272  0000                     _RXF3EIDL	set	3855
   273  0000                     _RXF3SIDH	set	3852
   274  0000                     _RXF3SIDL	set	3853
   275  0000                     _RXF4EIDH	set	3858
   276  0000                     _RXF4EIDL	set	3859
   277  0000                     _RXF4SIDH	set	3856
   278  0000                     _RXF4SIDL	set	3857
   279  0000                     _RXF5EIDH	set	3862
   280  0000                     _RXF5EIDL	set	3863
   281  0000                     _RXF5SIDH	set	3860
   282  0000                     _RXF5SIDL	set	3861
   283  0000                     _RXF6EIDH	set	3426
   284  0000                     _RXF6EIDL	set	3427
   285  0000                     _RXF6SIDH	set	3424
   286  0000                     _RXF6SIDL	set	3425
   287  0000                     _RXF7EIDH	set	3430
   288  0000                     _RXF7EIDL	set	3431
   289  0000                     _RXF7SIDH	set	3428
   290  0000                     _RXF7SIDL	set	3429
   291  0000                     _RXF8EIDH	set	3434
   292  0000                     _RXF8EIDL	set	3435
   293  0000                     _RXF8SIDH	set	3432
   294  0000                     _RXF8SIDL	set	3433
   295  0000                     _RXF9EIDH	set	3442
   296  0000                     _RXF9EIDL	set	3443
   297  0000                     _RXF9SIDH	set	3440
   298  0000                     _RXF9SIDL	set	3441
   299  0000                     _RXFBCON0	set	3552
   300  0000                     _RXFBCON1	set	3553
   301  0000                     _RXFBCON2	set	3554
   302  0000                     _RXFBCON3	set	3555
   303  0000                     _RXFBCON4	set	3556
   304  0000                     _RXFBCON5	set	3557
   305  0000                     _RXFBCON6	set	3558
   306  0000                     _RXFBCON7	set	3559
   307  0000                     _RXFCON0	set	3540
   308  0000                     _RXFCON1	set	3541
   309  0000                     _RXM0EIDH	set	3866
   310  0000                     _RXM0EIDL	set	3867
   311  0000                     _RXM0SIDL	set	3865
   312  0000                     _RXM1EIDH	set	3870
   313  0000                     _RXM1EIDL	set	3871
   314  0000                     _RXM1SIDL	set	3869
   315  0000                     _SPBRG	set	4015
   316  0000                     _SPBRGH	set	4016
   317  0000                     _T0CON	set	4053
   318  0000                     _T0CONbits	set	4053
   319  0000                     _TMR0H	set	4055
   320  0000                     _TMR0L	set	4054
   321  0000                     _TRISBbits	set	3987
   322  0000                     _TRISCbits	set	3988
   323  0000                     _TXERRCNT	set	3958
   324  0000                     _TXREG	set	4013
   325  0000                     _TXSTA	set	4012
   326  0000                     _TXSTAbits	set	4012
   327  0000                     _B0RXFUL	set	28935
   328  0000                     _B0TXEN	set	28610
   329  0000                     _B1RXFUL	set	29063
   330  0000                     _B1TXEN	set	28611
   331  0000                     _B2RXFUL	set	29191
   332  0000                     _B2TXEN	set	28612
   333  0000                     _B3RXFUL	set	29319
   334  0000                     _B3TXEN	set	28613
   335  0000                     _B4RXFUL	set	29447
   336  0000                     _B4TXEN	set	28614
   337  0000                     _B5RXFUL	set	29575
   338  0000                     _B5TXEN	set	28615
   339  0000                     _ERRIE	set	32029
   340  0000                     _FIFOEMPTY	set	31655
   341  0000                     _IRXIF	set	32039
   342  0000                     _LATC1	set	31833
   343  0000                     _MDSEL0	set	31678
   344  0000                     _MDSEL1	set	31679
   345  0000                     _PEIE	set	32662
   346  0000                     _RCIE	set	31981
   347  0000                     _RCIF	set	31989
   348  0000                     _RCIP	set	31997
   349  0000                     _RXB0FILHIT0	set	31488
   350  0000                     _RXB0FUL	set	31495
   351  0000                     _RXB0IF	set	32032
   352  0000                     _RXB0OVFL	set	31655
   353  0000                     _RXB1IF	set	32033
   354  0000                     _RXB1OVFL	set	31654
   355  0000                     _RXBnIE	set	32025
   356  0000                     _RXBnIF	set	32033
   357  0000                     _RXM0EXIDM	set	30923
   358  0000                     _RXM1EXIDEN	set	30955
   359  0000                     _B0CON	set	3616
   360  0000                     _B1CON	set	3632
   361  0000                     _B2CON	set	3648
   362  0000                     _B3CON	set	3664
   363  0000                     _B4CON	set	3680
   364  0000                     _B5CON	set	3696
   365  0000                     _RXB0CON	set	3936
   366  0000                     _RXB1CON	set	3920
   367  0000                     _RXM0SIDH	set	3864
   368  0000                     _RXM1SIDH	set	3868
   369  0000                     _TXB0CON	set	3904
   370  0000                     _TXB1CON	set	3888
   371  0000                     _TXB2CON	set	3872
   372  00702C                     __stringdata:
   373                           	opt stack 0
   374  00702C                     STR_227:
   375  00702C  20                 	db	32
   376  00702D  20                 	db	32
   377  00702E  20                 	db	32
   378  00702F  20                 	db	32
   379  007030  20                 	db	32
   380  007031  20                 	db	32
   381  007032  20                 	db	32
   382  007033  20                 	db	32
   383  007034  20                 	db	32
   384  007035  46                 	db	70	;'F'
   385  007036  6F                 	db	111	;'o'
   386  007037  72                 	db	114	;'r'
   387  007038  6D                 	db	109	;'m'
   388  007039  61                 	db	97	;'a'
   389  00703A  74                 	db	116	;'t'
   390  00703B  3A                 	db	58	;':'
   391  00703C  20                 	db	32
   392  00703D  66                 	db	102	;'f'
   393  00703E  69                 	db	105	;'i'
   394  00703F  6C                 	db	108	;'l'
   395  007040  74                 	db	116	;'t'
   396  007041  65                 	db	101	;'e'
   397  007042  72                 	db	114	;'r'
   398  007043  20                 	db	32
   399  007044  66                 	db	102	;'f'
   400  007045  69                 	db	105	;'i'
   401  007046  6C                 	db	108	;'l'
   402  007047  74                 	db	116	;'t'
   403  007048  65                 	db	101	;'e'
   404  007049  72                 	db	114	;'r'
   405  00704A  6E                 	db	110	;'n'
   406  00704B  6F                 	db	111	;'o'
   407  00704C  2C                 	db	44
   408  00704D  70                 	db	112	;'p'
   409  00704E  72                 	db	114	;'r'
   410  00704F  69                 	db	105	;'i'
   411  007050  6F                 	db	111	;'o'
   412  007051  2C                 	db	44
   413  007052  63                 	db	99	;'c'
   414  007053  6C                 	db	108	;'l'
   415  007054  61                 	db	97	;'a'
   416  007055  73                 	db	115	;'s'
   417  007056  73                 	db	115	;'s'
   418  007057  2C                 	db	44
   419  007058  74                 	db	116	;'t'
   420  007059  79                 	db	121	;'y'
   421  00705A  70                 	db	112	;'p'
   422  00705B  65                 	db	101	;'e'
   423  00705C  2C                 	db	44
   424  00705D  6E                 	db	110	;'n'
   425  00705E  6F                 	db	111	;'o'
   426  00705F  64                 	db	100	;'d'
   427  007060  65                 	db	101	;'e'
   428  007061  69                 	db	105	;'i'
   429  007062  64                 	db	100	;'d'
   430  007063  20                 	db	32
   431  007064  20                 	db	32
   432  007065  28                 	db	40
   433  007066  66                 	db	102	;'f'
   434  007067  69                 	db	105	;'i'
   435  007068  6C                 	db	108	;'l'
   436  007069  74                 	db	116	;'t'
   437  00706A  65                 	db	101	;'e'
   438  00706B  72                 	db	114	;'r'
   439  00706C  6E                 	db	110	;'n'
   440  00706D  6F                 	db	111	;'o'
   441  00706E  20                 	db	32
   442  00706F  3D                 	db	61	;'='
   443  007070  20                 	db	32
   444  007071  30                 	db	48	;'0'
   445  007072  2D                 	db	45
   446  007073  31                 	db	49	;'1'
   447  007074  35                 	db	53	;'5'
   448  007075  29                 	db	41
   449  007076  2E                 	db	46
   450  007077  0D                 	db	13
   451  007078  0A                 	db	10
   452  007079  00                 	db	0
   453  00707A                     STR_225:
   454  00707A  49                 	db	73	;'I'
   455  00707B  4E                 	db	78	;'N'
   456  00707C  46                 	db	70	;'F'
   457  00707D  4F                 	db	79	;'O'
   458  00707E  20                 	db	32
   459  00707F  2D                 	db	45
   460  007080  20                 	db	32
   461  007081  47                 	db	71	;'G'
   462  007082  65                 	db	101	;'e'
   463  007083  74                 	db	116	;'t'
   464  007084  20                 	db	32
   465  007085  69                 	db	105	;'i'
   466  007086  6E                 	db	110	;'n'
   467  007087  66                 	db	102	;'f'
   468  007088  6F                 	db	111	;'o'
   469  007089  20                 	db	32
   470  00708A  61                 	db	97	;'a'
   471  00708B  62                 	db	98	;'b'
   472  00708C  6F                 	db	111	;'o'
   473  00708D  75                 	db	117	;'u'
   474  00708E  74                 	db	116	;'t'
   475  00708F  20                 	db	32
   476  007090  61                 	db	97	;'a'
   477  007091  6E                 	db	110	;'n'
   478  007092  20                 	db	32
   479  007093  65                 	db	101	;'e'
   480  007094  78                 	db	120	;'x'
   481  007095  69                 	db	105	;'i'
   482  007096  73                 	db	115	;'s'
   483  007097  74                 	db	116	;'t'
   484  007098  65                 	db	101	;'e'
   485  007099  6E                 	db	110	;'n'
   486  00709A  74                 	db	116	;'t'
   487  00709B  20                 	db	32
   488  00709C  6E                 	db	110	;'n'
   489  00709D  6F                 	db	111	;'o'
   490  00709E  64                 	db	100	;'d'
   491  00709F  65                 	db	101	;'e'
   492  0070A0  20                 	db	32
   493  0070A1  6F                 	db	111	;'o'
   494  0070A2  6E                 	db	110	;'n'
   495  0070A3  20                 	db	32
   496  0070A4  74                 	db	116	;'t'
   497  0070A5  68                 	db	104	;'h'
   498  0070A6  65                 	db	101	;'e'
   499  0070A7  20                 	db	32
   500  0070A8  62                 	db	98	;'b'
   501  0070A9  75                 	db	117	;'u'
   502  0070AA  73                 	db	115	;'s'
   503  0070AB  20                 	db	32
   504  0070AC  28                 	db	40
   505  0070AD  46                 	db	70	;'F'
   506  0070AE  6F                 	db	111	;'o'
   507  0070AF  72                 	db	114	;'r'
   508  0070B0  6D                 	db	109	;'m'
   509  0070B1  61                 	db	97	;'a'
   510  0070B2  74                 	db	116	;'t'
   511  0070B3  3A                 	db	58	;':'
   512  0070B4  20                 	db	32
   513  0070B5  69                 	db	105	;'i'
   514  0070B6  6E                 	db	110	;'n'
   515  0070B7  66                 	db	102	;'f'
   516  0070B8  6F                 	db	111	;'o'
   517  0070B9  20                 	db	32
   518  0070BA  6E                 	db	110	;'n'
   519  0070BB  69                 	db	105	;'i'
   520  0070BC  63                 	db	99	;'c'
   521  0070BD  6B                 	db	107	;'k'
   522  0070BE  6E                 	db	110	;'n'
   523  0070BF  61                 	db	97	;'a'
   524  0070C0  6D                 	db	109	;'m'
   525  0070C1  65                 	db	101	;'e'
   526  0070C2  29                 	db	41
   527  0070C3  2E                 	db	46
   528  0070C4  0D                 	db	13
   529  0070C5  0A                 	db	10
   530  0070C6  00                 	db	0
   531  0070C7                     STR_229:
   532  0070C7  20                 	db	32
   533  0070C8  20                 	db	32
   534  0070C9  20                 	db	32
   535  0070CA  20                 	db	32
   536  0070CB  20                 	db	32
   537  0070CC  20                 	db	32
   538  0070CD  20                 	db	32
   539  0070CE  46                 	db	70	;'F'
   540  0070CF  6F                 	db	111	;'o'
   541  0070D0  72                 	db	114	;'r'
   542  0070D1  6D                 	db	109	;'m'
   543  0070D2  61                 	db	97	;'a'
   544  0070D3  74                 	db	116	;'t'
   545  0070D4  3A                 	db	58	;':'
   546  0070D5  20                 	db	32
   547  0070D6  6D                 	db	109	;'m'
   548  0070D7  61                 	db	97	;'a'
   549  0070D8  73                 	db	115	;'s'
   550  0070D9  6B                 	db	107	;'k'
   551  0070DA  20                 	db	32
   552  0070DB  6D                 	db	109	;'m'
   553  0070DC  61                 	db	97	;'a'
   554  0070DD  73                 	db	115	;'s'
   555  0070DE  6B                 	db	107	;'k'
   556  0070DF  6E                 	db	110	;'n'
   557  0070E0  6F                 	db	111	;'o'
   558  0070E1  2C                 	db	44
   559  0070E2  70                 	db	112	;'p'
   560  0070E3  72                 	db	114	;'r'
   561  0070E4  69                 	db	105	;'i'
   562  0070E5  6F                 	db	111	;'o'
   563  0070E6  2C                 	db	44
   564  0070E7  63                 	db	99	;'c'
   565  0070E8  6C                 	db	108	;'l'
   566  0070E9  61                 	db	97	;'a'
   567  0070EA  73                 	db	115	;'s'
   568  0070EB  73                 	db	115	;'s'
   569  0070EC  2C                 	db	44
   570  0070ED  74                 	db	116	;'t'
   571  0070EE  79                 	db	121	;'y'
   572  0070EF  70                 	db	112	;'p'
   573  0070F0  65                 	db	101	;'e'
   574  0070F1  2C                 	db	44
   575  0070F2  6E                 	db	110	;'n'
   576  0070F3  6F                 	db	111	;'o'
   577  0070F4  64                 	db	100	;'d'
   578  0070F5  65                 	db	101	;'e'
   579  0070F6  69                 	db	105	;'i'
   580  0070F7  64                 	db	100	;'d'
   581  0070F8  20                 	db	32
   582  0070F9  28                 	db	40
   583  0070FA  6D                 	db	109	;'m'
   584  0070FB  61                 	db	97	;'a'
   585  0070FC  73                 	db	115	;'s'
   586  0070FD  6B                 	db	107	;'k'
   587  0070FE  6E                 	db	110	;'n'
   588  0070FF  6F                 	db	111	;'o'
   589  007100  20                 	db	32
   590  007101  3D                 	db	61	;'='
   591  007102  20                 	db	32
   592  007103  30                 	db	48	;'0'
   593  007104  20                 	db	32
   594  007105  6F                 	db	111	;'o'
   595  007106  72                 	db	114	;'r'
   596  007107  20                 	db	32
   597  007108  31                 	db	49	;'1'
   598  007109  29                 	db	41
   599  00710A  2E                 	db	46
   600  00710B  0D                 	db	13
   601  00710C  0A                 	db	10
   602  00710D  00                 	db	0
   603  00710E                     STR_223:
   604  00710E  52                 	db	82	;'R'
   605  00710F  52                 	db	82	;'R'
   606  007110  45                 	db	69	;'E'
   607  007111  47                 	db	71	;'G'
   608  007112  20                 	db	32
   609  007113  2D                 	db	45
   610  007114  20                 	db	32
   611  007115  52                 	db	82	;'R'
   612  007116  65                 	db	101	;'e'
   613  007117  61                 	db	97	;'a'
   614  007118  64                 	db	100	;'d'
   615  007119  20                 	db	32
   616  00711A  72                 	db	114	;'r'
   617  00711B  65                 	db	101	;'e'
   618  00711C  67                 	db	103	;'g'
   619  00711D  69                 	db	105	;'i'
   620  00711E  73                 	db	115	;'s'
   621  00711F  74                 	db	116	;'t'
   622  007120  65                 	db	101	;'e'
   623  007121  72                 	db	114	;'r'
   624  007122  28                 	db	40
   625  007123  73                 	db	115	;'s'
   626  007124  29                 	db	41
   627  007125  20                 	db	32
   628  007126  6F                 	db	111	;'o'
   629  007127  66                 	db	102	;'f'
   630  007128  20                 	db	32
   631  007129  6E                 	db	110	;'n'
   632  00712A  6F                 	db	111	;'o'
   633  00712B  64                 	db	100	;'d'
   634  00712C  65                 	db	101	;'e'
   635  00712D  20                 	db	32
   636  00712E  28                 	db	40
   637  00712F  46                 	db	70	;'F'
   638  007130  6F                 	db	111	;'o'
   639  007131  72                 	db	114	;'r'
   640  007132  6D                 	db	109	;'m'
   641  007133  61                 	db	97	;'a'
   642  007134  74                 	db	116	;'t'
   643  007135  3A                 	db	58	;':'
   644  007136  20                 	db	32
   645  007137  72                 	db	114	;'r'
   646  007138  72                 	db	114	;'r'
   647  007139  65                 	db	101	;'e'
   648  00713A  67                 	db	103	;'g'
   649  00713B  20                 	db	32
   650  00713C  5B                 	db	91	;'['
   651  00713D  70                 	db	112	;'p'
   652  00713E  61                 	db	97	;'a'
   653  00713F  67                 	db	103	;'g'
   654  007140  65                 	db	101	;'e'
   655  007141  3A                 	db	58	;':'
   656  007142  5D                 	db	93	;']'
   657  007143  72                 	db	114	;'r'
   658  007144  65                 	db	101	;'e'
   659  007145  67                 	db	103	;'g'
   660  007146  20                 	db	32
   661  007147  5B                 	db	91	;'['
   662  007148  63                 	db	99	;'c'
   663  007149  6F                 	db	111	;'o'
   664  00714A  75                 	db	117	;'u'
   665  00714B  6E                 	db	110	;'n'
   666  00714C  74                 	db	116	;'t'
   667  00714D  5D                 	db	93	;']'
   668  00714E  29                 	db	41
   669  00714F  2E                 	db	46
   670  007150  0D                 	db	13
   671  007151  0A                 	db	10
   672  007152  00                 	db	0
   673  007153                     STR_238:
   674  007153  2D                 	db	45
   675  007154  2D                 	db	45
   676  007155  2D                 	db	45
   677  007156  2D                 	db	45
   678  007157  2D                 	db	45
   679  007158  2D                 	db	45
   680  007159  2D                 	db	45
   681  00715A  2D                 	db	45
   682  00715B  2D                 	db	45
   683  00715C  2D                 	db	45
   684  00715D  2D                 	db	45
   685  00715E  2D                 	db	45
   686  00715F  2D                 	db	45
   687  007160  2D                 	db	45
   688  007161  2D                 	db	45
   689  007162  2D                 	db	45
   690  007163  2D                 	db	45
   691  007164  2D                 	db	45
   692  007165  2D                 	db	45
   693  007166  2D                 	db	45
   694  007167  2D                 	db	45
   695  007168  2D                 	db	45
   696  007169  2D                 	db	45
   697  00716A  2D                 	db	45
   698  00716B  2D                 	db	45
   699  00716C  2D                 	db	45
   700  00716D  2D                 	db	45
   701  00716E  2D                 	db	45
   702  00716F  2D                 	db	45
   703  007170  2D                 	db	45
   704  007171  2D                 	db	45
   705  007172  2D                 	db	45
   706  007173  2D                 	db	45
   707  007174  2D                 	db	45
   708  007175  2D                 	db	45
   709  007176  2D                 	db	45
   710  007177  2D                 	db	45
   711  007178  2D                 	db	45
   712  007179  2D                 	db	45
   713  00717A  2D                 	db	45
   714  00717B  2D                 	db	45
   715  00717C  2D                 	db	45
   716  00717D  2D                 	db	45
   717  00717E  2D                 	db	45
   718  00717F  2D                 	db	45
   719  007180  2D                 	db	45
   720  007181  2D                 	db	45
   721  007182  2D                 	db	45
   722  007183  2D                 	db	45
   723  007184  2D                 	db	45
   724  007185  2D                 	db	45
   725  007186  2D                 	db	45
   726  007187  2D                 	db	45
   727  007188  2D                 	db	45
   728  007189  2D                 	db	45
   729  00718A  2D                 	db	45
   730  00718B  2D                 	db	45
   731  00718C  2D                 	db	45
   732  00718D  2D                 	db	45
   733  00718E  2D                 	db	45
   734  00718F  2D                 	db	45
   735  007190  2D                 	db	45
   736  007191  2D                 	db	45
   737  007192  2D                 	db	45
   738  007193  0D                 	db	13
   739  007194  0A                 	db	10
   740  007195  00                 	db	0
   741  007196                     STR_233:
   742  007196  20                 	db	32
   743  007197  20                 	db	32
   744  007198  20                 	db	32
   745  007199  20                 	db	32
   746  00719A  52                 	db	82	;'R'
   747  00719B  57                 	db	87	;'W'
   748  00719C  54                 	db	84	;'T'
   749  00719D  49                 	db	73	;'I'
   750  00719E  4D                 	db	77	;'M'
   751  00719F  45                 	db	69	;'E'
   752  0071A0  4F                 	db	79	;'O'
   753  0071A1  55                 	db	85	;'U'
   754  0071A2  54                 	db	84	;'T'
   755  0071A3  20                 	db	32
   756  0071A4  2D                 	db	45
   757  0071A5  20                 	db	32
   758  0071A6  53                 	db	83	;'S'
   759  0071A7  65                 	db	101	;'e'
   760  0071A8  74                 	db	116	;'t'
   761  0071A9  20                 	db	32
   762  0071AA  72                 	db	114	;'r'
   763  0071AB  65                 	db	101	;'e'
   764  0071AC  67                 	db	103	;'g'
   765  0071AD  69                 	db	105	;'i'
   766  0071AE  73                 	db	115	;'s'
   767  0071AF  74                 	db	116	;'t'
   768  0071B0  65                 	db	101	;'e'
   769  0071B1  72                 	db	114	;'r'
   770  0071B2  20                 	db	32
   771  0071B3  72                 	db	114	;'r'
   772  0071B4  65                 	db	101	;'e'
   773  0071B5  61                 	db	97	;'a'
   774  0071B6  64                 	db	100	;'d'
   775  0071B7  2F                 	db	47
   776  0071B8  77                 	db	119	;'w'
   777  0071B9  72                 	db	114	;'r'
   778  0071BA  69                 	db	105	;'i'
   779  0071BB  74                 	db	116	;'t'
   780  0071BC  65                 	db	101	;'e'
   781  0071BD  20                 	db	32
   782  0071BE  74                 	db	116	;'t'
   783  0071BF  69                 	db	105	;'i'
   784  0071C0  6D                 	db	109	;'m'
   785  0071C1  65                 	db	101	;'e'
   786  0071C2  6F                 	db	111	;'o'
   787  0071C3  75                 	db	117	;'u'
   788  0071C4  74                 	db	116	;'t'
   789  0071C5  2E                 	db	46
   790  0071C6  20                 	db	32
   791  0071C7  44                 	db	68	;'D'
   792  0071C8  65                 	db	101	;'e'
   793  0071C9  66                 	db	102	;'f'
   794  0071CA  61                 	db	97	;'a'
   795  0071CB  75                 	db	117	;'u'
   796  0071CC  6C                 	db	108	;'l'
   797  0071CD  74                 	db	116	;'t'
   798  0071CE  3D                 	db	61	;'='
   799  0071CF  31                 	db	49	;'1'
   800  0071D0  30                 	db	48	;'0'
   801  0071D1  20                 	db	32
   802  0071D2  6D                 	db	109	;'m'
   803  0071D3  73                 	db	115	;'s'
   804  0071D4  20                 	db	32
   805  0071D5  2E                 	db	46
   806  0071D6  0D                 	db	13
   807  0071D7  0A                 	db	10
   808  0071D8  00                 	db	0
   809  0071D9                     STR_224:
   810  0071D9  57                 	db	87	;'W'
   811  0071DA  52                 	db	82	;'R'
   812  0071DB  45                 	db	69	;'E'
   813  0071DC  47                 	db	71	;'G'
   814  0071DD  20                 	db	32
   815  0071DE  2D                 	db	45
   816  0071DF  20                 	db	32
   817  0071E0  57                 	db	87	;'W'
   818  0071E1  72                 	db	114	;'r'
   819  0071E2  69                 	db	105	;'i'
   820  0071E3  74                 	db	116	;'t'
   821  0071E4  65                 	db	101	;'e'
   822  0071E5  20                 	db	32
   823  0071E6  72                 	db	114	;'r'
   824  0071E7  65                 	db	101	;'e'
   825  0071E8  67                 	db	103	;'g'
   826  0071E9  69                 	db	105	;'i'
   827  0071EA  73                 	db	115	;'s'
   828  0071EB  74                 	db	116	;'t'
   829  0071EC  65                 	db	101	;'e'
   830  0071ED  72                 	db	114	;'r'
   831  0071EE  20                 	db	32
   832  0071EF  6F                 	db	111	;'o'
   833  0071F0  66                 	db	102	;'f'
   834  0071F1  20                 	db	32
   835  0071F2  6E                 	db	110	;'n'
   836  0071F3  6F                 	db	111	;'o'
   837  0071F4  64                 	db	100	;'d'
   838  0071F5  65                 	db	101	;'e'
   839  0071F6  20                 	db	32
   840  0071F7  28                 	db	40
   841  0071F8  46                 	db	70	;'F'
   842  0071F9  6F                 	db	111	;'o'
   843  0071FA  72                 	db	114	;'r'
   844  0071FB  6D                 	db	109	;'m'
   845  0071FC  61                 	db	97	;'a'
   846  0071FD  74                 	db	116	;'t'
   847  0071FE  3A                 	db	58	;':'
   848  0071FF  20                 	db	32
   849  007200  77                 	db	119	;'w'
   850  007201  72                 	db	114	;'r'
   851  007202  65                 	db	101	;'e'
   852  007203  67                 	db	103	;'g'
   853  007204  20                 	db	32
   854  007205  5B                 	db	91	;'['
   855  007206  70                 	db	112	;'p'
   856  007207  61                 	db	97	;'a'
   857  007208  67                 	db	103	;'g'
   858  007209  65                 	db	101	;'e'
   859  00720A  3A                 	db	58	;':'
   860  00720B  5D                 	db	93	;']'
   861  00720C  72                 	db	114	;'r'
   862  00720D  65                 	db	101	;'e'
   863  00720E  67                 	db	103	;'g'
   864  00720F  20                 	db	32
   865  007210  63                 	db	99	;'c'
   866  007211  6F                 	db	111	;'o'
   867  007212  6E                 	db	110	;'n'
   868  007213  74                 	db	116	;'t'
   869  007214  65                 	db	101	;'e'
   870  007215  6E                 	db	110	;'n'
   871  007216  74                 	db	116	;'t'
   872  007217  29                 	db	41
   873  007218  2E                 	db	46
   874  007219  0D                 	db	13
   875  00721A  0A                 	db	10
   876  00721B  00                 	db	0
   877  00721C                     STR_89:
   878  00721C  2D                 	db	45
   879  00721D  45                 	db	69	;'E'
   880  00721E  52                 	db	82	;'R'
   881  00721F  52                 	db	82	;'R'
   882  007220  4F                 	db	79	;'O'
   883  007221  52                 	db	82	;'R'
   884  007222  20                 	db	32
   885  007223  2D                 	db	45
   886  007224  20                 	db	32
   887  007225  46                 	db	70	;'F'
   888  007226  69                 	db	105	;'i'
   889  007227  6C                 	db	108	;'l'
   890  007228  74                 	db	116	;'t'
   891  007229  65                 	db	101	;'e'
   892  00722A  72                 	db	114	;'r'
   893  00722B  20                 	db	32
   894  00722C  6E                 	db	110	;'n'
   895  00722D  75                 	db	117	;'u'
   896  00722E  6D                 	db	109	;'m'
   897  00722F  62                 	db	98	;'b'
   898  007230  65                 	db	101	;'e'
   899  007231  72                 	db	114	;'r'
   900  007232  20                 	db	32
   901  007233  63                 	db	99	;'c'
   902  007234  61                 	db	97	;'a'
   903  007235  6E                 	db	110	;'n'
   904  007236  20                 	db	32
   905  007237  6F                 	db	111	;'o'
   906  007238  6E                 	db	110	;'n'
   907  007239  6C                 	db	108	;'l'
   908  00723A  79                 	db	121	;'y'
   909  00723B  20                 	db	32
   910  00723C  62                 	db	98	;'b'
   911  00723D  65                 	db	101	;'e'
   912  00723E  20                 	db	32
   913  00723F  73                 	db	115	;'s'
   914  007240  65                 	db	101	;'e'
   915  007241  74                 	db	116	;'t'
   916  007242  20                 	db	32
   917  007243  74                 	db	116	;'t'
   918  007244  6F                 	db	111	;'o'
   919  007245  20                 	db	32
   920  007246  61                 	db	97	;'a'
   921  007247  20                 	db	32
   922  007248  76                 	db	118	;'v'
   923  007249  61                 	db	97	;'a'
   924  00724A  6C                 	db	108	;'l'
   925  00724B  75                 	db	117	;'u'
   926  00724C  65                 	db	101	;'e'
   927  00724D  20                 	db	32
   928  00724E  62                 	db	98	;'b'
   929  00724F  65                 	db	101	;'e'
   930  007250  74                 	db	116	;'t'
   931  007251  77                 	db	119	;'w'
   932  007252  65                 	db	101	;'e'
   933  007253  65                 	db	101	;'e'
   934  007254  6E                 	db	110	;'n'
   935  007255  20                 	db	32
   936  007256  30                 	db	48	;'0'
   937  007257  2D                 	db	45
   938  007258  31                 	db	49	;'1'
   939  007259  35                 	db	53	;'5'
   940  00725A  2E                 	db	46
   941  00725B  0D                 	db	13
   942  00725C  0A                 	db	10
   943  00725D  00                 	db	0
   944  00725E                     STR_236:
   945  00725E  20                 	db	32
   946  00725F  20                 	db	32
   947  007260  20                 	db	32
   948  007261  20                 	db	32
   949  007262  4D                 	db	77	;'M'
   950  007263  4F                 	db	79	;'O'
   951  007264  44                 	db	68	;'D'
   952  007265  45                 	db	69	;'E'
   953  007266  20                 	db	32
   954  007267  2D                 	db	45
   955  007268  20                 	db	32
   956  007269  53                 	db	83	;'S'
   957  00726A  65                 	db	101	;'e'
   958  00726B  74                 	db	116	;'t'
   959  00726C  20                 	db	32
   960  00726D  61                 	db	97	;'a'
   961  00726E  64                 	db	100	;'d'
   962  00726F  61                 	db	97	;'a'
   963  007270  70                 	db	112	;'p'
   964  007271  74                 	db	116	;'t'
   965  007272  65                 	db	101	;'e'
   966  007273  72                 	db	114	;'r'
   967  007274  20                 	db	32
   968  007275  6D                 	db	109	;'m'
   969  007276  6F                 	db	111	;'o'
   970  007277  64                 	db	100	;'d'
   971  007278  65                 	db	101	;'e'
   972  007279  20                 	db	32
   973  00727A  74                 	db	116	;'t'
   974  00727B  68                 	db	104	;'h'
   975  00727C  61                 	db	97	;'a'
   976  00727D  74                 	db	116	;'t'
   977  00727E  20                 	db	32
   978  00727F  73                 	db	115	;'s'
   979  007280  68                 	db	104	;'h'
   980  007281  6F                 	db	111	;'o'
   981  007282  75                 	db	117	;'u'
   982  007283  6C                 	db	108	;'l'
   983  007284  64                 	db	100	;'d'
   984  007285  20                 	db	32
   985  007286  62                 	db	98	;'b'
   986  007287  65                 	db	101	;'e'
   987  007288  20                 	db	32
   988  007289  75                 	db	117	;'u'
   989  00728A  73                 	db	115	;'s'
   990  00728B  65                 	db	101	;'e'
   991  00728C  64                 	db	100	;'d'
   992  00728D  20                 	db	32
   993  00728E  6F                 	db	111	;'o'
   994  00728F  6E                 	db	110	;'n'
   995  007290  20                 	db	32
   996  007291  73                 	db	115	;'s'
   997  007292  74                 	db	116	;'t'
   998  007293  61                 	db	97	;'a'
   999  007294  72                 	db	114	;'r'
  1000  007295  74                 	db	116	;'t'
  1001  007296  75                 	db	117	;'u'
  1002  007297  70                 	db	112	;'p'
  1003  007298  2E                 	db	46
  1004  007299  0D                 	db	13
  1005  00729A  0A                 	db	10
  1006  00729B  00                 	db	0
  1007  00729C                     STR_196:
  1008  00729C  54                 	db	84	;'T'
  1009  00729D  72                 	db	114	;'r'
  1010  00729E  61                 	db	97	;'a'
  1011  00729F  6E                 	db	110	;'n'
  1012  0072A0  73                 	db	115	;'s'
  1013  0072A1  6D                 	db	109	;'m'
  1014  0072A2  69                 	db	105	;'i'
  1015  0072A3  74                 	db	116	;'t'
  1016  0072A4  74                 	db	116	;'t'
  1017  0072A5  65                 	db	101	;'e'
  1018  0072A6  72                 	db	114	;'r'
  1019  0072A7  20                 	db	32
  1020  0072A8  69                 	db	105	;'i'
  1021  0072A9  6E                 	db	110	;'n'
  1022  0072AA  20                 	db	32
  1023  0072AB  45                 	db	69	;'E'
  1024  0072AC  72                 	db	114	;'r'
  1025  0072AD  72                 	db	114	;'r'
  1026  0072AE  6F                 	db	111	;'o'
  1027  0072AF  72                 	db	114	;'r'
  1028  0072B0  20                 	db	32
  1029  0072B1  53                 	db	83	;'S'
  1030  0072B2  74                 	db	116	;'t'
  1031  0072B3  61                 	db	97	;'a'
  1032  0072B4  74                 	db	116	;'t'
  1033  0072B5  65                 	db	101	;'e'
  1034  0072B6  20                 	db	32
  1035  0072B7  57                 	db	87	;'W'
  1036  0072B8  61                 	db	97	;'a'
  1037  0072B9  72                 	db	114	;'r'
  1038  0072BA  6E                 	db	110	;'n'
  1039  0072BB  69                 	db	105	;'i'
  1040  0072BC  6E                 	db	110	;'n'
  1041  0072BD  67                 	db	103	;'g'
  1042  0072BE  20                 	db	32
  1043  0072BF  28                 	db	40
  1044  0072C0  31                 	db	49	;'1'
  1045  0072C1  32                 	db	50	;'2'
  1046  0072C2  38                 	db	56	;'8'
  1047  0072C3  20                 	db	32
  1048  0072C4  3E                 	db	62	;'>'
  1049  0072C5  20                 	db	32
  1050  0072C6  54                 	db	84	;'T'
  1051  0072C7  45                 	db	69	;'E'
  1052  0072C8  52                 	db	82	;'R'
  1053  0072C9  52                 	db	82	;'R'
  1054  0072CA  43                 	db	67	;'C'
  1055  0072CB  4E                 	db	78	;'N'
  1056  0072CC  54                 	db	84	;'T'
  1057  0072CD  20                 	db	32
  1058  0072CE  3F                 	db	63	;'?'
  1059  0072CF  20                 	db	32
  1060  0072D0  39                 	db	57	;'9'
  1061  0072D1  36                 	db	54	;'6'
  1062  0072D2  29                 	db	41
  1063  0072D3  0D                 	db	13
  1064  0072D4  0A                 	db	10
  1065  0072D5  00                 	db	0
  1066  0072D6                     STR_198:
  1067  0072D6  54                 	db	84	;'T'
  1068  0072D7  72                 	db	114	;'r'
  1069  0072D8  61                 	db	97	;'a'
  1070  0072D9  6E                 	db	110	;'n'
  1071  0072DA  73                 	db	115	;'s'
  1072  0072DB  6D                 	db	109	;'m'
  1073  0072DC  69                 	db	105	;'i'
  1074  0072DD  74                 	db	116	;'t'
  1075  0072DE  74                 	db	116	;'t'
  1076  0072DF  65                 	db	101	;'e'
  1077  0072E0  72                 	db	114	;'r'
  1078  0072E1  20                 	db	32
  1079  0072E2  69                 	db	105	;'i'
  1080  0072E3  6E                 	db	110	;'n'
  1081  0072E4  20                 	db	32
  1082  0072E5  45                 	db	69	;'E'
  1083  0072E6  72                 	db	114	;'r'
  1084  0072E7  72                 	db	114	;'r'
  1085  0072E8  6F                 	db	111	;'o'
  1086  0072E9  72                 	db	114	;'r'
  1087  0072EA  20                 	db	32
  1088  0072EB  53                 	db	83	;'S'
  1089  0072EC  74                 	db	116	;'t'
  1090  0072ED  61                 	db	97	;'a'
  1091  0072EE  74                 	db	116	;'t'
  1092  0072EF  65                 	db	101	;'e'
  1093  0072F0  20                 	db	32
  1094  0072F1  42                 	db	66	;'B'
  1095  0072F2  75                 	db	117	;'u'
  1096  0072F3  73                 	db	115	;'s'
  1097  0072F4  20                 	db	32
  1098  0072F5  50                 	db	80	;'P'
  1099  0072F6  61                 	db	97	;'a'
  1100  0072F7  73                 	db	115	;'s'
  1101  0072F8  73                 	db	115	;'s'
  1102  0072F9  69                 	db	105	;'i'
  1103  0072FA  76                 	db	118	;'v'
  1104  0072FB  65                 	db	101	;'e'
  1105  0072FC  20                 	db	32
  1106  0072FD  28                 	db	40
  1107  0072FE  54                 	db	84	;'T'
  1108  0072FF  45                 	db	69	;'E'
  1109  007300  52                 	db	82	;'R'
  1110  007301  52                 	db	82	;'R'
  1111  007302  43                 	db	67	;'C'
  1112  007303  4E                 	db	78	;'N'
  1113  007304  54                 	db	84	;'T'
  1114  007305  20                 	db	32
  1115  007306  3F                 	db	63	;'?'
  1116  007307  20                 	db	32
  1117  007308  31                 	db	49	;'1'
  1118  007309  32                 	db	50	;'2'
  1119  00730A  38                 	db	56	;'8'
  1120  00730B  29                 	db	41
  1121  00730C  0D                 	db	13
  1122  00730D  0A                 	db	10
  1123  00730E  00                 	db	0
  1124  00730F                     STR_217:
  1125  00730F  20                 	db	32
  1126  007310  20                 	db	32
  1127  007311  20                 	db	32
  1128  007312  20                 	db	32
  1129  007313  20                 	db	32
  1130  007314  46                 	db	70	;'F'
  1131  007315  6F                 	db	111	;'o'
  1132  007316  72                 	db	114	;'r'
  1133  007317  6D                 	db	109	;'m'
  1134  007318  61                 	db	97	;'a'
  1135  007319  74                 	db	116	;'t'
  1136  00731A  3A                 	db	58	;':'
  1137  00731B  20                 	db	32
  1138  00731C  70                 	db	112	;'p'
  1139  00731D  72                 	db	114	;'r'
  1140  00731E  69                 	db	105	;'i'
  1141  00731F  6F                 	db	111	;'o'
  1142  007320  72                 	db	114	;'r'
  1143  007321  69                 	db	105	;'i'
  1144  007322  74                 	db	116	;'t'
  1145  007323  79                 	db	121	;'y'
  1146  007324  2C                 	db	44
  1147  007325  63                 	db	99	;'c'
  1148  007326  6C                 	db	108	;'l'
  1149  007327  61                 	db	97	;'a'
  1150  007328  73                 	db	115	;'s'
  1151  007329  73                 	db	115	;'s'
  1152  00732A  2C                 	db	44
  1153  00732B  74                 	db	116	;'t'
  1154  00732C  79                 	db	121	;'y'
  1155  00732D  70                 	db	112	;'p'
  1156  00732E  65                 	db	101	;'e'
  1157  00732F  2C                 	db	44
  1158  007330  6E                 	db	110	;'n'
  1159  007331  6F                 	db	111	;'o'
  1160  007332  64                 	db	100	;'d'
  1161  007333  65                 	db	101	;'e'
  1162  007334  69                 	db	105	;'i'
  1163  007335  64                 	db	100	;'d'
  1164  007336  2C                 	db	44
  1165  007337  63                 	db	99	;'c'
  1166  007338  6F                 	db	111	;'o'
  1167  007339  75                 	db	117	;'u'
  1168  00733A  6E                 	db	110	;'n'
  1169  00733B  74                 	db	116	;'t'
  1170  00733C  2C                 	db	44
  1171  00733D  64                 	db	100	;'d'
  1172  00733E  61                 	db	97	;'a'
  1173  00733F  74                 	db	116	;'t'
  1174  007340  61                 	db	97	;'a'
  1175  007341  2C                 	db	44
  1176  007342  2C                 	db	44
  1177  007343  2C                 	db	44
  1178  007344  0D                 	db	13
  1179  007345  0A                 	db	10
  1180  007346  00                 	db	0
  1181  007347                     STR_203:
  1182  007347  52                 	db	82	;'R'
  1183  007348  65                 	db	101	;'e'
  1184  007349  63                 	db	99	;'c'
  1185  00734A  65                 	db	101	;'e'
  1186  00734B  69                 	db	105	;'i'
  1187  00734C  76                 	db	118	;'v'
  1188  00734D  65                 	db	101	;'e'
  1189  00734E  72                 	db	114	;'r'
  1190  00734F  20                 	db	32
  1191  007350  69                 	db	105	;'i'
  1192  007351  6E                 	db	110	;'n'
  1193  007352  20                 	db	32
  1194  007353  45                 	db	69	;'E'
  1195  007354  72                 	db	114	;'r'
  1196  007355  72                 	db	114	;'r'
  1197  007356  6F                 	db	111	;'o'
  1198  007357  72                 	db	114	;'r'
  1199  007358  20                 	db	32
  1200  007359  53                 	db	83	;'S'
  1201  00735A  74                 	db	116	;'t'
  1202  00735B  61                 	db	97	;'a'
  1203  00735C  74                 	db	116	;'t'
  1204  00735D  65                 	db	101	;'e'
  1205  00735E  20                 	db	32
  1206  00735F  57                 	db	87	;'W'
  1207  007360  61                 	db	97	;'a'
  1208  007361  72                 	db	114	;'r'
  1209  007362  6E                 	db	110	;'n'
  1210  007363  69                 	db	105	;'i'
  1211  007364  6E                 	db	110	;'n'
  1212  007365  67                 	db	103	;'g'
  1213  007366  20                 	db	32
  1214  007367  28                 	db	40
  1215  007368  31                 	db	49	;'1'
  1216  007369  32                 	db	50	;'2'
  1217  00736A  38                 	db	56	;'8'
  1218  00736B  20                 	db	32
  1219  00736C  3E                 	db	62	;'>'
  1220  00736D  20                 	db	32
  1221  00736E  52                 	db	82	;'R'
  1222  00736F  45                 	db	69	;'E'
  1223  007370  52                 	db	82	;'R'
  1224  007371  52                 	db	82	;'R'
  1225  007372  43                 	db	67	;'C'
  1226  007373  4E                 	db	78	;'N'
  1227  007374  54                 	db	84	;'T'
  1228  007375  20                 	db	32
  1229  007376  3F                 	db	63	;'?'
  1230  007377  20                 	db	32
  1231  007378  39                 	db	57	;'9'
  1232  007379  36                 	db	54	;'6'
  1233  00737A  29                 	db	41
  1234  00737B  0D                 	db	13
  1235  00737C  0A                 	db	10
  1236  00737D  00                 	db	0
  1237  00737E                     STR_235:
  1238  00737E  20                 	db	32
  1239  00737F  20                 	db	32
  1240  007380  20                 	db	32
  1241  007381  20                 	db	32
  1242  007382  53                 	db	83	;'S'
  1243  007383  54                 	db	84	;'T'
  1244  007384  41                 	db	65	;'A'
  1245  007385  52                 	db	82	;'R'
  1246  007386  54                 	db	84	;'T'
  1247  007387  49                 	db	73	;'I'
  1248  007388  46                 	db	70	;'F'
  1249  007389  20                 	db	32
  1250  00738A  2D                 	db	45
  1251  00738B  20                 	db	32
  1252  00738C  53                 	db	83	;'S'
  1253  00738D  65                 	db	101	;'e'
  1254  00738E  74                 	db	116	;'t'
  1255  00738F  20                 	db	32
  1256  007390  69                 	db	105	;'i'
  1257  007391  6E                 	db	110	;'n'
  1258  007392  74                 	db	116	;'t'
  1259  007393  65                 	db	101	;'e'
  1260  007394  72                 	db	114	;'r'
  1261  007395  66                 	db	102	;'f'
  1262  007396  61                 	db	97	;'a'
  1263  007397  63                 	db	99	;'c'
  1264  007398  65                 	db	101	;'e'
  1265  007399  20                 	db	32
  1266  00739A  73                 	db	115	;'s'
  1267  00739B  74                 	db	116	;'t'
  1268  00739C  61                 	db	97	;'a'
  1269  00739D  74                 	db	116	;'t'
  1270  00739E  65                 	db	101	;'e'
  1271  00739F  20                 	db	32
  1272  0073A0  74                 	db	116	;'t'
  1273  0073A1  6F                 	db	111	;'o'
  1274  0073A2  20                 	db	32
  1275  0073A3  75                 	db	117	;'u'
  1276  0073A4  73                 	db	115	;'s'
  1277  0073A5  65                 	db	101	;'e'
  1278  0073A6  20                 	db	32
  1279  0073A7  6F                 	db	111	;'o'
  1280  0073A8  6E                 	db	110	;'n'
  1281  0073A9  20                 	db	32
  1282  0073AA  73                 	db	115	;'s'
  1283  0073AB  74                 	db	116	;'t'
  1284  0073AC  61                 	db	97	;'a'
  1285  0073AD  72                 	db	114	;'r'
  1286  0073AE  74                 	db	116	;'t'
  1287  0073AF  75                 	db	117	;'u'
  1288  0073B0  70                 	db	112	;'p'
  1289  0073B1  2E                 	db	46
  1290  0073B2  0D                 	db	13
  1291  0073B3  0A                 	db	10
  1292  0073B4  00                 	db	0
  1293  0073B5  50                 	db	80	;'P'
  1294  0073B6  72                 	db	114	;'r'
  1295  0073B7  65                 	db	101	;'e'
  1296  0073B8  73                 	db	115	;'s'
  1297  0073B9  73                 	db	115	;'s'
  1298  0073BA  20                 	db	32
  1299  0073BB  27                 	db	39
  1300  0073BC  76                 	db	118	;'v'
  1301  0073BD  27                 	db	39
  1302  0073BE  20                 	db	32
  1303  0073BF  77                 	db	119	;'w'
  1304  0073C0  69                 	db	105	;'i'
  1305  0073C1  74                 	db	116	;'t'
  1306  0073C2  68                 	db	104	;'h'
  1307  0073C3  69                 	db	105	;'i'
  1308  0073C4  6E                 	db	110	;'n'
  1309  0073C5  20                 	db	32
  1310  0073C6  74                 	db	116	;'t'
  1311  0073C7  68                 	db	104	;'h'
  1312  0073C8  72                 	db	114	;'r'
  1313  0073C9  65                 	db	101	;'e'
  1314  0073CA  65                 	db	101	;'e'
  1315  0073CB  20                 	db	32
  1316  0073CC  73                 	db	115	;'s'
  1317  0073CD  65                 	db	101	;'e'
  1318  0073CE  63                 	db	99	;'c'
  1319  0073CF  6F                 	db	111	;'o'
  1320  0073D0  6E                 	db	110	;'n'
  1321  0073D1  64                 	db	100	;'d'
  1322  0073D2  73                 	db	115	;'s'
  1323  0073D3  20                 	db	32
  1324  0073D4  74                 	db	116	;'t'
  1325  0073D5  6F                 	db	111	;'o'
  1326  0073D6  20                 	db	32
  1327  0073D7  65                 	db	101	;'e'
  1328  0073D8  6E                 	db	110	;'n'
  1329  0073D9  74                 	db	116	;'t'
  1330  0073DA  65                 	db	101	;'e'
  1331  0073DB  72                 	db	114	;'r'
  1332  0073DC  20                 	db	32
  1333  0073DD  76                 	db	118	;'v'
  1334  0073DE  65                 	db	101	;'e'
  1335  0073DF  72                 	db	114	;'r'
  1336  0073E0  62                 	db	98	;'b'
  1337  0073E1  6F                 	db	111	;'o'
  1338  0073E2  73                 	db	115	;'s'
  1339  0073E3  65                 	db	101	;'e'
  1340  0073E4  20                 	db	32
  1341  0073E5  6D                 	db	109	;'m'
  1342  0073E6  6F                 	db	111	;'o'
  1343  0073E7  64                 	db	100	;'d'
  1344  0073E8  65                 	db	101	;'e'
  1345  0073E9  0D                 	db	13
  1346  0073EA  0A                 	db	10
  1347  0073EB  00                 	db	0
  1348  0073EC                     STR_204:
  1349  0073EC  52                 	db	82	;'R'
  1350  0073ED  65                 	db	101	;'e'
  1351  0073EE  63                 	db	99	;'c'
  1352  0073EF  65                 	db	101	;'e'
  1353  0073F0  69                 	db	105	;'i'
  1354  0073F1  76                 	db	118	;'v'
  1355  0073F2  65                 	db	101	;'e'
  1356  0073F3  72                 	db	114	;'r'
  1357  0073F4  20                 	db	32
  1358  0073F5  69                 	db	105	;'i'
  1359  0073F6  6E                 	db	110	;'n'
  1360  0073F7  20                 	db	32
  1361  0073F8  45                 	db	69	;'E'
  1362  0073F9  72                 	db	114	;'r'
  1363  0073FA  72                 	db	114	;'r'
  1364  0073FB  6F                 	db	111	;'o'
  1365  0073FC  72                 	db	114	;'r'
  1366  0073FD  20                 	db	32
  1367  0073FE  53                 	db	83	;'S'
  1368  0073FF  74                 	db	116	;'t'
  1369  007400  61                 	db	97	;'a'
  1370  007401  74                 	db	116	;'t'
  1371  007402  65                 	db	101	;'e'
  1372  007403  20                 	db	32
  1373  007404  42                 	db	66	;'B'
  1374  007405  75                 	db	117	;'u'
  1375  007406  73                 	db	115	;'s'
  1376  007407  20                 	db	32
  1377  007408  50                 	db	80	;'P'
  1378  007409  61                 	db	97	;'a'
  1379  00740A  73                 	db	115	;'s'
  1380  00740B  73                 	db	115	;'s'
  1381  00740C  69                 	db	105	;'i'
  1382  00740D  76                 	db	118	;'v'
  1383  00740E  65                 	db	101	;'e'
  1384  00740F  20                 	db	32
  1385  007410  28                 	db	40
  1386  007411  52                 	db	82	;'R'
  1387  007412  45                 	db	69	;'E'
  1388  007413  52                 	db	82	;'R'
  1389  007414  52                 	db	82	;'R'
  1390  007415  43                 	db	67	;'C'
  1391  007416  4E                 	db	78	;'N'
  1392  007417  54                 	db	84	;'T'
  1393  007418  20                 	db	32
  1394  007419  3F                 	db	63	;'?'
  1395  00741A  20                 	db	32
  1396  00741B  31                 	db	49	;'1'
  1397  00741C  32                 	db	50	;'2'
  1398  00741D  38                 	db	56	;'8'
  1399  00741E  29                 	db	41
  1400  00741F  0D                 	db	13
  1401  007420  0A                 	db	10
  1402  007421  00                 	db	0
  1403  007422                     STR_71:
  1404  007422  2D                 	db	45
  1405  007423  45                 	db	69	;'E'
  1406  007424  52                 	db	82	;'R'
  1407  007425  52                 	db	82	;'R'
  1408  007426  4F                 	db	79	;'O'
  1409  007427  52                 	db	82	;'R'
  1410  007428  20                 	db	32
  1411  007429  2D                 	db	45
  1412  00742A  20                 	db	32
  1413  00742B  4F                 	db	79	;'O'
  1414  00742C  6E                 	db	110	;'n'
  1415  00742D  65                 	db	101	;'e'
  1416  00742E  20                 	db	32
  1417  00742F  6F                 	db	111	;'o'
  1418  007430  72                 	db	114	;'r'
  1419  007431  20                 	db	32
  1420  007432  6D                 	db	109	;'m'
  1421  007433  6F                 	db	111	;'o'
  1422  007434  72                 	db	114	;'r'
  1423  007435  65                 	db	101	;'e'
  1424  007436  20                 	db	32
  1425  007437  72                 	db	114	;'r'
  1426  007438  65                 	db	101	;'e'
  1427  007439  67                 	db	103	;'g'
  1428  00743A  69                 	db	105	;'i'
  1429  00743B  73                 	db	115	;'s'
  1430  00743C  74                 	db	116	;'t'
  1431  00743D  65                 	db	101	;'e'
  1432  00743E  72                 	db	114	;'r'
  1433  00743F  28                 	db	40
  1434  007440  73                 	db	115	;'s'
  1435  007441  29                 	db	41
  1436  007442  20                 	db	32
  1437  007443  63                 	db	99	;'c'
  1438  007444  6F                 	db	111	;'o'
  1439  007445  75                 	db	117	;'u'
  1440  007446  6C                 	db	108	;'l'
  1441  007447  64                 	db	100	;'d'
  1442  007448  20                 	db	32
  1443  007449  6E                 	db	110	;'n'
  1444  00744A  6F                 	db	111	;'o'
  1445  00744B  74                 	db	116	;'t'
  1446  00744C  20                 	db	32
  1447  00744D  62                 	db	98	;'b'
  1448  00744E  65                 	db	101	;'e'
  1449  00744F  20                 	db	32
  1450  007450  72                 	db	114	;'r'
  1451  007451  65                 	db	101	;'e'
  1452  007452  61                 	db	97	;'a'
  1453  007453  64                 	db	100	;'d'
  1454  007454  2E                 	db	46
  1455  007455  0D                 	db	13
  1456  007456  0A                 	db	10
  1457  007457  00                 	db	0
  1458  007458                     STR_197:
  1459  007458  54                 	db	84	;'T'
  1460  007459  72                 	db	114	;'r'
  1461  00745A  61                 	db	97	;'a'
  1462  00745B  6E                 	db	110	;'n'
  1463  00745C  73                 	db	115	;'s'
  1464  00745D  6D                 	db	109	;'m'
  1465  00745E  69                 	db	105	;'i'
  1466  00745F  74                 	db	116	;'t'
  1467  007460  74                 	db	116	;'t'
  1468  007461  65                 	db	101	;'e'
  1469  007462  72                 	db	114	;'r'
  1470  007463  20                 	db	32
  1471  007464  69                 	db	105	;'i'
  1472  007465  6E                 	db	110	;'n'
  1473  007466  20                 	db	32
  1474  007467  45                 	db	69	;'E'
  1475  007468  72                 	db	114	;'r'
  1476  007469  72                 	db	114	;'r'
  1477  00746A  6F                 	db	111	;'o'
  1478  00746B  72                 	db	114	;'r'
  1479  00746C  20                 	db	32
  1480  00746D  53                 	db	83	;'S'
  1481  00746E  74                 	db	116	;'t'
  1482  00746F  61                 	db	97	;'a'
  1483  007470  74                 	db	116	;'t'
  1484  007471  65                 	db	101	;'e'
  1485  007472  20                 	db	32
  1486  007473  42                 	db	66	;'B'
  1487  007474  75                 	db	117	;'u'
  1488  007475  73                 	db	115	;'s'
  1489  007476  20                 	db	32
  1490  007477  4F                 	db	79	;'O'
  1491  007478  46                 	db	70	;'F'
  1492  007479  46                 	db	70	;'F'
  1493  00747A  20                 	db	32
  1494  00747B  28                 	db	40
  1495  00747C  54                 	db	84	;'T'
  1496  00747D  45                 	db	69	;'E'
  1497  00747E  52                 	db	82	;'R'
  1498  00747F  52                 	db	82	;'R'
  1499  007480  43                 	db	67	;'C'
  1500  007481  4E                 	db	78	;'N'
  1501  007482  54                 	db	84	;'T'
  1502  007483  20                 	db	32
  1503  007484  3F                 	db	63	;'?'
  1504  007485  20                 	db	32
  1505  007486  32                 	db	50	;'2'
  1506  007487  35                 	db	53	;'5'
  1507  007488  36                 	db	54	;'6'
  1508  007489  29                 	db	41
  1509  00748A  0D                 	db	13
  1510  00748B  0A                 	db	10
  1511  00748C  00                 	db	0
  1512  00748D                     STR_2:
  1513  00748D  43                 	db	67	;'C'
  1514  00748E  6F                 	db	111	;'o'
  1515  00748F  70                 	db	112	;'p'
  1516  007490  79                 	db	121	;'y'
  1517  007491  72                 	db	114	;'r'
  1518  007492  69                 	db	105	;'i'
  1519  007493  67                 	db	103	;'g'
  1520  007494  68                 	db	104	;'h'
  1521  007495  74                 	db	116	;'t'
  1522  007496  20                 	db	32
  1523  007497  28                 	db	40
  1524  007498  43                 	db	67	;'C'
  1525  007499  29                 	db	41
  1526  00749A  20                 	db	32
  1527  00749B  32                 	db	50	;'2'
  1528  00749C  30                 	db	48	;'0'
  1529  00749D  31                 	db	49	;'1'
  1530  00749E  34                 	db	52	;'4'
  1531  00749F  2D                 	db	45
  1532  0074A0  32                 	db	50	;'2'
  1533  0074A1  30                 	db	48	;'0'
  1534  0074A2  31                 	db	49	;'1'
  1535  0074A3  35                 	db	53	;'5'
  1536  0074A4  20                 	db	32
  1537  0074A5  47                 	db	71	;'G'
  1538  0074A6  72                 	db	114	;'r'
  1539  0074A7  6F                 	db	111	;'o'
  1540  0074A8  64                 	db	100	;'d'
  1541  0074A9  61                 	db	97	;'a'
  1542  0074AA  6E                 	db	110	;'n'
  1543  0074AB  73                 	db	115	;'s'
  1544  0074AC  20                 	db	32
  1545  0074AD  50                 	db	80	;'P'
  1546  0074AE  61                 	db	97	;'a'
  1547  0074AF  72                 	db	114	;'r'
  1548  0074B0  61                 	db	97	;'a'
  1549  0074B1  64                 	db	100	;'d'
  1550  0074B2  69                 	db	105	;'i'
  1551  0074B3  73                 	db	115	;'s'
  1552  0074B4  20                 	db	32
  1553  0074B5  41                 	db	65	;'A'
  1554  0074B6  42                 	db	66	;'B'
  1555  0074B7  2C                 	db	44
  1556  0074B8  20                 	db	32
  1557  0074B9  53                 	db	83	;'S'
  1558  0074BA  77                 	db	119	;'w'
  1559  0074BB  65                 	db	101	;'e'
  1560  0074BC  64                 	db	100	;'d'
  1561  0074BD  65                 	db	101	;'e'
  1562  0074BE  6E                 	db	110	;'n'
  1563  0074BF  0D                 	db	13
  1564  0074C0  0A                 	db	10
  1565  0074C1  00                 	db	0
  1566  0074C2                     STR_205:
  1567  0074C2  54                 	db	84	;'T'
  1568  0074C3  72                 	db	114	;'r'
  1569  0074C4  61                 	db	97	;'a'
  1570  0074C5  6E                 	db	110	;'n'
  1571  0074C6  73                 	db	115	;'s'
  1572  0074C7  6D                 	db	109	;'m'
  1573  0074C8  69                 	db	105	;'i'
  1574  0074C9  74                 	db	116	;'t'
  1575  0074CA  74                 	db	116	;'t'
  1576  0074CB  65                 	db	101	;'e'
  1577  0074CC  72                 	db	114	;'r'
  1578  0074CD  20                 	db	32
  1579  0074CE  6F                 	db	111	;'o'
  1580  0074CF  72                 	db	114	;'r'
  1581  0074D0  20                 	db	32
  1582  0074D1  52                 	db	82	;'R'
  1583  0074D2  65                 	db	101	;'e'
  1584  0074D3  63                 	db	99	;'c'
  1585  0074D4  65                 	db	101	;'e'
  1586  0074D5  69                 	db	105	;'i'
  1587  0074D6  76                 	db	118	;'v'
  1588  0074D7  65                 	db	101	;'e'
  1589  0074D8  72                 	db	114	;'r'
  1590  0074D9  20                 	db	32
  1591  0074DA  69                 	db	105	;'i'
  1592  0074DB  73                 	db	115	;'s'
  1593  0074DC  20                 	db	32
  1594  0074DD  69                 	db	105	;'i'
  1595  0074DE  6E                 	db	110	;'n'
  1596  0074DF  20                 	db	32
  1597  0074E0  45                 	db	69	;'E'
  1598  0074E1  72                 	db	114	;'r'
  1599  0074E2  72                 	db	114	;'r'
  1600  0074E3  6F                 	db	111	;'o'
  1601  0074E4  72                 	db	114	;'r'
  1602  0074E5  20                 	db	32
  1603  0074E6  53                 	db	83	;'S'
  1604  0074E7  74                 	db	116	;'t'
  1605  0074E8  61                 	db	97	;'a'
  1606  0074E9  74                 	db	116	;'t'
  1607  0074EA  65                 	db	101	;'e'
  1608  0074EB  20                 	db	32
  1609  0074EC  57                 	db	87	;'W'
  1610  0074ED  61                 	db	97	;'a'
  1611  0074EE  72                 	db	114	;'r'
  1612  0074EF  6E                 	db	110	;'n'
  1613  0074F0  69                 	db	105	;'i'
  1614  0074F1  6E                 	db	110	;'n'
  1615  0074F2  67                 	db	103	;'g'
  1616  0074F3  0D                 	db	13
  1617  0074F4  0A                 	db	10
  1618  0074F5  00                 	db	0
  1619  0074F6                     STR_211:
  1620  0074F6  4C                 	db	76	;'L'
  1621  0074F7  49                 	db	73	;'I'
  1622  0074F8  53                 	db	83	;'S'
  1623  0074F9  54                 	db	84	;'T'
  1624  0074FA  45                 	db	69	;'E'
  1625  0074FB  4E                 	db	78	;'N'
  1626  0074FC  20                 	db	32
  1627  0074FD  2D                 	db	45
  1628  0074FE  20                 	db	32
  1629  0074FF  4F                 	db	79	;'O'
  1630  007500  70                 	db	112	;'p'
  1631  007501  65                 	db	101	;'e'
  1632  007502  6E                 	db	110	;'n'
  1633  007503  20                 	db	32
  1634  007504  43                 	db	67	;'C'
  1635  007505  41                 	db	65	;'A'
  1636  007506  4E                 	db	78	;'N'
  1637  007507  20                 	db	32
  1638  007508  69                 	db	105	;'i'
  1639  007509  6E                 	db	110	;'n'
  1640  00750A  74                 	db	116	;'t'
  1641  00750B  65                 	db	101	;'e'
  1642  00750C  72                 	db	114	;'r'
  1643  00750D  66                 	db	102	;'f'
  1644  00750E  61                 	db	97	;'a'
  1645  00750F  63                 	db	99	;'c'
  1646  007510  65                 	db	101	;'e'
  1647  007511  20                 	db	32
  1648  007512  69                 	db	105	;'i'
  1649  007513  6E                 	db	110	;'n'
  1650  007514  20                 	db	32
  1651  007515  6C                 	db	108	;'l'
  1652  007516  69                 	db	105	;'i'
  1653  007517  73                 	db	115	;'s'
  1654  007518  74                 	db	116	;'t'
  1655  007519  65                 	db	101	;'e'
  1656  00751A  6E                 	db	110	;'n'
  1657  00751B  20                 	db	32
  1658  00751C  6F                 	db	111	;'o'
  1659  00751D  6E                 	db	110	;'n'
  1660  00751E  6C                 	db	108	;'l'
  1661  00751F  79                 	db	121	;'y'
  1662  007520  20                 	db	32
  1663  007521  6D                 	db	109	;'m'
  1664  007522  6F                 	db	111	;'o'
  1665  007523  64                 	db	100	;'d'
  1666  007524  65                 	db	101	;'e'
  1667  007525  2E                 	db	46
  1668  007526  0D                 	db	13
  1669  007527  0A                 	db	10
  1670  007528  00                 	db	0
  1671  007529                     STR_102:
  1672  007529  2D                 	db	45
  1673  00752A  45                 	db	69	;'E'
  1674  00752B  52                 	db	82	;'R'
  1675  00752C  52                 	db	82	;'R'
  1676  00752D  4F                 	db	79	;'O'
  1677  00752E  52                 	db	82	;'R'
  1678  00752F  20                 	db	32
  1679  007530  2D                 	db	45
  1680  007531  20                 	db	32
  1681  007532  4D                 	db	77	;'M'
  1682  007533  61                 	db	97	;'a'
  1683  007534  73                 	db	115	;'s'
  1684  007535  6B                 	db	107	;'k'
  1685  007536  20                 	db	32
  1686  007537  6E                 	db	110	;'n'
  1687  007538  75                 	db	117	;'u'
  1688  007539  6D                 	db	109	;'m'
  1689  00753A  62                 	db	98	;'b'
  1690  00753B  65                 	db	101	;'e'
  1691  00753C  72                 	db	114	;'r'
  1692  00753D  20                 	db	32
  1693  00753E  63                 	db	99	;'c'
  1694  00753F  61                 	db	97	;'a'
  1695  007540  6E                 	db	110	;'n'
  1696  007541  20                 	db	32
  1697  007542  6F                 	db	111	;'o'
  1698  007543  6E                 	db	110	;'n'
  1699  007544  6C                 	db	108	;'l'
  1700  007545  79                 	db	121	;'y'
  1701  007546  20                 	db	32
  1702  007547  62                 	db	98	;'b'
  1703  007548  65                 	db	101	;'e'
  1704  007549  20                 	db	32
  1705  00754A  73                 	db	115	;'s'
  1706  00754B  65                 	db	101	;'e'
  1707  00754C  74                 	db	116	;'t'
  1708  00754D  20                 	db	32
  1709  00754E  61                 	db	97	;'a'
  1710  00754F  73                 	db	115	;'s'
  1711  007550  20                 	db	32
  1712  007551  30                 	db	48	;'0'
  1713  007552  20                 	db	32
  1714  007553  6F                 	db	111	;'o'
  1715  007554  72                 	db	114	;'r'
  1716  007555  20                 	db	32
  1717  007556  31                 	db	49	;'1'
  1718  007557  2E                 	db	46
  1719  007558  0D                 	db	13
  1720  007559  0A                 	db	10
  1721  00755A  00                 	db	0
  1722  00755B                     STR_212:
  1723  00755B  4C                 	db	76	;'L'
  1724  00755C  4F                 	db	79	;'O'
  1725  00755D  4F                 	db	79	;'O'
  1726  00755E  50                 	db	80	;'P'
  1727  00755F  42                 	db	66	;'B'
  1728  007560  41                 	db	65	;'A'
  1729  007561  43                 	db	67	;'C'
  1730  007562  4B                 	db	75	;'K'
  1731  007563  20                 	db	32
  1732  007564  2D                 	db	45
  1733  007565  20                 	db	32
  1734  007566  4F                 	db	79	;'O'
  1735  007567  70                 	db	112	;'p'
  1736  007568  65                 	db	101	;'e'
  1737  007569  6E                 	db	110	;'n'
  1738  00756A  20                 	db	32
  1739  00756B  43                 	db	67	;'C'
  1740  00756C  41                 	db	65	;'A'
  1741  00756D  4E                 	db	78	;'N'
  1742  00756E  20                 	db	32
  1743  00756F  69                 	db	105	;'i'
  1744  007570  6E                 	db	110	;'n'
  1745  007571  74                 	db	116	;'t'
  1746  007572  65                 	db	101	;'e'
  1747  007573  72                 	db	114	;'r'
  1748  007574  66                 	db	102	;'f'
  1749  007575  61                 	db	97	;'a'
  1750  007576  63                 	db	99	;'c'
  1751  007577  65                 	db	101	;'e'
  1752  007578  20                 	db	32
  1753  007579  69                 	db	105	;'i'
  1754  00757A  6E                 	db	110	;'n'
  1755  00757B  20                 	db	32
  1756  00757C  6C                 	db	108	;'l'
  1757  00757D  6F                 	db	111	;'o'
  1758  00757E  6F                 	db	111	;'o'
  1759  00757F  70                 	db	112	;'p'
  1760  007580  62                 	db	98	;'b'
  1761  007581  61                 	db	97	;'a'
  1762  007582  63                 	db	99	;'c'
  1763  007583  6B                 	db	107	;'k'
  1764  007584  20                 	db	32
  1765  007585  6D                 	db	109	;'m'
  1766  007586  6F                 	db	111	;'o'
  1767  007587  64                 	db	100	;'d'
  1768  007588  65                 	db	101	;'e'
  1769  007589  2E                 	db	46
  1770  00758A  0D                 	db	13
  1771  00758B  0A                 	db	10
  1772  00758C  00                 	db	0
  1773  00758D                     STR_214:
  1774  00758D  56                 	db	86	;'V'
  1775  00758E  45                 	db	69	;'E'
  1776  00758F  52                 	db	82	;'R'
  1777  007590  53                 	db	83	;'S'
  1778  007591  49                 	db	73	;'I'
  1779  007592  4F                 	db	79	;'O'
  1780  007593  4E                 	db	78	;'N'
  1781  007594  20                 	db	32
  1782  007595  2D                 	db	45
  1783  007596  20                 	db	32
  1784  007597  44                 	db	68	;'D'
  1785  007598  69                 	db	105	;'i'
  1786  007599  73                 	db	115	;'s'
  1787  00759A  70                 	db	112	;'p'
  1788  00759B  6C                 	db	108	;'l'
  1789  00759C  61                 	db	97	;'a'
  1790  00759D  79                 	db	121	;'y'
  1791  00759E  20                 	db	32
  1792  00759F  66                 	db	102	;'f'
  1793  0075A0  69                 	db	105	;'i'
  1794  0075A1  72                 	db	114	;'r'
  1795  0075A2  6D                 	db	109	;'m'
  1796  0075A3  77                 	db	119	;'w'
  1797  0075A4  61                 	db	97	;'a'
  1798  0075A5  72                 	db	114	;'r'
  1799  0075A6  65                 	db	101	;'e'
  1800  0075A7  20                 	db	32
  1801  0075A8  76                 	db	118	;'v'
  1802  0075A9  65                 	db	101	;'e'
  1803  0075AA  72                 	db	114	;'r'
  1804  0075AB  73                 	db	115	;'s'
  1805  0075AC  69                 	db	105	;'i'
  1806  0075AD  6F                 	db	111	;'o'
  1807  0075AE  6E                 	db	110	;'n'
  1808  0075AF  20                 	db	32
  1809  0075B0  69                 	db	105	;'i'
  1810  0075B1  6E                 	db	110	;'n'
  1811  0075B2  66                 	db	102	;'f'
  1812  0075B3  6F                 	db	111	;'o'
  1813  0075B4  72                 	db	114	;'r'
  1814  0075B5  6D                 	db	109	;'m'
  1815  0075B6  61                 	db	97	;'a'
  1816  0075B7  74                 	db	116	;'t'
  1817  0075B8  69                 	db	105	;'i'
  1818  0075B9  6F                 	db	111	;'o'
  1819  0075BA  6E                 	db	110	;'n'
  1820  0075BB  2E                 	db	46
  1821  0075BC  0D                 	db	13
  1822  0075BD  0A                 	db	10
  1823  0075BE  00                 	db	0
  1824  0075BF                     STR_234:
  1825  0075BF  20                 	db	32
  1826  0075C0  20                 	db	32
  1827  0075C1  20                 	db	32
  1828  0075C2  20                 	db	32
  1829  0075C3  20                 	db	32
  1830  0075C4  20                 	db	32
  1831  0075C5  20                 	db	32
  1832  0075C6  20                 	db	32
  1833  0075C7  20                 	db	32
  1834  0075C8  20                 	db	32
  1835  0075C9  20                 	db	32
  1836  0075CA  20                 	db	32
  1837  0075CB  20                 	db	32
  1838  0075CC  20                 	db	32
  1839  0075CD  20                 	db	32
  1840  0075CE  20                 	db	32
  1841  0075CF  46                 	db	70	;'F'
  1842  0075D0  6F                 	db	111	;'o'
  1843  0075D1  72                 	db	114	;'r'
  1844  0075D2  6D                 	db	109	;'m'
  1845  0075D3  61                 	db	97	;'a'
  1846  0075D4  74                 	db	116	;'t'
  1847  0075D5  3A                 	db	58	;':'
  1848  0075D6  20                 	db	32
  1849  0075D7  73                 	db	115	;'s'
  1850  0075D8  65                 	db	101	;'e'
  1851  0075D9  74                 	db	116	;'t'
  1852  0075DA  20                 	db	32
  1853  0075DB  72                 	db	114	;'r'
  1854  0075DC  77                 	db	119	;'w'
  1855  0075DD  74                 	db	116	;'t'
  1856  0075DE  69                 	db	105	;'i'
  1857  0075DF  6D                 	db	109	;'m'
  1858  0075E0  65                 	db	101	;'e'
  1859  0075E1  6F                 	db	111	;'o'
  1860  0075E2  75                 	db	117	;'u'
  1861  0075E3  74                 	db	116	;'t'
  1862  0075E4  20                 	db	32
  1863  0075E5  74                 	db	116	;'t'
  1864  0075E6  69                 	db	105	;'i'
  1865  0075E7  6D                 	db	109	;'m'
  1866  0075E8  65                 	db	101	;'e'
  1867  0075E9  6F                 	db	111	;'o'
  1868  0075EA  75                 	db	117	;'u'
  1869  0075EB  74                 	db	116	;'t'
  1870  0075EC  2E                 	db	46
  1871  0075ED  0D                 	db	13
  1872  0075EE  0A                 	db	10
  1873  0075EF  00                 	db	0
  1874  0075F0                     STR_232:
  1875  0075F0  20                 	db	32
  1876  0075F1  20                 	db	32
  1877  0075F2  20                 	db	32
  1878  0075F3  20                 	db	32
  1879  0075F4  44                 	db	68	;'D'
  1880  0075F5  45                 	db	69	;'E'
  1881  0075F6  43                 	db	67	;'C'
  1882  0075F7  49                 	db	73	;'I'
  1883  0075F8  4D                 	db	77	;'M'
  1884  0075F9  41                 	db	65	;'A'
  1885  0075FA  4C                 	db	76	;'L'
  1886  0075FB  20                 	db	32
  1887  0075FC  2D                 	db	45
  1888  0075FD  20                 	db	32
  1889  0075FE  44                 	db	68	;'D'
  1890  0075FF  69                 	db	105	;'i'
  1891  007600  73                 	db	115	;'s'
  1892  007601  70                 	db	112	;'p'
  1893  007602  6C                 	db	108	;'l'
  1894  007603  61                 	db	97	;'a'
  1895  007604  79                 	db	121	;'y'
  1896  007605  20                 	db	32
  1897  007606  6E                 	db	110	;'n'
  1898  007607  75                 	db	117	;'u'
  1899  007608  6D                 	db	109	;'m'
  1900  007609  65                 	db	101	;'e'
  1901  00760A  72                 	db	114	;'r'
  1902  00760B  69                 	db	105	;'i'
  1903  00760C  63                 	db	99	;'c'
  1904  00760D  61                 	db	97	;'a'
  1905  00760E  6C                 	db	108	;'l'
  1906  00760F  73                 	db	115	;'s'
  1907  007610  20                 	db	32
  1908  007611  69                 	db	105	;'i'
  1909  007612  6E                 	db	110	;'n'
  1910  007613  20                 	db	32
  1911  007614  64                 	db	100	;'d'
  1912  007615  65                 	db	101	;'e'
  1913  007616  63                 	db	99	;'c'
  1914  007617  69                 	db	105	;'i'
  1915  007618  6D                 	db	109	;'m'
  1916  007619  61                 	db	97	;'a'
  1917  00761A  6C                 	db	108	;'l'
  1918  00761B  2E                 	db	46
  1919  00761C  0D                 	db	13
  1920  00761D  0A                 	db	10
  1921  00761E  00                 	db	0
  1922  00761F                     STR_231:
  1923  00761F  20                 	db	32
  1924  007620  20                 	db	32
  1925  007621  20                 	db	32
  1926  007622  20                 	db	32
  1927  007623  48                 	db	72	;'H'
  1928  007624  45                 	db	69	;'E'
  1929  007625  58                 	db	88	;'X'
  1930  007626  20                 	db	32
  1931  007627  2D                 	db	45
  1932  007628  20                 	db	32
  1933  007629  44                 	db	68	;'D'
  1934  00762A  69                 	db	105	;'i'
  1935  00762B  73                 	db	115	;'s'
  1936  00762C  70                 	db	112	;'p'
  1937  00762D  6C                 	db	108	;'l'
  1938  00762E  61                 	db	97	;'a'
  1939  00762F  79                 	db	121	;'y'
  1940  007630  20                 	db	32
  1941  007631  6E                 	db	110	;'n'
  1942  007632  75                 	db	117	;'u'
  1943  007633  6D                 	db	109	;'m'
  1944  007634  65                 	db	101	;'e'
  1945  007635  72                 	db	114	;'r'
  1946  007636  69                 	db	105	;'i'
  1947  007637  63                 	db	99	;'c'
  1948  007638  61                 	db	97	;'a'
  1949  007639  6C                 	db	108	;'l'
  1950  00763A  73                 	db	115	;'s'
  1951  00763B  20                 	db	32
  1952  00763C  69                 	db	105	;'i'
  1953  00763D  6E                 	db	110	;'n'
  1954  00763E  20                 	db	32
  1955  00763F  68                 	db	104	;'h'
  1956  007640  65                 	db	101	;'e'
  1957  007641  78                 	db	120	;'x'
  1958  007642  61                 	db	97	;'a'
  1959  007643  64                 	db	100	;'d'
  1960  007644  65                 	db	101	;'e'
  1961  007645  63                 	db	99	;'c'
  1962  007646  69                 	db	105	;'i'
  1963  007647  6D                 	db	109	;'m'
  1964  007648  61                 	db	97	;'a'
  1965  007649  6C                 	db	108	;'l'
  1966  00764A  2E                 	db	46
  1967  00764B  0D                 	db	13
  1968  00764C  0A                 	db	10
  1969  00764D  00                 	db	0
  1970  00764E                     STR_222:
  1971  00764E  46                 	db	70	;'F'
  1972  00764F  49                 	db	73	;'I'
  1973  007650  4E                 	db	78	;'N'
  1974  007651  44                 	db	68	;'D'
  1975  007652  20                 	db	32
  1976  007653  2D                 	db	45
  1977  007654  20                 	db	32
  1978  007655  46                 	db	70	;'F'
  1979  007656  69                 	db	105	;'i'
  1980  007657  6E                 	db	110	;'n'
  1981  007658  64                 	db	100	;'d'
  1982  007659  20                 	db	32
  1983  00765A  61                 	db	97	;'a'
  1984  00765B  76                 	db	118	;'v'
  1985  00765C  61                 	db	97	;'a'
  1986  00765D  69                 	db	105	;'i'
  1987  00765E  6C                 	db	108	;'l'
  1988  00765F  61                 	db	97	;'a'
  1989  007660  62                 	db	98	;'b'
  1990  007661  6C                 	db	108	;'l'
  1991  007662  65                 	db	101	;'e'
  1992  007663  20                 	db	32
  1993  007664  43                 	db	67	;'C'
  1994  007665  41                 	db	65	;'A'
  1995  007666  4E                 	db	78	;'N'
  1996  007667  34                 	db	52	;'4'
  1997  007668  56                 	db	86	;'V'
  1998  007669  53                 	db	83	;'S'
  1999  00766A  43                 	db	67	;'C'
  2000  00766B  50                 	db	80	;'P'
  2001  00766C  20                 	db	32
  2002  00766D  6E                 	db	110	;'n'
  2003  00766E  6F                 	db	111	;'o'
  2004  00766F  64                 	db	100	;'d'
  2005  007670  65                 	db	101	;'e'
  2006  007671  73                 	db	115	;'s'
  2007  007672  20                 	db	32
  2008  007673  6F                 	db	111	;'o'
  2009  007674  6E                 	db	110	;'n'
  2010  007675  20                 	db	32
  2011  007676  62                 	db	98	;'b'
  2012  007677  75                 	db	117	;'u'
  2013  007678  73                 	db	115	;'s'
  2014  007679  2E                 	db	46
  2015  00767A  0D                 	db	13
  2016  00767B  0A                 	db	10
  2017  00767C  00                 	db	0
  2018  00767D                     STR_210:
  2019  00767D  53                 	db	83	;'S'
  2020  00767E  49                 	db	73	;'I'
  2021  00767F  4C                 	db	76	;'L'
  2022  007680  45                 	db	69	;'E'
  2023  007681  4E                 	db	78	;'N'
  2024  007682  54                 	db	84	;'T'
  2025  007683  20                 	db	32
  2026  007684  2D                 	db	45
  2027  007685  20                 	db	32
  2028  007686  4F                 	db	79	;'O'
  2029  007687  70                 	db	112	;'p'
  2030  007688  65                 	db	101	;'e'
  2031  007689  6E                 	db	110	;'n'
  2032  00768A  20                 	db	32
  2033  00768B  43                 	db	67	;'C'
  2034  00768C  41                 	db	65	;'A'
  2035  00768D  4E                 	db	78	;'N'
  2036  00768E  20                 	db	32
  2037  00768F  69                 	db	105	;'i'
  2038  007690  6E                 	db	110	;'n'
  2039  007691  74                 	db	116	;'t'
  2040  007692  65                 	db	101	;'e'
  2041  007693  72                 	db	114	;'r'
  2042  007694  66                 	db	102	;'f'
  2043  007695  61                 	db	97	;'a'
  2044  007696  63                 	db	99	;'c'
  2045  007697  65                 	db	101	;'e'
  2046  007698  20                 	db	32
  2047  007699  69                 	db	105	;'i'
  2048  00769A  6E                 	db	110	;'n'
  2049  00769B  20                 	db	32
  2050  00769C  73                 	db	115	;'s'
  2051  00769D  69                 	db	105	;'i'
  2052  00769E  6C                 	db	108	;'l'
  2053  00769F  65                 	db	101	;'e'
  2054  0076A0  6E                 	db	110	;'n'
  2055  0076A1  74                 	db	116	;'t'
  2056  0076A2  20                 	db	32
  2057  0076A3  6D                 	db	109	;'m'
  2058  0076A4  6F                 	db	111	;'o'
  2059  0076A5  64                 	db	100	;'d'
  2060  0076A6  65                 	db	101	;'e'
  2061  0076A7  2E                 	db	46
  2062  0076A8  0D                 	db	13
  2063  0076A9  0A                 	db	10
  2064  0076AA  00                 	db	0
  2065  0076AB                     STR_215:
  2066  0076AB  49                 	db	73	;'I'
  2067  0076AC  46                 	db	70	;'F'
  2068  0076AD  4D                 	db	77	;'M'
  2069  0076AE  4F                 	db	79	;'O'
  2070  0076AF  44                 	db	68	;'D'
  2071  0076B0  45                 	db	69	;'E'
  2072  0076B1  20                 	db	32
  2073  0076B2  2D                 	db	45
  2074  0076B3  20                 	db	32
  2075  0076B4  44                 	db	68	;'D'
  2076  0076B5  69                 	db	105	;'i'
  2077  0076B6  73                 	db	115	;'s'
  2078  0076B7  70                 	db	112	;'p'
  2079  0076B8  6C                 	db	108	;'l'
  2080  0076B9  61                 	db	97	;'a'
  2081  0076BA  79                 	db	121	;'y'
  2082  0076BB  20                 	db	32
  2083  0076BC  73                 	db	115	;'s'
  2084  0076BD  65                 	db	101	;'e'
  2085  0076BE  6C                 	db	108	;'l'
  2086  0076BF  65                 	db	101	;'e'
  2087  0076C0  63                 	db	99	;'c'
  2088  0076C1  74                 	db	116	;'t'
  2089  0076C2  65                 	db	101	;'e'
  2090  0076C3  64                 	db	100	;'d'
  2091  0076C4  20                 	db	32
  2092  0076C5  69                 	db	105	;'i'
  2093  0076C6  6E                 	db	110	;'n'
  2094  0076C7  74                 	db	116	;'t'
  2095  0076C8  65                 	db	101	;'e'
  2096  0076C9  72                 	db	114	;'r'
  2097  0076CA  66                 	db	102	;'f'
  2098  0076CB  61                 	db	97	;'a'
  2099  0076CC  63                 	db	99	;'c'
  2100  0076CD  65                 	db	101	;'e'
  2101  0076CE  20                 	db	32
  2102  0076CF  6D                 	db	109	;'m'
  2103  0076D0  6F                 	db	111	;'o'
  2104  0076D1  64                 	db	100	;'d'
  2105  0076D2  65                 	db	101	;'e'
  2106  0076D3  2E                 	db	46
  2107  0076D4  0D                 	db	13
  2108  0076D5  0A                 	db	10
  2109  0076D6  00                 	db	0
  2110  0076D7                     STR_209:
  2111  0076D7  4F                 	db	79	;'O'
  2112  0076D8  50                 	db	80	;'P'
  2113  0076D9  45                 	db	69	;'E'
  2114  0076DA  4E                 	db	78	;'N'
  2115  0076DB  20                 	db	32
  2116  0076DC  2D                 	db	45
  2117  0076DD  20                 	db	32
  2118  0076DE  4F                 	db	79	;'O'
  2119  0076DF  70                 	db	112	;'p'
  2120  0076E0  65                 	db	101	;'e'
  2121  0076E1  6E                 	db	110	;'n'
  2122  0076E2  20                 	db	32
  2123  0076E3  43                 	db	67	;'C'
  2124  0076E4  41                 	db	65	;'A'
  2125  0076E5  4E                 	db	78	;'N'
  2126  0076E6  20                 	db	32
  2127  0076E7  69                 	db	105	;'i'
  2128  0076E8  6E                 	db	110	;'n'
  2129  0076E9  74                 	db	116	;'t'
  2130  0076EA  65                 	db	101	;'e'
  2131  0076EB  72                 	db	114	;'r'
  2132  0076EC  66                 	db	102	;'f'
  2133  0076ED  61                 	db	97	;'a'
  2134  0076EE  63                 	db	99	;'c'
  2135  0076EF  65                 	db	101	;'e'
  2136  0076F0  20                 	db	32
  2137  0076F1  69                 	db	105	;'i'
  2138  0076F2  6E                 	db	110	;'n'
  2139  0076F3  20                 	db	32
  2140  0076F4  6E                 	db	110	;'n'
  2141  0076F5  6F                 	db	111	;'o'
  2142  0076F6  72                 	db	114	;'r'
  2143  0076F7  6D                 	db	109	;'m'
  2144  0076F8  61                 	db	97	;'a'
  2145  0076F9  6C                 	db	108	;'l'
  2146  0076FA  20                 	db	32
  2147  0076FB  6D                 	db	109	;'m'
  2148  0076FC  6F                 	db	111	;'o'
  2149  0076FD  64                 	db	100	;'d'
  2150  0076FE  65                 	db	101	;'e'
  2151  0076FF  2E                 	db	46
  2152  007700  0D                 	db	13
  2153  007701  0A                 	db	10
  2154  007702  00                 	db	0
  2155  007703                     STR_115:
  2156  007703  2B                 	db	43
  2157  007704  4F                 	db	79	;'O'
  2158  007705  4B                 	db	75	;'K'
  2159  007706  20                 	db	32
  2160  007707  2D                 	db	45
  2161  007708  20                 	db	32
  2162  007709  4E                 	db	78	;'N'
  2163  00770A  75                 	db	117	;'u'
  2164  00770B  6D                 	db	109	;'m'
  2165  00770C  65                 	db	101	;'e'
  2166  00770D  72                 	db	114	;'r'
  2167  00770E  69                 	db	105	;'i'
  2168  00770F  63                 	db	99	;'c'
  2169  007710  61                 	db	97	;'a'
  2170  007711  6C                 	db	108	;'l'
  2171  007712  20                 	db	32
  2172  007713  6F                 	db	111	;'o'
  2173  007714  75                 	db	117	;'u'
  2174  007715  74                 	db	116	;'t'
  2175  007716  70                 	db	112	;'p'
  2176  007717  75                 	db	117	;'u'
  2177  007718  74                 	db	116	;'t'
  2178  007719  20                 	db	32
  2179  00771A  6E                 	db	110	;'n'
  2180  00771B  6F                 	db	111	;'o'
  2181  00771C  77                 	db	119	;'w'
  2182  00771D  20                 	db	32
  2183  00771E  69                 	db	105	;'i'
  2184  00771F  6E                 	db	110	;'n'
  2185  007720  20                 	db	32
  2186  007721  68                 	db	104	;'h'
  2187  007722  65                 	db	101	;'e'
  2188  007723  78                 	db	120	;'x'
  2189  007724  61                 	db	97	;'a'
  2190  007725  64                 	db	100	;'d'
  2191  007726  65                 	db	101	;'e'
  2192  007727  63                 	db	99	;'c'
  2193  007728  69                 	db	105	;'i'
  2194  007729  6D                 	db	109	;'m'
  2195  00772A  61                 	db	97	;'a'
  2196  00772B  6C                 	db	108	;'l'
  2197  00772C  0D                 	db	13
  2198  00772D  0A                 	db	10
  2199  00772E  00                 	db	0
  2200  00772F                     STR_92:
  2201  00772F  2D                 	db	45
  2202  007730  45                 	db	69	;'E'
  2203  007731  52                 	db	82	;'R'
  2204  007732  52                 	db	82	;'R'
  2205  007733  4F                 	db	79	;'O'
  2206  007734  52                 	db	82	;'R'
  2207  007735  20                 	db	32
  2208  007736  2D                 	db	45
  2209  007737  20                 	db	32
  2210  007738  66                 	db	102	;'f'
  2211  007739  69                 	db	105	;'i'
  2212  00773A  6C                 	db	108	;'l'
  2213  00773B  74                 	db	116	;'t'
  2214  00773C  65                 	db	101	;'e'
  2215  00773D  72                 	db	114	;'r'
  2216  00773E  20                 	db	32
  2217  00773F  66                 	db	102	;'f'
  2218  007740  6F                 	db	111	;'o'
  2219  007741  72                 	db	114	;'r'
  2220  007742  20                 	db	32
  2221  007743  70                 	db	112	;'p'
  2222  007744  72                 	db	114	;'r'
  2223  007745  69                 	db	105	;'i'
  2224  007746  6F                 	db	111	;'o'
  2225  007747  72                 	db	114	;'r'
  2226  007748  69                 	db	105	;'i'
  2227  007749  74                 	db	116	;'t'
  2228  00774A  79                 	db	121	;'y'
  2229  00774B  20                 	db	32
  2230  00774C  69                 	db	105	;'i'
  2231  00774D  73                 	db	115	;'s'
  2232  00774E  20                 	db	32
  2233  00774F  6D                 	db	109	;'m'
  2234  007750  69                 	db	105	;'i'
  2235  007751  73                 	db	115	;'s'
  2236  007752  73                 	db	115	;'s'
  2237  007753  69                 	db	105	;'i'
  2238  007754  6E                 	db	110	;'n'
  2239  007755  67                 	db	103	;'g'
  2240  007756  0D                 	db	13
  2241  007757  0A                 	db	10
  2242  007758  00                 	db	0
  2243  007759                     STR_98:
  2244  007759  2D                 	db	45
  2245  00775A  45                 	db	69	;'E'
  2246  00775B  52                 	db	82	;'R'
  2247  00775C  52                 	db	82	;'R'
  2248  00775D  4F                 	db	79	;'O'
  2249  00775E  52                 	db	82	;'R'
  2250  00775F  20                 	db	32
  2251  007760  2D                 	db	45
  2252  007761  20                 	db	32
  2253  007762  66                 	db	102	;'f'
  2254  007763  69                 	db	105	;'i'
  2255  007764  6C                 	db	108	;'l'
  2256  007765  74                 	db	116	;'t'
  2257  007766  65                 	db	101	;'e'
  2258  007767  72                 	db	114	;'r'
  2259  007768  20                 	db	32
  2260  007769  66                 	db	102	;'f'
  2261  00776A  6F                 	db	111	;'o'
  2262  00776B  72                 	db	114	;'r'
  2263  00776C  20                 	db	32
  2264  00776D  6E                 	db	110	;'n'
  2265  00776E  69                 	db	105	;'i'
  2266  00776F  64                 	db	100	;'d'
  2267  007770  65                 	db	101	;'e'
  2268  007771  20                 	db	32
  2269  007772  69                 	db	105	;'i'
  2270  007773  64                 	db	100	;'d'
  2271  007774  20                 	db	32
  2272  007775  69                 	db	105	;'i'
  2273  007776  73                 	db	115	;'s'
  2274  007777  20                 	db	32
  2275  007778  6D                 	db	109	;'m'
  2276  007779  69                 	db	105	;'i'
  2277  00777A  73                 	db	115	;'s'
  2278  00777B  73                 	db	115	;'s'
  2279  00777C  69                 	db	105	;'i'
  2280  00777D  6E                 	db	110	;'n'
  2281  00777E  67                 	db	103	;'g'
  2282  00777F  0D                 	db	13
  2283  007780  0A                 	db	10
  2284  007781  00                 	db	0
  2285  007782                     STR_221:
  2286  007782  48                 	db	72	;'H'
  2287  007783  45                 	db	69	;'E'
  2288  007784  4C                 	db	76	;'L'
  2289  007785  50                 	db	80	;'P'
  2290  007786  20                 	db	32
  2291  007787  2D                 	db	45
  2292  007788  20                 	db	32
  2293  007789  44                 	db	68	;'D'
  2294  00778A  69                 	db	105	;'i'
  2295  00778B  73                 	db	115	;'s'
  2296  00778C  70                 	db	112	;'p'
  2297  00778D  6C                 	db	108	;'l'
  2298  00778E  61                 	db	97	;'a'
  2299  00778F  79                 	db	121	;'y'
  2300  007790  20                 	db	32
  2301  007791  74                 	db	116	;'t'
  2302  007792  68                 	db	104	;'h'
  2303  007793  69                 	db	105	;'i'
  2304  007794  73                 	db	115	;'s'
  2305  007795  20                 	db	32
  2306  007796  68                 	db	104	;'h'
  2307  007797  65                 	db	101	;'e'
  2308  007798  6C                 	db	108	;'l'
  2309  007799  70                 	db	112	;'p'
  2310  00779A  20                 	db	32
  2311  00779B  69                 	db	105	;'i'
  2312  00779C  6E                 	db	110	;'n'
  2313  00779D  66                 	db	102	;'f'
  2314  00779E  6F                 	db	111	;'o'
  2315  00779F  72                 	db	114	;'r'
  2316  0077A0  6D                 	db	109	;'m'
  2317  0077A1  61                 	db	97	;'a'
  2318  0077A2  74                 	db	116	;'t'
  2319  0077A3  69                 	db	105	;'i'
  2320  0077A4  6F                 	db	111	;'o'
  2321  0077A5  6E                 	db	110	;'n'
  2322  0077A6  2E                 	db	46
  2323  0077A7  0D                 	db	13
  2324  0077A8  0A                 	db	10
  2325  0077A9  00                 	db	0
  2326  0077AA                     STR_105:
  2327  0077AA  2D                 	db	45
  2328  0077AB  45                 	db	69	;'E'
  2329  0077AC  52                 	db	82	;'R'
  2330  0077AD  52                 	db	82	;'R'
  2331  0077AE  4F                 	db	79	;'O'
  2332  0077AF  52                 	db	82	;'R'
  2333  0077B0  20                 	db	32
  2334  0077B1  2D                 	db	45
  2335  0077B2  20                 	db	32
  2336  0077B3  6D                 	db	109	;'m'
  2337  0077B4  61                 	db	97	;'a'
  2338  0077B5  73                 	db	115	;'s'
  2339  0077B6  6B                 	db	107	;'k'
  2340  0077B7  20                 	db	32
  2341  0077B8  66                 	db	102	;'f'
  2342  0077B9  6F                 	db	111	;'o'
  2343  0077BA  72                 	db	114	;'r'
  2344  0077BB  20                 	db	32
  2345  0077BC  70                 	db	112	;'p'
  2346  0077BD  72                 	db	114	;'r'
  2347  0077BE  69                 	db	105	;'i'
  2348  0077BF  6F                 	db	111	;'o'
  2349  0077C0  72                 	db	114	;'r'
  2350  0077C1  69                 	db	105	;'i'
  2351  0077C2  74                 	db	116	;'t'
  2352  0077C3  79                 	db	121	;'y'
  2353  0077C4  20                 	db	32
  2354  0077C5  69                 	db	105	;'i'
  2355  0077C6  73                 	db	115	;'s'
  2356  0077C7  20                 	db	32
  2357  0077C8  6D                 	db	109	;'m'
  2358  0077C9  69                 	db	105	;'i'
  2359  0077CA  73                 	db	115	;'s'
  2360  0077CB  73                 	db	115	;'s'
  2361  0077CC  69                 	db	105	;'i'
  2362  0077CD  6E                 	db	110	;'n'
  2363  0077CE  67                 	db	103	;'g'
  2364  0077CF  0D                 	db	13
  2365  0077D0  0A                 	db	10
  2366  0077D1  00                 	db	0
  2367  0077D2                     STR_117:
  2368  0077D2  2B                 	db	43
  2369  0077D3  4F                 	db	79	;'O'
  2370  0077D4  4B                 	db	75	;'K'
  2371  0077D5  20                 	db	32
  2372  0077D6  2D                 	db	45
  2373  0077D7  20                 	db	32
  2374  0077D8  4E                 	db	78	;'N'
  2375  0077D9  75                 	db	117	;'u'
  2376  0077DA  6D                 	db	109	;'m'
  2377  0077DB  65                 	db	101	;'e'
  2378  0077DC  72                 	db	114	;'r'
  2379  0077DD  69                 	db	105	;'i'
  2380  0077DE  63                 	db	99	;'c'
  2381  0077DF  61                 	db	97	;'a'
  2382  0077E0  6C                 	db	108	;'l'
  2383  0077E1  20                 	db	32
  2384  0077E2  6F                 	db	111	;'o'
  2385  0077E3  75                 	db	117	;'u'
  2386  0077E4  74                 	db	116	;'t'
  2387  0077E5  70                 	db	112	;'p'
  2388  0077E6  75                 	db	117	;'u'
  2389  0077E7  74                 	db	116	;'t'
  2390  0077E8  20                 	db	32
  2391  0077E9  6E                 	db	110	;'n'
  2392  0077EA  6F                 	db	111	;'o'
  2393  0077EB  77                 	db	119	;'w'
  2394  0077EC  20                 	db	32
  2395  0077ED  69                 	db	105	;'i'
  2396  0077EE  6E                 	db	110	;'n'
  2397  0077EF  20                 	db	32
  2398  0077F0  64                 	db	100	;'d'
  2399  0077F1  65                 	db	101	;'e'
  2400  0077F2  63                 	db	99	;'c'
  2401  0077F3  69                 	db	105	;'i'
  2402  0077F4  6D                 	db	109	;'m'
  2403  0077F5  61                 	db	97	;'a'
  2404  0077F6  6C                 	db	108	;'l'
  2405  0077F7  0D                 	db	13
  2406  0077F8  0A                 	db	10
  2407  0077F9  00                 	db	0
  2408  0077FA                     STR_90:
  2409  0077FA  2D                 	db	45
  2410  0077FB  45                 	db	69	;'E'
  2411  0077FC  52                 	db	82	;'R'
  2412  0077FD  52                 	db	82	;'R'
  2413  0077FE  4F                 	db	79	;'O'
  2414  0077FF  52                 	db	82	;'R'
  2415  007800  20                 	db	32
  2416  007801  2D                 	db	45
  2417  007802  20                 	db	32
  2418  007803  4E                 	db	78	;'N'
  2419  007804  6F                 	db	111	;'o'
  2420  007805  20                 	db	32
  2421  007806  66                 	db	102	;'f'
  2422  007807  69                 	db	105	;'i'
  2423  007808  6C                 	db	108	;'l'
  2424  007809  74                 	db	116	;'t'
  2425  00780A  65                 	db	101	;'e'
  2426  00780B  72                 	db	114	;'r'
  2427  00780C  20                 	db	32
  2428  00780D  6E                 	db	110	;'n'
  2429  00780E  75                 	db	117	;'u'
  2430  00780F  6D                 	db	109	;'m'
  2431  007810  62                 	db	98	;'b'
  2432  007811  65                 	db	101	;'e'
  2433  007812  72                 	db	114	;'r'
  2434  007813  20                 	db	32
  2435  007814  73                 	db	115	;'s'
  2436  007815  70                 	db	112	;'p'
  2437  007816  65                 	db	101	;'e'
  2438  007817  63                 	db	99	;'c'
  2439  007818  69                 	db	105	;'i'
  2440  007819  66                 	db	102	;'f'
  2441  00781A  69                 	db	105	;'i'
  2442  00781B  65                 	db	101	;'e'
  2443  00781C  64                 	db	100	;'d'
  2444  00781D  2E                 	db	46
  2445  00781E  0D                 	db	13
  2446  00781F  0A                 	db	10
  2447  007820  00                 	db	0
  2448  007821                     STR_220:
  2449  007821  45                 	db	69	;'E'
  2450  007822  52                 	db	82	;'R'
  2451  007823  52                 	db	82	;'R'
  2452  007824  20                 	db	32
  2453  007825  2D                 	db	45
  2454  007826  20                 	db	32
  2455  007827  44                 	db	68	;'D'
  2456  007828  69                 	db	105	;'i'
  2457  007829  73                 	db	115	;'s'
  2458  00782A  70                 	db	112	;'p'
  2459  00782B  6C                 	db	108	;'l'
  2460  00782C  61                 	db	97	;'a'
  2461  00782D  79                 	db	121	;'y'
  2462  00782E  20                 	db	32
  2463  00782F  43                 	db	67	;'C'
  2464  007830  41                 	db	65	;'A'
  2465  007831  4E                 	db	78	;'N'
  2466  007832  20                 	db	32
  2467  007833  65                 	db	101	;'e'
  2468  007834  72                 	db	114	;'r'
  2469  007835  72                 	db	114	;'r'
  2470  007836  6F                 	db	111	;'o'
  2471  007837  72                 	db	114	;'r'
  2472  007838  20                 	db	32
  2473  007839  69                 	db	105	;'i'
  2474  00783A  6E                 	db	110	;'n'
  2475  00783B  66                 	db	102	;'f'
  2476  00783C  6F                 	db	111	;'o'
  2477  00783D  72                 	db	114	;'r'
  2478  00783E  6D                 	db	109	;'m'
  2479  00783F  61                 	db	97	;'a'
  2480  007840  74                 	db	116	;'t'
  2481  007841  69                 	db	105	;'i'
  2482  007842  6F                 	db	111	;'o'
  2483  007843  6E                 	db	110	;'n'
  2484  007844  2E                 	db	46
  2485  007845  0D                 	db	13
  2486  007846  0A                 	db	10
  2487  007847  00                 	db	0
  2488  007848                     STR_206:
  2489  007848  48                 	db	72	;'H'
  2490  007849  65                 	db	101	;'e'
  2491  00784A  6C                 	db	108	;'l'
  2492  00784B  70                 	db	112	;'p'
  2493  00784C  20                 	db	32
  2494  00784D  66                 	db	102	;'f'
  2495  00784E  6F                 	db	111	;'o'
  2496  00784F  72                 	db	114	;'r'
  2497  007850  20                 	db	32
  2498  007851  74                 	db	116	;'t'
  2499  007852  68                 	db	104	;'h'
  2500  007853  65                 	db	101	;'e'
  2501  007854  20                 	db	32
  2502  007855  46                 	db	70	;'F'
  2503  007856  72                 	db	114	;'r'
  2504  007857  61                 	db	97	;'a'
  2505  007858  6E                 	db	110	;'n'
  2506  007859  6B                 	db	107	;'k'
  2507  00785A  66                 	db	102	;'f'
  2508  00785B  75                 	db	117	;'u'
  2509  00785C  72                 	db	114	;'r'
  2510  00785D  74                 	db	116	;'t'
  2511  00785E  20                 	db	32
  2512  00785F  52                 	db	82	;'R'
  2513  007860  53                 	db	83	;'S'
  2514  007861  2D                 	db	45
  2515  007862  32                 	db	50	;'2'
  2516  007863  33                 	db	51	;'3'
  2517  007864  32                 	db	50	;'2'
  2518  007865  20                 	db	32
  2519  007866  6D                 	db	109	;'m'
  2520  007867  6F                 	db	111	;'o'
  2521  007868  64                 	db	100	;'d'
  2522  007869  75                 	db	117	;'u'
  2523  00786A  6C                 	db	108	;'l'
  2524  00786B  65                 	db	101	;'e'
  2525  00786C  0D                 	db	13
  2526  00786D  0A                 	db	10
  2527  00786E  00                 	db	0
  2528  00786F                     STR_111:
  2529  00786F  2D                 	db	45
  2530  007870  45                 	db	69	;'E'
  2531  007871  52                 	db	82	;'R'
  2532  007872  52                 	db	82	;'R'
  2533  007873  4F                 	db	79	;'O'
  2534  007874  52                 	db	82	;'R'
  2535  007875  20                 	db	32
  2536  007876  2D                 	db	45
  2537  007877  20                 	db	32
  2538  007878  6D                 	db	109	;'m'
  2539  007879  61                 	db	97	;'a'
  2540  00787A  73                 	db	115	;'s'
  2541  00787B  6B                 	db	107	;'k'
  2542  00787C  20                 	db	32
  2543  00787D  66                 	db	102	;'f'
  2544  00787E  6F                 	db	111	;'o'
  2545  00787F  72                 	db	114	;'r'
  2546  007880  20                 	db	32
  2547  007881  6E                 	db	110	;'n'
  2548  007882  69                 	db	105	;'i'
  2549  007883  64                 	db	100	;'d'
  2550  007884  65                 	db	101	;'e'
  2551  007885  20                 	db	32
  2552  007886  69                 	db	105	;'i'
  2553  007887  64                 	db	100	;'d'
  2554  007888  20                 	db	32
  2555  007889  69                 	db	105	;'i'
  2556  00788A  73                 	db	115	;'s'
  2557  00788B  20                 	db	32
  2558  00788C  6D                 	db	109	;'m'
  2559  00788D  69                 	db	105	;'i'
  2560  00788E  73                 	db	115	;'s'
  2561  00788F  73                 	db	115	;'s'
  2562  007890  69                 	db	105	;'i'
  2563  007891  6E                 	db	110	;'n'
  2564  007892  67                 	db	103	;'g'
  2565  007893  0D                 	db	13
  2566  007894  0A                 	db	10
  2567  007895  00                 	db	0
  2568  007896                     STR_94:
  2569  007896  2D                 	db	45
  2570  007897  45                 	db	69	;'E'
  2571  007898  52                 	db	82	;'R'
  2572  007899  52                 	db	82	;'R'
  2573  00789A  4F                 	db	79	;'O'
  2574  00789B  52                 	db	82	;'R'
  2575  00789C  20                 	db	32
  2576  00789D  2D                 	db	45
  2577  00789E  20                 	db	32
  2578  00789F  66                 	db	102	;'f'
  2579  0078A0  69                 	db	105	;'i'
  2580  0078A1  6C                 	db	108	;'l'
  2581  0078A2  74                 	db	116	;'t'
  2582  0078A3  65                 	db	101	;'e'
  2583  0078A4  72                 	db	114	;'r'
  2584  0078A5  20                 	db	32
  2585  0078A6  66                 	db	102	;'f'
  2586  0078A7  6F                 	db	111	;'o'
  2587  0078A8  72                 	db	114	;'r'
  2588  0078A9  20                 	db	32
  2589  0078AA  63                 	db	99	;'c'
  2590  0078AB  6C                 	db	108	;'l'
  2591  0078AC  61                 	db	97	;'a'
  2592  0078AD  73                 	db	115	;'s'
  2593  0078AE  73                 	db	115	;'s'
  2594  0078AF  20                 	db	32
  2595  0078B0  69                 	db	105	;'i'
  2596  0078B1  73                 	db	115	;'s'
  2597  0078B2  20                 	db	32
  2598  0078B3  6D                 	db	109	;'m'
  2599  0078B4  69                 	db	105	;'i'
  2600  0078B5  73                 	db	115	;'s'
  2601  0078B6  73                 	db	115	;'s'
  2602  0078B7  69                 	db	105	;'i'
  2603  0078B8  6E                 	db	110	;'n'
  2604  0078B9  67                 	db	103	;'g'
  2605  0078BA  0D                 	db	13
  2606  0078BB  0A                 	db	10
  2607  0078BC  00                 	db	0
  2608  0078BD                     STR_237:
  2609  0078BD  20                 	db	32
  2610  0078BE  20                 	db	32
  2611  0078BF  20                 	db	32
  2612  0078C0  20                 	db	32
  2613  0078C1  20                 	db	32
  2614  0078C2  20                 	db	32
  2615  0078C3  20                 	db	32
  2616  0078C4  20                 	db	32
  2617  0078C5  20                 	db	32
  2618  0078C6  20                 	db	32
  2619  0078C7  20                 	db	32
  2620  0078C8  4D                 	db	77	;'M'
  2621  0078C9  6F                 	db	111	;'o'
  2622  0078CA  64                 	db	100	;'d'
  2623  0078CB  65                 	db	101	;'e'
  2624  0078CC  73                 	db	115	;'s'
  2625  0078CD  3A                 	db	58	;':'
  2626  0078CE  20                 	db	32
  2627  0078CF  76                 	db	118	;'v'
  2628  0078D0  65                 	db	101	;'e'
  2629  0078D1  72                 	db	114	;'r'
  2630  0078D2  62                 	db	98	;'b'
  2631  0078D3  6F                 	db	111	;'o'
  2632  0078D4  73                 	db	115	;'s'
  2633  0078D5  65                 	db	101	;'e'
  2634  0078D6  7C                 	db	124
  2635  0078D7  76                 	db	118	;'v'
  2636  0078D8  73                 	db	115	;'s'
  2637  0078D9  63                 	db	99	;'c'
  2638  0078DA  70                 	db	112	;'p'
  2639  0078DB  7C                 	db	124
  2640  0078DC  73                 	db	115	;'s'
  2641  0078DD  6C                 	db	108	;'l'
  2642  0078DE  63                 	db	99	;'c'
  2643  0078DF  61                 	db	97	;'a'
  2644  0078E0  6E                 	db	110	;'n'
  2645  0078E1  0D                 	db	13
  2646  0078E2  0A                 	db	10
  2647  0078E3  00                 	db	0
  2648  0078E4                     STR_96:
  2649  0078E4  2D                 	db	45
  2650  0078E5  45                 	db	69	;'E'
  2651  0078E6  52                 	db	82	;'R'
  2652  0078E7  52                 	db	82	;'R'
  2653  0078E8  4F                 	db	79	;'O'
  2654  0078E9  52                 	db	82	;'R'
  2655  0078EA  20                 	db	32
  2656  0078EB  2D                 	db	45
  2657  0078EC  20                 	db	32
  2658  0078ED  66                 	db	102	;'f'
  2659  0078EE  69                 	db	105	;'i'
  2660  0078EF  6C                 	db	108	;'l'
  2661  0078F0  74                 	db	116	;'t'
  2662  0078F1  65                 	db	101	;'e'
  2663  0078F2  72                 	db	114	;'r'
  2664  0078F3  20                 	db	32
  2665  0078F4  66                 	db	102	;'f'
  2666  0078F5  6F                 	db	111	;'o'
  2667  0078F6  72                 	db	114	;'r'
  2668  0078F7  20                 	db	32
  2669  0078F8  74                 	db	116	;'t'
  2670  0078F9  79                 	db	121	;'y'
  2671  0078FA  70                 	db	112	;'p'
  2672  0078FB  65                 	db	101	;'e'
  2673  0078FC  20                 	db	32
  2674  0078FD  69                 	db	105	;'i'
  2675  0078FE  73                 	db	115	;'s'
  2676  0078FF  20                 	db	32
  2677  007900  6D                 	db	109	;'m'
  2678  007901  69                 	db	105	;'i'
  2679  007902  73                 	db	115	;'s'
  2680  007903  73                 	db	115	;'s'
  2681  007904  69                 	db	105	;'i'
  2682  007905  6E                 	db	110	;'n'
  2683  007906  67                 	db	103	;'g'
  2684  007907  0D                 	db	13
  2685  007908  0A                 	db	10
  2686  007909  00                 	db	0
  2687  00790A                     STR_103:
  2688  00790A  2D                 	db	45
  2689  00790B  45                 	db	69	;'E'
  2690  00790C  52                 	db	82	;'R'
  2691  00790D  52                 	db	82	;'R'
  2692  00790E  4F                 	db	79	;'O'
  2693  00790F  52                 	db	82	;'R'
  2694  007910  20                 	db	32
  2695  007911  2D                 	db	45
  2696  007912  20                 	db	32
  2697  007913  4E                 	db	78	;'N'
  2698  007914  6F                 	db	111	;'o'
  2699  007915  20                 	db	32
  2700  007916  6D                 	db	109	;'m'
  2701  007917  61                 	db	97	;'a'
  2702  007918  73                 	db	115	;'s'
  2703  007919  6B                 	db	107	;'k'
  2704  00791A  20                 	db	32
  2705  00791B  6E                 	db	110	;'n'
  2706  00791C  75                 	db	117	;'u'
  2707  00791D  6D                 	db	109	;'m'
  2708  00791E  62                 	db	98	;'b'
  2709  00791F  65                 	db	101	;'e'
  2710  007920  72                 	db	114	;'r'
  2711  007921  20                 	db	32
  2712  007922  73                 	db	115	;'s'
  2713  007923  70                 	db	112	;'p'
  2714  007924  65                 	db	101	;'e'
  2715  007925  63                 	db	99	;'c'
  2716  007926  69                 	db	105	;'i'
  2717  007927  66                 	db	102	;'f'
  2718  007928  69                 	db	105	;'i'
  2719  007929  65                 	db	101	;'e'
  2720  00792A  64                 	db	100	;'d'
  2721  00792B  2E                 	db	46
  2722  00792C  0D                 	db	13
  2723  00792D  0A                 	db	10
  2724  00792E  00                 	db	0
  2725  00792F                     STR_1:
  2726  00792F  0D                 	db	13
  2727  007930  0A                 	db	10
  2728  007931  46                 	db	70	;'F'
  2729  007932  72                 	db	114	;'r'
  2730  007933  61                 	db	97	;'a'
  2731  007934  6E                 	db	110	;'n'
  2732  007935  6B                 	db	107	;'k'
  2733  007936  66                 	db	102	;'f'
  2734  007937  75                 	db	117	;'u'
  2735  007938  72                 	db	114	;'r'
  2736  007939  74                 	db	116	;'t'
  2737  00793A  20                 	db	32
  2738  00793B  52                 	db	82	;'R'
  2739  00793C  53                 	db	83	;'S'
  2740  00793D  2D                 	db	45
  2741  00793E  32                 	db	50	;'2'
  2742  00793F  33                 	db	51	;'3'
  2743  007940  32                 	db	50	;'2'
  2744  007941  20                 	db	32
  2745  007942  43                 	db	67	;'C'
  2746  007943  41                 	db	65	;'A'
  2747  007944  4E                 	db	78	;'N'
  2748  007945  34                 	db	52	;'4'
  2749  007946  56                 	db	86	;'V'
  2750  007947  53                 	db	83	;'S'
  2751  007948  43                 	db	67	;'C'
  2752  007949  50                 	db	80	;'P'
  2753  00794A  20                 	db	32
  2754  00794B  6D                 	db	109	;'m'
  2755  00794C  6F                 	db	111	;'o'
  2756  00794D  64                 	db	100	;'d'
  2757  00794E  75                 	db	117	;'u'
  2758  00794F  6C                 	db	108	;'l'
  2759  007950  65                 	db	101	;'e'
  2760  007951  0D                 	db	13
  2761  007952  0A                 	db	10
  2762  007953  00                 	db	0
  2763  007954                     STR_107:
  2764  007954  2D                 	db	45
  2765  007955  45                 	db	69	;'E'
  2766  007956  52                 	db	82	;'R'
  2767  007957  52                 	db	82	;'R'
  2768  007958  4F                 	db	79	;'O'
  2769  007959  52                 	db	82	;'R'
  2770  00795A  20                 	db	32
  2771  00795B  2D                 	db	45
  2772  00795C  20                 	db	32
  2773  00795D  6D                 	db	109	;'m'
  2774  00795E  61                 	db	97	;'a'
  2775  00795F  73                 	db	115	;'s'
  2776  007960  6B                 	db	107	;'k'
  2777  007961  20                 	db	32
  2778  007962  66                 	db	102	;'f'
  2779  007963  6F                 	db	111	;'o'
  2780  007964  72                 	db	114	;'r'
  2781  007965  20                 	db	32
  2782  007966  63                 	db	99	;'c'
  2783  007967  6C                 	db	108	;'l'
  2784  007968  61                 	db	97	;'a'
  2785  007969  73                 	db	115	;'s'
  2786  00796A  73                 	db	115	;'s'
  2787  00796B  20                 	db	32
  2788  00796C  69                 	db	105	;'i'
  2789  00796D  73                 	db	115	;'s'
  2790  00796E  20                 	db	32
  2791  00796F  6D                 	db	109	;'m'
  2792  007970  69                 	db	105	;'i'
  2793  007971  73                 	db	115	;'s'
  2794  007972  73                 	db	115	;'s'
  2795  007973  69                 	db	105	;'i'
  2796  007974  6E                 	db	110	;'n'
  2797  007975  67                 	db	103	;'g'
  2798  007976  0D                 	db	13
  2799  007977  0A                 	db	10
  2800  007978  00                 	db	0
  2801  007979                     STR_109:
  2802  007979  2D                 	db	45
  2803  00797A  45                 	db	69	;'E'
  2804  00797B  52                 	db	82	;'R'
  2805  00797C  52                 	db	82	;'R'
  2806  00797D  4F                 	db	79	;'O'
  2807  00797E  52                 	db	82	;'R'
  2808  00797F  20                 	db	32
  2809  007980  2D                 	db	45
  2810  007981  20                 	db	32
  2811  007982  6D                 	db	109	;'m'
  2812  007983  61                 	db	97	;'a'
  2813  007984  73                 	db	115	;'s'
  2814  007985  6B                 	db	107	;'k'
  2815  007986  20                 	db	32
  2816  007987  66                 	db	102	;'f'
  2817  007988  6F                 	db	111	;'o'
  2818  007989  72                 	db	114	;'r'
  2819  00798A  20                 	db	32
  2820  00798B  74                 	db	116	;'t'
  2821  00798C  79                 	db	121	;'y'
  2822  00798D  70                 	db	112	;'p'
  2823  00798E  65                 	db	101	;'e'
  2824  00798F  20                 	db	32
  2825  007990  69                 	db	105	;'i'
  2826  007991  73                 	db	115	;'s'
  2827  007992  20                 	db	32
  2828  007993  6D                 	db	109	;'m'
  2829  007994  69                 	db	105	;'i'
  2830  007995  73                 	db	115	;'s'
  2831  007996  73                 	db	115	;'s'
  2832  007997  69                 	db	105	;'i'
  2833  007998  6E                 	db	110	;'n'
  2834  007999  67                 	db	103	;'g'
  2835  00799A  0D                 	db	13
  2836  00799B  0A                 	db	10
  2837  00799C  00                 	db	0
  2838  00799D                     STR_3:
  2839  00799D  68                 	db	104	;'h'
  2840  00799E  74                 	db	116	;'t'
  2841  00799F  74                 	db	116	;'t'
  2842  0079A0  70                 	db	112	;'p'
  2843  0079A1  3A                 	db	58	;':'
  2844  0079A2  2F                 	db	47
  2845  0079A3  2F                 	db	47
  2846  0079A4  77                 	db	119	;'w'
  2847  0079A5  77                 	db	119	;'w'
  2848  0079A6  77                 	db	119	;'w'
  2849  0079A7  2E                 	db	46
  2850  0079A8  70                 	db	112	;'p'
  2851  0079A9  61                 	db	97	;'a'
  2852  0079AA  72                 	db	114	;'r'
  2853  0079AB  61                 	db	97	;'a'
  2854  0079AC  64                 	db	100	;'d'
  2855  0079AD  69                 	db	105	;'i'
  2856  0079AE  73                 	db	115	;'s'
  2857  0079AF  65                 	db	101	;'e'
  2858  0079B0  6F                 	db	111	;'o'
  2859  0079B1  66                 	db	102	;'f'
  2860  0079B2  74                 	db	116	;'t'
  2861  0079B3  68                 	db	104	;'h'
  2862  0079B4  65                 	db	101	;'e'
  2863  0079B5  66                 	db	102	;'f'
  2864  0079B6  72                 	db	114	;'r'
  2865  0079B7  6F                 	db	111	;'o'
  2866  0079B8  67                 	db	103	;'g'
  2867  0079B9  2E                 	db	46
  2868  0079BA  63                 	db	99	;'c'
  2869  0079BB  6F                 	db	111	;'o'
  2870  0079BC  6D                 	db	109	;'m'
  2871  0079BD  0D                 	db	13
  2872  0079BE  0A                 	db	10
  2873  0079BF  00                 	db	0
  2874  0079C0                     STR_79:
  2875  0079C0  2B                 	db	43
  2876  0079C1  4F                 	db	79	;'O'
  2877  0079C2  4B                 	db	75	;'K'
  2878  0079C3  20                 	db	32
  2879  0079C4  2D                 	db	45
  2880  0079C5  20                 	db	32
  2881  0079C6  56                 	db	86	;'V'
  2882  0079C7  61                 	db	97	;'a'
  2883  0079C8  6C                 	db	108	;'l'
  2884  0079C9  75                 	db	117	;'u'
  2885  0079CA  65                 	db	101	;'e'
  2886  0079CB  20                 	db	32
  2887  0079CC  77                 	db	119	;'w'
  2888  0079CD  72                 	db	114	;'r'
  2889  0079CE  69                 	db	105	;'i'
  2890  0079CF  74                 	db	116	;'t'
  2891  0079D0  74                 	db	116	;'t'
  2892  0079D1  65                 	db	101	;'e'
  2893  0079D2  6E                 	db	110	;'n'
  2894  0079D3  20                 	db	32
  2895  0079D4  73                 	db	115	;'s'
  2896  0079D5  75                 	db	117	;'u'
  2897  0079D6  63                 	db	99	;'c'
  2898  0079D7  63                 	db	99	;'c'
  2899  0079D8  65                 	db	101	;'e'
  2900  0079D9  73                 	db	115	;'s'
  2901  0079DA  73                 	db	115	;'s'
  2902  0079DB  66                 	db	102	;'f'
  2903  0079DC  75                 	db	117	;'u'
  2904  0079DD  6C                 	db	108	;'l'
  2905  0079DE  6C                 	db	108	;'l'
  2906  0079DF  79                 	db	121	;'y'
  2907  0079E0  0D                 	db	13
  2908  0079E1  0A                 	db	10
  2909  0079E2  00                 	db	0
  2910  0079E3                     STR_230:
  2911  0079E3  53                 	db	83	;'S'
  2912  0079E4  45                 	db	69	;'E'
  2913  0079E5  54                 	db	84	;'T'
  2914  0079E6  20                 	db	32
  2915  0079E7  2D                 	db	45
  2916  0079E8  20                 	db	32
  2917  0079E9  50                 	db	80	;'P'
  2918  0079EA  65                 	db	101	;'e'
  2919  0079EB  72                 	db	114	;'r'
  2920  0079EC  73                 	db	115	;'s'
  2921  0079ED  69                 	db	105	;'i'
  2922  0079EE  73                 	db	115	;'s'
  2923  0079EF  74                 	db	116	;'t'
  2924  0079F0  65                 	db	101	;'e'
  2925  0079F1  6E                 	db	110	;'n'
  2926  0079F2  74                 	db	116	;'t'
  2927  0079F3  20                 	db	32
  2928  0079F4  66                 	db	102	;'f'
  2929  0079F5  75                 	db	117	;'u'
  2930  0079F6  6E                 	db	110	;'n'
  2931  0079F7  63                 	db	99	;'c'
  2932  0079F8  74                 	db	116	;'t'
  2933  0079F9  69                 	db	105	;'i'
  2934  0079FA  6F                 	db	111	;'o'
  2935  0079FB  6E                 	db	110	;'n'
  2936  0079FC  61                 	db	97	;'a'
  2937  0079FD  6C                 	db	108	;'l'
  2938  0079FE  69                 	db	105	;'i'
  2939  0079FF  74                 	db	116	;'t'
  2940  007A00  79                 	db	121	;'y'
  2941  007A01  2E                 	db	46
  2942  007A02  0D                 	db	13
  2943  007A03  0A                 	db	10
  2944  007A04  00                 	db	0
  2945  007A05                     STR_64:
  2946  007A05  2D                 	db	45
  2947  007A06  45                 	db	69	;'E'
  2948  007A07  52                 	db	82	;'R'
  2949  007A08  52                 	db	82	;'R'
  2950  007A09  4F                 	db	79	;'O'
  2951  007A0A  52                 	db	82	;'R'
  2952  007A0B  20                 	db	32
  2953  007A0C  2D                 	db	45
  2954  007A0D  20                 	db	32
  2955  007A0E  55                 	db	85	;'U'
  2956  007A0F  6E                 	db	110	;'n'
  2957  007A10  61                 	db	97	;'a'
  2958  007A11  62                 	db	98	;'b'
  2959  007A12  6C                 	db	108	;'l'
  2960  007A13  65                 	db	101	;'e'
  2961  007A14  20                 	db	32
  2962  007A15  74                 	db	116	;'t'
  2963  007A16  6F                 	db	111	;'o'
  2964  007A17  20                 	db	32
  2965  007A18  72                 	db	114	;'r'
  2966  007A19  65                 	db	101	;'e'
  2967  007A1A  61                 	db	97	;'a'
  2968  007A1B  64                 	db	100	;'d'
  2969  007A1C  20                 	db	32
  2970  007A1D  72                 	db	114	;'r'
  2971  007A1E  65                 	db	101	;'e'
  2972  007A1F  67                 	db	103	;'g'
  2973  007A20  69                 	db	105	;'i'
  2974  007A21  73                 	db	115	;'s'
  2975  007A22  74                 	db	116	;'t'
  2976  007A23  65                 	db	101	;'e'
  2977  007A24  72                 	db	114	;'r'
  2978  007A25  20                 	db	32
  2979  007A26  00                 	db	0
  2980  007A27                     STR_219:
  2981  007A27  53                 	db	83	;'S'
  2982  007A28  54                 	db	84	;'T'
  2983  007A29  41                 	db	65	;'A'
  2984  007A2A  54                 	db	84	;'T'
  2985  007A2B  20                 	db	32
  2986  007A2C  2D                 	db	45
  2987  007A2D  20                 	db	32
  2988  007A2E  44                 	db	68	;'D'
  2989  007A2F  69                 	db	105	;'i'
  2990  007A30  73                 	db	115	;'s'
  2991  007A31  70                 	db	112	;'p'
  2992  007A32  6C                 	db	108	;'l'
  2993  007A33  61                 	db	97	;'a'
  2994  007A34  79                 	db	121	;'y'
  2995  007A35  20                 	db	32
  2996  007A36  43                 	db	67	;'C'
  2997  007A37  41                 	db	65	;'A'
  2998  007A38  4E                 	db	78	;'N'
  2999  007A39  20                 	db	32
  3000  007A3A  73                 	db	115	;'s'
  3001  007A3B  74                 	db	116	;'t'
  3002  007A3C  61                 	db	97	;'a'
  3003  007A3D  74                 	db	116	;'t'
  3004  007A3E  69                 	db	105	;'i'
  3005  007A3F  73                 	db	115	;'s'
  3006  007A40  74                 	db	116	;'t'
  3007  007A41  69                 	db	105	;'i'
  3008  007A42  63                 	db	99	;'c'
  3009  007A43  73                 	db	115	;'s'
  3010  007A44  2E                 	db	46
  3011  007A45  0D                 	db	13
  3012  007A46  0A                 	db	10
  3013  007A47  00                 	db	0
  3014  007A48                     STR_37:
  3015  007A48  2D                 	db	45
  3016  007A49  45                 	db	69	;'E'
  3017  007A4A  52                 	db	82	;'R'
  3018  007A4B  52                 	db	82	;'R'
  3019  007A4C  4F                 	db	79	;'O'
  3020  007A4D  52                 	db	82	;'R'
  3021  007A4E  20                 	db	32
  3022  007A4F  2D                 	db	45
  3023  007A50  20                 	db	32
  3024  007A51  46                 	db	70	;'F'
  3025  007A52  61                 	db	97	;'a'
  3026  007A53  69                 	db	105	;'i'
  3027  007A54  6C                 	db	108	;'l'
  3028  007A55  65                 	db	101	;'e'
  3029  007A56  64                 	db	100	;'d'
  3030  007A57  20                 	db	32
  3031  007A58  74                 	db	116	;'t'
  3032  007A59  6F                 	db	111	;'o'
  3033  007A5A  20                 	db	32
  3034  007A5B  73                 	db	115	;'s'
  3035  007A5C  65                 	db	101	;'e'
  3036  007A5D  6E                 	db	110	;'n'
  3037  007A5E  64                 	db	100	;'d'
  3038  007A5F  20                 	db	32
  3039  007A60  65                 	db	101	;'e'
  3040  007A61  76                 	db	118	;'v'
  3041  007A62  65                 	db	101	;'e'
  3042  007A63  6E                 	db	110	;'n'
  3043  007A64  74                 	db	116	;'t'
  3044  007A65  2E                 	db	46
  3045  007A66  0D                 	db	13
  3046  007A67  0A                 	db	10
  3047  007A68  00                 	db	0
  3048  007A69                     STR_130:
  3049  007A69  2D                 	db	45
  3050  007A6A  45                 	db	69	;'E'
  3051  007A6B  52                 	db	82	;'R'
  3052  007A6C  52                 	db	82	;'R'
  3053  007A6D  4F                 	db	79	;'O'
  3054  007A6E  52                 	db	82	;'R'
  3055  007A6F  20                 	db	32
  3056  007A70  2D                 	db	45
  3057  007A71  20                 	db	32
  3058  007A72  55                 	db	85	;'U'
  3059  007A73  6E                 	db	110	;'n'
  3060  007A74  6B                 	db	107	;'k'
  3061  007A75  6E                 	db	110	;'n'
  3062  007A76  6F                 	db	111	;'o'
  3063  007A77  77                 	db	119	;'w'
  3064  007A78  6E                 	db	110	;'n'
  3065  007A79  20                 	db	32
  3066  007A7A  27                 	db	39
  3067  007A7B  53                 	db	83	;'S'
  3068  007A7C  45                 	db	69	;'E'
  3069  007A7D  54                 	db	84	;'T'
  3070  007A7E  27                 	db	39
  3071  007A7F  20                 	db	32
  3072  007A80  63                 	db	99	;'c'
  3073  007A81  6F                 	db	111	;'o'
  3074  007A82  6D                 	db	109	;'m'
  3075  007A83  6D                 	db	109	;'m'
  3076  007A84  61                 	db	97	;'a'
  3077  007A85  6E                 	db	110	;'n'
  3078  007A86  64                 	db	100	;'d'
  3079  007A87  0D                 	db	13
  3080  007A88  0A                 	db	10
  3081  007A89  00                 	db	0
  3082  007A8A                     STR_80:
  3083  007A8A  2D                 	db	45
  3084  007A8B  45                 	db	69	;'E'
  3085  007A8C  52                 	db	82	;'R'
  3086  007A8D  52                 	db	82	;'R'
  3087  007A8E  4F                 	db	79	;'O'
  3088  007A8F  52                 	db	82	;'R'
  3089  007A90  20                 	db	32
  3090  007A91  2D                 	db	45
  3091  007A92  20                 	db	32
  3092  007A93  46                 	db	70	;'F'
  3093  007A94  61                 	db	97	;'a'
  3094  007A95  69                 	db	105	;'i'
  3095  007A96  6C                 	db	108	;'l'
  3096  007A97  65                 	db	101	;'e'
  3097  007A98  64                 	db	100	;'d'
  3098  007A99  20                 	db	32
  3099  007A9A  74                 	db	116	;'t'
  3100  007A9B  6F                 	db	111	;'o'
  3101  007A9C  20                 	db	32
  3102  007A9D  77                 	db	119	;'w'
  3103  007A9E  72                 	db	114	;'r'
  3104  007A9F  69                 	db	105	;'i'
  3105  007AA0  74                 	db	116	;'t'
  3106  007AA1  65                 	db	101	;'e'
  3107  007AA2  20                 	db	32
  3108  007AA3  76                 	db	118	;'v'
  3109  007AA4  61                 	db	97	;'a'
  3110  007AA5  6C                 	db	108	;'l'
  3111  007AA6  75                 	db	117	;'u'
  3112  007AA7  65                 	db	101	;'e'
  3113  007AA8  0D                 	db	13
  3114  007AA9  0A                 	db	10
  3115  007AAA  00                 	db	0
  3116  007AAB                     STR_53:
  3117  007AAB  2D                 	db	45
  3118  007AAC  45                 	db	69	;'E'
  3119  007AAD  52                 	db	82	;'R'
  3120  007AAE  52                 	db	82	;'R'
  3121  007AAF  4F                 	db	79	;'O'
  3122  007AB0  52                 	db	82	;'R'
  3123  007AB1  20                 	db	32
  3124  007AB2  2D                 	db	45
  3125  007AB3  20                 	db	32
  3126  007AB4  4E                 	db	78	;'N'
  3127  007AB5  65                 	db	101	;'e'
  3128  007AB6  65                 	db	101	;'e'
  3129  007AB7  64                 	db	100	;'d'
  3130  007AB8  73                 	db	115	;'s'
  3131  007AB9  20                 	db	32
  3132  007ABA  5B                 	db	91	;'['
  3133  007ABB  70                 	db	112	;'p'
  3134  007ABC  61                 	db	97	;'a'
  3135  007ABD  67                 	db	103	;'g'
  3136  007ABE  65                 	db	101	;'e'
  3137  007ABF  3A                 	db	58	;':'
  3138  007AC0  5D                 	db	93	;']'
  3139  007AC1  72                 	db	114	;'r'
  3140  007AC2  65                 	db	101	;'e'
  3141  007AC3  67                 	db	103	;'g'
  3142  007AC4  69                 	db	105	;'i'
  3143  007AC5  73                 	db	115	;'s'
  3144  007AC6  74                 	db	116	;'t'
  3145  007AC7  65                 	db	101	;'e'
  3146  007AC8  72                 	db	114	;'r'
  3147  007AC9  0D                 	db	13
  3148  007ACA  0A                 	db	10
  3149  007ACB  00                 	db	0
  3150  007ACC                     STR_125:
  3151  007ACC  2B                 	db	43
  3152  007ACD  4F                 	db	79	;'O'
  3153  007ACE  4B                 	db	75	;'K'
  3154  007ACF  20                 	db	32
  3155  007AD0  2D                 	db	45
  3156  007AD1  20                 	db	32
  3157  007AD2  4D                 	db	77	;'M'
  3158  007AD3  6F                 	db	111	;'o'
  3159  007AD4  64                 	db	100	;'d'
  3160  007AD5  65                 	db	101	;'e'
  3161  007AD6  20                 	db	32
  3162  007AD7  69                 	db	105	;'i'
  3163  007AD8  73                 	db	115	;'s'
  3164  007AD9  20                 	db	32
  3165  007ADA  6E                 	db	110	;'n'
  3166  007ADB  6F                 	db	111	;'o'
  3167  007ADC  77                 	db	119	;'w'
  3168  007ADD  20                 	db	32
  3169  007ADE  56                 	db	86	;'V'
  3170  007ADF  53                 	db	83	;'S'
  3171  007AE0  43                 	db	67	;'C'
  3172  007AE1  50                 	db	80	;'P'
  3173  007AE2  20                 	db	32
  3174  007AE3  44                 	db	68	;'D'
  3175  007AE4  72                 	db	114	;'r'
  3176  007AE5  69                 	db	105	;'i'
  3177  007AE6  76                 	db	118	;'v'
  3178  007AE7  65                 	db	101	;'e'
  3179  007AE8  72                 	db	114	;'r'
  3180  007AE9  0D                 	db	13
  3181  007AEA  0A                 	db	10
  3182  007AEB  00                 	db	0
  3183  007AEC                     STR_7:
  3184  007AEC  57                 	db	87	;'W'
  3185  007AED  69                 	db	105	;'i'
  3186  007AEE  6C                 	db	108	;'l'
  3187  007AEF  6C                 	db	108	;'l'
  3188  007AF0  20                 	db	32
  3189  007AF1  65                 	db	101	;'e'
  3190  007AF2  6E                 	db	110	;'n'
  3191  007AF3  74                 	db	116	;'t'
  3192  007AF4  65                 	db	101	;'e'
  3193  007AF5  72                 	db	114	;'r'
  3194  007AF6  20                 	db	32
  3195  007AF7  62                 	db	98	;'b'
  3196  007AF8  6F                 	db	111	;'o'
  3197  007AF9  6F                 	db	111	;'o'
  3198  007AFA  74                 	db	116	;'t'
  3199  007AFB  6C                 	db	108	;'l'
  3200  007AFC  6F                 	db	111	;'o'
  3201  007AFD  61                 	db	97	;'a'
  3202  007AFE  64                 	db	100	;'d'
  3203  007AFF  65                 	db	101	;'e'
  3204  007B00  72                 	db	114	;'r'
  3205  007B01  20                 	db	32
  3206  007B02  6E                 	db	110	;'n'
  3207  007B03  6F                 	db	111	;'o'
  3208  007B04  77                 	db	119	;'w'
  3209  007B05  2E                 	db	46
  3210  007B06  2E                 	db	46
  3211  007B07  2E                 	db	46
  3212  007B08  0D                 	db	13
  3213  007B09  0A                 	db	10
  3214  007B0A  00                 	db	0
  3215  007B0B                     STR_213:
  3216  007B0B  43                 	db	67	;'C'
  3217  007B0C  4C                 	db	76	;'L'
  3218  007B0D  4F                 	db	79	;'O'
  3219  007B0E  53                 	db	83	;'S'
  3220  007B0F  45                 	db	69	;'E'
  3221  007B10  20                 	db	32
  3222  007B11  2D                 	db	45
  3223  007B12  20                 	db	32
  3224  007B13  43                 	db	67	;'C'
  3225  007B14  6C                 	db	108	;'l'
  3226  007B15  6F                 	db	111	;'o'
  3227  007B16  73                 	db	115	;'s'
  3228  007B17  65                 	db	101	;'e'
  3229  007B18  20                 	db	32
  3230  007B19  43                 	db	67	;'C'
  3231  007B1A  41                 	db	65	;'A'
  3232  007B1B  4E                 	db	78	;'N'
  3233  007B1C  20                 	db	32
  3234  007B1D  69                 	db	105	;'i'
  3235  007B1E  6E                 	db	110	;'n'
  3236  007B1F  74                 	db	116	;'t'
  3237  007B20  65                 	db	101	;'e'
  3238  007B21  72                 	db	114	;'r'
  3239  007B22  66                 	db	102	;'f'
  3240  007B23  61                 	db	97	;'a'
  3241  007B24  63                 	db	99	;'c'
  3242  007B25  65                 	db	101	;'e'
  3243  007B26  2E                 	db	46
  3244  007B27  0D                 	db	13
  3245  007B28  0A                 	db	10
  3246  007B29  00                 	db	0
  3247  007B2A                     STR_5:
  3248  007B2A  54                 	db	84	;'T'
  3249  007B2B  65                 	db	101	;'e'
  3250  007B2C  6D                 	db	109	;'m'
  3251  007B2D  70                 	db	112	;'p'
  3252  007B2E  6F                 	db	111	;'o'
  3253  007B2F  72                 	db	114	;'r'
  3254  007B30  61                 	db	97	;'a'
  3255  007B31  72                 	db	114	;'r'
  3256  007B32  79                 	db	121	;'y'
  3257  007B33  20                 	db	32
  3258  007B34  76                 	db	118	;'v'
  3259  007B35  65                 	db	101	;'e'
  3260  007B36  72                 	db	114	;'r'
  3261  007B37  62                 	db	98	;'b'
  3262  007B38  6F                 	db	111	;'o'
  3263  007B39  73                 	db	115	;'s'
  3264  007B3A  65                 	db	101	;'e'
  3265  007B3B  20                 	db	32
  3266  007B3C  6D                 	db	109	;'m'
  3267  007B3D  6F                 	db	111	;'o'
  3268  007B3E  64                 	db	100	;'d'
  3269  007B3F  65                 	db	101	;'e'
  3270  007B40  20                 	db	32
  3271  007B41  73                 	db	115	;'s'
  3272  007B42  65                 	db	101	;'e'
  3273  007B43  74                 	db	116	;'t'
  3274  007B44  0D                 	db	13
  3275  007B45  0A                 	db	10
  3276  007B46  00                 	db	0
  3277  007B47                     STR_123:
  3278  007B47  2B                 	db	43
  3279  007B48  4F                 	db	79	;'O'
  3280  007B49  4B                 	db	75	;'K'
  3281  007B4A  20                 	db	32
  3282  007B4B  2D                 	db	45
  3283  007B4C  20                 	db	32
  3284  007B4D  4D                 	db	77	;'M'
  3285  007B4E  6F                 	db	111	;'o'
  3286  007B4F  64                 	db	100	;'d'
  3287  007B50  65                 	db	101	;'e'
  3288  007B51  20                 	db	32
  3289  007B52  69                 	db	105	;'i'
  3290  007B53  73                 	db	115	;'s'
  3291  007B54  20                 	db	32
  3292  007B55  6E                 	db	110	;'n'
  3293  007B56  6F                 	db	111	;'o'
  3294  007B57  77                 	db	119	;'w'
  3295  007B58  20                 	db	32
  3296  007B59  76                 	db	118	;'v'
  3297  007B5A  65                 	db	101	;'e'
  3298  007B5B  72                 	db	114	;'r'
  3299  007B5C  62                 	db	98	;'b'
  3300  007B5D  6F                 	db	111	;'o'
  3301  007B5E  73                 	db	115	;'s'
  3302  007B5F  65                 	db	101	;'e'
  3303  007B60  0D                 	db	13
  3304  007B61  0A                 	db	10
  3305  007B62  00                 	db	0
  3306  007B63                     STR_208:
  3307  007B63  42                 	db	66	;'B'
  3308  007B64  4F                 	db	79	;'O'
  3309  007B65  4F                 	db	79	;'O'
  3310  007B66  54                 	db	84	;'T'
  3311  007B67  20                 	db	32
  3312  007B68  2D                 	db	45
  3313  007B69  20                 	db	32
  3314  007B6A  45                 	db	69	;'E'
  3315  007B6B  6E                 	db	110	;'n'
  3316  007B6C  74                 	db	116	;'t'
  3317  007B6D  65                 	db	101	;'e'
  3318  007B6E  72                 	db	114	;'r'
  3319  007B6F  20                 	db	32
  3320  007B70  62                 	db	98	;'b'
  3321  007B71  6F                 	db	111	;'o'
  3322  007B72  6F                 	db	111	;'o'
  3323  007B73  74                 	db	116	;'t'
  3324  007B74  6C                 	db	108	;'l'
  3325  007B75  6F                 	db	111	;'o'
  3326  007B76  61                 	db	97	;'a'
  3327  007B77  64                 	db	100	;'d'
  3328  007B78  65                 	db	101	;'e'
  3329  007B79  72                 	db	114	;'r'
  3330  007B7A  2E                 	db	46
  3331  007B7B  0D                 	db	13
  3332  007B7C  0A                 	db	10
  3333  007B7D  00                 	db	0
  3334  007B7E                     STR_132:
  3335  007B7E  2D                 	db	45
  3336  007B7F  45                 	db	69	;'E'
  3337  007B80  52                 	db	82	;'R'
  3338  007B81  52                 	db	82	;'R'
  3339  007B82  4F                 	db	79	;'O'
  3340  007B83  52                 	db	82	;'R'
  3341  007B84  20                 	db	32
  3342  007B85  2D                 	db	45
  3343  007B86  20                 	db	32
  3344  007B87  55                 	db	85	;'U'
  3345  007B88  6E                 	db	110	;'n'
  3346  007B89  6B                 	db	107	;'k'
  3347  007B8A  6E                 	db	110	;'n'
  3348  007B8B  6F                 	db	111	;'o'
  3349  007B8C  77                 	db	119	;'w'
  3350  007B8D  6E                 	db	110	;'n'
  3351  007B8E  20                 	db	32
  3352  007B8F  63                 	db	99	;'c'
  3353  007B90  6F                 	db	111	;'o'
  3354  007B91  6D                 	db	109	;'m'
  3355  007B92  6D                 	db	109	;'m'
  3356  007B93  61                 	db	97	;'a'
  3357  007B94  6E                 	db	110	;'n'
  3358  007B95  64                 	db	100	;'d'
  3359  007B96  0D                 	db	13
  3360  007B97  0A                 	db	10
  3361  007B98  00                 	db	0
  3362  007B99                     STR_239:
  3363  007B99  4E                 	db	78	;'N'
  3364  007B9A  6F                 	db	111	;'o'
  3365  007B9B  64                 	db	100	;'d'
  3366  007B9C  65                 	db	101	;'e'
  3367  007B9D  20                 	db	32
  3368  007B9E  66                 	db	102	;'f'
  3369  007B9F  6F                 	db	111	;'o'
  3370  007BA0  75                 	db	117	;'u'
  3371  007BA1  6E                 	db	110	;'n'
  3372  007BA2  64                 	db	100	;'d'
  3373  007BA3  20                 	db	32
  3374  007BA4  77                 	db	119	;'w'
  3375  007BA5  69                 	db	105	;'i'
  3376  007BA6  74                 	db	116	;'t'
  3377  007BA7  68                 	db	104	;'h'
  3378  007BA8  20                 	db	32
  3379  007BA9  6E                 	db	110	;'n'
  3380  007BAA  6F                 	db	111	;'o'
  3381  007BAB  64                 	db	100	;'d'
  3382  007BAC  65                 	db	101	;'e'
  3383  007BAD  20                 	db	32
  3384  007BAE  69                 	db	105	;'i'
  3385  007BAF  64                 	db	100	;'d'
  3386  007BB0  20                 	db	32
  3387  007BB1  3D                 	db	61	;'='
  3388  007BB2  20                 	db	32
  3389  007BB3  00                 	db	0
  3390  007BB4                     STR_127:
  3391  007BB4  2B                 	db	43
  3392  007BB5  4F                 	db	79	;'O'
  3393  007BB6  4B                 	db	75	;'K'
  3394  007BB7  20                 	db	32
  3395  007BB8  2D                 	db	45
  3396  007BB9  20                 	db	32
  3397  007BBA  4D                 	db	77	;'M'
  3398  007BBB  6F                 	db	111	;'o'
  3399  007BBC  64                 	db	100	;'d'
  3400  007BBD  65                 	db	101	;'e'
  3401  007BBE  20                 	db	32
  3402  007BBF  69                 	db	105	;'i'
  3403  007BC0  73                 	db	115	;'s'
  3404  007BC1  20                 	db	32
  3405  007BC2  6E                 	db	110	;'n'
  3406  007BC3  6F                 	db	111	;'o'
  3407  007BC4  77                 	db	119	;'w'
  3408  007BC5  20                 	db	32
  3409  007BC6  53                 	db	83	;'S'
  3410  007BC7  4C                 	db	76	;'L'
  3411  007BC8  43                 	db	67	;'C'
  3412  007BC9  41                 	db	65	;'A'
  3413  007BCA  4E                 	db	78	;'N'
  3414  007BCB  0D                 	db	13
  3415  007BCC  0A                 	db	10
  3416  007BCD  00                 	db	0
  3417  007BCE                     STR_25:
  3418  007BCE  2B                 	db	43
  3419  007BCF  4F                 	db	79	;'O'
  3420  007BD0  4B                 	db	75	;'K'
  3421  007BD1  20                 	db	32
  3422  007BD2  2D                 	db	45
  3423  007BD3  20                 	db	32
  3424  007BD4  4C                 	db	76	;'L'
  3425  007BD5  69                 	db	105	;'i'
  3426  007BD6  73                 	db	115	;'s'
  3427  007BD7  74                 	db	116	;'t'
  3428  007BD8  65                 	db	101	;'e'
  3429  007BD9  6E                 	db	110	;'n'
  3430  007BDA  20                 	db	32
  3431  007BDB  6F                 	db	111	;'o'
  3432  007BDC  6E                 	db	110	;'n'
  3433  007BDD  6C                 	db	108	;'l'
  3434  007BDE  79                 	db	121	;'y'
  3435  007BDF  20                 	db	32
  3436  007BE0  6D                 	db	109	;'m'
  3437  007BE1  6F                 	db	111	;'o'
  3438  007BE2  64                 	db	100	;'d'
  3439  007BE3  65                 	db	101	;'e'
  3440  007BE4  0D                 	db	13
  3441  007BE5  0A                 	db	10
  3442  007BE6  00                 	db	0
  3443  007BE7                     STR_192:
  3444  007BE7  54                 	db	84	;'T'
  3445  007BE8  72                 	db	114	;'r'
  3446  007BE9  61                 	db	97	;'a'
  3447  007BEA  6E                 	db	110	;'n'
  3448  007BEB  73                 	db	115	;'s'
  3449  007BEC  6D                 	db	109	;'m'
  3450  007BED  69                 	db	105	;'i'
  3451  007BEE  74                 	db	116	;'t'
  3452  007BEF  20                 	db	32
  3453  007BF0  45                 	db	69	;'E'
  3454  007BF1  72                 	db	114	;'r'
  3455  007BF2  72                 	db	114	;'r'
  3456  007BF3  6F                 	db	111	;'o'
  3457  007BF4  72                 	db	114	;'r'
  3458  007BF5  20                 	db	32
  3459  007BF6  43                 	db	67	;'C'
  3460  007BF7  6F                 	db	111	;'o'
  3461  007BF8  75                 	db	117	;'u'
  3462  007BF9  6E                 	db	110	;'n'
  3463  007BFA  74                 	db	116	;'t'
  3464  007BFB  65                 	db	101	;'e'
  3465  007BFC  72                 	db	114	;'r'
  3466  007BFD  3A                 	db	58	;':'
  3467  007BFE  20                 	db	32
  3468  007BFF  00                 	db	0
  3469  007C00                     STR_216:
  3470  007C00  54                 	db	84	;'T'
  3471  007C01  58                 	db	88	;'X'
  3472  007C02  20                 	db	32
  3473  007C03  2D                 	db	45
  3474  007C04  20                 	db	32
  3475  007C05  53                 	db	83	;'S'
  3476  007C06  65                 	db	101	;'e'
  3477  007C07  6E                 	db	110	;'n'
  3478  007C08  64                 	db	100	;'d'
  3479  007C09  20                 	db	32
  3480  007C0A  43                 	db	67	;'C'
  3481  007C0B  41                 	db	65	;'A'
  3482  007C0C  4E                 	db	78	;'N'
  3483  007C0D  20                 	db	32
  3484  007C0E  66                 	db	102	;'f'
  3485  007C0F  72                 	db	114	;'r'
  3486  007C10  61                 	db	97	;'a'
  3487  007C11  6D                 	db	109	;'m'
  3488  007C12  65                 	db	101	;'e'
  3489  007C13  20                 	db	32
  3490  007C14  2E                 	db	46
  3491  007C15  0D                 	db	13
  3492  007C16  0A                 	db	10
  3493  007C17  00                 	db	0
  3494  007C18                     STR_226:
  3495  007C18  46                 	db	70	;'F'
  3496  007C19  49                 	db	73	;'I'
  3497  007C1A  4C                 	db	76	;'L'
  3498  007C1B  54                 	db	84	;'T'
  3499  007C1C  45                 	db	69	;'E'
  3500  007C1D  52                 	db	82	;'R'
  3501  007C1E  20                 	db	32
  3502  007C1F  2D                 	db	45
  3503  007C20  20                 	db	32
  3504  007C21  53                 	db	83	;'S'
  3505  007C22  65                 	db	101	;'e'
  3506  007C23  74                 	db	116	;'t'
  3507  007C24  20                 	db	32
  3508  007C25  66                 	db	102	;'f'
  3509  007C26  69                 	db	105	;'i'
  3510  007C27  6C                 	db	108	;'l'
  3511  007C28  74                 	db	116	;'t'
  3512  007C29  65                 	db	101	;'e'
  3513  007C2A  72                 	db	114	;'r'
  3514  007C2B  20                 	db	32
  3515  007C2C  2E                 	db	46
  3516  007C2D  0D                 	db	13
  3517  007C2E  0A                 	db	10
  3518  007C2F  00                 	db	0
  3519  007C30                     STR_51:
  3520  007C30  2D                 	db	45
  3521  007C31  45                 	db	69	;'E'
  3522  007C32  52                 	db	82	;'R'
  3523  007C33  52                 	db	82	;'R'
  3524  007C34  4F                 	db	79	;'O'
  3525  007C35  52                 	db	82	;'R'
  3526  007C36  20                 	db	32
  3527  007C37  2D                 	db	45
  3528  007C38  20                 	db	32
  3529  007C39  4E                 	db	78	;'N'
  3530  007C3A  65                 	db	101	;'e'
  3531  007C3B  65                 	db	101	;'e'
  3532  007C3C  64                 	db	100	;'d'
  3533  007C3D  73                 	db	115	;'s'
  3534  007C3E  20                 	db	32
  3535  007C3F  6E                 	db	110	;'n'
  3536  007C40  6F                 	db	111	;'o'
  3537  007C41  64                 	db	100	;'d'
  3538  007C42  65                 	db	101	;'e'
  3539  007C43  69                 	db	105	;'i'
  3540  007C44  64                 	db	100	;'d'
  3541  007C45  0D                 	db	13
  3542  007C46  0A                 	db	10
  3543  007C47  00                 	db	0
  3544  007C48                     STR_28:
  3545  007C48  2D                 	db	45
  3546  007C49  45                 	db	69	;'E'
  3547  007C4A  52                 	db	82	;'R'
  3548  007C4B  52                 	db	82	;'R'
  3549  007C4C  4F                 	db	79	;'O'
  3550  007C4D  52                 	db	82	;'R'
  3551  007C4E  20                 	db	32
  3552  007C4F  2D                 	db	45
  3553  007C50  20                 	db	32
  3554  007C51  55                 	db	85	;'U'
  3555  007C52  6E                 	db	110	;'n'
  3556  007C53  6B                 	db	107	;'k'
  3557  007C54  6E                 	db	110	;'n'
  3558  007C55  6F                 	db	111	;'o'
  3559  007C56  77                 	db	119	;'w'
  3560  007C57  6E                 	db	110	;'n'
  3561  007C58  20                 	db	32
  3562  007C59  6D                 	db	109	;'m'
  3563  007C5A  6F                 	db	111	;'o'
  3564  007C5B  64                 	db	100	;'d'
  3565  007C5C  65                 	db	101	;'e'
  3566  007C5D  0D                 	db	13
  3567  007C5E  0A                 	db	10
  3568  007C5F  00                 	db	0
  3569  007C60                     STR_78:
  3570  007C60  2D                 	db	45
  3571  007C61  45                 	db	69	;'E'
  3572  007C62  52                 	db	82	;'R'
  3573  007C63  52                 	db	82	;'R'
  3574  007C64  4F                 	db	79	;'O'
  3575  007C65  52                 	db	82	;'R'
  3576  007C66  20                 	db	32
  3577  007C67  2D                 	db	45
  3578  007C68  20                 	db	32
  3579  007C69  4E                 	db	78	;'N'
  3580  007C6A  65                 	db	101	;'e'
  3581  007C6B  65                 	db	101	;'e'
  3582  007C6C  64                 	db	100	;'d'
  3583  007C6D  20                 	db	32
  3584  007C6E  61                 	db	97	;'a'
  3585  007C6F  20                 	db	32
  3586  007C70  76                 	db	118	;'v'
  3587  007C71  61                 	db	97	;'a'
  3588  007C72  6C                 	db	108	;'l'
  3589  007C73  75                 	db	117	;'u'
  3590  007C74  65                 	db	101	;'e'
  3591  007C75  0D                 	db	13
  3592  007C76  0A                 	db	10
  3593  007C77  00                 	db	0
  3594  007C78                     STR_199:
  3595  007C78  52                 	db	82	;'R'
  3596  007C79  65                 	db	101	;'e'
  3597  007C7A  63                 	db	99	;'c'
  3598  007C7B  65                 	db	101	;'e'
  3599  007C7C  69                 	db	105	;'i'
  3600  007C7D  76                 	db	118	;'v'
  3601  007C7E  65                 	db	101	;'e'
  3602  007C7F  20                 	db	32
  3603  007C80  45                 	db	69	;'E'
  3604  007C81  72                 	db	114	;'r'
  3605  007C82  72                 	db	114	;'r'
  3606  007C83  6F                 	db	111	;'o'
  3607  007C84  72                 	db	114	;'r'
  3608  007C85  20                 	db	32
  3609  007C86  43                 	db	67	;'C'
  3610  007C87  6F                 	db	111	;'o'
  3611  007C88  75                 	db	117	;'u'
  3612  007C89  6E                 	db	110	;'n'
  3613  007C8A  74                 	db	116	;'t'
  3614  007C8B  65                 	db	101	;'e'
  3615  007C8C  72                 	db	114	;'r'
  3616  007C8D  3A                 	db	58	;':'
  3617  007C8E  20                 	db	32
  3618  007C8F  00                 	db	0
  3619  007C90                     STR_184:
  3620  007C90  55                 	db	85	;'U'
  3621  007C91  41                 	db	65	;'A'
  3622  007C92  52                 	db	82	;'R'
  3623  007C93  54                 	db	84	;'T'
  3624  007C94  20                 	db	32
  3625  007C95  52                 	db	82	;'R'
  3626  007C96  65                 	db	101	;'e'
  3627  007C97  63                 	db	99	;'c'
  3628  007C98  65                 	db	101	;'e'
  3629  007C99  69                 	db	105	;'i'
  3630  007C9A  76                 	db	118	;'v'
  3631  007C9B  65                 	db	101	;'e'
  3632  007C9C  20                 	db	32
  3633  007C9D  6F                 	db	111	;'o'
  3634  007C9E  76                 	db	118	;'v'
  3635  007C9F  65                 	db	101	;'e'
  3636  007CA0  72                 	db	114	;'r'
  3637  007CA1  72                 	db	114	;'r'
  3638  007CA2  75                 	db	117	;'u'
  3639  007CA3  6E                 	db	110	;'n'
  3640  007CA4  73                 	db	115	;'s'
  3641  007CA5  3A                 	db	58	;':'
  3642  007CA6  20                 	db	32
  3643  007CA7  00                 	db	0
  3644  007CA8                     STR_180:
  3645  007CA8  43                 	db	67	;'C'
  3646  007CA9  41                 	db	65	;'A'
  3647  007CAA  4E                 	db	78	;'N'
  3648  007CAB  20                 	db	32
  3649  007CAC  54                 	db	84	;'T'
  3650  007CAD  72                 	db	114	;'r'
  3651  007CAE  61                 	db	97	;'a'
  3652  007CAF  6E                 	db	110	;'n'
  3653  007CB0  73                 	db	115	;'s'
  3654  007CB1  6D                 	db	109	;'m'
  3655  007CB2  69                 	db	105	;'i'
  3656  007CB3  74                 	db	116	;'t'
  3657  007CB4  20                 	db	32
  3658  007CB5  6F                 	db	111	;'o'
  3659  007CB6  76                 	db	118	;'v'
  3660  007CB7  65                 	db	101	;'e'
  3661  007CB8  72                 	db	114	;'r'
  3662  007CB9  72                 	db	114	;'r'
  3663  007CBA  75                 	db	117	;'u'
  3664  007CBB  6E                 	db	110	;'n'
  3665  007CBC  73                 	db	115	;'s'
  3666  007CBD  3A                 	db	58	;':'
  3667  007CBE  20                 	db	32
  3668  007CBF  00                 	db	0
  3669  007CC0                     STR_218:
  3670  007CC0  52                 	db	82	;'R'
  3671  007CC1  58                 	db	88	;'X'
  3672  007CC2  20                 	db	32
  3673  007CC3  2D                 	db	45
  3674  007CC4  20                 	db	32
  3675  007CC5  52                 	db	82	;'R'
  3676  007CC6  65                 	db	101	;'e'
  3677  007CC7  61                 	db	97	;'a'
  3678  007CC8  64                 	db	100	;'d'
  3679  007CC9  20                 	db	32
  3680  007CCA  43                 	db	67	;'C'
  3681  007CCB  41                 	db	65	;'A'
  3682  007CCC  4E                 	db	78	;'N'
  3683  007CCD  20                 	db	32
  3684  007CCE  66                 	db	102	;'f'
  3685  007CCF  72                 	db	114	;'r'
  3686  007CD0  61                 	db	97	;'a'
  3687  007CD1  6D                 	db	109	;'m'
  3688  007CD2  65                 	db	101	;'e'
  3689  007CD3  2E                 	db	46
  3690  007CD4  0D                 	db	13
  3691  007CD5  0A                 	db	10
  3692  007CD6  00                 	db	0
  3693  007CD7                     STR_176:
  3694  007CD7  43                 	db	67	;'C'
  3695  007CD8  41                 	db	65	;'A'
  3696  007CD9  4E                 	db	78	;'N'
  3697  007CDA  20                 	db	32
  3698  007CDB  52                 	db	82	;'R'
  3699  007CDC  65                 	db	101	;'e'
  3700  007CDD  63                 	db	99	;'c'
  3701  007CDE  65                 	db	101	;'e'
  3702  007CDF  69                 	db	105	;'i'
  3703  007CE0  76                 	db	118	;'v'
  3704  007CE1  65                 	db	101	;'e'
  3705  007CE2  20                 	db	32
  3706  007CE3  6F                 	db	111	;'o'
  3707  007CE4  76                 	db	118	;'v'
  3708  007CE5  65                 	db	101	;'e'
  3709  007CE6  72                 	db	114	;'r'
  3710  007CE7  72                 	db	114	;'r'
  3711  007CE8  75                 	db	117	;'u'
  3712  007CE9  6E                 	db	110	;'n'
  3713  007CEA  73                 	db	115	;'s'
  3714  007CEB  3A                 	db	58	;':'
  3715  007CEC  20                 	db	32
  3716  007CED  00                 	db	0
  3717  007CEE                     STR_261:
  3718  007CEE  55                 	db	85	;'U'
  3719  007CEF  6E                 	db	110	;'n'
  3720  007CF0  6B                 	db	107	;'k'
  3721  007CF1  6E                 	db	110	;'n'
  3722  007CF2  6F                 	db	111	;'o'
  3723  007CF3  77                 	db	119	;'w'
  3724  007CF4  6E                 	db	110	;'n'
  3725  007CF5  20                 	db	32
  3726  007CF6  28                 	db	40
  3727  007CF7  56                 	db	86	;'V'
  3728  007CF8  65                 	db	101	;'e'
  3729  007CF9  72                 	db	114	;'r'
  3730  007CFA  62                 	db	98	;'b'
  3731  007CFB  6F                 	db	111	;'o'
  3732  007CFC  73                 	db	115	;'s'
  3733  007CFD  65                 	db	101	;'e'
  3734  007CFE  20                 	db	32
  3735  007CFF  75                 	db	117	;'u'
  3736  007D00  73                 	db	115	;'s'
  3737  007D01  65                 	db	101	;'e'
  3738  007D02  64                 	db	100	;'d'
  3739  007D03  29                 	db	41
  3740  007D04  00                 	db	0
  3741  007D05                     STR_24:
  3742  007D05  2B                 	db	43
  3743  007D06  4F                 	db	79	;'O'
  3744  007D07  4B                 	db	75	;'K'
  3745  007D08  20                 	db	32
  3746  007D09  2D                 	db	45
  3747  007D0A  20                 	db	32
  3748  007D0B  4C                 	db	76	;'L'
  3749  007D0C  6F                 	db	111	;'o'
  3750  007D0D  6F                 	db	111	;'o'
  3751  007D0E  70                 	db	112	;'p'
  3752  007D0F  62                 	db	98	;'b'
  3753  007D10  61                 	db	97	;'a'
  3754  007D11  63                 	db	99	;'c'
  3755  007D12  6B                 	db	107	;'k'
  3756  007D13  20                 	db	32
  3757  007D14  6D                 	db	109	;'m'
  3758  007D15  6F                 	db	111	;'o'
  3759  007D16  64                 	db	100	;'d'
  3760  007D17  65                 	db	101	;'e'
  3761  007D18  0D                 	db	13
  3762  007D19  0A                 	db	10
  3763  007D1A  00                 	db	0
  3764  007D1B                     STR_168:
  3765  007D1B  52                 	db	82	;'R'
  3766  007D1C  65                 	db	101	;'e'
  3767  007D1D  63                 	db	99	;'c'
  3768  007D1E  65                 	db	101	;'e'
  3769  007D1F  69                 	db	105	;'i'
  3770  007D20  76                 	db	118	;'v'
  3771  007D21  65                 	db	101	;'e'
  3772  007D22  64                 	db	100	;'d'
  3773  007D23  20                 	db	32
  3774  007D24  43                 	db	67	;'C'
  3775  007D25  41                 	db	65	;'A'
  3776  007D26  4E                 	db	78	;'N'
  3777  007D27  20                 	db	32
  3778  007D28  66                 	db	102	;'f'
  3779  007D29  72                 	db	114	;'r'
  3780  007D2A  61                 	db	97	;'a'
  3781  007D2B  6D                 	db	109	;'m'
  3782  007D2C  65                 	db	101	;'e'
  3783  007D2D  73                 	db	115	;'s'
  3784  007D2E  3A                 	db	58	;':'
  3785  007D2F  20                 	db	32
  3786  007D30  00                 	db	0
  3787  007D31                     STR_172:
  3788  007D31  52                 	db	82	;'R'
  3789  007D32  65                 	db	101	;'e'
  3790  007D33  63                 	db	99	;'c'
  3791  007D34  65                 	db	101	;'e'
  3792  007D35  69                 	db	105	;'i'
  3793  007D36  76                 	db	118	;'v'
  3794  007D37  65                 	db	101	;'e'
  3795  007D38  64                 	db	100	;'d'
  3796  007D39  20                 	db	32
  3797  007D3A  43                 	db	67	;'C'
  3798  007D3B  41                 	db	65	;'A'
  3799  007D3C  4E                 	db	78	;'N'
  3800  007D3D  20                 	db	32
  3801  007D3E  62                 	db	98	;'b'
  3802  007D3F  79                 	db	121	;'y'
  3803  007D40  74                 	db	116	;'t'
  3804  007D41  65                 	db	101	;'e'
  3805  007D42  73                 	db	115	;'s'
  3806  007D43  3A                 	db	58	;':'
  3807  007D44  20                 	db	32
  3808  007D45  00                 	db	0
  3809  007D46                     STR_228:
  3810  007D46  4D                 	db	77	;'M'
  3811  007D47  41                 	db	65	;'A'
  3812  007D48  53                 	db	83	;'S'
  3813  007D49  4B                 	db	75	;'K'
  3814  007D4A  20                 	db	32
  3815  007D4B  2D                 	db	45
  3816  007D4C  20                 	db	32
  3817  007D4D  53                 	db	83	;'S'
  3818  007D4E  65                 	db	101	;'e'
  3819  007D4F  74                 	db	116	;'t'
  3820  007D50  20                 	db	32
  3821  007D51  6D                 	db	109	;'m'
  3822  007D52  61                 	db	97	;'a'
  3823  007D53  73                 	db	115	;'s'
  3824  007D54  6B                 	db	107	;'k'
  3825  007D55  20                 	db	32
  3826  007D56  2E                 	db	46
  3827  007D57  0D                 	db	13
  3828  007D58  0A                 	db	10
  3829  007D59  00                 	db	0
  3830  007D5A                     STR_133:
  3831  007D5A  4A                 	db	74	;'J'
  3832  007D5B  46                 	db	70	;'F'
  3833  007D5C  72                 	db	114	;'r'
  3834  007D5D  61                 	db	97	;'a'
  3835  007D5E  6E                 	db	110	;'n'
  3836  007D5F  6B                 	db	107	;'k'
  3837  007D60  66                 	db	102	;'f'
  3838  007D61  75                 	db	117	;'u'
  3839  007D62  72                 	db	114	;'r'
  3840  007D63  74                 	db	116	;'t'
  3841  007D64  20                 	db	32
  3842  007D65  52                 	db	82	;'R'
  3843  007D66  53                 	db	83	;'S'
  3844  007D67  2D                 	db	45
  3845  007D68  32                 	db	50	;'2'
  3846  007D69  33                 	db	51	;'3'
  3847  007D6A  32                 	db	50	;'2'
  3848  007D6B  0D                 	db	13
  3849  007D6C  0A                 	db	10
  3850  007D6D  00                 	db	0
  3851  007D6E                     STR_26:
  3852  007D6E  2B                 	db	43
  3853  007D6F  4F                 	db	79	;'O'
  3854  007D70  4B                 	db	75	;'K'
  3855  007D71  20                 	db	32
  3856  007D72  2D                 	db	45
  3857  007D73  20                 	db	32
  3858  007D74  43                 	db	67	;'C'
  3859  007D75  6C                 	db	108	;'l'
  3860  007D76  6F                 	db	111	;'o'
  3861  007D77  73                 	db	115	;'s'
  3862  007D78  65                 	db	101	;'e'
  3863  007D79  64                 	db	100	;'d'
  3864  007D7A  20                 	db	32
  3865  007D7B  6D                 	db	109	;'m'
  3866  007D7C  6F                 	db	111	;'o'
  3867  007D7D  64                 	db	100	;'d'
  3868  007D7E  65                 	db	101	;'e'
  3869  007D7F  0D                 	db	13
  3870  007D80  0A                 	db	10
  3871  007D81  00                 	db	0
  3872  007D82                     STR_21:
  3873  007D82  2B                 	db	43
  3874  007D83  4F                 	db	79	;'O'
  3875  007D84  4B                 	db	75	;'K'
  3876  007D85  20                 	db	32
  3877  007D86  2D                 	db	45
  3878  007D87  20                 	db	32
  3879  007D88  4E                 	db	78	;'N'
  3880  007D89  6F                 	db	111	;'o'
  3881  007D8A  72                 	db	114	;'r'
  3882  007D8B  6D                 	db	109	;'m'
  3883  007D8C  61                 	db	97	;'a'
  3884  007D8D  6C                 	db	108	;'l'
  3885  007D8E  20                 	db	32
  3886  007D8F  6D                 	db	109	;'m'
  3887  007D90  6F                 	db	111	;'o'
  3888  007D91  64                 	db	100	;'d'
  3889  007D92  65                 	db	101	;'e'
  3890  007D93  0D                 	db	13
  3891  007D94  0A                 	db	10
  3892  007D95  00                 	db	0
  3893  007D96                     STR_22:
  3894  007D96  2B                 	db	43
  3895  007D97  4F                 	db	79	;'O'
  3896  007D98  4B                 	db	75	;'K'
  3897  007D99  20                 	db	32
  3898  007D9A  2D                 	db	45
  3899  007D9B  20                 	db	32
  3900  007D9C  53                 	db	83	;'S'
  3901  007D9D  69                 	db	105	;'i'
  3902  007D9E  6C                 	db	108	;'l'
  3903  007D9F  65                 	db	101	;'e'
  3904  007DA0  6E                 	db	110	;'n'
  3905  007DA1  74                 	db	116	;'t'
  3906  007DA2  20                 	db	32
  3907  007DA3  6D                 	db	109	;'m'
  3908  007DA4  6F                 	db	111	;'o'
  3909  007DA5  64                 	db	100	;'d'
  3910  007DA6  65                 	db	101	;'e'
  3911  007DA7  0D                 	db	13
  3912  007DA8  0A                 	db	10
  3913  007DA9  00                 	db	0
  3914  007DAA                     STR_82:
  3915  007DAA  49                 	db	73	;'I'
  3916  007DAB  6E                 	db	110	;'n'
  3917  007DAC  66                 	db	102	;'f'
  3918  007DAD  6F                 	db	111	;'o'
  3919  007DAE  20                 	db	32
  3920  007DAF  66                 	db	102	;'f'
  3921  007DB0  6F                 	db	111	;'o'
  3922  007DB1  72                 	db	114	;'r'
  3923  007DB2  20                 	db	32
  3924  007DB3  6E                 	db	110	;'n'
  3925  007DB4  6F                 	db	111	;'o'
  3926  007DB5  64                 	db	100	;'d'
  3927  007DB6  65                 	db	101	;'e'
  3928  007DB7  20                 	db	32
  3929  007DB8  69                 	db	105	;'i'
  3930  007DB9  64                 	db	100	;'d'
  3931  007DBA  20                 	db	32
  3932  007DBB  3D                 	db	61	;'='
  3933  007DBC  20                 	db	32
  3934  007DBD  00                 	db	0
  3935  007DBE                     STR_250:
  3936  007DBE  46                 	db	70	;'F'
  3937  007DBF  69                 	db	105	;'i'
  3938  007DC0  72                 	db	114	;'r'
  3939  007DC1  6D                 	db	109	;'m'
  3940  007DC2  77                 	db	119	;'w'
  3941  007DC3  61                 	db	97	;'a'
  3942  007DC4  72                 	db	114	;'r'
  3943  007DC5  65                 	db	101	;'e'
  3944  007DC6  20                 	db	32
  3945  007DC7  76                 	db	118	;'v'
  3946  007DC8  65                 	db	101	;'e'
  3947  007DC9  72                 	db	114	;'r'
  3948  007DCA  73                 	db	115	;'s'
  3949  007DCB  69                 	db	105	;'i'
  3950  007DCC  6F                 	db	111	;'o'
  3951  007DCD  6E                 	db	110	;'n'
  3952  007DCE  20                 	db	32
  3953  007DCF  3D                 	db	61	;'='
  3954  007DD0  20                 	db	32
  3955  007DD1  00                 	db	0
  3956  007DD2                     STR_23:
  3957  007DD2  2B                 	db	43
  3958  007DD3  4F                 	db	79	;'O'
  3959  007DD4  4B                 	db	75	;'K'
  3960  007DD5  20                 	db	32
  3961  007DD6  2D                 	db	45
  3962  007DD7  20                 	db	32
  3963  007DD8  53                 	db	83	;'S'
  3964  007DD9  6C                 	db	108	;'l'
  3965  007DDA  65                 	db	101	;'e'
  3966  007DDB  65                 	db	101	;'e'
  3967  007DDC  70                 	db	112	;'p'
  3968  007DDD  20                 	db	32
  3969  007DDE  6D                 	db	109	;'m'
  3970  007DDF  6F                 	db	111	;'o'
  3971  007DE0  64                 	db	100	;'d'
  3972  007DE1  65                 	db	101	;'e'
  3973  007DE2  0D                 	db	13
  3974  007DE3  0A                 	db	10
  3975  007DE4  00                 	db	0
  3976  007DE5                     STR_27:
  3977  007DE5  2B                 	db	43
  3978  007DE6  4F                 	db	79	;'O'
  3979  007DE7  4B                 	db	75	;'K'
  3980  007DE8  20                 	db	32
  3981  007DE9  2D                 	db	45
  3982  007DEA  20                 	db	32
  3983  007DEB  42                 	db	66	;'B'
  3984  007DEC  69                 	db	105	;'i'
  3985  007DED  74                 	db	116	;'t'
  3986  007DEE  73                 	db	115	;'s'
  3987  007DEF  20                 	db	32
  3988  007DF0  6D                 	db	109	;'m'
  3989  007DF1  6F                 	db	111	;'o'
  3990  007DF2  64                 	db	100	;'d'
  3991  007DF3  65                 	db	101	;'e'
  3992  007DF4  0D                 	db	13
  3993  007DF5  0A                 	db	10
  3994  007DF6  00                 	db	0
  3995  007DF7                     STR_40:
  3996  007DF7  2B                 	db	43
  3997  007DF8  4F                 	db	79	;'O'
  3998  007DF9  4B                 	db	75	;'K'
  3999  007DFA  20                 	db	32
  4000  007DFB  2D                 	db	45
  4001  007DFC  20                 	db	32
  4002  007DFD  6E                 	db	110	;'n'
  4003  007DFE  6F                 	db	111	;'o'
  4004  007DFF  20                 	db	32
  4005  007E00  65                 	db	101	;'e'
  4006  007E01  76                 	db	118	;'v'
  4007  007E02  65                 	db	101	;'e'
  4008  007E03  6E                 	db	110	;'n'
  4009  007E04  74                 	db	116	;'t'
  4010  007E05  73                 	db	115	;'s'
  4011  007E06  0D                 	db	13
  4012  007E07  0A                 	db	10
  4013  007E08  00                 	db	0
  4014  007E09                     STR_160:
  4015  007E09  53                 	db	83	;'S'
  4016  007E0A  65                 	db	101	;'e'
  4017  007E0B  6E                 	db	110	;'n'
  4018  007E0C  74                 	db	116	;'t'
  4019  007E0D  20                 	db	32
  4020  007E0E  43                 	db	67	;'C'
  4021  007E0F  41                 	db	65	;'A'
  4022  007E10  4E                 	db	78	;'N'
  4023  007E11  20                 	db	32
  4024  007E12  66                 	db	102	;'f'
  4025  007E13  72                 	db	114	;'r'
  4026  007E14  61                 	db	97	;'a'
  4027  007E15  6D                 	db	109	;'m'
  4028  007E16  65                 	db	101	;'e'
  4029  007E17  73                 	db	115	;'s'
  4030  007E18  3A                 	db	58	;':'
  4031  007E19  20                 	db	32
  4032  007E1A  00                 	db	0
  4033  007E1B                     STR_263:
  4034  007E1B  30                 	db	48	;'0'
  4035  007E1C  31                 	db	49	;'1'
  4036  007E1D  32                 	db	50	;'2'
  4037  007E1E  33                 	db	51	;'3'
  4038  007E1F  34                 	db	52	;'4'
  4039  007E20  35                 	db	53	;'5'
  4040  007E21  36                 	db	54	;'6'
  4041  007E22  37                 	db	55	;'7'
  4042  007E23  38                 	db	56	;'8'
  4043  007E24  39                 	db	57	;'9'
  4044  007E25  41                 	db	65	;'A'
  4045  007E26  42                 	db	66	;'B'
  4046  007E27  43                 	db	67	;'C'
  4047  007E28  44                 	db	68	;'D'
  4048  007E29  45                 	db	69	;'E'
  4049  007E2A  46                 	db	70	;'F'
  4050  007E2B  00                 	db	0
  4051  007E2C                     STR_264:
  4052  007E2C  30                 	db	48	;'0'
  4053  007E2D  31                 	db	49	;'1'
  4054  007E2E  32                 	db	50	;'2'
  4055  007E2F  33                 	db	51	;'3'
  4056  007E30  34                 	db	52	;'4'
  4057  007E31  35                 	db	53	;'5'
  4058  007E32  36                 	db	54	;'6'
  4059  007E33  37                 	db	55	;'7'
  4060  007E34  38                 	db	56	;'8'
  4061  007E35  39                 	db	57	;'9'
  4062  007E36  61                 	db	97	;'a'
  4063  007E37  62                 	db	98	;'b'
  4064  007E38  63                 	db	99	;'c'
  4065  007E39  64                 	db	100	;'d'
  4066  007E3A  65                 	db	101	;'e'
  4067  007E3B  66                 	db	102	;'f'
  4068  007E3C  00                 	db	0
  4069  007E3D                     STR_164:
  4070  007E3D  53                 	db	83	;'S'
  4071  007E3E  65                 	db	101	;'e'
  4072  007E3F  6E                 	db	110	;'n'
  4073  007E40  74                 	db	116	;'t'
  4074  007E41  20                 	db	32
  4075  007E42  43                 	db	67	;'C'
  4076  007E43  41                 	db	65	;'A'
  4077  007E44  4E                 	db	78	;'N'
  4078  007E45  20                 	db	32
  4079  007E46  62                 	db	98	;'b'
  4080  007E47  79                 	db	121	;'y'
  4081  007E48  74                 	db	116	;'t'
  4082  007E49  65                 	db	101	;'e'
  4083  007E4A  73                 	db	115	;'s'
  4084  007E4B  3A                 	db	58	;':'
  4085  007E4C  20                 	db	32
  4086  007E4D  00                 	db	0
  4087  007E4E                     STR_242:
  4088  007E4E  20                 	db	32
  4089  007E4F  6E                 	db	110	;'n'
  4090  007E50  6F                 	db	111	;'o'
  4091  007E51  64                 	db	100	;'d'
  4092  007E52  65                 	db	101	;'e'
  4093  007E53  73                 	db	115	;'s'
  4094  007E54  20                 	db	32
  4095  007E55  66                 	db	102	;'f'
  4096  007E56  6F                 	db	111	;'o'
  4097  007E57  75                 	db	117	;'u'
  4098  007E58  6E                 	db	110	;'n'
  4099  007E59  64                 	db	100	;'d'
  4100  007E5A  0D                 	db	13
  4101  007E5B  0A                 	db	10
  4102  007E5C  00                 	db	0
  4103  007E5D                     STR_55:
  4104  007E5D  56                 	db	86	;'V'
  4105  007E5E  61                 	db	97	;'a'
  4106  007E5F  6C                 	db	108	;'l'
  4107  007E60  75                 	db	117	;'u'
  4108  007E61  65                 	db	101	;'e'
  4109  007E62  20                 	db	32
  4110  007E63  66                 	db	102	;'f'
  4111  007E64  6F                 	db	111	;'o'
  4112  007E65  72                 	db	114	;'r'
  4113  007E66  20                 	db	32
  4114  007E67  72                 	db	114	;'r'
  4115  007E68  65                 	db	101	;'e'
  4116  007E69  67                 	db	103	;'g'
  4117  007E6A  20                 	db	32
  4118  007E6B  00                 	db	0
  4119  007E6C                     STR_248:
  4120  007E6C  4D                 	db	77	;'M'
  4121  007E6D  44                 	db	68	;'D'
  4122  007E6E  46                 	db	70	;'F'
  4123  007E6F  20                 	db	32
  4124  007E70  3D                 	db	61	;'='
  4125  007E71  20                 	db	32
  4126  007E72  68                 	db	104	;'h'
  4127  007E73  74                 	db	116	;'t'
  4128  007E74  74                 	db	116	;'t'
  4129  007E75  70                 	db	112	;'p'
  4130  007E76  3A                 	db	58	;':'
  4131  007E77  2F                 	db	47
  4132  007E78  2F                 	db	47
  4133  007E79  00                 	db	0
  4134  007E7A                     STR_258:
  4135  007E7A  56                 	db	86	;'V'
  4136  007E7B  53                 	db	83	;'S'
  4137  007E7C  43                 	db	67	;'C'
  4138  007E7D  50                 	db	80	;'P'
  4139  007E7E  20                 	db	32
  4140  007E7F  44                 	db	68	;'D'
  4141  007E80  72                 	db	114	;'r'
  4142  007E81  69                 	db	105	;'i'
  4143  007E82  76                 	db	118	;'v'
  4144  007E83  65                 	db	101	;'e'
  4145  007E84  72                 	db	114	;'r'
  4146  007E85  00                 	db	0
  4147  007E86                     STR_118:
  4148  007E86  52                 	db	82	;'R'
  4149  007E87  57                 	db	87	;'W'
  4150  007E88  54                 	db	84	;'T'
  4151  007E89  49                 	db	73	;'I'
  4152  007E8A  4D                 	db	77	;'M'
  4153  007E8B  45                 	db	69	;'E'
  4154  007E8C  4F                 	db	79	;'O'
  4155  007E8D  55                 	db	85	;'U'
  4156  007E8E  54                 	db	84	;'T'
  4157  007E8F  20                 	db	32
  4158  007E90  00                 	db	0
  4159  007E91                     STR_158:
  4160  007E91  2C                 	db	44
  4161  007E92  44                 	db	68	;'D'
  4162  007E93  61                 	db	97	;'a'
  4163  007E94  74                 	db	116	;'t'
  4164  007E95  61                 	db	97	;'a'
  4165  007E96  3D                 	db	61	;'='
  4166  007E97  6E                 	db	110	;'n'
  4167  007E98  6F                 	db	111	;'o'
  4168  007E99  6E                 	db	110	;'n'
  4169  007E9A  65                 	db	101	;'e'
  4170  007E9B  00                 	db	0
  4171  007E9C                     STR_254:
  4172  007E9C  56                 	db	86	;'V'
  4173  007E9D  65                 	db	101	;'e'
  4174  007E9E  72                 	db	114	;'r'
  4175  007E9F  73                 	db	115	;'s'
  4176  007EA0  69                 	db	105	;'i'
  4177  007EA1  6F                 	db	111	;'o'
  4178  007EA2  6E                 	db	110	;'n'
  4179  007EA3  3A                 	db	58	;':'
  4180  007EA4  20                 	db	32
  4181  007EA5  00                 	db	0
  4182  007EA6                     STR_260:
  4183  007EA6  56                 	db	86	;'V'
  4184  007EA7  53                 	db	83	;'S'
  4185  007EA8  43                 	db	67	;'C'
  4186  007EA9  50                 	db	80	;'P'
  4187  007EAA  20                 	db	32
  4188  007EAB  4E                 	db	78	;'N'
  4189  007EAC  6F                 	db	111	;'o'
  4190  007EAD  64                 	db	100	;'d'
  4191  007EAE  65                 	db	101	;'e'
  4192  007EAF  00                 	db	0
  4193  007EB0                     STR_259:
  4194  007EB0  53                 	db	83	;'S'
  4195  007EB1  4C                 	db	76	;'L'
  4196  007EB2  20                 	db	32
  4197  007EB3  44                 	db	68	;'D'
  4198  007EB4  72                 	db	114	;'r'
  4199  007EB5  69                 	db	105	;'i'
  4200  007EB6  76                 	db	118	;'v'
  4201  007EB7  65                 	db	101	;'e'
  4202  007EB8  72                 	db	114	;'r'
  4203  007EB9  00                 	db	0
  4204  007EBA                     STR_120:
  4205  007EBA  53                 	db	83	;'S'
  4206  007EBB  54                 	db	84	;'T'
  4207  007EBC  41                 	db	65	;'A'
  4208  007EBD  52                 	db	82	;'R'
  4209  007EBE  54                 	db	84	;'T'
  4210  007EBF  49                 	db	73	;'I'
  4211  007EC0  46                 	db	70	;'F'
  4212  007EC1  20                 	db	32
  4213  007EC2  00                 	db	0
  4214  007EC3                     STR_148:
  4215  007EC3  2C                 	db	44
  4216  007EC4  6E                 	db	110	;'n'
  4217  007EC5  6F                 	db	111	;'o'
  4218  007EC6  64                 	db	100	;'d'
  4219  007EC7  65                 	db	101	;'e'
  4220  007EC8  69                 	db	105	;'i'
  4221  007EC9  64                 	db	100	;'d'
  4222  007ECA  3D                 	db	61	;'='
  4223  007ECB  00                 	db	0
  4224  007ECC                     STR_14:
  4225  007ECC  4C                 	db	76	;'L'
  4226  007ECD  4F                 	db	79	;'O'
  4227  007ECE  4F                 	db	79	;'O'
  4228  007ECF  50                 	db	80	;'P'
  4229  007ED0  42                 	db	66	;'B'
  4230  007ED1  41                 	db	65	;'A'
  4231  007ED2  43                 	db	67	;'C'
  4232  007ED3  4B                 	db	75	;'K'
  4233  007ED4  00                 	db	0
  4234  007ED5                     STR_134:
  4235  007ED5  56                 	db	86	;'V'
  4236  007ED6  31                 	db	49	;'1'
  4237  007ED7  30                 	db	48	;'0'
  4238  007ED8  31                 	db	49	;'1'
  4239  007ED9  31                 	db	49	;'1'
  4240  007EDA  0D                 	db	13
  4241  007EDB  0A                 	db	10
  4242  007EDC  00                 	db	0
  4243  007EDD                     STR_135:
  4244  007EDD  4E                 	db	78	;'N'
  4245  007EDE  31                 	db	49	;'1'
  4246  007EDF  39                 	db	57	;'9'
  4247  007EE0  37                 	db	55	;'7'
  4248  007EE1  37                 	db	55	;'7'
  4249  007EE2  0D                 	db	13
  4250  007EE3  0A                 	db	10
  4251  007EE4  00                 	db	0
  4252  007EE5                     STR_243:
  4253  007EE5  47                 	db	71	;'G'
  4254  007EE6  55                 	db	85	;'U'
  4255  007EE7  49                 	db	73	;'I'
  4256  007EE8  44                 	db	68	;'D'
  4257  007EE9  20                 	db	32
  4258  007EEA  3D                 	db	61	;'='
  4259  007EEB  20                 	db	32
  4260  007EEC  00                 	db	0
  4261  007EED                     STR_128:
  4262  007EED  46                 	db	70	;'F'
  4263  007EEE  49                 	db	73	;'I'
  4264  007EEF  4C                 	db	76	;'L'
  4265  007EF0  54                 	db	84	;'T'
  4266  007EF1  45                 	db	69	;'E'
  4267  007EF2  52                 	db	82	;'R'
  4268  007EF3  20                 	db	32
  4269  007EF4  00                 	db	0
  4270  007EF5                     STR_142:
  4271  007EF5  2C                 	db	44
  4272  007EF6  63                 	db	99	;'c'
  4273  007EF7  6C                 	db	108	;'l'
  4274  007EF8  61                 	db	97	;'a'
  4275  007EF9  73                 	db	115	;'s'
  4276  007EFA  73                 	db	115	;'s'
  4277  007EFB  3D                 	db	61	;'='
  4278  007EFC  00                 	db	0
  4279  007EFD                     STR_122:
  4280  007EFD  56                 	db	86	;'V'
  4281  007EFE  45                 	db	69	;'E'
  4282  007EFF  52                 	db	82	;'R'
  4283  007F00  42                 	db	66	;'B'
  4284  007F01  4F                 	db	79	;'O'
  4285  007F02  53                 	db	83	;'S'
  4286  007F03  45                 	db	69	;'E'
  4287  007F04  00                 	db	0
  4288  007F05                     STR_116:
  4289  007F05  44                 	db	68	;'D'
  4290  007F06  45                 	db	69	;'E'
  4291  007F07  43                 	db	67	;'C'
  4292  007F08  49                 	db	73	;'I'
  4293  007F09  4D                 	db	77	;'M'
  4294  007F0A  41                 	db	65	;'A'
  4295  007F0B  4C                 	db	76	;'L'
  4296  007F0C  00                 	db	0
  4297  007F0D                     STR_18:
  4298  007F0D  56                 	db	86	;'V'
  4299  007F0E  45                 	db	69	;'E'
  4300  007F0F  52                 	db	82	;'R'
  4301  007F10  53                 	db	83	;'S'
  4302  007F11  49                 	db	73	;'I'
  4303  007F12  4F                 	db	79	;'O'
  4304  007F13  4E                 	db	78	;'N'
  4305  007F14  00                 	db	0
  4306  007F15                     STR_177:
  4307  007F15  30                 	db	48	;'0'
  4308  007F16  78                 	db	120	;'x'
  4309  007F17  25                 	db	37
  4310  007F18  30                 	db	48	;'0'
  4311  007F19  38                 	db	56	;'8'
  4312  007F1A  6C                 	db	108	;'l'
  4313  007F1B  58                 	db	88	;'X'
  4314  007F1C  00                 	db	0
  4315  007F1D                     STR_257:
  4316  007F1D  56                 	db	86	;'V'
  4317  007F1E  65                 	db	101	;'e'
  4318  007F1F  72                 	db	114	;'r'
  4319  007F20  62                 	db	98	;'b'
  4320  007F21  6F                 	db	111	;'o'
  4321  007F22  73                 	db	115	;'s'
  4322  007F23  65                 	db	101	;'e'
  4323  007F24  00                 	db	0
  4324  007F25                     STR_256:
  4325  007F25  4D                 	db	77	;'M'
  4326  007F26  6F                 	db	111	;'o'
  4327  007F27  64                 	db	100	;'d'
  4328  007F28  65                 	db	101	;'e'
  4329  007F29  3A                 	db	58	;':'
  4330  007F2A  20                 	db	32
  4331  007F2B  00                 	db	0
  4332  007F2C                     STR_154:
  4333  007F2C  2C                 	db	44
  4334  007F2D  44                 	db	68	;'D'
  4335  007F2E  61                 	db	97	;'a'
  4336  007F2F  74                 	db	116	;'t'
  4337  007F30  61                 	db	97	;'a'
  4338  007F31  3D                 	db	61	;'='
  4339  007F32  00                 	db	0
  4340  007F33                     STR_145:
  4341  007F33  2C                 	db	44
  4342  007F34  74                 	db	116	;'t'
  4343  007F35  79                 	db	121	;'y'
  4344  007F36  70                 	db	112	;'p'
  4345  007F37  65                 	db	101	;'e'
  4346  007F38  3D                 	db	61	;'='
  4347  007F39  00                 	db	0
  4348  007F3A                     STR_151:
  4349  007F3A  2C                 	db	44
  4350  007F3B  73                 	db	115	;'s'
  4351  007F3C  69                 	db	105	;'i'
  4352  007F3D  7A                 	db	122	;'z'
  4353  007F3E  65                 	db	101	;'e'
  4354  007F3F  3D                 	db	61	;'='
  4355  007F40  00                 	db	0
  4356  007F41                     STR_139:
  4357  007F41  3C                 	db	60	;'<'
  4358  007F42  50                 	db	80	;'P'
  4359  007F43  72                 	db	114	;'r'
  4360  007F44  69                 	db	105	;'i'
  4361  007F45  6F                 	db	111	;'o'
  4362  007F46  3D                 	db	61	;'='
  4363  007F47  00                 	db	0
  4364  007F48                     STR_20:
  4365  007F48  49                 	db	73	;'I'
  4366  007F49  46                 	db	70	;'F'
  4367  007F4A  4D                 	db	77	;'M'
  4368  007F4B  4F                 	db	79	;'O'
  4369  007F4C  44                 	db	68	;'D'
  4370  007F4D  45                 	db	69	;'E'
  4371  007F4E  00                 	db	0
  4372  007F4F                     STR_16:
  4373  007F4F  4C                 	db	76	;'L'
  4374  007F50  49                 	db	73	;'I'
  4375  007F51  53                 	db	83	;'S'
  4376  007F52  54                 	db	84	;'T'
  4377  007F53  45                 	db	69	;'E'
  4378  007F54  4E                 	db	78	;'N'
  4379  007F55  00                 	db	0
  4380  007F56                     STR_87:
  4381  007F56  46                 	db	70	;'F'
  4382  007F57  49                 	db	73	;'I'
  4383  007F58  4C                 	db	76	;'L'
  4384  007F59  54                 	db	84	;'T'
  4385  007F5A  45                 	db	69	;'E'
  4386  007F5B  52                 	db	82	;'R'
  4387  007F5C  00                 	db	0
  4388  007F5D                     STR_10:
  4389  007F5D  53                 	db	83	;'S'
  4390  007F5E  49                 	db	73	;'I'
  4391  007F5F  4C                 	db	76	;'L'
  4392  007F60  45                 	db	69	;'E'
  4393  007F61  4E                 	db	78	;'N'
  4394  007F62  54                 	db	84	;'T'
  4395  007F63  00                 	db	0
  4396  007F64                     STR_56:
  4397  007F64  30                 	db	48	;'0'
  4398  007F65  78                 	db	120	;'x'
  4399  007F66  25                 	db	37
  4400  007F67  30                 	db	48	;'0'
  4401  007F68  32                 	db	50	;'2'
  4402  007F69  58                 	db	88	;'X'
  4403  007F6A  00                 	db	0
  4404  007F6B                     STR_143:
  4405  007F6B  30                 	db	48	;'0'
  4406  007F6C  78                 	db	120	;'x'
  4407  007F6D  25                 	db	37
  4408  007F6E  30                 	db	48	;'0'
  4409  007F6F  34                 	db	52	;'4'
  4410  007F70  58                 	db	88	;'X'
  4411  007F71  00                 	db	0
  4412  007F72                     STR_161:
  4413  007F72  30                 	db	48	;'0'
  4414  007F73  78                 	db	120	;'x'
  4415  007F74  25                 	db	37
  4416  007F75  30                 	db	48	;'0'
  4417  007F76  38                 	db	56	;'8'
  4418  007F77  58                 	db	88	;'X'
  4419  007F78  00                 	db	0
  4420  007F79                     STR_136:
  4421  007F79  46                 	db	70	;'F'
  4422  007F7A  30                 	db	48	;'0'
  4423  007F7B  30                 	db	48	;'0'
  4424  007F7C  0D                 	db	13
  4425  007F7D  0A                 	db	10
  4426  007F7E  00                 	db	0
  4427  007F7F                     STR_9:
  4428  007F7F  2B                 	db	43
  4429  007F80  4F                 	db	79	;'O'
  4430  007F81  4B                 	db	75	;'K'
  4431  007F82  0D                 	db	13
  4432  007F83  0A                 	db	10
  4433  007F84  00                 	db	0
  4434  007F85                     STR_121:
  4435  007F85  4D                 	db	77	;'M'
  4436  007F86  4F                 	db	79	;'O'
  4437  007F87  44                 	db	68	;'D'
  4438  007F88  45                 	db	69	;'E'
  4439  007F89  20                 	db	32
  4440  007F8A  00                 	db	0
  4441  007F8B                     STR_129:
  4442  007F8B  4D                 	db	77	;'M'
  4443  007F8C  41                 	db	65	;'A'
  4444  007F8D  53                 	db	83	;'S'
  4445  007F8E  4B                 	db	75	;'K'
  4446  007F8F  20                 	db	32
  4447  007F90  00                 	db	0
  4448  007F91                     STR_12:
  4449  007F91  43                 	db	67	;'C'
  4450  007F92  4C                 	db	76	;'L'
  4451  007F93  4F                 	db	79	;'O'
  4452  007F94  53                 	db	83	;'S'
  4453  007F95  45                 	db	69	;'E'
  4454  007F96  00                 	db	0
  4455  007F97                     STR_126:
  4456  007F97  53                 	db	83	;'S'
  4457  007F98  4C                 	db	76	;'L'
  4458  007F99  43                 	db	67	;'C'
  4459  007F9A  41                 	db	65	;'A'
  4460  007F9B  4E                 	db	78	;'N'
  4461  007F9C  00                 	db	0
  4462  007F9D                     STR_113:
  4463  007F9D  53                 	db	83	;'S'
  4464  007F9E  45                 	db	69	;'E'
  4465  007F9F  54                 	db	84	;'T'
  4466  007FA0  20                 	db	32
  4467  007FA1  00                 	db	0
  4468  007FA2                     STR_47:
  4469  007FA2  46                 	db	70	;'F'
  4470  007FA3  49                 	db	73	;'I'
  4471  007FA4  4E                 	db	78	;'N'
  4472  007FA5  44                 	db	68	;'D'
  4473  007FA6  00                 	db	0
  4474  007FA7                     STR_49:
  4475  007FA7  52                 	db	82	;'R'
  4476  007FA8  52                 	db	82	;'R'
  4477  007FA9  45                 	db	69	;'E'
  4478  007FAA  47                 	db	71	;'G'
  4479  007FAB  00                 	db	0
  4480  007FAC                     STR_72:
  4481  007FAC  57                 	db	87	;'W'
  4482  007FAD  52                 	db	82	;'R'
  4483  007FAE  45                 	db	69	;'E'
  4484  007FAF  47                 	db	71	;'G'
  4485  007FB0  00                 	db	0
  4486  007FB1                     STR_100:
  4487  007FB1  4D                 	db	77	;'M'
  4488  007FB2  41                 	db	65	;'A'
  4489  007FB3  53                 	db	83	;'S'
  4490  007FB4  4B                 	db	75	;'K'
  4491  007FB5  00                 	db	0
  4492  007FB6                     STR_8:
  4493  007FB6  4F                 	db	79	;'O'
  4494  007FB7  50                 	db	80	;'P'
  4495  007FB8  45                 	db	69	;'E'
  4496  007FB9  4E                 	db	78	;'N'
  4497  007FBA  00                 	db	0
  4498  007FBB                     STR_81:
  4499  007FBB  49                 	db	73	;'I'
  4500  007FBC  4E                 	db	78	;'N'
  4501  007FBD  46                 	db	70	;'F'
  4502  007FBE  4F                 	db	79	;'O'
  4503  007FBF  00                 	db	0
  4504  007FC0                     STR_124:
  4505  007FC0  56                 	db	86	;'V'
  4506  007FC1  53                 	db	83	;'S'
  4507  007FC2  43                 	db	67	;'C'
  4508  007FC3  50                 	db	80	;'P'
  4509  007FC4  00                 	db	0
  4510  007FC5                     STR_45:
  4511  007FC5  48                 	db	72	;'H'
  4512  007FC6  45                 	db	69	;'E'
  4513  007FC7  4C                 	db	76	;'L'
  4514  007FC8  50                 	db	80	;'P'
  4515  007FC9  00                 	db	0
  4516  007FCA                     STR_41:
  4517  007FCA  53                 	db	83	;'S'
  4518  007FCB  54                 	db	84	;'T'
  4519  007FCC  41                 	db	65	;'A'
  4520  007FCD  54                 	db	84	;'T'
  4521  007FCE  00                 	db	0
  4522  007FCF                     STR_6:
  4523  007FCF  42                 	db	66	;'B'
  4524  007FD0  4F                 	db	79	;'O'
  4525  007FD1  4F                 	db	79	;'O'
  4526  007FD2  54                 	db	84	;'T'
  4527  007FD3  00                 	db	0
  4528  007FD4                     STR_159:
  4529  007FD4  3E                 	db	62	;'>'
  4530  007FD5  0D                 	db	13
  4531  007FD6  0A                 	db	10
  4532  007FD7  00                 	db	0
  4533  007FD8                     STR_43:
  4534  007FD8  45                 	db	69	;'E'
  4535  007FD9  52                 	db	82	;'R'
  4536  007FDA  52                 	db	82	;'R'
  4537  007FDB  00                 	db	0
  4538  007FDC                     STR_114:
  4539  007FDC  48                 	db	72	;'H'
  4540  007FDD  45                 	db	69	;'E'
  4541  007FDE  58                 	db	88	;'X'
  4542  007FDF  00                 	db	0
  4543  007FE0                     STR_162:
  4544  007FE0  25                 	db	37
  4545  007FE1  6C                 	db	108	;'l'
  4546  007FE2  75                 	db	117	;'u'
  4547  007FE3  00                 	db	0
  4548  007FE4                     STR_245:
  4549  007FE4  2D                 	db	45
  4550  007FE5  2D                 	db	45
  4551  007FE6  00                 	db	0
  4552  007FE7                     STR_38:
  4553  007FE7  52                 	db	82	;'R'
  4554  007FE8  58                 	db	88	;'X'
  4555  007FE9  00                 	db	0
  4556  007FEA                     STR_29:
  4557  007FEA  54                 	db	84	;'T'
  4558  007FEB  58                 	db	88	;'X'
  4559  007FEC  00                 	db	0
  4560  007FED                     STR_57:
  4561  007FED  25                 	db	37
  4562  007FEE  64                 	db	100	;'d'
  4563  007FEF  00                 	db	0
  4564  007FF0                     STR_138:
  4565  007FF0  07                 	db	7
  4566  007FF1  00                 	db	0
  4567  007FF2                     STR_137:
  4568  007FF2  0D                 	db	13
  4569  007FF3  00                 	db	0
  4570  007FF4                     STR_30:
  4571  007FF4  2C                 	db	44
  4572  007FF5  00                 	db	0
  4573  007FF6                     STR_252:
  4574  007FF6  2E                 	db	46
  4575  007FF7  00                 	db	0
  4576  007FF8                     STR_244:
  4577  007FF8  30                 	db	48	;'0'
  4578  007FF9  00                 	db	0
  4579  007FFA                     STR_246:
  4580  007FFA  3A                 	db	58	;':'
  4581  007FFB  00                 	db	0
  4582  007FFC                     STR_251:
  4583  007FFC  3F                 	db	63	;'?'
  4584  007FFD  00                 	db	0
  4585  007FFE                     __end_of__stringdata:
  4586                           	opt stack 0
  4587                           
  4588                           ; #config settings
  4589  007FFE  00                 	db	0	; dummy byte at the end
  4590  0000                     tblptru	equ	0xFF8
  4591                           tblptrh	equ	0xFF7
  4592                           tblptrl	equ	0xFF6
  4593                           tablat	equ	0xFF5
  4594                           prodh	equ	0xFF4
  4595                           prodl	equ	0xFF3
  4596                           intcon	equ	0xFF2
  4597                           indf0	equ	0xFEF
  4598                           fsr0h	equ	0xFEA
  4599                           fsr0l	equ	0xFE9
  4600                           wreg	equ	0xFE8
  4601                           indf1	equ	0xFE7
  4602                           postinc1	equ	0xFE6
  4603                           postdec1	equ	0xFE5
  4604                           fsr1h	equ	0xFE2
  4605                           fsr1l	equ	0xFE1
  4606                           indf2	equ	0xFDF
  4607                           postinc2	equ	0xFDE
  4608                           postdec2	equ	0xFDD
  4609                           plusw2	equ	0xFDB
  4610                           fsr2h	equ	0xFDA
  4611                           fsr2l	equ	0xFD9
  4612                           status	equ	0xFD8
  4613                           
  4614                           	psect	nvBANK0
  4615  0000F5                     __pnvBANK0:
  4616                           	opt stack 0
  4617  0000F5                     _caps:
  4618                           	opt stack 0
  4619  0000F5                     	ds	2
  4620                           tblptru	equ	0xFF8
  4621                           tblptrh	equ	0xFF7
  4622                           tblptrl	equ	0xFF6
  4623                           tablat	equ	0xFF5
  4624                           prodh	equ	0xFF4
  4625                           prodl	equ	0xFF3
  4626                           intcon	equ	0xFF2
  4627                           indf0	equ	0xFEF
  4628                           fsr0h	equ	0xFEA
  4629                           fsr0l	equ	0xFE9
  4630                           wreg	equ	0xFE8
  4631                           indf1	equ	0xFE7
  4632                           postinc1	equ	0xFE6
  4633                           postdec1	equ	0xFE5
  4634                           fsr1h	equ	0xFE2
  4635                           fsr1l	equ	0xFE1
  4636                           indf2	equ	0xFDF
  4637                           postinc2	equ	0xFDE
  4638                           postdec2	equ	0xFDD
  4639                           plusw2	equ	0xFDB
  4640                           fsr2h	equ	0xFDA
  4641                           fsr2l	equ	0xFD9
  4642                           status	equ	0xFD8
  4643                           
  4644                           	psect	cinit
  4645  004F9A                     __pcinit:
  4646                           	opt stack 0
  4647  004F9A                     start_initialization:
  4648                           	opt stack 0
  4649  004F9A                     __initialization:
  4650                           	opt stack 0
  4651                           
  4652                           ; Clear objects allocated to BIGRAM (494 bytes)
  4653  004F9A  EE04  F000         	lfsr	0,__pbssBIGRAM
  4654  004F9E  EE11 F0EE          	lfsr	1,494
  4655  004FA2                     clear_0:
  4656  004FA2  6AEE               	clrf	postinc0,c
  4657  004FA4  50E5               	movf	postdec1,w,c
  4658  004FA6  50E1               	movf	fsr1l,w,c
  4659  004FA8  E1FC               	bnz	clear_0
  4660  004FAA  50E2               	movf	fsr1h,w,c
  4661  004FAC  E1FA               	bnz	clear_0
  4662                           
  4663                           ; Clear objects allocated to BANK3 (256 bytes)
  4664  004FAE  EE03  F000         	lfsr	0,__pbssBANK3
  4665  004FB2  EE11 F000          	lfsr	1,256
  4666  004FB6                     clear_1:
  4667  004FB6  6AEE               	clrf	postinc0,c
  4668  004FB8  50E5               	movf	postdec1,w,c
  4669  004FBA  50E1               	movf	fsr1l,w,c
  4670  004FBC  E1FC               	bnz	clear_1
  4671  004FBE  50E2               	movf	fsr1h,w,c
  4672  004FC0  E1FA               	bnz	clear_1
  4673                           
  4674                           ; Clear objects allocated to BANK2 (128 bytes)
  4675  004FC2  EE02  F000         	lfsr	0,__pbssBANK2
  4676  004FC6  0E80               	movlw	128
  4677  004FC8                     clear_2:
  4678  004FC8  6AEE               	clrf	postinc0,c
  4679  004FCA  06E8               	decf	wreg,f,c
  4680  004FCC  E1FD               	bnz	clear_2
  4681                           
  4682                           ; Clear objects allocated to BANK1 (178 bytes)
  4683  004FCE  EE01  F000         	lfsr	0,__pbssBANK1
  4684  004FD2  0EB2               	movlw	178
  4685  004FD4                     clear_3:
  4686  004FD4  6AEE               	clrf	postinc0,c
  4687  004FD6  06E8               	decf	wreg,f,c
  4688  004FD8  E1FD               	bnz	clear_3
  4689                           
  4690                           ; Clear objects allocated to BANK0 (36 bytes)
  4691  004FDA  EE00  F0D1         	lfsr	0,__pbssBANK0
  4692  004FDE  0E24               	movlw	36
  4693  004FE0                     clear_4:
  4694  004FE0  6AEE               	clrf	postinc0,c
  4695  004FE2  06E8               	decf	wreg,f,c
  4696  004FE4  E1FD               	bnz	clear_4
  4697                           
  4698                           ; Clear objects allocated to COMRAM (37 bytes)
  4699  004FE6  EE00  F02B         	lfsr	0,__pbssCOMRAM
  4700  004FEA  0E25               	movlw	37
  4701  004FEC                     clear_5:
  4702  004FEC  6AEE               	clrf	postinc0,c
  4703  004FEE  06E8               	decf	wreg,f,c
  4704  004FF0  E1FD               	bnz	clear_5
  4705  004FF2                     end_of_initialization:
  4706                           	opt stack 0
  4707  004FF2                     __end_of__initialization:
  4708                           	opt stack 0
  4709  004FF2  0E00               	movlw	low (__Lmediumconst shr (0+16))
  4710  004FF4  6EF8               	movwf	tblptru,c
  4711  004FF6  0100               	movlb	0
  4712  004FF8  EF0C  F01A         	goto	_main	;jump to C main() function
  4713                           tblptru	equ	0xFF8
  4714                           tblptrh	equ	0xFF7
  4715                           tblptrl	equ	0xFF6
  4716                           tablat	equ	0xFF5
  4717                           prodh	equ	0xFF4
  4718                           prodl	equ	0xFF3
  4719                           intcon	equ	0xFF2
  4720                           indf0	equ	0xFEF
  4721                           postinc0	equ	0xFEE
  4722                           fsr0h	equ	0xFEA
  4723                           fsr0l	equ	0xFE9
  4724                           wreg	equ	0xFE8
  4725                           indf1	equ	0xFE7
  4726                           postinc1	equ	0xFE6
  4727                           postdec1	equ	0xFE5
  4728                           fsr1h	equ	0xFE2
  4729                           fsr1l	equ	0xFE1
  4730                           indf2	equ	0xFDF
  4731                           postinc2	equ	0xFDE
  4732                           postdec2	equ	0xFDD
  4733                           plusw2	equ	0xFDB
  4734                           fsr2h	equ	0xFDA
  4735                           fsr2l	equ	0xFD9
  4736                           status	equ	0xFD8
  4737                           
  4738                           	psect	bssCOMRAM
  4739  00002B                     __pbssCOMRAM:
  4740                           	opt stack 0
  4741  00002B                     _can_transmitOverruns:
  4742                           	opt stack 0
  4743  00002B                     	ds	4
  4744  00002F                     _uart_receiveOverruns:
  4745                           	opt stack 0
  4746  00002F                     	ds	4
  4747  000033                     _uart_transmitOverruns:
  4748                           	opt stack 0
  4749  000033                     	ds	4
  4750  000037                     _made_table:
  4751                           	opt stack 0
  4752  000037                     	ds	2
  4753  000039                     _status_led_cnt:
  4754                           	opt stack 0
  4755  000039                     	ds	2
  4756  00003B                     strtok@sp:
  4757                           	opt stack 0
  4758  00003B                     	ds	2
  4759  00003D                     _USART_Status:
  4760                           	opt stack 0
  4761  00003D                     	ds	1
  4762  00003E                     __ECANRxFilterHitInfo:
  4763                           	opt stack 0
  4764  00003E                     	ds	1
  4765  00003F                     _ledFunctionality:
  4766                           	opt stack 0
  4767  00003F                     	ds	1
  4768  000040                     _canInputFifo:
  4769                           	opt stack 0
  4770  000040                     	ds	8
  4771  000048                     _serialInputFifo:
  4772                           	opt stack 0
  4773  000048                     	ds	8
  4774                           tblptru	equ	0xFF8
  4775                           tblptrh	equ	0xFF7
  4776                           tblptrl	equ	0xFF6
  4777                           tablat	equ	0xFF5
  4778                           prodh	equ	0xFF4
  4779                           prodl	equ	0xFF3
  4780                           intcon	equ	0xFF2
  4781                           indf0	equ	0xFEF
  4782                           postinc0	equ	0xFEE
  4783                           fsr0h	equ	0xFEA
  4784                           fsr0l	equ	0xFE9
  4785                           wreg	equ	0xFE8
  4786                           indf1	equ	0xFE7
  4787                           postinc1	equ	0xFE6
  4788                           postdec1	equ	0xFE5
  4789                           fsr1h	equ	0xFE2
  4790                           fsr1l	equ	0xFE1
  4791                           indf2	equ	0xFDF
  4792                           postinc2	equ	0xFDE
  4793                           postdec2	equ	0xFDD
  4794                           plusw2	equ	0xFDB
  4795                           fsr2h	equ	0xFDA
  4796                           fsr2l	equ	0xFD9
  4797                           status	equ	0xFD8
  4798                           
  4799                           	psect	bssBANK0
  4800  0000D1                     __pbssBANK0:
  4801                           	opt stack 0
  4802  0000D1                     _can_receiveOverruns:
  4803                           	opt stack 0
  4804  0000D1                     	ds	4
  4805  0000D5                     _cntRxBytes:
  4806                           	opt stack 0
  4807  0000D5                     	ds	4
  4808  0000D9                     _cntRxFrames:
  4809                           	opt stack 0
  4810  0000D9                     	ds	4
  4811  0000DD                     _cntTxBytes:
  4812                           	opt stack 0
  4813  0000DD                     	ds	4
  4814  0000E1                     _cntTxFrames:
  4815                           	opt stack 0
  4816  0000E1                     	ds	4
  4817  0000E5                     _timekeeper:
  4818                           	opt stack 0
  4819  0000E5                     	ds	4
  4820  0000E9                     _timer:
  4821                           	opt stack 0
  4822  0000E9                     	ds	4
  4823  0000ED                     _bDLE:
  4824                           	opt stack 0
  4825  0000ED                     	ds	1
  4826  0000EE                     _bInitiated:
  4827                           	opt stack 0
  4828  0000EE                     	ds	1
  4829  0000EF                     _bOpen:
  4830                           	opt stack 0
  4831  0000EF                     	ds	1
  4832  0000F0                     _canrxcount:
  4833                           	opt stack 0
  4834  0000F0                     	ds	1
  4835  0000F1                     _mode:
  4836                           	opt stack 0
  4837  0000F1                     	ds	1
  4838  0000F2                     _nTimeStamp:
  4839                           	opt stack 0
  4840  0000F2                     	ds	1
  4841  0000F3                     _sequencyno:
  4842                           	opt stack 0
  4843  0000F3                     	ds	1
  4844  0000F4                     _stateVscpDriver:
  4845                           	opt stack 0
  4846  0000F4                     	ds	1
  4847                           tblptru	equ	0xFF8
  4848                           tblptrh	equ	0xFF7
  4849                           tblptrl	equ	0xFF6
  4850                           tablat	equ	0xFF5
  4851                           prodh	equ	0xFF4
  4852                           prodl	equ	0xFF3
  4853                           intcon	equ	0xFF2
  4854                           indf0	equ	0xFEF
  4855                           postinc0	equ	0xFEE
  4856                           fsr0h	equ	0xFEA
  4857                           fsr0l	equ	0xFE9
  4858                           wreg	equ	0xFE8
  4859                           indf1	equ	0xFE7
  4860                           postinc1	equ	0xFE6
  4861                           postdec1	equ	0xFE5
  4862                           fsr1h	equ	0xFE2
  4863                           fsr1l	equ	0xFE1
  4864                           indf2	equ	0xFDF
  4865                           postinc2	equ	0xFDE
  4866                           postdec2	equ	0xFDD
  4867                           plusw2	equ	0xFDB
  4868                           fsr2h	equ	0xFDA
  4869                           fsr2l	equ	0xFD9
  4870                           status	equ	0xFD8
  4871                           
  4872                           	psect	bssBANK1
  4873  000100                     __pbssBANK1:
  4874                           	opt stack 0
  4875  000100                     _bHex:
  4876                           	opt stack 0
  4877  000100                     	ds	1
  4878  000101                     _bSilent:
  4879                           	opt stack 0
  4880  000101                     	ds	1
  4881  000102                     _pos:
  4882                           	opt stack 0
  4883  000102                     	ds	1
  4884  000103                     _rwtimeout:
  4885                           	opt stack 0
  4886  000103                     	ds	1
  4887  000104                     _cmdbuf:
  4888                           	opt stack 0
  4889  000104                     	ds	80
  4890  000154                     _wrkbuf:
  4891                           	opt stack 0
  4892  000154                     	ds	80
  4893  0001A4                     _vscpData:
  4894                           	opt stack 0
  4895  0001A4                     	ds	8
  4896  0001AC                     _vscpClass:
  4897                           	opt stack 0
  4898  0001AC                     	ds	2
  4899  0001AE                     _vscpNodeId:
  4900                           	opt stack 0
  4901  0001AE                     	ds	1
  4902  0001AF                     _vscpPriority:
  4903                           	opt stack 0
  4904  0001AF                     	ds	1
  4905  0001B0                     _vscpSize:
  4906                           	opt stack 0
  4907  0001B0                     	ds	1
  4908  0001B1                     _vscpType:
  4909                           	opt stack 0
  4910  0001B1                     	ds	1
  4911                           tblptru	equ	0xFF8
  4912                           tblptrh	equ	0xFF7
  4913                           tblptrl	equ	0xFF6
  4914                           tablat	equ	0xFF5
  4915                           prodh	equ	0xFF4
  4916                           prodl	equ	0xFF3
  4917                           intcon	equ	0xFF2
  4918                           indf0	equ	0xFEF
  4919                           postinc0	equ	0xFEE
  4920                           fsr0h	equ	0xFEA
  4921                           fsr0l	equ	0xFE9
  4922                           wreg	equ	0xFE8
  4923                           indf1	equ	0xFE7
  4924                           postinc1	equ	0xFE6
  4925                           postdec1	equ	0xFE5
  4926                           fsr1h	equ	0xFE2
  4927                           fsr1l	equ	0xFE1
  4928                           indf2	equ	0xFDF
  4929                           postinc2	equ	0xFDE
  4930                           postdec2	equ	0xFDD
  4931                           plusw2	equ	0xFDB
  4932                           fsr2h	equ	0xFDA
  4933                           fsr2l	equ	0xFD9
  4934                           status	equ	0xFD8
  4935                           
  4936                           	psect	bssBANK2
  4937  000200                     __pbssBANK2:
  4938                           	opt stack 0
  4939  000200                     _inputBuffer:
  4940                           	opt stack 0
  4941  000200                     	ds	128
  4942                           tblptru	equ	0xFF8
  4943                           tblptrh	equ	0xFF7
  4944                           tblptrl	equ	0xFF6
  4945                           tablat	equ	0xFF5
  4946                           prodh	equ	0xFF4
  4947                           prodl	equ	0xFF3
  4948                           intcon	equ	0xFF2
  4949                           indf0	equ	0xFEF
  4950                           postinc0	equ	0xFEE
  4951                           fsr0h	equ	0xFEA
  4952                           fsr0l	equ	0xFE9
  4953                           wreg	equ	0xFE8
  4954                           indf1	equ	0xFE7
  4955                           postinc1	equ	0xFE6
  4956                           postdec1	equ	0xFE5
  4957                           fsr1h	equ	0xFE2
  4958                           fsr1l	equ	0xFE1
  4959                           indf2	equ	0xFDF
  4960                           postinc2	equ	0xFDE
  4961                           postdec2	equ	0xFDD
  4962                           plusw2	equ	0xFDB
  4963                           fsr2h	equ	0xFDA
  4964                           fsr2l	equ	0xFD9
  4965                           status	equ	0xFD8
  4966                           
  4967                           	psect	bssBANK3
  4968  000300                     __pbssBANK3:
  4969                           	opt stack 0
  4970  000300                     _crc8_table:
  4971                           	opt stack 0
  4972  000300                     	ds	256
  4973                           tblptru	equ	0xFF8
  4974                           tblptrh	equ	0xFF7
  4975                           tblptrl	equ	0xFF6
  4976                           tablat	equ	0xFF5
  4977                           prodh	equ	0xFF4
  4978                           prodl	equ	0xFF3
  4979                           intcon	equ	0xFF2
  4980                           indf0	equ	0xFEF
  4981                           postinc0	equ	0xFEE
  4982                           fsr0h	equ	0xFEA
  4983                           fsr0l	equ	0xFE9
  4984                           wreg	equ	0xFE8
  4985                           indf1	equ	0xFE7
  4986                           postinc1	equ	0xFE6
  4987                           postdec1	equ	0xFE5
  4988                           fsr1h	equ	0xFE2
  4989                           fsr1l	equ	0xFE1
  4990                           indf2	equ	0xFDF
  4991                           postinc2	equ	0xFDE
  4992                           postdec2	equ	0xFDD
  4993                           plusw2	equ	0xFDB
  4994                           fsr2h	equ	0xFDA
  4995                           fsr2l	equ	0xFD9
  4996                           status	equ	0xFD8
  4997                           
  4998                           	psect	bssBIGRAM
  4999  000400                     __pbssBIGRAM:
  5000                           	opt stack 0
  5001  000400                     _caninputBuffer:
  5002                           	opt stack 0
  5003  000400                     	ds	494
  5004                           tblptru	equ	0xFF8
  5005                           tblptrh	equ	0xFF7
  5006                           tblptrl	equ	0xFF6
  5007                           tablat	equ	0xFF5
  5008                           prodh	equ	0xFF4
  5009                           prodl	equ	0xFF3
  5010                           intcon	equ	0xFF2
  5011                           indf0	equ	0xFEF
  5012                           postinc0	equ	0xFEE
  5013                           fsr0h	equ	0xFEA
  5014                           fsr0l	equ	0xFE9
  5015                           wreg	equ	0xFE8
  5016                           indf1	equ	0xFE7
  5017                           postinc1	equ	0xFE6
  5018                           postdec1	equ	0xFE5
  5019                           fsr1h	equ	0xFE2
  5020                           fsr1l	equ	0xFE1
  5021                           indf2	equ	0xFDF
  5022                           postinc2	equ	0xFDE
  5023                           postdec2	equ	0xFDD
  5024                           plusw2	equ	0xFDB
  5025                           fsr2h	equ	0xFDA
  5026                           fsr2l	equ	0xFD9
  5027                           status	equ	0xFD8
  5028                           
  5029                           	psect	cstackBANK2
  5030  000280                     __pcstackBANK2:
  5031                           	opt stack 0
  5032  000280                     doModeVerbose@id:
  5033                           	opt stack 0
  5034                           
  5035                           ; 4 bytes @ 0x0
  5036  000280                     	ds	4
  5037  000284                     doModeVerbose@preg:
  5038                           	opt stack 0
  5039                           
  5040                           ; 2 bytes @ 0x4
  5041  000284                     	ds	2
  5042  000286                     doModeVerbose@preg_1164:
  5043                           	opt stack 0
  5044                           
  5045                           ; 2 bytes @ 0x6
  5046  000286                     	ds	2
  5047  000288                     doModeVerbose@filter_class:
  5048                           	opt stack 0
  5049                           
  5050                           ; 2 bytes @ 0x8
  5051  000288                     	ds	2
  5052  00028A                     doModeVerbose@mask_class:
  5053                           	opt stack 0
  5054                           
  5055                           ; 2 bytes @ 0xA
  5056  00028A                     	ds	2
  5057  00028C                     doModeVerbose@nodeid:
  5058                           	opt stack 0
  5059                           
  5060                           ; 1 bytes @ 0xC
  5061  00028C                     	ds	1
  5062  00028D                     doModeVerbose@nodeid_1156:
  5063                           	opt stack 0
  5064                           
  5065                           ; 1 bytes @ 0xD
  5066  00028D                     	ds	1
  5067  00028E                     doModeVerbose@filter_priority:
  5068                           	opt stack 0
  5069                           
  5070                           ; 1 bytes @ 0xE
  5071  00028E                     	ds	1
  5072  00028F                     doModeVerbose@filter_type:
  5073                           	opt stack 0
  5074                           
  5075                           ; 1 bytes @ 0xF
  5076  00028F                     	ds	1
  5077  000290                     doModeVerbose@filter_nodeid:
  5078                           	opt stack 0
  5079                           
  5080                           ; 1 bytes @ 0x10
  5081  000290                     	ds	1
  5082  000291                     doModeVerbose@mask_priority:
  5083                           	opt stack 0
  5084                           
  5085                           ; 1 bytes @ 0x11
  5086  000291                     	ds	1
  5087  000292                     doModeVerbose@mask_type:
  5088                           	opt stack 0
  5089                           
  5090                           ; 1 bytes @ 0x12
  5091  000292                     	ds	1
  5092  000293                     doModeVerbose@mask_nodeid:
  5093                           	opt stack 0
  5094                           
  5095                           ; 1 bytes @ 0x13
  5096  000293                     	ds	1
  5097  000294                     _doModeVerbose$1124:
  5098                           	opt stack 0
  5099                           
  5100                           ; 2 bytes @ 0x14
  5101  000294                     	ds	2
  5102  000296                     _doModeVerbose$1136:
  5103                           	opt stack 0
  5104                           
  5105                           ; 2 bytes @ 0x16
  5106  000296                     	ds	2
  5107  000298                     _doModeVerbose$1141:
  5108                           	opt stack 0
  5109                           
  5110                           ; 2 bytes @ 0x18
  5111  000298                     	ds	2
  5112  00029A                     _doModeVerbose$1147:
  5113                           	opt stack 0
  5114                           
  5115                           ; 2 bytes @ 0x1A
  5116  00029A                     	ds	2
  5117  00029C                     _doModeVerbose$1151:
  5118                           	opt stack 0
  5119                           
  5120                           ; 2 bytes @ 0x1C
  5121  00029C                     	ds	2
  5122  00029E                     _doModeVerbose$1176:
  5123                           	opt stack 0
  5124                           
  5125                           ; 2 bytes @ 0x1E
  5126  00029E                     	ds	2
  5127  0002A0                     doModeVerbose@rv:
  5128                           	opt stack 0
  5129                           
  5130                           ; 1 bytes @ 0x20
  5131  0002A0                     	ds	1
  5132  0002A1                     doModeVerbose@page_1157:
  5133                           	opt stack 0
  5134                           
  5135                           ; 1 bytes @ 0x21
  5136  0002A1                     	ds	1
  5137  0002A2                     doModeVerbose@reg_1158:
  5138                           	opt stack 0
  5139                           
  5140                           ; 1 bytes @ 0x22
  5141  0002A2                     	ds	1
  5142  0002A3                     doModeVerbose@id_1217:
  5143                           	opt stack 0
  5144                           
  5145                           ; 4 bytes @ 0x23
  5146  0002A3                     	ds	4
  5147  0002A7                     doModeVerbose@filterno:
  5148                           	opt stack 0
  5149                           
  5150                           ; 1 bytes @ 0x27
  5151  0002A7                     	ds	1
  5152  0002A8                     doModeVerbose@maskno:
  5153                           	opt stack 0
  5154                           
  5155                           ; 1 bytes @ 0x28
  5156  0002A8                     	ds	1
  5157  0002A9                     doModeVerbose@value_1159:
  5158                           	opt stack 0
  5159                           
  5160                           ; 1 bytes @ 0x29
  5161  0002A9                     	ds	1
  5162  0002AA                     doModeVerbose@i:
  5163                           	opt stack 0
  5164                           
  5165                           ; 1 bytes @ 0x2A
  5166  0002AA                     	ds	1
  5167  0002AB                     doModeVerbose@count:
  5168                           	opt stack 0
  5169                           
  5170                           ; 1 bytes @ 0x2B
  5171  0002AB                     	ds	1
  5172  0002AC                     doModeVerbose@c:
  5173                           	opt stack 0
  5174                           
  5175                           ; 1 bytes @ 0x2C
  5176  0002AC                     	ds	1
  5177  0002AD                     doModeVerbose@page:
  5178                           	opt stack 0
  5179                           
  5180                           ; 1 bytes @ 0x2D
  5181  0002AD                     	ds	1
  5182  0002AE                     doModeVerbose@reg:
  5183                           	opt stack 0
  5184                           
  5185                           ; 1 bytes @ 0x2E
  5186  0002AE                     	ds	1
  5187  0002AF                     doModeVerbose@nodeid_1171:
  5188                           	opt stack 0
  5189                           
  5190                           ; 1 bytes @ 0x2F
  5191  0002AF                     	ds	1
  5192  0002B0                     doModeVerbose@i_1106:
  5193                           	opt stack 0
  5194                           
  5195                           ; 1 bytes @ 0x30
  5196  0002B0                     	ds	1
  5197  0002B1                     doModeVerbose@value:
  5198                           	opt stack 0
  5199                           
  5200                           ; 1 bytes @ 0x31
  5201  0002B1                     	ds	1
  5202  0002B2                     doModeVerbose@p_1112:
  5203                           	opt stack 0
  5204                           
  5205                           ; 2 bytes @ 0x32
  5206  0002B2                     	ds	2
  5207  0002B4                     doModeVerbose@p_1160:
  5208                           	opt stack 0
  5209                           
  5210                           ; 2 bytes @ 0x34
  5211  0002B4                     	ds	2
  5212  0002B6                     doModeVerbose@ifmode:
  5213                           	opt stack 0
  5214                           
  5215                           ; 1 bytes @ 0x36
  5216  0002B6                     	ds	1
  5217  0002B7                     doModeVerbose@p:
  5218                           	opt stack 0
  5219                           
  5220                           ; 2 bytes @ 0x37
  5221  0002B7                     	ds	2
  5222  0002B9                     doModeVerbose@p_1185:
  5223                           	opt stack 0
  5224                           
  5225                           ; 2 bytes @ 0x39
  5226  0002B9                     	ds	2
  5227  0002BB                     doModeVerbose@p_1205:
  5228                           	opt stack 0
  5229                           
  5230                           ; 2 bytes @ 0x3B
  5231  0002BB                     	ds	2
  5232                           tblptru	equ	0xFF8
  5233                           tblptrh	equ	0xFF7
  5234                           tblptrl	equ	0xFF6
  5235                           tablat	equ	0xFF5
  5236                           prodh	equ	0xFF4
  5237                           prodl	equ	0xFF3
  5238                           intcon	equ	0xFF2
  5239                           indf0	equ	0xFEF
  5240                           postinc0	equ	0xFEE
  5241                           fsr0h	equ	0xFEA
  5242                           fsr0l	equ	0xFE9
  5243                           wreg	equ	0xFE8
  5244                           indf1	equ	0xFE7
  5245                           postinc1	equ	0xFE6
  5246                           postdec1	equ	0xFE5
  5247                           fsr1h	equ	0xFE2
  5248                           fsr1l	equ	0xFE1
  5249                           indf2	equ	0xFDF
  5250                           postinc2	equ	0xFDE
  5251                           postdec2	equ	0xFDD
  5252                           plusw2	equ	0xFDB
  5253                           fsr2h	equ	0xFDA
  5254                           fsr2l	equ	0xFD9
  5255                           status	equ	0xFD8
  5256                           
  5257                           	psect	cstackBANK1
  5258  0001B2                     __pcstackBANK1:
  5259                           	opt stack 0
  5260  0001B2                     ??_doModeVerbose:
  5261                           
  5262                           ; 0 bytes @ 0x0
  5263  0001B2                     	ds	20
  5264                           tblptru	equ	0xFF8
  5265                           tblptrh	equ	0xFF7
  5266                           tblptrl	equ	0xFF6
  5267                           tablat	equ	0xFF5
  5268                           prodh	equ	0xFF4
  5269                           prodl	equ	0xFF3
  5270                           intcon	equ	0xFF2
  5271                           indf0	equ	0xFEF
  5272                           postinc0	equ	0xFEE
  5273                           fsr0h	equ	0xFEA
  5274                           fsr0l	equ	0xFE9
  5275                           wreg	equ	0xFE8
  5276                           indf1	equ	0xFE7
  5277                           postinc1	equ	0xFE6
  5278                           postdec1	equ	0xFE5
  5279                           fsr1h	equ	0xFE2
  5280                           fsr1l	equ	0xFE1
  5281                           indf2	equ	0xFDF
  5282                           postinc2	equ	0xFDE
  5283                           postdec2	equ	0xFDD
  5284                           plusw2	equ	0xFDB
  5285                           fsr2h	equ	0xFDA
  5286                           fsr2l	equ	0xFD9
  5287                           status	equ	0xFD8
  5288                           
  5289                           	psect	cstackBANK0
  5290  000060                     __pcstackBANK0:
  5291                           	opt stack 0
  5292  000060                     ?_WriteTimer0:
  5293                           	opt stack 0
  5294  000060                     ?_fifo_init:
  5295                           	opt stack 0
  5296  000060                     ?_OpenUSART:
  5297                           	opt stack 0
  5298  000060                     ?_writeEEPROM:
  5299                           	opt stack 0
  5300  000060                     ?_setFilter:
  5301                           	opt stack 0
  5302  000060                     ?__CANIDToRegs:
  5303                           	opt stack 0
  5304  000060                     ??_isdigit:
  5305  000060                     ?_readEEPROM:
  5306                           	opt stack 0
  5307  000060                     ?_fifo_read:
  5308                           	opt stack 0
  5309  000060                     ?_memset:
  5310                           	opt stack 0
  5311  000060                     ?_strcpy:
  5312                           	opt stack 0
  5313  000060                     ?_strchr:
  5314                           	opt stack 0
  5315  000060                     ?_strlen:
  5316                           	opt stack 0
  5317  000060                     ?_memcpy:
  5318                           	opt stack 0
  5319  000060                     ?_strcat:
  5320                           	opt stack 0
  5321  000060                     ?___lwdiv:
  5322                           	opt stack 0
  5323  000060                     ?___lwmod:
  5324                           	opt stack 0
  5325  000060                     ?___wmul:
  5326                           	opt stack 0
  5327  000060                     ?___lldiv:
  5328                           	opt stack 0
  5329  000060                     ECANSetOperationMode@mode:
  5330                           	opt stack 0
  5331  000060                     nibbleFromChar@c:
  5332                           	opt stack 0
  5333  000060                     OpenTimer0@config:
  5334                           	opt stack 0
  5335  000060                     WriteUSART@data:
  5336                           	opt stack 0
  5337  000060                     toupper@c:
  5338                           	opt stack 0
  5339  000060                     __CANIDToRegs@ptr:
  5340                           	opt stack 0
  5341  000060                     fifo_init@buf:
  5342                           	opt stack 0
  5343  000060                     fifo_read@buf:
  5344                           	opt stack 0
  5345  000060                     writeEEPROM@address:
  5346                           	opt stack 0
  5347  000060                     readEEPROM@address:
  5348                           	opt stack 0
  5349  000060                     _init_crc8$2082:
  5350                           	opt stack 0
  5351  000060                     WriteTimer0@timer0:
  5352                           	opt stack 0
  5353  000060                     OpenUSART@spbrg:
  5354                           	opt stack 0
  5355  000060                     ___lwdiv@dividend:
  5356                           	opt stack 0
  5357  000060                     ___lwmod@dividend:
  5358                           	opt stack 0
  5359  000060                     memcpy@d1:
  5360                           	opt stack 0
  5361  000060                     memset@p1:
  5362                           	opt stack 0
  5363  000060                     strcat@to:
  5364                           	opt stack 0
  5365  000060                     strchr@ptr:
  5366                           	opt stack 0
  5367  000060                     strcpy@to:
  5368                           	opt stack 0
  5369  000060                     strlen@s:
  5370                           	opt stack 0
  5371  000060                     ___wmul@multiplier:
  5372                           	opt stack 0
  5373  000060                     setFilter@val:
  5374                           	opt stack 0
  5375  000060                     ___lldiv@dividend:
  5376                           	opt stack 0
  5377                           
  5378                           ; 4 bytes @ 0x0
  5379  000060                     	ds	1
  5380  000061                     ?_putsUSART:
  5381                           	opt stack 0
  5382  000061                     ??_printBinary:
  5383  000061                     ?_strichr:
  5384                           	opt stack 0
  5385  000061                     _isdigit$2895:
  5386                           	opt stack 0
  5387  000061                     putsUSART@data:
  5388                           	opt stack 0
  5389  000061                     strichr@ptr:
  5390                           	opt stack 0
  5391                           
  5392                           ; 2 bytes @ 0x1
  5393  000061                     	ds	1
  5394  000062                     writeEEPROM@data:
  5395                           	opt stack 0
  5396  000062                     readEEPROM@data:
  5397                           	opt stack 0
  5398  000062                     OpenUSART@config:
  5399                           	opt stack 0
  5400  000062                     isdigit@c:
  5401                           	opt stack 0
  5402  000062                     fifo_init@size:
  5403                           	opt stack 0
  5404  000062                     fifo_read@nbytes:
  5405                           	opt stack 0
  5406  000062                     init_crc8@j:
  5407                           	opt stack 0
  5408  000062                     WriteTimer0@timer:
  5409                           	opt stack 0
  5410  000062                     ___lwdiv@divisor:
  5411                           	opt stack 0
  5412  000062                     ___lwmod@divisor:
  5413                           	opt stack 0
  5414  000062                     memcpy@s1:
  5415                           	opt stack 0
  5416  000062                     memset@c:
  5417                           	opt stack 0
  5418  000062                     strcat@from:
  5419                           	opt stack 0
  5420  000062                     strchr@chr:
  5421                           	opt stack 0
  5422  000062                     strcpy@from:
  5423                           	opt stack 0
  5424  000062                     strlen@cp:
  5425                           	opt stack 0
  5426  000062                     ___wmul@multiplicand:
  5427                           	opt stack 0
  5428  000062                     __CANIDToRegs@val:
  5429                           	opt stack 0
  5430                           
  5431                           ; 4 bytes @ 0x2
  5432  000062                     	ds	1
  5433  000063                     ??_putsUSART:
  5434  000063                     init_app_eeprom@i:
  5435                           	opt stack 0
  5436  000063                     printBinary@value:
  5437                           	opt stack 0
  5438  000063                     strichr@chr:
  5439                           	opt stack 0
  5440                           
  5441                           ; 2 bytes @ 0x3
  5442  000063                     	ds	1
  5443  000064                     ??_fifo_read:
  5444  000064                     ??_strchr:
  5445  000064                     ??_setFilter:
  5446  000064                     ?_hexStringToBytes:
  5447                           	opt stack 0
  5448  000064                     ?_strnicmp:
  5449                           	opt stack 0
  5450  000064                     fifo_init@f:
  5451                           	opt stack 0
  5452  000064                     init_crc8@crc:
  5453                           	opt stack 0
  5454  000064                     ___lwdiv@counter:
  5455                           	opt stack 0
  5456  000064                     ___lwmod@counter:
  5457                           	opt stack 0
  5458  000064                     printBinary@i:
  5459                           	opt stack 0
  5460  000064                     hexStringToBytes@buf:
  5461                           	opt stack 0
  5462  000064                     memcpy@n:
  5463                           	opt stack 0
  5464  000064                     memset@n:
  5465                           	opt stack 0
  5466  000064                     strcat@cp:
  5467                           	opt stack 0
  5468  000064                     strcpy@cp:
  5469                           	opt stack 0
  5470  000064                     strnicmp@s1:
  5471                           	opt stack 0
  5472  000064                     ___wmul@product:
  5473                           	opt stack 0
  5474  000064                     ___lldiv@divisor:
  5475                           	opt stack 0
  5476                           
  5477                           ; 4 bytes @ 0x4
  5478  000064                     	ds	1
  5479  000065                     init_crc8@i:
  5480                           	opt stack 0
  5481  000065                     ___lwdiv@quotient:
  5482                           	opt stack 0
  5483                           
  5484                           ; 2 bytes @ 0x5
  5485  000065                     	ds	1
  5486  000066                     ?_atoi:
  5487                           	opt stack 0
  5488  000066                     ?_strspn:
  5489                           	opt stack 0
  5490  000066                     ?_strcspn:
  5491                           	opt stack 0
  5492  000066                     __CANIDToRegs@type:
  5493                           	opt stack 0
  5494  000066                     hexStringToBytes@size:
  5495                           	opt stack 0
  5496  000066                     atoi@s:
  5497                           	opt stack 0
  5498  000066                     memcpy@d:
  5499                           	opt stack 0
  5500  000066                     memset@p:
  5501                           	opt stack 0
  5502  000066                     strnicmp@s2:
  5503                           	opt stack 0
  5504  000066                     strcspn@s1:
  5505                           	opt stack 0
  5506  000066                     strspn@s1:
  5507                           	opt stack 0
  5508                           
  5509                           ; 2 bytes @ 0x6
  5510  000066                     	ds	1
  5511  000067                     ??__CANIDToRegs:
  5512  000067                     ?_crc8:
  5513                           	opt stack 0
  5514  000067                     ?_utoa:
  5515                           	opt stack 0
  5516  000067                     crc8@crc:
  5517                           	opt stack 0
  5518  000067                     hexStringToBytes@inhex:
  5519                           	opt stack 0
  5520  000067                     utoa@buf:
  5521                           	opt stack 0
  5522                           
  5523                           ; 2 bytes @ 0x7
  5524  000067                     	ds	1
  5525  000068                     ??_atoi:
  5526  000068                     fifo_read@p:
  5527                           	opt stack 0
  5528  000068                     memcpy@s:
  5529                           	opt stack 0
  5530  000068                     strnicmp@len:
  5531                           	opt stack 0
  5532  000068                     strcspn@s2:
  5533                           	opt stack 0
  5534  000068                     strspn@s2:
  5535                           	opt stack 0
  5536  000068                     ___lldiv@quotient:
  5537                           	opt stack 0
  5538                           
  5539                           ; 4 bytes @ 0x8
  5540  000068                     	ds	1
  5541  000069                     ??_hexStringToBytes:
  5542  000069                     __CANIDToRegs@Value:
  5543                           	opt stack 0
  5544  000069                     crc8@m:
  5545                           	opt stack 0
  5546  000069                     utoa@val:
  5547                           	opt stack 0
  5548                           
  5549                           ; 2 bytes @ 0x9
  5550  000069                     	ds	1
  5551  00006A                     ??_crc8:
  5552  00006A                     ??_strnicmp:
  5553  00006A                     ?_ECANSendMessage:
  5554                           	opt stack 0
  5555  00006A                     setFilter@filter:
  5556                           	opt stack 0
  5557  00006A                     atoi@sign:
  5558                           	opt stack 0
  5559  00006A                     fifo_read@i:
  5560                           	opt stack 0
  5561  00006A                     strcspn@i:
  5562                           	opt stack 0
  5563  00006A                     strspn@i:
  5564                           	opt stack 0
  5565  00006A                     ECANSendMessage@id:
  5566                           	opt stack 0
  5567                           
  5568                           ; 4 bytes @ 0xA
  5569  00006A                     	ds	1
  5570  00006B                     setFilter@sidh:
  5571                           	opt stack 0
  5572  00006B                     atoi@a:
  5573                           	opt stack 0
  5574  00006B                     utoa@base:
  5575                           	opt stack 0
  5576                           
  5577                           ; 2 bytes @ 0xB
  5578  00006B                     	ds	1
  5579  00006C                     ?_sendEscapedUartData:
  5580                           	opt stack 0
  5581  00006C                     ?_calcCRC:
  5582                           	opt stack 0
  5583  00006C                     ?_strtok:
  5584                           	opt stack 0
  5585  00006C                     setFilter@sidl:
  5586                           	opt stack 0
  5587  00006C                     fifo_read@f:
  5588                           	opt stack 0
  5589  00006C                     ___lldiv@counter:
  5590                           	opt stack 0
  5591  00006C                     strnicmp@r:
  5592                           	opt stack 0
  5593  00006C                     sendEscapedUartData@pcrc:
  5594                           	opt stack 0
  5595  00006C                     calcCRC@p:
  5596                           	opt stack 0
  5597  00006C                     hexStringToBytes@len:
  5598                           	opt stack 0
  5599  00006C                     strtok@s1:
  5600                           	opt stack 0
  5601                           
  5602                           ; 2 bytes @ 0xC
  5603  00006C                     	ds	1
  5604  00006D                     ?_getCANFrame:
  5605                           	opt stack 0
  5606  00006D                     ?_stristr:
  5607                           	opt stack 0
  5608  00006D                     ?___llmod:
  5609                           	opt stack 0
  5610  00006D                     setFilter@eidh:
  5611                           	opt stack 0
  5612  00006D                     getCANFrame@pdlc:
  5613                           	opt stack 0
  5614  00006D                     utoa@v:
  5615                           	opt stack 0
  5616  00006D                     stristr@s1:
  5617                           	opt stack 0
  5618  00006D                     ___llmod@dividend:
  5619                           	opt stack 0
  5620                           
  5621                           ; 4 bytes @ 0xD
  5622  00006D                     	ds	1
  5623  00006E                     sendEscapedUartData@c:
  5624                           	opt stack 0
  5625  00006E                     calcCRC@len:
  5626                           	opt stack 0
  5627  00006E                     setFilter@eidl:
  5628                           	opt stack 0
  5629  00006E                     ECANSendMessage@data:
  5630                           	opt stack 0
  5631  00006E                     hexStringToBytes@p:
  5632                           	opt stack 0
  5633  00006E                     strtok@s2:
  5634                           	opt stack 0
  5635                           
  5636                           ; 2 bytes @ 0xE
  5637  00006E                     	ds	1
  5638  00006F                     ?_sendVSCPDriverCommandReply:
  5639                           	opt stack 0
  5640  00006F                     sendVSCPDriverErrorFrame@errorcode:
  5641                           	opt stack 0
  5642  00006F                     sendVSCPDriverAck@crc:
  5643                           	opt stack 0
  5644  00006F                     sendVSCPDriverNack@crc:
  5645                           	opt stack 0
  5646  00006F                     sendVSCPDriverCommandReply@cmdCode:
  5647                           	opt stack 0
  5648  00006F                     sendVSCPModeCapabilities@crc:
  5649                           	opt stack 0
  5650  00006F                     calcCRC@j:
  5651                           	opt stack 0
  5652  00006F                     utoa@c:
  5653                           	opt stack 0
  5654  00006F                     getCANFrame@pdata:
  5655                           	opt stack 0
  5656  00006F                     stristr@s2:
  5657                           	opt stack 0
  5658                           
  5659                           ; 2 bytes @ 0xF
  5660  00006F                     	ds	1
  5661  000070                     ?_itoa:
  5662                           	opt stack 0
  5663  000070                     sendVSCPDriverErrorFrame@crc:
  5664                           	opt stack 0
  5665  000070                     sendVSCPDriverCommandReply@cmdReplyCode:
  5666                           	opt stack 0
  5667  000070                     calcCRC@crc:
  5668                           	opt stack 0
  5669  000070                     ECANSendMessage@dataLen:
  5670                           	opt stack 0
  5671  000070                     hexStringToBytes@i:
  5672                           	opt stack 0
  5673  000070                     itoa@buf:
  5674                           	opt stack 0
  5675                           
  5676                           ; 2 bytes @ 0x10
  5677  000070                     	ds	1
  5678  000071                     sendVSCPDriverCommandReply@crc:
  5679                           	opt stack 0
  5680  000071                     getCANFrame@pid:
  5681                           	opt stack 0
  5682  000071                     ECANSendMessage@msgFlags:
  5683                           	opt stack 0
  5684  000071                     ___llmod@divisor:
  5685                           	opt stack 0
  5686                           
  5687                           ; 4 bytes @ 0x11
  5688  000071                     	ds	1
  5689  000072                     ??_ECANSendMessage:
  5690  000072                     ?_getVSCPFrame:
  5691                           	opt stack 0
  5692  000072                     getVSCPFrame@pvscpclass:
  5693                           	opt stack 0
  5694  000072                     itoa@val:
  5695                           	opt stack 0
  5696  000072                     receiveSendEventCANAL@data:
  5697                           	opt stack 0
  5698  000072                     receiveSendMultiEventCANAL@data:
  5699                           	opt stack 0
  5700                           
  5701                           ; 8 bytes @ 0x12
  5702  000072                     	ds	1
  5703  000073                     ECANSendMessage@pb:
  5704                           	opt stack 0
  5705                           
  5706                           ; 18 bytes @ 0x13
  5707  000073                     	ds	1
  5708  000074                     getVSCPFrame@pvscptype:
  5709                           	opt stack 0
  5710  000074                     itoa@base:
  5711                           	opt stack 0
  5712                           
  5713                           ; 2 bytes @ 0x14
  5714  000074                     	ds	1
  5715  000075                     ___llmod@counter:
  5716                           	opt stack 0
  5717                           
  5718                           ; 1 bytes @ 0x15
  5719  000075                     	ds	1
  5720  000076                     ?_sprintf:
  5721                           	opt stack 0
  5722  000076                     ?_ultoa:
  5723                           	opt stack 0
  5724  000076                     getVSCPFrame@pNodeId:
  5725                           	opt stack 0
  5726  000076                     sprintf@sp:
  5727                           	opt stack 0
  5728  000076                     ultoa@buf:
  5729                           	opt stack 0
  5730                           
  5731                           ; 2 bytes @ 0x16
  5732  000076                     	ds	2
  5733  000078                     getVSCPFrame@pPriority:
  5734                           	opt stack 0
  5735  000078                     sprintf@f:
  5736                           	opt stack 0
  5737  000078                     ultoa@val:
  5738                           	opt stack 0
  5739  000078                     printFirmwareVersion@wrkbuf:
  5740                           	opt stack 0
  5741                           
  5742                           ; 20 bytes @ 0x18
  5743  000078                     	ds	2
  5744  00007A                     receiveSendEventCANAL@i:
  5745                           	opt stack 0
  5746  00007A                     receiveSendMultiEventCANAL@msgcount:
  5747                           	opt stack 0
  5748  00007A                     getVSCPFrame@pSize:
  5749                           	opt stack 0
  5750                           
  5751                           ; 2 bytes @ 0x1A
  5752  00007A                     	ds	1
  5753  00007B                     receiveSendMultiEventCANAL@i:
  5754                           	opt stack 0
  5755  00007B                     receiveSendEventCANAL@id:
  5756                           	opt stack 0
  5757                           
  5758                           ; 4 bytes @ 0x1B
  5759  00007B                     	ds	1
  5760  00007C                     receiveSendMultiEventCANAL@dlc:
  5761                           	opt stack 0
  5762  00007C                     getVSCPFrame@pData:
  5763                           	opt stack 0
  5764  00007C                     ultoa@base:
  5765                           	opt stack 0
  5766                           
  5767                           ; 2 bytes @ 0x1C
  5768  00007C                     	ds	1
  5769  00007D                     receiveSendMultiEventCANAL@id:
  5770                           	opt stack 0
  5771                           
  5772                           ; 4 bytes @ 0x1D
  5773  00007D                     	ds	1
  5774  00007E                     ??_sprintf:
  5775  00007E                     ??_getVSCPFrame:
  5776  00007E                     ultoa@v:
  5777                           	opt stack 0
  5778                           
  5779                           ; 4 bytes @ 0x1E
  5780  00007E                     	ds	1
  5781  00007F                     receiveSendEventCANAL@dlc:
  5782                           	opt stack 0
  5783                           
  5784                           ; 1 bytes @ 0x1F
  5785  00007F                     	ds	1
  5786  000080                     receiveSendEventCANAL@crc:
  5787                           	opt stack 0
  5788                           
  5789                           ; 1 bytes @ 0x20
  5790  000080                     	ds	1
  5791  000081                     receiveSendMultiEventCANAL@crc:
  5792                           	opt stack 0
  5793  000081                     sprintf@idx:
  5794                           	opt stack 0
  5795                           
  5796                           ; 1 bytes @ 0x21
  5797  000081                     	ds	1
  5798  000082                     receiveSendMultiEventCANAL@pos:
  5799                           	opt stack 0
  5800  000082                     ultoa@c:
  5801                           	opt stack 0
  5802  000082                     _sprintf$2144:
  5803                           	opt stack 0
  5804  000082                     getVSCPFrame@id:
  5805                           	opt stack 0
  5806                           
  5807                           ; 4 bytes @ 0x22
  5808  000082                     	ds	1
  5809  000083                     ??_receiveSendEventSLCAN:
  5810                           
  5811                           ; 0 bytes @ 0x23
  5812  000083                     	ds	1
  5813  000084                     _sprintf$2145:
  5814                           	opt stack 0
  5815                           
  5816                           ; 2 bytes @ 0x24
  5817  000084                     	ds	1
  5818  000085                     ECANSendMessage@mode:
  5819                           	opt stack 0
  5820                           
  5821                           ; 1 bytes @ 0x25
  5822  000085                     	ds	1
  5823  000086                     ECANSendMessage@buffers:
  5824                           	opt stack 0
  5825  000086                     _sprintf$2151:
  5826                           	opt stack 0
  5827  000086                     receiveSendEventSLCAN@id:
  5828                           	opt stack 0
  5829                           
  5830                           ; 4 bytes @ 0x26
  5831  000086                     	ds	1
  5832  000087                     ECANSendMessage@j:
  5833                           	opt stack 0
  5834                           
  5835                           ; 1 bytes @ 0x27
  5836  000087                     	ds	1
  5837  000088                     ECANSendMessage@tempBSEL0:
  5838                           	opt stack 0
  5839  000088                     sprintf@ap:
  5840                           	opt stack 0
  5841                           
  5842                           ; 1 bytes @ 0x28
  5843  000088                     	ds	1
  5844  000089                     ECANSendMessage@tempPtr:
  5845                           	opt stack 0
  5846  000089                     sprintf@prec:
  5847                           	opt stack 0
  5848                           
  5849                           ; 2 bytes @ 0x29
  5850  000089                     	ds	1
  5851  00008A                     receiveSendEventSLCAN@dlc:
  5852                           	opt stack 0
  5853                           
  5854                           ; 1 bytes @ 0x2A
  5855  00008A                     	ds	1
  5856  00008B                     ECANSendMessage@temp:
  5857                           	opt stack 0
  5858  00008B                     receiveSendEventSLCAN@i:
  5859                           	opt stack 0
  5860  00008B                     sprintf@width:
  5861                           	opt stack 0
  5862                           
  5863                           ; 2 bytes @ 0x2B
  5864  00008B                     	ds	1
  5865  00008C                     ECANSendMessage@i:
  5866                           	opt stack 0
  5867                           
  5868                           ; 1 bytes @ 0x2C
  5869  00008C                     	ds	1
  5870  00008D                     ECANSendMessage@ptr:
  5871                           	opt stack 0
  5872  00008D                     sprintf@_val:
  5873                           	opt stack 0
  5874                           
  5875                           ; 4 bytes @ 0x2D
  5876  00008D                     	ds	2
  5877  00008F                     ?_sendCANFrame:
  5878                           	opt stack 0
  5879  00008F                     sendCANFrame@id:
  5880                           	opt stack 0
  5881                           
  5882                           ; 4 bytes @ 0x2F
  5883  00008F                     	ds	2
  5884  000091                     sprintf@c:
  5885                           	opt stack 0
  5886                           
  5887                           ; 1 bytes @ 0x31
  5888  000091                     	ds	1
  5889  000092                     sprintf@flag:
  5890                           	opt stack 0
  5891                           
  5892                           ; 2 bytes @ 0x32
  5893  000092                     	ds	1
  5894  000093                     sendCANFrame@dlc:
  5895                           	opt stack 0
  5896                           
  5897                           ; 1 bytes @ 0x33
  5898  000093                     	ds	1
  5899  000094                     ??_receivePrintEventVerbose:
  5900  000094                     _printStatistics$1366:
  5901                           	opt stack 0
  5902  000094                     _printErrors$1391:
  5903                           	opt stack 0
  5904  000094                     sendCANFrame@pdata:
  5905                           	opt stack 0
  5906                           
  5907                           ; 2 bytes @ 0x34
  5908  000094                     	ds	2
  5909  000096                     ??_doModeSLCAN:
  5910  000096                     ??_receiveVSCPModeCanalMsg:
  5911  000096                     ?_sendVSCPFrame:
  5912                           	opt stack 0
  5913  000096                     _printStatistics$1372:
  5914                           	opt stack 0
  5915  000096                     _printErrors$1397:
  5916                           	opt stack 0
  5917  000096                     sendVSCPFrame@vscpclass:
  5918                           	opt stack 0
  5919                           
  5920                           ; 2 bytes @ 0x36
  5921  000096                     	ds	2
  5922  000098                     sendVSCPFrame@vscptype:
  5923                           	opt stack 0
  5924  000098                     _printStatistics$1378:
  5925                           	opt stack 0
  5926  000098                     _printErrors$1403:
  5927                           	opt stack 0
  5928                           
  5929                           ; 2 bytes @ 0x38
  5930  000098                     	ds	1
  5931  000099                     sendVSCPFrame@nodeid:
  5932                           	opt stack 0
  5933  000099                     _receivePrintEventVerbose$1273:
  5934                           	opt stack 0
  5935                           
  5936                           ; 2 bytes @ 0x39
  5937  000099                     	ds	1
  5938  00009A                     sendVSCPFrame@priority:
  5939                           	opt stack 0
  5940  00009A                     _printStatistics$1384:
  5941                           	opt stack 0
  5942  00009A                     _printErrors$1409:
  5943                           	opt stack 0
  5944                           
  5945                           ; 2 bytes @ 0x3A
  5946  00009A                     	ds	1
  5947  00009B                     sendVSCPFrame@size:
  5948                           	opt stack 0
  5949  00009B                     _receivePrintEventVerbose$1278:
  5950                           	opt stack 0
  5951                           
  5952                           ; 2 bytes @ 0x3B
  5953  00009B                     	ds	1
  5954  00009C                     _printErrors$1415:
  5955                           	opt stack 0
  5956  00009C                     sendVSCPFrame@pData:
  5957                           	opt stack 0
  5958                           
  5959                           ; 2 bytes @ 0x3C
  5960  00009C                     	ds	1
  5961  00009D                     _receivePrintEventVerbose$1283:
  5962                           	opt stack 0
  5963  00009D                     doModeSLCAN@id:
  5964                           	opt stack 0
  5965                           
  5966                           ; 4 bytes @ 0x3D
  5967  00009D                     	ds	1
  5968  00009E                     ??_sendVSCPFrame:
  5969  00009E                     _printErrors$1424:
  5970                           	opt stack 0
  5971                           
  5972                           ; 2 bytes @ 0x3E
  5973  00009E                     	ds	1
  5974  00009F                     _receivePrintEventVerbose$1288:
  5975                           	opt stack 0
  5976                           
  5977                           ; 2 bytes @ 0x3F
  5978  00009F                     	ds	2
  5979  0000A1                     doModeSLCAN@dlc:
  5980                           	opt stack 0
  5981  0000A1                     _receivePrintEventVerbose$1293:
  5982                           	opt stack 0
  5983                           
  5984                           ; 2 bytes @ 0x41
  5985  0000A1                     	ds	1
  5986  0000A2                     doModeSLCAN@c:
  5987                           	opt stack 0
  5988                           
  5989                           ; 1 bytes @ 0x42
  5990  0000A2                     	ds	1
  5991  0000A3                     doModeSLCAN@rv:
  5992                           	opt stack 0
  5993  0000A3                     _receivePrintEventVerbose$1298:
  5994                           	opt stack 0
  5995                           
  5996                           ; 2 bytes @ 0x43
  5997  0000A3                     	ds	2
  5998  0000A5                     receivePrintEventVerbose@i:
  5999                           	opt stack 0
  6000                           
  6001                           ; 1 bytes @ 0x45
  6002  0000A5                     	ds	5
  6003  0000AA                     receiveVSCPModeCanalMsg@data:
  6004                           	opt stack 0
  6005                           
  6006                           ; 8 bytes @ 0x4A
  6007  0000AA                     	ds	8
  6008  0000B2                     receiveVSCPModeCanalMsg@id:
  6009                           	opt stack 0
  6010  0000B2                     sendVSCPFrame@id:
  6011                           	opt stack 0
  6012                           
  6013                           ; 4 bytes @ 0x52
  6014  0000B2                     	ds	4
  6015  0000B6                     ?_readRegisterExtended:
  6016                           	opt stack 0
  6017  0000B6                     ?_writeRegisterExtended:
  6018                           	opt stack 0
  6019  0000B6                     ?_readRegister:
  6020                           	opt stack 0
  6021  0000B6                     receiveVSCPModeCanalMsg@dlc:
  6022                           	opt stack 0
  6023  0000B6                     readRegister@reg:
  6024                           	opt stack 0
  6025  0000B6                     readRegisterExtended@page:
  6026                           	opt stack 0
  6027  0000B6                     writeRegisterExtended@page:
  6028                           	opt stack 0
  6029                           
  6030                           ; 2 bytes @ 0x56
  6031  0000B6                     	ds	1
  6032  0000B7                     doModeVscp@c:
  6033                           	opt stack 0
  6034  0000B7                     readRegister@timeout:
  6035                           	opt stack 0
  6036                           
  6037                           ; 2 bytes @ 0x57
  6038  0000B7                     	ds	1
  6039  0000B8                     readRegisterExtended@reg:
  6040                           	opt stack 0
  6041  0000B8                     writeRegisterExtended@reg:
  6042                           	opt stack 0
  6043                           
  6044                           ; 1 bytes @ 0x58
  6045  0000B8                     	ds	1
  6046  0000B9                     readRegister@value:
  6047                           	opt stack 0
  6048  0000B9                     readRegisterExtended@timeout:
  6049                           	opt stack 0
  6050  0000B9                     writeRegisterExtended@timeout:
  6051                           	opt stack 0
  6052                           
  6053                           ; 2 bytes @ 0x59
  6054  0000B9                     	ds	1
  6055  0000BA                     ??_readRegister:
  6056                           
  6057                           ; 0 bytes @ 0x5A
  6058  0000BA                     	ds	1
  6059  0000BB                     readRegisterExtended@value:
  6060                           	opt stack 0
  6061  0000BB                     writeRegisterExtended@value:
  6062                           	opt stack 0
  6063                           
  6064                           ; 2 bytes @ 0x5B
  6065  0000BB                     	ds	2
  6066  0000BD                     ??_readRegisterExtended:
  6067  0000BD                     ??_writeRegisterExtended:
  6068                           
  6069                           ; 0 bytes @ 0x5D
  6070  0000BD                     	ds	1
  6071  0000BE                     readRegister@nodeid:
  6072                           	opt stack 0
  6073                           
  6074                           ; 1 bytes @ 0x5E
  6075  0000BE                     	ds	1
  6076  0000BF                     printGUID@nodeid:
  6077                           	opt stack 0
  6078  0000BF                     printMDF@nodeid:
  6079                           	opt stack 0
  6080  0000BF                     printNodeFirmwareVersion@nodeid:
  6081                           	opt stack 0
  6082                           
  6083                           ; 1 bytes @ 0x5F
  6084  0000BF                     	ds	1
  6085  0000C0                     printMDF@value:
  6086                           	opt stack 0
  6087  0000C0                     printGUID@buf:
  6088                           	opt stack 0
  6089  0000C0                     printNodeFirmwareVersion@buf:
  6090                           	opt stack 0
  6091                           
  6092                           ; 3 bytes @ 0x60
  6093  0000C0                     	ds	1
  6094  0000C1                     readRegisterExtended@nodeid:
  6095                           	opt stack 0
  6096  0000C1                     writeRegisterExtended@nodeid:
  6097                           	opt stack 0
  6098  0000C1                     printMDF@p:
  6099                           	opt stack 0
  6100                           
  6101                           ; 2 bytes @ 0x61
  6102  0000C1                     	ds	2
  6103  0000C3                     printGUID@value:
  6104                           	opt stack 0
  6105  0000C3                     printMDF@i:
  6106                           	opt stack 0
  6107  0000C3                     printNodeFirmwareVersion@value:
  6108                           	opt stack 0
  6109                           
  6110                           ; 1 bytes @ 0x63
  6111  0000C3                     	ds	1
  6112  0000C4                     printGUID@i:
  6113                           	opt stack 0
  6114  0000C4                     printNodeFirmwareVersion@i:
  6115                           	opt stack 0
  6116                           
  6117                           ; 1 bytes @ 0x64
  6118  0000C4                     	ds	1
  6119  0000C5                     _findNodes$1468:
  6120                           	opt stack 0
  6121                           
  6122                           ; 2 bytes @ 0x65
  6123  0000C5                     	ds	2
  6124  0000C7                     findNodes@nFound:
  6125                           	opt stack 0
  6126                           
  6127                           ; 1 bytes @ 0x67
  6128  0000C7                     	ds	1
  6129  0000C8                     findNodes@value:
  6130                           	opt stack 0
  6131                           
  6132                           ; 1 bytes @ 0x68
  6133  0000C8                     	ds	1
  6134  0000C9                     findNodes@i:
  6135                           	opt stack 0
  6136                           
  6137                           ; 1 bytes @ 0x69
  6138  0000C9                     	ds	1
  6139  0000CA                     
  6140                           ; 2 bytes @ 0x6A
  6141  0000CA                     	ds	2
  6142  0000CC                     
  6143                           ; 3 bytes @ 0x6C
  6144  0000CC                     	ds	3
  6145  0000CF                     ??_main:
  6146                           
  6147                           ; 0 bytes @ 0x6F
  6148  0000CF                     	ds	1
  6149  0000D0                     main@c:
  6150                           	opt stack 0
  6151                           
  6152                           ; 1 bytes @ 0x70
  6153  0000D0                     	ds	1
  6154                           tblptru	equ	0xFF8
  6155                           tblptrh	equ	0xFF7
  6156                           tblptrl	equ	0xFF6
  6157                           tablat	equ	0xFF5
  6158                           prodh	equ	0xFF4
  6159                           prodl	equ	0xFF3
  6160                           intcon	equ	0xFF2
  6161                           indf0	equ	0xFEF
  6162                           postinc0	equ	0xFEE
  6163                           fsr0h	equ	0xFEA
  6164                           fsr0l	equ	0xFE9
  6165                           wreg	equ	0xFE8
  6166                           indf1	equ	0xFE7
  6167                           postinc1	equ	0xFE6
  6168                           postdec1	equ	0xFE5
  6169                           fsr1h	equ	0xFE2
  6170                           fsr1l	equ	0xFE1
  6171                           indf2	equ	0xFDF
  6172                           postinc2	equ	0xFDE
  6173                           postdec2	equ	0xFDD
  6174                           plusw2	equ	0xFDB
  6175                           fsr2h	equ	0xFDA
  6176                           fsr2l	equ	0xFD9
  6177                           status	equ	0xFD8
  6178                           
  6179                           	psect	cstackCOMRAM
  6180  000001                     __pcstackCOMRAM:
  6181                           	opt stack 0
  6182  000001                     ?__RegsToCANID:
  6183                           	opt stack 0
  6184  000001                     ?i1_WriteTimer0:
  6185                           	opt stack 0
  6186  000001                     ?_fifo_write:
  6187                           	opt stack 0
  6188  000001                     ?_fifo_getFree:
  6189                           	opt stack 0
  6190  000001                     ?__ECANPointBuffer:
  6191                           	opt stack 0
  6192  000001                     fifo_write@buf:
  6193                           	opt stack 0
  6194  000001                     ReadUSART@data:
  6195                           	opt stack 0
  6196  000001                     __RegsToCANID@ptr:
  6197                           	opt stack 0
  6198  000001                     i1WriteTimer0@timer0:
  6199                           	opt stack 0
  6200                           
  6201                           ; 2 bytes @ 0x0
  6202  000001                     	ds	1
  6203  000002                     fifo_write@nbytes:
  6204                           	opt stack 0
  6205                           
  6206                           ; 4 bytes @ 0x1
  6207  000002                     	ds	1
  6208  000003                     ??_fifo_getFree:
  6209  000003                     __RegsToCANID@val:
  6210                           	opt stack 0
  6211  000003                     i1WriteTimer0@timer:
  6212                           	opt stack 0
  6213                           
  6214                           ; 2 bytes @ 0x2
  6215  000003                     	ds	1
  6216  000004                     __RegsToCANID@type:
  6217                           	opt stack 0
  6218  000004                     __ECANPointBuffer@b:
  6219                           	opt stack 0
  6220                           
  6221                           ; 1 bytes @ 0x3
  6222  000004                     	ds	1
  6223  000005                     ??__RegsToCANID:
  6224  000005                     __ECANPointBuffer@pt:
  6225                           	opt stack 0
  6226                           
  6227                           ; 2 bytes @ 0x4
  6228  000005                     	ds	1
  6229  000006                     ??_fifo_write:
  6230                           
  6231                           ; 0 bytes @ 0x5
  6232  000006                     	ds	1
  6233  000007                     __RegsToCANID@Value:
  6234                           	opt stack 0
  6235                           
  6236                           ; 1 bytes @ 0x6
  6237  000007                     	ds	1
  6238  000008                     ?_ECANReceiveMessage:
  6239                           	opt stack 0
  6240  000008                     ECANReceiveMessage@data:
  6241                           	opt stack 0
  6242                           
  6243                           ; 1 bytes @ 0x7
  6244  000008                     	ds	1
  6245  000009                     ECANReceiveMessage@dataLen:
  6246                           	opt stack 0
  6247                           
  6248                           ; 1 bytes @ 0x8
  6249  000009                     	ds	1
  6250  00000A                     ECANReceiveMessage@msgFlags:
  6251                           	opt stack 0
  6252  00000A                     fifo_write@p:
  6253                           	opt stack 0
  6254                           
  6255                           ; 1 bytes @ 0x9
  6256  00000A                     	ds	1
  6257  00000B                     fifo_getFree@f:
  6258                           	opt stack 0
  6259  00000B                     ECANReceiveMessage@savedPtr:
  6260                           	opt stack 0
  6261  00000B                     fifo_write@i:
  6262                           	opt stack 0
  6263                           
  6264                           ; 4 bytes @ 0xA
  6265  00000B                     	ds	2
  6266  00000D                     ECANReceiveMessage@id:
  6267                           	opt stack 0
  6268                           
  6269                           ; 1 bytes @ 0xC
  6270  00000D                     	ds	1
  6271  00000E                     ECANReceiveMessage@i:
  6272                           	opt stack 0
  6273                           
  6274                           ; 1 bytes @ 0xD
  6275  00000E                     	ds	1
  6276  00000F                     ECANReceiveMessage@mode:
  6277                           	opt stack 0
  6278  00000F                     fifo_write@f:
  6279                           	opt stack 0
  6280                           
  6281                           ; 1 bytes @ 0xE
  6282  00000F                     	ds	1
  6283  000010                     ECANReceiveMessage@temp:
  6284                           	opt stack 0
  6285                           
  6286                           ; 1 bytes @ 0xF
  6287  000010                     	ds	1
  6288  000011                     ECANReceiveMessage@ptr:
  6289                           	opt stack 0
  6290                           
  6291                           ; 2 bytes @ 0x10
  6292  000011                     	ds	2
  6293  000013                     ??_Interrupt:
  6294                           
  6295                           ; 0 bytes @ 0x12
  6296  000013                     	ds	9
  6297  00001C                     Interrupt@data:
  6298                           	opt stack 0
  6299                           
  6300                           ; 8 bytes @ 0x1B
  6301  00001C                     	ds	8
  6302  000024                     Interrupt@c:
  6303                           	opt stack 0
  6304                           
  6305                           ; 1 bytes @ 0x23
  6306  000024                     	ds	1
  6307  000025                     Interrupt@dlc:
  6308                           	opt stack 0
  6309                           
  6310                           ; 1 bytes @ 0x24
  6311  000025                     	ds	1
  6312  000026                     Interrupt@id:
  6313                           	opt stack 0
  6314                           
  6315                           ; 4 bytes @ 0x25
  6316  000026                     	ds	4
  6317  00002A                     Interrupt@flags:
  6318                           	opt stack 0
  6319                           
  6320                           ; 1 bytes @ 0x29
  6321  00002A                     	ds	1
  6322                           tblptru	equ	0xFF8
  6323                           tblptrh	equ	0xFF7
  6324                           tblptrl	equ	0xFF6
  6325                           tablat	equ	0xFF5
  6326                           prodh	equ	0xFF4
  6327                           prodl	equ	0xFF3
  6328                           intcon	equ	0xFF2
  6329                           indf0	equ	0xFEF
  6330                           postinc0	equ	0xFEE
  6331                           fsr0h	equ	0xFEA
  6332                           fsr0l	equ	0xFE9
  6333                           wreg	equ	0xFE8
  6334                           indf1	equ	0xFE7
  6335                           postinc1	equ	0xFE6
  6336                           postdec1	equ	0xFE5
  6337                           fsr1h	equ	0xFE2
  6338                           fsr1l	equ	0xFE1
  6339                           indf2	equ	0xFDF
  6340                           postinc2	equ	0xFDE
  6341                           postdec2	equ	0xFDD
  6342                           plusw2	equ	0xFDB
  6343                           fsr2h	equ	0xFDA
  6344                           fsr2l	equ	0xFD9
  6345                           status	equ	0xFD8
  6346                           
  6347 ;;
  6348 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6349 ;;
  6350 ;; *************** function _main *****************
  6351 ;; Defined at:
  6352 ;;		line 255 in file "main.c"
  6353 ;; Parameters:    Size  Location     Type
  6354 ;;  argc            2  106[BANK0 ] int 
  6355 ;;  argv            3  108[BANK0 ] PTR PTR unsigned char 
  6356 ;; Auto vars:     Size  Location     Type
  6357 ;;  c               1  112[BANK0 ] unsigned char 
  6358 ;; Return value:  Size  Location     Type
  6359 ;;                  2  106[BANK0 ] int 
  6360 ;; Registers used:
  6361 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6362 ;; Tracked objects:
  6363 ;;		On entry : 0/0
  6364 ;;		On exit  : F/0
  6365 ;;		Unchanged: 0/0
  6366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6367 ;;      Params:         0       5       0       0       0       0       0
  6368 ;;      Locals:         0       1       0       0       0       0       0
  6369 ;;      Temps:          0       1       0       0       0       0       0
  6370 ;;      Totals:         0       7       0       0       0       0       0
  6371 ;;Total ram usage:        7 bytes
  6372 ;; Hardware stack levels required when called:   11
  6373 ;; This function calls:
  6374 ;;		_fifo_init
  6375 ;;		_init_crc8
  6376 ;;		_readEEPROM
  6377 ;;		_vscp_restoreDefaults
  6378 ;;		_init
  6379 ;;		_putsUSART
  6380 ;;		_printFirmwareVersion
  6381 ;;		_printMode
  6382 ;;		_fifo_read
  6383 ;;		_doModeVerbose
  6384 ;;		_doModeVscp
  6385 ;;		_doModeSLCAN
  6386 ;;		_doModeVscpNode
  6387 ;; This function is called by:
  6388 ;;		Startup code after reset
  6389 ;; This function uses a non-reentrant model
  6390 ;;
  6391                           
  6392                           	psect	text0
  6393  003418                     __ptext0:
  6394                           	opt stack 0
  6395  003418                     _main:
  6396                           	opt stack 20
  6397                           
  6398                           ;main.c: 257: caps.maxVscpFrames = 1;
  6399                           
  6400                           ;incstack = 0
  6401                           ;incstack = 0
  6402  003418  0E01               	movlw	1
  6403  00341A  0100               	movlb	0	; () banked
  6404  00341C  6FF5               	movwf	_caps& (0+255),b
  6405                           
  6406                           ;main.c: 258: caps.maxCanalFrames = 1;
  6407  00341E  6FF6               	movwf	(_caps+1)& (0+255),b
  6408                           
  6409                           ; BSR set to: 0
  6410                           ;main.c: 263: fifo_init( &serialInputFifo, inputBuffer, sizeof ( inputBuffer));
  6411  003420  0E02               	movlw	high _inputBuffer
  6412  003422  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6413  003424  0E00               	movlw	low _inputBuffer
  6414  003426  6F60               	movwf	?_fifo_init& (0+255),b
  6415  003428  6B63               	clrf	(?_fifo_init+3)& (0+255),b
  6416  00342A  0E80               	movlw	128
  6417  00342C  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6418  00342E  0E48               	movlw	_serialInputFifo& (0+255)
  6419  003430  EC31  F02A         	call	_fifo_init
  6420                           
  6421                           ; BSR set to: 0
  6422                           ;main.c: 264: fifo_init( &canInputFifo, caninputBuffer, sizeof ( caninputBuffer));
  6423  003434  0E04               	movlw	high _caninputBuffer
  6424  003436  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6425  003438  0E00               	movlw	low _caninputBuffer
  6426  00343A  6F60               	movwf	?_fifo_init& (0+255),b
  6427  00343C  0E01               	movlw	1
  6428  00343E  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6429  003440  0EEE               	movlw	238
  6430  003442  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6431  003444  0E40               	movlw	_canInputFifo& (0+255)
  6432  003446  EC31  F02A         	call	_fifo_init
  6433                           
  6434                           ; BSR set to: 0
  6435                           ;main.c: 267: init_crc8();
  6436  00344A  EC65  F027         	call	_init_crc8	;wreg free
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;main.c: 271: if ( ( 0x55 != readEEPROM(0x01) ) ||
  6440                           ;main.c: 272: ( 0xaa != readEEPROM(0x02) ) ) {
  6441  00344E  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
  6442  003450  0E01               	movlw	1
  6443  003452  6F60               	movwf	?_readEEPROM& (0+255),b
  6444  003454  ECCC  F02B         	call	_readEEPROM	;wreg free
  6445  003458  0A55               	xorlw	85
  6446  00345A  E107               	bnz	l9820
  6447                           
  6448                           ; BSR set to: 0
  6449  00345C  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
  6450  00345E  0E02               	movlw	2
  6451  003460  6F60               	movwf	?_readEEPROM& (0+255),b
  6452  003462  ECCC  F02B         	call	_readEEPROM	;wreg free
  6453  003466  0AAA               	xorlw	170
  6454  003468  A4D8               	btfss	status,2,c
  6455  00346A                     l9820:
  6456                           
  6457                           ; BSR set to: 0
  6458                           ;main.c: 273: vscp_restoreDefaults();
  6459  00346A  ECDE  F02B         	call	_vscp_restoreDefaults	;wreg free
  6460                           
  6461                           ;main.c: 274: }
  6462                           ;main.c: 277: init();
  6463  00346E  EC87  F029         	call	_init	;wreg free
  6464                           
  6465                           ; BSR set to: 0
  6466                           ;main.c: 281: _delay((unsigned long)((10)*(40000000/4000.0)));
  6467  003472  0E82               	movlw	130
  6468  003474  6FCF               	movwf	??_main& (0+255),b
  6469  003476  0EDD               	movlw	221
  6470  003478                     u17137:
  6471  003478  2EE8               	decfsz	wreg,f,c
  6472  00347A  D7FE               	goto	u17137
  6473  00347C  2FCF               	decfsz	??_main& (0+255),f,b
  6474  00347E  D7FC               	goto	u17137
  6475  003480  D000               	nop2	
  6476                           
  6477                           ;main.c: 285: putsUSART((char *) "\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  6478  003482  0E79               	movlw	high STR_1
  6479  003484  0100               	movlb	0	; () banked
  6480  003486  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6481  003488  0E2F               	movlw	low STR_1
  6482  00348A  6F61               	movwf	?_putsUSART& (0+255),b
  6483  00348C  ECEA  F028         	call	_putsUSART	;wreg free
  6484                           
  6485                           ;main.c: 286: putsUSART((char *) "Copyright (C) 2014-2015 Grodans Paradis AB, Sweden\r\n
      +                          ");
  6486  003490  0E74               	movlw	high STR_2
  6487  003492  0100               	movlb	0	; () banked
  6488  003494  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6489  003496  0E8D               	movlw	low STR_2
  6490  003498  6F61               	movwf	?_putsUSART& (0+255),b
  6491  00349A  ECEA  F028         	call	_putsUSART	;wreg free
  6492                           
  6493                           ;main.c: 287: putsUSART((char *) "http://www.paradiseofthefrog.com\r\n");
  6494  00349E  0E79               	movlw	high STR_3
  6495  0034A0  0100               	movlb	0	; () banked
  6496  0034A2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6497  0034A4  0E9D               	movlw	low STR_3
  6498  0034A6  6F61               	movwf	?_putsUSART& (0+255),b
  6499  0034A8  ECEA  F028         	call	_putsUSART	;wreg free
  6500                           
  6501                           ;main.c: 288: printFirmwareVersion();
  6502  0034AC  EC2D  F025         	call	_printFirmwareVersion	;wreg free
  6503                           
  6504                           ;main.c: 289: printMode();
  6505  0034B0  ECEF  F026         	call	_printMode	;wreg free
  6506                           
  6507                           ;main.c: 293: if (0 && (0 != mode)) {
  6508  0034B4  D026               	goto	l9854
  6509  0034B6                     l421:
  6510                           
  6511                           ; BSR set to: 0
  6512  0034B6  0004               	clrwdt		;# 
  6513                           
  6514                           ;main.c: 303: (INTCONbits.GIE = 0);
  6515  0034B8  9EF2               	bcf	intcon,7,c	;volatile
  6516                           
  6517                           ;main.c: 304: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6518  0034BA  0100               	movlb	0	; () banked
  6519  0034BC  0E00               	movlw	high main@c
  6520  0034BE  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6521  0034C0  0ED0               	movlw	low main@c
  6522  0034C2  6F60               	movwf	?_fifo_read& (0+255),b
  6523  0034C4  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  6524  0034C6  0E01               	movlw	1
  6525  0034C8  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6526  0034CA  0E48               	movlw	_serialInputFifo& (0+255)
  6527  0034CC  EC90  F021         	call	_fifo_read
  6528  0034D0  0560               	decf	?_fifo_read& (0+255),w,b
  6529  0034D2  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6530  0034D4  E10C               	bnz	l422
  6531                           
  6532                           ; BSR set to: 0
  6533                           ;main.c: 305: (INTCONbits.GIE = 1);
  6534  0034D6  8EF2               	bsf	intcon,7,c	;volatile
  6535                           
  6536                           ; BSR set to: 0
  6537                           ;main.c: 306: if ('v' == c) {
  6538  0034D8  51D0               	movf	main@c& (0+255),w,b
  6539  0034DA  0A76               	xorlw	118
  6540  0034DC  E108               	bnz	l422
  6541                           
  6542                           ; BSR set to: 0
  6543                           ;main.c: 307: mode = 0;
  6544  0034DE  6BF1               	clrf	_mode& (0+255),b
  6545                           
  6546                           ; BSR set to: 0
  6547                           ;main.c: 308: putsUSART((char *) "Temporary verbose mode set\r\n");
  6548  0034E0  0E7B               	movlw	high STR_5
  6549  0034E2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6550  0034E4  0E2A               	movlw	low STR_5
  6551  0034E6  6F61               	movwf	?_putsUSART& (0+255),b
  6552  0034E8  ECEA  F028         	call	_putsUSART	;wreg free
  6553                           
  6554                           ;main.c: 309: break;
  6555  0034EC  D00A               	goto	l9854
  6556  0034EE                     l422:
  6557                           
  6558                           ; BSR set to: 0
  6559                           ;main.c: 310: }
  6560                           ;main.c: 311: }
  6561                           ;main.c: 312: (INTCONbits.GIE = 1);
  6562  0034EE  8EF2               	bsf	intcon,7,c	;volatile
  6563                           
  6564                           ; BSR set to: 0
  6565  0034F0  0EB8               	movlw	184
  6566  0034F2  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
  6567  0034F4  0E0B               	movlw	11
  6568  0034F6  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
  6569  0034F8  0E00               	movlw	0
  6570  0034FA  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
  6571  0034FC  0E00               	movlw	0
  6572  0034FE  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
  6573  003500  E3DA               	bnc	l421
  6574  003502                     l9854:
  6575                           
  6576                           ;main.c: 313: }
  6577                           ;main.c: 314: }
  6578                           ;main.c: 316: ledFunctionality = 1;
  6579  003502  0E01               	movlw	1
  6580  003504  6E3F               	movwf	_ledFunctionality,c
  6581  003506                     l425:
  6582  003506  0004               	clrwdt		;# 
  6583                           
  6584                           ;main.c: 324: if (COMSTATbits.TXBO) {
  6585  003508  AA74               	btfss	3956,5,c	;volatile
  6586  00350A  D002               	goto	l426
  6587                           
  6588                           ;main.c: 326: ledFunctionality = 6;
  6589  00350C  0E06               	movlw	6
  6590  00350E  D009               	goto	L1
  6591  003510                     l426:
  6592                           
  6593                           ;main.c: 328: else if (COMSTATbits.TXBP || COMSTATbits.RXBP) {
  6594  003510  B874               	btfsc	3956,4,c	;volatile
  6595  003512  D002               	goto	l9862
  6596  003514  A674               	btfss	3956,3,c	;volatile
  6597  003516  D002               	goto	l428
  6598  003518                     l9862:
  6599                           
  6600                           ;main.c: 330: ledFunctionality = 5;
  6601  003518  0E05               	movlw	5
  6602  00351A  D003               	goto	L1
  6603  00351C                     l428:
  6604                           
  6605                           ;main.c: 334: ledFunctionality = 4;
  6606  00351C  0E04               	movlw	4
  6607                           
  6608                           ;main.c: 332: else if (COMSTATbits.EWARN) {
  6609  00351E  A074               	btfss	3956,0,c	;volatile
  6610                           
  6611                           ;main.c: 336: else {
  6612                           ;main.c: 338: ledFunctionality = 1;
  6613                           
  6614                           ;main.c: 335: }
  6615  003520  0E01               	movlw	1
  6616  003522                     L1:
  6617  003522  6E3F               	movwf	_ledFunctionality,c
  6618                           
  6619                           ;main.c: 339: }
  6620                           ;main.c: 342: if (COMSTATbits.RXBnOVFL) {
  6621  003524  AC74               	btfss	3956,6,c	;volatile
  6622  003526  D007               	goto	l9874
  6623                           
  6624                           ;main.c: 343: can_receiveOverruns++;
  6625  003528  0100               	movlb	0	; () banked
  6626  00352A  2BD1               	incf	_can_receiveOverruns& (0+255),f,b
  6627  00352C  0E00               	movlw	0
  6628  00352E  23D2               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
  6629  003530  23D3               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
  6630  003532  23D4               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
  6631                           
  6632                           ; BSR set to: 0
  6633                           ;main.c: 344: COMSTATbits.RXBnOVFL = 0;
  6634  003534  9C74               	bcf	3956,6,c	;volatile
  6635  003536                     l9874:
  6636                           
  6637                           ;main.c: 345: }
  6638                           ;main.c: 347: if (0 == mode) {
  6639  003536  0100               	movlb	0	; () banked
  6640  003538  67F1               	tstfsz	_mode& (0+255),b
  6641  00353A  D003               	goto	l9878
  6642  00353C                     l9876:
  6643                           
  6644                           ; BSR set to: 0
  6645                           ;main.c: 348: doModeVerbose();
  6646  00353C  EC36  F001         	call	_doModeVerbose	;wreg free
  6647                           
  6648                           ;main.c: 349: }
  6649  003540  D7E2               	goto	l425
  6650  003542                     l9878:
  6651                           
  6652                           ; BSR set to: 0
  6653                           ;main.c: 350: else if (1 == mode) {
  6654  003542  05F1               	decf	_mode& (0+255),w,b
  6655  003544  E103               	bnz	l9882
  6656                           
  6657                           ; BSR set to: 0
  6658                           ;main.c: 351: doModeVscp();
  6659  003546  EC3E  F015         	call	_doModeVscp	;wreg free
  6660                           
  6661                           ;main.c: 352: }
  6662  00354A  D7DD               	goto	l425
  6663  00354C                     l9882:
  6664                           
  6665                           ; BSR set to: 0
  6666                           ;main.c: 353: else if (2 == mode) {
  6667  00354C  51F1               	movf	_mode& (0+255),w,b
  6668  00354E  0A02               	xorlw	2
  6669  003550  E103               	bnz	l9886
  6670                           
  6671                           ; BSR set to: 0
  6672                           ;main.c: 354: doModeSLCAN();
  6673  003552  ECC8  F00E         	call	_doModeSLCAN	;wreg free
  6674                           
  6675                           ;main.c: 355: }
  6676  003556  D7D7               	goto	l425
  6677  003558                     l9886:
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;main.c: 356: else if (3 == mode) {
  6681  003558  51F1               	movf	_mode& (0+255),w,b
  6682  00355A  0A03               	xorlw	3
  6683  00355C  E1EF               	bnz	l9876
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;main.c: 357: doModeVscpNode();
  6687  00355E  ECE2  F02B         	call	_doModeVscpNode	;wreg free
  6688                           
  6689                           ;main.c: 358: }
  6690  003562  D7D1               	goto	l425
  6691  003564                     __end_of_main:
  6692                           	opt stack 0
  6693                           tblptru	equ	0xFF8
  6694                           tblptrh	equ	0xFF7
  6695                           tblptrl	equ	0xFF6
  6696                           tablat	equ	0xFF5
  6697                           prodh	equ	0xFF4
  6698                           prodl	equ	0xFF3
  6699                           intcon	equ	0xFF2
  6700                           indf0	equ	0xFEF
  6701                           postinc0	equ	0xFEE
  6702                           fsr0h	equ	0xFEA
  6703                           fsr0l	equ	0xFE9
  6704                           wreg	equ	0xFE8
  6705                           indf1	equ	0xFE7
  6706                           postinc1	equ	0xFE6
  6707                           postdec1	equ	0xFE5
  6708                           fsr1h	equ	0xFE2
  6709                           fsr1l	equ	0xFE1
  6710                           indf2	equ	0xFDF
  6711                           postinc2	equ	0xFDE
  6712                           postdec2	equ	0xFDD
  6713                           plusw2	equ	0xFDB
  6714                           fsr2h	equ	0xFDA
  6715                           fsr2l	equ	0xFD9
  6716                           status	equ	0xFD8
  6717                           
  6718 ;; *************** function _doModeVscpNode *****************
  6719 ;; Defined at:
  6720 ;;		line 1508 in file "main.c"
  6721 ;; Parameters:    Size  Location     Type
  6722 ;;		None
  6723 ;; Auto vars:     Size  Location     Type
  6724 ;;		None
  6725 ;; Return value:  Size  Location     Type
  6726 ;;		None               void
  6727 ;; Registers used:
  6728 ;;		None
  6729 ;; Tracked objects:
  6730 ;;		On entry : F/0
  6731 ;;		On exit  : F/0
  6732 ;;		Unchanged: F/0
  6733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6734 ;;      Params:         0       0       0       0       0       0       0
  6735 ;;      Locals:         0       0       0       0       0       0       0
  6736 ;;      Temps:          0       0       0       0       0       0       0
  6737 ;;      Totals:         0       0       0       0       0       0       0
  6738 ;;Total ram usage:        0 bytes
  6739 ;; Hardware stack levels used:    1
  6740 ;; Hardware stack levels required when called:    3
  6741 ;; This function calls:
  6742 ;;		Nothing
  6743 ;; This function is called by:
  6744 ;;		_main
  6745 ;; This function uses a non-reentrant model
  6746 ;;
  6747                           
  6748                           	psect	text1
  6749  0057C4                     __ptext1:
  6750                           	opt stack 0
  6751  0057C4                     _doModeVscpNode:
  6752                           	opt stack 27
  6753                           
  6754                           ; BSR set to: 0
  6755                           
  6756                           ; BSR set to: 0
  6757                           ;incstack = 0
  6758                           ;incstack = 0
  6759  0057C4  0012               	return	
  6760  0057C6                     __end_of_doModeVscpNode:
  6761                           	opt stack 0
  6762                           tblptru	equ	0xFF8
  6763                           tblptrh	equ	0xFF7
  6764                           tblptrl	equ	0xFF6
  6765                           tablat	equ	0xFF5
  6766                           prodh	equ	0xFF4
  6767                           prodl	equ	0xFF3
  6768                           intcon	equ	0xFF2
  6769                           indf0	equ	0xFEF
  6770                           postinc0	equ	0xFEE
  6771                           fsr0h	equ	0xFEA
  6772                           fsr0l	equ	0xFE9
  6773                           wreg	equ	0xFE8
  6774                           indf1	equ	0xFE7
  6775                           postinc1	equ	0xFE6
  6776                           postdec1	equ	0xFE5
  6777                           fsr1h	equ	0xFE2
  6778                           fsr1l	equ	0xFE1
  6779                           indf2	equ	0xFDF
  6780                           postinc2	equ	0xFDE
  6781                           postdec2	equ	0xFDD
  6782                           plusw2	equ	0xFDB
  6783                           fsr2h	equ	0xFDA
  6784                           fsr2l	equ	0xFD9
  6785                           status	equ	0xFD8
  6786                           
  6787 ;; *************** function _doModeSLCAN *****************
  6788 ;; Defined at:
  6789 ;;		line 1306 in file "main.c"
  6790 ;; Parameters:    Size  Location     Type
  6791 ;;		None
  6792 ;; Auto vars:     Size  Location     Type
  6793 ;;  id              4   61[BANK0 ] unsigned long 
  6794 ;;  dlc             1   65[BANK0 ] unsigned char 
  6795 ;;  rv              1   67[BANK0 ] enum E15660
  6796 ;;  c               1   66[BANK0 ] unsigned char 
  6797 ;; Return value:  Size  Location     Type
  6798 ;;		None               void
  6799 ;; Registers used:
  6800 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6801 ;; Tracked objects:
  6802 ;;		On entry : F/0
  6803 ;;		On exit  : E/0
  6804 ;;		Unchanged: 0/0
  6805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6806 ;;      Params:         0       0       0       0       0       0       0
  6807 ;;      Locals:         0       7       0       0       0       0       0
  6808 ;;      Temps:          0       7       0       0       0       0       0
  6809 ;;      Totals:         0      14       0       0       0       0       0
  6810 ;;Total ram usage:       14 bytes
  6811 ;; Hardware stack levels used:    1
  6812 ;; Hardware stack levels required when called:    7
  6813 ;; This function calls:
  6814 ;;		_putsUSART
  6815 ;;		_fifo_read
  6816 ;;		_writeEEPROM
  6817 ;;		_ECANSetOperationMode
  6818 ;;		_memset
  6819 ;;		_receiveSendEventSLCAN
  6820 ;;		_strlen
  6821 ;;		_hexStringToBytes
  6822 ;;		_memcpy
  6823 ;;		_sendCANFrame
  6824 ;; This function is called by:
  6825 ;;		_main
  6826 ;; This function uses a non-reentrant model
  6827 ;;
  6828                           
  6829                           	psect	text2
  6830  001D90                     __ptext2:
  6831                           	opt stack 0
  6832  001D90                     _doModeSLCAN:
  6833                           	opt stack 23
  6834                           
  6835                           ; BSR set to: 0
  6836                           ;main.c: 1307: uint8_t c;
  6837                           ;main.c: 1308: BOOL rv = 0;
  6838                           
  6839                           ; BSR set to: 0
  6840                           ;incstack = 0
  6841                           ;incstack = 0
  6842  001D90  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  6843                           
  6844                           ; BSR set to: 0
  6845                           ;main.c: 1311: receiveSendEventSLCAN();
  6846  001D92  ECD3  F017         	call	_receiveSendEventSLCAN	;wreg free
  6847                           
  6848                           ;main.c: 1314: (INTCONbits.GIE = 0);
  6849  001D96  9EF2               	bcf	intcon,7,c	;volatile
  6850                           
  6851                           ;main.c: 1316: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6852  001D98  0100               	movlb	0	; () banked
  6853  001D9A  0E00               	movlw	high doModeSLCAN@c
  6854  001D9C  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6855  001D9E  0EA2               	movlw	low doModeSLCAN@c
  6856  001DA0  6F60               	movwf	?_fifo_read& (0+255),b
  6857  001DA2  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  6858  001DA4  0E01               	movlw	1
  6859  001DA6  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6860  001DA8  0E48               	movlw	_serialInputFifo& (0+255)
  6861  001DAA  EC90  F021         	call	_fifo_read
  6862  001DAE  0560               	decf	?_fifo_read& (0+255),w,b
  6863  001DB0  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6864  001DB2  E001 D19C          	bnz	l10948
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;main.c: 1319: (INTCONbits.GIE = 1);
  6868  001DB6  8EF2               	bsf	intcon,7,c	;volatile
  6869                           
  6870                           ; BSR set to: 0
  6871                           ;main.c: 1321: if (0x0d != c) {
  6872  001DB8  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  6873  001DBA  0A0D               	xorlw	13
  6874  001DBC  E101 D14E          	bz	l10936
  6875                           
  6876                           ; BSR set to: 0
  6877                           ;main.c: 1322: cmdbuf[ pos ] = c;
  6878  001DC0  EC17  F016         	call	PL20	;call to abstracted procedure
  6879  001DC4  C0A2  FFDF         	movff	doModeSLCAN@c,indf2
  6880                           
  6881                           ; BSR set to: 0
  6882                           ;main.c: 1323: pos++;
  6883  001DC8  2B02               	incf	_pos& (0+255),f,b
  6884  001DCA  D192               	goto	l708
  6885  001DCC                     l10830:
  6886                           
  6887                           ; BSR set to: 0
  6888                           ;main.c: 1331: if (1 == strlen(cmdbuf)) {
  6889  001DCC  0E01               	movlw	high _cmdbuf
  6890  001DCE  0100               	movlb	0	; () banked
  6891  001DD0  6F61               	movwf	(?_strlen+1)& (0+255),b
  6892  001DD2  0E04               	movlw	low _cmdbuf
  6893  001DD4  6F60               	movwf	?_strlen& (0+255),b
  6894  001DD6  EC11  F02A         	call	_strlen	;wreg free
  6895  001DDA  0560               	decf	?_strlen& (0+255),w,b
  6896  001DDC  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6897  001DDE  E001 D168          	bnz	l10938
  6898                           
  6899                           ; BSR set to: 0
  6900                           ;main.c: 1332: putsUSART((char *) "JFrankfurt RS-232\r\n");
  6901  001DE2  0E7D               	movlw	high STR_133
  6902  001DE4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6903  001DE6  0E5A               	movlw	low STR_133
  6904  001DE8  6F61               	movwf	?_putsUSART& (0+255),b
  6905  001DEA  ECEA  F028         	call	_putsUSART	;wreg free
  6906  001DEE                     l10834:
  6907                           
  6908                           ;main.c: 1333: rv = 1;
  6909  001DEE  0E01               	movlw	1
  6910  001DF0  0100               	movlb	0	; () banked
  6911  001DF2  D0DE               	goto	L3
  6912  001DF4                     l10836:
  6913                           
  6914                           ; BSR set to: 0
  6915                           ;main.c: 1339: if (1 == strlen(cmdbuf)) {
  6916  001DF4  0E01               	movlw	high _cmdbuf
  6917  001DF6  0100               	movlb	0	; () banked
  6918  001DF8  6F61               	movwf	(?_strlen+1)& (0+255),b
  6919  001DFA  0E04               	movlw	low _cmdbuf
  6920  001DFC  6F60               	movwf	?_strlen& (0+255),b
  6921  001DFE  EC11  F02A         	call	_strlen	;wreg free
  6922  001E02  0560               	decf	?_strlen& (0+255),w,b
  6923  001E04  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6924  001E06  E001 D154          	bnz	l10938
  6925                           
  6926                           ; BSR set to: 0
  6927                           ;main.c: 1340: putsUSART((char *) "V1011\r\n");
  6928  001E0A  0E7E               	movlw	high STR_134
  6929  001E0C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6930  001E0E  0ED5               	movlw	low STR_134
  6931  001E10  6F61               	movwf	?_putsUSART& (0+255),b
  6932  001E12  ECEA  F028         	call	_putsUSART	;wreg free
  6933  001E16  D7EB               	goto	l10834
  6934  001E18                     l10842:
  6935                           
  6936                           ; BSR set to: 0
  6937                           ;main.c: 1347: if (1 == strlen(cmdbuf)) {
  6938  001E18  0E01               	movlw	high _cmdbuf
  6939  001E1A  0100               	movlb	0	; () banked
  6940  001E1C  6F61               	movwf	(?_strlen+1)& (0+255),b
  6941  001E1E  0E04               	movlw	low _cmdbuf
  6942  001E20  6F60               	movwf	?_strlen& (0+255),b
  6943  001E22  EC11  F02A         	call	_strlen	;wreg free
  6944  001E26  0560               	decf	?_strlen& (0+255),w,b
  6945  001E28  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6946  001E2A  E001 D142          	bnz	l10938
  6947                           
  6948                           ; BSR set to: 0
  6949                           ;main.c: 1348: putsUSART((char *) "N1977\r\n");
  6950  001E2E  0E7E               	movlw	high STR_135
  6951  001E30  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6952  001E32  0EDD               	movlw	low STR_135
  6953  001E34  6F61               	movwf	?_putsUSART& (0+255),b
  6954  001E36  ECEA  F028         	call	_putsUSART	;wreg free
  6955  001E3A  D7D9               	goto	l10834
  6956  001E3C                     l10848:
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;main.c: 1357: bInitiated = 1;
  6960  001E3C  0E01               	movlw	1
  6961  001E3E  6FEE               	movwf	_bInitiated& (0+255),b
  6962                           
  6963                           ;main.c: 1358: rv = 1;
  6964  001E40  D0B7               	goto	L3
  6965  001E42                     l718:
  6966                           
  6967                           ; BSR set to: 0
  6968                           ;main.c: 1363: if (!bOpen) {
  6969  001E42  67EF               	tstfsz	_bOpen& (0+255),b
  6970  001E44  D003               	goto	l10852
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;main.c: 1364: bInitiated = 1;
  6974  001E46  0E01               	movlw	1
  6975  001E48  6FEE               	movwf	_bInitiated& (0+255),b
  6976                           
  6977                           ;main.c: 1365: rv = 1;
  6978  001E4A  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  6979  001E4C                     l10852:
  6980                           
  6981                           ; BSR set to: 0
  6982                           ;main.c: 1370: if (1 == strlen(cmdbuf)) {
  6983  001E4C  0E01               	movlw	high _cmdbuf
  6984  001E4E  0100               	movlb	0	; () banked
  6985  001E50  6F61               	movwf	(?_strlen+1)& (0+255),b
  6986  001E52  0E04               	movlw	low _cmdbuf
  6987  001E54  6F60               	movwf	?_strlen& (0+255),b
  6988  001E56  EC11  F02A         	call	_strlen	;wreg free
  6989  001E5A  0560               	decf	?_strlen& (0+255),w,b
  6990  001E5C  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6991  001E5E  E001 D128          	bnz	l10938
  6992                           
  6993                           ; BSR set to: 0
  6994                           ;main.c: 1371: if (!bOpen && bInitiated) {
  6995  001E62  67EF               	tstfsz	_bOpen& (0+255),b
  6996  001E64  D126               	goto	l10938
  6997                           
  6998                           ; BSR set to: 0
  6999  001E66  51EE               	movf	_bInitiated& (0+255),w,b
  7000  001E68  E101 D123          	bz	l10938
  7001                           
  7002                           ; BSR set to: 0
  7003                           ;main.c: 1372: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  7004  001E6C  0E00               	movlw	0
  7005  001E6E  ECA1  F02B         	call	_ECANSetOperationMode
  7006                           
  7007                           ; BSR set to: 0
  7008                           ;main.c: 1373: bOpen = 1;
  7009  001E72  0E01               	movlw	1
  7010  001E74  6FEF               	movwf	_bOpen& (0+255),b
  7011  001E76  D7BB               	goto	l10834
  7012  001E78                     l10864:
  7013                           
  7014                           ; BSR set to: 0
  7015                           ;main.c: 1381: if (1 == strlen(cmdbuf)) {
  7016  001E78  0E01               	movlw	high _cmdbuf
  7017  001E7A  0100               	movlb	0	; () banked
  7018  001E7C  6F61               	movwf	(?_strlen+1)& (0+255),b
  7019  001E7E  0E04               	movlw	low _cmdbuf
  7020  001E80  6F60               	movwf	?_strlen& (0+255),b
  7021  001E82  EC11  F02A         	call	_strlen	;wreg free
  7022  001E86  0560               	decf	?_strlen& (0+255),w,b
  7023  001E88  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7024  001E8A  E001 D112          	bnz	l10938
  7025                           
  7026                           ; BSR set to: 0
  7027                           ;main.c: 1382: if (bOpen) {
  7028  001E8E  51EF               	movf	_bOpen& (0+255),w,b
  7029  001E90  E0AE               	bz	l10834
  7030                           
  7031                           ; BSR set to: 0
  7032                           ;main.c: 1383: ECANSetOperationMode(0x20);
  7033  001E92  0E20               	movlw	32
  7034  001E94  ECA1  F02B         	call	_ECANSetOperationMode
  7035                           
  7036                           ; BSR set to: 0
  7037                           ;main.c: 1384: bOpen = 0;
  7038  001E98  6BEF               	clrf	_bOpen& (0+255),b
  7039  001E9A  D7A9               	goto	l10834
  7040  001E9C                     l10874:
  7041                           
  7042                           ; BSR set to: 0
  7043                           ;main.c: 1397: if (bOpen && (strlen(cmdbuf) >= 10)) {
  7044  001E9C  51EF               	movf	_bOpen& (0+255),w,b
  7045  001E9E  E101 D108          	bz	l10938
  7046                           
  7047                           ; BSR set to: 0
  7048  001EA2  0E01               	movlw	high _cmdbuf
  7049  001EA4  0100               	movlb	0	; () banked
  7050  001EA6  6F61               	movwf	(?_strlen+1)& (0+255),b
  7051  001EA8  0E04               	movlw	low _cmdbuf
  7052  001EAA  6F60               	movwf	?_strlen& (0+255),b
  7053  001EAC  EC11  F02A         	call	_strlen	;wreg free
  7054  001EB0  0E0A               	movlw	10
  7055  001EB2  5D60               	subwf	?_strlen& (0+255),w,b
  7056  001EB4  0E00               	movlw	0
  7057  001EB6  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7058  001EB8  E201 D0FB          	bnc	l10938
  7059                           
  7060                           ; BSR set to: 0
  7061                           ;main.c: 1399: uint32_t id;
  7062                           ;main.c: 1400: uint8_t dlc;
  7063                           ;main.c: 1402: if (hexStringToBytes(wrkbuf, sizeof ( wrkbuf), cmdbuf) < 5) {
  7064  001EBC  0E01               	movlw	high _wrkbuf
  7065  001EBE  0100               	movlb	0	; () banked
  7066  001EC0  6F65               	movwf	(?_hexStringToBytes+1)& (0+255),b
  7067  001EC2  0E54               	movlw	low _wrkbuf
  7068  001EC4  6F64               	movwf	?_hexStringToBytes& (0+255),b
  7069  001EC6  0E50               	movlw	80
  7070  001EC8  6F66               	movwf	(?_hexStringToBytes+2)& (0+255),b
  7071  001ECA  0E01               	movlw	high _cmdbuf
  7072  001ECC  6F68               	movwf	(?_hexStringToBytes+4)& (0+255),b
  7073  001ECE  0E04               	movlw	low _cmdbuf
  7074  001ED0  6F67               	movwf	(?_hexStringToBytes+3)& (0+255),b
  7075  001ED2  EC4C  F024         	call	_hexStringToBytes	;wreg free
  7076  001ED6  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7077  001ED8  0E05               	movlw	5
  7078  001EDA  5D96               	subwf	??_doModeSLCAN& (0+255),w,b
  7079  001EDC  E201 D0E9          	bnc	l10938
  7080                           
  7081                           ; BSR set to: 0
  7082                           ;main.c: 1404: }
  7083                           ;main.c: 1406: id = (uint32_t) wrkbuf[0] << 24 + (uint32_t) wrkbuf[1] << 16 + (uint32_t)
      +                           wrkbuf[2] << 8 + wrkbuf[3];
  7084  001EE0  C157  F096         	movff	_wrkbuf+3,??_doModeSLCAN
  7085  001EE4  0E08               	movlw	8
  7086  001EE6  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7087  001EE8  C156  F097         	movff	_wrkbuf+2,??_doModeSLCAN+1
  7088  001EEC  0E10               	movlw	16
  7089  001EEE  2797               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  7090  001EF0  C155  F098         	movff	_wrkbuf+1,??_doModeSLCAN+2
  7091  001EF4  0E18               	movlw	24
  7092  001EF6  2798               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  7093  001EF8  C154  F099         	movff	_wrkbuf,??_doModeSLCAN+3
  7094  001EFC  0100               	movlb	0	; () banked
  7095  001EFE  6B9A               	clrf	(??_doModeSLCAN+4)& (0+255),b
  7096  001F00  6B9B               	clrf	(??_doModeSLCAN+5)& (0+255),b
  7097  001F02  6B9C               	clrf	(??_doModeSLCAN+6)& (0+255),b
  7098  001F04  2B98               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  7099  001F06  D001               	goto	u13520
  7100  001F08                     u13525:
  7101  001F08  D8F4               	call	PL88	;call to abstracted procedure
  7102  001F0A                     u13520:
  7103  001F0A  2F98               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  7104  001F0C  D7FD               	goto	u13525
  7105  001F0E  2B97               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  7106  001F10  D001               	goto	u13530
  7107  001F12                     u13535:
  7108  001F12  D8EF               	call	PL88	;call to abstracted procedure
  7109  001F14                     u13530:
  7110  001F14  2F97               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  7111  001F16  D7FD               	goto	u13535
  7112  001F18  2B96               	incf	??_doModeSLCAN& (0+255),f,b
  7113  001F1A  D001               	goto	u13540
  7114  001F1C                     u13545:
  7115  001F1C  D8EA               	call	PL88	;call to abstracted procedure
  7116  001F1E                     u13540:
  7117  001F1E  2F96               	decfsz	??_doModeSLCAN& (0+255),f,b
  7118  001F20  D7FD               	goto	u13545
  7119  001F22  C09C  F0A0         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  7120  001F26  C09B  F09F         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  7121  001F2A  C09A  F09E         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  7122  001F2E  C099  F09D         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  7123                           
  7124                           ; BSR set to: 0
  7125                           ;main.c: 1407: dlc = vscpData[4];
  7126  001F32  C1A8  F0A1         	movff	_vscpData+4,doModeSLCAN@dlc
  7127                           
  7128                           ; BSR set to: 0
  7129                           ;main.c: 1410: if (dlc > 8) break;
  7130  001F36  0E08               	movlw	8
  7131  001F38  65A1               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  7132  001F3A  D001               	goto	l10890
  7133  001F3C  D0BA               	goto	l10938
  7134  001F3E                     l10890:
  7135                           
  7136                           ; BSR set to: 0
  7137                           ;main.c: 1411: if (strlen(cmdbuf) < (10 + 2 * dlc)) break;
  7138  001F3E  90D8               	bcf	status,0,c
  7139  001F40  35A1               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  7140  001F42  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7141  001F44  6B97               	clrf	(??_doModeSLCAN+1)& (0+255),b
  7142  001F46  3797               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  7143  001F48  0E0A               	movlw	10
  7144  001F4A  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7145  001F4C  0E00               	movlw	0
  7146  001F4E  2397               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  7147  001F50  0E01               	movlw	high _cmdbuf
  7148  001F52  0100               	movlb	0	; () banked
  7149  001F54  6F61               	movwf	(?_strlen+1)& (0+255),b
  7150  001F56  0E04               	movlw	low _cmdbuf
  7151  001F58  6F60               	movwf	?_strlen& (0+255),b
  7152  001F5A  EC11  F02A         	call	_strlen	;wreg free
  7153  001F5E  5196               	movf	??_doModeSLCAN& (0+255),w,b
  7154  001F60  5D60               	subwf	?_strlen& (0+255),w,b
  7155  001F62  5197               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  7156  001F64  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7157  001F66  E201 D0A4          	bnc	l10938
  7158                           
  7159                           ; BSR set to: 0
  7160                           ;main.c: 1413: memcpy(vscpData, vscpData + 5, dlc);
  7161  001F6A  0E01               	movlw	high _vscpData
  7162  001F6C  0100               	movlb	0	; () banked
  7163  001F6E  6F61               	movwf	(?_memcpy+1)& (0+255),b
  7164  001F70  0EA4               	movlw	low _vscpData
  7165  001F72  6F60               	movwf	?_memcpy& (0+255),b
  7166  001F74  0EA9               	movlw	low (_vscpData+5)
  7167  001F76  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7168  001F78  0E01               	movlw	high (_vscpData+5)
  7169  001F7A  6F97               	movwf	(??_doModeSLCAN+1)& (0+255),b
  7170  001F7C  C096  F062         	movff	??_doModeSLCAN,?_memcpy+2
  7171  001F80  C097  F063         	movff	??_doModeSLCAN+1,?_memcpy+3
  7172  001F84  C0A1  F064         	movff	doModeSLCAN@dlc,?_memcpy+4
  7173  001F88  6B65               	clrf	(?_memcpy+5)& (0+255),b
  7174  001F8A  ECF0  F029         	call	_memcpy	;wreg free
  7175                           
  7176                           ; BSR set to: 0
  7177                           ;main.c: 1415: rv = sendCANFrame(id, dlc, vscpData);
  7178  001F8E  C09D  F08F         	movff	doModeSLCAN@id,?_sendCANFrame
  7179  001F92  C09E  F090         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  7180  001F96  C09F  F091         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  7181  001F9A  C0A0  F092         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  7182  001F9E  C0A1  F093         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  7183  001FA2  0E01               	movlw	high _vscpData
  7184  001FA4  0100               	movlb	0	; () banked
  7185  001FA6  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  7186  001FA8  0EA4               	movlw	low _vscpData
  7187  001FAA  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  7188  001FAC  ECAE  F02A         	call	_sendCANFrame	;wreg free
  7189  001FB0                     L3:
  7190  001FB0  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  7191  001FB2  D07F               	goto	l10938
  7192  001FB4                     l10898:
  7193                           
  7194                           ; BSR set to: 0
  7195                           ;main.c: 1430: if (bOpen && (strlen(cmdbuf) == 1)) {
  7196  001FB4  51EF               	movf	_bOpen& (0+255),w,b
  7197  001FB6  E07D               	bz	l10938
  7198                           
  7199                           ; BSR set to: 0
  7200  001FB8  0E01               	movlw	high _cmdbuf
  7201  001FBA  0100               	movlb	0	; () banked
  7202  001FBC  6F61               	movwf	(?_strlen+1)& (0+255),b
  7203  001FBE  0E04               	movlw	low _cmdbuf
  7204  001FC0  6F60               	movwf	?_strlen& (0+255),b
  7205  001FC2  EC11  F02A         	call	_strlen	;wreg free
  7206  001FC6  0560               	decf	?_strlen& (0+255),w,b
  7207  001FC8  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7208  001FCA  E173               	bnz	l10938
  7209                           
  7210                           ; BSR set to: 0
  7211                           ;main.c: 1431: putsUSART((char *) "F00\r\n");
  7212  001FCC  0E7F               	movlw	high STR_136
  7213  001FCE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7214  001FD0  0E79               	movlw	low STR_136
  7215  001FD2  6F61               	movwf	?_putsUSART& (0+255),b
  7216  001FD4  ECEA  F028         	call	_putsUSART	;wreg free
  7217  001FD8  D06C               	goto	l10938
  7218  001FDA                     l10908:
  7219                           
  7220                           ; BSR set to: 0
  7221                           ;main.c: 1447: if (2 == strlen(cmdbuf)) {
  7222  001FDA  0E01               	movlw	high _cmdbuf
  7223  001FDC  0100               	movlb	0	; () banked
  7224  001FDE  6F61               	movwf	(?_strlen+1)& (0+255),b
  7225  001FE0  0E04               	movlw	low _cmdbuf
  7226  001FE2  6F60               	movwf	?_strlen& (0+255),b
  7227  001FE4  EC11  F02A         	call	_strlen	;wreg free
  7228  001FE8  5160               	movf	?_strlen& (0+255),w,b
  7229  001FEA  0A02               	xorlw	2
  7230  001FEC  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7231  001FEE  E161               	bnz	l10938
  7232                           
  7233                           ; BSR set to: 0
  7234                           ;main.c: 1448: if (!bOpen) {
  7235  001FF0  67EF               	tstfsz	_bOpen& (0+255),b
  7236  001FF2  D05F               	goto	l10938
  7237                           
  7238                           ; BSR set to: 0
  7239                           ;main.c: 1449: if ('0' == cmdbuf[1]) {
  7240  001FF4  0101               	movlb	1	; () banked
  7241  001FF6  5105               	movf	(_cmdbuf+1)& (0+255),w,b
  7242  001FF8  0A30               	xorlw	48
  7243  001FFA  E10A               	bnz	l10920
  7244                           
  7245                           ; BSR set to: 1
  7246                           ;main.c: 1450: nTimeStamp = 0;
  7247  001FFC  0100               	movlb	0	; () banked
  7248  001FFE  6BF2               	clrf	_nTimeStamp& (0+255),b
  7249                           
  7250                           ; BSR set to: 0
  7251                           ;main.c: 1452: writeEEPROM(0x05, 0);
  7252  002000  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
  7253  002002  0E05               	movlw	5
  7254  002004  6F60               	movwf	?_writeEEPROM& (0+255),b
  7255  002006  0E00               	movlw	0
  7256  002008  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
  7257  00200A  EC60  F02B         	call	_writeEEPROM	;wreg free
  7258  00200E  D6EF               	goto	l10834
  7259  002010                     l10920:
  7260                           
  7261                           ; BSR set to: 1
  7262  002010  5105               	movf	(_cmdbuf+1)& (0+255),w,b
  7263  002012  0A31               	xorlw	49
  7264  002014  E10B               	bnz	l743
  7265                           
  7266                           ; BSR set to: 1
  7267                           ;main.c: 1455: nTimeStamp = 1;
  7268  002016  0E01               	movlw	1
  7269  002018  0100               	movlb	0	; () banked
  7270  00201A  6FF2               	movwf	_nTimeStamp& (0+255),b
  7271                           
  7272                           ; BSR set to: 0
  7273                           ;main.c: 1457: writeEEPROM(0x05,
  7274                           ;main.c: 1458: 1);
  7275  00201C  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
  7276  00201E  0E05               	movlw	5
  7277  002020  6F60               	movwf	?_writeEEPROM& (0+255),b
  7278  002022  0E01               	movlw	1
  7279  002024  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
  7280  002026  EC60  F02B         	call	_writeEEPROM	;wreg free
  7281  00202A  D6E1               	goto	l10834
  7282  00202C                     l743:
  7283                           
  7284                           ; BSR set to: 1
  7285                           ;main.c: 1461: rv = 0;
  7286  00202C  0100               	movlb	0	; () banked
  7287  00202E  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  7288  002030  D040               	goto	l10938
  7289  002032                     l10928:
  7290                           
  7291                           ; BSR set to: 0
  7292                           ;main.c: 1469: writeEEPROM(0x01, 0xFF);
  7293  002032  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
  7294  002034  0E01               	movlw	1
  7295  002036  6F60               	movwf	?_writeEEPROM& (0+255),b
  7296  002038  0EFF               	movlw	255
  7297  00203A  6962               	setf	(?_writeEEPROM+2)& (0+255),b
  7298  00203C  EC60  F02B         	call	_writeEEPROM	;wreg free
  7299  002040  00FF               	reset		;# 
  7300                           
  7301                           ;main.c: 1471: break;
  7302  002042  D037               	goto	l10938
  7303  002044                     l10930:
  7304                           
  7305                           ; BSR set to: 0
  7306                           ;main.c: 1474: {
  7307                           ;main.c: 1476: if (0 == strlen(cmdbuf)) {
  7308  002044  0E01               	movlw	high _cmdbuf
  7309  002046  0100               	movlb	0	; () banked
  7310  002048  6F61               	movwf	(?_strlen+1)& (0+255),b
  7311  00204A  0E04               	movlw	low _cmdbuf
  7312  00204C  6F60               	movwf	?_strlen& (0+255),b
  7313  00204E  EC11  F02A         	call	_strlen	;wreg free
  7314  002052  5161               	movf	(?_strlen+1)& (0+255),w,b
  7315  002054  1160               	iorwf	?_strlen& (0+255),w,b
  7316  002056  E101 D6CA          	bz	l10834
  7317  00205A  D02B               	goto	l10938
  7318  00205C                     l10936:
  7319                           
  7320                           ; BSR set to: 0
  7321  00205C  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  7322                           
  7323                           ; Switch size 1, requested type "space"
  7324                           ; Number of cases is 16, Range of values is 66 to 116
  7325                           ; switch strategies available:
  7326                           ; Name         Instructions Cycles
  7327                           ; simple_byte           49    25 (average)
  7328                           ;	Chosen strategy is simple_byte
  7329  00205E  0A42               	xorlw	66	; case 66
  7330  002060  E0E8               	bz	l10928
  7331  002062  0A01               	xorlw	1	; case 67
  7332  002064  E101 D708          	bz	l10864
  7333  002068  0A05               	xorlw	5	; case 70
  7334  00206A  E0A4               	bz	l10898
  7335  00206C  0A0C               	xorlw	12	; case 74
  7336  00206E  E101 D6AD          	bz	l10830
  7337  002072  0A07               	xorlw	7	; case 77
  7338  002074  E101 D6BB          	bz	l10834
  7339  002078  0A03               	xorlw	3	; case 78
  7340  00207A  E101 D6CD          	bz	l10842
  7341  00207E  0A01               	xorlw	1	; case 79
  7342  002080  E101 D6E4          	bz	l10852
  7343  002084  0A1D               	xorlw	29	; case 82
  7344  002086  E015               	bz	l10938
  7345  002088  0A01               	xorlw	1	; case 83
  7346  00208A  E101 D6D7          	bz	l10848
  7347  00208E  0A07               	xorlw	7	; case 84
  7348  002090  E101 D704          	bz	l10874
  7349  002094  0A02               	xorlw	2	; case 86
  7350  002096  E101 D6AD          	bz	l10836
  7351  00209A  0A0C               	xorlw	12	; case 90
  7352  00209C  E09E               	bz	l10908
  7353  00209E  0A37               	xorlw	55	; case 109
  7354  0020A0  E101 D6A5          	bz	l10834
  7355  0020A4  0A1F               	xorlw	31	; case 114
  7356  0020A6  E005               	bz	l10938
  7357  0020A8  0A01               	xorlw	1	; case 115
  7358  0020AA  E101 D6CA          	bz	l718
  7359  0020AE  0A07               	xorlw	7	; case 116
  7360  0020B0  E1C9               	bnz	l10930
  7361  0020B2                     l10938:
  7362                           
  7363                           ;main.c: 1484: if (rv) {
  7364  0020B2  0100               	movlb	0	; () banked
  7365  0020B4  51A3               	movf	doModeSLCAN@rv& (0+255),w,b
  7366  0020B6  E007               	bz	l10942
  7367                           
  7368                           ; BSR set to: 0
  7369                           ;main.c: 1486: putsUSART((char *) "\r");
  7370  0020B8  0E7F               	movlw	high STR_137
  7371  0020BA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7372  0020BC  0EF2               	movlw	low STR_137
  7373  0020BE  6F61               	movwf	?_putsUSART& (0+255),b
  7374  0020C0  ECEA  F028         	call	_putsUSART	;wreg free
  7375                           
  7376                           ;main.c: 1487: }
  7377  0020C4  D006               	goto	l10944
  7378  0020C6                     l10942:
  7379                           
  7380                           ; BSR set to: 0
  7381                           ;main.c: 1488: else {
  7382                           ;main.c: 1490: putsUSART((char *) "\a");
  7383  0020C6  0E7F               	movlw	high STR_138
  7384  0020C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7385  0020CA  0EF0               	movlw	low STR_138
  7386  0020CC  6F61               	movwf	?_putsUSART& (0+255),b
  7387  0020CE  ECEA  F028         	call	_putsUSART	;wreg free
  7388  0020D2                     l10944:
  7389                           
  7390                           ;main.c: 1491: }
  7391                           ;main.c: 1494: memset(cmdbuf, 0, sizeof ( cmdbuf));
  7392  0020D2  0E01               	movlw	high _cmdbuf
  7393  0020D4  0100               	movlb	0	; () banked
  7394  0020D6  6F61               	movwf	(?_memset+1)& (0+255),b
  7395  0020D8  0E04               	movlw	low _cmdbuf
  7396  0020DA  6F60               	movwf	?_memset& (0+255),b
  7397  0020DC  6B63               	clrf	(?_memset+3)& (0+255),b
  7398  0020DE  6B62               	clrf	(?_memset+2)& (0+255),b
  7399  0020E0  6B65               	clrf	(?_memset+5)& (0+255),b
  7400  0020E2  0E50               	movlw	80
  7401  0020E4  6F64               	movwf	(?_memset+4)& (0+255),b
  7402  0020E6  EC49  F02B         	call	_memset	;wreg free
  7403                           
  7404                           ; BSR set to: 0
  7405                           ;main.c: 1495: pos = 0;
  7406  0020EA  0101               	movlb	1	; () banked
  7407  0020EC  6B02               	clrf	_pos& (0+255),b
  7408  0020EE                     l10948:
  7409                           
  7410                           ;main.c: 1497: }
  7411                           ;main.c: 1500: (INTCONbits.GIE = 1);
  7412  0020EE  8EF2               	bsf	intcon,7,c	;volatile
  7413  0020F0                     l708:
  7414  0020F0  0012               	return	
  7415  0020F2                     __end_of_doModeSLCAN:
  7416                           	opt stack 0
  7417  0020F2                     PL88:
  7418                           	opt stack 23
  7419  0020F2  90D8               	bcf	status,0,c
  7420  0020F4  3799               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  7421  0020F6  379A               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  7422  0020F8  379B               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  7423  0020FA  379C               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  7424  0020FC  0012               	return	
  7425  0020FE                     __end_ofPL88:
  7426                           	opt stack 0
  7427                           tblptru	equ	0xFF8
  7428                           tblptrh	equ	0xFF7
  7429                           tblptrl	equ	0xFF6
  7430                           tablat	equ	0xFF5
  7431                           prodh	equ	0xFF4
  7432                           prodl	equ	0xFF3
  7433                           intcon	equ	0xFF2
  7434                           indf0	equ	0xFEF
  7435                           postinc0	equ	0xFEE
  7436                           fsr0h	equ	0xFEA
  7437                           fsr0l	equ	0xFE9
  7438                           wreg	equ	0xFE8
  7439                           indf1	equ	0xFE7
  7440                           postinc1	equ	0xFE6
  7441                           postdec1	equ	0xFE5
  7442                           fsr1h	equ	0xFE2
  7443                           fsr1l	equ	0xFE1
  7444                           indf2	equ	0xFDF
  7445                           postinc2	equ	0xFDE
  7446                           postdec2	equ	0xFDD
  7447                           plusw2	equ	0xFDB
  7448                           fsr2h	equ	0xFDA
  7449                           fsr2l	equ	0xFD9
  7450                           status	equ	0xFD8
  7451                           
  7452 ;; *************** function _hexStringToBytes *****************
  7453 ;; Defined at:
  7454 ;;		line 35 in file "hexutils.c"
  7455 ;; Parameters:    Size  Location     Type
  7456 ;;  buf             2    4[BANK0 ] PTR unsigned char 
  7457 ;;		 -> wrkbuf(80), 
  7458 ;;  size            1    6[BANK0 ] unsigned char 
  7459 ;;  inhex           2    7[BANK0 ] PTR unsigned char 
  7460 ;;		 -> cmdbuf(80), 
  7461 ;; Auto vars:     Size  Location     Type
  7462 ;;  i               2   16[BANK0 ] int 
  7463 ;;  p               2   14[BANK0 ] PTR unsigned char 
  7464 ;;		 -> cmdbuf(80), 
  7465 ;;  len             2   12[BANK0 ] int 
  7466 ;; Return value:  Size  Location     Type
  7467 ;;                  1    wreg      unsigned char 
  7468 ;; Registers used:
  7469 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7470 ;; Tracked objects:
  7471 ;;		On entry : F/0
  7472 ;;		On exit  : F/0
  7473 ;;		Unchanged: 0/0
  7474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7475 ;;      Params:         0       5       0       0       0       0       0
  7476 ;;      Locals:         0       6       0       0       0       0       0
  7477 ;;      Temps:          0       3       0       0       0       0       0
  7478 ;;      Totals:         0      14       0       0       0       0       0
  7479 ;;Total ram usage:       14 bytes
  7480 ;; Hardware stack levels used:    1
  7481 ;; Hardware stack levels required when called:    4
  7482 ;; This function calls:
  7483 ;;		_strlen
  7484 ;;		_nibbleFromChar
  7485 ;; This function is called by:
  7486 ;;		_doModeSLCAN
  7487 ;; This function uses a non-reentrant model
  7488 ;;
  7489                           
  7490                           	psect	text3
  7491  004898                     __ptext3:
  7492                           	opt stack 0
  7493  004898                     _hexStringToBytes:
  7494                           	opt stack 25
  7495                           
  7496                           ; BSR set to: 0
  7497                           ;hexutils.c: 36: uint8_t *p;
  7498                           ;hexutils.c: 37: int len, i;
  7499                           ;hexutils.c: 39: len = strlen(inhex) / 2;
  7500                           
  7501                           ;incstack = 0
  7502                           ;incstack = 0
  7503  004898  C067  F060         	movff	hexStringToBytes@inhex,?_strlen
  7504  00489C  C068  F061         	movff	hexStringToBytes@inhex+1,?_strlen+1
  7505  0048A0  EC11  F02A         	call	_strlen	;wreg free
  7506  0048A4  90D8               	bcf	status,0,c
  7507  0048A6  3161               	rrcf	(?_strlen+1)& (0+255),w,b
  7508  0048A8  6F6D               	movwf	(hexStringToBytes@len+1)& (0+255),b
  7509  0048AA  3160               	rrcf	?_strlen& (0+255),w,b
  7510  0048AC  6F6C               	movwf	hexStringToBytes@len& (0+255),b
  7511                           
  7512                           ; BSR set to: 0
  7513                           ;hexutils.c: 40: if (len > size) return 0;
  7514  0048AE  5166               	movf	hexStringToBytes@size& (0+255),w,b
  7515  0048B0  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7516  0048B2  6B6A               	clrf	(??_hexStringToBytes+1)& (0+255),b
  7517  0048B4  516A               	movf	(??_hexStringToBytes+1)& (0+255),w,b
  7518  0048B6  0A80               	xorlw	128
  7519  0048B8  6F6B               	movwf	(??_hexStringToBytes+2)& (0+255),b
  7520  0048BA  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7521  0048BC  5D69               	subwf	??_hexStringToBytes& (0+255),w,b
  7522  0048BE  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7523  0048C0  0A80               	xorlw	128
  7524  0048C2  596B               	subwfb	(??_hexStringToBytes+2)& (0+255),w,b
  7525  0048C4  E202               	bc	l1591
  7526                           
  7527                           ; BSR set to: 0
  7528  0048C6  0E00               	movlw	0
  7529  0048C8  D033               	goto	l1592
  7530  0048CA                     l1591:
  7531                           
  7532                           ; BSR set to: 0
  7533                           ;hexutils.c: 41: for (i = 0, p = (uint8_t *) inhex; i < len; i++) {
  7534  0048CA  6B70               	clrf	hexStringToBytes@i& (0+255),b
  7535  0048CC  6B71               	clrf	(hexStringToBytes@i+1)& (0+255),b
  7536  0048CE  C067  F06E         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  7537  0048D2  C068  F06F         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  7538  0048D6  D022               	goto	l12520
  7539  0048D8                     l12514:
  7540                           
  7541                           ; BSR set to: 0
  7542                           ;hexutils.c: 42: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p + 1));
  7543  0048D8  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7544  0048DA  2564               	addwf	hexStringToBytes@buf& (0+255),w,b
  7545  0048DC  6ED9               	movwf	fsr2l,c
  7546  0048DE  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7547  0048E0  2165               	addwfc	(hexStringToBytes@buf+1)& (0+255),w,b
  7548  0048E2  6EDA               	movwf	fsr2h,c
  7549  0048E4  EE10 F001          	lfsr	1,1
  7550  0048E8  516E               	movf	hexStringToBytes@p& (0+255),w,b
  7551  0048EA  26E1               	addwf	fsr1l,f,c
  7552  0048EC  516F               	movf	(hexStringToBytes@p+1)& (0+255),w,b
  7553  0048EE  22E2               	addwfc	fsr1h,f,c
  7554  0048F0  50E7               	movf	indf1,w,c
  7555  0048F2  EC51  F02A         	call	_nibbleFromChar
  7556  0048F6  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7557  0048F8  C06E  FFE1         	movff	hexStringToBytes@p,fsr1l
  7558  0048FC  C06F  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  7559  004900  50E7               	movf	indf1,w,c
  7560  004902  EC51  F02A         	call	_nibbleFromChar
  7561  004906  6F6A               	movwf	(??_hexStringToBytes+1)& (0+255),b
  7562  004908  396A               	swapf	(??_hexStringToBytes+1)& (0+255),w,b
  7563  00490A  0BF0               	andlw	240
  7564  00490C  1169               	iorwf	??_hexStringToBytes& (0+255),w,b
  7565  00490E  6EDF               	movwf	indf2,c
  7566                           
  7567                           ; BSR set to: 0
  7568                           ;hexutils.c: 43: p += 2;
  7569  004910  0E02               	movlw	2
  7570  004912  276E               	addwf	hexStringToBytes@p& (0+255),f,b
  7571  004914  0E00               	movlw	0
  7572  004916  236F               	addwfc	(hexStringToBytes@p+1)& (0+255),f,b
  7573                           
  7574                           ; BSR set to: 0
  7575  004918  4B70               	infsnz	hexStringToBytes@i& (0+255),f,b
  7576  00491A  2B71               	incf	(hexStringToBytes@i+1)& (0+255),f,b
  7577  00491C                     l12520:
  7578                           
  7579                           ; BSR set to: 0
  7580  00491C  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7581  00491E  0A80               	xorlw	128
  7582  004920  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7583  004922  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7584  004924  5D70               	subwf	hexStringToBytes@i& (0+255),w,b
  7585  004926  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7586  004928  0A80               	xorlw	128
  7587  00492A  5969               	subwfb	??_hexStringToBytes& (0+255),w,b
  7588  00492C  E3D5               	bnc	l12514
  7589                           
  7590                           ; BSR set to: 0
  7591                           ;hexutils.c: 44: }
  7592                           ;hexutils.c: 46: return i;
  7593  00492E  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7594  004930                     l1592:
  7595                           
  7596                           ; BSR set to: 0
  7597  004930  0012               	return	
  7598  004932                     __end_of_hexStringToBytes:
  7599                           	opt stack 0
  7600                           tblptru	equ	0xFF8
  7601                           tblptrh	equ	0xFF7
  7602                           tblptrl	equ	0xFF6
  7603                           tablat	equ	0xFF5
  7604                           prodh	equ	0xFF4
  7605                           prodl	equ	0xFF3
  7606                           intcon	equ	0xFF2
  7607                           indf0	equ	0xFEF
  7608                           postinc0	equ	0xFEE
  7609                           fsr0h	equ	0xFEA
  7610                           fsr0l	equ	0xFE9
  7611                           wreg	equ	0xFE8
  7612                           indf1	equ	0xFE7
  7613                           postinc1	equ	0xFE6
  7614                           postdec1	equ	0xFE5
  7615                           fsr1h	equ	0xFE2
  7616                           fsr1l	equ	0xFE1
  7617                           indf2	equ	0xFDF
  7618                           postinc2	equ	0xFDE
  7619                           postdec2	equ	0xFDD
  7620                           plusw2	equ	0xFDB
  7621                           fsr2h	equ	0xFDA
  7622                           fsr2l	equ	0xFD9
  7623                           status	equ	0xFD8
  7624                           
  7625 ;; *************** function _nibbleFromChar *****************
  7626 ;; Defined at:
  7627 ;;		line 20 in file "hexutils.c"
  7628 ;; Parameters:    Size  Location     Type
  7629 ;;  c               1    wreg     unsigned char 
  7630 ;; Auto vars:     Size  Location     Type
  7631 ;;  c               1    0[BANK0 ] unsigned char 
  7632 ;; Return value:  Size  Location     Type
  7633 ;;                  1    wreg      unsigned char 
  7634 ;; Registers used:
  7635 ;;		wreg, status,2, status,0
  7636 ;; Tracked objects:
  7637 ;;		On entry : F/0
  7638 ;;		On exit  : F/0
  7639 ;;		Unchanged: 0/0
  7640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7641 ;;      Params:         0       0       0       0       0       0       0
  7642 ;;      Locals:         0       1       0       0       0       0       0
  7643 ;;      Temps:          0       0       0       0       0       0       0
  7644 ;;      Totals:         0       1       0       0       0       0       0
  7645 ;;Total ram usage:        1 bytes
  7646 ;; Hardware stack levels used:    1
  7647 ;; Hardware stack levels required when called:    3
  7648 ;; This function calls:
  7649 ;;		Nothing
  7650 ;; This function is called by:
  7651 ;;		_hexStringToBytes
  7652 ;; This function uses a non-reentrant model
  7653 ;;
  7654                           
  7655                           	psect	text4
  7656  0054A2                     __ptext4:
  7657                           	opt stack 0
  7658  0054A2                     _nibbleFromChar:
  7659                           	opt stack 25
  7660                           
  7661                           ; BSR set to: 0
  7662                           ;incstack = 0
  7663                           ;incstack = 0
  7664                           ;nibbleFromChar@c stored from wreg
  7665  0054A2  CFE8 F060          	movff	wreg,nibbleFromChar@c
  7666                           
  7667                           ; BSR set to: 0
  7668                           ;hexutils.c: 21: if (c >= '0' && c <= '9') return c - '0';
  7669  0054A6  0E2F               	movlw	47
  7670  0054A8  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7671  0054AA  D006               	goto	l12790
  7672                           
  7673                           ; BSR set to: 0
  7674  0054AC  0E3A               	movlw	58
  7675  0054AE  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7676  0054B0  D003               	goto	l12790
  7677                           
  7678                           ; BSR set to: 0
  7679  0054B2  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7680  0054B4  0FD0               	addlw	208
  7681  0054B6  D013               	goto	l1586
  7682  0054B8                     l12790:
  7683                           
  7684                           ; BSR set to: 0
  7685                           ;hexutils.c: 22: if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  7686  0054B8  0E60               	movlw	96
  7687  0054BA  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7688  0054BC  D006               	goto	l12798
  7689                           
  7690                           ; BSR set to: 0
  7691  0054BE  0E67               	movlw	103
  7692  0054C0  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7693  0054C2  D003               	goto	l12798
  7694                           
  7695                           ; BSR set to: 0
  7696  0054C4  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7697  0054C6  0FA9               	addlw	169
  7698  0054C8  D00A               	goto	l1586
  7699  0054CA                     l12798:
  7700                           
  7701                           ; BSR set to: 0
  7702                           ;hexutils.c: 23: if (c >= 'A' && c <= 'F') return c - 'A' + 10;
  7703  0054CA  0E40               	movlw	64
  7704  0054CC  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7705  0054CE  D006               	goto	l12806
  7706                           
  7707                           ; BSR set to: 0
  7708  0054D0  0E47               	movlw	71
  7709  0054D2  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7710  0054D4  D003               	goto	l12806
  7711                           
  7712                           ; BSR set to: 0
  7713  0054D6  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7714  0054D8  0FC9               	addlw	201
  7715  0054DA  D001               	goto	l1586
  7716  0054DC                     l12806:
  7717                           
  7718                           ; BSR set to: 0
  7719                           ;hexutils.c: 24: return 255;
  7720  0054DC  0EFF               	movlw	255
  7721  0054DE                     l1586:
  7722                           
  7723                           ; BSR set to: 0
  7724  0054DE  0012               	return	
  7725  0054E0                     __end_of_nibbleFromChar:
  7726                           	opt stack 0
  7727                           tblptru	equ	0xFF8
  7728                           tblptrh	equ	0xFF7
  7729                           tblptrl	equ	0xFF6
  7730                           tablat	equ	0xFF5
  7731                           prodh	equ	0xFF4
  7732                           prodl	equ	0xFF3
  7733                           intcon	equ	0xFF2
  7734                           indf0	equ	0xFEF
  7735                           postinc0	equ	0xFEE
  7736                           fsr0h	equ	0xFEA
  7737                           fsr0l	equ	0xFE9
  7738                           wreg	equ	0xFE8
  7739                           indf1	equ	0xFE7
  7740                           postinc1	equ	0xFE6
  7741                           postdec1	equ	0xFE5
  7742                           fsr1h	equ	0xFE2
  7743                           fsr1l	equ	0xFE1
  7744                           indf2	equ	0xFDF
  7745                           postinc2	equ	0xFDE
  7746                           postdec2	equ	0xFDD
  7747                           plusw2	equ	0xFDB
  7748                           fsr2h	equ	0xFDA
  7749                           fsr2l	equ	0xFD9
  7750                           status	equ	0xFD8
  7751                           
  7752 ;; *************** function _receiveSendEventSLCAN *****************
  7753 ;; Defined at:
  7754 ;;		line 2097 in file "main.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;		None
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;  id              4   38[BANK0 ] unsigned long 
  7759 ;;  i               2   43[BANK0 ] int 
  7760 ;;  dlc             1   42[BANK0 ] unsigned char 
  7761 ;; Return value:  Size  Location     Type
  7762 ;;                  1    wreg      enum E15660
  7763 ;; Registers used:
  7764 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7765 ;; Tracked objects:
  7766 ;;		On entry : F/0
  7767 ;;		On exit  : 0/0
  7768 ;;		Unchanged: 0/0
  7769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7770 ;;      Params:         0       0       0       0       0       0       0
  7771 ;;      Locals:         0       7       0       0       0       0       0
  7772 ;;      Temps:          0       3       0       0       0       0       0
  7773 ;;      Totals:         0      10       0       0       0       0       0
  7774 ;;Total ram usage:       10 bytes
  7775 ;; Hardware stack levels used:    1
  7776 ;; Hardware stack levels required when called:    6
  7777 ;; This function calls:
  7778 ;;		_putsUSART
  7779 ;;		_WriteUSART
  7780 ;;		_strlen
  7781 ;;		_getCANFrame
  7782 ;;		_ultoa
  7783 ;;		_itoa
  7784 ;; This function is called by:
  7785 ;;		_doModeSLCAN
  7786 ;; This function uses a non-reentrant model
  7787 ;;
  7788                           
  7789                           	psect	text5
  7790  002FA6                     __ptext5:
  7791                           	opt stack 0
  7792  002FA6                     _receiveSendEventSLCAN:
  7793                           	opt stack 23
  7794                           
  7795                           ; BSR set to: 0
  7796                           ;main.c: 2098: int i;
  7797                           ;main.c: 2099: uint8_t dlc;
  7798                           ;main.c: 2100: uint32_t id;
  7799                           ;main.c: 2102: if (getCANFrame(&id, &dlc, vscpData)) {
  7800                           
  7801                           ; BSR set to: 0
  7802                           ;incstack = 0
  7803                           ;incstack = 0
  7804  002FA6  0E00               	movlw	high receiveSendEventSLCAN@dlc
  7805  002FA8  6F6E               	movwf	(?_getCANFrame+1)& (0+255),b
  7806  002FAA  0E8A               	movlw	low receiveSendEventSLCAN@dlc
  7807  002FAC  6F6D               	movwf	?_getCANFrame& (0+255),b
  7808  002FAE  0E01               	movlw	high _vscpData
  7809  002FB0  0100               	movlb	0	; () banked
  7810  002FB2  6F70               	movwf	(?_getCANFrame+3)& (0+255),b
  7811  002FB4  0EA4               	movlw	low _vscpData
  7812  002FB6  6F6F               	movwf	(?_getCANFrame+2)& (0+255),b
  7813  002FB8  0E86               	movlw	receiveSendEventSLCAN@id& (0+255)
  7814  002FBA  EC78  F026         	call	_getCANFrame
  7815  002FBE  0900               	iorlw	0
  7816  002FC0  E101 D0AD          	bz	l1050
  7817                           
  7818                           ; BSR set to: 0
  7819                           ;main.c: 2105: cntRxFrames++;
  7820  002FC4  2BD9               	incf	_cntRxFrames& (0+255),f,b
  7821  002FC6  0E00               	movlw	0
  7822  002FC8  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  7823  002FCA  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  7824  002FCC  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  7825                           
  7826                           ;main.c: 2106: cntRxBytes += dlc;
  7827  002FCE  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  7828  002FD0  27D5               	addwf	_cntRxBytes& (0+255),f,b
  7829  002FD2  0E00               	movlw	0
  7830  002FD4  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  7831  002FD6  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  7832  002FD8  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  7833  002FDA                     l1023:
  7834                           
  7835                           ; BSR set to: 0
  7836  002FDA  A2AC               	btfss	4012,1,c	;volatile
  7837  002FDC  D7FE               	goto	l1023
  7838                           
  7839                           ; BSR set to: 0
  7840                           ;main.c: 2109: WriteUSART('T');
  7841  002FDE  0E54               	movlw	84
  7842  002FE0  ECB9  F02B         	call	_WriteUSART
  7843                           
  7844                           ;main.c: 2111: ultoa(wrkbuf, id, 16);
  7845  002FE4  0E01               	movlw	high _wrkbuf
  7846  002FE6  0100               	movlb	0	; () banked
  7847  002FE8  6F77               	movwf	(?_ultoa+1)& (0+255),b
  7848  002FEA  0E54               	movlw	low _wrkbuf
  7849  002FEC  6F76               	movwf	?_ultoa& (0+255),b
  7850  002FEE  C086  F078         	movff	receiveSendEventSLCAN@id,?_ultoa+2
  7851  002FF2  C087  F079         	movff	receiveSendEventSLCAN@id+1,?_ultoa+3
  7852  002FF6  C088  F07A         	movff	receiveSendEventSLCAN@id+2,?_ultoa+4
  7853  002FFA  C089  F07B         	movff	receiveSendEventSLCAN@id+3,?_ultoa+5
  7854  002FFE  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  7855  003000  0E10               	movlw	16
  7856  003002  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  7857  003004  EC77  F01F         	call	_ultoa	;wreg free
  7858                           
  7859                           ; BSR set to: 0
  7860                           ;main.c: 2113: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  7861  003008  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  7862  00300A  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  7863  00300C                     l1028:
  7864                           
  7865                           ; BSR set to: 0
  7866  00300C  A2AC               	btfss	4012,1,c	;volatile
  7867  00300E  D7FE               	goto	l1028
  7868                           
  7869                           ; BSR set to: 0
  7870                           ;main.c: 2115: WriteUSART('0');
  7871  003010  0E30               	movlw	48
  7872  003012  ECB9  F02B         	call	_WriteUSART
  7873                           
  7874                           ; BSR set to: 0
  7875  003016  D884               	call	PL94	;call to abstracted procedure
  7876  003018  B4D8               	btfsc	status,2,c
  7877  00301A  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  7878  00301C  E3F7               	bnc	l1028
  7879                           
  7880                           ; BSR set to: 0
  7881                           ;main.c: 2116: }
  7882                           ;main.c: 2117: putsUSART(wrkbuf);
  7883  00301E  0E01               	movlw	high _wrkbuf
  7884  003020  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7885  003022  0E54               	movlw	low _wrkbuf
  7886  003024  6F61               	movwf	?_putsUSART& (0+255),b
  7887  003026  ECEA  F028         	call	_putsUSART	;wreg free
  7888                           
  7889                           ;main.c: 2120: itoa(wrkbuf, dlc, 16);
  7890  00302A  0E01               	movlw	high _wrkbuf
  7891  00302C  0100               	movlb	0	; () banked
  7892  00302E  6F71               	movwf	(?_itoa+1)& (0+255),b
  7893  003030  0E54               	movlw	low _wrkbuf
  7894  003032  6F70               	movwf	?_itoa& (0+255),b
  7895  003034  C08A  F072         	movff	receiveSendEventSLCAN@dlc,?_itoa+2
  7896  003038  6B73               	clrf	(?_itoa+3)& (0+255),b
  7897  00303A  6B75               	clrf	(?_itoa+5)& (0+255),b
  7898  00303C  0E10               	movlw	16
  7899  00303E  6F74               	movwf	(?_itoa+4)& (0+255),b
  7900  003040  ECCA  F02A         	call	_itoa	;wreg free
  7901  003044                     l1031:
  7902                           
  7903                           ; BSR set to: 0
  7904  003044  A2AC               	btfss	4012,1,c	;volatile
  7905  003046  D7FE               	goto	l1031
  7906                           
  7907                           ; BSR set to: 0
  7908                           ;main.c: 2122: WriteUSART(wrkbuf[0]);
  7909  003048  0101               	movlb	1	; () banked
  7910  00304A  5154               	movf	_wrkbuf& (0+255),w,b
  7911  00304C  ECB9  F02B         	call	_WriteUSART
  7912                           
  7913                           ;main.c: 2125: for (i = 0; i < dlc; i++) {
  7914  003050  0100               	movlb	0	; () banked
  7915  003052  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  7916  003054  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  7917  003056  D02D               	goto	l12472
  7918  003058                     l12460:
  7919                           
  7920                           ; BSR set to: 0
  7921                           ;main.c: 2126: itoa(wrkbuf, vscpData[i], 16);
  7922  003058  0E01               	movlw	high _wrkbuf
  7923  00305A  0100               	movlb	0	; () banked
  7924  00305C  6F71               	movwf	(?_itoa+1)& (0+255),b
  7925  00305E  0E54               	movlw	low _wrkbuf
  7926  003060  6F70               	movwf	?_itoa& (0+255),b
  7927  003062  0EA4               	movlw	low _vscpData
  7928  003064  258B               	addwf	receiveSendEventSLCAN@i& (0+255),w,b
  7929  003066  6ED9               	movwf	fsr2l,c
  7930  003068  0E01               	movlw	high _vscpData
  7931  00306A  218C               	addwfc	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  7932  00306C  6EDA               	movwf	fsr2h,c
  7933  00306E  50DF               	movf	indf2,w,c
  7934  003070  6F72               	movwf	(?_itoa+2)& (0+255),b
  7935  003072  6B73               	clrf	(?_itoa+3)& (0+255),b
  7936  003074  6B75               	clrf	(?_itoa+5)& (0+255),b
  7937  003076  0E10               	movlw	16
  7938  003078  6F74               	movwf	(?_itoa+4)& (0+255),b
  7939  00307A  ECCA  F02A         	call	_itoa	;wreg free
  7940                           
  7941                           ; BSR set to: 0
  7942                           ;main.c: 2128: if (2 != strlen(wrkbuf)) {
  7943  00307E  0E01               	movlw	high _wrkbuf
  7944  003080  0100               	movlb	0	; () banked
  7945  003082  6F61               	movwf	(?_strlen+1)& (0+255),b
  7946  003084  0E54               	movlw	low _wrkbuf
  7947  003086  6F60               	movwf	?_strlen& (0+255),b
  7948  003088  EC11  F02A         	call	_strlen	;wreg free
  7949  00308C  5160               	movf	?_strlen& (0+255),w,b
  7950  00308E  0A02               	xorlw	2
  7951  003090  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7952  003092  E005               	bz	l12468
  7953  003094                     l1037:
  7954                           
  7955                           ; BSR set to: 0
  7956  003094  A2AC               	btfss	4012,1,c	;volatile
  7957  003096  D7FE               	goto	l1037
  7958                           
  7959                           ; BSR set to: 0
  7960                           ;main.c: 2130: WriteUSART('0');
  7961  003098  0E30               	movlw	48
  7962  00309A  ECB9  F02B         	call	_WriteUSART
  7963  00309E                     l12468:
  7964                           
  7965                           ;main.c: 2131: }
  7966                           ;main.c: 2133: putsUSART(wrkbuf);
  7967  00309E  0E01               	movlw	high _wrkbuf
  7968  0030A0  0100               	movlb	0	; () banked
  7969  0030A2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7970  0030A4  0E54               	movlw	low _wrkbuf
  7971  0030A6  6F61               	movwf	?_putsUSART& (0+255),b
  7972  0030A8  ECEA  F028         	call	_putsUSART	;wreg free
  7973  0030AC  0100               	movlb	0	; () banked
  7974  0030AE  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  7975  0030B0  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  7976  0030B2                     l12472:
  7977                           
  7978                           ; BSR set to: 0
  7979  0030B2  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  7980  0030B4  6F83               	movwf	??_receiveSendEventSLCAN& (0+255),b
  7981  0030B6  6B84               	clrf	(??_receiveSendEventSLCAN+1)& (0+255),b
  7982  0030B8  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  7983  0030BA  0A80               	xorlw	128
  7984  0030BC  6F85               	movwf	(??_receiveSendEventSLCAN+2)& (0+255),b
  7985  0030BE  5183               	movf	??_receiveSendEventSLCAN& (0+255),w,b
  7986  0030C0  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  7987  0030C2  5184               	movf	(??_receiveSendEventSLCAN+1)& (0+255),w,b
  7988  0030C4  0A80               	xorlw	128
  7989  0030C6  5985               	subwfb	(??_receiveSendEventSLCAN+2)& (0+255),w,b
  7990  0030C8  E3C7               	bnc	l12460
  7991                           
  7992                           ; BSR set to: 0
  7993                           ;main.c: 2134: }
  7994                           ;main.c: 2137: if (nTimeStamp) {
  7995  0030CA  51F2               	movf	_nTimeStamp& (0+255),w,b
  7996  0030CC  E023               	bz	l1047
  7997                           
  7998                           ; BSR set to: 0
  7999                           ;main.c: 2138: ultoa(wrkbuf, timer, 16);
  8000  0030CE  0E01               	movlw	high _wrkbuf
  8001  0030D0  0100               	movlb	0	; () banked
  8002  0030D2  6F77               	movwf	(?_ultoa+1)& (0+255),b
  8003  0030D4  0E54               	movlw	low _wrkbuf
  8004  0030D6  6F76               	movwf	?_ultoa& (0+255),b
  8005  0030D8  C0E9  F078         	movff	_timer,?_ultoa+2	;volatile
  8006  0030DC  C0EA  F079         	movff	_timer+1,?_ultoa+3	;volatile
  8007  0030E0  C0EB  F07A         	movff	_timer+2,?_ultoa+4	;volatile
  8008  0030E4  C0EC  F07B         	movff	_timer+3,?_ultoa+5	;volatile
  8009  0030E8  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  8010  0030EA  0E10               	movlw	16
  8011  0030EC  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  8012  0030EE  EC77  F01F         	call	_ultoa	;wreg free
  8013                           
  8014                           ; BSR set to: 0
  8015                           ;main.c: 2140: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8016  0030F2  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8017  0030F4  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8018  0030F6                     l1044:
  8019                           
  8020                           ; BSR set to: 0
  8021  0030F6  A2AC               	btfss	4012,1,c	;volatile
  8022  0030F8  D7FE               	goto	l1044
  8023                           
  8024                           ; BSR set to: 0
  8025                           ;main.c: 2142: WriteUSART('0');
  8026  0030FA  0E30               	movlw	48
  8027  0030FC  ECB9  F02B         	call	_WriteUSART
  8028                           
  8029                           ; BSR set to: 0
  8030  003100  D80F               	call	PL94	;call to abstracted procedure
  8031  003102  B4D8               	btfsc	status,2,c
  8032  003104  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8033  003106  E3F7               	bnc	l1044
  8034                           
  8035                           ; BSR set to: 0
  8036                           ;main.c: 2143: }
  8037                           ;main.c: 2144: putsUSART(wrkbuf);
  8038  003108  0E01               	movlw	high _wrkbuf
  8039  00310A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8040  00310C  0E54               	movlw	low _wrkbuf
  8041  00310E  6F61               	movwf	?_putsUSART& (0+255),b
  8042  003110  ECEA  F028         	call	_putsUSART	;wreg free
  8043  003114                     l1047:
  8044  003114  A2AC               	btfss	4012,1,c	;volatile
  8045  003116  D7FE               	goto	l1047
  8046                           
  8047                           ;main.c: 2148: WriteUSART(0x0d);
  8048  003118  0E0D               	movlw	13
  8049  00311A  ECB9  F02B         	call	_WriteUSART
  8050  00311E                     l1050:
  8051  00311E  0012               	return	
  8052  003120                     __end_of_receiveSendEventSLCAN:
  8053                           	opt stack 0
  8054  003120                     PL94:
  8055                           	opt stack 23
  8056  003120  0100               	movlb	0	; () banked
  8057  003122  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8058  003124  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8059  003126  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8060  003128  0A80               	xorlw	128
  8061  00312A  0F80               	addlw	-128
  8062  00312C  0CB8               	retlw	184
  8063  00312E                     __end_ofPL94:
  8064                           	opt stack 0
  8065                           tblptru	equ	0xFF8
  8066                           tblptrh	equ	0xFF7
  8067                           tblptrl	equ	0xFF6
  8068                           tablat	equ	0xFF5
  8069                           prodh	equ	0xFF4
  8070                           prodl	equ	0xFF3
  8071                           intcon	equ	0xFF2
  8072                           indf0	equ	0xFEF
  8073                           postinc0	equ	0xFEE
  8074                           fsr0h	equ	0xFEA
  8075                           fsr0l	equ	0xFE9
  8076                           wreg	equ	0xFE8
  8077                           indf1	equ	0xFE7
  8078                           postinc1	equ	0xFE6
  8079                           postdec1	equ	0xFE5
  8080                           fsr1h	equ	0xFE2
  8081                           fsr1l	equ	0xFE1
  8082                           indf2	equ	0xFDF
  8083                           postinc2	equ	0xFDE
  8084                           postdec2	equ	0xFDD
  8085                           plusw2	equ	0xFDB
  8086                           fsr2h	equ	0xFDA
  8087                           fsr2l	equ	0xFD9
  8088                           status	equ	0xFD8
  8089                           
  8090 ;; *************** function _ultoa *****************
  8091 ;; Defined at:
  8092 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;  buf             2   22[BANK0 ] PTR unsigned char 
  8095 ;;		 -> wrkbuf(80), 
  8096 ;;  val             4   24[BANK0 ] unsigned long 
  8097 ;;  base            2   28[BANK0 ] int 
  8098 ;; Auto vars:     Size  Location     Type
  8099 ;;  v               4   30[BANK0 ] unsigned long 
  8100 ;;  c               1   34[BANK0 ] unsigned char 
  8101 ;; Return value:  Size  Location     Type
  8102 ;;                  2   22[BANK0 ] PTR unsigned char 
  8103 ;; Registers used:
  8104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8105 ;; Tracked objects:
  8106 ;;		On entry : F/0
  8107 ;;		On exit  : F/0
  8108 ;;		Unchanged: 0/0
  8109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8110 ;;      Params:         0       8       0       0       0       0       0
  8111 ;;      Locals:         0       5       0       0       0       0       0
  8112 ;;      Temps:          0       0       0       0       0       0       0
  8113 ;;      Totals:         0      13       0       0       0       0       0
  8114 ;;Total ram usage:       13 bytes
  8115 ;; Hardware stack levels used:    1
  8116 ;; Hardware stack levels required when called:    4
  8117 ;; This function calls:
  8118 ;;		___lldiv
  8119 ;;		___llmod
  8120 ;; This function is called by:
  8121 ;;		_receiveSendEventSLCAN
  8122 ;; This function uses a non-reentrant model
  8123 ;;
  8124                           
  8125                           	psect	text6
  8126  003EEE                     __ptext6:
  8127                           	opt stack 0
  8128  003EEE                     _ultoa:
  8129                           	opt stack 24
  8130                           
  8131                           ; BSR set to: 0
  8132                           
  8133                           ;incstack = 0
  8134                           ;incstack = 0
  8135  003EEE  C078  F07E         	movff	ultoa@val,ultoa@v
  8136  003EF2  C079  F07F         	movff	ultoa@val+1,ultoa@v+1
  8137  003EF6  C07A  F080         	movff	ultoa@val+2,ultoa@v+2
  8138  003EFA  C07B  F081         	movff	ultoa@val+3,ultoa@v+3
  8139  003EFE                     l12630:
  8140                           
  8141                           ; BSR set to: 0
  8142  003EFE  C07E  F060         	movff	ultoa@v,?___lldiv
  8143  003F02  C07F  F061         	movff	ultoa@v+1,?___lldiv+1
  8144  003F06  C080  F062         	movff	ultoa@v+2,?___lldiv+2
  8145  003F0A  C081  F063         	movff	ultoa@v+3,?___lldiv+3
  8146  003F0E  D858               	call	PL74	;call to abstracted procedure
  8147  003F10  ECB4  F026         	call	___lldiv	;wreg free
  8148  003F14  C063  F081         	movff	?___lldiv+3,ultoa@v+3
  8149  003F18  C062  F080         	movff	?___lldiv+2,ultoa@v+2
  8150  003F1C  C061  F07F         	movff	?___lldiv+1,ultoa@v+1
  8151  003F20  C060  F07E         	movff	?___lldiv,ultoa@v
  8152                           
  8153                           ; BSR set to: 0
  8154  003F24  4B76               	infsnz	ultoa@buf& (0+255),f,b
  8155  003F26  2B77               	incf	(ultoa@buf+1)& (0+255),f,b
  8156                           
  8157                           ; BSR set to: 0
  8158  003F28  5181               	movf	(ultoa@v+3)& (0+255),w,b
  8159  003F2A  117E               	iorwf	ultoa@v& (0+255),w,b
  8160  003F2C  117F               	iorwf	(ultoa@v+1)& (0+255),w,b
  8161  003F2E  1180               	iorwf	(ultoa@v+2)& (0+255),w,b
  8162  003F30  E1E6               	bnz	l12630
  8163                           
  8164                           ; BSR set to: 0
  8165  003F32  C076  FFD9         	movff	ultoa@buf,fsr2l
  8166  003F36  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8167  003F3A  6ADF               	clrf	indf2,c
  8168                           
  8169                           ; BSR set to: 0
  8170  003F3C  0776               	decf	ultoa@buf& (0+255),f,b
  8171  003F3E  A0D8               	btfss	status,0,c
  8172  003F40  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8173  003F42                     l12640:
  8174                           
  8175                           ; BSR set to: 0
  8176  003F42  C078  F06D         	movff	ultoa@val,?___llmod
  8177  003F46  C079  F06E         	movff	ultoa@val+1,?___llmod+1
  8178  003F4A  C07A  F06F         	movff	ultoa@val+2,?___llmod+2
  8179  003F4E  C07B  F070         	movff	ultoa@val+3,?___llmod+3
  8180  003F52  C07C  F071         	movff	ultoa@base,?___llmod+4
  8181  003F56  C07D  F072         	movff	ultoa@base+1,?___llmod+5
  8182  003F5A  0E00               	movlw	0
  8183  003F5C  BF72               	btfsc	(?___llmod+5)& (0+255),7,b
  8184  003F5E  0EFF               	movlw	-1
  8185  003F60  6F73               	movwf	(?___llmod+6)& (0+255),b
  8186  003F62  6F74               	movwf	(?___llmod+7)& (0+255),b
  8187  003F64  EC2F  F028         	call	___llmod	;wreg free
  8188  003F68  516D               	movf	?___llmod& (0+255),w,b
  8189  003F6A  6F82               	movwf	ultoa@c& (0+255),b
  8190                           
  8191                           ; BSR set to: 0
  8192  003F6C  C078  F060         	movff	ultoa@val,?___lldiv
  8193  003F70  C079  F061         	movff	ultoa@val+1,?___lldiv+1
  8194  003F74  C07A  F062         	movff	ultoa@val+2,?___lldiv+2
  8195  003F78  C07B  F063         	movff	ultoa@val+3,?___lldiv+3
  8196  003F7C  D821               	call	PL74	;call to abstracted procedure
  8197  003F7E  ECB4  F026         	call	___lldiv	;wreg free
  8198  003F82  C063  F07B         	movff	?___lldiv+3,ultoa@val+3
  8199  003F86  C062  F07A         	movff	?___lldiv+2,ultoa@val+2
  8200  003F8A  C061  F079         	movff	?___lldiv+1,ultoa@val+1
  8201  003F8E  C060  F078         	movff	?___lldiv,ultoa@val
  8202                           
  8203                           ; BSR set to: 0
  8204  003F92  0E09               	movlw	9
  8205  003F94  6582               	cpfsgt	ultoa@c& (0+255),b
  8206  003F96  D002               	goto	l2387
  8207                           
  8208                           ; BSR set to: 0
  8209  003F98  0E07               	movlw	7
  8210  003F9A  2782               	addwf	ultoa@c& (0+255),f,b
  8211  003F9C                     l2387:
  8212                           
  8213                           ; BSR set to: 0
  8214  003F9C  0E30               	movlw	48
  8215  003F9E  2782               	addwf	ultoa@c& (0+255),f,b
  8216                           
  8217                           ; BSR set to: 0
  8218  003FA0  C076  FFD9         	movff	ultoa@buf,fsr2l
  8219  003FA4  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8220  003FA8  C082  FFDF         	movff	ultoa@c,indf2
  8221                           
  8222                           ; BSR set to: 0
  8223  003FAC  0776               	decf	ultoa@buf& (0+255),f,b
  8224  003FAE  A0D8               	btfss	status,0,c
  8225  003FB0  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8226                           
  8227                           ; BSR set to: 0
  8228  003FB2  517B               	movf	(ultoa@val+3)& (0+255),w,b
  8229  003FB4  1178               	iorwf	ultoa@val& (0+255),w,b
  8230  003FB6  1179               	iorwf	(ultoa@val+1)& (0+255),w,b
  8231  003FB8  117A               	iorwf	(ultoa@val+2)& (0+255),w,b
  8232  003FBA  B4D8               	btfsc	status,2,c
  8233                           
  8234                           ; BSR set to: 0
  8235  003FBC  0012               	return	
  8236  003FBE  D7C1               	goto	l12640
  8237  003FC0                     __end_of_ultoa:
  8238                           	opt stack 0
  8239  003FC0                     PL74:
  8240                           	opt stack 24
  8241  003FC0  C07C  F064         	movff	ultoa@base,?___lldiv+4
  8242  003FC4  C07D  F065         	movff	ultoa@base+1,?___lldiv+5
  8243  003FC8  0E00               	movlw	0
  8244  003FCA  BF65               	btfsc	(?___lldiv+5)& (0+255),7,b
  8245  003FCC  0EFF               	movlw	-1
  8246  003FCE  6F66               	movwf	(?___lldiv+6)& (0+255),b
  8247  003FD0  6F67               	movwf	(?___lldiv+7)& (0+255),b
  8248  003FD2  0012               	return	
  8249  003FD4                     __end_ofPL74:
  8250                           	opt stack 0
  8251                           tblptru	equ	0xFF8
  8252                           tblptrh	equ	0xFF7
  8253                           tblptrl	equ	0xFF6
  8254                           tablat	equ	0xFF5
  8255                           prodh	equ	0xFF4
  8256                           prodl	equ	0xFF3
  8257                           intcon	equ	0xFF2
  8258                           indf0	equ	0xFEF
  8259                           postinc0	equ	0xFEE
  8260                           fsr0h	equ	0xFEA
  8261                           fsr0l	equ	0xFE9
  8262                           wreg	equ	0xFE8
  8263                           indf1	equ	0xFE7
  8264                           postinc1	equ	0xFE6
  8265                           postdec1	equ	0xFE5
  8266                           fsr1h	equ	0xFE2
  8267                           fsr1l	equ	0xFE1
  8268                           indf2	equ	0xFDF
  8269                           postinc2	equ	0xFDE
  8270                           postdec2	equ	0xFDD
  8271                           plusw2	equ	0xFDB
  8272                           fsr2h	equ	0xFDA
  8273                           fsr2l	equ	0xFD9
  8274                           status	equ	0xFD8
  8275                           
  8276 ;; *************** function _doModeVscp *****************
  8277 ;; Defined at:
  8278 ;;		line 1094 in file "main.c"
  8279 ;; Parameters:    Size  Location     Type
  8280 ;;		None
  8281 ;; Auto vars:     Size  Location     Type
  8282 ;;  c               1   87[BANK0 ] unsigned char 
  8283 ;; Return value:  Size  Location     Type
  8284 ;;		None               void
  8285 ;; Registers used:
  8286 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8287 ;; Tracked objects:
  8288 ;;		On entry : F/0
  8289 ;;		On exit  : E/0
  8290 ;;		Unchanged: 0/0
  8291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8292 ;;      Params:         0       0       0       0       0       0       0
  8293 ;;      Locals:         0       1       0       0       0       0       0
  8294 ;;      Temps:          0       0       0       0       0       0       0
  8295 ;;      Totals:         0       1       0       0       0       0       0
  8296 ;;Total ram usage:        1 bytes
  8297 ;; Hardware stack levels used:    1
  8298 ;; Hardware stack levels required when called:    7
  8299 ;; This function calls:
  8300 ;;		_fifo_read
  8301 ;;		_ECANSetOperationMode
  8302 ;;		_receiveSendMultiEventCANAL
  8303 ;;		_receiveSendEventCANAL
  8304 ;;		_calcCRC
  8305 ;;		_sendVSCPDriverErrorFrame
  8306 ;;		_sendVSCPDriverAck
  8307 ;;		_receiveVSCPModeCanalMsg
  8308 ;;		_sendVSCPDriverNack
  8309 ;;		_receiveVSCPModeMultiCanalMsg
  8310 ;;		_sendVSCPModeCapabilities
  8311 ;;		_sendVSCPDriverCommandReply
  8312 ;; This function is called by:
  8313 ;;		_main
  8314 ;; This function uses a non-reentrant model
  8315 ;;
  8316                           
  8317                           	psect	text7
  8318  002A7C                     __ptext7:
  8319                           	opt stack 0
  8320  002A7C                     _doModeVscp:
  8321                           	opt stack 23
  8322                           
  8323                           ; BSR set to: 0
  8324                           ;main.c: 1095: uint8_t c;
  8325                           ;main.c: 1098: if ( !bSilent ) {
  8326                           
  8327                           ; BSR set to: 0
  8328                           ;incstack = 0
  8329                           ;incstack = 0
  8330  002A7C  0101               	movlb	1	; () banked
  8331  002A7E  6701               	tstfsz	_bSilent& (0+255),b
  8332  002A80  D00B               	goto	l10666
  8333                           
  8334                           ; BSR set to: 1
  8335                           ;main.c: 1099: if ( caps.maxCanalFrames > 1 ) {
  8336  002A82  0100               	movlb	0	; () banked
  8337  002A84  EE20  F0F6         	lfsr	2,_caps+1
  8338  002A88  0E01               	movlw	1
  8339  002A8A  64DF               	cpfsgt	indf2,c
  8340  002A8C  D003               	goto	l10664
  8341                           
  8342                           ; BSR set to: 0
  8343                           ;main.c: 1102: receiveSendMultiEventCANAL();
  8344  002A8E  EC97  F018         	call	_receiveSendMultiEventCANAL	;wreg free
  8345                           
  8346                           ;main.c: 1103: }
  8347  002A92  D002               	goto	l10666
  8348  002A94                     l10664:
  8349                           
  8350                           ; BSR set to: 0
  8351                           ;main.c: 1104: else {
  8352                           ;main.c: 1107: receiveSendEventCANAL();
  8353  002A94  ECB2  F01A         	call	_receiveSendEventCANAL	;wreg free
  8354  002A98                     l10666:
  8355                           
  8356                           ;main.c: 1108: }
  8357                           ;main.c: 1109: }
  8358                           ;main.c: 1112: (INTCONbits.GIE = 0);
  8359  002A98  9EF2               	bcf	intcon,7,c	;volatile
  8360                           
  8361                           ;main.c: 1114: if ( 1 == fifo_read(&serialInputFifo, &c, 1 ) ) {
  8362  002A9A  0100               	movlb	0	; () banked
  8363  002A9C  0E00               	movlw	high doModeVscp@c
  8364  002A9E  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  8365  002AA0  0EB7               	movlw	low doModeVscp@c
  8366  002AA2  6F60               	movwf	?_fifo_read& (0+255),b
  8367  002AA4  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  8368  002AA6  0E01               	movlw	1
  8369  002AA8  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  8370  002AAA  0E48               	movlw	_serialInputFifo& (0+255)
  8371  002AAC  EC90  F021         	call	_fifo_read
  8372  002AB0  0560               	decf	?_fifo_read& (0+255),w,b
  8373  002AB2  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  8374  002AB4  E001 D0B9          	bnz	l10810
  8375                           
  8376                           ; BSR set to: 0
  8377                           ;main.c: 1117: (INTCONbits.GIE = 1);
  8378  002AB8  8EF2               	bsf	intcon,7,c	;volatile
  8379                           
  8380                           ;main.c: 1119: if ( 0 == stateVscpDriver ) {
  8381  002ABA  67F4               	tstfsz	_stateVscpDriver& (0+255),b
  8382  002ABC  D00E               	goto	l10686
  8383                           
  8384                           ; BSR set to: 0
  8385                           ;main.c: 1120: if ( bDLE ) {
  8386  002ABE  51ED               	movf	_bDLE& (0+255),w,b
  8387  002AC0  E009               	bz	l10682
  8388                           
  8389                           ; BSR set to: 0
  8390                           ;main.c: 1121: bDLE = 0;
  8391  002AC2  6BED               	clrf	_bDLE& (0+255),b
  8392                           
  8393                           ; BSR set to: 0
  8394                           ;main.c: 1124: if ( 0x02 == c ) {
  8395  002AC4  51B7               	movf	doModeVscp@c& (0+255),w,b
  8396  002AC6  0A02               	xorlw	2
  8397  002AC8  E129               	bnz	l10720
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;main.c: 1125: stateVscpDriver = 1;
  8401  002ACA  0E01               	movlw	1
  8402  002ACC  6FF4               	movwf	_stateVscpDriver& (0+255),b
  8403                           
  8404                           ; BSR set to: 0
  8405                           ;main.c: 1126: pos = 0;
  8406  002ACE  0101               	movlb	1	; () banked
  8407  002AD0  6B02               	clrf	_pos& (0+255),b
  8408  002AD2  D024               	goto	l10720
  8409  002AD4                     l10682:
  8410                           
  8411                           ; BSR set to: 0
  8412                           ;main.c: 1129: else {
  8413                           ;main.c: 1130: bDLE = 1;
  8414  002AD4  0E01               	movlw	1
  8415  002AD6  6FED               	movwf	_bDLE& (0+255),b
  8416  002AD8  D0A9               	goto	l658
  8417  002ADA                     l10686:
  8418                           
  8419                           ; BSR set to: 0
  8420                           ;main.c: 1134: else if ( 1 == stateVscpDriver ) {
  8421  002ADA  05F4               	decf	_stateVscpDriver& (0+255),w,b
  8422  002ADC  E11F               	bnz	l10720
  8423                           
  8424                           ; BSR set to: 0
  8425                           ;main.c: 1135: if (bDLE) {
  8426  002ADE  51ED               	movf	_bDLE& (0+255),w,b
  8427  002AE0  E00F               	bz	l10704
  8428                           
  8429                           ; BSR set to: 0
  8430                           ;main.c: 1137: bDLE = 0;
  8431  002AE2  6BED               	clrf	_bDLE& (0+255),b
  8432                           
  8433                           ; BSR set to: 0
  8434                           ;main.c: 1140: if (0x03 == c) {
  8435  002AE4  51B7               	movf	doModeVscp@c& (0+255),w,b
  8436  002AE6  0A03               	xorlw	3
  8437  002AE8  E103               	bnz	l10696
  8438                           
  8439                           ; BSR set to: 0
  8440                           ;main.c: 1141: stateVscpDriver = 2;
  8441  002AEA  0E02               	movlw	2
  8442  002AEC  6FF4               	movwf	_stateVscpDriver& (0+255),b
  8443                           
  8444                           ;main.c: 1142: }
  8445  002AEE  D016               	goto	l10720
  8446  002AF0                     l10696:
  8447                           
  8448                           ; BSR set to: 0
  8449                           ;main.c: 1143: else if (0x10 == c) {
  8450  002AF0  51B7               	movf	doModeVscp@c& (0+255),w,b
  8451  002AF2  0A10               	xorlw	16
  8452  002AF4  E113               	bnz	l10720
  8453                           
  8454                           ; BSR set to: 0
  8455                           ;main.c: 1145: cmdbuf[ pos++ ] = c;
  8456  002AF6  D89B               	call	PL20	;call to abstracted procedure
  8457  002AF8  C0B7  FFDF         	movff	doModeVscp@c,indf2
  8458                           
  8459                           ; BSR set to: 0
  8460  002AFC  2B02               	incf	_pos& (0+255),f,b
  8461  002AFE  D096               	goto	l658
  8462  002B00                     l10704:
  8463                           
  8464                           ; BSR set to: 0
  8465                           ;main.c: 1149: else {
  8466                           ;main.c: 1150: if (0x10 == c) {
  8467  002B00  51B7               	movf	doModeVscp@c& (0+255),w,b
  8468  002B02  0A10               	xorlw	16
  8469  002B04  E0E7               	bz	l10682
  8470                           
  8471                           ; BSR set to: 0
  8472                           ;main.c: 1154: else {
  8473                           ;main.c: 1156: cmdbuf[ pos++ ] = c;
  8474  002B06  D893               	call	PL20	;call to abstracted procedure
  8475  002B08  C0B7  FFDF         	movff	doModeVscp@c,indf2
  8476                           
  8477                           ; BSR set to: 0
  8478  002B0C  2B02               	incf	_pos& (0+255),f,b
  8479                           
  8480                           ; BSR set to: 1
  8481                           ;main.c: 1158: if (pos >= 128u) {
  8482  002B0E  0E7F               	movlw	127
  8483  002B10  6502               	cpfsgt	_pos& (0+255),b
  8484  002B12  D08C               	goto	l658
  8485                           
  8486                           ; BSR set to: 1
  8487                           ;main.c: 1161: pos = 0;
  8488  002B14  6B02               	clrf	_pos& (0+255),b
  8489                           
  8490                           ;main.c: 1162: stateVscpDriver = 0;
  8491  002B16  0100               	movlb	0	; () banked
  8492  002B18  6BF4               	clrf	_stateVscpDriver& (0+255),b
  8493  002B1A  D088               	goto	l658
  8494  002B1C                     l10720:
  8495                           
  8496                           ;main.c: 1166: }
  8497                           ;main.c: 1167: }
  8498                           ;main.c: 1168: }
  8499                           ;main.c: 1173: if (2 == stateVscpDriver) {
  8500  002B1C  0100               	movlb	0	; () banked
  8501  002B1E  51F4               	movf	_stateVscpDriver& (0+255),w,b
  8502  002B20  0A02               	xorlw	2
  8503  002B22  E001 D082          	bnz	l10810
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;main.c: 1176: stateVscpDriver = 0;
  8507  002B26  6BF4               	clrf	_stateVscpDriver& (0+255),b
  8508                           
  8509                           ; BSR set to: 0
  8510                           ;main.c: 1189: if (calcCRC(cmdbuf, pos)) {
  8511  002B28  0E01               	movlw	high _cmdbuf
  8512  002B2A  6F6D               	movwf	(?_calcCRC+1)& (0+255),b
  8513  002B2C  0E04               	movlw	low _cmdbuf
  8514  002B2E  6F6C               	movwf	?_calcCRC& (0+255),b
  8515  002B30  C102  F06E         	movff	_pos,?_calcCRC+2
  8516  002B34  EC32  F02B         	call	_calcCRC	;wreg free
  8517  002B38  0900               	iorlw	0
  8518  002B3A  E003               	bz	l10728
  8519                           
  8520                           ; BSR set to: 0
  8521                           ;main.c: 1190: sendVSCPDriverErrorFrame(1);
  8522  002B3C  0E01               	movlw	1
  8523  002B3E  ECF7  F021         	call	_sendVSCPDriverErrorFrame
  8524  002B42                     l10728:
  8525                           
  8526                           ;main.c: 1191: }
  8527                           ;main.c: 1194: if (0 ==
  8528                           ;main.c: 1195: cmdbuf[ 0 ]) {
  8529  002B42  0101               	movlb	1	; () banked
  8530  002B44  6704               	tstfsz	_cmdbuf& (0+255),b
  8531  002B46  D003               	goto	l10732
  8532  002B48                     l10730:
  8533                           
  8534                           ;main.c: 1196: sendVSCPDriverAck();
  8535  002B48  EC5C  F023         	call	_sendVSCPDriverAck	;wreg free
  8536                           
  8537                           ;main.c: 1197: }
  8538  002B4C  D06A               	goto	l10806
  8539  002B4E                     l10732:
  8540                           
  8541                           ; BSR set to: 1
  8542                           ;main.c: 1199: else if (1 ==
  8543                           ;main.c: 1200: cmdbuf[ 0 ]) {
  8544  002B4E  0504               	decf	_cmdbuf& (0+255),w,b
  8545  002B50  E068               	bz	l10806
  8546                           
  8547                           ; BSR set to: 1
  8548                           ;main.c: 1204: else if (2 ==
  8549                           ;main.c: 1205: cmdbuf[ 0 ]) {
  8550  002B52  5104               	movf	_cmdbuf& (0+255),w,b
  8551  002B54  0A02               	xorlw	2
  8552  002B56  E107               	bnz	l10744
  8553                           
  8554                           ; BSR set to: 1
  8555                           ;main.c: 1206: if ( receiveVSCPModeCanalMsg() ) {
  8556  002B58  ECEA  F01F         	call	_receiveVSCPModeCanalMsg	;wreg free
  8557  002B5C  0900               	iorlw	0
  8558  002B5E  E1F4               	bnz	l10730
  8559  002B60                     l10742:
  8560                           
  8561                           ;main.c: 1209: else {
  8562                           ;main.c: 1210: sendVSCPDriverNack();
  8563  002B60  EC0C  F023         	call	_sendVSCPDriverNack	;wreg free
  8564  002B64  D05E               	goto	l10806
  8565  002B66                     l10744:
  8566                           
  8567                           ; BSR set to: 1
  8568                           ;main.c: 1214: else if (6 ==
  8569                           ;main.c: 1215: cmdbuf[ 0 ]) {
  8570  002B66  5104               	movf	_cmdbuf& (0+255),w,b
  8571  002B68  0A06               	xorlw	6
  8572  002B6A  E103               	bnz	l10752
  8573                           
  8574                           ; BSR set to: 1
  8575                           ;main.c: 1216: if (receiveVSCPModeMultiCanalMsg()) {
  8576  002B6C  ECE3  F02B         	call	_receiveVSCPModeMultiCanalMsg	;wreg free
  8577  002B70  D7F5               	goto	L4
  8578  002B72                     l10752:
  8579                           
  8580                           ; BSR set to: 1
  8581                           ;main.c: 1224: else if (6 ==
  8582                           ;main.c: 1225: cmdbuf[ 0 ]) {
  8583  002B72  5104               	movf	_cmdbuf& (0+255),w,b
  8584  002B74  0A06               	xorlw	6
  8585  002B76  E0F4               	bz	l10742
  8586                           
  8587                           ; BSR set to: 1
  8588                           ;main.c: 1229: else if (3 ==
  8589                           ;main.c: 1230: cmdbuf[ 0 ]) {
  8590  002B78  5104               	movf	_cmdbuf& (0+255),w,b
  8591  002B7A  0A03               	xorlw	3
  8592  002B7C  E0F1               	bz	l10742
  8593                           
  8594                           ; BSR set to: 1
  8595                           ;main.c: 1234: else if (4 ==
  8596                           ;main.c: 1235: cmdbuf[ 0 ]) {
  8597  002B7E  5104               	movf	_cmdbuf& (0+255),w,b
  8598  002B80  0A04               	xorlw	4
  8599  002B82  E0EE               	bz	l10742
  8600                           
  8601                           ; BSR set to: 1
  8602                           ;main.c: 1239: else if (8 ==
  8603                           ;main.c: 1240: cmdbuf[ 0 ]) {
  8604  002B84  5104               	movf	_cmdbuf& (0+255),w,b
  8605  002B86  0A08               	xorlw	8
  8606  002B88  E107               	bnz	l10770
  8607                           
  8608                           ; BSR set to: 1
  8609                           ;main.c: 1241: caps.maxVscpFrames = cmdbuf[ 5 ];
  8610  002B8A  C109  F0F5         	movff	_cmdbuf+5,_caps
  8611                           
  8612                           ;main.c: 1242: caps.maxCanalFrames = cmdbuf[ 5 + 1 ];
  8613  002B8E  C10A  F0F6         	movff	_cmdbuf+6,_caps+1
  8614                           
  8615                           ; BSR set to: 1
  8616                           ;main.c: 1243: sendVSCPModeCapabilities();
  8617  002B92  EC56  F022         	call	_sendVSCPModeCapabilities	;wreg free
  8618                           
  8619                           ;main.c: 1244: }
  8620  002B96  D045               	goto	l10806
  8621  002B98                     l10770:
  8622                           
  8623                           ; BSR set to: 1
  8624                           ;main.c: 1246: else if (255 ==
  8625                           ;main.c: 1247: cmdbuf[ 0 ]) {
  8626  002B98  2904               	incf	_cmdbuf& (0+255),w,b
  8627  002B9A  E140               	bnz	l10804
  8628                           
  8629                           ; BSR set to: 1
  8630                           ;main.c: 1249: if (cmdbuf[ 5 ] ==
  8631                           ;main.c: 1250: 0) {
  8632  002B9C  6709               	tstfsz	(_cmdbuf+5)& (0+255),b
  8633  002B9E  D006               	goto	l10776
  8634                           
  8635                           ; BSR set to: 1
  8636                           ;main.c: 1251: sendVSCPDriverCommandReply(0, 0);
  8637  002BA0  0E00               	movlw	0
  8638  002BA2  0100               	movlb	0	; () banked
  8639  002BA4  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8640  002BA6  EC58  F020         	call	_sendVSCPDriverCommandReply
  8641                           
  8642                           ;main.c: 1252: }
  8643  002BAA  D03B               	goto	l10806
  8644  002BAC                     l10776:
  8645                           
  8646                           ; BSR set to: 1
  8647                           ;main.c: 1254: else if (cmdbuf[ 5 ] ==
  8648                           ;main.c: 1255: 1) {
  8649  002BAC  0509               	decf	(_cmdbuf+5)& (0+255),w,b
  8650  002BAE  E109               	bnz	l10782
  8651                           
  8652                           ; BSR set to: 1
  8653                           ;main.c: 1256: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  8654  002BB0  0E00               	movlw	0
  8655  002BB2  ECA1  F02B         	call	_ECANSetOperationMode
  8656                           
  8657                           ; BSR set to: 0
  8658                           ;main.c: 1257: sendVSCPDriverCommandReply(0, 1);
  8659  002BB6  0E01               	movlw	1
  8660  002BB8  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8661  002BBA  0E00               	movlw	0
  8662  002BBC  EC58  F020         	call	_sendVSCPDriverCommandReply
  8663                           
  8664                           ;main.c: 1258: }
  8665  002BC0  D030               	goto	l10806
  8666  002BC2                     l10782:
  8667                           
  8668                           ; BSR set to: 1
  8669                           ;main.c: 1260: else if (cmdbuf[ 5 ] ==
  8670                           ;main.c: 1261: 2) {
  8671  002BC2  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8672  002BC4  0A02               	xorlw	2
  8673  002BC6  E109               	bnz	l10788
  8674                           
  8675                           ; BSR set to: 1
  8676                           ;main.c: 1262: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  8677  002BC8  0E40               	movlw	64
  8678  002BCA  ECA1  F02B         	call	_ECANSetOperationMode
  8679                           
  8680                           ; BSR set to: 0
  8681                           ;main.c: 1263: sendVSCPDriverCommandReply(0, 2);
  8682  002BCE  0E02               	movlw	2
  8683  002BD0  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8684  002BD2  0E00               	movlw	0
  8685  002BD4  EC58  F020         	call	_sendVSCPDriverCommandReply
  8686                           
  8687                           ;main.c: 1264: }
  8688  002BD8  D024               	goto	l10806
  8689  002BDA                     l10788:
  8690                           
  8691                           ; BSR set to: 1
  8692                           ;main.c: 1266: else if (cmdbuf[ 5 ] ==
  8693                           ;main.c: 1267: 3) {
  8694  002BDA  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8695  002BDC  0A03               	xorlw	3
  8696  002BDE  E109               	bnz	l10794
  8697                           
  8698                           ; BSR set to: 1
  8699                           ;main.c: 1268: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  8700  002BE0  0E60               	movlw	96
  8701  002BE2  ECA1  F02B         	call	_ECANSetOperationMode
  8702                           
  8703                           ; BSR set to: 0
  8704                           ;main.c: 1269: sendVSCPDriverCommandReply(0, 3);
  8705  002BE6  0E03               	movlw	3
  8706  002BE8  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8707  002BEA  0E00               	movlw	0
  8708  002BEC  EC58  F020         	call	_sendVSCPDriverCommandReply
  8709                           
  8710                           ;main.c: 1270: }
  8711  002BF0  D018               	goto	l10806
  8712  002BF2                     l10794:
  8713                           
  8714                           ; BSR set to: 1
  8715                           ;main.c: 1272: else if (cmdbuf[ 5 ] ==
  8716                           ;main.c: 1273: 4) {
  8717  002BF2  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8718  002BF4  0A04               	xorlw	4
  8719  002BF6  E109               	bnz	l10800
  8720                           
  8721                           ; BSR set to: 1
  8722                           ;main.c: 1274: ECANSetOperationMode(0x20);
  8723  002BF8  0E20               	movlw	32
  8724  002BFA  ECA1  F02B         	call	_ECANSetOperationMode
  8725                           
  8726                           ; BSR set to: 0
  8727                           ;main.c: 1275: sendVSCPDriverCommandReply(0, 4);
  8728  002BFE  0E04               	movlw	4
  8729  002C00  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8730  002C02  0E00               	movlw	0
  8731  002C04  EC58  F020         	call	_sendVSCPDriverCommandReply
  8732                           
  8733                           ;main.c: 1276: }
  8734  002C08  D00C               	goto	l10806
  8735  002C0A                     l10800:
  8736                           
  8737                           ; BSR set to: 1
  8738                           ;main.c: 1278: else if (cmdbuf[ 5 ] ==
  8739                           ;main.c: 1279: 5) {
  8740  002C0A  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8741  002C0C  0A05               	xorlw	5
  8742  002C0E  E109               	bnz	l10806
  8743                           
  8744                           ; BSR set to: 1
  8745                           ;main.c: 1280: sendVSCPDriverCommandReply(0, 0);
  8746  002C10  0E00               	movlw	0
  8747  002C12  0100               	movlb	0	; () banked
  8748  002C14  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8749  002C16  EC58  F020         	call	_sendVSCPDriverCommandReply
  8750  002C1A  D003               	goto	l10806
  8751  002C1C                     l10804:
  8752                           
  8753                           ; BSR set to: 1
  8754                           ;main.c: 1284: else {
  8755                           ;main.c: 1286: sendVSCPDriverErrorFrame(2);
  8756  002C1C  0E02               	movlw	2
  8757  002C1E  ECF7  F021         	call	_sendVSCPDriverErrorFrame
  8758  002C22                     l10806:
  8759                           
  8760                           ;main.c: 1287: }
  8761                           ;main.c: 1290: pos = 0;
  8762  002C22  0101               	movlb	1	; () banked
  8763  002C24  6B02               	clrf	_pos& (0+255),b
  8764                           
  8765                           ; BSR set to: 1
  8766                           ;main.c: 1291: stateVscpDriver = 0;
  8767  002C26  0100               	movlb	0	; () banked
  8768  002C28  6BF4               	clrf	_stateVscpDriver& (0+255),b
  8769  002C2A                     l10810:
  8770                           
  8771                           ; BSR set to: 0
  8772                           ;main.c: 1293: }
  8773                           ;main.c: 1295: }
  8774                           ;main.c: 1298: (INTCONbits.GIE = 1);
  8775  002C2A  8EF2               	bsf	intcon,7,c	;volatile
  8776  002C2C                     l658:
  8777  002C2C  0012               	return	
  8778  002C2E                     __end_of_doModeVscp:
  8779                           	opt stack 0
  8780  002C2E                     PL20:
  8781                           	opt stack 20
  8782  002C2E  0101               	movlb	1	; () banked
  8783  002C30  0E04               	movlw	low _cmdbuf
  8784  002C32  2502               	addwf	_pos& (0+255),w,b
  8785  002C34  6ED9               	movwf	fsr2l,c
  8786  002C36  6ADA               	clrf	fsr2h,c
  8787  002C38  0E01               	movlw	high _cmdbuf
  8788  002C3A  22DA               	addwfc	fsr2h,f,c
  8789  002C3C  0012               	return	
  8790  002C3E                     __end_ofPL20:
  8791                           	opt stack 0
  8792                           tblptru	equ	0xFF8
  8793                           tblptrh	equ	0xFF7
  8794                           tblptrl	equ	0xFF6
  8795                           tablat	equ	0xFF5
  8796                           prodh	equ	0xFF4
  8797                           prodl	equ	0xFF3
  8798                           intcon	equ	0xFF2
  8799                           indf0	equ	0xFEF
  8800                           postinc0	equ	0xFEE
  8801                           fsr0h	equ	0xFEA
  8802                           fsr0l	equ	0xFE9
  8803                           wreg	equ	0xFE8
  8804                           indf1	equ	0xFE7
  8805                           postinc1	equ	0xFE6
  8806                           postdec1	equ	0xFE5
  8807                           fsr1h	equ	0xFE2
  8808                           fsr1l	equ	0xFE1
  8809                           indf2	equ	0xFDF
  8810                           postinc2	equ	0xFDE
  8811                           postdec2	equ	0xFDD
  8812                           plusw2	equ	0xFDB
  8813                           fsr2h	equ	0xFDA
  8814                           fsr2l	equ	0xFD9
  8815                           status	equ	0xFD8
  8816                           
  8817 ;; *************** function _sendVSCPDriverCommandReply *****************
  8818 ;; Defined at:
  8819 ;;		line 1680 in file "main.c"
  8820 ;; Parameters:    Size  Location     Type
  8821 ;;  cmdReplyCode    1    wreg     unsigned char 
  8822 ;;  cmdCode         1   15[BANK0 ] unsigned char 
  8823 ;; Auto vars:     Size  Location     Type
  8824 ;;  cmdReplyCode    1   16[BANK0 ] unsigned char 
  8825 ;;  crc             1   17[BANK0 ] unsigned char 
  8826 ;; Return value:  Size  Location     Type
  8827 ;;		None               void
  8828 ;; Registers used:
  8829 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8830 ;; Tracked objects:
  8831 ;;		On entry : F/0
  8832 ;;		On exit  : 0/0
  8833 ;;		Unchanged: 0/0
  8834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8835 ;;      Params:         0       1       0       0       0       0       0
  8836 ;;      Locals:         0       2       0       0       0       0       0
  8837 ;;      Temps:          0       0       0       0       0       0       0
  8838 ;;      Totals:         0       3       0       0       0       0       0
  8839 ;;Total ram usage:        3 bytes
  8840 ;; Hardware stack levels used:    1
  8841 ;; Hardware stack levels required when called:    6
  8842 ;; This function calls:
  8843 ;;		_WriteUSART
  8844 ;;		_sendEscapedUartData
  8845 ;;		_crc8
  8846 ;; This function is called by:
  8847 ;;		_doModeVscp
  8848 ;; This function uses a non-reentrant model
  8849 ;;
  8850                           
  8851                           	psect	text8
  8852  0040B0                     __ptext8:
  8853                           	opt stack 0
  8854  0040B0                     _sendVSCPDriverCommandReply:
  8855                           	opt stack 23
  8856                           
  8857                           ;incstack = 0
  8858                           ;incstack = 0
  8859                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
  8860  0040B0  CFE8 F070          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
  8861                           
  8862                           ; BSR set to: 0
  8863                           ;main.c: 1681: uint8_t crc = 0;
  8864  0040B4  6B71               	clrf	sendVSCPDriverCommandReply@crc& (0+255),b
  8865  0040B6                     l852:
  8866                           
  8867                           ; BSR set to: 0
  8868  0040B6  A2AC               	btfss	4012,1,c	;volatile
  8869  0040B8  D7FE               	goto	l852
  8870                           
  8871                           ; BSR set to: 0
  8872                           ;main.c: 1685: WriteUSART(0x10);
  8873  0040BA  0E10               	movlw	16
  8874  0040BC  ECB9  F02B         	call	_WriteUSART
  8875  0040C0                     l855:
  8876  0040C0  A2AC               	btfss	4012,1,c	;volatile
  8877  0040C2  D7FE               	goto	l855
  8878                           
  8879                           ;main.c: 1687: WriteUSART(0x02);
  8880  0040C4  0E02               	movlw	2
  8881  0040C6  ECB9  F02B         	call	_WriteUSART
  8882  0040CA                     l858:
  8883  0040CA  A2AC               	btfss	4012,1,c	;volatile
  8884  0040CC  D7FE               	goto	l858
  8885                           
  8886                           ;main.c: 1691: WriteUSART(254);
  8887  0040CE  0EFE               	movlw	254
  8888  0040D0  ECB9  F02B         	call	_WriteUSART
  8889                           
  8890                           ;main.c: 1692: crc8(&crc, 254);
  8891  0040D4  0100               	movlb	0	; () banked
  8892  0040D6  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8893  0040D8  6F68               	movwf	(?_crc8+1)& (0+255),b
  8894  0040DA  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8895  0040DC  6F67               	movwf	?_crc8& (0+255),b
  8896  0040DE  0EFE               	movlw	254
  8897  0040E0  6F69               	movwf	(?_crc8+2)& (0+255),b
  8898  0040E2  ECE6  F02A         	call	_crc8	;wreg free
  8899  0040E6                     l861:
  8900                           
  8901                           ; BSR set to: 0
  8902  0040E6  A2AC               	btfss	4012,1,c	;volatile
  8903  0040E8  D7FE               	goto	l861
  8904                           
  8905                           ; BSR set to: 0
  8906                           ;main.c: 1696: WriteUSART(0);
  8907  0040EA  0E00               	movlw	0
  8908  0040EC  ECB9  F02B         	call	_WriteUSART
  8909                           
  8910                           ;main.c: 1697: crc8(&crc, 0);
  8911  0040F0  D841               	call	PL98	;call to abstracted procedure
  8912  0040F2  ECE6  F02A         	call	_crc8	;wreg free
  8913                           
  8914                           ; BSR set to: 0
  8915                           ;main.c: 1700: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  8916  0040F6  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8917  0040F8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  8918  0040FA  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8919  0040FC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  8920  0040FE  0101               	movlb	1	; () banked
  8921  004100  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  8922  004102  EC60  F028         	call	_sendEscapedUartData
  8923  004106                     l864:
  8924                           
  8925                           ; BSR set to: 0
  8926  004106  A2AC               	btfss	4012,1,c	;volatile
  8927  004108  D7FE               	goto	l864
  8928                           
  8929                           ; BSR set to: 0
  8930                           ;main.c: 1704: WriteUSART(0);
  8931  00410A  0E00               	movlw	0
  8932  00410C  ECB9  F02B         	call	_WriteUSART
  8933                           
  8934                           ;main.c: 1705: crc8(&crc, 0);
  8935  004110  D831               	call	PL98	;call to abstracted procedure
  8936  004112  ECE6  F02A         	call	_crc8	;wreg free
  8937  004116                     l867:
  8938                           
  8939                           ; BSR set to: 0
  8940  004116  A2AC               	btfss	4012,1,c	;volatile
  8941  004118  D7FE               	goto	l867
  8942                           
  8943                           ; BSR set to: 0
  8944                           ;main.c: 1707: WriteUSART(2);
  8945  00411A  0E02               	movlw	2
  8946  00411C  ECB9  F02B         	call	_WriteUSART
  8947                           
  8948                           ;main.c: 1708: crc8(&crc, 2);
  8949  004120  0100               	movlb	0	; () banked
  8950  004122  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8951  004124  6F68               	movwf	(?_crc8+1)& (0+255),b
  8952  004126  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8953  004128  6F67               	movwf	?_crc8& (0+255),b
  8954  00412A  0E02               	movlw	2
  8955  00412C  6F69               	movwf	(?_crc8+2)& (0+255),b
  8956  00412E  ECE6  F02A         	call	_crc8	;wreg free
  8957  004132                     l870:
  8958                           
  8959                           ; BSR set to: 0
  8960  004132  A2AC               	btfss	4012,1,c	;volatile
  8961  004134  D7FE               	goto	l870
  8962                           
  8963                           ; BSR set to: 0
  8964                           ;main.c: 1712: sendEscapedUartData(cmdReplyCode, &crc);
  8965  004136  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8966  004138  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  8967  00413A  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8968  00413C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  8969  00413E  5170               	movf	sendVSCPDriverCommandReply@cmdReplyCode& (0+255),w,b
  8970  004140  EC60  F028         	call	_sendEscapedUartData
  8971  004144                     l873:
  8972                           
  8973                           ; BSR set to: 0
  8974  004144  A2AC               	btfss	4012,1,c	;volatile
  8975  004146  D7FE               	goto	l873
  8976                           
  8977                           ; BSR set to: 0
  8978                           ;main.c: 1716: sendEscapedUartData(cmdCode, &crc);
  8979  004148  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8980  00414A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  8981  00414C  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8982  00414E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  8983  004150  516F               	movf	sendVSCPDriverCommandReply@cmdCode& (0+255),w,b
  8984  004152  EC60  F028         	call	_sendEscapedUartData
  8985                           
  8986                           ;main.c: 1719: sendEscapedUartData(crc, (0));
  8987  004156  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  8988  004158  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  8989  00415A  5171               	movf	sendVSCPDriverCommandReply@crc& (0+255),w,b
  8990  00415C  EC60  F028         	call	_sendEscapedUartData
  8991  004160                     l876:
  8992                           
  8993                           ; BSR set to: 0
  8994  004160  A2AC               	btfss	4012,1,c	;volatile
  8995  004162  D7FE               	goto	l876
  8996                           
  8997                           ; BSR set to: 0
  8998                           ;main.c: 1723: WriteUSART(0x10);
  8999  004164  0E10               	movlw	16
  9000  004166  ECB9  F02B         	call	_WriteUSART
  9001  00416A                     l879:
  9002  00416A  A2AC               	btfss	4012,1,c	;volatile
  9003  00416C  D7FE               	goto	l879
  9004                           
  9005                           ;main.c: 1725: WriteUSART(0x03);
  9006  00416E  0E03               	movlw	3
  9007  004170  EFB9  F02B         	goto	_WriteUSART
  9008  004174                     __end_of_sendVSCPDriverCommandReply:
  9009                           	opt stack 0
  9010  004174                     PL98:
  9011                           	opt stack 23
  9012  004174  0100               	movlb	0	; () banked
  9013  004176  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9014  004178  6F68               	movwf	(?_crc8+1)& (0+255),b
  9015  00417A  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9016  00417C  6F67               	movwf	?_crc8& (0+255),b
  9017  00417E  6B69               	clrf	(?_crc8+2)& (0+255),b
  9018  004180  0C00               	retlw	0
  9019  004182                     __end_ofPL98:
  9020                           	opt stack 0
  9021                           tblptru	equ	0xFF8
  9022                           tblptrh	equ	0xFF7
  9023                           tblptrl	equ	0xFF6
  9024                           tablat	equ	0xFF5
  9025                           prodh	equ	0xFF4
  9026                           prodl	equ	0xFF3
  9027                           intcon	equ	0xFF2
  9028                           indf0	equ	0xFEF
  9029                           postinc0	equ	0xFEE
  9030                           fsr0h	equ	0xFEA
  9031                           fsr0l	equ	0xFE9
  9032                           wreg	equ	0xFE8
  9033                           indf1	equ	0xFE7
  9034                           postinc1	equ	0xFE6
  9035                           postdec1	equ	0xFE5
  9036                           fsr1h	equ	0xFE2
  9037                           fsr1l	equ	0xFE1
  9038                           indf2	equ	0xFDF
  9039                           postinc2	equ	0xFDE
  9040                           postdec2	equ	0xFDD
  9041                           plusw2	equ	0xFDB
  9042                           fsr2h	equ	0xFDA
  9043                           fsr2l	equ	0xFD9
  9044                           status	equ	0xFD8
  9045                           
  9046 ;; *************** function _sendVSCPModeCapabilities *****************
  9047 ;; Defined at:
  9048 ;;		line 2049 in file "main.c"
  9049 ;; Parameters:    Size  Location     Type
  9050 ;;		None
  9051 ;; Auto vars:     Size  Location     Type
  9052 ;;  crc             1   15[BANK0 ] unsigned char 
  9053 ;; Return value:  Size  Location     Type
  9054 ;;                  1    wreg      enum E15660
  9055 ;; Registers used:
  9056 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9057 ;; Tracked objects:
  9058 ;;		On entry : F/1
  9059 ;;		On exit  : 0/0
  9060 ;;		Unchanged: 0/0
  9061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9062 ;;      Params:         0       0       0       0       0       0       0
  9063 ;;      Locals:         0       1       0       0       0       0       0
  9064 ;;      Temps:          0       0       0       0       0       0       0
  9065 ;;      Totals:         0       1       0       0       0       0       0
  9066 ;;Total ram usage:        1 bytes
  9067 ;; Hardware stack levels used:    1
  9068 ;; Hardware stack levels required when called:    6
  9069 ;; This function calls:
  9070 ;;		_WriteUSART
  9071 ;;		_sendEscapedUartData
  9072 ;;		_crc8
  9073 ;; This function is called by:
  9074 ;;		_doModeVscp
  9075 ;; This function uses a non-reentrant model
  9076 ;;
  9077                           
  9078                           	psect	text9
  9079  0044AC                     __ptext9:
  9080                           	opt stack 0
  9081  0044AC                     _sendVSCPModeCapabilities:
  9082                           	opt stack 23
  9083                           
  9084                           ; BSR set to: 1
  9085                           ;main.c: 2050: uint8_t crc = 0;
  9086                           
  9087                           ;incstack = 0
  9088                           ;incstack = 0
  9089  0044AC  0100               	movlb	0	; () banked
  9090  0044AE  6B6F               	clrf	sendVSCPModeCapabilities@crc& (0+255),b
  9091  0044B0                     l1001:
  9092  0044B0  A2AC               	btfss	4012,1,c	;volatile
  9093  0044B2  D7FE               	goto	l1001
  9094                           
  9095                           ;main.c: 2054: WriteUSART(0x10);
  9096  0044B4  0E10               	movlw	16
  9097  0044B6  ECB9  F02B         	call	_WriteUSART
  9098  0044BA                     l1004:
  9099  0044BA  A2AC               	btfss	4012,1,c	;volatile
  9100  0044BC  D7FE               	goto	l1004
  9101                           
  9102                           ;main.c: 2056: WriteUSART(0x02);
  9103  0044BE  0E02               	movlw	2
  9104  0044C0  ECB9  F02B         	call	_WriteUSART
  9105  0044C4                     l1007:
  9106  0044C4  A2AC               	btfss	4012,1,c	;volatile
  9107  0044C6  D7FE               	goto	l1007
  9108                           
  9109                           ;main.c: 2060: WriteUSART(9);
  9110  0044C8  0E09               	movlw	9
  9111  0044CA  ECB9  F02B         	call	_WriteUSART
  9112                           
  9113                           ;main.c: 2061: crc8(&crc, 9);
  9114  0044CE  0100               	movlb	0	; () banked
  9115  0044D0  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9116  0044D2  6F68               	movwf	(?_crc8+1)& (0+255),b
  9117  0044D4  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9118  0044D6  6F67               	movwf	?_crc8& (0+255),b
  9119  0044D8  0E09               	movlw	9
  9120  0044DA  6F69               	movwf	(?_crc8+2)& (0+255),b
  9121  0044DC  ECE6  F02A         	call	_crc8	;wreg free
  9122  0044E0                     l1010:
  9123  0044E0  A2AC               	btfss	4012,1,c	;volatile
  9124  0044E2  D7FE               	goto	l1010
  9125                           
  9126                           ;main.c: 2065: WriteUSART(0);
  9127  0044E4  0E00               	movlw	0
  9128  0044E6  ECB9  F02B         	call	_WriteUSART
  9129                           
  9130                           ;main.c: 2066: crc8(&crc, 0);
  9131  0044EA  0100               	movlb	0	; () banked
  9132  0044EC  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9133  0044EE  6F68               	movwf	(?_crc8+1)& (0+255),b
  9134  0044F0  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9135  0044F2  6F67               	movwf	?_crc8& (0+255),b
  9136  0044F4  0E00               	movlw	0
  9137  0044F6  6B69               	clrf	(?_crc8+2)& (0+255),b
  9138  0044F8  ECE6  F02A         	call	_crc8	;wreg free
  9139                           
  9140                           ; BSR set to: 0
  9141                           ;main.c: 2069: sendEscapedUartData(sequencyno, &crc );
  9142  0044FC  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9143  0044FE  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9144  004500  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9145  004502  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9146  004504  51F3               	movf	_sequencyno& (0+255),w,b
  9147  004506  EC60  F028         	call	_sendEscapedUartData
  9148                           
  9149                           ; BSR set to: 0
  9150                           ;main.c: 2070: sequencyno++;
  9151  00450A  2BF3               	incf	_sequencyno& (0+255),f,b
  9152                           
  9153                           ; BSR set to: 0
  9154                           ;main.c: 2073: sendEscapedUartData( 0, &crc );
  9155  00450C  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9156  00450E  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9157  004510  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9158  004512  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9159  004514  0E00               	movlw	0
  9160  004516  EC60  F028         	call	_sendEscapedUartData
  9161                           
  9162                           ; BSR set to: 0
  9163                           ;main.c: 2074: sendEscapedUartData( 2, &crc );
  9164  00451A  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9165  00451C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9166  00451E  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9167  004520  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9168  004522  0E02               	movlw	2
  9169  004524  EC60  F028         	call	_sendEscapedUartData
  9170                           
  9171                           ; BSR set to: 0
  9172                           ;main.c: 2077: sendEscapedUartData( 1, &crc );
  9173  004528  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9174  00452A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9175  00452C  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9176  00452E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9177  004530  0E01               	movlw	1
  9178  004532  EC60  F028         	call	_sendEscapedUartData
  9179                           
  9180                           ; BSR set to: 0
  9181                           ;main.c: 2078: sendEscapedUartData( 0, &crc );
  9182  004536  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9183  004538  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9184  00453A  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9185  00453C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9186  00453E  0E00               	movlw	0
  9187  004540  EC60  F028         	call	_sendEscapedUartData
  9188                           
  9189                           ; BSR set to: 0
  9190                           ;main.c: 2081: sendEscapedUartData(crc, (0));
  9191  004544  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9192  004546  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9193  004548  516F               	movf	sendVSCPModeCapabilities@crc& (0+255),w,b
  9194  00454A  EC60  F028         	call	_sendEscapedUartData
  9195  00454E                     l1013:
  9196  00454E  A2AC               	btfss	4012,1,c	;volatile
  9197  004550  D7FE               	goto	l1013
  9198                           
  9199                           ;main.c: 2085: WriteUSART(0x10);
  9200  004552  0E10               	movlw	16
  9201  004554  ECB9  F02B         	call	_WriteUSART
  9202  004558                     l1016:
  9203  004558  A2AC               	btfss	4012,1,c	;volatile
  9204  00455A  D7FE               	goto	l1016
  9205                           
  9206                           ;main.c: 2087: WriteUSART(0x03);
  9207  00455C  0E03               	movlw	3
  9208  00455E  EFB9  F02B         	goto	_WriteUSART
  9209  004562                     __end_of_sendVSCPModeCapabilities:
  9210                           	opt stack 0
  9211                           tblptru	equ	0xFF8
  9212                           tblptrh	equ	0xFF7
  9213                           tblptrl	equ	0xFF6
  9214                           tablat	equ	0xFF5
  9215                           prodh	equ	0xFF4
  9216                           prodl	equ	0xFF3
  9217                           intcon	equ	0xFF2
  9218                           indf0	equ	0xFEF
  9219                           postinc0	equ	0xFEE
  9220                           fsr0h	equ	0xFEA
  9221                           fsr0l	equ	0xFE9
  9222                           wreg	equ	0xFE8
  9223                           indf1	equ	0xFE7
  9224                           postinc1	equ	0xFE6
  9225                           postdec1	equ	0xFE5
  9226                           fsr1h	equ	0xFE2
  9227                           fsr1l	equ	0xFE1
  9228                           indf2	equ	0xFDF
  9229                           postinc2	equ	0xFDE
  9230                           postdec2	equ	0xFDD
  9231                           plusw2	equ	0xFDB
  9232                           fsr2h	equ	0xFDA
  9233                           fsr2l	equ	0xFD9
  9234                           status	equ	0xFD8
  9235                           
  9236 ;; *************** function _receiveVSCPModeMultiCanalMsg *****************
  9237 ;; Defined at:
  9238 ;;		line 2180 in file "main.c"
  9239 ;; Parameters:    Size  Location     Type
  9240 ;;		None
  9241 ;; Auto vars:     Size  Location     Type
  9242 ;;		None
  9243 ;; Return value:  Size  Location     Type
  9244 ;;                  1    wreg      enum E15660
  9245 ;; Registers used:
  9246 ;;		wreg
  9247 ;; Tracked objects:
  9248 ;;		On entry : F/1
  9249 ;;		On exit  : F/1
  9250 ;;		Unchanged: F/0
  9251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9252 ;;      Params:         0       0       0       0       0       0       0
  9253 ;;      Locals:         0       0       0       0       0       0       0
  9254 ;;      Temps:          0       0       0       0       0       0       0
  9255 ;;      Totals:         0       0       0       0       0       0       0
  9256 ;;Total ram usage:        0 bytes
  9257 ;; Hardware stack levels used:    1
  9258 ;; Hardware stack levels required when called:    3
  9259 ;; This function calls:
  9260 ;;		Nothing
  9261 ;; This function is called by:
  9262 ;;		_doModeVscp
  9263 ;; This function uses a non-reentrant model
  9264 ;;
  9265                           
  9266                           	psect	text10
  9267  0057C6                     __ptext10:
  9268                           	opt stack 0
  9269  0057C6                     _receiveVSCPModeMultiCanalMsg:
  9270                           	opt stack 26
  9271                           
  9272                           ; BSR set to: 1
  9273                           
  9274                           ; BSR set to: 1
  9275                           ;main.c: 2182: return 0;
  9276                           
  9277                           ;incstack = 0
  9278                           ;incstack = 0
  9279  0057C6  0C00               	retlw	0
  9280  0057C8                     __end_of_receiveVSCPModeMultiCanalMsg:
  9281                           	opt stack 0
  9282                           tblptru	equ	0xFF8
  9283                           tblptrh	equ	0xFF7
  9284                           tblptrl	equ	0xFF6
  9285                           tablat	equ	0xFF5
  9286                           prodh	equ	0xFF4
  9287                           prodl	equ	0xFF3
  9288                           intcon	equ	0xFF2
  9289                           indf0	equ	0xFEF
  9290                           postinc0	equ	0xFEE
  9291                           fsr0h	equ	0xFEA
  9292                           fsr0l	equ	0xFE9
  9293                           wreg	equ	0xFE8
  9294                           indf1	equ	0xFE7
  9295                           postinc1	equ	0xFE6
  9296                           postdec1	equ	0xFE5
  9297                           fsr1h	equ	0xFE2
  9298                           fsr1l	equ	0xFE1
  9299                           indf2	equ	0xFDF
  9300                           postinc2	equ	0xFDE
  9301                           postdec2	equ	0xFDD
  9302                           plusw2	equ	0xFDB
  9303                           fsr2h	equ	0xFDA
  9304                           fsr2l	equ	0xFD9
  9305                           status	equ	0xFD8
  9306                           
  9307 ;; *************** function _sendVSCPDriverNack *****************
  9308 ;; Defined at:
  9309 ;;		line 1635 in file "main.c"
  9310 ;; Parameters:    Size  Location     Type
  9311 ;;		None
  9312 ;; Auto vars:     Size  Location     Type
  9313 ;;  crc             1   15[BANK0 ] unsigned char 
  9314 ;; Return value:  Size  Location     Type
  9315 ;;		None               void
  9316 ;; Registers used:
  9317 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9318 ;; Tracked objects:
  9319 ;;		On entry : E/0
  9320 ;;		On exit  : 0/0
  9321 ;;		Unchanged: 0/0
  9322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9323 ;;      Params:         0       0       0       0       0       0       0
  9324 ;;      Locals:         0       1       0       0       0       0       0
  9325 ;;      Temps:          0       0       0       0       0       0       0
  9326 ;;      Totals:         0       1       0       0       0       0       0
  9327 ;;Total ram usage:        1 bytes
  9328 ;; Hardware stack levels used:    1
  9329 ;; Hardware stack levels required when called:    6
  9330 ;; This function calls:
  9331 ;;		_WriteUSART
  9332 ;;		_sendEscapedUartData
  9333 ;;		_crc8
  9334 ;; This function is called by:
  9335 ;;		_doModeVscp
  9336 ;; This function uses a non-reentrant model
  9337 ;;
  9338                           
  9339                           	psect	text11
  9340  004618                     __ptext11:
  9341                           	opt stack 0
  9342  004618                     _sendVSCPDriverNack:
  9343                           	opt stack 23
  9344                           
  9345                           ;main.c: 1636: uint8_t crc = 0;
  9346                           
  9347                           ; BSR set to: 1
  9348                           ;incstack = 0
  9349                           ;incstack = 0
  9350  004618  0100               	movlb	0	; () banked
  9351  00461A  6B6F               	clrf	sendVSCPDriverNack@crc& (0+255),b
  9352  00461C                     l825:
  9353  00461C  A2AC               	btfss	4012,1,c	;volatile
  9354  00461E  D7FE               	goto	l825
  9355                           
  9356                           ;main.c: 1640: WriteUSART(0x10);
  9357  004620  0E10               	movlw	16
  9358  004622  ECB9  F02B         	call	_WriteUSART
  9359  004626                     l828:
  9360  004626  A2AC               	btfss	4012,1,c	;volatile
  9361  004628  D7FE               	goto	l828
  9362                           
  9363                           ;main.c: 1642: WriteUSART(0x02);
  9364  00462A  0E02               	movlw	2
  9365  00462C  ECB9  F02B         	call	_WriteUSART
  9366  004630                     l831:
  9367  004630  A2AC               	btfss	4012,1,c	;volatile
  9368  004632  D7FE               	goto	l831
  9369                           
  9370                           ;main.c: 1646: WriteUSART(252);
  9371  004634  0EFC               	movlw	252
  9372  004636  ECB9  F02B         	call	_WriteUSART
  9373                           
  9374                           ;main.c: 1647: crc8(&crc, 252);
  9375  00463A  0100               	movlb	0	; () banked
  9376  00463C  0E00               	movlw	high sendVSCPDriverNack@crc
  9377  00463E  6F68               	movwf	(?_crc8+1)& (0+255),b
  9378  004640  0E6F               	movlw	low sendVSCPDriverNack@crc
  9379  004642  6F67               	movwf	?_crc8& (0+255),b
  9380  004644  0EFC               	movlw	252
  9381  004646  6F69               	movwf	(?_crc8+2)& (0+255),b
  9382  004648  ECE6  F02A         	call	_crc8	;wreg free
  9383  00464C                     l834:
  9384  00464C  A2AC               	btfss	4012,1,c	;volatile
  9385  00464E  D7FE               	goto	l834
  9386                           
  9387                           ;main.c: 1651: WriteUSART(0);
  9388  004650  0E00               	movlw	0
  9389  004652  ECB9  F02B         	call	_WriteUSART
  9390                           
  9391                           ;main.c: 1652: crc8(&crc, 0);
  9392  004656  D829               	call	PL48	;call to abstracted procedure
  9393  004658  ECE6  F02A         	call	_crc8	;wreg free
  9394                           
  9395                           ; BSR set to: 0
  9396                           ;main.c: 1655: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9397  00465C  0E00               	movlw	high sendVSCPDriverNack@crc
  9398  00465E  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9399  004660  0E6F               	movlw	low sendVSCPDriverNack@crc
  9400  004662  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9401  004664  0101               	movlb	1	; () banked
  9402  004666  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  9403  004668  EC60  F028         	call	_sendEscapedUartData
  9404  00466C                     l837:
  9405  00466C  A2AC               	btfss	4012,1,c	;volatile
  9406  00466E  D7FE               	goto	l837
  9407                           
  9408                           ;main.c: 1659: WriteUSART(0);
  9409  004670  0E00               	movlw	0
  9410  004672  ECB9  F02B         	call	_WriteUSART
  9411                           
  9412                           ;main.c: 1660: crc8(&crc, 0);
  9413  004676  D819               	call	PL48	;call to abstracted procedure
  9414  004678  ECE6  F02A         	call	_crc8	;wreg free
  9415  00467C                     l840:
  9416  00467C  A2AC               	btfss	4012,1,c	;volatile
  9417  00467E  D7FE               	goto	l840
  9418                           
  9419                           ;main.c: 1662: WriteUSART(0);
  9420  004680  0E00               	movlw	0
  9421  004682  ECB9  F02B         	call	_WriteUSART
  9422                           
  9423                           ;main.c: 1663: crc8(&crc, 0);
  9424  004686  D811               	call	PL48	;call to abstracted procedure
  9425  004688  ECE6  F02A         	call	_crc8	;wreg free
  9426                           
  9427                           ; BSR set to: 0
  9428                           ;main.c: 1666: sendEscapedUartData(crc, (0));
  9429  00468C  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9430  00468E  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9431  004690  516F               	movf	sendVSCPDriverNack@crc& (0+255),w,b
  9432  004692  EC60  F028         	call	_sendEscapedUartData
  9433  004696                     l843:
  9434  004696  A2AC               	btfss	4012,1,c	;volatile
  9435  004698  D7FE               	goto	l843
  9436                           
  9437                           ;main.c: 1670: WriteUSART(0x10);
  9438  00469A  0E10               	movlw	16
  9439  00469C  ECB9  F02B         	call	_WriteUSART
  9440  0046A0                     l846:
  9441  0046A0  A2AC               	btfss	4012,1,c	;volatile
  9442  0046A2  D7FE               	goto	l846
  9443                           
  9444                           ;main.c: 1672: WriteUSART(0x03);
  9445  0046A4  0E03               	movlw	3
  9446  0046A6  EFB9  F02B         	goto	_WriteUSART
  9447  0046AA                     __end_of_sendVSCPDriverNack:
  9448                           	opt stack 0
  9449  0046AA                     PL48:
  9450                           	opt stack 23
  9451  0046AA  0100               	movlb	0	; () banked
  9452  0046AC  0E00               	movlw	high sendVSCPDriverNack@crc
  9453  0046AE  6F68               	movwf	(?_crc8+1)& (0+255),b
  9454  0046B0  0E6F               	movlw	low sendVSCPDriverNack@crc
  9455  0046B2  6F67               	movwf	?_crc8& (0+255),b
  9456  0046B4  6B69               	clrf	(?_crc8+2)& (0+255),b
  9457  0046B6  0C00               	retlw	0
  9458  0046B8                     __end_ofPL48:
  9459                           	opt stack 0
  9460                           tblptru	equ	0xFF8
  9461                           tblptrh	equ	0xFF7
  9462                           tblptrl	equ	0xFF6
  9463                           tablat	equ	0xFF5
  9464                           prodh	equ	0xFF4
  9465                           prodl	equ	0xFF3
  9466                           intcon	equ	0xFF2
  9467                           indf0	equ	0xFEF
  9468                           postinc0	equ	0xFEE
  9469                           fsr0h	equ	0xFEA
  9470                           fsr0l	equ	0xFE9
  9471                           wreg	equ	0xFE8
  9472                           indf1	equ	0xFE7
  9473                           postinc1	equ	0xFE6
  9474                           postdec1	equ	0xFE5
  9475                           fsr1h	equ	0xFE2
  9476                           fsr1l	equ	0xFE1
  9477                           indf2	equ	0xFDF
  9478                           postinc2	equ	0xFDE
  9479                           postdec2	equ	0xFDD
  9480                           plusw2	equ	0xFDB
  9481                           fsr2h	equ	0xFDA
  9482                           fsr2l	equ	0xFD9
  9483                           status	equ	0xFD8
  9484                           
  9485 ;; *************** function _receiveVSCPModeCanalMsg *****************
  9486 ;; Defined at:
  9487 ;;		line 2159 in file "main.c"
  9488 ;; Parameters:    Size  Location     Type
  9489 ;;		None
  9490 ;; Auto vars:     Size  Location     Type
  9491 ;;  data            8   74[BANK0 ] unsigned char [8]
  9492 ;;  id              4   82[BANK0 ] unsigned long 
  9493 ;;  dlc             1   86[BANK0 ] unsigned char 
  9494 ;; Return value:  Size  Location     Type
  9495 ;;                  1    wreg      enum E15660
  9496 ;; Registers used:
  9497 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9498 ;; Tracked objects:
  9499 ;;		On entry : F/1
  9500 ;;		On exit  : F/0
  9501 ;;		Unchanged: 0/0
  9502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9503 ;;      Params:         0       0       0       0       0       0       0
  9504 ;;      Locals:         0      13       0       0       0       0       0
  9505 ;;      Temps:          0      20       0       0       0       0       0
  9506 ;;      Totals:         0      33       0       0       0       0       0
  9507 ;;Total ram usage:       33 bytes
  9508 ;; Hardware stack levels used:    1
  9509 ;; Hardware stack levels required when called:    6
  9510 ;; This function calls:
  9511 ;;		_memcpy
  9512 ;;		_sendCANFrame
  9513 ;; This function is called by:
  9514 ;;		_doModeVscp
  9515 ;; This function uses a non-reentrant model
  9516 ;;
  9517                           
  9518                           	psect	text12
  9519  003FD4                     __ptext12:
  9520                           	opt stack 0
  9521  003FD4                     _receiveVSCPModeCanalMsg:
  9522                           	opt stack 23
  9523                           
  9524                           ; BSR set to: 1
  9525                           ;main.c: 2160: uint32_t id;
  9526                           ;main.c: 2161: uint8_t dlc;
  9527                           ;main.c: 2162: uint8_t data[8];
  9528                           ;main.c: 2164: id = ((uint32_t) cmdbuf[5] << 26) |
  9529                           ;main.c: 2165: ((uint32_t) cmdbuf[5 + 1] << 16) |
  9530                           ;main.c: 2166: ((uint32_t) cmdbuf[5 + 2] << 8) |
  9531                           ;main.c: 2167: cmdbuf[5 + 3];
  9532                           
  9533                           ;incstack = 0
  9534                           ;incstack = 0
  9535  003FD4  C10B  F096         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
  9536  003FD8  0100               	movlb	0	; () banked
  9537  003FDA  6B97               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9538  003FDC  6B98               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
  9539  003FDE  6B99               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
  9540  003FE0  C098  F099         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
  9541  003FE4  C097  F098         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
  9542  003FE8  C096  F097         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
  9543  003FEC  6B96               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
  9544  003FEE  C10A  F09A         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
  9545  003FF2  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9546  003FF4  6B9C               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
  9547  003FF6  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
  9548  003FF8  C09B  F09D         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
  9549  003FFC  C09A  F09C         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
  9550  004000  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9551  004002  6B9A               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
  9552  004004  C109  F09E         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
  9553  004008  6B9F               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
  9554  00400A  6BA0               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
  9555  00400C  6BA1               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
  9556  00400E  0E1A               	movlw	26
  9557  004010                     u15765:
  9558  004010  90D8               	bcf	status,0,c
  9559  004012  379E               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
  9560  004014  379F               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
  9561  004016  37A0               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
  9562  004018  37A1               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
  9563  00401A  2EE8               	decfsz	wreg,f,c
  9564  00401C  D7F9               	goto	u15765
  9565  00401E  519A               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
  9566  004020  119E               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
  9567  004022  6FA2               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
  9568  004024  519B               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
  9569  004026  119F               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
  9570  004028  6FA3               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
  9571  00402A  519C               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
  9572  00402C  11A0               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
  9573  00402E  6FA4               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
  9574  004030  519D               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
  9575  004032  11A1               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
  9576  004034  6FA5               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
  9577  004036  5196               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
  9578  004038  11A2               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
  9579  00403A  6FA6               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
  9580  00403C  5197               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
  9581  00403E  11A3               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
  9582  004040  6FA7               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
  9583  004042  5198               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
  9584  004044  11A4               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
  9585  004046  6FA8               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
  9586  004048  5199               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
  9587  00404A  11A5               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
  9588  00404C  6FA9               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
  9589  00404E  0101               	movlb	1	; () banked
  9590  004050  510C               	movf	(_cmdbuf+8)& (0+255),w,b
  9591  004052  0100               	movlb	0	; () banked
  9592  004054  11A6               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
  9593  004056  6FB2               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
  9594  004058  51A7               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
  9595  00405A  6FB3               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
  9596  00405C  51A8               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
  9597  00405E  6FB4               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
  9598  004060  51A9               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
  9599  004062  6FB5               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
  9600                           
  9601                           ;main.c: 2168: dlc = cmdbuf[4] - 4;
  9602  004064  0101               	movlb	1	; () banked
  9603  004066  5108               	movf	(_cmdbuf+4)& (0+255),w,b
  9604  004068  0FFC               	addlw	252
  9605  00406A  0100               	movlb	0	; () banked
  9606  00406C  6FB6               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9607                           
  9608                           ; BSR set to: 0
  9609                           ;main.c: 2169: memcpy(data, cmdbuf + 5 + 4, dlc);
  9610  00406E  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9611  004070  6F61               	movwf	(?_memcpy+1)& (0+255),b
  9612  004072  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9613  004074  6F60               	movwf	?_memcpy& (0+255),b
  9614  004076  0E0D               	movlw	low (_cmdbuf+9)
  9615  004078  6F96               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
  9616  00407A  0E01               	movlw	high (_cmdbuf+9)
  9617  00407C  6F97               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9618  00407E  C096  F062         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
  9619  004082  C097  F063         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
  9620  004086  C0B6  F064         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
  9621  00408A  6B65               	clrf	(?_memcpy+5)& (0+255),b
  9622  00408C  ECF0  F029         	call	_memcpy	;wreg free
  9623                           
  9624                           ; BSR set to: 0
  9625                           ;main.c: 2171: return sendCANFrame(id, dlc, data);
  9626  004090  C0B2  F08F         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
  9627  004094  C0B3  F090         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
  9628  004098  C0B4  F091         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
  9629  00409C  C0B5  F092         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
  9630  0040A0  C0B6  F093         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
  9631  0040A4  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9632  0040A6  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  9633  0040A8  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9634  0040AA  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  9635  0040AC  EFAE  F02A         	goto	_sendCANFrame	;wreg free
  9636  0040B0                     __end_of_receiveVSCPModeCanalMsg:
  9637                           	opt stack 0
  9638                           tblptru	equ	0xFF8
  9639                           tblptrh	equ	0xFF7
  9640                           tblptrl	equ	0xFF6
  9641                           tablat	equ	0xFF5
  9642                           prodh	equ	0xFF4
  9643                           prodl	equ	0xFF3
  9644                           intcon	equ	0xFF2
  9645                           indf0	equ	0xFEF
  9646                           postinc0	equ	0xFEE
  9647                           fsr0h	equ	0xFEA
  9648                           fsr0l	equ	0xFE9
  9649                           wreg	equ	0xFE8
  9650                           indf1	equ	0xFE7
  9651                           postinc1	equ	0xFE6
  9652                           postdec1	equ	0xFE5
  9653                           fsr1h	equ	0xFE2
  9654                           fsr1l	equ	0xFE1
  9655                           indf2	equ	0xFDF
  9656                           postinc2	equ	0xFDE
  9657                           postdec2	equ	0xFDD
  9658                           plusw2	equ	0xFDB
  9659                           fsr2h	equ	0xFDA
  9660                           fsr2l	equ	0xFD9
  9661                           status	equ	0xFD8
  9662                           
  9663 ;; *************** function _memcpy *****************
  9664 ;; Defined at:
  9665 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
  9666 ;; Parameters:    Size  Location     Type
  9667 ;;  d1              2    0[BANK0 ] PTR void 
  9668 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9669 ;;  s1              2    2[BANK0 ] PTR const void 
  9670 ;;		 -> vscpData(8), cmdbuf(80), 
  9671 ;;  n               2    4[BANK0 ] unsigned int 
  9672 ;; Auto vars:     Size  Location     Type
  9673 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  9674 ;;		 -> vscpData(8), cmdbuf(80), 
  9675 ;;  d               2    6[BANK0 ] PTR unsigned char 
  9676 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9677 ;; Return value:  Size  Location     Type
  9678 ;;                  2    0[BANK0 ] PTR void 
  9679 ;; Registers used:
  9680 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9681 ;; Tracked objects:
  9682 ;;		On entry : F/0
  9683 ;;		On exit  : F/0
  9684 ;;		Unchanged: 0/0
  9685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9686 ;;      Params:         0       6       0       0       0       0       0
  9687 ;;      Locals:         0       4       0       0       0       0       0
  9688 ;;      Temps:          0       0       0       0       0       0       0
  9689 ;;      Totals:         0      10       0       0       0       0       0
  9690 ;;Total ram usage:       10 bytes
  9691 ;; Hardware stack levels used:    1
  9692 ;; Hardware stack levels required when called:    3
  9693 ;; This function calls:
  9694 ;;		Nothing
  9695 ;; This function is called by:
  9696 ;;		_doModeSLCAN
  9697 ;;		_receiveVSCPModeCanalMsg
  9698 ;; This function uses a non-reentrant model
  9699 ;;
  9700                           
  9701                           	psect	text13
  9702  0053E0                     __ptext13:
  9703                           	opt stack 0
  9704  0053E0                     _memcpy:
  9705                           	opt stack 26
  9706                           
  9707                           ; BSR set to: 0
  9708                           
  9709                           ; BSR set to: 0
  9710                           ;incstack = 0
  9711                           ;incstack = 0
  9712  0053E0  C062  F068         	movff	memcpy@s1,memcpy@s
  9713  0053E4  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
  9714  0053E8  C060  F066         	movff	memcpy@d1,memcpy@d
  9715  0053EC  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
  9716  0053F0  D00E               	goto	l12534
  9717  0053F2                     l12528:
  9718                           
  9719                           ; BSR set to: 0
  9720  0053F2  C068  FFD9         	movff	memcpy@s,fsr2l
  9721  0053F6  C069  FFDA         	movff	memcpy@s+1,fsr2h
  9722  0053FA  C066  FFE1         	movff	memcpy@d,fsr1l
  9723  0053FE  C067  FFE2         	movff	memcpy@d+1,fsr1h
  9724  005402  CFDF FFE7          	movff	indf2,indf1
  9725                           
  9726                           ; BSR set to: 0
  9727  005406  4B68               	infsnz	memcpy@s& (0+255),f,b
  9728  005408  2B69               	incf	(memcpy@s+1)& (0+255),f,b
  9729                           
  9730                           ; BSR set to: 0
  9731  00540A  4B66               	infsnz	memcpy@d& (0+255),f,b
  9732  00540C  2B67               	incf	(memcpy@d+1)& (0+255),f,b
  9733  00540E                     l12534:
  9734                           
  9735                           ; BSR set to: 0
  9736  00540E  0764               	decf	memcpy@n& (0+255),f,b
  9737  005410  A0D8               	btfss	status,0,c
  9738  005412  0765               	decf	(memcpy@n+1)& (0+255),f,b
  9739  005414  0100               	movlb	0	; () banked
  9740  005416  2964               	incf	memcpy@n& (0+255),w,b
  9741  005418  B4D8               	btfsc	status,2,c
  9742  00541A  2965               	incf	(memcpy@n+1)& (0+255),w,b
  9743  00541C  B4D8               	btfsc	status,2,c
  9744                           
  9745                           ; BSR set to: 0
  9746  00541E  0012               	return	
  9747  005420  D7E8               	goto	l12528
  9748  005422                     __end_of_memcpy:
  9749                           	opt stack 0
  9750                           tblptru	equ	0xFF8
  9751                           tblptrh	equ	0xFF7
  9752                           tblptrl	equ	0xFF6
  9753                           tablat	equ	0xFF5
  9754                           prodh	equ	0xFF4
  9755                           prodl	equ	0xFF3
  9756                           intcon	equ	0xFF2
  9757                           indf0	equ	0xFEF
  9758                           postinc0	equ	0xFEE
  9759                           fsr0h	equ	0xFEA
  9760                           fsr0l	equ	0xFE9
  9761                           wreg	equ	0xFE8
  9762                           indf1	equ	0xFE7
  9763                           postinc1	equ	0xFE6
  9764                           postdec1	equ	0xFE5
  9765                           fsr1h	equ	0xFE2
  9766                           fsr1l	equ	0xFE1
  9767                           indf2	equ	0xFDF
  9768                           postinc2	equ	0xFDE
  9769                           postdec2	equ	0xFDD
  9770                           plusw2	equ	0xFDB
  9771                           fsr2h	equ	0xFDA
  9772                           fsr2l	equ	0xFD9
  9773                           status	equ	0xFD8
  9774                           
  9775 ;; *************** function _sendVSCPDriverAck *****************
  9776 ;; Defined at:
  9777 ;;		line 1591 in file "main.c"
  9778 ;; Parameters:    Size  Location     Type
  9779 ;;		None
  9780 ;; Auto vars:     Size  Location     Type
  9781 ;;  crc             1   15[BANK0 ] unsigned char 
  9782 ;; Return value:  Size  Location     Type
  9783 ;;		None               void
  9784 ;; Registers used:
  9785 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9786 ;; Tracked objects:
  9787 ;;		On entry : E/1
  9788 ;;		On exit  : 0/0
  9789 ;;		Unchanged: 0/0
  9790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9791 ;;      Params:         0       0       0       0       0       0       0
  9792 ;;      Locals:         0       1       0       0       0       0       0
  9793 ;;      Temps:          0       0       0       0       0       0       0
  9794 ;;      Totals:         0       1       0       0       0       0       0
  9795 ;;Total ram usage:        1 bytes
  9796 ;; Hardware stack levels used:    1
  9797 ;; Hardware stack levels required when called:    6
  9798 ;; This function calls:
  9799 ;;		_WriteUSART
  9800 ;;		_sendEscapedUartData
  9801 ;;		_crc8
  9802 ;; This function is called by:
  9803 ;;		_doModeVscp
  9804 ;; This function uses a non-reentrant model
  9805 ;;
  9806                           
  9807                           	psect	text14
  9808  0046B8                     __ptext14:
  9809                           	opt stack 0
  9810  0046B8                     _sendVSCPDriverAck:
  9811                           	opt stack 23
  9812                           
  9813                           ;main.c: 1592: uint8_t crc = 0;
  9814                           
  9815                           ; BSR set to: 0
  9816                           ;incstack = 0
  9817                           ;incstack = 0
  9818  0046B8  0100               	movlb	0	; () banked
  9819  0046BA  6B6F               	clrf	sendVSCPDriverAck@crc& (0+255),b
  9820  0046BC                     l798:
  9821  0046BC  A2AC               	btfss	4012,1,c	;volatile
  9822  0046BE  D7FE               	goto	l798
  9823                           
  9824                           ;main.c: 1596: WriteUSART(0x10);
  9825  0046C0  0E10               	movlw	16
  9826  0046C2  ECB9  F02B         	call	_WriteUSART
  9827  0046C6                     l801:
  9828  0046C6  A2AC               	btfss	4012,1,c	;volatile
  9829  0046C8  D7FE               	goto	l801
  9830                           
  9831                           ;main.c: 1598: WriteUSART(0x02);
  9832  0046CA  0E02               	movlw	2
  9833  0046CC  ECB9  F02B         	call	_WriteUSART
  9834  0046D0                     l804:
  9835  0046D0  A2AC               	btfss	4012,1,c	;volatile
  9836  0046D2  D7FE               	goto	l804
  9837                           
  9838                           ;main.c: 1602: WriteUSART(251);
  9839  0046D4  0EFB               	movlw	251
  9840  0046D6  ECB9  F02B         	call	_WriteUSART
  9841                           
  9842                           ;main.c: 1603: crc8(&crc, 251);
  9843  0046DA  0100               	movlb	0	; () banked
  9844  0046DC  0E00               	movlw	high sendVSCPDriverAck@crc
  9845  0046DE  6F68               	movwf	(?_crc8+1)& (0+255),b
  9846  0046E0  0E6F               	movlw	low sendVSCPDriverAck@crc
  9847  0046E2  6F67               	movwf	?_crc8& (0+255),b
  9848  0046E4  0EFB               	movlw	251
  9849  0046E6  6F69               	movwf	(?_crc8+2)& (0+255),b
  9850  0046E8  ECE6  F02A         	call	_crc8	;wreg free
  9851  0046EC                     l807:
  9852  0046EC  A2AC               	btfss	4012,1,c	;volatile
  9853  0046EE  D7FE               	goto	l807
  9854                           
  9855                           ;main.c: 1607: WriteUSART(0);
  9856  0046F0  0E00               	movlw	0
  9857  0046F2  ECB9  F02B         	call	_WriteUSART
  9858                           
  9859                           ;main.c: 1608: crc8(&crc, 0);
  9860  0046F6  D829               	call	PL50	;call to abstracted procedure
  9861  0046F8  ECE6  F02A         	call	_crc8	;wreg free
  9862                           
  9863                           ; BSR set to: 0
  9864                           ;main.c: 1611: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9865  0046FC  0E00               	movlw	high sendVSCPDriverAck@crc
  9866  0046FE  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9867  004700  0E6F               	movlw	low sendVSCPDriverAck@crc
  9868  004702  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9869  004704  0101               	movlb	1	; () banked
  9870  004706  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  9871  004708  EC60  F028         	call	_sendEscapedUartData
  9872  00470C                     l810:
  9873  00470C  A2AC               	btfss	4012,1,c	;volatile
  9874  00470E  D7FE               	goto	l810
  9875                           
  9876                           ;main.c: 1615: WriteUSART(0);
  9877  004710  0E00               	movlw	0
  9878  004712  ECB9  F02B         	call	_WriteUSART
  9879                           
  9880                           ;main.c: 1616: crc8(&crc, 0);
  9881  004716  D819               	call	PL50	;call to abstracted procedure
  9882  004718  ECE6  F02A         	call	_crc8	;wreg free
  9883  00471C                     l813:
  9884  00471C  A2AC               	btfss	4012,1,c	;volatile
  9885  00471E  D7FE               	goto	l813
  9886                           
  9887                           ;main.c: 1618: WriteUSART(0);
  9888  004720  0E00               	movlw	0
  9889  004722  ECB9  F02B         	call	_WriteUSART
  9890                           
  9891                           ;main.c: 1619: crc8(&crc, 0);
  9892  004726  D811               	call	PL50	;call to abstracted procedure
  9893  004728  ECE6  F02A         	call	_crc8	;wreg free
  9894                           
  9895                           ; BSR set to: 0
  9896                           ;main.c: 1622: sendEscapedUartData(crc, (0));
  9897  00472C  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9898  00472E  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9899  004730  516F               	movf	sendVSCPDriverAck@crc& (0+255),w,b
  9900  004732  EC60  F028         	call	_sendEscapedUartData
  9901  004736                     l816:
  9902  004736  A2AC               	btfss	4012,1,c	;volatile
  9903  004738  D7FE               	goto	l816
  9904                           
  9905                           ;main.c: 1626: WriteUSART(0x10);
  9906  00473A  0E10               	movlw	16
  9907  00473C  ECB9  F02B         	call	_WriteUSART
  9908  004740                     l819:
  9909  004740  A2AC               	btfss	4012,1,c	;volatile
  9910  004742  D7FE               	goto	l819
  9911                           
  9912                           ;main.c: 1628: WriteUSART(0x03);
  9913  004744  0E03               	movlw	3
  9914  004746  EFB9  F02B         	goto	_WriteUSART
  9915  00474A                     __end_of_sendVSCPDriverAck:
  9916                           	opt stack 0
  9917  00474A                     PL50:
  9918                           	opt stack 23
  9919  00474A  0100               	movlb	0	; () banked
  9920  00474C  0E00               	movlw	high sendVSCPDriverAck@crc
  9921  00474E  6F68               	movwf	(?_crc8+1)& (0+255),b
  9922  004750  0E6F               	movlw	low sendVSCPDriverAck@crc
  9923  004752  6F67               	movwf	?_crc8& (0+255),b
  9924  004754  6B69               	clrf	(?_crc8+2)& (0+255),b
  9925  004756  0C00               	retlw	0
  9926  004758                     __end_ofPL50:
  9927                           	opt stack 0
  9928                           tblptru	equ	0xFF8
  9929                           tblptrh	equ	0xFF7
  9930                           tblptrl	equ	0xFF6
  9931                           tablat	equ	0xFF5
  9932                           prodh	equ	0xFF4
  9933                           prodl	equ	0xFF3
  9934                           intcon	equ	0xFF2
  9935                           indf0	equ	0xFEF
  9936                           postinc0	equ	0xFEE
  9937                           fsr0h	equ	0xFEA
  9938                           fsr0l	equ	0xFE9
  9939                           wreg	equ	0xFE8
  9940                           indf1	equ	0xFE7
  9941                           postinc1	equ	0xFE6
  9942                           postdec1	equ	0xFE5
  9943                           fsr1h	equ	0xFE2
  9944                           fsr1l	equ	0xFE1
  9945                           indf2	equ	0xFDF
  9946                           postinc2	equ	0xFDE
  9947                           postdec2	equ	0xFDD
  9948                           plusw2	equ	0xFDB
  9949                           fsr2h	equ	0xFDA
  9950                           fsr2l	equ	0xFD9
  9951                           status	equ	0xFD8
  9952                           
  9953 ;; *************** function _sendVSCPDriverErrorFrame *****************
  9954 ;; Defined at:
  9955 ;;		line 1543 in file "main.c"
  9956 ;; Parameters:    Size  Location     Type
  9957 ;;  errorcode       1    wreg     unsigned char 
  9958 ;; Auto vars:     Size  Location     Type
  9959 ;;  errorcode       1   15[BANK0 ] unsigned char 
  9960 ;;  crc             1   16[BANK0 ] unsigned char 
  9961 ;; Return value:  Size  Location     Type
  9962 ;;		None               void
  9963 ;; Registers used:
  9964 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9965 ;; Tracked objects:
  9966 ;;		On entry : E/0
  9967 ;;		On exit  : 0/0
  9968 ;;		Unchanged: 0/0
  9969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9970 ;;      Params:         0       0       0       0       0       0       0
  9971 ;;      Locals:         0       2       0       0       0       0       0
  9972 ;;      Temps:          0       0       0       0       0       0       0
  9973 ;;      Totals:         0       2       0       0       0       0       0
  9974 ;;Total ram usage:        2 bytes
  9975 ;; Hardware stack levels used:    1
  9976 ;; Hardware stack levels required when called:    6
  9977 ;; This function calls:
  9978 ;;		_WriteUSART
  9979 ;;		_sendEscapedUartData
  9980 ;;		_crc8
  9981 ;; This function is called by:
  9982 ;;		_doModeVscp
  9983 ;; This function uses a non-reentrant model
  9984 ;;
  9985                           
  9986                           	psect	text15
  9987  0043EE                     __ptext15:
  9988                           	opt stack 0
  9989  0043EE                     _sendVSCPDriverErrorFrame:
  9990                           	opt stack 23
  9991                           
  9992                           ;incstack = 0
  9993                           ;incstack = 0
  9994                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
  9995  0043EE  CFE8 F06F          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
  9996                           
  9997                           ;main.c: 1544: uint8_t crc = 0;
  9998  0043F2  0100               	movlb	0	; () banked
  9999  0043F4  6B70               	clrf	sendVSCPDriverErrorFrame@crc& (0+255),b
 10000  0043F6                     l771:
 10001  0043F6  A2AC               	btfss	4012,1,c	;volatile
 10002  0043F8  D7FE               	goto	l771
 10003                           
 10004                           ;main.c: 1548: WriteUSART(0x10);
 10005  0043FA  0E10               	movlw	16
 10006  0043FC  ECB9  F02B         	call	_WriteUSART
 10007  004400                     l774:
 10008  004400  A2AC               	btfss	4012,1,c	;volatile
 10009  004402  D7FE               	goto	l774
 10010                           
 10011                           ;main.c: 1550: WriteUSART(0x02);
 10012  004404  0E02               	movlw	2
 10013  004406  ECB9  F02B         	call	_WriteUSART
 10014  00440A                     l777:
 10015  00440A  A2AC               	btfss	4012,1,c	;volatile
 10016  00440C  D7FE               	goto	l777
 10017                           
 10018                           ;main.c: 1554: WriteUSART(253);
 10019  00440E  0EFD               	movlw	253
 10020  004410  ECB9  F02B         	call	_WriteUSART
 10021                           
 10022                           ;main.c: 1555: crc8(&crc, 253);
 10023  004414  0100               	movlb	0	; () banked
 10024  004416  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10025  004418  6F68               	movwf	(?_crc8+1)& (0+255),b
 10026  00441A  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10027  00441C  6F67               	movwf	?_crc8& (0+255),b
 10028  00441E  0EFD               	movlw	253
 10029  004420  6F69               	movwf	(?_crc8+2)& (0+255),b
 10030  004422  ECE6  F02A         	call	_crc8	;wreg free
 10031  004426                     l780:
 10032  004426  A2AC               	btfss	4012,1,c	;volatile
 10033  004428  D7FE               	goto	l780
 10034                           
 10035                           ;main.c: 1559: WriteUSART(0);
 10036  00442A  0E00               	movlw	0
 10037  00442C  ECB9  F02B         	call	_WriteUSART
 10038                           
 10039                           ;main.c: 1560: crc8(&crc, 0);
 10040  004430  D836               	call	PL96	;call to abstracted procedure
 10041  004432  ECE6  F02A         	call	_crc8	;wreg free
 10042                           
 10043                           ; BSR set to: 0
 10044                           ;main.c: 1563: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10045  004436  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10046  004438  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10047  00443A  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10048  00443C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10049  00443E  0101               	movlb	1	; () banked
 10050  004440  5106               	movf	(_cmdbuf+2)& (0+255),w,b
 10051  004442  EC60  F028         	call	_sendEscapedUartData
 10052  004446                     l783:
 10053  004446  A2AC               	btfss	4012,1,c	;volatile
 10054  004448  D7FE               	goto	l783
 10055                           
 10056                           ;main.c: 1567: WriteUSART(0);
 10057  00444A  0E00               	movlw	0
 10058  00444C  ECB9  F02B         	call	_WriteUSART
 10059                           
 10060                           ;main.c: 1568: crc8(&crc, 0);
 10061  004450  D826               	call	PL96	;call to abstracted procedure
 10062  004452  ECE6  F02A         	call	_crc8	;wreg free
 10063  004456                     l786:
 10064  004456  A2AC               	btfss	4012,1,c	;volatile
 10065  004458  D7FE               	goto	l786
 10066                           
 10067                           ;main.c: 1570: WriteUSART(1);
 10068  00445A  0E01               	movlw	1
 10069  00445C  ECB9  F02B         	call	_WriteUSART
 10070                           
 10071                           ;main.c: 1571: crc8(&crc, 1);
 10072  004460  0100               	movlb	0	; () banked
 10073  004462  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10074  004464  6F68               	movwf	(?_crc8+1)& (0+255),b
 10075  004466  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10076  004468  6F67               	movwf	?_crc8& (0+255),b
 10077  00446A  0E01               	movlw	1
 10078  00446C  6F69               	movwf	(?_crc8+2)& (0+255),b
 10079  00446E  ECE6  F02A         	call	_crc8	;wreg free
 10080                           
 10081                           ; BSR set to: 0
 10082                           ;main.c: 1574: sendEscapedUartData(errorcode, &crc);
 10083  004472  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10084  004474  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10085  004476  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10086  004478  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10087  00447A  516F               	movf	sendVSCPDriverErrorFrame@errorcode& (0+255),w,b
 10088  00447C  EC60  F028         	call	_sendEscapedUartData
 10089                           
 10090                           ; BSR set to: 0
 10091                           ;main.c: 1577: sendEscapedUartData(crc, (0));
 10092  004480  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10093  004482  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10094  004484  5170               	movf	sendVSCPDriverErrorFrame@crc& (0+255),w,b
 10095  004486  EC60  F028         	call	_sendEscapedUartData
 10096  00448A                     l789:
 10097  00448A  A2AC               	btfss	4012,1,c	;volatile
 10098  00448C  D7FE               	goto	l789
 10099                           
 10100                           ;main.c: 1581: WriteUSART(0x10);
 10101  00448E  0E10               	movlw	16
 10102  004490  ECB9  F02B         	call	_WriteUSART
 10103  004494                     l792:
 10104  004494  A2AC               	btfss	4012,1,c	;volatile
 10105  004496  D7FE               	goto	l792
 10106                           
 10107                           ;main.c: 1583: WriteUSART(0x03);
 10108  004498  0E03               	movlw	3
 10109  00449A  EFB9  F02B         	goto	_WriteUSART
 10110  00449E                     __end_of_sendVSCPDriverErrorFrame:
 10111                           	opt stack 0
 10112  00449E                     PL96:
 10113                           	opt stack 23
 10114  00449E  0100               	movlb	0	; () banked
 10115  0044A0  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10116  0044A2  6F68               	movwf	(?_crc8+1)& (0+255),b
 10117  0044A4  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10118  0044A6  6F67               	movwf	?_crc8& (0+255),b
 10119  0044A8  6B69               	clrf	(?_crc8+2)& (0+255),b
 10120  0044AA  0C00               	retlw	0
 10121  0044AC                     __end_ofPL96:
 10122                           	opt stack 0
 10123                           tblptru	equ	0xFF8
 10124                           tblptrh	equ	0xFF7
 10125                           tblptrl	equ	0xFF6
 10126                           tablat	equ	0xFF5
 10127                           prodh	equ	0xFF4
 10128                           prodl	equ	0xFF3
 10129                           intcon	equ	0xFF2
 10130                           indf0	equ	0xFEF
 10131                           postinc0	equ	0xFEE
 10132                           fsr0h	equ	0xFEA
 10133                           fsr0l	equ	0xFE9
 10134                           wreg	equ	0xFE8
 10135                           indf1	equ	0xFE7
 10136                           postinc1	equ	0xFE6
 10137                           postdec1	equ	0xFE5
 10138                           fsr1h	equ	0xFE2
 10139                           fsr1l	equ	0xFE1
 10140                           indf2	equ	0xFDF
 10141                           postinc2	equ	0xFDE
 10142                           postdec2	equ	0xFDD
 10143                           plusw2	equ	0xFDB
 10144                           fsr2h	equ	0xFDA
 10145                           fsr2l	equ	0xFD9
 10146                           status	equ	0xFD8
 10147                           
 10148 ;; *************** function _calcCRC *****************
 10149 ;; Defined at:
 10150 ;;		line 2392 in file "main.c"
 10151 ;; Parameters:    Size  Location     Type
 10152 ;;  p               2   12[BANK0 ] PTR unsigned char 
 10153 ;;		 -> cmdbuf(80), 
 10154 ;;  len             1   14[BANK0 ] unsigned char 
 10155 ;; Auto vars:     Size  Location     Type
 10156 ;;  crc             1   16[BANK0 ] unsigned char 
 10157 ;;  j               1   15[BANK0 ] unsigned char 
 10158 ;; Return value:  Size  Location     Type
 10159 ;;                  1    wreg      unsigned char 
 10160 ;; Registers used:
 10161 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10162 ;; Tracked objects:
 10163 ;;		On entry : F/0
 10164 ;;		On exit  : F/0
 10165 ;;		Unchanged: 0/0
 10166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10167 ;;      Params:         0       3       0       0       0       0       0
 10168 ;;      Locals:         0       2       0       0       0       0       0
 10169 ;;      Temps:          0       0       0       0       0       0       0
 10170 ;;      Totals:         0       5       0       0       0       0       0
 10171 ;;Total ram usage:        5 bytes
 10172 ;; Hardware stack levels used:    1
 10173 ;; Hardware stack levels required when called:    5
 10174 ;; This function calls:
 10175 ;;		_crc8
 10176 ;; This function is called by:
 10177 ;;		_doModeVscp
 10178 ;; This function uses a non-reentrant model
 10179 ;;
 10180                           
 10181                           	psect	text16
 10182  005664                     __ptext16:
 10183                           	opt stack 0
 10184  005664                     _calcCRC:
 10185                           	opt stack 24
 10186                           
 10187                           ; BSR set to: 0
 10188                           ;main.c: 2393: uint8_t j;
 10189                           ;main.c: 2394: uint8_t crc = 0;
 10190                           
 10191                           ;incstack = 0
 10192                           ;incstack = 0
 10193  005664  6B70               	clrf	calcCRC@crc& (0+255),b
 10194                           
 10195                           ;main.c: 2396: for (j = 0; j < len; j++) {
 10196  005666  6B6F               	clrf	calcCRC@j& (0+255),b
 10197  005668  D00F               	goto	l12256
 10198  00566A                     l12252:
 10199                           
 10200                           ; BSR set to: 0
 10201                           ;main.c: 2397: crc8(&crc, p[j]);
 10202  00566A  0E00               	movlw	high calcCRC@crc
 10203  00566C  6F68               	movwf	(?_crc8+1)& (0+255),b
 10204  00566E  0E70               	movlw	low calcCRC@crc
 10205  005670  6F67               	movwf	?_crc8& (0+255),b
 10206  005672  516F               	movf	calcCRC@j& (0+255),w,b
 10207  005674  256C               	addwf	calcCRC@p& (0+255),w,b
 10208  005676  6ED9               	movwf	fsr2l,c
 10209  005678  0E00               	movlw	0
 10210  00567A  216D               	addwfc	(calcCRC@p+1)& (0+255),w,b
 10211  00567C  6EDA               	movwf	fsr2h,c
 10212  00567E  50DF               	movf	indf2,w,c
 10213  005680  6F69               	movwf	(?_crc8+2)& (0+255),b
 10214  005682  ECE6  F02A         	call	_crc8	;wreg free
 10215                           
 10216                           ; BSR set to: 0
 10217  005686  2B6F               	incf	calcCRC@j& (0+255),f,b
 10218  005688                     l12256:
 10219                           
 10220                           ; BSR set to: 0
 10221  005688  516E               	movf	calcCRC@len& (0+255),w,b
 10222  00568A  5D6F               	subwf	calcCRC@j& (0+255),w,b
 10223  00568C  E3EE               	bnc	l12252
 10224                           
 10225                           ; BSR set to: 0
 10226                           ;main.c: 2398: }
 10227                           ;main.c: 2400: return crc;
 10228  00568E  5170               	movf	calcCRC@crc& (0+255),w,b
 10229                           
 10230                           ; BSR set to: 0
 10231  005690  0012               	return	
 10232  005692                     __end_of_calcCRC:
 10233                           	opt stack 0
 10234                           tblptru	equ	0xFF8
 10235                           tblptrh	equ	0xFF7
 10236                           tblptrl	equ	0xFF6
 10237                           tablat	equ	0xFF5
 10238                           prodh	equ	0xFF4
 10239                           prodl	equ	0xFF3
 10240                           intcon	equ	0xFF2
 10241                           indf0	equ	0xFEF
 10242                           postinc0	equ	0xFEE
 10243                           fsr0h	equ	0xFEA
 10244                           fsr0l	equ	0xFE9
 10245                           wreg	equ	0xFE8
 10246                           indf1	equ	0xFE7
 10247                           postinc1	equ	0xFE6
 10248                           postdec1	equ	0xFE5
 10249                           fsr1h	equ	0xFE2
 10250                           fsr1l	equ	0xFE1
 10251                           indf2	equ	0xFDF
 10252                           postinc2	equ	0xFDE
 10253                           postdec2	equ	0xFDD
 10254                           plusw2	equ	0xFDB
 10255                           fsr2h	equ	0xFDA
 10256                           fsr2l	equ	0xFD9
 10257                           status	equ	0xFD8
 10258                           
 10259 ;; *************** function _receiveSendEventCANAL *****************
 10260 ;; Defined at:
 10261 ;;		line 1787 in file "main.c"
 10262 ;; Parameters:    Size  Location     Type
 10263 ;;		None
 10264 ;; Auto vars:     Size  Location     Type
 10265 ;;  crc             1   32[BANK0 ] unsigned char 
 10266 ;;  data            8   18[BANK0 ] unsigned char [8]
 10267 ;;  id              4   27[BANK0 ] unsigned long 
 10268 ;;  dlc             1   31[BANK0 ] unsigned char 
 10269 ;;  i               1   26[BANK0 ] unsigned char 
 10270 ;; Return value:  Size  Location     Type
 10271 ;;                  1    wreg      enum E15660
 10272 ;; Registers used:
 10273 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10274 ;; Tracked objects:
 10275 ;;		On entry : F/0
 10276 ;;		On exit  : 0/0
 10277 ;;		Unchanged: 0/0
 10278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10279 ;;      Params:         0       0       0       0       0       0       0
 10280 ;;      Locals:         0      15       0       0       0       0       0
 10281 ;;      Temps:          0       0       0       0       0       0       0
 10282 ;;      Totals:         0      15       0       0       0       0       0
 10283 ;;Total ram usage:       15 bytes
 10284 ;; Hardware stack levels used:    1
 10285 ;; Hardware stack levels required when called:    6
 10286 ;; This function calls:
 10287 ;;		_WriteUSART
 10288 ;;		_sendEscapedUartData
 10289 ;;		_crc8
 10290 ;;		_getCANFrame
 10291 ;; This function is called by:
 10292 ;;		_doModeVscp
 10293 ;; This function uses a non-reentrant model
 10294 ;;
 10295                           
 10296                           	psect	text17
 10297  003564                     __ptext17:
 10298                           	opt stack 0
 10299  003564                     _receiveSendEventCANAL:
 10300                           	opt stack 23
 10301                           
 10302                           ; BSR set to: 0
 10303                           ;main.c: 1788: uint8_t i;
 10304                           ;main.c: 1789: uint32_t id;
 10305                           ;main.c: 1790: uint8_t dlc;
 10306                           ;main.c: 1791: uint8_t data[8];
 10307                           ;main.c: 1793: if ( getCANFrame( &id, &dlc, &data ) ) {
 10308                           
 10309                           ; BSR set to: 0
 10310                           ;incstack = 0
 10311                           ;incstack = 0
 10312  003564  0E00               	movlw	high receiveSendEventCANAL@dlc
 10313  003566  6F6E               	movwf	(?_getCANFrame+1)& (0+255),b
 10314  003568  0E7F               	movlw	low receiveSendEventCANAL@dlc
 10315  00356A  6F6D               	movwf	?_getCANFrame& (0+255),b
 10316  00356C  0E00               	movlw	high receiveSendEventCANAL@data
 10317  00356E  6F70               	movwf	(?_getCANFrame+3)& (0+255),b
 10318  003570  0E72               	movlw	low receiveSendEventCANAL@data
 10319  003572  6F6F               	movwf	(?_getCANFrame+2)& (0+255),b
 10320  003574  0E7B               	movlw	receiveSendEventCANAL@id& (0+255)
 10321  003576  EC78  F026         	call	_getCANFrame
 10322  00357A  0900               	iorlw	0
 10323  00357C  E101 D08F          	bz	l941
 10324                           
 10325                           ; BSR set to: 0
 10326                           ;main.c: 1795: uint8_t crc = 0;
 10327  003580  6B80               	clrf	receiveSendEventCANAL@crc& (0+255),b
 10328                           
 10329                           ; BSR set to: 0
 10330                           ;main.c: 1798: cntRxFrames++;
 10331  003582  2BD9               	incf	_cntRxFrames& (0+255),f,b
 10332  003584  0E00               	movlw	0
 10333  003586  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10334  003588  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10335  00358A  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10336                           
 10337                           ;main.c: 1799: cntRxBytes += dlc;
 10338  00358C  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10339  00358E  27D5               	addwf	_cntRxBytes& (0+255),f,b
 10340  003590  0E00               	movlw	0
 10341  003592  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10342  003594  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10343  003596  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10344  003598                     l920:
 10345                           
 10346                           ; BSR set to: 0
 10347  003598  A2AC               	btfss	4012,1,c	;volatile
 10348  00359A  D7FE               	goto	l920
 10349                           
 10350                           ; BSR set to: 0
 10351                           ;main.c: 1803: WriteUSART(0x10);
 10352  00359C  0E10               	movlw	16
 10353  00359E  ECB9  F02B         	call	_WriteUSART
 10354  0035A2                     l923:
 10355  0035A2  A2AC               	btfss	4012,1,c	;volatile
 10356  0035A4  D7FE               	goto	l923
 10357                           
 10358                           ;main.c: 1805: WriteUSART(0x02);
 10359  0035A6  0E02               	movlw	2
 10360  0035A8  ECB9  F02B         	call	_WriteUSART
 10361  0035AC                     l926:
 10362  0035AC  A2AC               	btfss	4012,1,c	;volatile
 10363  0035AE  D7FE               	goto	l926
 10364                           
 10365                           ;main.c: 1809: WriteUSART(2);
 10366  0035B0  0E02               	movlw	2
 10367  0035B2  ECB9  F02B         	call	_WriteUSART
 10368                           
 10369                           ;main.c: 1810: crc8(&crc, 2);
 10370  0035B6  0100               	movlb	0	; () banked
 10371  0035B8  0E00               	movlw	high receiveSendEventCANAL@crc
 10372  0035BA  6F68               	movwf	(?_crc8+1)& (0+255),b
 10373  0035BC  0E80               	movlw	low receiveSendEventCANAL@crc
 10374  0035BE  6F67               	movwf	?_crc8& (0+255),b
 10375  0035C0  0E02               	movlw	2
 10376  0035C2  6F69               	movwf	(?_crc8+2)& (0+255),b
 10377  0035C4  ECE6  F02A         	call	_crc8	;wreg free
 10378  0035C8                     l929:
 10379                           
 10380                           ; BSR set to: 0
 10381  0035C8  A2AC               	btfss	4012,1,c	;volatile
 10382  0035CA  D7FE               	goto	l929
 10383                           
 10384                           ; BSR set to: 0
 10385                           ;main.c: 1814: WriteUSART(0);
 10386  0035CC  0E00               	movlw	0
 10387  0035CE  ECB9  F02B         	call	_WriteUSART
 10388                           
 10389                           ;main.c: 1815: crc8(&crc, 0);
 10390  0035D2  0100               	movlb	0	; () banked
 10391  0035D4  0E00               	movlw	high receiveSendEventCANAL@crc
 10392  0035D6  6F68               	movwf	(?_crc8+1)& (0+255),b
 10393  0035D8  0E80               	movlw	low receiveSendEventCANAL@crc
 10394  0035DA  6F67               	movwf	?_crc8& (0+255),b
 10395  0035DC  0E00               	movlw	0
 10396  0035DE  6B69               	clrf	(?_crc8+2)& (0+255),b
 10397  0035E0  ECE6  F02A         	call	_crc8	;wreg free
 10398                           
 10399                           ; BSR set to: 0
 10400                           ;main.c: 1818: sendEscapedUartData(sequencyno, &crc);
 10401  0035E4  0E00               	movlw	high receiveSendEventCANAL@crc
 10402  0035E6  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10403  0035E8  0E80               	movlw	low receiveSendEventCANAL@crc
 10404  0035EA  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10405  0035EC  51F3               	movf	_sequencyno& (0+255),w,b
 10406  0035EE  EC60  F028         	call	_sendEscapedUartData
 10407                           
 10408                           ; BSR set to: 0
 10409                           ;main.c: 1819: sequencyno++;
 10410  0035F2  2BF3               	incf	_sequencyno& (0+255),f,b
 10411                           
 10412                           ; BSR set to: 0
 10413                           ;main.c: 1822: sendEscapedUartData(0, &crc);
 10414  0035F4  0E00               	movlw	high receiveSendEventCANAL@crc
 10415  0035F6  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10416  0035F8  0E80               	movlw	low receiveSendEventCANAL@crc
 10417  0035FA  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10418  0035FC  0E00               	movlw	0
 10419  0035FE  EC60  F028         	call	_sendEscapedUartData
 10420                           
 10421                           ; BSR set to: 0
 10422                           ;main.c: 1823: sendEscapedUartData(5 + dlc, &crc);
 10423  003602  0E00               	movlw	high receiveSendEventCANAL@crc
 10424  003604  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10425  003606  0E80               	movlw	low receiveSendEventCANAL@crc
 10426  003608  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10427  00360A  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10428  00360C  0F05               	addlw	5
 10429  00360E  EC60  F028         	call	_sendEscapedUartData
 10430                           
 10431                           ; BSR set to: 0
 10432                           ;main.c: 1829: sendEscapedUartData( ((id >> 24) & 0xff), &crc);
 10433  003612  0E00               	movlw	high receiveSendEventCANAL@crc
 10434  003614  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10435  003616  0E80               	movlw	low receiveSendEventCANAL@crc
 10436  003618  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10437  00361A  0100               	movlb	0	; () banked
 10438  00361C  517E               	movf	(receiveSendEventCANAL@id+3)& (0+255),w,b
 10439  00361E  EC60  F028         	call	_sendEscapedUartData
 10440                           
 10441                           ; BSR set to: 0
 10442                           ;main.c: 1830: sendEscapedUartData(((id >> 16) & 0xff), &crc);
 10443  003622  0E00               	movlw	high receiveSendEventCANAL@crc
 10444  003624  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10445  003626  0E80               	movlw	low receiveSendEventCANAL@crc
 10446  003628  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10447  00362A  0100               	movlb	0	; () banked
 10448  00362C  517D               	movf	(receiveSendEventCANAL@id+2)& (0+255),w,b
 10449  00362E  EC60  F028         	call	_sendEscapedUartData
 10450                           
 10451                           ; BSR set to: 0
 10452                           ;main.c: 1831: sendEscapedUartData(((id >> 8) & 0xff), &crc);
 10453  003632  0E00               	movlw	high receiveSendEventCANAL@crc
 10454  003634  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10455  003636  0E80               	movlw	low receiveSendEventCANAL@crc
 10456  003638  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10457  00363A  0100               	movlb	0	; () banked
 10458  00363C  517C               	movf	(receiveSendEventCANAL@id+1)& (0+255),w,b
 10459  00363E  EC60  F028         	call	_sendEscapedUartData
 10460                           
 10461                           ; BSR set to: 0
 10462                           ;main.c: 1832: sendEscapedUartData((id & 0xff), &crc);
 10463  003642  0E00               	movlw	high receiveSendEventCANAL@crc
 10464  003644  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10465  003646  0E80               	movlw	low receiveSendEventCANAL@crc
 10466  003648  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10467  00364A  517B               	movf	receiveSendEventCANAL@id& (0+255),w,b
 10468  00364C  EC60  F028         	call	_sendEscapedUartData
 10469                           
 10470                           ; BSR set to: 0
 10471                           ;main.c: 1835: sendEscapedUartData(dlc, &crc);
 10472  003650  0E00               	movlw	high receiveSendEventCANAL@crc
 10473  003652  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10474  003654  0E80               	movlw	low receiveSendEventCANAL@crc
 10475  003656  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10476  003658  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10477  00365A  EC60  F028         	call	_sendEscapedUartData
 10478                           
 10479                           ; BSR set to: 0
 10480                           ;main.c: 1838: for (i = 0; i < dlc; i++) {
 10481  00365E  6B7A               	clrf	receiveSendEventCANAL@i& (0+255),b
 10482  003660  D00C               	goto	l12240
 10483  003662                     l12236:
 10484                           
 10485                           ; BSR set to: 0
 10486                           ;main.c: 1839: sendEscapedUartData( data[ i ], &crc );
 10487  003662  0E00               	movlw	high receiveSendEventCANAL@crc
 10488  003664  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10489  003666  0E80               	movlw	low receiveSendEventCANAL@crc
 10490  003668  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10491  00366A  517A               	movf	receiveSendEventCANAL@i& (0+255),w,b
 10492  00366C  0F72               	addlw	low receiveSendEventCANAL@data
 10493  00366E  6ED9               	movwf	fsr2l,c
 10494  003670  6ADA               	clrf	fsr2h,c
 10495  003672  50DF               	movf	indf2,w,c
 10496  003674  EC60  F028         	call	_sendEscapedUartData
 10497                           
 10498                           ; BSR set to: 0
 10499  003678  2B7A               	incf	receiveSendEventCANAL@i& (0+255),f,b
 10500  00367A                     l12240:
 10501                           
 10502                           ; BSR set to: 0
 10503  00367A  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10504  00367C  5D7A               	subwf	receiveSendEventCANAL@i& (0+255),w,b
 10505  00367E  E3F1               	bnc	l12236
 10506                           
 10507                           ; BSR set to: 0
 10508                           ;main.c: 1840: }
 10509                           ;main.c: 1845: sendEscapedUartData(crc, (0));
 10510  003680  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10511  003682  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10512  003684  5180               	movf	receiveSendEventCANAL@crc& (0+255),w,b
 10513  003686  EC60  F028         	call	_sendEscapedUartData
 10514  00368A                     l935:
 10515                           
 10516                           ; BSR set to: 0
 10517  00368A  A2AC               	btfss	4012,1,c	;volatile
 10518  00368C  D7FE               	goto	l935
 10519                           
 10520                           ; BSR set to: 0
 10521                           ;main.c: 1849: WriteUSART(0x10);
 10522  00368E  0E10               	movlw	16
 10523  003690  ECB9  F02B         	call	_WriteUSART
 10524  003694                     l938:
 10525  003694  A2AC               	btfss	4012,1,c	;volatile
 10526  003696  D7FE               	goto	l938
 10527                           
 10528                           ;main.c: 1851: WriteUSART(0x03);
 10529  003698  0E03               	movlw	3
 10530  00369A  ECB9  F02B         	call	_WriteUSART
 10531  00369E                     l941:
 10532  00369E  0012               	return	
 10533  0036A0                     __end_of_receiveSendEventCANAL:
 10534                           	opt stack 0
 10535                           tblptru	equ	0xFF8
 10536                           tblptrh	equ	0xFF7
 10537                           tblptrl	equ	0xFF6
 10538                           tablat	equ	0xFF5
 10539                           prodh	equ	0xFF4
 10540                           prodl	equ	0xFF3
 10541                           intcon	equ	0xFF2
 10542                           indf0	equ	0xFEF
 10543                           postinc0	equ	0xFEE
 10544                           fsr0h	equ	0xFEA
 10545                           fsr0l	equ	0xFE9
 10546                           wreg	equ	0xFE8
 10547                           indf1	equ	0xFE7
 10548                           postinc1	equ	0xFE6
 10549                           postdec1	equ	0xFE5
 10550                           fsr1h	equ	0xFE2
 10551                           fsr1l	equ	0xFE1
 10552                           indf2	equ	0xFDF
 10553                           postinc2	equ	0xFDE
 10554                           postdec2	equ	0xFDD
 10555                           plusw2	equ	0xFDB
 10556                           fsr2h	equ	0xFDA
 10557                           fsr2l	equ	0xFD9
 10558                           status	equ	0xFD8
 10559                           
 10560 ;; *************** function _receiveSendMultiEventCANAL *****************
 10561 ;; Defined at:
 10562 ;;		line 1864 in file "main.c"
 10563 ;; Parameters:    Size  Location     Type
 10564 ;;		None
 10565 ;; Auto vars:     Size  Location     Type
 10566 ;;  crc             1   33[BANK0 ] unsigned char 
 10567 ;;  data            8   18[BANK0 ] unsigned char [8]
 10568 ;;  id              4   29[BANK0 ] unsigned long 
 10569 ;;  pos             1   34[BANK0 ] unsigned char 
 10570 ;;  dlc             1   28[BANK0 ] unsigned char 
 10571 ;;  i               1   27[BANK0 ] unsigned char 
 10572 ;;  msgcount        1   26[BANK0 ] unsigned char 
 10573 ;; Return value:  Size  Location     Type
 10574 ;;                  1    wreg      enum E15660
 10575 ;; Registers used:
 10576 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10577 ;; Tracked objects:
 10578 ;;		On entry : F/0
 10579 ;;		On exit  : 0/0
 10580 ;;		Unchanged: 0/0
 10581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10582 ;;      Params:         0       0       0       0       0       0       0
 10583 ;;      Locals:         0      17       0       0       0       0       0
 10584 ;;      Temps:          0       0       0       0       0       0       0
 10585 ;;      Totals:         0      17       0       0       0       0       0
 10586 ;;Total ram usage:       17 bytes
 10587 ;; Hardware stack levels used:    1
 10588 ;; Hardware stack levels required when called:    6
 10589 ;; This function calls:
 10590 ;;		_WriteUSART
 10591 ;;		_sendEscapedUartData
 10592 ;;		_crc8
 10593 ;;		_getCANFrame
 10594 ;; This function is called by:
 10595 ;;		_doModeVscp
 10596 ;; This function uses a non-reentrant model
 10597 ;;
 10598                           
 10599                           	psect	text18
 10600  00312E                     __ptext18:
 10601                           	opt stack 0
 10602  00312E                     _receiveSendMultiEventCANAL:
 10603                           	opt stack 23
 10604                           
 10605                           ; BSR set to: 0
 10606                           ;main.c: 1865: uint8_t i;
 10607                           ;main.c: 1866: uint8_t pos=0;
 10608                           
 10609                           ;incstack = 0
 10610                           ;incstack = 0
 10611  00312E  6B82               	clrf	receiveSendMultiEventCANAL@pos& (0+255),b
 10612                           
 10613                           ;main.c: 1867: uint8_t msgcount=0;
 10614  003130  6B7A               	clrf	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10615                           
 10616                           ; BSR set to: 0
 10617                           ;main.c: 1868: uint32_t id;
 10618                           ;main.c: 1869: uint8_t dlc;
 10619                           ;main.c: 1870: uint8_t data[8];
 10620                           ;main.c: 1872: if ( getCANFrame( &id, &dlc, &data ) ) {
 10621  003132  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 10622  003134  D8B1               	call	PL82	;call to abstracted procedure
 10623  003136  EC78  F026         	call	_getCANFrame
 10624  00313A  0900               	iorlw	0
 10625  00313C  E101 D0A3          	bz	l973
 10626                           
 10627                           ; BSR set to: 0
 10628                           ;main.c: 1874: uint8_t crc = 0;
 10629  003140  6B81               	clrf	receiveSendMultiEventCANAL@crc& (0+255),b
 10630                           
 10631                           ; BSR set to: 0
 10632                           ;main.c: 1877: cntRxFrames++;
 10633  003142  2BD9               	incf	_cntRxFrames& (0+255),f,b
 10634  003144  0E00               	movlw	0
 10635  003146  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10636  003148  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10637  00314A  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10638                           
 10639                           ;main.c: 1878: cntRxBytes += dlc;
 10640  00314C  517C               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10641  00314E  27D5               	addwf	_cntRxBytes& (0+255),f,b
 10642  003150  0E00               	movlw	0
 10643  003152  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10644  003154  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10645  003156  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10646  003158                     l945:
 10647                           
 10648                           ; BSR set to: 0
 10649  003158  A2AC               	btfss	4012,1,c	;volatile
 10650  00315A  D7FE               	goto	l945
 10651                           
 10652                           ; BSR set to: 0
 10653                           ;main.c: 1882: WriteUSART(0x10);
 10654  00315C  0E10               	movlw	16
 10655  00315E  ECB9  F02B         	call	_WriteUSART
 10656  003162                     l948:
 10657  003162  A2AC               	btfss	4012,1,c	;volatile
 10658  003164  D7FE               	goto	l948
 10659                           
 10660                           ;main.c: 1884: WriteUSART(0x02);
 10661  003166  0E02               	movlw	2
 10662  003168  ECB9  F02B         	call	_WriteUSART
 10663  00316C                     l951:
 10664  00316C  A2AC               	btfss	4012,1,c	;volatile
 10665  00316E  D7FE               	goto	l951
 10666                           
 10667                           ;main.c: 1888: WriteUSART(6);
 10668  003170  0E06               	movlw	6
 10669  003172  ECB9  F02B         	call	_WriteUSART
 10670                           
 10671                           ;main.c: 1889: crc8(&crc, 6);
 10672  003176  0100               	movlb	0	; () banked
 10673  003178  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10674  00317A  6F68               	movwf	(?_crc8+1)& (0+255),b
 10675  00317C  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10676  00317E  6F67               	movwf	?_crc8& (0+255),b
 10677  003180  0E06               	movlw	6
 10678  003182  6F69               	movwf	(?_crc8+2)& (0+255),b
 10679  003184  ECE6  F02A         	call	_crc8	;wreg free
 10680  003188                     l954:
 10681                           
 10682                           ; BSR set to: 0
 10683  003188  A2AC               	btfss	4012,1,c	;volatile
 10684  00318A  D7FE               	goto	l954
 10685                           
 10686                           ; BSR set to: 0
 10687                           ;main.c: 1893: WriteUSART(0);
 10688  00318C  0E00               	movlw	0
 10689  00318E  ECB9  F02B         	call	_WriteUSART
 10690                           
 10691                           ;main.c: 1894: crc8(&crc, 0);
 10692  003192  0100               	movlb	0	; () banked
 10693  003194  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10694  003196  6F68               	movwf	(?_crc8+1)& (0+255),b
 10695  003198  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10696  00319A  6F67               	movwf	?_crc8& (0+255),b
 10697  00319C  0E00               	movlw	0
 10698  00319E  6B69               	clrf	(?_crc8+2)& (0+255),b
 10699  0031A0  ECE6  F02A         	call	_crc8	;wreg free
 10700                           
 10701                           ; BSR set to: 0
 10702                           ;main.c: 1897: sendEscapedUartData(sequencyno, &crc);
 10703  0031A4  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10704  0031A6  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10705  0031A8  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10706  0031AA  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10707  0031AC  51F3               	movf	_sequencyno& (0+255),w,b
 10708  0031AE  EC60  F028         	call	_sendEscapedUartData
 10709                           
 10710                           ; BSR set to: 0
 10711                           ;main.c: 1898: sequencyno++;
 10712  0031B2  2BF3               	incf	_sequencyno& (0+255),f,b
 10713  0031B4                     l12142:
 10714                           
 10715                           ; BSR set to: 0
 10716                           ;main.c: 1908: wrkbuf[ pos ] = (id >> 24) & 0xff;
 10717  0031B4  0E54               	movlw	low _wrkbuf
 10718  0031B6  0100               	movlb	0	; () banked
 10719  0031B8  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10720  0031BA  6ED9               	movwf	fsr2l,c
 10721  0031BC  6ADA               	clrf	fsr2h,c
 10722  0031BE  0E01               	movlw	high _wrkbuf
 10723  0031C0  22DA               	addwfc	fsr2h,f,c
 10724  0031C2  C080  FFDF         	movff	receiveSendMultiEventCANAL@id+3,indf2
 10725                           
 10726                           ; BSR set to: 0
 10727                           ;main.c: 1909: pos++;
 10728                           
 10729                           ; BSR set to: 0
 10730                           ;main.c: 1910: wrkbuf[ pos ] = (id >> 16) & 0xff;
 10731  0031C6  D860               	call	PL26	;call to abstracted procedure
 10732  0031C8  C07F  FFDF         	movff	receiveSendMultiEventCANAL@id+2,indf2
 10733                           
 10734                           ; BSR set to: 0
 10735                           ;main.c: 1911: pos++;
 10736                           
 10737                           ; BSR set to: 0
 10738                           ;main.c: 1912: wrkbuf[ pos ] = (id >> 8) & 0xff;
 10739  0031CC  D85D               	call	PL26	;call to abstracted procedure
 10740  0031CE  C07E  FFDF         	movff	receiveSendMultiEventCANAL@id+1,indf2
 10741                           
 10742                           ; BSR set to: 0
 10743                           ;main.c: 1913: pos++;
 10744                           
 10745                           ; BSR set to: 0
 10746                           ;main.c: 1914: wrkbuf[ pos ] = id & 0xff;
 10747  0031D2  D85A               	call	PL26	;call to abstracted procedure
 10748  0031D4  C07D  FFDF         	movff	receiveSendMultiEventCANAL@id,indf2
 10749                           
 10750                           ; BSR set to: 0
 10751                           ;main.c: 1915: pos++;
 10752                           
 10753                           ; BSR set to: 0
 10754                           ;main.c: 1918: wrkbuf[ pos ] = dlc;
 10755  0031D8  D857               	call	PL26	;call to abstracted procedure
 10756  0031DA  C07C  FFDF         	movff	receiveSendMultiEventCANAL@dlc,indf2
 10757                           
 10758                           ; BSR set to: 0
 10759                           ;main.c: 1919: pos++;
 10760  0031DE  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10761                           
 10762                           ; BSR set to: 0
 10763                           ;main.c: 1922: for (i = 0; i < dlc; i++) {
 10764  0031E0  6B7B               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 10765  0031E2  D00F               	goto	l12170
 10766  0031E4                     l12164:
 10767                           
 10768                           ; BSR set to: 0
 10769                           ;main.c: 1923: wrkbuf[ pos ] = data[ i ];
 10770  0031E4  517B               	movf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10771  0031E6  0F72               	addlw	low receiveSendMultiEventCANAL@data
 10772  0031E8  6ED9               	movwf	fsr2l,c
 10773  0031EA  6ADA               	clrf	fsr2h,c
 10774  0031EC  0E54               	movlw	low _wrkbuf
 10775  0031EE  0100               	movlb	0	; () banked
 10776  0031F0  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10777  0031F2  6EE1               	movwf	fsr1l,c
 10778  0031F4  6AE2               	clrf	fsr1h,c
 10779  0031F6  0E01               	movlw	high _wrkbuf
 10780  0031F8  22E2               	addwfc	fsr1h,f,c
 10781  0031FA  CFDF FFE7          	movff	indf2,indf1
 10782                           
 10783                           ; BSR set to: 1
 10784                           ;main.c: 1924: pos++;
 10785  0031FE  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10786                           
 10787                           ; BSR set to: 0
 10788  003200  2B7B               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 10789  003202                     l12170:
 10790                           
 10791                           ; BSR set to: 0
 10792  003202  517C               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10793  003204  5D7B               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10794  003206  E3EE               	bnc	l12164
 10795                           
 10796                           ; BSR set to: 0
 10797                           ;main.c: 1925: }
 10798                           ;main.c: 1927: msgcount++;
 10799  003208  2B7A               	incf	receiveSendMultiEventCANAL@msgcount& (0+255),f,b
 10800                           
 10801                           ; BSR set to: 0
 10802                           ;main.c: 1929: } while ( ( msgcount < caps.maxCanalFrames ) &&
 10803                           ;main.c: 1930: ( msgcount < 5 ) &&
 10804                           ;main.c: 1931: getCANFrame( &id, &dlc, &data ) );
 10805  00320A  51F6               	movf	(_caps+1)& (0+255),w,b
 10806  00320C  617A               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10807  00320E  D009               	goto	l12180
 10808                           
 10809                           ; BSR set to: 0
 10810  003210  0E05               	movlw	5
 10811  003212  617A               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10812  003214  D006               	goto	l12180
 10813                           
 10814                           ; BSR set to: 0
 10815  003216  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 10816  003218  D83F               	call	PL82	;call to abstracted procedure
 10817  00321A  EC78  F026         	call	_getCANFrame
 10818  00321E  0900               	iorlw	0
 10819  003220  E1C9               	bnz	l12142
 10820  003222                     l12180:
 10821                           
 10822                           ; BSR set to: 0
 10823                           ;main.c: 1936: sendEscapedUartData(0, &crc);
 10824  003222  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10825  003224  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10826  003226  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10827  003228  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10828  00322A  0E00               	movlw	0
 10829  00322C  EC60  F028         	call	_sendEscapedUartData
 10830                           
 10831                           ;main.c: 1937: sendEscapedUartData(pos, &crc);
 10832  003230  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10833  003232  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10834  003234  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10835  003236  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10836  003238  5182               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10837  00323A  EC60  F028         	call	_sendEscapedUartData
 10838                           
 10839                           ; BSR set to: 0
 10840                           ;main.c: 1940: for (i = 0; i < pos; i++) {
 10841  00323E  6B7B               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 10842  003240  D010               	goto	l12188
 10843  003242                     l12184:
 10844                           
 10845                           ; BSR set to: 0
 10846                           ;main.c: 1941: sendEscapedUartData( wrkbuf[ i ], &crc);
 10847  003242  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10848  003244  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10849  003246  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10850  003248  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10851  00324A  0E54               	movlw	low _wrkbuf
 10852  00324C  0100               	movlb	0	; () banked
 10853  00324E  257B               	addwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10854  003250  6ED9               	movwf	fsr2l,c
 10855  003252  6ADA               	clrf	fsr2h,c
 10856  003254  0101               	movlb	1	; () banked
 10857  003256  0E01               	movlw	high _wrkbuf
 10858  003258  22DA               	addwfc	fsr2h,f,c
 10859  00325A  50DF               	movf	indf2,w,c
 10860  00325C  EC60  F028         	call	_sendEscapedUartData
 10861                           
 10862                           ; BSR set to: 0
 10863  003260  2B7B               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 10864  003262                     l12188:
 10865                           
 10866                           ; BSR set to: 0
 10867  003262  5182               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10868  003264  5D7B               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10869  003266  E3ED               	bnc	l12184
 10870                           
 10871                           ; BSR set to: 0
 10872                           ;main.c: 1942: }
 10873                           ;main.c: 1945: sendEscapedUartData(crc, (0));
 10874  003268  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10875  00326A  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10876  00326C  5181               	movf	receiveSendMultiEventCANAL@crc& (0+255),w,b
 10877  00326E  EC60  F028         	call	_sendEscapedUartData
 10878  003272                     l967:
 10879                           
 10880                           ; BSR set to: 0
 10881  003272  A2AC               	btfss	4012,1,c	;volatile
 10882  003274  D7FE               	goto	l967
 10883                           
 10884                           ; BSR set to: 0
 10885                           ;main.c: 1949: WriteUSART(0x10);
 10886  003276  0E10               	movlw	16
 10887  003278  ECB9  F02B         	call	_WriteUSART
 10888  00327C                     l970:
 10889  00327C  A2AC               	btfss	4012,1,c	;volatile
 10890  00327E  D7FE               	goto	l970
 10891                           
 10892                           ;main.c: 1951: WriteUSART(0x03);
 10893  003280  0E03               	movlw	3
 10894  003282  ECB9  F02B         	call	_WriteUSART
 10895  003286                     l973:
 10896  003286  0012               	return	
 10897  003288                     __end_of_receiveSendMultiEventCANAL:
 10898                           	opt stack 0
 10899  003288                     PL26:
 10900                           	opt stack 23
 10901  003288  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10902  00328A  0E54               	movlw	low _wrkbuf
 10903  00328C  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10904  00328E  6ED9               	movwf	fsr2l,c
 10905  003290  6ADA               	clrf	fsr2h,c
 10906  003292  0E01               	movlw	high _wrkbuf
 10907  003294  22DA               	addwfc	fsr2h,f,c
 10908  003296  0012               	return	
 10909  003298                     __end_ofPL26:
 10910                           	opt stack 0
 10911  003298                     PL82:
 10912                           	opt stack 23
 10913  003298  6F6E               	movwf	(?_getCANFrame+1)& (0+255),b
 10914  00329A  0E7C               	movlw	low receiveSendMultiEventCANAL@dlc
 10915  00329C  6F6D               	movwf	?_getCANFrame& (0+255),b
 10916  00329E  0E00               	movlw	high receiveSendMultiEventCANAL@data
 10917  0032A0  6F70               	movwf	(?_getCANFrame+3)& (0+255),b
 10918  0032A2  0E72               	movlw	low receiveSendMultiEventCANAL@data
 10919  0032A4  6F6F               	movwf	(?_getCANFrame+2)& (0+255),b
 10920  0032A6  0E7D               	movlw	receiveSendMultiEventCANAL@id& (0+255)
 10921  0032A8  0012               	return	
 10922  0032AA                     __end_ofPL82:
 10923                           	opt stack 0
 10924                           tblptru	equ	0xFF8
 10925                           tblptrh	equ	0xFF7
 10926                           tblptrl	equ	0xFF6
 10927                           tablat	equ	0xFF5
 10928                           prodh	equ	0xFF4
 10929                           prodl	equ	0xFF3
 10930                           intcon	equ	0xFF2
 10931                           indf0	equ	0xFEF
 10932                           postinc0	equ	0xFEE
 10933                           fsr0h	equ	0xFEA
 10934                           fsr0l	equ	0xFE9
 10935                           wreg	equ	0xFE8
 10936                           indf1	equ	0xFE7
 10937                           postinc1	equ	0xFE6
 10938                           postdec1	equ	0xFE5
 10939                           fsr1h	equ	0xFE2
 10940                           fsr1l	equ	0xFE1
 10941                           indf2	equ	0xFDF
 10942                           postinc2	equ	0xFDE
 10943                           postdec2	equ	0xFDD
 10944                           plusw2	equ	0xFDB
 10945                           fsr2h	equ	0xFDA
 10946                           fsr2l	equ	0xFD9
 10947                           status	equ	0xFD8
 10948                           
 10949 ;; *************** function _sendEscapedUartData *****************
 10950 ;; Defined at:
 10951 ;;		line 1517 in file "main.c"
 10952 ;; Parameters:    Size  Location     Type
 10953 ;;  c               1    wreg     unsigned char 
 10954 ;;  pcrc            2   12[BANK0 ] PTR unsigned char 
 10955 ;;		 -> sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), receiveSendEven
      +tCANAL@crc(1), 
 10956 ;;		 -> sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame
      +@crc(1), 
 10957 ;;		 -> NULL(0), 
 10958 ;; Auto vars:     Size  Location     Type
 10959 ;;  c               1   14[BANK0 ] unsigned char 
 10960 ;; Return value:  Size  Location     Type
 10961 ;;		None               void
 10962 ;; Registers used:
 10963 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10964 ;; Tracked objects:
 10965 ;;		On entry : E/1
 10966 ;;		On exit  : F/0
 10967 ;;		Unchanged: 0/0
 10968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10969 ;;      Params:         0       2       0       0       0       0       0
 10970 ;;      Locals:         0       1       0       0       0       0       0
 10971 ;;      Temps:          0       0       0       0       0       0       0
 10972 ;;      Totals:         0       3       0       0       0       0       0
 10973 ;;Total ram usage:        3 bytes
 10974 ;; Hardware stack levels used:    1
 10975 ;; Hardware stack levels required when called:    5
 10976 ;; This function calls:
 10977 ;;		_WriteUSART
 10978 ;;		_crc8
 10979 ;; This function is called by:
 10980 ;;		_sendVSCPDriverErrorFrame
 10981 ;;		_sendVSCPDriverAck
 10982 ;;		_sendVSCPDriverNack
 10983 ;;		_sendVSCPDriverCommandReply
 10984 ;;		_receiveSendEventCANAL
 10985 ;;		_receiveSendMultiEventCANAL
 10986 ;;		_sendVSCPModeCapabilities
 10987 ;; This function uses a non-reentrant model
 10988 ;;
 10989                           
 10990                           	psect	text19
 10991  0050C0                     __ptext19:
 10992                           	opt stack 0
 10993  0050C0                     _sendEscapedUartData:
 10994                           	opt stack 23
 10995                           
 10996                           ;incstack = 0
 10997                           ;incstack = 0
 10998                           ;sendEscapedUartData@c stored from wreg
 10999  0050C0  CFE8 F06E          	movff	wreg,sendEscapedUartData@c
 11000                           
 11001                           ;main.c: 1518: if (0x10 == c) {
 11002  0050C4  0100               	movlb	0	; () banked
 11003  0050C6  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11004  0050C8  0A10               	xorlw	16
 11005  0050CA  E117               	bnz	l764
 11006  0050CC                     l756:
 11007  0050CC  A2AC               	btfss	4012,1,c	;volatile
 11008  0050CE  D7FE               	goto	l756
 11009                           
 11010                           ;main.c: 1521: WriteUSART(0x10);
 11011  0050D0  0E10               	movlw	16
 11012  0050D2  ECB9  F02B         	call	_WriteUSART
 11013  0050D6                     l759:
 11014  0050D6  A2AC               	btfss	4012,1,c	;volatile
 11015  0050D8  D7FE               	goto	l759
 11016                           
 11017                           ;main.c: 1525: WriteUSART(0x10);
 11018  0050DA  0E10               	movlw	16
 11019  0050DC  ECB9  F02B         	call	_WriteUSART
 11020                           
 11021                           ;main.c: 1526: if ((0) != pcrc) crc8(pcrc, 0x10);
 11022  0050E0  0100               	movlb	0	; () banked
 11023  0050E2  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11024  0050E4  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11025  0050E6  E01B               	bz	l768
 11026                           
 11027                           ; BSR set to: 0
 11028  0050E8  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11029  0050EC  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11030  0050F0  0E10               	movlw	16
 11031  0050F2  6F69               	movwf	(?_crc8+2)& (0+255),b
 11032  0050F4  ECE6  F02A         	call	_crc8	;wreg free
 11033  0050F8  D012               	goto	l768
 11034  0050FA                     l764:
 11035  0050FA  A2AC               	btfss	4012,1,c	;volatile
 11036  0050FC  D7FE               	goto	l764
 11037                           
 11038                           ;main.c: 1532: WriteUSART(c);
 11039  0050FE  0100               	movlb	0	; () banked
 11040  005100  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11041  005102  ECB9  F02B         	call	_WriteUSART
 11042                           
 11043                           ;main.c: 1533: if ((0) != pcrc) crc8(pcrc, c);
 11044  005106  0100               	movlb	0	; () banked
 11045  005108  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11046  00510A  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11047  00510C  E008               	bz	l768
 11048                           
 11049                           ; BSR set to: 0
 11050  00510E  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11051  005112  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11052  005116  C06E  F069         	movff	sendEscapedUartData@c,?_crc8+2
 11053  00511A  ECE6  F02A         	call	_crc8	;wreg free
 11054  00511E                     l768:
 11055                           
 11056                           ; BSR set to: 0
 11057  00511E  0012               	return	
 11058  005120                     __end_of_sendEscapedUartData:
 11059                           	opt stack 0
 11060                           tblptru	equ	0xFF8
 11061                           tblptrh	equ	0xFF7
 11062                           tblptrl	equ	0xFF6
 11063                           tablat	equ	0xFF5
 11064                           prodh	equ	0xFF4
 11065                           prodl	equ	0xFF3
 11066                           intcon	equ	0xFF2
 11067                           indf0	equ	0xFEF
 11068                           postinc0	equ	0xFEE
 11069                           fsr0h	equ	0xFEA
 11070                           fsr0l	equ	0xFE9
 11071                           wreg	equ	0xFE8
 11072                           indf1	equ	0xFE7
 11073                           postinc1	equ	0xFE6
 11074                           postdec1	equ	0xFE5
 11075                           fsr1h	equ	0xFE2
 11076                           fsr1l	equ	0xFE1
 11077                           indf2	equ	0xFDF
 11078                           postinc2	equ	0xFDE
 11079                           postdec2	equ	0xFDD
 11080                           plusw2	equ	0xFDB
 11081                           fsr2h	equ	0xFDA
 11082                           fsr2l	equ	0xFD9
 11083                           status	equ	0xFD8
 11084                           
 11085 ;; *************** function _crc8 *****************
 11086 ;; Defined at:
 11087 ;;		line 47 in file "crc8.c"
 11088 ;; Parameters:    Size  Location     Type
 11089 ;;  crc             2    7[BANK0 ] PTR unsigned char 
 11090 ;;		 -> calcCRC@crc(1), sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), 
 11091 ;;		 -> receiveSendEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@cr
      +c(1), 
 11092 ;;		 -> sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 11093 ;;  m               1    9[BANK0 ] unsigned char 
 11094 ;; Auto vars:     Size  Location     Type
 11095 ;;		None
 11096 ;; Return value:  Size  Location     Type
 11097 ;;		None               void
 11098 ;; Registers used:
 11099 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11100 ;; Tracked objects:
 11101 ;;		On entry : F/0
 11102 ;;		On exit  : F/0
 11103 ;;		Unchanged: 0/0
 11104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11105 ;;      Params:         0       3       0       0       0       0       0
 11106 ;;      Locals:         0       0       0       0       0       0       0
 11107 ;;      Temps:          0       2       0       0       0       0       0
 11108 ;;      Totals:         0       5       0       0       0       0       0
 11109 ;;Total ram usage:        5 bytes
 11110 ;; Hardware stack levels used:    1
 11111 ;; Hardware stack levels required when called:    4
 11112 ;; This function calls:
 11113 ;;		_init_crc8
 11114 ;; This function is called by:
 11115 ;;		_sendEscapedUartData
 11116 ;;		_sendVSCPDriverErrorFrame
 11117 ;;		_sendVSCPDriverAck
 11118 ;;		_sendVSCPDriverNack
 11119 ;;		_sendVSCPDriverCommandReply
 11120 ;;		_receiveSendEventCANAL
 11121 ;;		_receiveSendMultiEventCANAL
 11122 ;;		_sendVSCPModeCapabilities
 11123 ;;		_calcCRC
 11124 ;; This function uses a non-reentrant model
 11125 ;;
 11126                           
 11127                           	psect	text20
 11128  0055CC                     __ptext20:
 11129                           	opt stack 0
 11130  0055CC                     _crc8:
 11131                           	opt stack 24
 11132                           
 11133                           ; BSR set to: 0
 11134                           ;crc8.c: 48: if ( !made_table ) {
 11135                           
 11136                           ; BSR set to: 0
 11137                           ;incstack = 0
 11138                           ;incstack = 0
 11139  0055CC  5038               	movf	_made_table+1,w,c
 11140  0055CE  1037               	iorwf	_made_table,w,c
 11141  0055D0  B4D8               	btfsc	status,2,c
 11142                           
 11143                           ; BSR set to: 0
 11144                           ;crc8.c: 49: init_crc8();
 11145  0055D2  EC65  F027         	call	_init_crc8	;wreg free
 11146                           
 11147                           ; BSR set to: 0
 11148                           ;crc8.c: 50: }
 11149                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 11150  0055D6  C067  FFD9         	movff	crc8@crc,fsr2l
 11151  0055DA  C068  FFDA         	movff	crc8@crc+1,fsr2h
 11152  0055DE  50DF               	movf	indf2,w,c
 11153  0055E0  1969               	xorwf	crc8@m& (0+255),w,b
 11154  0055E2  6F6A               	movwf	??_crc8& (0+255),b
 11155  0055E4  6B6B               	clrf	(??_crc8+1)& (0+255),b
 11156  0055E6  0E00               	movlw	low _crc8_table
 11157  0055E8  0100               	movlb	0	; () banked
 11158  0055EA  256A               	addwf	??_crc8& (0+255),w,b
 11159  0055EC  6ED9               	movwf	fsr2l,c
 11160  0055EE  0E03               	movlw	high _crc8_table
 11161  0055F0  216B               	addwfc	(??_crc8+1)& (0+255),w,b
 11162  0055F2  6EDA               	movwf	fsr2h,c
 11163  0055F4  C067  FFE1         	movff	crc8@crc,fsr1l
 11164  0055F8  C068  FFE2         	movff	crc8@crc+1,fsr1h
 11165  0055FC  CFDF FFE7          	movff	indf2,indf1
 11166                           
 11167                           ; BSR set to: 0
 11168  005600  0012               	return	
 11169  005602                     __end_of_crc8:
 11170                           	opt stack 0
 11171                           tblptru	equ	0xFF8
 11172                           tblptrh	equ	0xFF7
 11173                           tblptrl	equ	0xFF6
 11174                           tablat	equ	0xFF5
 11175                           prodh	equ	0xFF4
 11176                           prodl	equ	0xFF3
 11177                           intcon	equ	0xFF2
 11178                           indf0	equ	0xFEF
 11179                           postinc0	equ	0xFEE
 11180                           fsr0h	equ	0xFEA
 11181                           fsr0l	equ	0xFE9
 11182                           wreg	equ	0xFE8
 11183                           indf1	equ	0xFE7
 11184                           postinc1	equ	0xFE6
 11185                           postdec1	equ	0xFE5
 11186                           fsr1h	equ	0xFE2
 11187                           fsr1l	equ	0xFE1
 11188                           indf2	equ	0xFDF
 11189                           postinc2	equ	0xFDE
 11190                           postdec2	equ	0xFDD
 11191                           plusw2	equ	0xFDB
 11192                           fsr2h	equ	0xFDA
 11193                           fsr2l	equ	0xFD9
 11194                           status	equ	0xFD8
 11195                           
 11196 ;; *************** function _init_crc8 *****************
 11197 ;; Defined at:
 11198 ;;		line 25 in file "crc8.c"
 11199 ;; Parameters:    Size  Location     Type
 11200 ;;		None
 11201 ;; Auto vars:     Size  Location     Type
 11202 ;;  i               2    5[BANK0 ] int 
 11203 ;;  j               2    2[BANK0 ] int 
 11204 ;;  crc             1    4[BANK0 ] unsigned char 
 11205 ;; Return value:  Size  Location     Type
 11206 ;;		None               void
 11207 ;; Registers used:
 11208 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11209 ;; Tracked objects:
 11210 ;;		On entry : F/0
 11211 ;;		On exit  : F/0
 11212 ;;		Unchanged: 0/0
 11213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11214 ;;      Params:         0       0       0       0       0       0       0
 11215 ;;      Locals:         0       7       0       0       0       0       0
 11216 ;;      Temps:          0       0       0       0       0       0       0
 11217 ;;      Totals:         0       7       0       0       0       0       0
 11218 ;;Total ram usage:        7 bytes
 11219 ;; Hardware stack levels used:    1
 11220 ;; Hardware stack levels required when called:    3
 11221 ;; This function calls:
 11222 ;;		Nothing
 11223 ;; This function is called by:
 11224 ;;		_main
 11225 ;;		_crc8
 11226 ;; This function uses a non-reentrant model
 11227 ;;
 11228                           
 11229                           	psect	text21
 11230  004ECA                     __ptext21:
 11231                           	opt stack 0
 11232  004ECA                     _init_crc8:
 11233                           	opt stack 24
 11234                           
 11235                           ; BSR set to: 0
 11236                           ;crc8.c: 26: int i,j;
 11237                           ;crc8.c: 27: unsigned char crc;
 11238                           ;crc8.c: 29: if (!made_table) {
 11239                           
 11240                           ; BSR set to: 0
 11241                           ;incstack = 0
 11242                           ;incstack = 0
 11243  004ECA  5038               	movf	_made_table+1,w,c
 11244  004ECC  1037               	iorwf	_made_table,w,c
 11245  004ECE  E131               	bnz	l1572
 11246                           
 11247                           ; BSR set to: 0
 11248                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 11249  004ED0  6B65               	clrf	init_crc8@i& (0+255),b
 11250  004ED2  6B66               	clrf	(init_crc8@i+1)& (0+255),b
 11251  004ED4                     l1564:
 11252                           
 11253                           ; BSR set to: 0
 11254                           ;crc8.c: 31: crc = i;
 11255  004ED4  C065  F064         	movff	init_crc8@i,init_crc8@crc
 11256                           
 11257                           ;crc8.c: 32: for (j=0; j<8; j++) {
 11258  004ED8  6B62               	clrf	init_crc8@j& (0+255),b
 11259  004EDA  6B63               	clrf	(init_crc8@j+1)& (0+255),b
 11260  004EDC                     l1566:
 11261                           
 11262                           ; BSR set to: 0
 11263                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 11264  004EDC  BF64               	btfsc	init_crc8@crc& (0+255),7,b
 11265  004EDE  D003               	goto	l9910
 11266                           
 11267                           ; BSR set to: 0
 11268  004EE0  6B60               	clrf	_init_crc8$2082& (0+255),b
 11269  004EE2  6B61               	clrf	(_init_crc8$2082+1)& (0+255),b
 11270  004EE4  D003               	goto	l9912
 11271  004EE6                     l9910:
 11272                           
 11273                           ; BSR set to: 0
 11274  004EE6  6B61               	clrf	(_init_crc8$2082+1)& (0+255),b
 11275  004EE8  0E07               	movlw	7
 11276  004EEA  6F60               	movwf	_init_crc8$2082& (0+255),b
 11277  004EEC                     l9912:
 11278                           
 11279                           ; BSR set to: 0
 11280  004EEC  5164               	movf	init_crc8@crc& (0+255),w,b
 11281  004EEE  2564               	addwf	init_crc8@crc& (0+255),w,b
 11282  004EF0  1960               	xorwf	_init_crc8$2082& (0+255),w,b
 11283  004EF2  6F64               	movwf	init_crc8@crc& (0+255),b
 11284                           
 11285                           ; BSR set to: 0
 11286  004EF4  4B62               	infsnz	init_crc8@j& (0+255),f,b
 11287  004EF6  2B63               	incf	(init_crc8@j+1)& (0+255),f,b
 11288                           
 11289                           ; BSR set to: 0
 11290  004EF8  5163               	movf	(init_crc8@j+1)& (0+255),w,b
 11291  004EFA  0A80               	xorlw	128
 11292  004EFC  0F80               	addlw	-128
 11293  004EFE  0E08               	movlw	8
 11294  004F00  B4D8               	btfsc	status,2,c
 11295  004F02  5D62               	subwf	init_crc8@j& (0+255),w,b
 11296  004F04  E3EB               	bnc	l1566
 11297                           
 11298                           ; BSR set to: 0
 11299                           ;crc8.c: 34: }
 11300                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 11301  004F06  0E00               	movlw	low _crc8_table
 11302  004F08  0100               	movlb	0	; () banked
 11303  004F0A  2565               	addwf	init_crc8@i& (0+255),w,b
 11304  004F0C  6ED9               	movwf	fsr2l,c
 11305  004F0E  0E03               	movlw	high _crc8_table
 11306  004F10  2166               	addwfc	(init_crc8@i+1)& (0+255),w,b
 11307  004F12  6EDA               	movwf	fsr2h,c
 11308  004F14  C064  FFDF         	movff	init_crc8@crc,indf2
 11309                           
 11310                           ; BSR set to: 0
 11311  004F18  4B65               	infsnz	init_crc8@i& (0+255),f,b
 11312  004F1A  2B66               	incf	(init_crc8@i+1)& (0+255),f,b
 11313                           
 11314                           ; BSR set to: 0
 11315  004F1C  5166               	movf	(init_crc8@i+1)& (0+255),w,b
 11316  004F1E  0A80               	xorlw	128
 11317  004F20  0F7F               	addlw	-129
 11318  004F22  0E00               	movlw	0
 11319  004F24  B4D8               	btfsc	status,2,c
 11320  004F26  5D65               	subwf	init_crc8@i& (0+255),w,b
 11321  004F28  E3D5               	bnc	l1564
 11322                           
 11323                           ; BSR set to: 0
 11324                           ;crc8.c: 37: }
 11325                           ;crc8.c: 38: made_table=1;
 11326  004F2A  0E00               	movlw	0
 11327  004F2C  6E38               	movwf	_made_table+1,c
 11328  004F2E  0E01               	movlw	1
 11329  004F30  6E37               	movwf	_made_table,c
 11330  004F32                     l1572:
 11331                           
 11332                           ; BSR set to: 0
 11333  004F32  0012               	return	
 11334  004F34                     __end_of_init_crc8:
 11335                           	opt stack 0
 11336                           tblptru	equ	0xFF8
 11337                           tblptrh	equ	0xFF7
 11338                           tblptrl	equ	0xFF6
 11339                           tablat	equ	0xFF5
 11340                           prodh	equ	0xFF4
 11341                           prodl	equ	0xFF3
 11342                           intcon	equ	0xFF2
 11343                           indf0	equ	0xFEF
 11344                           postinc0	equ	0xFEE
 11345                           fsr0h	equ	0xFEA
 11346                           fsr0l	equ	0xFE9
 11347                           wreg	equ	0xFE8
 11348                           indf1	equ	0xFE7
 11349                           postinc1	equ	0xFE6
 11350                           postdec1	equ	0xFE5
 11351                           fsr1h	equ	0xFE2
 11352                           fsr1l	equ	0xFE1
 11353                           indf2	equ	0xFDF
 11354                           postinc2	equ	0xFDE
 11355                           postdec2	equ	0xFDD
 11356                           plusw2	equ	0xFDB
 11357                           fsr2h	equ	0xFDA
 11358                           fsr2l	equ	0xFD9
 11359                           status	equ	0xFD8
 11360                           
 11361 ;; *************** function _doModeVerbose *****************
 11362 ;; Defined at:
 11363 ;;		line 492 in file "main.c"
 11364 ;; Parameters:    Size  Location     Type
 11365 ;;		None
 11366 ;; Auto vars:     Size  Location     Type
 11367 ;;  preg            2    6[BANK2 ] PTR unsigned char 
 11368 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 11369 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 11370 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 11371 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 11372 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11373 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11374 ;;  preg            2    4[BANK2 ] PTR unsigned char 
 11375 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 11376 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 11377 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 11378 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 11379 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11380 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11381 ;;  id              4   35[BANK2 ] unsigned long 
 11382 ;;  p               2   59[BANK2 ] PTR unsigned char 
 11383 ;;		 -> NULL(0), cmdbuf(80), 
 11384 ;;  mask_class      2   10[BANK2 ] unsigned short 
 11385 ;;  maskno          1   40[BANK2 ] unsigned char 
 11386 ;;  mask_nodeid     1   19[BANK2 ] unsigned char 
 11387 ;;  mask_type       1   18[BANK2 ] unsigned char 
 11388 ;;  mask_priorit    1   17[BANK2 ] unsigned char 
 11389 ;;  id              4    0[BANK2 ] unsigned long 
 11390 ;;  p               2   57[BANK2 ] PTR unsigned char 
 11391 ;;		 -> NULL(0), cmdbuf(80), 
 11392 ;;  filter_class    2    8[BANK2 ] unsigned short 
 11393 ;;  filterno        1   39[BANK2 ] unsigned char 
 11394 ;;  filter_nodei    1   16[BANK2 ] unsigned char 
 11395 ;;  filter_type     1   15[BANK2 ] unsigned char 
 11396 ;;  filter_prior    1   14[BANK2 ] unsigned char 
 11397 ;;  nodeid          1   47[BANK2 ] unsigned char 
 11398 ;;  p               2   52[BANK2 ] PTR unsigned char 
 11399 ;;		 -> NULL(0), cmdbuf(80), 
 11400 ;;  value           1   41[BANK2 ] unsigned char 
 11401 ;;  reg             1   34[BANK2 ] unsigned char 
 11402 ;;  page            1   33[BANK2 ] unsigned char 
 11403 ;;  nodeid          1   13[BANK2 ] unsigned char 
 11404 ;;  p               2   50[BANK2 ] PTR unsigned char 
 11405 ;;		 -> NULL(0), cmdbuf(80), 
 11406 ;;  value           1   49[BANK2 ] unsigned char 
 11407 ;;  i               1   48[BANK2 ] unsigned char 
 11408 ;;  reg             1   46[BANK2 ] unsigned char 
 11409 ;;  page            1   45[BANK2 ] unsigned char 
 11410 ;;  count           1   43[BANK2 ] unsigned char 
 11411 ;;  rv              1   32[BANK2 ] enum E15660
 11412 ;;  nodeid          1   12[BANK2 ] unsigned char 
 11413 ;;  p               2   55[BANK2 ] PTR unsigned char 
 11414 ;;		 -> NULL(0), cmdbuf(80), 
 11415 ;;  ifmode          1   54[BANK2 ] enum E16362
 11416 ;;  c               1   44[BANK2 ] unsigned char 
 11417 ;;  i               1   42[BANK2 ] unsigned char 
 11418 ;; Return value:  Size  Location     Type
 11419 ;;		None               void
 11420 ;; Registers used:
 11421 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11422 ;; Tracked objects:
 11423 ;;		On entry : 0/0
 11424 ;;		On exit  : 0/0
 11425 ;;		Unchanged: 0/0
 11426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11427 ;;      Params:         0       0       0       0       0       0       0
 11428 ;;      Locals:         0       0       0      61       0       0       0
 11429 ;;      Temps:          0       0      20       0       0       0       0
 11430 ;;      Totals:         0       0      20      61       0       0       0
 11431 ;;Total ram usage:       81 bytes
 11432 ;; Hardware stack levels used:    1
 11433 ;; Hardware stack levels required when called:   10
 11434 ;; This function calls:
 11435 ;;		_putsUSART
 11436 ;;		_printFirmwareVersion
 11437 ;;		_fifo_read
 11438 ;;		_writeEEPROM
 11439 ;;		_receivePrintEventVerbose
 11440 ;;		_stristr
 11441 ;;		_ECANSetOperationMode
 11442 ;;		_strtok
 11443 ;;		_atoi
 11444 ;;		_memset
 11445 ;;		_sendVSCPFrame
 11446 ;;		_printStatistics
 11447 ;;		_printErrors
 11448 ;;		_printHelp
 11449 ;;		_findNodes
 11450 ;;		_strcpy
 11451 ;;		_strchr
 11452 ;;		_readRegisterExtended
 11453 ;;		_sprintf
 11454 ;;		_WriteUSART
 11455 ;;		_printBinary
 11456 ;;		_writeRegisterExtended
 11457 ;;		_printNodeFirmwareVersion
 11458 ;;		_printGUID
 11459 ;;		_printMDF
 11460 ;;		_setFilter
 11461 ;;		__CANIDToRegs
 11462 ;; This function is called by:
 11463 ;;		_main
 11464 ;; This function uses a non-reentrant model
 11465 ;;
 11466                           
 11467                           	psect	text22
 11468  00026C                     __ptext22:
 11469                           	opt stack 0
 11470  00026C                     _doModeVerbose:
 11471                           	opt stack 20
 11472                           
 11473                           ;main.c: 493: uint8_t c;
 11474                           ;main.c: 494: uint8_t i;
 11475                           ;main.c: 497: if (!bSilent) {
 11476                           
 11477                           ; BSR set to: 0
 11478                           ;incstack = 0
 11479                           ;incstack = 0
 11480  00026C  0101               	movlb	1	; () banked
 11481  00026E  6701               	tstfsz	_bSilent& (0+255),b
 11482  000270  D002               	goto	l10040
 11483                           
 11484                           ; BSR set to: 1
 11485                           ;main.c: 498: receivePrintEventVerbose();
 11486  000272  ECEA  F011         	call	_receivePrintEventVerbose	;wreg free
 11487  000276                     l10040:
 11488                           
 11489                           ;main.c: 499: }
 11490                           ;main.c: 502: (INTCONbits.GIE = 0);
 11491  000276  9EF2               	bcf	intcon,7,c	;volatile
 11492                           
 11493                           ;main.c: 504: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
 11494  000278  0E02               	movlw	high doModeVerbose@c
 11495  00027A  0100               	movlb	0	; () banked
 11496  00027C  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 11497  00027E  0EAC               	movlw	low doModeVerbose@c
 11498  000280  6F60               	movwf	?_fifo_read& (0+255),b
 11499  000282  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 11500  000284  0E01               	movlw	1
 11501  000286  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 11502  000288  0E48               	movlw	_serialInputFifo& (0+255)
 11503  00028A  EC90  F021         	call	_fifo_read
 11504  00028E  0560               	decf	?_fifo_read& (0+255),w,b
 11505  000290  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 11506  000292  E002 EF7E  F00A    	bnz	l10656
 11507                           
 11508                           ; BSR set to: 0
 11509                           ;main.c: 507: (INTCONbits.GIE = 1);
 11510  000298  8EF2               	bsf	intcon,7,c	;volatile
 11511                           
 11512                           ; BSR set to: 0
 11513                           ;main.c: 510: cmdbuf[ pos ] = c;
 11514  00029A  EC17  F016         	call	PL20	;call to abstracted procedure
 11515  00029E  C2AC  FFDF         	movff	doModeVerbose@c,indf2
 11516                           
 11517                           ; BSR set to: 2
 11518                           ;main.c: 511: pos++;
 11519  0002A2  2B02               	incf	_pos& (0+255),f,b
 11520                           
 11521                           ; BSR set to: 1
 11522                           ;main.c: 513: if (pos >= 128u) {
 11523  0002A4  0E7F               	movlw	127
 11524  0002A6  6502               	cpfsgt	_pos& (0+255),b
 11525  0002A8  D001               	goto	l10054
 11526                           
 11527                           ; BSR set to: 1
 11528                           ;main.c: 517: pos = 0;
 11529  0002AA  6B02               	clrf	_pos& (0+255),b
 11530  0002AC                     l10054:
 11531                           
 11532                           ; BSR set to: 1
 11533                           ;main.c: 519: }
 11534                           ;main.c: 522: if (0x0d == c) {
 11535  0002AC  0102               	movlb	2	; () banked
 11536  0002AE  51AC               	movf	doModeVerbose@c& (0+255),w,b
 11537  0002B0  0A0D               	xorlw	13
 11538  0002B2  E002 EF7E  F00A    	bnz	l10656
 11539                           
 11540                           ; BSR set to: 2
 11541                           ;main.c: 524: cmdbuf[ pos ] = 0;
 11542  0002B8  EC17  F016         	call	PL20	;call to abstracted procedure
 11543  0002BC  6ADF               	clrf	indf2,c
 11544                           
 11545                           ; BSR set to: 1
 11546                           ;main.c: 527: if (cmdbuf == stristr(cmdbuf, "BOOT")) {
 11547  0002BE  0100               	movlb	0	; () banked
 11548  0002C0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11549  0002C2  0E04               	movlw	low _cmdbuf
 11550  0002C4  6F6D               	movwf	?_stristr& (0+255),b
 11551  0002C6  0E7F               	movlw	high STR_6
 11552  0002C8  6F70               	movwf	(?_stristr+3)& (0+255),b
 11553  0002CA  0ECF               	movlw	low STR_6
 11554  0002CC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11555  0002CE  EC3C  F026         	call	_stristr	;wreg free
 11556  0002D2  EC80  F00A         	call	PL2	;call to abstracted procedure
 11557  0002D6  E104               	bnz	u12165
 11558  0002D8  0100               	movlb	0	; () banked
 11559  0002DA  516D               	movf	?_stristr& (0+255),w,b
 11560  0002DC  0101               	movlb	1	; () banked
 11561  0002DE  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11562  0002E0                     u12165:
 11563  0002E0  E111               	bnz	l10064
 11564                           
 11565                           ; BSR set to: 1
 11566                           ;main.c: 528: putsUSART((char *) "Will enter bootloader now...\r\n");
 11567  0002E2  0E7A               	movlw	high STR_7
 11568  0002E4  0100               	movlb	0	; () banked
 11569  0002E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11570  0002E8  0EEC               	movlw	low STR_7
 11571  0002EA  6F61               	movwf	?_putsUSART& (0+255),b
 11572  0002EC  ECEA  F028         	call	_putsUSART	;wreg free
 11573                           
 11574                           ;main.c: 529: writeEEPROM(0x00, 0xFF);
 11575  0002F0  0100               	movlb	0	; () banked
 11576  0002F2  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 11577  0002F4  6B60               	clrf	?_writeEEPROM& (0+255),b
 11578  0002F6  0EFF               	movlw	255
 11579  0002F8  6962               	setf	(?_writeEEPROM+2)& (0+255),b
 11580  0002FA  EC60  F02B         	call	_writeEEPROM	;wreg free
 11581  0002FE  00FF               	reset		;# 
 11582                           
 11583                           ;main.c: 531: }
 11584  000300  EF70  F00A         	goto	l10652
 11585  000304                     l10064:
 11586                           
 11587                           ; BSR set to: 1
 11588                           ;main.c: 533: else if (cmdbuf == stristr(cmdbuf, "OPEN")) {
 11589  000304  0E01               	movlw	high _cmdbuf
 11590  000306  0100               	movlb	0	; () banked
 11591  000308  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11592  00030A  0E04               	movlw	low _cmdbuf
 11593  00030C  6F6D               	movwf	?_stristr& (0+255),b
 11594  00030E  0E7F               	movlw	high STR_8
 11595  000310  6F70               	movwf	(?_stristr+3)& (0+255),b
 11596  000312  0EB6               	movlw	low STR_8
 11597  000314  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11598  000316  EC3C  F026         	call	_stristr	;wreg free
 11599  00031A  EC80  F00A         	call	PL2	;call to abstracted procedure
 11600  00031E  E104               	bnz	u12175
 11601  000320  0100               	movlb	0	; () banked
 11602  000322  516D               	movf	?_stristr& (0+255),w,b
 11603  000324  0101               	movlb	1	; () banked
 11604  000326  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11605  000328                     u12175:
 11606  000328  E10C               	bnz	l10072
 11607                           
 11608                           ; BSR set to: 1
 11609                           ;main.c: 534: bSilent = 0;
 11610  00032A  6B01               	clrf	_bSilent& (0+255),b
 11611                           
 11612                           ; BSR set to: 1
 11613                           ;main.c: 535: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11614  00032C  0E00               	movlw	0
 11615  00032E  ECA1  F02B         	call	_ECANSetOperationMode
 11616                           
 11617                           ; BSR set to: 0
 11618                           ;main.c: 536: putsUSART((char *) "+OK\r\n");
 11619  000332  0E7F               	movlw	high STR_9
 11620  000334  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11621  000336  0E7F               	movlw	low STR_9
 11622  000338  6F61               	movwf	?_putsUSART& (0+255),b
 11623  00033A  ECEA  F028         	call	_putsUSART	;wreg free
 11624                           
 11625                           ;main.c: 537: }
 11626  00033E  EF70  F00A         	goto	l10652
 11627  000342                     l10072:
 11628                           
 11629                           ; BSR set to: 1
 11630                           ;main.c: 539: else if (cmdbuf == stristr(cmdbuf, "SILENT")) {
 11631  000342  0E01               	movlw	high _cmdbuf
 11632  000344  0100               	movlb	0	; () banked
 11633  000346  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11634  000348  0E04               	movlw	low _cmdbuf
 11635  00034A  6F6D               	movwf	?_stristr& (0+255),b
 11636  00034C  0E7F               	movlw	high STR_10
 11637  00034E  6F70               	movwf	(?_stristr+3)& (0+255),b
 11638  000350  0E5D               	movlw	low STR_10
 11639  000352  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11640  000354  EC3C  F026         	call	_stristr	;wreg free
 11641  000358  EC80  F00A         	call	PL2	;call to abstracted procedure
 11642  00035C  E104               	bnz	u12185
 11643  00035E  0100               	movlb	0	; () banked
 11644  000360  516D               	movf	?_stristr& (0+255),w,b
 11645  000362  0101               	movlb	1	; () banked
 11646  000364  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11647  000366                     u12185:
 11648  000366  E10D               	bnz	l10080
 11649                           
 11650                           ; BSR set to: 1
 11651                           ;main.c: 540: bSilent = 1;
 11652  000368  0E01               	movlw	1
 11653  00036A  6F01               	movwf	_bSilent& (0+255),b
 11654                           
 11655                           ; BSR set to: 1
 11656                           ;main.c: 541: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11657  00036C  0E00               	movlw	0
 11658  00036E  ECA1  F02B         	call	_ECANSetOperationMode
 11659                           
 11660                           ; BSR set to: 0
 11661                           ;main.c: 542: putsUSART((char *) "+OK\r\n");
 11662  000372  0E7F               	movlw	high STR_9
 11663  000374  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11664  000376  0E7F               	movlw	low STR_9
 11665  000378  6F61               	movwf	?_putsUSART& (0+255),b
 11666  00037A  ECEA  F028         	call	_putsUSART	;wreg free
 11667                           
 11668                           ;main.c: 543: }
 11669  00037E  EF70  F00A         	goto	l10652
 11670  000382                     l10080:
 11671                           
 11672                           ; BSR set to: 1
 11673                           ;main.c: 545: else if (cmdbuf == stristr(cmdbuf, "CLOSE")) {
 11674  000382  0E01               	movlw	high _cmdbuf
 11675  000384  0100               	movlb	0	; () banked
 11676  000386  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11677  000388  0E04               	movlw	low _cmdbuf
 11678  00038A  6F6D               	movwf	?_stristr& (0+255),b
 11679  00038C  0E7F               	movlw	high STR_12
 11680  00038E  6F70               	movwf	(?_stristr+3)& (0+255),b
 11681  000390  0E91               	movlw	low STR_12
 11682  000392  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11683  000394  EC3C  F026         	call	_stristr	;wreg free
 11684  000398  EC80  F00A         	call	PL2	;call to abstracted procedure
 11685  00039C  E104               	bnz	u12195
 11686  00039E  0100               	movlb	0	; () banked
 11687  0003A0  516D               	movf	?_stristr& (0+255),w,b
 11688  0003A2  0101               	movlb	1	; () banked
 11689  0003A4  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11690  0003A6                     u12195:
 11691  0003A6  E10D               	bnz	l10088
 11692                           
 11693                           ; BSR set to: 1
 11694                           ;main.c: 546: bSilent = 1;
 11695  0003A8  0E01               	movlw	1
 11696  0003AA  6F01               	movwf	_bSilent& (0+255),b
 11697                           
 11698                           ; BSR set to: 1
 11699                           ;main.c: 547: ECANSetOperationMode(0x20);
 11700  0003AC  0E20               	movlw	32
 11701  0003AE  ECA1  F02B         	call	_ECANSetOperationMode
 11702                           
 11703                           ; BSR set to: 0
 11704                           ;main.c: 548: putsUSART((char *) "+OK\r\n");
 11705  0003B2  0E7F               	movlw	high STR_9
 11706  0003B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11707  0003B6  0E7F               	movlw	low STR_9
 11708  0003B8  6F61               	movwf	?_putsUSART& (0+255),b
 11709  0003BA  ECEA  F028         	call	_putsUSART	;wreg free
 11710                           
 11711                           ;main.c: 549: }
 11712  0003BE  EF70  F00A         	goto	l10652
 11713  0003C2                     l10088:
 11714                           
 11715                           ; BSR set to: 1
 11716                           ;main.c: 551: else if (cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 11717  0003C2  0E01               	movlw	high _cmdbuf
 11718  0003C4  0100               	movlb	0	; () banked
 11719  0003C6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11720  0003C8  0E04               	movlw	low _cmdbuf
 11721  0003CA  6F6D               	movwf	?_stristr& (0+255),b
 11722  0003CC  0E7E               	movlw	high STR_14
 11723  0003CE  6F70               	movwf	(?_stristr+3)& (0+255),b
 11724  0003D0  0ECC               	movlw	low STR_14
 11725  0003D2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11726  0003D4  EC3C  F026         	call	_stristr	;wreg free
 11727  0003D8  EC80  F00A         	call	PL2	;call to abstracted procedure
 11728  0003DC  E104               	bnz	u12205
 11729  0003DE  0100               	movlb	0	; () banked
 11730  0003E0  516D               	movf	?_stristr& (0+255),w,b
 11731  0003E2  0101               	movlb	1	; () banked
 11732  0003E4  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11733  0003E6                     u12205:
 11734  0003E6  E10C               	bnz	l10096
 11735                           
 11736                           ; BSR set to: 1
 11737                           ;main.c: 552: bSilent = 0;
 11738  0003E8  6B01               	clrf	_bSilent& (0+255),b
 11739                           
 11740                           ; BSR set to: 1
 11741                           ;main.c: 553: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 11742  0003EA  0E40               	movlw	64
 11743  0003EC  ECA1  F02B         	call	_ECANSetOperationMode
 11744                           
 11745                           ; BSR set to: 0
 11746                           ;main.c: 554: putsUSART((char *) "+OK\r\n");
 11747  0003F0  0E7F               	movlw	high STR_9
 11748  0003F2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11749  0003F4  0E7F               	movlw	low STR_9
 11750  0003F6  6F61               	movwf	?_putsUSART& (0+255),b
 11751  0003F8  ECEA  F028         	call	_putsUSART	;wreg free
 11752                           
 11753                           ;main.c: 555: }
 11754  0003FC  EF70  F00A         	goto	l10652
 11755  000400                     l10096:
 11756                           
 11757                           ; BSR set to: 1
 11758                           ;main.c: 557: else if (cmdbuf == stristr(cmdbuf, "LISTEN")) {
 11759  000400  0E01               	movlw	high _cmdbuf
 11760  000402  0100               	movlb	0	; () banked
 11761  000404  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11762  000406  0E04               	movlw	low _cmdbuf
 11763  000408  6F6D               	movwf	?_stristr& (0+255),b
 11764  00040A  0E7F               	movlw	high STR_16
 11765  00040C  6F70               	movwf	(?_stristr+3)& (0+255),b
 11766  00040E  0E4F               	movlw	low STR_16
 11767  000410  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11768  000412  EC3C  F026         	call	_stristr	;wreg free
 11769  000416  EC80  F00A         	call	PL2	;call to abstracted procedure
 11770  00041A  E104               	bnz	u12215
 11771  00041C  0100               	movlb	0	; () banked
 11772  00041E  516D               	movf	?_stristr& (0+255),w,b
 11773  000420  0101               	movlb	1	; () banked
 11774  000422  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11775  000424                     u12215:
 11776  000424  E10C               	bnz	l10104
 11777                           
 11778                           ; BSR set to: 1
 11779                           ;main.c: 558: bSilent = 0;
 11780  000426  6B01               	clrf	_bSilent& (0+255),b
 11781                           
 11782                           ; BSR set to: 1
 11783                           ;main.c: 559: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 11784  000428  0E60               	movlw	96
 11785  00042A  ECA1  F02B         	call	_ECANSetOperationMode
 11786                           
 11787                           ; BSR set to: 0
 11788                           ;main.c: 560: putsUSART((char *) "+OK\r\n");
 11789  00042E  0E7F               	movlw	high STR_9
 11790  000430  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11791  000432  0E7F               	movlw	low STR_9
 11792  000434  6F61               	movwf	?_putsUSART& (0+255),b
 11793  000436  ECEA  F028         	call	_putsUSART	;wreg free
 11794                           
 11795                           ;main.c: 561: }
 11796  00043A  EF70  F00A         	goto	l10652
 11797  00043E                     l10104:
 11798                           
 11799                           ; BSR set to: 1
 11800                           ;main.c: 563: else if (cmdbuf == stristr(cmdbuf, "VERSION")) {
 11801  00043E  0E01               	movlw	high _cmdbuf
 11802  000440  0100               	movlb	0	; () banked
 11803  000442  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11804  000444  0E04               	movlw	low _cmdbuf
 11805  000446  6F6D               	movwf	?_stristr& (0+255),b
 11806  000448  0E7F               	movlw	high STR_18
 11807  00044A  6F70               	movwf	(?_stristr+3)& (0+255),b
 11808  00044C  0E0D               	movlw	low STR_18
 11809  00044E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11810  000450  EC3C  F026         	call	_stristr	;wreg free
 11811  000454  EC80  F00A         	call	PL2	;call to abstracted procedure
 11812  000458  E104               	bnz	u12225
 11813  00045A  0100               	movlb	0	; () banked
 11814  00045C  516D               	movf	?_stristr& (0+255),w,b
 11815  00045E  0101               	movlb	1	; () banked
 11816  000460  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11817  000462                     u12225:
 11818  000462  E10B               	bnz	l10110
 11819                           
 11820                           ; BSR set to: 1
 11821                           ;main.c: 564: printFirmwareVersion();
 11822  000464  EC2D  F025         	call	_printFirmwareVersion	;wreg free
 11823                           
 11824                           ;main.c: 565: putsUSART((char *) "+OK\r\n");
 11825  000468  0E7F               	movlw	high STR_9
 11826  00046A  0100               	movlb	0	; () banked
 11827  00046C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11828  00046E  0E7F               	movlw	low STR_9
 11829  000470  6F61               	movwf	?_putsUSART& (0+255),b
 11830  000472  ECEA  F028         	call	_putsUSART	;wreg free
 11831                           
 11832                           ;main.c: 566: }
 11833  000476  EF70  F00A         	goto	l10652
 11834  00047A                     l10110:
 11835                           
 11836                           ; BSR set to: 1
 11837                           ;main.c: 567: else if (cmdbuf == stristr(cmdbuf, "IFMODE")) {
 11838  00047A  0E01               	movlw	high _cmdbuf
 11839  00047C  0100               	movlb	0	; () banked
 11840  00047E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11841  000480  0E04               	movlw	low _cmdbuf
 11842  000482  6F6D               	movwf	?_stristr& (0+255),b
 11843  000484  0E7F               	movlw	high STR_20
 11844  000486  6F70               	movwf	(?_stristr+3)& (0+255),b
 11845  000488  0E48               	movlw	low STR_20
 11846  00048A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11847  00048C  EC3C  F026         	call	_stristr	;wreg free
 11848  000490  EC80  F00A         	call	PL2	;call to abstracted procedure
 11849  000494  E104               	bnz	u12235
 11850  000496  0100               	movlb	0	; () banked
 11851  000498  516D               	movf	?_stristr& (0+255),w,b
 11852  00049A  0101               	movlb	1	; () banked
 11853  00049C  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11854  00049E                     u12235:
 11855  00049E  E169               	bnz	l10146
 11856                           
 11857                           ; BSR set to: 1
 11858                           ;main.c: 568: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 11859  0004A0  506F               	movf	3951,w,c	;volatile
 11860  0004A2  0BE0               	andlw	224
 11861  0004A4  0102               	movlb	2	; () banked
 11862  0004A6  6FB6               	movwf	doModeVerbose@ifmode& (0+255),b
 11863                           
 11864                           ; BSR set to: 2
 11865                           ;main.c: 569: if ((ECAN_OP_MODE_NORMAL == ifmode) & !bSilent) {
 11866  0004A8  67B6               	tstfsz	doModeVerbose@ifmode& (0+255),b
 11867  0004AA  D00C               	goto	l10120
 11868                           
 11869                           ; BSR set to: 2
 11870  0004AC  0101               	movlb	1	; () banked
 11871  0004AE  6701               	tstfsz	_bSilent& (0+255),b
 11872  0004B0  D009               	goto	l10120
 11873                           
 11874                           ; BSR set to: 1
 11875                           ;main.c: 570: putsUSART((char *) "+OK - Normal mode\r\n");
 11876  0004B2  0E7D               	movlw	high STR_21
 11877  0004B4  0100               	movlb	0	; () banked
 11878  0004B6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11879  0004B8  0E82               	movlw	low STR_21
 11880  0004BA  6F61               	movwf	?_putsUSART& (0+255),b
 11881  0004BC  ECEA  F028         	call	_putsUSART	;wreg free
 11882                           
 11883                           ;main.c: 571: }
 11884  0004C0  EF70  F00A         	goto	l10652
 11885  0004C4                     l10120:
 11886                           
 11887                           ;main.c: 572: else if ((ECAN_OP_MODE_NORMAL == ifmode) & bSilent) {
 11888  0004C4  0102               	movlb	2	; () banked
 11889  0004C6  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11890  0004C8  0E01               	movlw	1
 11891  0004CA  A4D8               	btfss	status,2,c
 11892  0004CC  0E00               	movlw	0
 11893  0004CE  0101               	movlb	1	; () banked
 11894  0004D0  1501               	andwf	_bSilent& (0+255),w,b
 11895  0004D2  E009               	bz	l10124
 11896                           
 11897                           ; BSR set to: 1
 11898                           ;main.c: 573: putsUSART((char *) "+OK - Silent mode\r\n");
 11899  0004D4  0E7D               	movlw	high STR_22
 11900  0004D6  0100               	movlb	0	; () banked
 11901  0004D8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11902  0004DA  0E96               	movlw	low STR_22
 11903  0004DC  6F61               	movwf	?_putsUSART& (0+255),b
 11904  0004DE  ECEA  F028         	call	_putsUSART	;wreg free
 11905                           
 11906                           ;main.c: 574: }
 11907  0004E2  EF70  F00A         	goto	l10652
 11908  0004E6                     l10124:
 11909                           
 11910                           ; BSR set to: 1
 11911                           ;main.c: 575: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 11912  0004E6  0102               	movlb	2	; () banked
 11913  0004E8  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11914  0004EA  0A20               	xorlw	32
 11915  0004EC  E109               	bnz	l10128
 11916                           
 11917                           ; BSR set to: 2
 11918                           ;main.c: 576: putsUSART((char *) "+OK - Sleep mode\r\n");
 11919  0004EE  0E7D               	movlw	high STR_23
 11920  0004F0  0100               	movlb	0	; () banked
 11921  0004F2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11922  0004F4  0ED2               	movlw	low STR_23
 11923  0004F6  6F61               	movwf	?_putsUSART& (0+255),b
 11924  0004F8  ECEA  F028         	call	_putsUSART	;wreg free
 11925                           
 11926                           ;main.c: 577: }
 11927  0004FC  EF70  F00A         	goto	l10652
 11928  000500                     l10128:
 11929                           
 11930                           ; BSR set to: 2
 11931                           ;main.c: 578: else if (ECAN_OP_MODE_LOOP == ifmode) {
 11932  000500  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11933  000502  0A40               	xorlw	64
 11934  000504  E109               	bnz	l10132
 11935                           
 11936                           ; BSR set to: 2
 11937                           ;main.c: 579: putsUSART((char *) "+OK - Loopback mode\r\n");
 11938  000506  0E7D               	movlw	high STR_24
 11939  000508  0100               	movlb	0	; () banked
 11940  00050A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11941  00050C  0E05               	movlw	low STR_24
 11942  00050E  6F61               	movwf	?_putsUSART& (0+255),b
 11943  000510  ECEA  F028         	call	_putsUSART	;wreg free
 11944                           
 11945                           ;main.c: 580: }
 11946  000514  EF70  F00A         	goto	l10652
 11947  000518                     l10132:
 11948                           
 11949                           ; BSR set to: 2
 11950                           ;main.c: 581: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 11951  000518  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11952  00051A  0A60               	xorlw	96
 11953  00051C  E109               	bnz	l10136
 11954                           
 11955                           ; BSR set to: 2
 11956                           ;main.c: 582: putsUSART((char *) "+OK - Listen only mode\r\n");
 11957  00051E  0E7B               	movlw	high STR_25
 11958  000520  0100               	movlb	0	; () banked
 11959  000522  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11960  000524  0ECE               	movlw	low STR_25
 11961  000526  6F61               	movwf	?_putsUSART& (0+255),b
 11962  000528  ECEA  F028         	call	_putsUSART	;wreg free
 11963                           
 11964                           ;main.c: 583: }
 11965  00052C  EF70  F00A         	goto	l10652
 11966  000530                     l10136:
 11967                           
 11968                           ; BSR set to: 2
 11969                           ;main.c: 584: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 11970  000530  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11971  000532  0A80               	xorlw	128
 11972  000534  E109               	bnz	l10140
 11973                           
 11974                           ; BSR set to: 2
 11975                           ;main.c: 585: putsUSART((char *) "+OK - Closed mode\r\n");
 11976  000536  0E7D               	movlw	high STR_26
 11977  000538  0100               	movlb	0	; () banked
 11978  00053A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11979  00053C  0E6E               	movlw	low STR_26
 11980  00053E  6F61               	movwf	?_putsUSART& (0+255),b
 11981  000540  ECEA  F028         	call	_putsUSART	;wreg free
 11982                           
 11983                           ;main.c: 586: }
 11984  000544  EF70  F00A         	goto	l10652
 11985  000548                     l10140:
 11986                           
 11987                           ; BSR set to: 2
 11988                           ;main.c: 587: else if (ECAN_OP_MODE_BITS == ifmode) {
 11989  000548  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11990  00054A  0AE0               	xorlw	224
 11991  00054C  E109               	bnz	l10144
 11992                           
 11993                           ; BSR set to: 2
 11994                           ;main.c: 588: putsUSART((char *) "+OK - Bits mode\r\n");
 11995  00054E  0E7D               	movlw	high STR_27
 11996  000550  0100               	movlb	0	; () banked
 11997  000552  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11998  000554  0EE5               	movlw	low STR_27
 11999  000556  6F61               	movwf	?_putsUSART& (0+255),b
 12000  000558  ECEA  F028         	call	_putsUSART	;wreg free
 12001                           
 12002                           ;main.c: 589: }
 12003  00055C  EF70  F00A         	goto	l10652
 12004  000560                     l10144:
 12005                           
 12006                           ; BSR set to: 2
 12007                           ;main.c: 590: else {
 12008                           ;main.c: 591: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 12009  000560  0E7C               	movlw	high STR_28
 12010  000562  0100               	movlb	0	; () banked
 12011  000564  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12012  000566  0E48               	movlw	low STR_28
 12013  000568  6F61               	movwf	?_putsUSART& (0+255),b
 12014  00056A  ECEA  F028         	call	_putsUSART	;wreg free
 12015  00056E  EF70  F00A         	goto	l10652
 12016  000572                     l10146:
 12017                           
 12018                           ; BSR set to: 1
 12019                           ;main.c: 596: else if (cmdbuf == stristr(cmdbuf, "TX")) {
 12020  000572  0E01               	movlw	high _cmdbuf
 12021  000574  0100               	movlb	0	; () banked
 12022  000576  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12023  000578  0E04               	movlw	low _cmdbuf
 12024  00057A  6F6D               	movwf	?_stristr& (0+255),b
 12025  00057C  0E7F               	movlw	high STR_29
 12026  00057E  6F70               	movwf	(?_stristr+3)& (0+255),b
 12027  000580  0EEA               	movlw	low STR_29
 12028  000582  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12029  000584  EC3C  F026         	call	_stristr	;wreg free
 12030  000588  EC80  F00A         	call	PL2	;call to abstracted procedure
 12031  00058C  E104               	bnz	u12335
 12032  00058E  0100               	movlb	0	; () banked
 12033  000590  516D               	movf	?_stristr& (0+255),w,b
 12034  000592  0101               	movlb	1	; () banked
 12035  000594  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12036  000596                     u12335:
 12037  000596  E001 D0D9          	bnz	l10200
 12038                           
 12039                           ; BSR set to: 1
 12040                           ;main.c: 598: char *p = strtok(cmdbuf, ",");
 12041  00059A  ECE3  F00A         	call	PL30	;call to abstracted procedure
 12042  00059E  ECE4  F024         	call	_strtok	;wreg free
 12043  0005A2  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12044  0005A6  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12045                           
 12046                           ; BSR set to: 0
 12047                           ;main.c: 601: vscpPriority = 3;
 12048  0005AA  0E03               	movlw	3
 12049  0005AC  0101               	movlb	1	; () banked
 12050  0005AE  6FAF               	movwf	_vscpPriority& (0+255),b
 12051                           
 12052                           ; BSR set to: 1
 12053                           ;main.c: 602: if ((0) != p) {
 12054  0005B0  0102               	movlb	2	; () banked
 12055  0005B2  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12056  0005B4  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12057  0005B6  E009               	bz	l10156
 12058                           
 12059                           ; BSR set to: 2
 12060                           ;main.c: 603: vscpPriority = atoi(p);
 12061  0005B8  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12062  0005BC  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12063  0005C0  EC7A  F01D         	call	_atoi	;wreg free
 12064  0005C4  5166               	movf	?_atoi& (0+255),w,b
 12065  0005C6  0101               	movlb	1	; () banked
 12066  0005C8  6FAF               	movwf	_vscpPriority& (0+255),b
 12067  0005CA                     l10156:
 12068                           
 12069                           ;main.c: 604: }
 12070                           ;main.c: 607: vscpClass = 0;
 12071  0005CA  0101               	movlb	1	; () banked
 12072  0005CC  6BAC               	clrf	_vscpClass& (0+255),b
 12073  0005CE  6BAD               	clrf	(_vscpClass+1)& (0+255),b
 12074                           
 12075                           ; BSR set to: 1
 12076                           ;main.c: 608: if ((0) != (p = strtok((0), ","))) {
 12077  0005D0  EC99  F00A         	call	PL6	;call to abstracted procedure
 12078  0005D4  ECE4  F024         	call	_strtok	;wreg free
 12079  0005D8  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12080  0005DC  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12081  0005E0  0102               	movlb	2	; () banked
 12082  0005E2  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12083  0005E4  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12084  0005E6  E00A               	bz	l10162
 12085                           
 12086                           ; BSR set to: 2
 12087                           ;main.c: 609: vscpClass = atoi(p);
 12088  0005E8  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12089  0005EC  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12090  0005F0  EC7A  F01D         	call	_atoi	;wreg free
 12091  0005F4  C066  F1AC         	movff	?_atoi,_vscpClass
 12092  0005F8  C067  F1AD         	movff	?_atoi+1,_vscpClass+1
 12093  0005FC                     l10162:
 12094                           
 12095                           ;main.c: 610: }
 12096                           ;main.c: 613: vscpType = 0;
 12097  0005FC  0101               	movlb	1	; () banked
 12098  0005FE  6BB1               	clrf	_vscpType& (0+255),b
 12099                           
 12100                           ; BSR set to: 1
 12101                           ;main.c: 614: if ((0) != (p = strtok((0), ","))) {
 12102  000600  EC99  F00A         	call	PL6	;call to abstracted procedure
 12103  000604  ECE4  F024         	call	_strtok	;wreg free
 12104  000608  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12105  00060C  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12106  000610  0102               	movlb	2	; () banked
 12107  000612  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12108  000614  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12109  000616  E009               	bz	l10168
 12110                           
 12111                           ; BSR set to: 2
 12112                           ;main.c: 615: vscpType = atoi(p);
 12113  000618  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12114  00061C  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12115  000620  EC7A  F01D         	call	_atoi	;wreg free
 12116  000624  5166               	movf	?_atoi& (0+255),w,b
 12117  000626  0101               	movlb	1	; () banked
 12118  000628  6FB1               	movwf	_vscpType& (0+255),b
 12119  00062A                     l10168:
 12120                           
 12121                           ;main.c: 616: }
 12122                           ;main.c: 619: vscpNodeId = 0;
 12123  00062A  0101               	movlb	1	; () banked
 12124  00062C  6BAE               	clrf	_vscpNodeId& (0+255),b
 12125                           
 12126                           ; BSR set to: 1
 12127                           ;main.c: 620: if ((0) != (p = strtok((0), ","))) {
 12128  00062E  EC99  F00A         	call	PL6	;call to abstracted procedure
 12129  000632  ECE4  F024         	call	_strtok	;wreg free
 12130  000636  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12131  00063A  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12132  00063E  0102               	movlb	2	; () banked
 12133  000640  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12134  000642  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12135  000644  E009               	bz	l10174
 12136                           
 12137                           ; BSR set to: 2
 12138                           ;main.c: 621: vscpNodeId = atoi(p);
 12139  000646  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12140  00064A  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12141  00064E  EC7A  F01D         	call	_atoi	;wreg free
 12142  000652  5166               	movf	?_atoi& (0+255),w,b
 12143  000654  0101               	movlb	1	; () banked
 12144  000656  6FAE               	movwf	_vscpNodeId& (0+255),b
 12145  000658                     l10174:
 12146                           
 12147                           ;main.c: 622: }
 12148                           ;main.c: 625: vscpSize = 0;
 12149  000658  0101               	movlb	1	; () banked
 12150  00065A  6BB0               	clrf	_vscpSize& (0+255),b
 12151                           
 12152                           ; BSR set to: 1
 12153                           ;main.c: 626: if ((0) != (p = strtok((0), ","))) {
 12154  00065C  EC99  F00A         	call	PL6	;call to abstracted procedure
 12155  000660  ECE4  F024         	call	_strtok	;wreg free
 12156  000664  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12157  000668  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12158  00066C  0102               	movlb	2	; () banked
 12159  00066E  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12160  000670  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12161  000672  E009               	bz	l10180
 12162                           
 12163                           ; BSR set to: 2
 12164                           ;main.c: 627: vscpSize = atoi(p);
 12165  000674  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12166  000678  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12167  00067C  EC7A  F01D         	call	_atoi	;wreg free
 12168  000680  5166               	movf	?_atoi& (0+255),w,b
 12169  000682  0101               	movlb	1	; () banked
 12170  000684  6FB0               	movwf	_vscpSize& (0+255),b
 12171  000686                     l10180:
 12172                           
 12173                           ;main.c: 628: }
 12174                           ;main.c: 630: memset(vscpData, 0, 8);
 12175  000686  0E01               	movlw	high _vscpData
 12176  000688  0100               	movlb	0	; () banked
 12177  00068A  6F61               	movwf	(?_memset+1)& (0+255),b
 12178  00068C  0EA4               	movlw	low _vscpData
 12179  00068E  6F60               	movwf	?_memset& (0+255),b
 12180  000690  6B63               	clrf	(?_memset+3)& (0+255),b
 12181  000692  6B62               	clrf	(?_memset+2)& (0+255),b
 12182  000694  6B65               	clrf	(?_memset+5)& (0+255),b
 12183  000696  0E08               	movlw	8
 12184  000698  6F64               	movwf	(?_memset+4)& (0+255),b
 12185  00069A  EC49  F02B         	call	_memset	;wreg free
 12186                           
 12187                           ; BSR set to: 0
 12188                           ;main.c: 631: for (i = 0; i < vscpSize; i++) {
 12189  00069E  0102               	movlb	2	; () banked
 12190  0006A0  6BAA               	clrf	doModeVerbose@i& (0+255),b
 12191  0006A2  D01D               	goto	l10190
 12192  0006A4                     l10184:
 12193                           
 12194                           ; BSR set to: 2
 12195                           ;main.c: 632: if ((0) != (p = strtok((0), ","))) {
 12196  0006A4  EC99  F00A         	call	PL6	;call to abstracted procedure
 12197  0006A8  ECE4  F024         	call	_strtok	;wreg free
 12198  0006AC  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12199  0006B0  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12200  0006B4  0102               	movlb	2	; () banked
 12201  0006B6  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12202  0006B8  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12203  0006BA  E016               	bz	l10192
 12204                           
 12205                           ; BSR set to: 2
 12206                           ;main.c: 633: vscpData[ i ] = atoi(p);
 12207  0006BC  0EA4               	movlw	low _vscpData
 12208  0006BE  25AA               	addwf	doModeVerbose@i& (0+255),w,b
 12209  0006C0  6ED9               	movwf	fsr2l,c
 12210  0006C2  6ADA               	clrf	fsr2h,c
 12211  0006C4  0101               	movlb	1	; () banked
 12212  0006C6  0E01               	movlw	high _vscpData
 12213  0006C8  22DA               	addwfc	fsr2h,f,c
 12214  0006CA  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12215  0006CE  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12216  0006D2  EC7A  F01D         	call	_atoi	;wreg free
 12217  0006D6  5166               	movf	?_atoi& (0+255),w,b
 12218  0006D8  6EDF               	movwf	indf2,c
 12219                           
 12220                           ; BSR set to: 0
 12221                           
 12222                           ;main.c: 634: } else {
 12223  0006DA  0102               	movlb	2	; () banked
 12224  0006DC  2BAA               	incf	doModeVerbose@i& (0+255),f,b
 12225  0006DE                     l10190:
 12226                           
 12227                           ; BSR set to: 2
 12228  0006DE  0101               	movlb	1	; () banked
 12229  0006E0  51B0               	movf	_vscpSize& (0+255),w,b
 12230  0006E2  0102               	movlb	2	; () banked
 12231  0006E4  5DAA               	subwf	doModeVerbose@i& (0+255),w,b
 12232  0006E6  E3DE               	bnc	l10184
 12233  0006E8                     l10192:
 12234                           
 12235                           ; BSR set to: 2
 12236                           ;main.c: 636: }
 12237                           ;main.c: 637: }
 12238                           ;main.c: 639: if ( sendVSCPFrame(vscpClass,
 12239                           ;main.c: 640: vscpType,
 12240                           ;main.c: 641: vscpNodeId,
 12241                           ;main.c: 642: vscpPriority,
 12242                           ;main.c: 643: vscpSize,
 12243                           ;main.c: 644: vscpData ) ) {
 12244  0006E8  C1AC  F096         	movff	_vscpClass,?_sendVSCPFrame
 12245  0006EC  C1AD  F097         	movff	_vscpClass+1,?_sendVSCPFrame+1
 12246  0006F0  C1B1  F098         	movff	_vscpType,?_sendVSCPFrame+2
 12247  0006F4  C1AE  F099         	movff	_vscpNodeId,?_sendVSCPFrame+3
 12248  0006F8  C1AF  F09A         	movff	_vscpPriority,?_sendVSCPFrame+4
 12249  0006FC  C1B0  F09B         	movff	_vscpSize,?_sendVSCPFrame+5
 12250  000700  0E01               	movlw	high _vscpData
 12251  000702  0100               	movlb	0	; () banked
 12252  000704  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 12253  000706  0EA4               	movlw	low _vscpData
 12254  000708  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 12255  00070A  ECB1  F022         	call	_sendVSCPFrame	;wreg free
 12256  00070E  0900               	iorlw	0
 12257  000710  E015               	bz	l10198
 12258                           
 12259                           ; BSR set to: 0
 12260                           ;main.c: 646: cntTxFrames++;
 12261  000712  2BE1               	incf	_cntTxFrames& (0+255),f,b
 12262  000714  0E00               	movlw	0
 12263  000716  23E2               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 12264  000718  23E3               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 12265  00071A  23E4               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 12266                           
 12267                           ;main.c: 647: cntTxBytes += vscpSize;
 12268  00071C  0101               	movlb	1	; () banked
 12269  00071E  51B0               	movf	_vscpSize& (0+255),w,b
 12270  000720  0100               	movlb	0	; () banked
 12271  000722  27DD               	addwf	_cntTxBytes& (0+255),f,b
 12272  000724  0E00               	movlw	0
 12273  000726  23DE               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 12274  000728  23DF               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 12275  00072A  23E0               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 12276                           
 12277                           ; BSR set to: 0
 12278                           ;main.c: 648: putsUSART((char *) "+OK\r\n");
 12279  00072C  0E7F               	movlw	high STR_9
 12280  00072E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12281  000730  0E7F               	movlw	low STR_9
 12282  000732  6F61               	movwf	?_putsUSART& (0+255),b
 12283  000734  ECEA  F028         	call	_putsUSART	;wreg free
 12284                           
 12285                           ;main.c: 649: }
 12286  000738  EF70  F00A         	goto	l10652
 12287  00073C                     l10198:
 12288                           
 12289                           ; BSR set to: 0
 12290                           ;main.c: 650: else {
 12291                           ;main.c: 651: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 12292  00073C  0E7A               	movlw	high STR_37
 12293  00073E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12294  000740  0E48               	movlw	low STR_37
 12295  000742  6F61               	movwf	?_putsUSART& (0+255),b
 12296  000744  ECEA  F028         	call	_putsUSART	;wreg free
 12297  000748  EF70  F00A         	goto	l10652
 12298  00074C                     l10200:
 12299                           
 12300                           ; BSR set to: 1
 12301                           ;main.c: 655: else if (cmdbuf == stristr(cmdbuf, "RX")) {
 12302  00074C  0E01               	movlw	high _cmdbuf
 12303  00074E  0100               	movlb	0	; () banked
 12304  000750  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12305  000752  0E04               	movlw	low _cmdbuf
 12306  000754  6F6D               	movwf	?_stristr& (0+255),b
 12307  000756  0E7F               	movlw	high STR_38
 12308  000758  6F70               	movwf	(?_stristr+3)& (0+255),b
 12309  00075A  0EE7               	movlw	low STR_38
 12310  00075C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12311  00075E  EC3C  F026         	call	_stristr	;wreg free
 12312  000762  EC80  F00A         	call	PL2	;call to abstracted procedure
 12313  000766  E104               	bnz	u12425
 12314  000768  0100               	movlb	0	; () banked
 12315  00076A  516D               	movf	?_stristr& (0+255),w,b
 12316  00076C  0101               	movlb	1	; () banked
 12317  00076E  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12318  000770                     u12425:
 12319  000770  E116               	bnz	l10208
 12320                           
 12321                           ; BSR set to: 1
 12322                           ;main.c: 656: if (receivePrintEventVerbose()) {
 12323  000772  ECEA  F011         	call	_receivePrintEventVerbose	;wreg free
 12324  000776  0900               	iorlw	0
 12325  000778  E009               	bz	l10206
 12326                           
 12327                           ;main.c: 657: putsUSART((char *) "+OK\r\n");
 12328  00077A  0E7F               	movlw	high STR_9
 12329  00077C  0100               	movlb	0	; () banked
 12330  00077E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12331  000780  0E7F               	movlw	low STR_9
 12332  000782  6F61               	movwf	?_putsUSART& (0+255),b
 12333  000784  ECEA  F028         	call	_putsUSART	;wreg free
 12334                           
 12335                           ;main.c: 658: }
 12336  000788  EF70  F00A         	goto	l10652
 12337  00078C                     l10206:
 12338                           
 12339                           ;main.c: 659: else {
 12340                           ;main.c: 660: putsUSART((char *) "+OK - no events\r\n");
 12341  00078C  0E7D               	movlw	high STR_40
 12342  00078E  0100               	movlb	0	; () banked
 12343  000790  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12344  000792  0EF7               	movlw	low STR_40
 12345  000794  6F61               	movwf	?_putsUSART& (0+255),b
 12346  000796  ECEA  F028         	call	_putsUSART	;wreg free
 12347  00079A  EF70  F00A         	goto	l10652
 12348  00079E                     l10208:
 12349                           
 12350                           ; BSR set to: 1
 12351                           ;main.c: 664: else if (cmdbuf == stristr(cmdbuf, "STAT")) {
 12352  00079E  0E01               	movlw	high _cmdbuf
 12353  0007A0  0100               	movlb	0	; () banked
 12354  0007A2  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12355  0007A4  0E04               	movlw	low _cmdbuf
 12356  0007A6  6F6D               	movwf	?_stristr& (0+255),b
 12357  0007A8  0E7F               	movlw	high STR_41
 12358  0007AA  6F70               	movwf	(?_stristr+3)& (0+255),b
 12359  0007AC  0ECA               	movlw	low STR_41
 12360  0007AE  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12361  0007B0  EC3C  F026         	call	_stristr	;wreg free
 12362  0007B4  EC80  F00A         	call	PL2	;call to abstracted procedure
 12363  0007B8  E104               	bnz	u12445
 12364  0007BA  0100               	movlb	0	; () banked
 12365  0007BC  516D               	movf	?_stristr& (0+255),w,b
 12366  0007BE  0101               	movlb	1	; () banked
 12367  0007C0  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12368  0007C2                     u12445:
 12369  0007C2  E10B               	bnz	l10214
 12370                           
 12371                           ; BSR set to: 1
 12372                           ;main.c: 665: printStatistics();
 12373  0007C4  ECFF  F016         	call	_printStatistics	;wreg free
 12374                           
 12375                           ;main.c: 666: putsUSART((char *) "+OK\r\n");
 12376  0007C8  0E7F               	movlw	high STR_9
 12377  0007CA  0100               	movlb	0	; () banked
 12378  0007CC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12379  0007CE  0E7F               	movlw	low STR_9
 12380  0007D0  6F61               	movwf	?_putsUSART& (0+255),b
 12381  0007D2  ECEA  F028         	call	_putsUSART	;wreg free
 12382                           
 12383                           ;main.c: 667: }
 12384  0007D6  EF70  F00A         	goto	l10652
 12385  0007DA                     l10214:
 12386                           
 12387                           ; BSR set to: 1
 12388                           ;main.c: 669: else if (cmdbuf == stristr(cmdbuf, "ERR")) {
 12389  0007DA  0E01               	movlw	high _cmdbuf
 12390  0007DC  0100               	movlb	0	; () banked
 12391  0007DE  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12392  0007E0  0E04               	movlw	low _cmdbuf
 12393  0007E2  6F6D               	movwf	?_stristr& (0+255),b
 12394  0007E4  0E7F               	movlw	high STR_43
 12395  0007E6  6F70               	movwf	(?_stristr+3)& (0+255),b
 12396  0007E8  0ED8               	movlw	low STR_43
 12397  0007EA  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12398  0007EC  EC3C  F026         	call	_stristr	;wreg free
 12399  0007F0  EC80  F00A         	call	PL2	;call to abstracted procedure
 12400  0007F4  E104               	bnz	u12455
 12401  0007F6  0100               	movlb	0	; () banked
 12402  0007F8  516D               	movf	?_stristr& (0+255),w,b
 12403  0007FA  0101               	movlb	1	; () banked
 12404  0007FC  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12405  0007FE                     u12455:
 12406  0007FE  E10B               	bnz	l10220
 12407                           
 12408                           ; BSR set to: 1
 12409                           ;main.c: 670: printErrors();
 12410  000800  EC7F  F010         	call	_printErrors	;wreg free
 12411                           
 12412                           ;main.c: 671: putsUSART((char *) "+OK\r\n");
 12413  000804  0E7F               	movlw	high STR_9
 12414  000806  0100               	movlb	0	; () banked
 12415  000808  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12416  00080A  0E7F               	movlw	low STR_9
 12417  00080C  6F61               	movwf	?_putsUSART& (0+255),b
 12418  00080E  ECEA  F028         	call	_putsUSART	;wreg free
 12419                           
 12420                           ;main.c: 672: }
 12421  000812  EF70  F00A         	goto	l10652
 12422  000816                     l10220:
 12423                           
 12424                           ; BSR set to: 1
 12425                           ;main.c: 674: else if (cmdbuf == stristr(cmdbuf, "HELP")) {
 12426  000816  0E01               	movlw	high _cmdbuf
 12427  000818  0100               	movlb	0	; () banked
 12428  00081A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12429  00081C  0E04               	movlw	low _cmdbuf
 12430  00081E  6F6D               	movwf	?_stristr& (0+255),b
 12431  000820  0E7F               	movlw	high STR_45
 12432  000822  6F70               	movwf	(?_stristr+3)& (0+255),b
 12433  000824  0EC5               	movlw	low STR_45
 12434  000826  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12435  000828  EC3C  F026         	call	_stristr	;wreg free
 12436  00082C  EC80  F00A         	call	PL2	;call to abstracted procedure
 12437  000830  E104               	bnz	u12465
 12438  000832  0100               	movlb	0	; () banked
 12439  000834  516D               	movf	?_stristr& (0+255),w,b
 12440  000836  0101               	movlb	1	; () banked
 12441  000838  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12442  00083A                     u12465:
 12443  00083A  E10B               	bnz	l10224
 12444                           
 12445                           ; BSR set to: 1
 12446                           ;main.c: 675: printHelp();
 12447  00083C  EC1F  F016         	call	_printHelp	;wreg free
 12448                           
 12449                           ;main.c: 676: putsUSART((char *) "+OK\r\n");
 12450  000840  0E7F               	movlw	high STR_9
 12451  000842  0100               	movlb	0	; () banked
 12452  000844  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12453  000846  0E7F               	movlw	low STR_9
 12454  000848  6F61               	movwf	?_putsUSART& (0+255),b
 12455  00084A  ECEA  F028         	call	_putsUSART	;wreg free
 12456                           
 12457                           ;main.c: 677: }
 12458  00084E  EF70  F00A         	goto	l10652
 12459  000852                     l10224:
 12460                           
 12461                           ; BSR set to: 1
 12462                           ;main.c: 679: else if (cmdbuf == stristr(cmdbuf, "FIND")) {
 12463  000852  0E01               	movlw	high _cmdbuf
 12464  000854  0100               	movlb	0	; () banked
 12465  000856  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12466  000858  0E04               	movlw	low _cmdbuf
 12467  00085A  6F6D               	movwf	?_stristr& (0+255),b
 12468  00085C  0E7F               	movlw	high STR_47
 12469  00085E  6F70               	movwf	(?_stristr+3)& (0+255),b
 12470  000860  0EA2               	movlw	low STR_47
 12471  000862  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12472  000864  EC3C  F026         	call	_stristr	;wreg free
 12473  000868  EC80  F00A         	call	PL2	;call to abstracted procedure
 12474  00086C  E104               	bnz	u12475
 12475  00086E  0100               	movlb	0	; () banked
 12476  000870  516D               	movf	?_stristr& (0+255),w,b
 12477  000872  0101               	movlb	1	; () banked
 12478  000874  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12479  000876                     u12475:
 12480  000876  E10B               	bnz	l10230
 12481                           
 12482                           ; BSR set to: 1
 12483                           ;main.c: 680: findNodes();
 12484  000878  ECFD  F01E         	call	_findNodes	;wreg free
 12485                           
 12486                           ;main.c: 681: putsUSART((char *) "+OK\r\n");
 12487  00087C  0E7F               	movlw	high STR_9
 12488  00087E  0100               	movlb	0	; () banked
 12489  000880  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12490  000882  0E7F               	movlw	low STR_9
 12491  000884  6F61               	movwf	?_putsUSART& (0+255),b
 12492  000886  ECEA  F028         	call	_putsUSART	;wreg free
 12493                           
 12494                           ;main.c: 682: }
 12495  00088A  EF70  F00A         	goto	l10652
 12496  00088E                     l10230:
 12497                           
 12498                           ; BSR set to: 1
 12499                           ;main.c: 685: else if (cmdbuf == stristr(cmdbuf, "RREG")) {
 12500  00088E  0E01               	movlw	high _cmdbuf
 12501  000890  0100               	movlb	0	; () banked
 12502  000892  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12503  000894  0E04               	movlw	low _cmdbuf
 12504  000896  6F6D               	movwf	?_stristr& (0+255),b
 12505  000898  0E7F               	movlw	high STR_49
 12506  00089A  6F70               	movwf	(?_stristr+3)& (0+255),b
 12507  00089C  0EA7               	movlw	low STR_49
 12508  00089E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12509  0008A0  EC3C  F026         	call	_stristr	;wreg free
 12510  0008A4  EC80  F00A         	call	PL2	;call to abstracted procedure
 12511  0008A8  E104               	bnz	u12485
 12512  0008AA  0100               	movlb	0	; () banked
 12513  0008AC  516D               	movf	?_stristr& (0+255),w,b
 12514  0008AE  0101               	movlb	1	; () banked
 12515  0008B0  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12516  0008B2                     u12485:
 12517  0008B2  E001 D1B4          	bnz	l10360
 12518                           
 12519                           ; BSR set to: 1
 12520                           ;main.c: 687: uint8_t i;
 12521                           ;main.c: 688: uint8_t nodeid;
 12522                           ;main.c: 689: uint8_t page = 0;
 12523  0008B6  0102               	movlb	2	; () banked
 12524  0008B8  6BAD               	clrf	doModeVerbose@page& (0+255),b
 12525                           
 12526                           ; BSR set to: 2
 12527                           ;main.c: 690: uint8_t reg;
 12528                           ;main.c: 691: uint8_t value;
 12529                           ;main.c: 692: uint8_t count = 1;
 12530  0008BA  0E01               	movlw	1
 12531  0008BC  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12532                           
 12533                           ; BSR set to: 2
 12534                           ;main.c: 694: strcpy(cmdbuf, cmdbuf + 5);
 12535  0008BE  EC8A  F00A         	call	PL4	;call to abstracted procedure
 12536  0008C2  EC1A  F02B         	call	_strcpy	;wreg free
 12537                           
 12538                           ;main.c: 695: char *p = strtok(cmdbuf, " ");
 12539  0008C6  0E01               	movlw	high _cmdbuf
 12540  0008C8  ECED  F00A         	call	PL36	;call to abstracted procedure
 12541  0008CC  ECE4  F024         	call	_strtok	;wreg free
 12542  0008D0  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1112
 12543  0008D4  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1112+1
 12544                           
 12545                           ; BSR set to: 0
 12546                           ;main.c: 696: if ((0) != p) {
 12547  0008D8  0102               	movlb	2	; () banked
 12548  0008DA  51B3               	movf	(doModeVerbose@p_1112+1)& (0+255),w,b
 12549  0008DC  11B2               	iorwf	doModeVerbose@p_1112& (0+255),w,b
 12550  0008DE  E00A               	bz	l10244
 12551                           
 12552                           ; BSR set to: 2
 12553                           ;main.c: 697: nodeid = atoi(p);
 12554  0008E0  C2B2  F066         	movff	doModeVerbose@p_1112,?_atoi
 12555  0008E4  C2B3  F067         	movff	doModeVerbose@p_1112+1,?_atoi+1
 12556  0008E8  EC7A  F01D         	call	_atoi	;wreg free
 12557  0008EC  5166               	movf	?_atoi& (0+255),w,b
 12558  0008EE  0102               	movlb	2	; () banked
 12559  0008F0  6F8C               	movwf	doModeVerbose@nodeid& (0+255),b
 12560                           
 12561                           ;main.c: 698: } else {
 12562  0008F2  D009               	goto	l10248
 12563  0008F4                     l10244:
 12564                           
 12565                           ; BSR set to: 2
 12566                           ;main.c: 699: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 12567  0008F4  0E7C               	movlw	high STR_51
 12568  0008F6  0100               	movlb	0	; () banked
 12569  0008F8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12570  0008FA  0E30               	movlw	low STR_51
 12571  0008FC  6F61               	movwf	?_putsUSART& (0+255),b
 12572  0008FE  ECEA  F028         	call	_putsUSART	;wreg free
 12573  000902  EF7F  F00A         	goto	l524
 12574  000906                     l10248:
 12575                           
 12576                           ; BSR set to: 2
 12577                           ;main.c: 701: }
 12578                           ;main.c: 703: if ((0) != (p = strtok((0), " "))) {
 12579  000906  ECDB  F00A         	call	PL28	;call to abstracted procedure
 12580  00090A  ECE4  F024         	call	_strtok	;wreg free
 12581  00090E  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1112
 12582  000912  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1112+1
 12583  000916  0102               	movlb	2	; () banked
 12584  000918  51B3               	movf	(doModeVerbose@p_1112+1)& (0+255),w,b
 12585  00091A  11B2               	iorwf	doModeVerbose@p_1112& (0+255),w,b
 12586  00091C  E034               	bz	l10256
 12587                           
 12588                           ; BSR set to: 2
 12589                           ;main.c: 705: char *preg;
 12590                           ;main.c: 706: if (preg = strchr(p, ':')) {
 12591  00091E  C2B2  F060         	movff	doModeVerbose@p_1112,?_strchr
 12592  000922  C2B3  F061         	movff	doModeVerbose@p_1112+1,?_strchr+1
 12593  000926  0100               	movlb	0	; () banked
 12594  000928  6B63               	clrf	(?_strchr+3)& (0+255),b
 12595  00092A  0E3A               	movlw	58
 12596  00092C  6F62               	movwf	(?_strchr+2)& (0+255),b
 12597  00092E  ECFE  F027         	call	_strchr	;wreg free
 12598  000932  C060  F284         	movff	?_strchr,doModeVerbose@preg
 12599  000936  C061  F285         	movff	?_strchr+1,doModeVerbose@preg+1
 12600  00093A  0102               	movlb	2	; () banked
 12601  00093C  5185               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 12602  00093E  1184               	iorwf	doModeVerbose@preg& (0+255),w,b
 12603  000940  E018               	bz	l10254
 12604                           
 12605                           ; BSR set to: 2
 12606                           ;main.c: 707: page = atoi(p);
 12607  000942  C2B2  F066         	movff	doModeVerbose@p_1112,?_atoi
 12608  000946  C2B3  F067         	movff	doModeVerbose@p_1112+1,?_atoi+1
 12609  00094A  EC7A  F01D         	call	_atoi	;wreg free
 12610  00094E  5166               	movf	?_atoi& (0+255),w,b
 12611  000950  0102               	movlb	2	; () banked
 12612  000952  6FAD               	movwf	doModeVerbose@page& (0+255),b
 12613                           
 12614                           ;main.c: 708: reg = atoi(preg + 1);
 12615  000954  2984               	incf	doModeVerbose@preg& (0+255),w,b
 12616  000956  0101               	movlb	1	; () banked
 12617  000958  6FB2               	movwf	??_doModeVerbose& (0+255),b
 12618  00095A  0E00               	movlw	0
 12619  00095C  0102               	movlb	2	; () banked
 12620  00095E  2185               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 12621  000960  0101               	movlb	1	; () banked
 12622  000962  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 12623  000964  C1B2  F066         	movff	??_doModeVerbose,?_atoi
 12624  000968  C1B3  F067         	movff	??_doModeVerbose+1,?_atoi+1
 12625  00096C  EC7A  F01D         	call	_atoi	;wreg free
 12626  000970  D006               	goto	L5
 12627  000972                     l10254:
 12628                           
 12629                           ; BSR set to: 2
 12630                           ;main.c: 710: reg = atoi(p);
 12631  000972  C2B2  F066         	movff	doModeVerbose@p_1112,?_atoi
 12632  000976  C2B3  F067         	movff	doModeVerbose@p_1112+1,?_atoi+1
 12633  00097A  EC7A  F01D         	call	_atoi	;wreg free
 12634  00097E                     L5:
 12635  00097E  5166               	movf	?_atoi& (0+255),w,b
 12636  000980  0102               	movlb	2	; () banked
 12637  000982  6FAE               	movwf	doModeVerbose@reg& (0+255),b
 12638  000984  D009               	goto	l10260
 12639  000986                     l10256:
 12640                           
 12641                           ; BSR set to: 2
 12642                           ;main.c: 715: else {
 12643                           ;main.c: 716: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 12644  000986  0E7A               	movlw	high STR_53
 12645  000988  0100               	movlb	0	; () banked
 12646  00098A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12647  00098C  0EAB               	movlw	low STR_53
 12648  00098E  6F61               	movwf	?_putsUSART& (0+255),b
 12649  000990  ECEA  F028         	call	_putsUSART	;wreg free
 12650  000994  EF7F  F00A         	goto	l524
 12651  000998                     l10260:
 12652                           
 12653                           ; BSR set to: 2
 12654                           ;main.c: 718: }
 12655                           ;main.c: 721: if ((0) != (p = strtok((0), " "))) {
 12656  000998  ECDB  F00A         	call	PL28	;call to abstracted procedure
 12657  00099C  ECE4  F024         	call	_strtok	;wreg free
 12658  0009A0  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1112
 12659  0009A4  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1112+1
 12660  0009A8  0102               	movlb	2	; () banked
 12661  0009AA  51B3               	movf	(doModeVerbose@p_1112+1)& (0+255),w,b
 12662  0009AC  11B2               	iorwf	doModeVerbose@p_1112& (0+255),w,b
 12663  0009AE  E00D               	bz	l529
 12664                           
 12665                           ; BSR set to: 2
 12666                           ;main.c: 722: count = atoi(p);
 12667  0009B0  C2B2  F066         	movff	doModeVerbose@p_1112,?_atoi
 12668  0009B4  C2B3  F067         	movff	doModeVerbose@p_1112+1,?_atoi+1
 12669  0009B8  EC7A  F01D         	call	_atoi	;wreg free
 12670  0009BC  5166               	movf	?_atoi& (0+255),w,b
 12671  0009BE  0102               	movlb	2	; () banked
 12672  0009C0  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12673                           
 12674                           ; BSR set to: 2
 12675                           ;main.c: 723: if (0 == count) count = 1;
 12676  0009C2  67AB               	tstfsz	doModeVerbose@count& (0+255),b
 12677  0009C4  D002               	goto	l529
 12678                           
 12679                           ; BSR set to: 2
 12680  0009C6  0E01               	movlw	1
 12681  0009C8  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12682  0009CA                     l529:
 12683                           
 12684                           ; BSR set to: 2
 12685                           ;main.c: 724: }
 12686                           ;main.c: 726: BOOL rv = 1;
 12687  0009CA  0E01               	movlw	1
 12688  0009CC  6FA0               	movwf	doModeVerbose@rv& (0+255),b
 12689                           
 12690                           ; BSR set to: 2
 12691                           ;main.c: 727: for (i = 0; i < count; i++) {
 12692  0009CE  6BB0               	clrf	doModeVerbose@i_1106& (0+255),b
 12693  0009D0  D10E               	goto	l10352
 12694  0009D2                     l10270:
 12695                           
 12696                           ; BSR set to: 2
 12697                           ;main.c: 729: if (readRegisterExtended(nodeid,
 12698                           ;main.c: 730: page,
 12699                           ;main.c: 731: (reg + i) & 0xff,
 12700                           ;main.c: 732: rwtimeout,
 12701                           ;main.c: 733: &value)) {
 12702  0009D2  0100               	movlb	0	; () banked
 12703  0009D4  C2AD  F0B6         	movff	doModeVerbose@page,?_readRegisterExtended
 12704  0009D8  6BB7               	clrf	(?_readRegisterExtended+1)& (0+255),b
 12705  0009DA  0102               	movlb	2	; () banked
 12706  0009DC  51AE               	movf	doModeVerbose@reg& (0+255),w,b
 12707  0009DE  25B0               	addwf	doModeVerbose@i_1106& (0+255),w,b
 12708  0009E0  0100               	movlb	0	; () banked
 12709  0009E2  6FB8               	movwf	(?_readRegisterExtended+2)& (0+255),b
 12710  0009E4  C103  F0B9         	movff	_rwtimeout,?_readRegisterExtended+3
 12711  0009E8  6BBA               	clrf	(?_readRegisterExtended+4)& (0+255),b
 12712  0009EA  0E02               	movlw	high doModeVerbose@value
 12713  0009EC  6FBC               	movwf	(?_readRegisterExtended+6)& (0+255),b
 12714  0009EE  0EB1               	movlw	low doModeVerbose@value
 12715  0009F0  6FBB               	movwf	(?_readRegisterExtended+5)& (0+255),b
 12716  0009F2  0102               	movlb	2	; () banked
 12717  0009F4  518C               	movf	doModeVerbose@nodeid& (0+255),w,b
 12718  0009F6  EC7F  F01E         	call	_readRegisterExtended
 12719  0009FA  0900               	iorlw	0
 12720  0009FC  E101 D09D          	bz	l533
 12721                           
 12722                           ;main.c: 734: putsUSART((char *) "Value for reg ");
 12723  000A00  0E7E               	movlw	high STR_55
 12724  000A02  0100               	movlb	0	; () banked
 12725  000A04  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12726  000A06  0E5D               	movlw	low STR_55
 12727  000A08  6F61               	movwf	?_putsUSART& (0+255),b
 12728  000A0A  ECEA  F028         	call	_putsUSART	;wreg free
 12729                           
 12730                           ;main.c: 735: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 12731  000A0E  0101               	movlb	1	; () banked
 12732  000A10  6700               	tstfsz	_bHex& (0+255),b
 12733  000A12  D005               	goto	l10278
 12734                           
 12735                           ; BSR set to: 1
 12736  000A14  0E7F               	movlw	high STR_57
 12737  000A16  0102               	movlb	2	; () banked
 12738  000A18  6F95               	movwf	(_doModeVerbose$1124+1)& (0+255),b
 12739  000A1A  0EED               	movlw	low STR_57
 12740  000A1C  D004               	goto	L6
 12741  000A1E                     l10278:
 12742                           
 12743                           ; BSR set to: 1
 12744  000A1E  0E7F               	movlw	high STR_56
 12745  000A20  0102               	movlb	2	; () banked
 12746  000A22  6F95               	movwf	(_doModeVerbose$1124+1)& (0+255),b
 12747  000A24  0E64               	movlw	low STR_56
 12748  000A26                     L6:
 12749  000A26  6F94               	movwf	_doModeVerbose$1124& (0+255),b
 12750                           
 12751                           ; BSR set to: 2
 12752  000A28  0E01               	movlw	high _wrkbuf
 12753  000A2A  0100               	movlb	0	; () banked
 12754  000A2C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12755  000A2E  0E54               	movlw	low _wrkbuf
 12756  000A30  6F76               	movwf	?_sprintf& (0+255),b
 12757  000A32  C294  F078         	movff	_doModeVerbose$1124,?_sprintf+2
 12758  000A36  C295  F079         	movff	_doModeVerbose$1124+1,?_sprintf+3
 12759  000A3A  C2AD  F07A         	movff	doModeVerbose@page,?_sprintf+4
 12760  000A3E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12761  000A40  EC28  F00B         	call	_sprintf	;wreg free
 12762                           
 12763                           ; BSR set to: 0
 12764                           ;main.c: 736: putsUSART(wrkbuf);
 12765  000A44  0E01               	movlw	high _wrkbuf
 12766  000A46  0100               	movlb	0	; () banked
 12767  000A48  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12768  000A4A  0E54               	movlw	low _wrkbuf
 12769  000A4C  6F61               	movwf	?_putsUSART& (0+255),b
 12770  000A4E  ECEA  F028         	call	_putsUSART	;wreg free
 12771  000A52                     l538:
 12772  000A52  A2AC               	btfss	4012,1,c	;volatile
 12773  000A54  D7FE               	goto	l538
 12774                           
 12775                           ;main.c: 738: WriteUSART(':');
 12776  000A56  0E3A               	movlw	58
 12777  000A58  ECB9  F02B         	call	_WriteUSART
 12778                           
 12779                           ;main.c: 739: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 12780  000A5C  0101               	movlb	1	; () banked
 12781  000A5E  6700               	tstfsz	_bHex& (0+255),b
 12782  000A60  D005               	goto	l10290
 12783                           
 12784                           ; BSR set to: 1
 12785  000A62  0E7F               	movlw	high STR_57
 12786  000A64  0102               	movlb	2	; () banked
 12787  000A66  6F97               	movwf	(_doModeVerbose$1136+1)& (0+255),b
 12788  000A68  0EED               	movlw	low STR_57
 12789  000A6A  D004               	goto	L7
 12790  000A6C                     l10290:
 12791                           
 12792                           ; BSR set to: 1
 12793  000A6C  0E7F               	movlw	high STR_56
 12794  000A6E  0102               	movlb	2	; () banked
 12795  000A70  6F97               	movwf	(_doModeVerbose$1136+1)& (0+255),b
 12796  000A72  0E64               	movlw	low STR_56
 12797  000A74                     L7:
 12798  000A74  6F96               	movwf	_doModeVerbose$1136& (0+255),b
 12799                           
 12800                           ; BSR set to: 2
 12801  000A76  0E01               	movlw	high _wrkbuf
 12802  000A78  0100               	movlb	0	; () banked
 12803  000A7A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12804  000A7C  0E54               	movlw	low _wrkbuf
 12805  000A7E  6F76               	movwf	?_sprintf& (0+255),b
 12806  000A80  C296  F078         	movff	_doModeVerbose$1136,?_sprintf+2
 12807  000A84  C297  F079         	movff	_doModeVerbose$1136+1,?_sprintf+3
 12808  000A88  ECF6  F00A         	call	PL42	;call to abstracted procedure
 12809  000A8C  EC28  F00B         	call	_sprintf	;wreg free
 12810                           
 12811                           ; BSR set to: 0
 12812                           ;main.c: 740: putsUSART(wrkbuf);
 12813  000A90  0E01               	movlw	high _wrkbuf
 12814  000A92  0100               	movlb	0	; () banked
 12815  000A94  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12816  000A96  0E54               	movlw	low _wrkbuf
 12817  000A98  6F61               	movwf	?_putsUSART& (0+255),b
 12818  000A9A  ECEA  F028         	call	_putsUSART	;wreg free
 12819                           
 12820                           ;main.c: 741: putsUSART((char *) " = ");
 12821  000A9E  0E7E               	movlw	high (STR_243+4)
 12822  000AA0  0100               	movlb	0	; () banked
 12823  000AA2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12824  000AA4  0EE9               	movlw	low (STR_243+4)
 12825  000AA6  6F61               	movwf	?_putsUSART& (0+255),b
 12826  000AA8  ECEA  F028         	call	_putsUSART	;wreg free
 12827                           
 12828                           ;main.c: 742: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", value);
 12829  000AAC  0101               	movlb	1	; () banked
 12830  000AAE  6700               	tstfsz	_bHex& (0+255),b
 12831  000AB0  D005               	goto	l10302
 12832                           
 12833                           ; BSR set to: 1
 12834  000AB2  0E7F               	movlw	high STR_57
 12835  000AB4  0102               	movlb	2	; () banked
 12836  000AB6  6F99               	movwf	(_doModeVerbose$1141+1)& (0+255),b
 12837  000AB8  0EED               	movlw	low STR_57
 12838  000ABA  D004               	goto	L8
 12839  000ABC                     l10302:
 12840                           
 12841                           ; BSR set to: 1
 12842  000ABC  0E7F               	movlw	high STR_56
 12843  000ABE  0102               	movlb	2	; () banked
 12844  000AC0  6F99               	movwf	(_doModeVerbose$1141+1)& (0+255),b
 12845  000AC2  0E64               	movlw	low STR_56
 12846  000AC4                     L8:
 12847  000AC4  6F98               	movwf	_doModeVerbose$1141& (0+255),b
 12848                           
 12849                           ; BSR set to: 2
 12850  000AC6  0E01               	movlw	high _wrkbuf
 12851  000AC8  0100               	movlb	0	; () banked
 12852  000ACA  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12853  000ACC  0E54               	movlw	low _wrkbuf
 12854  000ACE  6F76               	movwf	?_sprintf& (0+255),b
 12855  000AD0  C298  F078         	movff	_doModeVerbose$1141,?_sprintf+2
 12856  000AD4  C299  F079         	movff	_doModeVerbose$1141+1,?_sprintf+3
 12857  000AD8  C2B1  F07A         	movff	doModeVerbose@value,?_sprintf+4
 12858  000ADC  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12859  000ADE  EC28  F00B         	call	_sprintf	;wreg free
 12860                           
 12861                           ; BSR set to: 0
 12862                           ;main.c: 743: putsUSART(wrkbuf);
 12863  000AE2  0E01               	movlw	high _wrkbuf
 12864  000AE4  0100               	movlb	0	; () banked
 12865  000AE6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12866  000AE8  0E54               	movlw	low _wrkbuf
 12867  000AEA  6F61               	movwf	?_putsUSART& (0+255),b
 12868  000AEC  ECEA  F028         	call	_putsUSART	;wreg free
 12869  000AF0                     l549:
 12870  000AF0  A2AC               	btfss	4012,1,c	;volatile
 12871  000AF2  D7FE               	goto	l549
 12872                           
 12873                           ;main.c: 745: WriteUSART(' ');
 12874  000AF4  0E20               	movlw	32
 12875  000AF6  ECB9  F02B         	call	_WriteUSART
 12876  000AFA                     l552:
 12877  000AFA  A2AC               	btfss	4012,1,c	;volatile
 12878  000AFC  D7FE               	goto	l552
 12879                           
 12880                           ;main.c: 747: if ((value > 32) && (value < 127)) {
 12881  000AFE  0E20               	movlw	32
 12882  000B00  0102               	movlb	2	; () banked
 12883  000B02  65B1               	cpfsgt	doModeVerbose@value& (0+255),b
 12884  000B04  D007               	goto	l10316
 12885                           
 12886                           ; BSR set to: 2
 12887  000B06  0E7F               	movlw	127
 12888  000B08  61B1               	cpfslt	doModeVerbose@value& (0+255),b
 12889  000B0A  D004               	goto	l10316
 12890                           
 12891                           ; BSR set to: 2
 12892                           ;main.c: 748: WriteUSART(value);
 12893  000B0C  51B1               	movf	doModeVerbose@value& (0+255),w,b
 12894  000B0E  ECB9  F02B         	call	_WriteUSART
 12895                           
 12896                           ;main.c: 749: }
 12897  000B12  D003               	goto	l557
 12898  000B14                     l10316:
 12899                           
 12900                           ; BSR set to: 2
 12901                           ;main.c: 750: else {
 12902                           ;main.c: 751: WriteUSART('.');
 12903  000B14  0E2E               	movlw	46
 12904  000B16  ECB9  F02B         	call	_WriteUSART
 12905  000B1A                     l557:
 12906  000B1A  A2AC               	btfss	4012,1,c	;volatile
 12907  000B1C  D7FE               	goto	l557
 12908                           
 12909                           ;main.c: 754: WriteUSART(' ');
 12910  000B1E  0E20               	movlw	32
 12911  000B20  ECB9  F02B         	call	_WriteUSART
 12912                           
 12913                           ;main.c: 755: printBinary(value);
 12914  000B24  0102               	movlb	2	; () banked
 12915  000B26  51B1               	movf	doModeVerbose@value& (0+255),w,b
 12916  000B28  EC3D  F029         	call	_printBinary
 12917                           
 12918                           ; BSR set to: 0
 12919                           ;main.c: 756: putsUSART((char *) "\r\n");
 12920  000B2C  0E74               	movlw	high (STR_197+50)
 12921  000B2E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12922  000B30  0E8A               	movlw	low (STR_197+50)
 12923  000B32  6F61               	movwf	?_putsUSART& (0+255),b
 12924  000B34  ECEA  F028         	call	_putsUSART	;wreg free
 12925                           
 12926                           ;main.c: 757: }
 12927  000B38  D058               	goto	l10350
 12928  000B3A                     l533:
 12929                           
 12930                           ;main.c: 758: else {
 12931                           ;main.c: 759: rv = 0;
 12932  000B3A  0102               	movlb	2	; () banked
 12933  000B3C  6BA0               	clrf	doModeVerbose@rv& (0+255),b
 12934                           
 12935                           ; BSR set to: 2
 12936                           ;main.c: 760: putsUSART((char *) "-ERROR - Unable to read register ");
 12937  000B3E  0E7A               	movlw	high STR_64
 12938  000B40  0100               	movlb	0	; () banked
 12939  000B42  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12940  000B44  0E05               	movlw	low STR_64
 12941  000B46  6F61               	movwf	?_putsUSART& (0+255),b
 12942  000B48  ECEA  F028         	call	_putsUSART	;wreg free
 12943                           
 12944                           ;main.c: 761: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 12945  000B4C  0101               	movlb	1	; () banked
 12946  000B4E  6700               	tstfsz	_bHex& (0+255),b
 12947  000B50  D005               	goto	l10330
 12948                           
 12949                           ; BSR set to: 1
 12950  000B52  0E7F               	movlw	high STR_57
 12951  000B54  0102               	movlb	2	; () banked
 12952  000B56  6F9B               	movwf	(_doModeVerbose$1147+1)& (0+255),b
 12953  000B58  0EED               	movlw	low STR_57
 12954  000B5A  D004               	goto	L9
 12955  000B5C                     l10330:
 12956                           
 12957                           ; BSR set to: 1
 12958  000B5C  0E7F               	movlw	high STR_56
 12959  000B5E  0102               	movlb	2	; () banked
 12960  000B60  6F9B               	movwf	(_doModeVerbose$1147+1)& (0+255),b
 12961  000B62  0E64               	movlw	low STR_56
 12962  000B64                     L9:
 12963  000B64  6F9A               	movwf	_doModeVerbose$1147& (0+255),b
 12964                           
 12965                           ; BSR set to: 2
 12966  000B66  0E01               	movlw	high _wrkbuf
 12967  000B68  0100               	movlb	0	; () banked
 12968  000B6A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12969  000B6C  0E54               	movlw	low _wrkbuf
 12970  000B6E  6F76               	movwf	?_sprintf& (0+255),b
 12971  000B70  C29A  F078         	movff	_doModeVerbose$1147,?_sprintf+2
 12972  000B74  C29B  F079         	movff	_doModeVerbose$1147+1,?_sprintf+3
 12973  000B78  C2AD  F07A         	movff	doModeVerbose@page,?_sprintf+4
 12974  000B7C  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12975  000B7E  EC28  F00B         	call	_sprintf	;wreg free
 12976                           
 12977                           ; BSR set to: 0
 12978                           ;main.c: 762: putsUSART(wrkbuf);
 12979  000B82  0E01               	movlw	high _wrkbuf
 12980  000B84  0100               	movlb	0	; () banked
 12981  000B86  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12982  000B88  0E54               	movlw	low _wrkbuf
 12983  000B8A  6F61               	movwf	?_putsUSART& (0+255),b
 12984  000B8C  ECEA  F028         	call	_putsUSART	;wreg free
 12985  000B90                     l565:
 12986  000B90  A2AC               	btfss	4012,1,c	;volatile
 12987  000B92  D7FE               	goto	l565
 12988                           
 12989                           ;main.c: 764: WriteUSART(':');
 12990  000B94  0E3A               	movlw	58
 12991  000B96  ECB9  F02B         	call	_WriteUSART
 12992                           
 12993                           ;main.c: 765: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 12994  000B9A  0101               	movlb	1	; () banked
 12995  000B9C  6700               	tstfsz	_bHex& (0+255),b
 12996  000B9E  D005               	goto	l10342
 12997                           
 12998                           ; BSR set to: 1
 12999  000BA0  0E7F               	movlw	high STR_57
 13000  000BA2  0102               	movlb	2	; () banked
 13001  000BA4  6F9D               	movwf	(_doModeVerbose$1151+1)& (0+255),b
 13002  000BA6  0EED               	movlw	low STR_57
 13003  000BA8  D004               	goto	L10
 13004  000BAA                     l10342:
 13005                           
 13006                           ; BSR set to: 1
 13007  000BAA  0E7F               	movlw	high STR_56
 13008  000BAC  0102               	movlb	2	; () banked
 13009  000BAE  6F9D               	movwf	(_doModeVerbose$1151+1)& (0+255),b
 13010  000BB0  0E64               	movlw	low STR_56
 13011  000BB2                     L10:
 13012  000BB2  6F9C               	movwf	_doModeVerbose$1151& (0+255),b
 13013                           
 13014                           ; BSR set to: 2
 13015  000BB4  0E01               	movlw	high _wrkbuf
 13016  000BB6  0100               	movlb	0	; () banked
 13017  000BB8  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13018  000BBA  0E54               	movlw	low _wrkbuf
 13019  000BBC  6F76               	movwf	?_sprintf& (0+255),b
 13020  000BBE  C29C  F078         	movff	_doModeVerbose$1151,?_sprintf+2
 13021  000BC2  C29D  F079         	movff	_doModeVerbose$1151+1,?_sprintf+3
 13022  000BC6  ECF6  F00A         	call	PL42	;call to abstracted procedure
 13023  000BCA  EC28  F00B         	call	_sprintf	;wreg free
 13024                           
 13025                           ; BSR set to: 0
 13026                           ;main.c: 766: putsUSART(wrkbuf);
 13027  000BCE  0E01               	movlw	high _wrkbuf
 13028  000BD0  0100               	movlb	0	; () banked
 13029  000BD2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13030  000BD4  0E54               	movlw	low _wrkbuf
 13031  000BD6  6F61               	movwf	?_putsUSART& (0+255),b
 13032  000BD8  ECEA  F028         	call	_putsUSART	;wreg free
 13033                           
 13034                           ;main.c: 767: putsUSART((char *) "\r\n");
 13035  000BDC  0E74               	movlw	high (STR_197+50)
 13036  000BDE  0100               	movlb	0	; () banked
 13037  000BE0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13038  000BE2  0E8A               	movlw	low (STR_197+50)
 13039  000BE4  6F61               	movwf	?_putsUSART& (0+255),b
 13040  000BE6  ECEA  F028         	call	_putsUSART	;wreg free
 13041  000BEA                     l10350:
 13042  000BEA  0102               	movlb	2	; () banked
 13043  000BEC  2BB0               	incf	doModeVerbose@i_1106& (0+255),f,b
 13044  000BEE                     l10352:
 13045                           
 13046                           ; BSR set to: 2
 13047  000BEE  51AB               	movf	doModeVerbose@count& (0+255),w,b
 13048  000BF0  5DB0               	subwf	doModeVerbose@i_1106& (0+255),w,b
 13049  000BF2  E201 D6EE          	bnc	l10270
 13050                           
 13051                           ; BSR set to: 2
 13052                           ;main.c: 768: }
 13053                           ;main.c: 769: }
 13054                           ;main.c: 771: if (rv) {
 13055  000BF6  51A0               	movf	doModeVerbose@rv& (0+255),w,b
 13056  000BF8  E009               	bz	l10358
 13057                           
 13058                           ; BSR set to: 2
 13059                           ;main.c: 772: putsUSART((char *) "+OK\r\n");
 13060  000BFA  0E7F               	movlw	high STR_9
 13061  000BFC  0100               	movlb	0	; () banked
 13062  000BFE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13063  000C00  0E7F               	movlw	low STR_9
 13064  000C02  6F61               	movwf	?_putsUSART& (0+255),b
 13065  000C04  ECEA  F028         	call	_putsUSART	;wreg free
 13066                           
 13067                           ;main.c: 773: }
 13068  000C08  EF70  F00A         	goto	l10652
 13069  000C0C                     l10358:
 13070                           
 13071                           ; BSR set to: 2
 13072                           ;main.c: 774: else {
 13073                           ;main.c: 775: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 13074  000C0C  0E74               	movlw	high STR_71
 13075  000C0E  0100               	movlb	0	; () banked
 13076  000C10  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13077  000C12  0E22               	movlw	low STR_71
 13078  000C14  6F61               	movwf	?_putsUSART& (0+255),b
 13079  000C16  ECEA  F028         	call	_putsUSART	;wreg free
 13080  000C1A  EF70  F00A         	goto	l10652
 13081  000C1E                     l10360:
 13082                           
 13083                           ; BSR set to: 1
 13084                           ;main.c: 781: else if (cmdbuf == stristr(cmdbuf, "WREG")) {
 13085  000C1E  0E01               	movlw	high _cmdbuf
 13086  000C20  0100               	movlb	0	; () banked
 13087  000C22  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13088  000C24  0E04               	movlw	low _cmdbuf
 13089  000C26  6F6D               	movwf	?_stristr& (0+255),b
 13090  000C28  0E7F               	movlw	high STR_72
 13091  000C2A  6F70               	movwf	(?_stristr+3)& (0+255),b
 13092  000C2C  0EAC               	movlw	low STR_72
 13093  000C2E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13094  000C30  EC3C  F026         	call	_stristr	;wreg free
 13095  000C34  EC80  F00A         	call	PL2	;call to abstracted procedure
 13096  000C38  E104               	bnz	u12695
 13097  000C3A  0100               	movlb	0	; () banked
 13098  000C3C  516D               	movf	?_stristr& (0+255),w,b
 13099  000C3E  0101               	movlb	1	; () banked
 13100  000C40  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13101  000C42                     u12695:
 13102  000C42  E001 D0AF          	bnz	l10402
 13103                           
 13104                           ; BSR set to: 1
 13105                           ;main.c: 783: uint8_t nodeid;
 13106                           ;main.c: 784: uint8_t page = 0;
 13107  000C46  0102               	movlb	2	; () banked
 13108  000C48  6BA1               	clrf	doModeVerbose@page_1157& (0+255),b
 13109                           
 13110                           ; BSR set to: 2
 13111                           ;main.c: 785: uint8_t reg;
 13112                           ;main.c: 786: uint8_t value;
 13113                           ;main.c: 788: strcpy(cmdbuf, cmdbuf + 5);
 13114  000C4A  EC8A  F00A         	call	PL4	;call to abstracted procedure
 13115  000C4E  EC1A  F02B         	call	_strcpy	;wreg free
 13116                           
 13117                           ;main.c: 789: char *p = strtok(cmdbuf, " ");
 13118  000C52  0E01               	movlw	high _cmdbuf
 13119  000C54  ECED  F00A         	call	PL36	;call to abstracted procedure
 13120  000C58  ECE4  F024         	call	_strtok	;wreg free
 13121  000C5C  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1160
 13122  000C60  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1160+1
 13123                           
 13124                           ; BSR set to: 0
 13125                           ;main.c: 790: if ((0) != p) {
 13126  000C64  0102               	movlb	2	; () banked
 13127  000C66  51B5               	movf	(doModeVerbose@p_1160+1)& (0+255),w,b
 13128  000C68  11B4               	iorwf	doModeVerbose@p_1160& (0+255),w,b
 13129  000C6A  E00A               	bz	l10372
 13130                           
 13131                           ; BSR set to: 2
 13132                           ;main.c: 791: nodeid = atoi(p);
 13133  000C6C  C2B4  F066         	movff	doModeVerbose@p_1160,?_atoi
 13134  000C70  C2B5  F067         	movff	doModeVerbose@p_1160+1,?_atoi+1
 13135  000C74  EC7A  F01D         	call	_atoi	;wreg free
 13136  000C78  5166               	movf	?_atoi& (0+255),w,b
 13137  000C7A  0102               	movlb	2	; () banked
 13138  000C7C  6F8D               	movwf	doModeVerbose@nodeid_1156& (0+255),b
 13139                           
 13140                           ;main.c: 792: }
 13141  000C7E  D009               	goto	l10376
 13142  000C80                     l10372:
 13143                           
 13144                           ; BSR set to: 2
 13145                           ;main.c: 793: else {
 13146                           ;main.c: 794: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 13147  000C80  0E7C               	movlw	high STR_51
 13148  000C82  0100               	movlb	0	; () banked
 13149  000C84  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13150  000C86  0E30               	movlw	low STR_51
 13151  000C88  6F61               	movwf	?_putsUSART& (0+255),b
 13152  000C8A  ECEA  F028         	call	_putsUSART	;wreg free
 13153  000C8E  EF7F  F00A         	goto	l524
 13154  000C92                     l10376:
 13155                           
 13156                           ; BSR set to: 2
 13157                           ;main.c: 796: }
 13158                           ;main.c: 798: if ((0) != (p = strtok((0), " "))) {
 13159  000C92  ECDB  F00A         	call	PL28	;call to abstracted procedure
 13160  000C96  ECE4  F024         	call	_strtok	;wreg free
 13161  000C9A  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1160
 13162  000C9E  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1160+1
 13163  000CA2  0102               	movlb	2	; () banked
 13164  000CA4  51B5               	movf	(doModeVerbose@p_1160+1)& (0+255),w,b
 13165  000CA6  11B4               	iorwf	doModeVerbose@p_1160& (0+255),w,b
 13166  000CA8  E034               	bz	l10384
 13167                           
 13168                           ; BSR set to: 2
 13169                           ;main.c: 800: char *preg;
 13170                           ;main.c: 801: if (preg = strchr(p, ':')) {
 13171  000CAA  C2B4  F060         	movff	doModeVerbose@p_1160,?_strchr
 13172  000CAE  C2B5  F061         	movff	doModeVerbose@p_1160+1,?_strchr+1
 13173  000CB2  0100               	movlb	0	; () banked
 13174  000CB4  6B63               	clrf	(?_strchr+3)& (0+255),b
 13175  000CB6  0E3A               	movlw	58
 13176  000CB8  6F62               	movwf	(?_strchr+2)& (0+255),b
 13177  000CBA  ECFE  F027         	call	_strchr	;wreg free
 13178  000CBE  C060  F286         	movff	?_strchr,doModeVerbose@preg_1164
 13179  000CC2  C061  F287         	movff	?_strchr+1,doModeVerbose@preg_1164+1
 13180  000CC6  0102               	movlb	2	; () banked
 13181  000CC8  5187               	movf	(doModeVerbose@preg_1164+1)& (0+255),w,b
 13182  000CCA  1186               	iorwf	doModeVerbose@preg_1164& (0+255),w,b
 13183  000CCC  E018               	bz	l10382
 13184                           
 13185                           ; BSR set to: 2
 13186                           ;main.c: 802: page = atoi(p);
 13187  000CCE  C2B4  F066         	movff	doModeVerbose@p_1160,?_atoi
 13188  000CD2  C2B5  F067         	movff	doModeVerbose@p_1160+1,?_atoi+1
 13189  000CD6  EC7A  F01D         	call	_atoi	;wreg free
 13190  000CDA  5166               	movf	?_atoi& (0+255),w,b
 13191  000CDC  0102               	movlb	2	; () banked
 13192  000CDE  6FA1               	movwf	doModeVerbose@page_1157& (0+255),b
 13193                           
 13194                           ;main.c: 803: reg = atoi(preg + 1);
 13195  000CE0  2986               	incf	doModeVerbose@preg_1164& (0+255),w,b
 13196  000CE2  0101               	movlb	1	; () banked
 13197  000CE4  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13198  000CE6  0E00               	movlw	0
 13199  000CE8  0102               	movlb	2	; () banked
 13200  000CEA  2187               	addwfc	(doModeVerbose@preg_1164+1)& (0+255),w,b
 13201  000CEC  0101               	movlb	1	; () banked
 13202  000CEE  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13203  000CF0  C1B2  F066         	movff	??_doModeVerbose,?_atoi
 13204  000CF4  C1B3  F067         	movff	??_doModeVerbose+1,?_atoi+1
 13205  000CF8  EC7A  F01D         	call	_atoi	;wreg free
 13206  000CFC  D006               	goto	L11
 13207  000CFE                     l10382:
 13208                           
 13209                           ; BSR set to: 2
 13210                           ;main.c: 805: else {
 13211                           ;main.c: 806: reg = atoi(p);
 13212  000CFE  C2B4  F066         	movff	doModeVerbose@p_1160,?_atoi
 13213  000D02  C2B5  F067         	movff	doModeVerbose@p_1160+1,?_atoi+1
 13214  000D06  EC7A  F01D         	call	_atoi	;wreg free
 13215  000D0A                     L11:
 13216  000D0A  5166               	movf	?_atoi& (0+255),w,b
 13217  000D0C  0102               	movlb	2	; () banked
 13218  000D0E  6FA2               	movwf	doModeVerbose@reg_1158& (0+255),b
 13219  000D10  D008               	goto	l10388
 13220  000D12                     l10384:
 13221                           
 13222                           ; BSR set to: 2
 13223                           ;main.c: 810: else {
 13224                           ;main.c: 811: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 13225  000D12  0E7A               	movlw	high STR_53
 13226  000D14  0100               	movlb	0	; () banked
 13227  000D16  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13228  000D18  0EAB               	movlw	low STR_53
 13229  000D1A  6F61               	movwf	?_putsUSART& (0+255),b
 13230  000D1C  ECEA  F028         	call	_putsUSART	;wreg free
 13231  000D20  D3EE               	goto	l524
 13232  000D22                     l10388:
 13233                           
 13234                           ; BSR set to: 2
 13235                           ;main.c: 813: }
 13236                           ;main.c: 816: if ((0) != (p = strtok((0), " "))) {
 13237  000D22  ECDB  F00A         	call	PL28	;call to abstracted procedure
 13238  000D26  ECE4  F024         	call	_strtok	;wreg free
 13239  000D2A  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1160
 13240  000D2E  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1160+1
 13241  000D32  0102               	movlb	2	; () banked
 13242  000D34  51B5               	movf	(doModeVerbose@p_1160+1)& (0+255),w,b
 13243  000D36  11B4               	iorwf	doModeVerbose@p_1160& (0+255),w,b
 13244  000D38  E00A               	bz	l10392
 13245                           
 13246                           ; BSR set to: 2
 13247                           ;main.c: 817: value = atoi(p);
 13248  000D3A  C2B4  F066         	movff	doModeVerbose@p_1160,?_atoi
 13249  000D3E  C2B5  F067         	movff	doModeVerbose@p_1160+1,?_atoi+1
 13250  000D42  EC7A  F01D         	call	_atoi	;wreg free
 13251  000D46  5166               	movf	?_atoi& (0+255),w,b
 13252  000D48  0102               	movlb	2	; () banked
 13253  000D4A  6FA9               	movwf	doModeVerbose@value_1159& (0+255),b
 13254                           
 13255                           ;main.c: 818: }
 13256  000D4C  D008               	goto	l10396
 13257  000D4E                     l10392:
 13258                           
 13259                           ; BSR set to: 2
 13260                           ;main.c: 819: else {
 13261                           ;main.c: 820: putsUSART((char *) "-ERROR - Need a value\r\n");
 13262  000D4E  0E7C               	movlw	high STR_78
 13263  000D50  0100               	movlb	0	; () banked
 13264  000D52  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13265  000D54  0E60               	movlw	low STR_78
 13266  000D56  6F61               	movwf	?_putsUSART& (0+255),b
 13267  000D58  ECEA  F028         	call	_putsUSART	;wreg free
 13268  000D5C  D3D0               	goto	l524
 13269  000D5E                     l10396:
 13270                           
 13271                           ; BSR set to: 2
 13272                           ;main.c: 822: }
 13273                           ;main.c: 824: if (writeRegisterExtended(nodeid,
 13274                           ;main.c: 825: page,
 13275                           ;main.c: 826: reg,
 13276                           ;main.c: 827: rwtimeout,
 13277                           ;main.c: 828: &value)) {
 13278  000D5E  0100               	movlb	0	; () banked
 13279  000D60  C2A1  F0B6         	movff	doModeVerbose@page_1157,?_writeRegisterExtended
 13280  000D64  6BB7               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 13281  000D66  C2A2  F0B8         	movff	doModeVerbose@reg_1158,?_writeRegisterExtended+2
 13282  000D6A  C103  F0B9         	movff	_rwtimeout,?_writeRegisterExtended+3
 13283  000D6E  6BBA               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 13284  000D70  0E02               	movlw	high doModeVerbose@value_1159
 13285  000D72  6FBC               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 13286  000D74  0EA9               	movlw	low doModeVerbose@value_1159
 13287  000D76  6FBB               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 13288  000D78  0102               	movlb	2	; () banked
 13289  000D7A  518D               	movf	doModeVerbose@nodeid_1156& (0+255),w,b
 13290  000D7C  ECF7  F01C         	call	_writeRegisterExtended
 13291  000D80  0900               	iorlw	0
 13292  000D82  E008               	bz	l10400
 13293                           
 13294                           ;main.c: 829: putsUSART((char *) "+OK - Value written successfully\r\n");
 13295  000D84  0E79               	movlw	high STR_79
 13296  000D86  0100               	movlb	0	; () banked
 13297  000D88  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13298  000D8A  0EC0               	movlw	low STR_79
 13299  000D8C  6F61               	movwf	?_putsUSART& (0+255),b
 13300  000D8E  ECEA  F028         	call	_putsUSART	;wreg free
 13301                           
 13302                           ;main.c: 830: }
 13303  000D92  D3A6               	goto	l10652
 13304  000D94                     l10400:
 13305                           
 13306                           ;main.c: 831: else {
 13307                           ;main.c: 832: putsUSART((char *) "-ERROR - Failed to write value\r\n");
 13308  000D94  0E7A               	movlw	high STR_80
 13309  000D96  0100               	movlb	0	; () banked
 13310  000D98  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13311  000D9A  0E8A               	movlw	low STR_80
 13312  000D9C  6F61               	movwf	?_putsUSART& (0+255),b
 13313  000D9E  ECEA  F028         	call	_putsUSART	;wreg free
 13314  000DA2  D39E               	goto	l10652
 13315  000DA4                     l10402:
 13316                           
 13317                           ; BSR set to: 1
 13318                           ;main.c: 838: else if (cmdbuf == stristr(cmdbuf, "INFO")) {
 13319  000DA4  0E01               	movlw	high _cmdbuf
 13320  000DA6  0100               	movlb	0	; () banked
 13321  000DA8  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13322  000DAA  0E04               	movlw	low _cmdbuf
 13323  000DAC  6F6D               	movwf	?_stristr& (0+255),b
 13324  000DAE  0E7F               	movlw	high STR_81
 13325  000DB0  6F70               	movwf	(?_stristr+3)& (0+255),b
 13326  000DB2  0EBB               	movlw	low STR_81
 13327  000DB4  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13328  000DB6  EC3C  F026         	call	_stristr	;wreg free
 13329  000DBA  DBA2               	call	PL2	;call to abstracted procedure
 13330  000DBC  E104               	bnz	u12755
 13331  000DBE  0100               	movlb	0	; () banked
 13332  000DC0  516D               	movf	?_stristr& (0+255),w,b
 13333  000DC2  0101               	movlb	1	; () banked
 13334  000DC4  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13335  000DC6                     u12755:
 13336  000DC6  E151               	bnz	l10430
 13337                           
 13338                           ; BSR set to: 1
 13339                           ;main.c: 839: uint8_t nodeid;
 13340                           ;main.c: 841: strcpy(cmdbuf, cmdbuf + 5);
 13341  000DC8  DBA5               	call	PL4	;call to abstracted procedure
 13342  000DCA  EC1A  F02B         	call	_strcpy	;wreg free
 13343                           
 13344                           ;main.c: 842: nodeid = atoi(cmdbuf);
 13345  000DCE  0E01               	movlw	high _cmdbuf
 13346  000DD0  0100               	movlb	0	; () banked
 13347  000DD2  6F67               	movwf	(?_atoi+1)& (0+255),b
 13348  000DD4  0E04               	movlw	low _cmdbuf
 13349  000DD6  6F66               	movwf	?_atoi& (0+255),b
 13350  000DD8  EC7A  F01D         	call	_atoi	;wreg free
 13351  000DDC  5166               	movf	?_atoi& (0+255),w,b
 13352  000DDE  0102               	movlb	2	; () banked
 13353  000DE0  6FAF               	movwf	doModeVerbose@nodeid_1171& (0+255),b
 13354                           
 13355                           ; BSR set to: 2
 13356                           ;main.c: 844: putsUSART((char *) "Info for node id = ");
 13357  000DE2  0E7D               	movlw	high STR_82
 13358  000DE4  0100               	movlb	0	; () banked
 13359  000DE6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13360  000DE8  0EAA               	movlw	low STR_82
 13361  000DEA  6F61               	movwf	?_putsUSART& (0+255),b
 13362  000DEC  ECEA  F028         	call	_putsUSART	;wreg free
 13363                           
 13364                           ;main.c: 845: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", nodeid);
 13365  000DF0  0101               	movlb	1	; () banked
 13366  000DF2  6700               	tstfsz	_bHex& (0+255),b
 13367  000DF4  D005               	goto	l10414
 13368                           
 13369                           ; BSR set to: 1
 13370  000DF6  0E7F               	movlw	high STR_57
 13371  000DF8  0102               	movlb	2	; () banked
 13372  000DFA  6F9F               	movwf	(_doModeVerbose$1176+1)& (0+255),b
 13373  000DFC  0EED               	movlw	low STR_57
 13374  000DFE  D004               	goto	L12
 13375  000E00                     l10414:
 13376                           
 13377                           ; BSR set to: 1
 13378  000E00  0E7F               	movlw	high STR_56
 13379  000E02  0102               	movlb	2	; () banked
 13380  000E04  6F9F               	movwf	(_doModeVerbose$1176+1)& (0+255),b
 13381  000E06  0E64               	movlw	low STR_56
 13382  000E08                     L12:
 13383  000E08  6F9E               	movwf	_doModeVerbose$1176& (0+255),b
 13384                           
 13385                           ; BSR set to: 2
 13386  000E0A  0E01               	movlw	high _wrkbuf
 13387  000E0C  0100               	movlb	0	; () banked
 13388  000E0E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13389  000E10  0E54               	movlw	low _wrkbuf
 13390  000E12  6F76               	movwf	?_sprintf& (0+255),b
 13391  000E14  C29E  F078         	movff	_doModeVerbose$1176,?_sprintf+2
 13392  000E18  C29F  F079         	movff	_doModeVerbose$1176+1,?_sprintf+3
 13393  000E1C  C2AF  F07A         	movff	doModeVerbose@nodeid_1171,?_sprintf+4
 13394  000E20  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13395  000E22  EC28  F00B         	call	_sprintf	;wreg free
 13396                           
 13397                           ; BSR set to: 0
 13398                           ;main.c: 846: putsUSART(wrkbuf);
 13399  000E26  0E01               	movlw	high _wrkbuf
 13400  000E28  0100               	movlb	0	; () banked
 13401  000E2A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13402  000E2C  0E54               	movlw	low _wrkbuf
 13403  000E2E  6F61               	movwf	?_putsUSART& (0+255),b
 13404  000E30  ECEA  F028         	call	_putsUSART	;wreg free
 13405                           
 13406                           ;main.c: 847: putsUSART((char *) "\r\n");
 13407  000E34  0E74               	movlw	high (STR_197+50)
 13408  000E36  0100               	movlb	0	; () banked
 13409  000E38  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13410  000E3A  0E8A               	movlw	low (STR_197+50)
 13411  000E3C  6F61               	movwf	?_putsUSART& (0+255),b
 13412  000E3E  ECEA  F028         	call	_putsUSART	;wreg free
 13413                           
 13414                           ;main.c: 848: printNodeFirmwareVersion(nodeid);
 13415  000E42  0102               	movlb	2	; () banked
 13416  000E44  51AF               	movf	doModeVerbose@nodeid_1171& (0+255),w,b
 13417  000E46  ECC1  F020         	call	_printNodeFirmwareVersion
 13418                           
 13419                           ;main.c: 849: printGUID(nodeid);
 13420  000E4A  0102               	movlb	2	; () banked
 13421  000E4C  51AF               	movf	doModeVerbose@nodeid_1171& (0+255),w,b
 13422  000E4E  ECFD  F01D         	call	_printGUID
 13423                           
 13424                           ;main.c: 850: printMDF(nodeid);
 13425  000E52  0102               	movlb	2	; () banked
 13426  000E54  51AF               	movf	doModeVerbose@nodeid_1171& (0+255),w,b
 13427  000E56  EC99  F024         	call	_printMDF
 13428                           
 13429                           ;main.c: 851: putsUSART((char *) "+OK\r\n");
 13430  000E5A  0E7F               	movlw	high STR_9
 13431  000E5C  0100               	movlb	0	; () banked
 13432  000E5E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13433  000E60  0E7F               	movlw	low STR_9
 13434  000E62  6F61               	movwf	?_putsUSART& (0+255),b
 13435  000E64  ECEA  F028         	call	_putsUSART	;wreg free
 13436                           
 13437                           ;main.c: 852: }
 13438  000E68  D33B               	goto	l10652
 13439  000E6A                     l10430:
 13440                           
 13441                           ; BSR set to: 1
 13442                           ;main.c: 856: else if (cmdbuf == stristr(cmdbuf, "FILTER")) {
 13443  000E6A  0E01               	movlw	high _cmdbuf
 13444  000E6C  0100               	movlb	0	; () banked
 13445  000E6E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13446  000E70  0E04               	movlw	low _cmdbuf
 13447  000E72  6F6D               	movwf	?_stristr& (0+255),b
 13448  000E74  0E7F               	movlw	high STR_87
 13449  000E76  6F70               	movwf	(?_stristr+3)& (0+255),b
 13450  000E78  0E56               	movlw	low STR_87
 13451  000E7A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13452  000E7C  EC3C  F026         	call	_stristr	;wreg free
 13453  000E80  DB3F               	call	PL2	;call to abstracted procedure
 13454  000E82  E104               	bnz	u12775
 13455  000E84  0100               	movlb	0	; () banked
 13456  000E86  516D               	movf	?_stristr& (0+255),w,b
 13457  000E88  0101               	movlb	1	; () banked
 13458  000E8A  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13459  000E8C                     u12775:
 13460  000E8C  E001 D0D2          	bnz	l10498
 13461                           
 13462                           ; BSR set to: 1
 13463                           ;main.c: 858: uint8_t filterno;
 13464                           ;main.c: 859: uint8_t filter_priority;
 13465                           ;main.c: 860: uint16_t filter_class;
 13466                           ;main.c: 861: uint8_t filter_type;
 13467                           ;main.c: 862: uint8_t filter_nodeid;
 13468                           ;main.c: 864: strcpy(cmdbuf, cmdbuf + 8);
 13469  000E90  0E01               	movlw	high _cmdbuf
 13470  000E92  DB57               	call	PL8	;call to abstracted procedure
 13471  000E94  EC1A  F02B         	call	_strcpy	;wreg free
 13472                           
 13473                           ;main.c: 865: char *p = strtok(cmdbuf, ",");
 13474  000E98  DB96               	call	PL30	;call to abstracted procedure
 13475  000E9A  ECE4  F024         	call	_strtok	;wreg free
 13476  000E9E  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1185
 13477  000EA2  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1185+1
 13478                           
 13479                           ; BSR set to: 0
 13480                           ;main.c: 866: if ((0) != p) {
 13481  000EA6  0102               	movlb	2	; () banked
 13482  000EA8  51BA               	movf	(doModeVerbose@p_1185+1)& (0+255),w,b
 13483  000EAA  11B9               	iorwf	doModeVerbose@p_1185& (0+255),w,b
 13484  000EAC  E014               	bz	l10446
 13485                           
 13486                           ; BSR set to: 2
 13487                           ;main.c: 867: filterno = atoi(p);
 13488  000EAE  C2B9  F066         	movff	doModeVerbose@p_1185,?_atoi
 13489  000EB2  C2BA  F067         	movff	doModeVerbose@p_1185+1,?_atoi+1
 13490  000EB6  EC7A  F01D         	call	_atoi	;wreg free
 13491  000EBA  5166               	movf	?_atoi& (0+255),w,b
 13492  000EBC  0102               	movlb	2	; () banked
 13493  000EBE  6FA7               	movwf	doModeVerbose@filterno& (0+255),b
 13494                           
 13495                           ; BSR set to: 2
 13496                           ;main.c: 868: if (filterno > 15) {
 13497  000EC0  0E0F               	movlw	15
 13498  000EC2  65A7               	cpfsgt	doModeVerbose@filterno& (0+255),b
 13499  000EC4  D010               	goto	l10450
 13500                           
 13501                           ; BSR set to: 2
 13502                           ;main.c: 869: putsUSART((char *) "-ERROR - Filter number can only be set to a value betw
      +                          een 0-15.\r\n");
 13503  000EC6  0E72               	movlw	high STR_89
 13504  000EC8  0100               	movlb	0	; () banked
 13505  000ECA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13506  000ECC  0E1C               	movlw	low STR_89
 13507  000ECE  6F61               	movwf	?_putsUSART& (0+255),b
 13508  000ED0  ECEA  F028         	call	_putsUSART	;wreg free
 13509  000ED4  D314               	goto	l524
 13510  000ED6                     l10446:
 13511                           
 13512                           ; BSR set to: 2
 13513                           ;main.c: 873: else {
 13514                           ;main.c: 874: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 13515  000ED6  0E77               	movlw	high STR_90
 13516  000ED8  0100               	movlb	0	; () banked
 13517  000EDA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13518  000EDC  0EFA               	movlw	low STR_90
 13519  000EDE  6F61               	movwf	?_putsUSART& (0+255),b
 13520  000EE0  ECEA  F028         	call	_putsUSART	;wreg free
 13521  000EE4  D30C               	goto	l524
 13522  000EE6                     l10450:
 13523                           
 13524                           ; BSR set to: 2
 13525                           ;main.c: 876: }
 13526                           ;main.c: 879: p = strtok((0), ",");
 13527  000EE6  DB25               	call	PL6	;call to abstracted procedure
 13528  000EE8  ECE4  F024         	call	_strtok	;wreg free
 13529  000EEC  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1185
 13530  000EF0  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1185+1
 13531                           
 13532                           ; BSR set to: 0
 13533                           ;main.c: 880: if ((0) != p) {
 13534  000EF4  0102               	movlb	2	; () banked
 13535  000EF6  51BA               	movf	(doModeVerbose@p_1185+1)& (0+255),w,b
 13536  000EF8  11B9               	iorwf	doModeVerbose@p_1185& (0+255),w,b
 13537  000EFA  E00A               	bz	l10456
 13538                           
 13539                           ; BSR set to: 2
 13540                           ;main.c: 881: filter_priority = atoi(p);
 13541  000EFC  C2B9  F066         	movff	doModeVerbose@p_1185,?_atoi
 13542  000F00  C2BA  F067         	movff	doModeVerbose@p_1185+1,?_atoi+1
 13543  000F04  EC7A  F01D         	call	_atoi	;wreg free
 13544  000F08  5166               	movf	?_atoi& (0+255),w,b
 13545  000F0A  0102               	movlb	2	; () banked
 13546  000F0C  6F8E               	movwf	doModeVerbose@filter_priority& (0+255),b
 13547                           
 13548                           ;main.c: 882: }
 13549  000F0E  D008               	goto	l10460
 13550  000F10                     l10456:
 13551                           
 13552                           ; BSR set to: 2
 13553                           ;main.c: 883: else {
 13554                           ;main.c: 884: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 13555  000F10  0E77               	movlw	high STR_92
 13556  000F12  0100               	movlb	0	; () banked
 13557  000F14  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13558  000F16  0E2F               	movlw	low STR_92
 13559  000F18  6F61               	movwf	?_putsUSART& (0+255),b
 13560  000F1A  ECEA  F028         	call	_putsUSART	;wreg free
 13561  000F1E  D2EF               	goto	l524
 13562  000F20                     l10460:
 13563                           
 13564                           ; BSR set to: 2
 13565                           ;main.c: 886: }
 13566                           ;main.c: 889: p = strtok((0), ",");
 13567  000F20  DB08               	call	PL6	;call to abstracted procedure
 13568  000F22  ECE4  F024         	call	_strtok	;wreg free
 13569  000F26  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1185
 13570  000F2A  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1185+1
 13571                           
 13572                           ; BSR set to: 0
 13573                           ;main.c: 890: if ((0) != p) {
 13574  000F2E  0102               	movlb	2	; () banked
 13575  000F30  51BA               	movf	(doModeVerbose@p_1185+1)& (0+255),w,b
 13576  000F32  11B9               	iorwf	doModeVerbose@p_1185& (0+255),w,b
 13577  000F34  E00B               	bz	l10466
 13578                           
 13579                           ; BSR set to: 2
 13580                           ;main.c: 891: filter_class = atoi(p);
 13581  000F36  C2B9  F066         	movff	doModeVerbose@p_1185,?_atoi
 13582  000F3A  C2BA  F067         	movff	doModeVerbose@p_1185+1,?_atoi+1
 13583  000F3E  EC7A  F01D         	call	_atoi	;wreg free
 13584  000F42  C066  F288         	movff	?_atoi,doModeVerbose@filter_class
 13585  000F46  C067  F289         	movff	?_atoi+1,doModeVerbose@filter_class+1
 13586                           
 13587                           ;main.c: 892: }
 13588  000F4A  D008               	goto	l10470
 13589  000F4C                     l10466:
 13590                           
 13591                           ; BSR set to: 2
 13592                           ;main.c: 893: else {
 13593                           ;main.c: 894: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 13594  000F4C  0E78               	movlw	high STR_94
 13595  000F4E  0100               	movlb	0	; () banked
 13596  000F50  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13597  000F52  0E96               	movlw	low STR_94
 13598  000F54  6F61               	movwf	?_putsUSART& (0+255),b
 13599  000F56  ECEA  F028         	call	_putsUSART	;wreg free
 13600  000F5A  D2D1               	goto	l524
 13601  000F5C                     l10470:
 13602                           
 13603                           ; BSR set to: 0
 13604                           ;main.c: 896: }
 13605                           ;main.c: 899: p = strtok((0), ",");
 13606  000F5C  DB00               	call	PL10	;call to abstracted procedure
 13607  000F5E  ECE4  F024         	call	_strtok	;wreg free
 13608  000F62  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1185
 13609  000F66  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1185+1
 13610                           
 13611                           ; BSR set to: 0
 13612                           ;main.c: 900: if ((0) != p) {
 13613  000F6A  0102               	movlb	2	; () banked
 13614  000F6C  51BA               	movf	(doModeVerbose@p_1185+1)& (0+255),w,b
 13615  000F6E  11B9               	iorwf	doModeVerbose@p_1185& (0+255),w,b
 13616  000F70  E00A               	bz	l10476
 13617                           
 13618                           ; BSR set to: 2
 13619                           ;main.c: 901: filter_type = atoi(p);
 13620  000F72  C2B9  F066         	movff	doModeVerbose@p_1185,?_atoi
 13621  000F76  C2BA  F067         	movff	doModeVerbose@p_1185+1,?_atoi+1
 13622  000F7A  EC7A  F01D         	call	_atoi	;wreg free
 13623  000F7E  5166               	movf	?_atoi& (0+255),w,b
 13624  000F80  0102               	movlb	2	; () banked
 13625  000F82  6F8F               	movwf	doModeVerbose@filter_type& (0+255),b
 13626                           
 13627                           ;main.c: 902: }
 13628  000F84  D008               	goto	l10480
 13629  000F86                     l10476:
 13630                           
 13631                           ; BSR set to: 2
 13632                           ;main.c: 903: else {
 13633                           ;main.c: 904: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 13634  000F86  0E78               	movlw	high STR_96
 13635  000F88  0100               	movlb	0	; () banked
 13636  000F8A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13637  000F8C  0EE4               	movlw	low STR_96
 13638  000F8E  6F61               	movwf	?_putsUSART& (0+255),b
 13639  000F90  ECEA  F028         	call	_putsUSART	;wreg free
 13640  000F94  D2B4               	goto	l524
 13641  000F96                     l10480:
 13642                           
 13643                           ; BSR set to: 2
 13644                           ;main.c: 906: }
 13645                           ;main.c: 909: p = strtok((0), ",");
 13646  000F96  DACD               	call	PL6	;call to abstracted procedure
 13647  000F98  ECE4  F024         	call	_strtok	;wreg free
 13648  000F9C  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1185
 13649  000FA0  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1185+1
 13650                           
 13651                           ; BSR set to: 0
 13652                           ;main.c: 910: if ((0) != p) {
 13653  000FA4  0102               	movlb	2	; () banked
 13654  000FA6  51BA               	movf	(doModeVerbose@p_1185+1)& (0+255),w,b
 13655  000FA8  11B9               	iorwf	doModeVerbose@p_1185& (0+255),w,b
 13656  000FAA  E00A               	bz	l10486
 13657                           
 13658                           ; BSR set to: 2
 13659                           ;main.c: 911: filter_nodeid = atoi(p);
 13660  000FAC  C2B9  F066         	movff	doModeVerbose@p_1185,?_atoi
 13661  000FB0  C2BA  F067         	movff	doModeVerbose@p_1185+1,?_atoi+1
 13662  000FB4  EC7A  F01D         	call	_atoi	;wreg free
 13663  000FB8  5166               	movf	?_atoi& (0+255),w,b
 13664  000FBA  0102               	movlb	2	; () banked
 13665  000FBC  6F90               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 13666                           
 13667                           ;main.c: 912: }
 13668  000FBE  D008               	goto	l10490
 13669  000FC0                     l10486:
 13670                           
 13671                           ; BSR set to: 2
 13672                           ;main.c: 913: else {
 13673                           ;main.c: 914: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 13674  000FC0  0E77               	movlw	high STR_98
 13675  000FC2  0100               	movlb	0	; () banked
 13676  000FC4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13677  000FC6  0E59               	movlw	low STR_98
 13678  000FC8  6F61               	movwf	?_putsUSART& (0+255),b
 13679  000FCA  ECEA  F028         	call	_putsUSART	;wreg free
 13680  000FCE  D297               	goto	l524
 13681  000FD0                     l10490:
 13682                           
 13683                           ; BSR set to: 2
 13684                           ;main.c: 916: }
 13685                           ;main.c: 919: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 13686  000FD0  0E80               	movlw	128
 13687  000FD2  ECA1  F02B         	call	_ECANSetOperationMode
 13688                           
 13689                           ; BSR set to: 0
 13690                           ;main.c: 921: uint32_t id = ((uint32_t) filter_priority << 26) |
 13691                           ;main.c: 922: ((uint32_t) filter_class << 16) |
 13692                           ;main.c: 923: ((uint32_t) filter_type << 8) |
 13693                           ;main.c: 924: filter_nodeid;
 13694  000FD6  C28F  F1B2         	movff	doModeVerbose@filter_type,??_doModeVerbose
 13695  000FDA  DB16               	call	PL44	;call to abstracted procedure
 13696  000FDC  5188               	movf	doModeVerbose@filter_class& (0+255),w,b
 13697  000FDE  0101               	movlb	1	; () banked
 13698  000FE0  6FB6               	movwf	(??_doModeVerbose+4)& (0+255),b
 13699  000FE2  0102               	movlb	2	; () banked
 13700  000FE4  5189               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 13701  000FE6  DB29               	call	PL60	;call to abstracted procedure
 13702  000FE8  C28E  F1BA         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 13703  000FEC  DABF               	call	PL12	;call to abstracted procedure
 13704  000FEE  5190               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 13705  000FF0  0101               	movlb	1	; () banked
 13706  000FF2  11C2               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 13707  000FF4  0102               	movlb	2	; () banked
 13708  000FF6  6F80               	movwf	doModeVerbose@id& (0+255),b
 13709  000FF8  0101               	movlb	1	; () banked
 13710  000FFA  51C3               	movf	(??_doModeVerbose+17)& (0+255),w,b
 13711  000FFC  0102               	movlb	2	; () banked
 13712  000FFE  6F81               	movwf	(doModeVerbose@id+1)& (0+255),b
 13713  001000  0101               	movlb	1	; () banked
 13714  001002  51C4               	movf	(??_doModeVerbose+18)& (0+255),w,b
 13715  001004  0102               	movlb	2	; () banked
 13716  001006  6F82               	movwf	(doModeVerbose@id+2)& (0+255),b
 13717  001008  0101               	movlb	1	; () banked
 13718  00100A  51C5               	movf	(??_doModeVerbose+19)& (0+255),w,b
 13719  00100C  0102               	movlb	2	; () banked
 13720  00100E  6F83               	movwf	(doModeVerbose@id+3)& (0+255),b
 13721                           
 13722                           ; BSR set to: 2
 13723                           ;main.c: 925: setFilter(filterno, id);
 13724  001010  C280  F060         	movff	doModeVerbose@id,?_setFilter
 13725  001014  C281  F061         	movff	doModeVerbose@id+1,?_setFilter+1
 13726  001018  C282  F062         	movff	doModeVerbose@id+2,?_setFilter+2
 13727  00101C  C283  F063         	movff	doModeVerbose@id+3,?_setFilter+3
 13728  001020  51A7               	movf	doModeVerbose@filterno& (0+255),w,b
 13729  001022  EC4F  F014         	call	_setFilter
 13730                           
 13731                           ; BSR set to: 0
 13732                           ;main.c: 926: putsUSART((char *) "+OK\r\n");
 13733  001026  0E7F               	movlw	high STR_9
 13734  001028  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13735  00102A  0E7F               	movlw	low STR_9
 13736  00102C  6F61               	movwf	?_putsUSART& (0+255),b
 13737  00102E  ECEA  F028         	call	_putsUSART	;wreg free
 13738                           
 13739                           ;main.c: 927: }
 13740  001032  D256               	goto	l10652
 13741  001034                     l10498:
 13742                           
 13743                           ; BSR set to: 1
 13744                           ;main.c: 931: else if (cmdbuf == stristr(cmdbuf, "MASK")) {
 13745  001034  0E01               	movlw	high _cmdbuf
 13746  001036  0100               	movlb	0	; () banked
 13747  001038  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13748  00103A  0E04               	movlw	low _cmdbuf
 13749  00103C  6F6D               	movwf	?_stristr& (0+255),b
 13750  00103E  0E7F               	movlw	high STR_100
 13751  001040  6F70               	movwf	(?_stristr+3)& (0+255),b
 13752  001042  0EB1               	movlw	low STR_100
 13753  001044  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13754  001046  EC3C  F026         	call	_stristr	;wreg free
 13755  00104A  DA5A               	call	PL2	;call to abstracted procedure
 13756  00104C  E104               	bnz	u12855
 13757  00104E  0100               	movlb	0	; () banked
 13758  001050  516D               	movf	?_stristr& (0+255),w,b
 13759  001052  0101               	movlb	1	; () banked
 13760  001054  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13761  001056                     u12855:
 13762  001056  E001 D0D9          	bnz	l10570
 13763                           
 13764                           ; BSR set to: 1
 13765                           ;main.c: 933: uint8_t maskno;
 13766                           ;main.c: 934: uint8_t mask_priority;
 13767                           ;main.c: 935: uint16_t mask_class;
 13768                           ;main.c: 936: uint8_t mask_type;
 13769                           ;main.c: 937: uint8_t mask_nodeid;
 13770                           ;main.c: 939: strcpy(cmdbuf, cmdbuf + 8);
 13771  00105A  0E01               	movlw	high _cmdbuf
 13772  00105C  DA72               	call	PL8	;call to abstracted procedure
 13773  00105E  EC1A  F02B         	call	_strcpy	;wreg free
 13774                           
 13775                           ;main.c: 940: char *p = strtok(cmdbuf, ",");
 13776  001062  DAB1               	call	PL30	;call to abstracted procedure
 13777  001064  ECE4  F024         	call	_strtok	;wreg free
 13778  001068  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1205
 13779  00106C  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1205+1
 13780                           
 13781                           ; BSR set to: 0
 13782                           ;main.c: 941: if ((0) != p) {
 13783  001070  0102               	movlb	2	; () banked
 13784  001072  51BC               	movf	(doModeVerbose@p_1205+1)& (0+255),w,b
 13785  001074  11BB               	iorwf	doModeVerbose@p_1205& (0+255),w,b
 13786  001076  E014               	bz	l10514
 13787                           
 13788                           ; BSR set to: 2
 13789                           ;main.c: 942: maskno = atoi(p);
 13790  001078  C2BB  F066         	movff	doModeVerbose@p_1205,?_atoi
 13791  00107C  C2BC  F067         	movff	doModeVerbose@p_1205+1,?_atoi+1
 13792  001080  EC7A  F01D         	call	_atoi	;wreg free
 13793  001084  5166               	movf	?_atoi& (0+255),w,b
 13794  001086  0102               	movlb	2	; () banked
 13795  001088  6FA8               	movwf	doModeVerbose@maskno& (0+255),b
 13796                           
 13797                           ; BSR set to: 2
 13798                           ;main.c: 943: if (maskno > 1) {
 13799  00108A  0E01               	movlw	1
 13800  00108C  65A8               	cpfsgt	doModeVerbose@maskno& (0+255),b
 13801  00108E  D010               	goto	l10518
 13802                           
 13803                           ; BSR set to: 2
 13804                           ;main.c: 944: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 13805  001090  0E75               	movlw	high STR_102
 13806  001092  0100               	movlb	0	; () banked
 13807  001094  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13808  001096  0E29               	movlw	low STR_102
 13809  001098  6F61               	movwf	?_putsUSART& (0+255),b
 13810  00109A  ECEA  F028         	call	_putsUSART	;wreg free
 13811  00109E  D22F               	goto	l524
 13812  0010A0                     l10514:
 13813                           
 13814                           ; BSR set to: 2
 13815                           ;main.c: 948: else {
 13816                           ;main.c: 949: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 13817  0010A0  0E79               	movlw	high STR_103
 13818  0010A2  0100               	movlb	0	; () banked
 13819  0010A4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13820  0010A6  0E0A               	movlw	low STR_103
 13821  0010A8  6F61               	movwf	?_putsUSART& (0+255),b
 13822  0010AA  ECEA  F028         	call	_putsUSART	;wreg free
 13823  0010AE  D227               	goto	l524
 13824  0010B0                     l10518:
 13825                           
 13826                           ; BSR set to: 2
 13827                           ;main.c: 951: }
 13828                           ;main.c: 954: p = strtok((0), ",");
 13829  0010B0  DA40               	call	PL6	;call to abstracted procedure
 13830  0010B2  ECE4  F024         	call	_strtok	;wreg free
 13831  0010B6  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1205
 13832  0010BA  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1205+1
 13833                           
 13834                           ; BSR set to: 0
 13835                           ;main.c: 955: if ((0) != p) {
 13836  0010BE  0102               	movlb	2	; () banked
 13837  0010C0  51BC               	movf	(doModeVerbose@p_1205+1)& (0+255),w,b
 13838  0010C2  11BB               	iorwf	doModeVerbose@p_1205& (0+255),w,b
 13839  0010C4  E00A               	bz	l10524
 13840                           
 13841                           ; BSR set to: 2
 13842                           ;main.c: 956: mask_priority = atoi(p);
 13843  0010C6  C2BB  F066         	movff	doModeVerbose@p_1205,?_atoi
 13844  0010CA  C2BC  F067         	movff	doModeVerbose@p_1205+1,?_atoi+1
 13845  0010CE  EC7A  F01D         	call	_atoi	;wreg free
 13846  0010D2  5166               	movf	?_atoi& (0+255),w,b
 13847  0010D4  0102               	movlb	2	; () banked
 13848  0010D6  6F91               	movwf	doModeVerbose@mask_priority& (0+255),b
 13849                           
 13850                           ;main.c: 957: }
 13851  0010D8  D008               	goto	l10528
 13852  0010DA                     l10524:
 13853                           
 13854                           ; BSR set to: 2
 13855                           ;main.c: 958: else {
 13856                           ;main.c: 959: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 13857  0010DA  0E77               	movlw	high STR_105
 13858  0010DC  0100               	movlb	0	; () banked
 13859  0010DE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13860  0010E0  0EAA               	movlw	low STR_105
 13861  0010E2  6F61               	movwf	?_putsUSART& (0+255),b
 13862  0010E4  ECEA  F028         	call	_putsUSART	;wreg free
 13863  0010E8  D20A               	goto	l524
 13864  0010EA                     l10528:
 13865                           
 13866                           ; BSR set to: 2
 13867                           ;main.c: 961: }
 13868                           ;main.c: 964: p = strtok((0), ",");
 13869  0010EA  DA23               	call	PL6	;call to abstracted procedure
 13870  0010EC  ECE4  F024         	call	_strtok	;wreg free
 13871  0010F0  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1205
 13872  0010F4  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1205+1
 13873                           
 13874                           ; BSR set to: 0
 13875                           ;main.c: 965: if ((0) != p) {
 13876  0010F8  0102               	movlb	2	; () banked
 13877  0010FA  51BC               	movf	(doModeVerbose@p_1205+1)& (0+255),w,b
 13878  0010FC  11BB               	iorwf	doModeVerbose@p_1205& (0+255),w,b
 13879  0010FE  E00B               	bz	l10534
 13880                           
 13881                           ; BSR set to: 2
 13882                           ;main.c: 966: mask_class = atoi(p);
 13883  001100  C2BB  F066         	movff	doModeVerbose@p_1205,?_atoi
 13884  001104  C2BC  F067         	movff	doModeVerbose@p_1205+1,?_atoi+1
 13885  001108  EC7A  F01D         	call	_atoi	;wreg free
 13886  00110C  C066  F28A         	movff	?_atoi,doModeVerbose@mask_class
 13887  001110  C067  F28B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 13888                           
 13889                           ;main.c: 967: }
 13890  001114  D008               	goto	l10538
 13891  001116                     l10534:
 13892                           
 13893                           ; BSR set to: 2
 13894                           ;main.c: 968: else {
 13895                           ;main.c: 969: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 13896  001116  0E79               	movlw	high STR_107
 13897  001118  0100               	movlb	0	; () banked
 13898  00111A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13899  00111C  0E54               	movlw	low STR_107
 13900  00111E  6F61               	movwf	?_putsUSART& (0+255),b
 13901  001120  ECEA  F028         	call	_putsUSART	;wreg free
 13902  001124  D1EC               	goto	l524
 13903  001126                     l10538:
 13904                           
 13905                           ; BSR set to: 0
 13906                           ;main.c: 971: }
 13907                           ;main.c: 974: p = strtok((0), ",");
 13908  001126  DA1B               	call	PL10	;call to abstracted procedure
 13909  001128  ECE4  F024         	call	_strtok	;wreg free
 13910  00112C  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1205
 13911  001130  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1205+1
 13912                           
 13913                           ; BSR set to: 0
 13914                           ;main.c: 975: if ((0) != p) {
 13915  001134  0102               	movlb	2	; () banked
 13916  001136  51BC               	movf	(doModeVerbose@p_1205+1)& (0+255),w,b
 13917  001138  11BB               	iorwf	doModeVerbose@p_1205& (0+255),w,b
 13918  00113A  E00A               	bz	l10544
 13919                           
 13920                           ; BSR set to: 2
 13921                           ;main.c: 976: mask_type = atoi(p);
 13922  00113C  C2BB  F066         	movff	doModeVerbose@p_1205,?_atoi
 13923  001140  C2BC  F067         	movff	doModeVerbose@p_1205+1,?_atoi+1
 13924  001144  EC7A  F01D         	call	_atoi	;wreg free
 13925  001148  5166               	movf	?_atoi& (0+255),w,b
 13926  00114A  0102               	movlb	2	; () banked
 13927  00114C  6F92               	movwf	doModeVerbose@mask_type& (0+255),b
 13928                           
 13929                           ;main.c: 977: }
 13930  00114E  D008               	goto	l10548
 13931  001150                     l10544:
 13932                           
 13933                           ; BSR set to: 2
 13934                           ;main.c: 978: else {
 13935                           ;main.c: 979: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 13936  001150  0E79               	movlw	high STR_109
 13937  001152  0100               	movlb	0	; () banked
 13938  001154  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13939  001156  0E79               	movlw	low STR_109
 13940  001158  6F61               	movwf	?_putsUSART& (0+255),b
 13941  00115A  ECEA  F028         	call	_putsUSART	;wreg free
 13942  00115E  D1CF               	goto	l524
 13943  001160                     l10548:
 13944                           
 13945                           ; BSR set to: 2
 13946                           ;main.c: 981: }
 13947                           ;main.c: 984: p = strtok((0), ",");
 13948  001160  D9E8               	call	PL6	;call to abstracted procedure
 13949  001162  ECE4  F024         	call	_strtok	;wreg free
 13950  001166  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1205
 13951  00116A  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1205+1
 13952                           
 13953                           ; BSR set to: 0
 13954                           ;main.c: 985: if ((0) != p) {
 13955  00116E  0102               	movlb	2	; () banked
 13956  001170  51BC               	movf	(doModeVerbose@p_1205+1)& (0+255),w,b
 13957  001172  11BB               	iorwf	doModeVerbose@p_1205& (0+255),w,b
 13958  001174  E00A               	bz	l10554
 13959                           
 13960                           ; BSR set to: 2
 13961                           ;main.c: 986: mask_nodeid = atoi(p);
 13962  001176  C2BB  F066         	movff	doModeVerbose@p_1205,?_atoi
 13963  00117A  C2BC  F067         	movff	doModeVerbose@p_1205+1,?_atoi+1
 13964  00117E  EC7A  F01D         	call	_atoi	;wreg free
 13965  001182  5166               	movf	?_atoi& (0+255),w,b
 13966  001184  0102               	movlb	2	; () banked
 13967  001186  6F93               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 13968                           
 13969                           ;main.c: 987: }
 13970  001188  D008               	goto	l10558
 13971  00118A                     l10554:
 13972                           
 13973                           ; BSR set to: 2
 13974                           ;main.c: 988: else {
 13975                           ;main.c: 989: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 13976  00118A  0E78               	movlw	high STR_111
 13977  00118C  0100               	movlb	0	; () banked
 13978  00118E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13979  001190  0E6F               	movlw	low STR_111
 13980  001192  6F61               	movwf	?_putsUSART& (0+255),b
 13981  001194  ECEA  F028         	call	_putsUSART	;wreg free
 13982  001198  D1B2               	goto	l524
 13983  00119A                     l10558:
 13984                           
 13985                           ; BSR set to: 2
 13986                           ;main.c: 991: }
 13987                           ;main.c: 993: uint32_t id = ((uint32_t) mask_priority << 26) |
 13988                           ;main.c: 994: ((uint32_t) mask_class << 16) |
 13989                           ;main.c: 995: ((uint32_t) mask_type << 8) |
 13990                           ;main.c: 996: mask_nodeid;
 13991  00119A  C292  F1B2         	movff	doModeVerbose@mask_type,??_doModeVerbose
 13992  00119E  DA34               	call	PL44	;call to abstracted procedure
 13993  0011A0  518A               	movf	doModeVerbose@mask_class& (0+255),w,b
 13994  0011A2  0101               	movlb	1	; () banked
 13995  0011A4  6FB6               	movwf	(??_doModeVerbose+4)& (0+255),b
 13996  0011A6  0102               	movlb	2	; () banked
 13997  0011A8  518B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 13998  0011AA  DA47               	call	PL60	;call to abstracted procedure
 13999  0011AC  C291  F1BA         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 14000  0011B0  D9DD               	call	PL12	;call to abstracted procedure
 14001  0011B2  5193               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 14002  0011B4  0101               	movlb	1	; () banked
 14003  0011B6  11C2               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 14004  0011B8  0102               	movlb	2	; () banked
 14005  0011BA  6FA3               	movwf	doModeVerbose@id_1217& (0+255),b
 14006  0011BC  0101               	movlb	1	; () banked
 14007  0011BE  51C3               	movf	(??_doModeVerbose+17)& (0+255),w,b
 14008  0011C0  0102               	movlb	2	; () banked
 14009  0011C2  6FA4               	movwf	(doModeVerbose@id_1217+1)& (0+255),b
 14010  0011C4  0101               	movlb	1	; () banked
 14011  0011C6  51C4               	movf	(??_doModeVerbose+18)& (0+255),w,b
 14012  0011C8  0102               	movlb	2	; () banked
 14013  0011CA  6FA5               	movwf	(doModeVerbose@id_1217+2)& (0+255),b
 14014  0011CC  0101               	movlb	1	; () banked
 14015  0011CE  51C5               	movf	(??_doModeVerbose+19)& (0+255),w,b
 14016  0011D0  0102               	movlb	2	; () banked
 14017  0011D2  6FA6               	movwf	(doModeVerbose@id_1217+3)& (0+255),b
 14018                           
 14019                           ; BSR set to: 2
 14020                           ;main.c: 999: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 14021  0011D4  0E80               	movlw	128
 14022  0011D6  ECA1  F02B         	call	_ECANSetOperationMode
 14023                           
 14024                           ; BSR set to: 0
 14025                           ;main.c: 1001: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 14026                           ;main.c: 1002: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 14027  0011DA  0102               	movlb	2	; () banked
 14028  0011DC  51A8               	movf	doModeVerbose@maskno& (0+255),w,b
 14029  0011DE  E008               	bz	l10566
 14030                           
 14031                           ; BSR set to: 2
 14032  0011E0  0E0F               	movlw	15	;volatile
 14033  0011E2  0100               	movlb	0	; () banked
 14034  0011E4  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14035  0011E6  0E18               	movlw	24	;volatile
 14036  0011E8  DA1C               	call	PL56	;call to abstracted procedure
 14037  0011EA  EC6D  F01C         	call	__CANIDToRegs	;wreg free
 14038  0011EE  D007               	goto	l10568
 14039  0011F0                     l10566:
 14040                           
 14041                           ; BSR set to: 2
 14042  0011F0  0E0F               	movlw	15	;volatile
 14043  0011F2  0100               	movlb	0	; () banked
 14044  0011F4  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14045  0011F6  0E1C               	movlw	28	;volatile
 14046  0011F8  DA14               	call	PL56	;call to abstracted procedure
 14047  0011FA  EC6D  F01C         	call	__CANIDToRegs	;wreg free
 14048  0011FE                     l10568:
 14049                           
 14050                           ; BSR set to: 0
 14051                           ;main.c: 1003: putsUSART((char *) "+OK\r\n");
 14052  0011FE  0E7F               	movlw	high STR_9
 14053  001200  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14054  001202  0E7F               	movlw	low STR_9
 14055  001204  6F61               	movwf	?_putsUSART& (0+255),b
 14056  001206  ECEA  F028         	call	_putsUSART	;wreg free
 14057                           
 14058                           ;main.c: 1004: }
 14059  00120A  D16A               	goto	l10652
 14060  00120C                     l10570:
 14061                           
 14062                           ; BSR set to: 1
 14063                           ;main.c: 1011: else if (cmdbuf == stristr(cmdbuf, "SET ")) {
 14064  00120C  0E01               	movlw	high _cmdbuf
 14065  00120E  0100               	movlb	0	; () banked
 14066  001210  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14067  001212  0E04               	movlw	low _cmdbuf
 14068  001214  6F6D               	movwf	?_stristr& (0+255),b
 14069  001216  0E7F               	movlw	high STR_113
 14070  001218  6F70               	movwf	(?_stristr+3)& (0+255),b
 14071  00121A  0E9D               	movlw	low STR_113
 14072  00121C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14073  00121E  EC3C  F026         	call	_stristr	;wreg free
 14074  001222  D96E               	call	PL2	;call to abstracted procedure
 14075  001224  E104               	bnz	u12945
 14076  001226  0100               	movlb	0	; () banked
 14077  001228  516D               	movf	?_stristr& (0+255),w,b
 14078  00122A  0101               	movlb	1	; () banked
 14079  00122C  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 14080  00122E                     u12945:
 14081  00122E  E001 D145          	bnz	l10646
 14082                           
 14083                           ; BSR set to: 1
 14084                           ;main.c: 1014: strcpy(cmdbuf, cmdbuf + 4);
 14085  001232  0E01               	movlw	high _cmdbuf
 14086  001234  0100               	movlb	0	; () banked
 14087  001236  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14088  001238  0E04               	movlw	low _cmdbuf
 14089  00123A  6F60               	movwf	?_strcpy& (0+255),b
 14090  00123C  0E08               	movlw	low (_cmdbuf+4)
 14091  00123E  0101               	movlb	1	; () banked
 14092  001240  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14093  001242  0E01               	movlw	high (_cmdbuf+4)
 14094  001244  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14095  001246  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14096  00124A  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14097  00124E  EC1A  F02B         	call	_strcpy	;wreg free
 14098                           
 14099                           ;main.c: 1017: if (cmdbuf == stristr(cmdbuf, "HEX")) {
 14100  001252  0E01               	movlw	high _cmdbuf
 14101  001254  0100               	movlb	0	; () banked
 14102  001256  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14103  001258  0E04               	movlw	low _cmdbuf
 14104  00125A  6F6D               	movwf	?_stristr& (0+255),b
 14105  00125C  0E7F               	movlw	high STR_114
 14106  00125E  6F70               	movwf	(?_stristr+3)& (0+255),b
 14107  001260  0EDC               	movlw	low STR_114
 14108  001262  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14109  001264  EC3C  F026         	call	_stristr	;wreg free
 14110  001268  D94B               	call	PL2	;call to abstracted procedure
 14111  00126A  E104               	bnz	u12955
 14112  00126C  0100               	movlb	0	; () banked
 14113  00126E  516D               	movf	?_stristr& (0+255),w,b
 14114  001270  0101               	movlb	1	; () banked
 14115  001272  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 14116  001274                     u12955:
 14117  001274  E111               	bnz	l10582
 14118                           
 14119                           ; BSR set to: 1
 14120                           ;main.c: 1018: bHex = 1;
 14121  001276  0E01               	movlw	1
 14122  001278  6F00               	movwf	_bHex& (0+255),b
 14123                           
 14124                           ; BSR set to: 1
 14125                           ;main.c: 1019: writeEEPROM(0x06, 1);
 14126  00127A  0100               	movlb	0	; () banked
 14127  00127C  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14128  00127E  0E06               	movlw	6
 14129  001280  6F60               	movwf	?_writeEEPROM& (0+255),b
 14130  001282  0E01               	movlw	1
 14131  001284  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 14132  001286  EC60  F02B         	call	_writeEEPROM	;wreg free
 14133                           
 14134                           ; BSR set to: 0
 14135                           ;main.c: 1020: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 14136  00128A  0E77               	movlw	high STR_115
 14137  00128C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14138  00128E  0E03               	movlw	low STR_115
 14139  001290  6F61               	movwf	?_putsUSART& (0+255),b
 14140  001292  ECEA  F028         	call	_putsUSART	;wreg free
 14141                           
 14142                           ;main.c: 1021: }
 14143  001296  D124               	goto	l10652
 14144  001298                     l10582:
 14145                           
 14146                           ; BSR set to: 1
 14147                           ;main.c: 1023: else if (cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 14148  001298  0E01               	movlw	high _cmdbuf
 14149  00129A  0100               	movlb	0	; () banked
 14150  00129C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14151  00129E  0E04               	movlw	low _cmdbuf
 14152  0012A0  6F6D               	movwf	?_stristr& (0+255),b
 14153  0012A2  0E7F               	movlw	high STR_116
 14154  0012A4  6F70               	movwf	(?_stristr+3)& (0+255),b
 14155  0012A6  0E05               	movlw	low STR_116
 14156  0012A8  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14157  0012AA  EC3C  F026         	call	_stristr	;wreg free
 14158  0012AE  D928               	call	PL2	;call to abstracted procedure
 14159  0012B0  E104               	bnz	u12965
 14160  0012B2  0100               	movlb	0	; () banked
 14161  0012B4  516D               	movf	?_stristr& (0+255),w,b
 14162  0012B6  0101               	movlb	1	; () banked
 14163  0012B8  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 14164  0012BA                     u12965:
 14165  0012BA  E110               	bnz	l10590
 14166                           
 14167                           ; BSR set to: 1
 14168                           ;main.c: 1024: bHex = 0;
 14169  0012BC  6B00               	clrf	_bHex& (0+255),b
 14170                           
 14171                           ; BSR set to: 1
 14172                           ;main.c: 1025: writeEEPROM(0x06, 0);
 14173  0012BE  0100               	movlb	0	; () banked
 14174  0012C0  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14175  0012C2  0E06               	movlw	6
 14176  0012C4  6F60               	movwf	?_writeEEPROM& (0+255),b
 14177  0012C6  0E00               	movlw	0
 14178  0012C8  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 14179  0012CA  EC60  F02B         	call	_writeEEPROM	;wreg free
 14180                           
 14181                           ; BSR set to: 0
 14182                           ;main.c: 1026: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 14183  0012CE  0E77               	movlw	high STR_117
 14184  0012D0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14185  0012D2  0ED2               	movlw	low STR_117
 14186  0012D4  6F61               	movwf	?_putsUSART& (0+255),b
 14187  0012D6  ECEA  F028         	call	_putsUSART	;wreg free
 14188                           
 14189                           ;main.c: 1027: }
 14190  0012DA  D102               	goto	l10652
 14191  0012DC                     l10590:
 14192                           
 14193                           ; BSR set to: 1
 14194                           ;main.c: 1028: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 14195  0012DC  0E01               	movlw	high _cmdbuf
 14196  0012DE  0100               	movlb	0	; () banked
 14197  0012E0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14198  0012E2  0E04               	movlw	low _cmdbuf
 14199  0012E4  6F6D               	movwf	?_stristr& (0+255),b
 14200  0012E6  0E7E               	movlw	high STR_118
 14201  0012E8  6F70               	movwf	(?_stristr+3)& (0+255),b
 14202  0012EA  0E86               	movlw	low STR_118
 14203  0012EC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14204  0012EE  EC3C  F026         	call	_stristr	;wreg free
 14205  0012F2  516E               	movf	(?_stristr+1)& (0+255),w,b
 14206  0012F4  116D               	iorwf	?_stristr& (0+255),w,b
 14207  0012F6  E02D               	bz	l10604
 14208                           
 14209                           ; BSR set to: 0
 14210                           ;main.c: 1029: strcpy(cmdbuf, cmdbuf + 10);
 14211  0012F8  0E01               	movlw	high _cmdbuf
 14212  0012FA  0100               	movlb	0	; () banked
 14213  0012FC  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14214  0012FE  0E04               	movlw	low _cmdbuf
 14215  001300  6F60               	movwf	?_strcpy& (0+255),b
 14216  001302  0E0E               	movlw	low (_cmdbuf+10)
 14217  001304  0101               	movlb	1	; () banked
 14218  001306  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14219  001308  0E01               	movlw	high (_cmdbuf+10)
 14220  00130A  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14221  00130C  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14222  001310  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14223  001314  EC1A  F02B         	call	_strcpy	;wreg free
 14224                           
 14225                           ;main.c: 1030: rwtimeout = atoi(cmdbuf);
 14226  001318  0E01               	movlw	high _cmdbuf
 14227  00131A  0100               	movlb	0	; () banked
 14228  00131C  6F67               	movwf	(?_atoi+1)& (0+255),b
 14229  00131E  0E04               	movlw	low _cmdbuf
 14230  001320  6F66               	movwf	?_atoi& (0+255),b
 14231  001322  EC7A  F01D         	call	_atoi	;wreg free
 14232  001326  5166               	movf	?_atoi& (0+255),w,b
 14233  001328  0101               	movlb	1	; () banked
 14234  00132A  6F03               	movwf	_rwtimeout& (0+255),b
 14235                           
 14236                           ; BSR set to: 1
 14237                           ;main.c: 1031: if (rwtimeout < 10u) {
 14238  00132C  0E0A               	movlw	10
 14239  00132E  6103               	cpfslt	_rwtimeout& (0+255),b
 14240  001330  D001               	goto	l10600
 14241                           
 14242                           ; BSR set to: 1
 14243                           ;main.c: 1032: rwtimeout = 10u;
 14244  001332  6F03               	movwf	_rwtimeout& (0+255),b
 14245  001334                     l10600:
 14246                           
 14247                           ; BSR set to: 1
 14248                           ;main.c: 1033: }
 14249                           ;main.c: 1034: writeEEPROM(0x09, rwtimeout);
 14250  001334  0100               	movlb	0	; () banked
 14251  001336  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14252  001338  0E09               	movlw	9
 14253  00133A  6F60               	movwf	?_writeEEPROM& (0+255),b
 14254  00133C  C103  F062         	movff	_rwtimeout,?_writeEEPROM+2
 14255  001340  EC60  F02B         	call	_writeEEPROM	;wreg free
 14256                           
 14257                           ; BSR set to: 0
 14258                           ;main.c: 1035: putsUSART((char *) "+OK\r\n");
 14259  001344  0E7F               	movlw	high STR_9
 14260  001346  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14261  001348  0E7F               	movlw	low STR_9
 14262  00134A  6F61               	movwf	?_putsUSART& (0+255),b
 14263  00134C  ECEA  F028         	call	_putsUSART	;wreg free
 14264                           
 14265                           ;main.c: 1036: }
 14266  001350  D0C7               	goto	l10652
 14267  001352                     l10604:
 14268                           
 14269                           ; BSR set to: 0
 14270                           ;main.c: 1037: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 14271  001352  0E01               	movlw	high _cmdbuf
 14272  001354  0100               	movlb	0	; () banked
 14273  001356  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14274  001358  0E04               	movlw	low _cmdbuf
 14275  00135A  6F6D               	movwf	?_stristr& (0+255),b
 14276  00135C  0E7E               	movlw	high STR_120
 14277  00135E  6F70               	movwf	(?_stristr+3)& (0+255),b
 14278  001360  0EBA               	movlw	low STR_120
 14279  001362  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14280  001364  EC3C  F026         	call	_stristr	;wreg free
 14281  001368  516E               	movf	(?_stristr+1)& (0+255),w,b
 14282  00136A  116D               	iorwf	?_stristr& (0+255),w,b
 14283  00136C  E005               	bz	l10608
 14284                           
 14285                           ; BSR set to: 0
 14286                           ;main.c: 1038: strcpy(cmdbuf, cmdbuf + 8);
 14287  00136E  0E01               	movlw	high _cmdbuf
 14288  001370  D8E8               	call	PL8	;call to abstracted procedure
 14289  001372  EC1A  F02B         	call	_strcpy	;wreg free
 14290                           
 14291                           ;main.c: 1039: }
 14292  001376  D0B4               	goto	l10652
 14293  001378                     l10608:
 14294                           
 14295                           ; BSR set to: 0
 14296                           ;main.c: 1040: else if (0 != stristr(cmdbuf, "MODE ")) {
 14297  001378  0E01               	movlw	high _cmdbuf
 14298  00137A  0100               	movlb	0	; () banked
 14299  00137C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14300  00137E  0E04               	movlw	low _cmdbuf
 14301  001380  6F6D               	movwf	?_stristr& (0+255),b
 14302  001382  0E7F               	movlw	high STR_121
 14303  001384  6F70               	movwf	(?_stristr+3)& (0+255),b
 14304  001386  0E85               	movlw	low STR_121
 14305  001388  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14306  00138A  EC3C  F026         	call	_stristr	;wreg free
 14307  00138E  516E               	movf	(?_stristr+1)& (0+255),w,b
 14308  001390  116D               	iorwf	?_stristr& (0+255),w,b
 14309  001392  E05C               	bz	l10636
 14310                           
 14311                           ; BSR set to: 0
 14312                           ;main.c: 1041: strcpy(cmdbuf, cmdbuf + 5);
 14313  001394  D8BF               	call	PL4	;call to abstracted procedure
 14314  001396  EC1A  F02B         	call	_strcpy	;wreg free
 14315                           
 14316                           ;main.c: 1042: if (0 != stristr(cmdbuf, "VERBOSE")) {
 14317  00139A  0E01               	movlw	high _cmdbuf
 14318  00139C  0100               	movlb	0	; () banked
 14319  00139E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14320  0013A0  0E04               	movlw	low _cmdbuf
 14321  0013A2  6F6D               	movwf	?_stristr& (0+255),b
 14322  0013A4  0E7E               	movlw	high STR_122
 14323  0013A6  6F70               	movwf	(?_stristr+3)& (0+255),b
 14324  0013A8  0EFD               	movlw	low STR_122
 14325  0013AA  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14326  0013AC  EC3C  F026         	call	_stristr	;wreg free
 14327  0013B0  516E               	movf	(?_stristr+1)& (0+255),w,b
 14328  0013B2  116D               	iorwf	?_stristr& (0+255),w,b
 14329  0013B4  E00F               	bz	l10620
 14330                           
 14331                           ; BSR set to: 0
 14332                           ;main.c: 1043: mode = 0;
 14333  0013B6  6BF1               	clrf	_mode& (0+255),b
 14334                           
 14335                           ; BSR set to: 0
 14336                           ;main.c: 1044: writeEEPROM(0x03, 0);
 14337  0013B8  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14338  0013BA  0E03               	movlw	3
 14339  0013BC  6F60               	movwf	?_writeEEPROM& (0+255),b
 14340  0013BE  0E00               	movlw	0
 14341  0013C0  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 14342  0013C2  EC60  F02B         	call	_writeEEPROM	;wreg free
 14343                           
 14344                           ; BSR set to: 0
 14345                           ;main.c: 1045: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 14346  0013C6  0E7B               	movlw	high STR_123
 14347  0013C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14348  0013CA  0E47               	movlw	low STR_123
 14349  0013CC  6F61               	movwf	?_putsUSART& (0+255),b
 14350  0013CE  ECEA  F028         	call	_putsUSART	;wreg free
 14351                           
 14352                           ;main.c: 1046: }
 14353  0013D2  D086               	goto	l10652
 14354  0013D4                     l10620:
 14355                           
 14356                           ; BSR set to: 0
 14357                           ;main.c: 1047: else if (0 != stristr(cmdbuf, "VSCP")) {
 14358  0013D4  0E01               	movlw	high _cmdbuf
 14359  0013D6  0100               	movlb	0	; () banked
 14360  0013D8  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14361  0013DA  0E04               	movlw	low _cmdbuf
 14362  0013DC  6F6D               	movwf	?_stristr& (0+255),b
 14363  0013DE  0E7F               	movlw	high STR_124
 14364  0013E0  6F70               	movwf	(?_stristr+3)& (0+255),b
 14365  0013E2  0EC0               	movlw	low STR_124
 14366  0013E4  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14367  0013E6  EC3C  F026         	call	_stristr	;wreg free
 14368  0013EA  516E               	movf	(?_stristr+1)& (0+255),w,b
 14369  0013EC  116D               	iorwf	?_stristr& (0+255),w,b
 14370  0013EE  E010               	bz	l10628
 14371                           
 14372                           ; BSR set to: 0
 14373                           ;main.c: 1048: mode = 1;
 14374  0013F0  0E01               	movlw	1
 14375  0013F2  6FF1               	movwf	_mode& (0+255),b
 14376                           
 14377                           ; BSR set to: 0
 14378                           ;main.c: 1049: writeEEPROM(0x03, 1);
 14379  0013F4  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14380  0013F6  0E03               	movlw	3
 14381  0013F8  6F60               	movwf	?_writeEEPROM& (0+255),b
 14382  0013FA  0E01               	movlw	1
 14383  0013FC  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 14384  0013FE  EC60  F02B         	call	_writeEEPROM	;wreg free
 14385                           
 14386                           ; BSR set to: 0
 14387                           ;main.c: 1050: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 14388  001402  0E7A               	movlw	high STR_125
 14389  001404  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14390  001406  0ECC               	movlw	low STR_125
 14391  001408  6F61               	movwf	?_putsUSART& (0+255),b
 14392  00140A  ECEA  F028         	call	_putsUSART	;wreg free
 14393                           
 14394                           ;main.c: 1051: }
 14395  00140E  D068               	goto	l10652
 14396  001410                     l10628:
 14397                           
 14398                           ; BSR set to: 0
 14399                           ;main.c: 1052: else if (0 != stristr(cmdbuf, "SLCAN")) {
 14400  001410  0E01               	movlw	high _cmdbuf
 14401  001412  0100               	movlb	0	; () banked
 14402  001414  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14403  001416  0E04               	movlw	low _cmdbuf
 14404  001418  6F6D               	movwf	?_stristr& (0+255),b
 14405  00141A  0E7F               	movlw	high STR_126
 14406  00141C  6F70               	movwf	(?_stristr+3)& (0+255),b
 14407  00141E  0E97               	movlw	low STR_126
 14408  001420  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14409  001422  EC3C  F026         	call	_stristr	;wreg free
 14410  001426  516E               	movf	(?_stristr+1)& (0+255),w,b
 14411  001428  116D               	iorwf	?_stristr& (0+255),w,b
 14412  00142A  E05A               	bz	l10652
 14413                           
 14414                           ; BSR set to: 0
 14415                           ;main.c: 1053: mode = 2;
 14416  00142C  0E02               	movlw	2
 14417  00142E  6FF1               	movwf	_mode& (0+255),b
 14418                           
 14419                           ; BSR set to: 0
 14420                           ;main.c: 1054: writeEEPROM(0x03, 2);
 14421  001430  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14422  001432  0E03               	movlw	3
 14423  001434  6F60               	movwf	?_writeEEPROM& (0+255),b
 14424  001436  0E02               	movlw	2
 14425  001438  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 14426  00143A  EC60  F02B         	call	_writeEEPROM	;wreg free
 14427                           
 14428                           ; BSR set to: 0
 14429                           ;main.c: 1055: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 14430  00143E  0E7B               	movlw	high STR_127
 14431  001440  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14432  001442  0EB4               	movlw	low STR_127
 14433  001444  6F61               	movwf	?_putsUSART& (0+255),b
 14434  001446  ECEA  F028         	call	_putsUSART	;wreg free
 14435  00144A  D04A               	goto	l10652
 14436  00144C                     l10636:
 14437                           
 14438                           ; BSR set to: 0
 14439                           ;main.c: 1059: else if (0 != stristr(cmdbuf, "FILTER ")) {
 14440  00144C  0E01               	movlw	high _cmdbuf
 14441  00144E  0100               	movlb	0	; () banked
 14442  001450  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14443  001452  0E04               	movlw	low _cmdbuf
 14444  001454  6F6D               	movwf	?_stristr& (0+255),b
 14445  001456  0E7E               	movlw	high STR_128
 14446  001458  6F70               	movwf	(?_stristr+3)& (0+255),b
 14447  00145A  0EED               	movlw	low STR_128
 14448  00145C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14449  00145E  EC3C  F026         	call	_stristr	;wreg free
 14450  001462  516E               	movf	(?_stristr+1)& (0+255),w,b
 14451  001464  116D               	iorwf	?_stristr& (0+255),w,b
 14452  001466  E011               	bz	l10640
 14453                           
 14454                           ; BSR set to: 0
 14455                           ;main.c: 1060: strcpy(cmdbuf, cmdbuf + 7);
 14456  001468  0E01               	movlw	high _cmdbuf
 14457  00146A  0100               	movlb	0	; () banked
 14458  00146C  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14459  00146E  0E04               	movlw	low _cmdbuf
 14460  001470  6F60               	movwf	?_strcpy& (0+255),b
 14461  001472  0E0B               	movlw	low (_cmdbuf+7)
 14462  001474  0101               	movlb	1	; () banked
 14463  001476  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14464  001478  0E01               	movlw	high (_cmdbuf+7)
 14465  00147A  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14466  00147C  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14467  001480  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14468  001484  EC1A  F02B         	call	_strcpy	;wreg free
 14469                           
 14470                           ;main.c: 1061: }
 14471  001488  D02B               	goto	l10652
 14472  00148A                     l10640:
 14473                           
 14474                           ; BSR set to: 0
 14475                           ;main.c: 1063: else if (0 != stristr(cmdbuf, "MASK ")) {
 14476  00148A  0E01               	movlw	high _cmdbuf
 14477  00148C  0100               	movlb	0	; () banked
 14478  00148E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14479  001490  0E04               	movlw	low _cmdbuf
 14480  001492  6F6D               	movwf	?_stristr& (0+255),b
 14481  001494  0E7F               	movlw	high STR_129
 14482  001496  6F70               	movwf	(?_stristr+3)& (0+255),b
 14483  001498  0E8B               	movlw	low STR_129
 14484  00149A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14485  00149C  EC3C  F026         	call	_stristr	;wreg free
 14486  0014A0  516E               	movf	(?_stristr+1)& (0+255),w,b
 14487  0014A2  116D               	iorwf	?_stristr& (0+255),w,b
 14488  0014A4  E004               	bz	l10644
 14489                           
 14490                           ; BSR set to: 0
 14491                           ;main.c: 1064: strcpy(cmdbuf, cmdbuf + 5);
 14492  0014A6  D836               	call	PL4	;call to abstracted procedure
 14493  0014A8  EC1A  F02B         	call	_strcpy	;wreg free
 14494                           
 14495                           ;main.c: 1065: }
 14496  0014AC  D019               	goto	l10652
 14497  0014AE                     l10644:
 14498                           
 14499                           ; BSR set to: 0
 14500                           ;main.c: 1066: else {
 14501                           ;main.c: 1067: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 14502  0014AE  0E7A               	movlw	high STR_130
 14503  0014B0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14504  0014B2  0E69               	movlw	low STR_130
 14505  0014B4  6F61               	movwf	?_putsUSART& (0+255),b
 14506  0014B6  ECEA  F028         	call	_putsUSART	;wreg free
 14507  0014BA  D012               	goto	l10652
 14508  0014BC                     l10646:
 14509                           
 14510                           ; BSR set to: 1
 14511                           ;main.c: 1071: else {
 14512                           ;main.c: 1072: if ( 0x0d == cmdbuf[ 0 ] ) {
 14513  0014BC  5104               	movf	_cmdbuf& (0+255),w,b
 14514  0014BE  0A0D               	xorlw	13
 14515  0014C0  E108               	bnz	l10650
 14516                           
 14517                           ; BSR set to: 1
 14518                           ;main.c: 1073: putsUSART((char *) "+OK\r\n");
 14519  0014C2  0E7F               	movlw	high STR_9
 14520  0014C4  0100               	movlb	0	; () banked
 14521  0014C6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14522  0014C8  0E7F               	movlw	low STR_9
 14523  0014CA  6F61               	movwf	?_putsUSART& (0+255),b
 14524  0014CC  ECEA  F028         	call	_putsUSART	;wreg free
 14525                           
 14526                           ;main.c: 1074: }
 14527  0014D0  D007               	goto	l10652
 14528  0014D2                     l10650:
 14529                           
 14530                           ; BSR set to: 1
 14531                           ;main.c: 1075: else {
 14532                           ;main.c: 1076: putsUSART((char *) "-ERROR - Unknown command\r\n");
 14533  0014D2  0E7B               	movlw	high STR_132
 14534  0014D4  0100               	movlb	0	; () banked
 14535  0014D6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14536  0014D8  0E7E               	movlw	low STR_132
 14537  0014DA  6F61               	movwf	?_putsUSART& (0+255),b
 14538  0014DC  ECEA  F028         	call	_putsUSART	;wreg free
 14539  0014E0                     l10652:
 14540                           
 14541                           ;main.c: 1077: }
 14542                           ;main.c: 1078: }
 14543                           ;main.c: 1080: memset(cmdbuf, 0, sizeof ( cmdbuf));
 14544  0014E0  0E01               	movlw	high _cmdbuf
 14545  0014E2  0100               	movlb	0	; () banked
 14546  0014E4  6F61               	movwf	(?_memset+1)& (0+255),b
 14547  0014E6  0E04               	movlw	low _cmdbuf
 14548  0014E8  6F60               	movwf	?_memset& (0+255),b
 14549  0014EA  6B63               	clrf	(?_memset+3)& (0+255),b
 14550  0014EC  6B62               	clrf	(?_memset+2)& (0+255),b
 14551  0014EE  6B65               	clrf	(?_memset+5)& (0+255),b
 14552  0014F0  0E50               	movlw	80
 14553  0014F2  6F64               	movwf	(?_memset+4)& (0+255),b
 14554  0014F4  EC49  F02B         	call	_memset	;wreg free
 14555                           
 14556                           ; BSR set to: 0
 14557                           ;main.c: 1081: pos = 0;
 14558  0014F8  0101               	movlb	1	; () banked
 14559  0014FA  6B02               	clrf	_pos& (0+255),b
 14560  0014FC                     l10656:
 14561                           
 14562                           ;main.c: 1082: }
 14563                           ;main.c: 1083: }
 14564                           ;main.c: 1086: (INTCONbits.GIE = 1);
 14565  0014FC  8EF2               	bsf	intcon,7,c	;volatile
 14566  0014FE                     l524:
 14567  0014FE  0012               	return	
 14568  001500                     __end_of_doModeVerbose:
 14569                           	opt stack 0
 14570  001500                     PL2:
 14571                           	opt stack 20
 14572  001500  0E04               	movlw	low _cmdbuf
 14573  001502  0101               	movlb	1	; () banked
 14574  001504  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14575  001506  0E01               	movlw	high _cmdbuf
 14576  001508  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14577  00150A  0100               	movlb	0	; () banked
 14578  00150C  516E               	movf	(?_stristr+1)& (0+255),w,b
 14579  00150E  0101               	movlb	1	; () banked
 14580  001510  19B3               	xorwf	(??_doModeVerbose+1)& (0+255),w,b
 14581  001512  0012               	return	
 14582  001514                     __end_ofPL2:
 14583                           	opt stack 0
 14584  001514                     PL4:
 14585                           	opt stack 20
 14586  001514  0E01               	movlw	high _cmdbuf
 14587  001516  0100               	movlb	0	; () banked
 14588  001518  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14589  00151A  0E04               	movlw	low _cmdbuf
 14590  00151C  6F60               	movwf	?_strcpy& (0+255),b
 14591  00151E  0E09               	movlw	low (_cmdbuf+5)
 14592  001520  0101               	movlb	1	; () banked
 14593  001522  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14594  001524  0E01               	movlw	high (_cmdbuf+5)
 14595  001526  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14596  001528  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14597  00152C  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14598  001530  0012               	return	
 14599  001532                     __end_ofPL4:
 14600                           	opt stack 0
 14601  001532                     PL6:
 14602                           	opt stack 20
 14603  001532  0100               	movlb	0	; () banked
 14604  001534  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14605  001536  6B6C               	clrf	?_strtok& (0+255),b
 14606  001538  0E7F               	movlw	high STR_30
 14607  00153A  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14608  00153C  0EF4               	movlw	low STR_30
 14609  00153E  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14610  001540  0012               	return	
 14611  001542                     __end_ofPL6:
 14612                           	opt stack 0
 14613  001542                     PL8:
 14614                           	opt stack 20
 14615  001542  0100               	movlb	0	; () banked
 14616  001544  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14617  001546  0E04               	movlw	low _cmdbuf
 14618  001548  6F60               	movwf	?_strcpy& (0+255),b
 14619  00154A  0E0C               	movlw	low (_cmdbuf+8)
 14620  00154C  0101               	movlb	1	; () banked
 14621  00154E  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14622  001550  0E01               	movlw	high (_cmdbuf+8)
 14623  001552  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14624  001554  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14625  001558  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14626  00155C  0012               	return	
 14627  00155E                     __end_ofPL8:
 14628                           	opt stack 0
 14629  00155E                     PL10:
 14630                           	opt stack 20
 14631  00155E  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14632  001560  6B6C               	clrf	?_strtok& (0+255),b
 14633  001562  0E7F               	movlw	high STR_30
 14634  001564  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14635  001566  0EF4               	movlw	low STR_30
 14636  001568  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14637  00156A  0012               	return	
 14638  00156C                     __end_ofPL10:
 14639                           	opt stack 0
 14640  00156C                     PL12:
 14641                           	opt stack 20
 14642  00156C  6BBB               	clrf	(??_doModeVerbose+9)& (0+255),b
 14643  00156E  6BBC               	clrf	(??_doModeVerbose+10)& (0+255),b
 14644  001570  6BBD               	clrf	(??_doModeVerbose+11)& (0+255),b
 14645  001572  0E1A               	movlw	26
 14646  001574                     u12845:
 14647  001574  90D8               	bcf	status,0,c
 14648  001576  37BA               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 14649  001578  37BB               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 14650  00157A  37BC               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 14651  00157C  37BD               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 14652  00157E  2EE8               	decfsz	wreg,f,c
 14653  001580  D7F9               	goto	u12845
 14654  001582  51B6               	movf	(??_doModeVerbose+4)& (0+255),w,b
 14655  001584  11BA               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 14656  001586  6FBE               	movwf	(??_doModeVerbose+12)& (0+255),b
 14657  001588  51B7               	movf	(??_doModeVerbose+5)& (0+255),w,b
 14658  00158A  11BB               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 14659  00158C  6FBF               	movwf	(??_doModeVerbose+13)& (0+255),b
 14660  00158E  51B8               	movf	(??_doModeVerbose+6)& (0+255),w,b
 14661  001590  11BC               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 14662  001592  6FC0               	movwf	(??_doModeVerbose+14)& (0+255),b
 14663  001594  51B9               	movf	(??_doModeVerbose+7)& (0+255),w,b
 14664  001596  11BD               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 14665  001598  6FC1               	movwf	(??_doModeVerbose+15)& (0+255),b
 14666  00159A  51B2               	movf	??_doModeVerbose& (0+255),w,b
 14667  00159C  11BE               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 14668  00159E  6FC2               	movwf	(??_doModeVerbose+16)& (0+255),b
 14669  0015A0  51B3               	movf	(??_doModeVerbose+1)& (0+255),w,b
 14670  0015A2  11BF               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 14671  0015A4  6FC3               	movwf	(??_doModeVerbose+17)& (0+255),b
 14672  0015A6  51B4               	movf	(??_doModeVerbose+2)& (0+255),w,b
 14673  0015A8  11C0               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 14674  0015AA  6FC4               	movwf	(??_doModeVerbose+18)& (0+255),b
 14675  0015AC  51B5               	movf	(??_doModeVerbose+3)& (0+255),w,b
 14676  0015AE  11C1               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 14677  0015B0  6FC5               	movwf	(??_doModeVerbose+19)& (0+255),b
 14678  0015B2  0102               	movlb	2	; () banked
 14679  0015B4  0012               	return	
 14680  0015B6                     __end_ofPL12:
 14681                           	opt stack 0
 14682  0015B6                     PL28:
 14683                           	opt stack 20
 14684  0015B6  0100               	movlb	0	; () banked
 14685  0015B8  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14686  0015BA  6B6C               	clrf	?_strtok& (0+255),b
 14687  0015BC  0E7F               	movlw	high (STR_256+5)
 14688  0015BE  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14689  0015C0  0E2A               	movlw	low (STR_256+5)
 14690  0015C2  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14691  0015C4  0012               	return	
 14692  0015C6                     __end_ofPL28:
 14693                           	opt stack 0
 14694  0015C6                     PL30:
 14695                           	opt stack 20
 14696  0015C6  0E01               	movlw	high _cmdbuf
 14697  0015C8  0100               	movlb	0	; () banked
 14698  0015CA  6F6D               	movwf	(?_strtok+1)& (0+255),b
 14699  0015CC  0E04               	movlw	low _cmdbuf
 14700  0015CE  6F6C               	movwf	?_strtok& (0+255),b
 14701  0015D0  0E7F               	movlw	high STR_30
 14702  0015D2  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14703  0015D4  0EF4               	movlw	low STR_30
 14704  0015D6  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14705  0015D8  0012               	return	
 14706  0015DA                     __end_ofPL30:
 14707                           	opt stack 0
 14708  0015DA                     PL36:
 14709                           	opt stack 20
 14710  0015DA  0100               	movlb	0	; () banked
 14711  0015DC  6F6D               	movwf	(?_strtok+1)& (0+255),b
 14712  0015DE  0E04               	movlw	low _cmdbuf
 14713  0015E0  6F6C               	movwf	?_strtok& (0+255),b
 14714  0015E2  0E7F               	movlw	high (STR_256+5)
 14715  0015E4  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14716  0015E6  0E2A               	movlw	low (STR_256+5)
 14717  0015E8  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14718  0015EA  0012               	return	
 14719  0015EC                     __end_ofPL36:
 14720                           	opt stack 0
 14721  0015EC                     PL42:
 14722                           	opt stack 20
 14723  0015EC  0102               	movlb	2	; () banked
 14724  0015EE  51B0               	movf	doModeVerbose@i_1106& (0+255),w,b
 14725  0015F0  C2AE  F1B2         	movff	doModeVerbose@reg,??_doModeVerbose
 14726  0015F4  0101               	movlb	1	; () banked
 14727  0015F6  6BB3               	clrf	(??_doModeVerbose+1)& (0+255),b
 14728  0015F8  27B2               	addwf	??_doModeVerbose& (0+255),f,b
 14729  0015FA  0E00               	movlw	0
 14730  0015FC  23B3               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 14731  0015FE  51B2               	movf	??_doModeVerbose& (0+255),w,b
 14732  001600  0100               	movlb	0	; () banked
 14733  001602  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 14734  001604  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 14735  001606  0012               	return	
 14736  001608                     __end_ofPL42:
 14737                           	opt stack 0
 14738  001608                     PL44:
 14739                           	opt stack 20
 14740  001608  0101               	movlb	1	; () banked
 14741  00160A  6BB3               	clrf	(??_doModeVerbose+1)& (0+255),b
 14742  00160C  6BB4               	clrf	(??_doModeVerbose+2)& (0+255),b
 14743  00160E  6BB5               	clrf	(??_doModeVerbose+3)& (0+255),b
 14744  001610  C1B4  F1B5         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 14745  001614  C1B3  F1B4         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 14746  001618  C1B2  F1B3         	movff	??_doModeVerbose,??_doModeVerbose+1
 14747  00161C  6BB2               	clrf	??_doModeVerbose& (0+255),b
 14748  00161E  0102               	movlb	2	; () banked
 14749  001620  0012               	return	
 14750  001622                     __end_ofPL44:
 14751                           	opt stack 0
 14752  001622                     PL56:
 14753                           	opt stack 20
 14754  001622  6F60               	movwf	?__CANIDToRegs& (0+255),b
 14755  001624  C2A3  F062         	movff	doModeVerbose@id_1217,?__CANIDToRegs+2
 14756  001628  C2A4  F063         	movff	doModeVerbose@id_1217+1,?__CANIDToRegs+3
 14757  00162C  C2A5  F064         	movff	doModeVerbose@id_1217+2,?__CANIDToRegs+4
 14758  001630  C2A6  F065         	movff	doModeVerbose@id_1217+3,?__CANIDToRegs+5
 14759  001634  0E01               	movlw	1
 14760  001636  6F66               	movwf	(?__CANIDToRegs+6)& (0+255),b
 14761  001638  0C01               	retlw	1
 14762  00163A                     __end_ofPL56:
 14763                           	opt stack 0
 14764  00163A                     PL60:
 14765                           	opt stack 20
 14766  00163A  0101               	movlb	1	; () banked
 14767  00163C  6FB7               	movwf	(??_doModeVerbose+5)& (0+255),b
 14768  00163E  6BB8               	clrf	(??_doModeVerbose+6)& (0+255),b
 14769  001640  6BB9               	clrf	(??_doModeVerbose+7)& (0+255),b
 14770  001642  C1B7  F1B9         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 14771  001646  C1B6  F1B8         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 14772  00164A  6BB7               	clrf	(??_doModeVerbose+5)& (0+255),b
 14773  00164C  6BB6               	clrf	(??_doModeVerbose+4)& (0+255),b
 14774  00164E  0012               	return	
 14775  001650                     __end_ofPL60:
 14776                           	opt stack 0
 14777                           tblptru	equ	0xFF8
 14778                           tblptrh	equ	0xFF7
 14779                           tblptrl	equ	0xFF6
 14780                           tablat	equ	0xFF5
 14781                           prodh	equ	0xFF4
 14782                           prodl	equ	0xFF3
 14783                           intcon	equ	0xFF2
 14784                           indf0	equ	0xFEF
 14785                           postinc0	equ	0xFEE
 14786                           fsr0h	equ	0xFEA
 14787                           fsr0l	equ	0xFE9
 14788                           wreg	equ	0xFE8
 14789                           indf1	equ	0xFE7
 14790                           postinc1	equ	0xFE6
 14791                           postdec1	equ	0xFE5
 14792                           fsr1h	equ	0xFE2
 14793                           fsr1l	equ	0xFE1
 14794                           indf2	equ	0xFDF
 14795                           postinc2	equ	0xFDE
 14796                           postdec2	equ	0xFDD
 14797                           plusw2	equ	0xFDB
 14798                           fsr2h	equ	0xFDA
 14799                           fsr2l	equ	0xFD9
 14800                           status	equ	0xFD8
 14801                           
 14802 ;; *************** function _setFilter *****************
 14803 ;; Defined at:
 14804 ;;		line 2778 in file "main.c"
 14805 ;; Parameters:    Size  Location     Type
 14806 ;;  filter          1    wreg     unsigned char 
 14807 ;;  val             4    0[BANK0 ] unsigned long 
 14808 ;; Auto vars:     Size  Location     Type
 14809 ;;  filter          1   10[BANK0 ] unsigned char 
 14810 ;;  eidl            1   14[BANK0 ] unsigned char 
 14811 ;;  eidh            1   13[BANK0 ] unsigned char 
 14812 ;;  sidl            1   12[BANK0 ] unsigned char 
 14813 ;;  sidh            1   11[BANK0 ] unsigned char 
 14814 ;; Return value:  Size  Location     Type
 14815 ;;		None               void
 14816 ;; Registers used:
 14817 ;;		wreg, status,2, status,0
 14818 ;; Tracked objects:
 14819 ;;		On entry : F/2
 14820 ;;		On exit  : F/0
 14821 ;;		Unchanged: 0/0
 14822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14823 ;;      Params:         0       4       0       0       0       0       0
 14824 ;;      Locals:         0       5       0       0       0       0       0
 14825 ;;      Temps:          0       6       0       0       0       0       0
 14826 ;;      Totals:         0      15       0       0       0       0       0
 14827 ;;Total ram usage:       15 bytes
 14828 ;; Hardware stack levels used:    1
 14829 ;; Hardware stack levels required when called:    3
 14830 ;; This function calls:
 14831 ;;		Nothing
 14832 ;; This function is called by:
 14833 ;;		_doModeVerbose
 14834 ;; This function uses a non-reentrant model
 14835 ;;
 14836                           
 14837                           	psect	text23
 14838  00289E                     __ptext23:
 14839                           	opt stack 0
 14840  00289E                     _setFilter:
 14841                           	opt stack 26
 14842                           
 14843                           ;incstack = 0
 14844                           ;incstack = 0
 14845                           ;setFilter@filter stored from wreg
 14846  00289E  CFE8 F06A          	movff	wreg,setFilter@filter
 14847                           
 14848                           ; BSR set to: 2
 14849                           ;main.c: 2779: uint8_t sidh = (long) val >> 21L;
 14850  0028A2  0E15               	movlw	21
 14851  0028A4  0100               	movlb	0	; () banked
 14852  0028A6  6F64               	movwf	??_setFilter& (0+255),b
 14853  0028A8  C060  F065         	movff	setFilter@val,??_setFilter+1
 14854  0028AC  C061  F066         	movff	setFilter@val+1,??_setFilter+2
 14855  0028B0  C062  F067         	movff	setFilter@val+2,??_setFilter+3
 14856  0028B4  C063  F068         	movff	setFilter@val+3,??_setFilter+4
 14857  0028B8                     u15335:
 14858  0028B8  6764               	tstfsz	??_setFilter& (0+255),b
 14859  0028BA  D001               	goto	u15336
 14860  0028BC  D007               	goto	u15337
 14861  0028BE                     u15336:
 14862  0028BE  3568               	rlcf	(??_setFilter+4)& (0+255),w,b
 14863  0028C0  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 14864  0028C2  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 14865  0028C4  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 14866  0028C6  3365               	rrcf	(??_setFilter+1)& (0+255),f,b
 14867  0028C8  2F64               	decfsz	??_setFilter& (0+255),f,b
 14868  0028CA  D7F6               	goto	u15335
 14869  0028CC                     u15337:
 14870  0028CC  5165               	movf	(??_setFilter+1)& (0+255),w,b
 14871  0028CE  6F6B               	movwf	setFilter@sidh& (0+255),b
 14872                           
 14873                           ;main.c: 2780: uint8_t sidl = (((long) val >> 13L) & 0xe0) |
 14874                           ;main.c: 2781: ((long) (val) & 0x03L) |
 14875                           ;main.c: 2782: 0x08;
 14876  0028D0  C060  F064         	movff	setFilter@val,??_setFilter
 14877  0028D4  0E03               	movlw	3
 14878  0028D6  1764               	andwf	??_setFilter& (0+255),f,b
 14879  0028D8  0E0D               	movlw	13
 14880  0028DA  6F65               	movwf	(??_setFilter+1)& (0+255),b
 14881  0028DC  C060  F066         	movff	setFilter@val,??_setFilter+2
 14882  0028E0  C061  F067         	movff	setFilter@val+1,??_setFilter+3
 14883  0028E4  C062  F068         	movff	setFilter@val+2,??_setFilter+4
 14884  0028E8  C063  F069         	movff	setFilter@val+3,??_setFilter+5
 14885  0028EC                     u15345:
 14886  0028EC  6765               	tstfsz	(??_setFilter+1)& (0+255),b
 14887  0028EE  D001               	goto	u15346
 14888  0028F0  D007               	goto	u15347
 14889  0028F2                     u15346:
 14890  0028F2  3569               	rlcf	(??_setFilter+5)& (0+255),w,b
 14891  0028F4  3369               	rrcf	(??_setFilter+5)& (0+255),f,b
 14892  0028F6  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 14893  0028F8  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 14894  0028FA  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 14895  0028FC  2F65               	decfsz	(??_setFilter+1)& (0+255),f,b
 14896  0028FE  D7F6               	goto	u15345
 14897  002900                     u15347:
 14898  002900  5166               	movf	(??_setFilter+2)& (0+255),w,b
 14899  002902  0BE0               	andlw	224
 14900  002904  1164               	iorwf	??_setFilter& (0+255),w,b
 14901  002906  0908               	iorlw	8
 14902  002908  6F6C               	movwf	setFilter@sidl& (0+255),b
 14903                           
 14904                           ; BSR set to: 0
 14905                           ;main.c: 2783: uint8_t eidh = (long) val >> 8L;
 14906  00290A  C061  F06D         	movff	setFilter@val+1,setFilter@eidh
 14907                           
 14908                           ; BSR set to: 0
 14909                           ;main.c: 2784: uint8_t eidl = val;
 14910  00290E  C060  F06E         	movff	setFilter@val,setFilter@eidl
 14911                           
 14912                           ;main.c: 2786: switch (filter) {
 14913  002912  D090               	goto	l12090
 14914  002914                     l1231:
 14915                           
 14916                           ; BSR set to: 0
 14917                           ;main.c: 2789: RXF0SIDH = sidh;
 14918  002914  C06B  FF00         	movff	setFilter@sidh,3840	;volatile
 14919                           
 14920                           ;main.c: 2790: RXF0SIDL = sidl;
 14921  002918  C06C  FF01         	movff	setFilter@sidl,3841	;volatile
 14922                           
 14923                           ;main.c: 2791: RXF0EIDH = eidh;
 14924  00291C  C06D  FF02         	movff	setFilter@eidh,3842	;volatile
 14925                           
 14926                           ;main.c: 2792: RXF0EIDL = eidl;
 14927  002920  C06E  FF03         	movff	setFilter@eidl,3843	;volatile
 14928                           
 14929                           ;main.c: 2793: break;
 14930  002924  D0AA               	goto	l1248
 14931  002926                     l1233:
 14932                           
 14933                           ; BSR set to: 0
 14934                           ;main.c: 2796: RXF1SIDH = sidh;
 14935  002926  C06B  FF04         	movff	setFilter@sidh,3844	;volatile
 14936                           
 14937                           ;main.c: 2797: RXF1SIDL = sidl;
 14938  00292A  C06C  FF05         	movff	setFilter@sidl,3845	;volatile
 14939                           
 14940                           ;main.c: 2798: RXF1EIDH = eidh;
 14941  00292E  C06D  FF06         	movff	setFilter@eidh,3846	;volatile
 14942                           
 14943                           ;main.c: 2799: RXF1EIDL = eidl;
 14944  002932  C06E  FF07         	movff	setFilter@eidl,3847	;volatile
 14945                           
 14946                           ;main.c: 2800: break;
 14947  002936  D0A1               	goto	l1248
 14948  002938                     l1234:
 14949                           
 14950                           ; BSR set to: 0
 14951                           ;main.c: 2803: RXF2SIDH = sidh;
 14952  002938  C06B  FF08         	movff	setFilter@sidh,3848	;volatile
 14953                           
 14954                           ;main.c: 2804: RXF2SIDL = sidl;
 14955  00293C  C06C  FF09         	movff	setFilter@sidl,3849	;volatile
 14956                           
 14957                           ;main.c: 2805: RXF2EIDH = eidh;
 14958  002940  C06D  FF0A         	movff	setFilter@eidh,3850	;volatile
 14959                           
 14960                           ;main.c: 2806: RXF2EIDL = eidl;
 14961  002944  C06E  FF0B         	movff	setFilter@eidl,3851	;volatile
 14962                           
 14963                           ;main.c: 2807: break;
 14964  002948  D098               	goto	l1248
 14965  00294A                     l1235:
 14966                           
 14967                           ; BSR set to: 0
 14968                           ;main.c: 2810: RXF3SIDH = sidh;
 14969  00294A  C06B  FF0C         	movff	setFilter@sidh,3852	;volatile
 14970                           
 14971                           ;main.c: 2811: RXF3SIDL = sidl;
 14972  00294E  C06C  FF0D         	movff	setFilter@sidl,3853	;volatile
 14973                           
 14974                           ;main.c: 2812: RXF3EIDH = eidh;
 14975  002952  C06D  FF0E         	movff	setFilter@eidh,3854	;volatile
 14976                           
 14977                           ;main.c: 2813: RXF3EIDL = eidl;
 14978  002956  C06E  FF0F         	movff	setFilter@eidl,3855	;volatile
 14979                           
 14980                           ;main.c: 2814: break;
 14981  00295A  D08F               	goto	l1248
 14982  00295C                     l1236:
 14983                           
 14984                           ; BSR set to: 0
 14985                           ;main.c: 2817: RXF4SIDH = sidh;
 14986  00295C  C06B  FF10         	movff	setFilter@sidh,3856	;volatile
 14987                           
 14988                           ;main.c: 2818: RXF4SIDL = sidl;
 14989  002960  C06C  FF11         	movff	setFilter@sidl,3857	;volatile
 14990                           
 14991                           ;main.c: 2819: RXF4EIDH = eidh;
 14992  002964  C06D  FF12         	movff	setFilter@eidh,3858	;volatile
 14993                           
 14994                           ;main.c: 2820: RXF4EIDL = eidl;
 14995  002968  C06E  FF13         	movff	setFilter@eidl,3859	;volatile
 14996                           
 14997                           ;main.c: 2821: break;
 14998  00296C  D086               	goto	l1248
 14999  00296E                     l1237:
 15000                           
 15001                           ; BSR set to: 0
 15002                           ;main.c: 2824: RXF5SIDH = sidh;
 15003  00296E  C06B  FF14         	movff	setFilter@sidh,3860	;volatile
 15004                           
 15005                           ;main.c: 2825: RXF5SIDL = sidl;
 15006  002972  C06C  FF15         	movff	setFilter@sidl,3861	;volatile
 15007                           
 15008                           ;main.c: 2826: RXF5EIDH = eidh;
 15009  002976  C06D  FF16         	movff	setFilter@eidh,3862	;volatile
 15010                           
 15011                           ;main.c: 2827: RXF5EIDL = eidl;
 15012  00297A  C06E  FF17         	movff	setFilter@eidl,3863	;volatile
 15013                           
 15014                           ;main.c: 2828: break;
 15015  00297E  D07D               	goto	l1248
 15016  002980                     l1238:
 15017                           
 15018                           ; BSR set to: 0
 15019                           ;main.c: 2831: RXF6SIDH = sidh;
 15020  002980  C06B  FD60         	movff	setFilter@sidh,3424	;volatile
 15021                           
 15022                           ;main.c: 2832: RXF6SIDL = sidl;
 15023  002984  C06C  FD61         	movff	setFilter@sidl,3425	;volatile
 15024                           
 15025                           ;main.c: 2833: RXF6EIDH = eidh;
 15026  002988  C06D  FD62         	movff	setFilter@eidh,3426	;volatile
 15027                           
 15028                           ;main.c: 2834: RXF6EIDL = eidl;
 15029  00298C  C06E  FD63         	movff	setFilter@eidl,3427	;volatile
 15030                           
 15031                           ;main.c: 2835: break;
 15032  002990  D074               	goto	l1248
 15033  002992                     l1239:
 15034                           
 15035                           ; BSR set to: 0
 15036                           ;main.c: 2838: RXF7SIDH = sidh;
 15037  002992  C06B  FD64         	movff	setFilter@sidh,3428	;volatile
 15038                           
 15039                           ;main.c: 2839: RXF7SIDL = sidl;
 15040  002996  C06C  FD65         	movff	setFilter@sidl,3429	;volatile
 15041                           
 15042                           ;main.c: 2840: RXF7EIDH = eidh;
 15043  00299A  C06D  FD66         	movff	setFilter@eidh,3430	;volatile
 15044                           
 15045                           ;main.c: 2841: RXF7EIDL = eidl;
 15046  00299E  C06E  FD67         	movff	setFilter@eidl,3431	;volatile
 15047                           
 15048                           ;main.c: 2842: break;
 15049  0029A2  D06B               	goto	l1248
 15050  0029A4                     l1240:
 15051                           
 15052                           ; BSR set to: 0
 15053                           ;main.c: 2845: RXF8SIDH = sidh;
 15054  0029A4  C06B  FD68         	movff	setFilter@sidh,3432	;volatile
 15055                           
 15056                           ;main.c: 2846: RXF8SIDL = sidl;
 15057  0029A8  C06C  FD69         	movff	setFilter@sidl,3433	;volatile
 15058                           
 15059                           ;main.c: 2847: RXF8EIDH = eidh;
 15060  0029AC  C06D  FD6A         	movff	setFilter@eidh,3434	;volatile
 15061                           
 15062                           ;main.c: 2848: RXF8EIDL = eidl;
 15063  0029B0  C06E  FD6B         	movff	setFilter@eidl,3435	;volatile
 15064                           
 15065                           ;main.c: 2849: break;
 15066  0029B4  D062               	goto	l1248
 15067  0029B6                     l1241:
 15068                           
 15069                           ; BSR set to: 0
 15070                           ;main.c: 2852: RXF9SIDH = sidh;
 15071  0029B6  C06B  FD70         	movff	setFilter@sidh,3440	;volatile
 15072                           
 15073                           ;main.c: 2853: RXF9SIDL = sidl;
 15074  0029BA  C06C  FD71         	movff	setFilter@sidl,3441	;volatile
 15075                           
 15076                           ;main.c: 2854: RXF9EIDH = eidh;
 15077  0029BE  C06D  FD72         	movff	setFilter@eidh,3442	;volatile
 15078                           
 15079                           ;main.c: 2855: RXF9EIDL = eidl;
 15080  0029C2  C06E  FD73         	movff	setFilter@eidl,3443	;volatile
 15081                           
 15082                           ;main.c: 2856: break;
 15083  0029C6  D059               	goto	l1248
 15084  0029C8                     l1242:
 15085                           
 15086                           ; BSR set to: 0
 15087                           ;main.c: 2859: RXF10SIDH = sidh;
 15088  0029C8  C06B  FD74         	movff	setFilter@sidh,3444	;volatile
 15089                           
 15090                           ;main.c: 2860: RXF10SIDL = sidl;
 15091  0029CC  C06C  FD75         	movff	setFilter@sidl,3445	;volatile
 15092                           
 15093                           ;main.c: 2861: RXF10EIDH = eidh;
 15094  0029D0  C06D  FD76         	movff	setFilter@eidh,3446	;volatile
 15095                           
 15096                           ;main.c: 2862: RXF10EIDL = eidl;
 15097  0029D4  C06E  FD77         	movff	setFilter@eidl,3447	;volatile
 15098                           
 15099                           ;main.c: 2863: break;
 15100  0029D8  D050               	goto	l1248
 15101  0029DA                     l1243:
 15102                           
 15103                           ; BSR set to: 0
 15104                           ;main.c: 2866: RXF11SIDH = sidh;
 15105  0029DA  C06B  FD78         	movff	setFilter@sidh,3448	;volatile
 15106                           
 15107                           ;main.c: 2867: RXF11SIDL = sidl;
 15108  0029DE  C06C  FD79         	movff	setFilter@sidl,3449	;volatile
 15109                           
 15110                           ;main.c: 2868: RXF11EIDH = eidh;
 15111  0029E2  C06D  FD7A         	movff	setFilter@eidh,3450	;volatile
 15112                           
 15113                           ;main.c: 2869: RXF11EIDL = eidl;
 15114  0029E6  C06E  FD7B         	movff	setFilter@eidl,3451	;volatile
 15115                           
 15116                           ;main.c: 2870: break;
 15117  0029EA  D047               	goto	l1248
 15118  0029EC                     l1244:
 15119                           
 15120                           ; BSR set to: 0
 15121                           ;main.c: 2873: RXF12SIDH = sidh;
 15122  0029EC  C06B  FD80         	movff	setFilter@sidh,3456	;volatile
 15123                           
 15124                           ;main.c: 2874: RXF12SIDL = sidl;
 15125  0029F0  C06C  FD81         	movff	setFilter@sidl,3457	;volatile
 15126                           
 15127                           ;main.c: 2875: RXF12EIDH = eidh;
 15128  0029F4  C06D  FD82         	movff	setFilter@eidh,3458	;volatile
 15129                           
 15130                           ;main.c: 2876: RXF12EIDL = eidl;
 15131  0029F8  C06E  FD83         	movff	setFilter@eidl,3459	;volatile
 15132                           
 15133                           ;main.c: 2877: break;
 15134  0029FC  D03E               	goto	l1248
 15135  0029FE                     l1245:
 15136                           
 15137                           ; BSR set to: 0
 15138                           ;main.c: 2880: RXF13SIDH = sidh;
 15139  0029FE  C06B  FD84         	movff	setFilter@sidh,3460	;volatile
 15140                           
 15141                           ;main.c: 2881: RXF13SIDL = sidl;
 15142  002A02  C06C  FD85         	movff	setFilter@sidl,3461	;volatile
 15143                           
 15144                           ;main.c: 2882: RXF13EIDH = eidh;
 15145  002A06  C06D  FD86         	movff	setFilter@eidh,3462	;volatile
 15146                           
 15147                           ;main.c: 2883: RXF13EIDL = eidl;
 15148  002A0A  C06E  FD87         	movff	setFilter@eidl,3463	;volatile
 15149                           
 15150                           ;main.c: 2884: break;
 15151  002A0E  D035               	goto	l1248
 15152  002A10                     l1246:
 15153                           
 15154                           ; BSR set to: 0
 15155                           ;main.c: 2887: RXF14SIDH = sidh;
 15156  002A10  C06B  FD88         	movff	setFilter@sidh,3464	;volatile
 15157                           
 15158                           ;main.c: 2888: RXF14SIDL = sidl;
 15159  002A14  C06C  FD89         	movff	setFilter@sidl,3465	;volatile
 15160                           
 15161                           ;main.c: 2889: RXF14EIDH = eidh;
 15162  002A18  C06D  FD8A         	movff	setFilter@eidh,3466	;volatile
 15163                           
 15164                           ;main.c: 2890: RXF14EIDL = eidl;
 15165  002A1C  C06E  FD8B         	movff	setFilter@eidl,3467	;volatile
 15166                           
 15167                           ;main.c: 2891: break;
 15168  002A20  D02C               	goto	l1248
 15169  002A22                     l1247:
 15170                           
 15171                           ; BSR set to: 0
 15172                           ;main.c: 2894: RXF15SIDH = sidh;
 15173  002A22  C06B  FD90         	movff	setFilter@sidh,3472	;volatile
 15174                           
 15175                           ;main.c: 2895: RXF15SIDL = sidl;
 15176  002A26  C06C  FD91         	movff	setFilter@sidl,3473	;volatile
 15177                           
 15178                           ;main.c: 2896: RXF15EIDH = eidh;
 15179  002A2A  C06D  FD92         	movff	setFilter@eidh,3474	;volatile
 15180                           
 15181                           ;main.c: 2897: RXF15EIDL = eidl;
 15182  002A2E  C06E  FD93         	movff	setFilter@eidl,3475	;volatile
 15183                           
 15184                           ;main.c: 2898: break;
 15185  002A32  D023               	goto	l1248
 15186  002A34                     l12090:
 15187                           
 15188                           ; BSR set to: 0
 15189  002A34  516A               	movf	setFilter@filter& (0+255),w,b
 15190                           
 15191                           ; Switch size 1, requested type "space"
 15192                           ; Number of cases is 16, Range of values is 0 to 15
 15193                           ; switch strategies available:
 15194                           ; Name         Instructions Cycles
 15195                           ; simple_byte           49    25 (average)
 15196                           ;	Chosen strategy is simple_byte
 15197  002A36  E101 D76D          	bz	l1231
 15198  002A3A  0A01               	xorlw	1	; case 1
 15199  002A3C  E101 D773          	bz	l1233
 15200  002A40  0A03               	xorlw	3	; case 2
 15201  002A42  E101 D779          	bz	l1234
 15202  002A46  0A01               	xorlw	1	; case 3
 15203  002A48  E080               	bz	l1235
 15204  002A4A  0A07               	xorlw	7	; case 4
 15205  002A4C  E087               	bz	l1236
 15206  002A4E  0A01               	xorlw	1	; case 5
 15207  002A50  E08E               	bz	l1237
 15208  002A52  0A03               	xorlw	3	; case 6
 15209  002A54  E095               	bz	l1238
 15210  002A56  0A01               	xorlw	1	; case 7
 15211  002A58  E09C               	bz	l1239
 15212  002A5A  0A0F               	xorlw	15	; case 8
 15213  002A5C  E0A3               	bz	l1240
 15214  002A5E  0A01               	xorlw	1	; case 9
 15215  002A60  E0AA               	bz	l1241
 15216  002A62  0A03               	xorlw	3	; case 10
 15217  002A64  E0B1               	bz	l1242
 15218  002A66  0A01               	xorlw	1	; case 11
 15219  002A68  E0B8               	bz	l1243
 15220  002A6A  0A07               	xorlw	7	; case 12
 15221  002A6C  E0BF               	bz	l1244
 15222  002A6E  0A01               	xorlw	1	; case 13
 15223  002A70  E0C6               	bz	l1245
 15224  002A72  0A03               	xorlw	3	; case 14
 15225  002A74  E0CD               	bz	l1246
 15226  002A76  0A01               	xorlw	1	; case 15
 15227  002A78  E0D4               	bz	l1247
 15228  002A7A                     l1248:
 15229                           
 15230                           ; BSR set to: 0
 15231  002A7A  0012               	return	
 15232  002A7C                     __end_of_setFilter:
 15233                           	opt stack 0
 15234                           tblptru	equ	0xFF8
 15235                           tblptrh	equ	0xFF7
 15236                           tblptrl	equ	0xFF6
 15237                           tablat	equ	0xFF5
 15238                           prodh	equ	0xFF4
 15239                           prodl	equ	0xFF3
 15240                           intcon	equ	0xFF2
 15241                           indf0	equ	0xFEF
 15242                           postinc0	equ	0xFEE
 15243                           fsr0h	equ	0xFEA
 15244                           fsr0l	equ	0xFE9
 15245                           wreg	equ	0xFE8
 15246                           indf1	equ	0xFE7
 15247                           postinc1	equ	0xFE6
 15248                           postdec1	equ	0xFE5
 15249                           fsr1h	equ	0xFE2
 15250                           fsr1l	equ	0xFE1
 15251                           indf2	equ	0xFDF
 15252                           postinc2	equ	0xFDE
 15253                           postdec2	equ	0xFDD
 15254                           plusw2	equ	0xFDB
 15255                           fsr2h	equ	0xFDA
 15256                           fsr2l	equ	0xFD9
 15257                           status	equ	0xFD8
 15258                           
 15259 ;; *************** function _writeRegisterExtended *****************
 15260 ;; Defined at:
 15261 ;;		line 2341 in file "main.c"
 15262 ;; Parameters:    Size  Location     Type
 15263 ;;  nodeid          1    wreg     unsigned char 
 15264 ;;  page            2   86[BANK0 ] unsigned short 
 15265 ;;  reg             1   88[BANK0 ] unsigned char 
 15266 ;;  timeout         2   89[BANK0 ] unsigned short 
 15267 ;;  value           2   91[BANK0 ] PTR unsigned char 
 15268 ;;		 -> doModeVerbose@value_1159(1), 
 15269 ;; Auto vars:     Size  Location     Type
 15270 ;;  nodeid          1   97[BANK0 ] unsigned char 
 15271 ;; Return value:  Size  Location     Type
 15272 ;;                  1    wreg      enum E15660
 15273 ;; Registers used:
 15274 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15275 ;; Tracked objects:
 15276 ;;		On entry : F/2
 15277 ;;		On exit  : E/0
 15278 ;;		Unchanged: 0/0
 15279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15280 ;;      Params:         0       7       0       0       0       0       0
 15281 ;;      Locals:         0       1       0       0       0       0       0
 15282 ;;      Temps:          0       4       0       0       0       0       0
 15283 ;;      Totals:         0      12       0       0       0       0       0
 15284 ;;Total ram usage:       12 bytes
 15285 ;; Hardware stack levels used:    1
 15286 ;; Hardware stack levels required when called:    7
 15287 ;; This function calls:
 15288 ;;		_sendVSCPFrame
 15289 ;;		_getVSCPFrame
 15290 ;; This function is called by:
 15291 ;;		_doModeVerbose
 15292 ;; This function uses a non-reentrant model
 15293 ;;
 15294                           
 15295                           	psect	text24
 15296  0039EE                     __ptext24:
 15297                           	opt stack 0
 15298  0039EE                     _writeRegisterExtended:
 15299                           	opt stack 22
 15300                           
 15301                           ; BSR set to: 0
 15302                           ;incstack = 0
 15303                           ;incstack = 0
 15304                           ;writeRegisterExtended@nodeid stored from wreg
 15305  0039EE  CFE8 F0C1          	movff	wreg,writeRegisterExtended@nodeid
 15306                           
 15307                           ; BSR set to: 2
 15308                           ;main.c: 2342: vscpData[ 0 ] = nodeid;
 15309  0039F2  C0C1  F1A4         	movff	writeRegisterExtended@nodeid,_vscpData
 15310                           
 15311                           ; BSR set to: 2
 15312                           ;main.c: 2343: vscpData[ 1 ] = page >> 8;
 15313  0039F6  0100               	movlb	0	; () banked
 15314  0039F8  51B7               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15315  0039FA  0101               	movlb	1	; () banked
 15316  0039FC  6FA5               	movwf	(_vscpData+1)& (0+255),b
 15317                           
 15318                           ; BSR set to: 1
 15319                           ;main.c: 2344: vscpData[ 2 ] = page & 0xff;
 15320  0039FE  C0B6  F1A6         	movff	writeRegisterExtended@page,_vscpData+2
 15321                           
 15322                           ; BSR set to: 1
 15323                           ;main.c: 2345: vscpData[ 3 ] = reg;
 15324  003A02  C0B8  F1A7         	movff	writeRegisterExtended@reg,_vscpData+3
 15325                           
 15326                           ; BSR set to: 1
 15327                           ;main.c: 2346: vscpData[ 4 ] = *value;
 15328  003A06  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15329  003A0A  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15330  003A0E  50DF               	movf	indf2,w,c
 15331  003A10  6FA8               	movwf	(_vscpData+4)& (0+255),b
 15332                           
 15333                           ; BSR set to: 1
 15334                           ;main.c: 2348: if (sendVSCPFrame(0,
 15335                           ;main.c: 2349: 38,
 15336                           ;main.c: 2350: 0,
 15337                           ;main.c: 2351: 0,
 15338                           ;main.c: 2352: 5,
 15339                           ;main.c: 2353: vscpData)) {
 15340  003A12  0100               	movlb	0	; () banked
 15341  003A14  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15342  003A16  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 15343  003A18  0E26               	movlw	38
 15344  003A1A  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15345  003A1C  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15346  003A1E  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15347  003A20  0E05               	movlw	5
 15348  003A22  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15349  003A24  0E01               	movlw	high _vscpData
 15350  003A26  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 15351  003A28  0EA4               	movlw	low _vscpData
 15352  003A2A  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15353  003A2C  ECB1  F022         	call	_sendVSCPFrame	;wreg free
 15354  003A30  0900               	iorlw	0
 15355  003A32  E05E               	bz	l11990
 15356                           
 15357                           ; BSR set to: 0
 15358                           ;main.c: 2355: timekeeper = 0;
 15359  003A34  6BE5               	clrf	_timekeeper& (0+255),b	;volatile
 15360  003A36  6BE6               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 15361  003A38  6BE7               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 15362  003A3A  6BE8               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 15363                           
 15364                           ;main.c: 2356: while (timekeeper < timeout) {
 15365  003A3C  D049               	goto	l11988
 15366  003A3E                     l1088:
 15367                           
 15368                           ; BSR set to: 0
 15369  003A3E  0004               	clrwdt		;# 
 15370                           
 15371                           ;main.c: 2360: if (getVSCPFrame(&vscpClass,
 15372                           ;main.c: 2361: &vscpType,
 15373                           ;main.c: 2362: &vscpNodeId,
 15374                           ;main.c: 2363: &vscpPriority,
 15375                           ;main.c: 2364: &vscpSize,
 15376                           ;main.c: 2365: vscpData)) {
 15377  003A40  0E01               	movlw	high _vscpClass
 15378  003A42  0100               	movlb	0	; () banked
 15379  003A44  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15380  003A46  0EAC               	movlw	low _vscpClass
 15381  003A48  6F72               	movwf	?_getVSCPFrame& (0+255),b
 15382  003A4A  0E01               	movlw	high _vscpType
 15383  003A4C  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15384  003A4E  0EB1               	movlw	low _vscpType
 15385  003A50  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15386  003A52  0E01               	movlw	high _vscpNodeId
 15387  003A54  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 15388  003A56  0EAE               	movlw	low _vscpNodeId
 15389  003A58  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15390  003A5A  0E01               	movlw	high _vscpPriority
 15391  003A5C  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 15392  003A5E  0EAF               	movlw	low _vscpPriority
 15393  003A60  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 15394  003A62  0E01               	movlw	high _vscpSize
 15395  003A64  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 15396  003A66  0EB0               	movlw	low _vscpSize
 15397  003A68  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 15398  003A6A  0E01               	movlw	high _vscpData
 15399  003A6C  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 15400  003A6E  0EA4               	movlw	low _vscpData
 15401  003A70  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 15402  003A72  ECB9  F025         	call	_getVSCPFrame	;wreg free
 15403  003A76  0900               	iorlw	0
 15404  003A78  E02B               	bz	l11988
 15405                           
 15406                           ; BSR set to: 0
 15407                           ;main.c: 2367: if ((nodeid == vscpNodeId) &&
 15408                           ;main.c: 2368: (5 == vscpSize) &&
 15409                           ;main.c: 2369: (0 == vscpData[ 0 ]) &&
 15410                           ;main.c: 2370: ((page >> 8) == vscpData[ 1 ]) &&
 15411                           ;main.c: 2371: ((page & 0xff) == vscpData[ 2 ]) &&
 15412                           ;main.c: 2372: (reg == vscpData[ 3 ]) &&
 15413                           ;main.c: 2373: (*value == vscpData[ 4 ])) {
 15414  003A7A  0101               	movlb	1	; () banked
 15415  003A7C  51AE               	movf	_vscpNodeId& (0+255),w,b
 15416  003A7E  0100               	movlb	0	; () banked
 15417  003A80  63C1               	cpfseq	writeRegisterExtended@nodeid& (0+255),b
 15418  003A82  D026               	goto	l11988
 15419                           
 15420                           ; BSR set to: 0
 15421  003A84  0101               	movlb	1	; () banked
 15422  003A86  51B0               	movf	_vscpSize& (0+255),w,b
 15423  003A88  0A05               	xorlw	5
 15424  003A8A  E122               	bnz	l11988
 15425                           
 15426                           ; BSR set to: 1
 15427  003A8C  67A4               	tstfsz	_vscpData& (0+255),b
 15428  003A8E  D020               	goto	l11988
 15429                           
 15430                           ; BSR set to: 1
 15431  003A90  0100               	movlb	0	; () banked
 15432  003A92  51B7               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15433  003A94  0101               	movlb	1	; () banked
 15434  003A96  19A5               	xorwf	(_vscpData+1)& (0+255),w,b
 15435  003A98  E11B               	bnz	l11988
 15436                           
 15437                           ; BSR set to: 1
 15438  003A9A  0100               	movlb	0	; () banked
 15439  003A9C  51B6               	movf	writeRegisterExtended@page& (0+255),w,b
 15440  003A9E  EE21  F0A6         	lfsr	2,_vscpData+2
 15441  003AA2  62DF               	cpfseq	indf2,c
 15442  003AA4  D015               	goto	l11988
 15443                           
 15444                           ; BSR set to: 1
 15445  003AA6  51B8               	movf	writeRegisterExtended@reg& (0+255),w,b
 15446  003AA8  0101               	movlb	1	; () banked
 15447  003AAA  EE21  F0A7         	lfsr	2,_vscpData+3
 15448  003AAE  62DF               	cpfseq	indf2,c
 15449  003AB0  D00F               	goto	l11988
 15450                           
 15451                           ; BSR set to: 1
 15452  003AB2  51A8               	movf	(_vscpData+4)& (0+255),w,b
 15453  003AB4  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15454  003AB8  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15455  003ABC  62DF               	cpfseq	indf2,c
 15456  003ABE  D008               	goto	l11988
 15457                           
 15458                           ; BSR set to: 1
 15459                           ;main.c: 2374: *value = vscpData[ 1 ];
 15460  003AC0  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15461  003AC4  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15462  003AC8  C1A5  FFDF         	movff	_vscpData+1,indf2
 15463                           
 15464                           ; BSR set to: 1
 15465                           ;main.c: 2375: return 1;
 15466  003ACC  0E01               	movlw	1
 15467  003ACE  D011               	goto	l1091
 15468  003AD0                     l11988:
 15469  003AD0  0100               	movlb	0	; () banked
 15470  003AD2  51B9               	movf	writeRegisterExtended@timeout& (0+255),w,b
 15471  003AD4  6FBD               	movwf	??_writeRegisterExtended& (0+255),b
 15472  003AD6  51BA               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 15473  003AD8  6FBE               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 15474  003ADA  6BBF               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 15475  003ADC  6BC0               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 15476  003ADE  51BD               	movf	??_writeRegisterExtended& (0+255),w,b
 15477  003AE0  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
 15478  003AE2  51BE               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 15479  003AE4  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 15480  003AE6  51BF               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 15481  003AE8  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 15482  003AEA  51C0               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 15483  003AEC  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 15484  003AEE  E3A7               	bnc	l1088
 15485  003AF0                     l11990:
 15486                           
 15487                           ; BSR set to: 0
 15488                           ;main.c: 2376: }
 15489                           ;main.c: 2378: }
 15490                           ;main.c: 2380: }
 15491                           ;main.c: 2382: }
 15492                           ;main.c: 2384: return 0;
 15493  003AF0  0E00               	movlw	0
 15494  003AF2                     l1091:
 15495  003AF2  0012               	return	
 15496  003AF4                     __end_of_writeRegisterExtended:
 15497                           	opt stack 0
 15498                           tblptru	equ	0xFF8
 15499                           tblptrh	equ	0xFF7
 15500                           tblptrl	equ	0xFF6
 15501                           tablat	equ	0xFF5
 15502                           prodh	equ	0xFF4
 15503                           prodl	equ	0xFF3
 15504                           intcon	equ	0xFF2
 15505                           indf0	equ	0xFEF
 15506                           postinc0	equ	0xFEE
 15507                           fsr0h	equ	0xFEA
 15508                           fsr0l	equ	0xFE9
 15509                           wreg	equ	0xFE8
 15510                           indf1	equ	0xFE7
 15511                           postinc1	equ	0xFE6
 15512                           postdec1	equ	0xFE5
 15513                           fsr1h	equ	0xFE2
 15514                           fsr1l	equ	0xFE1
 15515                           indf2	equ	0xFDF
 15516                           postinc2	equ	0xFDE
 15517                           postdec2	equ	0xFDD
 15518                           plusw2	equ	0xFDB
 15519                           fsr2h	equ	0xFDA
 15520                           fsr2l	equ	0xFD9
 15521                           status	equ	0xFD8
 15522                           
 15523 ;; *************** function _printBinary *****************
 15524 ;; Defined at:
 15525 ;;		line 2428 in file "main.c"
 15526 ;; Parameters:    Size  Location     Type
 15527 ;;  value           1    wreg     unsigned char 
 15528 ;; Auto vars:     Size  Location     Type
 15529 ;;  value           1    3[BANK0 ] unsigned char 
 15530 ;;  i               2    4[BANK0 ] int 
 15531 ;; Return value:  Size  Location     Type
 15532 ;;		None               void
 15533 ;; Registers used:
 15534 ;;		wreg, status,2, status,0, cstack
 15535 ;; Tracked objects:
 15536 ;;		On entry : F/2
 15537 ;;		On exit  : F/0
 15538 ;;		Unchanged: 0/0
 15539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15540 ;;      Params:         0       0       0       0       0       0       0
 15541 ;;      Locals:         0       3       0       0       0       0       0
 15542 ;;      Temps:          0       2       0       0       0       0       0
 15543 ;;      Totals:         0       5       0       0       0       0       0
 15544 ;;Total ram usage:        5 bytes
 15545 ;; Hardware stack levels used:    1
 15546 ;; Hardware stack levels required when called:    4
 15547 ;; This function calls:
 15548 ;;		_WriteUSART
 15549 ;; This function is called by:
 15550 ;;		_doModeVerbose
 15551 ;; This function uses a non-reentrant model
 15552 ;;
 15553                           
 15554                           	psect	text25
 15555  00527A                     __ptext25:
 15556                           	opt stack 0
 15557  00527A                     _printBinary:
 15558                           	opt stack 25
 15559                           
 15560                           ;incstack = 0
 15561                           ;incstack = 0
 15562                           ;printBinary@value stored from wreg
 15563  00527A  CFE8 F063          	movff	wreg,printBinary@value
 15564                           
 15565                           ; BSR set to: 2
 15566                           ;main.c: 2429: int i;
 15567                           ;main.c: 2431: for (i = 7; i >= 0; i--) {
 15568  00527E  0100               	movlb	0	; () banked
 15569  005280  6B65               	clrf	(printBinary@i+1)& (0+255),b
 15570  005282  0E07               	movlw	7
 15571  005284  6F64               	movwf	printBinary@i& (0+255),b
 15572  005286                     l11940:
 15573                           
 15574                           ; BSR set to: 0
 15575                           ;main.c: 2432: if (value & (1 << i)) {
 15576  005286  C064  F061         	movff	printBinary@i,??_printBinary
 15577  00528A  0E01               	movlw	1
 15578  00528C  6F62               	movwf	(??_printBinary+1)& (0+255),b
 15579  00528E  2B61               	incf	??_printBinary& (0+255),f,b
 15580  005290  D002               	goto	u15094
 15581  005292                     u15095:
 15582  005292  90D8               	bcf	status,0,c
 15583  005294  3762               	rlcf	(??_printBinary+1)& (0+255),f,b
 15584  005296                     u15094:
 15585  005296  2F61               	decfsz	??_printBinary& (0+255),f,b
 15586  005298  D7FC               	goto	u15095
 15587  00529A  5162               	movf	(??_printBinary+1)& (0+255),w,b
 15588  00529C  1563               	andwf	printBinary@value& (0+255),w,b
 15589  00529E  E006               	bz	l1111
 15590  0052A0                     l1107:
 15591  0052A0  A2AC               	btfss	4012,1,c	;volatile
 15592  0052A2  D7FE               	goto	l1107
 15593                           
 15594                           ;main.c: 2434: WriteUSART('1');
 15595  0052A4  0E31               	movlw	49
 15596  0052A6  ECB9  F02B         	call	_WriteUSART
 15597                           
 15598                           ;main.c: 2435: } else {
 15599  0052AA  D005               	goto	l11948
 15600  0052AC                     l1111:
 15601  0052AC  A2AC               	btfss	4012,1,c	;volatile
 15602  0052AE  D7FE               	goto	l1111
 15603                           
 15604                           ;main.c: 2437: WriteUSART('0');
 15605  0052B0  0E30               	movlw	48
 15606  0052B2  ECB9  F02B         	call	_WriteUSART
 15607  0052B6                     l11948:
 15608  0052B6  0100               	movlb	0	; () banked
 15609  0052B8  0764               	decf	printBinary@i& (0+255),f,b
 15610  0052BA  A0D8               	btfss	status,0,c
 15611  0052BC  0765               	decf	(printBinary@i+1)& (0+255),f,b
 15612                           
 15613                           ; BSR set to: 0
 15614  0052BE  BF65               	btfsc	(printBinary@i+1)& (0+255),7,b
 15615                           
 15616                           ; BSR set to: 0
 15617  0052C0  0012               	return	
 15618  0052C2  D7E1               	goto	l11940
 15619  0052C4                     __end_of_printBinary:
 15620                           	opt stack 0
 15621                           tblptru	equ	0xFF8
 15622                           tblptrh	equ	0xFF7
 15623                           tblptrl	equ	0xFF6
 15624                           tablat	equ	0xFF5
 15625                           prodh	equ	0xFF4
 15626                           prodl	equ	0xFF3
 15627                           intcon	equ	0xFF2
 15628                           indf0	equ	0xFEF
 15629                           postinc0	equ	0xFEE
 15630                           fsr0h	equ	0xFEA
 15631                           fsr0l	equ	0xFE9
 15632                           wreg	equ	0xFE8
 15633                           indf1	equ	0xFE7
 15634                           postinc1	equ	0xFE6
 15635                           postdec1	equ	0xFE5
 15636                           fsr1h	equ	0xFE2
 15637                           fsr1l	equ	0xFE1
 15638                           indf2	equ	0xFDF
 15639                           postinc2	equ	0xFDE
 15640                           postdec2	equ	0xFDD
 15641                           plusw2	equ	0xFDB
 15642                           fsr2h	equ	0xFDA
 15643                           fsr2l	equ	0xFD9
 15644                           status	equ	0xFD8
 15645                           
 15646 ;; *************** function _readRegisterExtended *****************
 15647 ;; Defined at:
 15648 ;;		line 2240 in file "main.c"
 15649 ;; Parameters:    Size  Location     Type
 15650 ;;  nodeid          1    wreg     unsigned char 
 15651 ;;  page            2   86[BANK0 ] unsigned short 
 15652 ;;  reg             1   88[BANK0 ] unsigned char 
 15653 ;;  timeout         2   89[BANK0 ] unsigned short 
 15654 ;;  value           2   91[BANK0 ] PTR unsigned char 
 15655 ;;		 -> doModeVerbose@value(1), 
 15656 ;; Auto vars:     Size  Location     Type
 15657 ;;  nodeid          1   97[BANK0 ] unsigned char 
 15658 ;; Return value:  Size  Location     Type
 15659 ;;                  1    wreg      enum E15660
 15660 ;; Registers used:
 15661 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15662 ;; Tracked objects:
 15663 ;;		On entry : F/2
 15664 ;;		On exit  : E/0
 15665 ;;		Unchanged: 0/0
 15666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15667 ;;      Params:         0       7       0       0       0       0       0
 15668 ;;      Locals:         0       1       0       0       0       0       0
 15669 ;;      Temps:          0       4       0       0       0       0       0
 15670 ;;      Totals:         0      12       0       0       0       0       0
 15671 ;;Total ram usage:       12 bytes
 15672 ;; Hardware stack levels used:    1
 15673 ;; Hardware stack levels required when called:    7
 15674 ;; This function calls:
 15675 ;;		_sendVSCPFrame
 15676 ;;		_getVSCPFrame
 15677 ;; This function is called by:
 15678 ;;		_doModeVerbose
 15679 ;; This function uses a non-reentrant model
 15680 ;;
 15681                           
 15682                           	psect	text26
 15683  003CFE                     __ptext26:
 15684                           	opt stack 0
 15685  003CFE                     _readRegisterExtended:
 15686                           	opt stack 22
 15687                           
 15688                           ; BSR set to: 0
 15689                           ;incstack = 0
 15690                           ;incstack = 0
 15691                           ;readRegisterExtended@nodeid stored from wreg
 15692  003CFE  CFE8 F0C1          	movff	wreg,readRegisterExtended@nodeid
 15693                           
 15694                           ; BSR set to: 2
 15695                           ;main.c: 2241: vscpData[ 0 ] = nodeid;
 15696  003D02  C0C1  F1A4         	movff	readRegisterExtended@nodeid,_vscpData
 15697                           
 15698                           ; BSR set to: 2
 15699                           ;main.c: 2242: vscpData[ 1 ] = page >> 8;
 15700  003D06  0100               	movlb	0	; () banked
 15701  003D08  51B7               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 15702  003D0A  0101               	movlb	1	; () banked
 15703  003D0C  6FA5               	movwf	(_vscpData+1)& (0+255),b
 15704                           
 15705                           ; BSR set to: 1
 15706                           ;main.c: 2243: vscpData[ 2 ] = page & 0xff;
 15707  003D0E  C0B6  F1A6         	movff	readRegisterExtended@page,_vscpData+2
 15708                           
 15709                           ; BSR set to: 1
 15710                           ;main.c: 2244: vscpData[ 3 ] = reg;
 15711  003D12  C0B8  F1A7         	movff	readRegisterExtended@reg,_vscpData+3
 15712                           
 15713                           ; BSR set to: 1
 15714                           ;main.c: 2245: vscpData[ 4 ] = 1;
 15715  003D16  0E01               	movlw	1
 15716  003D18  6FA8               	movwf	(_vscpData+4)& (0+255),b
 15717                           
 15718                           ; BSR set to: 1
 15719                           ;main.c: 2247: if (sendVSCPFrame(0,
 15720                           ;main.c: 2248: 37,
 15721                           ;main.c: 2249: 0,
 15722                           ;main.c: 2250: 0,
 15723                           ;main.c: 2251: 5,
 15724                           ;main.c: 2252: vscpData)) {
 15725  003D1A  0100               	movlb	0	; () banked
 15726  003D1C  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15727  003D1E  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 15728  003D20  0E25               	movlw	37
 15729  003D22  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15730  003D24  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15731  003D26  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15732  003D28  0E05               	movlw	5
 15733  003D2A  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15734  003D2C  0E01               	movlw	high _vscpData
 15735  003D2E  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 15736  003D30  0EA4               	movlw	low _vscpData
 15737  003D32  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15738  003D34  ECB1  F022         	call	_sendVSCPFrame	;wreg free
 15739  003D38  0900               	iorlw	0
 15740  003D3A  E05D               	bz	l11580
 15741                           
 15742                           ; BSR set to: 0
 15743                           ;main.c: 2254: timekeeper = 0;
 15744  003D3C  6BE5               	clrf	_timekeeper& (0+255),b	;volatile
 15745  003D3E  6BE6               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 15746  003D40  6BE7               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 15747  003D42  6BE8               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 15748                           
 15749                           ;main.c: 2255: while (timekeeper < timeout) {
 15750  003D44  D048               	goto	l11578
 15751  003D46                     l1070:
 15752                           
 15753                           ; BSR set to: 0
 15754  003D46  0004               	clrwdt		;# 
 15755                           
 15756                           ;main.c: 2259: if (getVSCPFrame(&vscpClass,
 15757                           ;main.c: 2260: &vscpType,
 15758                           ;main.c: 2261: &vscpNodeId,
 15759                           ;main.c: 2262: &vscpPriority,
 15760                           ;main.c: 2263: &vscpSize,
 15761                           ;main.c: 2264: vscpData)) {
 15762  003D48  0E01               	movlw	high _vscpClass
 15763  003D4A  0100               	movlb	0	; () banked
 15764  003D4C  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15765  003D4E  0EAC               	movlw	low _vscpClass
 15766  003D50  6F72               	movwf	?_getVSCPFrame& (0+255),b
 15767  003D52  0E01               	movlw	high _vscpType
 15768  003D54  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15769  003D56  0EB1               	movlw	low _vscpType
 15770  003D58  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15771  003D5A  0E01               	movlw	high _vscpNodeId
 15772  003D5C  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 15773  003D5E  0EAE               	movlw	low _vscpNodeId
 15774  003D60  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15775  003D62  0E01               	movlw	high _vscpPriority
 15776  003D64  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 15777  003D66  0EAF               	movlw	low _vscpPriority
 15778  003D68  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 15779  003D6A  0E01               	movlw	high _vscpSize
 15780  003D6C  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 15781  003D6E  0EB0               	movlw	low _vscpSize
 15782  003D70  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 15783  003D72  0E01               	movlw	high _vscpData
 15784  003D74  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 15785  003D76  0EA4               	movlw	low _vscpData
 15786  003D78  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 15787  003D7A  ECB9  F025         	call	_getVSCPFrame	;wreg free
 15788  003D7E  0900               	iorlw	0
 15789  003D80  E02A               	bz	l11578
 15790                           
 15791                           ; BSR set to: 0
 15792                           ;main.c: 2265: if ((nodeid == vscpNodeId) &&
 15793                           ;main.c: 2266: (0 == vscpClass) &&
 15794                           ;main.c: 2267: (39 == vscpType) &&
 15795                           ;main.c: 2268: (5 == vscpSize) &&
 15796                           ;main.c: 2269: (0 == vscpData[ 0 ]) &&
 15797                           ;main.c: 2270: ((page >> 8) == vscpData[ 1 ]) &&
 15798                           ;main.c: 2271: ((page & 0xff) == vscpData[ 2 ]) &&
 15799                           ;main.c: 2272: (reg == vscpData[ 3 ])) {
 15800  003D82  0101               	movlb	1	; () banked
 15801  003D84  51AE               	movf	_vscpNodeId& (0+255),w,b
 15802  003D86  0100               	movlb	0	; () banked
 15803  003D88  63C1               	cpfseq	readRegisterExtended@nodeid& (0+255),b
 15804  003D8A  D025               	goto	l11578
 15805                           
 15806                           ; BSR set to: 0
 15807  003D8C  0101               	movlb	1	; () banked
 15808  003D8E  51AD               	movf	(_vscpClass+1)& (0+255),w,b
 15809  003D90  11AC               	iorwf	_vscpClass& (0+255),w,b
 15810  003D92  E121               	bnz	l11578
 15811                           
 15812                           ; BSR set to: 1
 15813  003D94  51B1               	movf	_vscpType& (0+255),w,b
 15814  003D96  0A27               	xorlw	39
 15815  003D98  E11E               	bnz	l11578
 15816                           
 15817                           ; BSR set to: 1
 15818  003D9A  51B0               	movf	_vscpSize& (0+255),w,b
 15819  003D9C  0A05               	xorlw	5
 15820  003D9E  E11B               	bnz	l11578
 15821                           
 15822                           ; BSR set to: 1
 15823  003DA0  67A4               	tstfsz	_vscpData& (0+255),b
 15824  003DA2  D019               	goto	l11578
 15825                           
 15826                           ; BSR set to: 1
 15827  003DA4  0100               	movlb	0	; () banked
 15828  003DA6  51B7               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 15829  003DA8  0101               	movlb	1	; () banked
 15830  003DAA  19A5               	xorwf	(_vscpData+1)& (0+255),w,b
 15831  003DAC  E114               	bnz	l11578
 15832                           
 15833                           ; BSR set to: 1
 15834  003DAE  0100               	movlb	0	; () banked
 15835  003DB0  51B6               	movf	readRegisterExtended@page& (0+255),w,b
 15836  003DB2  EE21  F0A6         	lfsr	2,_vscpData+2
 15837  003DB6  62DF               	cpfseq	indf2,c
 15838  003DB8  D00E               	goto	l11578
 15839                           
 15840                           ; BSR set to: 1
 15841  003DBA  51B8               	movf	readRegisterExtended@reg& (0+255),w,b
 15842  003DBC  0101               	movlb	1	; () banked
 15843  003DBE  EE21  F0A7         	lfsr	2,_vscpData+3
 15844  003DC2  62DF               	cpfseq	indf2,c
 15845  003DC4  D008               	goto	l11578
 15846                           
 15847                           ; BSR set to: 1
 15848                           ;main.c: 2273: *value = vscpData[ 4 ];
 15849  003DC6  C0BB  FFD9         	movff	readRegisterExtended@value,fsr2l
 15850  003DCA  C0BC  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 15851  003DCE  C1A8  FFDF         	movff	_vscpData+4,indf2
 15852                           
 15853                           ; BSR set to: 1
 15854                           ;main.c: 2274: return 1;
 15855  003DD2  0E01               	movlw	1
 15856  003DD4  D011               	goto	l1073
 15857  003DD6                     l11578:
 15858  003DD6  0100               	movlb	0	; () banked
 15859  003DD8  51B9               	movf	readRegisterExtended@timeout& (0+255),w,b
 15860  003DDA  6FBD               	movwf	??_readRegisterExtended& (0+255),b
 15861  003DDC  51BA               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 15862  003DDE  6FBE               	movwf	(??_readRegisterExtended+1)& (0+255),b
 15863  003DE0  6BBF               	clrf	(??_readRegisterExtended+2)& (0+255),b
 15864  003DE2  6BC0               	clrf	(??_readRegisterExtended+3)& (0+255),b
 15865  003DE4  51BD               	movf	??_readRegisterExtended& (0+255),w,b
 15866  003DE6  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
 15867  003DE8  51BE               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 15868  003DEA  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 15869  003DEC  51BF               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 15870  003DEE  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 15871  003DF0  51C0               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 15872  003DF2  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 15873  003DF4  E3A8               	bnc	l1070
 15874  003DF6                     l11580:
 15875                           
 15876                           ; BSR set to: 0
 15877                           ;main.c: 2275: }
 15878                           ;main.c: 2276: }
 15879                           ;main.c: 2277: }
 15880                           ;main.c: 2278: }
 15881                           ;main.c: 2280: return 0;
 15882  003DF6  0E00               	movlw	0
 15883  003DF8                     l1073:
 15884  003DF8  0012               	return	
 15885  003DFA                     __end_of_readRegisterExtended:
 15886                           	opt stack 0
 15887                           tblptru	equ	0xFF8
 15888                           tblptrh	equ	0xFF7
 15889                           tblptrl	equ	0xFF6
 15890                           tablat	equ	0xFF5
 15891                           prodh	equ	0xFF4
 15892                           prodl	equ	0xFF3
 15893                           intcon	equ	0xFF2
 15894                           indf0	equ	0xFEF
 15895                           postinc0	equ	0xFEE
 15896                           fsr0h	equ	0xFEA
 15897                           fsr0l	equ	0xFE9
 15898                           wreg	equ	0xFE8
 15899                           indf1	equ	0xFE7
 15900                           postinc1	equ	0xFE6
 15901                           postdec1	equ	0xFE5
 15902                           fsr1h	equ	0xFE2
 15903                           fsr1l	equ	0xFE1
 15904                           indf2	equ	0xFDF
 15905                           postinc2	equ	0xFDE
 15906                           postdec2	equ	0xFDD
 15907                           plusw2	equ	0xFDB
 15908                           fsr2h	equ	0xFDA
 15909                           fsr2l	equ	0xFD9
 15910                           status	equ	0xFD8
 15911                           
 15912 ;; *************** function _strcpy *****************
 15913 ;; Defined at:
 15914 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 15915 ;; Parameters:    Size  Location     Type
 15916 ;;  to              2    0[BANK0 ] PTR unsigned char 
 15917 ;;		 -> cmdbuf(80), 
 15918 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 15919 ;;		 -> cmdbuf(80), 
 15920 ;; Auto vars:     Size  Location     Type
 15921 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 15922 ;;		 -> cmdbuf(80), 
 15923 ;; Return value:  Size  Location     Type
 15924 ;;                  2    0[BANK0 ] PTR unsigned char 
 15925 ;; Registers used:
 15926 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15927 ;; Tracked objects:
 15928 ;;		On entry : F/1
 15929 ;;		On exit  : E/0
 15930 ;;		Unchanged: 0/0
 15931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15932 ;;      Params:         0       4       0       0       0       0       0
 15933 ;;      Locals:         0       2       0       0       0       0       0
 15934 ;;      Temps:          0       0       0       0       0       0       0
 15935 ;;      Totals:         0       6       0       0       0       0       0
 15936 ;;Total ram usage:        6 bytes
 15937 ;; Hardware stack levels used:    1
 15938 ;; Hardware stack levels required when called:    3
 15939 ;; This function calls:
 15940 ;;		Nothing
 15941 ;; This function is called by:
 15942 ;;		_doModeVerbose
 15943 ;; This function uses a non-reentrant model
 15944 ;;
 15945                           
 15946                           	psect	text27
 15947  005634                     __ptext27:
 15948                           	opt stack 0
 15949  005634                     _strcpy:
 15950                           	opt stack 26
 15951                           
 15952                           ; BSR set to: 1
 15953                           
 15954                           ;incstack = 0
 15955                           ;incstack = 0
 15956  005634  C060  F064         	movff	strcpy@to,strcpy@cp
 15957  005638  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 15958  00563C  D005               	goto	l11532
 15959  00563E                     l11530:
 15960  00563E  0100               	movlb	0	; () banked
 15961  005640  4B64               	infsnz	strcpy@cp& (0+255),f,b
 15962  005642  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 15963  005644  4B62               	infsnz	strcpy@from& (0+255),f,b
 15964  005646  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 15965  005648                     l11532:
 15966  005648  C062  FFD9         	movff	strcpy@from,fsr2l
 15967  00564C  C063  FFDA         	movff	strcpy@from+1,fsr2h
 15968  005650  C064  FFE1         	movff	strcpy@cp,fsr1l
 15969  005654  C065  FFE2         	movff	strcpy@cp+1,fsr1h
 15970  005658  CFDF FFE7          	movff	indf2,indf1
 15971  00565C  50E7               	movf	indf1,w,c
 15972  00565E  B4D8               	btfsc	status,2,c
 15973  005660  0012               	return	
 15974  005662  D7ED               	goto	l11530
 15975  005664                     __end_of_strcpy:
 15976                           	opt stack 0
 15977                           tblptru	equ	0xFF8
 15978                           tblptrh	equ	0xFF7
 15979                           tblptrl	equ	0xFF6
 15980                           tablat	equ	0xFF5
 15981                           prodh	equ	0xFF4
 15982                           prodl	equ	0xFF3
 15983                           intcon	equ	0xFF2
 15984                           indf0	equ	0xFEF
 15985                           postinc0	equ	0xFEE
 15986                           fsr0h	equ	0xFEA
 15987                           fsr0l	equ	0xFE9
 15988                           wreg	equ	0xFE8
 15989                           indf1	equ	0xFE7
 15990                           postinc1	equ	0xFE6
 15991                           postdec1	equ	0xFE5
 15992                           fsr1h	equ	0xFE2
 15993                           fsr1l	equ	0xFE1
 15994                           indf2	equ	0xFDF
 15995                           postinc2	equ	0xFDE
 15996                           postdec2	equ	0xFDD
 15997                           plusw2	equ	0xFDB
 15998                           fsr2h	equ	0xFDA
 15999                           fsr2l	equ	0xFD9
 16000                           status	equ	0xFD8
 16001                           
 16002 ;; *************** function _findNodes *****************
 16003 ;; Defined at:
 16004 ;;		line 2579 in file "main.c"
 16005 ;; Parameters:    Size  Location     Type
 16006 ;;		None
 16007 ;; Auto vars:     Size  Location     Type
 16008 ;;  i               1  105[BANK0 ] unsigned char 
 16009 ;;  value           1  104[BANK0 ] unsigned char 
 16010 ;;  nFound          1  103[BANK0 ] unsigned char 
 16011 ;; Return value:  Size  Location     Type
 16012 ;;		None               void
 16013 ;; Registers used:
 16014 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16015 ;; Tracked objects:
 16016 ;;		On entry : F/1
 16017 ;;		On exit  : 0/0
 16018 ;;		Unchanged: 0/0
 16019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16020 ;;      Params:         0       0       0       0       0       0       0
 16021 ;;      Locals:         0       5       0       0       0       0       0
 16022 ;;      Temps:          0       0       0       0       0       0       0
 16023 ;;      Totals:         0       5       0       0       0       0       0
 16024 ;;Total ram usage:        5 bytes
 16025 ;; Hardware stack levels used:    1
 16026 ;; Hardware stack levels required when called:    9
 16027 ;; This function calls:
 16028 ;;		_putsUSART
 16029 ;;		_printNodeFirmwareVersion
 16030 ;;		_printGUID
 16031 ;;		_printMDF
 16032 ;;		_itoa
 16033 ;;		_readRegister
 16034 ;; This function is called by:
 16035 ;;		_doModeVerbose
 16036 ;; This function uses a non-reentrant model
 16037 ;;
 16038                           
 16039                           	psect	text28
 16040  003DFA                     __ptext28:
 16041                           	opt stack 0
 16042  003DFA                     _findNodes:
 16043                           	opt stack 20
 16044                           
 16045                           ; BSR set to: 1
 16046                           ;main.c: 2580: uint8_t nFound = 0;
 16047                           
 16048                           ;incstack = 0
 16049                           ;incstack = 0
 16050  003DFA  0100               	movlb	0	; () banked
 16051  003DFC  6BC7               	clrf	findNodes@nFound& (0+255),b
 16052                           
 16053                           ; BSR set to: 0
 16054                           ;main.c: 2581: uint8_t i;
 16055                           ;main.c: 2582: uint8_t value;
 16056                           ;main.c: 2584: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16057  003DFE  0E71               	movlw	high STR_238
 16058  003E00  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16059  003E02  0E53               	movlw	low STR_238
 16060  003E04  6F61               	movwf	?_putsUSART& (0+255),b
 16061  003E06  ECEA  F028         	call	_putsUSART	;wreg free
 16062                           
 16063                           ;main.c: 2586: for (i = 1; i != 0; i++) {
 16064  003E0A  0E01               	movlw	1
 16065  003E0C  0100               	movlb	0	; () banked
 16066  003E0E  6FC9               	movwf	findNodes@i& (0+255),b
 16067  003E10                     l1172:
 16068                           
 16069                           ; BSR set to: 0
 16070  003E10  0004               	clrwdt		;# 
 16071                           
 16072                           ;main.c: 2590: if (readRegister(i,
 16073                           ;main.c: 2591: 0xE0,
 16074                           ;main.c: 2592: rwtimeout,
 16075                           ;main.c: 2593: &value)) {
 16076  003E12  0EE0               	movlw	224
 16077  003E14  0100               	movlb	0	; () banked
 16078  003E16  6FB6               	movwf	?_readRegister& (0+255),b
 16079  003E18  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16080  003E1C  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16081  003E1E  0EC8               	movlw	low findNodes@value
 16082  003E20  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16083  003E22  51C9               	movf	findNodes@i& (0+255),w,b
 16084  003E24  EC29  F021         	call	_readRegister
 16085  003E28  0900               	iorlw	0
 16086  003E2A  E043               	bz	l11518
 16087                           
 16088                           ;main.c: 2594: putsUSART((char *) "Node found with node id = ");
 16089  003E2C  0E7B               	movlw	high STR_239
 16090  003E2E  0100               	movlb	0	; () banked
 16091  003E30  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16092  003E32  0E99               	movlw	low STR_239
 16093  003E34  6F61               	movwf	?_putsUSART& (0+255),b
 16094  003E36  ECEA  F028         	call	_putsUSART	;wreg free
 16095                           
 16096                           ;main.c: 2595: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 16097  003E3A  0101               	movlb	1	; () banked
 16098  003E3C  6700               	tstfsz	_bHex& (0+255),b
 16099  003E3E  D004               	goto	l11500
 16100                           
 16101                           ; BSR set to: 1
 16102  003E40  0100               	movlb	0	; () banked
 16103  003E42  6BC6               	clrf	(_findNodes$1468+1)& (0+255),b
 16104  003E44  0E0A               	movlw	10
 16105  003E46  D003               	goto	L13
 16106  003E48                     l11500:
 16107                           
 16108                           ; BSR set to: 1
 16109  003E48  0100               	movlb	0	; () banked
 16110  003E4A  6BC6               	clrf	(_findNodes$1468+1)& (0+255),b
 16111  003E4C  0E10               	movlw	16
 16112  003E4E                     L13:
 16113  003E4E  6FC5               	movwf	_findNodes$1468& (0+255),b
 16114                           
 16115                           ; BSR set to: 0
 16116  003E50  0E01               	movlw	high _wrkbuf
 16117  003E52  0100               	movlb	0	; () banked
 16118  003E54  6F71               	movwf	(?_itoa+1)& (0+255),b
 16119  003E56  0E54               	movlw	low _wrkbuf
 16120  003E58  6F70               	movwf	?_itoa& (0+255),b
 16121  003E5A  C1AE  F072         	movff	_vscpNodeId,?_itoa+2
 16122  003E5E  6B73               	clrf	(?_itoa+3)& (0+255),b
 16123  003E60  C0C5  F074         	movff	_findNodes$1468,?_itoa+4
 16124  003E64  C0C6  F075         	movff	_findNodes$1468+1,?_itoa+5
 16125  003E68  ECCA  F02A         	call	_itoa	;wreg free
 16126                           
 16127                           ; BSR set to: 0
 16128                           ;main.c: 2596: putsUSART(wrkbuf);
 16129  003E6C  0E01               	movlw	high _wrkbuf
 16130  003E6E  0100               	movlb	0	; () banked
 16131  003E70  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16132  003E72  0E54               	movlw	low _wrkbuf
 16133  003E74  6F61               	movwf	?_putsUSART& (0+255),b
 16134  003E76  ECEA  F028         	call	_putsUSART	;wreg free
 16135                           
 16136                           ;main.c: 2597: putsUSART((char *) "\r\n");
 16137  003E7A  0E74               	movlw	high (STR_197+50)
 16138  003E7C  0100               	movlb	0	; () banked
 16139  003E7E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16140  003E80  0E8A               	movlw	low (STR_197+50)
 16141  003E82  6F61               	movwf	?_putsUSART& (0+255),b
 16142  003E84  ECEA  F028         	call	_putsUSART	;wreg free
 16143                           
 16144                           ;main.c: 2598: printNodeFirmwareVersion(i);
 16145  003E88  0100               	movlb	0	; () banked
 16146  003E8A  51C9               	movf	findNodes@i& (0+255),w,b
 16147  003E8C  ECC1  F020         	call	_printNodeFirmwareVersion
 16148                           
 16149                           ;main.c: 2599: printGUID(i);
 16150  003E90  0100               	movlb	0	; () banked
 16151  003E92  51C9               	movf	findNodes@i& (0+255),w,b
 16152  003E94  ECFD  F01D         	call	_printGUID
 16153                           
 16154                           ;main.c: 2600: printMDF(i);
 16155  003E98  0100               	movlb	0	; () banked
 16156  003E9A  51C9               	movf	findNodes@i& (0+255),w,b
 16157  003E9C  EC99  F024         	call	_printMDF
 16158                           
 16159                           ;main.c: 2601: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16160  003EA0  0E71               	movlw	high STR_238
 16161  003EA2  0100               	movlb	0	; () banked
 16162  003EA4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16163  003EA6  0E53               	movlw	low STR_238
 16164  003EA8  6F61               	movwf	?_putsUSART& (0+255),b
 16165  003EAA  ECEA  F028         	call	_putsUSART	;wreg free
 16166                           
 16167                           ;main.c: 2602: nFound++;
 16168  003EAE  0100               	movlb	0	; () banked
 16169  003EB0  2BC7               	incf	findNodes@nFound& (0+255),f,b
 16170  003EB2                     l11518:
 16171  003EB2  0100               	movlb	0	; () banked
 16172  003EB4  2BC9               	incf	findNodes@i& (0+255),f,b
 16173                           
 16174                           ; BSR set to: 0
 16175  003EB6  67C9               	tstfsz	findNodes@i& (0+255),b
 16176  003EB8  D7AB               	goto	l1172
 16177                           
 16178                           ; BSR set to: 0
 16179                           ;main.c: 2603: }
 16180                           ;main.c: 2605: }
 16181                           ;main.c: 2607: itoa(wrkbuf, nFound, 10);
 16182  003EBA  0E01               	movlw	high _wrkbuf
 16183  003EBC  6F71               	movwf	(?_itoa+1)& (0+255),b
 16184  003EBE  0E54               	movlw	low _wrkbuf
 16185  003EC0  6F70               	movwf	?_itoa& (0+255),b
 16186  003EC2  C0C7  F072         	movff	findNodes@nFound,?_itoa+2
 16187  003EC6  6B73               	clrf	(?_itoa+3)& (0+255),b
 16188  003EC8  6B75               	clrf	(?_itoa+5)& (0+255),b
 16189  003ECA  0E0A               	movlw	10
 16190  003ECC  6F74               	movwf	(?_itoa+4)& (0+255),b
 16191  003ECE  ECCA  F02A         	call	_itoa	;wreg free
 16192                           
 16193                           ; BSR set to: 0
 16194                           ;main.c: 2608: putsUSART(wrkbuf);
 16195  003ED2  0E01               	movlw	high _wrkbuf
 16196  003ED4  0100               	movlb	0	; () banked
 16197  003ED6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16198  003ED8  0E54               	movlw	low _wrkbuf
 16199  003EDA  6F61               	movwf	?_putsUSART& (0+255),b
 16200  003EDC  ECEA  F028         	call	_putsUSART	;wreg free
 16201                           
 16202                           ;main.c: 2609: putsUSART((char *) " nodes found\r\n");
 16203  003EE0  0E7E               	movlw	high STR_242
 16204  003EE2  0100               	movlb	0	; () banked
 16205  003EE4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16206  003EE6  0E4E               	movlw	low STR_242
 16207  003EE8  6F61               	movwf	?_putsUSART& (0+255),b
 16208  003EEA  EFEA  F028         	goto	_putsUSART	;wreg free
 16209  003EEE                     __end_of_findNodes:
 16210                           	opt stack 0
 16211                           tblptru	equ	0xFF8
 16212                           tblptrh	equ	0xFF7
 16213                           tblptrl	equ	0xFF6
 16214                           tablat	equ	0xFF5
 16215                           prodh	equ	0xFF4
 16216                           prodl	equ	0xFF3
 16217                           intcon	equ	0xFF2
 16218                           indf0	equ	0xFEF
 16219                           postinc0	equ	0xFEE
 16220                           fsr0h	equ	0xFEA
 16221                           fsr0l	equ	0xFE9
 16222                           wreg	equ	0xFE8
 16223                           indf1	equ	0xFE7
 16224                           postinc1	equ	0xFE6
 16225                           postdec1	equ	0xFE5
 16226                           fsr1h	equ	0xFE2
 16227                           fsr1l	equ	0xFE1
 16228                           indf2	equ	0xFDF
 16229                           postinc2	equ	0xFDE
 16230                           postdec2	equ	0xFDD
 16231                           plusw2	equ	0xFDB
 16232                           fsr2h	equ	0xFDA
 16233                           fsr2l	equ	0xFD9
 16234                           status	equ	0xFD8
 16235                           
 16236 ;; *************** function _printMDF *****************
 16237 ;; Defined at:
 16238 ;;		line 2660 in file "main.c"
 16239 ;; Parameters:    Size  Location     Type
 16240 ;;  nodeid          1    wreg     unsigned char 
 16241 ;; Auto vars:     Size  Location     Type
 16242 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16243 ;;  p               2   97[BANK0 ] PTR unsigned char 
 16244 ;;		 -> wrkbuf(80), 
 16245 ;;  i               1   99[BANK0 ] unsigned char 
 16246 ;;  value           1   96[BANK0 ] unsigned char 
 16247 ;; Return value:  Size  Location     Type
 16248 ;;		None               void
 16249 ;; Registers used:
 16250 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16251 ;; Tracked objects:
 16252 ;;		On entry : D/2
 16253 ;;		On exit  : 0/0
 16254 ;;		Unchanged: 0/0
 16255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16256 ;;      Params:         0       0       0       0       0       0       0
 16257 ;;      Locals:         0       5       0       0       0       0       0
 16258 ;;      Temps:          0       0       0       0       0       0       0
 16259 ;;      Totals:         0       5       0       0       0       0       0
 16260 ;;Total ram usage:        5 bytes
 16261 ;; Hardware stack levels used:    1
 16262 ;; Hardware stack levels required when called:    8
 16263 ;; This function calls:
 16264 ;;		_putsUSART
 16265 ;;		_memset
 16266 ;;		_readRegister
 16267 ;; This function is called by:
 16268 ;;		_doModeVerbose
 16269 ;;		_findNodes
 16270 ;; This function uses a non-reentrant model
 16271 ;;
 16272                           
 16273                           	psect	text29
 16274  004932                     __ptext29:
 16275                           	opt stack 0
 16276  004932                     _printMDF:
 16277                           	opt stack 21
 16278                           
 16279                           ;incstack = 0
 16280                           ;incstack = 0
 16281                           ;printMDF@nodeid stored from wreg
 16282  004932  CFE8 F0BF          	movff	wreg,printMDF@nodeid
 16283                           
 16284                           ;main.c: 2661: uint8_t i;
 16285                           ;main.c: 2662: uint8_t value;
 16286                           ;main.c: 2663: char *p = wrkbuf;
 16287  004936  0E01               	movlw	high _wrkbuf
 16288  004938  0100               	movlb	0	; () banked
 16289  00493A  6FC2               	movwf	(printMDF@p+1)& (0+255),b
 16290  00493C  0E54               	movlw	low _wrkbuf
 16291  00493E  6FC1               	movwf	printMDF@p& (0+255),b
 16292                           
 16293                           ; BSR set to: 0
 16294                           ;main.c: 2664: memset(wrkbuf, 0, sizeof (wrkbuf));
 16295  004940  0E01               	movlw	high _wrkbuf
 16296  004942  6F61               	movwf	(?_memset+1)& (0+255),b
 16297  004944  0E54               	movlw	low _wrkbuf
 16298  004946  6F60               	movwf	?_memset& (0+255),b
 16299  004948  6B63               	clrf	(?_memset+3)& (0+255),b
 16300  00494A  6B62               	clrf	(?_memset+2)& (0+255),b
 16301  00494C  6B65               	clrf	(?_memset+5)& (0+255),b
 16302  00494E  0E50               	movlw	80
 16303  004950  6F64               	movwf	(?_memset+4)& (0+255),b
 16304  004952  EC49  F02B         	call	_memset	;wreg free
 16305                           
 16306                           ; BSR set to: 0
 16307                           ;main.c: 2665: putsUSART((char *) "MDF = http://");
 16308  004956  0E7E               	movlw	high STR_248
 16309  004958  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16310  00495A  0E6C               	movlw	low STR_248
 16311  00495C  6F61               	movwf	?_putsUSART& (0+255),b
 16312  00495E  ECEA  F028         	call	_putsUSART	;wreg free
 16313                           
 16314                           ;main.c: 2667: for (i = 0; i < 32; i++) {
 16315  004962  0100               	movlb	0	; () banked
 16316  004964  6BC3               	clrf	printMDF@i& (0+255),b
 16317  004966                     l12066:
 16318                           
 16319                           ; BSR set to: 0
 16320                           ;main.c: 2668: if (readRegister(nodeid,
 16321                           ;main.c: 2669: 0xE0 + i,
 16322                           ;main.c: 2670: rwtimeout,
 16323                           ;main.c: 2671: &value)) {
 16324  004966  51C3               	movf	printMDF@i& (0+255),w,b
 16325  004968  0FE0               	addlw	224
 16326  00496A  6FB6               	movwf	?_readRegister& (0+255),b
 16327  00496C  0100               	movlb	0	; () banked
 16328  00496E  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16329  004972  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16330  004974  0EC0               	movlw	low printMDF@value
 16331  004976  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16332  004978  51BF               	movf	printMDF@nodeid& (0+255),w,b
 16333  00497A  EC29  F021         	call	_readRegister
 16334  00497E  0900               	iorlw	0
 16335  004980  E00A               	bz	l12072
 16336                           
 16337                           ;main.c: 2672: *p = value;
 16338  004982  C0C1  FFD9         	movff	printMDF@p,fsr2l
 16339  004986  C0C2  FFDA         	movff	printMDF@p+1,fsr2h
 16340  00498A  C0C0  FFDF         	movff	printMDF@value,indf2
 16341  00498E                     l12070:
 16342                           
 16343                           ;main.c: 2673: p++;
 16344  00498E  0100               	movlb	0	; () banked
 16345  004990  4BC1               	infsnz	printMDF@p& (0+255),f,b
 16346  004992  2BC2               	incf	(printMDF@p+1)& (0+255),f,b
 16347                           
 16348                           ;main.c: 2675: }
 16349  004994  D007               	goto	l12076
 16350  004996                     l12072:
 16351                           
 16352                           ;main.c: 2676: else {
 16353                           ;main.c: 2677: *p = '?';
 16354  004996  C0C1  FFD9         	movff	printMDF@p,fsr2l
 16355  00499A  C0C2  FFDA         	movff	printMDF@p+1,fsr2h
 16356  00499E  0E3F               	movlw	63
 16357  0049A0  6EDF               	movwf	indf2,c
 16358  0049A2  D7F5               	goto	l12070
 16359  0049A4                     l12076:
 16360                           
 16361                           ; BSR set to: 0
 16362  0049A4  2BC3               	incf	printMDF@i& (0+255),f,b
 16363                           
 16364                           ; BSR set to: 0
 16365  0049A6  0E1F               	movlw	31
 16366  0049A8  65C3               	cpfsgt	printMDF@i& (0+255),b
 16367  0049AA  D7DD               	goto	l12066
 16368                           
 16369                           ; BSR set to: 0
 16370                           ;main.c: 2679: }
 16371                           ;main.c: 2680: }
 16372                           ;main.c: 2682: putsUSART(wrkbuf);
 16373  0049AC  0E01               	movlw	high _wrkbuf
 16374  0049AE  0100               	movlb	0	; () banked
 16375  0049B0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16376  0049B2  0E54               	movlw	low _wrkbuf
 16377  0049B4  6F61               	movwf	?_putsUSART& (0+255),b
 16378  0049B6  ECEA  F028         	call	_putsUSART	;wreg free
 16379                           
 16380                           ;main.c: 2683: putsUSART((char *) "\r\n");
 16381  0049BA  0E74               	movlw	high (STR_197+50)
 16382  0049BC  0100               	movlb	0	; () banked
 16383  0049BE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16384  0049C0  0E8A               	movlw	low (STR_197+50)
 16385  0049C2  6F61               	movwf	?_putsUSART& (0+255),b
 16386  0049C4  EFEA  F028         	goto	_putsUSART	;wreg free
 16387  0049C8                     __end_of_printMDF:
 16388                           	opt stack 0
 16389                           tblptru	equ	0xFF8
 16390                           tblptrh	equ	0xFF7
 16391                           tblptrl	equ	0xFF6
 16392                           tablat	equ	0xFF5
 16393                           prodh	equ	0xFF4
 16394                           prodl	equ	0xFF3
 16395                           intcon	equ	0xFF2
 16396                           indf0	equ	0xFEF
 16397                           postinc0	equ	0xFEE
 16398                           fsr0h	equ	0xFEA
 16399                           fsr0l	equ	0xFE9
 16400                           wreg	equ	0xFE8
 16401                           indf1	equ	0xFE7
 16402                           postinc1	equ	0xFE6
 16403                           postdec1	equ	0xFE5
 16404                           fsr1h	equ	0xFE2
 16405                           fsr1l	equ	0xFE1
 16406                           indf2	equ	0xFDF
 16407                           postinc2	equ	0xFDE
 16408                           postdec2	equ	0xFDD
 16409                           plusw2	equ	0xFDB
 16410                           fsr2h	equ	0xFDA
 16411                           fsr2l	equ	0xFD9
 16412                           status	equ	0xFD8
 16413                           
 16414 ;; *************** function _printGUID *****************
 16415 ;; Defined at:
 16416 ;;		line 2619 in file "main.c"
 16417 ;; Parameters:    Size  Location     Type
 16418 ;;  nodeid          1    wreg     unsigned char 
 16419 ;; Auto vars:     Size  Location     Type
 16420 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16421 ;;  buf             3   96[BANK0 ] unsigned char [3]
 16422 ;;  i               1  100[BANK0 ] unsigned char 
 16423 ;;  value           1   99[BANK0 ] unsigned char 
 16424 ;; Return value:  Size  Location     Type
 16425 ;;		None               void
 16426 ;; Registers used:
 16427 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16428 ;; Tracked objects:
 16429 ;;		On entry : D/2
 16430 ;;		On exit  : 0/0
 16431 ;;		Unchanged: 0/0
 16432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16433 ;;      Params:         0       0       0       0       0       0       0
 16434 ;;      Locals:         0       6       0       0       0       0       0
 16435 ;;      Temps:          0       0       0       0       0       0       0
 16436 ;;      Totals:         0       6       0       0       0       0       0
 16437 ;;Total ram usage:        6 bytes
 16438 ;; Hardware stack levels used:    1
 16439 ;; Hardware stack levels required when called:    8
 16440 ;; This function calls:
 16441 ;;		_putsUSART
 16442 ;;		_memset
 16443 ;;		_strlen
 16444 ;;		_itoa
 16445 ;;		_readRegister
 16446 ;;		_strcat
 16447 ;; This function is called by:
 16448 ;;		_doModeVerbose
 16449 ;;		_findNodes
 16450 ;; This function uses a non-reentrant model
 16451 ;;
 16452                           
 16453                           	psect	text30
 16454  003BFA                     __ptext30:
 16455                           	opt stack 0
 16456  003BFA                     _printGUID:
 16457                           	opt stack 21
 16458                           
 16459                           ;incstack = 0
 16460                           ;incstack = 0
 16461                           ;printGUID@nodeid stored from wreg
 16462  003BFA  CFE8 F0BF          	movff	wreg,printGUID@nodeid
 16463                           
 16464                           ;main.c: 2620: uint8_t i;
 16465                           ;main.c: 2621: uint8_t value;
 16466                           ;main.c: 2622: char buf[3];
 16467                           ;main.c: 2624: memset(wrkbuf, 0, sizeof (wrkbuf));
 16468  003BFE  0E01               	movlw	high _wrkbuf
 16469  003C00  0100               	movlb	0	; () banked
 16470  003C02  6F61               	movwf	(?_memset+1)& (0+255),b
 16471  003C04  0E54               	movlw	low _wrkbuf
 16472  003C06  6F60               	movwf	?_memset& (0+255),b
 16473  003C08  6B63               	clrf	(?_memset+3)& (0+255),b
 16474  003C0A  6B62               	clrf	(?_memset+2)& (0+255),b
 16475  003C0C  6B65               	clrf	(?_memset+5)& (0+255),b
 16476  003C0E  0E50               	movlw	80
 16477  003C10  6F64               	movwf	(?_memset+4)& (0+255),b
 16478  003C12  EC49  F02B         	call	_memset	;wreg free
 16479                           
 16480                           ; BSR set to: 0
 16481                           ;main.c: 2625: putsUSART((char *) "GUID = ");
 16482  003C16  0E7E               	movlw	high STR_243
 16483  003C18  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16484  003C1A  0EE5               	movlw	low STR_243
 16485  003C1C  6F61               	movwf	?_putsUSART& (0+255),b
 16486  003C1E  ECEA  F028         	call	_putsUSART	;wreg free
 16487                           
 16488                           ;main.c: 2627: for (i = 0; i < 16; i++) {
 16489  003C22  0100               	movlb	0	; () banked
 16490  003C24  6BC4               	clrf	printGUID@i& (0+255),b
 16491  003C26                     l12032:
 16492                           
 16493                           ; BSR set to: 0
 16494                           ;main.c: 2628: if (readRegister(nodeid,
 16495                           ;main.c: 2629: 0xD0 + i,
 16496                           ;main.c: 2630: rwtimeout,
 16497                           ;main.c: 2631: &value)) {
 16498  003C26  51C4               	movf	printGUID@i& (0+255),w,b
 16499  003C28  0FD0               	addlw	208
 16500  003C2A  6FB6               	movwf	?_readRegister& (0+255),b
 16501  003C2C  0100               	movlb	0	; () banked
 16502  003C2E  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16503  003C32  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16504  003C34  0EC3               	movlw	low printGUID@value
 16505  003C36  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16506  003C38  51BF               	movf	printGUID@nodeid& (0+255),w,b
 16507  003C3A  EC29  F021         	call	_readRegister
 16508  003C3E  0900               	iorlw	0
 16509  003C40  E029               	bz	l12042
 16510                           
 16511                           ;main.c: 2632: itoa(buf, value, 16);
 16512  003C42  0100               	movlb	0	; () banked
 16513  003C44  0E00               	movlw	high printGUID@buf
 16514  003C46  6F71               	movwf	(?_itoa+1)& (0+255),b
 16515  003C48  0EC0               	movlw	low printGUID@buf
 16516  003C4A  6F70               	movwf	?_itoa& (0+255),b
 16517  003C4C  C0C3  F072         	movff	printGUID@value,?_itoa+2
 16518  003C50  6B73               	clrf	(?_itoa+3)& (0+255),b
 16519  003C52  6B75               	clrf	(?_itoa+5)& (0+255),b
 16520  003C54  0E10               	movlw	16
 16521  003C56  6F74               	movwf	(?_itoa+4)& (0+255),b
 16522  003C58  ECCA  F02A         	call	_itoa	;wreg free
 16523                           
 16524                           ; BSR set to: 0
 16525                           ;main.c: 2633: if (1 == strlen(buf)) {
 16526  003C5C  0E00               	movlw	high printGUID@buf
 16527  003C5E  6F61               	movwf	(?_strlen+1)& (0+255),b
 16528  003C60  0EC0               	movlw	low printGUID@buf
 16529  003C62  6F60               	movwf	?_strlen& (0+255),b
 16530  003C64  EC11  F02A         	call	_strlen	;wreg free
 16531  003C68  0560               	decf	?_strlen& (0+255),w,b
 16532  003C6A  1161               	iorwf	(?_strlen+1)& (0+255),w,b
 16533  003C6C  E10F               	bnz	l12040
 16534                           
 16535                           ; BSR set to: 0
 16536                           ;main.c: 2634: strcat(wrkbuf, "0");
 16537  003C6E  0E01               	movlw	high _wrkbuf
 16538  003C70  0100               	movlb	0	; () banked
 16539  003C72  6F61               	movwf	(?_strcat+1)& (0+255),b
 16540  003C74  0E54               	movlw	low _wrkbuf
 16541  003C76  6F60               	movwf	?_strcat& (0+255),b
 16542  003C78  0E7F               	movlw	high STR_244
 16543  003C7A  6F63               	movwf	(?_strcat+3)& (0+255),b
 16544  003C7C  0EF8               	movlw	low STR_244
 16545  003C7E  6F62               	movwf	(?_strcat+2)& (0+255),b
 16546  003C80  ECBE  F028         	call	_strcat	;wreg free
 16547                           
 16548                           ;main.c: 2635: strcat(wrkbuf, buf);
 16549  003C84  D832               	call	PL76	;call to abstracted procedure
 16550  003C86  ECBE  F028         	call	_strcat	;wreg free
 16551                           
 16552                           ;main.c: 2636: } else {
 16553  003C8A  D00F               	goto	l12044
 16554  003C8C                     l12040:
 16555                           
 16556                           ; BSR set to: 0
 16557                           ;main.c: 2637: strcat(wrkbuf, buf);
 16558  003C8C  D82E               	call	PL76	;call to abstracted procedure
 16559  003C8E  ECBE  F028         	call	_strcat	;wreg free
 16560  003C92  D00B               	goto	l12044
 16561  003C94                     l12042:
 16562                           
 16563                           ;main.c: 2641: strcat(wrkbuf, "--");
 16564  003C94  0E01               	movlw	high _wrkbuf
 16565  003C96  0100               	movlb	0	; () banked
 16566  003C98  6F61               	movwf	(?_strcat+1)& (0+255),b
 16567  003C9A  0E54               	movlw	low _wrkbuf
 16568  003C9C  6F60               	movwf	?_strcat& (0+255),b
 16569  003C9E  0E7F               	movlw	high STR_245
 16570  003CA0  6F63               	movwf	(?_strcat+3)& (0+255),b
 16571  003CA2  0EE4               	movlw	low STR_245
 16572  003CA4  6F62               	movwf	(?_strcat+2)& (0+255),b
 16573  003CA6  ECBE  F028         	call	_strcat	;wreg free
 16574  003CAA                     l12044:
 16575                           
 16576                           ;main.c: 2642: }
 16577                           ;main.c: 2644: if (i < 15) {
 16578  003CAA  0E0F               	movlw	15
 16579  003CAC  0100               	movlb	0	; () banked
 16580  003CAE  61C4               	cpfslt	printGUID@i& (0+255),b
 16581  003CB0  D00A               	goto	l12048
 16582                           
 16583                           ; BSR set to: 0
 16584                           ;main.c: 2645: strcat(wrkbuf, ":");
 16585  003CB2  0E01               	movlw	high _wrkbuf
 16586  003CB4  6F61               	movwf	(?_strcat+1)& (0+255),b
 16587  003CB6  0E54               	movlw	low _wrkbuf
 16588  003CB8  6F60               	movwf	?_strcat& (0+255),b
 16589  003CBA  0E7F               	movlw	high STR_246
 16590  003CBC  6F63               	movwf	(?_strcat+3)& (0+255),b
 16591  003CBE  0EFA               	movlw	low STR_246
 16592  003CC0  6F62               	movwf	(?_strcat+2)& (0+255),b
 16593  003CC2  ECBE  F028         	call	_strcat	;wreg free
 16594  003CC6                     l12048:
 16595  003CC6  0100               	movlb	0	; () banked
 16596  003CC8  2BC4               	incf	printGUID@i& (0+255),f,b
 16597                           
 16598                           ; BSR set to: 0
 16599  003CCA  0E0F               	movlw	15
 16600  003CCC  65C4               	cpfsgt	printGUID@i& (0+255),b
 16601  003CCE  D7AB               	goto	l12032
 16602                           
 16603                           ; BSR set to: 0
 16604                           ;main.c: 2646: }
 16605                           ;main.c: 2648: }
 16606                           ;main.c: 2650: putsUSART(wrkbuf);
 16607  003CD0  0E01               	movlw	high _wrkbuf
 16608  003CD2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16609  003CD4  0E54               	movlw	low _wrkbuf
 16610  003CD6  6F61               	movwf	?_putsUSART& (0+255),b
 16611  003CD8  ECEA  F028         	call	_putsUSART	;wreg free
 16612                           
 16613                           ;main.c: 2651: putsUSART((char *) "\r\n");
 16614  003CDC  0E74               	movlw	high (STR_197+50)
 16615  003CDE  0100               	movlb	0	; () banked
 16616  003CE0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16617  003CE2  0E8A               	movlw	low (STR_197+50)
 16618  003CE4  6F61               	movwf	?_putsUSART& (0+255),b
 16619  003CE6  EFEA  F028         	goto	_putsUSART	;wreg free
 16620  003CEA                     __end_of_printGUID:
 16621                           	opt stack 0
 16622  003CEA                     PL76:
 16623                           	opt stack 21
 16624  003CEA  0E01               	movlw	high _wrkbuf
 16625  003CEC  0100               	movlb	0	; () banked
 16626  003CEE  6F61               	movwf	(?_strcat+1)& (0+255),b
 16627  003CF0  0E54               	movlw	low _wrkbuf
 16628  003CF2  6F60               	movwf	?_strcat& (0+255),b
 16629  003CF4  0E00               	movlw	high printGUID@buf
 16630  003CF6  6F63               	movwf	(?_strcat+3)& (0+255),b
 16631  003CF8  0EC0               	movlw	low printGUID@buf
 16632  003CFA  6F62               	movwf	(?_strcat+2)& (0+255),b
 16633  003CFC  0012               	return	
 16634  003CFE                     __end_ofPL76:
 16635                           	opt stack 0
 16636                           tblptru	equ	0xFF8
 16637                           tblptrh	equ	0xFF7
 16638                           tblptrl	equ	0xFF6
 16639                           tablat	equ	0xFF5
 16640                           prodh	equ	0xFF4
 16641                           prodl	equ	0xFF3
 16642                           intcon	equ	0xFF2
 16643                           indf0	equ	0xFEF
 16644                           postinc0	equ	0xFEE
 16645                           fsr0h	equ	0xFEA
 16646                           fsr0l	equ	0xFE9
 16647                           wreg	equ	0xFE8
 16648                           indf1	equ	0xFE7
 16649                           postinc1	equ	0xFE6
 16650                           postdec1	equ	0xFE5
 16651                           fsr1h	equ	0xFE2
 16652                           fsr1l	equ	0xFE1
 16653                           indf2	equ	0xFDF
 16654                           postinc2	equ	0xFDE
 16655                           postdec2	equ	0xFDD
 16656                           plusw2	equ	0xFDB
 16657                           fsr2h	equ	0xFDA
 16658                           fsr2l	equ	0xFD9
 16659                           status	equ	0xFD8
 16660                           
 16661 ;; *************** function _printNodeFirmwareVersion *****************
 16662 ;; Defined at:
 16663 ;;		line 2691 in file "main.c"
 16664 ;; Parameters:    Size  Location     Type
 16665 ;;  nodeid          1    wreg     unsigned char 
 16666 ;; Auto vars:     Size  Location     Type
 16667 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16668 ;;  buf             3   96[BANK0 ] unsigned char [3]
 16669 ;;  i               1  100[BANK0 ] unsigned char 
 16670 ;;  value           1   99[BANK0 ] unsigned char 
 16671 ;; Return value:  Size  Location     Type
 16672 ;;		None               void
 16673 ;; Registers used:
 16674 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16675 ;; Tracked objects:
 16676 ;;		On entry : D/2
 16677 ;;		On exit  : 0/0
 16678 ;;		Unchanged: 0/0
 16679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16680 ;;      Params:         0       0       0       0       0       0       0
 16681 ;;      Locals:         0       6       0       0       0       0       0
 16682 ;;      Temps:          0       0       0       0       0       0       0
 16683 ;;      Totals:         0       6       0       0       0       0       0
 16684 ;;Total ram usage:        6 bytes
 16685 ;; Hardware stack levels used:    1
 16686 ;; Hardware stack levels required when called:    8
 16687 ;; This function calls:
 16688 ;;		_putsUSART
 16689 ;;		_memset
 16690 ;;		_itoa
 16691 ;;		_readRegister
 16692 ;;		_strcat
 16693 ;; This function is called by:
 16694 ;;		_doModeVerbose
 16695 ;;		_findNodes
 16696 ;; This function uses a non-reentrant model
 16697 ;;
 16698                           
 16699                           	psect	text31
 16700  004182                     __ptext31:
 16701                           	opt stack 0
 16702  004182                     _printNodeFirmwareVersion:
 16703                           	opt stack 21
 16704                           
 16705                           ;incstack = 0
 16706                           ;incstack = 0
 16707                           ;printNodeFirmwareVersion@nodeid stored from wreg
 16708  004182  CFE8 F0BF          	movff	wreg,printNodeFirmwareVersion@nodeid
 16709                           
 16710                           ;main.c: 2692: uint8_t i;
 16711                           ;main.c: 2693: uint8_t value;
 16712                           ;main.c: 2694: char buf[3];
 16713                           ;main.c: 2696: memset(wrkbuf, 0, sizeof (wrkbuf));
 16714  004186  0E01               	movlw	high _wrkbuf
 16715  004188  0100               	movlb	0	; () banked
 16716  00418A  6F61               	movwf	(?_memset+1)& (0+255),b
 16717  00418C  0E54               	movlw	low _wrkbuf
 16718  00418E  6F60               	movwf	?_memset& (0+255),b
 16719  004190  6B63               	clrf	(?_memset+3)& (0+255),b
 16720  004192  6B62               	clrf	(?_memset+2)& (0+255),b
 16721  004194  6B65               	clrf	(?_memset+5)& (0+255),b
 16722  004196  0E50               	movlw	80
 16723  004198  6F64               	movwf	(?_memset+4)& (0+255),b
 16724  00419A  EC49  F02B         	call	_memset	;wreg free
 16725                           
 16726                           ; BSR set to: 0
 16727                           ;main.c: 2697: putsUSART((char *) "Firmware version = ");
 16728  00419E  0E7D               	movlw	high STR_250
 16729  0041A0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16730  0041A2  0EBE               	movlw	low STR_250
 16731  0041A4  6F61               	movwf	?_putsUSART& (0+255),b
 16732  0041A6  ECEA  F028         	call	_putsUSART	;wreg free
 16733                           
 16734                           ;main.c: 2699: for (i = 0; i < 3; i++) {
 16735  0041AA  0100               	movlb	0	; () banked
 16736  0041AC  6BC4               	clrf	printNodeFirmwareVersion@i& (0+255),b
 16737  0041AE                     l12004:
 16738                           
 16739                           ; BSR set to: 0
 16740                           ;main.c: 2700: if (readRegister(nodeid,
 16741                           ;main.c: 2701: 0x94 + i,
 16742                           ;main.c: 2702: rwtimeout,
 16743                           ;main.c: 2703: &value)) {
 16744  0041AE  51C4               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 16745  0041B0  0F94               	addlw	148
 16746  0041B2  6FB6               	movwf	?_readRegister& (0+255),b
 16747  0041B4  0100               	movlb	0	; () banked
 16748  0041B6  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16749  0041BA  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16750  0041BC  0EC3               	movlw	low printNodeFirmwareVersion@value
 16751  0041BE  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16752  0041C0  51BF               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 16753  0041C2  EC29  F021         	call	_readRegister
 16754  0041C6  0900               	iorlw	0
 16755  0041C8  E019               	bz	l12010
 16756                           
 16757                           ;main.c: 2704: itoa(buf, value, 16);
 16758  0041CA  0100               	movlb	0	; () banked
 16759  0041CC  0E00               	movlw	high printNodeFirmwareVersion@buf
 16760  0041CE  6F71               	movwf	(?_itoa+1)& (0+255),b
 16761  0041D0  0EC0               	movlw	low printNodeFirmwareVersion@buf
 16762  0041D2  6F70               	movwf	?_itoa& (0+255),b
 16763  0041D4  C0C3  F072         	movff	printNodeFirmwareVersion@value,?_itoa+2
 16764  0041D8  6B73               	clrf	(?_itoa+3)& (0+255),b
 16765  0041DA  6B75               	clrf	(?_itoa+5)& (0+255),b
 16766  0041DC  0E10               	movlw	16
 16767  0041DE  6F74               	movwf	(?_itoa+4)& (0+255),b
 16768  0041E0  ECCA  F02A         	call	_itoa	;wreg free
 16769                           
 16770                           ; BSR set to: 0
 16771                           ;main.c: 2705: strcat(wrkbuf, buf);
 16772  0041E4  0E01               	movlw	high _wrkbuf
 16773  0041E6  0100               	movlb	0	; () banked
 16774  0041E8  6F61               	movwf	(?_strcat+1)& (0+255),b
 16775  0041EA  0E54               	movlw	low _wrkbuf
 16776  0041EC  6F60               	movwf	?_strcat& (0+255),b
 16777  0041EE  0E00               	movlw	high printNodeFirmwareVersion@buf
 16778  0041F0  6F63               	movwf	(?_strcat+3)& (0+255),b
 16779  0041F2  0EC0               	movlw	low printNodeFirmwareVersion@buf
 16780  0041F4  6F62               	movwf	(?_strcat+2)& (0+255),b
 16781  0041F6  ECBE  F028         	call	_strcat	;wreg free
 16782                           
 16783                           ;main.c: 2706: }
 16784  0041FA  D00B               	goto	l12012
 16785  0041FC                     l12010:
 16786                           
 16787                           ;main.c: 2707: else {
 16788                           ;main.c: 2708: strcat(wrkbuf, "?");
 16789  0041FC  0E01               	movlw	high _wrkbuf
 16790  0041FE  0100               	movlb	0	; () banked
 16791  004200  6F61               	movwf	(?_strcat+1)& (0+255),b
 16792  004202  0E54               	movlw	low _wrkbuf
 16793  004204  6F60               	movwf	?_strcat& (0+255),b
 16794  004206  0E7F               	movlw	high STR_251
 16795  004208  6F63               	movwf	(?_strcat+3)& (0+255),b
 16796  00420A  0EFC               	movlw	low STR_251
 16797  00420C  6F62               	movwf	(?_strcat+2)& (0+255),b
 16798  00420E  ECBE  F028         	call	_strcat	;wreg free
 16799  004212                     l12012:
 16800                           
 16801                           ;main.c: 2709: }
 16802                           ;main.c: 2711: if (i < 2) {
 16803  004212  0E02               	movlw	2
 16804  004214  0100               	movlb	0	; () banked
 16805  004216  61C4               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 16806  004218  D00A               	goto	l12016
 16807                           
 16808                           ; BSR set to: 0
 16809                           ;main.c: 2712: strcat(wrkbuf, ".");
 16810  00421A  0E01               	movlw	high _wrkbuf
 16811  00421C  6F61               	movwf	(?_strcat+1)& (0+255),b
 16812  00421E  0E54               	movlw	low _wrkbuf
 16813  004220  6F60               	movwf	?_strcat& (0+255),b
 16814  004222  0E7F               	movlw	high STR_252
 16815  004224  6F63               	movwf	(?_strcat+3)& (0+255),b
 16816  004226  0EF6               	movlw	low STR_252
 16817  004228  6F62               	movwf	(?_strcat+2)& (0+255),b
 16818  00422A  ECBE  F028         	call	_strcat	;wreg free
 16819  00422E                     l12016:
 16820  00422E  0100               	movlb	0	; () banked
 16821  004230  2BC4               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 16822                           
 16823                           ; BSR set to: 0
 16824  004232  0E02               	movlw	2
 16825  004234  65C4               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 16826  004236  D7BB               	goto	l12004
 16827                           
 16828                           ; BSR set to: 0
 16829                           ;main.c: 2713: }
 16830                           ;main.c: 2715: }
 16831                           ;main.c: 2717: putsUSART(wrkbuf);
 16832  004238  0E01               	movlw	high _wrkbuf
 16833  00423A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16834  00423C  0E54               	movlw	low _wrkbuf
 16835  00423E  6F61               	movwf	?_putsUSART& (0+255),b
 16836  004240  ECEA  F028         	call	_putsUSART	;wreg free
 16837                           
 16838                           ;main.c: 2718: putsUSART((char *) "\r\n");
 16839  004244  0E74               	movlw	high (STR_197+50)
 16840  004246  0100               	movlb	0	; () banked
 16841  004248  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16842  00424A  0E8A               	movlw	low (STR_197+50)
 16843  00424C  6F61               	movwf	?_putsUSART& (0+255),b
 16844  00424E  EFEA  F028         	goto	_putsUSART	;wreg free
 16845  004252                     __end_of_printNodeFirmwareVersion:
 16846                           	opt stack 0
 16847                           tblptru	equ	0xFF8
 16848                           tblptrh	equ	0xFF7
 16849                           tblptrl	equ	0xFF6
 16850                           tablat	equ	0xFF5
 16851                           prodh	equ	0xFF4
 16852                           prodl	equ	0xFF3
 16853                           intcon	equ	0xFF2
 16854                           indf0	equ	0xFEF
 16855                           postinc0	equ	0xFEE
 16856                           fsr0h	equ	0xFEA
 16857                           fsr0l	equ	0xFE9
 16858                           wreg	equ	0xFE8
 16859                           indf1	equ	0xFE7
 16860                           postinc1	equ	0xFE6
 16861                           postdec1	equ	0xFE5
 16862                           fsr1h	equ	0xFE2
 16863                           fsr1l	equ	0xFE1
 16864                           indf2	equ	0xFDF
 16865                           postinc2	equ	0xFDE
 16866                           postdec2	equ	0xFDD
 16867                           plusw2	equ	0xFDB
 16868                           fsr2h	equ	0xFDA
 16869                           fsr2l	equ	0xFD9
 16870                           status	equ	0xFD8
 16871                           
 16872 ;; *************** function _strcat *****************
 16873 ;; Defined at:
 16874 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 16875 ;; Parameters:    Size  Location     Type
 16876 ;;  to              2    0[BANK0 ] PTR unsigned char 
 16877 ;;		 -> wrkbuf(80), 
 16878 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 16879 ;;		 -> STR_252(2), STR_251(2), printNodeFirmwareVersion@buf(3), STR_246(2), 
 16880 ;;		 -> STR_245(3), STR_244(2), printGUID@buf(3), 
 16881 ;; Auto vars:     Size  Location     Type
 16882 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 16883 ;;		 -> wrkbuf(80), 
 16884 ;; Return value:  Size  Location     Type
 16885 ;;                  2    0[BANK0 ] PTR unsigned char 
 16886 ;; Registers used:
 16887 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16888 ;; Tracked objects:
 16889 ;;		On entry : F/0
 16890 ;;		On exit  : 0/0
 16891 ;;		Unchanged: 0/0
 16892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16893 ;;      Params:         0       4       0       0       0       0       0
 16894 ;;      Locals:         0       2       0       0       0       0       0
 16895 ;;      Temps:          0       0       0       0       0       0       0
 16896 ;;      Totals:         0       6       0       0       0       0       0
 16897 ;;Total ram usage:        6 bytes
 16898 ;; Hardware stack levels used:    1
 16899 ;; Hardware stack levels required when called:    3
 16900 ;; This function calls:
 16901 ;;		Nothing
 16902 ;; This function is called by:
 16903 ;;		_printGUID
 16904 ;;		_printNodeFirmwareVersion
 16905 ;; This function uses a non-reentrant model
 16906 ;;
 16907                           
 16908                           	psect	text32
 16909  00517C                     __ptext32:
 16910                           	opt stack 0
 16911  00517C                     _strcat:
 16912                           	opt stack 25
 16913                           
 16914                           ; BSR set to: 0
 16915                           
 16916                           ;incstack = 0
 16917                           ;incstack = 0
 16918  00517C  C060  F064         	movff	strcat@to,strcat@cp
 16919  005180  C061  F065         	movff	strcat@to+1,strcat@cp+1
 16920  005184  D002               	goto	l12702
 16921  005186                     l12700:
 16922                           
 16923                           ; BSR set to: 0
 16924  005186  4B64               	infsnz	strcat@cp& (0+255),f,b
 16925  005188  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 16926  00518A                     l12702:
 16927                           
 16928                           ; BSR set to: 0
 16929  00518A  C064  FFD9         	movff	strcat@cp,fsr2l
 16930  00518E  C065  FFDA         	movff	strcat@cp+1,fsr2h
 16931  005192  50DF               	movf	indf2,w,c
 16932  005194  E006               	bz	l12706
 16933  005196  D7F7               	goto	l12700
 16934  005198                     l12704:
 16935  005198  0100               	movlb	0	; () banked
 16936  00519A  4B64               	infsnz	strcat@cp& (0+255),f,b
 16937  00519C  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 16938  00519E  4B62               	infsnz	strcat@from& (0+255),f,b
 16939  0051A0  2B63               	incf	(strcat@from+1)& (0+255),f,b
 16940  0051A2                     l12706:
 16941                           
 16942                           ; BSR set to: 0
 16943  0051A2  C062  FFF6         	movff	strcat@from,tblptrl
 16944  0051A6  C063  FFF7         	movff	strcat@from+1,tblptrh
 16945  0051AA  6AF8               	clrf	tblptru,c
 16946  0051AC  C064  FFD9         	movff	strcat@cp,fsr2l
 16947  0051B0  C065  FFDA         	movff	strcat@cp+1,fsr2h
 16948  0051B4  0E05               	movlw	(high __ramtop+-1)
 16949  0051B6  64F7               	cpfsgt	tblptrh,c
 16950  0051B8  D003               	bra	u16457
 16951  0051BA  0008               	tblrd		*
 16952  0051BC  50F5               	movf	tablat,w,c
 16953  0051BE  D005               	bra	u16450
 16954  0051C0                     u16457:
 16955  0051C0  CFF6 FFE9          	movff	tblptrl,fsr0l
 16956  0051C4  CFF7 FFEA          	movff	tblptrh,fsr0h
 16957  0051C8  50EF               	movf	indf0,w,c
 16958  0051CA                     u16450:
 16959  0051CA  6EDF               	movwf	indf2,c
 16960  0051CC  50DF               	movf	indf2,w,c
 16961  0051CE  B4D8               	btfsc	status,2,c
 16962  0051D0  0012               	return	
 16963  0051D2  D7E2               	goto	l12704
 16964  0051D4                     __end_of_strcat:
 16965                           	opt stack 0
 16966                           tblptru	equ	0xFF8
 16967                           tblptrh	equ	0xFF7
 16968                           tblptrl	equ	0xFF6
 16969                           tablat	equ	0xFF5
 16970                           prodh	equ	0xFF4
 16971                           prodl	equ	0xFF3
 16972                           intcon	equ	0xFF2
 16973                           indf0	equ	0xFEF
 16974                           postinc0	equ	0xFEE
 16975                           fsr0h	equ	0xFEA
 16976                           fsr0l	equ	0xFE9
 16977                           wreg	equ	0xFE8
 16978                           indf1	equ	0xFE7
 16979                           postinc1	equ	0xFE6
 16980                           postdec1	equ	0xFE5
 16981                           fsr1h	equ	0xFE2
 16982                           fsr1l	equ	0xFE1
 16983                           indf2	equ	0xFDF
 16984                           postinc2	equ	0xFDE
 16985                           postdec2	equ	0xFDD
 16986                           plusw2	equ	0xFDB
 16987                           fsr2h	equ	0xFDA
 16988                           fsr2l	equ	0xFD9
 16989                           status	equ	0xFD8
 16990                           
 16991 ;; *************** function _readRegister *****************
 16992 ;; Defined at:
 16993 ;;		line 2194 in file "main.c"
 16994 ;; Parameters:    Size  Location     Type
 16995 ;;  nodeid          1    wreg     unsigned char 
 16996 ;;  reg             1   86[BANK0 ] unsigned char 
 16997 ;;  timeout         2   87[BANK0 ] unsigned short 
 16998 ;;  value           1   89[BANK0 ] PTR unsigned char 
 16999 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 17000 ;; Auto vars:     Size  Location     Type
 17001 ;;  nodeid          1   94[BANK0 ] unsigned char 
 17002 ;; Return value:  Size  Location     Type
 17003 ;;                  1    wreg      enum E15660
 17004 ;; Registers used:
 17005 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17006 ;; Tracked objects:
 17007 ;;		On entry : F/0
 17008 ;;		On exit  : E/0
 17009 ;;		Unchanged: 0/0
 17010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17011 ;;      Params:         0       4       0       0       0       0       0
 17012 ;;      Locals:         0       1       0       0       0       0       0
 17013 ;;      Temps:          0       4       0       0       0       0       0
 17014 ;;      Totals:         0       9       0       0       0       0       0
 17015 ;;Total ram usage:        9 bytes
 17016 ;; Hardware stack levels used:    1
 17017 ;; Hardware stack levels required when called:    7
 17018 ;; This function calls:
 17019 ;;		_sendVSCPFrame
 17020 ;;		_getVSCPFrame
 17021 ;; This function is called by:
 17022 ;;		_findNodes
 17023 ;;		_printGUID
 17024 ;;		_printMDF
 17025 ;;		_printNodeFirmwareVersion
 17026 ;; This function uses a non-reentrant model
 17027 ;;
 17028                           
 17029                           	psect	text33
 17030  004252                     __ptext33:
 17031                           	opt stack 0
 17032  004252                     _readRegister:
 17033                           	opt stack 21
 17034                           
 17035                           ;incstack = 0
 17036                           ;incstack = 0
 17037                           ;readRegister@nodeid stored from wreg
 17038  004252  CFE8 F0BE          	movff	wreg,readRegister@nodeid
 17039                           
 17040                           ; BSR set to: 0
 17041                           ;main.c: 2195: vscpData[ 0 ] = nodeid;
 17042  004256  C0BE  F1A4         	movff	readRegister@nodeid,_vscpData
 17043                           
 17044                           ; BSR set to: 0
 17045                           ;main.c: 2196: vscpData[ 1 ] = reg;
 17046  00425A  C0B6  F1A5         	movff	readRegister@reg,_vscpData+1
 17047                           
 17048                           ; BSR set to: 0
 17049                           ;main.c: 2198: if (sendVSCPFrame(0,
 17050                           ;main.c: 2199: 9,
 17051                           ;main.c: 2200: 0,
 17052                           ;main.c: 2201: 0,
 17053                           ;main.c: 2202: 2,
 17054                           ;main.c: 2203: vscpData)) {
 17055  00425E  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 17056  004260  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 17057  004262  0E09               	movlw	9
 17058  004264  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 17059  004266  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 17060  004268  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 17061  00426A  0E02               	movlw	2
 17062  00426C  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 17063  00426E  0E01               	movlw	high _vscpData
 17064  004270  0100               	movlb	0	; () banked
 17065  004272  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 17066  004274  0EA4               	movlw	low _vscpData
 17067  004276  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 17068  004278  ECB1  F022         	call	_sendVSCPFrame	;wreg free
 17069  00427C  0900               	iorlw	0
 17070  00427E  E04E               	bz	l12694
 17071                           
 17072                           ; BSR set to: 0
 17073                           ;main.c: 2205: timekeeper = 0;
 17074  004280  6BE5               	clrf	_timekeeper& (0+255),b	;volatile
 17075  004282  6BE6               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 17076  004284  6BE7               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 17077  004286  6BE8               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 17078                           
 17079                           ;main.c: 2206: while (timekeeper < timeout) {
 17080  004288  D039               	goto	l12692
 17081  00428A                     l1061:
 17082                           
 17083                           ; BSR set to: 0
 17084  00428A  0004               	clrwdt		;# 
 17085                           
 17086                           ;main.c: 2210: if (getVSCPFrame(&vscpClass,
 17087                           ;main.c: 2211: &vscpType,
 17088                           ;main.c: 2212: &vscpNodeId,
 17089                           ;main.c: 2213: &vscpPriority,
 17090                           ;main.c: 2214: &vscpSize,
 17091                           ;main.c: 2215: vscpData)) {
 17092  00428C  0E01               	movlw	high _vscpClass
 17093  00428E  0100               	movlb	0	; () banked
 17094  004290  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 17095  004292  0EAC               	movlw	low _vscpClass
 17096  004294  6F72               	movwf	?_getVSCPFrame& (0+255),b
 17097  004296  0E01               	movlw	high _vscpType
 17098  004298  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 17099  00429A  0EB1               	movlw	low _vscpType
 17100  00429C  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 17101  00429E  0E01               	movlw	high _vscpNodeId
 17102  0042A0  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 17103  0042A2  0EAE               	movlw	low _vscpNodeId
 17104  0042A4  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 17105  0042A6  0E01               	movlw	high _vscpPriority
 17106  0042A8  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 17107  0042AA  0EAF               	movlw	low _vscpPriority
 17108  0042AC  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 17109  0042AE  0E01               	movlw	high _vscpSize
 17110  0042B0  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 17111  0042B2  0EB0               	movlw	low _vscpSize
 17112  0042B4  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 17113  0042B6  0E01               	movlw	high _vscpData
 17114  0042B8  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 17115  0042BA  0EA4               	movlw	low _vscpData
 17116  0042BC  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 17117  0042BE  ECB9  F025         	call	_getVSCPFrame	;wreg free
 17118  0042C2  0900               	iorlw	0
 17119  0042C4  E01B               	bz	l12692
 17120                           
 17121                           ; BSR set to: 0
 17122                           ;main.c: 2216: if ((nodeid == vscpNodeId) &&
 17123                           ;main.c: 2217: (0 == vscpClass) &&
 17124                           ;main.c: 2218: (10 == vscpType) &&
 17125                           ;main.c: 2219: (2 == vscpSize) &&
 17126                           ;main.c: 2220: (reg == vscpData[ 0 ])) {
 17127  0042C6  0101               	movlb	1	; () banked
 17128  0042C8  51AE               	movf	_vscpNodeId& (0+255),w,b
 17129  0042CA  0100               	movlb	0	; () banked
 17130  0042CC  63BE               	cpfseq	readRegister@nodeid& (0+255),b
 17131  0042CE  D016               	goto	l12692
 17132                           
 17133                           ; BSR set to: 0
 17134  0042D0  0101               	movlb	1	; () banked
 17135  0042D2  51AD               	movf	(_vscpClass+1)& (0+255),w,b
 17136  0042D4  11AC               	iorwf	_vscpClass& (0+255),w,b
 17137  0042D6  E112               	bnz	l12692
 17138                           
 17139                           ; BSR set to: 1
 17140  0042D8  51B1               	movf	_vscpType& (0+255),w,b
 17141  0042DA  0A0A               	xorlw	10
 17142  0042DC  E10F               	bnz	l12692
 17143                           
 17144                           ; BSR set to: 1
 17145  0042DE  51B0               	movf	_vscpSize& (0+255),w,b
 17146  0042E0  0A02               	xorlw	2
 17147  0042E2  E10C               	bnz	l12692
 17148                           
 17149                           ; BSR set to: 1
 17150  0042E4  51A4               	movf	_vscpData& (0+255),w,b
 17151  0042E6  0100               	movlb	0	; () banked
 17152  0042E8  63B6               	cpfseq	readRegister@reg& (0+255),b
 17153  0042EA  D008               	goto	l12692
 17154                           
 17155                           ; BSR set to: 0
 17156                           ;main.c: 2221: *value = vscpData[ 1 ];
 17157  0042EC  51B9               	movf	readRegister@value& (0+255),w,b
 17158  0042EE  6ED9               	movwf	fsr2l,c
 17159  0042F0  6ADA               	clrf	fsr2h,c
 17160  0042F2  0101               	movlb	1	; () banked
 17161  0042F4  C1A5  FFDF         	movff	_vscpData+1,indf2
 17162                           
 17163                           ; BSR set to: 1
 17164                           ;main.c: 2222: return 1;
 17165  0042F8  0E01               	movlw	1
 17166  0042FA  D011               	goto	l1064
 17167  0042FC                     l12692:
 17168  0042FC  0100               	movlb	0	; () banked
 17169  0042FE  51B7               	movf	readRegister@timeout& (0+255),w,b
 17170  004300  6FBA               	movwf	??_readRegister& (0+255),b
 17171  004302  51B8               	movf	(readRegister@timeout+1)& (0+255),w,b
 17172  004304  6FBB               	movwf	(??_readRegister+1)& (0+255),b
 17173  004306  6BBC               	clrf	(??_readRegister+2)& (0+255),b
 17174  004308  6BBD               	clrf	(??_readRegister+3)& (0+255),b
 17175  00430A  51BA               	movf	??_readRegister& (0+255),w,b
 17176  00430C  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
 17177  00430E  51BB               	movf	(??_readRegister+1)& (0+255),w,b
 17178  004310  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 17179  004312  51BC               	movf	(??_readRegister+2)& (0+255),w,b
 17180  004314  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 17181  004316  51BD               	movf	(??_readRegister+3)& (0+255),w,b
 17182  004318  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 17183  00431A  E3B7               	bnc	l1061
 17184  00431C                     l12694:
 17185                           
 17186                           ; BSR set to: 0
 17187                           ;main.c: 2223: }
 17188                           ;main.c: 2224: }
 17189                           ;main.c: 2225: }
 17190                           ;main.c: 2226: }
 17191                           ;main.c: 2228: return 0;
 17192  00431C  0E00               	movlw	0
 17193  00431E                     l1064:
 17194  00431E  0012               	return	
 17195  004320                     __end_of_readRegister:
 17196                           	opt stack 0
 17197                           tblptru	equ	0xFF8
 17198                           tblptrh	equ	0xFF7
 17199                           tblptrl	equ	0xFF6
 17200                           tablat	equ	0xFF5
 17201                           prodh	equ	0xFF4
 17202                           prodl	equ	0xFF3
 17203                           intcon	equ	0xFF2
 17204                           indf0	equ	0xFEF
 17205                           postinc0	equ	0xFEE
 17206                           fsr0h	equ	0xFEA
 17207                           fsr0l	equ	0xFE9
 17208                           wreg	equ	0xFE8
 17209                           indf1	equ	0xFE7
 17210                           postinc1	equ	0xFE6
 17211                           postdec1	equ	0xFE5
 17212                           fsr1h	equ	0xFE2
 17213                           fsr1l	equ	0xFE1
 17214                           indf2	equ	0xFDF
 17215                           postinc2	equ	0xFDE
 17216                           postdec2	equ	0xFDD
 17217                           plusw2	equ	0xFDB
 17218                           fsr2h	equ	0xFDA
 17219                           fsr2l	equ	0xFD9
 17220                           status	equ	0xFD8
 17221                           
 17222 ;; *************** function _sendVSCPFrame *****************
 17223 ;; Defined at:
 17224 ;;		line 2915 in file "main.c"
 17225 ;; Parameters:    Size  Location     Type
 17226 ;;  vscpclass       2   54[BANK0 ] unsigned short 
 17227 ;;  vscptype        1   56[BANK0 ] unsigned char 
 17228 ;;  nodeid          1   57[BANK0 ] unsigned char 
 17229 ;;  priority        1   58[BANK0 ] unsigned char 
 17230 ;;  size            1   59[BANK0 ] unsigned char 
 17231 ;;  pData           2   60[BANK0 ] PTR unsigned char 
 17232 ;;		 -> vscpData(8), 
 17233 ;; Auto vars:     Size  Location     Type
 17234 ;;  id              4   82[BANK0 ] unsigned long 
 17235 ;; Return value:  Size  Location     Type
 17236 ;;                  1    wreg      unsigned char 
 17237 ;; Registers used:
 17238 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17239 ;; Tracked objects:
 17240 ;;		On entry : F/0
 17241 ;;		On exit  : F/0
 17242 ;;		Unchanged: 0/0
 17243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17244 ;;      Params:         0       8       0       0       0       0       0
 17245 ;;      Locals:         0       4       0       0       0       0       0
 17246 ;;      Temps:          0      20       0       0       0       0       0
 17247 ;;      Totals:         0      32       0       0       0       0       0
 17248 ;;Total ram usage:       32 bytes
 17249 ;; Hardware stack levels used:    1
 17250 ;; Hardware stack levels required when called:    6
 17251 ;; This function calls:
 17252 ;;		_sendCANFrame
 17253 ;; This function is called by:
 17254 ;;		_doModeVerbose
 17255 ;;		_readRegister
 17256 ;;		_readRegisterExtended
 17257 ;;		_writeRegisterExtended
 17258 ;; This function uses a non-reentrant model
 17259 ;;
 17260                           
 17261                           	psect	text34
 17262  004562                     __ptext34:
 17263                           	opt stack 0
 17264  004562                     _sendVSCPFrame:
 17265                           	opt stack 21
 17266                           
 17267                           ; BSR set to: 0
 17268                           ;main.c: 2916: uint32_t id = ((uint32_t) priority << 26) |
 17269                           ;main.c: 2917: ((uint32_t) vscpclass << 16) |
 17270                           ;main.c: 2918: ((uint32_t) vscptype << 8) |
 17271                           ;main.c: 2919: nodeid;
 17272                           
 17273                           ;incstack = 0
 17274                           ;incstack = 0
 17275  004562  C098  F09E         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 17276  004566  6B9F               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 17277  004568  6BA0               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 17278  00456A  6BA1               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 17279  00456C  C0A0  F0A1         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 17280  004570  C09F  F0A0         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 17281  004574  C09E  F09F         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 17282  004578  6B9E               	clrf	??_sendVSCPFrame& (0+255),b
 17283  00457A  5196               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 17284  00457C  6FA2               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 17285  00457E  5197               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 17286  004580  6FA3               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 17287  004582  6BA4               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 17288  004584  6BA5               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 17289  004586  C0A3  F0A5         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 17290  00458A  C0A2  F0A4         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 17291  00458E  6BA3               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 17292  004590  6BA2               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 17293  004592  C09A  F0A6         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 17294  004596  6BA7               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 17295  004598  6BA8               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 17296  00459A  6BA9               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 17297  00459C  0E1A               	movlw	26
 17298  00459E                     u14105:
 17299  00459E  90D8               	bcf	status,0,c
 17300  0045A0  37A6               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 17301  0045A2  37A7               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 17302  0045A4  37A8               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 17303  0045A6  37A9               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 17304  0045A8  2EE8               	decfsz	wreg,f,c
 17305  0045AA  D7F9               	goto	u14105
 17306  0045AC  51A2               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 17307  0045AE  11A6               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 17308  0045B0  6FAA               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 17309  0045B2  51A3               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 17310  0045B4  11A7               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 17311  0045B6  6FAB               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 17312  0045B8  51A4               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 17313  0045BA  11A8               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 17314  0045BC  6FAC               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 17315  0045BE  51A5               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 17316  0045C0  11A9               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 17317  0045C2  6FAD               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 17318  0045C4  519E               	movf	??_sendVSCPFrame& (0+255),w,b
 17319  0045C6  11AA               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 17320  0045C8  6FAE               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 17321  0045CA  519F               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 17322  0045CC  11AB               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 17323  0045CE  6FAF               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 17324  0045D0  51A0               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 17325  0045D2  11AC               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 17326  0045D4  6FB0               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 17327  0045D6  51A1               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 17328  0045D8  11AD               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 17329  0045DA  6FB1               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 17330  0045DC  5199               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 17331  0045DE  11AE               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 17332  0045E0  6FB2               	movwf	sendVSCPFrame@id& (0+255),b
 17333  0045E2  51AF               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 17334  0045E4  6FB3               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 17335  0045E6  51B0               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 17336  0045E8  6FB4               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 17337  0045EA  51B1               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 17338  0045EC  6FB5               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 17339                           
 17340                           ; BSR set to: 0
 17341                           ;main.c: 2921: if (!sendCANFrame(id, size, pData)) {
 17342  0045EE  C0B2  F08F         	movff	sendVSCPFrame@id,?_sendCANFrame
 17343  0045F2  C0B3  F090         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 17344  0045F6  C0B4  F091         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 17345  0045FA  C0B5  F092         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 17346  0045FE  C09B  F093         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 17347  004602  C09C  F094         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 17348  004606  C09D  F095         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 17349  00460A  ECAE  F02A         	call	_sendCANFrame	;wreg free
 17350  00460E  0900               	iorlw	0
 17351                           
 17352                           ; BSR set to: 0
 17353                           ;main.c: 2923: return 0;
 17354  004610  0E00               	movlw	0
 17355  004612  A4D8               	btfss	status,2,c
 17356                           
 17357                           ; BSR set to: 0
 17358                           ;main.c: 2924: }
 17359                           ;main.c: 2926: return 1;
 17360  004614  0E01               	movlw	1
 17361                           
 17362                           ; BSR set to: 0
 17363  004616  0012               	return	
 17364  004618                     __end_of_sendVSCPFrame:
 17365                           	opt stack 0
 17366                           tblptru	equ	0xFF8
 17367                           tblptrh	equ	0xFF7
 17368                           tblptrl	equ	0xFF6
 17369                           tablat	equ	0xFF5
 17370                           prodh	equ	0xFF4
 17371                           prodl	equ	0xFF3
 17372                           intcon	equ	0xFF2
 17373                           indf0	equ	0xFEF
 17374                           postinc0	equ	0xFEE
 17375                           fsr0h	equ	0xFEA
 17376                           fsr0l	equ	0xFE9
 17377                           wreg	equ	0xFE8
 17378                           indf1	equ	0xFE7
 17379                           postinc1	equ	0xFE6
 17380                           postdec1	equ	0xFE5
 17381                           fsr1h	equ	0xFE2
 17382                           fsr1l	equ	0xFE1
 17383                           indf2	equ	0xFDF
 17384                           postinc2	equ	0xFDE
 17385                           postdec2	equ	0xFDD
 17386                           plusw2	equ	0xFDB
 17387                           fsr2h	equ	0xFDA
 17388                           fsr2l	equ	0xFD9
 17389                           status	equ	0xFD8
 17390                           
 17391 ;; *************** function _sendCANFrame *****************
 17392 ;; Defined at:
 17393 ;;		line 2961 in file "main.c"
 17394 ;; Parameters:    Size  Location     Type
 17395 ;;  id              4   47[BANK0 ] unsigned long 
 17396 ;;  dlc             1   51[BANK0 ] unsigned char 
 17397 ;;  pdata           2   52[BANK0 ] PTR unsigned char 
 17398 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17399 ;; Auto vars:     Size  Location     Type
 17400 ;;		None
 17401 ;; Return value:  Size  Location     Type
 17402 ;;                  1    wreg      unsigned char 
 17403 ;; Registers used:
 17404 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17405 ;; Tracked objects:
 17406 ;;		On entry : F/0
 17407 ;;		On exit  : F/0
 17408 ;;		Unchanged: 0/0
 17409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17410 ;;      Params:         0       7       0       0       0       0       0
 17411 ;;      Locals:         0       0       0       0       0       0       0
 17412 ;;      Temps:          0       0       0       0       0       0       0
 17413 ;;      Totals:         0       7       0       0       0       0       0
 17414 ;;Total ram usage:        7 bytes
 17415 ;; Hardware stack levels used:    1
 17416 ;; Hardware stack levels required when called:    5
 17417 ;; This function calls:
 17418 ;;		_ECANSendMessage
 17419 ;; This function is called by:
 17420 ;;		_doModeSLCAN
 17421 ;;		_receiveVSCPModeCanalMsg
 17422 ;;		_sendVSCPFrame
 17423 ;; This function uses a non-reentrant model
 17424 ;;
 17425                           
 17426                           	psect	text35
 17427  00555C                     __ptext35:
 17428                           	opt stack 0
 17429  00555C                     _sendCANFrame:
 17430                           	opt stack 24
 17431                           
 17432                           ; BSR set to: 0
 17433                           ;main.c: 2962: if (!ECANSendMessage(id, pdata, dlc, ECAN_TX_XTD_FRAME)) {
 17434                           
 17435                           ; BSR set to: 0
 17436                           ;incstack = 0
 17437                           ;incstack = 0
 17438  00555C  C08F  F06A         	movff	sendCANFrame@id,?_ECANSendMessage
 17439  005560  C090  F06B         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 17440  005564  C091  F06C         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 17441  005568  C092  F06D         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 17442  00556C  C094  F06E         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 17443  005570  C095  F06F         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 17444  005574  C093  F070         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 17445  005578  0E20               	movlw	32
 17446  00557A  6F71               	movwf	(?_ECANSendMessage+7)& (0+255),b
 17447  00557C  EC55  F019         	call	_ECANSendMessage	;wreg free
 17448  005580  0900               	iorlw	0
 17449  005582  E106               	bnz	l12544
 17450                           
 17451                           ; BSR set to: 0
 17452                           ;main.c: 2964: can_transmitOverruns++;
 17453  005584  2A2B               	incf	_can_transmitOverruns,f,c
 17454  005586  0E00               	movlw	0
 17455  005588  222C               	addwfc	_can_transmitOverruns+1,f,c
 17456  00558A  222D               	addwfc	_can_transmitOverruns+2,f,c
 17457  00558C  222E               	addwfc	_can_transmitOverruns+3,f,c
 17458                           
 17459                           ; BSR set to: 0
 17460                           ;main.c: 2965: return 0;
 17461  00558E  D001               	goto	l1260
 17462  005590                     l12544:
 17463                           
 17464                           ; BSR set to: 0
 17465                           ;main.c: 2966: }
 17466                           ;main.c: 2968: return 1;
 17467  005590  0E01               	movlw	1
 17468  005592                     l1260:
 17469                           
 17470                           ; BSR set to: 0
 17471  005592  0012               	return	
 17472  005594                     __end_of_sendCANFrame:
 17473                           	opt stack 0
 17474                           tblptru	equ	0xFF8
 17475                           tblptrh	equ	0xFF7
 17476                           tblptrl	equ	0xFF6
 17477                           tablat	equ	0xFF5
 17478                           prodh	equ	0xFF4
 17479                           prodl	equ	0xFF3
 17480                           intcon	equ	0xFF2
 17481                           indf0	equ	0xFEF
 17482                           postinc0	equ	0xFEE
 17483                           fsr0h	equ	0xFEA
 17484                           fsr0l	equ	0xFE9
 17485                           wreg	equ	0xFE8
 17486                           indf1	equ	0xFE7
 17487                           postinc1	equ	0xFE6
 17488                           postdec1	equ	0xFE5
 17489                           fsr1h	equ	0xFE2
 17490                           fsr1l	equ	0xFE1
 17491                           indf2	equ	0xFDF
 17492                           postinc2	equ	0xFDE
 17493                           postdec2	equ	0xFDD
 17494                           plusw2	equ	0xFDB
 17495                           fsr2h	equ	0xFDA
 17496                           fsr2l	equ	0xFD9
 17497                           status	equ	0xFD8
 17498                           
 17499 ;; *************** function _ECANSendMessage *****************
 17500 ;; Defined at:
 17501 ;;		line 617 in file "ECAN.c"
 17502 ;; Parameters:    Size  Location     Type
 17503 ;;  id              4   10[BANK0 ] unsigned long 
 17504 ;;  data            2   14[BANK0 ] PTR unsigned char 
 17505 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17506 ;;  dataLen         1   16[BANK0 ] unsigned char 
 17507 ;;  msgFlags        1   17[BANK0 ] enum E16306
 17508 ;; Auto vars:     Size  Location     Type
 17509 ;;  pb             18   19[BANK0 ] PTR unsigned char [9]
 17510 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17511 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17512 ;;		 -> B0CON(1), 
 17513 ;;  ptr             2   45[BANK0 ] PTR unsigned char 
 17514 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17515 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17516 ;;		 -> B0CON(1), 
 17517 ;;  tempPtr         2   41[BANK0 ] PTR unsigned char 
 17518 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17519 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17520 ;;		 -> B0CON(1), 
 17521 ;;  i               1   44[BANK0 ] unsigned char 
 17522 ;;  temp            1   43[BANK0 ] unsigned char 
 17523 ;;  tempBSEL0       1   40[BANK0 ] struct .
 17524 ;;  j               1   39[BANK0 ] unsigned char 
 17525 ;;  buffers         1   38[BANK0 ] unsigned char 
 17526 ;;  mode            1   37[BANK0 ] unsigned char 
 17527 ;; Return value:  Size  Location     Type
 17528 ;;                  1    wreg      enum E15660
 17529 ;; Registers used:
 17530 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17531 ;; Tracked objects:
 17532 ;;		On entry : F/0
 17533 ;;		On exit  : F/0
 17534 ;;		Unchanged: 0/0
 17535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17536 ;;      Params:         0       8       0       0       0       0       0
 17537 ;;      Locals:         0      28       0       0       0       0       0
 17538 ;;      Temps:          0       1       0       0       0       0       0
 17539 ;;      Totals:         0      37       0       0       0       0       0
 17540 ;;Total ram usage:       37 bytes
 17541 ;; Hardware stack levels used:    1
 17542 ;; Hardware stack levels required when called:    4
 17543 ;; This function calls:
 17544 ;;		__CANIDToRegs
 17545 ;; This function is called by:
 17546 ;;		_sendCANFrame
 17547 ;; This function uses a non-reentrant model
 17548 ;;
 17549                           
 17550                           	psect	text36
 17551  0032AA                     __ptext36:
 17552                           	opt stack 0
 17553  0032AA                     _ECANSendMessage:
 17554                           	opt stack 24
 17555                           
 17556                           ; BSR set to: 0
 17557                           ;ECAN.c: 619: BYTE mode;
 17558                           ;ECAN.c: 620: BYTE buffers;
 17559                           ;ECAN.c: 628: BYTE i,j;
 17560                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 17561                           ;ECAN.c: 630: BYTE* pb[9];
 17562                           ;ECAN.c: 631: BYTE temp;
 17563                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 17564                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 17565                           
 17566                           ; BSR set to: 0
 17567                           ;incstack = 0
 17568                           ;incstack = 0
 17569  0032AA  0E0F               	movlw	15	;volatile
 17570  0032AC  0100               	movlb	0	; () banked
 17571  0032AE  6F74               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 17572  0032B0  0E40               	movlw	64	;volatile
 17573  0032B2  6F73               	movwf	ECANSendMessage@pb& (0+255),b
 17574                           
 17575                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 17576  0032B4  0E0F               	movlw	15	;volatile
 17577  0032B6  6F76               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 17578  0032B8  0E30               	movlw	48	;volatile
 17579  0032BA  6F75               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 17580                           
 17581                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 17582  0032BC  0E0F               	movlw	15	;volatile
 17583  0032BE  6F78               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 17584  0032C0  0E20               	movlw	32	;volatile
 17585  0032C2  6F77               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 17586                           
 17587                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 17588  0032C4  0E0E               	movlw	14	;volatile
 17589  0032C6  6F7A               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 17590  0032C8  0E20               	movlw	32	;volatile
 17591  0032CA  6F79               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 17592                           
 17593                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 17594  0032CC  0E0E               	movlw	14	;volatile
 17595  0032CE  6F7C               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 17596  0032D0  0E30               	movlw	48	;volatile
 17597  0032D2  6F7B               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 17598                           
 17599                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 17600  0032D4  0E0E               	movlw	14	;volatile
 17601  0032D6  6F7E               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 17602  0032D8  0E40               	movlw	64	;volatile
 17603  0032DA  6F7D               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 17604                           
 17605                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 17606  0032DC  0E0E               	movlw	14	;volatile
 17607  0032DE  6F80               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 17608  0032E0  0E50               	movlw	80	;volatile
 17609  0032E2  6F7F               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 17610                           
 17611                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 17612  0032E4  0E0E               	movlw	14	;volatile
 17613  0032E6  6F82               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 17614  0032E8  0E60               	movlw	96	;volatile
 17615  0032EA  6F81               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 17616                           
 17617                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 17618  0032EC  0E0E               	movlw	14	;volatile
 17619  0032EE  6F84               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 17620  0032F0  0E70               	movlw	112	;volatile
 17621  0032F2  6F83               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 17622                           
 17623                           ; BSR set to: 0
 17624                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 17625  0032F4  5077               	movf	3959,w,c	;volatile
 17626  0032F6  0BC0               	andlw	192
 17627  0032F8  6F85               	movwf	ECANSendMessage@mode& (0+255),b
 17628                           
 17629                           ; BSR set to: 0
 17630                           ;ECAN.c: 660: if ( mode == 0x00 )
 17631  0032FA  6785               	tstfsz	ECANSendMessage@mode& (0+255),b
 17632  0032FC  D002               	goto	l12716
 17633                           
 17634                           ; BSR set to: 0
 17635                           ;ECAN.c: 661: buffers = 2;
 17636  0032FE  0E02               	movlw	2
 17637  003300  D001               	goto	L14
 17638  003302                     l12716:
 17639                           
 17640                           ; BSR set to: 0
 17641                           ;ECAN.c: 662: else
 17642                           ;ECAN.c: 663: buffers = 8;
 17643  003302  0E08               	movlw	8
 17644  003304                     L14:
 17645  003304  6F86               	movwf	ECANSendMessage@buffers& (0+255),b
 17646                           
 17647                           ; BSR set to: 0
 17648                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 17649  003306  010D               	movlb	13	; () banked
 17650  003308  90D8               	bcf	status,0,c
 17651  00330A  31F8               	rrcf	248,w,b	;volatile
 17652  00330C  0100               	movlb	0	; () banked
 17653  00330E  6F88               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 17654                           
 17655                           ; BSR set to: 0
 17656                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 17657  003310  6B8C               	clrf	ECANSendMessage@i& (0+255),b
 17658  003312  D07D               	goto	l12776
 17659  003314                     l12722:
 17660                           
 17661                           ; BSR set to: 0
 17662                           ;ECAN.c: 688: {
 17663                           ;ECAN.c: 693: ptr = pb[i];
 17664  003314  518C               	movf	ECANSendMessage@i& (0+255),w,b
 17665  003316  0D02               	mullw	2
 17666  003318  50F3               	movf	prodl,w,c
 17667  00331A  0F73               	addlw	low ECANSendMessage@pb
 17668  00331C  6ED9               	movwf	fsr2l,c
 17669  00331E  6ADA               	clrf	fsr2h,c
 17670  003320  CFDE F08D          	movff	postinc2,ECANSendMessage@ptr
 17671  003324  CFDD F08E          	movff	postdec2,ECANSendMessage@ptr+1
 17672                           
 17673                           ; BSR set to: 0
 17674                           ;ECAN.c: 694: tempPtr = ptr;
 17675  003328  C08D  F089         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 17676  00332C  C08E  F08A         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 17677                           
 17678                           ; BSR set to: 0
 17679                           ;ECAN.c: 702: if ( i > 2 )
 17680  003330  0E02               	movlw	2
 17681  003332  658C               	cpfsgt	ECANSendMessage@i& (0+255),b
 17682  003334  D004               	goto	l12734
 17683                           
 17684                           ; BSR set to: 0
 17685                           ;ECAN.c: 703: {
 17686                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 17687  003336  90D8               	bcf	status,0,c
 17688  003338  3388               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 17689                           
 17690                           ; BSR set to: 0
 17691                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 17692  00333A  A188               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 17693  00333C  D067               	goto	l12774
 17694  00333E                     l12734:
 17695                           
 17696                           ; BSR set to: 0
 17697                           ;ECAN.c: 714: }
 17698                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 17699  00333E  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17700  003342  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17701  003346  50DF               	movf	indf2,w,c
 17702  003348  6F72               	movwf	??_ECANSendMessage& (0+255),b
 17703  00334A  B772               	btfsc	??_ECANSendMessage& (0+255),3,b
 17704  00334C  D05F               	goto	l12774
 17705                           
 17706                           ; BSR set to: 0
 17707                           ;ECAN.c: 721: {
 17708                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 17709  00334E  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17710  003352  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17711  003356  0EFC               	movlw	252
 17712  003358  16DF               	andwf	indf2,f,c
 17713                           
 17714                           ; BSR set to: 0
 17715                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 17716  00335A  C071  F072         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 17717  00335E  0E03               	movlw	3
 17718  003360  1772               	andwf	??_ECANSendMessage& (0+255),f,b
 17719  003362  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17720  003366  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17721  00336A  5172               	movf	??_ECANSendMessage& (0+255),w,b
 17722  00336C  12DF               	iorwf	indf2,f,c
 17723                           
 17724                           ; BSR set to: 0
 17725                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 17726  00336E  AD71               	btfss	ECANSendMessage@msgFlags& (0+255),6,b
 17727  003370  D004               	goto	l1427
 17728                           
 17729                           ; BSR set to: 0
 17730                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 17731  003372  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 17732  003374  0940               	iorlw	64
 17733  003376  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 17734  003378  D002               	goto	l12744
 17735  00337A                     l1427:
 17736                           
 17737                           ; BSR set to: 0
 17738                           ;ECAN.c: 729: else
 17739                           ;ECAN.c: 730: temp = dataLen;
 17740  00337A  C070  F08B         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 17741  00337E                     l12744:
 17742                           
 17743                           ; BSR set to: 0
 17744                           ;ECAN.c: 732: *(ptr+5) = temp;
 17745  00337E  EE20 F005          	lfsr	2,5
 17746  003382  518D               	movf	ECANSendMessage@ptr& (0+255),w,b
 17747  003384  26D9               	addwf	fsr2l,f,c
 17748  003386  518E               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 17749  003388  22DA               	addwfc	fsr2h,f,c
 17750  00338A  C08B  FFDF         	movff	ECANSendMessage@temp,indf2
 17751                           
 17752                           ; BSR set to: 0
 17753                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 17754  00338E  AB71               	btfss	ECANSendMessage@msgFlags& (0+255),5,b
 17755  003390  D003               	goto	l1429
 17756                           
 17757                           ; BSR set to: 0
 17758                           ;ECAN.c: 736: temp = 1;
 17759  003392  0E01               	movlw	1
 17760  003394  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 17761  003396  D001               	goto	l12750
 17762  003398                     l1429:
 17763                           
 17764                           ; BSR set to: 0
 17765                           ;ECAN.c: 738: else
 17766                           ;ECAN.c: 739: temp = 0;
 17767  003398  6B8B               	clrf	ECANSendMessage@temp& (0+255),b
 17768  00339A                     l12750:
 17769                           
 17770                           ; BSR set to: 0
 17771                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 17772  00339A  298D               	incf	ECANSendMessage@ptr& (0+255),w,b
 17773  00339C  6F60               	movwf	?__CANIDToRegs& (0+255),b
 17774  00339E  0E00               	movlw	0
 17775  0033A0  218E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 17776  0033A2  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 17777  0033A4  C06A  F062         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 17778  0033A8  C06B  F063         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 17779  0033AC  C06C  F064         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 17780  0033B0  C06D  F065         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 17781  0033B4  C08B  F066         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 17782  0033B8  EC6D  F01C         	call	__CANIDToRegs	;wreg free
 17783                           
 17784                           ; BSR set to: 0
 17785                           ;ECAN.c: 745: ptr += 6;
 17786  0033BC  0E06               	movlw	6
 17787  0033BE  278D               	addwf	ECANSendMessage@ptr& (0+255),f,b
 17788  0033C0  0E00               	movlw	0
 17789  0033C2  238E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 17790                           
 17791                           ; BSR set to: 0
 17792                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 17793  0033C4  6B87               	clrf	ECANSendMessage@j& (0+255),b
 17794  0033C6  D00F               	goto	l12764
 17795  0033C8                     l12756:
 17796                           
 17797                           ; BSR set to: 0
 17798                           ;ECAN.c: 748: *ptr++ = *data++;
 17799  0033C8  C06E  FFD9         	movff	ECANSendMessage@data,fsr2l
 17800  0033CC  C06F  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 17801  0033D0  C08D  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 17802  0033D4  C08E  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 17803  0033D8  CFDF FFE7          	movff	indf2,indf1
 17804                           
 17805                           ; BSR set to: 0
 17806  0033DC  4B6E               	infsnz	ECANSendMessage@data& (0+255),f,b
 17807  0033DE  2B6F               	incf	(ECANSendMessage@data+1)& (0+255),f,b
 17808                           
 17809                           ; BSR set to: 0
 17810  0033E0  4B8D               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 17811  0033E2  2B8E               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 17812                           
 17813                           ; BSR set to: 0
 17814  0033E4  2B87               	incf	ECANSendMessage@j& (0+255),f,b
 17815  0033E6                     l12764:
 17816                           
 17817                           ; BSR set to: 0
 17818  0033E6  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 17819  0033E8  5D87               	subwf	ECANSendMessage@j& (0+255),w,b
 17820  0033EA  E3EE               	bnc	l12756
 17821                           
 17822                           ; BSR set to: 0
 17823                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 17824  0033EC  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 17825  0033F0  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 17826  0033F4  50DF               	movf	indf2,w,c
 17827  0033F6  6F72               	movwf	??_ECANSendMessage& (0+255),b
 17828  0033F8  B572               	btfsc	??_ECANSendMessage& (0+255),2,b
 17829  0033FA  D006               	goto	l12770
 17830                           
 17831                           ; BSR set to: 0
 17832                           ;ECAN.c: 753: *tempPtr |= 0x08;
 17833  0033FC  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 17834  003400  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 17835  003404  0E00               	movlw	0
 17836  003406  86DB               	bsf	plusw2,3,c
 17837  003408                     l12770:
 17838                           
 17839                           ; BSR set to: 0
 17840                           ;ECAN.c: 755: return TRUE;
 17841  003408  0E01               	movlw	1
 17842  00340A  D005               	goto	l1435
 17843  00340C                     l12774:
 17844                           
 17845                           ; BSR set to: 0
 17846  00340C  2B8C               	incf	ECANSendMessage@i& (0+255),f,b
 17847  00340E                     l12776:
 17848                           
 17849                           ; BSR set to: 0
 17850  00340E  5186               	movf	ECANSendMessage@buffers& (0+255),w,b
 17851  003410  5D8C               	subwf	ECANSendMessage@i& (0+255),w,b
 17852  003412  E380               	bnc	l12722
 17853                           
 17854                           ; BSR set to: 0
 17855                           ;ECAN.c: 756: }
 17856                           ;ECAN.c: 757: }
 17857                           ;ECAN.c: 760: return FALSE;
 17858  003414  0E00               	movlw	0
 17859  003416                     l1435:
 17860                           
 17861                           ; BSR set to: 0
 17862  003416  0012               	return	
 17863  003418                     __end_of_ECANSendMessage:
 17864                           	opt stack 0
 17865                           tblptru	equ	0xFF8
 17866                           tblptrh	equ	0xFF7
 17867                           tblptrl	equ	0xFF6
 17868                           tablat	equ	0xFF5
 17869                           prodh	equ	0xFF4
 17870                           prodl	equ	0xFF3
 17871                           intcon	equ	0xFF2
 17872                           indf0	equ	0xFEF
 17873                           postinc0	equ	0xFEE
 17874                           fsr0h	equ	0xFEA
 17875                           fsr0l	equ	0xFE9
 17876                           wreg	equ	0xFE8
 17877                           indf1	equ	0xFE7
 17878                           postinc1	equ	0xFE6
 17879                           postdec1	equ	0xFE5
 17880                           fsr1h	equ	0xFE2
 17881                           fsr1l	equ	0xFE1
 17882                           indf2	equ	0xFDF
 17883                           postinc2	equ	0xFDE
 17884                           postdec2	equ	0xFDD
 17885                           plusw2	equ	0xFDB
 17886                           fsr2h	equ	0xFDA
 17887                           fsr2l	equ	0xFD9
 17888                           status	equ	0xFD8
 17889                           
 17890 ;; *************** function __CANIDToRegs *****************
 17891 ;; Defined at:
 17892 ;;		line 1101 in file "ECAN.c"
 17893 ;; Parameters:    Size  Location     Type
 17894 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 17895 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17896 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17897 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 17898 ;;  val             4    2[BANK0 ] unsigned long 
 17899 ;;  type            1    6[BANK0 ] unsigned char 
 17900 ;; Auto vars:     Size  Location     Type
 17901 ;;  Value           1    9[BANK0 ] PTR struct _CAN_MESSAGE_
 17902 ;;		 -> _CANIDToRegs@val(4), 
 17903 ;; Return value:  Size  Location     Type
 17904 ;;		None               void
 17905 ;; Registers used:
 17906 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17907 ;; Tracked objects:
 17908 ;;		On entry : F/0
 17909 ;;		On exit  : F/0
 17910 ;;		Unchanged: 0/0
 17911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17912 ;;      Params:         0       7       0       0       0       0       0
 17913 ;;      Locals:         0       1       0       0       0       0       0
 17914 ;;      Temps:          0       2       0       0       0       0       0
 17915 ;;      Totals:         0      10       0       0       0       0       0
 17916 ;;Total ram usage:       10 bytes
 17917 ;; Hardware stack levels used:    1
 17918 ;; Hardware stack levels required when called:    3
 17919 ;; This function calls:
 17920 ;;		Nothing
 17921 ;; This function is called by:
 17922 ;;		_doModeVerbose
 17923 ;;		_ECANSendMessage
 17924 ;; This function uses a non-reentrant model
 17925 ;;
 17926                           
 17927                           	psect	text37
 17928  0038DA                     __ptext37:
 17929                           	opt stack 0
 17930  0038DA                     __CANIDToRegs:
 17931                           	opt stack 24
 17932                           
 17933                           ; BSR set to: 0
 17934                           ;ECAN.c: 1102: CAN_MESSAGE_ID *Value;
 17935                           ;ECAN.c: 1104: Value = (CAN_MESSAGE_ID*)&val;
 17936                           
 17937                           ; BSR set to: 0
 17938                           ;incstack = 0
 17939                           ;incstack = 0
 17940  0038DA  0E62               	movlw	low __CANIDToRegs@val
 17941  0038DC  6F69               	movwf	__CANIDToRegs@Value& (0+255),b
 17942                           
 17943                           ; BSR set to: 0
 17944                           ;ECAN.c: 1106: if ( type == 0 )
 17945  0038DE  6766               	tstfsz	__CANIDToRegs@type& (0+255),b
 17946  0038E0  D022               	goto	l12102
 17947                           
 17948                           ; BSR set to: 0
 17949                           ;ECAN.c: 1107: {
 17950                           ;ECAN.c: 1109: *ptr = Value->BYTES.BYTE_1 >> 3;
 17951  0038E2  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 17952  0038E4  6ED9               	movwf	fsr2l,c
 17953  0038E6  6ADA               	clrf	fsr2h,c
 17954  0038E8  50DF               	movf	indf2,w,c
 17955  0038EA  6F67               	movwf	??__CANIDToRegs& (0+255),b
 17956  0038EC  90D8               	bcf	status,0,c
 17957  0038EE  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 17958  0038F0  90D8               	bcf	status,0,c
 17959  0038F2  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 17960  0038F4  90D8               	bcf	status,0,c
 17961  0038F6  3167               	rrcf	??__CANIDToRegs& (0+255),w,b
 17962                           
 17963                           ;ECAN.c: 1110: *ptr |= (Value->BYTES.BYTE_2 << 5);
 17964  0038F8  D862               	call	PL54	;call to abstracted procedure
 17965  0038FA  2AD9               	incf	fsr2l,f,c
 17966  0038FC  6ADA               	clrf	fsr2h,c
 17967  0038FE  D872               	call	PL110	;call to abstracted procedure
 17968  003900                     u15365:
 17969  003900  90D8               	bcf	status,0,c
 17970  003902  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 17971  003904  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 17972  003906  D7FC               	goto	u15365
 17973  003908  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17974                           
 17975                           ; BSR set to: 0
 17976                           ;ECAN.c: 1111: ptr++;
 17977                           
 17978                           ; BSR set to: 0
 17979                           ;ECAN.c: 1112: *ptr = Value->BYTES.BYTE_1 << 5;
 17980  00390C  D846               	call	PL32	;call to abstracted procedure
 17981  00390E  D86A               	call	PL110	;call to abstracted procedure
 17982  003910                     u15375:
 17983  003910  90D8               	bcf	status,0,c
 17984  003912  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 17985  003914  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 17986  003916  D7FC               	goto	u15375
 17987  003918  5167               	movf	??__CANIDToRegs& (0+255),w,b
 17988  00391A  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17989  00391E  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 17990  003922  6EDF               	movwf	indf2,c
 17991                           
 17992                           ;ECAN.c: 1113: }
 17993  003924  D039               	goto	l1489
 17994  003926                     l12102:
 17995                           
 17996                           ; BSR set to: 0
 17997                           ;ECAN.c: 1114: else
 17998                           ;ECAN.c: 1115: {
 17999                           ;ECAN.c: 1117: *ptr = Value->BYTES.BYTE_3 >> 5;
 18000  003926  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18001  003928  D842               	call	PL52	;call to abstracted procedure
 18002  00392A  0E05               	movlw	5
 18003  00392C  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 18004  00392E                     u15385:
 18005  00392E  90D8               	bcf	status,0,c
 18006  003930  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 18007  003932  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 18008  003934  D7FC               	goto	u15385
 18009  003936  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18010                           
 18011                           ;ECAN.c: 1118: *ptr |= Value->BYTES.BYTE_4 << 3;
 18012  003938  D842               	call	PL54	;call to abstracted procedure
 18013  00393A  0E03               	movlw	3
 18014  00393C  D849               	call	PL78	;call to abstracted procedure
 18015  00393E  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18016  003940  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18017                           
 18018                           ; BSR set to: 0
 18019                           ;ECAN.c: 1119: ptr++;
 18020                           
 18021                           ; BSR set to: 0
 18022                           ;ECAN.c: 1120: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 18023  003944  D82A               	call	PL32	;call to abstracted procedure
 18024  003946  0E02               	movlw	2
 18025  003948  D843               	call	PL78	;call to abstracted procedure
 18026  00394A  3567               	rlcf	??__CANIDToRegs& (0+255),w,b
 18027  00394C  0BE0               	andlw	224
 18028  00394E  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18029  003952  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18030  003956  6EDF               	movwf	indf2,c
 18031                           
 18032                           ; BSR set to: 0
 18033                           ;ECAN.c: 1122: *ptr |= 0b00001000;
 18034  003958  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18035  00395C  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18036  003960  0E00               	movlw	0
 18037  003962  86DB               	bsf	plusw2,3,c
 18038                           
 18039                           ; BSR set to: 0
 18040                           ;ECAN.c: 1123: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 18041  003964  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18042  003966  D823               	call	PL52	;call to abstracted procedure
 18043  003968  0E03               	movlw	3
 18044  00396A  1767               	andwf	??__CANIDToRegs& (0+255),f,b
 18045  00396C  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18046                           
 18047                           ;ECAN.c: 1124: ptr++;
 18048                           
 18049                           ; BSR set to: 0
 18050                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_2;
 18051  003970  D814               	call	PL32	;call to abstracted procedure
 18052  003972  2AD9               	incf	fsr2l,f,c
 18053  003974  6ADA               	clrf	fsr2h,c
 18054  003976  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18055  00397A  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18056  00397E  CFDF FFE7          	movff	indf2,indf1
 18057                           
 18058                           ; BSR set to: 0
 18059                           ;ECAN.c: 1126: ptr++;
 18060  003982  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 18061  003984  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 18062                           
 18063                           ; BSR set to: 0
 18064                           ;ECAN.c: 1127: *ptr = Value->BYTES.BYTE_1;
 18065  003986  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18066  003988  6ED9               	movwf	fsr2l,c
 18067  00398A  6ADA               	clrf	fsr2h,c
 18068  00398C  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18069  003990  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18070  003994  CFDF FFE7          	movff	indf2,indf1
 18071  003998                     l1489:
 18072                           
 18073                           ; BSR set to: 0
 18074  003998  0012               	return	
 18075  00399A                     __end_of__CANIDToRegs:
 18076                           	opt stack 0
 18077  00399A                     PL32:
 18078                           	opt stack 24
 18079  00399A  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18080  00399E  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18081  0039A0  12DF               	iorwf	indf2,f,c
 18082  0039A2  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 18083  0039A4  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 18084  0039A6  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18085  0039A8  6ED9               	movwf	fsr2l,c
 18086  0039AA  6ADA               	clrf	fsr2h,c
 18087  0039AC  0012               	return	
 18088  0039AE                     __end_ofPL32:
 18089                           	opt stack 0
 18090  0039AE                     PL52:
 18091                           	opt stack 24
 18092  0039AE  6ED9               	movwf	fsr2l,c
 18093  0039B0  6ADA               	clrf	fsr2h,c
 18094  0039B2  0E02               	movlw	2
 18095  0039B4  26D9               	addwf	fsr2l,f,c
 18096  0039B6  6ADA               	clrf	fsr2h,c
 18097  0039B8  50DF               	movf	indf2,w,c
 18098  0039BA  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18099  0039BC  0012               	return	
 18100  0039BE                     __end_ofPL52:
 18101                           	opt stack 0
 18102  0039BE                     PL54:
 18103                           	opt stack 24
 18104  0039BE  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18105  0039C2  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18106  0039C6  6EDF               	movwf	indf2,c
 18107  0039C8  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18108  0039CA  6ED9               	movwf	fsr2l,c
 18109  0039CC  6ADA               	clrf	fsr2h,c
 18110  0039CE  0012               	return	
 18111  0039D0                     __end_ofPL54:
 18112                           	opt stack 0
 18113  0039D0                     PL78:
 18114                           	opt stack 24
 18115  0039D0  26D9               	addwf	fsr2l,f,c
 18116  0039D2  6ADA               	clrf	fsr2h,c
 18117  0039D4  50DF               	movf	indf2,w,c
 18118  0039D6  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18119  0039D8  90D8               	bcf	status,0,c
 18120  0039DA  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18121  0039DC  90D8               	bcf	status,0,c
 18122  0039DE  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18123  0039E0  90D8               	bcf	status,0,c
 18124  0039E2  0012               	return	
 18125  0039E4                     __end_ofPL78:
 18126                           	opt stack 0
 18127  0039E4                     PL110:
 18128                           	opt stack 24
 18129  0039E4  50DF               	movf	indf2,w,c
 18130  0039E6  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18131  0039E8  0E05               	movlw	5
 18132  0039EA  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 18133  0039EC  0C05               	retlw	5
 18134  0039EE                     __end_ofPL110:
 18135                           	opt stack 0
 18136                           tblptru	equ	0xFF8
 18137                           tblptrh	equ	0xFF7
 18138                           tblptrl	equ	0xFF6
 18139                           tablat	equ	0xFF5
 18140                           prodh	equ	0xFF4
 18141                           prodl	equ	0xFF3
 18142                           intcon	equ	0xFF2
 18143                           indf0	equ	0xFEF
 18144                           postinc0	equ	0xFEE
 18145                           fsr0h	equ	0xFEA
 18146                           fsr0l	equ	0xFE9
 18147                           wreg	equ	0xFE8
 18148                           indf1	equ	0xFE7
 18149                           postinc1	equ	0xFE6
 18150                           postdec1	equ	0xFE5
 18151                           fsr1h	equ	0xFE2
 18152                           fsr1l	equ	0xFE1
 18153                           indf2	equ	0xFDF
 18154                           postinc2	equ	0xFDE
 18155                           postdec2	equ	0xFDD
 18156                           plusw2	equ	0xFDB
 18157                           fsr2h	equ	0xFDA
 18158                           fsr2l	equ	0xFD9
 18159                           status	equ	0xFD8
 18160                           
 18161 ;; *************** function _memset *****************
 18162 ;; Defined at:
 18163 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 18164 ;; Parameters:    Size  Location     Type
 18165 ;;  p1              2    0[BANK0 ] PTR void 
 18166 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18167 ;;  c               2    2[BANK0 ] int 
 18168 ;;  n               2    4[BANK0 ] unsigned int 
 18169 ;; Auto vars:     Size  Location     Type
 18170 ;;  p               2    6[BANK0 ] PTR unsigned char 
 18171 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18172 ;; Return value:  Size  Location     Type
 18173 ;;                  2    0[BANK0 ] PTR void 
 18174 ;; Registers used:
 18175 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18176 ;; Tracked objects:
 18177 ;;		On entry : F/0
 18178 ;;		On exit  : F/0
 18179 ;;		Unchanged: 0/0
 18180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18181 ;;      Params:         0       6       0       0       0       0       0
 18182 ;;      Locals:         0       2       0       0       0       0       0
 18183 ;;      Temps:          0       0       0       0       0       0       0
 18184 ;;      Totals:         0       8       0       0       0       0       0
 18185 ;;Total ram usage:        8 bytes
 18186 ;; Hardware stack levels used:    1
 18187 ;; Hardware stack levels required when called:    3
 18188 ;; This function calls:
 18189 ;;		Nothing
 18190 ;; This function is called by:
 18191 ;;		_doModeVerbose
 18192 ;;		_doModeSLCAN
 18193 ;;		_printGUID
 18194 ;;		_printMDF
 18195 ;;		_printNodeFirmwareVersion
 18196 ;; This function uses a non-reentrant model
 18197 ;;
 18198                           
 18199                           	psect	text38
 18200  005692                     __ptext38:
 18201                           	opt stack 0
 18202  005692                     _memset:
 18203                           	opt stack 26
 18204                           
 18205                           ; BSR set to: 0
 18206                           
 18207                           ; BSR set to: 0
 18208                           ;incstack = 0
 18209                           ;incstack = 0
 18210  005692  C060  F066         	movff	memset@p1,memset@p
 18211  005696  C061  F067         	movff	memset@p1+1,memset@p+1
 18212  00569A  D008               	goto	l11304
 18213  00569C                     l11300:
 18214                           
 18215                           ; BSR set to: 0
 18216  00569C  C066  FFD9         	movff	memset@p,fsr2l
 18217  0056A0  C067  FFDA         	movff	memset@p+1,fsr2h
 18218  0056A4  C062  FFDF         	movff	memset@c,indf2
 18219                           
 18220                           ; BSR set to: 0
 18221  0056A8  4B66               	infsnz	memset@p& (0+255),f,b
 18222  0056AA  2B67               	incf	(memset@p+1)& (0+255),f,b
 18223  0056AC                     l11304:
 18224                           
 18225                           ; BSR set to: 0
 18226  0056AC  0764               	decf	memset@n& (0+255),f,b
 18227  0056AE  A0D8               	btfss	status,0,c
 18228  0056B0  0765               	decf	(memset@n+1)& (0+255),f,b
 18229  0056B2  0100               	movlb	0	; () banked
 18230  0056B4  2964               	incf	memset@n& (0+255),w,b
 18231  0056B6  B4D8               	btfsc	status,2,c
 18232  0056B8  2965               	incf	(memset@n+1)& (0+255),w,b
 18233  0056BA  B4D8               	btfsc	status,2,c
 18234                           
 18235                           ; BSR set to: 0
 18236  0056BC  0012               	return	
 18237  0056BE  D7EE               	goto	l11300
 18238  0056C0                     __end_of_memset:
 18239                           	opt stack 0
 18240                           tblptru	equ	0xFF8
 18241                           tblptrh	equ	0xFF7
 18242                           tblptrl	equ	0xFF6
 18243                           tablat	equ	0xFF5
 18244                           prodh	equ	0xFF4
 18245                           prodl	equ	0xFF3
 18246                           intcon	equ	0xFF2
 18247                           indf0	equ	0xFEF
 18248                           postinc0	equ	0xFEE
 18249                           fsr0h	equ	0xFEA
 18250                           fsr0l	equ	0xFE9
 18251                           wreg	equ	0xFE8
 18252                           indf1	equ	0xFE7
 18253                           postinc1	equ	0xFE6
 18254                           postdec1	equ	0xFE5
 18255                           fsr1h	equ	0xFE2
 18256                           fsr1l	equ	0xFE1
 18257                           indf2	equ	0xFDF
 18258                           postinc2	equ	0xFDE
 18259                           postdec2	equ	0xFDD
 18260                           plusw2	equ	0xFDB
 18261                           fsr2h	equ	0xFDA
 18262                           fsr2l	equ	0xFD9
 18263                           status	equ	0xFD8
 18264                           
 18265 ;; *************** function _printHelp *****************
 18266 ;; Defined at:
 18267 ;;		line 2538 in file "main.c"
 18268 ;; Parameters:    Size  Location     Type
 18269 ;;		None
 18270 ;; Auto vars:     Size  Location     Type
 18271 ;;		None
 18272 ;; Return value:  Size  Location     Type
 18273 ;;		None               void
 18274 ;; Registers used:
 18275 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18276 ;; Tracked objects:
 18277 ;;		On entry : F/1
 18278 ;;		On exit  : 0/0
 18279 ;;		Unchanged: 0/0
 18280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18281 ;;      Params:         0       0       0       0       0       0       0
 18282 ;;      Locals:         0       0       0       0       0       0       0
 18283 ;;      Temps:          0       0       0       0       0       0       0
 18284 ;;      Totals:         0       0       0       0       0       0       0
 18285 ;;Total ram usage:        0 bytes
 18286 ;; Hardware stack levels used:    1
 18287 ;; Hardware stack levels required when called:    5
 18288 ;; This function calls:
 18289 ;;		_putsUSART
 18290 ;; This function is called by:
 18291 ;;		_doModeVerbose
 18292 ;; This function uses a non-reentrant model
 18293 ;;
 18294                           
 18295                           	psect	text39
 18296  002C3E                     __ptext39:
 18297                           	opt stack 0
 18298  002C3E                     _printHelp:
 18299                           	opt stack 24
 18300                           
 18301                           ; BSR set to: 1
 18302                           ;main.c: 2539: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 18303                           
 18304                           ; BSR set to: 0
 18305                           ;incstack = 0
 18306                           ;incstack = 0
 18307  002C3E  0E78               	movlw	high STR_206
 18308  002C40  0100               	movlb	0	; () banked
 18309  002C42  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18310  002C44  0E48               	movlw	low STR_206
 18311  002C46  6F61               	movwf	?_putsUSART& (0+255),b
 18312  002C48  ECEA  F028         	call	_putsUSART	;wreg free
 18313                           
 18314                           ;main.c: 2540: putsUSART((char *) "------------------------------------\r\n");
 18315  002C4C  0E71               	movlw	high (STR_238+28)
 18316  002C4E  0100               	movlb	0	; () banked
 18317  002C50  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18318  002C52  0E6F               	movlw	low (STR_238+28)
 18319  002C54  6F61               	movwf	?_putsUSART& (0+255),b
 18320  002C56  ECEA  F028         	call	_putsUSART	;wreg free
 18321                           
 18322                           ;main.c: 2541: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 18323  002C5A  0E7B               	movlw	high STR_208
 18324  002C5C  0100               	movlb	0	; () banked
 18325  002C5E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18326  002C60  0E63               	movlw	low STR_208
 18327  002C62  6F61               	movwf	?_putsUSART& (0+255),b
 18328  002C64  ECEA  F028         	call	_putsUSART	;wreg free
 18329                           
 18330                           ;main.c: 2542: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 18331  002C68  0E76               	movlw	high STR_209
 18332  002C6A  0100               	movlb	0	; () banked
 18333  002C6C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18334  002C6E  0ED7               	movlw	low STR_209
 18335  002C70  6F61               	movwf	?_putsUSART& (0+255),b
 18336  002C72  ECEA  F028         	call	_putsUSART	;wreg free
 18337                           
 18338                           ;main.c: 2543: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 18339  002C76  0E76               	movlw	high STR_210
 18340  002C78  0100               	movlb	0	; () banked
 18341  002C7A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18342  002C7C  0E7D               	movlw	low STR_210
 18343  002C7E  6F61               	movwf	?_putsUSART& (0+255),b
 18344  002C80  ECEA  F028         	call	_putsUSART	;wreg free
 18345                           
 18346                           ;main.c: 2544: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 18347  002C84  0E74               	movlw	high STR_211
 18348  002C86  0100               	movlb	0	; () banked
 18349  002C88  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18350  002C8A  0EF6               	movlw	low STR_211
 18351  002C8C  6F61               	movwf	?_putsUSART& (0+255),b
 18352  002C8E  ECEA  F028         	call	_putsUSART	;wreg free
 18353                           
 18354                           ;main.c: 2545: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 18355  002C92  0E75               	movlw	high STR_212
 18356  002C94  0100               	movlb	0	; () banked
 18357  002C96  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18358  002C98  0E5B               	movlw	low STR_212
 18359  002C9A  6F61               	movwf	?_putsUSART& (0+255),b
 18360  002C9C  ECEA  F028         	call	_putsUSART	;wreg free
 18361                           
 18362                           ;main.c: 2546: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 18363  002CA0  0E7B               	movlw	high STR_213
 18364  002CA2  0100               	movlb	0	; () banked
 18365  002CA4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18366  002CA6  0E0B               	movlw	low STR_213
 18367  002CA8  6F61               	movwf	?_putsUSART& (0+255),b
 18368  002CAA  ECEA  F028         	call	_putsUSART	;wreg free
 18369                           
 18370                           ;main.c: 2547: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 18371  002CAE  0E75               	movlw	high STR_214
 18372  002CB0  0100               	movlb	0	; () banked
 18373  002CB2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18374  002CB4  0E8D               	movlw	low STR_214
 18375  002CB6  6F61               	movwf	?_putsUSART& (0+255),b
 18376  002CB8  ECEA  F028         	call	_putsUSART	;wreg free
 18377                           
 18378                           ;main.c: 2548: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 18379  002CBC  0E76               	movlw	high STR_215
 18380  002CBE  0100               	movlb	0	; () banked
 18381  002CC0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18382  002CC2  0EAB               	movlw	low STR_215
 18383  002CC4  6F61               	movwf	?_putsUSART& (0+255),b
 18384  002CC6  ECEA  F028         	call	_putsUSART	;wreg free
 18385                           
 18386                           ;main.c: 2549: putsUSART((char *) "TX - Send CAN frame .\r\n");
 18387  002CCA  0E7C               	movlw	high STR_216
 18388  002CCC  0100               	movlb	0	; () banked
 18389  002CCE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18390  002CD0  0E00               	movlw	low STR_216
 18391  002CD2  6F61               	movwf	?_putsUSART& (0+255),b
 18392  002CD4  ECEA  F028         	call	_putsUSART	;wreg free
 18393                           
 18394                           ;main.c: 2550: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 18395  002CD8  0E73               	movlw	high STR_217
 18396  002CDA  0100               	movlb	0	; () banked
 18397  002CDC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18398  002CDE  0E0F               	movlw	low STR_217
 18399  002CE0  6F61               	movwf	?_putsUSART& (0+255),b
 18400  002CE2  ECEA  F028         	call	_putsUSART	;wreg free
 18401                           
 18402                           ;main.c: 2551: putsUSART((char *) "RX - Read CAN frame.\r\n");
 18403  002CE6  0E7C               	movlw	high STR_218
 18404  002CE8  0100               	movlb	0	; () banked
 18405  002CEA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18406  002CEC  0EC0               	movlw	low STR_218
 18407  002CEE  6F61               	movwf	?_putsUSART& (0+255),b
 18408  002CF0  ECEA  F028         	call	_putsUSART	;wreg free
 18409                           
 18410                           ;main.c: 2552: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 18411  002CF4  0E7A               	movlw	high STR_219
 18412  002CF6  0100               	movlb	0	; () banked
 18413  002CF8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18414  002CFA  0E27               	movlw	low STR_219
 18415  002CFC  6F61               	movwf	?_putsUSART& (0+255),b
 18416  002CFE  ECEA  F028         	call	_putsUSART	;wreg free
 18417                           
 18418                           ;main.c: 2553: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 18419  002D02  0E78               	movlw	high STR_220
 18420  002D04  0100               	movlb	0	; () banked
 18421  002D06  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18422  002D08  0E21               	movlw	low STR_220
 18423  002D0A  6F61               	movwf	?_putsUSART& (0+255),b
 18424  002D0C  ECEA  F028         	call	_putsUSART	;wreg free
 18425                           
 18426                           ;main.c: 2554: putsUSART((char *) "HELP - Display this help information.\r\n");
 18427  002D10  0E77               	movlw	high STR_221
 18428  002D12  0100               	movlb	0	; () banked
 18429  002D14  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18430  002D16  0E82               	movlw	low STR_221
 18431  002D18  6F61               	movwf	?_putsUSART& (0+255),b
 18432  002D1A  ECEA  F028         	call	_putsUSART	;wreg free
 18433                           
 18434                           ;main.c: 2555: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 18435  002D1E  0E76               	movlw	high STR_222
 18436  002D20  0100               	movlb	0	; () banked
 18437  002D22  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18438  002D24  0E4E               	movlw	low STR_222
 18439  002D26  6F61               	movwf	?_putsUSART& (0+255),b
 18440  002D28  ECEA  F028         	call	_putsUSART	;wreg free
 18441                           
 18442                           ;main.c: 2556: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg [page:]
      +                          reg [count]).\r\n");
 18443  002D2C  0E71               	movlw	high STR_223
 18444  002D2E  0100               	movlb	0	; () banked
 18445  002D30  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18446  002D32  0E0E               	movlw	low STR_223
 18447  002D34  6F61               	movwf	?_putsUSART& (0+255),b
 18448  002D36  ECEA  F028         	call	_putsUSART	;wreg free
 18449                           
 18450                           ;main.c: 2557: putsUSART((char *) "WREG - Write register of node (Format: wreg [page:]re
      +                          g content).\r\n");
 18451  002D3A  0E71               	movlw	high STR_224
 18452  002D3C  0100               	movlb	0	; () banked
 18453  002D3E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18454  002D40  0ED9               	movlw	low STR_224
 18455  002D42  6F61               	movwf	?_putsUSART& (0+255),b
 18456  002D44  ECEA  F028         	call	_putsUSART	;wreg free
 18457                           
 18458                           ;main.c: 2558: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 18459  002D48  0E70               	movlw	high STR_225
 18460  002D4A  0100               	movlb	0	; () banked
 18461  002D4C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18462  002D4E  0E7A               	movlw	low STR_225
 18463  002D50  6F61               	movwf	?_putsUSART& (0+255),b
 18464  002D52  ECEA  F028         	call	_putsUSART	;wreg free
 18465                           
 18466                           ;main.c: 2559: putsUSART((char *) "FILTER - Set filter .\r\n");
 18467  002D56  0E7C               	movlw	high STR_226
 18468  002D58  0100               	movlb	0	; () banked
 18469  002D5A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18470  002D5C  0E18               	movlw	low STR_226
 18471  002D5E  6F61               	movwf	?_putsUSART& (0+255),b
 18472  002D60  ECEA  F028         	call	_putsUSART	;wreg free
 18473                           
 18474                           ;main.c: 2560: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 18475  002D64  0E70               	movlw	high STR_227
 18476  002D66  0100               	movlb	0	; () banked
 18477  002D68  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18478  002D6A  0E2C               	movlw	low STR_227
 18479  002D6C  6F61               	movwf	?_putsUSART& (0+255),b
 18480  002D6E  ECEA  F028         	call	_putsUSART	;wreg free
 18481                           
 18482                           ;main.c: 2561: putsUSART((char *) "MASK - Set mask .\r\n");
 18483  002D72  0E7D               	movlw	high STR_228
 18484  002D74  0100               	movlb	0	; () banked
 18485  002D76  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18486  002D78  0E46               	movlw	low STR_228
 18487  002D7A  6F61               	movwf	?_putsUSART& (0+255),b
 18488  002D7C  ECEA  F028         	call	_putsUSART	;wreg free
 18489                           
 18490                           ;main.c: 2562: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 18491  002D80  0E70               	movlw	high STR_229
 18492  002D82  0100               	movlb	0	; () banked
 18493  002D84  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18494  002D86  0EC7               	movlw	low STR_229
 18495  002D88  6F61               	movwf	?_putsUSART& (0+255),b
 18496  002D8A  ECEA  F028         	call	_putsUSART	;wreg free
 18497                           
 18498                           ;main.c: 2563: putsUSART((char *) "SET - Persistent functionality.\r\n");
 18499  002D8E  0E79               	movlw	high STR_230
 18500  002D90  0100               	movlb	0	; () banked
 18501  002D92  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18502  002D94  0EE3               	movlw	low STR_230
 18503  002D96  6F61               	movwf	?_putsUSART& (0+255),b
 18504  002D98  ECEA  F028         	call	_putsUSART	;wreg free
 18505                           
 18506                           ;main.c: 2564: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 18507  002D9C  0E76               	movlw	high STR_231
 18508  002D9E  0100               	movlb	0	; () banked
 18509  002DA0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18510  002DA2  0E1F               	movlw	low STR_231
 18511  002DA4  6F61               	movwf	?_putsUSART& (0+255),b
 18512  002DA6  ECEA  F028         	call	_putsUSART	;wreg free
 18513                           
 18514                           ;main.c: 2565: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 18515  002DAA  0E75               	movlw	high STR_232
 18516  002DAC  0100               	movlb	0	; () banked
 18517  002DAE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18518  002DB0  0EF0               	movlw	low STR_232
 18519  002DB2  6F61               	movwf	?_putsUSART& (0+255),b
 18520  002DB4  ECEA  F028         	call	_putsUSART	;wreg free
 18521                           
 18522                           ;main.c: 2566: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=10 ms .\r\n");
 18523  002DB8  0E71               	movlw	high STR_233
 18524  002DBA  0100               	movlb	0	; () banked
 18525  002DBC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18526  002DBE  0E96               	movlw	low STR_233
 18527  002DC0  6F61               	movwf	?_putsUSART& (0+255),b
 18528  002DC2  ECEA  F028         	call	_putsUSART	;wreg free
 18529                           
 18530                           ;main.c: 2567: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 18531  002DC6  0E75               	movlw	high STR_234
 18532  002DC8  0100               	movlb	0	; () banked
 18533  002DCA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18534  002DCC  0EBF               	movlw	low STR_234
 18535  002DCE  6F61               	movwf	?_putsUSART& (0+255),b
 18536  002DD0  ECEA  F028         	call	_putsUSART	;wreg free
 18537                           
 18538                           ;main.c: 2568: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 18539  002DD4  0E73               	movlw	high STR_235
 18540  002DD6  0100               	movlb	0	; () banked
 18541  002DD8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18542  002DDA  0E7E               	movlw	low STR_235
 18543  002DDC  6F61               	movwf	?_putsUSART& (0+255),b
 18544  002DDE  ECEA  F028         	call	_putsUSART	;wreg free
 18545                           
 18546                           ;main.c: 2569: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 18547  002DE2  0E72               	movlw	high STR_236
 18548  002DE4  0100               	movlb	0	; () banked
 18549  002DE6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18550  002DE8  0E5E               	movlw	low STR_236
 18551  002DEA  6F61               	movwf	?_putsUSART& (0+255),b
 18552  002DEC  ECEA  F028         	call	_putsUSART	;wreg free
 18553                           
 18554                           ;main.c: 2570: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 18555  002DF0  0E78               	movlw	high STR_237
 18556  002DF2  0100               	movlb	0	; () banked
 18557  002DF4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18558  002DF6  0EBD               	movlw	low STR_237
 18559  002DF8  6F61               	movwf	?_putsUSART& (0+255),b
 18560  002DFA  EFEA  F028         	goto	_putsUSART	;wreg free
 18561  002DFE                     __end_of_printHelp:
 18562                           	opt stack 0
 18563                           tblptru	equ	0xFF8
 18564                           tblptrh	equ	0xFF7
 18565                           tblptrl	equ	0xFF6
 18566                           tablat	equ	0xFF5
 18567                           prodh	equ	0xFF4
 18568                           prodl	equ	0xFF3
 18569                           intcon	equ	0xFF2
 18570                           indf0	equ	0xFEF
 18571                           postinc0	equ	0xFEE
 18572                           fsr0h	equ	0xFEA
 18573                           fsr0l	equ	0xFE9
 18574                           wreg	equ	0xFE8
 18575                           indf1	equ	0xFE7
 18576                           postinc1	equ	0xFE6
 18577                           postdec1	equ	0xFE5
 18578                           fsr1h	equ	0xFE2
 18579                           fsr1l	equ	0xFE1
 18580                           indf2	equ	0xFDF
 18581                           postinc2	equ	0xFDE
 18582                           postdec2	equ	0xFDD
 18583                           plusw2	equ	0xFDB
 18584                           fsr2h	equ	0xFDA
 18585                           fsr2l	equ	0xFD9
 18586                           status	equ	0xFD8
 18587                           
 18588 ;; *************** function _printErrors *****************
 18589 ;; Defined at:
 18590 ;;		line 2474 in file "main.c"
 18591 ;; Parameters:    Size  Location     Type
 18592 ;;		None
 18593 ;; Auto vars:     Size  Location     Type
 18594 ;;		None
 18595 ;; Return value:  Size  Location     Type
 18596 ;;		None               void
 18597 ;; Registers used:
 18598 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18599 ;; Tracked objects:
 18600 ;;		On entry : F/1
 18601 ;;		On exit  : 0/0
 18602 ;;		Unchanged: 0/0
 18603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18604 ;;      Params:         0       0       0       0       0       0       0
 18605 ;;      Locals:         0      12       0       0       0       0       0
 18606 ;;      Temps:          0       0       0       0       0       0       0
 18607 ;;      Totals:         0      12       0       0       0       0       0
 18608 ;;Total ram usage:       12 bytes
 18609 ;; Hardware stack levels used:    1
 18610 ;; Hardware stack levels required when called:    5
 18611 ;; This function calls:
 18612 ;;		_putsUSART
 18613 ;;		_sprintf
 18614 ;; This function is called by:
 18615 ;;		_doModeVerbose
 18616 ;; This function uses a non-reentrant model
 18617 ;;
 18618                           
 18619                           	psect	text40
 18620  0020FE                     __ptext40:
 18621                           	opt stack 0
 18622  0020FE                     _printErrors:
 18623                           	opt stack 24
 18624                           
 18625                           ; BSR set to: 1
 18626                           ;main.c: 2475: putsUSART((char *) "CAN Receive overruns: ");
 18627                           
 18628                           ;incstack = 0
 18629                           ;incstack = 0
 18630  0020FE  0E7C               	movlw	high STR_176
 18631  002100  0100               	movlb	0	; () banked
 18632  002102  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18633  002104  0ED7               	movlw	low STR_176
 18634  002106  6F61               	movwf	?_putsUSART& (0+255),b
 18635  002108  ECEA  F028         	call	_putsUSART	;wreg free
 18636                           
 18637                           ;main.c: 2476: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns);
 18638  00210C  0101               	movlb	1	; () banked
 18639  00210E  6700               	tstfsz	_bHex& (0+255),b
 18640  002110  D005               	goto	l11380
 18641                           
 18642                           ; BSR set to: 1
 18643  002112  0E7F               	movlw	high STR_162
 18644  002114  0100               	movlb	0	; () banked
 18645  002116  6F95               	movwf	(_printErrors$1391+1)& (0+255),b
 18646  002118  0EE0               	movlw	low STR_162
 18647  00211A  D004               	goto	L15
 18648  00211C                     l11380:
 18649                           
 18650                           ; BSR set to: 1
 18651  00211C  0E7F               	movlw	high STR_177
 18652  00211E  0100               	movlb	0	; () banked
 18653  002120  6F95               	movwf	(_printErrors$1391+1)& (0+255),b
 18654  002122  0E15               	movlw	low STR_177
 18655  002124                     L15:
 18656  002124  6F94               	movwf	_printErrors$1391& (0+255),b
 18657                           
 18658                           ; BSR set to: 0
 18659  002126  0E01               	movlw	high _wrkbuf
 18660  002128  0100               	movlb	0	; () banked
 18661  00212A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18662  00212C  0E54               	movlw	low _wrkbuf
 18663  00212E  6F76               	movwf	?_sprintf& (0+255),b
 18664  002130  C094  F078         	movff	_printErrors$1391,?_sprintf+2
 18665  002134  C095  F079         	movff	_printErrors$1391+1,?_sprintf+3
 18666  002138  C0D1  F07A         	movff	_can_receiveOverruns,?_sprintf+4
 18667  00213C  C0D2  F07B         	movff	_can_receiveOverruns+1,?_sprintf+5
 18668  002140  C0D3  F07C         	movff	_can_receiveOverruns+2,?_sprintf+6
 18669  002144  C0D4  F07D         	movff	_can_receiveOverruns+3,?_sprintf+7
 18670  002148  EC28  F00B         	call	_sprintf	;wreg free
 18671                           
 18672                           ; BSR set to: 0
 18673                           ;main.c: 2477: putsUSART(wrkbuf);
 18674  00214C  0E01               	movlw	high _wrkbuf
 18675  00214E  0100               	movlb	0	; () banked
 18676  002150  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18677  002152  0E54               	movlw	low _wrkbuf
 18678  002154  6F61               	movwf	?_putsUSART& (0+255),b
 18679  002156  ECEA  F028         	call	_putsUSART	;wreg free
 18680                           
 18681                           ;main.c: 2478: putsUSART((char *) "\r\n");
 18682  00215A  0E74               	movlw	high (STR_197+50)
 18683  00215C  0100               	movlb	0	; () banked
 18684  00215E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18685  002160  0E8A               	movlw	low (STR_197+50)
 18686  002162  6F61               	movwf	?_putsUSART& (0+255),b
 18687  002164  ECEA  F028         	call	_putsUSART	;wreg free
 18688                           
 18689                           ;main.c: 2480: putsUSART((char *) "CAN Transmit overruns: ");
 18690  002168  0E7C               	movlw	high STR_180
 18691  00216A  0100               	movlb	0	; () banked
 18692  00216C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18693  00216E  0EA8               	movlw	low STR_180
 18694  002170  6F61               	movwf	?_putsUSART& (0+255),b
 18695  002172  ECEA  F028         	call	_putsUSART	;wreg free
 18696                           
 18697                           ;main.c: 2481: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns);
 18698  002176  0101               	movlb	1	; () banked
 18699  002178  6700               	tstfsz	_bHex& (0+255),b
 18700  00217A  D005               	goto	l11394
 18701                           
 18702                           ; BSR set to: 1
 18703  00217C  0E7F               	movlw	high STR_162
 18704  00217E  0100               	movlb	0	; () banked
 18705  002180  6F97               	movwf	(_printErrors$1397+1)& (0+255),b
 18706  002182  0EE0               	movlw	low STR_162
 18707  002184  D004               	goto	L16
 18708  002186                     l11394:
 18709                           
 18710                           ; BSR set to: 1
 18711  002186  0E7F               	movlw	high STR_177
 18712  002188  0100               	movlb	0	; () banked
 18713  00218A  6F97               	movwf	(_printErrors$1397+1)& (0+255),b
 18714  00218C  0E15               	movlw	low STR_177
 18715  00218E                     L16:
 18716  00218E  6F96               	movwf	_printErrors$1397& (0+255),b
 18717                           
 18718                           ; BSR set to: 0
 18719  002190  0E01               	movlw	high _wrkbuf
 18720  002192  0100               	movlb	0	; () banked
 18721  002194  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18722  002196  0E54               	movlw	low _wrkbuf
 18723  002198  6F76               	movwf	?_sprintf& (0+255),b
 18724  00219A  C096  F078         	movff	_printErrors$1397,?_sprintf+2
 18725  00219E  C097  F079         	movff	_printErrors$1397+1,?_sprintf+3
 18726  0021A2  C02B  F07A         	movff	_can_transmitOverruns,?_sprintf+4
 18727  0021A6  C02C  F07B         	movff	_can_transmitOverruns+1,?_sprintf+5
 18728  0021AA  C02D  F07C         	movff	_can_transmitOverruns+2,?_sprintf+6
 18729  0021AE  C02E  F07D         	movff	_can_transmitOverruns+3,?_sprintf+7
 18730  0021B2  EC28  F00B         	call	_sprintf	;wreg free
 18731                           
 18732                           ; BSR set to: 0
 18733                           ;main.c: 2482: putsUSART(wrkbuf);
 18734  0021B6  0E01               	movlw	high _wrkbuf
 18735  0021B8  0100               	movlb	0	; () banked
 18736  0021BA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18737  0021BC  0E54               	movlw	low _wrkbuf
 18738  0021BE  6F61               	movwf	?_putsUSART& (0+255),b
 18739  0021C0  ECEA  F028         	call	_putsUSART	;wreg free
 18740                           
 18741                           ;main.c: 2483: putsUSART((char *) "\r\n");
 18742  0021C4  0E74               	movlw	high (STR_197+50)
 18743  0021C6  0100               	movlb	0	; () banked
 18744  0021C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18745  0021CA  0E8A               	movlw	low (STR_197+50)
 18746  0021CC  6F61               	movwf	?_putsUSART& (0+255),b
 18747  0021CE  ECEA  F028         	call	_putsUSART	;wreg free
 18748                           
 18749                           ;main.c: 2485: putsUSART((char *) "UART Receive overruns: ");
 18750  0021D2  0E7C               	movlw	high STR_184
 18751  0021D4  0100               	movlb	0	; () banked
 18752  0021D6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18753  0021D8  0E90               	movlw	low STR_184
 18754  0021DA  6F61               	movwf	?_putsUSART& (0+255),b
 18755  0021DC  ECEA  F028         	call	_putsUSART	;wreg free
 18756                           
 18757                           ;main.c: 2486: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns);
 18758  0021E0  0101               	movlb	1	; () banked
 18759  0021E2  6700               	tstfsz	_bHex& (0+255),b
 18760  0021E4  D005               	goto	l11408
 18761                           
 18762                           ; BSR set to: 1
 18763  0021E6  0E7F               	movlw	high STR_162
 18764  0021E8  0100               	movlb	0	; () banked
 18765  0021EA  6F99               	movwf	(_printErrors$1403+1)& (0+255),b
 18766  0021EC  0EE0               	movlw	low STR_162
 18767  0021EE  D004               	goto	L17
 18768  0021F0                     l11408:
 18769                           
 18770                           ; BSR set to: 1
 18771  0021F0  0E7F               	movlw	high STR_177
 18772  0021F2  0100               	movlb	0	; () banked
 18773  0021F4  6F99               	movwf	(_printErrors$1403+1)& (0+255),b
 18774  0021F6  0E15               	movlw	low STR_177
 18775  0021F8                     L17:
 18776  0021F8  6F98               	movwf	_printErrors$1403& (0+255),b
 18777                           
 18778                           ; BSR set to: 0
 18779  0021FA  0E01               	movlw	high _wrkbuf
 18780  0021FC  0100               	movlb	0	; () banked
 18781  0021FE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18782  002200  0E54               	movlw	low _wrkbuf
 18783  002202  6F76               	movwf	?_sprintf& (0+255),b
 18784  002204  C098  F078         	movff	_printErrors$1403,?_sprintf+2
 18785  002208  C099  F079         	movff	_printErrors$1403+1,?_sprintf+3
 18786  00220C  C02F  F07A         	movff	_uart_receiveOverruns,?_sprintf+4
 18787  002210  C030  F07B         	movff	_uart_receiveOverruns+1,?_sprintf+5
 18788  002214  C031  F07C         	movff	_uart_receiveOverruns+2,?_sprintf+6
 18789  002218  C032  F07D         	movff	_uart_receiveOverruns+3,?_sprintf+7
 18790  00221C  EC28  F00B         	call	_sprintf	;wreg free
 18791                           
 18792                           ; BSR set to: 0
 18793                           ;main.c: 2487: putsUSART(wrkbuf);
 18794  002220  0E01               	movlw	high _wrkbuf
 18795  002222  0100               	movlb	0	; () banked
 18796  002224  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18797  002226  0E54               	movlw	low _wrkbuf
 18798  002228  6F61               	movwf	?_putsUSART& (0+255),b
 18799  00222A  ECEA  F028         	call	_putsUSART	;wreg free
 18800                           
 18801                           ;main.c: 2488: putsUSART((char *) "\r\n");
 18802  00222E  0E74               	movlw	high (STR_197+50)
 18803  002230  0100               	movlb	0	; () banked
 18804  002232  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18805  002234  0E8A               	movlw	low (STR_197+50)
 18806  002236  6F61               	movwf	?_putsUSART& (0+255),b
 18807  002238  ECEA  F028         	call	_putsUSART	;wreg free
 18808                           
 18809                           ;main.c: 2490: putsUSART((char *) "UART Receive overruns: ");
 18810  00223C  0E7C               	movlw	high STR_184
 18811  00223E  0100               	movlb	0	; () banked
 18812  002240  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18813  002242  0E90               	movlw	low STR_184
 18814  002244  6F61               	movwf	?_putsUSART& (0+255),b
 18815  002246  ECEA  F028         	call	_putsUSART	;wreg free
 18816                           
 18817                           ;main.c: 2491: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns);
 18818  00224A  0101               	movlb	1	; () banked
 18819  00224C  6700               	tstfsz	_bHex& (0+255),b
 18820  00224E  D005               	goto	l11422
 18821                           
 18822                           ; BSR set to: 1
 18823  002250  0E7F               	movlw	high STR_162
 18824  002252  0100               	movlb	0	; () banked
 18825  002254  6F9B               	movwf	(_printErrors$1409+1)& (0+255),b
 18826  002256  0EE0               	movlw	low STR_162
 18827  002258  D004               	goto	L18
 18828  00225A                     l11422:
 18829                           
 18830                           ; BSR set to: 1
 18831  00225A  0E7F               	movlw	high STR_177
 18832  00225C  0100               	movlb	0	; () banked
 18833  00225E  6F9B               	movwf	(_printErrors$1409+1)& (0+255),b
 18834  002260  0E15               	movlw	low STR_177
 18835  002262                     L18:
 18836  002262  6F9A               	movwf	_printErrors$1409& (0+255),b
 18837                           
 18838                           ; BSR set to: 0
 18839  002264  0E01               	movlw	high _wrkbuf
 18840  002266  0100               	movlb	0	; () banked
 18841  002268  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18842  00226A  0E54               	movlw	low _wrkbuf
 18843  00226C  6F76               	movwf	?_sprintf& (0+255),b
 18844  00226E  C09A  F078         	movff	_printErrors$1409,?_sprintf+2
 18845  002272  C09B  F079         	movff	_printErrors$1409+1,?_sprintf+3
 18846  002276  C033  F07A         	movff	_uart_transmitOverruns,?_sprintf+4
 18847  00227A  C034  F07B         	movff	_uart_transmitOverruns+1,?_sprintf+5
 18848  00227E  C035  F07C         	movff	_uart_transmitOverruns+2,?_sprintf+6
 18849  002282  C036  F07D         	movff	_uart_transmitOverruns+3,?_sprintf+7
 18850  002286  EC28  F00B         	call	_sprintf	;wreg free
 18851                           
 18852                           ; BSR set to: 0
 18853                           ;main.c: 2492: putsUSART(wrkbuf);
 18854  00228A  0E01               	movlw	high _wrkbuf
 18855  00228C  0100               	movlb	0	; () banked
 18856  00228E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18857  002290  0E54               	movlw	low _wrkbuf
 18858  002292  6F61               	movwf	?_putsUSART& (0+255),b
 18859  002294  ECEA  F028         	call	_putsUSART	;wreg free
 18860                           
 18861                           ;main.c: 2493: putsUSART((char *) "\r\n");
 18862  002298  0E74               	movlw	high (STR_197+50)
 18863  00229A  0100               	movlb	0	; () banked
 18864  00229C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18865  00229E  0E8A               	movlw	low (STR_197+50)
 18866  0022A0  6F61               	movwf	?_putsUSART& (0+255),b
 18867  0022A2  ECEA  F028         	call	_putsUSART	;wreg free
 18868                           
 18869                           ;main.c: 2495: putsUSART((char *) "Transmit Error Counter: ");
 18870  0022A6  0E7B               	movlw	high STR_192
 18871  0022A8  0100               	movlb	0	; () banked
 18872  0022AA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18873  0022AC  0EE7               	movlw	low STR_192
 18874  0022AE  6F61               	movwf	?_putsUSART& (0+255),b
 18875  0022B0  ECEA  F028         	call	_putsUSART	;wreg free
 18876                           
 18877                           ;main.c: 2496: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT);
 18878  0022B4  0101               	movlb	1	; () banked
 18879  0022B6  6700               	tstfsz	_bHex& (0+255),b
 18880  0022B8  D005               	goto	l11436
 18881                           
 18882                           ; BSR set to: 1
 18883  0022BA  0E7F               	movlw	high STR_57
 18884  0022BC  0100               	movlb	0	; () banked
 18885  0022BE  6F9D               	movwf	(_printErrors$1415+1)& (0+255),b
 18886  0022C0  0EED               	movlw	low STR_57
 18887  0022C2  D004               	goto	L19
 18888  0022C4                     l11436:
 18889                           
 18890                           ; BSR set to: 1
 18891  0022C4  0E7F               	movlw	high STR_56
 18892  0022C6  0100               	movlb	0	; () banked
 18893  0022C8  6F9D               	movwf	(_printErrors$1415+1)& (0+255),b
 18894  0022CA  0E64               	movlw	low STR_56
 18895  0022CC                     L19:
 18896  0022CC  6F9C               	movwf	_printErrors$1415& (0+255),b
 18897                           
 18898                           ; BSR set to: 0
 18899  0022CE  0E01               	movlw	high _wrkbuf
 18900  0022D0  0100               	movlb	0	; () banked
 18901  0022D2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18902  0022D4  0E54               	movlw	low _wrkbuf
 18903  0022D6  6F76               	movwf	?_sprintf& (0+255),b
 18904  0022D8  C09C  F078         	movff	_printErrors$1415,?_sprintf+2
 18905  0022DC  C09D  F079         	movff	_printErrors$1415+1,?_sprintf+3
 18906  0022E0  CF76 F07A          	movff	3958,?_sprintf+4	;volatile
 18907  0022E4  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 18908  0022E6  EC28  F00B         	call	_sprintf	;wreg free
 18909                           
 18910                           ; BSR set to: 0
 18911                           ;main.c: 2497: putsUSART(wrkbuf);
 18912  0022EA  0E01               	movlw	high _wrkbuf
 18913  0022EC  0100               	movlb	0	; () banked
 18914  0022EE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18915  0022F0  0E54               	movlw	low _wrkbuf
 18916  0022F2  6F61               	movwf	?_putsUSART& (0+255),b
 18917  0022F4  ECEA  F028         	call	_putsUSART	;wreg free
 18918                           
 18919                           ;main.c: 2498: putsUSART((char *) "\r\n");
 18920  0022F8  0E74               	movlw	high (STR_197+50)
 18921  0022FA  0100               	movlb	0	; () banked
 18922  0022FC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18923  0022FE  0E8A               	movlw	low (STR_197+50)
 18924  002300  6F61               	movwf	?_putsUSART& (0+255),b
 18925  002302  ECEA  F028         	call	_putsUSART	;wreg free
 18926                           
 18927                           ;main.c: 2500: if (COMSTATbits.TXWARN) {
 18928  002306  A474               	btfss	3956,2,c	;volatile
 18929  002308  D007               	goto	l11448
 18930                           
 18931                           ;main.c: 2501: putsUSART((char *) "Transmitter in Error State Warning (128 > TERRCNT ? 9
      +                          6)\r\n");
 18932  00230A  0E72               	movlw	high STR_196
 18933  00230C  0100               	movlb	0	; () banked
 18934  00230E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18935  002310  0E9C               	movlw	low STR_196
 18936  002312  6F61               	movwf	?_putsUSART& (0+255),b
 18937  002314  ECEA  F028         	call	_putsUSART	;wreg free
 18938  002318                     l11448:
 18939                           
 18940                           ;main.c: 2502: }
 18941                           ;main.c: 2504: if (COMSTATbits.TXBO) {
 18942  002318  AA74               	btfss	3956,5,c	;volatile
 18943  00231A  D007               	goto	l11452
 18944                           
 18945                           ;main.c: 2505: putsUSART((char *) "Transmitter in Error State Bus OFF (TERRCNT ? 256)\r\
      +                          n");
 18946  00231C  0E74               	movlw	high STR_197
 18947  00231E  0100               	movlb	0	; () banked
 18948  002320  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18949  002322  0E58               	movlw	low STR_197
 18950  002324  6F61               	movwf	?_putsUSART& (0+255),b
 18951  002326  ECEA  F028         	call	_putsUSART	;wreg free
 18952  00232A                     l11452:
 18953                           
 18954                           ;main.c: 2506: }
 18955                           ;main.c: 2508: if (COMSTATbits.TXBP) {
 18956  00232A  A874               	btfss	3956,4,c	;volatile
 18957  00232C  D007               	goto	l1158
 18958                           
 18959                           ;main.c: 2509: putsUSART((char *) "Transmitter in Error State Bus Passive (TERRCNT ? 128
      +                          )\r\n");
 18960  00232E  0E72               	movlw	high STR_198
 18961  002330  0100               	movlb	0	; () banked
 18962  002332  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18963  002334  0ED6               	movlw	low STR_198
 18964  002336  6F61               	movwf	?_putsUSART& (0+255),b
 18965  002338  ECEA  F028         	call	_putsUSART	;wreg free
 18966  00233C                     l1158:
 18967                           
 18968                           ;main.c: 2510: }
 18969                           ;main.c: 2513: putsUSART((char *) "Receive Error Counter: ");
 18970  00233C  0E7C               	movlw	high STR_199
 18971  00233E  0100               	movlb	0	; () banked
 18972  002340  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18973  002342  0E78               	movlw	low STR_199
 18974  002344  6F61               	movwf	?_putsUSART& (0+255),b
 18975  002346  ECEA  F028         	call	_putsUSART	;wreg free
 18976                           
 18977                           ;main.c: 2514: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT);
 18978  00234A  0101               	movlb	1	; () banked
 18979  00234C  6700               	tstfsz	_bHex& (0+255),b
 18980  00234E  D005               	goto	l11460
 18981                           
 18982                           ; BSR set to: 1
 18983  002350  0E7F               	movlw	high STR_57
 18984  002352  0100               	movlb	0	; () banked
 18985  002354  6F9F               	movwf	(_printErrors$1424+1)& (0+255),b
 18986  002356  0EED               	movlw	low STR_57
 18987  002358  D004               	goto	L20
 18988  00235A                     l11460:
 18989                           
 18990                           ; BSR set to: 1
 18991  00235A  0E7F               	movlw	high STR_56
 18992  00235C  0100               	movlb	0	; () banked
 18993  00235E  6F9F               	movwf	(_printErrors$1424+1)& (0+255),b
 18994  002360  0E64               	movlw	low STR_56
 18995  002362                     L20:
 18996  002362  6F9E               	movwf	_printErrors$1424& (0+255),b
 18997                           
 18998                           ; BSR set to: 0
 18999  002364  0E01               	movlw	high _wrkbuf
 19000  002366  0100               	movlb	0	; () banked
 19001  002368  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19002  00236A  0E54               	movlw	low _wrkbuf
 19003  00236C  6F76               	movwf	?_sprintf& (0+255),b
 19004  00236E  C09E  F078         	movff	_printErrors$1424,?_sprintf+2
 19005  002372  C09F  F079         	movff	_printErrors$1424+1,?_sprintf+3
 19006  002376  CF75 F07A          	movff	3957,?_sprintf+4	;volatile
 19007  00237A  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 19008  00237C  EC28  F00B         	call	_sprintf	;wreg free
 19009                           
 19010                           ; BSR set to: 0
 19011                           ;main.c: 2515: putsUSART(wrkbuf);
 19012  002380  0E01               	movlw	high _wrkbuf
 19013  002382  0100               	movlb	0	; () banked
 19014  002384  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19015  002386  0E54               	movlw	low _wrkbuf
 19016  002388  6F61               	movwf	?_putsUSART& (0+255),b
 19017  00238A  ECEA  F028         	call	_putsUSART	;wreg free
 19018                           
 19019                           ;main.c: 2516: putsUSART((char *) "\r\n");
 19020  00238E  0E74               	movlw	high (STR_197+50)
 19021  002390  0100               	movlb	0	; () banked
 19022  002392  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19023  002394  0E8A               	movlw	low (STR_197+50)
 19024  002396  6F61               	movwf	?_putsUSART& (0+255),b
 19025  002398  ECEA  F028         	call	_putsUSART	;wreg free
 19026                           
 19027                           ;main.c: 2518: if (COMSTATbits.RXWARN) {
 19028  00239C  A274               	btfss	3956,1,c	;volatile
 19029  00239E  D007               	goto	l11472
 19030                           
 19031                           ;main.c: 2519: putsUSART((char *) "Receiver in Error State Warning (128 > RERRCNT ? 96)\
      +                          r\n");
 19032  0023A0  0E73               	movlw	high STR_203
 19033  0023A2  0100               	movlb	0	; () banked
 19034  0023A4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19035  0023A6  0E47               	movlw	low STR_203
 19036  0023A8  6F61               	movwf	?_putsUSART& (0+255),b
 19037  0023AA  ECEA  F028         	call	_putsUSART	;wreg free
 19038  0023AE                     l11472:
 19039                           
 19040                           ;main.c: 2520: }
 19041                           ;main.c: 2522: if (COMSTATbits.RXBP) {
 19042  0023AE  A674               	btfss	3956,3,c	;volatile
 19043  0023B0  D007               	goto	l11476
 19044                           
 19045                           ;main.c: 2523: putsUSART((char *) "Receiver in Error State Bus Passive (RERRCNT ? 128)\r
      +                          \n");
 19046  0023B2  0E73               	movlw	high STR_204
 19047  0023B4  0100               	movlb	0	; () banked
 19048  0023B6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19049  0023B8  0EEC               	movlw	low STR_204
 19050  0023BA  6F61               	movwf	?_putsUSART& (0+255),b
 19051  0023BC  ECEA  F028         	call	_putsUSART	;wreg free
 19052  0023C0                     l11476:
 19053                           
 19054                           ;main.c: 2524: }
 19055                           ;main.c: 2526: if (COMSTATbits.EWARN) {
 19056  0023C0  A074               	btfss	3956,0,c	;volatile
 19057  0023C2  D007               	goto	l1166
 19058                           
 19059                           ;main.c: 2527: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 19060  0023C4  0E74               	movlw	high STR_205
 19061  0023C6  0100               	movlb	0	; () banked
 19062  0023C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19063  0023CA  0EC2               	movlw	low STR_205
 19064  0023CC  6F61               	movwf	?_putsUSART& (0+255),b
 19065  0023CE  ECEA  F028         	call	_putsUSART	;wreg free
 19066  0023D2                     l1166:
 19067  0023D2  0012               	return	
 19068  0023D4                     __end_of_printErrors:
 19069                           	opt stack 0
 19070                           tblptru	equ	0xFF8
 19071                           tblptrh	equ	0xFF7
 19072                           tblptrl	equ	0xFF6
 19073                           tablat	equ	0xFF5
 19074                           prodh	equ	0xFF4
 19075                           prodl	equ	0xFF3
 19076                           intcon	equ	0xFF2
 19077                           indf0	equ	0xFEF
 19078                           postinc0	equ	0xFEE
 19079                           fsr0h	equ	0xFEA
 19080                           fsr0l	equ	0xFE9
 19081                           wreg	equ	0xFE8
 19082                           indf1	equ	0xFE7
 19083                           postinc1	equ	0xFE6
 19084                           postdec1	equ	0xFE5
 19085                           fsr1h	equ	0xFE2
 19086                           fsr1l	equ	0xFE1
 19087                           indf2	equ	0xFDF
 19088                           postinc2	equ	0xFDE
 19089                           postdec2	equ	0xFDD
 19090                           plusw2	equ	0xFDB
 19091                           fsr2h	equ	0xFDA
 19092                           fsr2l	equ	0xFD9
 19093                           status	equ	0xFD8
 19094                           
 19095 ;; *************** function _printStatistics *****************
 19096 ;; Defined at:
 19097 ;;		line 2447 in file "main.c"
 19098 ;; Parameters:    Size  Location     Type
 19099 ;;		None
 19100 ;; Auto vars:     Size  Location     Type
 19101 ;;		None
 19102 ;; Return value:  Size  Location     Type
 19103 ;;		None               void
 19104 ;; Registers used:
 19105 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19106 ;; Tracked objects:
 19107 ;;		On entry : F/1
 19108 ;;		On exit  : 0/0
 19109 ;;		Unchanged: 0/0
 19110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19111 ;;      Params:         0       0       0       0       0       0       0
 19112 ;;      Locals:         0       8       0       0       0       0       0
 19113 ;;      Temps:          0       0       0       0       0       0       0
 19114 ;;      Totals:         0       8       0       0       0       0       0
 19115 ;;Total ram usage:        8 bytes
 19116 ;; Hardware stack levels used:    1
 19117 ;; Hardware stack levels required when called:    5
 19118 ;; This function calls:
 19119 ;;		_putsUSART
 19120 ;;		_sprintf
 19121 ;; This function is called by:
 19122 ;;		_doModeVerbose
 19123 ;; This function uses a non-reentrant model
 19124 ;;
 19125                           
 19126                           	psect	text41
 19127  002DFE                     __ptext41:
 19128                           	opt stack 0
 19129  002DFE                     _printStatistics:
 19130                           	opt stack 24
 19131                           
 19132                           ; BSR set to: 1
 19133                           ;main.c: 2448: putsUSART((char *) "Sent CAN frames: ");
 19134                           
 19135                           ;incstack = 0
 19136                           ;incstack = 0
 19137  002DFE  0E7E               	movlw	high STR_160
 19138  002E00  0100               	movlb	0	; () banked
 19139  002E02  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19140  002E04  0E09               	movlw	low STR_160
 19141  002E06  6F61               	movwf	?_putsUSART& (0+255),b
 19142  002E08  ECEA  F028         	call	_putsUSART	;wreg free
 19143                           
 19144                           ;main.c: 2449: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames);
 19145  002E0C  0101               	movlb	1	; () banked
 19146  002E0E  6700               	tstfsz	_bHex& (0+255),b
 19147  002E10  D005               	goto	l11324
 19148                           
 19149                           ; BSR set to: 1
 19150  002E12  0E7F               	movlw	high STR_162
 19151  002E14  0100               	movlb	0	; () banked
 19152  002E16  6F95               	movwf	(_printStatistics$1366+1)& (0+255),b
 19153  002E18  0EE0               	movlw	low STR_162
 19154  002E1A  D004               	goto	L21
 19155  002E1C                     l11324:
 19156                           
 19157                           ; BSR set to: 1
 19158  002E1C  0E7F               	movlw	high STR_161
 19159  002E1E  0100               	movlb	0	; () banked
 19160  002E20  6F95               	movwf	(_printStatistics$1366+1)& (0+255),b
 19161  002E22  0E72               	movlw	low STR_161
 19162  002E24                     L21:
 19163  002E24  6F94               	movwf	_printStatistics$1366& (0+255),b
 19164                           
 19165                           ; BSR set to: 0
 19166  002E26  0E01               	movlw	high _wrkbuf
 19167  002E28  0100               	movlb	0	; () banked
 19168  002E2A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19169  002E2C  0E54               	movlw	low _wrkbuf
 19170  002E2E  6F76               	movwf	?_sprintf& (0+255),b
 19171  002E30  C094  F078         	movff	_printStatistics$1366,?_sprintf+2
 19172  002E34  C095  F079         	movff	_printStatistics$1366+1,?_sprintf+3
 19173  002E38  C0E1  F07A         	movff	_cntTxFrames,?_sprintf+4
 19174  002E3C  C0E2  F07B         	movff	_cntTxFrames+1,?_sprintf+5
 19175  002E40  C0E3  F07C         	movff	_cntTxFrames+2,?_sprintf+6
 19176  002E44  C0E4  F07D         	movff	_cntTxFrames+3,?_sprintf+7
 19177  002E48  EC28  F00B         	call	_sprintf	;wreg free
 19178                           
 19179                           ; BSR set to: 0
 19180                           ;main.c: 2450: putsUSART(wrkbuf);
 19181  002E4C  0E01               	movlw	high _wrkbuf
 19182  002E4E  0100               	movlb	0	; () banked
 19183  002E50  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19184  002E52  0E54               	movlw	low _wrkbuf
 19185  002E54  6F61               	movwf	?_putsUSART& (0+255),b
 19186  002E56  ECEA  F028         	call	_putsUSART	;wreg free
 19187                           
 19188                           ;main.c: 2451: putsUSART((char *) "\r\n");
 19189  002E5A  0E74               	movlw	high (STR_197+50)
 19190  002E5C  0100               	movlb	0	; () banked
 19191  002E5E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19192  002E60  0E8A               	movlw	low (STR_197+50)
 19193  002E62  6F61               	movwf	?_putsUSART& (0+255),b
 19194  002E64  ECEA  F028         	call	_putsUSART	;wreg free
 19195                           
 19196                           ;main.c: 2453: putsUSART((char *) "Sent CAN bytes: ");
 19197  002E68  0E7E               	movlw	high STR_164
 19198  002E6A  0100               	movlb	0	; () banked
 19199  002E6C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19200  002E6E  0E3D               	movlw	low STR_164
 19201  002E70  6F61               	movwf	?_putsUSART& (0+255),b
 19202  002E72  ECEA  F028         	call	_putsUSART	;wreg free
 19203                           
 19204                           ;main.c: 2454: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes);
 19205  002E76  0101               	movlb	1	; () banked
 19206  002E78  6700               	tstfsz	_bHex& (0+255),b
 19207  002E7A  D005               	goto	l11338
 19208                           
 19209                           ; BSR set to: 1
 19210  002E7C  0E7F               	movlw	high STR_162
 19211  002E7E  0100               	movlb	0	; () banked
 19212  002E80  6F97               	movwf	(_printStatistics$1372+1)& (0+255),b
 19213  002E82  0EE0               	movlw	low STR_162
 19214  002E84  D004               	goto	L22
 19215  002E86                     l11338:
 19216                           
 19217                           ; BSR set to: 1
 19218  002E86  0E7F               	movlw	high STR_161
 19219  002E88  0100               	movlb	0	; () banked
 19220  002E8A  6F97               	movwf	(_printStatistics$1372+1)& (0+255),b
 19221  002E8C  0E72               	movlw	low STR_161
 19222  002E8E                     L22:
 19223  002E8E  6F96               	movwf	_printStatistics$1372& (0+255),b
 19224                           
 19225                           ; BSR set to: 0
 19226  002E90  0E01               	movlw	high _wrkbuf
 19227  002E92  0100               	movlb	0	; () banked
 19228  002E94  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19229  002E96  0E54               	movlw	low _wrkbuf
 19230  002E98  6F76               	movwf	?_sprintf& (0+255),b
 19231  002E9A  C096  F078         	movff	_printStatistics$1372,?_sprintf+2
 19232  002E9E  C097  F079         	movff	_printStatistics$1372+1,?_sprintf+3
 19233  002EA2  C0DD  F07A         	movff	_cntTxBytes,?_sprintf+4
 19234  002EA6  C0DE  F07B         	movff	_cntTxBytes+1,?_sprintf+5
 19235  002EAA  C0DF  F07C         	movff	_cntTxBytes+2,?_sprintf+6
 19236  002EAE  C0E0  F07D         	movff	_cntTxBytes+3,?_sprintf+7
 19237  002EB2  EC28  F00B         	call	_sprintf	;wreg free
 19238                           
 19239                           ; BSR set to: 0
 19240                           ;main.c: 2455: putsUSART(wrkbuf);
 19241  002EB6  0E01               	movlw	high _wrkbuf
 19242  002EB8  0100               	movlb	0	; () banked
 19243  002EBA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19244  002EBC  0E54               	movlw	low _wrkbuf
 19245  002EBE  6F61               	movwf	?_putsUSART& (0+255),b
 19246  002EC0  ECEA  F028         	call	_putsUSART	;wreg free
 19247                           
 19248                           ;main.c: 2456: putsUSART((char *) "\r\n");
 19249  002EC4  0E74               	movlw	high (STR_197+50)
 19250  002EC6  0100               	movlb	0	; () banked
 19251  002EC8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19252  002ECA  0E8A               	movlw	low (STR_197+50)
 19253  002ECC  6F61               	movwf	?_putsUSART& (0+255),b
 19254  002ECE  ECEA  F028         	call	_putsUSART	;wreg free
 19255                           
 19256                           ;main.c: 2458: putsUSART((char *) "Received CAN frames: ");
 19257  002ED2  0E7D               	movlw	high STR_168
 19258  002ED4  0100               	movlb	0	; () banked
 19259  002ED6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19260  002ED8  0E1B               	movlw	low STR_168
 19261  002EDA  6F61               	movwf	?_putsUSART& (0+255),b
 19262  002EDC  ECEA  F028         	call	_putsUSART	;wreg free
 19263                           
 19264                           ;main.c: 2459: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames);
 19265  002EE0  0101               	movlb	1	; () banked
 19266  002EE2  6700               	tstfsz	_bHex& (0+255),b
 19267  002EE4  D005               	goto	l11352
 19268                           
 19269                           ; BSR set to: 1
 19270  002EE6  0E7F               	movlw	high STR_162
 19271  002EE8  0100               	movlb	0	; () banked
 19272  002EEA  6F99               	movwf	(_printStatistics$1378+1)& (0+255),b
 19273  002EEC  0EE0               	movlw	low STR_162
 19274  002EEE  D004               	goto	L23
 19275  002EF0                     l11352:
 19276                           
 19277                           ; BSR set to: 1
 19278  002EF0  0E7F               	movlw	high STR_161
 19279  002EF2  0100               	movlb	0	; () banked
 19280  002EF4  6F99               	movwf	(_printStatistics$1378+1)& (0+255),b
 19281  002EF6  0E72               	movlw	low STR_161
 19282  002EF8                     L23:
 19283  002EF8  6F98               	movwf	_printStatistics$1378& (0+255),b
 19284                           
 19285                           ; BSR set to: 0
 19286  002EFA  0E01               	movlw	high _wrkbuf
 19287  002EFC  0100               	movlb	0	; () banked
 19288  002EFE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19289  002F00  0E54               	movlw	low _wrkbuf
 19290  002F02  6F76               	movwf	?_sprintf& (0+255),b
 19291  002F04  C098  F078         	movff	_printStatistics$1378,?_sprintf+2
 19292  002F08  C099  F079         	movff	_printStatistics$1378+1,?_sprintf+3
 19293  002F0C  C0D9  F07A         	movff	_cntRxFrames,?_sprintf+4
 19294  002F10  C0DA  F07B         	movff	_cntRxFrames+1,?_sprintf+5
 19295  002F14  C0DB  F07C         	movff	_cntRxFrames+2,?_sprintf+6
 19296  002F18  C0DC  F07D         	movff	_cntRxFrames+3,?_sprintf+7
 19297  002F1C  EC28  F00B         	call	_sprintf	;wreg free
 19298                           
 19299                           ; BSR set to: 0
 19300                           ;main.c: 2460: putsUSART(wrkbuf);
 19301  002F20  0E01               	movlw	high _wrkbuf
 19302  002F22  0100               	movlb	0	; () banked
 19303  002F24  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19304  002F26  0E54               	movlw	low _wrkbuf
 19305  002F28  6F61               	movwf	?_putsUSART& (0+255),b
 19306  002F2A  ECEA  F028         	call	_putsUSART	;wreg free
 19307                           
 19308                           ;main.c: 2461: putsUSART((char *) "\r\n");
 19309  002F2E  0E74               	movlw	high (STR_197+50)
 19310  002F30  0100               	movlb	0	; () banked
 19311  002F32  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19312  002F34  0E8A               	movlw	low (STR_197+50)
 19313  002F36  6F61               	movwf	?_putsUSART& (0+255),b
 19314  002F38  ECEA  F028         	call	_putsUSART	;wreg free
 19315                           
 19316                           ;main.c: 2463: putsUSART((char *) "Received CAN bytes: ");
 19317  002F3C  0E7D               	movlw	high STR_172
 19318  002F3E  0100               	movlb	0	; () banked
 19319  002F40  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19320  002F42  0E31               	movlw	low STR_172
 19321  002F44  6F61               	movwf	?_putsUSART& (0+255),b
 19322  002F46  ECEA  F028         	call	_putsUSART	;wreg free
 19323                           
 19324                           ;main.c: 2464: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes);
 19325  002F4A  0101               	movlb	1	; () banked
 19326  002F4C  6700               	tstfsz	_bHex& (0+255),b
 19327  002F4E  D005               	goto	l11366
 19328                           
 19329                           ; BSR set to: 1
 19330  002F50  0E7F               	movlw	high STR_162
 19331  002F52  0100               	movlb	0	; () banked
 19332  002F54  6F9B               	movwf	(_printStatistics$1384+1)& (0+255),b
 19333  002F56  0EE0               	movlw	low STR_162
 19334  002F58  D004               	goto	L24
 19335  002F5A                     l11366:
 19336                           
 19337                           ; BSR set to: 1
 19338  002F5A  0E7F               	movlw	high STR_161
 19339  002F5C  0100               	movlb	0	; () banked
 19340  002F5E  6F9B               	movwf	(_printStatistics$1384+1)& (0+255),b
 19341  002F60  0E72               	movlw	low STR_161
 19342  002F62                     L24:
 19343  002F62  6F9A               	movwf	_printStatistics$1384& (0+255),b
 19344                           
 19345                           ; BSR set to: 0
 19346  002F64  0E01               	movlw	high _wrkbuf
 19347  002F66  0100               	movlb	0	; () banked
 19348  002F68  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19349  002F6A  0E54               	movlw	low _wrkbuf
 19350  002F6C  6F76               	movwf	?_sprintf& (0+255),b
 19351  002F6E  C09A  F078         	movff	_printStatistics$1384,?_sprintf+2
 19352  002F72  C09B  F079         	movff	_printStatistics$1384+1,?_sprintf+3
 19353  002F76  C0D5  F07A         	movff	_cntRxBytes,?_sprintf+4
 19354  002F7A  C0D6  F07B         	movff	_cntRxBytes+1,?_sprintf+5
 19355  002F7E  C0D7  F07C         	movff	_cntRxBytes+2,?_sprintf+6
 19356  002F82  C0D8  F07D         	movff	_cntRxBytes+3,?_sprintf+7
 19357  002F86  EC28  F00B         	call	_sprintf	;wreg free
 19358                           
 19359                           ; BSR set to: 0
 19360                           ;main.c: 2465: putsUSART(wrkbuf);
 19361  002F8A  0E01               	movlw	high _wrkbuf
 19362  002F8C  0100               	movlb	0	; () banked
 19363  002F8E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19364  002F90  0E54               	movlw	low _wrkbuf
 19365  002F92  6F61               	movwf	?_putsUSART& (0+255),b
 19366  002F94  ECEA  F028         	call	_putsUSART	;wreg free
 19367                           
 19368                           ;main.c: 2466: putsUSART((char *) "\r\n");
 19369  002F98  0E74               	movlw	high (STR_197+50)
 19370  002F9A  0100               	movlb	0	; () banked
 19371  002F9C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19372  002F9E  0E8A               	movlw	low (STR_197+50)
 19373  002FA0  6F61               	movwf	?_putsUSART& (0+255),b
 19374  002FA2  EFEA  F028         	goto	_putsUSART	;wreg free
 19375  002FA6                     __end_of_printStatistics:
 19376                           	opt stack 0
 19377                           tblptru	equ	0xFF8
 19378                           tblptrh	equ	0xFF7
 19379                           tblptrl	equ	0xFF6
 19380                           tablat	equ	0xFF5
 19381                           prodh	equ	0xFF4
 19382                           prodl	equ	0xFF3
 19383                           intcon	equ	0xFF2
 19384                           indf0	equ	0xFEF
 19385                           postinc0	equ	0xFEE
 19386                           fsr0h	equ	0xFEA
 19387                           fsr0l	equ	0xFE9
 19388                           wreg	equ	0xFE8
 19389                           indf1	equ	0xFE7
 19390                           postinc1	equ	0xFE6
 19391                           postdec1	equ	0xFE5
 19392                           fsr1h	equ	0xFE2
 19393                           fsr1l	equ	0xFE1
 19394                           indf2	equ	0xFDF
 19395                           postinc2	equ	0xFDE
 19396                           postdec2	equ	0xFDD
 19397                           plusw2	equ	0xFDB
 19398                           fsr2h	equ	0xFDA
 19399                           fsr2l	equ	0xFD9
 19400                           status	equ	0xFD8
 19401                           
 19402 ;; *************** function _atoi *****************
 19403 ;; Defined at:
 19404 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 19405 ;; Parameters:    Size  Location     Type
 19406 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 19407 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19408 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19409 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19410 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19411 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19412 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 19413 ;; Auto vars:     Size  Location     Type
 19414 ;;  a               2   11[BANK0 ] int 
 19415 ;;  sign            1   10[BANK0 ] unsigned char 
 19416 ;; Return value:  Size  Location     Type
 19417 ;;                  2    6[BANK0 ] int 
 19418 ;; Registers used:
 19419 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19420 ;; Tracked objects:
 19421 ;;		On entry : C/2
 19422 ;;		On exit  : F/0
 19423 ;;		Unchanged: 0/0
 19424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19425 ;;      Params:         0       2       0       0       0       0       0
 19426 ;;      Locals:         0       3       0       0       0       0       0
 19427 ;;      Temps:          0       2       0       0       0       0       0
 19428 ;;      Totals:         0       7       0       0       0       0       0
 19429 ;;Total ram usage:        7 bytes
 19430 ;; Hardware stack levels used:    1
 19431 ;; Hardware stack levels required when called:    4
 19432 ;; This function calls:
 19433 ;;		_isdigit
 19434 ;;		___wmul
 19435 ;; This function is called by:
 19436 ;;		_doModeVerbose
 19437 ;; This function uses a non-reentrant model
 19438 ;;
 19439                           
 19440                           	psect	text42
 19441  003AF4                     __ptext42:
 19442                           	opt stack 0
 19443  003AF4                     _atoi:
 19444                           	opt stack 25
 19445                           
 19446                           ;incstack = 0
 19447                           ;incstack = 0
 19448  003AF4  D003               	goto	l11276
 19449  003AF6                     l11274:
 19450  003AF6  0100               	movlb	0	; () banked
 19451  003AF8  4B66               	infsnz	atoi@s& (0+255),f,b
 19452  003AFA  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19453  003AFC                     l11276:
 19454  003AFC  0100               	movlb	0	; () banked
 19455  003AFE  D876               	call	PL22	;call to abstracted procedure
 19456  003B00  64EA               	cpfsgt	fsr0h,c
 19457  003B02  D003               	bra	u13977
 19458  003B04  6EEA               	movwf	fsr0h,c
 19459  003B06  50EF               	movf	indf0,w,c
 19460  003B08  D003               	bra	u13970
 19461  003B0A                     u13977:
 19462  003B0A  6EF7               	movwf	tblptrh,c
 19463  003B0C  0008               	tblrd		*
 19464  003B0E  50F5               	movf	tablat,w,c
 19465  003B10                     u13970:
 19466  003B10  0A20               	xorlw	32
 19467  003B12  E0F1               	bz	l11274
 19468  003B14  0100               	movlb	0	; () banked
 19469  003B16  D86A               	call	PL22	;call to abstracted procedure
 19470  003B18  64EA               	cpfsgt	fsr0h,c
 19471  003B1A  D003               	bra	u13997
 19472  003B1C  6EEA               	movwf	fsr0h,c
 19473  003B1E  50EF               	movf	indf0,w,c
 19474  003B20  D003               	bra	u13990
 19475  003B22                     u13997:
 19476  003B22  6EF7               	movwf	tblptrh,c
 19477  003B24  0008               	tblrd		*
 19478  003B26  50F5               	movf	tablat,w,c
 19479  003B28                     u13990:
 19480  003B28  0A09               	xorlw	9
 19481  003B2A  E0E5               	bz	l11274
 19482  003B2C  0100               	movlb	0	; () banked
 19483  003B2E  6B6B               	clrf	atoi@a& (0+255),b
 19484  003B30  6B6C               	clrf	(atoi@a+1)& (0+255),b
 19485  003B32  6B6A               	clrf	atoi@sign& (0+255),b
 19486                           
 19487                           ; BSR set to: 0
 19488  003B34  D85B               	call	PL22	;call to abstracted procedure
 19489  003B36  64EA               	cpfsgt	fsr0h,c
 19490  003B38  D003               	bra	u14017
 19491  003B3A  6EEA               	movwf	fsr0h,c
 19492  003B3C  50EF               	movf	indf0,w,c
 19493  003B3E  D003               	bra	u14010
 19494  003B40                     u14017:
 19495  003B40  6EF7               	movwf	tblptrh,c
 19496  003B42  0008               	tblrd		*
 19497  003B44  50F5               	movf	tablat,w,c
 19498  003B46                     u14010:
 19499  003B46  0A2D               	xorlw	45
 19500  003B48  E103               	bnz	l11284
 19501  003B4A  0100               	movlb	0	; () banked
 19502  003B4C  2B6A               	incf	atoi@sign& (0+255),f,b
 19503  003B4E  D00D               	goto	L25
 19504  003B50                     l11284:
 19505  003B50  0100               	movlb	0	; () banked
 19506  003B52  D84C               	call	PL22	;call to abstracted procedure
 19507  003B54  64EA               	cpfsgt	fsr0h,c
 19508  003B56  D003               	bra	u14037
 19509  003B58  6EEA               	movwf	fsr0h,c
 19510  003B5A  50EF               	movf	indf0,w,c
 19511  003B5C  D003               	bra	u14030
 19512  003B5E                     u14037:
 19513  003B5E  6EF7               	movwf	tblptrh,c
 19514  003B60  0008               	tblrd		*
 19515  003B62  50F5               	movf	tablat,w,c
 19516  003B64                     u14030:
 19517  003B64  0A2B               	xorlw	43
 19518  003B66  E121               	bnz	l11292
 19519  003B68                     l11286:
 19520  003B68  0100               	movlb	0	; () banked
 19521  003B6A                     L25:
 19522  003B6A  4B66               	infsnz	atoi@s& (0+255),f,b
 19523  003B6C  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19524  003B6E  D01D               	goto	l11292
 19525  003B70                     l11288:
 19526                           
 19527                           ; BSR set to: 0
 19528  003B70  C06B  F060         	movff	atoi@a,?___wmul
 19529  003B74  C06C  F061         	movff	atoi@a+1,?___wmul+1
 19530  003B78  6B63               	clrf	(?___wmul+3)& (0+255),b
 19531  003B7A  0E0A               	movlw	10
 19532  003B7C  6F62               	movwf	(?___wmul+2)& (0+255),b
 19533  003B7E  EC01  F02B         	call	___wmul	;wreg free
 19534  003B82  D834               	call	PL22	;call to abstracted procedure
 19535  003B84  64EA               	cpfsgt	fsr0h,c
 19536  003B86  D003               	bra	u14057
 19537  003B88  6EEA               	movwf	fsr0h,c
 19538  003B8A  50EF               	movf	indf0,w,c
 19539  003B8C  D003               	bra	u14050
 19540  003B8E                     u14057:
 19541  003B8E  6EF7               	movwf	tblptrh,c
 19542  003B90  0008               	tblrd		*
 19543  003B92  50F5               	movf	tablat,w,c
 19544  003B94                     u14050:
 19545  003B94  0100               	movlb	0	; () banked
 19546  003B96  2760               	addwf	?___wmul& (0+255),f,b
 19547  003B98  0E00               	movlw	0
 19548  003B9A  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 19549  003B9C  0ED0               	movlw	208
 19550  003B9E  2560               	addwf	?___wmul& (0+255),w,b
 19551  003BA0  6F6B               	movwf	atoi@a& (0+255),b
 19552  003BA2  0EFF               	movlw	255
 19553  003BA4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19554  003BA6  6F6C               	movwf	(atoi@a+1)& (0+255),b
 19555  003BA8  D7DF               	goto	l11286
 19556  003BAA                     l11292:
 19557  003BAA  0100               	movlb	0	; () banked
 19558  003BAC  D81F               	call	PL22	;call to abstracted procedure
 19559  003BAE  64EA               	cpfsgt	fsr0h,c
 19560  003BB0  D003               	bra	u14067
 19561  003BB2  6EEA               	movwf	fsr0h,c
 19562  003BB4  50EF               	movf	indf0,w,c
 19563  003BB6  D003               	bra	u14060
 19564  003BB8                     u14067:
 19565  003BB8  6EF7               	movwf	tblptrh,c
 19566  003BBA  0008               	tblrd		*
 19567  003BBC  50F5               	movf	tablat,w,c
 19568  003BBE                     u14060:
 19569  003BBE  EC73  F02B         	call	_isdigit
 19570  003BC2  E2D6               	bc	l11288
 19571                           
 19572                           ; BSR set to: 0
 19573  003BC4  516A               	movf	atoi@sign& (0+255),w,b
 19574  003BC6  E00D               	bz	l2012
 19575                           
 19576                           ; BSR set to: 0
 19577  003BC8  C06B  F068         	movff	atoi@a,??_atoi
 19578  003BCC  C06C  F069         	movff	atoi@a+1,??_atoi+1
 19579  003BD0  1F68               	comf	??_atoi& (0+255),f,b
 19580  003BD2  1F69               	comf	(??_atoi+1)& (0+255),f,b
 19581  003BD4  4B68               	infsnz	??_atoi& (0+255),f,b
 19582  003BD6  2B69               	incf	(??_atoi+1)& (0+255),f,b
 19583  003BD8  C068  F066         	movff	??_atoi,?_atoi
 19584  003BDC  C069  F067         	movff	??_atoi+1,?_atoi+1
 19585  003BE0  D004               	goto	l2013
 19586  003BE2                     l2012:
 19587                           
 19588                           ; BSR set to: 0
 19589  003BE2  C06B  F066         	movff	atoi@a,?_atoi
 19590  003BE6  C06C  F067         	movff	atoi@a+1,?_atoi+1
 19591  003BEA                     l2013:
 19592                           
 19593                           ; BSR set to: 0
 19594  003BEA  0012               	return	
 19595  003BEC                     __end_of_atoi:
 19596                           	opt stack 0
 19597  003BEC                     PL22:
 19598                           	opt stack 25
 19599  003BEC  5166               	movf	atoi@s& (0+255),w,b
 19600  003BEE  6EF6               	movwf	tblptrl,c
 19601  003BF0  6EE9               	movwf	fsr0l,c
 19602  003BF2  0E05               	movlw	(high __ramtop+-1)
 19603  003BF4  6EEA               	movwf	fsr0h,c
 19604  003BF6  5167               	movf	(atoi@s+1)& (0+255),w,b
 19605  003BF8  0012               	return	
 19606  003BFA                     __end_ofPL22:
 19607                           	opt stack 0
 19608                           tblptru	equ	0xFF8
 19609                           tblptrh	equ	0xFF7
 19610                           tblptrl	equ	0xFF6
 19611                           tablat	equ	0xFF5
 19612                           prodh	equ	0xFF4
 19613                           prodl	equ	0xFF3
 19614                           intcon	equ	0xFF2
 19615                           indf0	equ	0xFEF
 19616                           postinc0	equ	0xFEE
 19617                           fsr0h	equ	0xFEA
 19618                           fsr0l	equ	0xFE9
 19619                           wreg	equ	0xFE8
 19620                           indf1	equ	0xFE7
 19621                           postinc1	equ	0xFE6
 19622                           postdec1	equ	0xFE5
 19623                           fsr1h	equ	0xFE2
 19624                           fsr1l	equ	0xFE1
 19625                           indf2	equ	0xFDF
 19626                           postinc2	equ	0xFDE
 19627                           postdec2	equ	0xFDD
 19628                           plusw2	equ	0xFDB
 19629                           fsr2h	equ	0xFDA
 19630                           fsr2l	equ	0xFD9
 19631                           status	equ	0xFD8
 19632                           
 19633 ;; *************** function _strtok *****************
 19634 ;; Defined at:
 19635 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 19636 ;; Parameters:    Size  Location     Type
 19637 ;;  s1              2   12[BANK0 ] PTR unsigned char 
 19638 ;;		 -> NULL(0), cmdbuf(80), 
 19639 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
 19640 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19641 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19642 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19643 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19644 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19645 ;;		 -> STR_31(2), STR_30(2), 
 19646 ;; Auto vars:     Size  Location     Type
 19647 ;;		None
 19648 ;; Return value:  Size  Location     Type
 19649 ;;                  2   12[BANK0 ] PTR unsigned char 
 19650 ;; Registers used:
 19651 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19652 ;; Tracked objects:
 19653 ;;		On entry : F/0
 19654 ;;		On exit  : F/0
 19655 ;;		Unchanged: 0/0
 19656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19657 ;;      Params:         0       4       0       0       0       0       0
 19658 ;;      Locals:         0       0       0       0       0       0       0
 19659 ;;      Temps:          0       0       0       0       0       0       0
 19660 ;;      Totals:         0       4       0       0       0       0       0
 19661 ;;Total ram usage:        4 bytes
 19662 ;; Hardware stack levels used:    1
 19663 ;; Hardware stack levels required when called:    5
 19664 ;; This function calls:
 19665 ;;		_strspn
 19666 ;;		_strcspn
 19667 ;; This function is called by:
 19668 ;;		_doModeVerbose
 19669 ;; This function uses a non-reentrant model
 19670 ;;
 19671                           
 19672                           	psect	text43
 19673  0049C8                     __ptext43:
 19674                           	opt stack 0
 19675  0049C8                     _strtok:
 19676                           	opt stack 24
 19677                           
 19678                           ; BSR set to: 0
 19679                           
 19680                           ; BSR set to: 0
 19681                           ;incstack = 0
 19682                           ;incstack = 0
 19683  0049C8  516D               	movf	(strtok@s1+1)& (0+255),w,b
 19684  0049CA  116C               	iorwf	strtok@s1& (0+255),w,b
 19685  0049CC  E104               	bnz	l11254
 19686                           
 19687                           ; BSR set to: 0
 19688  0049CE  C03B  F06C         	movff	strtok@sp,strtok@s1
 19689  0049D2  C03C  F06D         	movff	strtok@sp+1,strtok@s1+1
 19690  0049D6                     l11254:
 19691                           
 19692                           ; BSR set to: 0
 19693  0049D6  516D               	movf	(strtok@s1+1)& (0+255),w,b
 19694  0049D8  116C               	iorwf	strtok@s1& (0+255),w,b
 19695  0049DA  E016               	bz	L26
 19696                           
 19697                           ; BSR set to: 0
 19698                           
 19699                           ; BSR set to: 0
 19700  0049DC  C06C  F066         	movff	strtok@s1,?_strspn
 19701  0049E0  C06D  F067         	movff	strtok@s1+1,?_strspn+1
 19702  0049E4  C06E  F068         	movff	strtok@s2,?_strspn+2
 19703  0049E8  C06F  F069         	movff	strtok@s2+1,?_strspn+3
 19704  0049EC  ECCE  F029         	call	_strspn	;wreg free
 19705  0049F0  5166               	movf	?_strspn& (0+255),w,b
 19706  0049F2  276C               	addwf	strtok@s1& (0+255),f,b
 19707  0049F4  5167               	movf	(?_strspn+1)& (0+255),w,b
 19708  0049F6  236D               	addwfc	(strtok@s1+1)& (0+255),f,b
 19709                           
 19710                           ; BSR set to: 0
 19711  0049F8  C06C  FFD9         	movff	strtok@s1,fsr2l
 19712  0049FC  C06D  FFDA         	movff	strtok@s1+1,fsr2h
 19713  004A00  50DF               	movf	indf2,w,c
 19714  004A02  E105               	bnz	l11264
 19715                           
 19716                           ; BSR set to: 0
 19717  004A04  6A3B               	clrf	strtok@sp,c
 19718  004A06  6A3C               	clrf	strtok@sp+1,c
 19719  004A08                     L26:
 19720  004A08  6B6C               	clrf	?_strtok& (0+255),b
 19721  004A0A  6B6D               	clrf	(?_strtok+1)& (0+255),b
 19722  004A0C  D025               	goto	l2505
 19723  004A0E                     l11264:
 19724                           
 19725                           ; BSR set to: 0
 19726  004A0E  C06C  F066         	movff	strtok@s1,?_strcspn
 19727  004A12  C06D  F067         	movff	strtok@s1+1,?_strcspn+1
 19728  004A16  C06E  F068         	movff	strtok@s2,?_strcspn+2
 19729  004A1A  C06F  F069         	movff	strtok@s2+1,?_strcspn+3
 19730  004A1E  ECAC  F029         	call	_strcspn	;wreg free
 19731  004A22  5166               	movf	?_strcspn& (0+255),w,b
 19732  004A24  256C               	addwf	strtok@s1& (0+255),w,b
 19733  004A26  6E3B               	movwf	strtok@sp,c
 19734  004A28  5167               	movf	(?_strcspn+1)& (0+255),w,b
 19735  004A2A  216D               	addwfc	(strtok@s1+1)& (0+255),w,b
 19736  004A2C  6E3C               	movwf	strtok@sp+1,c
 19737                           
 19738                           ; BSR set to: 0
 19739  004A2E  C03B  FFD9         	movff	strtok@sp,fsr2l
 19740  004A32  C03C  FFDA         	movff	strtok@sp+1,fsr2h
 19741  004A36  50DF               	movf	indf2,w,c
 19742  004A38  E009               	bz	l2507
 19743                           
 19744                           ; BSR set to: 0
 19745  004A3A  C03B  FFD9         	movff	strtok@sp,fsr2l
 19746  004A3E  C03C  FFDA         	movff	strtok@sp+1,fsr2h
 19747  004A42  0E00               	movlw	0
 19748  004A44  6EDF               	movwf	indf2,c
 19749                           
 19750                           ; BSR set to: 0
 19751  004A46  4A3B               	infsnz	strtok@sp,f,c
 19752  004A48  2A3C               	incf	strtok@sp+1,f,c
 19753  004A4A  D002               	goto	l2508
 19754  004A4C                     l2507:
 19755                           
 19756                           ; BSR set to: 0
 19757  004A4C  6A3B               	clrf	strtok@sp,c
 19758  004A4E  6A3C               	clrf	strtok@sp+1,c
 19759  004A50                     l2508:
 19760                           
 19761                           ; BSR set to: 0
 19762  004A50  C06C  F06C         	movff	strtok@s1,?_strtok
 19763  004A54  C06D  F06D         	movff	strtok@s1+1,?_strtok+1
 19764  004A58                     l2505:
 19765                           
 19766                           ; BSR set to: 0
 19767  004A58  0012               	return	
 19768  004A5A                     __end_of_strtok:
 19769                           	opt stack 0
 19770                           tblptru	equ	0xFF8
 19771                           tblptrh	equ	0xFF7
 19772                           tblptrl	equ	0xFF6
 19773                           tablat	equ	0xFF5
 19774                           prodh	equ	0xFF4
 19775                           prodl	equ	0xFF3
 19776                           intcon	equ	0xFF2
 19777                           indf0	equ	0xFEF
 19778                           postinc0	equ	0xFEE
 19779                           fsr0h	equ	0xFEA
 19780                           fsr0l	equ	0xFE9
 19781                           wreg	equ	0xFE8
 19782                           indf1	equ	0xFE7
 19783                           postinc1	equ	0xFE6
 19784                           postdec1	equ	0xFE5
 19785                           fsr1h	equ	0xFE2
 19786                           fsr1l	equ	0xFE1
 19787                           indf2	equ	0xFDF
 19788                           postinc2	equ	0xFDE
 19789                           postdec2	equ	0xFDD
 19790                           plusw2	equ	0xFDB
 19791                           fsr2h	equ	0xFDA
 19792                           fsr2l	equ	0xFD9
 19793                           status	equ	0xFD8
 19794                           
 19795 ;; *************** function _strcspn *****************
 19796 ;; Defined at:
 19797 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 19798 ;; Parameters:    Size  Location     Type
 19799 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19800 ;;		 -> NULL(0), cmdbuf(80), 
 19801 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19802 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19803 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19804 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19805 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19806 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19807 ;;		 -> STR_31(2), STR_30(2), 
 19808 ;; Auto vars:     Size  Location     Type
 19809 ;;  i               2   10[BANK0 ] unsigned int 
 19810 ;; Return value:  Size  Location     Type
 19811 ;;                  2    6[BANK0 ] unsigned int 
 19812 ;; Registers used:
 19813 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19814 ;; Tracked objects:
 19815 ;;		On entry : F/0
 19816 ;;		On exit  : F/0
 19817 ;;		Unchanged: 0/0
 19818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19819 ;;      Params:         0       4       0       0       0       0       0
 19820 ;;      Locals:         0       2       0       0       0       0       0
 19821 ;;      Temps:          0       0       0       0       0       0       0
 19822 ;;      Totals:         0       6       0       0       0       0       0
 19823 ;;Total ram usage:        6 bytes
 19824 ;; Hardware stack levels used:    1
 19825 ;; Hardware stack levels required when called:    4
 19826 ;; This function calls:
 19827 ;;		_strchr
 19828 ;; This function is called by:
 19829 ;;		_strtok
 19830 ;; This function uses a non-reentrant model
 19831 ;;
 19832                           
 19833                           	psect	text44
 19834  005358                     __ptext44:
 19835                           	opt stack 0
 19836  005358                     _strcspn:
 19837                           	opt stack 24
 19838                           
 19839                           ; BSR set to: 0
 19840                           
 19841                           ; BSR set to: 0
 19842                           ;incstack = 0
 19843                           ;incstack = 0
 19844  005358  6B6A               	clrf	strcspn@i& (0+255),b
 19845  00535A  6B6B               	clrf	(strcspn@i+1)& (0+255),b
 19846  00535C  D004               	goto	l12974
 19847  00535E                     l12972:
 19848                           
 19849                           ; BSR set to: 0
 19850  00535E  4B66               	infsnz	strcspn@s1& (0+255),f,b
 19851  005360  2B67               	incf	(strcspn@s1+1)& (0+255),f,b
 19852  005362  4B6A               	infsnz	strcspn@i& (0+255),f,b
 19853  005364  2B6B               	incf	(strcspn@i+1)& (0+255),f,b
 19854  005366                     l12974:
 19855                           
 19856                           ; BSR set to: 0
 19857  005366  C066  FFD9         	movff	strcspn@s1,fsr2l
 19858  00536A  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 19859  00536E  50DF               	movf	indf2,w,c
 19860  005370  E010               	bz	l2532
 19861                           
 19862                           ; BSR set to: 0
 19863  005372  C068  F060         	movff	strcspn@s2,?_strchr
 19864  005376  C069  F061         	movff	strcspn@s2+1,?_strchr+1
 19865  00537A  C066  FFD9         	movff	strcspn@s1,fsr2l
 19866  00537E  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 19867  005382  50DF               	movf	indf2,w,c
 19868  005384  6F62               	movwf	(?_strchr+2)& (0+255),b
 19869  005386  6B63               	clrf	(?_strchr+3)& (0+255),b
 19870  005388  ECFE  F027         	call	_strchr	;wreg free
 19871  00538C  5161               	movf	(?_strchr+1)& (0+255),w,b
 19872  00538E  1160               	iorwf	?_strchr& (0+255),w,b
 19873  005390  E0E6               	bz	l12972
 19874  005392                     l2532:
 19875                           
 19876                           ; BSR set to: 0
 19877  005392  C06A  F066         	movff	strcspn@i,?_strcspn
 19878  005396  C06B  F067         	movff	strcspn@i+1,?_strcspn+1
 19879                           
 19880                           ; BSR set to: 0
 19881  00539A  0012               	return	
 19882  00539C                     __end_of_strcspn:
 19883                           	opt stack 0
 19884                           tblptru	equ	0xFF8
 19885                           tblptrh	equ	0xFF7
 19886                           tblptrl	equ	0xFF6
 19887                           tablat	equ	0xFF5
 19888                           prodh	equ	0xFF4
 19889                           prodl	equ	0xFF3
 19890                           intcon	equ	0xFF2
 19891                           indf0	equ	0xFEF
 19892                           postinc0	equ	0xFEE
 19893                           fsr0h	equ	0xFEA
 19894                           fsr0l	equ	0xFE9
 19895                           wreg	equ	0xFE8
 19896                           indf1	equ	0xFE7
 19897                           postinc1	equ	0xFE6
 19898                           postdec1	equ	0xFE5
 19899                           fsr1h	equ	0xFE2
 19900                           fsr1l	equ	0xFE1
 19901                           indf2	equ	0xFDF
 19902                           postinc2	equ	0xFDE
 19903                           postdec2	equ	0xFDD
 19904                           plusw2	equ	0xFDB
 19905                           fsr2h	equ	0xFDA
 19906                           fsr2l	equ	0xFD9
 19907                           status	equ	0xFD8
 19908                           
 19909 ;; *************** function _strspn *****************
 19910 ;; Defined at:
 19911 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 19912 ;; Parameters:    Size  Location     Type
 19913 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19914 ;;		 -> NULL(0), cmdbuf(80), 
 19915 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19916 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19917 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19918 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19919 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19920 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19921 ;;		 -> STR_31(2), STR_30(2), 
 19922 ;; Auto vars:     Size  Location     Type
 19923 ;;  i               2   10[BANK0 ] unsigned int 
 19924 ;; Return value:  Size  Location     Type
 19925 ;;                  2    6[BANK0 ] unsigned int 
 19926 ;; Registers used:
 19927 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19928 ;; Tracked objects:
 19929 ;;		On entry : F/0
 19930 ;;		On exit  : F/0
 19931 ;;		Unchanged: 0/0
 19932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19933 ;;      Params:         0       4       0       0       0       0       0
 19934 ;;      Locals:         0       2       0       0       0       0       0
 19935 ;;      Temps:          0       0       0       0       0       0       0
 19936 ;;      Totals:         0       6       0       0       0       0       0
 19937 ;;Total ram usage:        6 bytes
 19938 ;; Hardware stack levels used:    1
 19939 ;; Hardware stack levels required when called:    4
 19940 ;; This function calls:
 19941 ;;		_strchr
 19942 ;; This function is called by:
 19943 ;;		_strtok
 19944 ;; This function uses a non-reentrant model
 19945 ;;
 19946                           
 19947                           	psect	text45
 19948  00539C                     __ptext45:
 19949                           	opt stack 0
 19950  00539C                     _strspn:
 19951                           	opt stack 24
 19952                           
 19953                           ; BSR set to: 0
 19954                           
 19955                           ; BSR set to: 0
 19956                           ;incstack = 0
 19957                           ;incstack = 0
 19958  00539C  6B6A               	clrf	strspn@i& (0+255),b
 19959  00539E  6B6B               	clrf	(strspn@i+1)& (0+255),b
 19960  0053A0  D004               	goto	l12966
 19961  0053A2                     l12964:
 19962                           
 19963                           ; BSR set to: 0
 19964  0053A2  4B66               	infsnz	strspn@s1& (0+255),f,b
 19965  0053A4  2B67               	incf	(strspn@s1+1)& (0+255),f,b
 19966  0053A6  4B6A               	infsnz	strspn@i& (0+255),f,b
 19967  0053A8  2B6B               	incf	(strspn@i+1)& (0+255),f,b
 19968  0053AA                     l12966:
 19969                           
 19970                           ; BSR set to: 0
 19971  0053AA  C066  FFD9         	movff	strspn@s1,fsr2l
 19972  0053AE  C067  FFDA         	movff	strspn@s1+1,fsr2h
 19973  0053B2  50DF               	movf	indf2,w,c
 19974  0053B4  E010               	bz	l2551
 19975                           
 19976                           ; BSR set to: 0
 19977  0053B6  C068  F060         	movff	strspn@s2,?_strchr
 19978  0053BA  C069  F061         	movff	strspn@s2+1,?_strchr+1
 19979  0053BE  C066  FFD9         	movff	strspn@s1,fsr2l
 19980  0053C2  C067  FFDA         	movff	strspn@s1+1,fsr2h
 19981  0053C6  50DF               	movf	indf2,w,c
 19982  0053C8  6F62               	movwf	(?_strchr+2)& (0+255),b
 19983  0053CA  6B63               	clrf	(?_strchr+3)& (0+255),b
 19984  0053CC  ECFE  F027         	call	_strchr	;wreg free
 19985  0053D0  5161               	movf	(?_strchr+1)& (0+255),w,b
 19986  0053D2  1160               	iorwf	?_strchr& (0+255),w,b
 19987  0053D4  E1E6               	bnz	l12964
 19988  0053D6                     l2551:
 19989                           
 19990                           ; BSR set to: 0
 19991  0053D6  C06A  F066         	movff	strspn@i,?_strspn
 19992  0053DA  C06B  F067         	movff	strspn@i+1,?_strspn+1
 19993                           
 19994                           ; BSR set to: 0
 19995  0053DE  0012               	return	
 19996  0053E0                     __end_of_strspn:
 19997                           	opt stack 0
 19998                           tblptru	equ	0xFF8
 19999                           tblptrh	equ	0xFF7
 20000                           tblptrl	equ	0xFF6
 20001                           tablat	equ	0xFF5
 20002                           prodh	equ	0xFF4
 20003                           prodl	equ	0xFF3
 20004                           intcon	equ	0xFF2
 20005                           indf0	equ	0xFEF
 20006                           postinc0	equ	0xFEE
 20007                           fsr0h	equ	0xFEA
 20008                           fsr0l	equ	0xFE9
 20009                           wreg	equ	0xFE8
 20010                           indf1	equ	0xFE7
 20011                           postinc1	equ	0xFE6
 20012                           postdec1	equ	0xFE5
 20013                           fsr1h	equ	0xFE2
 20014                           fsr1l	equ	0xFE1
 20015                           indf2	equ	0xFDF
 20016                           postinc2	equ	0xFDE
 20017                           postdec2	equ	0xFDD
 20018                           plusw2	equ	0xFDB
 20019                           fsr2h	equ	0xFDA
 20020                           fsr2l	equ	0xFD9
 20021                           status	equ	0xFD8
 20022                           
 20023 ;; *************** function _strchr *****************
 20024 ;; Defined at:
 20025 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 20026 ;; Parameters:    Size  Location     Type
 20027 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 20028 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 20029 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 20030 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 20031 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 20032 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20033 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 20034 ;;  chr             2    2[BANK0 ] int 
 20035 ;; Auto vars:     Size  Location     Type
 20036 ;;		None
 20037 ;; Return value:  Size  Location     Type
 20038 ;;                  2    0[BANK0 ] PTR unsigned char 
 20039 ;; Registers used:
 20040 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20041 ;; Tracked objects:
 20042 ;;		On entry : F/0
 20043 ;;		On exit  : F/0
 20044 ;;		Unchanged: 0/0
 20045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20046 ;;      Params:         0       4       0       0       0       0       0
 20047 ;;      Locals:         0       0       0       0       0       0       0
 20048 ;;      Temps:          0       2       0       0       0       0       0
 20049 ;;      Totals:         0       6       0       0       0       0       0
 20050 ;;Total ram usage:        6 bytes
 20051 ;; Hardware stack levels used:    1
 20052 ;; Hardware stack levels required when called:    3
 20053 ;; This function calls:
 20054 ;;		Nothing
 20055 ;; This function is called by:
 20056 ;;		_doModeVerbose
 20057 ;;		_strcspn
 20058 ;;		_strspn
 20059 ;; This function uses a non-reentrant model
 20060 ;;
 20061                           
 20062                           	psect	text46
 20063  004FFC                     __ptext46:
 20064                           	opt stack 0
 20065  004FFC                     _strchr:
 20066                           	opt stack 26
 20067  004FFC                     l2453:
 20068                           
 20069                           ; BSR set to: 0
 20070  004FFC  0100               	movlb	0	; () banked
 20071  004FFE  5160               	movf	strchr@ptr& (0+255),w,b
 20072  005000  6EF6               	movwf	tblptrl,c
 20073  005002  6EE9               	movwf	fsr0l,c
 20074  005004  0E05               	movlw	(high __ramtop+-1)
 20075  005006  6EEA               	movwf	fsr0h,c
 20076  005008  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20077  00500A  64EA               	cpfsgt	fsr0h,c
 20078  00500C  D003               	bra	u14327
 20079  00500E  6EEA               	movwf	fsr0h,c
 20080  005010  50EF               	movf	indf0,w,c
 20081  005012  D003               	bra	u14320
 20082  005014                     u14327:
 20083  005014  6EF7               	movwf	tblptrh,c
 20084  005016  0008               	tblrd		*
 20085  005018  50F5               	movf	tablat,w,c
 20086  00501A                     u14320:
 20087  00501A  0100               	movlb	0	; () banked
 20088  00501C  1962               	xorwf	strchr@chr& (0+255),w,b
 20089  00501E  E105               	bnz	l11538
 20090                           
 20091                           ; BSR set to: 0
 20092  005020  C060  F060         	movff	strchr@ptr,?_strchr
 20093  005024  C061  F061         	movff	strchr@ptr+1,?_strchr+1
 20094  005028  D019               	goto	l2455
 20095  00502A                     l11538:
 20096                           
 20097                           ; BSR set to: 0
 20098  00502A  5160               	movf	strchr@ptr& (0+255),w,b
 20099  00502C  6F64               	movwf	??_strchr& (0+255),b
 20100  00502E  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20101  005030  6F65               	movwf	(??_strchr+1)& (0+255),b
 20102  005032  4B60               	infsnz	strchr@ptr& (0+255),f,b
 20103  005034  2B61               	incf	(strchr@ptr+1)& (0+255),f,b
 20104  005036  5164               	movf	??_strchr& (0+255),w,b
 20105  005038  6EF6               	movwf	tblptrl,c
 20106  00503A  6EE9               	movwf	fsr0l,c
 20107  00503C  0E05               	movlw	(high __ramtop+-1)
 20108  00503E  6EEA               	movwf	fsr0h,c
 20109  005040  5165               	movf	(??_strchr+1)& (0+255),w,b
 20110  005042  64EA               	cpfsgt	fsr0h,c
 20111  005044  D003               	bra	u14347
 20112  005046  6EEA               	movwf	fsr0h,c
 20113  005048  50EF               	movf	indf0,w,c
 20114  00504A  D003               	bra	u14340
 20115  00504C                     u14347:
 20116  00504C  6EF7               	movwf	tblptrh,c
 20117  00504E  0008               	tblrd		*
 20118  005050  50F5               	movf	tablat,w,c
 20119  005052                     u14340:
 20120  005052  0900               	iorlw	0
 20121  005054  E1D3               	bnz	l2453
 20122  005056  0100               	movlb	0	; () banked
 20123  005058  6B60               	clrf	?_strchr& (0+255),b
 20124  00505A  6B61               	clrf	(?_strchr+1)& (0+255),b
 20125  00505C                     l2455:
 20126                           
 20127                           ; BSR set to: 0
 20128  00505C  0012               	return	
 20129  00505E                     __end_of_strchr:
 20130                           	opt stack 0
 20131                           tblptru	equ	0xFF8
 20132                           tblptrh	equ	0xFF7
 20133                           tblptrl	equ	0xFF6
 20134                           tablat	equ	0xFF5
 20135                           prodh	equ	0xFF4
 20136                           prodl	equ	0xFF3
 20137                           intcon	equ	0xFF2
 20138                           indf0	equ	0xFEF
 20139                           postinc0	equ	0xFEE
 20140                           fsr0h	equ	0xFEA
 20141                           fsr0l	equ	0xFE9
 20142                           wreg	equ	0xFE8
 20143                           indf1	equ	0xFE7
 20144                           postinc1	equ	0xFE6
 20145                           postdec1	equ	0xFE5
 20146                           fsr1h	equ	0xFE2
 20147                           fsr1l	equ	0xFE1
 20148                           indf2	equ	0xFDF
 20149                           postinc2	equ	0xFDE
 20150                           postdec2	equ	0xFDD
 20151                           plusw2	equ	0xFDB
 20152                           fsr2h	equ	0xFDA
 20153                           fsr2l	equ	0xFD9
 20154                           status	equ	0xFD8
 20155                           
 20156 ;; *************** function _stristr *****************
 20157 ;; Defined at:
 20158 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 20159 ;; Parameters:    Size  Location     Type
 20160 ;;  s1              2   13[BANK0 ] PTR const unsigned char 
 20161 ;;		 -> NULL(0), cmdbuf(80), 
 20162 ;;  s2              2   15[BANK0 ] PTR const unsigned char 
 20163 ;;		 -> STR_129(6), STR_128(8), STR_126(6), STR_124(5), 
 20164 ;;		 -> STR_122(8), STR_121(6), STR_120(9), STR_118(11), 
 20165 ;;		 -> STR_116(8), STR_114(4), STR_113(5), STR_100(5), 
 20166 ;;		 -> STR_87(7), STR_81(5), STR_72(5), STR_49(5), 
 20167 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 20168 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20169 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20170 ;;		 -> STR_8(5), STR_6(5), 
 20171 ;; Auto vars:     Size  Location     Type
 20172 ;;		None
 20173 ;; Return value:  Size  Location     Type
 20174 ;;                  2   13[BANK0 ] PTR unsigned char 
 20175 ;; Registers used:
 20176 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20177 ;; Tracked objects:
 20178 ;;		On entry : F/0
 20179 ;;		On exit  : F/0
 20180 ;;		Unchanged: 0/0
 20181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20182 ;;      Params:         0       4       0       0       0       0       0
 20183 ;;      Locals:         0       0       0       0       0       0       0
 20184 ;;      Temps:          0       0       0       0       0       0       0
 20185 ;;      Totals:         0       4       0       0       0       0       0
 20186 ;;Total ram usage:        4 bytes
 20187 ;; Hardware stack levels used:    1
 20188 ;; Hardware stack levels required when called:    5
 20189 ;; This function calls:
 20190 ;;		_strlen
 20191 ;;		_strnicmp
 20192 ;;		_strichr
 20193 ;; This function is called by:
 20194 ;;		_doModeVerbose
 20195 ;; This function uses a non-reentrant model
 20196 ;;
 20197                           
 20198                           	psect	text47
 20199  004C78                     __ptext47:
 20200                           	opt stack 0
 20201  004C78                     _stristr:
 20202                           	opt stack 24
 20203                           
 20204                           ; BSR set to: 0
 20205                           
 20206                           ; BSR set to: 0
 20207                           ;incstack = 0
 20208                           ;incstack = 0
 20209  004C78  D02F               	goto	l11242
 20210  004C7A                     l11236:
 20211                           
 20212                           ; BSR set to: 0
 20213  004C7A  C06D  F064         	movff	stristr@s1,?_strnicmp
 20214  004C7E  C06E  F065         	movff	stristr@s1+1,?_strnicmp+1
 20215  004C82  C06F  F066         	movff	stristr@s2,?_strnicmp+2
 20216  004C86  C070  F067         	movff	stristr@s2+1,?_strnicmp+3
 20217  004C8A  C06F  F060         	movff	stristr@s2,?_strlen
 20218  004C8E  C070  F061         	movff	stristr@s2+1,?_strlen+1
 20219  004C92  EC11  F02A         	call	_strlen	;wreg free
 20220  004C96  C060  F068         	movff	?_strlen,?_strnicmp+4
 20221  004C9A  C061  F069         	movff	?_strlen+1,?_strnicmp+5
 20222  004C9E  EC9A  F027         	call	_strnicmp	;wreg free
 20223  004CA2  5165               	movf	(?_strnicmp+1)& (0+255),w,b
 20224  004CA4  1164               	iorwf	?_strnicmp& (0+255),w,b
 20225  004CA6  E105               	bnz	l11240
 20226                           
 20227                           ; BSR set to: 0
 20228  004CA8  C06D  F06D         	movff	stristr@s1,?_stristr
 20229  004CAC  C06E  F06E         	movff	stristr@s1+1,?_stristr+1
 20230  004CB0  D01E               	goto	l2474
 20231  004CB2                     l11240:
 20232                           
 20233                           ; BSR set to: 0
 20234  004CB2  296D               	incf	stristr@s1& (0+255),w,b
 20235  004CB4  6F61               	movwf	?_strichr& (0+255),b
 20236  004CB6  0E00               	movlw	0
 20237  004CB8  216E               	addwfc	(stristr@s1+1)& (0+255),w,b
 20238  004CBA  6F62               	movwf	(?_strichr+1)& (0+255),b
 20239  004CBC  C06F  FFF6         	movff	stristr@s2,tblptrl
 20240  004CC0  C070  FFF7         	movff	stristr@s2+1,tblptrh
 20241  004CC4  0008               	tblrd		*
 20242  004CC6  50F5               	movf	tablat,w,c
 20243  004CC8  6F63               	movwf	(?_strichr+2)& (0+255),b
 20244  004CCA  6B64               	clrf	(?_strichr+3)& (0+255),b
 20245  004CCC  EC70  F02A         	call	_strichr	;wreg free
 20246  004CD0  C061  F06D         	movff	?_strichr,stristr@s1
 20247  004CD4  C062  F06E         	movff	?_strichr+1,stristr@s1+1
 20248  004CD8                     l11242:
 20249                           
 20250                           ; BSR set to: 0
 20251  004CD8  516E               	movf	(stristr@s1+1)& (0+255),w,b
 20252  004CDA  116D               	iorwf	stristr@s1& (0+255),w,b
 20253  004CDC  E006               	bz	l2477
 20254                           
 20255                           ; BSR set to: 0
 20256  004CDE  C06D  FFD9         	movff	stristr@s1,fsr2l
 20257  004CE2  C06E  FFDA         	movff	stristr@s1+1,fsr2h
 20258  004CE6  50DF               	movf	indf2,w,c
 20259  004CE8  E1C8               	bnz	l11236
 20260  004CEA                     l2477:
 20261                           
 20262                           ; BSR set to: 0
 20263  004CEA  6B6D               	clrf	?_stristr& (0+255),b
 20264  004CEC  6B6E               	clrf	(?_stristr+1)& (0+255),b
 20265  004CEE                     l2474:
 20266                           
 20267                           ; BSR set to: 0
 20268  004CEE  0012               	return	
 20269  004CF0                     __end_of_stristr:
 20270                           	opt stack 0
 20271                           tblptru	equ	0xFF8
 20272                           tblptrh	equ	0xFF7
 20273                           tblptrl	equ	0xFF6
 20274                           tablat	equ	0xFF5
 20275                           prodh	equ	0xFF4
 20276                           prodl	equ	0xFF3
 20277                           intcon	equ	0xFF2
 20278                           indf0	equ	0xFEF
 20279                           postinc0	equ	0xFEE
 20280                           fsr0h	equ	0xFEA
 20281                           fsr0l	equ	0xFE9
 20282                           wreg	equ	0xFE8
 20283                           indf1	equ	0xFE7
 20284                           postinc1	equ	0xFE6
 20285                           postdec1	equ	0xFE5
 20286                           fsr1h	equ	0xFE2
 20287                           fsr1l	equ	0xFE1
 20288                           indf2	equ	0xFDF
 20289                           postinc2	equ	0xFDE
 20290                           postdec2	equ	0xFDD
 20291                           plusw2	equ	0xFDB
 20292                           fsr2h	equ	0xFDA
 20293                           fsr2l	equ	0xFD9
 20294                           status	equ	0xFD8
 20295                           
 20296 ;; *************** function _strichr *****************
 20297 ;; Defined at:
 20298 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 20299 ;; Parameters:    Size  Location     Type
 20300 ;;  ptr             2    1[BANK0 ] PTR const unsigned char 
 20301 ;;		 -> NULL(0), cmdbuf(80), 
 20302 ;;  chr             2    3[BANK0 ] int 
 20303 ;; Auto vars:     Size  Location     Type
 20304 ;;		None
 20305 ;; Return value:  Size  Location     Type
 20306 ;;                  2    1[BANK0 ] PTR unsigned char 
 20307 ;; Registers used:
 20308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20309 ;; Tracked objects:
 20310 ;;		On entry : F/0
 20311 ;;		On exit  : F/0
 20312 ;;		Unchanged: 0/0
 20313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20314 ;;      Params:         0       4       0       0       0       0       0
 20315 ;;      Locals:         0       0       0       0       0       0       0
 20316 ;;      Temps:          0       0       0       0       0       0       0
 20317 ;;      Totals:         0       4       0       0       0       0       0
 20318 ;;Total ram usage:        4 bytes
 20319 ;; Hardware stack levels used:    1
 20320 ;; Hardware stack levels required when called:    4
 20321 ;; This function calls:
 20322 ;;		_toupper
 20323 ;; This function is called by:
 20324 ;;		_stristr
 20325 ;; This function uses a non-reentrant model
 20326 ;;
 20327                           
 20328                           	psect	text48
 20329  0054E0                     __ptext48:
 20330                           	opt stack 0
 20331  0054E0                     _strichr:
 20332                           	opt stack 24
 20333                           
 20334                           ; BSR set to: 0
 20335                           
 20336                           ; BSR set to: 0
 20337                           ;incstack = 0
 20338                           ;incstack = 0
 20339  0054E0  5163               	movf	strichr@chr& (0+255),w,b
 20340  0054E2  ECAE  F02B         	call	_toupper
 20341  0054E6  6F63               	movwf	strichr@chr& (0+255),b
 20342  0054E8  6B64               	clrf	(strichr@chr+1)& (0+255),b
 20343  0054EA  D010               	goto	l12950
 20344  0054EC                     l12944:
 20345                           
 20346                           ; BSR set to: 0
 20347  0054EC  C061  FFD9         	movff	strichr@ptr,fsr2l
 20348  0054F0  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20349  0054F4  50DF               	movf	indf2,w,c
 20350  0054F6  ECAE  F02B         	call	_toupper
 20351  0054FA  1963               	xorwf	strichr@chr& (0+255),w,b
 20352  0054FC  E105               	bnz	l12948
 20353                           
 20354                           ; BSR set to: 0
 20355  0054FE  C061  F061         	movff	strichr@ptr,?_strichr
 20356  005502  C062  F062         	movff	strichr@ptr+1,?_strichr+1
 20357  005506  D00A               	goto	l2541
 20358  005508                     l12948:
 20359                           
 20360                           ; BSR set to: 0
 20361  005508  4B61               	infsnz	strichr@ptr& (0+255),f,b
 20362  00550A  2B62               	incf	(strichr@ptr+1)& (0+255),f,b
 20363  00550C                     l12950:
 20364                           
 20365                           ; BSR set to: 0
 20366  00550C  C061  FFD9         	movff	strichr@ptr,fsr2l
 20367  005510  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20368  005514  50DF               	movf	indf2,w,c
 20369  005516  E1EA               	bnz	l12944
 20370                           
 20371                           ; BSR set to: 0
 20372  005518  6B61               	clrf	?_strichr& (0+255),b
 20373  00551A  6B62               	clrf	(?_strichr+1)& (0+255),b
 20374  00551C                     l2541:
 20375                           
 20376                           ; BSR set to: 0
 20377  00551C  0012               	return	
 20378  00551E                     __end_of_strichr:
 20379                           	opt stack 0
 20380                           tblptru	equ	0xFF8
 20381                           tblptrh	equ	0xFF7
 20382                           tblptrl	equ	0xFF6
 20383                           tablat	equ	0xFF5
 20384                           prodh	equ	0xFF4
 20385                           prodl	equ	0xFF3
 20386                           intcon	equ	0xFF2
 20387                           indf0	equ	0xFEF
 20388                           postinc0	equ	0xFEE
 20389                           fsr0h	equ	0xFEA
 20390                           fsr0l	equ	0xFE9
 20391                           wreg	equ	0xFE8
 20392                           indf1	equ	0xFE7
 20393                           postinc1	equ	0xFE6
 20394                           postdec1	equ	0xFE5
 20395                           fsr1h	equ	0xFE2
 20396                           fsr1l	equ	0xFE1
 20397                           indf2	equ	0xFDF
 20398                           postinc2	equ	0xFDE
 20399                           postdec2	equ	0xFDD
 20400                           plusw2	equ	0xFDB
 20401                           fsr2h	equ	0xFDA
 20402                           fsr2l	equ	0xFD9
 20403                           status	equ	0xFD8
 20404                           
 20405 ;; *************** function _strnicmp *****************
 20406 ;; Defined at:
 20407 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 20408 ;; Parameters:    Size  Location     Type
 20409 ;;  s1              2    4[BANK0 ] PTR const unsigned char 
 20410 ;;		 -> NULL(0), cmdbuf(80), 
 20411 ;;  s2              2    6[BANK0 ] PTR const unsigned char 
 20412 ;;		 -> STR_129(6), STR_128(8), STR_126(6), STR_124(5), 
 20413 ;;		 -> STR_122(8), STR_121(6), STR_120(9), STR_118(11), 
 20414 ;;		 -> STR_116(8), STR_114(4), STR_113(5), STR_100(5), 
 20415 ;;		 -> STR_87(7), STR_81(5), STR_72(5), STR_49(5), 
 20416 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 20417 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20418 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20419 ;;		 -> STR_8(5), STR_6(5), 
 20420 ;;  len             2    8[BANK0 ] unsigned int 
 20421 ;; Auto vars:     Size  Location     Type
 20422 ;;  r               1   12[BANK0 ] char 
 20423 ;; Return value:  Size  Location     Type
 20424 ;;                  2    4[BANK0 ] int 
 20425 ;; Registers used:
 20426 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20427 ;; Tracked objects:
 20428 ;;		On entry : F/0
 20429 ;;		On exit  : F/0
 20430 ;;		Unchanged: 0/0
 20431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20432 ;;      Params:         0       6       0       0       0       0       0
 20433 ;;      Locals:         0       1       0       0       0       0       0
 20434 ;;      Temps:          0       2       0       0       0       0       0
 20435 ;;      Totals:         0       9       0       0       0       0       0
 20436 ;;Total ram usage:        9 bytes
 20437 ;; Hardware stack levels used:    1
 20438 ;; Hardware stack levels required when called:    4
 20439 ;; This function calls:
 20440 ;;		_toupper
 20441 ;; This function is called by:
 20442 ;;		_stristr
 20443 ;; This function uses a non-reentrant model
 20444 ;;
 20445                           
 20446                           	psect	text49
 20447  004F34                     __ptext49:
 20448                           	opt stack 0
 20449  004F34                     _strnicmp:
 20450                           	opt stack 24
 20451                           
 20452                           ; BSR set to: 0
 20453                           
 20454                           ; BSR set to: 0
 20455                           ;incstack = 0
 20456                           ;incstack = 0
 20457  004F34  D027               	goto	l12940
 20458  004F36                     l12930:
 20459                           
 20460                           ; BSR set to: 0
 20461  004F36  C066  FFF6         	movff	strnicmp@s2,tblptrl
 20462  004F3A  C067  FFF7         	movff	strnicmp@s2+1,tblptrh
 20463  004F3E  0008               	tblrd		*
 20464  004F40  50F5               	movf	tablat,w,c
 20465  004F42  ECAE  F02B         	call	_toupper
 20466  004F46  6F6A               	movwf	??_strnicmp& (0+255),b
 20467  004F48  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20468  004F4C  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20469  004F50  50DF               	movf	indf2,w,c
 20470  004F52  ECAE  F02B         	call	_toupper
 20471  004F56  6F6B               	movwf	(??_strnicmp+1)& (0+255),b
 20472  004F58  516A               	movf	??_strnicmp& (0+255),w,b
 20473  004F5A  5D6B               	subwf	(??_strnicmp+1)& (0+255),w,b
 20474  004F5C  6F6C               	movwf	strnicmp@r& (0+255),b
 20475  004F5E  0100               	movlb	0	; () banked
 20476  004F60  676C               	tstfsz	strnicmp@r& (0+255),b
 20477  004F62  D006               	goto	l12934
 20478                           
 20479                           ; BSR set to: 0
 20480  004F64  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20481  004F68  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20482  004F6C  50DF               	movf	indf2,w,c
 20483  004F6E  E106               	bnz	l12938
 20484  004F70                     l12934:
 20485                           
 20486                           ; BSR set to: 0
 20487  004F70  516C               	movf	strnicmp@r& (0+255),w,b
 20488  004F72  6F64               	movwf	?_strnicmp& (0+255),b
 20489  004F74  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20490  004F76  BF64               	btfsc	?_strnicmp& (0+255),7,b
 20491  004F78  0765               	decf	(?_strnicmp+1)& (0+255),f,b
 20492  004F7A  D00E               	goto	l2493
 20493  004F7C                     l12938:
 20494                           
 20495                           ; BSR set to: 0
 20496  004F7C  4B64               	infsnz	strnicmp@s1& (0+255),f,b
 20497  004F7E  2B65               	incf	(strnicmp@s1+1)& (0+255),f,b
 20498  004F80  4B66               	infsnz	strnicmp@s2& (0+255),f,b
 20499  004F82  2B67               	incf	(strnicmp@s2+1)& (0+255),f,b
 20500  004F84                     l12940:
 20501                           
 20502                           ; BSR set to: 0
 20503  004F84  0768               	decf	strnicmp@len& (0+255),f,b
 20504  004F86  A0D8               	btfss	status,0,c
 20505  004F88  0769               	decf	(strnicmp@len+1)& (0+255),f,b
 20506  004F8A  0100               	movlb	0	; () banked
 20507  004F8C  2968               	incf	strnicmp@len& (0+255),w,b
 20508  004F8E  B4D8               	btfsc	status,2,c
 20509  004F90  2969               	incf	(strnicmp@len+1)& (0+255),w,b
 20510  004F92  E1D1               	bnz	l12930
 20511                           
 20512                           ; BSR set to: 0
 20513  004F94  6B64               	clrf	?_strnicmp& (0+255),b
 20514  004F96  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20515  004F98                     l2493:
 20516                           
 20517                           ; BSR set to: 0
 20518  004F98  0012               	return	
 20519  004F9A                     __end_of_strnicmp:
 20520                           	opt stack 0
 20521                           tblptru	equ	0xFF8
 20522                           tblptrh	equ	0xFF7
 20523                           tblptrl	equ	0xFF6
 20524                           tablat	equ	0xFF5
 20525                           prodh	equ	0xFF4
 20526                           prodl	equ	0xFF3
 20527                           intcon	equ	0xFF2
 20528                           indf0	equ	0xFEF
 20529                           postinc0	equ	0xFEE
 20530                           fsr0h	equ	0xFEA
 20531                           fsr0l	equ	0xFE9
 20532                           wreg	equ	0xFE8
 20533                           indf1	equ	0xFE7
 20534                           postinc1	equ	0xFE6
 20535                           postdec1	equ	0xFE5
 20536                           fsr1h	equ	0xFE2
 20537                           fsr1l	equ	0xFE1
 20538                           indf2	equ	0xFDF
 20539                           postinc2	equ	0xFDE
 20540                           postdec2	equ	0xFDD
 20541                           plusw2	equ	0xFDB
 20542                           fsr2h	equ	0xFDA
 20543                           fsr2l	equ	0xFD9
 20544                           status	equ	0xFD8
 20545                           
 20546 ;; *************** function _toupper *****************
 20547 ;; Defined at:
 20548 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 20549 ;; Parameters:    Size  Location     Type
 20550 ;;  c               1    wreg     unsigned char 
 20551 ;; Auto vars:     Size  Location     Type
 20552 ;;  c               1    0[BANK0 ] unsigned char 
 20553 ;; Return value:  Size  Location     Type
 20554 ;;                  1    wreg      unsigned char 
 20555 ;; Registers used:
 20556 ;;		wreg, status,2, status,0
 20557 ;; Tracked objects:
 20558 ;;		On entry : F/0
 20559 ;;		On exit  : F/0
 20560 ;;		Unchanged: 0/0
 20561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20562 ;;      Params:         0       0       0       0       0       0       0
 20563 ;;      Locals:         0       1       0       0       0       0       0
 20564 ;;      Temps:          0       0       0       0       0       0       0
 20565 ;;      Totals:         0       1       0       0       0       0       0
 20566 ;;Total ram usage:        1 bytes
 20567 ;; Hardware stack levels used:    1
 20568 ;; Hardware stack levels required when called:    3
 20569 ;; This function calls:
 20570 ;;		Nothing
 20571 ;; This function is called by:
 20572 ;;		_strnicmp
 20573 ;;		_strichr
 20574 ;; This function uses a non-reentrant model
 20575 ;;
 20576                           
 20577                           	psect	text50
 20578  00575C                     __ptext50:
 20579                           	opt stack 0
 20580  00575C                     _toupper:
 20581                           	opt stack 24
 20582                           
 20583                           ; BSR set to: 0
 20584                           ;incstack = 0
 20585                           ;incstack = 0
 20586                           ;toupper@c stored from wreg
 20587  00575C  CFE8 F060          	movff	wreg,toupper@c
 20588                           
 20589                           ; BSR set to: 0
 20590  005760  0E7B               	movlw	123
 20591  005762  6160               	cpfslt	toupper@c& (0+255),b
 20592  005764  D004               	goto	l12958
 20593                           
 20594                           ; BSR set to: 0
 20595  005766  0E60               	movlw	96
 20596  005768  6560               	cpfsgt	toupper@c& (0+255),b
 20597  00576A  D001               	goto	l12958
 20598                           
 20599                           ; BSR set to: 0
 20600  00576C  9B60               	bcf	toupper@c& (0+255),5,b
 20601  00576E                     l12958:
 20602                           
 20603                           ; BSR set to: 0
 20604  00576E  5160               	movf	toupper@c& (0+255),w,b
 20605                           
 20606                           ; BSR set to: 0
 20607  005770  0012               	return	
 20608  005772                     __end_of_toupper:
 20609                           	opt stack 0
 20610                           tblptru	equ	0xFF8
 20611                           tblptrh	equ	0xFF7
 20612                           tblptrl	equ	0xFF6
 20613                           tablat	equ	0xFF5
 20614                           prodh	equ	0xFF4
 20615                           prodl	equ	0xFF3
 20616                           intcon	equ	0xFF2
 20617                           indf0	equ	0xFEF
 20618                           postinc0	equ	0xFEE
 20619                           fsr0h	equ	0xFEA
 20620                           fsr0l	equ	0xFE9
 20621                           wreg	equ	0xFE8
 20622                           indf1	equ	0xFE7
 20623                           postinc1	equ	0xFE6
 20624                           postdec1	equ	0xFE5
 20625                           fsr1h	equ	0xFE2
 20626                           fsr1l	equ	0xFE1
 20627                           indf2	equ	0xFDF
 20628                           postinc2	equ	0xFDE
 20629                           postdec2	equ	0xFDD
 20630                           plusw2	equ	0xFDB
 20631                           fsr2h	equ	0xFDA
 20632                           fsr2l	equ	0xFD9
 20633                           status	equ	0xFD8
 20634                           
 20635 ;; *************** function _strlen *****************
 20636 ;; Defined at:
 20637 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 20638 ;; Parameters:    Size  Location     Type
 20639 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 20640 ;;		 -> printGUID@buf(3), STR_129(6), STR_128(8), STR_126(6), 
 20641 ;;		 -> STR_124(5), STR_122(8), STR_121(6), STR_120(9), 
 20642 ;;		 -> STR_118(11), STR_116(8), STR_114(4), STR_113(5), 
 20643 ;;		 -> STR_100(5), STR_87(7), STR_81(5), STR_72(5), 
 20644 ;;		 -> wrkbuf(80), STR_49(5), STR_47(5), STR_45(5), 
 20645 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20646 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20647 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20648 ;;		 -> cmdbuf(80), 
 20649 ;; Auto vars:     Size  Location     Type
 20650 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
 20651 ;;		 -> printGUID@buf(3), STR_129(6), STR_128(8), STR_126(6), 
 20652 ;;		 -> STR_124(5), STR_122(8), STR_121(6), STR_120(9), 
 20653 ;;		 -> STR_118(11), STR_116(8), STR_114(4), STR_113(5), 
 20654 ;;		 -> STR_100(5), STR_87(7), STR_81(5), STR_72(5), 
 20655 ;;		 -> wrkbuf(80), STR_49(5), STR_47(5), STR_45(5), 
 20656 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20657 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20658 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20659 ;;		 -> cmdbuf(80), 
 20660 ;; Return value:  Size  Location     Type
 20661 ;;                  2    0[BANK0 ] unsigned int 
 20662 ;; Registers used:
 20663 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20664 ;; Tracked objects:
 20665 ;;		On entry : F/0
 20666 ;;		On exit  : F/0
 20667 ;;		Unchanged: 0/0
 20668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20669 ;;      Params:         0       2       0       0       0       0       0
 20670 ;;      Locals:         0       2       0       0       0       0       0
 20671 ;;      Temps:          0       0       0       0       0       0       0
 20672 ;;      Totals:         0       4       0       0       0       0       0
 20673 ;;Total ram usage:        4 bytes
 20674 ;; Hardware stack levels used:    1
 20675 ;; Hardware stack levels required when called:    3
 20676 ;; This function calls:
 20677 ;;		Nothing
 20678 ;; This function is called by:
 20679 ;;		_doModeSLCAN
 20680 ;;		_receiveSendEventSLCAN
 20681 ;;		_printGUID
 20682 ;;		_hexStringToBytes
 20683 ;;		_stristr
 20684 ;; This function uses a non-reentrant model
 20685 ;;
 20686                           
 20687                           	psect	text51
 20688  005422                     __ptext51:
 20689                           	opt stack 0
 20690  005422                     _strlen:
 20691                           	opt stack 25
 20692                           
 20693                           ; BSR set to: 0
 20694                           
 20695                           ; BSR set to: 0
 20696                           ;incstack = 0
 20697                           ;incstack = 0
 20698  005422  C060  F062         	movff	strlen@s,strlen@cp
 20699  005426  C061  F063         	movff	strlen@s+1,strlen@cp+1
 20700  00542A  D003               	goto	l12500
 20701  00542C                     l12498:
 20702  00542C  0100               	movlb	0	; () banked
 20703  00542E  4B62               	infsnz	strlen@cp& (0+255),f,b
 20704  005430  2B63               	incf	(strlen@cp+1)& (0+255),f,b
 20705  005432                     l12500:
 20706                           
 20707                           ; BSR set to: 0
 20708  005432  5162               	movf	strlen@cp& (0+255),w,b
 20709  005434  6EF6               	movwf	tblptrl,c
 20710  005436  6EE9               	movwf	fsr0l,c
 20711  005438  0E05               	movlw	(high __ramtop+-1)
 20712  00543A  6EEA               	movwf	fsr0h,c
 20713  00543C  5163               	movf	(strlen@cp+1)& (0+255),w,b
 20714  00543E  64EA               	cpfsgt	fsr0h,c
 20715  005440  D003               	bra	u16137
 20716  005442  6EEA               	movwf	fsr0h,c
 20717  005444  50EF               	movf	indf0,w,c
 20718  005446  D003               	bra	u16130
 20719  005448                     u16137:
 20720  005448  6EF7               	movwf	tblptrh,c
 20721  00544A  0008               	tblrd		*
 20722  00544C  50F5               	movf	tablat,w,c
 20723  00544E                     u16130:
 20724  00544E  0900               	iorlw	0
 20725  005450  E1ED               	bnz	l12498
 20726  005452  0100               	movlb	0	; () banked
 20727  005454  5160               	movf	strlen@s& (0+255),w,b
 20728  005456  5D62               	subwf	strlen@cp& (0+255),w,b
 20729  005458  6F60               	movwf	?_strlen& (0+255),b
 20730  00545A  5161               	movf	(strlen@s+1)& (0+255),w,b
 20731  00545C  5963               	subwfb	(strlen@cp+1)& (0+255),w,b
 20732  00545E  6F61               	movwf	(?_strlen+1)& (0+255),b
 20733                           
 20734                           ; BSR set to: 0
 20735  005460  0012               	return	
 20736  005462                     __end_of_strlen:
 20737                           	opt stack 0
 20738                           tblptru	equ	0xFF8
 20739                           tblptrh	equ	0xFF7
 20740                           tblptrl	equ	0xFF6
 20741                           tablat	equ	0xFF5
 20742                           prodh	equ	0xFF4
 20743                           prodl	equ	0xFF3
 20744                           intcon	equ	0xFF2
 20745                           indf0	equ	0xFEF
 20746                           postinc0	equ	0xFEE
 20747                           fsr0h	equ	0xFEA
 20748                           fsr0l	equ	0xFE9
 20749                           wreg	equ	0xFE8
 20750                           indf1	equ	0xFE7
 20751                           postinc1	equ	0xFE6
 20752                           postdec1	equ	0xFE5
 20753                           fsr1h	equ	0xFE2
 20754                           fsr1l	equ	0xFE1
 20755                           indf2	equ	0xFDF
 20756                           postinc2	equ	0xFDE
 20757                           postdec2	equ	0xFDD
 20758                           plusw2	equ	0xFDB
 20759                           fsr2h	equ	0xFDA
 20760                           fsr2l	equ	0xFD9
 20761                           status	equ	0xFD8
 20762                           
 20763 ;; *************** function _receivePrintEventVerbose *****************
 20764 ;; Defined at:
 20765 ;;		line 1733 in file "main.c"
 20766 ;; Parameters:    Size  Location     Type
 20767 ;;		None
 20768 ;; Auto vars:     Size  Location     Type
 20769 ;;  i               1   69[BANK0 ] unsigned char 
 20770 ;; Return value:  Size  Location     Type
 20771 ;;                  1    wreg      enum E15660
 20772 ;; Registers used:
 20773 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20774 ;; Tracked objects:
 20775 ;;		On entry : F/1
 20776 ;;		On exit  : 0/0
 20777 ;;		Unchanged: 0/0
 20778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20779 ;;      Params:         0       0       0       0       0       0       0
 20780 ;;      Locals:         0      13       0       0       0       0       0
 20781 ;;      Temps:          0       5       0       0       0       0       0
 20782 ;;      Totals:         0      18       0       0       0       0       0
 20783 ;;Total ram usage:       18 bytes
 20784 ;; Hardware stack levels used:    1
 20785 ;; Hardware stack levels required when called:    6
 20786 ;; This function calls:
 20787 ;;		_putsUSART
 20788 ;;		_sprintf
 20789 ;;		_getVSCPFrame
 20790 ;; This function is called by:
 20791 ;;		_doModeVerbose
 20792 ;; This function uses a non-reentrant model
 20793 ;;
 20794                           
 20795                           	psect	text52
 20796  0023D4                     __ptext52:
 20797                           	opt stack 0
 20798  0023D4                     _receivePrintEventVerbose:
 20799                           	opt stack 23
 20800                           
 20801                           ; BSR set to: 1
 20802                           ;main.c: 1734: uint8_t i;
 20803                           ;main.c: 1736: if (getVSCPFrame(&vscpClass,
 20804                           ;main.c: 1737: &vscpType,
 20805                           ;main.c: 1738: &vscpNodeId,
 20806                           ;main.c: 1739: &vscpPriority,
 20807                           ;main.c: 1740: &vscpSize,
 20808                           ;main.c: 1741: vscpData)) {
 20809                           
 20810                           ; BSR set to: 0
 20811                           ;incstack = 0
 20812                           ;incstack = 0
 20813  0023D4  0E01               	movlw	high _vscpClass
 20814  0023D6  0100               	movlb	0	; () banked
 20815  0023D8  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 20816  0023DA  0EAC               	movlw	low _vscpClass
 20817  0023DC  6F72               	movwf	?_getVSCPFrame& (0+255),b
 20818  0023DE  0E01               	movlw	high _vscpType
 20819  0023E0  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 20820  0023E2  0EB1               	movlw	low _vscpType
 20821  0023E4  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 20822  0023E6  0E01               	movlw	high _vscpNodeId
 20823  0023E8  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 20824  0023EA  0EAE               	movlw	low _vscpNodeId
 20825  0023EC  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 20826  0023EE  0E01               	movlw	high _vscpPriority
 20827  0023F0  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 20828  0023F2  0EAF               	movlw	low _vscpPriority
 20829  0023F4  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 20830  0023F6  0E01               	movlw	high _vscpSize
 20831  0023F8  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 20832  0023FA  0EB0               	movlw	low _vscpSize
 20833  0023FC  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 20834  0023FE  0E01               	movlw	high _vscpData
 20835  002400  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 20836  002402  0EA4               	movlw	low _vscpData
 20837  002404  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 20838  002406  ECB9  F025         	call	_getVSCPFrame	;wreg free
 20839  00240A  0900               	iorlw	0
 20840  00240C  E101 D141          	bz	l11230
 20841                           
 20842                           ; BSR set to: 0
 20843                           ;main.c: 1744: cntRxFrames++;
 20844  002410  2BD9               	incf	_cntRxFrames& (0+255),f,b
 20845  002412  0E00               	movlw	0
 20846  002414  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 20847  002416  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 20848  002418  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 20849                           
 20850                           ;main.c: 1745: cntRxBytes += vscpSize;
 20851  00241A  0101               	movlb	1	; () banked
 20852  00241C  51B0               	movf	_vscpSize& (0+255),w,b
 20853  00241E  0100               	movlb	0	; () banked
 20854  002420  27D5               	addwf	_cntRxBytes& (0+255),f,b
 20855  002422  0E00               	movlw	0
 20856  002424  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 20857  002426  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 20858  002428  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 20859                           
 20860                           ; BSR set to: 0
 20861                           ;main.c: 1747: putsUSART((char *) "<Prio=");
 20862  00242A  0E7F               	movlw	high STR_139
 20863  00242C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20864  00242E  0E41               	movlw	low STR_139
 20865  002430  6F61               	movwf	?_putsUSART& (0+255),b
 20866  002432  ECEA  F028         	call	_putsUSART	;wreg free
 20867                           
 20868                           ;main.c: 1748: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority);
 20869  002436  0101               	movlb	1	; () banked
 20870  002438  6700               	tstfsz	_bHex& (0+255),b
 20871  00243A  D005               	goto	l11148
 20872                           
 20873                           ; BSR set to: 1
 20874  00243C  0E7F               	movlw	high STR_57
 20875  00243E  0100               	movlb	0	; () banked
 20876  002440  6F9A               	movwf	(_receivePrintEventVerbose$1273+1)& (0+255),b
 20877  002442  0EED               	movlw	low STR_57
 20878  002444  D004               	goto	L27
 20879  002446                     l11148:
 20880                           
 20881                           ; BSR set to: 1
 20882  002446  0E7F               	movlw	high STR_56
 20883  002448  0100               	movlb	0	; () banked
 20884  00244A  6F9A               	movwf	(_receivePrintEventVerbose$1273+1)& (0+255),b
 20885  00244C  0E64               	movlw	low STR_56
 20886  00244E                     L27:
 20887  00244E  6F99               	movwf	_receivePrintEventVerbose$1273& (0+255),b
 20888                           
 20889                           ; BSR set to: 0
 20890  002450  0E01               	movlw	high _wrkbuf
 20891  002452  0100               	movlb	0	; () banked
 20892  002454  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20893  002456  0E54               	movlw	low _wrkbuf
 20894  002458  6F76               	movwf	?_sprintf& (0+255),b
 20895  00245A  C099  F078         	movff	_receivePrintEventVerbose$1273,?_sprintf+2
 20896  00245E  C09A  F079         	movff	_receivePrintEventVerbose$1273+1,?_sprintf+3
 20897  002462  C1AF  F07A         	movff	_vscpPriority,?_sprintf+4
 20898  002466  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 20899  002468  EC28  F00B         	call	_sprintf	;wreg free
 20900                           
 20901                           ; BSR set to: 0
 20902                           ;main.c: 1749: putsUSART(wrkbuf);
 20903  00246C  0E01               	movlw	high _wrkbuf
 20904  00246E  0100               	movlb	0	; () banked
 20905  002470  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20906  002472  0E54               	movlw	low _wrkbuf
 20907  002474  6F61               	movwf	?_putsUSART& (0+255),b
 20908  002476  ECEA  F028         	call	_putsUSART	;wreg free
 20909                           
 20910                           ;main.c: 1750: putsUSART((char *) ",class=");
 20911  00247A  0E7E               	movlw	high STR_142
 20912  00247C  0100               	movlb	0	; () banked
 20913  00247E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20914  002480  0EF5               	movlw	low STR_142
 20915  002482  6F61               	movwf	?_putsUSART& (0+255),b
 20916  002484  ECEA  F028         	call	_putsUSART	;wreg free
 20917                           
 20918                           ;main.c: 1751: sprintf(wrkbuf, bHex ? "0x%04X" : "%d", vscpClass);
 20919  002488  0101               	movlb	1	; () banked
 20920  00248A  6700               	tstfsz	_bHex& (0+255),b
 20921  00248C  D005               	goto	l11160
 20922                           
 20923                           ; BSR set to: 1
 20924  00248E  0E7F               	movlw	high STR_57
 20925  002490  0100               	movlb	0	; () banked
 20926  002492  6F9C               	movwf	(_receivePrintEventVerbose$1278+1)& (0+255),b
 20927  002494  0EED               	movlw	low STR_57
 20928  002496  D004               	goto	L28
 20929  002498                     l11160:
 20930                           
 20931                           ; BSR set to: 1
 20932  002498  0E7F               	movlw	high STR_143
 20933  00249A  0100               	movlb	0	; () banked
 20934  00249C  6F9C               	movwf	(_receivePrintEventVerbose$1278+1)& (0+255),b
 20935  00249E  0E6B               	movlw	low STR_143
 20936  0024A0                     L28:
 20937  0024A0  6F9B               	movwf	_receivePrintEventVerbose$1278& (0+255),b
 20938                           
 20939                           ; BSR set to: 0
 20940  0024A2  0E01               	movlw	high _wrkbuf
 20941  0024A4  0100               	movlb	0	; () banked
 20942  0024A6  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20943  0024A8  0E54               	movlw	low _wrkbuf
 20944  0024AA  6F76               	movwf	?_sprintf& (0+255),b
 20945  0024AC  C09B  F078         	movff	_receivePrintEventVerbose$1278,?_sprintf+2
 20946  0024B0  C09C  F079         	movff	_receivePrintEventVerbose$1278+1,?_sprintf+3
 20947  0024B4  C1AC  F07A         	movff	_vscpClass,?_sprintf+4
 20948  0024B8  C1AD  F07B         	movff	_vscpClass+1,?_sprintf+5
 20949  0024BC  EC28  F00B         	call	_sprintf	;wreg free
 20950                           
 20951                           ; BSR set to: 0
 20952                           ;main.c: 1752: putsUSART(wrkbuf);
 20953  0024C0  0E01               	movlw	high _wrkbuf
 20954  0024C2  0100               	movlb	0	; () banked
 20955  0024C4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20956  0024C6  0E54               	movlw	low _wrkbuf
 20957  0024C8  6F61               	movwf	?_putsUSART& (0+255),b
 20958  0024CA  ECEA  F028         	call	_putsUSART	;wreg free
 20959                           
 20960                           ;main.c: 1753: putsUSART((char *) ",type=");
 20961  0024CE  0E7F               	movlw	high STR_145
 20962  0024D0  0100               	movlb	0	; () banked
 20963  0024D2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20964  0024D4  0E33               	movlw	low STR_145
 20965  0024D6  6F61               	movwf	?_putsUSART& (0+255),b
 20966  0024D8  ECEA  F028         	call	_putsUSART	;wreg free
 20967                           
 20968                           ;main.c: 1754: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpType);
 20969  0024DC  0101               	movlb	1	; () banked
 20970  0024DE  6700               	tstfsz	_bHex& (0+255),b
 20971  0024E0  D005               	goto	l11172
 20972                           
 20973                           ; BSR set to: 1
 20974  0024E2  0E7F               	movlw	high STR_57
 20975  0024E4  0100               	movlb	0	; () banked
 20976  0024E6  6F9E               	movwf	(_receivePrintEventVerbose$1283+1)& (0+255),b
 20977  0024E8  0EED               	movlw	low STR_57
 20978  0024EA  D004               	goto	L29
 20979  0024EC                     l11172:
 20980                           
 20981                           ; BSR set to: 1
 20982  0024EC  0E7F               	movlw	high STR_56
 20983  0024EE  0100               	movlb	0	; () banked
 20984  0024F0  6F9E               	movwf	(_receivePrintEventVerbose$1283+1)& (0+255),b
 20985  0024F2  0E64               	movlw	low STR_56
 20986  0024F4                     L29:
 20987  0024F4  6F9D               	movwf	_receivePrintEventVerbose$1283& (0+255),b
 20988                           
 20989                           ; BSR set to: 0
 20990  0024F6  0E01               	movlw	high _wrkbuf
 20991  0024F8  0100               	movlb	0	; () banked
 20992  0024FA  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20993  0024FC  0E54               	movlw	low _wrkbuf
 20994  0024FE  6F76               	movwf	?_sprintf& (0+255),b
 20995  002500  C09D  F078         	movff	_receivePrintEventVerbose$1283,?_sprintf+2
 20996  002504  C09E  F079         	movff	_receivePrintEventVerbose$1283+1,?_sprintf+3
 20997  002508  C1B1  F07A         	movff	_vscpType,?_sprintf+4
 20998  00250C  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 20999  00250E  EC28  F00B         	call	_sprintf	;wreg free
 21000                           
 21001                           ; BSR set to: 0
 21002                           ;main.c: 1755: putsUSART(wrkbuf);
 21003  002512  0E01               	movlw	high _wrkbuf
 21004  002514  0100               	movlb	0	; () banked
 21005  002516  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21006  002518  0E54               	movlw	low _wrkbuf
 21007  00251A  6F61               	movwf	?_putsUSART& (0+255),b
 21008  00251C  ECEA  F028         	call	_putsUSART	;wreg free
 21009                           
 21010                           ;main.c: 1756: putsUSART((char *) ",nodeid=");
 21011  002520  0E7E               	movlw	high STR_148
 21012  002522  0100               	movlb	0	; () banked
 21013  002524  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21014  002526  0EC3               	movlw	low STR_148
 21015  002528  6F61               	movwf	?_putsUSART& (0+255),b
 21016  00252A  ECEA  F028         	call	_putsUSART	;wreg free
 21017                           
 21018                           ;main.c: 1757: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId);
 21019  00252E  0101               	movlb	1	; () banked
 21020  002530  6700               	tstfsz	_bHex& (0+255),b
 21021  002532  D005               	goto	l11184
 21022                           
 21023                           ; BSR set to: 1
 21024  002534  0E7F               	movlw	high STR_57
 21025  002536  0100               	movlb	0	; () banked
 21026  002538  6FA0               	movwf	(_receivePrintEventVerbose$1288+1)& (0+255),b
 21027  00253A  0EED               	movlw	low STR_57
 21028  00253C  D004               	goto	L30
 21029  00253E                     l11184:
 21030                           
 21031                           ; BSR set to: 1
 21032  00253E  0E7F               	movlw	high STR_56
 21033  002540  0100               	movlb	0	; () banked
 21034  002542  6FA0               	movwf	(_receivePrintEventVerbose$1288+1)& (0+255),b
 21035  002544  0E64               	movlw	low STR_56
 21036  002546                     L30:
 21037  002546  6F9F               	movwf	_receivePrintEventVerbose$1288& (0+255),b
 21038                           
 21039                           ; BSR set to: 0
 21040  002548  0E01               	movlw	high _wrkbuf
 21041  00254A  0100               	movlb	0	; () banked
 21042  00254C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21043  00254E  0E54               	movlw	low _wrkbuf
 21044  002550  6F76               	movwf	?_sprintf& (0+255),b
 21045  002552  C09F  F078         	movff	_receivePrintEventVerbose$1288,?_sprintf+2
 21046  002556  C0A0  F079         	movff	_receivePrintEventVerbose$1288+1,?_sprintf+3
 21047  00255A  C1AE  F07A         	movff	_vscpNodeId,?_sprintf+4
 21048  00255E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21049  002560  EC28  F00B         	call	_sprintf	;wreg free
 21050                           
 21051                           ; BSR set to: 0
 21052                           ;main.c: 1758: putsUSART(wrkbuf);
 21053  002564  0E01               	movlw	high _wrkbuf
 21054  002566  0100               	movlb	0	; () banked
 21055  002568  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21056  00256A  0E54               	movlw	low _wrkbuf
 21057  00256C  6F61               	movwf	?_putsUSART& (0+255),b
 21058  00256E  ECEA  F028         	call	_putsUSART	;wreg free
 21059                           
 21060                           ;main.c: 1759: putsUSART((char *) ",size=");
 21061  002572  0E7F               	movlw	high STR_151
 21062  002574  0100               	movlb	0	; () banked
 21063  002576  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21064  002578  0E3A               	movlw	low STR_151
 21065  00257A  6F61               	movwf	?_putsUSART& (0+255),b
 21066  00257C  ECEA  F028         	call	_putsUSART	;wreg free
 21067                           
 21068                           ;main.c: 1760: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpSize);
 21069  002580  0101               	movlb	1	; () banked
 21070  002582  6700               	tstfsz	_bHex& (0+255),b
 21071  002584  D005               	goto	l11196
 21072                           
 21073                           ; BSR set to: 1
 21074  002586  0E7F               	movlw	high STR_57
 21075  002588  0100               	movlb	0	; () banked
 21076  00258A  6FA2               	movwf	(_receivePrintEventVerbose$1293+1)& (0+255),b
 21077  00258C  0EED               	movlw	low STR_57
 21078  00258E  D004               	goto	L31
 21079  002590                     l11196:
 21080                           
 21081                           ; BSR set to: 1
 21082  002590  0E7F               	movlw	high STR_56
 21083  002592  0100               	movlb	0	; () banked
 21084  002594  6FA2               	movwf	(_receivePrintEventVerbose$1293+1)& (0+255),b
 21085  002596  0E64               	movlw	low STR_56
 21086  002598                     L31:
 21087  002598  6FA1               	movwf	_receivePrintEventVerbose$1293& (0+255),b
 21088                           
 21089                           ; BSR set to: 0
 21090  00259A  0E01               	movlw	high _wrkbuf
 21091  00259C  0100               	movlb	0	; () banked
 21092  00259E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21093  0025A0  0E54               	movlw	low _wrkbuf
 21094  0025A2  6F76               	movwf	?_sprintf& (0+255),b
 21095  0025A4  C0A1  F078         	movff	_receivePrintEventVerbose$1293,?_sprintf+2
 21096  0025A8  C0A2  F079         	movff	_receivePrintEventVerbose$1293+1,?_sprintf+3
 21097  0025AC  C1B0  F07A         	movff	_vscpSize,?_sprintf+4
 21098  0025B0  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21099  0025B2  EC28  F00B         	call	_sprintf	;wreg free
 21100                           
 21101                           ; BSR set to: 0
 21102                           ;main.c: 1761: putsUSART(wrkbuf);
 21103  0025B6  0E01               	movlw	high _wrkbuf
 21104  0025B8  0100               	movlb	0	; () banked
 21105  0025BA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21106  0025BC  0E54               	movlw	low _wrkbuf
 21107  0025BE  6F61               	movwf	?_putsUSART& (0+255),b
 21108  0025C0  ECEA  F028         	call	_putsUSART	;wreg free
 21109                           
 21110                           ;main.c: 1762: if (vscpSize > 0) {
 21111  0025C4  0101               	movlb	1	; () banked
 21112  0025C6  51B0               	movf	_vscpSize& (0+255),w,b
 21113  0025C8  E054               	bz	l11224
 21114                           
 21115                           ; BSR set to: 1
 21116                           ;main.c: 1763: putsUSART((char *) ",Data=");
 21117  0025CA  0E7F               	movlw	high STR_154
 21118  0025CC  0100               	movlb	0	; () banked
 21119  0025CE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21120  0025D0  0E2C               	movlw	low STR_154
 21121  0025D2  6F61               	movwf	?_putsUSART& (0+255),b
 21122  0025D4  ECEA  F028         	call	_putsUSART	;wreg free
 21123                           
 21124                           ;main.c: 1764: for (i = 0; i < vscpSize; i++) {
 21125  0025D8  0100               	movlb	0	; () banked
 21126  0025DA  6BA5               	clrf	receivePrintEventVerbose@i& (0+255),b
 21127  0025DC  D044               	goto	l11222
 21128  0025DE                     l908:
 21129                           
 21130                           ; BSR set to: 0
 21131                           ;main.c: 1766: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i]);
 21132  0025DE  0101               	movlb	1	; () banked
 21133  0025E0  6700               	tstfsz	_bHex& (0+255),b
 21134  0025E2  D005               	goto	l11210
 21135                           
 21136                           ; BSR set to: 1
 21137  0025E4  0E7F               	movlw	high STR_57
 21138  0025E6  0100               	movlb	0	; () banked
 21139  0025E8  6FA4               	movwf	(_receivePrintEventVerbose$1298+1)& (0+255),b
 21140  0025EA  0EED               	movlw	low STR_57
 21141  0025EC  D004               	goto	L32
 21142  0025EE                     l11210:
 21143                           
 21144                           ; BSR set to: 1
 21145  0025EE  0E7F               	movlw	high STR_56
 21146  0025F0  0100               	movlb	0	; () banked
 21147  0025F2  6FA4               	movwf	(_receivePrintEventVerbose$1298+1)& (0+255),b
 21148  0025F4  0E64               	movlw	low STR_56
 21149  0025F6                     L32:
 21150  0025F6  6FA3               	movwf	_receivePrintEventVerbose$1298& (0+255),b
 21151                           
 21152                           ; BSR set to: 0
 21153  0025F8  0E01               	movlw	high _wrkbuf
 21154  0025FA  0100               	movlb	0	; () banked
 21155  0025FC  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21156  0025FE  0E54               	movlw	low _wrkbuf
 21157  002600  6F76               	movwf	?_sprintf& (0+255),b
 21158  002602  C0A3  F078         	movff	_receivePrintEventVerbose$1298,?_sprintf+2
 21159  002606  C0A4  F079         	movff	_receivePrintEventVerbose$1298+1,?_sprintf+3
 21160  00260A  0EA4               	movlw	low _vscpData
 21161  00260C  25A5               	addwf	receivePrintEventVerbose@i& (0+255),w,b
 21162  00260E  6ED9               	movwf	fsr2l,c
 21163  002610  6ADA               	clrf	fsr2h,c
 21164  002612  0E01               	movlw	high _vscpData
 21165  002614  22DA               	addwfc	fsr2h,f,c
 21166  002616  50DF               	movf	indf2,w,c
 21167  002618  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 21168  00261A  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21169  00261C  EC28  F00B         	call	_sprintf	;wreg free
 21170                           
 21171                           ; BSR set to: 0
 21172                           ;main.c: 1767: putsUSART(wrkbuf);
 21173  002620  0E01               	movlw	high _wrkbuf
 21174  002622  0100               	movlb	0	; () banked
 21175  002624  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21176  002626  0E54               	movlw	low _wrkbuf
 21177  002628  6F61               	movwf	?_putsUSART& (0+255),b
 21178  00262A  ECEA  F028         	call	_putsUSART	;wreg free
 21179                           
 21180                           ;main.c: 1768: if (i < (vscpSize - 1)) {
 21181  00262E  0EFF               	movlw	255
 21182  002630  0101               	movlb	1	; () banked
 21183  002632  25B0               	addwf	_vscpSize& (0+255),w,b
 21184  002634  0100               	movlb	0	; () banked
 21185  002636  6F94               	movwf	??_receivePrintEventVerbose& (0+255),b
 21186  002638  6B95               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 21187  00263A  0EFF               	movlw	255
 21188  00263C  2395               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 21189  00263E  51A5               	movf	receivePrintEventVerbose@i& (0+255),w,b
 21190  002640  6F96               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 21191  002642  6B97               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 21192  002644  5197               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 21193  002646  0A80               	xorlw	128
 21194  002648  6F98               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 21195  00264A  5194               	movf	??_receivePrintEventVerbose& (0+255),w,b
 21196  00264C  5D96               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 21197  00264E  5195               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 21198  002650  0A80               	xorlw	128
 21199  002652  5998               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 21200  002654  E206               	bc	l11220
 21201                           
 21202                           ; BSR set to: 0
 21203                           ;main.c: 1769: putsUSART((char *) ",");
 21204  002656  0E7F               	movlw	high STR_30
 21205  002658  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21206  00265A  0EF4               	movlw	low STR_30
 21207  00265C  6F61               	movwf	?_putsUSART& (0+255),b
 21208  00265E  ECEA  F028         	call	_putsUSART	;wreg free
 21209  002662                     l11220:
 21210  002662  0100               	movlb	0	; () banked
 21211  002664  2BA5               	incf	receivePrintEventVerbose@i& (0+255),f,b
 21212  002666                     l11222:
 21213                           
 21214                           ; BSR set to: 0
 21215  002666  0101               	movlb	1	; () banked
 21216  002668  51B0               	movf	_vscpSize& (0+255),w,b
 21217  00266A  0100               	movlb	0	; () banked
 21218  00266C  5DA5               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 21219  00266E  E208               	bc	l915
 21220  002670  D7B6               	goto	l908
 21221  002672                     l11224:
 21222                           
 21223                           ; BSR set to: 1
 21224                           ;main.c: 1773: putsUSART((char *) ",Data=none");
 21225  002672  0E7E               	movlw	high STR_158
 21226  002674  0100               	movlb	0	; () banked
 21227  002676  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21228  002678  0E91               	movlw	low STR_158
 21229  00267A  6F61               	movwf	?_putsUSART& (0+255),b
 21230  00267C  ECEA  F028         	call	_putsUSART	;wreg free
 21231  002680                     l915:
 21232                           
 21233                           ;main.c: 1774: }
 21234                           ;main.c: 1775: putsUSART((char *) ">\r\n");
 21235  002680  0E7F               	movlw	high STR_159
 21236  002682  0100               	movlb	0	; () banked
 21237  002684  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21238  002686  0ED4               	movlw	low STR_159
 21239  002688  6F61               	movwf	?_putsUSART& (0+255),b
 21240  00268A  ECEA  F028         	call	_putsUSART	;wreg free
 21241                           
 21242                           ;main.c: 1776: return 1;
 21243  00268E  0E01               	movlw	1
 21244  002690  D001               	goto	l916
 21245  002692                     l11230:
 21246                           
 21247                           ; BSR set to: 0
 21248                           ;main.c: 1777: }
 21249                           ;main.c: 1779: return 0;
 21250  002692  0E00               	movlw	0
 21251  002694                     l916:
 21252  002694  0012               	return	
 21253  002696                     __end_of_receivePrintEventVerbose:
 21254                           	opt stack 0
 21255                           tblptru	equ	0xFF8
 21256                           tblptrh	equ	0xFF7
 21257                           tblptrl	equ	0xFF6
 21258                           tablat	equ	0xFF5
 21259                           prodh	equ	0xFF4
 21260                           prodl	equ	0xFF3
 21261                           intcon	equ	0xFF2
 21262                           indf0	equ	0xFEF
 21263                           postinc0	equ	0xFEE
 21264                           fsr0h	equ	0xFEA
 21265                           fsr0l	equ	0xFE9
 21266                           wreg	equ	0xFE8
 21267                           indf1	equ	0xFE7
 21268                           postinc1	equ	0xFE6
 21269                           postdec1	equ	0xFE5
 21270                           fsr1h	equ	0xFE2
 21271                           fsr1l	equ	0xFE1
 21272                           indf2	equ	0xFDF
 21273                           postinc2	equ	0xFDE
 21274                           postdec2	equ	0xFDD
 21275                           plusw2	equ	0xFDB
 21276                           fsr2h	equ	0xFDA
 21277                           fsr2l	equ	0xFD9
 21278                           status	equ	0xFD8
 21279                           
 21280 ;; *************** function _getVSCPFrame *****************
 21281 ;; Defined at:
 21282 ;;		line 2940 in file "main.c"
 21283 ;; Parameters:    Size  Location     Type
 21284 ;;  pvscpclass      2   18[BANK0 ] PTR unsigned short 
 21285 ;;		 -> vscpClass(2), 
 21286 ;;  pvscptype       2   20[BANK0 ] PTR unsigned char 
 21287 ;;		 -> vscpType(1), 
 21288 ;;  pNodeId         2   22[BANK0 ] PTR unsigned char 
 21289 ;;		 -> vscpNodeId(1), 
 21290 ;;  pPriority       2   24[BANK0 ] PTR unsigned char 
 21291 ;;		 -> vscpPriority(1), 
 21292 ;;  pSize           2   26[BANK0 ] PTR unsigned char 
 21293 ;;		 -> vscpSize(1), 
 21294 ;;  pData           2   28[BANK0 ] PTR unsigned char 
 21295 ;;		 -> vscpData(8), 
 21296 ;; Auto vars:     Size  Location     Type
 21297 ;;  id              4   34[BANK0 ] unsigned long 
 21298 ;; Return value:  Size  Location     Type
 21299 ;;                  1    wreg      unsigned char 
 21300 ;; Registers used:
 21301 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21302 ;; Tracked objects:
 21303 ;;		On entry : F/0
 21304 ;;		On exit  : F/0
 21305 ;;		Unchanged: 0/0
 21306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21307 ;;      Params:         0      12       0       0       0       0       0
 21308 ;;      Locals:         0       4       0       0       0       0       0
 21309 ;;      Temps:          0       4       0       0       0       0       0
 21310 ;;      Totals:         0      20       0       0       0       0       0
 21311 ;;Total ram usage:       20 bytes
 21312 ;; Hardware stack levels used:    1
 21313 ;; Hardware stack levels required when called:    5
 21314 ;; This function calls:
 21315 ;;		_getCANFrame
 21316 ;; This function is called by:
 21317 ;;		_receivePrintEventVerbose
 21318 ;;		_readRegister
 21319 ;;		_readRegisterExtended
 21320 ;;		_writeRegisterExtended
 21321 ;; This function uses a non-reentrant model
 21322 ;;
 21323                           
 21324                           	psect	text53
 21325  004B72                     __ptext53:
 21326                           	opt stack 0
 21327  004B72                     _getVSCPFrame:
 21328                           	opt stack 22
 21329                           
 21330                           ; BSR set to: 0
 21331                           ;main.c: 2941: uint32_t id;
 21332                           ;main.c: 2943: if (!getCANFrame(&id, pSize, pData)) {
 21333                           
 21334                           ;incstack = 0
 21335                           ;incstack = 0
 21336  004B72  C07A  F06D         	movff	getVSCPFrame@pSize,?_getCANFrame
 21337  004B76  C07B  F06E         	movff	getVSCPFrame@pSize+1,?_getCANFrame+1
 21338  004B7A  C07C  F06F         	movff	getVSCPFrame@pData,?_getCANFrame+2
 21339  004B7E  C07D  F070         	movff	getVSCPFrame@pData+1,?_getCANFrame+3
 21340  004B82  0E82               	movlw	getVSCPFrame@id& (0+255)
 21341  004B84  EC78  F026         	call	_getCANFrame
 21342  004B88  0900               	iorlw	0
 21343  004B8A  E102               	bnz	l12578
 21344                           
 21345                           ; BSR set to: 0
 21346                           ;main.c: 2944: return 0;
 21347  004B8C  0E00               	movlw	0
 21348  004B8E  D033               	goto	l1256
 21349  004B90                     l12578:
 21350                           
 21351                           ; BSR set to: 0
 21352                           ;main.c: 2945: }
 21353                           ;main.c: 2947: *pNodeId = id & 0x0ff;
 21354  004B90  C076  FFD9         	movff	getVSCPFrame@pNodeId,fsr2l
 21355  004B94  C077  FFDA         	movff	getVSCPFrame@pNodeId+1,fsr2h
 21356  004B98  C082  FFDF         	movff	getVSCPFrame@id,indf2
 21357                           
 21358                           ;main.c: 2948: *pvscptype = (id >> 8) & 0xff;
 21359  004B9C  C074  FFD9         	movff	getVSCPFrame@pvscptype,fsr2l
 21360  004BA0  C075  FFDA         	movff	getVSCPFrame@pvscptype+1,fsr2h
 21361  004BA4  C083  FFDF         	movff	getVSCPFrame@id+1,indf2
 21362                           
 21363                           ; BSR set to: 0
 21364                           ;main.c: 2949: *pvscpclass = (id >> 16) & 0x1ff;
 21365  004BA8  0100               	movlb	0	; () banked
 21366  004BAA  5184               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 21367  004BAC  6F7E               	movwf	??_getVSCPFrame& (0+255),b
 21368  004BAE  0E01               	movlw	1
 21369  004BB0  1585               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 21370  004BB2  6F7F               	movwf	(??_getVSCPFrame+1)& (0+255),b
 21371  004BB4  C072  FFD9         	movff	getVSCPFrame@pvscpclass,fsr2l
 21372  004BB8  C073  FFDA         	movff	getVSCPFrame@pvscpclass+1,fsr2h
 21373  004BBC  C07E  FFDE         	movff	??_getVSCPFrame,postinc2
 21374  004BC0  C07F  FFDD         	movff	??_getVSCPFrame+1,postdec2
 21375                           
 21376                           ; BSR set to: 0
 21377                           ;main.c: 2950: *pPriority = (uint16_t) (0x07 & (id >> 26));
 21378  004BC4  C082  F07E         	movff	getVSCPFrame@id,??_getVSCPFrame
 21379  004BC8  C083  F07F         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 21380  004BCC  C084  F080         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 21381  004BD0  C085  F081         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 21382  004BD4  0E1B               	movlw	27
 21383  004BD6  D005               	goto	u16270
 21384  004BD8                     u16275:
 21385  004BD8  90D8               	bcf	status,0,c
 21386  004BDA  3381               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 21387  004BDC  3380               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 21388  004BDE  337F               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 21389  004BE0  337E               	rrcf	??_getVSCPFrame& (0+255),f,b
 21390  004BE2                     u16270:
 21391  004BE2  2EE8               	decfsz	wreg,f,c
 21392  004BE4  D7F9               	goto	u16275
 21393  004BE6  517E               	movf	??_getVSCPFrame& (0+255),w,b
 21394  004BE8  0B07               	andlw	7
 21395  004BEA  C078  FFD9         	movff	getVSCPFrame@pPriority,fsr2l
 21396  004BEE  C079  FFDA         	movff	getVSCPFrame@pPriority+1,fsr2h
 21397  004BF2  6EDF               	movwf	indf2,c
 21398                           
 21399                           ; BSR set to: 0
 21400                           ;main.c: 2952: return 1;
 21401  004BF4  0E01               	movlw	1
 21402  004BF6                     l1256:
 21403                           
 21404                           ; BSR set to: 0
 21405  004BF6  0012               	return	
 21406  004BF8                     __end_of_getVSCPFrame:
 21407                           	opt stack 0
 21408                           tblptru	equ	0xFF8
 21409                           tblptrh	equ	0xFF7
 21410                           tblptrl	equ	0xFF6
 21411                           tablat	equ	0xFF5
 21412                           prodh	equ	0xFF4
 21413                           prodl	equ	0xFF3
 21414                           intcon	equ	0xFF2
 21415                           indf0	equ	0xFEF
 21416                           postinc0	equ	0xFEE
 21417                           fsr0h	equ	0xFEA
 21418                           fsr0l	equ	0xFE9
 21419                           wreg	equ	0xFE8
 21420                           indf1	equ	0xFE7
 21421                           postinc1	equ	0xFE6
 21422                           postdec1	equ	0xFE5
 21423                           fsr1h	equ	0xFE2
 21424                           fsr1l	equ	0xFE1
 21425                           indf2	equ	0xFDF
 21426                           postinc2	equ	0xFDE
 21427                           postdec2	equ	0xFDD
 21428                           plusw2	equ	0xFDB
 21429                           fsr2h	equ	0xFDA
 21430                           fsr2l	equ	0xFD9
 21431                           status	equ	0xFD8
 21432                           
 21433 ;; *************** function _getCANFrame *****************
 21434 ;; Defined at:
 21435 ;;		line 2976 in file "main.c"
 21436 ;; Parameters:    Size  Location     Type
 21437 ;;  pid             1    wreg     PTR unsigned long 
 21438 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21439 ;;  pdlc            2   13[BANK0 ] PTR unsigned char 
 21440 ;;		 -> receiveSendEventSLCAN@dlc(1), receiveSendMultiEventCANAL@dlc(1), receiveSendEventCANAL@dlc(1), vscpSize(1), 
 21441 ;;  pdata           2   15[BANK0 ] PTR unsigned char 
 21442 ;;		 -> receiveSendMultiEventCANAL@data(8), receiveSendEventCANAL@data(8), vscpData(8), 
 21443 ;; Auto vars:     Size  Location     Type
 21444 ;;  pid             1   17[BANK0 ] PTR unsigned long 
 21445 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21446 ;; Return value:  Size  Location     Type
 21447 ;;                  1    wreg      unsigned char 
 21448 ;; Registers used:
 21449 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21450 ;; Tracked objects:
 21451 ;;		On entry : F/0
 21452 ;;		On exit  : F/0
 21453 ;;		Unchanged: 0/0
 21454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21455 ;;      Params:         0       4       0       0       0       0       0
 21456 ;;      Locals:         0       1       0       0       0       0       0
 21457 ;;      Temps:          0       0       0       0       0       0       0
 21458 ;;      Totals:         0       5       0       0       0       0       0
 21459 ;;Total ram usage:        5 bytes
 21460 ;; Hardware stack levels used:    1
 21461 ;; Hardware stack levels required when called:    4
 21462 ;; This function calls:
 21463 ;;		_fifo_read
 21464 ;; This function is called by:
 21465 ;;		_receiveSendEventCANAL
 21466 ;;		_receiveSendMultiEventCANAL
 21467 ;;		_receiveSendEventSLCAN
 21468 ;;		_getVSCPFrame
 21469 ;; This function uses a non-reentrant model
 21470 ;;
 21471                           
 21472                           	psect	text54
 21473  004CF0                     __ptext54:
 21474                           	opt stack 0
 21475  004CF0                     _getCANFrame:
 21476                           	opt stack 24
 21477                           
 21478                           ; BSR set to: 0
 21479                           ;incstack = 0
 21480                           ;incstack = 0
 21481                           ;getCANFrame@pid stored from wreg
 21482  004CF0  CFE8 F071          	movff	wreg,getCANFrame@pid
 21483                           
 21484                           ; BSR set to: 0
 21485                           ;main.c: 2997: if ( canrxcount ) {
 21486  004CF4  51F0               	movf	_canrxcount& (0+255),w,b	;volatile
 21487  004CF6  E00F               	bz	l12596
 21488                           
 21489                           ; BSR set to: 0
 21490                           ;main.c: 2999: (INTCONbits.GIE = 0);
 21491  004CF8  9EF2               	bcf	intcon,7,c	;volatile
 21492                           
 21493                           ; BSR set to: 0
 21494                           ;main.c: 3002: if ( 4 != fifo_read( &canInputFifo, (uint8_t *)pid, 4 ) ) {
 21495  004CFA  C071  F060         	movff	getCANFrame@pid,?_fifo_read
 21496  004CFE  6B61               	clrf	(?_fifo_read+1)& (0+255),b
 21497  004D00  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21498  004D02  0E04               	movlw	4
 21499  004D04  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 21500  004D06  0E40               	movlw	_canInputFifo& (0+255)
 21501  004D08  EC90  F021         	call	_fifo_read
 21502  004D0C  5160               	movf	?_fifo_read& (0+255),w,b
 21503  004D0E  0A04               	xorlw	4
 21504  004D10  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21505  004D12  E003               	bz	l12600
 21506  004D14                     l12594:
 21507                           
 21508                           ; BSR set to: 0
 21509                           ;main.c: 3003: (INTCONbits.GIE = 1);
 21510  004D14  8EF2               	bsf	intcon,7,c	;volatile
 21511  004D16                     l12596:
 21512                           
 21513                           ; BSR set to: 0
 21514                           ;main.c: 3004: return 0;
 21515  004D16  0E00               	movlw	0
 21516  004D18  D026               	goto	l1265
 21517  004D1A                     l12600:
 21518                           
 21519                           ; BSR set to: 0
 21520                           ;main.c: 3005: }
 21521                           ;main.c: 3008: if ( 1 != fifo_read( &canInputFifo, pdlc, 1 ) ) {
 21522  004D1A  C06D  F060         	movff	getCANFrame@pdlc,?_fifo_read
 21523  004D1E  C06E  F061         	movff	getCANFrame@pdlc+1,?_fifo_read+1
 21524  004D22  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21525  004D24  0E01               	movlw	1
 21526  004D26  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 21527  004D28  0E40               	movlw	_canInputFifo& (0+255)
 21528  004D2A  EC90  F021         	call	_fifo_read
 21529  004D2E  0560               	decf	?_fifo_read& (0+255),w,b
 21530  004D30  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21531  004D32  E1F0               	bnz	l12594
 21532                           
 21533                           ; BSR set to: 0
 21534                           ;main.c: 3011: }
 21535                           ;main.c: 3014: if ( *pdlc != fifo_read( &canInputFifo, pdata, *pdlc ) ) {
 21536  004D34  C06F  F060         	movff	getCANFrame@pdata,?_fifo_read
 21537  004D38  C070  F061         	movff	getCANFrame@pdata+1,?_fifo_read+1
 21538  004D3C  C06D  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21539  004D40  C06E  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21540  004D44  50DF               	movf	indf2,w,c
 21541  004D46  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 21542  004D48  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21543  004D4A  0E40               	movlw	_canInputFifo& (0+255)
 21544  004D4C  EC90  F021         	call	_fifo_read
 21545  004D50  C06D  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21546  004D54  C06E  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21547  004D58  50DF               	movf	indf2,w,c
 21548  004D5A  1960               	xorwf	?_fifo_read& (0+255),w,b
 21549  004D5C  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21550  004D5E  E1DA               	bnz	l12594
 21551                           
 21552                           ; BSR set to: 0
 21553                           ;main.c: 3017: }
 21554                           ;main.c: 3019: canrxcount--;
 21555  004D60  07F0               	decf	_canrxcount& (0+255),f,b	;volatile
 21556                           
 21557                           ; BSR set to: 0
 21558                           ;main.c: 3021: (INTCONbits.GIE = 1);
 21559  004D62  8EF2               	bsf	intcon,7,c	;volatile
 21560                           
 21561                           ; BSR set to: 0
 21562                           ;main.c: 3023: return 1;
 21563  004D64  0E01               	movlw	1
 21564  004D66                     l1265:
 21565                           
 21566                           ; BSR set to: 0
 21567  004D66  0012               	return	
 21568  004D68                     __end_of_getCANFrame:
 21569                           	opt stack 0
 21570                           tblptru	equ	0xFF8
 21571                           tblptrh	equ	0xFF7
 21572                           tblptrl	equ	0xFF6
 21573                           tablat	equ	0xFF5
 21574                           prodh	equ	0xFF4
 21575                           prodl	equ	0xFF3
 21576                           intcon	equ	0xFF2
 21577                           indf0	equ	0xFEF
 21578                           postinc0	equ	0xFEE
 21579                           fsr0h	equ	0xFEA
 21580                           fsr0l	equ	0xFE9
 21581                           wreg	equ	0xFE8
 21582                           indf1	equ	0xFE7
 21583                           postinc1	equ	0xFE6
 21584                           postdec1	equ	0xFE5
 21585                           fsr1h	equ	0xFE2
 21586                           fsr1l	equ	0xFE1
 21587                           indf2	equ	0xFDF
 21588                           postinc2	equ	0xFDE
 21589                           postdec2	equ	0xFDD
 21590                           plusw2	equ	0xFDB
 21591                           fsr2h	equ	0xFDA
 21592                           fsr2l	equ	0xFD9
 21593                           status	equ	0xFD8
 21594                           
 21595 ;; *************** function _fifo_read *****************
 21596 ;; Defined at:
 21597 ;;		line 29 in file "fifo.c"
 21598 ;; Parameters:    Size  Location     Type
 21599 ;;  f               1    wreg     PTR struct .
 21600 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 21601 ;;  buf             2    0[BANK0 ] PTR void 
 21602 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21603 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21604 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21605 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21606 ;;  nbytes          2    2[BANK0 ] unsigned short 
 21607 ;; Auto vars:     Size  Location     Type
 21608 ;;  f               1   12[BANK0 ] PTR struct .
 21609 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 21610 ;;  i               2   10[BANK0 ] unsigned short 
 21611 ;;  p               2    8[BANK0 ] PTR unsigned char 
 21612 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21613 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21614 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21615 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21616 ;; Return value:  Size  Location     Type
 21617 ;;                  2    0[BANK0 ] unsigned short 
 21618 ;; Registers used:
 21619 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 21620 ;; Tracked objects:
 21621 ;;		On entry : F/0
 21622 ;;		On exit  : F/0
 21623 ;;		Unchanged: 0/0
 21624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21625 ;;      Params:         0       4       0       0       0       0       0
 21626 ;;      Locals:         0       5       0       0       0       0       0
 21627 ;;      Temps:          0       4       0       0       0       0       0
 21628 ;;      Totals:         0      13       0       0       0       0       0
 21629 ;;Total ram usage:       13 bytes
 21630 ;; Hardware stack levels used:    1
 21631 ;; Hardware stack levels required when called:    3
 21632 ;; This function calls:
 21633 ;;		Nothing
 21634 ;; This function is called by:
 21635 ;;		_main
 21636 ;;		_doModeVerbose
 21637 ;;		_doModeVscp
 21638 ;;		_doModeSLCAN
 21639 ;;		_getCANFrame
 21640 ;; This function uses a non-reentrant model
 21641 ;;
 21642                           
 21643                           	psect	text55
 21644  004320                     __ptext55:
 21645                           	opt stack 0
 21646  004320                     _fifo_read:
 21647                           	opt stack 24
 21648                           
 21649                           ; BSR set to: 0
 21650                           ;incstack = 0
 21651                           ;incstack = 0
 21652                           ;fifo_read@f stored from wreg
 21653  004320  CFE8 F06C          	movff	wreg,fifo_read@f
 21654                           
 21655                           ; BSR set to: 0
 21656                           ;fifo.c: 30: uint16_t i;
 21657                           ;fifo.c: 31: uint8_t *p;
 21658                           ;fifo.c: 32: p = buf;
 21659  004324  C060  F068         	movff	fifo_read@buf,fifo_read@p
 21660  004328  C061  F069         	movff	fifo_read@buf+1,fifo_read@p+1
 21661                           
 21662                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 21663  00432C  6B6A               	clrf	fifo_read@i& (0+255),b
 21664  00432E  6B6B               	clrf	(fifo_read@i+1)& (0+255),b
 21665  004330  D03E               	goto	l10034
 21666  004332                     l10020:
 21667                           
 21668                           ; BSR set to: 0
 21669                           ;fifo.c: 36: if (f->tail != f->head) {
 21670  004332  516C               	movf	fifo_read@f& (0+255),w,b
 21671  004334  6ED9               	movwf	fsr2l,c
 21672  004336  6ADA               	clrf	fsr2h,c
 21673  004338  0E02               	movlw	2
 21674  00433A  D843               	call	PL34	;call to abstracted procedure
 21675  00433C  B4D8               	btfsc	status,2,c
 21676  00433E  18E7               	xorwf	indf1,w,c
 21677  004340  E02F               	bz	l1515
 21678                           
 21679                           ; BSR set to: 0
 21680                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 21681  004342  D84E               	call	PL104	;call to abstracted procedure
 21682  004344  CFDE F064          	movff	postinc2,??_fifo_read
 21683  004348  CFDD F065          	movff	postdec2,??_fifo_read+1
 21684  00434C  516C               	movf	fifo_read@f& (0+255),w,b
 21685  00434E  6ED9               	movwf	fsr2l,c
 21686  004350  6ADA               	clrf	fsr2h,c
 21687  004352  CFDE F066          	movff	postinc2,??_fifo_read+2
 21688  004356  CFDD F067          	movff	postdec2,??_fifo_read+3
 21689  00435A  5164               	movf	??_fifo_read& (0+255),w,b
 21690  00435C  2566               	addwf	(??_fifo_read+2)& (0+255),w,b
 21691  00435E  6ED9               	movwf	fsr2l,c
 21692  004360  5165               	movf	(??_fifo_read+1)& (0+255),w,b
 21693  004362  2167               	addwfc	(??_fifo_read+3)& (0+255),w,b
 21694  004364  6EDA               	movwf	fsr2h,c
 21695  004366  C068  FFE1         	movff	fifo_read@p,fsr1l
 21696  00436A  C069  FFE2         	movff	fifo_read@p+1,fsr1h
 21697  00436E  CFDF FFE7          	movff	indf2,indf1
 21698                           
 21699                           ; BSR set to: 0
 21700  004372  4B68               	infsnz	fifo_read@p& (0+255),f,b
 21701  004374  2B69               	incf	(fifo_read@p+1)& (0+255),f,b
 21702                           
 21703                           ; BSR set to: 0
 21704                           ;fifo.c: 38: f->tail++;
 21705  004376  516C               	movf	fifo_read@f& (0+255),w,b
 21706  004378  6ED9               	movwf	fsr2l,c
 21707  00437A  6ADA               	clrf	fsr2h,c
 21708  00437C  0E04               	movlw	4
 21709  00437E  26D9               	addwf	fsr2l,f,c
 21710  004380  6ADA               	clrf	fsr2h,c
 21711  004382  2ADE               	incf	postinc2,f,c
 21712  004384  0E00               	movlw	0
 21713  004386  22DD               	addwfc	postdec2,f,c
 21714                           
 21715                           ; BSR set to: 0
 21716                           ;fifo.c: 39: if (f->tail == f->size) {
 21717  004388  516C               	movf	fifo_read@f& (0+255),w,b
 21718  00438A  6ED9               	movwf	fsr2l,c
 21719  00438C  6ADA               	clrf	fsr2h,c
 21720  00438E  0E06               	movlw	6
 21721  004390  D818               	call	PL34	;call to abstracted procedure
 21722  004392  B4D8               	btfsc	status,2,c
 21723  004394  18E7               	xorwf	indf1,w,c
 21724  004396  E109               	bnz	l10032
 21725                           
 21726                           ; BSR set to: 0
 21727                           ;fifo.c: 40: f->tail = 0;
 21728  004398  D823               	call	PL104	;call to abstracted procedure
 21729  00439A  6ADE               	clrf	postinc2,c
 21730  00439C  6ADD               	clrf	postdec2,c
 21731  00439E  D005               	goto	l10032
 21732  0043A0                     l1515:
 21733                           
 21734                           ; BSR set to: 0
 21735                           ;fifo.c: 43: else {
 21736                           ;fifo.c: 44: return i;
 21737  0043A0  C06A  F060         	movff	fifo_read@i,?_fifo_read
 21738  0043A4  C06B  F061         	movff	fifo_read@i+1,?_fifo_read+1
 21739  0043A8  D00B               	goto	l1518
 21740  0043AA                     l10032:
 21741                           
 21742                           ; BSR set to: 0
 21743  0043AA  4B6A               	infsnz	fifo_read@i& (0+255),f,b
 21744  0043AC  2B6B               	incf	(fifo_read@i+1)& (0+255),f,b
 21745  0043AE                     l10034:
 21746                           
 21747                           ; BSR set to: 0
 21748  0043AE  5162               	movf	fifo_read@nbytes& (0+255),w,b
 21749  0043B0  5D6A               	subwf	fifo_read@i& (0+255),w,b
 21750  0043B2  5163               	movf	(fifo_read@nbytes+1)& (0+255),w,b
 21751  0043B4  596B               	subwfb	(fifo_read@i+1)& (0+255),w,b
 21752  0043B6  E3BD               	bnc	l10020
 21753                           
 21754                           ; BSR set to: 0
 21755                           ;fifo.c: 45: }
 21756                           ;fifo.c: 47: }
 21757                           ;fifo.c: 49: return nbytes;
 21758  0043B8  C062  F060         	movff	fifo_read@nbytes,?_fifo_read
 21759  0043BC  C063  F061         	movff	fifo_read@nbytes+1,?_fifo_read+1
 21760  0043C0                     l1518:
 21761                           
 21762                           ; BSR set to: 0
 21763  0043C0  0012               	return	
 21764  0043C2                     __end_of_fifo_read:
 21765                           	opt stack 0
 21766  0043C2                     PL34:
 21767                           	opt stack 24
 21768  0043C2  26D9               	addwf	fsr2l,f,c
 21769  0043C4  6ADA               	clrf	fsr2h,c
 21770  0043C6  516C               	movf	fifo_read@f& (0+255),w,b
 21771  0043C8  6EE1               	movwf	fsr1l,c
 21772  0043CA  6AE2               	clrf	fsr1h,c
 21773  0043CC  0E04               	movlw	4
 21774  0043CE  26E1               	addwf	fsr1l,f,c
 21775  0043D0  6AE2               	clrf	fsr1h,c
 21776  0043D2  52E6               	movf	postinc1,f,c
 21777  0043D4  52DE               	movf	postinc2,f,c
 21778  0043D6  50DD               	movf	postdec2,w,c
 21779  0043D8  18E5               	xorwf	postdec1,w,c
 21780  0043DA  CFDF FFE8          	movff	indf2,wreg
 21781  0043DE  0012               	return	
 21782  0043E0                     __end_ofPL34:
 21783                           	opt stack 0
 21784  0043E0                     PL104:
 21785                           	opt stack 24
 21786  0043E0  516C               	movf	fifo_read@f& (0+255),w,b
 21787  0043E2  6ED9               	movwf	fsr2l,c
 21788  0043E4  6ADA               	clrf	fsr2h,c
 21789  0043E6  0E04               	movlw	4
 21790  0043E8  26D9               	addwf	fsr2l,f,c
 21791  0043EA  6ADA               	clrf	fsr2h,c
 21792  0043EC  0012               	return	
 21793  0043EE                     __end_ofPL104:
 21794                           	opt stack 0
 21795                           tblptru	equ	0xFF8
 21796                           tblptrh	equ	0xFF7
 21797                           tblptrl	equ	0xFF6
 21798                           tablat	equ	0xFF5
 21799                           prodh	equ	0xFF4
 21800                           prodl	equ	0xFF3
 21801                           intcon	equ	0xFF2
 21802                           indf0	equ	0xFEF
 21803                           postinc0	equ	0xFEE
 21804                           fsr0h	equ	0xFEA
 21805                           fsr0l	equ	0xFE9
 21806                           wreg	equ	0xFE8
 21807                           indf1	equ	0xFE7
 21808                           postinc1	equ	0xFE6
 21809                           postdec1	equ	0xFE5
 21810                           fsr1h	equ	0xFE2
 21811                           fsr1l	equ	0xFE1
 21812                           indf2	equ	0xFDF
 21813                           postinc2	equ	0xFDE
 21814                           postdec2	equ	0xFDD
 21815                           plusw2	equ	0xFDB
 21816                           fsr2h	equ	0xFDA
 21817                           fsr2l	equ	0xFD9
 21818                           status	equ	0xFD8
 21819                           
 21820 ;; *************** function _sprintf *****************
 21821 ;; Defined at:
 21822 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 21823 ;; Parameters:    Size  Location     Type
 21824 ;;  sp              2   22[BANK0 ] PTR unsigned char 
 21825 ;;		 -> wrkbuf(80), 
 21826 ;;  f               2   24[BANK0 ] PTR const unsigned char 
 21827 ;;		 -> STR_201(3), STR_200(7), STR_194(3), STR_193(7), 
 21828 ;;		 -> STR_190(4), STR_189(8), STR_186(4), STR_185(8), 
 21829 ;;		 -> STR_182(4), STR_181(8), STR_178(4), STR_177(8), 
 21830 ;;		 -> STR_174(4), STR_173(7), STR_170(4), STR_169(7), 
 21831 ;;		 -> STR_166(4), STR_165(7), STR_162(4), STR_161(7), 
 21832 ;;		 -> STR_156(3), STR_155(7), STR_153(3), STR_152(7), 
 21833 ;;		 -> STR_150(3), STR_149(7), STR_147(3), STR_146(7), 
 21834 ;;		 -> STR_144(3), STR_143(7), STR_141(3), STR_140(7), 
 21835 ;;		 -> STR_84(3), STR_83(7), STR_68(3), STR_67(7), 
 21836 ;;		 -> STR_66(3), STR_65(7), STR_62(3), STR_61(7), 
 21837 ;;		 -> STR_59(3), STR_58(7), STR_57(3), STR_56(7), 
 21838 ;; Auto vars:     Size  Location     Type
 21839 ;;  idx             1   33[BANK0 ] unsigned char 
 21840 ;;  _val            4   45[BANK0 ] struct .
 21841 ;;  flag            2   50[BANK0 ] unsigned short 
 21842 ;;  width           2   43[BANK0 ] int 
 21843 ;;  prec            2   41[BANK0 ] int 
 21844 ;;  c               1   49[BANK0 ] char 
 21845 ;;  ap              1   40[BANK0 ] PTR void [1]
 21846 ;;		 -> ?_sprintf(2), 
 21847 ;; Return value:  Size  Location     Type
 21848 ;;                  2   22[BANK0 ] int 
 21849 ;; Registers used:
 21850 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21851 ;; Tracked objects:
 21852 ;;		On entry : F/0
 21853 ;;		On exit  : F/0
 21854 ;;		Unchanged: 0/0
 21855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21856 ;;      Params:         0       8       0       0       0       0       0
 21857 ;;      Locals:         0      19       0       0       0       0       0
 21858 ;;      Temps:          0       3       0       0       0       0       0
 21859 ;;      Totals:         0      30       0       0       0       0       0
 21860 ;;Total ram usage:       30 bytes
 21861 ;; Hardware stack levels used:    1
 21862 ;; Hardware stack levels required when called:    4
 21863 ;; This function calls:
 21864 ;;		_isdigit
 21865 ;;		___lldiv
 21866 ;;		___llmod
 21867 ;;		___wmul
 21868 ;; This function is called by:
 21869 ;;		_doModeVerbose
 21870 ;;		_receivePrintEventVerbose
 21871 ;;		_printStatistics
 21872 ;;		_printErrors
 21873 ;; This function uses a non-reentrant model
 21874 ;;
 21875                           
 21876                           	psect	text56
 21877  001650                     __ptext56:
 21878                           	opt stack 0
 21879  001650                     _sprintf:
 21880                           	opt stack 25
 21881                           
 21882                           ; BSR set to: 0
 21883                           ;doprnt.c: 494: va_list ap;
 21884                           ;doprnt.c: 499: signed char c;
 21885                           ;doprnt.c: 501: int width;
 21886                           ;doprnt.c: 504: int prec;
 21887                           ;doprnt.c: 508: unsigned short flag;
 21888                           ;doprnt.c: 527: union {
 21889                           ;doprnt.c: 528: unsigned long _val;
 21890                           ;doprnt.c: 529: struct {
 21891                           ;doprnt.c: 530: const char * _cp;
 21892                           ;doprnt.c: 531: unsigned _len;
 21893                           ;doprnt.c: 532: } _str;
 21894                           ;doprnt.c: 533: } _val;
 21895                           ;doprnt.c: 542: *ap = __va_start();
 21896                           
 21897                           ; BSR set to: 0
 21898                           ;incstack = 0
 21899                           ;incstack = 0
 21900  001650  0E7A               	movlw	low (?_sprintf+4)
 21901  001652  6F88               	movwf	sprintf@ap& (0+255),b
 21902                           
 21903                           ;doprnt.c: 545: while(c = *f++) {
 21904  001654  D32C               	goto	l11920
 21905  001656                     l11586:
 21906                           
 21907                           ; BSR set to: 0
 21908                           ;doprnt.c: 547: if(c != '%')
 21909  001656  5191               	movf	sprintf@c& (0+255),w,b
 21910  001658  0A25               	xorlw	37
 21911  00165A  E009               	bz	l1623
 21912                           
 21913                           ; BSR set to: 0
 21914                           ;doprnt.c: 549: {
 21915                           ;doprnt.c: 550: ((*sp++ = (c)));
 21916  00165C  C076  FFD9         	movff	sprintf@sp,fsr2l
 21917  001660  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 21918  001664  C091  FFDF         	movff	sprintf@c,indf2
 21919                           
 21920                           ; BSR set to: 0
 21921  001668  4B76               	infsnz	sprintf@sp& (0+255),f,b
 21922  00166A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 21923                           
 21924                           ;doprnt.c: 551: continue;
 21925  00166C  D320               	goto	l11920
 21926  00166E                     l1623:
 21927                           
 21928                           ; BSR set to: 0
 21929                           ;doprnt.c: 552: }
 21930                           ;doprnt.c: 555: width = 0;
 21931  00166E  6B8B               	clrf	sprintf@width& (0+255),b
 21932  001670  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 21933                           
 21934                           ;doprnt.c: 557: flag = 0;
 21935  001672  6B92               	clrf	sprintf@flag& (0+255),b
 21936  001674  6B93               	clrf	(sprintf@flag+1)& (0+255),b
 21937  001676  D009               	goto	l11602
 21938  001678                     l11592:
 21939                           
 21940                           ; BSR set to: 0
 21941                           ;doprnt.c: 563: flag |= 0x08;
 21942  001678  8792               	bsf	sprintf@flag& (0+255),3,b
 21943  00167A  D005               	goto	L33
 21944  00167C                     l11594:
 21945                           
 21946                           ; BSR set to: 0
 21947                           ;doprnt.c: 570: flag |= 0x01;
 21948  00167C  8192               	bsf	sprintf@flag& (0+255),0,b
 21949  00167E  D003               	goto	L33
 21950  001680                     l11596:
 21951                           
 21952                           ; BSR set to: 0
 21953                           ;doprnt.c: 583: flag |= 0x800;
 21954  001680  8793               	bsf	(sprintf@flag+1)& (0+255),3,b
 21955  001682  D001               	goto	L33
 21956  001684                     l11598:
 21957                           
 21958                           ; BSR set to: 0
 21959                           ;doprnt.c: 589: flag |= 0x04;
 21960  001684  8592               	bsf	sprintf@flag& (0+255),2,b
 21961  001686                     L33:
 21962                           
 21963                           ;doprnt.c: 590: f++;
 21964  001686  4B78               	infsnz	sprintf@f& (0+255),f,b
 21965  001688  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 21966  00168A                     l11602:
 21967                           
 21968                           ; BSR set to: 0
 21969  00168A  C078  FFF6         	movff	sprintf@f,tblptrl
 21970  00168E  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21971  001692  0008               	tblrd		*
 21972  001694  50F5               	movf	tablat,w,c
 21973                           
 21974                           ; Switch size 1, requested type "space"
 21975                           ; Number of cases is 4, Range of values is 32 to 48
 21976                           ; switch strategies available:
 21977                           ; Name         Instructions Cycles
 21978                           ; simple_byte           13     7 (average)
 21979                           ;	Chosen strategy is simple_byte
 21980  001696  0A20               	xorlw	32	; case 32
 21981  001698  E0F1               	bz	l11594
 21982  00169A  0A03               	xorlw	3	; case 35
 21983  00169C  E0F1               	bz	l11596
 21984  00169E  0A0E               	xorlw	14	; case 45
 21985  0016A0  E0EB               	bz	l11592
 21986  0016A2  0A1D               	xorlw	29	; case 48
 21987  0016A4  E0EF               	bz	l11598
 21988                           
 21989                           ; BSR set to: 0
 21990                           ;doprnt.c: 602: if(flag & 0x08)
 21991  0016A6  B792               	btfsc	sprintf@flag& (0+255),3,b
 21992                           
 21993                           ; BSR set to: 0
 21994                           ;doprnt.c: 603: flag &= ~0x04;
 21995  0016A8  9592               	bcf	sprintf@flag& (0+255),2,b
 21996                           
 21997                           ; BSR set to: 0
 21998                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 21999  0016AA  C078  FFF6         	movff	sprintf@f,tblptrl
 22000  0016AE  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22001  0016B2  0008               	tblrd		*
 22002  0016B4  50F5               	movf	tablat,w,c
 22003  0016B6  EC73  F02B         	call	_isdigit
 22004  0016BA  E325               	bnc	l11618
 22005                           
 22006                           ; BSR set to: 0
 22007                           ;doprnt.c: 607: width = 0;
 22008  0016BC  6B8B               	clrf	sprintf@width& (0+255),b
 22009  0016BE  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22010  0016C0                     l11610:
 22011                           
 22012                           ; BSR set to: 0
 22013                           ;doprnt.c: 609: width *= 10;
 22014  0016C0  C08B  F060         	movff	sprintf@width,?___wmul
 22015  0016C4  C08C  F061         	movff	sprintf@width+1,?___wmul+1
 22016  0016C8  6B63               	clrf	(?___wmul+3)& (0+255),b
 22017  0016CA  0E0A               	movlw	10
 22018  0016CC  6F62               	movwf	(?___wmul+2)& (0+255),b
 22019  0016CE  EC01  F02B         	call	___wmul	;wreg free
 22020  0016D2  C060  F08B         	movff	?___wmul,sprintf@width
 22021  0016D6  C061  F08C         	movff	?___wmul+1,sprintf@width+1
 22022                           
 22023                           ; BSR set to: 0
 22024                           ;doprnt.c: 610: width += *f++ - '0';
 22025  0016DA  C078  FFF6         	movff	sprintf@f,tblptrl
 22026  0016DE  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22027  0016E2  0008               	tblrd		*
 22028  0016E4  CFF5 F07E          	movff	tablat,??_sprintf
 22029  0016E8  0ED0               	movlw	208
 22030  0016EA  257E               	addwf	??_sprintf& (0+255),w,b
 22031  0016EC  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 22032  0016EE  6B80               	clrf	(??_sprintf+2)& (0+255),b
 22033  0016F0  0EFF               	movlw	255
 22034  0016F2  2380               	addwfc	(??_sprintf+2)& (0+255),f,b
 22035  0016F4  517F               	movf	(??_sprintf+1)& (0+255),w,b
 22036  0016F6  278B               	addwf	sprintf@width& (0+255),f,b
 22037  0016F8  5180               	movf	(??_sprintf+2)& (0+255),w,b
 22038  0016FA  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22039                           
 22040                           ; BSR set to: 0
 22041                           
 22042                           ; BSR set to: 0
 22043                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 22044  0016FC  DB36               	call	PL86	;call to abstracted procedure
 22045  0016FE  EC73  F02B         	call	_isdigit
 22046  001702  E314               	bnc	l11626
 22047  001704  D7DD               	goto	l11610
 22048  001706                     l11618:
 22049                           
 22050                           ; BSR set to: 0
 22051  001706  C078  FFF6         	movff	sprintf@f,tblptrl
 22052  00170A  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22053  00170E  0008               	tblrd		*
 22054  001710  50F5               	movf	tablat,w,c
 22055  001712  0A2A               	xorlw	42
 22056  001714  E10B               	bnz	l11626
 22057                           
 22058                           ; BSR set to: 0
 22059                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 22060  001716  5188               	movf	sprintf@ap& (0+255),w,b
 22061  001718  6ED9               	movwf	fsr2l,c
 22062  00171A  6ADA               	clrf	fsr2h,c
 22063  00171C  CFDE F08B          	movff	postinc2,sprintf@width
 22064  001720  CFDD F08C          	movff	postdec2,sprintf@width+1
 22065                           
 22066                           ; BSR set to: 0
 22067  001724  0E02               	movlw	2
 22068  001726  2788               	addwf	sprintf@ap& (0+255),f,b
 22069                           
 22070                           ; BSR set to: 0
 22071                           ;doprnt.c: 615: f++;
 22072  001728  4B78               	infsnz	sprintf@f& (0+255),f,b
 22073  00172A  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22074  00172C                     l11626:
 22075                           
 22076                           ; BSR set to: 0
 22077                           ;doprnt.c: 617: }
 22078                           ;doprnt.c: 620: if(*f == '.') {
 22079  00172C  C078  FFF6         	movff	sprintf@f,tblptrl
 22080  001730  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22081  001734  0008               	tblrd		*
 22082  001736  50F5               	movf	tablat,w,c
 22083  001738  0A2E               	xorlw	46
 22084  00173A  E137               	bnz	l1639
 22085                           
 22086                           ; BSR set to: 0
 22087                           ;doprnt.c: 621: flag |= 0x4000;
 22088  00173C  8D93               	bsf	(sprintf@flag+1)& (0+255),6,b
 22089                           
 22090                           ;doprnt.c: 622: f++;
 22091                           
 22092                           ; BSR set to: 0
 22093                           ;doprnt.c: 624: if(*f == '*') {
 22094  00173E  DB15               	call	PL86	;call to abstracted procedure
 22095  001740  0A2A               	xorlw	42
 22096  001742  E10C               	bnz	l1640
 22097                           
 22098                           ; BSR set to: 0
 22099                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 22100  001744  5188               	movf	sprintf@ap& (0+255),w,b
 22101  001746  6ED9               	movwf	fsr2l,c
 22102  001748  6ADA               	clrf	fsr2h,c
 22103  00174A  CFDE F089          	movff	postinc2,sprintf@prec
 22104  00174E  CFDD F08A          	movff	postdec2,sprintf@prec+1
 22105                           
 22106                           ; BSR set to: 0
 22107  001752  0E02               	movlw	2
 22108  001754  2788               	addwf	sprintf@ap& (0+255),f,b
 22109                           
 22110                           ; BSR set to: 0
 22111                           ;doprnt.c: 626: f++;
 22112  001756  4B78               	infsnz	sprintf@f& (0+255),f,b
 22113  001758  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22114                           
 22115                           ;doprnt.c: 627: } else
 22116  00175A  D088               	goto	l11696
 22117  00175C                     l1640:
 22118                           
 22119                           ; BSR set to: 0
 22120                           ;doprnt.c: 629: {
 22121                           ;doprnt.c: 630: prec = 0;
 22122  00175C  6B89               	clrf	sprintf@prec& (0+255),b
 22123  00175E  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22124                           
 22125                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 22126  001760  D01A               	goto	l11642
 22127  001762                     l11638:
 22128                           
 22129                           ; BSR set to: 0
 22130                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 22131  001762  C089  F060         	movff	sprintf@prec,?___wmul
 22132  001766  C08A  F061         	movff	sprintf@prec+1,?___wmul+1
 22133  00176A  6B63               	clrf	(?___wmul+3)& (0+255),b
 22134  00176C  0E0A               	movlw	10
 22135  00176E  6F62               	movwf	(?___wmul+2)& (0+255),b
 22136  001770  EC01  F02B         	call	___wmul	;wreg free
 22137  001774  C078  FFF6         	movff	sprintf@f,tblptrl
 22138  001778  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22139  00177C  0008               	tblrd		*
 22140  00177E  50F5               	movf	tablat,w,c
 22141  001780  2760               	addwf	?___wmul& (0+255),f,b
 22142  001782  0E00               	movlw	0
 22143  001784  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22144  001786  0ED0               	movlw	208
 22145  001788  2560               	addwf	?___wmul& (0+255),w,b
 22146  00178A  6F89               	movwf	sprintf@prec& (0+255),b
 22147  00178C  0EFF               	movlw	255
 22148  00178E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 22149  001790  6F8A               	movwf	(sprintf@prec+1)& (0+255),b
 22150                           
 22151                           ; BSR set to: 0
 22152  001792  4B78               	infsnz	sprintf@f& (0+255),f,b
 22153  001794  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22154  001796                     l11642:
 22155                           
 22156                           ; BSR set to: 0
 22157  001796  C078  FFF6         	movff	sprintf@f,tblptrl
 22158  00179A  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22159  00179E  0008               	tblrd		*
 22160  0017A0  50F5               	movf	tablat,w,c
 22161  0017A2  EC73  F02B         	call	_isdigit
 22162  0017A6  E362               	bnc	l11696
 22163  0017A8  D7DC               	goto	l11638
 22164  0017AA                     l1639:
 22165                           
 22166                           ; BSR set to: 0
 22167                           ;doprnt.c: 635: prec = 0;
 22168  0017AA  6B89               	clrf	sprintf@prec& (0+255),b
 22169  0017AC  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22170  0017AE  D05E               	goto	l11696
 22171  0017B0                     l11644:
 22172                           
 22173                           ; BSR set to: 0
 22174                           ;doprnt.c: 652: flag |= 0x10;
 22175  0017B0  8992               	bsf	sprintf@flag& (0+255),4,b
 22176                           
 22177                           ;doprnt.c: 653: goto loop;
 22178  0017B2  D05C               	goto	l11696
 22179  0017B4                     l11646:
 22180                           
 22181                           ; BSR set to: 0
 22182                           ;doprnt.c: 700: flag |= 0x40;
 22183  0017B4  8D92               	bsf	sprintf@flag& (0+255),6,b
 22184                           
 22185                           ;doprnt.c: 702: break;
 22186  0017B6  D06F               	goto	l11698
 22187  0017B8                     l11648:
 22188                           
 22189                           ; BSR set to: 0
 22190                           ;doprnt.c: 723: flag |= 0x20;
 22191  0017B8  8B92               	bsf	sprintf@flag& (0+255),5,b
 22192  0017BA                     l1656:
 22193                           
 22194                           ; BSR set to: 0
 22195                           ;doprnt.c: 730: flag |= 0x80;
 22196  0017BA  8F92               	bsf	sprintf@flag& (0+255),7,b
 22197                           
 22198                           ;doprnt.c: 732: break;
 22199  0017BC  D06C               	goto	l11698
 22200  0017BE                     l11650:
 22201                           
 22202                           ; BSR set to: 0
 22203                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 22204  0017BE  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22205  0017C0  1189               	iorwf	sprintf@prec& (0+255),w,b
 22206  0017C2  E009               	bz	l11656
 22207                           
 22208                           ; BSR set to: 0
 22209  0017C4  518E               	movf	(sprintf@_val+1)& (0+255),w,b
 22210  0017C6  5D89               	subwf	sprintf@prec& (0+255),w,b
 22211  0017C8  518F               	movf	(sprintf@_val+2)& (0+255),w,b
 22212  0017CA  598A               	subwfb	(sprintf@prec+1)& (0+255),w,b
 22213  0017CC  E204               	bc	l11656
 22214                           
 22215                           ; BSR set to: 0
 22216                           ;doprnt.c: 763: _val._str._len = prec;
 22217  0017CE  C089  F08E         	movff	sprintf@prec,sprintf@_val+1
 22218  0017D2  C08A  F08F         	movff	sprintf@prec+1,sprintf@_val+2
 22219  0017D6                     l11656:
 22220                           
 22221                           ; BSR set to: 0
 22222                           ;doprnt.c: 766: if(width > _val._str._len)
 22223  0017D6  518B               	movf	sprintf@width& (0+255),w,b
 22224  0017D8  5D8E               	subwf	(sprintf@_val+1)& (0+255),w,b
 22225  0017DA  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22226  0017DC  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22227  0017DE  E207               	bc	l1659
 22228                           
 22229                           ; BSR set to: 0
 22230                           ;doprnt.c: 767: width -= _val._str._len;
 22231  0017E0  EE20  F08E         	lfsr	2,sprintf@_val+1
 22232  0017E4  50DE               	movf	postinc2,w,c
 22233  0017E6  5F8B               	subwf	sprintf@width& (0+255),f,b
 22234  0017E8  50DD               	movf	postdec2,w,c
 22235  0017EA  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22236  0017EC  D002               	goto	l1660
 22237  0017EE                     l1659:
 22238                           
 22239                           ; BSR set to: 0
 22240                           ;doprnt.c: 768: else
 22241                           ;doprnt.c: 769: width = 0;
 22242  0017EE  6B8B               	clrf	sprintf@width& (0+255),b
 22243  0017F0  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22244  0017F2                     l1660:
 22245                           
 22246                           ; BSR set to: 0
 22247                           ;doprnt.c: 771: if(!(flag & 0x08))
 22248  0017F2  A792               	btfss	sprintf@flag& (0+255),3,b
 22249  0017F4  D004               	goto	l11666
 22250  0017F6  D015               	goto	l11674
 22251  0017F8                     l11662:
 22252                           
 22253                           ; BSR set to: 0
 22254                           ;doprnt.c: 774: ((*sp++ = (' ')));
 22255  0017F8  DAB1               	call	PL68	;call to abstracted procedure
 22256                           
 22257                           ; BSR set to: 0
 22258  0017FA  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22259  0017FC  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22260  0017FE                     l11666:
 22261                           
 22262                           ; BSR set to: 0
 22263  0017FE  078B               	decf	sprintf@width& (0+255),f,b
 22264  001800  DAC2               	call	PL112	;call to abstracted procedure
 22265  001802  B4D8               	btfsc	status,2,c
 22266  001804  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22267  001806  E00D               	bz	l11674
 22268  001808  D7F7               	goto	l11662
 22269  00180A                     l11668:
 22270                           
 22271                           ; BSR set to: 0
 22272                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 22273  00180A  518D               	movf	sprintf@_val& (0+255),w,b
 22274  00180C  6ED9               	movwf	fsr2l,c
 22275  00180E  6ADA               	clrf	fsr2h,c
 22276  001810  C076  FFE1         	movff	sprintf@sp,fsr1l
 22277  001814  C077  FFE2         	movff	sprintf@sp+1,fsr1h
 22278  001818  CFDF FFE7          	movff	indf2,indf1
 22279                           
 22280                           ; BSR set to: 0
 22281  00181C  2B8D               	incf	sprintf@_val& (0+255),f,b
 22282                           
 22283                           ; BSR set to: 0
 22284  00181E  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22285  001820  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22286  001822                     l11674:
 22287                           
 22288                           ; BSR set to: 0
 22289  001822  078E               	decf	(sprintf@_val+1)& (0+255),f,b
 22290  001824  A0D8               	btfss	status,0,c
 22291  001826  078F               	decf	(sprintf@_val+2)& (0+255),f,b
 22292  001828  0100               	movlb	0	; () banked
 22293  00182A  298E               	incf	(sprintf@_val+1)& (0+255),w,b
 22294  00182C  B4D8               	btfsc	status,2,c
 22295  00182E  298F               	incf	(sprintf@_val+2)& (0+255),w,b
 22296  001830  E1EC               	bnz	l11668
 22297                           
 22298                           ; BSR set to: 0
 22299                           ;doprnt.c: 779: if(flag & 0x08)
 22300  001832  B792               	btfsc	sprintf@flag& (0+255),3,b
 22301  001834  D004               	goto	l11682
 22302  001836  D23B               	goto	l11920
 22303  001838                     l11678:
 22304                           
 22305                           ; BSR set to: 0
 22306                           ;doprnt.c: 781: ((*sp++ = (' ')));
 22307  001838  DA91               	call	PL68	;call to abstracted procedure
 22308                           
 22309                           ; BSR set to: 0
 22310  00183A  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22311  00183C  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22312  00183E                     l11682:
 22313                           
 22314                           ; BSR set to: 0
 22315  00183E  078B               	decf	sprintf@width& (0+255),f,b
 22316  001840  DAA2               	call	PL112	;call to abstracted procedure
 22317  001842  B4D8               	btfsc	status,2,c
 22318  001844  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22319  001846  E101 D232          	bz	l11920
 22320  00184A  D7F6               	goto	l11678
 22321  00184C                     l11684:
 22322                           
 22323                           ; BSR set to: 0
 22324                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 22325  00184C  5188               	movf	sprintf@ap& (0+255),w,b
 22326  00184E  6ED9               	movwf	fsr2l,c
 22327  001850  6ADA               	clrf	fsr2h,c
 22328  001852  50DF               	movf	indf2,w,c
 22329  001854  6F91               	movwf	sprintf@c& (0+255),b
 22330                           
 22331                           ; BSR set to: 0
 22332  001856  0E02               	movlw	2
 22333  001858  2788               	addwf	sprintf@ap& (0+255),f,b
 22334  00185A                     l11688:
 22335                           
 22336                           ; BSR set to: 0
 22337                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 22338  00185A  0E91               	movlw	low sprintf@c
 22339  00185C  6F8D               	movwf	sprintf@_val& (0+255),b
 22340                           
 22341                           ; BSR set to: 0
 22342                           ;doprnt.c: 815: _val._str._len = 1;
 22343  00185E  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22344  001860  0E01               	movlw	1
 22345  001862  6F8E               	movwf	(sprintf@_val+1)& (0+255),b
 22346                           
 22347                           ;doprnt.c: 816: goto dostring;
 22348  001864  D7AC               	goto	l11650
 22349  001866                     l11692:
 22350                           
 22351                           ; BSR set to: 0
 22352                           ;doprnt.c: 827: flag |= 0xC0;
 22353  001866  0EC0               	movlw	192
 22354  001868  1392               	iorwf	sprintf@flag& (0+255),f,b
 22355                           
 22356                           ;doprnt.c: 828: break;
 22357  00186A  D015               	goto	l11698
 22358  00186C                     l11696:
 22359                           
 22360                           ; BSR set to: 0
 22361  00186C  DA6C               	call	PL62	;call to abstracted procedure
 22362  00186E  5191               	movf	sprintf@c& (0+255),w,b
 22363                           
 22364                           ; Switch size 1, requested type "space"
 22365                           ; Number of cases is 9, Range of values is 0 to 120
 22366                           ; switch strategies available:
 22367                           ; Name         Instructions Cycles
 22368                           ; simple_byte           28    15 (average)
 22369                           ;	Chosen strategy is simple_byte
 22370  001870  E101 D220          	bz	l11922
 22371  001874  0A58               	xorlw	88	; case 88
 22372  001876  E0A0               	bz	l11648
 22373  001878  0A3B               	xorlw	59	; case 99
 22374  00187A  E0E8               	bz	l11684
 22375  00187C  0A07               	xorlw	7	; case 100
 22376  00187E  E00B               	bz	l11698
 22377  001880  0A0D               	xorlw	13	; case 105
 22378  001882  E009               	bz	l11698
 22379  001884  0A05               	xorlw	5	; case 108
 22380  001886  E094               	bz	l11644
 22381  001888  0A03               	xorlw	3	; case 111
 22382  00188A  E094               	bz	l11646
 22383  00188C  0A1A               	xorlw	26	; case 117
 22384  00188E  E0EB               	bz	l11692
 22385  001890  0A0D               	xorlw	13	; case 120
 22386  001892  E093               	bz	l1656
 22387  001894  D7E2               	goto	l11688
 22388  001896                     l11698:
 22389                           
 22390                           ; BSR set to: 0
 22391                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 22392  001896  5192               	movf	sprintf@flag& (0+255),w,b
 22393  001898  0BC0               	andlw	192
 22394  00189A  E120               	bnz	l1675
 22395                           
 22396                           ; BSR set to: 0
 22397                           ;doprnt.c: 1260: {
 22398                           ;doprnt.c: 1262: if(flag & 0x10)
 22399  00189C  A992               	btfss	sprintf@flag& (0+255),4,b
 22400  00189E  D003               	goto	l11706
 22401                           
 22402                           ; BSR set to: 0
 22403                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 22404  0018A0  5188               	movf	sprintf@ap& (0+255),w,b
 22405                           
 22406                           ; BSR set to: 0
 22407  0018A2  DA46               	call	PL58	;call to abstracted procedure
 22408  0018A4  D00D               	goto	L34
 22409  0018A6                     l11706:
 22410                           
 22411                           ; BSR set to: 0
 22412                           ;doprnt.c: 1264: else
 22413                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 22414  0018A6  5188               	movf	sprintf@ap& (0+255),w,b
 22415  0018A8  6ED9               	movwf	fsr2l,c
 22416  0018AA  6ADA               	clrf	fsr2h,c
 22417  0018AC  CFDE F08D          	movff	postinc2,sprintf@_val
 22418  0018B0  CFDD F08E          	movff	postdec2,sprintf@_val+1
 22419  0018B4  0E00               	movlw	0
 22420  0018B6  BF8E               	btfsc	(sprintf@_val+1)& (0+255),7,b
 22421  0018B8  0EFF               	movlw	-1
 22422  0018BA  6F8F               	movwf	(sprintf@_val+2)& (0+255),b
 22423  0018BC  6F90               	movwf	(sprintf@_val+3)& (0+255),b
 22424                           
 22425                           ; BSR set to: 0
 22426  0018BE  0E02               	movlw	2
 22427  0018C0                     L34:
 22428  0018C0  2788               	addwf	sprintf@ap& (0+255),f,b
 22429                           
 22430                           ; BSR set to: 0
 22431                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 22432  0018C2  AF90               	btfss	(sprintf@_val+3)& (0+255),7,b
 22433  0018C4  D01F               	goto	l11724
 22434                           
 22435                           ; BSR set to: 0
 22436                           ;doprnt.c: 1269: flag |= 0x03;
 22437  0018C6  0E03               	movlw	3
 22438  0018C8  1392               	iorwf	sprintf@flag& (0+255),f,b
 22439                           
 22440                           ; BSR set to: 0
 22441                           ;doprnt.c: 1270: _val._val = -_val._val;
 22442  0018CA  1F90               	comf	(sprintf@_val+3)& (0+255),f,b
 22443  0018CC  1F8F               	comf	(sprintf@_val+2)& (0+255),f,b
 22444  0018CE  1F8E               	comf	(sprintf@_val+1)& (0+255),f,b
 22445  0018D0  6D8D               	negf	sprintf@_val& (0+255),b
 22446  0018D2  0E00               	movlw	0
 22447  0018D4  238E               	addwfc	(sprintf@_val+1)& (0+255),f,b
 22448  0018D6  238F               	addwfc	(sprintf@_val+2)& (0+255),f,b
 22449  0018D8  2390               	addwfc	(sprintf@_val+3)& (0+255),f,b
 22450  0018DA  D014               	goto	l11724
 22451  0018DC                     l1675:
 22452                           
 22453                           ; BSR set to: 0
 22454                           ;doprnt.c: 1275: else
 22455                           ;doprnt.c: 1280: {
 22456                           ;doprnt.c: 1288: if(flag & 0x10)
 22457  0018DC  A992               	btfss	sprintf@flag& (0+255),4,b
 22458  0018DE  D003               	goto	l11720
 22459                           
 22460                           ; BSR set to: 0
 22461                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 22462  0018E0  5188               	movf	sprintf@ap& (0+255),w,b
 22463                           
 22464                           ; BSR set to: 0
 22465  0018E2  DA26               	call	PL58	;call to abstracted procedure
 22466  0018E4  D00E               	goto	L35
 22467  0018E6                     l11720:
 22468                           
 22469                           ; BSR set to: 0
 22470                           ;doprnt.c: 1290: else
 22471                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22472  0018E6  5188               	movf	sprintf@ap& (0+255),w,b
 22473  0018E8  6ED9               	movwf	fsr2l,c
 22474  0018EA  6ADA               	clrf	fsr2h,c
 22475  0018EC  CFDE F07E          	movff	postinc2,??_sprintf
 22476  0018F0  CFDD F07F          	movff	postdec2,??_sprintf+1
 22477  0018F4  C07E  F08D         	movff	??_sprintf,sprintf@_val
 22478  0018F8  C07F  F08E         	movff	??_sprintf+1,sprintf@_val+1
 22479  0018FC  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22480  0018FE  6B90               	clrf	(sprintf@_val+3)& (0+255),b
 22481                           
 22482                           ; BSR set to: 0
 22483  001900  0E02               	movlw	2
 22484  001902                     L35:
 22485  001902  2788               	addwf	sprintf@ap& (0+255),f,b
 22486  001904                     l11724:
 22487                           
 22488                           ; BSR set to: 0
 22489                           ;doprnt.c: 1294: }
 22490                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 22491  001904  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22492  001906  1189               	iorwf	sprintf@prec& (0+255),w,b
 22493  001908  E15C               	bnz	l11774
 22494                           
 22495                           ; BSR set to: 0
 22496  00190A  5190               	movf	(sprintf@_val+3)& (0+255),w,b
 22497  00190C  118D               	iorwf	sprintf@_val& (0+255),w,b
 22498  00190E  118E               	iorwf	(sprintf@_val+1)& (0+255),w,b
 22499  001910  118F               	iorwf	(sprintf@_val+2)& (0+255),w,b
 22500  001912  E157               	bnz	l11774
 22501                           
 22502                           ; BSR set to: 0
 22503                           ;doprnt.c: 1298: prec++;
 22504  001914  4B89               	infsnz	sprintf@prec& (0+255),f,b
 22505  001916  2B8A               	incf	(sprintf@prec+1)& (0+255),f,b
 22506  001918  D054               	goto	l11774
 22507  00191A                     l11730:
 22508                           
 22509                           ; BSR set to: 0
 22510                           ;doprnt.c: 1309: case 0xC0:
 22511                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22512  00191A  0E01               	movlw	1
 22513  00191C  6F91               	movwf	sprintf@c& (0+255),b
 22514  00191E                     l11732:
 22515                           
 22516                           ; BSR set to: 0
 22517  00191E  5191               	movf	sprintf@c& (0+255),w,b
 22518  001920  0A0A               	xorlw	10
 22519  001922  E058               	bz	l11776
 22520                           
 22521                           ; BSR set to: 0
 22522                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 22523  001924  5191               	movf	sprintf@c& (0+255),w,b
 22524  001926  0D04               	mullw	4
 22525  001928  0EE4               	movlw	low _dpowers
 22526  00192A  24F3               	addwf	prodl,w,c
 22527  00192C  6EF6               	movwf	tblptrl,c
 22528  00192E  0E6F               	movlw	high _dpowers
 22529  001930  20F4               	addwfc	prodh,w,c
 22530  001932  6EF7               	movwf	tblptrh,c
 22531  001934  0009               	tblrd		*+
 22532  001936  50F5               	movf	tablat,w,c
 22533  001938  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22534  00193A  0009               	tblrd		*+
 22535  00193C  50F5               	movf	tablat,w,c
 22536  00193E  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22537  001940  0009               	tblrd		*+
 22538  001942  50F5               	movf	tablat,w,c
 22539  001944  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22540  001946  0009               	tblrd		*+
 22541  001948  50F5               	movf	tablat,w,c
 22542  00194A  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22543  00194C  E343               	bnc	l11776
 22544                           
 22545                           ; BSR set to: 0
 22546  00194E  2B91               	incf	sprintf@c& (0+255),f,b
 22547  001950  D7E6               	goto	l11732
 22548  001952                     l11744:
 22549                           
 22550                           ; BSR set to: 0
 22551                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 22552  001952  0E01               	movlw	1
 22553  001954  6F91               	movwf	sprintf@c& (0+255),b
 22554  001956                     l11746:
 22555                           
 22556                           ; BSR set to: 0
 22557  001956  5191               	movf	sprintf@c& (0+255),w,b
 22558  001958  0A08               	xorlw	8
 22559  00195A  E03C               	bz	l11776
 22560                           
 22561                           ; BSR set to: 0
 22562                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 22563  00195C  5191               	movf	sprintf@c& (0+255),w,b
 22564  00195E  0D04               	mullw	4
 22565  001960  0E0C               	movlw	low _hexpowers
 22566  001962  24F3               	addwf	prodl,w,c
 22567  001964  6EF6               	movwf	tblptrl,c
 22568  001966  0E70               	movlw	high _hexpowers
 22569  001968  20F4               	addwfc	prodh,w,c
 22570  00196A  6EF7               	movwf	tblptrh,c
 22571  00196C  0009               	tblrd		*+
 22572  00196E  50F5               	movf	tablat,w,c
 22573  001970  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22574  001972  0009               	tblrd		*+
 22575  001974  50F5               	movf	tablat,w,c
 22576  001976  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22577  001978  0009               	tblrd		*+
 22578  00197A  50F5               	movf	tablat,w,c
 22579  00197C  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22580  00197E  0009               	tblrd		*+
 22581  001980  50F5               	movf	tablat,w,c
 22582  001982  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22583  001984  E327               	bnc	l11776
 22584                           
 22585                           ; BSR set to: 0
 22586  001986  2B91               	incf	sprintf@c& (0+255),f,b
 22587  001988  D7E6               	goto	l11746
 22588  00198A                     l11758:
 22589                           
 22590                           ; BSR set to: 0
 22591                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 22592  00198A  0E01               	movlw	1
 22593  00198C  6F91               	movwf	sprintf@c& (0+255),b
 22594  00198E                     l11760:
 22595                           
 22596                           ; BSR set to: 0
 22597  00198E  5191               	movf	sprintf@c& (0+255),w,b
 22598  001990  0A0C               	xorlw	12
 22599  001992  E020               	bz	l11776
 22600                           
 22601                           ; BSR set to: 0
 22602                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 22603  001994  5191               	movf	sprintf@c& (0+255),w,b
 22604  001996  0D04               	mullw	4
 22605  001998  0EB4               	movlw	low _octpowers
 22606  00199A  24F3               	addwf	prodl,w,c
 22607  00199C  6EF6               	movwf	tblptrl,c
 22608  00199E  0E6F               	movlw	high _octpowers
 22609  0019A0  20F4               	addwfc	prodh,w,c
 22610  0019A2  6EF7               	movwf	tblptrh,c
 22611  0019A4  0009               	tblrd		*+
 22612  0019A6  50F5               	movf	tablat,w,c
 22613  0019A8  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22614  0019AA  0009               	tblrd		*+
 22615  0019AC  50F5               	movf	tablat,w,c
 22616  0019AE  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22617  0019B0  0009               	tblrd		*+
 22618  0019B2  50F5               	movf	tablat,w,c
 22619  0019B4  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22620  0019B6  0009               	tblrd		*+
 22621  0019B8  50F5               	movf	tablat,w,c
 22622  0019BA  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22623  0019BC  E30B               	bnc	l11776
 22624                           
 22625                           ; BSR set to: 0
 22626  0019BE  2B91               	incf	sprintf@c& (0+255),f,b
 22627  0019C0  D7E6               	goto	l11760
 22628  0019C2                     l11774:
 22629                           
 22630                           ; BSR set to: 0
 22631  0019C2  5192               	movf	sprintf@flag& (0+255),w,b
 22632  0019C4  0BC0               	andlw	192
 22633                           
 22634                           ; Switch size 1, requested type "space"
 22635                           ; Number of cases is 4, Range of values is 0 to 192
 22636                           ; switch strategies available:
 22637                           ; Name         Instructions Cycles
 22638                           ; simple_byte           13     7 (average)
 22639                           ;	Chosen strategy is simple_byte
 22640  0019C6  E0A9               	bz	l11730
 22641  0019C8  0A40               	xorlw	64	; case 64
 22642  0019CA  E0DF               	bz	l11758
 22643  0019CC  0AC0               	xorlw	192	; case 128
 22644  0019CE  E0C1               	bz	l11744
 22645  0019D0  0A40               	xorlw	64	; case 192
 22646  0019D2  E0A3               	bz	l11730
 22647  0019D4                     l11776:
 22648                           
 22649                           ; BSR set to: 0
 22650                           ;doprnt.c: 1346: if(c < prec)
 22651  0019D4  0E80               	movlw	128
 22652  0019D6  BF91               	btfsc	sprintf@c& (0+255),7,b
 22653  0019D8  0E7F               	movlw	127
 22654  0019DA  6F7E               	movwf	??_sprintf& (0+255),b
 22655  0019DC  5189               	movf	sprintf@prec& (0+255),w,b
 22656  0019DE  5D91               	subwf	sprintf@c& (0+255),w,b
 22657  0019E0  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22658  0019E2  0A80               	xorlw	128
 22659  0019E4  597E               	subwfb	??_sprintf& (0+255),w,b
 22660  0019E6  E203               	bc	l11780
 22661                           
 22662                           ; BSR set to: 0
 22663                           ;doprnt.c: 1347: c = prec;
 22664  0019E8  C089  F091         	movff	sprintf@prec,sprintf@c
 22665  0019EC  D00F               	goto	l11784
 22666  0019EE                     l11780:
 22667                           
 22668                           ; BSR set to: 0
 22669                           ;doprnt.c: 1348: else if(prec < c)
 22670  0019EE  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22671  0019F0  0A80               	xorlw	128
 22672  0019F2  6F7E               	movwf	??_sprintf& (0+255),b
 22673  0019F4  5191               	movf	sprintf@c& (0+255),w,b
 22674  0019F6  5D89               	subwf	sprintf@prec& (0+255),w,b
 22675  0019F8  0E80               	movlw	128
 22676  0019FA  BF91               	btfsc	sprintf@c& (0+255),7,b
 22677  0019FC  0E7F               	movlw	127
 22678  0019FE  597E               	subwfb	??_sprintf& (0+255),w,b
 22679  001A00  E205               	bc	l11784
 22680                           
 22681                           ; BSR set to: 0
 22682                           ;doprnt.c: 1349: prec = c;
 22683  001A02  5191               	movf	sprintf@c& (0+255),w,b
 22684  001A04  6F89               	movwf	sprintf@prec& (0+255),b
 22685  001A06  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22686  001A08  BF89               	btfsc	sprintf@prec& (0+255),7,b
 22687  001A0A  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 22688  001A0C                     l11784:
 22689                           
 22690                           ; BSR set to: 0
 22691                           ;doprnt.c: 1352: if(width && flag & 0x03)
 22692  001A0C  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22693  001A0E  118B               	iorwf	sprintf@width& (0+255),w,b
 22694  001A10  E006               	bz	l11790
 22695                           
 22696                           ; BSR set to: 0
 22697  001A12  5192               	movf	sprintf@flag& (0+255),w,b
 22698  001A14  0B03               	andlw	3
 22699  001A16  E003               	bz	l11790
 22700                           
 22701                           ; BSR set to: 0
 22702                           ;doprnt.c: 1353: width--;
 22703  001A18  078B               	decf	sprintf@width& (0+255),f,b
 22704  001A1A  A0D8               	btfss	status,0,c
 22705  001A1C  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22706  001A1E                     l11790:
 22707                           
 22708                           ; BSR set to: 0
 22709                           ;doprnt.c: 1355: if(flag & 0x4000) {
 22710  001A1E  AD93               	btfss	(sprintf@flag+1)& (0+255),6,b
 22711  001A20  D010               	goto	l11796
 22712                           
 22713                           ; BSR set to: 0
 22714                           ;doprnt.c: 1356: if(width > prec)
 22715  001A22  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22716  001A24  0A80               	xorlw	128
 22717  001A26  6F7E               	movwf	??_sprintf& (0+255),b
 22718  001A28  518B               	movf	sprintf@width& (0+255),w,b
 22719  001A2A  5D89               	subwf	sprintf@prec& (0+255),w,b
 22720  001A2C  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22721  001A2E  0A80               	xorlw	128
 22722  001A30  597E               	subwfb	??_sprintf& (0+255),w,b
 22723  001A32  E205               	bc	l1703
 22724                           
 22725                           ; BSR set to: 0
 22726                           ;doprnt.c: 1357: width -= prec;
 22727  001A34  5189               	movf	sprintf@prec& (0+255),w,b
 22728  001A36  5F8B               	subwf	sprintf@width& (0+255),f,b
 22729  001A38  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22730  001A3A  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22731  001A3C  D002               	goto	l11796
 22732  001A3E                     l1703:
 22733                           
 22734                           ; BSR set to: 0
 22735                           ;doprnt.c: 1358: else
 22736                           ;doprnt.c: 1359: width = 0;
 22737  001A3E  6B8B               	clrf	sprintf@width& (0+255),b
 22738  001A40  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22739  001A42                     l11796:
 22740                           
 22741                           ; BSR set to: 0
 22742                           ;doprnt.c: 1360: }
 22743                           ;doprnt.c: 1364: if((flag & (
 22744                           ;doprnt.c: 1366: 0x04|
 22745                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 22746  001A42  0EC4               	movlw	196
 22747  001A44  D94D               	call	PL18	;call to abstracted procedure
 22748  001A46  0E40               	movlw	64
 22749  001A48  B4D8               	btfsc	status,2,c
 22750  001A4A  197E               	xorwf	??_sprintf& (0+255),w,b
 22751  001A4C  E107               	bnz	l11802
 22752                           
 22753                           ; BSR set to: 0
 22754                           ;doprnt.c: 1369: if(width)
 22755  001A4E  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22756  001A50  118B               	iorwf	sprintf@width& (0+255),w,b
 22757  001A52  E018               	bz	l11808
 22758                           
 22759                           ; BSR set to: 0
 22760                           ;doprnt.c: 1370: width--;
 22761  001A54  078B               	decf	sprintf@width& (0+255),f,b
 22762  001A56  A0D8               	btfss	status,0,c
 22763  001A58  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22764  001A5A  D014               	goto	l11808
 22765  001A5C                     l11802:
 22766                           
 22767                           ; BSR set to: 0
 22768                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22769  001A5C  0EC0               	movlw	192
 22770  001A5E  D940               	call	PL18	;call to abstracted procedure
 22771  001A60  0E80               	movlw	128
 22772  001A62  B4D8               	btfsc	status,2,c
 22773  001A64  197E               	xorwf	??_sprintf& (0+255),w,b
 22774  001A66  E10E               	bnz	l11808
 22775                           
 22776                           ; BSR set to: 0
 22777                           ;doprnt.c: 1379: if(width > 2)
 22778  001A68  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22779  001A6A  0A80               	xorlw	128
 22780  001A6C  0F80               	addlw	-128
 22781  001A6E  0E03               	movlw	3
 22782  001A70  B4D8               	btfsc	status,2,c
 22783  001A72  5D8B               	subwf	sprintf@width& (0+255),w,b
 22784  001A74  E305               	bnc	l1709
 22785                           
 22786                           ; BSR set to: 0
 22787                           ;doprnt.c: 1380: width -= 2;
 22788  001A76  0EFE               	movlw	254
 22789  001A78  278B               	addwf	sprintf@width& (0+255),f,b
 22790  001A7A  0EFF               	movlw	255
 22791  001A7C  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22792  001A7E  D002               	goto	l11808
 22793  001A80                     l1709:
 22794                           
 22795                           ; BSR set to: 0
 22796                           ;doprnt.c: 1381: else
 22797                           ;doprnt.c: 1382: width = 0;
 22798  001A80  6B8B               	clrf	sprintf@width& (0+255),b
 22799  001A82  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22800  001A84                     l11808:
 22801                           
 22802                           ; BSR set to: 0
 22803                           ;doprnt.c: 1383: }
 22804                           ;doprnt.c: 1388: if(width > c)
 22805  001A84  0E80               	movlw	128
 22806  001A86  BF91               	btfsc	sprintf@c& (0+255),7,b
 22807  001A88  0E7F               	movlw	127
 22808  001A8A  6F7E               	movwf	??_sprintf& (0+255),b
 22809  001A8C  518B               	movf	sprintf@width& (0+255),w,b
 22810  001A8E  5D91               	subwf	sprintf@c& (0+255),w,b
 22811  001A90  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22812  001A92  0A80               	xorlw	128
 22813  001A94  597E               	subwfb	??_sprintf& (0+255),w,b
 22814  001A96  E207               	bc	l1711
 22815                           
 22816                           ; BSR set to: 0
 22817                           ;doprnt.c: 1389: width -= c;
 22818  001A98  5191               	movf	sprintf@c& (0+255),w,b
 22819  001A9A  5F8B               	subwf	sprintf@width& (0+255),f,b
 22820  001A9C  0E00               	movlw	0
 22821  001A9E  BF91               	btfsc	sprintf@c& (0+255),7,b
 22822  001AA0  0EFF               	movlw	255
 22823  001AA2  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22824  001AA4  D002               	goto	l1712
 22825  001AA6                     l1711:
 22826                           
 22827                           ; BSR set to: 0
 22828                           ;doprnt.c: 1390: else
 22829                           ;doprnt.c: 1391: width = 0;
 22830  001AA6  6B8B               	clrf	sprintf@width& (0+255),b
 22831  001AA8  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22832  001AAA                     l1712:
 22833                           
 22834                           ; BSR set to: 0
 22835                           ;doprnt.c: 1394: if(flag & 0x04) {
 22836  001AAA  A592               	btfss	sprintf@flag& (0+255),2,b
 22837  001AAC  D03C               	goto	l11846
 22838                           
 22839                           ; BSR set to: 0
 22840                           ;doprnt.c: 1399: if(flag & 0x03)
 22841  001AAE  5192               	movf	sprintf@flag& (0+255),w,b
 22842  001AB0  0B03               	andlw	3
 22843  001AB2  E009               	bz	l1714
 22844                           
 22845                           ; BSR set to: 0
 22846                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 22847  001AB4  C076  FFD9         	movff	sprintf@sp,fsr2l
 22848  001AB8  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22849  001ABC  0E2D               	movlw	45
 22850  001ABE  6EDF               	movwf	indf2,c
 22851  001AC0                     l11816:
 22852                           
 22853                           ; BSR set to: 0
 22854  001AC0  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22855  001AC2  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22856  001AC4  D022               	goto	l11838
 22857  001AC6                     l1714:
 22858                           
 22859                           ; BSR set to: 0
 22860                           ;doprnt.c: 1403: else
 22861                           ;doprnt.c: 1406: if(flag & 0x01)
 22862  001AC6  A192               	btfss	sprintf@flag& (0+255),0,b
 22863  001AC8  D006               	goto	l11822
 22864                           
 22865                           ; BSR set to: 0
 22866                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 22867  001ACA  C076  FFD9         	movff	sprintf@sp,fsr2l
 22868  001ACE  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22869  001AD2  0E20               	movlw	32
 22870  001AD4  D7F4               	goto	L36
 22871  001AD6                     l11822:
 22872                           
 22873                           ; BSR set to: 0
 22874                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22875  001AD6  0EC0               	movlw	192
 22876  001AD8  D903               	call	PL18	;call to abstracted procedure
 22877  001ADA  0E80               	movlw	128
 22878  001ADC  B4D8               	btfsc	status,2,c
 22879  001ADE  197E               	xorwf	??_sprintf& (0+255),w,b
 22880  001AE0  E114               	bnz	l11838
 22881                           
 22882                           ; BSR set to: 0
 22883                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 22884  001AE2  C076  FFD9         	movff	sprintf@sp,fsr2l
 22885  001AE6  D94A               	call	PL100	;call to abstracted procedure
 22886                           
 22887                           ; BSR set to: 0
 22888  001AE8  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22889  001AEA  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22890                           
 22891                           ; BSR set to: 0
 22892                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 22893  001AEC  BB92               	btfsc	sprintf@flag& (0+255),5,b
 22894  001AEE  D003               	goto	l11832
 22895                           
 22896                           ; BSR set to: 0
 22897  001AF0  6B83               	clrf	(_sprintf$2144+1)& (0+255),b
 22898  001AF2  0E78               	movlw	120
 22899  001AF4  D002               	goto	L37
 22900  001AF6                     l11832:
 22901                           
 22902                           ; BSR set to: 0
 22903  001AF6  6B83               	clrf	(_sprintf$2144+1)& (0+255),b
 22904  001AF8  0E58               	movlw	88
 22905  001AFA                     L37:
 22906  001AFA  6F82               	movwf	_sprintf$2144& (0+255),b
 22907                           
 22908                           ; BSR set to: 0
 22909  001AFC  C076  FFD9         	movff	sprintf@sp,fsr2l
 22910  001B00  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22911  001B04  C082  FFDF         	movff	_sprintf$2144,indf2
 22912  001B08  D7DB               	goto	l11816
 22913  001B0A                     l11838:
 22914                           
 22915                           ; BSR set to: 0
 22916                           ;doprnt.c: 1419: }
 22917                           ;doprnt.c: 1422: if(width)
 22918  001B0A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22919  001B0C  118B               	iorwf	sprintf@width& (0+255),w,b
 22920  001B0E  E101 D0B9          	bz	l11910
 22921                           
 22922                           ; BSR set to: 0
 22923                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 22924  001B12  C076  FFD9         	movff	sprintf@sp,fsr2l
 22925  001B16  D932               	call	PL100	;call to abstracted procedure
 22926                           
 22927                           ; BSR set to: 0
 22928  001B18  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22929  001B1A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22930                           
 22931                           ; BSR set to: 0
 22932                           ;doprnt.c: 1425: while(--width);
 22933  001B1C  078B               	decf	sprintf@width& (0+255),f,b
 22934  001B1E  A0D8               	btfss	status,0,c
 22935  001B20  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22936  001B22  0100               	movlb	0	; () banked
 22937  001B24  D7F2               	goto	l11838
 22938  001B26                     l11846:
 22939                           
 22940                           ; BSR set to: 0
 22941                           ;doprnt.c: 1429: {
 22942                           ;doprnt.c: 1431: if(width
 22943                           ;doprnt.c: 1433: && !(flag & 0x08)
 22944                           ;doprnt.c: 1435: )
 22945  001B26  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22946  001B28  118B               	iorwf	sprintf@width& (0+255),w,b
 22947  001B2A  A4D8               	btfss	status,2,c
 22948                           
 22949                           ; BSR set to: 0
 22950  001B2C  B792               	btfsc	sprintf@flag& (0+255),3,b
 22951  001B2E  D004               	goto	l11856
 22952  001B30                     l11850:
 22953                           
 22954                           ; BSR set to: 0
 22955                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 22956  001B30  C076  FFD9         	movff	sprintf@sp,fsr2l
 22957                           
 22958                           ; BSR set to: 0
 22959                           
 22960                           ; BSR set to: 0
 22961                           ;doprnt.c: 1438: while(--width);
 22962  001B34  D8F0               	call	PL46	;call to abstracted procedure
 22963  001B36  E1FC               	bnz	l11850
 22964  001B38                     l11856:
 22965                           
 22966                           ; BSR set to: 0
 22967                           ;doprnt.c: 1445: if(flag & 0x03)
 22968  001B38  5192               	movf	sprintf@flag& (0+255),w,b
 22969  001B3A  0B03               	andlw	3
 22970  001B3C  E009               	bz	l1730
 22971                           
 22972                           ; BSR set to: 0
 22973                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 22974  001B3E  C076  FFD9         	movff	sprintf@sp,fsr2l
 22975  001B42  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22976  001B46  0E2D               	movlw	45
 22977  001B48  6EDF               	movwf	indf2,c
 22978                           
 22979                           ; BSR set to: 0
 22980  001B4A  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22981  001B4C  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22982  001B4E  D008               	goto	l11866
 22983  001B50                     l1730:
 22984                           
 22985                           ; BSR set to: 0
 22986                           ;doprnt.c: 1450: else if(flag & 0x01)
 22987  001B50  A192               	btfss	sprintf@flag& (0+255),0,b
 22988  001B52  D006               	goto	l11866
 22989                           
 22990                           ; BSR set to: 0
 22991                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 22992  001B54  C076  FFD9         	movff	sprintf@sp,fsr2l
 22993  001B58  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22994  001B5C  0E20               	movlw	32
 22995  001B5E  D7F4               	goto	L38
 22996  001B60                     l11866:
 22997                           
 22998                           ; BSR set to: 0
 22999                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 23000  001B60  0EC0               	movlw	192
 23001  001B62  D8BE               	call	PL18	;call to abstracted procedure
 23002  001B64  0E40               	movlw	64
 23003  001B66  B4D8               	btfsc	status,2,c
 23004  001B68  197E               	xorwf	??_sprintf& (0+255),w,b
 23005  001B6A  E106               	bnz	l11872
 23006                           
 23007                           ; BSR set to: 0
 23008                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 23009  001B6C  C076  FFD9         	movff	sprintf@sp,fsr2l
 23010  001B70  D905               	call	PL100	;call to abstracted procedure
 23011  001B72                     l11870:
 23012                           
 23013                           ; BSR set to: 0
 23014  001B72  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23015  001B74  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23016  001B76  D086               	goto	l11910
 23017  001B78                     l11872:
 23018                           
 23019                           ; BSR set to: 0
 23020                           ;doprnt.c: 1457: else
 23021                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23022  001B78  0EC0               	movlw	192
 23023  001B7A  D8B2               	call	PL18	;call to abstracted procedure
 23024  001B7C  0E80               	movlw	128
 23025  001B7E  B4D8               	btfsc	status,2,c
 23026  001B80  197E               	xorwf	??_sprintf& (0+255),w,b
 23027  001B82  E001 D07F          	bnz	l11910
 23028                           
 23029                           ; BSR set to: 0
 23030                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 23031  001B86  C076  FFD9         	movff	sprintf@sp,fsr2l
 23032  001B8A  D8F8               	call	PL100	;call to abstracted procedure
 23033                           
 23034                           ; BSR set to: 0
 23035  001B8C  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23036  001B8E  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23037                           
 23038                           ; BSR set to: 0
 23039                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 23040  001B90  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23041  001B92  D003               	goto	l11882
 23042                           
 23043                           ; BSR set to: 0
 23044  001B94  6B85               	clrf	(_sprintf$2145+1)& (0+255),b
 23045  001B96  0E78               	movlw	120
 23046  001B98  D002               	goto	L39
 23047  001B9A                     l11882:
 23048                           
 23049                           ; BSR set to: 0
 23050  001B9A  6B85               	clrf	(_sprintf$2145+1)& (0+255),b
 23051  001B9C  0E58               	movlw	88
 23052  001B9E                     L39:
 23053  001B9E  6F84               	movwf	_sprintf$2145& (0+255),b
 23054                           
 23055                           ; BSR set to: 0
 23056  001BA0  C076  FFD9         	movff	sprintf@sp,fsr2l
 23057  001BA4  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23058  001BA8  C084  FFDF         	movff	_sprintf$2145,indf2
 23059  001BAC  D7E2               	goto	l11870
 23060  001BAE                     l11888:
 23061                           
 23062                           ; BSR set to: 0
 23063                           ;doprnt.c: 1493: case 0xC0:
 23064                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 23065  001BAE  C089  F07E         	movff	sprintf@prec,??_sprintf
 23066  001BB2  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23067  001BB6  90D8               	bcf	status,0,c
 23068  001BB8  377E               	rlcf	??_sprintf& (0+255),f,b
 23069  001BBA  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23070  001BBC  90D8               	bcf	status,0,c
 23071  001BBE  377E               	rlcf	??_sprintf& (0+255),f,b
 23072  001BC0  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23073  001BC2  0EE4               	movlw	low _dpowers
 23074  001BC4  257E               	addwf	??_sprintf& (0+255),w,b
 23075  001BC6  6EF6               	movwf	tblptrl,c
 23076  001BC8  0E6F               	movlw	high _dpowers
 23077  001BCA  D87B               	call	PL14	;call to abstracted procedure
 23078  001BCC  C08D  F060         	movff	sprintf@_val,?___lldiv
 23079  001BD0  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23080  001BD4  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23081  001BD8  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23082  001BDC  ECB4  F026         	call	___lldiv	;wreg free
 23083  001BE0  C063  F070         	movff	?___lldiv+3,?___llmod+3
 23084  001BE4  C062  F06F         	movff	?___lldiv+2,?___llmod+2
 23085  001BE8  C061  F06E         	movff	?___lldiv+1,?___llmod+1
 23086  001BEC  C060  F06D         	movff	?___lldiv,?___llmod
 23087  001BF0  0E0A               	movlw	10
 23088  001BF2  6F71               	movwf	(?___llmod+4)& (0+255),b
 23089  001BF4  0E00               	movlw	0
 23090  001BF6  6B72               	clrf	(?___llmod+5)& (0+255),b
 23091  001BF8  6B73               	clrf	(?___llmod+6)& (0+255),b
 23092  001BFA  6B74               	clrf	(?___llmod+7)& (0+255),b
 23093  001BFC  EC2F  F028         	call	___llmod	;wreg free
 23094  001C00  516D               	movf	?___llmod& (0+255),w,b
 23095  001C02  D02D               	goto	L40
 23096  001C04                     l11890:
 23097                           
 23098                           ; BSR set to: 0
 23099                           ;doprnt.c: 1506: {
 23100                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 23101  001C04  D875               	call	PL24	;call to abstracted procedure
 23102  001C06  0E0C               	movlw	low _hexpowers
 23103  001C08  257E               	addwf	??_sprintf& (0+255),w,b
 23104  001C0A  6EF6               	movwf	tblptrl,c
 23105  001C0C  0E70               	movlw	high _hexpowers
 23106  001C0E  D859               	call	PL14	;call to abstracted procedure
 23107  001C10  ECB4  F026         	call	___lldiv	;wreg free
 23108  001C14  5160               	movf	?___lldiv& (0+255),w,b
 23109  001C16  0B0F               	andlw	15
 23110  001C18  6F81               	movwf	sprintf@idx& (0+255),b
 23111                           
 23112                           ; BSR set to: 0
 23113                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 23114  001C1A  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23115  001C1C  D004               	goto	l11896
 23116                           
 23117                           ; BSR set to: 0
 23118  001C1E  0E7E               	movlw	high STR_264
 23119  001C20  6F87               	movwf	(_sprintf$2151+1)& (0+255),b
 23120  001C22  0E2C               	movlw	low STR_264
 23121  001C24  D003               	goto	L41
 23122  001C26                     l11896:
 23123                           
 23124                           ; BSR set to: 0
 23125  001C26  0E7E               	movlw	high STR_263
 23126  001C28  6F87               	movwf	(_sprintf$2151+1)& (0+255),b
 23127  001C2A  0E1B               	movlw	low STR_263
 23128  001C2C                     L41:
 23129  001C2C  6F86               	movwf	_sprintf$2151& (0+255),b
 23130                           
 23131                           ; BSR set to: 0
 23132  001C2E  5181               	movf	sprintf@idx& (0+255),w,b
 23133  001C30  2586               	addwf	_sprintf$2151& (0+255),w,b
 23134  001C32  6F7E               	movwf	??_sprintf& (0+255),b
 23135  001C34  0E00               	movlw	0
 23136  001C36  2187               	addwfc	(_sprintf$2151+1)& (0+255),w,b
 23137  001C38  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23138  001C3A  C07E  FFF6         	movff	??_sprintf,tblptrl
 23139  001C3E  C07F  FFF7         	movff	??_sprintf+1,tblptrh
 23140  001C42  0008               	tblrd		*
 23141  001C44  CFF5 F091          	movff	tablat,sprintf@c
 23142                           
 23143                           ;doprnt.c: 1515: }
 23144                           ;doprnt.c: 1517: break;
 23145  001C48  D016               	goto	l11906
 23146  001C4A                     l11900:
 23147                           
 23148                           ; BSR set to: 0
 23149                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 23150  001C4A  D852               	call	PL24	;call to abstracted procedure
 23151  001C4C  0EB4               	movlw	low _octpowers
 23152  001C4E  257E               	addwf	??_sprintf& (0+255),w,b
 23153  001C50  6EF6               	movwf	tblptrl,c
 23154  001C52  0E6F               	movlw	high _octpowers
 23155  001C54  D836               	call	PL14	;call to abstracted procedure
 23156  001C56  ECB4  F026         	call	___lldiv	;wreg free
 23157  001C5A  5160               	movf	?___lldiv& (0+255),w,b
 23158  001C5C  0B07               	andlw	7
 23159  001C5E                     L40:
 23160  001C5E  0F30               	addlw	48
 23161  001C60  6F91               	movwf	sprintf@c& (0+255),b
 23162                           
 23163                           ;doprnt.c: 1527: break;
 23164  001C62  D009               	goto	l11906
 23165  001C64                     l11904:
 23166                           
 23167                           ; BSR set to: 0
 23168  001C64  5192               	movf	sprintf@flag& (0+255),w,b
 23169  001C66  0BC0               	andlw	192
 23170                           
 23171                           ; Switch size 1, requested type "space"
 23172                           ; Number of cases is 4, Range of values is 0 to 192
 23173                           ; switch strategies available:
 23174                           ; Name         Instructions Cycles
 23175                           ; simple_byte           13     7 (average)
 23176                           ;	Chosen strategy is simple_byte
 23177  001C68  E0A2               	bz	l11888
 23178  001C6A  0A40               	xorlw	64	; case 64
 23179  001C6C  E0EE               	bz	l11900
 23180  001C6E  0AC0               	xorlw	192	; case 128
 23181  001C70  E0C9               	bz	l11890
 23182  001C72  0A40               	xorlw	64	; case 192
 23183  001C74  E09C               	bz	l11888
 23184  001C76                     l11906:
 23185                           
 23186                           ; BSR set to: 0
 23187                           ;doprnt.c: 1531: ((*sp++ = (c)));
 23188  001C76  C076  FFD9         	movff	sprintf@sp,fsr2l
 23189  001C7A  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23190  001C7E  C091  FFDF         	movff	sprintf@c,indf2
 23191  001C82  D777               	goto	l11870
 23192  001C84                     l11910:
 23193                           
 23194                           ; BSR set to: 0
 23195  001C84  0789               	decf	sprintf@prec& (0+255),f,b
 23196  001C86  A0D8               	btfss	status,0,c
 23197  001C88  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 23198  001C8A  0100               	movlb	0	; () banked
 23199  001C8C  2989               	incf	sprintf@prec& (0+255),w,b
 23200  001C8E  B4D8               	btfsc	status,2,c
 23201  001C90  298A               	incf	(sprintf@prec+1)& (0+255),w,b
 23202  001C92  E1E8               	bnz	l11904
 23203                           
 23204                           ; BSR set to: 0
 23205                           ;doprnt.c: 1532: }
 23206                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 23207  001C94  A792               	btfss	sprintf@flag& (0+255),3,b
 23208  001C96  D00B               	goto	l11920
 23209                           
 23210                           ; BSR set to: 0
 23211  001C98  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23212  001C9A  0A80               	xorlw	128
 23213  001C9C  0F80               	addlw	-128
 23214  001C9E  0E01               	movlw	1
 23215  001CA0  B4D8               	btfsc	status,2,c
 23216  001CA2  5D8B               	subwf	sprintf@width& (0+255),w,b
 23217  001CA4  E304               	bnc	l11920
 23218  001CA6                     l11914:
 23219                           
 23220                           ; BSR set to: 0
 23221                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 23222  001CA6  C076  FFD9         	movff	sprintf@sp,fsr2l
 23223                           
 23224                           ; BSR set to: 0
 23225                           
 23226                           ; BSR set to: 0
 23227                           ;doprnt.c: 1538: while(--width);
 23228  001CAA  D835               	call	PL46	;call to abstracted procedure
 23229  001CAC  E1FC               	bnz	l11914
 23230  001CAE                     l11920:
 23231                           
 23232                           ; BSR set to: 0
 23233  001CAE  D84B               	call	PL62	;call to abstracted procedure
 23234  001CB0  6791               	tstfsz	sprintf@c& (0+255),b
 23235  001CB2  D4D1               	goto	l11586
 23236  001CB4                     l11922:
 23237                           
 23238                           ; BSR set to: 0
 23239                           ;doprnt.c: 1545: *sp = 0;
 23240  001CB4  C076  FFD9         	movff	sprintf@sp,fsr2l
 23241  001CB8  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23242  001CBC  0E00               	movlw	0
 23243  001CBE  6EDF               	movwf	indf2,c
 23244                           
 23245                           ; BSR set to: 0
 23246  001CC0  0C00               	retlw	0
 23247  001CC2                     __end_of_sprintf:
 23248                           	opt stack 0
 23249  001CC2                     PL14:
 23250                           	opt stack 25
 23251  001CC2  217F               	addwfc	(??_sprintf+1)& (0+255),w,b
 23252  001CC4  6EF7               	movwf	tblptrh,c
 23253  001CC6  0009               	tblrd		*+
 23254  001CC8  CFF5 F064          	movff	tablat,?___lldiv+4
 23255  001CCC  0009               	tblrd		*+
 23256  001CCE  CFF5 F065          	movff	tablat,?___lldiv+5
 23257  001CD2  0009               	tblrd		*+
 23258  001CD4  CFF5 F066          	movff	tablat,?___lldiv+6
 23259  001CD8  000A               	tblrd		*-
 23260  001CDA  CFF5 F067          	movff	tablat,?___lldiv+7
 23261  001CDE  0012               	return	
 23262  001CE0                     __end_ofPL14:
 23263                           	opt stack 0
 23264  001CE0                     PL18:
 23265                           	opt stack 25
 23266  001CE0  1592               	andwf	sprintf@flag& (0+255),w,b
 23267  001CE2  6F7E               	movwf	??_sprintf& (0+255),b
 23268  001CE4  0E08               	movlw	8
 23269  001CE6  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
 23270  001CE8  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23271  001CEA  517F               	movf	(??_sprintf+1)& (0+255),w,b
 23272  001CEC  0A08               	xorlw	8
 23273  001CEE  0012               	return	
 23274  001CF0                     __end_ofPL18:
 23275                           	opt stack 0
 23276  001CF0                     PL24:
 23277                           	opt stack 25
 23278  001CF0  C08D  F060         	movff	sprintf@_val,?___lldiv
 23279  001CF4  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23280  001CF8  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23281  001CFC  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23282  001D00  C089  F07E         	movff	sprintf@prec,??_sprintf
 23283  001D04  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23284  001D08  90D8               	bcf	status,0,c
 23285  001D0A  377E               	rlcf	??_sprintf& (0+255),f,b
 23286  001D0C  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23287  001D0E  90D8               	bcf	status,0,c
 23288  001D10  377E               	rlcf	??_sprintf& (0+255),f,b
 23289  001D12  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23290  001D14  0012               	return	
 23291  001D16                     __end_ofPL24:
 23292                           	opt stack 0
 23293  001D16                     PL46:
 23294                           	opt stack 25
 23295  001D16  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23296  001D1A  0E20               	movlw	32
 23297  001D1C  6EDF               	movwf	indf2,c
 23298  001D1E  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23299  001D20  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23300  001D22  078B               	decf	sprintf@width& (0+255),f,b
 23301  001D24  A0D8               	btfss	status,0,c
 23302  001D26  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23303  001D28  0100               	movlb	0	; () banked
 23304  001D2A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23305  001D2C  118B               	iorwf	sprintf@width& (0+255),w,b
 23306  001D2E  0012               	return	
 23307  001D30                     __end_ofPL46:
 23308                           	opt stack 0
 23309  001D30                     PL58:
 23310                           	opt stack 25
 23311  001D30  6ED9               	movwf	fsr2l,c
 23312  001D32  6ADA               	clrf	fsr2h,c
 23313  001D34  CFDE F08D          	movff	postinc2,sprintf@_val
 23314  001D38  CFDE F08E          	movff	postinc2,sprintf@_val+1
 23315  001D3C  CFDE F08F          	movff	postinc2,sprintf@_val+2
 23316  001D40  CFDE F090          	movff	postinc2,sprintf@_val+3
 23317  001D44  0C04               	retlw	4
 23318  001D46                     __end_ofPL58:
 23319                           	opt stack 0
 23320  001D46                     PL62:
 23321                           	opt stack 25
 23322  001D46  C078  FFF6         	movff	sprintf@f,tblptrl
 23323  001D4A  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23324  001D4E  4B78               	infsnz	sprintf@f& (0+255),f,b
 23325  001D50  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23326  001D52  0008               	tblrd		*
 23327  001D54  CFF5 F091          	movff	tablat,sprintf@c
 23328  001D58  0100               	movlb	0	; () banked
 23329  001D5A  0012               	return	
 23330  001D5C                     __end_ofPL62:
 23331                           	opt stack 0
 23332  001D5C                     PL68:
 23333                           	opt stack 25
 23334  001D5C  C076  FFD9         	movff	sprintf@sp,fsr2l
 23335  001D60  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23336  001D64  0E20               	movlw	32
 23337  001D66  6EDF               	movwf	indf2,c
 23338  001D68  0C20               	retlw	32
 23339  001D6A                     __end_ofPL68:
 23340                           	opt stack 0
 23341  001D6A                     PL86:
 23342                           	opt stack 25
 23343  001D6A  4B78               	infsnz	sprintf@f& (0+255),f,b
 23344  001D6C  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23345  001D6E  C078  FFF6         	movff	sprintf@f,tblptrl
 23346  001D72  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23347  001D76  0008               	tblrd		*
 23348  001D78  50F5               	movf	tablat,w,c
 23349  001D7A  0012               	return	
 23350  001D7C                     __end_ofPL86:
 23351                           	opt stack 0
 23352  001D7C                     PL100:
 23353                           	opt stack 25
 23354  001D7C  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23355  001D80  0E30               	movlw	48
 23356  001D82  6EDF               	movwf	indf2,c
 23357  001D84  0C30               	retlw	48
 23358  001D86                     __end_ofPL100:
 23359                           	opt stack 0
 23360  001D86                     PL112:
 23361                           	opt stack 25
 23362  001D86  A0D8               	btfss	status,0,c
 23363  001D88  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23364  001D8A  0100               	movlb	0	; () banked
 23365  001D8C  298B               	incf	sprintf@width& (0+255),w,b
 23366  001D8E  0012               	return	
 23367  001D90                     __end_ofPL112:
 23368                           	opt stack 0
 23369                           tblptru	equ	0xFF8
 23370                           tblptrh	equ	0xFF7
 23371                           tblptrl	equ	0xFF6
 23372                           tablat	equ	0xFF5
 23373                           prodh	equ	0xFF4
 23374                           prodl	equ	0xFF3
 23375                           intcon	equ	0xFF2
 23376                           indf0	equ	0xFEF
 23377                           postinc0	equ	0xFEE
 23378                           fsr0h	equ	0xFEA
 23379                           fsr0l	equ	0xFE9
 23380                           wreg	equ	0xFE8
 23381                           indf1	equ	0xFE7
 23382                           postinc1	equ	0xFE6
 23383                           postdec1	equ	0xFE5
 23384                           fsr1h	equ	0xFE2
 23385                           fsr1l	equ	0xFE1
 23386                           indf2	equ	0xFDF
 23387                           postinc2	equ	0xFDE
 23388                           postdec2	equ	0xFDD
 23389                           plusw2	equ	0xFDB
 23390                           fsr2h	equ	0xFDA
 23391                           fsr2l	equ	0xFD9
 23392                           status	equ	0xFD8
 23393                           
 23394 ;; *************** function ___wmul *****************
 23395 ;; Defined at:
 23396 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 23397 ;; Parameters:    Size  Location     Type
 23398 ;;  multiplier      2    0[BANK0 ] unsigned int 
 23399 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 23400 ;; Auto vars:     Size  Location     Type
 23401 ;;  product         2    4[BANK0 ] unsigned int 
 23402 ;; Return value:  Size  Location     Type
 23403 ;;                  2    0[BANK0 ] unsigned int 
 23404 ;; Registers used:
 23405 ;;		wreg, status,2, status,0, prodl, prodh
 23406 ;; Tracked objects:
 23407 ;;		On entry : F/0
 23408 ;;		On exit  : F/0
 23409 ;;		Unchanged: 0/0
 23410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23411 ;;      Params:         0       4       0       0       0       0       0
 23412 ;;      Locals:         0       2       0       0       0       0       0
 23413 ;;      Temps:          0       0       0       0       0       0       0
 23414 ;;      Totals:         0       6       0       0       0       0       0
 23415 ;;Total ram usage:        6 bytes
 23416 ;; Hardware stack levels used:    1
 23417 ;; Hardware stack levels required when called:    3
 23418 ;; This function calls:
 23419 ;;		Nothing
 23420 ;; This function is called by:
 23421 ;;		_sprintf
 23422 ;;		_atoi
 23423 ;; This function uses a non-reentrant model
 23424 ;;
 23425                           
 23426                           	psect	text57
 23427  005602                     __ptext57:
 23428                           	opt stack 0
 23429  005602                     ___wmul:
 23430                           	opt stack 25
 23431                           
 23432                           ; BSR set to: 0
 23433                           
 23434                           ; BSR set to: 0
 23435                           ;incstack = 0
 23436                           ;incstack = 0
 23437  005602  5160               	movf	___wmul@multiplier& (0+255),w,b
 23438  005604  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23439  005606  CFF3 F064          	movff	prodl,___wmul@product
 23440  00560A  CFF4 F065          	movff	prodh,___wmul@product+1
 23441  00560E  5160               	movf	___wmul@multiplier& (0+255),w,b
 23442  005610  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 23443  005612  D808               	call	PL102	;call to abstracted procedure
 23444  005614  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 23445  005616  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23446  005618  D805               	call	PL102	;call to abstracted procedure
 23447                           
 23448                           ; BSR set to: 0
 23449  00561A  C064  F060         	movff	___wmul@product,?___wmul
 23450  00561E  C065  F061         	movff	___wmul@product+1,?___wmul+1
 23451                           
 23452                           ; BSR set to: 0
 23453  005622  0012               	return	
 23454  005624                     __end_of___wmul:
 23455                           	opt stack 0
 23456  005624                     PL102:
 23457                           	opt stack 25
 23458  005624  CFF3 FFF4          	movff	prodl,prodh
 23459  005628  6AF3               	clrf	prodl,c
 23460  00562A  50F3               	movf	prodl,w,c
 23461  00562C  2764               	addwf	___wmul@product& (0+255),f,b
 23462  00562E  50F4               	movf	prodh,w,c
 23463  005630  2365               	addwfc	(___wmul@product+1)& (0+255),f,b
 23464  005632  0012               	return	
 23465  005634                     __end_ofPL102:
 23466                           	opt stack 0
 23467                           tblptru	equ	0xFF8
 23468                           tblptrh	equ	0xFF7
 23469                           tblptrl	equ	0xFF6
 23470                           tablat	equ	0xFF5
 23471                           prodh	equ	0xFF4
 23472                           prodl	equ	0xFF3
 23473                           intcon	equ	0xFF2
 23474                           indf0	equ	0xFEF
 23475                           postinc0	equ	0xFEE
 23476                           fsr0h	equ	0xFEA
 23477                           fsr0l	equ	0xFE9
 23478                           wreg	equ	0xFE8
 23479                           indf1	equ	0xFE7
 23480                           postinc1	equ	0xFE6
 23481                           postdec1	equ	0xFE5
 23482                           fsr1h	equ	0xFE2
 23483                           fsr1l	equ	0xFE1
 23484                           indf2	equ	0xFDF
 23485                           postinc2	equ	0xFDE
 23486                           postdec2	equ	0xFDD
 23487                           plusw2	equ	0xFDB
 23488                           fsr2h	equ	0xFDA
 23489                           fsr2l	equ	0xFD9
 23490                           status	equ	0xFD8
 23491                           
 23492 ;; *************** function ___llmod *****************
 23493 ;; Defined at:
 23494 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 23495 ;; Parameters:    Size  Location     Type
 23496 ;;  dividend        4   13[BANK0 ] unsigned long 
 23497 ;;  divisor         4   17[BANK0 ] unsigned long 
 23498 ;; Auto vars:     Size  Location     Type
 23499 ;;  counter         1   21[BANK0 ] unsigned char 
 23500 ;; Return value:  Size  Location     Type
 23501 ;;                  4   13[BANK0 ] unsigned long 
 23502 ;; Registers used:
 23503 ;;		wreg, status,2, status,0
 23504 ;; Tracked objects:
 23505 ;;		On entry : F/0
 23506 ;;		On exit  : F/0
 23507 ;;		Unchanged: 0/0
 23508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23509 ;;      Params:         0       8       0       0       0       0       0
 23510 ;;      Locals:         0       1       0       0       0       0       0
 23511 ;;      Temps:          0       0       0       0       0       0       0
 23512 ;;      Totals:         0       9       0       0       0       0       0
 23513 ;;Total ram usage:        9 bytes
 23514 ;; Hardware stack levels used:    1
 23515 ;; Hardware stack levels required when called:    3
 23516 ;; This function calls:
 23517 ;;		Nothing
 23518 ;; This function is called by:
 23519 ;;		_sprintf
 23520 ;;		_ultoa
 23521 ;; This function uses a non-reentrant model
 23522 ;;
 23523                           
 23524                           	psect	text58
 23525  00505E                     __ptext58:
 23526                           	opt stack 0
 23527  00505E                     ___llmod:
 23528                           	opt stack 24
 23529                           
 23530                           ; BSR set to: 0
 23531                           
 23532                           ; BSR set to: 0
 23533                           ;incstack = 0
 23534                           ;incstack = 0
 23535  00505E  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23536  005060  1171               	iorwf	___llmod@divisor& (0+255),w,b
 23537  005062  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 23538  005064  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 23539  005066  E023               	bz	l2329
 23540                           
 23541                           ; BSR set to: 0
 23542  005068  0E01               	movlw	1
 23543  00506A  6F75               	movwf	___llmod@counter& (0+255),b
 23544  00506C  D006               	goto	l12880
 23545  00506E                     l12878:
 23546                           
 23547                           ; BSR set to: 0
 23548  00506E  90D8               	bcf	status,0,c
 23549  005070  3771               	rlcf	___llmod@divisor& (0+255),f,b
 23550  005072  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 23551  005074  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 23552  005076  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 23553  005078  2B75               	incf	___llmod@counter& (0+255),f,b
 23554  00507A                     l12880:
 23555                           
 23556                           ; BSR set to: 0
 23557  00507A  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
 23558  00507C  D7F8               	goto	l12878
 23559  00507E                     l12882:
 23560                           
 23561                           ; BSR set to: 0
 23562  00507E  5171               	movf	___llmod@divisor& (0+255),w,b
 23563  005080  5D6D               	subwf	___llmod@dividend& (0+255),w,b
 23564  005082  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23565  005084  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 23566  005086  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23567  005088  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 23568  00508A  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23569  00508C  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 23570  00508E  E308               	bnc	l12886
 23571                           
 23572                           ; BSR set to: 0
 23573  005090  5171               	movf	___llmod@divisor& (0+255),w,b
 23574  005092  5F6D               	subwf	___llmod@dividend& (0+255),f,b
 23575  005094  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23576  005096  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 23577  005098  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23578  00509A  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 23579  00509C  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23580  00509E  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 23581  0050A0                     l12886:
 23582                           
 23583                           ; BSR set to: 0
 23584  0050A0  90D8               	bcf	status,0,c
 23585  0050A2  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 23586  0050A4  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 23587  0050A6  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 23588  0050A8  3371               	rrcf	___llmod@divisor& (0+255),f,b
 23589                           
 23590                           ; BSR set to: 0
 23591  0050AA  2F75               	decfsz	___llmod@counter& (0+255),f,b
 23592  0050AC  D7E8               	goto	l12882
 23593  0050AE                     l2329:
 23594                           
 23595                           ; BSR set to: 0
 23596  0050AE  C06D  F06D         	movff	___llmod@dividend,?___llmod
 23597  0050B2  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
 23598  0050B6  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
 23599  0050BA  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
 23600                           
 23601                           ; BSR set to: 0
 23602  0050BE  0012               	return	
 23603  0050C0                     __end_of___llmod:
 23604                           	opt stack 0
 23605                           tblptru	equ	0xFF8
 23606                           tblptrh	equ	0xFF7
 23607                           tblptrl	equ	0xFF6
 23608                           tablat	equ	0xFF5
 23609                           prodh	equ	0xFF4
 23610                           prodl	equ	0xFF3
 23611                           intcon	equ	0xFF2
 23612                           indf0	equ	0xFEF
 23613                           postinc0	equ	0xFEE
 23614                           fsr0h	equ	0xFEA
 23615                           fsr0l	equ	0xFE9
 23616                           wreg	equ	0xFE8
 23617                           indf1	equ	0xFE7
 23618                           postinc1	equ	0xFE6
 23619                           postdec1	equ	0xFE5
 23620                           fsr1h	equ	0xFE2
 23621                           fsr1l	equ	0xFE1
 23622                           indf2	equ	0xFDF
 23623                           postinc2	equ	0xFDE
 23624                           postdec2	equ	0xFDD
 23625                           plusw2	equ	0xFDB
 23626                           fsr2h	equ	0xFDA
 23627                           fsr2l	equ	0xFD9
 23628                           status	equ	0xFD8
 23629                           
 23630 ;; *************** function ___lldiv *****************
 23631 ;; Defined at:
 23632 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 23633 ;; Parameters:    Size  Location     Type
 23634 ;;  dividend        4    0[BANK0 ] unsigned long 
 23635 ;;  divisor         4    4[BANK0 ] unsigned long 
 23636 ;; Auto vars:     Size  Location     Type
 23637 ;;  quotient        4    8[BANK0 ] unsigned long 
 23638 ;;  counter         1   12[BANK0 ] unsigned char 
 23639 ;; Return value:  Size  Location     Type
 23640 ;;                  4    0[BANK0 ] unsigned long 
 23641 ;; Registers used:
 23642 ;;		wreg, status,2, status,0
 23643 ;; Tracked objects:
 23644 ;;		On entry : F/0
 23645 ;;		On exit  : F/0
 23646 ;;		Unchanged: 0/0
 23647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23648 ;;      Params:         0       8       0       0       0       0       0
 23649 ;;      Locals:         0       5       0       0       0       0       0
 23650 ;;      Temps:          0       0       0       0       0       0       0
 23651 ;;      Totals:         0      13       0       0       0       0       0
 23652 ;;Total ram usage:       13 bytes
 23653 ;; Hardware stack levels used:    1
 23654 ;; Hardware stack levels required when called:    3
 23655 ;; This function calls:
 23656 ;;		Nothing
 23657 ;; This function is called by:
 23658 ;;		_sprintf
 23659 ;;		_ultoa
 23660 ;; This function uses a non-reentrant model
 23661 ;;
 23662                           
 23663                           	psect	text59
 23664  004D68                     __ptext59:
 23665                           	opt stack 0
 23666  004D68                     ___lldiv:
 23667                           	opt stack 24
 23668                           
 23669                           ; BSR set to: 0
 23670                           
 23671                           ; BSR set to: 0
 23672                           ;incstack = 0
 23673                           ;incstack = 0
 23674  004D68  6B68               	clrf	___lldiv@quotient& (0+255),b
 23675  004D6A  6B69               	clrf	(___lldiv@quotient+1)& (0+255),b
 23676  004D6C  6B6A               	clrf	(___lldiv@quotient+2)& (0+255),b
 23677  004D6E  6B6B               	clrf	(___lldiv@quotient+3)& (0+255),b
 23678                           
 23679                           ; BSR set to: 0
 23680  004D70  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23681  004D72  1164               	iorwf	___lldiv@divisor& (0+255),w,b
 23682  004D74  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 23683  004D76  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 23684  004D78  E029               	bz	l2319
 23685                           
 23686                           ; BSR set to: 0
 23687  004D7A  0E01               	movlw	1
 23688  004D7C  6F6C               	movwf	___lldiv@counter& (0+255),b
 23689  004D7E  D006               	goto	l12860
 23690  004D80                     l12858:
 23691                           
 23692                           ; BSR set to: 0
 23693  004D80  90D8               	bcf	status,0,c
 23694  004D82  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 23695  004D84  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 23696  004D86  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 23697  004D88  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 23698  004D8A  2B6C               	incf	___lldiv@counter& (0+255),f,b
 23699  004D8C                     l12860:
 23700                           
 23701                           ; BSR set to: 0
 23702  004D8C  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 23703  004D8E  D7F8               	goto	l12858
 23704  004D90                     l12862:
 23705                           
 23706                           ; BSR set to: 0
 23707  004D90  90D8               	bcf	status,0,c
 23708  004D92  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 23709  004D94  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 23710  004D96  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 23711  004D98  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 23712                           
 23713                           ; BSR set to: 0
 23714  004D9A  5164               	movf	___lldiv@divisor& (0+255),w,b
 23715  004D9C  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 23716  004D9E  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23717  004DA0  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 23718  004DA2  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23719  004DA4  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 23720  004DA6  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23721  004DA8  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 23722  004DAA  E309               	bnc	l12870
 23723                           
 23724                           ; BSR set to: 0
 23725  004DAC  5164               	movf	___lldiv@divisor& (0+255),w,b
 23726  004DAE  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 23727  004DB0  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23728  004DB2  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 23729  004DB4  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23730  004DB6  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 23731  004DB8  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23732  004DBA  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 23733                           
 23734                           ; BSR set to: 0
 23735  004DBC  8168               	bsf	___lldiv@quotient& (0+255),0,b
 23736  004DBE                     l12870:
 23737                           
 23738                           ; BSR set to: 0
 23739  004DBE  90D8               	bcf	status,0,c
 23740  004DC0  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 23741  004DC2  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 23742  004DC4  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 23743  004DC6  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 23744                           
 23745                           ; BSR set to: 0
 23746  004DC8  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 23747  004DCA  D7E2               	goto	l12862
 23748  004DCC                     l2319:
 23749                           
 23750                           ; BSR set to: 0
 23751  004DCC  C068  F060         	movff	___lldiv@quotient,?___lldiv
 23752  004DD0  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 23753  004DD4  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 23754  004DD8  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 23755                           
 23756                           ; BSR set to: 0
 23757  004DDC  0012               	return	
 23758  004DDE                     __end_of___lldiv:
 23759                           	opt stack 0
 23760                           tblptru	equ	0xFF8
 23761                           tblptrh	equ	0xFF7
 23762                           tblptrl	equ	0xFF6
 23763                           tablat	equ	0xFF5
 23764                           prodh	equ	0xFF4
 23765                           prodl	equ	0xFF3
 23766                           intcon	equ	0xFF2
 23767                           indf0	equ	0xFEF
 23768                           postinc0	equ	0xFEE
 23769                           fsr0h	equ	0xFEA
 23770                           fsr0l	equ	0xFE9
 23771                           wreg	equ	0xFE8
 23772                           indf1	equ	0xFE7
 23773                           postinc1	equ	0xFE6
 23774                           postdec1	equ	0xFE5
 23775                           fsr1h	equ	0xFE2
 23776                           fsr1l	equ	0xFE1
 23777                           indf2	equ	0xFDF
 23778                           postinc2	equ	0xFDE
 23779                           postdec2	equ	0xFDD
 23780                           plusw2	equ	0xFDB
 23781                           fsr2h	equ	0xFDA
 23782                           fsr2l	equ	0xFD9
 23783                           status	equ	0xFD8
 23784                           
 23785 ;; *************** function _isdigit *****************
 23786 ;; Defined at:
 23787 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 23788 ;; Parameters:    Size  Location     Type
 23789 ;;  c               1    wreg     unsigned char 
 23790 ;; Auto vars:     Size  Location     Type
 23791 ;;  c               1    2[BANK0 ] unsigned char 
 23792 ;; Return value:  Size  Location     Type
 23793 ;;		None               void
 23794 ;; Registers used:
 23795 ;;		wreg, status,2, status,0
 23796 ;; Tracked objects:
 23797 ;;		On entry : 0/0
 23798 ;;		On exit  : F/0
 23799 ;;		Unchanged: 0/0
 23800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23801 ;;      Params:         0       0       0       0       0       0       0
 23802 ;;      Locals:         0       2       0       0       0       0       0
 23803 ;;      Temps:          0       1       0       0       0       0       0
 23804 ;;      Totals:         0       3       0       0       0       0       0
 23805 ;;Total ram usage:        3 bytes
 23806 ;; Hardware stack levels used:    1
 23807 ;; Hardware stack levels required when called:    3
 23808 ;; This function calls:
 23809 ;;		Nothing
 23810 ;; This function is called by:
 23811 ;;		_sprintf
 23812 ;;		_atoi
 23813 ;; This function uses a non-reentrant model
 23814 ;;
 23815                           
 23816                           	psect	text60
 23817  0056E6                     __ptext60:
 23818                           	opt stack 0
 23819  0056E6                     _isdigit:
 23820                           	opt stack 25
 23821                           
 23822                           ; BSR set to: 0
 23823                           ;incstack = 0
 23824                           ;incstack = 0
 23825                           ;isdigit@c stored from wreg
 23826  0056E6  CFE8 F062          	movff	wreg,isdigit@c
 23827  0056EA  0100               	movlb	0	; () banked
 23828  0056EC  6B61               	clrf	_isdigit$2895& (0+255),b
 23829                           
 23830                           ; BSR set to: 0
 23831  0056EE  0E3A               	movlw	58
 23832  0056F0  6162               	cpfslt	isdigit@c& (0+255),b
 23833  0056F2  D005               	goto	l12818
 23834                           
 23835                           ; BSR set to: 0
 23836  0056F4  0E2F               	movlw	47
 23837  0056F6  6562               	cpfsgt	isdigit@c& (0+255),b
 23838  0056F8  D002               	goto	l12818
 23839                           
 23840                           ; BSR set to: 0
 23841  0056FA  0E01               	movlw	1
 23842  0056FC  6F61               	movwf	_isdigit$2895& (0+255),b
 23843  0056FE                     l12818:
 23844                           
 23845                           ; BSR set to: 0
 23846  0056FE  C061  F060         	movff	_isdigit$2895,??_isdigit
 23847  005702  3160               	rrcf	??_isdigit& (0+255),w,b
 23848                           
 23849                           ; BSR set to: 0
 23850  005704  0012               	return	
 23851  005706                     __end_of_isdigit:
 23852                           	opt stack 0
 23853                           tblptru	equ	0xFF8
 23854                           tblptrh	equ	0xFF7
 23855                           tblptrl	equ	0xFF6
 23856                           tablat	equ	0xFF5
 23857                           prodh	equ	0xFF4
 23858                           prodl	equ	0xFF3
 23859                           intcon	equ	0xFF2
 23860                           indf0	equ	0xFEF
 23861                           postinc0	equ	0xFEE
 23862                           fsr0h	equ	0xFEA
 23863                           fsr0l	equ	0xFE9
 23864                           wreg	equ	0xFE8
 23865                           indf1	equ	0xFE7
 23866                           postinc1	equ	0xFE6
 23867                           postdec1	equ	0xFE5
 23868                           fsr1h	equ	0xFE2
 23869                           fsr1l	equ	0xFE1
 23870                           indf2	equ	0xFDF
 23871                           postinc2	equ	0xFDE
 23872                           postdec2	equ	0xFDD
 23873                           plusw2	equ	0xFDB
 23874                           fsr2h	equ	0xFDA
 23875                           fsr2l	equ	0xFD9
 23876                           status	equ	0xFD8
 23877                           
 23878 ;; *************** function _printFirmwareVersion *****************
 23879 ;; Defined at:
 23880 ;;		line 2736 in file "main.c"
 23881 ;; Parameters:    Size  Location     Type
 23882 ;;		None
 23883 ;; Auto vars:     Size  Location     Type
 23884 ;;  wrkbuf         20   24[BANK0 ] unsigned char [20]
 23885 ;; Return value:  Size  Location     Type
 23886 ;;		None               void
 23887 ;; Registers used:
 23888 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 23889 ;; Tracked objects:
 23890 ;;		On entry : 0/0
 23891 ;;		On exit  : 0/0
 23892 ;;		Unchanged: 0/0
 23893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23894 ;;      Params:         0       0       0       0       0       0       0
 23895 ;;      Locals:         0      20       0       0       0       0       0
 23896 ;;      Temps:          0       0       0       0       0       0       0
 23897 ;;      Totals:         0      20       0       0       0       0       0
 23898 ;;Total ram usage:       20 bytes
 23899 ;; Hardware stack levels used:    1
 23900 ;; Hardware stack levels required when called:    6
 23901 ;; This function calls:
 23902 ;;		_putsUSART
 23903 ;;		_WriteUSART
 23904 ;;		_itoa
 23905 ;; This function is called by:
 23906 ;;		_main
 23907 ;;		_doModeVerbose
 23908 ;; This function uses a non-reentrant model
 23909 ;;
 23910                           
 23911                           	psect	text61
 23912  004A5A                     __ptext61:
 23913                           	opt stack 0
 23914  004A5A                     _printFirmwareVersion:
 23915                           	opt stack 23
 23916                           
 23917                           ;main.c: 2737: char wrkbuf[20];
 23918                           ;main.c: 2738: putsUSART((char *) "Version: ");
 23919                           
 23920                           ; BSR set to: 0
 23921                           ;incstack = 0
 23922                           ;incstack = 0
 23923  004A5A  0E7E               	movlw	high STR_254
 23924  004A5C  0100               	movlb	0	; () banked
 23925  004A5E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23926  004A60  0E9C               	movlw	low STR_254
 23927  004A62  6F61               	movwf	?_putsUSART& (0+255),b
 23928  004A64  ECEA  F028         	call	_putsUSART	;wreg free
 23929                           
 23930                           ;main.c: 2739: itoa(wrkbuf, 1, 10);
 23931  004A68  D838               	call	PL64	;call to abstracted procedure
 23932  004A6A  0E01               	movlw	1
 23933  004A6C  6F72               	movwf	(?_itoa+2)& (0+255),b
 23934  004A6E  6B75               	clrf	(?_itoa+5)& (0+255),b
 23935  004A70  0E0A               	movlw	10
 23936  004A72  6F74               	movwf	(?_itoa+4)& (0+255),b
 23937  004A74  ECCA  F02A         	call	_itoa	;wreg free
 23938                           
 23939                           ; BSR set to: 0
 23940                           ;main.c: 2740: putsUSART(wrkbuf);
 23941  004A78  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23942  004A7A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23943  004A7C  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23944  004A7E  6F61               	movwf	?_putsUSART& (0+255),b
 23945  004A80  ECEA  F028         	call	_putsUSART	;wreg free
 23946  004A84                     l1210:
 23947  004A84  A2AC               	btfss	4012,1,c	;volatile
 23948  004A86  D7FE               	goto	l1210
 23949                           
 23950                           ;main.c: 2742: WriteUSART('.');
 23951  004A88  0E2E               	movlw	46
 23952  004A8A  ECB9  F02B         	call	_WriteUSART
 23953                           
 23954                           ;main.c: 2743: itoa(wrkbuf, 0, 10);
 23955  004A8E  D825               	call	PL64	;call to abstracted procedure
 23956  004A90  6B72               	clrf	(?_itoa+2)& (0+255),b
 23957  004A92  6B75               	clrf	(?_itoa+5)& (0+255),b
 23958  004A94  0E0A               	movlw	10
 23959  004A96  6F74               	movwf	(?_itoa+4)& (0+255),b
 23960  004A98  ECCA  F02A         	call	_itoa	;wreg free
 23961                           
 23962                           ; BSR set to: 0
 23963                           ;main.c: 2744: putsUSART(wrkbuf);
 23964  004A9C  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23965  004A9E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23966  004AA0  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23967  004AA2  6F61               	movwf	?_putsUSART& (0+255),b
 23968  004AA4  ECEA  F028         	call	_putsUSART	;wreg free
 23969  004AA8                     l1213:
 23970  004AA8  A2AC               	btfss	4012,1,c	;volatile
 23971  004AAA  D7FE               	goto	l1213
 23972                           
 23973                           ;main.c: 2746: WriteUSART('.');
 23974  004AAC  0E2E               	movlw	46
 23975  004AAE  ECB9  F02B         	call	_WriteUSART
 23976                           
 23977                           ;main.c: 2747: itoa(wrkbuf, 0, 10);
 23978  004AB2  D813               	call	PL64	;call to abstracted procedure
 23979  004AB4  6B72               	clrf	(?_itoa+2)& (0+255),b
 23980  004AB6  6B75               	clrf	(?_itoa+5)& (0+255),b
 23981  004AB8  0E0A               	movlw	10
 23982  004ABA  6F74               	movwf	(?_itoa+4)& (0+255),b
 23983  004ABC  ECCA  F02A         	call	_itoa	;wreg free
 23984                           
 23985                           ; BSR set to: 0
 23986                           ;main.c: 2748: putsUSART(wrkbuf);
 23987  004AC0  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23988  004AC2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23989  004AC4  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23990  004AC6  6F61               	movwf	?_putsUSART& (0+255),b
 23991  004AC8  ECEA  F028         	call	_putsUSART	;wreg free
 23992                           
 23993                           ;main.c: 2749: putsUSART((char *) "\r\n");
 23994  004ACC  0E74               	movlw	high (STR_197+50)
 23995  004ACE  0100               	movlb	0	; () banked
 23996  004AD0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23997  004AD2  0E8A               	movlw	low (STR_197+50)
 23998  004AD4  6F61               	movwf	?_putsUSART& (0+255),b
 23999  004AD6  EFEA  F028         	goto	_putsUSART	;wreg free
 24000  004ADA                     __end_of_printFirmwareVersion:
 24001                           	opt stack 0
 24002  004ADA                     PL64:
 24003                           	opt stack 23
 24004  004ADA  0100               	movlb	0	; () banked
 24005  004ADC  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24006  004ADE  6F71               	movwf	(?_itoa+1)& (0+255),b
 24007  004AE0  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24008  004AE2  6F70               	movwf	?_itoa& (0+255),b
 24009  004AE4  6B73               	clrf	(?_itoa+3)& (0+255),b
 24010  004AE6  0012               	return	
 24011  004AE8                     __end_ofPL64:
 24012                           	opt stack 0
 24013                           tblptru	equ	0xFF8
 24014                           tblptrh	equ	0xFF7
 24015                           tblptrl	equ	0xFF6
 24016                           tablat	equ	0xFF5
 24017                           prodh	equ	0xFF4
 24018                           prodl	equ	0xFF3
 24019                           intcon	equ	0xFF2
 24020                           indf0	equ	0xFEF
 24021                           postinc0	equ	0xFEE
 24022                           fsr0h	equ	0xFEA
 24023                           fsr0l	equ	0xFE9
 24024                           wreg	equ	0xFE8
 24025                           indf1	equ	0xFE7
 24026                           postinc1	equ	0xFE6
 24027                           postdec1	equ	0xFE5
 24028                           fsr1h	equ	0xFE2
 24029                           fsr1l	equ	0xFE1
 24030                           indf2	equ	0xFDF
 24031                           postinc2	equ	0xFDE
 24032                           postdec2	equ	0xFDD
 24033                           plusw2	equ	0xFDB
 24034                           fsr2h	equ	0xFDA
 24035                           fsr2l	equ	0xFD9
 24036                           status	equ	0xFD8
 24037                           
 24038 ;; *************** function _itoa *****************
 24039 ;; Defined at:
 24040 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24041 ;; Parameters:    Size  Location     Type
 24042 ;;  buf             2   16[BANK0 ] PTR unsigned char 
 24043 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24044 ;;  val             2   18[BANK0 ] int 
 24045 ;;  base            2   20[BANK0 ] int 
 24046 ;; Auto vars:     Size  Location     Type
 24047 ;;  cp              2    0        PTR unsigned char 
 24048 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24049 ;; Return value:  Size  Location     Type
 24050 ;;                  2   16[BANK0 ] PTR unsigned char 
 24051 ;; Registers used:
 24052 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24053 ;; Tracked objects:
 24054 ;;		On entry : F/0
 24055 ;;		On exit  : F/0
 24056 ;;		Unchanged: 0/0
 24057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24058 ;;      Params:         0       6       0       0       0       0       0
 24059 ;;      Locals:         0       2       0       0       0       0       0
 24060 ;;      Temps:          0       0       0       0       0       0       0
 24061 ;;      Totals:         0       8       0       0       0       0       0
 24062 ;;Total ram usage:        8 bytes
 24063 ;; Hardware stack levels used:    1
 24064 ;; Hardware stack levels required when called:    5
 24065 ;; This function calls:
 24066 ;;		_utoa
 24067 ;; This function is called by:
 24068 ;;		_receiveSendEventSLCAN
 24069 ;;		_findNodes
 24070 ;;		_printGUID
 24071 ;;		_printNodeFirmwareVersion
 24072 ;;		_printFirmwareVersion
 24073 ;; This function uses a non-reentrant model
 24074 ;;
 24075                           
 24076                           	psect	text62
 24077  005594                     __ptext62:
 24078                           	opt stack 0
 24079  005594                     _itoa:
 24080                           	opt stack 23
 24081                           
 24082                           ; BSR set to: 0
 24083                           
 24084                           ;incstack = 0
 24085                           ;incstack = 0
 24086  005594  AF73               	btfss	(itoa@val+1)& (0+255),7,b
 24087  005596  D00C               	goto	l12662
 24088                           
 24089                           ; BSR set to: 0
 24090  005598  C070  FFD9         	movff	itoa@buf,fsr2l
 24091  00559C  C071  FFDA         	movff	itoa@buf+1,fsr2h
 24092  0055A0  0E2D               	movlw	45
 24093  0055A2  6EDF               	movwf	indf2,c
 24094                           
 24095                           ; BSR set to: 0
 24096  0055A4  4B70               	infsnz	itoa@buf& (0+255),f,b
 24097  0055A6  2B71               	incf	(itoa@buf+1)& (0+255),f,b
 24098                           
 24099                           ; BSR set to: 0
 24100  0055A8  6D72               	negf	itoa@val& (0+255),b
 24101  0055AA  1F73               	comf	(itoa@val+1)& (0+255),f,b
 24102  0055AC  B0D8               	btfsc	status,0,c
 24103  0055AE  2B73               	incf	(itoa@val+1)& (0+255),f,b
 24104  0055B0                     l12662:
 24105                           
 24106                           ; BSR set to: 0
 24107  0055B0  C070  F067         	movff	itoa@buf,?_utoa
 24108  0055B4  C071  F068         	movff	itoa@buf+1,?_utoa+1
 24109  0055B8  C072  F069         	movff	itoa@val,?_utoa+2
 24110  0055BC  C073  F06A         	movff	itoa@val+1,?_utoa+3
 24111  0055C0  C074  F06B         	movff	itoa@base,?_utoa+4
 24112  0055C4  C075  F06C         	movff	itoa@base+1,?_utoa+5
 24113  0055C8  EFAC  F023         	goto	_utoa	;wreg free
 24114  0055CC                     __end_of_itoa:
 24115                           	opt stack 0
 24116                           tblptru	equ	0xFF8
 24117                           tblptrh	equ	0xFF7
 24118                           tblptrl	equ	0xFF6
 24119                           tablat	equ	0xFF5
 24120                           prodh	equ	0xFF4
 24121                           prodl	equ	0xFF3
 24122                           intcon	equ	0xFF2
 24123                           indf0	equ	0xFEF
 24124                           postinc0	equ	0xFEE
 24125                           fsr0h	equ	0xFEA
 24126                           fsr0l	equ	0xFE9
 24127                           wreg	equ	0xFE8
 24128                           indf1	equ	0xFE7
 24129                           postinc1	equ	0xFE6
 24130                           postdec1	equ	0xFE5
 24131                           fsr1h	equ	0xFE2
 24132                           fsr1l	equ	0xFE1
 24133                           indf2	equ	0xFDF
 24134                           postinc2	equ	0xFDE
 24135                           postdec2	equ	0xFDD
 24136                           plusw2	equ	0xFDB
 24137                           fsr2h	equ	0xFDA
 24138                           fsr2l	equ	0xFD9
 24139                           status	equ	0xFD8
 24140                           
 24141 ;; *************** function _utoa *****************
 24142 ;; Defined at:
 24143 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24144 ;; Parameters:    Size  Location     Type
 24145 ;;  buf             2    7[BANK0 ] PTR unsigned char 
 24146 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24147 ;;  val             2    9[BANK0 ] unsigned int 
 24148 ;;  base            2   11[BANK0 ] int 
 24149 ;; Auto vars:     Size  Location     Type
 24150 ;;  v               2   13[BANK0 ] unsigned int 
 24151 ;;  c               1   15[BANK0 ] unsigned char 
 24152 ;; Return value:  Size  Location     Type
 24153 ;;                  2    7[BANK0 ] PTR unsigned char 
 24154 ;; Registers used:
 24155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24156 ;; Tracked objects:
 24157 ;;		On entry : F/0
 24158 ;;		On exit  : F/0
 24159 ;;		Unchanged: 0/0
 24160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24161 ;;      Params:         0       6       0       0       0       0       0
 24162 ;;      Locals:         0       3       0       0       0       0       0
 24163 ;;      Temps:          0       0       0       0       0       0       0
 24164 ;;      Totals:         0       9       0       0       0       0       0
 24165 ;;Total ram usage:        9 bytes
 24166 ;; Hardware stack levels used:    1
 24167 ;; Hardware stack levels required when called:    4
 24168 ;; This function calls:
 24169 ;;		___lwdiv
 24170 ;;		___lwmod
 24171 ;; This function is called by:
 24172 ;;		_itoa
 24173 ;; This function uses a non-reentrant model
 24174 ;;
 24175                           
 24176                           	psect	text63
 24177  004758                     __ptext63:
 24178                           	opt stack 0
 24179  004758                     _utoa:
 24180                           	opt stack 23
 24181                           
 24182                           ; BSR set to: 0
 24183                           
 24184                           ; BSR set to: 0
 24185                           ;incstack = 0
 24186                           ;incstack = 0
 24187  004758  C069  F06D         	movff	utoa@val,utoa@v
 24188  00475C  C06A  F06E         	movff	utoa@val+1,utoa@v+1
 24189  004760                     l12824:
 24190                           
 24191                           ; BSR set to: 0
 24192  004760  C06D  F060         	movff	utoa@v,?___lwdiv
 24193  004764  C06E  F061         	movff	utoa@v+1,?___lwdiv+1
 24194  004768  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24195  00476C  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24196  004770  EC62  F029         	call	___lwdiv	;wreg free
 24197  004774  C060  F06D         	movff	?___lwdiv,utoa@v
 24198  004778  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
 24199                           
 24200                           ; BSR set to: 0
 24201  00477C  4B67               	infsnz	utoa@buf& (0+255),f,b
 24202  00477E  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24203                           
 24204                           ; BSR set to: 0
 24205  004780  516E               	movf	(utoa@v+1)& (0+255),w,b
 24206  004782  116D               	iorwf	utoa@v& (0+255),w,b
 24207  004784  E1ED               	bnz	l12824
 24208                           
 24209                           ; BSR set to: 0
 24210  004786  C067  FFD9         	movff	utoa@buf,fsr2l
 24211  00478A  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24212  00478E  0E00               	movlw	0
 24213  004790  6ADF               	clrf	indf2,c
 24214                           
 24215                           ; BSR set to: 0
 24216  004792  0767               	decf	utoa@buf& (0+255),f,b
 24217  004794  A0D8               	btfss	status,0,c
 24218  004796  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24219  004798                     l12834:
 24220                           
 24221                           ; BSR set to: 0
 24222  004798  C069  F060         	movff	utoa@val,?___lwmod
 24223  00479C  C06A  F061         	movff	utoa@val+1,?___lwmod+1
 24224  0047A0  C06B  F062         	movff	utoa@base,?___lwmod+2
 24225  0047A4  C06C  F063         	movff	utoa@base+1,?___lwmod+3
 24226  0047A8  EC8F  F02A         	call	___lwmod	;wreg free
 24227  0047AC  5160               	movf	?___lwmod& (0+255),w,b
 24228  0047AE  6F6F               	movwf	utoa@c& (0+255),b
 24229                           
 24230                           ; BSR set to: 0
 24231  0047B0  C069  F060         	movff	utoa@val,?___lwdiv
 24232  0047B4  C06A  F061         	movff	utoa@val+1,?___lwdiv+1
 24233  0047B8  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24234  0047BC  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24235  0047C0  EC62  F029         	call	___lwdiv	;wreg free
 24236  0047C4  C060  F069         	movff	?___lwdiv,utoa@val
 24237  0047C8  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
 24238                           
 24239                           ; BSR set to: 0
 24240  0047CC  0E09               	movlw	9
 24241  0047CE  656F               	cpfsgt	utoa@c& (0+255),b
 24242  0047D0  D002               	goto	l2288
 24243                           
 24244                           ; BSR set to: 0
 24245  0047D2  0E07               	movlw	7
 24246  0047D4  276F               	addwf	utoa@c& (0+255),f,b
 24247  0047D6                     l2288:
 24248                           
 24249                           ; BSR set to: 0
 24250  0047D6  0E30               	movlw	48
 24251  0047D8  276F               	addwf	utoa@c& (0+255),f,b
 24252                           
 24253                           ; BSR set to: 0
 24254  0047DA  C067  FFD9         	movff	utoa@buf,fsr2l
 24255  0047DE  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24256  0047E2  C06F  FFDF         	movff	utoa@c,indf2
 24257                           
 24258                           ; BSR set to: 0
 24259  0047E6  0767               	decf	utoa@buf& (0+255),f,b
 24260  0047E8  A0D8               	btfss	status,0,c
 24261  0047EA  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24262                           
 24263                           ; BSR set to: 0
 24264  0047EC  516A               	movf	(utoa@val+1)& (0+255),w,b
 24265  0047EE  1169               	iorwf	utoa@val& (0+255),w,b
 24266  0047F0  E1D3               	bnz	l12834
 24267                           
 24268                           ; BSR set to: 0
 24269                           ;	Return value of _utoa is never used
 24270  0047F2  4B67               	infsnz	utoa@buf& (0+255),f,b
 24271  0047F4  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24272                           
 24273                           ; BSR set to: 0
 24274  0047F6  0012               	return	
 24275  0047F8                     __end_of_utoa:
 24276                           	opt stack 0
 24277                           tblptru	equ	0xFF8
 24278                           tblptrh	equ	0xFF7
 24279                           tblptrl	equ	0xFF6
 24280                           tablat	equ	0xFF5
 24281                           prodh	equ	0xFF4
 24282                           prodl	equ	0xFF3
 24283                           intcon	equ	0xFF2
 24284                           indf0	equ	0xFEF
 24285                           postinc0	equ	0xFEE
 24286                           fsr0h	equ	0xFEA
 24287                           fsr0l	equ	0xFE9
 24288                           wreg	equ	0xFE8
 24289                           indf1	equ	0xFE7
 24290                           postinc1	equ	0xFE6
 24291                           postdec1	equ	0xFE5
 24292                           fsr1h	equ	0xFE2
 24293                           fsr1l	equ	0xFE1
 24294                           indf2	equ	0xFDF
 24295                           postinc2	equ	0xFDE
 24296                           postdec2	equ	0xFDD
 24297                           plusw2	equ	0xFDB
 24298                           fsr2h	equ	0xFDA
 24299                           fsr2l	equ	0xFD9
 24300                           status	equ	0xFD8
 24301                           
 24302 ;; *************** function ___lwmod *****************
 24303 ;; Defined at:
 24304 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 24305 ;; Parameters:    Size  Location     Type
 24306 ;;  dividend        2    0[BANK0 ] unsigned int 
 24307 ;;  divisor         2    2[BANK0 ] unsigned int 
 24308 ;; Auto vars:     Size  Location     Type
 24309 ;;  counter         1    4[BANK0 ] unsigned char 
 24310 ;; Return value:  Size  Location     Type
 24311 ;;                  2    0[BANK0 ] unsigned int 
 24312 ;; Registers used:
 24313 ;;		wreg, status,2, status,0
 24314 ;; Tracked objects:
 24315 ;;		On entry : F/0
 24316 ;;		On exit  : F/0
 24317 ;;		Unchanged: 0/0
 24318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24319 ;;      Params:         0       4       0       0       0       0       0
 24320 ;;      Locals:         0       1       0       0       0       0       0
 24321 ;;      Temps:          0       0       0       0       0       0       0
 24322 ;;      Totals:         0       5       0       0       0       0       0
 24323 ;;Total ram usage:        5 bytes
 24324 ;; Hardware stack levels used:    1
 24325 ;; Hardware stack levels required when called:    3
 24326 ;; This function calls:
 24327 ;;		Nothing
 24328 ;; This function is called by:
 24329 ;;		_utoa
 24330 ;; This function uses a non-reentrant model
 24331 ;;
 24332                           
 24333                           	psect	text64
 24334  00551E                     __ptext64:
 24335                           	opt stack 0
 24336  00551E                     ___lwmod:
 24337                           	opt stack 23
 24338                           
 24339                           ; BSR set to: 0
 24340                           
 24341                           ; BSR set to: 0
 24342                           ;incstack = 0
 24343                           ;incstack = 0
 24344  00551E  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24345  005520  1162               	iorwf	___lwmod@divisor& (0+255),w,b
 24346  005522  E017               	bz	l2412
 24347                           
 24348                           ; BSR set to: 0
 24349  005524  0E01               	movlw	1
 24350  005526  6F64               	movwf	___lwmod@counter& (0+255),b
 24351  005528  D004               	goto	l12918
 24352  00552A                     l12916:
 24353                           
 24354                           ; BSR set to: 0
 24355  00552A  90D8               	bcf	status,0,c
 24356  00552C  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 24357  00552E  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 24358  005530  2B64               	incf	___lwmod@counter& (0+255),f,b
 24359  005532                     l12918:
 24360                           
 24361                           ; BSR set to: 0
 24362  005532  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 24363  005534  D7FA               	goto	l12916
 24364  005536                     l12920:
 24365                           
 24366                           ; BSR set to: 0
 24367  005536  5162               	movf	___lwmod@divisor& (0+255),w,b
 24368  005538  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 24369  00553A  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24370  00553C  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 24371  00553E  E304               	bnc	l12924
 24372                           
 24373                           ; BSR set to: 0
 24374  005540  5162               	movf	___lwmod@divisor& (0+255),w,b
 24375  005542  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 24376  005544  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24377  005546  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 24378  005548                     l12924:
 24379                           
 24380                           ; BSR set to: 0
 24381  005548  90D8               	bcf	status,0,c
 24382  00554A  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 24383  00554C  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 24384                           
 24385                           ; BSR set to: 0
 24386  00554E  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 24387  005550  D7F2               	goto	l12920
 24388  005552                     l2412:
 24389                           
 24390                           ; BSR set to: 0
 24391  005552  C060  F060         	movff	___lwmod@dividend,?___lwmod
 24392  005556  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 24393                           
 24394                           ; BSR set to: 0
 24395  00555A  0012               	return	
 24396  00555C                     __end_of___lwmod:
 24397                           	opt stack 0
 24398                           tblptru	equ	0xFF8
 24399                           tblptrh	equ	0xFF7
 24400                           tblptrl	equ	0xFF6
 24401                           tablat	equ	0xFF5
 24402                           prodh	equ	0xFF4
 24403                           prodl	equ	0xFF3
 24404                           intcon	equ	0xFF2
 24405                           indf0	equ	0xFEF
 24406                           postinc0	equ	0xFEE
 24407                           fsr0h	equ	0xFEA
 24408                           fsr0l	equ	0xFE9
 24409                           wreg	equ	0xFE8
 24410                           indf1	equ	0xFE7
 24411                           postinc1	equ	0xFE6
 24412                           postdec1	equ	0xFE5
 24413                           fsr1h	equ	0xFE2
 24414                           fsr1l	equ	0xFE1
 24415                           indf2	equ	0xFDF
 24416                           postinc2	equ	0xFDE
 24417                           postdec2	equ	0xFDD
 24418                           plusw2	equ	0xFDB
 24419                           fsr2h	equ	0xFDA
 24420                           fsr2l	equ	0xFD9
 24421                           status	equ	0xFD8
 24422                           
 24423 ;; *************** function ___lwdiv *****************
 24424 ;; Defined at:
 24425 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 24426 ;; Parameters:    Size  Location     Type
 24427 ;;  dividend        2    0[BANK0 ] unsigned int 
 24428 ;;  divisor         2    2[BANK0 ] unsigned int 
 24429 ;; Auto vars:     Size  Location     Type
 24430 ;;  quotient        2    5[BANK0 ] unsigned int 
 24431 ;;  counter         1    4[BANK0 ] unsigned char 
 24432 ;; Return value:  Size  Location     Type
 24433 ;;                  2    0[BANK0 ] unsigned int 
 24434 ;; Registers used:
 24435 ;;		wreg, status,2, status,0
 24436 ;; Tracked objects:
 24437 ;;		On entry : F/0
 24438 ;;		On exit  : F/0
 24439 ;;		Unchanged: 0/0
 24440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24441 ;;      Params:         0       4       0       0       0       0       0
 24442 ;;      Locals:         0       3       0       0       0       0       0
 24443 ;;      Temps:          0       0       0       0       0       0       0
 24444 ;;      Totals:         0       7       0       0       0       0       0
 24445 ;;Total ram usage:        7 bytes
 24446 ;; Hardware stack levels used:    1
 24447 ;; Hardware stack levels required when called:    3
 24448 ;; This function calls:
 24449 ;;		Nothing
 24450 ;; This function is called by:
 24451 ;;		_utoa
 24452 ;; This function uses a non-reentrant model
 24453 ;;
 24454                           
 24455                           	psect	text65
 24456  0052C4                     __ptext65:
 24457                           	opt stack 0
 24458  0052C4                     ___lwdiv:
 24459                           	opt stack 23
 24460                           
 24461                           ; BSR set to: 0
 24462                           
 24463                           ; BSR set to: 0
 24464                           ;incstack = 0
 24465                           ;incstack = 0
 24466  0052C4  6B65               	clrf	___lwdiv@quotient& (0+255),b
 24467  0052C6  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
 24468                           
 24469                           ; BSR set to: 0
 24470  0052C8  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24471  0052CA  1162               	iorwf	___lwdiv@divisor& (0+255),w,b
 24472  0052CC  E01B               	bz	l2402
 24473                           
 24474                           ; BSR set to: 0
 24475  0052CE  0E01               	movlw	1
 24476  0052D0  6F64               	movwf	___lwdiv@counter& (0+255),b
 24477  0052D2  D004               	goto	l12898
 24478  0052D4                     l12896:
 24479                           
 24480                           ; BSR set to: 0
 24481  0052D4  90D8               	bcf	status,0,c
 24482  0052D6  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 24483  0052D8  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 24484  0052DA  2B64               	incf	___lwdiv@counter& (0+255),f,b
 24485  0052DC                     l12898:
 24486                           
 24487                           ; BSR set to: 0
 24488  0052DC  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 24489  0052DE  D7FA               	goto	l12896
 24490  0052E0                     l12900:
 24491                           
 24492                           ; BSR set to: 0
 24493  0052E0  90D8               	bcf	status,0,c
 24494  0052E2  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 24495  0052E4  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 24496                           
 24497                           ; BSR set to: 0
 24498  0052E6  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24499  0052E8  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 24500  0052EA  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24501  0052EC  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 24502  0052EE  E305               	bnc	l12908
 24503                           
 24504                           ; BSR set to: 0
 24505  0052F0  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24506  0052F2  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 24507  0052F4  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24508  0052F6  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 24509                           
 24510                           ; BSR set to: 0
 24511  0052F8  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 24512  0052FA                     l12908:
 24513                           
 24514                           ; BSR set to: 0
 24515  0052FA  90D8               	bcf	status,0,c
 24516  0052FC  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 24517  0052FE  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 24518                           
 24519                           ; BSR set to: 0
 24520  005300  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 24521  005302  D7EE               	goto	l12900
 24522  005304                     l2402:
 24523                           
 24524                           ; BSR set to: 0
 24525  005304  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 24526  005308  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 24527                           
 24528                           ; BSR set to: 0
 24529  00530C  0012               	return	
 24530  00530E                     __end_of___lwdiv:
 24531                           	opt stack 0
 24532                           tblptru	equ	0xFF8
 24533                           tblptrh	equ	0xFF7
 24534                           tblptrl	equ	0xFF6
 24535                           tablat	equ	0xFF5
 24536                           prodh	equ	0xFF4
 24537                           prodl	equ	0xFF3
 24538                           intcon	equ	0xFF2
 24539                           indf0	equ	0xFEF
 24540                           postinc0	equ	0xFEE
 24541                           fsr0h	equ	0xFEA
 24542                           fsr0l	equ	0xFE9
 24543                           wreg	equ	0xFE8
 24544                           indf1	equ	0xFE7
 24545                           postinc1	equ	0xFE6
 24546                           postdec1	equ	0xFE5
 24547                           fsr1h	equ	0xFE2
 24548                           fsr1l	equ	0xFE1
 24549                           indf2	equ	0xFDF
 24550                           postinc2	equ	0xFDE
 24551                           postdec2	equ	0xFDD
 24552                           plusw2	equ	0xFDB
 24553                           fsr2h	equ	0xFDA
 24554                           fsr2l	equ	0xFD9
 24555                           status	equ	0xFD8
 24556                           
 24557 ;; *************** function _printMode *****************
 24558 ;; Defined at:
 24559 ;;		line 2757 in file "main.c"
 24560 ;; Parameters:    Size  Location     Type
 24561 ;;		None
 24562 ;; Auto vars:     Size  Location     Type
 24563 ;;		None
 24564 ;; Return value:  Size  Location     Type
 24565 ;;		None               void
 24566 ;; Registers used:
 24567 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24568 ;; Tracked objects:
 24569 ;;		On entry : 0/0
 24570 ;;		On exit  : 0/0
 24571 ;;		Unchanged: 0/0
 24572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24573 ;;      Params:         0       0       0       0       0       0       0
 24574 ;;      Locals:         0       0       0       0       0       0       0
 24575 ;;      Temps:          0       0       0       0       0       0       0
 24576 ;;      Totals:         0       0       0       0       0       0       0
 24577 ;;Total ram usage:        0 bytes
 24578 ;; Hardware stack levels used:    1
 24579 ;; Hardware stack levels required when called:    5
 24580 ;; This function calls:
 24581 ;;		_putsUSART
 24582 ;; This function is called by:
 24583 ;;		_main
 24584 ;; This function uses a non-reentrant model
 24585 ;;
 24586                           
 24587                           	psect	text66
 24588  004DDE                     __ptext66:
 24589                           	opt stack 0
 24590  004DDE                     _printMode:
 24591                           	opt stack 25
 24592                           
 24593                           ;main.c: 2758: putsUSART((char *) "Mode: ");
 24594                           
 24595                           ; BSR set to: 0
 24596                           ;incstack = 0
 24597                           ;incstack = 0
 24598  004DDE  0E7F               	movlw	high STR_256
 24599  004DE0  0100               	movlb	0	; () banked
 24600  004DE2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24601  004DE4  0E25               	movlw	low STR_256
 24602  004DE6  6F61               	movwf	?_putsUSART& (0+255),b
 24603  004DE8  ECEA  F028         	call	_putsUSART	;wreg free
 24604                           
 24605                           ;main.c: 2759: if (0 == mode) {
 24606  004DEC  0100               	movlb	0	; () banked
 24607  004DEE  67F1               	tstfsz	_mode& (0+255),b
 24608  004DF0  D007               	goto	l10004
 24609                           
 24610                           ; BSR set to: 0
 24611                           ;main.c: 2760: putsUSART((char *) "Verbose");
 24612  004DF2  0E7F               	movlw	high STR_257
 24613  004DF4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24614  004DF6  0E1D               	movlw	low STR_257
 24615  004DF8  6F61               	movwf	?_putsUSART& (0+255),b
 24616  004DFA  ECEA  F028         	call	_putsUSART	;wreg free
 24617                           
 24618                           ;main.c: 2761: } else if (1 == mode) {
 24619  004DFE  D023               	goto	l1220
 24620  004E00                     l10004:
 24621                           
 24622                           ; BSR set to: 0
 24623  004E00  05F1               	decf	_mode& (0+255),w,b
 24624  004E02  E107               	bnz	l10008
 24625                           
 24626                           ; BSR set to: 0
 24627                           ;main.c: 2762: putsUSART((char *) "VSCP Driver");
 24628  004E04  0E7E               	movlw	high STR_258
 24629  004E06  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24630  004E08  0E7A               	movlw	low STR_258
 24631  004E0A  6F61               	movwf	?_putsUSART& (0+255),b
 24632  004E0C  ECEA  F028         	call	_putsUSART	;wreg free
 24633                           
 24634                           ;main.c: 2763: } else if (2 == mode) {
 24635  004E10  D01A               	goto	l1220
 24636  004E12                     l10008:
 24637                           
 24638                           ; BSR set to: 0
 24639  004E12  51F1               	movf	_mode& (0+255),w,b
 24640  004E14  0A02               	xorlw	2
 24641  004E16  E107               	bnz	l10012
 24642                           
 24643                           ; BSR set to: 0
 24644                           ;main.c: 2764: putsUSART((char *) "SL Driver");
 24645  004E18  0E7E               	movlw	high STR_259
 24646  004E1A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24647  004E1C  0EB0               	movlw	low STR_259
 24648  004E1E  6F61               	movwf	?_putsUSART& (0+255),b
 24649  004E20  ECEA  F028         	call	_putsUSART	;wreg free
 24650                           
 24651                           ;main.c: 2765: } else if (3 == mode) {
 24652  004E24  D010               	goto	l1220
 24653  004E26                     l10012:
 24654                           
 24655                           ; BSR set to: 0
 24656  004E26  51F1               	movf	_mode& (0+255),w,b
 24657  004E28  0A03               	xorlw	3
 24658  004E2A  E107               	bnz	l10016
 24659                           
 24660                           ; BSR set to: 0
 24661                           ;main.c: 2766: putsUSART((char *) "VSCP Node");
 24662  004E2C  0E7E               	movlw	high STR_260
 24663  004E2E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24664  004E30  0EA6               	movlw	low STR_260
 24665  004E32  6F61               	movwf	?_putsUSART& (0+255),b
 24666  004E34  ECEA  F028         	call	_putsUSART	;wreg free
 24667                           
 24668                           ;main.c: 2767: } else {
 24669  004E38  D006               	goto	l1220
 24670  004E3A                     l10016:
 24671                           
 24672                           ; BSR set to: 0
 24673                           ;main.c: 2768: putsUSART((char *) "Unknown (Verbose used)");
 24674  004E3A  0E7C               	movlw	high STR_261
 24675  004E3C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24676  004E3E  0EEE               	movlw	low STR_261
 24677  004E40  6F61               	movwf	?_putsUSART& (0+255),b
 24678  004E42  ECEA  F028         	call	_putsUSART	;wreg free
 24679  004E46                     l1220:
 24680                           
 24681                           ;main.c: 2769: }
 24682                           ;main.c: 2770: putsUSART((char *) "\r\n");
 24683  004E46  0E74               	movlw	high (STR_197+50)
 24684  004E48  0100               	movlb	0	; () banked
 24685  004E4A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24686  004E4C  0E8A               	movlw	low (STR_197+50)
 24687  004E4E  6F61               	movwf	?_putsUSART& (0+255),b
 24688  004E50  EFEA  F028         	goto	_putsUSART	;wreg free
 24689  004E54                     __end_of_printMode:
 24690                           	opt stack 0
 24691                           tblptru	equ	0xFF8
 24692                           tblptrh	equ	0xFF7
 24693                           tblptrl	equ	0xFF6
 24694                           tablat	equ	0xFF5
 24695                           prodh	equ	0xFF4
 24696                           prodl	equ	0xFF3
 24697                           intcon	equ	0xFF2
 24698                           indf0	equ	0xFEF
 24699                           postinc0	equ	0xFEE
 24700                           fsr0h	equ	0xFEA
 24701                           fsr0l	equ	0xFE9
 24702                           wreg	equ	0xFE8
 24703                           indf1	equ	0xFE7
 24704                           postinc1	equ	0xFE6
 24705                           postdec1	equ	0xFE5
 24706                           fsr1h	equ	0xFE2
 24707                           fsr1l	equ	0xFE1
 24708                           indf2	equ	0xFDF
 24709                           postinc2	equ	0xFDE
 24710                           postdec2	equ	0xFDD
 24711                           plusw2	equ	0xFDB
 24712                           fsr2h	equ	0xFDA
 24713                           fsr2l	equ	0xFD9
 24714                           status	equ	0xFD8
 24715                           
 24716 ;; *************** function _putsUSART *****************
 24717 ;; Defined at:
 24718 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 24719 ;; Parameters:    Size  Location     Type
 24720 ;;  data            2    1[BANK0 ] PTR unsigned char 
 24721 ;;		 -> STR_262(3), STR_261(23), STR_260(10), STR_259(10), 
 24722 ;;		 -> STR_258(12), STR_257(8), STR_256(7), STR_255(3), 
 24723 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_254(10), STR_253(3), STR_250(20), 
 24724 ;;		 -> STR_249(3), STR_248(14), STR_247(3), STR_243(8), 
 24725 ;;		 -> STR_242(15), STR_241(67), STR_240(3), STR_239(27), 
 24726 ;;		 -> STR_238(67), STR_237(39), STR_236(62), STR_235(55), 
 24727 ;;		 -> STR_234(49), STR_233(67), STR_232(47), STR_231(47), 
 24728 ;;		 -> STR_230(34), STR_229(71), STR_228(20), STR_227(78), 
 24729 ;;		 -> STR_226(24), STR_225(77), STR_224(67), STR_223(69), 
 24730 ;;		 -> STR_222(47), STR_221(40), STR_220(39), STR_219(33), 
 24731 ;;		 -> STR_218(23), STR_217(56), STR_216(24), STR_215(44), 
 24732 ;;		 -> STR_214(50), STR_213(31), STR_212(50), STR_211(51), 
 24733 ;;		 -> STR_210(46), STR_209(44), STR_208(27), STR_207(39), 
 24734 ;;		 -> STR_206(39), STR_205(52), STR_204(54), STR_203(55), 
 24735 ;;		 -> STR_202(3), STR_199(24), STR_198(57), STR_197(53), 
 24736 ;;		 -> STR_196(58), STR_195(3), STR_192(25), STR_191(3), 
 24737 ;;		 -> STR_188(24), STR_187(3), STR_184(24), STR_183(3), 
 24738 ;;		 -> STR_180(24), STR_179(3), STR_176(23), STR_175(3), 
 24739 ;;		 -> STR_172(21), STR_171(3), STR_168(22), STR_167(3), 
 24740 ;;		 -> STR_164(17), STR_163(3), STR_160(18), STR_159(4), 
 24741 ;;		 -> STR_158(11), STR_157(2), STR_154(7), STR_151(7), 
 24742 ;;		 -> STR_148(9), STR_145(7), STR_142(8), STR_139(7), 
 24743 ;;		 -> STR_138(2), STR_137(2), STR_136(6), STR_135(8), 
 24744 ;;		 -> STR_134(8), STR_133(20), STR_132(27), STR_131(6), 
 24745 ;;		 -> STR_130(33), STR_127(26), STR_125(32), STR_123(28), 
 24746 ;;		 -> STR_119(6), STR_117(40), STR_115(44), STR_112(6), 
 24747 ;;		 -> STR_111(39), STR_109(36), STR_107(37), STR_105(40), 
 24748 ;;		 -> STR_103(37), STR_102(50), STR_99(6), STR_98(41), 
 24749 ;;		 -> STR_96(38), STR_94(39), STR_92(42), STR_90(39), 
 24750 ;;		 -> STR_89(66), STR_86(6), STR_85(3), STR_82(20), 
 24751 ;;		 -> STR_80(33), STR_79(35), STR_78(24), STR_76(33), 
 24752 ;;		 -> STR_74(24), STR_71(54), STR_70(6), STR_69(3), 
 24753 ;;		 -> STR_64(34), STR_63(3), STR_60(4), wrkbuf(80), 
 24754 ;;		 -> STR_55(15), STR_53(33), STR_51(24), STR_48(6), 
 24755 ;;		 -> STR_46(6), STR_44(6), STR_42(6), STR_40(18), 
 24756 ;;		 -> STR_39(6), STR_37(33), STR_36(6), STR_28(24), 
 24757 ;;		 -> STR_27(18), STR_26(20), STR_25(25), STR_24(22), 
 24758 ;;		 -> STR_23(19), STR_22(20), STR_21(20), STR_19(6), 
 24759 ;;		 -> STR_17(6), STR_15(6), STR_13(6), STR_11(6), 
 24760 ;;		 -> STR_9(6), STR_7(31), STR_5(29), STR_4(55), 
 24761 ;;		 -> STR_3(35), STR_2(53), STR_1(37), 
 24762 ;; Auto vars:     Size  Location     Type
 24763 ;;		None
 24764 ;; Return value:  Size  Location     Type
 24765 ;;		None               void
 24766 ;; Registers used:
 24767 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24768 ;; Tracked objects:
 24769 ;;		On entry : F/0
 24770 ;;		On exit  : 0/0
 24771 ;;		Unchanged: 0/0
 24772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24773 ;;      Params:         0       2       0       0       0       0       0
 24774 ;;      Locals:         0       0       0       0       0       0       0
 24775 ;;      Temps:          0       2       0       0       0       0       0
 24776 ;;      Totals:         0       4       0       0       0       0       0
 24777 ;;Total ram usage:        4 bytes
 24778 ;; Hardware stack levels used:    1
 24779 ;; Hardware stack levels required when called:    4
 24780 ;; This function calls:
 24781 ;;		_WriteUSART
 24782 ;; This function is called by:
 24783 ;;		_main
 24784 ;;		_doModeVerbose
 24785 ;;		_doModeSLCAN
 24786 ;;		_receivePrintEventVerbose
 24787 ;;		_receiveSendEventSLCAN
 24788 ;;		_printStatistics
 24789 ;;		_printErrors
 24790 ;;		_printHelp
 24791 ;;		_findNodes
 24792 ;;		_printGUID
 24793 ;;		_printMDF
 24794 ;;		_printNodeFirmwareVersion
 24795 ;;		_printFirmwareVersion
 24796 ;;		_printMode
 24797 ;; This function uses a non-reentrant model
 24798 ;;
 24799                           
 24800                           	psect	text67
 24801  0051D4                     __ptext67:
 24802                           	opt stack 0
 24803  0051D4                     _putsUSART:
 24804                           	opt stack 24
 24805  0051D4                     l1820:
 24806  0051D4  A2AC               	btfss	4012,1,c	;volatile
 24807  0051D6  D7FE               	goto	l1820
 24808  0051D8  0100               	movlb	0	; () banked
 24809  0051DA  5161               	movf	putsUSART@data& (0+255),w,b
 24810  0051DC  6EF6               	movwf	tblptrl,c
 24811  0051DE  6EE9               	movwf	fsr0l,c
 24812  0051E0  0E05               	movlw	(high __ramtop+-1)
 24813  0051E2  6EEA               	movwf	fsr0h,c
 24814  0051E4  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 24815  0051E6  64EA               	cpfsgt	fsr0h,c
 24816  0051E8  D003               	bra	u12007
 24817  0051EA  6EEA               	movwf	fsr0h,c
 24818  0051EC  50EF               	movf	indf0,w,c
 24819  0051EE  D003               	bra	u12000
 24820  0051F0                     u12007:
 24821  0051F0  6EF7               	movwf	tblptrh,c
 24822  0051F2  0008               	tblrd		*
 24823  0051F4  50F5               	movf	tablat,w,c
 24824  0051F6                     u12000:
 24825  0051F6  ECB9  F02B         	call	_WriteUSART
 24826  0051FA  0100               	movlb	0	; () banked
 24827  0051FC  5161               	movf	putsUSART@data& (0+255),w,b
 24828  0051FE  6F63               	movwf	??_putsUSART& (0+255),b
 24829  005200  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 24830  005202  6F64               	movwf	(??_putsUSART+1)& (0+255),b
 24831  005204  4B61               	infsnz	putsUSART@data& (0+255),f,b
 24832  005206  2B62               	incf	(putsUSART@data+1)& (0+255),f,b
 24833  005208  5163               	movf	??_putsUSART& (0+255),w,b
 24834  00520A  6EF6               	movwf	tblptrl,c
 24835  00520C  6EE9               	movwf	fsr0l,c
 24836  00520E  0E05               	movlw	(high __ramtop+-1)
 24837  005210  6EEA               	movwf	fsr0h,c
 24838  005212  5164               	movf	(??_putsUSART+1)& (0+255),w,b
 24839  005214  64EA               	cpfsgt	fsr0h,c
 24840  005216  D003               	bra	u12017
 24841  005218  6EEA               	movwf	fsr0h,c
 24842  00521A  50EF               	movf	indf0,w,c
 24843  00521C  D003               	bra	u12010
 24844  00521E                     u12017:
 24845  00521E  6EF7               	movwf	tblptrh,c
 24846  005220  0008               	tblrd		*
 24847  005222  50F5               	movf	tablat,w,c
 24848  005224                     u12010:
 24849  005224  0900               	iorlw	0
 24850  005226  B4D8               	btfsc	status,2,c
 24851  005228  0012               	return	
 24852  00522A  D7D4               	goto	l1820
 24853  00522C                     __end_of_putsUSART:
 24854                           	opt stack 0
 24855                           tblptru	equ	0xFF8
 24856                           tblptrh	equ	0xFF7
 24857                           tblptrl	equ	0xFF6
 24858                           tablat	equ	0xFF5
 24859                           prodh	equ	0xFF4
 24860                           prodl	equ	0xFF3
 24861                           intcon	equ	0xFF2
 24862                           indf0	equ	0xFEF
 24863                           postinc0	equ	0xFEE
 24864                           fsr0h	equ	0xFEA
 24865                           fsr0l	equ	0xFE9
 24866                           wreg	equ	0xFE8
 24867                           indf1	equ	0xFE7
 24868                           postinc1	equ	0xFE6
 24869                           postdec1	equ	0xFE5
 24870                           fsr1h	equ	0xFE2
 24871                           fsr1l	equ	0xFE1
 24872                           indf2	equ	0xFDF
 24873                           postinc2	equ	0xFDE
 24874                           postdec2	equ	0xFDD
 24875                           plusw2	equ	0xFDB
 24876                           fsr2h	equ	0xFDA
 24877                           fsr2l	equ	0xFD9
 24878                           status	equ	0xFD8
 24879                           
 24880 ;; *************** function _WriteUSART *****************
 24881 ;; Defined at:
 24882 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 24883 ;; Parameters:    Size  Location     Type
 24884 ;;  data            1    wreg     unsigned char 
 24885 ;; Auto vars:     Size  Location     Type
 24886 ;;  data            1    0[BANK0 ] unsigned char 
 24887 ;; Return value:  Size  Location     Type
 24888 ;;		None               void
 24889 ;; Registers used:
 24890 ;;		wreg
 24891 ;; Tracked objects:
 24892 ;;		On entry : 0/0
 24893 ;;		On exit  : 0/0
 24894 ;;		Unchanged: 0/0
 24895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24896 ;;      Params:         0       0       0       0       0       0       0
 24897 ;;      Locals:         0       1       0       0       0       0       0
 24898 ;;      Temps:          0       0       0       0       0       0       0
 24899 ;;      Totals:         0       1       0       0       0       0       0
 24900 ;;Total ram usage:        1 bytes
 24901 ;; Hardware stack levels used:    1
 24902 ;; Hardware stack levels required when called:    3
 24903 ;; This function calls:
 24904 ;;		Nothing
 24905 ;; This function is called by:
 24906 ;;		_doModeVerbose
 24907 ;;		_sendEscapedUartData
 24908 ;;		_sendVSCPDriverErrorFrame
 24909 ;;		_sendVSCPDriverAck
 24910 ;;		_sendVSCPDriverNack
 24911 ;;		_sendVSCPDriverCommandReply
 24912 ;;		_receiveSendEventCANAL
 24913 ;;		_receiveSendMultiEventCANAL
 24914 ;;		_sendVSCPModeCapabilities
 24915 ;;		_receiveSendEventSLCAN
 24916 ;;		_printBinary
 24917 ;;		_printFirmwareVersion
 24918 ;;		_putsUSART
 24919 ;; This function uses a non-reentrant model
 24920 ;;
 24921                           
 24922                           	psect	text68
 24923  005772                     __ptext68:
 24924                           	opt stack 0
 24925  005772                     _WriteUSART:
 24926                           	opt stack 25
 24927                           
 24928                           ;incstack = 0
 24929                           ;incstack = 0
 24930                           ;WriteUSART@data stored from wreg
 24931  005772  CFE8 F060          	movff	wreg,WriteUSART@data
 24932  005776  ACAC               	btfss	4012,6,c	;volatile
 24933  005778  D003               	goto	l11932
 24934  00577A  90AC               	bcf	4012,0,c	;volatile
 24935  00577C  B23D               	btfsc	_USART_Status,1,c
 24936  00577E  80AC               	bsf	4012,0,c	;volatile
 24937  005780                     l11932:
 24938  005780  C060  FFAD         	movff	WriteUSART@data,4013	;volatile
 24939  005784  0012               	return	
 24940  005786                     __end_of_WriteUSART:
 24941                           	opt stack 0
 24942                           tblptru	equ	0xFF8
 24943                           tblptrh	equ	0xFF7
 24944                           tblptrl	equ	0xFF6
 24945                           tablat	equ	0xFF5
 24946                           prodh	equ	0xFF4
 24947                           prodl	equ	0xFF3
 24948                           intcon	equ	0xFF2
 24949                           indf0	equ	0xFEF
 24950                           postinc0	equ	0xFEE
 24951                           fsr0h	equ	0xFEA
 24952                           fsr0l	equ	0xFE9
 24953                           wreg	equ	0xFE8
 24954                           indf1	equ	0xFE7
 24955                           postinc1	equ	0xFE6
 24956                           postdec1	equ	0xFE5
 24957                           fsr1h	equ	0xFE2
 24958                           fsr1l	equ	0xFE1
 24959                           indf2	equ	0xFDF
 24960                           postinc2	equ	0xFDE
 24961                           postdec2	equ	0xFDD
 24962                           plusw2	equ	0xFDB
 24963                           fsr2h	equ	0xFDA
 24964                           fsr2l	equ	0xFD9
 24965                           status	equ	0xFD8
 24966                           
 24967 ;; *************** function _init *****************
 24968 ;; Defined at:
 24969 ;;		line 375 in file "main.c"
 24970 ;; Parameters:    Size  Location     Type
 24971 ;;		None
 24972 ;; Auto vars:     Size  Location     Type
 24973 ;;		None
 24974 ;; Return value:  Size  Location     Type
 24975 ;;		None               void
 24976 ;; Registers used:
 24977 ;;		wreg, status,2, status,0, cstack
 24978 ;; Tracked objects:
 24979 ;;		On entry : E/0
 24980 ;;		On exit  : F/0
 24981 ;;		Unchanged: 0/0
 24982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24983 ;;      Params:         0       0       0       0       0       0       0
 24984 ;;      Locals:         0       0       0       0       0       0       0
 24985 ;;      Temps:          0       0       0       0       0       0       0
 24986 ;;      Totals:         0       0       0       0       0       0       0
 24987 ;;Total ram usage:        0 bytes
 24988 ;; Hardware stack levels used:    1
 24989 ;; Hardware stack levels required when called:    5
 24990 ;; This function calls:
 24991 ;;		_WriteTimer0
 24992 ;;		_init_app_ram
 24993 ;;		_OpenUSART
 24994 ;;		_OpenTimer0
 24995 ;;		_ECANInitialize
 24996 ;; This function is called by:
 24997 ;;		_main
 24998 ;; This function uses a non-reentrant model
 24999 ;;
 25000                           
 25001                           	psect	text69
 25002  00530E                     __ptext69:
 25003                           	opt stack 0
 25004  00530E                     _init:
 25005                           	opt stack 25
 25006                           
 25007                           ;main.c: 377: init_app_ram();
 25008                           
 25009                           ;incstack = 0
 25010                           ;incstack = 0
 25011  00530E  EC16  F029         	call	_init_app_ram	;wreg free
 25012                           
 25013                           ; BSR set to: 1
 25014                           ;main.c: 380: OSCCONbits.IRCF0 = 1;
 25015  005312  88D3               	bsf	4051,4,c	;volatile
 25016                           
 25017                           ; BSR set to: 1
 25018                           ;main.c: 381: OSCCONbits.IRCF1 = 1;
 25019  005314  8AD3               	bsf	4051,5,c	;volatile
 25020                           
 25021                           ; BSR set to: 1
 25022                           ;main.c: 382: OSCCONbits.IRCF2 = 1;
 25023  005316  8CD3               	bsf	4051,6,c	;volatile
 25024                           
 25025                           ; BSR set to: 1
 25026                           ;main.c: 383: OSCTUNEbits.PLLEN = 1;
 25027  005318  8C9B               	bsf	3995,6,c	;volatile
 25028                           
 25029                           ; BSR set to: 1
 25030                           ;main.c: 385: TRISBbits.RB2 = 0;
 25031  00531A  9493               	bcf	3987,2,c	;volatile
 25032                           
 25033                           ; BSR set to: 1
 25034                           ;main.c: 386: TRISBbits.RB3 = 1;
 25035  00531C  8693               	bsf	3987,3,c	;volatile
 25036                           
 25037                           ; BSR set to: 1
 25038                           ;main.c: 388: TRISCbits.RC1 = 0;
 25039  00531E  9294               	bcf	3988,1,c	;volatile
 25040                           
 25041                           ; BSR set to: 1
 25042                           ;main.c: 389: TRISCbits.RC6 = 0;
 25043  005320  9C94               	bcf	3988,6,c	;volatile
 25044                           
 25045                           ; BSR set to: 1
 25046                           ;main.c: 390: TRISCbits.RC7 = 1;
 25047  005322  8E94               	bsf	3988,7,c	;volatile
 25048                           
 25049                           ;main.c: 394: OpenUSART( 0b01111111 &
 25050                           ;main.c: 395: 0b11111111 &
 25051                           ;main.c: 396: 0b11111110 &
 25052                           ;main.c: 397: 0b11111101 &
 25053                           ;main.c: 398: 0b11111111,
 25054                           ;main.c: 399: 21 );
 25055  005324  0100               	movlb	0	; () banked
 25056  005326  6B61               	clrf	(?_OpenUSART+1)& (0+255),b
 25057  005328  0E15               	movlw	21
 25058  00532A  6F60               	movwf	?_OpenUSART& (0+255),b
 25059  00532C  0E7C               	movlw	124
 25060  00532E  EC90  F028         	call	_OpenUSART
 25061                           
 25062                           ; BSR set to: 0
 25063                           ;main.c: 401: RCIF = 0;
 25064  005332  9A9E               	bcf	3998,5,c	;volatile
 25065                           
 25066                           ; BSR set to: 0
 25067                           ;main.c: 402: RCIP = 0;
 25068  005334  9A9F               	bcf	3999,5,c	;volatile
 25069                           
 25070                           ; BSR set to: 0
 25071                           ;main.c: 403: RCIE = 1;
 25072  005336  8A9D               	bsf	3997,5,c	;volatile
 25073                           
 25074                           ; BSR set to: 0
 25075                           ;main.c: 404: PEIE = 1;
 25076  005338  8CF2               	bsf	intcon,6,c	;volatile
 25077                           
 25078                           ; BSR set to: 0
 25079                           ;main.c: 407: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 25080  00533A  0E92               	movlw	146
 25081  00533C  EC83  F02B         	call	_OpenTimer0
 25082                           
 25083                           ; BSR set to: 0
 25084                           ;main.c: 408: WriteTimer0(0xfb1d);
 25085  005340  0EFB               	movlw	251
 25086  005342  6F61               	movwf	(?_WriteTimer0+1)& (0+255),b
 25087  005344  0E1D               	movlw	29
 25088  005346  6F60               	movwf	?_WriteTimer0& (0+255),b
 25089  005348  ECC3  F02B         	call	_WriteTimer0	;wreg free
 25090                           
 25091                           ;main.c: 411: ECANInitialize();
 25092  00534C  ECFC  F025         	call	_ECANInitialize	;wreg free
 25093                           
 25094                           ; BSR set to: 0
 25095                           ;main.c: 435: RXBnIE = 1;
 25096  005350  82A3               	bsf	4003,1,c	;volatile
 25097                           
 25098                           ; BSR set to: 0
 25099                           ;main.c: 436: ERRIE = 1;
 25100  005352  8AA3               	bsf	4003,5,c	;volatile
 25101                           
 25102                           ; BSR set to: 0
 25103                           ;main.c: 438: (INTCONbits.GIE = 1);
 25104  005354  8EF2               	bsf	intcon,7,c	;volatile
 25105                           
 25106                           ; BSR set to: 0
 25107  005356  0012               	return	
 25108  005358                     __end_of_init:
 25109                           	opt stack 0
 25110                           tblptru	equ	0xFF8
 25111                           tblptrh	equ	0xFF7
 25112                           tblptrl	equ	0xFF6
 25113                           tablat	equ	0xFF5
 25114                           prodh	equ	0xFF4
 25115                           prodl	equ	0xFF3
 25116                           intcon	equ	0xFF2
 25117                           indf0	equ	0xFEF
 25118                           postinc0	equ	0xFEE
 25119                           fsr0h	equ	0xFEA
 25120                           fsr0l	equ	0xFE9
 25121                           wreg	equ	0xFE8
 25122                           indf1	equ	0xFE7
 25123                           postinc1	equ	0xFE6
 25124                           postdec1	equ	0xFE5
 25125                           fsr1h	equ	0xFE2
 25126                           fsr1l	equ	0xFE1
 25127                           indf2	equ	0xFDF
 25128                           postinc2	equ	0xFDE
 25129                           postdec2	equ	0xFDD
 25130                           plusw2	equ	0xFDB
 25131                           fsr2h	equ	0xFDA
 25132                           fsr2l	equ	0xFD9
 25133                           status	equ	0xFD8
 25134                           
 25135 ;; *************** function _ECANInitialize *****************
 25136 ;; Defined at:
 25137 ;;		line 168 in file "ECAN.c"
 25138 ;; Parameters:    Size  Location     Type
 25139 ;;		None
 25140 ;; Auto vars:     Size  Location     Type
 25141 ;;		None
 25142 ;; Return value:  Size  Location     Type
 25143 ;;		None               void
 25144 ;; Registers used:
 25145 ;;		wreg, status,2, status,0, cstack
 25146 ;; Tracked objects:
 25147 ;;		On entry : F/0
 25148 ;;		On exit  : F/0
 25149 ;;		Unchanged: 0/0
 25150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25151 ;;      Params:         0       0       0       0       0       0       0
 25152 ;;      Locals:         0       0       0       0       0       0       0
 25153 ;;      Temps:          0       0       0       0       0       0       0
 25154 ;;      Totals:         0       0       0       0       0       0       0
 25155 ;;Total ram usage:        0 bytes
 25156 ;; Hardware stack levels used:    1
 25157 ;; Hardware stack levels required when called:    4
 25158 ;; This function calls:
 25159 ;;		_ECANSetOperationMode
 25160 ;; This function is called by:
 25161 ;;		_init
 25162 ;; This function uses a non-reentrant model
 25163 ;;
 25164                           
 25165                           	psect	text70
 25166  004BF8                     __ptext70:
 25167                           	opt stack 0
 25168  004BF8                     _ECANInitialize:
 25169                           	opt stack 25
 25170                           
 25171                           ; BSR set to: 0
 25172                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 25173                           
 25174                           ; BSR set to: 0
 25175                           ;incstack = 0
 25176                           ;incstack = 0
 25177  004BF8  0E80               	movlw	128
 25178  004BFA  ECA1  F02B         	call	_ECANSetOperationMode
 25179                           
 25180                           ; BSR set to: 0
 25181                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 25182  004BFE  0E09               	movlw	9
 25183  004C00  6E70               	movwf	3952,c	;volatile
 25184                           
 25185                           ; BSR set to: 0
 25186                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 25187  004C02  0EFC               	movlw	252
 25188  004C04  6E71               	movwf	3953,c	;volatile
 25189                           
 25190                           ; BSR set to: 0
 25191                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 25192                           ;ECAN.c: 181: (0 << 6) |
 25193                           ;ECAN.c: 182: (2-1);
 25194  004C06  0E01               	movlw	1
 25195  004C08  6E72               	movwf	3954,c	;volatile
 25196                           
 25197                           ; BSR set to: 0
 25198                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 25199  004C0A  0E20               	movlw	32
 25200  004C0C  6E73               	movwf	3955,c	;volatile
 25201                           
 25202                           ; BSR set to: 0
 25203                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 25204  004C0E  8E77               	bsf	3959,7,c	;volatile
 25205                           
 25206                           ; BSR set to: 0
 25207                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 25208  004C10  9C77               	bcf	3959,6,c	;volatile
 25209                           
 25210                           ; BSR set to: 0
 25211                           ;ECAN.c: 205: RXB0CON = 0;
 25212  004C12  6A60               	clrf	3936,c	;volatile
 25213                           
 25214                           ; BSR set to: 0
 25215                           ;ECAN.c: 211: RXB1CON = 0;
 25216  004C14  010F               	movlb	15	; () banked
 25217  004C16  6B50               	clrf	80,b	;volatile
 25218                           
 25219                           ; BSR set to: 15
 25220                           ;ECAN.c: 221: B0CON = 0;
 25221  004C18  010E               	movlb	14	; () banked
 25222  004C1A  6B20               	clrf	32,b	;volatile
 25223                           
 25224                           ; BSR set to: 14
 25225                           ;ECAN.c: 231: B1CON = 0;
 25226  004C1C  6B30               	clrf	48,b	;volatile
 25227                           
 25228                           ; BSR set to: 14
 25229                           ;ECAN.c: 241: B2CON = 0;
 25230  004C1E  6B40               	clrf	64,b	;volatile
 25231                           
 25232                           ; BSR set to: 14
 25233                           ;ECAN.c: 251: B3CON = 0;
 25234  004C20  6B50               	clrf	80,b	;volatile
 25235                           
 25236                           ; BSR set to: 14
 25237                           ;ECAN.c: 261: B4CON = 0;
 25238  004C22  6B60               	clrf	96,b	;volatile
 25239                           
 25240                           ; BSR set to: 14
 25241                           ;ECAN.c: 271: B5CON = 0;
 25242  004C24  6B70               	clrf	112,b	;volatile
 25243                           
 25244                           ; BSR set to: 14
 25245                           ;ECAN.c: 278: BSEL0 = 0 << 7 | 0 << 6 | 0 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 25246  004C26  010D               	movlb	13	; () banked
 25247  004C28  6BF8               	clrf	248,b	;volatile
 25248                           
 25249                           ; BSR set to: 13
 25250                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 25251  004C2A  010F               	movlb	15	; () banked
 25252  004C2C  6B00               	clrf	0,b	;volatile
 25253                           
 25254                           ; BSR set to: 15
 25255  004C2E  0E08               	movlw	8
 25256  004C30  6F01               	movwf	1,b	;volatile
 25257                           
 25258                           ; BSR set to: 15
 25259  004C32  6B02               	clrf	2,b	;volatile
 25260                           
 25261                           ; BSR set to: 15
 25262  004C34  6B03               	clrf	3,b	;volatile
 25263                           
 25264                           ; BSR set to: 15
 25265                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 25266  004C36  0E01               	movlw	1
 25267  004C38  010D               	movlb	13	; () banked
 25268  004C3A  6FD4               	movwf	212,b	;volatile
 25269                           
 25270                           ; BSR set to: 13
 25271                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 25272  004C3C  6BD5               	clrf	213,b	;volatile
 25273                           
 25274                           ; BSR set to: 13
 25275                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 25276  004C3E  6BE0               	clrf	224,b	;volatile
 25277                           
 25278                           ; BSR set to: 13
 25279                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 25280  004C40  0E11               	movlw	17
 25281  004C42  6FE1               	movwf	225,b	;volatile
 25282                           
 25283                           ; BSR set to: 13
 25284                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 25285  004C44  6FE2               	movwf	226,b	;volatile
 25286                           
 25287                           ; BSR set to: 13
 25288                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 25289  004C46  6BE3               	clrf	227,b	;volatile
 25290                           
 25291                           ; BSR set to: 13
 25292                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 25293  004C48  6BE4               	clrf	228,b	;volatile
 25294                           
 25295                           ; BSR set to: 13
 25296                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 25297  004C4A  6BE5               	clrf	229,b	;volatile
 25298                           
 25299                           ; BSR set to: 13
 25300                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 25301  004C4C  6BE6               	clrf	230,b	;volatile
 25302                           
 25303                           ; BSR set to: 13
 25304                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 25305  004C4E  6BE7               	clrf	231,b	;volatile
 25306                           
 25307                           ; BSR set to: 13
 25308                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 25309  004C50  0E54               	movlw	84
 25310  004C52  6FF0               	movwf	240,b	;volatile
 25311                           
 25312                           ; BSR set to: 13
 25313                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 25314  004C54  0E05               	movlw	5
 25315  004C56  6FF1               	movwf	241,b	;volatile
 25316                           
 25317                           ; BSR set to: 13
 25318                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25319  004C58  6BF2               	clrf	242,b	;volatile
 25320                           
 25321                           ; BSR set to: 13
 25322                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25323  004C5A  6BF2               	clrf	242,b	;volatile
 25324                           
 25325                           ; BSR set to: 13
 25326                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 25327  004C5C  010F               	movlb	15	; () banked
 25328  004C5E  6B18               	clrf	24,b	;volatile
 25329                           
 25330                           ; BSR set to: 15
 25331  004C60  6B19               	clrf	25,b	;volatile
 25332                           
 25333                           ; BSR set to: 15
 25334  004C62  6B1A               	clrf	26,b	;volatile
 25335                           
 25336                           ; BSR set to: 15
 25337  004C64  6B1B               	clrf	27,b	;volatile
 25338                           
 25339                           ; BSR set to: 15
 25340                           ;ECAN.c: 482: RXM0EXIDM = 1;
 25341  004C66  8719               	bsf	25,3,b	;volatile
 25342                           
 25343                           ; BSR set to: 15
 25344                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 25345  004C68  6B1C               	clrf	28,b	;volatile
 25346                           
 25347                           ; BSR set to: 15
 25348  004C6A  6B1D               	clrf	29,b	;volatile
 25349                           
 25350                           ; BSR set to: 15
 25351  004C6C  6B1E               	clrf	30,b	;volatile
 25352                           
 25353                           ; BSR set to: 15
 25354  004C6E  6B1F               	clrf	31,b	;volatile
 25355                           
 25356                           ; BSR set to: 15
 25357                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 25358  004C70  871D               	bsf	29,3,b	;volatile
 25359                           
 25360                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 25361  004C72  0E20               	movlw	32
 25362  004C74  EFA1  F02B         	goto	_ECANSetOperationMode
 25363  004C78                     __end_of_ECANInitialize:
 25364                           	opt stack 0
 25365                           tblptru	equ	0xFF8
 25366                           tblptrh	equ	0xFF7
 25367                           tblptrl	equ	0xFF6
 25368                           tablat	equ	0xFF5
 25369                           prodh	equ	0xFF4
 25370                           prodl	equ	0xFF3
 25371                           intcon	equ	0xFF2
 25372                           indf0	equ	0xFEF
 25373                           postinc0	equ	0xFEE
 25374                           fsr0h	equ	0xFEA
 25375                           fsr0l	equ	0xFE9
 25376                           wreg	equ	0xFE8
 25377                           indf1	equ	0xFE7
 25378                           postinc1	equ	0xFE6
 25379                           postdec1	equ	0xFE5
 25380                           fsr1h	equ	0xFE2
 25381                           fsr1l	equ	0xFE1
 25382                           indf2	equ	0xFDF
 25383                           postinc2	equ	0xFDE
 25384                           postdec2	equ	0xFDD
 25385                           plusw2	equ	0xFDB
 25386                           fsr2h	equ	0xFDA
 25387                           fsr2l	equ	0xFD9
 25388                           status	equ	0xFD8
 25389                           
 25390 ;; *************** function _ECANSetOperationMode *****************
 25391 ;; Defined at:
 25392 ;;		line 1014 in file "ECAN.c"
 25393 ;; Parameters:    Size  Location     Type
 25394 ;;  mode            1    wreg     enum E16337
 25395 ;; Auto vars:     Size  Location     Type
 25396 ;;  mode            1    0[BANK0 ] enum E16337
 25397 ;; Return value:  Size  Location     Type
 25398 ;;		None               void
 25399 ;; Registers used:
 25400 ;;		wreg, status,2, status,0
 25401 ;; Tracked objects:
 25402 ;;		On entry : 0/0
 25403 ;;		On exit  : F/0
 25404 ;;		Unchanged: 0/0
 25405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25406 ;;      Params:         0       0       0       0       0       0       0
 25407 ;;      Locals:         0       1       0       0       0       0       0
 25408 ;;      Temps:          0       0       0       0       0       0       0
 25409 ;;      Totals:         0       1       0       0       0       0       0
 25410 ;;Total ram usage:        1 bytes
 25411 ;; Hardware stack levels used:    1
 25412 ;; Hardware stack levels required when called:    3
 25413 ;; This function calls:
 25414 ;;		Nothing
 25415 ;; This function is called by:
 25416 ;;		_doModeVerbose
 25417 ;;		_doModeVscp
 25418 ;;		_doModeSLCAN
 25419 ;;		_ECANInitialize
 25420 ;; This function uses a non-reentrant model
 25421 ;;
 25422                           
 25423                           	psect	text71
 25424  005742                     __ptext71:
 25425                           	opt stack 0
 25426  005742                     _ECANSetOperationMode:
 25427                           	opt stack 26
 25428                           
 25429                           ; BSR set to: 0
 25430                           ;incstack = 0
 25431                           ;incstack = 0
 25432                           ;ECANSetOperationMode@mode stored from wreg
 25433  005742  CFE8 F060          	movff	wreg,ECANSetOperationMode@mode
 25434                           
 25435                           ;ECAN.c: 1015: CANCON &= 0x1F;
 25436  005746  0E1F               	movlw	31
 25437  005748  166F               	andwf	3951,f,c	;volatile
 25438                           
 25439                           ;ECAN.c: 1016: CANCON |= mode;
 25440  00574A  0100               	movlb	0	; () banked
 25441  00574C  5160               	movf	ECANSetOperationMode@mode& (0+255),w,b
 25442  00574E  126F               	iorwf	3951,f,c	;volatile
 25443  005750                     l11248:
 25444                           
 25445                           ; BSR set to: 0
 25446  005750  506F               	movf	3951,w,c	;volatile
 25447  005752  0BE0               	andlw	224
 25448  005754  1960               	xorwf	ECANSetOperationMode@mode& (0+255),w,b
 25449  005756  B4D8               	btfsc	status,2,c
 25450                           
 25451                           ; BSR set to: 0
 25452  005758  0012               	return	
 25453  00575A  D7FA               	goto	l11248
 25454  00575C                     __end_of_ECANSetOperationMode:
 25455                           	opt stack 0
 25456                           tblptru	equ	0xFF8
 25457                           tblptrh	equ	0xFF7
 25458                           tblptrl	equ	0xFF6
 25459                           tablat	equ	0xFF5
 25460                           prodh	equ	0xFF4
 25461                           prodl	equ	0xFF3
 25462                           intcon	equ	0xFF2
 25463                           indf0	equ	0xFEF
 25464                           postinc0	equ	0xFEE
 25465                           fsr0h	equ	0xFEA
 25466                           fsr0l	equ	0xFE9
 25467                           wreg	equ	0xFE8
 25468                           indf1	equ	0xFE7
 25469                           postinc1	equ	0xFE6
 25470                           postdec1	equ	0xFE5
 25471                           fsr1h	equ	0xFE2
 25472                           fsr1l	equ	0xFE1
 25473                           indf2	equ	0xFDF
 25474                           postinc2	equ	0xFDE
 25475                           postdec2	equ	0xFDD
 25476                           plusw2	equ	0xFDB
 25477                           fsr2h	equ	0xFDA
 25478                           fsr2l	equ	0xFD9
 25479                           status	equ	0xFD8
 25480                           
 25481 ;; *************** function _OpenTimer0 *****************
 25482 ;; Defined at:
 25483 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 25484 ;; Parameters:    Size  Location     Type
 25485 ;;  config          1    wreg     unsigned char 
 25486 ;; Auto vars:     Size  Location     Type
 25487 ;;  config          1    0[BANK0 ] unsigned char 
 25488 ;; Return value:  Size  Location     Type
 25489 ;;		None               void
 25490 ;; Registers used:
 25491 ;;		wreg, status,2, status,0
 25492 ;; Tracked objects:
 25493 ;;		On entry : F/0
 25494 ;;		On exit  : F/0
 25495 ;;		Unchanged: 0/0
 25496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25497 ;;      Params:         0       0       0       0       0       0       0
 25498 ;;      Locals:         0       1       0       0       0       0       0
 25499 ;;      Temps:          0       0       0       0       0       0       0
 25500 ;;      Totals:         0       1       0       0       0       0       0
 25501 ;;Total ram usage:        1 bytes
 25502 ;; Hardware stack levels used:    1
 25503 ;; Hardware stack levels required when called:    3
 25504 ;; This function calls:
 25505 ;;		Nothing
 25506 ;; This function is called by:
 25507 ;;		_init
 25508 ;; This function uses a non-reentrant model
 25509 ;;
 25510                           
 25511                           	psect	text72
 25512  005706                     __ptext72:
 25513                           	opt stack 0
 25514  005706                     _OpenTimer0:
 25515                           	opt stack 26
 25516                           
 25517                           ; BSR set to: 0
 25518                           ;incstack = 0
 25519                           ;incstack = 0
 25520                           ;OpenTimer0@config stored from wreg
 25521  005706  CFE8 F060          	movff	wreg,OpenTimer0@config
 25522                           
 25523                           ; BSR set to: 0
 25524  00570A  5160               	movf	OpenTimer0@config& (0+255),w,b
 25525  00570C  0B7F               	andlw	127
 25526  00570E  6ED5               	movwf	4053,c	;volatile
 25527                           
 25528                           ; BSR set to: 0
 25529  005710  6AD7               	clrf	4055,c	;volatile
 25530                           
 25531                           ; BSR set to: 0
 25532  005712  6AD6               	clrf	4054,c	;volatile
 25533                           
 25534                           ; BSR set to: 0
 25535  005714  94F2               	bcf	intcon,2,c	;volatile
 25536                           
 25537                           ; BSR set to: 0
 25538  005716  AF60               	btfss	OpenTimer0@config& (0+255),7,b
 25539  005718  D002               	goto	l1770
 25540                           
 25541                           ; BSR set to: 0
 25542  00571A  8AF2               	bsf	intcon,5,c	;volatile
 25543  00571C  D001               	goto	l1771
 25544  00571E                     l1770:
 25545                           
 25546                           ; BSR set to: 0
 25547  00571E  9AF2               	bcf	intcon,5,c	;volatile
 25548  005720                     l1771:
 25549                           
 25550                           ; BSR set to: 0
 25551  005720  8ED5               	bsf	4053,7,c	;volatile
 25552                           
 25553                           ; BSR set to: 0
 25554  005722  0012               	return	
 25555  005724                     __end_of_OpenTimer0:
 25556                           	opt stack 0
 25557                           tblptru	equ	0xFF8
 25558                           tblptrh	equ	0xFF7
 25559                           tblptrl	equ	0xFF6
 25560                           tablat	equ	0xFF5
 25561                           prodh	equ	0xFF4
 25562                           prodl	equ	0xFF3
 25563                           intcon	equ	0xFF2
 25564                           indf0	equ	0xFEF
 25565                           postinc0	equ	0xFEE
 25566                           fsr0h	equ	0xFEA
 25567                           fsr0l	equ	0xFE9
 25568                           wreg	equ	0xFE8
 25569                           indf1	equ	0xFE7
 25570                           postinc1	equ	0xFE6
 25571                           postdec1	equ	0xFE5
 25572                           fsr1h	equ	0xFE2
 25573                           fsr1l	equ	0xFE1
 25574                           indf2	equ	0xFDF
 25575                           postinc2	equ	0xFDE
 25576                           postdec2	equ	0xFDD
 25577                           plusw2	equ	0xFDB
 25578                           fsr2h	equ	0xFDA
 25579                           fsr2l	equ	0xFD9
 25580                           status	equ	0xFD8
 25581                           
 25582 ;; *************** function _OpenUSART *****************
 25583 ;; Defined at:
 25584 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 25585 ;; Parameters:    Size  Location     Type
 25586 ;;  config          1    wreg     unsigned char 
 25587 ;;  spbrg           2    0[BANK0 ] unsigned int 
 25588 ;; Auto vars:     Size  Location     Type
 25589 ;;  config          1    2[BANK0 ] unsigned char 
 25590 ;; Return value:  Size  Location     Type
 25591 ;;		None               void
 25592 ;; Registers used:
 25593 ;;		wreg, status,2
 25594 ;; Tracked objects:
 25595 ;;		On entry : F/0
 25596 ;;		On exit  : F/0
 25597 ;;		Unchanged: 0/0
 25598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25599 ;;      Params:         0       2       0       0       0       0       0
 25600 ;;      Locals:         0       1       0       0       0       0       0
 25601 ;;      Temps:          0       0       0       0       0       0       0
 25602 ;;      Totals:         0       3       0       0       0       0       0
 25603 ;;Total ram usage:        3 bytes
 25604 ;; Hardware stack levels used:    1
 25605 ;; Hardware stack levels required when called:    3
 25606 ;; This function calls:
 25607 ;;		Nothing
 25608 ;; This function is called by:
 25609 ;;		_init
 25610 ;; This function uses a non-reentrant model
 25611 ;;
 25612                           
 25613                           	psect	text73
 25614  005120                     __ptext73:
 25615                           	opt stack 0
 25616  005120                     _OpenUSART:
 25617                           	opt stack 26
 25618                           
 25619                           ; BSR set to: 0
 25620                           ;incstack = 0
 25621                           ;incstack = 0
 25622                           ;OpenUSART@config stored from wreg
 25623  005120  CFE8 F062          	movff	wreg,OpenUSART@config
 25624                           
 25625                           ; BSR set to: 0
 25626  005124  6AAC               	clrf	4012,c	;volatile
 25627  005126  6AAB               	clrf	4011,c	;volatile
 25628                           
 25629                           ; BSR set to: 0
 25630  005128  B162               	btfsc	OpenUSART@config& (0+255),0,b
 25631                           
 25632                           ; BSR set to: 0
 25633  00512A  88AC               	bsf	4012,4,c	;volatile
 25634                           
 25635                           ; BSR set to: 0
 25636  00512C  A362               	btfss	OpenUSART@config& (0+255),1,b
 25637  00512E  D002               	goto	l10964
 25638                           
 25639                           ; BSR set to: 0
 25640  005130  8CAC               	bsf	4012,6,c	;volatile
 25641  005132  8CAB               	bsf	4011,6,c	;volatile
 25642  005134                     l10964:
 25643                           
 25644                           ; BSR set to: 0
 25645  005134  B562               	btfsc	OpenUSART@config& (0+255),2,b
 25646                           
 25647                           ; BSR set to: 0
 25648  005136  8EAC               	bsf	4012,7,c	;volatile
 25649                           
 25650                           ; BSR set to: 0
 25651  005138  A762               	btfss	OpenUSART@config& (0+255),3,b
 25652  00513A  D002               	goto	l1803
 25653                           
 25654                           ; BSR set to: 0
 25655  00513C  88AB               	bsf	4011,4,c	;volatile
 25656  00513E  D001               	goto	l10972
 25657  005140                     l1803:
 25658                           
 25659                           ; BSR set to: 0
 25660  005140  8AAB               	bsf	4011,5,c	;volatile
 25661  005142                     l10972:
 25662                           
 25663                           ; BSR set to: 0
 25664  005142  B962               	btfsc	OpenUSART@config& (0+255),4,b
 25665                           
 25666                           ; BSR set to: 0
 25667  005144  84AC               	bsf	4012,2,c	;volatile
 25668                           
 25669                           ; BSR set to: 0
 25670  005146  989E               	bcf	3998,4,c	;volatile
 25671                           
 25672                           ; BSR set to: 0
 25673  005148  BB62               	btfsc	OpenUSART@config& (0+255),5,b
 25674                           
 25675                           ; BSR set to: 0
 25676  00514A  86AB               	bsf	4011,3,c	;volatile
 25677                           
 25678                           ; BSR set to: 0
 25679  00514C  AD62               	btfss	OpenUSART@config& (0+255),6,b
 25680  00514E  D002               	goto	l1807
 25681                           
 25682                           ; BSR set to: 0
 25683  005150  8A9D               	bsf	3997,5,c	;volatile
 25684  005152  D001               	goto	l1808
 25685  005154                     l1807:
 25686                           
 25687                           ; BSR set to: 0
 25688  005154  9A9D               	bcf	3997,5,c	;volatile
 25689  005156                     l1808:
 25690                           
 25691                           ; BSR set to: 0
 25692  005156  9A9E               	bcf	3998,5,c	;volatile
 25693                           
 25694                           ; BSR set to: 0
 25695  005158  AF62               	btfss	OpenUSART@config& (0+255),7,b
 25696  00515A  D002               	goto	l1809
 25697                           
 25698                           ; BSR set to: 0
 25699  00515C  889D               	bsf	3997,4,c	;volatile
 25700  00515E  D001               	goto	l1810
 25701  005160                     l1809:
 25702                           
 25703                           ; BSR set to: 0
 25704  005160  989D               	bcf	3997,4,c	;volatile
 25705  005162                     l1810:
 25706                           
 25707                           ; BSR set to: 0
 25708  005162  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 25709                           
 25710                           ; BSR set to: 0
 25711  005166  5161               	movf	(OpenUSART@spbrg+1)& (0+255),w,b
 25712  005168  6EB0               	movwf	4016,c	;volatile
 25713                           
 25714                           ; BSR set to: 0
 25715  00516A  8AAC               	bsf	4012,5,c	;volatile
 25716                           
 25717                           ; BSR set to: 0
 25718  00516C  8EAB               	bsf	4011,7,c	;volatile
 25719                           
 25720                           ; BSR set to: 0
 25721  00516E  9C94               	bcf	3988,6,c	;volatile
 25722                           
 25723                           ; BSR set to: 0
 25724  005170  8E94               	bsf	3988,7,c	;volatile
 25725                           
 25726                           ; BSR set to: 0
 25727  005172  B8AC               	btfsc	4012,4,c	;volatile
 25728                           
 25729                           ; BSR set to: 0
 25730  005174  BEAC               	btfsc	4012,7,c	;volatile
 25731  005176  D001               	goto	l1812
 25732                           
 25733                           ; BSR set to: 0
 25734  005178  8C94               	bsf	3988,6,c	;volatile
 25735  00517A                     l1812:
 25736                           
 25737                           ; BSR set to: 0
 25738  00517A  0012               	return	
 25739  00517C                     __end_of_OpenUSART:
 25740                           	opt stack 0
 25741                           tblptru	equ	0xFF8
 25742                           tblptrh	equ	0xFF7
 25743                           tblptrl	equ	0xFF6
 25744                           tablat	equ	0xFF5
 25745                           prodh	equ	0xFF4
 25746                           prodl	equ	0xFF3
 25747                           intcon	equ	0xFF2
 25748                           indf0	equ	0xFEF
 25749                           postinc0	equ	0xFEE
 25750                           fsr0h	equ	0xFEA
 25751                           fsr0l	equ	0xFE9
 25752                           wreg	equ	0xFE8
 25753                           indf1	equ	0xFE7
 25754                           postinc1	equ	0xFE6
 25755                           postdec1	equ	0xFE5
 25756                           fsr1h	equ	0xFE2
 25757                           fsr1l	equ	0xFE1
 25758                           indf2	equ	0xFDF
 25759                           postinc2	equ	0xFDE
 25760                           postdec2	equ	0xFDD
 25761                           plusw2	equ	0xFDB
 25762                           fsr2h	equ	0xFDA
 25763                           fsr2l	equ	0xFD9
 25764                           status	equ	0xFD8
 25765                           
 25766 ;; *************** function _WriteTimer0 *****************
 25767 ;; Defined at:
 25768 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 25769 ;; Parameters:    Size  Location     Type
 25770 ;;  timer0          2    0[BANK0 ] unsigned int 
 25771 ;; Auto vars:     Size  Location     Type
 25772 ;;  timer           2    2[BANK0 ] struct Timers
 25773 ;; Return value:  Size  Location     Type
 25774 ;;		None               void
 25775 ;; Registers used:
 25776 ;;		None
 25777 ;; Tracked objects:
 25778 ;;		On entry : F/0
 25779 ;;		On exit  : F/0
 25780 ;;		Unchanged: F/0
 25781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25782 ;;      Params:         0       2       0       0       0       0       0
 25783 ;;      Locals:         0       2       0       0       0       0       0
 25784 ;;      Temps:          0       0       0       0       0       0       0
 25785 ;;      Totals:         0       4       0       0       0       0       0
 25786 ;;Total ram usage:        4 bytes
 25787 ;; Hardware stack levels used:    1
 25788 ;; Hardware stack levels required when called:    3
 25789 ;; This function calls:
 25790 ;;		Nothing
 25791 ;; This function is called by:
 25792 ;;		_init
 25793 ;; This function uses a non-reentrant model
 25794 ;;
 25795                           
 25796                           	psect	text74
 25797  005786                     __ptext74:
 25798                           	opt stack 0
 25799  005786                     _WriteTimer0:
 25800                           	opt stack 26
 25801                           
 25802                           ; BSR set to: 0
 25803                           
 25804                           ; BSR set to: 0
 25805                           ;incstack = 0
 25806                           ;incstack = 0
 25807  005786  C060  F062         	movff	WriteTimer0@timer0,WriteTimer0@timer
 25808  00578A  C061  F063         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 25809  00578E  C063  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 25810  005792  C062  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 25811                           
 25812                           ; BSR set to: 0
 25813  005796  0012               	return	
 25814  005798                     __end_of_WriteTimer0:
 25815                           	opt stack 0
 25816                           tblptru	equ	0xFF8
 25817                           tblptrh	equ	0xFF7
 25818                           tblptrl	equ	0xFF6
 25819                           tablat	equ	0xFF5
 25820                           prodh	equ	0xFF4
 25821                           prodl	equ	0xFF3
 25822                           intcon	equ	0xFF2
 25823                           indf0	equ	0xFEF
 25824                           postinc0	equ	0xFEE
 25825                           fsr0h	equ	0xFEA
 25826                           fsr0l	equ	0xFE9
 25827                           wreg	equ	0xFE8
 25828                           indf1	equ	0xFE7
 25829                           postinc1	equ	0xFE6
 25830                           postdec1	equ	0xFE5
 25831                           fsr1h	equ	0xFE2
 25832                           fsr1l	equ	0xFE1
 25833                           indf2	equ	0xFDF
 25834                           postinc2	equ	0xFDE
 25835                           postdec2	equ	0xFDD
 25836                           plusw2	equ	0xFDB
 25837                           fsr2h	equ	0xFDA
 25838                           fsr2l	equ	0xFD9
 25839                           status	equ	0xFD8
 25840                           
 25841 ;; *************** function _vscp_restoreDefaults *****************
 25842 ;; Defined at:
 25843 ;;		line 2726 in file "main.c"
 25844 ;; Parameters:    Size  Location     Type
 25845 ;;		None
 25846 ;; Auto vars:     Size  Location     Type
 25847 ;;		None
 25848 ;; Return value:  Size  Location     Type
 25849 ;;		None               void
 25850 ;; Registers used:
 25851 ;;		wreg, status,2, status,0, cstack
 25852 ;; Tracked objects:
 25853 ;;		On entry : F/0
 25854 ;;		On exit  : F/1
 25855 ;;		Unchanged: 0/0
 25856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25857 ;;      Params:         0       0       0       0       0       0       0
 25858 ;;      Locals:         0       0       0       0       0       0       0
 25859 ;;      Temps:          0       0       0       0       0       0       0
 25860 ;;      Totals:         0       0       0       0       0       0       0
 25861 ;;Total ram usage:        0 bytes
 25862 ;; Hardware stack levels used:    1
 25863 ;; Hardware stack levels required when called:    5
 25864 ;; This function calls:
 25865 ;;		_init_app_ram
 25866 ;;		_init_app_eeprom
 25867 ;; This function is called by:
 25868 ;;		_main
 25869 ;; This function uses a non-reentrant model
 25870 ;;
 25871                           
 25872                           	psect	text75
 25873  0057BC                     __ptext75:
 25874                           	opt stack 0
 25875  0057BC                     _vscp_restoreDefaults:
 25876                           	opt stack 25
 25877                           
 25878                           ; BSR set to: 0
 25879                           ;main.c: 2727: init_app_eeprom();
 25880                           
 25881                           ; BSR set to: 0
 25882                           ;incstack = 0
 25883                           ;incstack = 0
 25884  0057BC  EC74  F025         	call	_init_app_eeprom	;wreg free
 25885                           
 25886                           ; BSR set to: 0
 25887                           ;main.c: 2728: init_app_ram();
 25888  0057C0  EF16  F029         	goto	_init_app_ram	;wreg free
 25889  0057C4                     __end_of_vscp_restoreDefaults:
 25890                           	opt stack 0
 25891                           tblptru	equ	0xFF8
 25892                           tblptrh	equ	0xFF7
 25893                           tblptrl	equ	0xFF6
 25894                           tablat	equ	0xFF5
 25895                           prodh	equ	0xFF4
 25896                           prodl	equ	0xFF3
 25897                           intcon	equ	0xFF2
 25898                           indf0	equ	0xFEF
 25899                           postinc0	equ	0xFEE
 25900                           fsr0h	equ	0xFEA
 25901                           fsr0l	equ	0xFE9
 25902                           wreg	equ	0xFE8
 25903                           indf1	equ	0xFE7
 25904                           postinc1	equ	0xFE6
 25905                           postdec1	equ	0xFE5
 25906                           fsr1h	equ	0xFE2
 25907                           fsr1l	equ	0xFE1
 25908                           indf2	equ	0xFDF
 25909                           postinc2	equ	0xFDE
 25910                           postdec2	equ	0xFDD
 25911                           plusw2	equ	0xFDB
 25912                           fsr2h	equ	0xFDA
 25913                           fsr2l	equ	0xFD9
 25914                           status	equ	0xFD8
 25915                           
 25916 ;; *************** function _init_app_eeprom *****************
 25917 ;; Defined at:
 25918 ;;		line 465 in file "main.c"
 25919 ;; Parameters:    Size  Location     Type
 25920 ;;		None
 25921 ;; Auto vars:     Size  Location     Type
 25922 ;;  i               1    3[BANK0 ] unsigned char 
 25923 ;; Return value:  Size  Location     Type
 25924 ;;		None               void
 25925 ;; Registers used:
 25926 ;;		wreg, status,2, status,0, cstack
 25927 ;; Tracked objects:
 25928 ;;		On entry : F/0
 25929 ;;		On exit  : F/0
 25930 ;;		Unchanged: 0/0
 25931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25932 ;;      Params:         0       0       0       0       0       0       0
 25933 ;;      Locals:         0       1       0       0       0       0       0
 25934 ;;      Temps:          0       0       0       0       0       0       0
 25935 ;;      Totals:         0       1       0       0       0       0       0
 25936 ;;Total ram usage:        1 bytes
 25937 ;; Hardware stack levels used:    1
 25938 ;; Hardware stack levels required when called:    4
 25939 ;; This function calls:
 25940 ;;		_writeEEPROM
 25941 ;; This function is called by:
 25942 ;;		_vscp_restoreDefaults
 25943 ;; This function uses a non-reentrant model
 25944 ;;
 25945                           
 25946                           	psect	text76
 25947  004AE8                     __ptext76:
 25948                           	opt stack 0
 25949  004AE8                     _init_app_eeprom:
 25950                           	opt stack 25
 25951                           
 25952                           ; BSR set to: 0
 25953                           ;main.c: 466: uint8_t i;
 25954                           ;main.c: 468: writeEEPROM(0x01, 0x55);
 25955                           
 25956                           ; BSR set to: 1
 25957                           ;incstack = 0
 25958                           ;incstack = 0
 25959  004AE8  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25960  004AEA  0E01               	movlw	1
 25961  004AEC  6F60               	movwf	?_writeEEPROM& (0+255),b
 25962  004AEE  0E55               	movlw	85
 25963  004AF0  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 25964  004AF2  EC60  F02B         	call	_writeEEPROM	;wreg free
 25965                           
 25966                           ;main.c: 469: writeEEPROM(0x02, 0xAA);
 25967  004AF6  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25968  004AF8  0E02               	movlw	2
 25969  004AFA  6F60               	movwf	?_writeEEPROM& (0+255),b
 25970  004AFC  0EAA               	movlw	170
 25971  004AFE  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 25972  004B00  EC60  F02B         	call	_writeEEPROM	;wreg free
 25973                           
 25974                           ;main.c: 470: writeEEPROM(0x03, 0);
 25975  004B04  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25976  004B06  0E03               	movlw	3
 25977  004B08  6F60               	movwf	?_writeEEPROM& (0+255),b
 25978  004B0A  0E00               	movlw	0
 25979  004B0C  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 25980  004B0E  EC60  F02B         	call	_writeEEPROM	;wreg free
 25981                           
 25982                           ;main.c: 471: writeEEPROM(0x05, 0);
 25983  004B12  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25984  004B14  0E05               	movlw	5
 25985  004B16  6F60               	movwf	?_writeEEPROM& (0+255),b
 25986  004B18  0E00               	movlw	0
 25987  004B1A  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 25988  004B1C  EC60  F02B         	call	_writeEEPROM	;wreg free
 25989                           
 25990                           ;main.c: 472: writeEEPROM(0x06, 0);
 25991  004B20  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25992  004B22  0E06               	movlw	6
 25993  004B24  6F60               	movwf	?_writeEEPROM& (0+255),b
 25994  004B26  0E00               	movlw	0
 25995  004B28  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 25996  004B2A  EC60  F02B         	call	_writeEEPROM	;wreg free
 25997                           
 25998                           ;main.c: 473: writeEEPROM(0x09, 10u);
 25999  004B2E  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 26000  004B30  0E09               	movlw	9
 26001  004B32  6F60               	movwf	?_writeEEPROM& (0+255),b
 26002  004B34  0E0A               	movlw	10
 26003  004B36  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 26004  004B38  EC60  F02B         	call	_writeEEPROM	;wreg free
 26005                           
 26006                           ; BSR set to: 0
 26007                           ;main.c: 476: for (i = 0x20; i < (0x5C + 4); i++) {
 26008  004B3C  0E20               	movlw	32
 26009  004B3E  6F63               	movwf	init_app_eeprom@i& (0+255),b
 26010  004B40                     l11112:
 26011                           
 26012                           ; BSR set to: 0
 26013                           ;main.c: 477: writeEEPROM(0x01, 0xFF);
 26014  004B40  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 26015  004B42  0E01               	movlw	1
 26016  004B44  6F60               	movwf	?_writeEEPROM& (0+255),b
 26017  004B46  0EFF               	movlw	255
 26018  004B48  6962               	setf	(?_writeEEPROM+2)& (0+255),b
 26019  004B4A  EC60  F02B         	call	_writeEEPROM	;wreg free
 26020                           
 26021                           ; BSR set to: 0
 26022  004B4E  2B63               	incf	init_app_eeprom@i& (0+255),f,b
 26023                           
 26024                           ; BSR set to: 0
 26025  004B50  0E5F               	movlw	95
 26026  004B52  6563               	cpfsgt	init_app_eeprom@i& (0+255),b
 26027  004B54  D7F5               	goto	l11112
 26028                           
 26029                           ; BSR set to: 0
 26030                           ;main.c: 478: }
 26031                           ;main.c: 481: for (i = 0x60; i < (0x64 + 4); i++) {
 26032  004B56  0E60               	movlw	96
 26033  004B58  6F63               	movwf	init_app_eeprom@i& (0+255),b
 26034  004B5A                     l11124:
 26035                           
 26036                           ; BSR set to: 0
 26037                           ;main.c: 482: writeEEPROM(0x01, 0xFF);
 26038  004B5A  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 26039  004B5C  0E01               	movlw	1
 26040  004B5E  6F60               	movwf	?_writeEEPROM& (0+255),b
 26041  004B60  0EFF               	movlw	255
 26042  004B62  6962               	setf	(?_writeEEPROM+2)& (0+255),b
 26043  004B64  EC60  F02B         	call	_writeEEPROM	;wreg free
 26044                           
 26045                           ; BSR set to: 0
 26046  004B68  2B63               	incf	init_app_eeprom@i& (0+255),f,b
 26047                           
 26048                           ; BSR set to: 0
 26049  004B6A  0E67               	movlw	103
 26050  004B6C  6563               	cpfsgt	init_app_eeprom@i& (0+255),b
 26051  004B6E  D7F5               	goto	l11124
 26052                           
 26053                           ; BSR set to: 0
 26054  004B70  0C67               	retlw	103
 26055  004B72                     __end_of_init_app_eeprom:
 26056                           	opt stack 0
 26057                           tblptru	equ	0xFF8
 26058                           tblptrh	equ	0xFF7
 26059                           tblptrl	equ	0xFF6
 26060                           tablat	equ	0xFF5
 26061                           prodh	equ	0xFF4
 26062                           prodl	equ	0xFF3
 26063                           intcon	equ	0xFF2
 26064                           indf0	equ	0xFEF
 26065                           postinc0	equ	0xFEE
 26066                           fsr0h	equ	0xFEA
 26067                           fsr0l	equ	0xFE9
 26068                           wreg	equ	0xFE8
 26069                           indf1	equ	0xFE7
 26070                           postinc1	equ	0xFE6
 26071                           postdec1	equ	0xFE5
 26072                           fsr1h	equ	0xFE2
 26073                           fsr1l	equ	0xFE1
 26074                           indf2	equ	0xFDF
 26075                           postinc2	equ	0xFDE
 26076                           postdec2	equ	0xFDD
 26077                           plusw2	equ	0xFDB
 26078                           fsr2h	equ	0xFDA
 26079                           fsr2l	equ	0xFD9
 26080                           status	equ	0xFD8
 26081                           
 26082 ;; *************** function _writeEEPROM *****************
 26083 ;; Defined at:
 26084 ;;		line 23 in file "eeprom.c"
 26085 ;; Parameters:    Size  Location     Type
 26086 ;;  address         2    0[BANK0 ] unsigned short 
 26087 ;;  data            1    2[BANK0 ] unsigned char 
 26088 ;; Auto vars:     Size  Location     Type
 26089 ;;		None
 26090 ;; Return value:  Size  Location     Type
 26091 ;;		None               void
 26092 ;; Registers used:
 26093 ;;		wreg, status,2
 26094 ;; Tracked objects:
 26095 ;;		On entry : F/0
 26096 ;;		On exit  : F/0
 26097 ;;		Unchanged: F/0
 26098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26099 ;;      Params:         0       3       0       0       0       0       0
 26100 ;;      Locals:         0       0       0       0       0       0       0
 26101 ;;      Temps:          0       0       0       0       0       0       0
 26102 ;;      Totals:         0       3       0       0       0       0       0
 26103 ;;Total ram usage:        3 bytes
 26104 ;; Hardware stack levels used:    1
 26105 ;; Hardware stack levels required when called:    3
 26106 ;; This function calls:
 26107 ;;		Nothing
 26108 ;; This function is called by:
 26109 ;;		_init_app_eeprom
 26110 ;;		_doModeVerbose
 26111 ;;		_doModeSLCAN
 26112 ;; This function uses a non-reentrant model
 26113 ;;
 26114                           
 26115                           	psect	text77
 26116  0056C0                     __ptext77:
 26117                           	opt stack 0
 26118  0056C0                     _writeEEPROM:
 26119                           	opt stack 26
 26120                           
 26121                           ; BSR set to: 0
 26122                           ;eeprom.c: 29: EEADR = address & 0xff;
 26123                           
 26124                           ; BSR set to: 0
 26125                           ;incstack = 0
 26126                           ;incstack = 0
 26127  0056C0  C060  FFA9         	movff	writeEEPROM@address,4009	;volatile
 26128                           
 26129                           ;eeprom.c: 30: EEDATA = data;
 26130  0056C4  C062  FFA8         	movff	writeEEPROM@data,4008	;volatile
 26131                           
 26132                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 26133  0056C8  9EA6               	bcf	4006,7,c	;volatile
 26134                           
 26135                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 26136  0056CA  9CA6               	bcf	4006,6,c	;volatile
 26137                           
 26138                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 26139  0056CC  84A6               	bsf	4006,2,c	;volatile
 26140                           
 26141                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 26142  0056CE  9EF2               	bcf	intcon,7,c	;volatile
 26143                           
 26144                           ; BSR set to: 0
 26145                           ;eeprom.c: 37: EECON2 = 0x55;
 26146  0056D0  0E55               	movlw	85
 26147  0056D2  6EA7               	movwf	4007,c	;volatile
 26148                           
 26149                           ;eeprom.c: 38: EECON2 = 0xaa;
 26150  0056D4  0EAA               	movlw	170
 26151  0056D6  6EA7               	movwf	4007,c	;volatile
 26152                           
 26153                           ; BSR set to: 0
 26154                           ;eeprom.c: 39: EECON1bits.WR = 1;
 26155  0056D8  82A6               	bsf	4006,1,c	;volatile
 26156                           
 26157                           ; BSR set to: 0
 26158                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 26159  0056DA  8EF2               	bsf	intcon,7,c	;volatile
 26160  0056DC                     l1550:
 26161                           
 26162                           ; BSR set to: 0
 26163  0056DC  A8A1               	btfss	4001,4,c	;volatile
 26164  0056DE  D7FE               	goto	l1550
 26165                           
 26166                           ; BSR set to: 0
 26167                           ;eeprom.c: 43: PIR2bits.EEIF = 0;
 26168  0056E0  98A1               	bcf	4001,4,c	;volatile
 26169                           
 26170                           ;eeprom.c: 44: EECON1bits.WREN = 0;
 26171  0056E2  94A6               	bcf	4006,2,c	;volatile
 26172                           
 26173                           ; BSR set to: 0
 26174  0056E4  0012               	return	
 26175  0056E6                     __end_of_writeEEPROM:
 26176                           	opt stack 0
 26177                           tblptru	equ	0xFF8
 26178                           tblptrh	equ	0xFF7
 26179                           tblptrl	equ	0xFF6
 26180                           tablat	equ	0xFF5
 26181                           prodh	equ	0xFF4
 26182                           prodl	equ	0xFF3
 26183                           intcon	equ	0xFF2
 26184                           indf0	equ	0xFEF
 26185                           postinc0	equ	0xFEE
 26186                           fsr0h	equ	0xFEA
 26187                           fsr0l	equ	0xFE9
 26188                           wreg	equ	0xFE8
 26189                           indf1	equ	0xFE7
 26190                           postinc1	equ	0xFE6
 26191                           postdec1	equ	0xFE5
 26192                           fsr1h	equ	0xFE2
 26193                           fsr1l	equ	0xFE1
 26194                           indf2	equ	0xFDF
 26195                           postinc2	equ	0xFDE
 26196                           postdec2	equ	0xFDD
 26197                           plusw2	equ	0xFDB
 26198                           fsr2h	equ	0xFDA
 26199                           fsr2l	equ	0xFD9
 26200                           status	equ	0xFD8
 26201                           
 26202 ;; *************** function _init_app_ram *****************
 26203 ;; Defined at:
 26204 ;;		line 447 in file "main.c"
 26205 ;; Parameters:    Size  Location     Type
 26206 ;;		None
 26207 ;; Auto vars:     Size  Location     Type
 26208 ;;		None
 26209 ;; Return value:  Size  Location     Type
 26210 ;;		None               void
 26211 ;; Registers used:
 26212 ;;		wreg, status,2, cstack
 26213 ;; Tracked objects:
 26214 ;;		On entry : E/0
 26215 ;;		On exit  : F/1
 26216 ;;		Unchanged: 0/0
 26217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26218 ;;      Params:         0       0       0       0       0       0       0
 26219 ;;      Locals:         0       0       0       0       0       0       0
 26220 ;;      Temps:          0       0       0       0       0       0       0
 26221 ;;      Totals:         0       0       0       0       0       0       0
 26222 ;;Total ram usage:        0 bytes
 26223 ;; Hardware stack levels used:    1
 26224 ;; Hardware stack levels required when called:    4
 26225 ;; This function calls:
 26226 ;;		_readEEPROM
 26227 ;; This function is called by:
 26228 ;;		_init
 26229 ;;		_vscp_restoreDefaults
 26230 ;; This function uses a non-reentrant model
 26231 ;;
 26232                           
 26233                           	psect	text78
 26234  00522C                     __ptext78:
 26235                           	opt stack 0
 26236  00522C                     _init_app_ram:
 26237                           	opt stack 25
 26238                           
 26239                           ;main.c: 449: can_receiveOverruns = 0;
 26240                           
 26241                           ; BSR set to: 0
 26242                           ;incstack = 0
 26243                           ;incstack = 0
 26244  00522C  0100               	movlb	0	; () banked
 26245  00522E  6BD1               	clrf	_can_receiveOverruns& (0+255),b
 26246  005230  6BD2               	clrf	(_can_receiveOverruns+1)& (0+255),b
 26247  005232  6BD3               	clrf	(_can_receiveOverruns+2)& (0+255),b
 26248  005234  6BD4               	clrf	(_can_receiveOverruns+3)& (0+255),b
 26249                           
 26250                           ;main.c: 450: can_transmitOverruns = 0;
 26251  005236  6A2B               	clrf	_can_transmitOverruns,c
 26252  005238  6A2C               	clrf	_can_transmitOverruns+1,c
 26253  00523A  6A2D               	clrf	_can_transmitOverruns+2,c
 26254  00523C  6A2E               	clrf	_can_transmitOverruns+3,c
 26255                           
 26256                           ;main.c: 451: uart_receiveOverruns = 0;
 26257  00523E  6A2F               	clrf	_uart_receiveOverruns,c
 26258  005240  6A30               	clrf	_uart_receiveOverruns+1,c
 26259  005242  6A31               	clrf	_uart_receiveOverruns+2,c
 26260  005244  6A32               	clrf	_uart_receiveOverruns+3,c
 26261                           
 26262                           ;main.c: 452: uart_transmitOverruns = 0;
 26263  005246  6A33               	clrf	_uart_transmitOverruns,c
 26264  005248  6A34               	clrf	_uart_transmitOverruns+1,c
 26265  00524A  6A35               	clrf	_uart_transmitOverruns+2,c
 26266  00524C  6A36               	clrf	_uart_transmitOverruns+3,c
 26267                           
 26268                           ; BSR set to: 0
 26269                           ;main.c: 454: bHex = readEEPROM(0x06);
 26270  00524E  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
 26271  005250  0E06               	movlw	6
 26272  005252  6F60               	movwf	?_readEEPROM& (0+255),b
 26273  005254  ECCC  F02B         	call	_readEEPROM	;wreg free
 26274  005258  0101               	movlb	1	; () banked
 26275  00525A  6F00               	movwf	_bHex& (0+255),b
 26276                           
 26277                           ;main.c: 455: mode = readEEPROM(0x03);
 26278  00525C  0100               	movlb	0	; () banked
 26279  00525E  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
 26280  005260  0E03               	movlw	3
 26281  005262  6F60               	movwf	?_readEEPROM& (0+255),b
 26282  005264  ECCC  F02B         	call	_readEEPROM	;wreg free
 26283  005268  6FF1               	movwf	_mode& (0+255),b
 26284                           
 26285                           ;main.c: 457: rwtimeout = readEEPROM(0x09);
 26286  00526A  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
 26287  00526C  0E09               	movlw	9
 26288  00526E  6F60               	movwf	?_readEEPROM& (0+255),b
 26289  005270  ECCC  F02B         	call	_readEEPROM	;wreg free
 26290  005274  0101               	movlb	1	; () banked
 26291  005276  6F03               	movwf	_rwtimeout& (0+255),b
 26292                           
 26293                           ; BSR set to: 1
 26294  005278  0012               	return	
 26295  00527A                     __end_of_init_app_ram:
 26296                           	opt stack 0
 26297                           tblptru	equ	0xFF8
 26298                           tblptrh	equ	0xFF7
 26299                           tblptrl	equ	0xFF6
 26300                           tablat	equ	0xFF5
 26301                           prodh	equ	0xFF4
 26302                           prodl	equ	0xFF3
 26303                           intcon	equ	0xFF2
 26304                           indf0	equ	0xFEF
 26305                           postinc0	equ	0xFEE
 26306                           fsr0h	equ	0xFEA
 26307                           fsr0l	equ	0xFE9
 26308                           wreg	equ	0xFE8
 26309                           indf1	equ	0xFE7
 26310                           postinc1	equ	0xFE6
 26311                           postdec1	equ	0xFE5
 26312                           fsr1h	equ	0xFE2
 26313                           fsr1l	equ	0xFE1
 26314                           indf2	equ	0xFDF
 26315                           postinc2	equ	0xFDE
 26316                           postdec2	equ	0xFDD
 26317                           plusw2	equ	0xFDB
 26318                           fsr2h	equ	0xFDA
 26319                           fsr2l	equ	0xFD9
 26320                           status	equ	0xFD8
 26321                           
 26322 ;; *************** function _readEEPROM *****************
 26323 ;; Defined at:
 26324 ;;		line 87 in file "eeprom.c"
 26325 ;; Parameters:    Size  Location     Type
 26326 ;;  address         2    0[BANK0 ] unsigned short 
 26327 ;; Auto vars:     Size  Location     Type
 26328 ;;  data            1    2[BANK0 ] unsigned char 
 26329 ;; Return value:  Size  Location     Type
 26330 ;;                  1    wreg      unsigned char 
 26331 ;; Registers used:
 26332 ;;		wreg, status,2
 26333 ;; Tracked objects:
 26334 ;;		On entry : F/0
 26335 ;;		On exit  : F/0
 26336 ;;		Unchanged: 0/0
 26337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26338 ;;      Params:         0       2       0       0       0       0       0
 26339 ;;      Locals:         0       1       0       0       0       0       0
 26340 ;;      Temps:          0       0       0       0       0       0       0
 26341 ;;      Totals:         0       3       0       0       0       0       0
 26342 ;;Total ram usage:        3 bytes
 26343 ;; Hardware stack levels used:    1
 26344 ;; Hardware stack levels required when called:    3
 26345 ;; This function calls:
 26346 ;;		Nothing
 26347 ;; This function is called by:
 26348 ;;		_main
 26349 ;;		_init_app_ram
 26350 ;; This function uses a non-reentrant model
 26351 ;;
 26352                           
 26353                           	psect	text79
 26354  005798                     __ptext79:
 26355                           	opt stack 0
 26356  005798                     _readEEPROM:
 26357                           	opt stack 25
 26358                           
 26359                           ; BSR set to: 0
 26360                           ;eeprom.c: 88: uint8_t data;
 26361                           ;eeprom.c: 93: EEADR = address & 0xff;
 26362                           
 26363                           ; BSR set to: 1
 26364                           ;incstack = 0
 26365                           ;incstack = 0
 26366  005798  C060  FFA9         	movff	readEEPROM@address,4009	;volatile
 26367                           
 26368                           ;eeprom.c: 94: EECON1bits.EEPGD= 0;
 26369  00579C  9EA6               	bcf	4006,7,c	;volatile
 26370                           
 26371                           ;eeprom.c: 95: EECON1bits.CFGS = 0;
 26372  00579E  9CA6               	bcf	4006,6,c	;volatile
 26373                           
 26374                           ;eeprom.c: 96: EECON1bits.RD = 1;
 26375  0057A0  80A6               	bsf	4006,0,c	;volatile
 26376                           
 26377                           ;eeprom.c: 97: data = EEDATA;
 26378  0057A2  CFA8 F062          	movff	4008,readEEPROM@data	;volatile
 26379                           
 26380                           ; BSR set to: 0
 26381                           ;eeprom.c: 99: return data;
 26382  0057A6  5162               	movf	readEEPROM@data& (0+255),w,b
 26383                           
 26384                           ; BSR set to: 0
 26385  0057A8  0012               	return	
 26386  0057AA                     __end_of_readEEPROM:
 26387                           	opt stack 0
 26388                           tblptru	equ	0xFF8
 26389                           tblptrh	equ	0xFF7
 26390                           tblptrl	equ	0xFF6
 26391                           tablat	equ	0xFF5
 26392                           prodh	equ	0xFF4
 26393                           prodl	equ	0xFF3
 26394                           intcon	equ	0xFF2
 26395                           indf0	equ	0xFEF
 26396                           postinc0	equ	0xFEE
 26397                           fsr0h	equ	0xFEA
 26398                           fsr0l	equ	0xFE9
 26399                           wreg	equ	0xFE8
 26400                           indf1	equ	0xFE7
 26401                           postinc1	equ	0xFE6
 26402                           postdec1	equ	0xFE5
 26403                           fsr1h	equ	0xFE2
 26404                           fsr1l	equ	0xFE1
 26405                           indf2	equ	0xFDF
 26406                           postinc2	equ	0xFDE
 26407                           postdec2	equ	0xFDD
 26408                           plusw2	equ	0xFDB
 26409                           fsr2h	equ	0xFDA
 26410                           fsr2l	equ	0xFD9
 26411                           status	equ	0xFD8
 26412                           
 26413 ;; *************** function _fifo_init *****************
 26414 ;; Defined at:
 26415 ;;		line 14 in file "fifo.c"
 26416 ;; Parameters:    Size  Location     Type
 26417 ;;  f               1    wreg     PTR struct .
 26418 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 26419 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 26420 ;;		 -> caninputBuffer(494), inputBuffer(128), 
 26421 ;;  size            2    2[BANK0 ] unsigned short 
 26422 ;; Auto vars:     Size  Location     Type
 26423 ;;  f               1    4[BANK0 ] PTR struct .
 26424 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 26425 ;; Return value:  Size  Location     Type
 26426 ;;		None               void
 26427 ;; Registers used:
 26428 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 26429 ;; Tracked objects:
 26430 ;;		On entry : F/0
 26431 ;;		On exit  : F/0
 26432 ;;		Unchanged: 0/0
 26433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26434 ;;      Params:         0       4       0       0       0       0       0
 26435 ;;      Locals:         0       1       0       0       0       0       0
 26436 ;;      Temps:          0       0       0       0       0       0       0
 26437 ;;      Totals:         0       5       0       0       0       0       0
 26438 ;;Total ram usage:        5 bytes
 26439 ;; Hardware stack levels used:    1
 26440 ;; Hardware stack levels required when called:    3
 26441 ;; This function calls:
 26442 ;;		Nothing
 26443 ;; This function is called by:
 26444 ;;		_main
 26445 ;; This function uses a non-reentrant model
 26446 ;;
 26447                           
 26448                           	psect	text80
 26449  005462                     __ptext80:
 26450                           	opt stack 0
 26451  005462                     _fifo_init:
 26452                           	opt stack 27
 26453                           
 26454                           ; BSR set to: 0
 26455                           ;incstack = 0
 26456                           ;incstack = 0
 26457                           ;fifo_init@f stored from wreg
 26458  005462  CFE8 F064          	movff	wreg,fifo_init@f
 26459                           
 26460                           ; BSR set to: 0
 26461                           ;fifo.c: 15: f->head = 0;
 26462  005466  5164               	movf	fifo_init@f& (0+255),w,b
 26463  005468  6ED9               	movwf	fsr2l,c
 26464  00546A  6ADA               	clrf	fsr2h,c
 26465  00546C  0E02               	movlw	2
 26466                           
 26467                           ;fifo.c: 16: f->tail = 0;
 26468  00546E  D811               	call	PL92	;call to abstracted procedure
 26469  005470  0E04               	movlw	4
 26470                           
 26471                           ;fifo.c: 17: f->size = size;
 26472  005472  D80F               	call	PL92	;call to abstracted procedure
 26473  005474  0E06               	movlw	6
 26474  005476  26D9               	addwf	fsr2l,f,c
 26475  005478  6ADA               	clrf	fsr2h,c
 26476  00547A  C062  FFDE         	movff	fifo_init@size,postinc2
 26477  00547E  C063  FFDD         	movff	fifo_init@size+1,postdec2
 26478                           
 26479                           ; BSR set to: 0
 26480                           ;fifo.c: 18: f->buf = buf;
 26481  005482  5164               	movf	fifo_init@f& (0+255),w,b
 26482  005484  6ED9               	movwf	fsr2l,c
 26483  005486  6ADA               	clrf	fsr2h,c
 26484  005488  C060  FFDE         	movff	fifo_init@buf,postinc2
 26485  00548C  C061  FFDD         	movff	fifo_init@buf+1,postdec2
 26486                           
 26487                           ; BSR set to: 0
 26488  005490  0012               	return	
 26489  005492                     __end_of_fifo_init:
 26490                           	opt stack 0
 26491  005492                     PL92:
 26492                           	opt stack 27
 26493  005492  26D9               	addwf	fsr2l,f,c
 26494  005494  6ADA               	clrf	fsr2h,c
 26495  005496  6ADE               	clrf	postinc2,c
 26496  005498  6ADD               	clrf	postdec2,c
 26497  00549A  5164               	movf	fifo_init@f& (0+255),w,b
 26498  00549C  6ED9               	movwf	fsr2l,c
 26499  00549E  6ADA               	clrf	fsr2h,c
 26500  0054A0  0012               	return	
 26501  0054A2                     __end_ofPL92:
 26502                           	opt stack 0
 26503                           tblptru	equ	0xFF8
 26504                           tblptrh	equ	0xFF7
 26505                           tblptrl	equ	0xFF6
 26506                           tablat	equ	0xFF5
 26507                           prodh	equ	0xFF4
 26508                           prodl	equ	0xFF3
 26509                           intcon	equ	0xFF2
 26510                           indf0	equ	0xFEF
 26511                           postinc0	equ	0xFEE
 26512                           fsr0h	equ	0xFEA
 26513                           fsr0l	equ	0xFE9
 26514                           wreg	equ	0xFE8
 26515                           indf1	equ	0xFE7
 26516                           postinc1	equ	0xFE6
 26517                           postdec1	equ	0xFE5
 26518                           fsr1h	equ	0xFE2
 26519                           fsr1l	equ	0xFE1
 26520                           indf2	equ	0xFDF
 26521                           postinc2	equ	0xFDE
 26522                           postdec2	equ	0xFDD
 26523                           plusw2	equ	0xFDB
 26524                           fsr2h	equ	0xFDA
 26525                           fsr2l	equ	0xFD9
 26526                           status	equ	0xFD8
 26527                           
 26528 ;; *************** function _Interrupt *****************
 26529 ;; Defined at:
 26530 ;;		line 137 in file "main.c"
 26531 ;; Parameters:    Size  Location     Type
 26532 ;;		None
 26533 ;; Auto vars:     Size  Location     Type
 26534 ;;  data            8   27[COMRAM] unsigned char [8]
 26535 ;;  id              4   37[COMRAM] unsigned long 
 26536 ;;  flags           1   41[COMRAM] enum E16349
 26537 ;;  dlc             1   36[COMRAM] unsigned char 
 26538 ;;  c               1   35[COMRAM] unsigned char 
 26539 ;; Return value:  Size  Location     Type
 26540 ;;		None               void
 26541 ;; Registers used:
 26542 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26543 ;; Tracked objects:
 26544 ;;		On entry : 0/0
 26545 ;;		On exit  : 0/0
 26546 ;;		Unchanged: 0/0
 26547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26548 ;;      Params:         0       0       0       0       0       0       0
 26549 ;;      Locals:        15       0       0       0       0       0       0
 26550 ;;      Temps:          9       0       0       0       0       0       0
 26551 ;;      Totals:        24       0       0       0       0       0       0
 26552 ;;Total ram usage:       24 bytes
 26553 ;; Hardware stack levels used:    1
 26554 ;; Hardware stack levels required when called:    2
 26555 ;; This function calls:
 26556 ;;		_ReadUSART
 26557 ;;		_fifo_write
 26558 ;;		_ECANReceiveMessage
 26559 ;;		_fifo_getFree
 26560 ;;		i1_WriteTimer0
 26561 ;; This function is called by:
 26562 ;;		Interrupt level 1
 26563 ;; This function uses a non-reentrant model
 26564 ;;
 26565                           
 26566                           	psect	intcodelo
 26567  000018                     __pintcodelo:
 26568                           	opt stack 0
 26569  000018                     _Interrupt:
 26570                           	opt stack 20
 26571                           
 26572                           ; BSR set to: 0
 26573                           ;incstack = 0
 26574  000018  CFD8 F015          	movff	status,??_Interrupt+2
 26575  00001C  CFE8 F016          	movff	wreg,??_Interrupt+3
 26576  000020  CFE0 F017          	movff	bsr,??_Interrupt+4
 26577  000024  CFE1 F018          	movff	fsr1l,??_Interrupt+5
 26578  000028  CFE2 F019          	movff	fsr1h,??_Interrupt+6
 26579  00002C  CFD9 F01A          	movff	fsr2l,??_Interrupt+7
 26580  000030  CFDA F01B          	movff	fsr2h,??_Interrupt+8
 26581  000034                     
 26582                           ;main.c: 138: uint8_t c;
 26583                           ;main.c: 141: if ( 1 == PIR1bits.RCIF ) {
 26584  000034  AA9E               	btfss	3998,5,c	;volatile
 26585  000036  D001               	goto	i1u1690_21
 26586  000038  D001               	goto	i1u1690_20
 26587  00003A                     i1u1690_21:
 26588  00003A  D020               	goto	i1l387
 26589  00003C                     i1u1690_20:
 26590  00003C                     
 26591                           ;main.c: 143: c = ReadUSART();
 26592  00003C  EC92  F02B         	call	_ReadUSART	;wreg free
 26593  000040  6E24               	movwf	Interrupt@c,c
 26594  000042                     
 26595                           ;main.c: 145: if (1 != fifo_write(&serialInputFifo, &c, 1)) {
 26596  000042  0E24               	movlw	low Interrupt@c
 26597  000044  6E01               	movwf	?_fifo_write,c
 26598  000046  0E01               	movlw	1
 26599  000048  6E02               	movwf	?_fifo_write+1,c
 26600  00004A  0E00               	movlw	0
 26601  00004C  6E03               	movwf	?_fifo_write+2,c
 26602  00004E  0E00               	movlw	0
 26603  000050  6E04               	movwf	?_fifo_write+3,c
 26604  000052  0E00               	movlw	0
 26605  000054  6E05               	movwf	?_fifo_write+4,c
 26606  000056  0E48               	movlw	_serialInputFifo& (0+255)
 26607  000058  ECDF  F01B         	call	_fifo_write
 26608  00005C  0401               	decf	?_fifo_write,w,c
 26609  00005E  1002               	iorwf	?_fifo_write+1,w,c
 26610  000060  B4D8               	btfsc	status,2,c
 26611  000062  D001               	goto	i1u1691_21
 26612  000064  D001               	goto	i1u1691_20
 26613  000066                     i1u1691_21:
 26614  000066  D008               	goto	i1l12994
 26615  000068                     i1u1691_20:
 26616  000068                     
 26617                           ;main.c: 147: uart_receiveOverruns++;
 26618  000068  0E01               	movlw	1
 26619  00006A  262F               	addwf	_uart_receiveOverruns,f,c
 26620  00006C  0E00               	movlw	0
 26621  00006E  2230               	addwfc	_uart_receiveOverruns+1,f,c
 26622  000070  0E00               	movlw	0
 26623  000072  2231               	addwfc	_uart_receiveOverruns+2,f,c
 26624  000074  0E00               	movlw	0
 26625  000076  2232               	addwfc	_uart_receiveOverruns+3,f,c
 26626  000078                     i1l12994:
 26627                           
 26628                           ;main.c: 148: }
 26629                           ;main.c: 151: PIR1bits.RCIF = 0;
 26630  000078  9A9E               	bcf	3998,5,c	;volatile
 26631                           
 26632                           ;main.c: 153: }
 26633  00007A  D07D               	goto	i1l389
 26634  00007C                     i1l387:
 26635                           
 26636                           ;main.c: 155: else if (1 == INTCONbits.TMR0IF) {
 26637  00007C  A4F2               	btfss	intcon,2,c	;volatile
 26638  00007E  D001               	goto	i1u1692_21
 26639  000080  D001               	goto	i1u1692_20
 26640  000082                     i1u1692_21:
 26641  000082  D079               	goto	i1l389
 26642  000084                     i1u1692_20:
 26643  000084                     
 26644                           ;main.c: 157: WriteTimer0(0xfb1d);
 26645  000084  0EFB               	movlw	251
 26646  000086  6E02               	movwf	?i1_WriteTimer0+1,c
 26647  000088  0E1D               	movlw	29
 26648  00008A  6E01               	movwf	?i1_WriteTimer0,c
 26649  00008C  ECD5  F02B         	call	i1_WriteTimer0	;wreg free
 26650  000090                     
 26651                           ;main.c: 159: timer++;
 26652  000090  0E01               	movlw	1
 26653  000092  0100               	movlb	0	; () banked
 26654  000094  27E9               	addwf	_timer& (0+255),f,b	;volatile
 26655  000096  0E00               	movlw	0
 26656  000098  23EA               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 26657  00009A  0E00               	movlw	0
 26658  00009C  23EB               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 26659  00009E  0E00               	movlw	0
 26660  0000A0  23EC               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 26661  0000A2                     
 26662                           ; BSR set to: 0
 26663                           ;main.c: 160: timekeeper++;
 26664  0000A2  0E01               	movlw	1
 26665  0000A4  27E5               	addwf	_timekeeper& (0+255),f,b	;volatile
 26666  0000A6  0E00               	movlw	0
 26667  0000A8  23E6               	addwfc	(_timekeeper+1)& (0+255),f,b	;volatile
 26668  0000AA  0E00               	movlw	0
 26669  0000AC  23E7               	addwfc	(_timekeeper+2)& (0+255),f,b	;volatile
 26670  0000AE  0E00               	movlw	0
 26671  0000B0  23E8               	addwfc	(_timekeeper+3)& (0+255),f,b	;volatile
 26672  0000B2                     
 26673                           ; BSR set to: 0
 26674                           ;main.c: 163: status_led_cnt++;
 26675  0000B2  4A39               	infsnz	_status_led_cnt,f,c	;volatile
 26676  0000B4  2A3A               	incf	_status_led_cnt+1,f,c	;volatile
 26677  0000B6                     
 26678                           ; BSR set to: 0
 26679                           ;main.c: 164: if ((2 == ledFunctionality) &&
 26680                           ;main.c: 165: (status_led_cnt > 1000)) {
 26681  0000B6  503F               	movf	_ledFunctionality,w,c
 26682  0000B8  0A02               	xorlw	2
 26683  0000BA  A4D8               	btfss	status,2,c
 26684  0000BC  D001               	goto	i1u1693_21
 26685  0000BE  D001               	goto	i1u1693_20
 26686  0000C0                     i1u1693_21:
 26687  0000C0  D00C               	goto	i1l13010
 26688  0000C2                     i1u1693_20:
 26689  0000C2                     
 26690                           ; BSR set to: 0
 26691  0000C2  0EE9               	movlw	233
 26692  0000C4  5C39               	subwf	_status_led_cnt,w,c	;volatile
 26693  0000C6  0E03               	movlw	3
 26694  0000C8  583A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26695  0000CA  A0D8               	btfss	status,0,c
 26696  0000CC  D001               	goto	i1u1694_21
 26697  0000CE  D001               	goto	i1u1694_20
 26698  0000D0                     i1u1694_21:
 26699  0000D0  D004               	goto	i1l13010
 26700  0000D2                     i1u1694_20:
 26701  0000D2                     i1l13008:
 26702                           
 26703                           ; BSR set to: 0
 26704                           ;main.c: 166: LATC1 = ~LATC1;
 26705  0000D2  728B               	btg	3979,1,c	;volatile
 26706                           
 26707                           ;main.c: 167: status_led_cnt = 0;
 26708  0000D4  6A39               	clrf	_status_led_cnt,c	;volatile
 26709  0000D6  6A3A               	clrf	_status_led_cnt+1,c	;volatile
 26710                           
 26711                           ;main.c: 168: }
 26712  0000D8  D04D               	goto	i1l392
 26713  0000DA                     i1l13010:
 26714                           
 26715                           ; BSR set to: 0
 26716                           ;main.c: 169: else if ((3 == ledFunctionality) &&
 26717                           ;main.c: 170: (status_led_cnt > 400)) {
 26718  0000DA  503F               	movf	_ledFunctionality,w,c
 26719  0000DC  0A03               	xorlw	3
 26720  0000DE  A4D8               	btfss	status,2,c
 26721  0000E0  D001               	goto	i1u1695_21
 26722  0000E2  D001               	goto	i1u1695_20
 26723  0000E4                     i1u1695_21:
 26724  0000E4  D009               	goto	i1l13016
 26725  0000E6                     i1u1695_20:
 26726  0000E6                     
 26727                           ; BSR set to: 0
 26728  0000E6  0E91               	movlw	145
 26729  0000E8  5C39               	subwf	_status_led_cnt,w,c	;volatile
 26730  0000EA  0E01               	movlw	1
 26731  0000EC  583A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26732  0000EE  A0D8               	btfss	status,0,c
 26733  0000F0  D001               	goto	i1u1696_21
 26734  0000F2  D001               	goto	i1u1696_20
 26735  0000F4                     i1u1696_21:
 26736  0000F4  D001               	goto	i1l13016
 26737  0000F6                     i1u1696_20:
 26738  0000F6  D7ED               	goto	i1l13008
 26739  0000F8                     i1l13016:
 26740                           
 26741                           ; BSR set to: 0
 26742                           ;main.c: 174: else if ((4 == ledFunctionality) &&
 26743                           ;main.c: 175: (status_led_cnt > 100)) {
 26744  0000F8  503F               	movf	_ledFunctionality,w,c
 26745  0000FA  0A04               	xorlw	4
 26746  0000FC  A4D8               	btfss	status,2,c
 26747  0000FE  D001               	goto	i1u1697_21
 26748  000100  D001               	goto	i1u1697_20
 26749  000102                     i1u1697_21:
 26750  000102  D009               	goto	i1l13022
 26751  000104                     i1u1697_20:
 26752  000104                     
 26753                           ; BSR set to: 0
 26754  000104  0E65               	movlw	101
 26755  000106  5C39               	subwf	_status_led_cnt,w,c	;volatile
 26756  000108  0E00               	movlw	0
 26757  00010A  583A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26758  00010C  A0D8               	btfss	status,0,c
 26759  00010E  D001               	goto	i1u1698_21
 26760  000110  D001               	goto	i1u1698_20
 26761  000112                     i1u1698_21:
 26762  000112  D001               	goto	i1l13022
 26763  000114                     i1u1698_20:
 26764  000114  D7DE               	goto	i1l13008
 26765  000116                     i1l13022:
 26766                           
 26767                           ; BSR set to: 0
 26768                           ;main.c: 179: else if ((5 == ledFunctionality) &&
 26769                           ;main.c: 180: (status_led_cnt > 70)) {
 26770  000116  503F               	movf	_ledFunctionality,w,c
 26771  000118  0A05               	xorlw	5
 26772  00011A  A4D8               	btfss	status,2,c
 26773  00011C  D001               	goto	i1u1699_21
 26774  00011E  D001               	goto	i1u1699_20
 26775  000120                     i1u1699_21:
 26776  000120  D009               	goto	i1l13028
 26777  000122                     i1u1699_20:
 26778  000122                     
 26779                           ; BSR set to: 0
 26780  000122  0E47               	movlw	71
 26781  000124  5C39               	subwf	_status_led_cnt,w,c	;volatile
 26782  000126  0E00               	movlw	0
 26783  000128  583A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26784  00012A  A0D8               	btfss	status,0,c
 26785  00012C  D001               	goto	i1u1700_21
 26786  00012E  D001               	goto	i1u1700_20
 26787  000130                     i1u1700_21:
 26788  000130  D001               	goto	i1l13028
 26789  000132                     i1u1700_20:
 26790  000132  D7CF               	goto	i1l13008
 26791  000134                     i1l13028:
 26792                           
 26793                           ; BSR set to: 0
 26794                           ;main.c: 184: else if ((6 == ledFunctionality) &&
 26795                           ;main.c: 185: (status_led_cnt > 40)) {
 26796  000134  503F               	movf	_ledFunctionality,w,c
 26797  000136  0A06               	xorlw	6
 26798  000138  A4D8               	btfss	status,2,c
 26799  00013A  D001               	goto	i1u1701_21
 26800  00013C  D001               	goto	i1u1701_20
 26801  00013E                     i1u1701_21:
 26802  00013E  D009               	goto	i1l13034
 26803  000140                     i1u1701_20:
 26804  000140                     
 26805                           ; BSR set to: 0
 26806  000140  0E29               	movlw	41
 26807  000142  5C39               	subwf	_status_led_cnt,w,c	;volatile
 26808  000144  0E00               	movlw	0
 26809  000146  583A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26810  000148  A0D8               	btfss	status,0,c
 26811  00014A  D001               	goto	i1u1702_21
 26812  00014C  D001               	goto	i1u1702_20
 26813  00014E                     i1u1702_21:
 26814  00014E  D001               	goto	i1l13034
 26815  000150                     i1u1702_20:
 26816  000150  D7C0               	goto	i1l13008
 26817  000152                     i1l13034:
 26818                           
 26819                           ; BSR set to: 0
 26820                           ;main.c: 189: else if (1 == ledFunctionality) {
 26821  000152  043F               	decf	_ledFunctionality,w,c
 26822  000154  A4D8               	btfss	status,2,c
 26823  000156  D001               	goto	i1u1703_21
 26824  000158  D001               	goto	i1u1703_20
 26825  00015A                     i1u1703_21:
 26826  00015A  D004               	goto	i1l401
 26827  00015C                     i1u1703_20:
 26828  00015C                     
 26829                           ; BSR set to: 0
 26830                           ;main.c: 190: LATC1 = 1;
 26831  00015C  828B               	bsf	3979,1,c	;volatile
 26832                           
 26833                           ;main.c: 191: status_led_cnt = 0;
 26834  00015E  6A39               	clrf	_status_led_cnt,c	;volatile
 26835  000160  6A3A               	clrf	_status_led_cnt+1,c	;volatile
 26836                           
 26837                           ;main.c: 192: }
 26838  000162  D008               	goto	i1l392
 26839  000164                     i1l401:
 26840                           
 26841                           ; BSR set to: 0
 26842                           ;main.c: 193: else if (0 == ledFunctionality) {
 26843  000164  663F               	tstfsz	_ledFunctionality,c
 26844  000166  D001               	goto	i1u1704_21
 26845  000168  D001               	goto	i1u1704_20
 26846  00016A                     i1u1704_21:
 26847  00016A  D004               	goto	i1l398
 26848  00016C                     i1u1704_20:
 26849  00016C                     
 26850                           ; BSR set to: 0
 26851                           ;main.c: 194: LATC1 = 0;
 26852  00016C  928B               	bcf	3979,1,c	;volatile
 26853                           
 26854                           ;main.c: 195: status_led_cnt = 0;
 26855  00016E  6A39               	clrf	_status_led_cnt,c	;volatile
 26856  000170  6A3A               	clrf	_status_led_cnt+1,c	;volatile
 26857  000172  D000               	goto	i1l392
 26858  000174                     i1l398:
 26859  000174                     i1l392:
 26860                           
 26861                           ; BSR set to: 0
 26862                           ;main.c: 196: }
 26863                           ;main.c: 198: INTCONbits.TMR0IF = 0;
 26864  000174  94F2               	bcf	intcon,2,c	;volatile
 26865  000176                     i1l389:
 26866                           
 26867                           ;main.c: 199: }
 26868                           ;main.c: 202: if ( 1 == IRXIF ) {
 26869  000176  AEA4               	btfss	4004,7,c	;volatile
 26870  000178  D001               	goto	i1u1705_21
 26871  00017A  D001               	goto	i1u1705_20
 26872  00017C                     i1u1705_21:
 26873  00017C  D001               	goto	i1l404
 26874  00017E                     i1u1705_20:
 26875  00017E                     
 26876                           ;main.c: 204: IRXIF = 0;
 26877  00017E  9EA4               	bcf	4004,7,c	;volatile
 26878  000180                     i1l404:
 26879                           
 26880                           ;main.c: 205: }
 26881                           ;main.c: 208: if ( RXBnIF ) {
 26882  000180  A2A4               	btfss	4004,1,c	;volatile
 26883  000182  D001               	goto	i1u1706_21
 26884  000184  D001               	goto	i1u1706_20
 26885  000186                     i1u1706_21:
 26886  000186  D061               	goto	i1l413
 26887  000188                     i1u1706_20:
 26888  000188                     
 26889                           ;main.c: 210: uint32_t id;
 26890                           ;main.c: 211: uint8_t dlc;
 26891                           ;main.c: 212: uint8_t data[8];
 26892                           ;main.c: 213: ECAN_RX_MSG_FLAGS flags;
 26893                           ;main.c: 215: if ( ECANReceiveMessage((unsigned long *)&id,
 26894                           ;main.c: 216: (BYTE*)&data,
 26895                           ;main.c: 217: (BYTE*)&dlc,
 26896                           ;main.c: 218: &flags) ) {
 26897  000188  0E1C               	movlw	low Interrupt@data
 26898  00018A  6E08               	movwf	?_ECANReceiveMessage,c
 26899  00018C  0E25               	movlw	low Interrupt@dlc
 26900  00018E  6E09               	movwf	?_ECANReceiveMessage+1,c
 26901  000190  0E2A               	movlw	low Interrupt@flags
 26902  000192  6E0A               	movwf	?_ECANReceiveMessage+2,c
 26903  000194  0E26               	movlw	Interrupt@id& (0+255)
 26904  000196  EC4B  F013         	call	_ECANReceiveMessage
 26905  00019A  0900               	iorlw	0
 26906  00019C  B4D8               	btfsc	status,2,c
 26907  00019E  D001               	goto	i1u1707_21
 26908  0001A0  D001               	goto	i1u1707_20
 26909  0001A2                     i1u1707_21:
 26910  0001A2  D052               	goto	i1l13060
 26911  0001A4                     i1u1707_20:
 26912  0001A4                     
 26913                           ;main.c: 221: if ( flags & ECAN_RX_OVERFLOW ) {
 26914  0001A4  A62A               	btfss	Interrupt@flags,3,c
 26915  0001A6  D001               	goto	i1u1708_21
 26916  0001A8  D001               	goto	i1u1708_20
 26917  0001AA                     i1u1708_21:
 26918  0001AA  D00E               	goto	i1l407
 26919  0001AC                     i1u1708_20:
 26920  0001AC                     
 26921                           ;main.c: 222: if ( flags & ECAN_RX_XTD_FRAME ) can_receiveOverruns++;
 26922  0001AC  AA2A               	btfss	Interrupt@flags,5,c
 26923  0001AE  D001               	goto	i1u1709_21
 26924  0001B0  D001               	goto	i1u1709_20
 26925  0001B2                     i1u1709_21:
 26926  0001B2  D04A               	goto	i1l13060
 26927  0001B4                     i1u1709_20:
 26928  0001B4                     i1l13048:
 26929  0001B4  0E01               	movlw	1
 26930  0001B6  0100               	movlb	0	; () banked
 26931  0001B8  27D1               	addwf	_can_receiveOverruns& (0+255),f,b
 26932  0001BA  0E00               	movlw	0
 26933  0001BC  23D2               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 26934  0001BE  0E00               	movlw	0
 26935  0001C0  23D3               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 26936  0001C2  0E00               	movlw	0
 26937  0001C4  23D4               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 26938  0001C6  D040               	goto	i1l13060
 26939  0001C8                     i1l407:
 26940                           
 26941                           ;main.c: 224: else if ( !( flags & ECAN_RX_RTR_FRAME ) &&
 26942                           ;main.c: 225: ( flags & ECAN_RX_XTD_FRAME ) ) {
 26943  0001C8  BC2A               	btfsc	Interrupt@flags,6,c
 26944  0001CA  D001               	goto	i1u1710_21
 26945  0001CC  D001               	goto	i1u1710_20
 26946  0001CE                     i1u1710_21:
 26947  0001CE  D03C               	goto	i1l13060
 26948  0001D0                     i1u1710_20:
 26949  0001D0  AA2A               	btfss	Interrupt@flags,5,c
 26950  0001D2  D001               	goto	i1u1711_21
 26951  0001D4  D001               	goto	i1u1711_20
 26952  0001D6                     i1u1711_21:
 26953  0001D6  D038               	goto	i1l13060
 26954  0001D8                     i1u1711_20:
 26955  0001D8                     
 26956                           ;main.c: 227: if ( ( fifo_getFree( &canInputFifo ) >= (5+dlc) ) ) {
 26957  0001D8  5025               	movf	Interrupt@dlc,w,c
 26958  0001DA  6E13               	movwf	??_Interrupt& (0+255),c
 26959  0001DC  6A14               	clrf	(??_Interrupt+1)& (0+255),c
 26960  0001DE  0E05               	movlw	5
 26961  0001E0  2613               	addwf	??_Interrupt,f,c
 26962  0001E2  0E00               	movlw	0
 26963  0001E4  2214               	addwfc	??_Interrupt+1,f,c
 26964  0001E6  0E40               	movlw	_canInputFifo& (0+255)
 26965  0001E8  ECFC  F023         	call	_fifo_getFree
 26966  0001EC  5013               	movf	??_Interrupt,w,c
 26967  0001EE  5C01               	subwf	?_fifo_getFree,w,c
 26968  0001F0  5014               	movf	??_Interrupt+1,w,c
 26969  0001F2  5802               	subwfb	?_fifo_getFree+1,w,c
 26970  0001F4  A0D8               	btfss	status,0,c
 26971  0001F6  D001               	goto	i1u1712_21
 26972  0001F8  D001               	goto	i1u1712_20
 26973  0001FA                     i1u1712_21:
 26974  0001FA  D7DC               	goto	i1l13048
 26975  0001FC                     i1u1712_20:
 26976  0001FC                     
 26977                           ;main.c: 228: fifo_write( &canInputFifo, (uint8_t *)&id, 4 );
 26978  0001FC  0E26               	movlw	low Interrupt@id
 26979  0001FE  6E01               	movwf	?_fifo_write,c
 26980  000200  0E04               	movlw	4
 26981  000202  6E02               	movwf	?_fifo_write+1,c
 26982  000204  0E00               	movlw	0
 26983  000206  6E03               	movwf	?_fifo_write+2,c
 26984  000208  0E00               	movlw	0
 26985  00020A  6E04               	movwf	?_fifo_write+3,c
 26986  00020C  0E00               	movlw	0
 26987  00020E  6E05               	movwf	?_fifo_write+4,c
 26988  000210  0E40               	movlw	_canInputFifo& (0+255)
 26989  000212  ECDF  F01B         	call	_fifo_write
 26990                           
 26991                           ;main.c: 229: fifo_write( &canInputFifo, &dlc, 1 );
 26992  000216  0E25               	movlw	low Interrupt@dlc
 26993  000218  6E01               	movwf	?_fifo_write,c
 26994  00021A  0E01               	movlw	1
 26995  00021C  6E02               	movwf	?_fifo_write+1,c
 26996  00021E  0E00               	movlw	0
 26997  000220  6E03               	movwf	?_fifo_write+2,c
 26998  000222  0E00               	movlw	0
 26999  000224  6E04               	movwf	?_fifo_write+3,c
 27000  000226  0E00               	movlw	0
 27001  000228  6E05               	movwf	?_fifo_write+4,c
 27002  00022A  0E40               	movlw	_canInputFifo& (0+255)
 27003  00022C  ECDF  F01B         	call	_fifo_write
 27004                           
 27005                           ;main.c: 230: fifo_write( &canInputFifo, (uint8_t *)&data, dlc );
 27006  000230  0E1C               	movlw	low Interrupt@data
 27007  000232  6E01               	movwf	?_fifo_write,c
 27008  000234  5025               	movf	Interrupt@dlc,w,c
 27009  000236  6E02               	movwf	?_fifo_write+1,c
 27010  000238  6A03               	clrf	?_fifo_write+2,c
 27011  00023A  6A04               	clrf	?_fifo_write+3,c
 27012  00023C  6A05               	clrf	?_fifo_write+4,c
 27013  00023E  0E40               	movlw	_canInputFifo& (0+255)
 27014  000240  ECDF  F01B         	call	_fifo_write
 27015  000244                     
 27016                           ;main.c: 232: canrxcount++;
 27017  000244  0100               	movlb	0	; () banked
 27018  000246  2BF0               	incf	_canrxcount& (0+255),f,b	;volatile
 27019  000248                     i1l13060:
 27020                           
 27021                           ;main.c: 236: }
 27022                           ;main.c: 238: }
 27023                           ;main.c: 240: }
 27024                           ;main.c: 243: RXBnIF = 0;
 27025  000248  92A4               	bcf	4004,1,c	;volatile
 27026  00024A                     i1l413:
 27027  00024A  C01B  FFDA         	movff	??_Interrupt+8,fsr2h
 27028  00024E  C01A  FFD9         	movff	??_Interrupt+7,fsr2l
 27029  000252  C019  FFE2         	movff	??_Interrupt+6,fsr1h
 27030  000256  C018  FFE1         	movff	??_Interrupt+5,fsr1l
 27031  00025A  C017  FFE0         	movff	??_Interrupt+4,bsr
 27032  00025E  C016  FFE8         	movff	??_Interrupt+3,wreg
 27033  000262  C015  FFD8         	movff	??_Interrupt+2,status
 27034  000266  0010               	retfie	
 27035  000268                     __end_of_Interrupt:
 27036                           	opt stack 0
 27037                           tblptru	equ	0xFF8
 27038                           tblptrh	equ	0xFF7
 27039                           tblptrl	equ	0xFF6
 27040                           tablat	equ	0xFF5
 27041                           prodh	equ	0xFF4
 27042                           prodl	equ	0xFF3
 27043                           intcon	equ	0xFF2
 27044                           indf0	equ	0xFEF
 27045                           postinc0	equ	0xFEE
 27046                           fsr0h	equ	0xFEA
 27047                           fsr0l	equ	0xFE9
 27048                           wreg	equ	0xFE8
 27049                           indf1	equ	0xFE7
 27050                           postinc1	equ	0xFE6
 27051                           postdec1	equ	0xFE5
 27052                           fsr1h	equ	0xFE2
 27053                           fsr1l	equ	0xFE1
 27054                           bsr	equ	0xFE0
 27055                           indf2	equ	0xFDF
 27056                           postinc2	equ	0xFDE
 27057                           postdec2	equ	0xFDD
 27058                           plusw2	equ	0xFDB
 27059                           fsr2h	equ	0xFDA
 27060                           fsr2l	equ	0xFD9
 27061                           status	equ	0xFD8
 27062                           
 27063 ;; *************** function i1_WriteTimer0 *****************
 27064 ;; Defined at:
 27065 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 27066 ;; Parameters:    Size  Location     Type
 27067 ;;  timer0          2    0[COMRAM] unsigned int 
 27068 ;; Auto vars:     Size  Location     Type
 27069 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 27070 ;; Return value:  Size  Location     Type
 27071 ;;		None               void
 27072 ;; Registers used:
 27073 ;;		None
 27074 ;; Tracked objects:
 27075 ;;		On entry : 0/0
 27076 ;;		On exit  : 0/0
 27077 ;;		Unchanged: 0/0
 27078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27079 ;;      Params:         2       0       0       0       0       0       0
 27080 ;;      Locals:         2       0       0       0       0       0       0
 27081 ;;      Temps:          0       0       0       0       0       0       0
 27082 ;;      Totals:         4       0       0       0       0       0       0
 27083 ;;Total ram usage:        4 bytes
 27084 ;; Hardware stack levels used:    1
 27085 ;; This function calls:
 27086 ;;		Nothing
 27087 ;; This function is called by:
 27088 ;;		_Interrupt
 27089 ;; This function uses a non-reentrant model
 27090 ;;
 27091                           
 27092                           	psect	text82
 27093  0057AA                     __ptext82:
 27094                           	opt stack 0
 27095  0057AA                     i1_WriteTimer0:
 27096                           	opt stack 21
 27097                           
 27098                           ;incstack = 0
 27099                           ;incstack = 0
 27100  0057AA  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 27101  0057AE  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 27102  0057B2  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 27103  0057B6  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 27104  0057BA  0012               	return	
 27105  0057BC                     __end_ofi1_WriteTimer0:
 27106                           	opt stack 0
 27107                           tblptru	equ	0xFF8
 27108                           tblptrh	equ	0xFF7
 27109                           tblptrl	equ	0xFF6
 27110                           tablat	equ	0xFF5
 27111                           prodh	equ	0xFF4
 27112                           prodl	equ	0xFF3
 27113                           intcon	equ	0xFF2
 27114                           indf0	equ	0xFEF
 27115                           postinc0	equ	0xFEE
 27116                           fsr0h	equ	0xFEA
 27117                           fsr0l	equ	0xFE9
 27118                           wreg	equ	0xFE8
 27119                           indf1	equ	0xFE7
 27120                           postinc1	equ	0xFE6
 27121                           postdec1	equ	0xFE5
 27122                           fsr1h	equ	0xFE2
 27123                           fsr1l	equ	0xFE1
 27124                           bsr	equ	0xFE0
 27125                           indf2	equ	0xFDF
 27126                           postinc2	equ	0xFDE
 27127                           postdec2	equ	0xFDD
 27128                           plusw2	equ	0xFDB
 27129                           fsr2h	equ	0xFDA
 27130                           fsr2l	equ	0xFD9
 27131                           status	equ	0xFD8
 27132                           
 27133 ;; *************** function _fifo_getFree *****************
 27134 ;; Defined at:
 27135 ;;		line 96 in file "fifo.c"
 27136 ;; Parameters:    Size  Location     Type
 27137 ;;  f               1    wreg     PTR struct .
 27138 ;;		 -> canInputFifo(8), 
 27139 ;; Auto vars:     Size  Location     Type
 27140 ;;  f               1   10[COMRAM] PTR struct .
 27141 ;;		 -> canInputFifo(8), 
 27142 ;; Return value:  Size  Location     Type
 27143 ;;                  2    0[COMRAM] unsigned short 
 27144 ;; Registers used:
 27145 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27146 ;; Tracked objects:
 27147 ;;		On entry : 0/0
 27148 ;;		On exit  : 0/0
 27149 ;;		Unchanged: 0/0
 27150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27151 ;;      Params:         2       0       0       0       0       0       0
 27152 ;;      Locals:         1       0       0       0       0       0       0
 27153 ;;      Temps:          8       0       0       0       0       0       0
 27154 ;;      Totals:        11       0       0       0       0       0       0
 27155 ;;Total ram usage:       11 bytes
 27156 ;; Hardware stack levels used:    1
 27157 ;; This function calls:
 27158 ;;		Nothing
 27159 ;; This function is called by:
 27160 ;;		_Interrupt
 27161 ;; This function uses a non-reentrant model
 27162 ;;
 27163                           
 27164                           	psect	text83
 27165  0047F8                     __ptext83:
 27166                           	opt stack 0
 27167  0047F8                     _fifo_getFree:
 27168                           	opt stack 21
 27169                           
 27170                           ;incstack = 0
 27171                           ;incstack = 0
 27172                           ;fifo_getFree@f stored from wreg
 27173  0047F8  CFE8 F00B          	movff	wreg,fifo_getFree@f
 27174                           
 27175                           ;fifo.c: 97: if (f->head < f->tail) {
 27176  0047FC  D83F               	call	PL66	;call to abstracted procedure
 27177  0047FE  500B               	movf	fifo_getFree@f,w,c
 27178  004800  6EE1               	movwf	fsr1l,c
 27179  004802  6AE2               	clrf	fsr1h,c
 27180  004804  0E02               	movlw	2
 27181  004806  26E1               	addwf	fsr1l,f,c
 27182  004808  6AE2               	clrf	fsr1h,c
 27183  00480A  52E6               	movf	postinc1,f,c
 27184  00480C  52DE               	movf	postinc2,f,c
 27185  00480E  50DD               	movf	postdec2,w,c
 27186  004810  5CE5               	subwf	postdec1,w,c
 27187  004812  E102               	bnz	i1u615_25
 27188  004814  50DF               	movf	indf2,w,c
 27189  004816  5CE7               	subwf	indf1,w,c
 27190  004818                     i1u615_25:
 27191  004818  E210               	bc	i1l6336
 27192                           
 27193                           ;fifo.c: 98: return (f->tail - f->head);
 27194  00481A  D837               	call	PL108	;call to abstracted procedure
 27195  00481C  CFDE F003          	movff	postinc2,??_fifo_getFree
 27196  004820  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 27197  004824  D82B               	call	PL66	;call to abstracted procedure
 27198  004826  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 27199  00482A  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 27200  00482E  5003               	movf	??_fifo_getFree,w,c
 27201  004830  5C05               	subwf	??_fifo_getFree+2,w,c
 27202  004832  6E01               	movwf	?_fifo_getFree,c
 27203  004834  5004               	movf	??_fifo_getFree+1,w,c
 27204  004836  5806               	subwfb	??_fifo_getFree+3,w,c
 27205  004838  D01F               	goto	L42
 27206  00483A                     i1l6336:
 27207                           
 27208                           ;fifo.c: 100: else {
 27209                           ;fifo.c: 101: return (f->size + (f->tail - f->head));
 27210  00483A  D820               	call	PL66	;call to abstracted procedure
 27211  00483C  CFDE F003          	movff	postinc2,??_fifo_getFree
 27212  004840  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 27213  004844  D822               	call	PL108	;call to abstracted procedure
 27214  004846  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 27215  00484A  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 27216  00484E  500B               	movf	fifo_getFree@f,w,c
 27217  004850  6ED9               	movwf	fsr2l,c
 27218  004852  6ADA               	clrf	fsr2h,c
 27219  004854  0E06               	movlw	6
 27220  004856  26D9               	addwf	fsr2l,f,c
 27221  004858  6ADA               	clrf	fsr2h,c
 27222  00485A  CFDE F007          	movff	postinc2,??_fifo_getFree+4
 27223  00485E  CFDD F008          	movff	postdec2,??_fifo_getFree+5
 27224  004862  5005               	movf	??_fifo_getFree+2,w,c
 27225  004864  5C07               	subwf	??_fifo_getFree+4,w,c
 27226  004866  6E09               	movwf	(??_fifo_getFree+6)& (0+255),c
 27227  004868  5006               	movf	??_fifo_getFree+3,w,c
 27228  00486A  5808               	subwfb	??_fifo_getFree+5,w,c
 27229  00486C  6E0A               	movwf	(??_fifo_getFree+7)& (0+255),c
 27230  00486E  5003               	movf	??_fifo_getFree,w,c
 27231  004870  2409               	addwf	??_fifo_getFree+6,w,c
 27232  004872  6E01               	movwf	?_fifo_getFree,c
 27233  004874  5004               	movf	??_fifo_getFree+1,w,c
 27234  004876  200A               	addwfc	??_fifo_getFree+7,w,c
 27235  004878                     L42:
 27236  004878  6E02               	movwf	?_fifo_getFree+1,c
 27237  00487A  0012               	return	
 27238  00487C                     __end_of_fifo_getFree:
 27239                           	opt stack 0
 27240  00487C                     PL66:
 27241                           	opt stack 21
 27242  00487C  500B               	movf	fifo_getFree@f,w,c
 27243  00487E  6ED9               	movwf	fsr2l,c
 27244  004880  6ADA               	clrf	fsr2h,c
 27245  004882  0E04               	movlw	4
 27246  004884  26D9               	addwf	fsr2l,f,c
 27247  004886  6ADA               	clrf	fsr2h,c
 27248  004888  0012               	return	
 27249  00488A                     __end_ofPL66:
 27250                           	opt stack 0
 27251  00488A                     PL108:
 27252                           	opt stack 21
 27253  00488A  500B               	movf	fifo_getFree@f,w,c
 27254  00488C  6ED9               	movwf	fsr2l,c
 27255  00488E  6ADA               	clrf	fsr2h,c
 27256  004890  0E02               	movlw	2
 27257  004892  26D9               	addwf	fsr2l,f,c
 27258  004894  6ADA               	clrf	fsr2h,c
 27259  004896  0012               	return	
 27260  004898                     __end_ofPL108:
 27261                           	opt stack 0
 27262                           tblptru	equ	0xFF8
 27263                           tblptrh	equ	0xFF7
 27264                           tblptrl	equ	0xFF6
 27265                           tablat	equ	0xFF5
 27266                           prodh	equ	0xFF4
 27267                           prodl	equ	0xFF3
 27268                           intcon	equ	0xFF2
 27269                           indf0	equ	0xFEF
 27270                           postinc0	equ	0xFEE
 27271                           fsr0h	equ	0xFEA
 27272                           fsr0l	equ	0xFE9
 27273                           wreg	equ	0xFE8
 27274                           indf1	equ	0xFE7
 27275                           postinc1	equ	0xFE6
 27276                           postdec1	equ	0xFE5
 27277                           fsr1h	equ	0xFE2
 27278                           fsr1l	equ	0xFE1
 27279                           bsr	equ	0xFE0
 27280                           indf2	equ	0xFDF
 27281                           postinc2	equ	0xFDE
 27282                           postdec2	equ	0xFDD
 27283                           plusw2	equ	0xFDB
 27284                           fsr2h	equ	0xFDA
 27285                           fsr2l	equ	0xFD9
 27286                           status	equ	0xFD8
 27287                           
 27288 ;; *************** function _ECANReceiveMessage *****************
 27289 ;; Defined at:
 27290 ;;		line 803 in file "ECAN.c"
 27291 ;; Parameters:    Size  Location     Type
 27292 ;;  id              1    wreg     PTR unsigned long 
 27293 ;;		 -> Interrupt@id(4), 
 27294 ;;  data            1    7[COMRAM] PTR unsigned char 
 27295 ;;		 -> Interrupt@data(8), 
 27296 ;;  dataLen         1    8[COMRAM] PTR unsigned char 
 27297 ;;		 -> Interrupt@dlc(1), 
 27298 ;;  msgFlags        1    9[COMRAM] PTR enum E16324
 27299 ;;		 -> Interrupt@flags(1), 
 27300 ;; Auto vars:     Size  Location     Type
 27301 ;;  id              1   12[COMRAM] PTR unsigned long 
 27302 ;;		 -> Interrupt@id(4), 
 27303 ;;  ptr             2   16[COMRAM] PTR unsigned char 
 27304 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27305 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27306 ;;  savedPtr        2   10[COMRAM] PTR unsigned char 
 27307 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27308 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27309 ;;  temp            1   15[COMRAM] struct .
 27310 ;;  mode            1   14[COMRAM] unsigned char 
 27311 ;;  i               1   13[COMRAM] unsigned char 
 27312 ;; Return value:  Size  Location     Type
 27313 ;;                  1    wreg      enum E15660
 27314 ;; Registers used:
 27315 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27316 ;; Tracked objects:
 27317 ;;		On entry : 0/0
 27318 ;;		On exit  : 0/0
 27319 ;;		Unchanged: 0/0
 27320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27321 ;;      Params:         3       0       0       0       0       0       0
 27322 ;;      Locals:         8       0       0       0       0       0       0
 27323 ;;      Temps:          0       0       0       0       0       0       0
 27324 ;;      Totals:        11       0       0       0       0       0       0
 27325 ;;Total ram usage:       11 bytes
 27326 ;; Hardware stack levels used:    1
 27327 ;; Hardware stack levels required when called:    1
 27328 ;; This function calls:
 27329 ;;		__ECANPointBuffer
 27330 ;;		__RegsToCANID
 27331 ;; This function is called by:
 27332 ;;		_Interrupt
 27333 ;; This function uses a non-reentrant model
 27334 ;;
 27335                           
 27336                           	psect	text84
 27337  002696                     __ptext84:
 27338                           	opt stack 0
 27339  002696                     _ECANReceiveMessage:
 27340                           	opt stack 20
 27341                           
 27342                           ;incstack = 0
 27343                           ;incstack = 0
 27344                           ;ECANReceiveMessage@id stored from wreg
 27345  002696  CFE8 F00D          	movff	wreg,ECANReceiveMessage@id
 27346                           
 27347                           ;ECAN.c: 805: BYTE mode;
 27348                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 27349                           ;ECAN.c: 809: char i;
 27350                           ;ECAN.c: 810: BYTE_VAL temp;
 27351                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 27352  00269A  6A3E               	clrf	__ECANRxFilterHitInfo,c
 27353                           
 27354                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 27355  00269C  5077               	movf	3959,w,c	;volatile
 27356  00269E  0BC0               	andlw	192
 27357  0026A0  6E0F               	movwf	ECANReceiveMessage@mode,c
 27358                           
 27359                           ;ECAN.c: 816: if ( mode == 0x00 )
 27360  0026A2  660F               	tstfsz	ECANReceiveMessage@mode,c
 27361  0026A4  D032               	goto	i1l9600
 27362                           
 27363                           ;ECAN.c: 822: {
 27364                           ;ECAN.c: 824: if ( RXB0FUL )
 27365  0026A6  AE60               	btfss	3936,7,c	;volatile
 27366  0026A8  D012               	goto	i1l1440
 27367                           
 27368                           ;ECAN.c: 825: {
 27369                           ;ECAN.c: 827: RXB0IF = 0;
 27370  0026AA  90A4               	bcf	4004,0,c	;volatile
 27371                           
 27372                           ;ECAN.c: 830: if ( RXB0OVFL )
 27373  0026AC  AE74               	btfss	3956,7,c	;volatile
 27374  0026AE  D006               	goto	i1l9576
 27375                           
 27376                           ;ECAN.c: 831: {
 27377                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 27378  0026B0  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27379  0026B2  6ED9               	movwf	fsr2l,c
 27380  0026B4  6ADA               	clrf	fsr2h,c
 27381  0026B6  0E00               	movlw	0
 27382  0026B8  86DB               	bsf	plusw2,3,c
 27383                           
 27384                           ;ECAN.c: 833: RXB0OVFL = 0;
 27385  0026BA  9E74               	bcf	3956,7,c	;volatile
 27386  0026BC                     i1l9576:
 27387                           
 27388                           ;ECAN.c: 834: }
 27389                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 27390  0026BC  A060               	btfss	3936,0,c	;volatile
 27391  0026BE  D002               	bra	i1u1132_25
 27392  0026C0  803E               	bsf	__ECANRxFilterHitInfo,0,c
 27393  0026C2  D001               	bra	i1u1132_27
 27394  0026C4                     i1u1132_25:
 27395  0026C4  903E               	bcf	__ECANRxFilterHitInfo,0,c
 27396  0026C6                     i1u1132_27:
 27397                           
 27398                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 27399  0026C6  0E0F               	movlw	15	;volatile
 27400  0026C8  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27401  0026CA  0E60               	movlw	96	;volatile
 27402  0026CC  D01A               	goto	L43
 27403  0026CE                     i1l1440:
 27404                           
 27405                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 27406  0026CE  010F               	movlb	15	; () banked
 27407  0026D0  AF50               	btfss	80,7,b	;volatile
 27408  0026D2  D019               	goto	i1l9594
 27409                           
 27410                           ; BSR set to: 15
 27411                           ;ECAN.c: 842: {
 27412                           ;ECAN.c: 844: RXB1IF = 0;
 27413  0026D4  92A4               	bcf	4004,1,c	;volatile
 27414                           
 27415                           ;ECAN.c: 847: if ( RXB1OVFL )
 27416  0026D6  AC74               	btfss	3956,6,c	;volatile
 27417  0026D8  D006               	goto	i1l9586
 27418                           
 27419                           ; BSR set to: 15
 27420                           ;ECAN.c: 848: {
 27421                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 27422  0026DA  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27423  0026DC  6ED9               	movwf	fsr2l,c
 27424  0026DE  6ADA               	clrf	fsr2h,c
 27425  0026E0  0E00               	movlw	0
 27426  0026E2  86DB               	bsf	plusw2,3,c
 27427                           
 27428                           ; BSR set to: 15
 27429                           ;ECAN.c: 850: RXB1OVFL = 0;
 27430  0026E4  9C74               	bcf	3956,6,c	;volatile
 27431  0026E6                     i1l9586:
 27432                           
 27433                           ; BSR set to: 15
 27434                           ;ECAN.c: 851: }
 27435                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 27436  0026E6  5150               	movf	80,w,b	;volatile
 27437  0026E8  0B07               	andlw	7
 27438  0026EA  6E3E               	movwf	__ECANRxFilterHitInfo,c
 27439                           
 27440                           ; BSR set to: 15
 27441                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 27442  0026EC  0E02               	movlw	2
 27443  0026EE  603E               	cpfslt	__ECANRxFilterHitInfo,c
 27444  0026F0  D005               	goto	i1l9592
 27445                           
 27446                           ; BSR set to: 15
 27447                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 27448  0026F2  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27449  0026F4  6ED9               	movwf	fsr2l,c
 27450  0026F6  6ADA               	clrf	fsr2h,c
 27451  0026F8  0E00               	movlw	0
 27452  0026FA  8EDB               	bsf	plusw2,7,c
 27453  0026FC                     i1l9592:
 27454                           
 27455                           ; BSR set to: 15
 27456                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 27457  0026FC  0E0F               	movlw	15	;volatile
 27458  0026FE  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27459  002700  0E50               	movlw	80	;volatile
 27460  002702                     L43:
 27461  002702  6E11               	movwf	ECANReceiveMessage@ptr,c
 27462                           
 27463                           ;ECAN.c: 860: }
 27464  002704  D065               	goto	i1l9654
 27465  002706                     i1l9594:
 27466                           
 27467                           ;ECAN.c: 861: else
 27468                           ;ECAN.c: 862: return FALSE;
 27469  002706  0E00               	movlw	0
 27470  002708  D0C2               	goto	i1l1447
 27471  00270A                     i1l9600:
 27472                           
 27473                           ;ECAN.c: 869: else if ( mode == 0x40 )
 27474  00270A  500F               	movf	ECANReceiveMessage@mode,w,c
 27475  00270C  0A40               	xorlw	64
 27476  00270E  E146               	bnz	i1l1450
 27477                           
 27478                           ;ECAN.c: 875: {
 27479                           ;ECAN.c: 876: if ( RXB0FUL )
 27480  002710  AE60               	btfss	3936,7,c	;volatile
 27481  002712  D004               	goto	i1l1451
 27482                           
 27483                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 27484  002714  0E0F               	movlw	15	;volatile
 27485  002716  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27486  002718  0E60               	movlw	96	;volatile
 27487  00271A  D03E               	goto	L50
 27488  00271C                     i1l1451:
 27489                           
 27490                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 27491  00271C  010F               	movlb	15	; () banked
 27492  00271E  AF50               	btfss	80,7,b	;volatile
 27493  002720  D004               	goto	i1l1453
 27494                           
 27495                           ; BSR set to: 15
 27496                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 27497  002722  0E0F               	movlw	15	;volatile
 27498  002724  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27499  002726  0E50               	movlw	80	;volatile
 27500  002728  D037               	goto	L50
 27501  00272A                     i1l1453:
 27502                           
 27503                           ; BSR set to: 15
 27504                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 27505  00272A  010D               	movlb	13
 27506  00272C  B5F8               	btfsc	248,2,b	;volatile
 27507  00272E  D007               	goto	i1l1455
 27508  002730  010E               	movlb	14
 27509  002732  AF20               	btfss	32,7,b	;volatile
 27510  002734  D004               	goto	i1l1455
 27511                           
 27512                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 27513  002736  0E0E               	movlw	14	;volatile
 27514  002738  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27515  00273A  0E20               	movlw	32	;volatile
 27516  00273C  D02D               	goto	L50
 27517  00273E                     i1l1455:
 27518                           
 27519                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 27520  00273E  010D               	movlb	13
 27521  002740  B7F8               	btfsc	248,3,b	;volatile
 27522  002742  D007               	goto	i1l1457
 27523  002744  010E               	movlb	14
 27524  002746  AF30               	btfss	48,7,b	;volatile
 27525  002748  D004               	goto	i1l1457
 27526                           
 27527                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 27528  00274A  0E0E               	movlw	14	;volatile
 27529  00274C  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27530  00274E  0E30               	movlw	48	;volatile
 27531  002750  D023               	goto	L50
 27532  002752                     i1l1457:
 27533                           
 27534                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 27535  002752  010D               	movlb	13
 27536  002754  B9F8               	btfsc	248,4,b	;volatile
 27537  002756  D007               	goto	i1l1459
 27538  002758  010E               	movlb	14
 27539  00275A  AF40               	btfss	64,7,b	;volatile
 27540  00275C  D004               	goto	i1l1459
 27541                           
 27542                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 27543  00275E  0E0E               	movlw	14	;volatile
 27544  002760  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27545  002762  0E40               	movlw	64	;volatile
 27546  002764  D019               	goto	L50
 27547  002766                     i1l1459:
 27548                           
 27549                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 27550  002766  010D               	movlb	13
 27551  002768  BBF8               	btfsc	248,5,b	;volatile
 27552  00276A  D005               	goto	i1l1461
 27553  00276C  010E               	movlb	14
 27554  00276E  AF50               	btfss	80,7,b	;volatile
 27555  002770  D002               	goto	i1l1461
 27556                           
 27557                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 27558  002772  0E0E               	movlw	14	;volatile
 27559  002774  D7D7               	goto	L51
 27560  002776                     i1l1461:
 27561                           
 27562                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 27563  002776  010D               	movlb	13
 27564  002778  BDF8               	btfsc	248,6,b	;volatile
 27565  00277A  D005               	goto	i1l1463
 27566  00277C  010E               	movlb	14
 27567  00277E  AF60               	btfss	96,7,b	;volatile
 27568  002780  D002               	goto	i1l1463
 27569                           
 27570                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 27571  002782  0E0E               	movlw	14	;volatile
 27572  002784  D7C8               	goto	L52
 27573  002786                     i1l1463:
 27574                           
 27575                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 27576  002786  010D               	movlb	13
 27577  002788  BFF8               	btfsc	248,7,b	;volatile
 27578  00278A  D7BD               	goto	i1l9594
 27579  00278C  010E               	movlb	14
 27580  00278E  AF70               	btfss	112,7,b	;volatile
 27581  002790  D7BA               	goto	i1l9594
 27582                           
 27583                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 27584  002792  0E0E               	movlw	14	;volatile
 27585  002794  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27586  002796  0E70               	movlw	112	;volatile
 27587  002798                     L50:
 27588  002798  6E11               	movwf	ECANReceiveMessage@ptr,c
 27589  00279A  D00A               	goto	i1l9644
 27590  00279C                     i1l1450:
 27591                           
 27592                           ;ECAN.c: 910: else
 27593                           ;ECAN.c: 915: {
 27594                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 27595  00279C  AE74               	btfss	3956,7,c	;volatile
 27596  00279E  D7B3               	goto	i1l9594
 27597                           
 27598                           ;ECAN.c: 919: {
 27599                           ;ECAN.c: 920: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 27600  0027A0  506F               	movf	3951,w,c	;volatile
 27601  0027A2  0B07               	andlw	7
 27602  0027A4  EC2A  F027         	call	__ECANPointBuffer
 27603  0027A8  C001  F011         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 27604  0027AC  C002  F012         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 27605  0027B0                     i1l9644:
 27606                           
 27607                           ;ECAN.c: 932: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 27608  0027B0  C011  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 27609  0027B4  C012  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 27610  0027B8  50DF               	movf	indf2,w,c
 27611  0027BA  0B1F               	andlw	31
 27612  0027BC  6E3E               	movwf	__ECANRxFilterHitInfo,c
 27613                           
 27614                           ;ECAN.c: 934: RXB1IF = 0;
 27615  0027BE  92A4               	bcf	4004,1,c	;volatile
 27616                           
 27617                           ;ECAN.c: 936: if ( RXB1OVFL )
 27618  0027C0  AC74               	btfss	3956,6,c	;volatile
 27619  0027C2  D006               	goto	i1l9654
 27620                           
 27621                           ;ECAN.c: 937: {
 27622                           ;ECAN.c: 938: *msgFlags |= ECAN_RX_OVERFLOW;
 27623  0027C4  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27624  0027C6  6ED9               	movwf	fsr2l,c
 27625  0027C8  6ADA               	clrf	fsr2h,c
 27626  0027CA  0E00               	movlw	0
 27627  0027CC  86DB               	bsf	plusw2,3,c
 27628                           
 27629                           ;ECAN.c: 939: RXB1OVFL = 0;
 27630  0027CE  9C74               	bcf	3956,6,c	;volatile
 27631  0027D0                     i1l9654:
 27632                           
 27633                           ;ECAN.c: 944: savedPtr = ptr;
 27634  0027D0  C011  F00B         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 27635  0027D4  C012  F00C         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 27636                           
 27637                           ;ECAN.c: 945: *msgFlags = 0;
 27638  0027D8  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27639  0027DA  6ED9               	movwf	fsr2l,c
 27640  0027DC  6ADA               	clrf	fsr2h,c
 27641  0027DE  6ADF               	clrf	indf2,c
 27642                           
 27643                           ;ECAN.c: 948: temp.Val = *(ptr+5);
 27644  0027E0  EE20 F005          	lfsr	2,5
 27645  0027E4  D855               	call	PL106	;call to abstracted procedure
 27646                           
 27647                           ;ECAN.c: 949: *dataLen = temp.Val & 0b00001111;
 27648  0027E6  5009               	movf	ECANReceiveMessage@dataLen,w,c
 27649  0027E8  6ED9               	movwf	fsr2l,c
 27650  0027EA  6ADA               	clrf	fsr2h,c
 27651  0027EC  5010               	movf	ECANReceiveMessage@temp,w,c
 27652  0027EE  0B0F               	andlw	15
 27653  0027F0  6EDF               	movwf	indf2,c
 27654                           
 27655                           ;ECAN.c: 952: if ( temp.bits.b6 )
 27656  0027F2  AC10               	btfss	ECANReceiveMessage@temp,6,c
 27657  0027F4  D005               	goto	i1l1471
 27658                           
 27659                           ;ECAN.c: 953: *msgFlags |= ECAN_RX_RTR_FRAME;
 27660  0027F6  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27661  0027F8  6ED9               	movwf	fsr2l,c
 27662  0027FA  6ADA               	clrf	fsr2h,c
 27663  0027FC  0E00               	movlw	0
 27664  0027FE  8CDB               	bsf	plusw2,6,c
 27665  002800                     i1l1471:
 27666                           
 27667                           ;ECAN.c: 956: temp.Val = *(ptr+2);
 27668  002800  EE20 F002          	lfsr	2,2
 27669  002804  D845               	call	PL106	;call to abstracted procedure
 27670                           
 27671                           ;ECAN.c: 957: if ( temp.bits.b3 )
 27672  002806  A610               	btfss	ECANReceiveMessage@temp,3,c
 27673  002808  D008               	goto	i1l1472
 27674                           
 27675                           ;ECAN.c: 958: {
 27676                           ;ECAN.c: 959: *msgFlags |= ECAN_RX_XTD_FRAME;
 27677  00280A  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27678  00280C  6ED9               	movwf	fsr2l,c
 27679  00280E  6ADA               	clrf	fsr2h,c
 27680  002810  0E00               	movlw	0
 27681  002812  8ADB               	bsf	plusw2,5,c
 27682                           
 27683                           ;ECAN.c: 960: temp.Val = 1;
 27684  002814  0E01               	movlw	1
 27685  002816  6E10               	movwf	ECANReceiveMessage@temp,c
 27686                           
 27687                           ;ECAN.c: 961: }
 27688  002818  D001               	goto	i1l9672
 27689  00281A                     i1l1472:
 27690                           
 27691                           ;ECAN.c: 962: else
 27692                           ;ECAN.c: 963: temp.Val = 0;
 27693  00281A  6A10               	clrf	ECANReceiveMessage@temp,c
 27694  00281C                     i1l9672:
 27695                           
 27696                           ;ECAN.c: 965: _RegsToCANID(ptr+1, id, temp.Val);
 27697  00281C  2811               	incf	ECANReceiveMessage@ptr,w,c
 27698  00281E  6E01               	movwf	?__RegsToCANID,c
 27699  002820  0E00               	movlw	0
 27700  002822  2012               	addwfc	ECANReceiveMessage@ptr+1,w,c
 27701  002824  6E02               	movwf	?__RegsToCANID+1,c
 27702  002826  C00D  F003         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 27703  00282A  C010  F004         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 27704  00282E  EC50  F01B         	call	__RegsToCANID	;wreg free
 27705                           
 27706                           ;ECAN.c: 968: ptr += 6;
 27707  002832  0E06               	movlw	6
 27708  002834  2611               	addwf	ECANReceiveMessage@ptr,f,c
 27709  002836  0E00               	movlw	0
 27710  002838  2212               	addwfc	ECANReceiveMessage@ptr+1,f,c
 27711                           
 27712                           ;ECAN.c: 969: temp.Val = *dataLen;
 27713  00283A  5009               	movf	ECANReceiveMessage@dataLen,w,c
 27714  00283C  6ED9               	movwf	fsr2l,c
 27715  00283E  6ADA               	clrf	fsr2h,c
 27716  002840  50DF               	movf	indf2,w,c
 27717  002842  6E10               	movwf	ECANReceiveMessage@temp,c
 27718                           
 27719                           ;ECAN.c: 970: for ( i = 0; i < temp.Val; i++ )
 27720  002844  6A0E               	clrf	ECANReceiveMessage@i,c
 27721  002846  D00D               	goto	i1l9688
 27722  002848                     i1l9680:
 27723                           
 27724                           ;ECAN.c: 971: *data++ = *ptr++;
 27725  002848  C011  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 27726  00284C  C012  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 27727  002850  5008               	movf	ECANReceiveMessage@data,w,c
 27728  002852  6EE1               	movwf	fsr1l,c
 27729  002854  6AE2               	clrf	fsr1h,c
 27730  002856  CFDF FFE7          	movff	indf2,indf1
 27731  00285A  4A11               	infsnz	ECANReceiveMessage@ptr,f,c
 27732  00285C  2A12               	incf	ECANReceiveMessage@ptr+1,f,c
 27733  00285E  2A08               	incf	ECANReceiveMessage@data,f,c
 27734  002860  2A0E               	incf	ECANReceiveMessage@i,f,c
 27735  002862                     i1l9688:
 27736  002862  5010               	movf	ECANReceiveMessage@temp,w,c
 27737  002864  5C0E               	subwf	ECANReceiveMessage@i,w,c
 27738  002866  E3F0               	bnc	i1l9680
 27739                           
 27740                           ;ECAN.c: 974: if ( IRXIF )
 27741  002868  AEA4               	btfss	4004,7,c	;volatile
 27742  00286A  D006               	goto	i1l9694
 27743                           
 27744                           ;ECAN.c: 975: {
 27745                           ;ECAN.c: 976: *msgFlags |= ECAN_RX_INVALID_MSG;
 27746  00286C  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27747  00286E  6ED9               	movwf	fsr2l,c
 27748  002870  6ADA               	clrf	fsr2h,c
 27749  002872  0E00               	movlw	0
 27750  002874  88DB               	bsf	plusw2,4,c
 27751                           
 27752                           ;ECAN.c: 977: IRXIF = 0;
 27753  002876  9EA4               	bcf	4004,7,c	;volatile
 27754  002878                     i1l9694:
 27755                           
 27756                           ;ECAN.c: 978: }
 27757                           ;ECAN.c: 981: *savedPtr &= 0x7f;
 27758  002878  C00B  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 27759  00287C  C00C  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 27760  002880  0E7F               	movlw	127
 27761  002882  16DF               	andwf	indf2,f,c
 27762                           
 27763                           ;ECAN.c: 985: if ( mode == 0x80 )
 27764  002884  500F               	movf	ECANReceiveMessage@mode,w,c
 27765  002886  0A80               	xorlw	128
 27766  002888  B4D8               	btfsc	status,2,c
 27767                           
 27768                           ;ECAN.c: 986: FIFOEMPTY = 0;
 27769  00288A  9E74               	bcf	3956,7,c	;volatile
 27770                           
 27771                           ;ECAN.c: 992: return TRUE;
 27772  00288C  0E01               	movlw	1
 27773  00288E                     i1l1447:
 27774  00288E  0012               	return	
 27775  002890                     __end_of_ECANReceiveMessage:
 27776                           	opt stack 0
 27777  002890                     PL106:
 27778                           	opt stack 20
 27779  002890  5011               	movf	ECANReceiveMessage@ptr,w,c
 27780  002892  26D9               	addwf	fsr2l,f,c
 27781  002894  5012               	movf	ECANReceiveMessage@ptr+1,w,c
 27782  002896  22DA               	addwfc	fsr2h,f,c
 27783  002898  50DF               	movf	indf2,w,c
 27784  00289A  6E10               	movwf	ECANReceiveMessage@temp,c
 27785  00289C  0012               	return	
 27786  00289E                     __end_ofPL106:
 27787                           	opt stack 0
 27788                           tblptru	equ	0xFF8
 27789                           tblptrh	equ	0xFF7
 27790                           tblptrl	equ	0xFF6
 27791                           tablat	equ	0xFF5
 27792                           prodh	equ	0xFF4
 27793                           prodl	equ	0xFF3
 27794                           intcon	equ	0xFF2
 27795                           indf0	equ	0xFEF
 27796                           postinc0	equ	0xFEE
 27797                           fsr0h	equ	0xFEA
 27798                           fsr0l	equ	0xFE9
 27799                           wreg	equ	0xFE8
 27800                           indf1	equ	0xFE7
 27801                           postinc1	equ	0xFE6
 27802                           postdec1	equ	0xFE5
 27803                           fsr1h	equ	0xFE2
 27804                           fsr1l	equ	0xFE1
 27805                           bsr	equ	0xFE0
 27806                           indf2	equ	0xFDF
 27807                           postinc2	equ	0xFDE
 27808                           postdec2	equ	0xFDD
 27809                           plusw2	equ	0xFDB
 27810                           fsr2h	equ	0xFDA
 27811                           fsr2l	equ	0xFD9
 27812                           status	equ	0xFD8
 27813                           
 27814 ;; *************** function __RegsToCANID *****************
 27815 ;; Defined at:
 27816 ;;		line 1158 in file "ECAN.c"
 27817 ;; Parameters:    Size  Location     Type
 27818 ;;  ptr             2    0[COMRAM] PTR unsigned char 
 27819 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27820 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27821 ;;  val             1    2[COMRAM] PTR unsigned long 
 27822 ;;		 -> Interrupt@id(4), 
 27823 ;;  type            1    3[COMRAM] unsigned char 
 27824 ;; Auto vars:     Size  Location     Type
 27825 ;;  Value           1    6[COMRAM] PTR struct _CAN_MESSAGE_
 27826 ;;		 -> Interrupt@id(4), 
 27827 ;; Return value:  Size  Location     Type
 27828 ;;		None               void
 27829 ;; Registers used:
 27830 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27831 ;; Tracked objects:
 27832 ;;		On entry : 0/0
 27833 ;;		On exit  : 0/0
 27834 ;;		Unchanged: 0/0
 27835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27836 ;;      Params:         4       0       0       0       0       0       0
 27837 ;;      Locals:         1       0       0       0       0       0       0
 27838 ;;      Temps:          2       0       0       0       0       0       0
 27839 ;;      Totals:         7       0       0       0       0       0       0
 27840 ;;Total ram usage:        7 bytes
 27841 ;; Hardware stack levels used:    1
 27842 ;; This function calls:
 27843 ;;		Nothing
 27844 ;; This function is called by:
 27845 ;;		_ECANReceiveMessage
 27846 ;; This function uses a non-reentrant model
 27847 ;;
 27848                           
 27849                           	psect	text85
 27850  0036A0                     __ptext85:
 27851                           	opt stack 0
 27852  0036A0                     __RegsToCANID:
 27853                           	opt stack 20
 27854                           
 27855                           ;ECAN.c: 1159: CAN_MESSAGE_ID *Value;
 27856                           ;ECAN.c: 1161: Value = (CAN_MESSAGE_ID*)val;
 27857                           
 27858                           ;incstack = 0
 27859                           ;incstack = 0
 27860  0036A0  C003  F007         	movff	__RegsToCANID@val,__RegsToCANID@Value
 27861                           
 27862                           ;ECAN.c: 1163: if ( type == 0 )
 27863  0036A4  6604               	tstfsz	__RegsToCANID@type,c
 27864  0036A6  D02B               	goto	i1l9344
 27865                           
 27866                           ;ECAN.c: 1164: {
 27867                           ;ECAN.c: 1166: Value->BYTES.BYTE_1 = (*ptr << 3);
 27868  0036A8  5007               	movf	__RegsToCANID@Value,w,c
 27869  0036AA  6ED9               	movwf	fsr2l,c
 27870  0036AC  D862               	call	PL70	;call to abstracted procedure
 27871  0036AE  3605               	rlcf	??__RegsToCANID,f,c
 27872  0036B0  90D8               	bcf	status,0,c
 27873  0036B2  3605               	rlcf	??__RegsToCANID,f,c
 27874  0036B4  90D8               	bcf	status,0,c
 27875  0036B6  3405               	rlcf	??__RegsToCANID,w,c
 27876  0036B8  6EDF               	movwf	indf2,c
 27877                           
 27878                           ;ECAN.c: 1167: Value->BYTES.BYTE_2 = *ptr >> 5;
 27879  0036BA  5007               	movf	__RegsToCANID@Value,w,c
 27880  0036BC  6ED9               	movwf	fsr2l,c
 27881  0036BE  6ADA               	clrf	fsr2h,c
 27882  0036C0  2AD9               	incf	fsr2l,f,c
 27883  0036C2  6ADA               	clrf	fsr2h,c
 27884  0036C4  D873               	call	PL84	;call to abstracted procedure
 27885  0036C6                     i1u1092_25:
 27886  0036C6  90D8               	bcf	status,0,c
 27887  0036C8  3205               	rrcf	??__RegsToCANID,f,c
 27888  0036CA  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 27889  0036CC  D7FC               	goto	i1u1092_25
 27890  0036CE  5005               	movf	??__RegsToCANID,w,c
 27891                           
 27892                           ;ECAN.c: 1168: ptr++;
 27893                           
 27894                           ;ECAN.c: 1169: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 27895  0036D0  D859               	call	PL72	;call to abstracted procedure
 27896  0036D2  0E05               	movlw	5
 27897  0036D4  6E06               	movwf	(??__RegsToCANID+1)& (0+255),c
 27898  0036D6                     i1u1093_25:
 27899  0036D6  90D8               	bcf	status,0,c
 27900  0036D8  3205               	rrcf	??__RegsToCANID,f,c
 27901  0036DA  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 27902  0036DC  D7FC               	goto	i1u1093_25
 27903  0036DE  5007               	movf	__RegsToCANID@Value,w,c
 27904  0036E0  6ED9               	movwf	fsr2l,c
 27905  0036E2  6ADA               	clrf	fsr2h,c
 27906  0036E4  5005               	movf	??__RegsToCANID,w,c
 27907  0036E6  12DF               	iorwf	indf2,f,c
 27908                           
 27909                           ;ECAN.c: 1170: Value->BYTES.BYTE_3 = 0x00;
 27910  0036E8  D83D               	call	PL40	;call to abstracted procedure
 27911  0036EA  6ADF               	clrf	indf2,c
 27912                           
 27913                           ;ECAN.c: 1171: Value->BYTES.BYTE_4 = 0x00;
 27914  0036EC  5007               	movf	__RegsToCANID@Value,w,c
 27915  0036EE  6ED9               	movwf	fsr2l,c
 27916  0036F0  6ADA               	clrf	fsr2h,c
 27917  0036F2  0E03               	movlw	3
 27918  0036F4  26D9               	addwf	fsr2l,f,c
 27919  0036F6  6ADA               	clrf	fsr2h,c
 27920  0036F8  0E00               	movlw	0
 27921  0036FA  6EDF               	movwf	indf2,c
 27922                           
 27923                           ;ECAN.c: 1172: }
 27924  0036FC  D032               	goto	i1l1494
 27925  0036FE                     i1l9344:
 27926                           
 27927                           ;ECAN.c: 1173: else
 27928                           ;ECAN.c: 1174: {
 27929                           ;ECAN.c: 1176: Value->BYTES.BYTE_3 = (*ptr << 5);
 27930  0036FE  D832               	call	PL40	;call to abstracted procedure
 27931  003700  D855               	call	PL84	;call to abstracted procedure
 27932  003702                     i1u1094_25:
 27933  003702  90D8               	bcf	status,0,c
 27934  003704  3605               	rlcf	??__RegsToCANID,f,c
 27935  003706  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 27936  003708  D7FC               	goto	i1u1094_25
 27937  00370A  5005               	movf	??__RegsToCANID,w,c
 27938  00370C  6EDF               	movwf	indf2,c
 27939                           
 27940                           ;ECAN.c: 1177: Value->BYTES.BYTE_4 = (*ptr >> 3);
 27941  00370E  5007               	movf	__RegsToCANID@Value,w,c
 27942  003710  6ED9               	movwf	fsr2l,c
 27943  003712  6ADA               	clrf	fsr2h,c
 27944  003714  0E03               	movlw	3
 27945  003716  26D9               	addwf	fsr2l,f,c
 27946  003718  D82C               	call	PL70	;call to abstracted procedure
 27947  00371A  3205               	rrcf	??__RegsToCANID,f,c
 27948  00371C  90D8               	bcf	status,0,c
 27949  00371E  3205               	rrcf	??__RegsToCANID,f,c
 27950  003720  90D8               	bcf	status,0,c
 27951  003722  3005               	rrcf	??__RegsToCANID,w,c
 27952                           
 27953                           ;ECAN.c: 1178: ptr++;
 27954                           
 27955                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 27956  003724  D82F               	call	PL72	;call to abstracted procedure
 27957  003726  0E03               	movlw	3
 27958  003728  1605               	andwf	??__RegsToCANID,f,c
 27959  00372A  D81C               	call	PL40	;call to abstracted procedure
 27960  00372C  5005               	movf	??__RegsToCANID,w,c
 27961  00372E  12DF               	iorwf	indf2,f,c
 27962                           
 27963                           ;ECAN.c: 1181: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 27964  003730  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 27965  003734  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 27966  003738  50DF               	movf	indf2,w,c
 27967  00373A  6E05               	movwf	??__RegsToCANID& (0+255),c
 27968  00373C  90D8               	bcf	status,0,c
 27969  00373E  3205               	rrcf	??__RegsToCANID,f,c
 27970  003740  90D8               	bcf	status,0,c
 27971  003742  3205               	rrcf	??__RegsToCANID,f,c
 27972  003744  90D8               	bcf	status,0,c
 27973  003746  3205               	rrcf	??__RegsToCANID,f,c
 27974  003748  0E1C               	movlw	28
 27975  00374A  1605               	andwf	??__RegsToCANID,f,c
 27976  00374C  D80B               	call	PL40	;call to abstracted procedure
 27977  00374E  5005               	movf	??__RegsToCANID,w,c
 27978  003750  12DF               	iorwf	indf2,f,c
 27979                           
 27980                           ;ECAN.c: 1182: ptr++;
 27981                           
 27982                           ;ECAN.c: 1183: Value->BYTES.BYTE_2 = *ptr;
 27983  003752  D822               	call	PL80	;call to abstracted procedure
 27984  003754  2AE1               	incf	fsr1l,f,c
 27985  003756  6AE2               	clrf	fsr1h,c
 27986  003758  CFDF FFE7          	movff	indf2,indf1
 27987                           
 27988                           ;ECAN.c: 1184: ptr++;
 27989                           
 27990                           ;ECAN.c: 1185: Value->BYTES.BYTE_1 = *ptr;
 27991  00375C  D81D               	call	PL80	;call to abstracted procedure
 27992  00375E  CFDF FFE7          	movff	indf2,indf1
 27993  003762                     i1l1494:
 27994  003762  0012               	return	
 27995  003764                     __end_of__RegsToCANID:
 27996                           	opt stack 0
 27997  003764                     PL40:
 27998                           	opt stack 20
 27999  003764  5007               	movf	__RegsToCANID@Value,w,c
 28000  003766  6ED9               	movwf	fsr2l,c
 28001  003768  6ADA               	clrf	fsr2h,c
 28002  00376A  0E02               	movlw	2
 28003  00376C  26D9               	addwf	fsr2l,f,c
 28004  00376E  6ADA               	clrf	fsr2h,c
 28005  003770  0012               	return	
 28006  003772                     __end_ofPL40:
 28007                           	opt stack 0
 28008  003772                     PL70:
 28009                           	opt stack 20
 28010  003772  6ADA               	clrf	fsr2h,c
 28011  003774  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 28012  003778  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 28013  00377C  50E7               	movf	indf1,w,c
 28014  00377E  6E05               	movwf	??__RegsToCANID& (0+255),c
 28015  003780  90D8               	bcf	status,0,c
 28016  003782  0012               	return	
 28017  003784                     __end_ofPL70:
 28018                           	opt stack 0
 28019  003784                     PL72:
 28020                           	opt stack 20
 28021  003784  6EDF               	movwf	indf2,c
 28022  003786  4A01               	infsnz	__RegsToCANID@ptr,f,c
 28023  003788  2A02               	incf	__RegsToCANID@ptr+1,f,c
 28024  00378A  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28025  00378E  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28026  003792  50DF               	movf	indf2,w,c
 28027  003794  6E05               	movwf	??__RegsToCANID& (0+255),c
 28028  003796  0012               	return	
 28029  003798                     __end_ofPL72:
 28030                           	opt stack 0
 28031  003798                     PL80:
 28032                           	opt stack 20
 28033  003798  4A01               	infsnz	__RegsToCANID@ptr,f,c
 28034  00379A  2A02               	incf	__RegsToCANID@ptr+1,f,c
 28035  00379C  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28036  0037A0  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28037  0037A4  5007               	movf	__RegsToCANID@Value,w,c
 28038  0037A6  6EE1               	movwf	fsr1l,c
 28039  0037A8  6AE2               	clrf	fsr1h,c
 28040  0037AA  0012               	return	
 28041  0037AC                     __end_ofPL80:
 28042                           	opt stack 0
 28043  0037AC                     PL84:
 28044                           	opt stack 20
 28045  0037AC  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 28046  0037B0  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 28047  0037B4  50E7               	movf	indf1,w,c
 28048  0037B6  6E05               	movwf	??__RegsToCANID& (0+255),c
 28049  0037B8  0E05               	movlw	5
 28050  0037BA  6E06               	movwf	(??__RegsToCANID+1)& (0+255),c
 28051  0037BC  0C05               	retlw	5
 28052  0037BE                     __end_ofPL84:
 28053                           	opt stack 0
 28054                           tblptru	equ	0xFF8
 28055                           tblptrh	equ	0xFF7
 28056                           tblptrl	equ	0xFF6
 28057                           tablat	equ	0xFF5
 28058                           prodh	equ	0xFF4
 28059                           prodl	equ	0xFF3
 28060                           intcon	equ	0xFF2
 28061                           indf0	equ	0xFEF
 28062                           postinc0	equ	0xFEE
 28063                           fsr0h	equ	0xFEA
 28064                           fsr0l	equ	0xFE9
 28065                           wreg	equ	0xFE8
 28066                           indf1	equ	0xFE7
 28067                           postinc1	equ	0xFE6
 28068                           postdec1	equ	0xFE5
 28069                           fsr1h	equ	0xFE2
 28070                           fsr1l	equ	0xFE1
 28071                           bsr	equ	0xFE0
 28072                           indf2	equ	0xFDF
 28073                           postinc2	equ	0xFDE
 28074                           postdec2	equ	0xFDD
 28075                           plusw2	equ	0xFDB
 28076                           fsr2h	equ	0xFDA
 28077                           fsr2l	equ	0xFD9
 28078                           status	equ	0xFD8
 28079                           
 28080 ;; *************** function __ECANPointBuffer *****************
 28081 ;; Defined at:
 28082 ;;		line 1209 in file "ECAN.c"
 28083 ;; Parameters:    Size  Location     Type
 28084 ;;  b               1    wreg     unsigned char 
 28085 ;; Auto vars:     Size  Location     Type
 28086 ;;  b               1    3[COMRAM] unsigned char 
 28087 ;;  pt              2    4[COMRAM] PTR unsigned char 
 28088 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28089 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28090 ;; Return value:  Size  Location     Type
 28091 ;;                  2    0[COMRAM] PTR unsigned char 
 28092 ;; Registers used:
 28093 ;;		wreg, status,2, status,0
 28094 ;; Tracked objects:
 28095 ;;		On entry : 0/0
 28096 ;;		On exit  : 0/0
 28097 ;;		Unchanged: 0/0
 28098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28099 ;;      Params:         3       0       0       0       0       0       0
 28100 ;;      Locals:         3       0       0       0       0       0       0
 28101 ;;      Temps:          0       0       0       0       0       0       0
 28102 ;;      Totals:         6       0       0       0       0       0       0
 28103 ;;Total ram usage:        6 bytes
 28104 ;; Hardware stack levels used:    1
 28105 ;; This function calls:
 28106 ;;		Nothing
 28107 ;; This function is called by:
 28108 ;;		_ECANReceiveMessage
 28109 ;; This function uses a non-reentrant model
 28110 ;;
 28111                           
 28112                           	psect	text86
 28113  004E54                     __ptext86:
 28114                           	opt stack 0
 28115  004E54                     __ECANPointBuffer:
 28116                           	opt stack 20
 28117                           
 28118                           ;incstack = 0
 28119                           ;incstack = 0
 28120                           ;__ECANPointBuffer@b stored from wreg
 28121  004E54  CFE8 F004          	movff	wreg,__ECANPointBuffer@b
 28122                           
 28123                           ;ECAN.c: 1210: BYTE* pt;
 28124                           ;ECAN.c: 1212: switch(b)
 28125  004E58  D024               	goto	i1l9330
 28126  004E5A                     i1l9312:
 28127                           
 28128                           ;ECAN.c: 1215: pt=(BYTE*)&RXB0CON;
 28129  004E5A  0E0F               	movlw	15	;volatile
 28130  004E5C  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28131  004E5E  0E60               	movlw	96	;volatile
 28132  004E60  D01E               	goto	L59
 28133  004E62                     i1l9314:
 28134                           
 28135                           ;ECAN.c: 1218: pt=(BYTE*)&RXB1CON;
 28136  004E62  010F               	movlb	15	; () banked
 28137  004E64  0E0F               	movlw	15	;volatile
 28138  004E66  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28139  004E68  0E50               	movlw	80	;volatile
 28140  004E6A  D019               	goto	L59
 28141  004E6C                     i1l9316:
 28142                           
 28143                           ;ECAN.c: 1221: pt=(BYTE*)&B0CON;
 28144  004E6C  010E               	movlb	14	; () banked
 28145  004E6E  0E0E               	movlw	14	;volatile
 28146  004E70  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28147  004E72  0E20               	movlw	32	;volatile
 28148  004E74  D014               	goto	L59
 28149  004E76                     i1l9318:
 28150                           
 28151                           ;ECAN.c: 1224: pt=(BYTE*)&B1CON;
 28152  004E76  010E               	movlb	14	; () banked
 28153  004E78  0E0E               	movlw	14	;volatile
 28154  004E7A  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28155  004E7C  0E30               	movlw	48	;volatile
 28156  004E7E  D00F               	goto	L59
 28157  004E80                     i1l9320:
 28158                           
 28159                           ;ECAN.c: 1227: pt=(BYTE*)&B2CON;
 28160  004E80  010E               	movlb	14	; () banked
 28161  004E82  0E0E               	movlw	14	;volatile
 28162  004E84  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28163  004E86  0E40               	movlw	64	;volatile
 28164  004E88  D00A               	goto	L59
 28165  004E8A                     i1l9322:
 28166                           
 28167                           ;ECAN.c: 1230: pt=(BYTE*)&B3CON;
 28168  004E8A  010E               	movlb	14	; () banked
 28169  004E8C  0E0E               	movlw	14	;volatile
 28170  004E8E  D7EB               	goto	L60
 28171  004E90                     i1l9324:
 28172                           
 28173                           ;ECAN.c: 1233: pt=(BYTE*)&B4CON;
 28174  004E90  010E               	movlb	14	; () banked
 28175  004E92  0E0E               	movlw	14	;volatile
 28176  004E94  D7E3               	goto	L61
 28177  004E96                     i1l9326:
 28178                           
 28179                           ;ECAN.c: 1236: pt=(BYTE*)&B5CON;
 28180  004E96  010E               	movlb	14	; () banked
 28181  004E98  0E0E               	movlw	14	;volatile
 28182  004E9A  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28183  004E9C  0E70               	movlw	112	;volatile
 28184  004E9E                     L59:
 28185  004E9E  6E05               	movwf	__ECANPointBuffer@pt,c
 28186                           
 28187                           ;ECAN.c: 1237: break;
 28188  004EA0  D00F               	goto	i1l1499
 28189  004EA2                     i1l9330:
 28190  004EA2  5004               	movf	__ECANPointBuffer@b,w,c
 28191                           
 28192                           ; Switch size 1, requested type "space"
 28193                           ; Number of cases is 7, Range of values is 0 to 6
 28194                           ; switch strategies available:
 28195                           ; Name         Instructions Cycles
 28196                           ; simple_byte           22    12 (average)
 28197                           ;	Chosen strategy is simple_byte
 28198  004EA4  E0DA               	bz	i1l9312
 28199  004EA6  0A01               	xorlw	1	; case 1
 28200  004EA8  E0DC               	bz	i1l9314
 28201  004EAA  0A03               	xorlw	3	; case 2
 28202  004EAC  E0DF               	bz	i1l9316
 28203  004EAE  0A01               	xorlw	1	; case 3
 28204  004EB0  E0E2               	bz	i1l9318
 28205  004EB2  0A07               	xorlw	7	; case 4
 28206  004EB4  E0E5               	bz	i1l9320
 28207  004EB6  0A01               	xorlw	1	; case 5
 28208  004EB8  E0E8               	bz	i1l9322
 28209  004EBA  0A03               	xorlw	3	; case 6
 28210  004EBC  E0E9               	bz	i1l9324
 28211  004EBE  D7EB               	goto	i1l9326
 28212  004EC0                     i1l1499:
 28213                           
 28214                           ;ECAN.c: 1239: return (pt);
 28215  004EC0  C005  F001         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 28216  004EC4  C006  F002         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 28217  004EC8  0012               	return	
 28218  004ECA                     __end_of__ECANPointBuffer:
 28219                           	opt stack 0
 28220                           tblptru	equ	0xFF8
 28221                           tblptrh	equ	0xFF7
 28222                           tblptrl	equ	0xFF6
 28223                           tablat	equ	0xFF5
 28224                           prodh	equ	0xFF4
 28225                           prodl	equ	0xFF3
 28226                           intcon	equ	0xFF2
 28227                           indf0	equ	0xFEF
 28228                           postinc0	equ	0xFEE
 28229                           fsr0h	equ	0xFEA
 28230                           fsr0l	equ	0xFE9
 28231                           wreg	equ	0xFE8
 28232                           indf1	equ	0xFE7
 28233                           postinc1	equ	0xFE6
 28234                           postdec1	equ	0xFE5
 28235                           fsr1h	equ	0xFE2
 28236                           fsr1l	equ	0xFE1
 28237                           bsr	equ	0xFE0
 28238                           indf2	equ	0xFDF
 28239                           postinc2	equ	0xFDE
 28240                           postdec2	equ	0xFDD
 28241                           plusw2	equ	0xFDB
 28242                           fsr2h	equ	0xFDA
 28243                           fsr2l	equ	0xFD9
 28244                           status	equ	0xFD8
 28245                           
 28246 ;; *************** function _fifo_write *****************
 28247 ;; Defined at:
 28248 ;;		line 61 in file "fifo.c"
 28249 ;; Parameters:    Size  Location     Type
 28250 ;;  f               1    wreg     PTR struct .
 28251 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 28252 ;;  buf             1    0[COMRAM] PTR const void 
 28253 ;;		 -> Interrupt@dlc(1), Interrupt@data(8), Interrupt@id(4), Interrupt@c(1), 
 28254 ;;  nbytes          4    1[COMRAM] unsigned long 
 28255 ;; Auto vars:     Size  Location     Type
 28256 ;;  f               1   14[COMRAM] PTR struct .
 28257 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 28258 ;;  i               4   10[COMRAM] unsigned long 
 28259 ;;  p               1    9[COMRAM] PTR const unsigned char 
 28260 ;;		 -> Interrupt@dlc(1), Interrupt@data(8), Interrupt@id(4), Interrupt@c(1), 
 28261 ;; Return value:  Size  Location     Type
 28262 ;;                  2    0[COMRAM] unsigned short 
 28263 ;; Registers used:
 28264 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28265 ;; Tracked objects:
 28266 ;;		On entry : 0/0
 28267 ;;		On exit  : 0/0
 28268 ;;		Unchanged: 0/0
 28269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28270 ;;      Params:         5       0       0       0       0       0       0
 28271 ;;      Locals:         6       0       0       0       0       0       0
 28272 ;;      Temps:          4       0       0       0       0       0       0
 28273 ;;      Totals:        15       0       0       0       0       0       0
 28274 ;;Total ram usage:       15 bytes
 28275 ;; Hardware stack levels used:    1
 28276 ;; This function calls:
 28277 ;;		Nothing
 28278 ;; This function is called by:
 28279 ;;		_Interrupt
 28280 ;; This function uses a non-reentrant model
 28281 ;;
 28282                           
 28283                           	psect	text87
 28284  0037BE                     __ptext87:
 28285                           	opt stack 0
 28286  0037BE                     _fifo_write:
 28287                           	opt stack 21
 28288                           
 28289                           ;incstack = 0
 28290                           ;incstack = 0
 28291                           ;fifo_write@f stored from wreg
 28292  0037BE  CFE8 F00F          	movff	wreg,fifo_write@f
 28293                           
 28294                           ;fifo.c: 62: uint32_t i;
 28295                           ;fifo.c: 63: const uint8_t *p;
 28296                           ;fifo.c: 64: p = buf;
 28297  0037C2  C001  F00A         	movff	fifo_write@buf,fifo_write@p
 28298                           
 28299                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 28300  0037C6  6A0B               	clrf	fifo_write@i,c
 28301  0037C8  6A0C               	clrf	fifo_write@i+1,c
 28302  0037CA  6A0D               	clrf	fifo_write@i+2,c
 28303  0037CC  6A0E               	clrf	fifo_write@i+3,c
 28304  0037CE  D052               	goto	i1l6324
 28305  0037D0                     i1l6304:
 28306                           
 28307                           ;fifo.c: 69: if ((f->head + 1 == f->tail) ||
 28308                           ;fifo.c: 70: ((f->head + 1 == f->size) && (f->tail == 0))) {
 28309  0037D0  500F               	movf	fifo_write@f,w,c
 28310  0037D2  6ED9               	movwf	fsr2l,c
 28311  0037D4  6ADA               	clrf	fsr2h,c
 28312  0037D6  0E04               	movlw	4
 28313  0037D8  D85B               	call	PL16	;call to abstracted procedure
 28314  0037DA  E102               	bnz	i1u610_25
 28315  0037DC  5006               	movf	??_fifo_write,w,c
 28316  0037DE  1808               	xorwf	??_fifo_write+2,w,c
 28317  0037E0                     i1u610_25:
 28318  0037E0  E012               	bz	i1l1526
 28319  0037E2  500F               	movf	fifo_write@f,w,c
 28320  0037E4  6ED9               	movwf	fsr2l,c
 28321  0037E6  6ADA               	clrf	fsr2h,c
 28322  0037E8  0E06               	movlw	6
 28323  0037EA  D852               	call	PL16	;call to abstracted procedure
 28324  0037EC  E102               	bnz	i1u611_25
 28325  0037EE  5006               	movf	??_fifo_write,w,c
 28326  0037F0  1808               	xorwf	??_fifo_write+2,w,c
 28327  0037F2                     i1u611_25:
 28328  0037F2  E10E               	bnz	i1l6312
 28329  0037F4  500F               	movf	fifo_write@f,w,c
 28330  0037F6  6ED9               	movwf	fsr2l,c
 28331  0037F8  6ADA               	clrf	fsr2h,c
 28332  0037FA  0E04               	movlw	4
 28333  0037FC  26D9               	addwf	fsr2l,f,c
 28334  0037FE  6ADA               	clrf	fsr2h,c
 28335  003800  50DE               	movf	postinc2,w,c
 28336  003802  10DD               	iorwf	postdec2,w,c
 28337  003804  E105               	bnz	i1l6312
 28338  003806                     i1l1526:
 28339                           
 28340                           ;fifo.c: 71: return i;
 28341  003806  C00B  F001         	movff	fifo_write@i,?_fifo_write
 28342  00380A  C00C  F002         	movff	fifo_write@i+1,?_fifo_write+1
 28343  00380E  D03F               	goto	i1l1527
 28344  003810                     i1l6312:
 28345                           
 28346                           ;fifo.c: 73: else {
 28347                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 28348  003810  500A               	movf	fifo_write@p,w,c
 28349  003812  6ED9               	movwf	fsr2l,c
 28350  003814  D85A               	call	PL90	;call to abstracted procedure
 28351  003816  CFE6 F006          	movff	postinc1,??_fifo_write
 28352  00381A  CFE5 F007          	movff	postdec1,??_fifo_write+1
 28353  00381E  500F               	movf	fifo_write@f,w,c
 28354  003820  6EE1               	movwf	fsr1l,c
 28355  003822  6AE2               	clrf	fsr1h,c
 28356  003824  CFE6 F008          	movff	postinc1,??_fifo_write+2
 28357  003828  CFE5 F009          	movff	postdec1,??_fifo_write+3
 28358  00382C  5006               	movf	??_fifo_write,w,c
 28359  00382E  2408               	addwf	??_fifo_write+2,w,c
 28360  003830  6EE1               	movwf	fsr1l,c
 28361  003832  5007               	movf	??_fifo_write+1,w,c
 28362  003834  2009               	addwfc	??_fifo_write+3,w,c
 28363  003836  6EE2               	movwf	fsr1h,c
 28364  003838  CFDF FFE7          	movff	indf2,indf1
 28365  00383C  2A0A               	incf	fifo_write@p,f,c
 28366                           
 28367                           ;fifo.c: 75: f->head++;
 28368  00383E  D83E               	call	PL38	;call to abstracted procedure
 28369  003840  2ADE               	incf	postinc2,f,c
 28370  003842  0E00               	movlw	0
 28371  003844  22DD               	addwfc	postdec2,f,c
 28372                           
 28373                           ;fifo.c: 76: if (f->head == f->size) {
 28374  003846  500F               	movf	fifo_write@f,w,c
 28375  003848  6ED9               	movwf	fsr2l,c
 28376  00384A  6ADA               	clrf	fsr2h,c
 28377  00384C  0E06               	movlw	6
 28378  00384E  26D9               	addwf	fsr2l,f,c
 28379  003850  D83C               	call	PL90	;call to abstracted procedure
 28380  003852  52E6               	movf	postinc1,f,c
 28381  003854  52DE               	movf	postinc2,f,c
 28382  003856  50DD               	movf	postdec2,w,c
 28383  003858  18E5               	xorwf	postdec1,w,c
 28384  00385A  CFDF FFE8          	movff	indf2,wreg
 28385  00385E  B4D8               	btfsc	status,2,c
 28386  003860  18E7               	xorwf	indf1,w,c
 28387  003862  E103               	bnz	i1l6322
 28388                           
 28389                           ;fifo.c: 77: f->head = 0;
 28390  003864  D82B               	call	PL38	;call to abstracted procedure
 28391  003866  6ADE               	clrf	postinc2,c
 28392  003868  6ADD               	clrf	postdec2,c
 28393  00386A                     i1l6322:
 28394  00386A  2A0B               	incf	fifo_write@i,f,c
 28395  00386C  0E00               	movlw	0
 28396  00386E  220C               	addwfc	fifo_write@i+1,f,c
 28397  003870  220D               	addwfc	fifo_write@i+2,f,c
 28398  003872  220E               	addwfc	fifo_write@i+3,f,c
 28399  003874                     i1l6324:
 28400  003874  5002               	movf	fifo_write@nbytes,w,c
 28401  003876  5C0B               	subwf	fifo_write@i,w,c
 28402  003878  5003               	movf	fifo_write@nbytes+1,w,c
 28403  00387A  580C               	subwfb	fifo_write@i+1,w,c
 28404  00387C  5004               	movf	fifo_write@nbytes+2,w,c
 28405  00387E  580D               	subwfb	fifo_write@i+2,w,c
 28406  003880  5005               	movf	fifo_write@nbytes+3,w,c
 28407  003882  580E               	subwfb	fifo_write@i+3,w,c
 28408  003884  E3A5               	bnc	i1l6304
 28409                           
 28410                           ;fifo.c: 78: }
 28411                           ;fifo.c: 79: }
 28412                           ;fifo.c: 81: }
 28413                           ;fifo.c: 83: return nbytes;
 28414  003886  C002  F001         	movff	fifo_write@nbytes,?_fifo_write
 28415  00388A  C003  F002         	movff	fifo_write@nbytes+1,?_fifo_write+1
 28416  00388E                     i1l1527:
 28417  00388E  0012               	return	
 28418  003890                     __end_of_fifo_write:
 28419                           	opt stack 0
 28420  003890                     PL16:
 28421                           	opt stack 21
 28422  003890  26D9               	addwf	fsr2l,f,c
 28423  003892  6ADA               	clrf	fsr2h,c
 28424  003894  CFDE F006          	movff	postinc2,??_fifo_write
 28425  003898  CFDD F007          	movff	postdec2,??_fifo_write+1
 28426  00389C  500F               	movf	fifo_write@f,w,c
 28427  00389E  6ED9               	movwf	fsr2l,c
 28428  0038A0  6ADA               	clrf	fsr2h,c
 28429  0038A2  0E02               	movlw	2
 28430  0038A4  26D9               	addwf	fsr2l,f,c
 28431  0038A6  6ADA               	clrf	fsr2h,c
 28432  0038A8  CFDE F008          	movff	postinc2,??_fifo_write+2
 28433  0038AC  CFDD F009          	movff	postdec2,??_fifo_write+3
 28434  0038B0  2A08               	incf	??_fifo_write+2,f,c
 28435  0038B2  0E00               	movlw	0
 28436  0038B4  2209               	addwfc	??_fifo_write+3,f,c
 28437  0038B6  5007               	movf	??_fifo_write+1,w,c
 28438  0038B8  1809               	xorwf	??_fifo_write+3,w,c
 28439  0038BA  0012               	return	
 28440  0038BC                     __end_ofPL16:
 28441                           	opt stack 0
 28442  0038BC                     PL38:
 28443                           	opt stack 21
 28444  0038BC  500F               	movf	fifo_write@f,w,c
 28445  0038BE  6ED9               	movwf	fsr2l,c
 28446  0038C0  6ADA               	clrf	fsr2h,c
 28447  0038C2  0E02               	movlw	2
 28448  0038C4  26D9               	addwf	fsr2l,f,c
 28449  0038C6  6ADA               	clrf	fsr2h,c
 28450  0038C8  0012               	return	
 28451  0038CA                     __end_ofPL38:
 28452                           	opt stack 0
 28453  0038CA                     PL90:
 28454                           	opt stack 21
 28455  0038CA  6ADA               	clrf	fsr2h,c
 28456  0038CC  500F               	movf	fifo_write@f,w,c
 28457  0038CE  6EE1               	movwf	fsr1l,c
 28458  0038D0  6AE2               	clrf	fsr1h,c
 28459  0038D2  0E02               	movlw	2
 28460  0038D4  26E1               	addwf	fsr1l,f,c
 28461  0038D6  6AE2               	clrf	fsr1h,c
 28462  0038D8  0012               	return	
 28463  0038DA                     __end_ofPL90:
 28464                           	opt stack 0
 28465                           tblptru	equ	0xFF8
 28466                           tblptrh	equ	0xFF7
 28467                           tblptrl	equ	0xFF6
 28468                           tablat	equ	0xFF5
 28469                           prodh	equ	0xFF4
 28470                           prodl	equ	0xFF3
 28471                           intcon	equ	0xFF2
 28472                           indf0	equ	0xFEF
 28473                           postinc0	equ	0xFEE
 28474                           fsr0h	equ	0xFEA
 28475                           fsr0l	equ	0xFE9
 28476                           wreg	equ	0xFE8
 28477                           indf1	equ	0xFE7
 28478                           postinc1	equ	0xFE6
 28479                           postdec1	equ	0xFE5
 28480                           fsr1h	equ	0xFE2
 28481                           fsr1l	equ	0xFE1
 28482                           bsr	equ	0xFE0
 28483                           indf2	equ	0xFDF
 28484                           postinc2	equ	0xFDE
 28485                           postdec2	equ	0xFDD
 28486                           plusw2	equ	0xFDB
 28487                           fsr2h	equ	0xFDA
 28488                           fsr2l	equ	0xFD9
 28489                           status	equ	0xFD8
 28490                           
 28491 ;; *************** function _ReadUSART *****************
 28492 ;; Defined at:
 28493 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 28494 ;; Parameters:    Size  Location     Type
 28495 ;;		None
 28496 ;; Auto vars:     Size  Location     Type
 28497 ;;  data            1    0[COMRAM] unsigned char 
 28498 ;; Return value:  Size  Location     Type
 28499 ;;                  1    wreg      unsigned char 
 28500 ;; Registers used:
 28501 ;;		wreg, status,2, status,0
 28502 ;; Tracked objects:
 28503 ;;		On entry : 0/0
 28504 ;;		On exit  : 0/0
 28505 ;;		Unchanged: 0/0
 28506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28507 ;;      Params:         0       0       0       0       0       0       0
 28508 ;;      Locals:         1       0       0       0       0       0       0
 28509 ;;      Temps:          0       0       0       0       0       0       0
 28510 ;;      Totals:         1       0       0       0       0       0       0
 28511 ;;Total ram usage:        1 bytes
 28512 ;; Hardware stack levels used:    1
 28513 ;; This function calls:
 28514 ;;		Nothing
 28515 ;; This function is called by:
 28516 ;;		_Interrupt
 28517 ;; This function uses a non-reentrant model
 28518 ;;
 28519                           
 28520                           	psect	text88
 28521  005724                     __ptext88:
 28522                           	opt stack 0
 28523  005724                     _ReadUSART:
 28524                           	opt stack 21
 28525                           
 28526                           ;incstack = 0
 28527                           ;incstack = 0
 28528  005724  0EF2               	movlw	242
 28529  005726  163D               	andwf	_USART_Status,f,c
 28530  005728  ACAB               	btfss	4011,6,c	;volatile
 28531  00572A  D003               	goto	i1l1833
 28532  00572C  903D               	bcf	_USART_Status,0,c
 28533  00572E  B0AB               	btfsc	4011,0,c	;volatile
 28534  005730  803D               	bsf	_USART_Status,0,c
 28535  005732                     i1l1833:
 28536  005732  B4AB               	btfsc	4011,2,c	;volatile
 28537  005734  843D               	bsf	_USART_Status,2,c
 28538  005736  B2AB               	btfsc	4011,1,c	;volatile
 28539  005738  863D               	bsf	_USART_Status,3,c
 28540  00573A  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 28541  00573E  5001               	movf	ReadUSART@data,w,c
 28542  005740  0012               	return	
 28543  005742                     __end_of_ReadUSART:
 28544                           	opt stack 0
 28545                           tblptru	equ	0xFF8
 28546                           tblptrh	equ	0xFF7
 28547                           tblptrl	equ	0xFF6
 28548                           tablat	equ	0xFF5
 28549                           prodh	equ	0xFF4
 28550                           prodl	equ	0xFF3
 28551                           intcon	equ	0xFF2
 28552                           indf0	equ	0xFEF
 28553                           postinc0	equ	0xFEE
 28554                           fsr0h	equ	0xFEA
 28555                           fsr0l	equ	0xFE9
 28556                           wreg	equ	0xFE8
 28557                           indf1	equ	0xFE7
 28558                           postinc1	equ	0xFE6
 28559                           postdec1	equ	0xFE5
 28560                           fsr1h	equ	0xFE2
 28561                           fsr1l	equ	0xFE1
 28562                           bsr	equ	0xFE0
 28563                           indf2	equ	0xFDF
 28564                           postinc2	equ	0xFDE
 28565                           postdec2	equ	0xFDD
 28566                           plusw2	equ	0xFDB
 28567                           fsr2h	equ	0xFDA
 28568                           fsr2l	equ	0xFD9
 28569                           status	equ	0xFD8
 28570                           tblptru	equ	0xFF8
 28571                           tblptrh	equ	0xFF7
 28572                           tblptrl	equ	0xFF6
 28573                           tablat	equ	0xFF5
 28574                           prodh	equ	0xFF4
 28575                           prodl	equ	0xFF3
 28576                           intcon	equ	0xFF2
 28577                           indf0	equ	0xFEF
 28578                           postinc0	equ	0xFEE
 28579                           fsr0h	equ	0xFEA
 28580                           fsr0l	equ	0xFE9
 28581                           wreg	equ	0xFE8
 28582                           indf1	equ	0xFE7
 28583                           postinc1	equ	0xFE6
 28584                           postdec1	equ	0xFE5
 28585                           fsr1h	equ	0xFE2
 28586                           fsr1l	equ	0xFE1
 28587                           bsr	equ	0xFE0
 28588                           indf2	equ	0xFDF
 28589                           postinc2	equ	0xFDE
 28590                           postdec2	equ	0xFDD
 28591                           plusw2	equ	0xFDB
 28592                           fsr2h	equ	0xFDA
 28593                           fsr2l	equ	0xFD9
 28594                           status	equ	0xFD8
 28595                           
 28596                           	psect	rparam
 28597  0000                     tblptru	equ	0xFF8
 28598                           tblptrh	equ	0xFF7
 28599                           tblptrl	equ	0xFF6
 28600                           tablat	equ	0xFF5
 28601                           prodh	equ	0xFF4
 28602                           prodl	equ	0xFF3
 28603                           intcon	equ	0xFF2
 28604                           indf0	equ	0xFEF
 28605                           postinc0	equ	0xFEE
 28606                           fsr0h	equ	0xFEA
 28607                           fsr0l	equ	0xFE9
 28608                           wreg	equ	0xFE8
 28609                           indf1	equ	0xFE7
 28610                           postinc1	equ	0xFE6
 28611                           postdec1	equ	0xFE5
 28612                           fsr1h	equ	0xFE2
 28613                           fsr1l	equ	0xFE1
 28614                           bsr	equ	0xFE0
 28615                           indf2	equ	0xFDF
 28616                           postinc2	equ	0xFDE
 28617                           postdec2	equ	0xFDD
 28618                           plusw2	equ	0xFDB
 28619                           fsr2h	equ	0xFDA
 28620                           fsr2l	equ	0xFD9
 28621                           status	equ	0xFD8
 28622                           tblptru	equ	0xFF8
 28623                           tblptrh	equ	0xFF7
 28624                           tblptrl	equ	0xFF6
 28625                           tablat	equ	0xFF5
 28626                           prodh	equ	0xFF4
 28627                           prodl	equ	0xFF3
 28628                           intcon	equ	0xFF2
 28629                           indf0	equ	0xFEF
 28630                           postinc0	equ	0xFEE
 28631                           fsr0h	equ	0xFEA
 28632                           fsr0l	equ	0xFE9
 28633                           wreg	equ	0xFE8
 28634                           indf1	equ	0xFE7
 28635                           postinc1	equ	0xFE6
 28636                           postdec1	equ	0xFE5
 28637                           fsr1h	equ	0xFE2
 28638                           fsr1l	equ	0xFE1
 28639                           bsr	equ	0xFE0
 28640                           indf2	equ	0xFDF
 28641                           postinc2	equ	0xFDE
 28642                           postdec2	equ	0xFDD
 28643                           plusw2	equ	0xFDB
 28644                           fsr2h	equ	0xFDA
 28645                           fsr2l	equ	0xFD9
 28646                           status	equ	0xFD8


Data Sizes:
    Strings     4050
    Constant    120
    Data        0
    BSS         1129
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     42      79
    BANK0           160    113     151
    BANK1           256     20     198
    BANK2           256     61     189
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?___llmod	unsigned long  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_read	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?_fifo_getFree	unsigned short  size(2) Largest target is 0

    ?_fifo_write	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), STR_124(CODE[5]), 
		 -> STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), STR_118(CODE[11]), 
		 -> STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), STR_100(CODE[5]), 
		 -> STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), STR_124(CODE[5]), 
		 -> STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), STR_118(CODE[11]), 
		 -> STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), STR_100(CODE[5]), 
		 -> STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_252(CODE[2]), STR_251(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_246(CODE[2]), 
		 -> STR_245(CODE[3]), STR_244(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_262(CODE[3]), STR_261(CODE[23]), STR_260(CODE[10]), STR_259(CODE[10]), 
		 -> STR_258(CODE[12]), STR_257(CODE[8]), STR_256(CODE[7]), STR_255(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_254(CODE[10]), STR_253(CODE[3]), STR_250(CODE[20]), 
		 -> STR_249(CODE[3]), STR_248(CODE[14]), STR_247(CODE[3]), STR_243(CODE[8]), 
		 -> STR_242(CODE[15]), STR_241(CODE[67]), STR_240(CODE[3]), STR_239(CODE[27]), 
		 -> STR_238(CODE[67]), STR_237(CODE[39]), STR_236(CODE[62]), STR_235(CODE[55]), 
		 -> STR_234(CODE[49]), STR_233(CODE[67]), STR_232(CODE[47]), STR_231(CODE[47]), 
		 -> STR_230(CODE[34]), STR_229(CODE[71]), STR_228(CODE[20]), STR_227(CODE[78]), 
		 -> STR_226(CODE[24]), STR_225(CODE[77]), STR_224(CODE[67]), STR_223(CODE[69]), 
		 -> STR_222(CODE[47]), STR_221(CODE[40]), STR_220(CODE[39]), STR_219(CODE[33]), 
		 -> STR_218(CODE[23]), STR_217(CODE[56]), STR_216(CODE[24]), STR_215(CODE[44]), 
		 -> STR_214(CODE[50]), STR_213(CODE[31]), STR_212(CODE[50]), STR_211(CODE[51]), 
		 -> STR_210(CODE[46]), STR_209(CODE[44]), STR_208(CODE[27]), STR_207(CODE[39]), 
		 -> STR_206(CODE[39]), STR_205(CODE[52]), STR_204(CODE[54]), STR_203(CODE[55]), 
		 -> STR_202(CODE[3]), STR_199(CODE[24]), STR_198(CODE[57]), STR_197(CODE[53]), 
		 -> STR_196(CODE[58]), STR_195(CODE[3]), STR_192(CODE[25]), STR_191(CODE[3]), 
		 -> STR_188(CODE[24]), STR_187(CODE[3]), STR_184(CODE[24]), STR_183(CODE[3]), 
		 -> STR_180(CODE[24]), STR_179(CODE[3]), STR_176(CODE[23]), STR_175(CODE[3]), 
		 -> STR_172(CODE[21]), STR_171(CODE[3]), STR_168(CODE[22]), STR_167(CODE[3]), 
		 -> STR_164(CODE[17]), STR_163(CODE[3]), STR_160(CODE[18]), STR_159(CODE[4]), 
		 -> STR_158(CODE[11]), STR_157(CODE[2]), STR_154(CODE[7]), STR_151(CODE[7]), 
		 -> STR_148(CODE[9]), STR_145(CODE[7]), STR_142(CODE[8]), STR_139(CODE[7]), 
		 -> STR_138(CODE[2]), STR_137(CODE[2]), STR_136(CODE[6]), STR_135(CODE[8]), 
		 -> STR_134(CODE[8]), STR_133(CODE[20]), STR_132(CODE[27]), STR_131(CODE[6]), 
		 -> STR_130(CODE[33]), STR_127(CODE[26]), STR_125(CODE[32]), STR_123(CODE[28]), 
		 -> STR_119(CODE[6]), STR_117(CODE[40]), STR_115(CODE[44]), STR_112(CODE[6]), 
		 -> STR_111(CODE[39]), STR_109(CODE[36]), STR_107(CODE[37]), STR_105(CODE[40]), 
		 -> STR_103(CODE[37]), STR_102(CODE[50]), STR_99(CODE[6]), STR_98(CODE[41]), 
		 -> STR_96(CODE[38]), STR_94(CODE[39]), STR_92(CODE[42]), STR_90(CODE[39]), 
		 -> STR_89(CODE[66]), STR_86(CODE[6]), STR_85(CODE[3]), STR_82(CODE[20]), 
		 -> STR_80(CODE[33]), STR_79(CODE[35]), STR_78(CODE[24]), STR_76(CODE[33]), 
		 -> STR_74(CODE[24]), STR_71(CODE[54]), STR_70(CODE[6]), STR_69(CODE[3]), 
		 -> STR_64(CODE[34]), STR_63(CODE[3]), STR_60(CODE[4]), wrkbuf(BANK1[80]), 
		 -> STR_55(CODE[15]), STR_53(CODE[33]), STR_51(CODE[24]), STR_48(CODE[6]), 
		 -> STR_46(CODE[6]), STR_44(CODE[6]), STR_42(CODE[6]), STR_40(CODE[18]), 
		 -> STR_39(CODE[6]), STR_37(CODE[33]), STR_36(CODE[6]), STR_28(CODE[24]), 
		 -> STR_27(CODE[18]), STR_26(CODE[20]), STR_25(CODE[25]), STR_24(CODE[22]), 
		 -> STR_23(CODE[19]), STR_22(CODE[20]), STR_21(CODE[20]), STR_19(CODE[6]), 
		 -> STR_17(CODE[6]), STR_15(CODE[6]), STR_13(CODE[6]), STR_11(CODE[6]), 
		 -> STR_9(CODE[6]), STR_7(CODE[31]), STR_5(CODE[29]), STR_4(CODE[55]), 
		 -> STR_3(CODE[35]), STR_2(CODE[53]), STR_1(CODE[37]), 

    sprintf$2151	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_264(CODE[17]), STR_263(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_201(CODE[3]), STR_200(CODE[7]), STR_194(CODE[3]), STR_193(CODE[7]), 
		 -> STR_190(CODE[4]), STR_189(CODE[8]), STR_186(CODE[4]), STR_185(CODE[8]), 
		 -> STR_182(CODE[4]), STR_181(CODE[8]), STR_178(CODE[4]), STR_177(CODE[8]), 
		 -> STR_174(CODE[4]), STR_173(CODE[7]), STR_170(CODE[4]), STR_169(CODE[7]), 
		 -> STR_166(CODE[4]), STR_165(CODE[7]), STR_162(CODE[4]), STR_161(CODE[7]), 
		 -> STR_156(CODE[3]), STR_155(CODE[7]), STR_153(CODE[3]), STR_152(CODE[7]), 
		 -> STR_150(CODE[3]), STR_149(CODE[7]), STR_147(CODE[3]), STR_146(CODE[7]), 
		 -> STR_144(CODE[3]), STR_143(CODE[7]), STR_141(CODE[3]), STR_140(CODE[7]), 
		 -> STR_84(CODE[3]), STR_83(CODE[7]), STR_68(CODE[3]), STR_67(CODE[7]), 
		 -> STR_66(CODE[3]), STR_65(CODE[7]), STR_62(CODE[3]), STR_61(CODE[7]), 
		 -> STR_59(CODE[3]), STR_58(CODE[7]), STR_57(CODE[3]), STR_56(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2131$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(BANK0[1]), sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), 
		 -> receiveSendEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), 
		 -> sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_getFree@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_write@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    fifo_write@buf	PTR const void  size(1) Largest target is 8
		 -> Interrupt@dlc(COMRAM[1]), Interrupt@data(COMRAM[8]), Interrupt@id(COMRAM[4]), Interrupt@c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(1) Largest target is 8
		 -> Interrupt@dlc(COMRAM[1]), Interrupt@data(COMRAM[8]), Interrupt@id(COMRAM[4]), Interrupt@c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_read@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    fifo_read@buf	PTR void  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(BANK1[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(BANK1[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_init@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(BANK0[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 8
		 -> Interrupt@data(COMRAM[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> Interrupt@dlc(COMRAM[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> Interrupt@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveSendMultiEventCANAL@data(BANK0[8]), receiveSendEventCANAL@data(BANK0[8]), vscpData(BANK1[8]), 

    getCANFrame@pdlc	PTR unsigned char  size(2) Largest target is 1
		 -> receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendEventCANAL@dlc(BANK0[1]), vscpSize(BANK1[1]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(2) Largest target is 1
		 -> vscpPriority(BANK1[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(2) Largest target is 2
		 -> vscpClass(BANK1[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(2) Largest target is 1
		 -> vscpType(BANK1[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(2) Largest target is 1
		 -> vscpNodeId(BANK1[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(2) Largest target is 1
		 -> vscpSize(BANK1[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1424	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_201(CODE[3]), STR_200(CODE[7]), 

    printErrors$1415	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_194(CODE[3]), STR_193(CODE[7]), 

    printErrors$1409	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_190(CODE[4]), STR_189(CODE[8]), 

    printErrors$1403	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_186(CODE[4]), STR_185(CODE[8]), 

    printErrors$1397	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_182(CODE[4]), STR_181(CODE[8]), 

    printErrors$1391	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_178(CODE[4]), STR_177(CODE[8]), 

    printStatistics$1384	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_174(CODE[4]), STR_173(CODE[7]), 

    printStatistics$1378	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_170(CODE[4]), STR_169(CODE[7]), 

    printStatistics$1372	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_166(CODE[4]), STR_165(CODE[7]), 

    printStatistics$1366	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_162(CODE[4]), STR_161(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1159(BANK2[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value(BANK2[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1298	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_156(CODE[3]), STR_155(CODE[7]), 

    receivePrintEventVerbose$1293	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_153(CODE[3]), STR_152(CODE[7]), 

    receivePrintEventVerbose$1288	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_150(CODE[3]), STR_149(CODE[7]), 

    receivePrintEventVerbose$1283	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_147(CODE[3]), STR_146(CODE[7]), 

    receivePrintEventVerbose$1278	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_144(CODE[3]), STR_143(CODE[7]), 

    receivePrintEventVerbose$1273	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_141(CODE[3]), STR_140(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), receiveSendEventCANAL@crc(BANK0[1]), 
		 -> sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), 
		 -> NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    doModeVerbose@p_1205	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1185	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1176	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_84(CODE[3]), STR_83(CODE[7]), 

    doModeVerbose@preg_1164	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1160	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1151	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_68(CODE[3]), STR_67(CODE[7]), 

    doModeVerbose$1147	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_66(CODE[3]), STR_65(CODE[7]), 

    doModeVerbose$1141	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_62(CODE[3]), STR_61(CODE[7]), 

    doModeVerbose$1136	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_59(CODE[3]), STR_58(CODE[7]), 

    doModeVerbose$1124	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_57(CODE[3]), STR_56(CODE[7]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1112	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    canInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    S21$buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    serialInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID

Critical Paths under _main in BANK0

    _doModeSLCAN->_sendCANFrame
    _hexStringToBytes->_strlen
    _receiveSendEventSLCAN->_ultoa
    _ultoa->___llmod
    _doModeVscp->_receiveVSCPModeCanalMsg
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPModeCapabilities->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _calcCRC->_crc8
    _receiveSendEventCANAL->_getCANFrame
    _receiveSendMultiEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _crc8->_init_crc8
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _printBinary->_WriteUSART
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _strichr->_toupper
    _strnicmp->_strlen
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_writeEEPROM
    _init_app_ram->_readEEPROM

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  103692
                                            106 BANK0      7     2      5
                          _fifo_init
                          _init_crc8
                         _readEEPROM
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0    7534
                                             54 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
                        _writeEEPROM
               _ECANSetOperationMode
                             _memset
              _receiveSendEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5     765
                                              4 BANK0     14     9      5
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     279
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventSLCAN                               10    10      0    3319
                                             35 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8     910
                                             22 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           1     1      0   16070
                                             87 BANK0      1     1      0
                          _fifo_read
               _ECANSetOperationMode
         _receiveSendMultiEventCANAL
              _receiveSendEventCANAL
                            _calcCRC
           _sendVSCPDriverErrorFrame
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
                 _sendVSCPDriverNack
       _receiveVSCPModeMultiCanalMsg
           _sendVSCPModeCapabilities
         _sendVSCPDriverCommandReply
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    1455
                                             15 BANK0      3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPModeCapabilities                             1     1      0    1393
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeMultiCanalMsg                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1331
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    2323
                                             54 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     174
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1331
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1393
                                             15 BANK0      2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     631
                                             12 BANK0      5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventCANAL                               15    15      0    2585
                                             18 BANK0     15    15      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (2) _receiveSendMultiEventCANAL                          17    17      0    2897
                                             18 BANK0     17    17      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     675
                                             12 BANK0      3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     427
                                              7 BANK0      5     2      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     334
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       81    81      0   76457
                                              0 BANK1     20    20      0
                                              0 BANK2     61    61      0
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
                        _writeEEPROM
           _receivePrintEventVerbose
                            _stristr
               _ECANSetOperationMode
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                         _WriteUSART
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           15    11      4    2182
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    3519
                                             86 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     161
                                              1 BANK0      5     5      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    3457
                                             86 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     109
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            5     5      0   19230
                                            101 BANK0      5     5      0
                          _putsUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    3832
                                             95 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    5359
                                             95 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    5164
                                             95 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     143
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    3333
                                             86 BANK0      9     5      4
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    2199
                                             54 BANK0     32    24      8
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    1979
                                             47 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    1886
                                             10 BANK0     37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     693
                                              0 BANK0     10     3      7
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     137
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0      93
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    5402
                                             52 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    5328
                                             52 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     665
                                              6 BANK0      7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4     799
                                             12 BANK0      4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     257
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     257
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     124
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4     898
                                             13 BANK0      4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     257
                                              1 BANK0      4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     260
                                              4 BANK0      9     3      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0      96
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     130
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            18    18      0    6449
                                             52 BANK0     18    18      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        20     8     12     948
                                             18 BANK0     20     8     12
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          5     1      4     601
                                             13 BANK0      5     1      4
                          _fifo_read
 ---------------------------------------------------------------------------------
 (4) _fifo_read                                           13     9      4     446
                                              0 BANK0     13     9      4
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    5087
                                             22 BANK0     30    22      8
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     232
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     232
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     241
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    1480
                                             24 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1146
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6     913
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     232
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     241
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0      93
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2      93
                                              1 BANK0      4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     603
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      62
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     310
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     104
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _vscp_restoreDefaults                                 0     0      0     263
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (2) _init_app_eeprom                                      1     1      0     198
                                              3 BANK0      1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      62
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _init_app_ram                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            5     1      4     186
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                           24    24      0    2582
                                             18 COMRAM    24    24      0
                          _ReadUSART
                         _fifo_write
                 _ECANReceiveMessage
                       _fifo_getFree
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     269
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _fifo_getFree                                       11     9      2     154
                                              0 COMRAM    11     9      2
 ---------------------------------------------------------------------------------
 (10) _ECANReceiveMessage                                 11     8      3    1180
                                              7 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (11) __RegsToCANID                                        7     3      4     489
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (11) __ECANPointBuffer                                    6     3      3      52
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         15    10      5     378
                                              0 COMRAM    15    10      5
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_init
   _init_crc8
   _readEEPROM
   _vscp_restoreDefaults
     _init_app_ram
       _readEEPROM
     _init_app_eeprom
       _writeEEPROM
   _init
     _WriteTimer0
     _init_app_ram
       _readEEPROM
     _OpenUSART
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _doModeVerbose
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _writeEEPROM
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _ECANSetOperationMode
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _strcpy
     _strchr
     _readRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _sprintf
       _isdigit
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
     _WriteUSART
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _setFilter
     __CANIDToRegs
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _receiveSendMultiEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _receiveSendEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeMultiCanalMsg
     _sendVSCPModeCapabilities
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _writeEEPROM
     _ECANSetOperationMode
     _memset
     _receiveSendEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _fifo_read
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   _ECANReceiveMessage
     __ECANPointBuffer
     __RegsToCANID
   _fifo_getFree
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     1EE      16       32.2%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     3D      BD       9       73.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     14      C6       7       77.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     71      97       5       94.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2A      4F       1       83.2%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       E       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     369       3        0.0%
DATA                 0      0     565      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Fri Mar 13 16:46:03 2015

        ??_receiveVSCPModeMultiCanalMsg 0060                   __end_of_doModeVerbose 1500  
                          printBinary@i 0064                             fifo_write@f 000F  
                           fifo_write@i 000B                             fifo_write@p 000A  
                        ??_fifo_getFree 0003                   __end_of_sendVSCPFrame 4618  
            doModeVerbose@filter_nodeid 0290                                      PL2 1500  
                                    PL4 1514                                      PL6 1532  
                                    PL8 1542                                      bsr 000FE0  
                   ___wmul@multiplicand 0062                             __CFG_BORV$3 000000  
                __end_of_doModeVscpNode 57C6                                     PL10 155E  
                                   PL20 2C2E                                     PL12 156C  
                                   PL30 15C6                                     PL22 3BEC  
                                   PL14 1CC2                                     PL40 3764  
                                   PL32 399A                                     PL24 1CF0  
                                   PL16 3890                                     PL50 474A  
                                   PL42 15EC                                     PL34 43C2  
                                   PL26 3288                                     PL18 1CE0  
                                   PL60 163A                                     PL52 39AE  
                                   PL44 1608                                     PL36 15DA  
                                   PL28 15B6                                     PL70 3772  
                                   PL62 1D46                                     PL54 39BE  
                                   PL46 1D16                                     PL38 38BC  
                                   PL80 3798                                     PL72 3784  
                                   PL64 4ADA                                     PL56 1622  
                                   PL48 46AA                                     PL90 38CA  
                                   PL82 3298                                     PL74 3FC0  
                                   PL66 487C                                     PL58 1D30  
                                   PL92 5492                                     PL84 37AC  
                                   PL76 3CEA                                     PL68 1D5C  
                                   PL94 3120                                     PL86 1D6A  
                                   PL78 39D0                                     PL96 449E  
                                   PL88 20F2                                     PL98 4174  
               sendEscapedUartData@pcrc 006C                                     l421 34B6  
                                   l422 34EE                                     l425 3506  
                                   l426 3510                                     l524 14FE  
                                   l428 351C                                     l533 0B3A  
                                   l552 0AFA                                     l529 09CA  
                                   l801 46C6                                     l538 0A52  
                                   l810 470C                                     l804 46D0  
                                   l708 20F0                                     l565 0B90  
                                   l557 0B1A                                     l549 0AF0  
                                   l813 471C                                     l718 1E42  
                                   l807 46EC                                     l831 4630  
                                   l743 202C                                     l920 3598  
                                   l816 4736                                     l840 467C  
                                   l825 461C                                     l834 464C  
                                   l658 2C2C                                     l915 2680  
                                   l923 35A2                                     l771 43F6  
                                   l819 4740                                     l843 4696  
                                   l916 2694                                     l908 25DE  
                                   l756 50CC                                     l764 50FA  
                                   l780 4426                                     l828 4626  
                                   l852 40B6                                     l941 369E  
                                   l837 466C                                     l861 40E6  
                                   l926 35AC                                     l774 4400  
                                   l846 46A0                                     l870 4132  
                                   l759 50D6                                     l951 316C  
                                   l935 368A                                     l783 4446  
                                   l855 40C0                                     l768 511E  
                                   l792 4494                                     l864 4106  
                                   l945 3158                                     l929 35C8  
                                   l777 440A                                     l873 4144  
                                   l970 327C                                     l954 3188  
                                   l938 3694                                     l786 4456  
                                   l858 40CA                                     l867 4116  
                                   l948 3162                                     l876 4160  
                                   l973 3286                                     l789 448A  
                                   l798 46BC                                     l967 3272  
                                   l879 416A                            __CFG_CPB$OFF 000000  
                        getVSCPFrame@id 0082                           fifo_write@buf 0001  
                 ?_vscp_restoreDefaults 0001                    __size_of_WriteTimer0 0012  
                                   _pos 0102          __size_of_writeRegisterExtended 0106  
                                   wreg 000FE8           __end_of_writeRegisterExtended 3AF4  
                                  PL100 1D7C                                    PL110 39E4  
                                  PL102 5624                                    PL112 1D86  
                                  PL104 43E0                                    PL106 2890  
                                  PL108 488A                            __CFG_LVP$OFF 000000  
                          __CFG_WDT$OFF 000000                                    l1001 44B0  
                                  l1010 44E0                                    l1004 44BA  
                                  l1013 454E                                    l1111 52AC  
                                  l1007 44C4                                    l1031 3044  
                                  l1023 2FDA                                    l1016 4558  
                                  l1210 4A84                                    l1050 311E  
                                  l1107 52A0                                    l1220 4E46  
                                  l2012 3BE2                                    l1044 30F6  
                                  l1028 300C                                    l1213 4AA8  
                                  l2013 3BEA                                    l1061 428A  
                                  l1037 3094                                    l1070 3D46  
                                  l1231 2914                                    l1047 3114  
                                  l1064 431E                                    l1240 29A4  
                                  l1073 3DF8                                    l1241 29B6  
                                  l1233 2926                                    l1242 29C8  
                                  l1234 2938                                    l1091 3AF2  
                                  l1243 29DA                                    l1235 294A  
                                  l1260 5592                                    l1172 3E10  
                                  l1244 29EC                                    l1236 295C  
                                  l1245 29FE                                    l1237 296E  
                                  l1166 23D2                                    l1158 233C  
                                  l1246 2A10                                    l1238 2980  
                                  l1247 2A22                                    l1239 2992  
                                  l1256 4BF6                                    l1088 3A3E  
                                  l1248 2A7A                                    l1265 4D66  
                                  l2402 5304                                    l1515 43A0  
                                  l1435 3416                                    l1427 337A  
                                  l2412 5552                                    l1429 3398  
                                  l1550 56DC                                    l1518 43C0  
                                  l2319 4DCC                                    l1711 1AA6  
                                  l1703 1A3E                                    l1623 166E  
                                  l1712 1AAA                                    l1640 175C  
                                  l2329 50AE                                    l2505 4A58  
                                  l1810 5162                                    l1730 1B50  
                                  l1714 1AC6                                    l1803 5140  
                                  l2507 4A4C                                    l1812 517A  
                                  l1820 51D4                                    l1660 17F2  
                                  l2532 5392                                    l2508 4A50  
                                  l1564 4ED4                                    l1572 4F32  
                                  l1709 1A80                                    l2541 551C  
                                  l2453 4FFC                                    l1566 4EDC  
                                  l1807 5154                                    l1639 17AA  
                                  l2455 505C                                    l2551 53D6  
                                  l1591 48CA                                    l1808 5156  
                                  l2288 47D6                                    l1656 17BA  
                                  l1592 4930                                    l1809 5160  
                                  l1489 3998                                    l1770 571E  
                                  l2474 4CEE                                    l1586 54DE  
                                  l1771 5720                                    l1675 18DC  
                                  l1659 17EE                                    l2387 3F9C  
                                  l2493 4F98                                    l2477 4CEA  
                                  l9820 346A                                    l9910 4EE6  
                                  l9912 4EEC                                    l9862 3518  
                                  l9854 3502                                    STR_1 792F  
                                  STR_2 748D                                    STR_3 799D  
                                  l9882 354C                                    l9874 3536  
                                  STR_4 73B5                                    STR_5 7B2A  
                                  l9876 353C                                    STR_6 7FCF  
                                  STR_7 7AEC                                    l9886 3558  
                                  l9878 3542                                    STR_8 7FB6  
                                  STR_9 7F7F                                    _PEIE 007F96  
                        sendCANFrame@id 008F                                    _RCIE 007CED  
                                  _RCIF 007CF5                                    _RCIP 007CFD  
                      ??_ECANInitialize 0061                                    _bDLE 00ED  
                          __CFG_PWRT$ON 000000              __end_of_sendVSCPDriverNack 46AA  
                                  _bHex 0100            doModeVerbose@filter_priority 028E  
                                  _crc8 55CC                                    _caps 00F5  
                                  _atoi 3AF4                                    _main 3418  
                                  _init 530E                                    _mode 00F1  
                                  _itoa 5594                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    indf0 000FEF  
                                  fsr0l 000FE9                                    fsr2h 000FDA  
                                  indf1 000FE7                                    fsr1l 000FE1  
                                  indf2 000FDF                                    fsr2l 000FD9  
                                  _utoa 4758                     i1WriteTimer0@timer0 0001  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 0268                            _sprintf$2151 0086  
                          _sprintf$2144 0082                            _sprintf$2145 0084  
          receiveSendMultiEventCANAL@id 007D                             _writeEEPROM 56C0  
             ECANReceiveMessage@dataLen 0009      __end_of_receiveSendMultiEventCANAL 3288  
            _receiveSendMultiEventCANAL 312E                      doModeVerbose@count 02AB  
                 getVSCPFrame@pPriority 0078                          _caninputBuffer 0400  
                    doModeVerbose@value 02B1                    __end_of_getVSCPFrame 4BF8  
                      __RegsToCANID@val 0003                        __RegsToCANID@ptr 0001  
                  __size_of_getCANFrame 0078                ?_receiveVSCPModeCanalMsg 0001  
                       ?_doModeVscpNode 0001                                   l10012 4E26  
                                 l10004 4E00                                   l10020 4332  
                                 l10110 047A                                   l10016 4E3A  
                                 l10008 4E12                                   l10032 43AA  
                                 l10200 074C                                   l10120 04C4  
                                 l10104 043E                                   l10040 0276  
                                 l10034 43AE                                   l10220 0816  
                                 l10140 0548                                   l10132 0518  
                                 l10124 04E6                                   l10302 0ABC  
                                 l10230 088E                                   l10214 07DA  
                                 l10206 078C                                   l10054 02AC  
                                 l11112 4B40                                   l10400 0D94  
                                 l10224 0852                                   l10208 079E  
                                 l10144 0560                                   l10136 0530  
                                 l10128 0500                                   l10080 0382  
                                 l10072 0342                                   l10064 0304  
                                 l11210 25EE                                   l12010 41FC  
                                 l10402 0DA4                                   l10330 0B5C  
                                 l10162 05FC                                   l10146 0572  
                                 l11124 4B5A                                   l11220 2662  
                                 l11300 569C                                   l12012 4212  
                                 l12004 41AE                                   l10316 0B14  
                                 l10260 0998                                   l10244 08F4  
                                 l10180 0686                                   l10156 05CA  
                                 l11222 2666                                   l11230 2692  
                                 l12102 3926                                   l10414 0E00  
                                 l10430 0E6A                                   l10342 0BAA  
                                 l10350 0BEA                                   l10270 09D2  
                                 l10254 0972                                   l10190 06DE  
                                 l10174 0658                                   l11224 2672  
                                 l11160 2498                                   l11240 4CB2  
                                 l11304 56AC                                   l12016 422E  
                                 l12040 3C8C                                   l12032 3C26  
                                 l10600 1334                                   l10352 0BEE  
                                 l10256 0986                                   l10248 0906  
                                 l10360 0C1E                                   l10192 06E8  
                                 l10184 06A4                                   l10168 062A  
                                 l10096 0400                                   l10088 03C2  
                                 _B0CON 000E20                                   l11242 4CD8  
                                 l12042 3C94                                   l10514 10A0  
                                 l10450 0EE6                                   l10290 0A6C  
                                 l11172 24EC                                   l11148 2446  
                                 l11236 4C7A                                   l11324 2E1C  
                                 l12044 3CAA                                   l11500 3E48  
                                 l10620 13D4                                   l10604 1352  
                                 l10524 10DA                                   l10460 0F20  
                                 l10372 0C80                                   l11254 49D6  
                                 l11422 225A                                   l12070 498E  
                                 l10534 1116                                   l10518 10B0  
                                 l10470 0F5C                                   l10446 0ED6  
                                 l10382 0CFE                                   l10358 0C0C  
                                 l10278 0A1E                                   l10198 073C  
                                 l12142 31B4                                   l11248 5750  
                                 l11184 253E                                   l11264 4A0E  
                                 l11352 2EF0                                   l11408 21F0  
                                 l12048 3CC6                                   l12072 4996  
                                 l10640 148A                                   l10608 1378  
                                 l10544 1150                                   l10528 10EA  
                                 l10480 0F96                                   l10456 0F10  
                                 l10392 0D4E                                   l10384 0D12  
                                 l10376 0C92                                   l12240 367A  
                                 l10800 2C0A                                   l10704 2B00  
                                 l10720 2B1C                                   _B1CON 000E30  
                                 l11610 16C0                                   l11602 168A  
                                 l11274 3AF6                                   l11338 2E86  
                                 l12066 4966                                   l11530 563E  
                                 l12090 2A34                                   l10650 14D2  
                                 l10554 118A                                   l10538 1126  
                                 l10570 120C                                   l10490 0FD0  
                                 l10466 0F4C                                   l12170 3202  
                                 l10730 2B48                                   l10810 2C2A  
                                 l11196 2590                                   l12500 5432  
                                 l11292 3BAA                                   l11284 3B50  
                                 l11276 3AFC                                   l11460 235A  
                                 l11452 232A                                   l11436 22C4  
                                 l11380 211C                                   l12076 49A4  
                                 l11532 5648                                   l10644 14AE  
                                 l10628 1410                                   l10636 144C  
                                 l10548 1160                                   l10476 0F86  
                                 l10396 0D5E                                   l10388 0D22  
                                 l10652 14E0                                   l12180 3222  
                                 l12164 31E4                                   l12236 3662  
                                 l12252 566A                                   l10804 2C1C  
                                 l10732 2B4E                                   l11286 3B68  
                                 l11366 2F5A                                   l11518 3EB2  
                                 l10590 12DC                                   l10582 1298  
                                 l10646 14BC                                   l10566 11F0  
                                 l10558 119A                                   l10486 0FC0  
                                 l10742 2B60                                   l10806 2C22  
                                 l10830 1DCC                                   l11720 18E6  
                                 l12600 4D1A                                   l11288 3B70  
                                 l11472 23AE                                   l11448 2318  
                                 l10568 11FE                                   l10656 14FC  
                                 l12184 3242                                   l12256 5688  
                                 l10752 2B72                                   l10744 2B66  
                                 l10728 2B42                                   l10664 2A94  
                                 l12520 491C                                   l10920 2010  
                                 _B2CON 000E40                                   l11802 1A5C  
                                 l11730 191A                                   l11706 18A6  
                                 l11650 17BE                                   l11642 1796  
                                 l11626 172C                                   l11618 1706  
                                 l11538 502A                                   l11394 2186  
                                 l10498 1034                                   l10770 2B98  
                                 l10682 2AD4                                   l10666 2A98  
                                 l12514 48D8                                   l10930 2044  
                                 l10842 1E18                                   l10834 1DEE  
                                 l11900 1C4A                                   l11732 191E  
                                 l11724 1904                                   l11644 17B0  
                                 l11476 23C0                                   l12700 5186  
                                 l11580 3DF6                                   l12188 3262  
                                 l12460 3058                                   l10908 1FDA  
                                 l10852 1E4C                                   l10836 1DF4  
                                 l11910 1C84                                   l11822 1AD6  
                                 l11662 17F8                                   l11646 17B4  
                                 l11638 1762                                   l12702 518A  
                                 l12534 540E                                   l10782 2BC2  
                                 l10686 2ADA                                   l12630 3EFE  
                                 l10942 20C6                                   l11904 1C64  
                                 l11832 1AF6                                   l11816 1AC0  
                                 l11808 1A84                                   l11760 198E  
                                 l11744 1952                                   l11656 17D6  
                                 l11648 17B8                                   l11592 1678  
                                 l11920 1CAE                                   l12544 5590  
                                 l12704 5198                                   l12528 53F2  
                                 l10776 2BAC                                   l10696 2AF0  
                                 l12640 3F42                                   l12472 30B2  
                                 l10944 20D2                                   l10928 2032  
                                 l10864 1E78                                   l10848 1E3C  
                                 l10936 205C                                   _B3CON 000E50  
                                 l11914 1CA6                                   l11906 1C76  
                                 l11850 1B30                                   l11746 1956  
                                 l11922 1CB4                                   l11682 183E  
                                 l11666 17FE                                   l11674 1822  
                                 l11594 167C                                   l11586 1656  
                                 l12722 3314                                   l12706 51A2  
                                 l11578 3DD6                                   l10794 2BF2  
                                 l10890 1F3E                                   l10874 1E9C  
                                 l10938 20B2                                   l10972 5142  
                                 l10964 5134                                   l11932 5780  
                                 l12900 52E0                                   l11780 19EE  
                                 l11692 1866                                   l11684 184C  
                                 l11668 180A                                   l11596 1680  
                                 l12716 3302                                   l11940 5286  
                                 l10788 2BDA                                   l12468 309E  
                                 l10948 20EE                                   l12662 55B0  
                                 l11870 1B72                                   l11838 1B0A  
                                 l11846 1B26                                   l11790 1A1E  
                                 l11758 198A                                   l11774 19C2  
                                 l11678 1838                                   l11598 1684  
                                 l12750 339A                                   l12734 333E  
                                 l12806 54DC                                   l12920 5536  
                                 l12824 4760                                   l11872 1B78  
                                 l11856 1B38                                   l11784 1A0C  
                                 l11776 19D4                                   l11688 185A  
                                 l11696 186C                                   l12744 337E  
                                 _B4CON 000E60                                   l12834 4798  
                                 l12818 56FE                                   l11890 1C04  
                                 l11882 1B9A                                   l11866 1B60  
                                 l11698 1896                                   l12594 4D14  
                                 l12578 4B90                                   l12498 542C  
                                 l12930 4F36                                   l12770 3408  
                                 l10898 1FB4                                   l12908 52FA  
                                 l12924 5548                                   l12916 552A  
                                 l12860 4D8C                                   l11796 1A42  
                                 l12596 4D16                                   l12940 4F84  
                                 l12756 33C8                                   l12764 33E6  
                                 l12692 42FC                                   l11948 52B6  
                                 l12918 5532                                   l12870 4DBE  
                                 l12862 4D90                                   l12934 4F70  
                                 l12950 550C                                   l12774 340C  
                                 l12694 431C                                   l11990 3AF0  
                                 l12790 54B8                                   l12880 507A  
                                 l11896 1C26                                   l11888 1BAE  
                                 l12944 54EC                                   l12776 340E  
                                 _B5CON 000E70                                   l12858 4D80  
                                 l12882 507E                                   l12938 4F7C  
                                 l12948 5508                                   l12964 53A2  
                                 l12972 535E                                   l11988 3AD0  
                                 l12886 50A0                                   l12878 506E  
                                 l12958 576E                                   l12966 53AA  
                                 l12974 5366                                   l12798 54CA  
                                 l12896 52D4                                   l12898 52DC  
                                 ?_crc8 0067                    __size_of_doModeSLCAN 0362  
                    writeEEPROM@address 0060                                   ?_atoi 0066  
                                 ?_main 00CA                                   ?_init 0001  
                                 ?_itoa 0070                           i1_WriteTimer0 57AA  
                                 _EEADR 000FA9                                   STR_10 7F5D  
                                 STR_11 7F7F                                   STR_12 7F91  
                                 STR_20 7F48                                   STR_13 7F7F  
                                 STR_21 7D82                                   STR_30 7FF4  
                                 STR_14 7ECC                                   STR_22 7D96  
                                 STR_15 7F7F                                   STR_31 7FF4  
                                 STR_23 7DD2                                   STR_32 7FF4  
                                 STR_16 7F4F                                   STR_40 7DF7  
                                 STR_24 7D05                                   STR_17 7F7F  
                                 STR_33 7FF4                                   STR_41 7FCA  
                                 STR_25 7BCE                                   STR_42 7F7F  
                                 STR_50 7F2A                                   STR_34 7FF4  
                                 STR_18 7F0D                                   STR_26 7D6E  
                                 STR_19 7F7F                                   STR_35 7FF4  
                                 STR_43 7FD8                                   STR_27 7DE5  
                                 STR_51 7C30                                   STR_44 7F7F  
                                 STR_36 7F7F                                   STR_52 7F2A  
                                 STR_60 7EE9                                   STR_28 7C48  
                                 STR_61 7F64                                   STR_29 7FEA  
                                 STR_45 7FC5                                   STR_53 7AAB  
                                 STR_37 7A48                                   STR_70 7F7F  
                                 STR_46 7F7F                                   STR_54 7F2A  
                                 STR_62 7FED                                   STR_38 7FE7  
                                 STR_63 748A                                   STR_39 7F7F  
                                 STR_47 7FA2                                   STR_55 7E5D  
                                 STR_71 7422                                   STR_48 7F7F  
                                 STR_72 7FAC                                   STR_56 7F64  
                                 STR_80 7A8A                                   STR_64 7A05  
                                 STR_73 7F2A                                   STR_65 7F64  
                                 STR_57 7FED                                   STR_81 7FBB  
                                 STR_49 7FA7                                   STR_74 7C30  
                                 STR_58 7F64                                   STR_66 7FED  
                                 STR_82 7DAA                                   STR_90 77FA  
                                 STR_75 7F2A                                   STR_91 7FF4  
                                 STR_83 7F64                                   STR_67 7F64  
                                 STR_59 7FED                                   STR_76 7AAB  
                                 STR_84 7FED                                   STR_68 7FED  
                                 STR_92 772F                                   STR_85 748A  
                                 STR_69 748A                                   STR_77 7F2A  
                                 STR_93 7FF4                                   STR_86 7F7F  
                                 STR_78 7C60                                   STR_94 7896  
                                 STR_95 7FF4                                   STR_87 7F56  
                                 STR_79 79C0                                   STR_88 7FF4  
                                 STR_96 78E4                                   STR_97 7FF4  
                                 STR_89 721C                                   STR_98 7759  
                                 STR_99 7F7F            __end_of_printFirmwareVersion 4ADA  
                                 _BSEL0 000DF8                         __end_of___lldiv 4DDE  
                                 ?_utoa 0067                                   u12000 51F6  
                                 u12010 5224                         __end_of_calcCRC 5692  
                                 u12007 51F0                                   _T0CON 000FD5  
                                 u12017 521E                                   u12205 03E6  
                                 u12215 0424                         __end_of___llmod 50C0  
                                 u12225 0462                                   u14010 3B46  
                                 u12235 049E                                   u12165 02E0  
                                 u14030 3B64                                   u12335 0596  
                                 u12175 0328                                   u14017 3B40  
                                 u14105 459E                                   u12425 0770  
                                 u12185 0366                                   u14050 3B94  
                                 u12195 03A6                                   u14060 3BBE  
                                 u14037 3B5E                                   u12445 07C2  
                                 u12455 07FE                                   _LATC1 007C59  
                                 u14320 501A                                   u13520 1F0A  
                                 u14057 3B8E                                   u12465 083A  
                                 u13530 1F14                                   u14067 3BB8  
                                 u12475 0876                                   u14340 5052  
                                 u13540 1F1E                                   u12485 08B2  
                                 u13525 1F08                                   u14327 5014  
                                 u13535 1F12                                   u13545 1F1C  
                                 u16130 544E                                   u14347 504C  
                                 u12755 0DC6                                   u12845 1574  
                                 u15094 5296                                   u15095 5292  
                                 u15335 28B8                                   u12855 1056  
                                 u12775 0E8C                                   u12695 0C42  
                                 u15336 28BE                                   u16137 5448  
                                 u15345 28EC                                   u15337 28CC  
                                 u12945 122E                                   u15346 28F2  
                                 u15347 2900                                   u12955 1274  
                                 u15365 3900                                   u12965 12BA  
                                 u16270 4BE2                                   u15375 3910  
                                 u15385 392E                                   u17137 3478  
                                 u13970 3B10                                   u16450 51CA  
                                 u16275 4BD8                                   u13990 3B28  
                                 u13977 3B0A                                   u16457 51C0  
                                 u13997 3B22                                   u15765 4010  
                       __end_of___lwdiv 530E                                   _ERRIE 007D1D  
                          _vscpPriority 01AF                                   i1l401 0164  
                                 i1l404 0180                                   i1l413 024A  
                                 i1l407 01C8                         __end_of___lwmod 555C  
                                 i1l392 0174                                   i1l387 007C  
                                 i1l389 0176                                   i1l398 0174  
                       sendCANFrame@dlc 0093                                   _MSEL0 000DF0  
                                 _MSEL1 000DF1                                   _MSEL2 000DF2  
                                 _RCREG 000FAE                                   _IRXIF 007D27  
                                 _RCSTA 000FAB                        printBinary@value 0063  
                                 _TMR0H 000FD7                                   _TMR0L 000FD6  
                                 _SPBRG 000FAF                writeRegisterExtended@reg 00B8  
                                 _TXREG 000FAD                                   _TXSTA 000FAC  
                        __CFG_EBTR0$OFF 000000                          __CFG_EBTR1$OFF 000000  
                        __CFG_EBTR2$OFF 000000                          __CFG_EBTR3$OFF 000000  
                                 _bOpen 00EF                 readRegisterExtended@reg 00B8  
                         __CFG_WRTD$OFF 000000                          __CFG_EBTRB$OFF 000000  
                      _hexStringToBytes 4898                                   crc8@m 0069  
                       __end_of_dpowers 700C                         __end_of_isdigit 5706  
                                 _timer 00E9                                   atoi@a 006B  
                                 atoi@s 0066                                   main@c 00D0  
                                 _ultoa 3EEE                              Interrupt@c 0024  
            ??_printNodeFirmwareVersion 00BF                        _printErrors$1403 0098  
                      _printErrors$1415 009C                        _printErrors$1424 009E  
                      _printErrors$1409 009A                        _printErrors$1391 0094  
                                 tablat 000FF5                        _printErrors$1397 0096  
               ??_receiveSendEventCANAL 0072             __end_of_sendEscapedUartData 5120  
                                 plusw2 000FDB                                   utoa@c 006F  
                                 utoa@v 006D                                   status 000FD8  
                       __end_of_sprintf 1CC2                 ??_receiveSendEventSLCAN 0083  
                       __end_of_strichr 551E                         __end_of_strcspn 539C  
                       __end_of_toupper 5772                         __end_of_stristr 4CF0  
                          __end_ofPL100 1D86                            __end_ofPL110 39EE  
                          __end_ofPL102 5634                            __end_ofPL112 1D90  
                          __end_ofPL104 43EE                            __end_ofPL106 289E  
                          __end_ofPL108 4898       __size_of_receivePrintEventVerbose 02C2  
                   doModeVerbose@i_1106 02B0               ?_receivePrintEventVerbose 0001  
                   doModeVerbose@p_1112 02B2                     doModeVerbose@p_1205 02BB  
                   doModeVerbose@p_1160 02B4                     doModeVerbose@p_1185 02B9  
                        WriteUSART@data 0060                    _ECANSetOperationMode 5742  
                          _canInputFifo 0040                         __initialization 4F9A  
                doModeVerbose@page_1157 02A1           receiveSendMultiEventCANAL@dlc 007C  
                          __end_of_crc8 5602           receiveSendMultiEventCANAL@crc 0081  
                          __end_of_atoi 3BEC           receiveSendMultiEventCANAL@pos 0082  
                          __end_of_main 3564                            __end_of_init 5358  
                          __end_of_itoa 55CC                            __end_of_utoa 47F8  
                   doModeVerbose@ifmode 02B6                     doModeVerbose@maskno 02A8  
                   doModeVerbose@nodeid 028C                           doModeSLCAN@id 009D  
                        __CFG_OSC$HSPLL 000000                           doModeSLCAN@rv 00A3  
                     ??_ECANSendMessage 0072                          ?i1_WriteTimer0 0001  
            writeRegisterExtended@value 00BB                                  ??_crc8 006A  
                 getVSCPFrame@pvscptype 0074                                  ??_atoi 0068  
                ??_vscp_restoreDefaults 0064                                  ??_main 00CF  
                     readRegister@value 00B9                                  ??_init 0064  
                                ??_itoa 0076                                  ??_utoa 006D  
                doModeVerbose@mask_type 0292                           __activetblptr 000002  
                       _stateVscpDriver 00F4                       __RegsToCANID@type 0004  
                  _can_transmitOverruns 002B              ECANReceiveMessage@msgFlags 000A  
                         ?_readRegister 00B6               __size_of__ECANPointBuffer 0076  
                                _B0TXEN 006FC2                                  _B1TXEN 006FC3  
                                _B2TXEN 006FC4                  doModeVerbose@preg_1164 0286  
                                _B3TXEN 006FC5                                  _B4TXEN 006FC6  
                                _B5TXEN 006FC7             readRegisterExtended@timeout 00B9  
            ECANReceiveMessage@savedPtr 000B                                  _CANCON 000F6F  
                      ___llmod@dividend 006D                                  STR_100 7FB1  
                                STR_101 7FF4                                  STR_110 7FF4  
                                STR_102 7529                                  STR_103 790A  
                                STR_111 786F                                  STR_112 7F7F  
                                STR_104 7FF4                                  STR_200 7F64  
                                STR_120 7EBA                                  STR_201 7FED  
                                STR_113 7F9D                                  STR_121 7F85  
                                STR_105 77AA                                  STR_202 748A  
                                STR_106 7FF4                                  STR_114 7FDC  
                                STR_122 7EFD                                  STR_130 7A69  
                                STR_210 767D                                  STR_131 7F7F  
                                STR_123 7B47                                  STR_107 7954  
                                STR_115 7703                                  STR_211 74F6  
                                STR_203 7347                                  STR_108 7FF4  
                                STR_140 7F64                                  STR_124 7FC0  
                                STR_116 7F05                                  STR_132 7B7E  
                                STR_220 7821                                  STR_212 755B  
                                STR_204 73EC                                  STR_141 7FED  
                                STR_133 7D5A                                  STR_213 7B0B  
                                STR_125 7ACC                                  STR_109 7979  
                                STR_117 77D2                                  STR_221 7782  
                                STR_205 74C2                                  STR_150 7FED  
                                STR_126 7F97                                  STR_142 7EF5  
                                STR_134 7ED5                                  STR_118 7E86  
                                STR_230 79E3                                  STR_206 7848  
                                STR_222 764E                                  STR_214 758D  
                                STR_207 716F                                  STR_119 7F7F  
                                STR_143 7F6B                                  STR_151 7F3A  
                                STR_135 7EDD                                  STR_127 7BB4  
                                STR_215 76AB                                  STR_231 761F  
                                STR_223 710E                                  STR_240 748A  
                                STR_152 7F64                                  STR_144 7FED  
                                STR_136 7F79                                  STR_128 7EED  
                                STR_160 7E09                                  STR_216 7C00  
                                STR_208 7B63                                  STR_232 75F0  
                                STR_224 71D9                                  STR_241 7153  
                                STR_153 7FED                                  STR_137 7FF2  
                                STR_129 7F8B                                  STR_161 7F72  
                                STR_145 7F33                                  STR_209 76D7  
                                STR_217 730F                                  STR_233 7196  
                                STR_225 707A                                  STR_146 7F64  
                                STR_170 7FE0                                  STR_138 7FF0  
                                STR_162 7FE0                                  STR_154 7F2C  
                                STR_242 7E4E                                  STR_250 7DBE  
                                STR_218 7CC0                                  STR_226 7C18  
                                STR_234 75BF                                  STR_171 748A  
                                STR_163 748A                                  STR_155 7F64  
                                STR_147 7FED                                  STR_251 7FFC  
                                STR_139 7F41                                  STR_243 7EE5  
                                STR_219 7A27                                  STR_235 737E  
                                STR_227 702C                                  STR_156 7FED  
                                STR_244 7FF8                                  STR_252 7FF6  
                                STR_148 7EC3                                  STR_260 7EA6  
                                STR_164 7E3D                                  STR_228 7D46  
                                STR_172 7D31                                  STR_180 7CA8  
                                STR_236 725E                                  STR_253 748A  
                                STR_157 7FF4                                  STR_149 7F64  
                                STR_173 7F72                                  STR_165 7F72  
                                STR_181 7F15                                  STR_245 7FE4  
                                STR_261 7CEE                                  STR_237 78BD  
                                STR_229 70C7                                  _EEDATA 000FA8  
                                STR_262 748A                                  STR_190 7FE0  
                                STR_182 7FE0                                  STR_174 7FE0  
                                STR_166 7FE0                                  STR_246 7FFA  
                                STR_254 7E9C                                  STR_158 7E91  
                                STR_238 7153                                  STR_255 748A  
                                STR_247 748A                                  STR_191 748A  
                                STR_183 748A                                  STR_175 748A  
                                STR_167 748A                                  STR_159 7FD4  
                                STR_263 7E1B                                  STR_239 7B99  
                                STR_256 7F25                                  STR_248 7E6C  
                                STR_264 7E2C                                  STR_168 7D1B  
                                STR_176 7CD7                                  STR_184 7C90  
                                STR_192 7BE7                                  STR_249 748A  
                                STR_193 7F64                                  STR_169 7F72  
                                STR_185 7F15                                  STR_257 7F1D  
                                STR_177 7F15                                  STR_194 7FED  
                                STR_186 7FE0                                  STR_178 7FE0  
                                STR_258 7E7A                                  STR_195 748A  
                                STR_187 748A                                  STR_179 748A  
                                STR_259 7EB0                                  STR_188 7C90  
                                STR_196 729C                                  STR_189 7F15  
                                STR_197 7458                                  STR_198 72D6  
                                STR_199 7C78                                  _EECON2 000FA7  
          __end_of_readRegisterExtended 3DFA                                  _CIOCON 000F73  
                                ?_ultoa 0076            ??_sendVSCPDriverCommandReply 0070  
                  __end_of_fifo_getFree 487C                                  i1l1440 26CE  
                         ?_init_app_ram 0001                                  i1l1450 279C  
                                i1l1451 271C                                  _MDSEL0 007BBE  
                                i1l1461 2776                                  i1l1453 272A  
                                _MDSEL1 007BBF                                  i1l1526 3806  
                                i1l1527 388E                                  i1l1471 2800  
                                i1l1463 2786                                  i1l1455 273E  
                                i1l1447 288E                                  i1l1472 281A  
                                i1l1457 2752                                  i1l1459 2766  
                                i1l1494 3762                                  i1l1833 5732  
                                i1l1499 4EC0                                  i1l6312 3810  
                                i1l6304 37D0                                  i1l6322 386A  
                                i1l6324 3874                                  i1l6336 483A  
                            _OpenTimer0 5706                                  i1l9320 4E80  
                                i1l9312 4E5A                                  i1l9322 4E8A  
                                i1l9314 4E62                                  i1l9330 4EA2  
                                i1l9324 4E90                                  i1l9316 4E6C  
                                i1l9326 4E96                                  i1l9318 4E76  
                                i1l9344 36FE                                  i1l9600 270A  
                                i1l9644 27B0                                  i1l9654 27D0  
                                i1l9680 2848                                  i1l9672 281C  
                                i1l9592 26FC                                  i1l9576 26BC  
                                i1l9586 26E6                                  i1l9594 2706  
                                i1l9694 2878                                  i1l9688 2862  
                       _init_app_eeprom 4AE8                      __size_of_ReadUSART 001E  
                                _RXB0IF 007D20                                  _RXB1IF 007D21  
                                _SPBRGH 000FB0                  ECANReceiveMessage@data 0008  
                ECANReceiveMessage@mode 000F                  ECANReceiveMessage@temp 0010  
                                _RXBnIE 007D19                                  _RXBnIF 007D21  
                     getVSCPFrame@pData 007C              ??_sendVSCPDriverErrorFrame 006F  
                     getVSCPFrame@pSize 007A                      _doModeVerbose$1124 0294  
                    _doModeVerbose$1141 0298                      _doModeVerbose$1151 029C  
                    _doModeVerbose$1136 0296                      _doModeVerbose$1147 029A  
                    _doModeVerbose$1176 029E                   ?_ECANSetOperationMode 0001  
                    __CANIDToRegs@Value 0069                      __size_of_Interrupt 0250  
              readRegisterExtended@page 00B6                      __size_of_OpenUSART 005C  
                      fifo_write@nbytes 0002                          getCANFrame@pid 0071  
                                ___wmul 5602                              _bInitiated 00EE  
                        __CFG_STVREN$ON 000000                               ??___lldiv 0068  
                             ??_calcCRC 006F                                  _cmdbuf 0104  
                             ??___llmod 0075                        OpenTimer0@config 0060  
                receiveSendEventCANAL@i 007A                               ??___lwdiv 0064  
                             ??___lwmod 0064           _receivePrintEventVerbose$1273 0099  
         _receivePrintEventVerbose$1283 009D           _receivePrintEventVerbose$1293 00A1  
         _receivePrintEventVerbose$1278 009B           _receivePrintEventVerbose$1288 009F  
         _receivePrintEventVerbose$1298 00A3                                  _memcpy 53E0  
                                _memset 5692                                  clear_0 4FA2  
                                clear_1 4FB6                                  clear_2 4FC8  
                                clear_3 4FD4                                  clear_4 4FE0  
                                clear_5 4FEC                           ?_sendCANFrame 008F  
                                _strcat 517C                                  _strchr 4FFC  
                                _strcpy 5634                                  _strlen 5422  
                                _wrkbuf 0154                                  _strtok 49C8  
                                _strspn 539C                             Interrupt@id 0026  
   __size_of_sendVSCPDriverCommandReply 00C4                               ??_isdigit 0060  
                receiveSendEventSLCAN@i 008B                        __end_of_printMDF 49C8  
                          __mediumconst 6FB4                          ??_readRegister 00BA  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                            ?_printBinary 0001  
               __size_of_nibbleFromChar 003E                                  ultoa@c 0082  
                                ultoa@v 007E                            ?_printErrors 0001  
                             ??_sprintf 007E                               ??_strichr 0065  
                             ??_strcspn 006A                               ??_toupper 0060  
                        ??_init_app_ram 0063                               ??_stristr 0071  
            ??_sendVSCPModeCapabilities 006F              doModeVerbose@mask_priority 0291  
                      __end_of_strnicmp 4F9A                              __accesstop 0060  
               __end_of__initialization 4FF2                    _printFirmwareVersion 4A5A  
                       writeEEPROM@data 0062                   __size_of_getVSCPFrame 0086  
             receiveSendEventCANAL@data 0072                    doModeVerbose@id_1217 02A3  
                            _WriteUSART 5772                          __pcstackCOMRAM 0001  
              __size_of_printStatistics 01A8                    _printStatistics$1372 0096  
                  _printStatistics$1366 0094                    _printStatistics$1384 009A  
                  _printStatistics$1378 0098                   _uart_transmitOverruns 0033  
                       ??i1_WriteTimer0 0003                           __end_of_ultoa 3FC0  
                            __end_ofPL2 1514                              __end_ofPL4 1532  
                            __end_ofPL6 1542                              __end_ofPL8 155E  
                        ??_sendCANFrame 0096                       __end_of_ReadUSART 5742  
                         ?__RegsToCANID 0001             __size_of_ECANReceiveMessage 01FA  
                    sendVSCPFrame@pData 009C                         readRegister@reg 00B6  
                  sendVSCPDriverAck@crc 006F                      __size_of_findNodes 00F4  
                        doModeSLCAN@dlc 00A1                      __size_of_fifo_init 0030  
                    __size_of_fifo_read 00A2                  getVSCPFrame@pvscpclass 0072  
               __end_of_init_app_eeprom 4B72                       __end_of_Interrupt 0268  
                         ReadUSART@data 0001                      readRegister@nodeid 00BE  
                        _status_led_cnt 0039                      __RegsToCANID@Value 0007  
                            _crc8_table 0300                       __end_of_OpenUSART 517C  
               doModeVerbose@mask_class 028A               printNodeFirmwareVersion@i 00C4  
                       setFilter@filter 006A                            sprintf@width 008B  
      __end_of_printNodeFirmwareVersion 4252                              _doModeVscp 2A7C  
                               ??_ultoa 007E                            _getVSCPFrame 4B72  
                            __pbssBANK0 00D1                              __pbssBANK1 0100  
                            __pbssBANK2 0200                              __pbssBANK3 0300  
                           ?_OpenTimer0 0001                              calcCRC@crc 0070  
                            calcCRC@len 006E                   ?_printFirmwareVersion 0001  
                ??_ECANSetOperationMode 0060                      __size_of_init_crc8 006A  
                         setFilter@eidh 006D                           setFilter@eidl 006E  
                         setFilter@sidh 006B                           setFilter@sidl 006C  
                            _canrxcount 00F0                            ?_writeEEPROM 0060  
                      ??_doModeVscpNode 0060                              _nTimeStamp 00F2  
           ?_receiveSendMultiEventCANAL 0001                __end_of_hexStringToBytes 4932  
              ECANSetOperationMode@mode 0060                                 ?___wmul 0060  
                    __size_of_setFilter 01DE                                 _B0RXFUL 007107  
                               _B1RXFUL 007187                    __ECANRxFilterHitInfo 003E  
                               _B2RXFUL 007207                                 _B3RXFUL 007287  
                               _B4RXFUL 007307                      _sendVSCPDriverNack 4618  
                               _B5RXFUL 007387                        WriteTimer0@timer 0062  
                         putsUSART@data 0061                    _readRegisterExtended 3CFE  
                               ?_memcpy 0060                                 _ECANCON 000F77  
                               ?_memset 0060                           ??_WriteTimer0 0062  
                        ??__RegsToCANID 0005                   sendVSCPFrame@priority 009A  
                               _BRGCON1 000F70                                 _BRGCON2 000F71  
                               _BRGCON3 000F72                                 ?_strcat 0060  
                               ?_strchr 0060                                 ?_strcpy 0060  
                               ?_strlen 0060                                 ?_strtok 006C  
                               ?_strspn 0066                              _cntRxBytes 00D5  
                            _cntTxBytes 00DD                                 i1l13000 00A2  
                               i1l13010 00DA                                 i1l13002 00B2  
                               i1l13012 00E6                                 i1l13004 00B6  
                               i1l13030 0140                                 i1l13022 0116  
                               i1l13006 00C2                                 i1l13040 017E  
                               i1l13024 0122                                 i1l13016 00F8  
                               i1l13008 00D2                                 i1l13050 01D0  
                               i1l13042 0188                                 i1l13034 0152  
                               i1l13018 0104                      __size_of_printGUID 00F0  
                               i1l13052 01D8                                 i1l13044 01A4  
                               i1l13060 0248                                 i1l13036 015C  
                               i1l13028 0134                                 i1l13054 01FC  
                               i1l13046 01AC                                 i1l13038 016C  
                               i1l13056 0244                                 i1l13048 01B4  
                   ?_sendVSCPDriverNack 0001                                 i1l12990 0042  
                               i1l12992 0068                                 i1l12994 0078  
                               i1l12986 0034                                 i1l12996 0084  
                               i1l12988 003C                                 i1l12998 0090  
                            _fifo_write 37BE                      __size_of_printHelp 01C0  
                    __size_of_printMode 0076                   sendVSCPFrame@vscptype 0098  
                 __size_of_fifo_getFree 0084                 doModeVerbose@value_1159 02A9  
                     sendCANFrame@pdata 0094                              _made_table 0037  
                               _RXB0CON 000F60                                 _RXB1CON 000F50  
                               _RXB0FUL 007B07                        __ECANPointBuffer 4E54  
                               _TXB0CON 000F40                                 _TXB1CON 000F30  
                               _TXB2CON 000F20                      __size_of_putsUSART 0058  
    __end_of_sendVSCPDriverCommandReply 4174              _sendVSCPDriverCommandReply 40B0  
                               _RXFCON0 000DD4                                 _RXFCON1 000DD5  
                 _writeRegisterExtended 39EE        __size_of_receiveVSCPModeCanalMsg 00DC  
                __size_of_doModeVerbose 1294                    sendEscapedUartData@c 006E  
                __size_of_sendVSCPFrame 00B6        __end_of_sendVSCPDriverErrorFrame 449E  
                            _readEEPROM 5798          __size_of_receiveSendEventCANAL 013C  
         __end_of_receiveSendEventCANAL 36A0                    ??_sendVSCPDriverNack 006F  
            printFirmwareVersion@wrkbuf 0078          __size_of_receiveSendEventSLCAN 017A  
                       _ECANSendMessage 32AA           __end_of_receiveSendEventSLCAN 3120  
                               __Hparam 0000                       __end_of_findNodes 3EEE  
                               __Lparam 0000                       __end_of_fifo_init 5492  
                     __end_of_fifo_read 43C2                           ??_getCANFrame 0071  
                           ?_WriteUSART 0001              receiveVSCPModeCanalMsg@dlc 00B6  
                  __end_of_readRegister 4320                               ?_printMDF 0001  
                               _bSilent 0101               receiveVSCPModeCanalMsg@id 00B2  
                         ??_doModeSLCAN 0096                                 ___lldiv 4D68  
                       __size_of___wmul 0022                                 _calcCRC 5664  
                       getCANFrame@pdlc 006D                                 ___llmod 505E  
                               ___lwdiv 52C4                               _FIFOEMPTY 007BA7  
                               ___lwmod 551E                   ?_readRegisterExtended 00B6  
           printNodeFirmwareVersion@buf 00C0                    __end_of_init_app_ram 527A  
                          _fifo_getFree 47F8                            init_crc8@crc 0064  
                               __pcinit 4F9A                         __size_of_memcpy 0042  
                       __size_of_memset 002E                                 __ramtop 0600  
                   __size_of_OpenTimer0 001E                               ?_strnicmp 0064  
                               __ptext0 3418                                 __ptext1 57C4  
                               __ptext2 1D90                                 __ptext3 4898  
                               __ptext4 54A2                 receiveSendEventCANAL@id 007B  
                               __ptext5 2FA6                                 __ptext6 3EEE  
                               __ptext7 2A7C                                 __ptext8 40B0  
                               __ptext9 44AC                                 crc8@crc 0067  
         printNodeFirmwareVersion@value 00C3                       ??_printStatistics 0094  
                             _T0CONbits 000FD5                         __size_of_strcat 0058  
                       __size_of_strchr 0062                         __size_of_strcpy 0030  
                       __size_of_strlen 0040                       __end_of_hexpowers 702C  
                       __size_of_strtok 0092                         __size_of_strspn 0044  
                               _dpowers 6FE4                       __end_of_init_crc8 4F34  
                               _isdigit 56E6          printNodeFirmwareVersion@nodeid 00BF  
                   __end_of_WriteTimer0 5798                          _nibbleFromChar 54A2  
                      ?_init_app_eeprom 0001                                 _sprintf 1650  
      __end_of_sendVSCPModeCapabilities 4562                       __end_of_setFilter 2A7C  
                               _strichr 54E0                          doModeVerbose@c 02AC  
                        doModeVerbose@i 02AA                          doModeVerbose@p 02B7  
                               _strcspn 5358                                 _toupper 575C  
                           ?_doModeVscp 0001                                 _stristr 4C78  
                  __size_of_printBinary 004A                    end_of_initialization 4FF2  
                          Interrupt@dlc 0025                       __end_of_octpowers 6FE4  
                  __size_of_printErrors 02D6                                 memcpy@d 0066  
                               memcpy@n 0064                                 memcpy@s 0068  
                ??_printFirmwareVersion 0078                                 itoa@buf 0070  
                             i1u1132_25 26C4                               i1u1132_27 26C6  
                               memset@c 0062                                 itoa@val 0072  
                               memset@n 0064                                 memset@p 0066  
                         __Lmediumconst 6FB4                               i1u1092_25 36C6  
                  __end_of_sendCANFrame 5594                               i1u1093_25 36D6  
                             i1u1094_25 3702                               i1u1700_20 0132  
                             i1u1700_21 0130                               i1u1701_20 0140  
                             i1u1701_21 013E                               i1u1710_20 01D0  
                             i1u1702_20 0150                               i1u1710_21 01CE  
                             i1u1702_21 014E                               i1u1711_20 01D8  
                             i1u1703_20 015C                               i1u1711_21 01D6  
                             i1u1703_21 015A                               i1u1712_20 01FC  
                             i1u1704_20 016C                               i1u1712_21 01FA  
                             i1u1704_21 016A                               i1u1705_20 017E  
                             i1u1705_21 017C                               i1u1706_20 0188  
                             i1u1706_21 0186                               i1u1707_20 01A4  
                             i1u1707_21 01A2                               i1u1708_20 01AC  
                             i1u1708_21 01AA                               i1u1709_20 01B4  
                             i1u1709_21 01B2                               i1u1690_20 003C  
                             i1u1690_21 003A                               i1u1691_20 0068  
                             i1u1691_21 0066                               i1u1692_20 0084  
                             i1u1692_21 0082                               i1u1693_20 00C2  
                             i1u1693_21 00C0                               i1u1694_20 00D2  
                             i1u1694_21 00D0                               i1u1695_20 00E6  
                             i1u1695_21 00E4                               i1u1696_20 00F6  
                             i1u1696_21 00F4                               i1u1697_20 0104  
                             i1u1697_21 0102                               i1u1698_20 0114  
                             i1u1698_21 0112                               i1u1699_20 0122  
                             i1u1699_21 0120                     _can_receiveOverruns 00D1  
               receiveSendEventSLCAN@id 0086                       __end_of_printGUID 3CEA  
                       ___lldiv@divisor 0064                       __end_of_printHelp 2DFE  
                       ___lldiv@counter 006C                       __end_of_printMode 4E54  
                     ECANSendMessage@id 006A                       ECANSendMessage@pb 0073  
          __size_of_sendEscapedUartData 0060                               _RXF10EIDH 000D76  
                             _RXF10EIDL 000D77                               _RXF11EIDH 000D7A  
                             _RXF11EIDL 000D7B                              ??_printMDF 00BF  
                             _RXF12EIDH 000D82                               _RCSTAbits 000FAB  
                             _RXF12EIDL 000D83                               _RXF13EIDH 000D86  
                             _RXF13EIDL 000D87                               _RXF14EIDH 000D8A  
                             _RXF14EIDL 000D8B                               _RXF15EIDH 000D92  
                             _RXF15EIDL 000D93                               _RXF10SIDH 000D74  
                             _RXF10SIDL 000D75                               _RXF11SIDH 000D78  
                             _RXF11SIDL 000D79                               _RXF12SIDH 000D80  
                             _RXF12SIDL 000D81                                 postdec1 000FE5  
                               postdec2 000FDD                               _RXF13SIDH 000D84  
                             _RXF13SIDL 000D85                               _RXF14SIDH 000D88  
                             _RXF14SIDL 000D89                 __size_of_ECANInitialize 0080  
                             _RXF15SIDH 000D90                               _RXF15SIDL 000D91  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                       __end_of_putsUSART 522C  
                    __ECANPointBuffer@b 0004                           _doModeVerbose 026C  
                               utoa@buf 0067       __size_of_printNodeFirmwareVersion 00D0  
                               utoa@val 0069               ?_printNodeFirmwareVersion 0001  
                         _sendVSCPFrame 4562                                 strlen@s 0060  
                            _sequencyno 00F3                              _timekeeper 00E5  
                             _RXM0EXIDM 0078CB                                 strspn@i 006A  
                            ??_strnicmp 006A                     __end_of_getCANFrame 4D68  
                            findNodes@i 00C9                  __end_of_nibbleFromChar 54E0  
                   __end_of_doModeSLCAN 20F2                             ?_fifo_write 0001  
                            fifo_init@f 0064           __size_of_vscp_restoreDefaults 0008  
                            fifo_read@f 006C                              fifo_read@i 006A  
                            fifo_read@p 0068                               _TRISBbits 000F93  
                             _TRISCbits 000F94                  ?_writeRegisterExtended 00B6  
     sendVSCPDriverCommandReply@cmdCode 006F                     __size_of_WriteUSART 0014  
                     readEEPROM@address 0060             sendVSCPModeCapabilities@crc 006F  
               __end_of_ECANSendMessage 3418                    _uart_receiveOverruns 002F  
              _receivePrintEventVerbose 23D4                              _vscpNodeId 01AE  
                         ?__CANIDToRegs 0060                    __end_of__RegsToCANID 3764  
                           ?_readEEPROM 0060                               _TXSTAbits 000FAC  
                    i1WriteTimer0@timer 0003                       doModeVerbose@page 02AD  
                     doModeVerbose@preg 0284                          _init_crc8$2082 0060  
                ??_readRegisterExtended 00BD                          ?_doModeVerbose 0001  
                        ?_sendVSCPFrame 0096                    __size_of_writeEEPROM 0026  
                        __end_of___wmul 5624                     __size_of_doModeVscp 01B2  
                           _WriteTimer0 5786                          __end_of_memcpy 5422  
                        __end_of_memset 56C0       __size_of_sendVSCPDriverErrorFrame 00B0  
             ?_sendVSCPDriverErrorFrame 0001                         ?_nibbleFromChar 0001  
                        __end_of_strcat 51D4                          __end_of_strchr 505E  
                        __end_of_strcpy 5664                          __end_of_strlen 5462  
              doModeVerbose@filter_type 028F                          __end_of_strtok 4A5A  
                        __end_of_strspn 53E0                             __end_ofPL10 156C  
                           __end_ofPL20 2C3E                             __end_ofPL12 15B6  
                           __end_ofPL30 15DA                             __end_ofPL22 3BFA  
                           __end_ofPL14 1CE0                             __end_ofPL40 3772  
                           __end_ofPL32 39AE                             __end_ofPL24 1D16  
                           __end_ofPL16 38BC                             __end_ofPL50 4758  
                           __end_ofPL42 1608                             __end_ofPL34 43E0  
                           __end_ofPL26 3298                             __end_ofPL18 1CF0  
                           __end_ofPL60 1650                             __end_ofPL52 39BE  
                           __end_ofPL44 1622                             __end_ofPL36 15EC  
                           __end_ofPL28 15C6                             __end_ofPL70 3784  
                           __end_ofPL62 1D5C                             __end_ofPL54 39D0  
                           __end_ofPL46 1D30                             __end_ofPL38 38CA  
                           __end_ofPL80 37AC                             __end_ofPL72 3798  
                           __end_ofPL64 4AE8                             __end_ofPL56 163A  
                           __end_ofPL48 46B8                             __end_ofPL90 38DA  
                           __end_ofPL82 32AA                             __end_ofPL74 3FD4  
                           __end_ofPL66 488A                             __end_ofPL58 1D46  
                           __end_ofPL92 54A2                             __end_ofPL84 37BE  
                           __end_ofPL76 3CFE                             __end_ofPL68 1D6A  
                           __end_ofPL94 312E                             __end_ofPL86 1D7C  
                           __end_ofPL78 39E4                             __end_ofPL96 44AC  
                           __end_ofPL88 20FE                             __end_ofPL98 4182  
                   start_initialization 4F9A                               _ReadUSART 5724  
                       findNodes@nFound 00C7                   doModeVerbose@reg_1158 02A2  
                 doModeVerbose@filterno 02A7                 _receiveVSCPModeCanalMsg 3FD4  
                   __CFG_BOREN$BOACTIVE 000000                            doModeSLCAN@c 00A2  
                          ??_OpenTimer0 0060  sendVSCPDriverCommandReply@cmdReplyCode 0070  
                             _Interrupt 0018                          ??__CANIDToRegs 0067  
            readRegisterExtended@nodeid 00C1                               _OpenUSART 5120  
                   sendVSCPFrame@nodeid 0099                         ___llmod@divisor 0071  
                 __size_of_readRegister 00CE                         ___llmod@counter 0075  
                 ECANReceiveMessage@ptr 0011                     __size_of_fifo_write 00D2  
                 __size_of_init_app_ram 004E                          _findNodes$1468 00C5  
              __end_of__ECANPointBuffer 4ECA                       __CANIDToRegs@type 0066  
                            init_crc8@i 0065                              init_crc8@j 0062  
                           _getCANFrame 4CF0                                ??___wmul 0064  
     __size_of_sendVSCPModeCapabilities 00B6                       ?_hexStringToBytes 0064  
                           _doModeSLCAN 1D90               ?_sendVSCPModeCapabilities 0001  
            __end_of_ECANReceiveMessage 2890                                ??_memcpy 0066  
                   readRegister@timeout 00B7                                ??_memset 0066  
                 sendVSCPDriverNack@crc 006F                doModeVerbose@mask_nodeid 0293  
                 __end_ofi1_WriteTimer0 57BC                      ??_hexStringToBytes 0069  
                              ??_strcat 0064                                ??_strchr 0064  
                              ??_strcpy 0064                                ??_strlen 0062  
                    __end_of_OpenTimer0 5724                                ??_strtok 0070  
                              ??_strspn 006A                     __size_of_readEEPROM 0012  
                           __pbssBIGRAM 0400                             __pbssCOMRAM 002B  
                            ?_ReadUSART 0001                           __pcstackBANK0 0060  
                         __pcstackBANK1 01B2                           __pcstackBANK2 0280  
                   __end_of__stringdata 7FFE                            _readRegister 4252  
                 __size_of_sendCANFrame 0038                            _isdigit$2895 0061  
           ?_sendVSCPDriverCommandReply 006F             sendVSCPDriverErrorFrame@crc 0070  
                      ?_ECANSendMessage 006A                       sendVSCPFrame@size 009B  
                          _init_app_ram 522C                              ?_Interrupt 0001  
                            ?_OpenUSART 0060                             sprintf@_val 008D  
                           sprintf@flag 0092                             sprintf@prec 0089  
                             __pnvBANK0 00F5                        _ledFunctionality 003F  
              doModeVerbose@nodeid_1171 02AF                doModeVerbose@nodeid_1156 028D  
                          setFilter@val 0060                        ___lwdiv@dividend 0060  
                       ??_doModeVerbose 01B2           __size_of_ECANSetOperationMode 001A  
                       _printStatistics 2DFE                            ??_WriteUSART 0060  
                       ??_sendVSCPFrame 009E                          _ECANInitialize 4BF8  
                     _sendVSCPDriverAck 46B8                           __pmediumconst 6FB4  
                              ?___lldiv 0060                                ?_calcCRC 006C  
                              ?___llmod 006D                               _findNodes 3DFA  
                              ?___lwdiv 0060                                ?___lwmod 0060  
                             _fifo_init 5462                               _fifo_read 4320  
                    ?_sendVSCPDriverAck 0001                       __size_of_printMDF 0096  
                           __pintcodelo 0018                            _sendCANFrame 555C  
                     WriteTimer0@timer0 0060                             _COMSTATbits 000F74  
                              ?_isdigit 0001               ??_receiveVSCPModeCanalMsg 0096  
                   ??_sendVSCPDriverAck 006F                       __size_of_strnicmp 0066  
                       printGUID@nodeid 00BF                     _sendEscapedUartData 50C0  
                             _hexpowers 700C                        ___lwdiv@quotient 0065  
                             _init_crc8 4ECA                   __size_of__RegsToCANID 00C4  
             doModeVerbose@filter_class 0288                                ?_sprintf 0076  
                              ?_strichr 0061                             _cntRxFrames 00D9  
                          ??_doModeVscp 00B7                                ?_strcspn 0066  
                              ?_toupper 0001                                ?_stristr 006D  
                    __end_of_WriteUSART 5786                          __size_of_ultoa 00D2  
                           _cntTxFrames 00E1                          ___wmul@product 0064  
                sendVSCPFrame@vscpclass 0096                               _setFilter 289E  
                           strnicmp@len 0068                               _octpowers 6FB4  
                              _PIE1bits 000F9D             __size_of_sendVSCPDriverNack 0092  
                __end_of_ECANInitialize 4C78               __end_of_sendVSCPDriverAck 474A  
                              i1u610_25 37E0                                i1u611_25 37F2  
                              i1u615_25 4818                                _PIR1bits 000F9E  
                 _receiveSendEventCANAL 3564                                _PIR2bits 000FA1  
                      ECANSendMessage@i 008C                        ECANSendMessage@j 0087  
                  ?_sendEscapedUartData 006C                   _receiveSendEventSLCAN 2FA6  
                              _RXF0EIDH 000F02                                _RXF0EIDL 000F03  
                              _RXB0OVFL 007BA7                                _RXF1EIDH 000F06  
                              _RXF1EIDL 000F07                                _RXB1OVFL 007BA6  
                              _RXF2EIDH 000F0A                                _RXF2EIDL 000F0B  
                              _RXF3EIDH 000F0E                                _RXF3EIDL 000F0F  
                              _RXF4EIDH 000F12                                _RXF4EIDL 000F13  
                              _RXF5EIDH 000F16                                _RXF5EIDL 000F17  
                              _RXF6EIDH 000D62             receiveSendMultiEventCANAL@i 007B  
                              _RXF6EIDL 000D63                       hexStringToBytes@i 0070  
                              _RXF7EIDH 000D66                                _RXF0SIDH 000F00  
                     hexStringToBytes@p 006E                                _RXF7EIDL 000D67  
                              _RXF0SIDL 000F01                               _printGUID 3BFA  
                              _RXF8EIDH 000D6A                                _RXF1SIDH 000F04  
                              _RXF8EIDL 000D6B                                _RXF1SIDL 000F05  
                              _RXF9EIDH 000D72                                _RXF2SIDH 000F08  
                              _RXF9EIDL 000D73                                _RXF2SIDL 000F09  
                              _RXF3SIDH 000F0C                                _RXF3SIDL 000F0D  
                            printGUID@i 00C4                                _RXF4SIDH 000F10  
                              _RXF4SIDL 000F11                                _RXF5SIDH 000F14  
                              _RXF5SIDL 000F15                                _RXF6SIDH 000D60  
                              _RXF6SIDL 000D61                                _RXM0EIDH 000F1A  
                              _RXF7SIDH 000D64                                _RXM0EIDL 000F1B  
                              _RXF7SIDL 000D65                                _RXM1EIDH 000F1E  
                              _RXF8SIDH 000D68                                _RXM1EIDL 000F1F  
                              _RXF8SIDL 000D69                                _RXF9SIDH 000D70  
                              _RXF9SIDL 000D71                                _RXFBCON0 000DE0  
                              _RXFBCON1 000DE1                                _RXFBCON2 000DE2  
                              _RXFBCON3 000DE3                                _RXFBCON4 000DE4  
                              _RXFBCON5 000DE5                                _RXFBCON6 000DE6  
                              _RXFBCON7 000DE7                              ?_findNodes 0001  
                             _printHelp 2C3E                                _RXM0SIDH 000F18  
                              _RXM0SIDL 000F19                                _RXM1SIDH 000F1C  
                              _RXM1SIDL 000F1D                               _printMode 4DDE  
                            ?_fifo_init 0060                              ?_fifo_read 0060  
                              _RXERRCNT 000F75                      __end_of_doModeVscp 2C2E  
                              _TXERRCNT 000F76                    __end_of__CANIDToRegs 399A  
                             _putsUSART 51D4                             __stringdata 702C  
                     ___wmul@multiplier 0060                            __RegsToCANID 36A0  
                             _vscpClass 01AC                 ??_writeRegisterExtended 00BD  
                          ??_fifo_write 0006                 __size_of_doModeVscpNode 0002  
            ??_receivePrintEventVerbose 0094                             ??_ReadUSART 0001  
                   getVSCPFrame@pNodeId 0076                           ??_printBinary 0061  
                      doModeVerbose@reg 02AE                           ??_printErrors 0094  
                            ?_init_crc8 0001                               _rwtimeout 0103  
             writeRegisterExtended@page 00B6                          Interrupt@flags 002A  
  __end_of_receiveVSCPModeMultiCanalMsg 57C8   __size_of_receiveVSCPModeMultiCanalMsg 0002  
          _receiveVSCPModeMultiCanalMsg 57C6                             ??_Interrupt 0013  
               __end_of_printStatistics 2FA6                             ??_OpenUSART 0062  
          writeRegisterExtended@timeout 00B9                            ??_readEEPROM 0062  
              __size_of_init_app_eeprom 008A                              ?_setFilter 0060  
                       OpenUSART@config 0062                          findNodes@value 00C8  
          __end_of_vscp_restoreDefaults 57C4                              _EECON1bits 000FA6  
         __size_of_printFirmwareVersion 0080         __end_of_receiveVSCPModeCanalMsg 40B0  
                       ?_ECANInitialize 0001                                __Hrparam 0000  
                  ECANReceiveMessage@id 000D                   ??_sendEscapedUartData 006E  
                              __Lrparam 0000                        __CANIDToRegs@val 0062  
                    __end_of_fifo_write 3890                        __CANIDToRegs@ptr 0060  
           receiveVSCPModeCanalMsg@data 00AA                              ?_printGUID 0001  
                           doModeVscp@c 00B7                              ?_printHelp 0001  
                            ?_printMode 0001                         nibbleFromChar@c 0060  
                      ??_nibbleFromChar 0060                        __size_of___lldiv 0076  
                      __size_of_calcCRC 002E                        __size_of___llmod 0062  
                      __size_of___lwdiv 004A                        __size_of___lwmod 003E  
                          ?_WriteTimer0 0060                        getCANFrame@pdata 006F  
                            ?_putsUSART 0061                         fifo_read@nbytes 0062  
                            sprintf@idx 0081                      __end_of_readEEPROM 57AA  
                 hexStringToBytes@inhex 0067                                calcCRC@j 006F  
                              calcCRC@p 006C                              strcat@from 0062  
                      __size_of_isdigit 0020                         ___lwdiv@divisor 0062  
                       ___lwdiv@counter 0064                                __ptext10 57C6  
                              __ptext11 4618                                __ptext20 55CC  
                              __ptext12 3FD4                                __ptext21 4ECA  
                              __ptext13 53E0                                __ptext30 3BFA  
                              __ptext22 026C                                __ptext14 46B8  
                              __ptext31 4182                                __ptext23 289E  
                              __ptext15 43EE                                __ptext40 20FE  
                              __ptext32 517C                                __ptext24 39EE  
                              __ptext16 5664                                __ptext41 2DFE  
                              __ptext33 4252                                __ptext25 527A  
                              __ptext17 3564                                __ptext50 575C  
                              __ptext42 3AF4                                __ptext34 4562  
                              __ptext26 3CFE                                __ptext18 312E  
                              __ptext51 5422                                __ptext43 49C8  
                              __ptext35 555C                                __ptext27 5634  
                              __ptext19 50C0                                __ptext60 56E6  
                              __ptext52 23D4                                __ptext44 5358  
                              __ptext36 32AA                                __ptext28 3DFA  
                              __ptext61 4A5A                                __ptext53 4B72  
                              __ptext45 539C                                __ptext37 38DA  
                              __ptext29 4932                                __ptext70 4BF8  
                              __ptext62 5594                                __ptext54 4CF0  
                              __ptext46 4FFC                                __ptext38 5692  
                              __ptext71 5742                                __ptext63 4758  
                              __ptext55 4320                                __ptext47 4C78  
                              __ptext39 2C3E                                __ptext80 5462  
                              __ptext72 5706                                __ptext64 551E  
                              __ptext56 1650                                __ptext48 54E0  
                              __ptext73 5120                                __ptext65 52C4  
                              __ptext57 5602                                __ptext49 4F34  
                              __ptext82 57AA                                __ptext74 5786  
                              __ptext66 4DDE                                __ptext58 505E  
                              __ptext83 47F8                                __ptext75 57BC  
                              __ptext67 51D4                                __ptext59 4D68  
                              __ptext84 2696                                __ptext76 4AE8  
                              __ptext68 5772                                __ptext85 36A0  
                              __ptext77 56C0                                __ptext69 530E  
                              __ptext86 4E54                                __ptext78 522C  
                              __ptext87 37BE                                __ptext79 5798  
                              __ptext88 5724                receiveSendEventCANAL@dlc 007F  
              receiveSendEventCANAL@crc 0080                          printMDF@nodeid 00BF  
                         ?_getVSCPFrame 0072                              strichr@chr 0063  
                      __size_of_sprintf 0672                              strichr@ptr 0061  
                      __size_of_strichr 003E                        __size_of_strcspn 0044  
                      __size_of_toupper 0016                        __size_of_stristr 0078  
                            strcpy@from 0062                          printGUID@value 00C3  
                   __end_of_printBinary 52C4                           __size_of_crc8 0036  
                         __size_of_atoi 00F8                           __size_of_main 014C  
                         __size_of_init 004A                           __size_of_itoa 0038  
         ?_receiveVSCPModeMultiCanalMsg 0001                     __end_of_printErrors 23D4  
                         __size_of_utoa 00A0                  ?_receiveSendEventCANAL 0001  
                            strnicmp@s1 0064                              strnicmp@s2 0066  
                           _inputBuffer 0200              __size_of_sendVSCPDriverAck 0092  
        receiveSendMultiEventCANAL@data 0072                  ?_receiveSendEventSLCAN 0001  
                         ??_writeEEPROM 0063                _printNodeFirmwareVersion 4182  
                   ECANSendMessage@data 006E                ECANSendMessage@tempBSEL0 0088  
                              _printMDF 4932                               printMDF@i 00C3  
                             printMDF@p 00C1                            ?_getCANFrame 006D  
                   ECANSendMessage@mode 0085                     ECANSendMessage@temp 008B  
                     ?__ECANPointBuffer 0001            ??_receiveSendMultiEventCANAL 0072  
                              atoi@sign 006A                             ??_findNodes 00C5  
                          ?_doModeSLCAN 0001                             ??_fifo_init 0064  
                           ??_fifo_read 0064                                _vscpData 01A4  
         __size_of_readRegisterExtended 00FC                                main@argc 00CA  
                              main@argv 00CC                                _vscpSize 01B0  
                    ??__ECANPointBuffer 0004                                _vscpType 01B1  
                           _RXB0FILHIT0 007B00       sendVSCPDriverErrorFrame@errorcode 006F  
                       doModeVerbose@id 0280                         doModeVerbose@rv 02A0  
                              _strnicmp 4F34                        init_app_eeprom@i 0063  
           writeRegisterExtended@nodeid 00C1                           Interrupt@data 001C  
                       _serialInputFifo 0048                             _RXB1CONbits 000F50  
                           _OSCTUNEbits 000F9B                              _INTCONbits 000FF2  
                        OpenUSART@spbrg 0060                     ECANReceiveMessage@i 000E  
                              memcpy@d1 0060                                memcpy@s1 0062  
             receivePrintEventVerbose@i 00A5                                itoa@base 0074  
                              isdigit@c 0062                      _ECANReceiveMessage 2696  
                              memset@p1 0060                             ??_init_crc8 0060  
                             ultoa@base 007C                          ??_getVSCPFrame 007E  
             __size_of_hexStringToBytes 009A                         sendVSCPFrame@id 00B2  
                              intlevel1 0000                               sprintf@ap 0088  
                             sprintf@sp 0076                    hexStringToBytes@size 0066  
                             strchr@chr 0062                        ?_printStatistics 0001  
              receiveSendEventSLCAN@dlc 008A                        ___lwmod@dividend 0060  
                             strchr@ptr 0060                     ?_ECANReceiveMessage 0008  
                      ___lldiv@dividend 0060                             ??_setFilter 0064  
                         printMDF@value 00C0     __size_of_receiveSendMultiEventCANAL 015A  
                         fifo_getFree@f 000B                               strcspn@s1 0066  
                             strcspn@s2 0068      receiveSendMultiEventCANAL@msgcount 007A  
               ECANSendMessage@msgFlags 0071                              _OSCCONbits 000FD3  
                             strnicmp@r 006C                               stristr@s1 006D  
                             stristr@s2 006F                      ECANSendMessage@ptr 008D  
                     ??_init_app_eeprom 0063                   __size_of__CANIDToRegs 00C0  
                           ??_printGUID 00BF                          readEEPROM@data 0062  
                           ??_printHelp 0065                             ??_printMode 0065  
              _sendVSCPDriverErrorFrame 43EE                           ?_fifo_getFree 0001  
                ECANSendMessage@dataLen 0070                     __end_of_writeEEPROM 56E6  
                   __ECANPointBuffer@pt 0005                    ??_ECANReceiveMessage 000B  
                           ??_putsUSART 0063                                utoa@base 006B  
                              ultoa@buf 0076                                ultoa@val 0078  
                         fifo_init@size 0062                                sprintf@c 0091  
                              sprintf@f 0078                     hexStringToBytes@buf 0064  
                              strcat@cp 0064                     hexStringToBytes@len 006C  
                        _doModeVscpNode 57C4                                strcat@to 0060  
      __end_of_receivePrintEventVerbose 2696                  ECANSendMessage@buffers 0086  
                      ___lldiv@quotient 0068                         ___lwmod@divisor 0062  
          __end_of_ECANSetOperationMode 575C                    _vscp_restoreDefaults 57BC  
                          printGUID@buf 00C0                                strcpy@cp 0064  
                              strlen@cp 0062                                strcpy@to 0060  
                       ___lwmod@counter 0064                                strcspn@i 006A  
                              toupper@c 0060                             _printBinary 527A  
                              strtok@s1 006C                                strtok@s2 006E  
                              strspn@s1 0066                                strspn@s2 0068  
                            _RXM1EXIDEN 0078EB                                strtok@sp 003B  
                ECANSendMessage@tempPtr 0089                             _printErrors 20FE  
                          fifo_init@buf 0060                            fifo_read@buf 0060  
         sendVSCPDriverCommandReply@crc 0071                            __CANIDToRegs 38DA  
                __size_ofi1_WriteTimer0 0012                            _USART_Status 003D  
             readRegisterExtended@value 00BB                _sendVSCPModeCapabilities 44AC  
              __size_of_ECANSendMessage 016E  
