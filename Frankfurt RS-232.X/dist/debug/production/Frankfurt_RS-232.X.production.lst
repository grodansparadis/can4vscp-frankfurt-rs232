

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Mon Mar 16 21:31:37 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	text85,global,reloc=2,class=CODE,delta=1
   104                           	psect	text86,global,reloc=2,class=CODE,delta=1
   105                           	psect	text87,global,reloc=2,class=CODE,delta=1
   106                           	psect	text88,global,reloc=2,class=CODE,delta=1
   107                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   108                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   109                           	psect	pa_nodes,global,class=CODE,delta=1
   110  0000                     tblptru	equ	0xFF8
   111                           tblptrh	equ	0xFF7
   112                           tblptrl	equ	0xFF6
   113                           tablat	equ	0xFF5
   114                           prodh	equ	0xFF4
   115                           prodl	equ	0xFF3
   116                           intcon	equ	0xFF2
   117                           indf0	equ	0xFEF
   118                           fsr0h	equ	0xFEA
   119                           fsr0l	equ	0xFE9
   120                           wreg	equ	0xFE8
   121                           indf1	equ	0xFE7
   122                           postinc1	equ	0xFE6
   123                           postdec1	equ	0xFE5
   124                           fsr1h	equ	0xFE2
   125                           fsr1l	equ	0xFE1
   126                           indf2	equ	0xFDF
   127                           postinc2	equ	0xFDE
   128                           postdec2	equ	0xFDD
   129                           plusw2	equ	0xFDB
   130                           fsr2h	equ	0xFDA
   131                           fsr2l	equ	0xFD9
   132                           status	equ	0xFD8
   133                           
   134                           	psect	mediumconst
   135  006FB4                     __pmediumconst:
   136                           	opt stack 0
   137  006FB4                     _octpowers:
   138                           	opt stack 0
   139  006FB4  0001               	dw	1
   140  006FB6  0000               	dw	0
   141  006FB8  0008               	dw	8
   142  006FBA  0000               	dw	0
   143  006FBC  0040               	dw	64
   144  006FBE  0000               	dw	0
   145  006FC0  0200               	dw	512
   146  006FC2  0000               	dw	0
   147  006FC4  1000               	dw	4096
   148  006FC6  0000               	dw	0
   149  006FC8  8000               	dw	32768
   150  006FCA  0000               	dw	0
   151  006FCC  0000               	dw	0
   152  006FCE  0004               	dw	4
   153  006FD0  0000               	dw	0
   154  006FD2  0020               	dw	32
   155  006FD4  0000               	dw	0
   156  006FD6  0100               	dw	256
   157  006FD8  0000               	dw	0
   158  006FDA  0800               	dw	2048
   159  006FDC  0000               	dw	0
   160  006FDE  4000               	dw	16384
   161  006FE0  0000               	dw	0
   162  006FE2  0000               	dw	0
   163  006FE4                     __end_of_octpowers:
   164                           	opt stack 0
   165  006FE4                     _dpowers:
   166                           	opt stack 0
   167  006FE4  0001               	dw	1
   168  006FE6  0000               	dw	0
   169  006FE8  000A               	dw	10
   170  006FEA  0000               	dw	0
   171  006FEC  0064               	dw	100
   172  006FEE  0000               	dw	0
   173  006FF0  03E8               	dw	1000
   174  006FF2  0000               	dw	0
   175  006FF4  2710               	dw	10000
   176  006FF6  0000               	dw	0
   177  006FF8  86A0               	dw	34464
   178  006FFA  0001               	dw	1
   179  006FFC  4240               	dw	16960
   180  006FFE  000F               	dw	15
   181  007000  9680               	dw	38528
   182  007002  0098               	dw	152
   183  007004  E100               	dw	57600
   184  007006  05F5               	dw	1525
   185  007008  CA00               	dw	51712
   186  00700A  3B9A               	dw	15258
   187  00700C                     __end_of_dpowers:
   188                           	opt stack 0
   189  00700C                     _hexpowers:
   190                           	opt stack 0
   191  00700C  0001               	dw	1
   192  00700E  0000               	dw	0
   193  007010  0010               	dw	16
   194  007012  0000               	dw	0
   195  007014  0100               	dw	256
   196  007016  0000               	dw	0
   197  007018  1000               	dw	4096
   198  00701A  0000               	dw	0
   199  00701C  0000               	dw	0
   200  00701E  0001               	dw	1
   201  007020  0000               	dw	0
   202  007022  0010               	dw	16
   203  007024  0000               	dw	0
   204  007026  0100               	dw	256
   205  007028  0000               	dw	0
   206  00702A  1000               	dw	4096
   207  00702C                     __end_of_hexpowers:
   208                           	opt stack 0
   209  0000                     _BRGCON1	set	3952
   210  0000                     _BRGCON2	set	3953
   211  0000                     _BRGCON3	set	3954
   212  0000                     _BSEL0	set	3576
   213  0000                     _CANCON	set	3951
   214  0000                     _CIOCON	set	3955
   215  0000                     _COMSTATbits	set	3956
   216  0000                     _ECANCON	set	3959
   217  0000                     _EEADR	set	4009
   218  0000                     _EECON1bits	set	4006
   219  0000                     _EECON2	set	4007
   220  0000                     _EEDATA	set	4008
   221  0000                     _INTCONbits	set	4082
   222  0000                     _MSEL0	set	3568
   223  0000                     _MSEL1	set	3569
   224  0000                     _MSEL2	set	3570
   225  0000                     _OSCCONbits	set	4051
   226  0000                     _OSCTUNEbits	set	3995
   227  0000                     _PIE1bits	set	3997
   228  0000                     _PIR1bits	set	3998
   229  0000                     _PIR2bits	set	4001
   230  0000                     _RCREG	set	4014
   231  0000                     _RCSTA	set	4011
   232  0000                     _RCSTAbits	set	4011
   233  0000                     _RXB1CONbits	set	3920
   234  0000                     _RXERRCNT	set	3957
   235  0000                     _RXF0EIDH	set	3842
   236  0000                     _RXF0EIDL	set	3843
   237  0000                     _RXF0SIDH	set	3840
   238  0000                     _RXF0SIDL	set	3841
   239  0000                     _RXF10EIDH	set	3446
   240  0000                     _RXF10EIDL	set	3447
   241  0000                     _RXF10SIDH	set	3444
   242  0000                     _RXF10SIDL	set	3445
   243  0000                     _RXF11EIDH	set	3450
   244  0000                     _RXF11EIDL	set	3451
   245  0000                     _RXF11SIDH	set	3448
   246  0000                     _RXF11SIDL	set	3449
   247  0000                     _RXF12EIDH	set	3458
   248  0000                     _RXF12EIDL	set	3459
   249  0000                     _RXF12SIDH	set	3456
   250  0000                     _RXF12SIDL	set	3457
   251  0000                     _RXF13EIDH	set	3462
   252  0000                     _RXF13EIDL	set	3463
   253  0000                     _RXF13SIDH	set	3460
   254  0000                     _RXF13SIDL	set	3461
   255  0000                     _RXF14EIDH	set	3466
   256  0000                     _RXF14EIDL	set	3467
   257  0000                     _RXF14SIDH	set	3464
   258  0000                     _RXF14SIDL	set	3465
   259  0000                     _RXF15EIDH	set	3474
   260  0000                     _RXF15EIDL	set	3475
   261  0000                     _RXF15SIDH	set	3472
   262  0000                     _RXF15SIDL	set	3473
   263  0000                     _RXF1EIDH	set	3846
   264  0000                     _RXF1EIDL	set	3847
   265  0000                     _RXF1SIDH	set	3844
   266  0000                     _RXF1SIDL	set	3845
   267  0000                     _RXF2EIDH	set	3850
   268  0000                     _RXF2EIDL	set	3851
   269  0000                     _RXF2SIDH	set	3848
   270  0000                     _RXF2SIDL	set	3849
   271  0000                     _RXF3EIDH	set	3854
   272  0000                     _RXF3EIDL	set	3855
   273  0000                     _RXF3SIDH	set	3852
   274  0000                     _RXF3SIDL	set	3853
   275  0000                     _RXF4EIDH	set	3858
   276  0000                     _RXF4EIDL	set	3859
   277  0000                     _RXF4SIDH	set	3856
   278  0000                     _RXF4SIDL	set	3857
   279  0000                     _RXF5EIDH	set	3862
   280  0000                     _RXF5EIDL	set	3863
   281  0000                     _RXF5SIDH	set	3860
   282  0000                     _RXF5SIDL	set	3861
   283  0000                     _RXF6EIDH	set	3426
   284  0000                     _RXF6EIDL	set	3427
   285  0000                     _RXF6SIDH	set	3424
   286  0000                     _RXF6SIDL	set	3425
   287  0000                     _RXF7EIDH	set	3430
   288  0000                     _RXF7EIDL	set	3431
   289  0000                     _RXF7SIDH	set	3428
   290  0000                     _RXF7SIDL	set	3429
   291  0000                     _RXF8EIDH	set	3434
   292  0000                     _RXF8EIDL	set	3435
   293  0000                     _RXF8SIDH	set	3432
   294  0000                     _RXF8SIDL	set	3433
   295  0000                     _RXF9EIDH	set	3442
   296  0000                     _RXF9EIDL	set	3443
   297  0000                     _RXF9SIDH	set	3440
   298  0000                     _RXF9SIDL	set	3441
   299  0000                     _RXFBCON0	set	3552
   300  0000                     _RXFBCON1	set	3553
   301  0000                     _RXFBCON2	set	3554
   302  0000                     _RXFBCON3	set	3555
   303  0000                     _RXFBCON4	set	3556
   304  0000                     _RXFBCON5	set	3557
   305  0000                     _RXFBCON6	set	3558
   306  0000                     _RXFBCON7	set	3559
   307  0000                     _RXFCON0	set	3540
   308  0000                     _RXFCON1	set	3541
   309  0000                     _RXM0EIDH	set	3866
   310  0000                     _RXM0EIDL	set	3867
   311  0000                     _RXM0SIDL	set	3865
   312  0000                     _RXM1EIDH	set	3870
   313  0000                     _RXM1EIDL	set	3871
   314  0000                     _RXM1SIDL	set	3869
   315  0000                     _SPBRG	set	4015
   316  0000                     _SPBRGH	set	4016
   317  0000                     _T0CON	set	4053
   318  0000                     _T0CONbits	set	4053
   319  0000                     _TMR0H	set	4055
   320  0000                     _TMR0L	set	4054
   321  0000                     _TRISBbits	set	3987
   322  0000                     _TRISCbits	set	3988
   323  0000                     _TXERRCNT	set	3958
   324  0000                     _TXREG	set	4013
   325  0000                     _TXSTA	set	4012
   326  0000                     _TXSTAbits	set	4012
   327  0000                     _B0RXFUL	set	28935
   328  0000                     _B0TXEN	set	28610
   329  0000                     _B1RXFUL	set	29063
   330  0000                     _B1TXEN	set	28611
   331  0000                     _B2RXFUL	set	29191
   332  0000                     _B2TXEN	set	28612
   333  0000                     _B3RXFUL	set	29319
   334  0000                     _B3TXEN	set	28613
   335  0000                     _B4RXFUL	set	29447
   336  0000                     _B4TXEN	set	28614
   337  0000                     _B5RXFUL	set	29575
   338  0000                     _B5TXEN	set	28615
   339  0000                     _ERRIE	set	32029
   340  0000                     _FIFOEMPTY	set	31655
   341  0000                     _IRXIF	set	32039
   342  0000                     _LATC1	set	31833
   343  0000                     _MDSEL0	set	31678
   344  0000                     _MDSEL1	set	31679
   345  0000                     _PEIE	set	32662
   346  0000                     _RCIE	set	31981
   347  0000                     _RCIF	set	31989
   348  0000                     _RCIP	set	31997
   349  0000                     _RXB0FILHIT0	set	31488
   350  0000                     _RXB0FUL	set	31495
   351  0000                     _RXB0IF	set	32032
   352  0000                     _RXB0OVFL	set	31655
   353  0000                     _RXB1IF	set	32033
   354  0000                     _RXB1OVFL	set	31654
   355  0000                     _RXBnIE	set	32025
   356  0000                     _RXBnIF	set	32033
   357  0000                     _RXM0EXIDM	set	30923
   358  0000                     _RXM1EXIDEN	set	30955
   359  0000                     _B0CON	set	3616
   360  0000                     _B1CON	set	3632
   361  0000                     _B2CON	set	3648
   362  0000                     _B3CON	set	3664
   363  0000                     _B4CON	set	3680
   364  0000                     _B5CON	set	3696
   365  0000                     _RXB0CON	set	3936
   366  0000                     _RXB1CON	set	3920
   367  0000                     _RXM0SIDH	set	3864
   368  0000                     _RXM1SIDH	set	3868
   369  0000                     _TXB0CON	set	3904
   370  0000                     _TXB1CON	set	3888
   371  0000                     _TXB2CON	set	3872
   372  00702C                     __stringdata:
   373                           	opt stack 0
   374  00702C                     STR_227:
   375  00702C  20                 	db	32
   376  00702D  20                 	db	32
   377  00702E  20                 	db	32
   378  00702F  20                 	db	32
   379  007030  20                 	db	32
   380  007031  20                 	db	32
   381  007032  20                 	db	32
   382  007033  20                 	db	32
   383  007034  20                 	db	32
   384  007035  46                 	db	70	;'F'
   385  007036  6F                 	db	111	;'o'
   386  007037  72                 	db	114	;'r'
   387  007038  6D                 	db	109	;'m'
   388  007039  61                 	db	97	;'a'
   389  00703A  74                 	db	116	;'t'
   390  00703B  3A                 	db	58	;':'
   391  00703C  20                 	db	32
   392  00703D  66                 	db	102	;'f'
   393  00703E  69                 	db	105	;'i'
   394  00703F  6C                 	db	108	;'l'
   395  007040  74                 	db	116	;'t'
   396  007041  65                 	db	101	;'e'
   397  007042  72                 	db	114	;'r'
   398  007043  20                 	db	32
   399  007044  66                 	db	102	;'f'
   400  007045  69                 	db	105	;'i'
   401  007046  6C                 	db	108	;'l'
   402  007047  74                 	db	116	;'t'
   403  007048  65                 	db	101	;'e'
   404  007049  72                 	db	114	;'r'
   405  00704A  6E                 	db	110	;'n'
   406  00704B  6F                 	db	111	;'o'
   407  00704C  2C                 	db	44
   408  00704D  70                 	db	112	;'p'
   409  00704E  72                 	db	114	;'r'
   410  00704F  69                 	db	105	;'i'
   411  007050  6F                 	db	111	;'o'
   412  007051  2C                 	db	44
   413  007052  63                 	db	99	;'c'
   414  007053  6C                 	db	108	;'l'
   415  007054  61                 	db	97	;'a'
   416  007055  73                 	db	115	;'s'
   417  007056  73                 	db	115	;'s'
   418  007057  2C                 	db	44
   419  007058  74                 	db	116	;'t'
   420  007059  79                 	db	121	;'y'
   421  00705A  70                 	db	112	;'p'
   422  00705B  65                 	db	101	;'e'
   423  00705C  2C                 	db	44
   424  00705D  6E                 	db	110	;'n'
   425  00705E  6F                 	db	111	;'o'
   426  00705F  64                 	db	100	;'d'
   427  007060  65                 	db	101	;'e'
   428  007061  69                 	db	105	;'i'
   429  007062  64                 	db	100	;'d'
   430  007063  20                 	db	32
   431  007064  20                 	db	32
   432  007065  28                 	db	40
   433  007066  66                 	db	102	;'f'
   434  007067  69                 	db	105	;'i'
   435  007068  6C                 	db	108	;'l'
   436  007069  74                 	db	116	;'t'
   437  00706A  65                 	db	101	;'e'
   438  00706B  72                 	db	114	;'r'
   439  00706C  6E                 	db	110	;'n'
   440  00706D  6F                 	db	111	;'o'
   441  00706E  20                 	db	32
   442  00706F  3D                 	db	61	;'='
   443  007070  20                 	db	32
   444  007071  30                 	db	48	;'0'
   445  007072  2D                 	db	45
   446  007073  31                 	db	49	;'1'
   447  007074  35                 	db	53	;'5'
   448  007075  29                 	db	41
   449  007076  2E                 	db	46
   450  007077  0D                 	db	13
   451  007078  0A                 	db	10
   452  007079  00                 	db	0
   453  00707A                     STR_225:
   454  00707A  49                 	db	73	;'I'
   455  00707B  4E                 	db	78	;'N'
   456  00707C  46                 	db	70	;'F'
   457  00707D  4F                 	db	79	;'O'
   458  00707E  20                 	db	32
   459  00707F  2D                 	db	45
   460  007080  20                 	db	32
   461  007081  47                 	db	71	;'G'
   462  007082  65                 	db	101	;'e'
   463  007083  74                 	db	116	;'t'
   464  007084  20                 	db	32
   465  007085  69                 	db	105	;'i'
   466  007086  6E                 	db	110	;'n'
   467  007087  66                 	db	102	;'f'
   468  007088  6F                 	db	111	;'o'
   469  007089  20                 	db	32
   470  00708A  61                 	db	97	;'a'
   471  00708B  62                 	db	98	;'b'
   472  00708C  6F                 	db	111	;'o'
   473  00708D  75                 	db	117	;'u'
   474  00708E  74                 	db	116	;'t'
   475  00708F  20                 	db	32
   476  007090  61                 	db	97	;'a'
   477  007091  6E                 	db	110	;'n'
   478  007092  20                 	db	32
   479  007093  65                 	db	101	;'e'
   480  007094  78                 	db	120	;'x'
   481  007095  69                 	db	105	;'i'
   482  007096  73                 	db	115	;'s'
   483  007097  74                 	db	116	;'t'
   484  007098  65                 	db	101	;'e'
   485  007099  6E                 	db	110	;'n'
   486  00709A  74                 	db	116	;'t'
   487  00709B  20                 	db	32
   488  00709C  6E                 	db	110	;'n'
   489  00709D  6F                 	db	111	;'o'
   490  00709E  64                 	db	100	;'d'
   491  00709F  65                 	db	101	;'e'
   492  0070A0  20                 	db	32
   493  0070A1  6F                 	db	111	;'o'
   494  0070A2  6E                 	db	110	;'n'
   495  0070A3  20                 	db	32
   496  0070A4  74                 	db	116	;'t'
   497  0070A5  68                 	db	104	;'h'
   498  0070A6  65                 	db	101	;'e'
   499  0070A7  20                 	db	32
   500  0070A8  62                 	db	98	;'b'
   501  0070A9  75                 	db	117	;'u'
   502  0070AA  73                 	db	115	;'s'
   503  0070AB  20                 	db	32
   504  0070AC  28                 	db	40
   505  0070AD  46                 	db	70	;'F'
   506  0070AE  6F                 	db	111	;'o'
   507  0070AF  72                 	db	114	;'r'
   508  0070B0  6D                 	db	109	;'m'
   509  0070B1  61                 	db	97	;'a'
   510  0070B2  74                 	db	116	;'t'
   511  0070B3  3A                 	db	58	;':'
   512  0070B4  20                 	db	32
   513  0070B5  69                 	db	105	;'i'
   514  0070B6  6E                 	db	110	;'n'
   515  0070B7  66                 	db	102	;'f'
   516  0070B8  6F                 	db	111	;'o'
   517  0070B9  20                 	db	32
   518  0070BA  6E                 	db	110	;'n'
   519  0070BB  69                 	db	105	;'i'
   520  0070BC  63                 	db	99	;'c'
   521  0070BD  6B                 	db	107	;'k'
   522  0070BE  6E                 	db	110	;'n'
   523  0070BF  61                 	db	97	;'a'
   524  0070C0  6D                 	db	109	;'m'
   525  0070C1  65                 	db	101	;'e'
   526  0070C2  29                 	db	41
   527  0070C3  2E                 	db	46
   528  0070C4  0D                 	db	13
   529  0070C5  0A                 	db	10
   530  0070C6  00                 	db	0
   531  0070C7                     STR_229:
   532  0070C7  20                 	db	32
   533  0070C8  20                 	db	32
   534  0070C9  20                 	db	32
   535  0070CA  20                 	db	32
   536  0070CB  20                 	db	32
   537  0070CC  20                 	db	32
   538  0070CD  20                 	db	32
   539  0070CE  46                 	db	70	;'F'
   540  0070CF  6F                 	db	111	;'o'
   541  0070D0  72                 	db	114	;'r'
   542  0070D1  6D                 	db	109	;'m'
   543  0070D2  61                 	db	97	;'a'
   544  0070D3  74                 	db	116	;'t'
   545  0070D4  3A                 	db	58	;':'
   546  0070D5  20                 	db	32
   547  0070D6  6D                 	db	109	;'m'
   548  0070D7  61                 	db	97	;'a'
   549  0070D8  73                 	db	115	;'s'
   550  0070D9  6B                 	db	107	;'k'
   551  0070DA  20                 	db	32
   552  0070DB  6D                 	db	109	;'m'
   553  0070DC  61                 	db	97	;'a'
   554  0070DD  73                 	db	115	;'s'
   555  0070DE  6B                 	db	107	;'k'
   556  0070DF  6E                 	db	110	;'n'
   557  0070E0  6F                 	db	111	;'o'
   558  0070E1  2C                 	db	44
   559  0070E2  70                 	db	112	;'p'
   560  0070E3  72                 	db	114	;'r'
   561  0070E4  69                 	db	105	;'i'
   562  0070E5  6F                 	db	111	;'o'
   563  0070E6  2C                 	db	44
   564  0070E7  63                 	db	99	;'c'
   565  0070E8  6C                 	db	108	;'l'
   566  0070E9  61                 	db	97	;'a'
   567  0070EA  73                 	db	115	;'s'
   568  0070EB  73                 	db	115	;'s'
   569  0070EC  2C                 	db	44
   570  0070ED  74                 	db	116	;'t'
   571  0070EE  79                 	db	121	;'y'
   572  0070EF  70                 	db	112	;'p'
   573  0070F0  65                 	db	101	;'e'
   574  0070F1  2C                 	db	44
   575  0070F2  6E                 	db	110	;'n'
   576  0070F3  6F                 	db	111	;'o'
   577  0070F4  64                 	db	100	;'d'
   578  0070F5  65                 	db	101	;'e'
   579  0070F6  69                 	db	105	;'i'
   580  0070F7  64                 	db	100	;'d'
   581  0070F8  20                 	db	32
   582  0070F9  28                 	db	40
   583  0070FA  6D                 	db	109	;'m'
   584  0070FB  61                 	db	97	;'a'
   585  0070FC  73                 	db	115	;'s'
   586  0070FD  6B                 	db	107	;'k'
   587  0070FE  6E                 	db	110	;'n'
   588  0070FF  6F                 	db	111	;'o'
   589  007100  20                 	db	32
   590  007101  3D                 	db	61	;'='
   591  007102  20                 	db	32
   592  007103  30                 	db	48	;'0'
   593  007104  20                 	db	32
   594  007105  6F                 	db	111	;'o'
   595  007106  72                 	db	114	;'r'
   596  007107  20                 	db	32
   597  007108  31                 	db	49	;'1'
   598  007109  29                 	db	41
   599  00710A  2E                 	db	46
   600  00710B  0D                 	db	13
   601  00710C  0A                 	db	10
   602  00710D  00                 	db	0
   603  00710E                     STR_223:
   604  00710E  52                 	db	82	;'R'
   605  00710F  52                 	db	82	;'R'
   606  007110  45                 	db	69	;'E'
   607  007111  47                 	db	71	;'G'
   608  007112  20                 	db	32
   609  007113  2D                 	db	45
   610  007114  20                 	db	32
   611  007115  52                 	db	82	;'R'
   612  007116  65                 	db	101	;'e'
   613  007117  61                 	db	97	;'a'
   614  007118  64                 	db	100	;'d'
   615  007119  20                 	db	32
   616  00711A  72                 	db	114	;'r'
   617  00711B  65                 	db	101	;'e'
   618  00711C  67                 	db	103	;'g'
   619  00711D  69                 	db	105	;'i'
   620  00711E  73                 	db	115	;'s'
   621  00711F  74                 	db	116	;'t'
   622  007120  65                 	db	101	;'e'
   623  007121  72                 	db	114	;'r'
   624  007122  28                 	db	40
   625  007123  73                 	db	115	;'s'
   626  007124  29                 	db	41
   627  007125  20                 	db	32
   628  007126  6F                 	db	111	;'o'
   629  007127  66                 	db	102	;'f'
   630  007128  20                 	db	32
   631  007129  6E                 	db	110	;'n'
   632  00712A  6F                 	db	111	;'o'
   633  00712B  64                 	db	100	;'d'
   634  00712C  65                 	db	101	;'e'
   635  00712D  20                 	db	32
   636  00712E  28                 	db	40
   637  00712F  46                 	db	70	;'F'
   638  007130  6F                 	db	111	;'o'
   639  007131  72                 	db	114	;'r'
   640  007132  6D                 	db	109	;'m'
   641  007133  61                 	db	97	;'a'
   642  007134  74                 	db	116	;'t'
   643  007135  3A                 	db	58	;':'
   644  007136  20                 	db	32
   645  007137  72                 	db	114	;'r'
   646  007138  72                 	db	114	;'r'
   647  007139  65                 	db	101	;'e'
   648  00713A  67                 	db	103	;'g'
   649  00713B  20                 	db	32
   650  00713C  5B                 	db	91	;'['
   651  00713D  70                 	db	112	;'p'
   652  00713E  61                 	db	97	;'a'
   653  00713F  67                 	db	103	;'g'
   654  007140  65                 	db	101	;'e'
   655  007141  3A                 	db	58	;':'
   656  007142  5D                 	db	93	;']'
   657  007143  72                 	db	114	;'r'
   658  007144  65                 	db	101	;'e'
   659  007145  67                 	db	103	;'g'
   660  007146  20                 	db	32
   661  007147  5B                 	db	91	;'['
   662  007148  63                 	db	99	;'c'
   663  007149  6F                 	db	111	;'o'
   664  00714A  75                 	db	117	;'u'
   665  00714B  6E                 	db	110	;'n'
   666  00714C  74                 	db	116	;'t'
   667  00714D  5D                 	db	93	;']'
   668  00714E  29                 	db	41
   669  00714F  2E                 	db	46
   670  007150  0D                 	db	13
   671  007151  0A                 	db	10
   672  007152  00                 	db	0
   673  007153                     STR_238:
   674  007153  2D                 	db	45
   675  007154  2D                 	db	45
   676  007155  2D                 	db	45
   677  007156  2D                 	db	45
   678  007157  2D                 	db	45
   679  007158  2D                 	db	45
   680  007159  2D                 	db	45
   681  00715A  2D                 	db	45
   682  00715B  2D                 	db	45
   683  00715C  2D                 	db	45
   684  00715D  2D                 	db	45
   685  00715E  2D                 	db	45
   686  00715F  2D                 	db	45
   687  007160  2D                 	db	45
   688  007161  2D                 	db	45
   689  007162  2D                 	db	45
   690  007163  2D                 	db	45
   691  007164  2D                 	db	45
   692  007165  2D                 	db	45
   693  007166  2D                 	db	45
   694  007167  2D                 	db	45
   695  007168  2D                 	db	45
   696  007169  2D                 	db	45
   697  00716A  2D                 	db	45
   698  00716B  2D                 	db	45
   699  00716C  2D                 	db	45
   700  00716D  2D                 	db	45
   701  00716E  2D                 	db	45
   702  00716F  2D                 	db	45
   703  007170  2D                 	db	45
   704  007171  2D                 	db	45
   705  007172  2D                 	db	45
   706  007173  2D                 	db	45
   707  007174  2D                 	db	45
   708  007175  2D                 	db	45
   709  007176  2D                 	db	45
   710  007177  2D                 	db	45
   711  007178  2D                 	db	45
   712  007179  2D                 	db	45
   713  00717A  2D                 	db	45
   714  00717B  2D                 	db	45
   715  00717C  2D                 	db	45
   716  00717D  2D                 	db	45
   717  00717E  2D                 	db	45
   718  00717F  2D                 	db	45
   719  007180  2D                 	db	45
   720  007181  2D                 	db	45
   721  007182  2D                 	db	45
   722  007183  2D                 	db	45
   723  007184  2D                 	db	45
   724  007185  2D                 	db	45
   725  007186  2D                 	db	45
   726  007187  2D                 	db	45
   727  007188  2D                 	db	45
   728  007189  2D                 	db	45
   729  00718A  2D                 	db	45
   730  00718B  2D                 	db	45
   731  00718C  2D                 	db	45
   732  00718D  2D                 	db	45
   733  00718E  2D                 	db	45
   734  00718F  2D                 	db	45
   735  007190  2D                 	db	45
   736  007191  2D                 	db	45
   737  007192  2D                 	db	45
   738  007193  0D                 	db	13
   739  007194  0A                 	db	10
   740  007195  00                 	db	0
   741  007196                     STR_233:
   742  007196  20                 	db	32
   743  007197  20                 	db	32
   744  007198  20                 	db	32
   745  007199  20                 	db	32
   746  00719A  52                 	db	82	;'R'
   747  00719B  57                 	db	87	;'W'
   748  00719C  54                 	db	84	;'T'
   749  00719D  49                 	db	73	;'I'
   750  00719E  4D                 	db	77	;'M'
   751  00719F  45                 	db	69	;'E'
   752  0071A0  4F                 	db	79	;'O'
   753  0071A1  55                 	db	85	;'U'
   754  0071A2  54                 	db	84	;'T'
   755  0071A3  20                 	db	32
   756  0071A4  2D                 	db	45
   757  0071A5  20                 	db	32
   758  0071A6  53                 	db	83	;'S'
   759  0071A7  65                 	db	101	;'e'
   760  0071A8  74                 	db	116	;'t'
   761  0071A9  20                 	db	32
   762  0071AA  72                 	db	114	;'r'
   763  0071AB  65                 	db	101	;'e'
   764  0071AC  67                 	db	103	;'g'
   765  0071AD  69                 	db	105	;'i'
   766  0071AE  73                 	db	115	;'s'
   767  0071AF  74                 	db	116	;'t'
   768  0071B0  65                 	db	101	;'e'
   769  0071B1  72                 	db	114	;'r'
   770  0071B2  20                 	db	32
   771  0071B3  72                 	db	114	;'r'
   772  0071B4  65                 	db	101	;'e'
   773  0071B5  61                 	db	97	;'a'
   774  0071B6  64                 	db	100	;'d'
   775  0071B7  2F                 	db	47
   776  0071B8  77                 	db	119	;'w'
   777  0071B9  72                 	db	114	;'r'
   778  0071BA  69                 	db	105	;'i'
   779  0071BB  74                 	db	116	;'t'
   780  0071BC  65                 	db	101	;'e'
   781  0071BD  20                 	db	32
   782  0071BE  74                 	db	116	;'t'
   783  0071BF  69                 	db	105	;'i'
   784  0071C0  6D                 	db	109	;'m'
   785  0071C1  65                 	db	101	;'e'
   786  0071C2  6F                 	db	111	;'o'
   787  0071C3  75                 	db	117	;'u'
   788  0071C4  74                 	db	116	;'t'
   789  0071C5  2E                 	db	46
   790  0071C6  20                 	db	32
   791  0071C7  44                 	db	68	;'D'
   792  0071C8  65                 	db	101	;'e'
   793  0071C9  66                 	db	102	;'f'
   794  0071CA  61                 	db	97	;'a'
   795  0071CB  75                 	db	117	;'u'
   796  0071CC  6C                 	db	108	;'l'
   797  0071CD  74                 	db	116	;'t'
   798  0071CE  3D                 	db	61	;'='
   799  0071CF  31                 	db	49	;'1'
   800  0071D0  30                 	db	48	;'0'
   801  0071D1  20                 	db	32
   802  0071D2  6D                 	db	109	;'m'
   803  0071D3  73                 	db	115	;'s'
   804  0071D4  20                 	db	32
   805  0071D5  2E                 	db	46
   806  0071D6  0D                 	db	13
   807  0071D7  0A                 	db	10
   808  0071D8  00                 	db	0
   809  0071D9                     STR_224:
   810  0071D9  57                 	db	87	;'W'
   811  0071DA  52                 	db	82	;'R'
   812  0071DB  45                 	db	69	;'E'
   813  0071DC  47                 	db	71	;'G'
   814  0071DD  20                 	db	32
   815  0071DE  2D                 	db	45
   816  0071DF  20                 	db	32
   817  0071E0  57                 	db	87	;'W'
   818  0071E1  72                 	db	114	;'r'
   819  0071E2  69                 	db	105	;'i'
   820  0071E3  74                 	db	116	;'t'
   821  0071E4  65                 	db	101	;'e'
   822  0071E5  20                 	db	32
   823  0071E6  72                 	db	114	;'r'
   824  0071E7  65                 	db	101	;'e'
   825  0071E8  67                 	db	103	;'g'
   826  0071E9  69                 	db	105	;'i'
   827  0071EA  73                 	db	115	;'s'
   828  0071EB  74                 	db	116	;'t'
   829  0071EC  65                 	db	101	;'e'
   830  0071ED  72                 	db	114	;'r'
   831  0071EE  20                 	db	32
   832  0071EF  6F                 	db	111	;'o'
   833  0071F0  66                 	db	102	;'f'
   834  0071F1  20                 	db	32
   835  0071F2  6E                 	db	110	;'n'
   836  0071F3  6F                 	db	111	;'o'
   837  0071F4  64                 	db	100	;'d'
   838  0071F5  65                 	db	101	;'e'
   839  0071F6  20                 	db	32
   840  0071F7  28                 	db	40
   841  0071F8  46                 	db	70	;'F'
   842  0071F9  6F                 	db	111	;'o'
   843  0071FA  72                 	db	114	;'r'
   844  0071FB  6D                 	db	109	;'m'
   845  0071FC  61                 	db	97	;'a'
   846  0071FD  74                 	db	116	;'t'
   847  0071FE  3A                 	db	58	;':'
   848  0071FF  20                 	db	32
   849  007200  77                 	db	119	;'w'
   850  007201  72                 	db	114	;'r'
   851  007202  65                 	db	101	;'e'
   852  007203  67                 	db	103	;'g'
   853  007204  20                 	db	32
   854  007205  5B                 	db	91	;'['
   855  007206  70                 	db	112	;'p'
   856  007207  61                 	db	97	;'a'
   857  007208  67                 	db	103	;'g'
   858  007209  65                 	db	101	;'e'
   859  00720A  3A                 	db	58	;':'
   860  00720B  5D                 	db	93	;']'
   861  00720C  72                 	db	114	;'r'
   862  00720D  65                 	db	101	;'e'
   863  00720E  67                 	db	103	;'g'
   864  00720F  20                 	db	32
   865  007210  63                 	db	99	;'c'
   866  007211  6F                 	db	111	;'o'
   867  007212  6E                 	db	110	;'n'
   868  007213  74                 	db	116	;'t'
   869  007214  65                 	db	101	;'e'
   870  007215  6E                 	db	110	;'n'
   871  007216  74                 	db	116	;'t'
   872  007217  29                 	db	41
   873  007218  2E                 	db	46
   874  007219  0D                 	db	13
   875  00721A  0A                 	db	10
   876  00721B  00                 	db	0
   877  00721C                     STR_89:
   878  00721C  2D                 	db	45
   879  00721D  45                 	db	69	;'E'
   880  00721E  52                 	db	82	;'R'
   881  00721F  52                 	db	82	;'R'
   882  007220  4F                 	db	79	;'O'
   883  007221  52                 	db	82	;'R'
   884  007222  20                 	db	32
   885  007223  2D                 	db	45
   886  007224  20                 	db	32
   887  007225  46                 	db	70	;'F'
   888  007226  69                 	db	105	;'i'
   889  007227  6C                 	db	108	;'l'
   890  007228  74                 	db	116	;'t'
   891  007229  65                 	db	101	;'e'
   892  00722A  72                 	db	114	;'r'
   893  00722B  20                 	db	32
   894  00722C  6E                 	db	110	;'n'
   895  00722D  75                 	db	117	;'u'
   896  00722E  6D                 	db	109	;'m'
   897  00722F  62                 	db	98	;'b'
   898  007230  65                 	db	101	;'e'
   899  007231  72                 	db	114	;'r'
   900  007232  20                 	db	32
   901  007233  63                 	db	99	;'c'
   902  007234  61                 	db	97	;'a'
   903  007235  6E                 	db	110	;'n'
   904  007236  20                 	db	32
   905  007237  6F                 	db	111	;'o'
   906  007238  6E                 	db	110	;'n'
   907  007239  6C                 	db	108	;'l'
   908  00723A  79                 	db	121	;'y'
   909  00723B  20                 	db	32
   910  00723C  62                 	db	98	;'b'
   911  00723D  65                 	db	101	;'e'
   912  00723E  20                 	db	32
   913  00723F  73                 	db	115	;'s'
   914  007240  65                 	db	101	;'e'
   915  007241  74                 	db	116	;'t'
   916  007242  20                 	db	32
   917  007243  74                 	db	116	;'t'
   918  007244  6F                 	db	111	;'o'
   919  007245  20                 	db	32
   920  007246  61                 	db	97	;'a'
   921  007247  20                 	db	32
   922  007248  76                 	db	118	;'v'
   923  007249  61                 	db	97	;'a'
   924  00724A  6C                 	db	108	;'l'
   925  00724B  75                 	db	117	;'u'
   926  00724C  65                 	db	101	;'e'
   927  00724D  20                 	db	32
   928  00724E  62                 	db	98	;'b'
   929  00724F  65                 	db	101	;'e'
   930  007250  74                 	db	116	;'t'
   931  007251  77                 	db	119	;'w'
   932  007252  65                 	db	101	;'e'
   933  007253  65                 	db	101	;'e'
   934  007254  6E                 	db	110	;'n'
   935  007255  20                 	db	32
   936  007256  30                 	db	48	;'0'
   937  007257  2D                 	db	45
   938  007258  31                 	db	49	;'1'
   939  007259  35                 	db	53	;'5'
   940  00725A  2E                 	db	46
   941  00725B  0D                 	db	13
   942  00725C  0A                 	db	10
   943  00725D  00                 	db	0
   944  00725E                     STR_236:
   945  00725E  20                 	db	32
   946  00725F  20                 	db	32
   947  007260  20                 	db	32
   948  007261  20                 	db	32
   949  007262  4D                 	db	77	;'M'
   950  007263  4F                 	db	79	;'O'
   951  007264  44                 	db	68	;'D'
   952  007265  45                 	db	69	;'E'
   953  007266  20                 	db	32
   954  007267  2D                 	db	45
   955  007268  20                 	db	32
   956  007269  53                 	db	83	;'S'
   957  00726A  65                 	db	101	;'e'
   958  00726B  74                 	db	116	;'t'
   959  00726C  20                 	db	32
   960  00726D  61                 	db	97	;'a'
   961  00726E  64                 	db	100	;'d'
   962  00726F  61                 	db	97	;'a'
   963  007270  70                 	db	112	;'p'
   964  007271  74                 	db	116	;'t'
   965  007272  65                 	db	101	;'e'
   966  007273  72                 	db	114	;'r'
   967  007274  20                 	db	32
   968  007275  6D                 	db	109	;'m'
   969  007276  6F                 	db	111	;'o'
   970  007277  64                 	db	100	;'d'
   971  007278  65                 	db	101	;'e'
   972  007279  20                 	db	32
   973  00727A  74                 	db	116	;'t'
   974  00727B  68                 	db	104	;'h'
   975  00727C  61                 	db	97	;'a'
   976  00727D  74                 	db	116	;'t'
   977  00727E  20                 	db	32
   978  00727F  73                 	db	115	;'s'
   979  007280  68                 	db	104	;'h'
   980  007281  6F                 	db	111	;'o'
   981  007282  75                 	db	117	;'u'
   982  007283  6C                 	db	108	;'l'
   983  007284  64                 	db	100	;'d'
   984  007285  20                 	db	32
   985  007286  62                 	db	98	;'b'
   986  007287  65                 	db	101	;'e'
   987  007288  20                 	db	32
   988  007289  75                 	db	117	;'u'
   989  00728A  73                 	db	115	;'s'
   990  00728B  65                 	db	101	;'e'
   991  00728C  64                 	db	100	;'d'
   992  00728D  20                 	db	32
   993  00728E  6F                 	db	111	;'o'
   994  00728F  6E                 	db	110	;'n'
   995  007290  20                 	db	32
   996  007291  73                 	db	115	;'s'
   997  007292  74                 	db	116	;'t'
   998  007293  61                 	db	97	;'a'
   999  007294  72                 	db	114	;'r'
  1000  007295  74                 	db	116	;'t'
  1001  007296  75                 	db	117	;'u'
  1002  007297  70                 	db	112	;'p'
  1003  007298  2E                 	db	46
  1004  007299  0D                 	db	13
  1005  00729A  0A                 	db	10
  1006  00729B  00                 	db	0
  1007  00729C                     STR_196:
  1008  00729C  54                 	db	84	;'T'
  1009  00729D  72                 	db	114	;'r'
  1010  00729E  61                 	db	97	;'a'
  1011  00729F  6E                 	db	110	;'n'
  1012  0072A0  73                 	db	115	;'s'
  1013  0072A1  6D                 	db	109	;'m'
  1014  0072A2  69                 	db	105	;'i'
  1015  0072A3  74                 	db	116	;'t'
  1016  0072A4  74                 	db	116	;'t'
  1017  0072A5  65                 	db	101	;'e'
  1018  0072A6  72                 	db	114	;'r'
  1019  0072A7  20                 	db	32
  1020  0072A8  69                 	db	105	;'i'
  1021  0072A9  6E                 	db	110	;'n'
  1022  0072AA  20                 	db	32
  1023  0072AB  45                 	db	69	;'E'
  1024  0072AC  72                 	db	114	;'r'
  1025  0072AD  72                 	db	114	;'r'
  1026  0072AE  6F                 	db	111	;'o'
  1027  0072AF  72                 	db	114	;'r'
  1028  0072B0  20                 	db	32
  1029  0072B1  53                 	db	83	;'S'
  1030  0072B2  74                 	db	116	;'t'
  1031  0072B3  61                 	db	97	;'a'
  1032  0072B4  74                 	db	116	;'t'
  1033  0072B5  65                 	db	101	;'e'
  1034  0072B6  20                 	db	32
  1035  0072B7  57                 	db	87	;'W'
  1036  0072B8  61                 	db	97	;'a'
  1037  0072B9  72                 	db	114	;'r'
  1038  0072BA  6E                 	db	110	;'n'
  1039  0072BB  69                 	db	105	;'i'
  1040  0072BC  6E                 	db	110	;'n'
  1041  0072BD  67                 	db	103	;'g'
  1042  0072BE  20                 	db	32
  1043  0072BF  28                 	db	40
  1044  0072C0  31                 	db	49	;'1'
  1045  0072C1  32                 	db	50	;'2'
  1046  0072C2  38                 	db	56	;'8'
  1047  0072C3  20                 	db	32
  1048  0072C4  3E                 	db	62	;'>'
  1049  0072C5  20                 	db	32
  1050  0072C6  54                 	db	84	;'T'
  1051  0072C7  45                 	db	69	;'E'
  1052  0072C8  52                 	db	82	;'R'
  1053  0072C9  52                 	db	82	;'R'
  1054  0072CA  43                 	db	67	;'C'
  1055  0072CB  4E                 	db	78	;'N'
  1056  0072CC  54                 	db	84	;'T'
  1057  0072CD  20                 	db	32
  1058  0072CE  3F                 	db	63	;'?'
  1059  0072CF  20                 	db	32
  1060  0072D0  39                 	db	57	;'9'
  1061  0072D1  36                 	db	54	;'6'
  1062  0072D2  29                 	db	41
  1063  0072D3  0D                 	db	13
  1064  0072D4  0A                 	db	10
  1065  0072D5  00                 	db	0
  1066  0072D6                     STR_198:
  1067  0072D6  54                 	db	84	;'T'
  1068  0072D7  72                 	db	114	;'r'
  1069  0072D8  61                 	db	97	;'a'
  1070  0072D9  6E                 	db	110	;'n'
  1071  0072DA  73                 	db	115	;'s'
  1072  0072DB  6D                 	db	109	;'m'
  1073  0072DC  69                 	db	105	;'i'
  1074  0072DD  74                 	db	116	;'t'
  1075  0072DE  74                 	db	116	;'t'
  1076  0072DF  65                 	db	101	;'e'
  1077  0072E0  72                 	db	114	;'r'
  1078  0072E1  20                 	db	32
  1079  0072E2  69                 	db	105	;'i'
  1080  0072E3  6E                 	db	110	;'n'
  1081  0072E4  20                 	db	32
  1082  0072E5  45                 	db	69	;'E'
  1083  0072E6  72                 	db	114	;'r'
  1084  0072E7  72                 	db	114	;'r'
  1085  0072E8  6F                 	db	111	;'o'
  1086  0072E9  72                 	db	114	;'r'
  1087  0072EA  20                 	db	32
  1088  0072EB  53                 	db	83	;'S'
  1089  0072EC  74                 	db	116	;'t'
  1090  0072ED  61                 	db	97	;'a'
  1091  0072EE  74                 	db	116	;'t'
  1092  0072EF  65                 	db	101	;'e'
  1093  0072F0  20                 	db	32
  1094  0072F1  42                 	db	66	;'B'
  1095  0072F2  75                 	db	117	;'u'
  1096  0072F3  73                 	db	115	;'s'
  1097  0072F4  20                 	db	32
  1098  0072F5  50                 	db	80	;'P'
  1099  0072F6  61                 	db	97	;'a'
  1100  0072F7  73                 	db	115	;'s'
  1101  0072F8  73                 	db	115	;'s'
  1102  0072F9  69                 	db	105	;'i'
  1103  0072FA  76                 	db	118	;'v'
  1104  0072FB  65                 	db	101	;'e'
  1105  0072FC  20                 	db	32
  1106  0072FD  28                 	db	40
  1107  0072FE  54                 	db	84	;'T'
  1108  0072FF  45                 	db	69	;'E'
  1109  007300  52                 	db	82	;'R'
  1110  007301  52                 	db	82	;'R'
  1111  007302  43                 	db	67	;'C'
  1112  007303  4E                 	db	78	;'N'
  1113  007304  54                 	db	84	;'T'
  1114  007305  20                 	db	32
  1115  007306  3F                 	db	63	;'?'
  1116  007307  20                 	db	32
  1117  007308  31                 	db	49	;'1'
  1118  007309  32                 	db	50	;'2'
  1119  00730A  38                 	db	56	;'8'
  1120  00730B  29                 	db	41
  1121  00730C  0D                 	db	13
  1122  00730D  0A                 	db	10
  1123  00730E  00                 	db	0
  1124  00730F                     STR_217:
  1125  00730F  20                 	db	32
  1126  007310  20                 	db	32
  1127  007311  20                 	db	32
  1128  007312  20                 	db	32
  1129  007313  20                 	db	32
  1130  007314  46                 	db	70	;'F'
  1131  007315  6F                 	db	111	;'o'
  1132  007316  72                 	db	114	;'r'
  1133  007317  6D                 	db	109	;'m'
  1134  007318  61                 	db	97	;'a'
  1135  007319  74                 	db	116	;'t'
  1136  00731A  3A                 	db	58	;':'
  1137  00731B  20                 	db	32
  1138  00731C  70                 	db	112	;'p'
  1139  00731D  72                 	db	114	;'r'
  1140  00731E  69                 	db	105	;'i'
  1141  00731F  6F                 	db	111	;'o'
  1142  007320  72                 	db	114	;'r'
  1143  007321  69                 	db	105	;'i'
  1144  007322  74                 	db	116	;'t'
  1145  007323  79                 	db	121	;'y'
  1146  007324  2C                 	db	44
  1147  007325  63                 	db	99	;'c'
  1148  007326  6C                 	db	108	;'l'
  1149  007327  61                 	db	97	;'a'
  1150  007328  73                 	db	115	;'s'
  1151  007329  73                 	db	115	;'s'
  1152  00732A  2C                 	db	44
  1153  00732B  74                 	db	116	;'t'
  1154  00732C  79                 	db	121	;'y'
  1155  00732D  70                 	db	112	;'p'
  1156  00732E  65                 	db	101	;'e'
  1157  00732F  2C                 	db	44
  1158  007330  6E                 	db	110	;'n'
  1159  007331  6F                 	db	111	;'o'
  1160  007332  64                 	db	100	;'d'
  1161  007333  65                 	db	101	;'e'
  1162  007334  69                 	db	105	;'i'
  1163  007335  64                 	db	100	;'d'
  1164  007336  2C                 	db	44
  1165  007337  63                 	db	99	;'c'
  1166  007338  6F                 	db	111	;'o'
  1167  007339  75                 	db	117	;'u'
  1168  00733A  6E                 	db	110	;'n'
  1169  00733B  74                 	db	116	;'t'
  1170  00733C  2C                 	db	44
  1171  00733D  64                 	db	100	;'d'
  1172  00733E  61                 	db	97	;'a'
  1173  00733F  74                 	db	116	;'t'
  1174  007340  61                 	db	97	;'a'
  1175  007341  2C                 	db	44
  1176  007342  2C                 	db	44
  1177  007343  2C                 	db	44
  1178  007344  0D                 	db	13
  1179  007345  0A                 	db	10
  1180  007346  00                 	db	0
  1181  007347                     STR_203:
  1182  007347  52                 	db	82	;'R'
  1183  007348  65                 	db	101	;'e'
  1184  007349  63                 	db	99	;'c'
  1185  00734A  65                 	db	101	;'e'
  1186  00734B  69                 	db	105	;'i'
  1187  00734C  76                 	db	118	;'v'
  1188  00734D  65                 	db	101	;'e'
  1189  00734E  72                 	db	114	;'r'
  1190  00734F  20                 	db	32
  1191  007350  69                 	db	105	;'i'
  1192  007351  6E                 	db	110	;'n'
  1193  007352  20                 	db	32
  1194  007353  45                 	db	69	;'E'
  1195  007354  72                 	db	114	;'r'
  1196  007355  72                 	db	114	;'r'
  1197  007356  6F                 	db	111	;'o'
  1198  007357  72                 	db	114	;'r'
  1199  007358  20                 	db	32
  1200  007359  53                 	db	83	;'S'
  1201  00735A  74                 	db	116	;'t'
  1202  00735B  61                 	db	97	;'a'
  1203  00735C  74                 	db	116	;'t'
  1204  00735D  65                 	db	101	;'e'
  1205  00735E  20                 	db	32
  1206  00735F  57                 	db	87	;'W'
  1207  007360  61                 	db	97	;'a'
  1208  007361  72                 	db	114	;'r'
  1209  007362  6E                 	db	110	;'n'
  1210  007363  69                 	db	105	;'i'
  1211  007364  6E                 	db	110	;'n'
  1212  007365  67                 	db	103	;'g'
  1213  007366  20                 	db	32
  1214  007367  28                 	db	40
  1215  007368  31                 	db	49	;'1'
  1216  007369  32                 	db	50	;'2'
  1217  00736A  38                 	db	56	;'8'
  1218  00736B  20                 	db	32
  1219  00736C  3E                 	db	62	;'>'
  1220  00736D  20                 	db	32
  1221  00736E  52                 	db	82	;'R'
  1222  00736F  45                 	db	69	;'E'
  1223  007370  52                 	db	82	;'R'
  1224  007371  52                 	db	82	;'R'
  1225  007372  43                 	db	67	;'C'
  1226  007373  4E                 	db	78	;'N'
  1227  007374  54                 	db	84	;'T'
  1228  007375  20                 	db	32
  1229  007376  3F                 	db	63	;'?'
  1230  007377  20                 	db	32
  1231  007378  39                 	db	57	;'9'
  1232  007379  36                 	db	54	;'6'
  1233  00737A  29                 	db	41
  1234  00737B  0D                 	db	13
  1235  00737C  0A                 	db	10
  1236  00737D  00                 	db	0
  1237  00737E                     STR_235:
  1238  00737E  20                 	db	32
  1239  00737F  20                 	db	32
  1240  007380  20                 	db	32
  1241  007381  20                 	db	32
  1242  007382  53                 	db	83	;'S'
  1243  007383  54                 	db	84	;'T'
  1244  007384  41                 	db	65	;'A'
  1245  007385  52                 	db	82	;'R'
  1246  007386  54                 	db	84	;'T'
  1247  007387  49                 	db	73	;'I'
  1248  007388  46                 	db	70	;'F'
  1249  007389  20                 	db	32
  1250  00738A  2D                 	db	45
  1251  00738B  20                 	db	32
  1252  00738C  53                 	db	83	;'S'
  1253  00738D  65                 	db	101	;'e'
  1254  00738E  74                 	db	116	;'t'
  1255  00738F  20                 	db	32
  1256  007390  69                 	db	105	;'i'
  1257  007391  6E                 	db	110	;'n'
  1258  007392  74                 	db	116	;'t'
  1259  007393  65                 	db	101	;'e'
  1260  007394  72                 	db	114	;'r'
  1261  007395  66                 	db	102	;'f'
  1262  007396  61                 	db	97	;'a'
  1263  007397  63                 	db	99	;'c'
  1264  007398  65                 	db	101	;'e'
  1265  007399  20                 	db	32
  1266  00739A  73                 	db	115	;'s'
  1267  00739B  74                 	db	116	;'t'
  1268  00739C  61                 	db	97	;'a'
  1269  00739D  74                 	db	116	;'t'
  1270  00739E  65                 	db	101	;'e'
  1271  00739F  20                 	db	32
  1272  0073A0  74                 	db	116	;'t'
  1273  0073A1  6F                 	db	111	;'o'
  1274  0073A2  20                 	db	32
  1275  0073A3  75                 	db	117	;'u'
  1276  0073A4  73                 	db	115	;'s'
  1277  0073A5  65                 	db	101	;'e'
  1278  0073A6  20                 	db	32
  1279  0073A7  6F                 	db	111	;'o'
  1280  0073A8  6E                 	db	110	;'n'
  1281  0073A9  20                 	db	32
  1282  0073AA  73                 	db	115	;'s'
  1283  0073AB  74                 	db	116	;'t'
  1284  0073AC  61                 	db	97	;'a'
  1285  0073AD  72                 	db	114	;'r'
  1286  0073AE  74                 	db	116	;'t'
  1287  0073AF  75                 	db	117	;'u'
  1288  0073B0  70                 	db	112	;'p'
  1289  0073B1  2E                 	db	46
  1290  0073B2  0D                 	db	13
  1291  0073B3  0A                 	db	10
  1292  0073B4  00                 	db	0
  1293  0073B5                     STR_4:
  1294  0073B5  50                 	db	80	;'P'
  1295  0073B6  72                 	db	114	;'r'
  1296  0073B7  65                 	db	101	;'e'
  1297  0073B8  73                 	db	115	;'s'
  1298  0073B9  73                 	db	115	;'s'
  1299  0073BA  20                 	db	32
  1300  0073BB  27                 	db	39
  1301  0073BC  76                 	db	118	;'v'
  1302  0073BD  27                 	db	39
  1303  0073BE  20                 	db	32
  1304  0073BF  77                 	db	119	;'w'
  1305  0073C0  69                 	db	105	;'i'
  1306  0073C1  74                 	db	116	;'t'
  1307  0073C2  68                 	db	104	;'h'
  1308  0073C3  69                 	db	105	;'i'
  1309  0073C4  6E                 	db	110	;'n'
  1310  0073C5  20                 	db	32
  1311  0073C6  74                 	db	116	;'t'
  1312  0073C7  68                 	db	104	;'h'
  1313  0073C8  72                 	db	114	;'r'
  1314  0073C9  65                 	db	101	;'e'
  1315  0073CA  65                 	db	101	;'e'
  1316  0073CB  20                 	db	32
  1317  0073CC  73                 	db	115	;'s'
  1318  0073CD  65                 	db	101	;'e'
  1319  0073CE  63                 	db	99	;'c'
  1320  0073CF  6F                 	db	111	;'o'
  1321  0073D0  6E                 	db	110	;'n'
  1322  0073D1  64                 	db	100	;'d'
  1323  0073D2  73                 	db	115	;'s'
  1324  0073D3  20                 	db	32
  1325  0073D4  74                 	db	116	;'t'
  1326  0073D5  6F                 	db	111	;'o'
  1327  0073D6  20                 	db	32
  1328  0073D7  65                 	db	101	;'e'
  1329  0073D8  6E                 	db	110	;'n'
  1330  0073D9  74                 	db	116	;'t'
  1331  0073DA  65                 	db	101	;'e'
  1332  0073DB  72                 	db	114	;'r'
  1333  0073DC  20                 	db	32
  1334  0073DD  76                 	db	118	;'v'
  1335  0073DE  65                 	db	101	;'e'
  1336  0073DF  72                 	db	114	;'r'
  1337  0073E0  62                 	db	98	;'b'
  1338  0073E1  6F                 	db	111	;'o'
  1339  0073E2  73                 	db	115	;'s'
  1340  0073E3  65                 	db	101	;'e'
  1341  0073E4  20                 	db	32
  1342  0073E5  6D                 	db	109	;'m'
  1343  0073E6  6F                 	db	111	;'o'
  1344  0073E7  64                 	db	100	;'d'
  1345  0073E8  65                 	db	101	;'e'
  1346  0073E9  0D                 	db	13
  1347  0073EA  0A                 	db	10
  1348  0073EB  00                 	db	0
  1349  0073EC                     STR_204:
  1350  0073EC  52                 	db	82	;'R'
  1351  0073ED  65                 	db	101	;'e'
  1352  0073EE  63                 	db	99	;'c'
  1353  0073EF  65                 	db	101	;'e'
  1354  0073F0  69                 	db	105	;'i'
  1355  0073F1  76                 	db	118	;'v'
  1356  0073F2  65                 	db	101	;'e'
  1357  0073F3  72                 	db	114	;'r'
  1358  0073F4  20                 	db	32
  1359  0073F5  69                 	db	105	;'i'
  1360  0073F6  6E                 	db	110	;'n'
  1361  0073F7  20                 	db	32
  1362  0073F8  45                 	db	69	;'E'
  1363  0073F9  72                 	db	114	;'r'
  1364  0073FA  72                 	db	114	;'r'
  1365  0073FB  6F                 	db	111	;'o'
  1366  0073FC  72                 	db	114	;'r'
  1367  0073FD  20                 	db	32
  1368  0073FE  53                 	db	83	;'S'
  1369  0073FF  74                 	db	116	;'t'
  1370  007400  61                 	db	97	;'a'
  1371  007401  74                 	db	116	;'t'
  1372  007402  65                 	db	101	;'e'
  1373  007403  20                 	db	32
  1374  007404  42                 	db	66	;'B'
  1375  007405  75                 	db	117	;'u'
  1376  007406  73                 	db	115	;'s'
  1377  007407  20                 	db	32
  1378  007408  50                 	db	80	;'P'
  1379  007409  61                 	db	97	;'a'
  1380  00740A  73                 	db	115	;'s'
  1381  00740B  73                 	db	115	;'s'
  1382  00740C  69                 	db	105	;'i'
  1383  00740D  76                 	db	118	;'v'
  1384  00740E  65                 	db	101	;'e'
  1385  00740F  20                 	db	32
  1386  007410  28                 	db	40
  1387  007411  52                 	db	82	;'R'
  1388  007412  45                 	db	69	;'E'
  1389  007413  52                 	db	82	;'R'
  1390  007414  52                 	db	82	;'R'
  1391  007415  43                 	db	67	;'C'
  1392  007416  4E                 	db	78	;'N'
  1393  007417  54                 	db	84	;'T'
  1394  007418  20                 	db	32
  1395  007419  3F                 	db	63	;'?'
  1396  00741A  20                 	db	32
  1397  00741B  31                 	db	49	;'1'
  1398  00741C  32                 	db	50	;'2'
  1399  00741D  38                 	db	56	;'8'
  1400  00741E  29                 	db	41
  1401  00741F  0D                 	db	13
  1402  007420  0A                 	db	10
  1403  007421  00                 	db	0
  1404  007422                     STR_71:
  1405  007422  2D                 	db	45
  1406  007423  45                 	db	69	;'E'
  1407  007424  52                 	db	82	;'R'
  1408  007425  52                 	db	82	;'R'
  1409  007426  4F                 	db	79	;'O'
  1410  007427  52                 	db	82	;'R'
  1411  007428  20                 	db	32
  1412  007429  2D                 	db	45
  1413  00742A  20                 	db	32
  1414  00742B  4F                 	db	79	;'O'
  1415  00742C  6E                 	db	110	;'n'
  1416  00742D  65                 	db	101	;'e'
  1417  00742E  20                 	db	32
  1418  00742F  6F                 	db	111	;'o'
  1419  007430  72                 	db	114	;'r'
  1420  007431  20                 	db	32
  1421  007432  6D                 	db	109	;'m'
  1422  007433  6F                 	db	111	;'o'
  1423  007434  72                 	db	114	;'r'
  1424  007435  65                 	db	101	;'e'
  1425  007436  20                 	db	32
  1426  007437  72                 	db	114	;'r'
  1427  007438  65                 	db	101	;'e'
  1428  007439  67                 	db	103	;'g'
  1429  00743A  69                 	db	105	;'i'
  1430  00743B  73                 	db	115	;'s'
  1431  00743C  74                 	db	116	;'t'
  1432  00743D  65                 	db	101	;'e'
  1433  00743E  72                 	db	114	;'r'
  1434  00743F  28                 	db	40
  1435  007440  73                 	db	115	;'s'
  1436  007441  29                 	db	41
  1437  007442  20                 	db	32
  1438  007443  63                 	db	99	;'c'
  1439  007444  6F                 	db	111	;'o'
  1440  007445  75                 	db	117	;'u'
  1441  007446  6C                 	db	108	;'l'
  1442  007447  64                 	db	100	;'d'
  1443  007448  20                 	db	32
  1444  007449  6E                 	db	110	;'n'
  1445  00744A  6F                 	db	111	;'o'
  1446  00744B  74                 	db	116	;'t'
  1447  00744C  20                 	db	32
  1448  00744D  62                 	db	98	;'b'
  1449  00744E  65                 	db	101	;'e'
  1450  00744F  20                 	db	32
  1451  007450  72                 	db	114	;'r'
  1452  007451  65                 	db	101	;'e'
  1453  007452  61                 	db	97	;'a'
  1454  007453  64                 	db	100	;'d'
  1455  007454  2E                 	db	46
  1456  007455  0D                 	db	13
  1457  007456  0A                 	db	10
  1458  007457  00                 	db	0
  1459  007458                     STR_197:
  1460  007458  54                 	db	84	;'T'
  1461  007459  72                 	db	114	;'r'
  1462  00745A  61                 	db	97	;'a'
  1463  00745B  6E                 	db	110	;'n'
  1464  00745C  73                 	db	115	;'s'
  1465  00745D  6D                 	db	109	;'m'
  1466  00745E  69                 	db	105	;'i'
  1467  00745F  74                 	db	116	;'t'
  1468  007460  74                 	db	116	;'t'
  1469  007461  65                 	db	101	;'e'
  1470  007462  72                 	db	114	;'r'
  1471  007463  20                 	db	32
  1472  007464  69                 	db	105	;'i'
  1473  007465  6E                 	db	110	;'n'
  1474  007466  20                 	db	32
  1475  007467  45                 	db	69	;'E'
  1476  007468  72                 	db	114	;'r'
  1477  007469  72                 	db	114	;'r'
  1478  00746A  6F                 	db	111	;'o'
  1479  00746B  72                 	db	114	;'r'
  1480  00746C  20                 	db	32
  1481  00746D  53                 	db	83	;'S'
  1482  00746E  74                 	db	116	;'t'
  1483  00746F  61                 	db	97	;'a'
  1484  007470  74                 	db	116	;'t'
  1485  007471  65                 	db	101	;'e'
  1486  007472  20                 	db	32
  1487  007473  42                 	db	66	;'B'
  1488  007474  75                 	db	117	;'u'
  1489  007475  73                 	db	115	;'s'
  1490  007476  20                 	db	32
  1491  007477  4F                 	db	79	;'O'
  1492  007478  46                 	db	70	;'F'
  1493  007479  46                 	db	70	;'F'
  1494  00747A  20                 	db	32
  1495  00747B  28                 	db	40
  1496  00747C  54                 	db	84	;'T'
  1497  00747D  45                 	db	69	;'E'
  1498  00747E  52                 	db	82	;'R'
  1499  00747F  52                 	db	82	;'R'
  1500  007480  43                 	db	67	;'C'
  1501  007481  4E                 	db	78	;'N'
  1502  007482  54                 	db	84	;'T'
  1503  007483  20                 	db	32
  1504  007484  3F                 	db	63	;'?'
  1505  007485  20                 	db	32
  1506  007486  32                 	db	50	;'2'
  1507  007487  35                 	db	53	;'5'
  1508  007488  36                 	db	54	;'6'
  1509  007489  29                 	db	41
  1510  00748A  0D                 	db	13
  1511  00748B  0A                 	db	10
  1512  00748C  00                 	db	0
  1513  00748D                     STR_2:
  1514  00748D  43                 	db	67	;'C'
  1515  00748E  6F                 	db	111	;'o'
  1516  00748F  70                 	db	112	;'p'
  1517  007490  79                 	db	121	;'y'
  1518  007491  72                 	db	114	;'r'
  1519  007492  69                 	db	105	;'i'
  1520  007493  67                 	db	103	;'g'
  1521  007494  68                 	db	104	;'h'
  1522  007495  74                 	db	116	;'t'
  1523  007496  20                 	db	32
  1524  007497  28                 	db	40
  1525  007498  43                 	db	67	;'C'
  1526  007499  29                 	db	41
  1527  00749A  20                 	db	32
  1528  00749B  32                 	db	50	;'2'
  1529  00749C  30                 	db	48	;'0'
  1530  00749D  31                 	db	49	;'1'
  1531  00749E  34                 	db	52	;'4'
  1532  00749F  2D                 	db	45
  1533  0074A0  32                 	db	50	;'2'
  1534  0074A1  30                 	db	48	;'0'
  1535  0074A2  31                 	db	49	;'1'
  1536  0074A3  35                 	db	53	;'5'
  1537  0074A4  20                 	db	32
  1538  0074A5  47                 	db	71	;'G'
  1539  0074A6  72                 	db	114	;'r'
  1540  0074A7  6F                 	db	111	;'o'
  1541  0074A8  64                 	db	100	;'d'
  1542  0074A9  61                 	db	97	;'a'
  1543  0074AA  6E                 	db	110	;'n'
  1544  0074AB  73                 	db	115	;'s'
  1545  0074AC  20                 	db	32
  1546  0074AD  50                 	db	80	;'P'
  1547  0074AE  61                 	db	97	;'a'
  1548  0074AF  72                 	db	114	;'r'
  1549  0074B0  61                 	db	97	;'a'
  1550  0074B1  64                 	db	100	;'d'
  1551  0074B2  69                 	db	105	;'i'
  1552  0074B3  73                 	db	115	;'s'
  1553  0074B4  20                 	db	32
  1554  0074B5  41                 	db	65	;'A'
  1555  0074B6  42                 	db	66	;'B'
  1556  0074B7  2C                 	db	44
  1557  0074B8  20                 	db	32
  1558  0074B9  53                 	db	83	;'S'
  1559  0074BA  77                 	db	119	;'w'
  1560  0074BB  65                 	db	101	;'e'
  1561  0074BC  64                 	db	100	;'d'
  1562  0074BD  65                 	db	101	;'e'
  1563  0074BE  6E                 	db	110	;'n'
  1564  0074BF  0D                 	db	13
  1565  0074C0  0A                 	db	10
  1566  0074C1  00                 	db	0
  1567  0074C2                     STR_205:
  1568  0074C2  54                 	db	84	;'T'
  1569  0074C3  72                 	db	114	;'r'
  1570  0074C4  61                 	db	97	;'a'
  1571  0074C5  6E                 	db	110	;'n'
  1572  0074C6  73                 	db	115	;'s'
  1573  0074C7  6D                 	db	109	;'m'
  1574  0074C8  69                 	db	105	;'i'
  1575  0074C9  74                 	db	116	;'t'
  1576  0074CA  74                 	db	116	;'t'
  1577  0074CB  65                 	db	101	;'e'
  1578  0074CC  72                 	db	114	;'r'
  1579  0074CD  20                 	db	32
  1580  0074CE  6F                 	db	111	;'o'
  1581  0074CF  72                 	db	114	;'r'
  1582  0074D0  20                 	db	32
  1583  0074D1  52                 	db	82	;'R'
  1584  0074D2  65                 	db	101	;'e'
  1585  0074D3  63                 	db	99	;'c'
  1586  0074D4  65                 	db	101	;'e'
  1587  0074D5  69                 	db	105	;'i'
  1588  0074D6  76                 	db	118	;'v'
  1589  0074D7  65                 	db	101	;'e'
  1590  0074D8  72                 	db	114	;'r'
  1591  0074D9  20                 	db	32
  1592  0074DA  69                 	db	105	;'i'
  1593  0074DB  73                 	db	115	;'s'
  1594  0074DC  20                 	db	32
  1595  0074DD  69                 	db	105	;'i'
  1596  0074DE  6E                 	db	110	;'n'
  1597  0074DF  20                 	db	32
  1598  0074E0  45                 	db	69	;'E'
  1599  0074E1  72                 	db	114	;'r'
  1600  0074E2  72                 	db	114	;'r'
  1601  0074E3  6F                 	db	111	;'o'
  1602  0074E4  72                 	db	114	;'r'
  1603  0074E5  20                 	db	32
  1604  0074E6  53                 	db	83	;'S'
  1605  0074E7  74                 	db	116	;'t'
  1606  0074E8  61                 	db	97	;'a'
  1607  0074E9  74                 	db	116	;'t'
  1608  0074EA  65                 	db	101	;'e'
  1609  0074EB  20                 	db	32
  1610  0074EC  57                 	db	87	;'W'
  1611  0074ED  61                 	db	97	;'a'
  1612  0074EE  72                 	db	114	;'r'
  1613  0074EF  6E                 	db	110	;'n'
  1614  0074F0  69                 	db	105	;'i'
  1615  0074F1  6E                 	db	110	;'n'
  1616  0074F2  67                 	db	103	;'g'
  1617  0074F3  0D                 	db	13
  1618  0074F4  0A                 	db	10
  1619  0074F5  00                 	db	0
  1620  0074F6                     STR_211:
  1621  0074F6  4C                 	db	76	;'L'
  1622  0074F7  49                 	db	73	;'I'
  1623  0074F8  53                 	db	83	;'S'
  1624  0074F9  54                 	db	84	;'T'
  1625  0074FA  45                 	db	69	;'E'
  1626  0074FB  4E                 	db	78	;'N'
  1627  0074FC  20                 	db	32
  1628  0074FD  2D                 	db	45
  1629  0074FE  20                 	db	32
  1630  0074FF  4F                 	db	79	;'O'
  1631  007500  70                 	db	112	;'p'
  1632  007501  65                 	db	101	;'e'
  1633  007502  6E                 	db	110	;'n'
  1634  007503  20                 	db	32
  1635  007504  43                 	db	67	;'C'
  1636  007505  41                 	db	65	;'A'
  1637  007506  4E                 	db	78	;'N'
  1638  007507  20                 	db	32
  1639  007508  69                 	db	105	;'i'
  1640  007509  6E                 	db	110	;'n'
  1641  00750A  74                 	db	116	;'t'
  1642  00750B  65                 	db	101	;'e'
  1643  00750C  72                 	db	114	;'r'
  1644  00750D  66                 	db	102	;'f'
  1645  00750E  61                 	db	97	;'a'
  1646  00750F  63                 	db	99	;'c'
  1647  007510  65                 	db	101	;'e'
  1648  007511  20                 	db	32
  1649  007512  69                 	db	105	;'i'
  1650  007513  6E                 	db	110	;'n'
  1651  007514  20                 	db	32
  1652  007515  6C                 	db	108	;'l'
  1653  007516  69                 	db	105	;'i'
  1654  007517  73                 	db	115	;'s'
  1655  007518  74                 	db	116	;'t'
  1656  007519  65                 	db	101	;'e'
  1657  00751A  6E                 	db	110	;'n'
  1658  00751B  20                 	db	32
  1659  00751C  6F                 	db	111	;'o'
  1660  00751D  6E                 	db	110	;'n'
  1661  00751E  6C                 	db	108	;'l'
  1662  00751F  79                 	db	121	;'y'
  1663  007520  20                 	db	32
  1664  007521  6D                 	db	109	;'m'
  1665  007522  6F                 	db	111	;'o'
  1666  007523  64                 	db	100	;'d'
  1667  007524  65                 	db	101	;'e'
  1668  007525  2E                 	db	46
  1669  007526  0D                 	db	13
  1670  007527  0A                 	db	10
  1671  007528  00                 	db	0
  1672  007529                     STR_102:
  1673  007529  2D                 	db	45
  1674  00752A  45                 	db	69	;'E'
  1675  00752B  52                 	db	82	;'R'
  1676  00752C  52                 	db	82	;'R'
  1677  00752D  4F                 	db	79	;'O'
  1678  00752E  52                 	db	82	;'R'
  1679  00752F  20                 	db	32
  1680  007530  2D                 	db	45
  1681  007531  20                 	db	32
  1682  007532  4D                 	db	77	;'M'
  1683  007533  61                 	db	97	;'a'
  1684  007534  73                 	db	115	;'s'
  1685  007535  6B                 	db	107	;'k'
  1686  007536  20                 	db	32
  1687  007537  6E                 	db	110	;'n'
  1688  007538  75                 	db	117	;'u'
  1689  007539  6D                 	db	109	;'m'
  1690  00753A  62                 	db	98	;'b'
  1691  00753B  65                 	db	101	;'e'
  1692  00753C  72                 	db	114	;'r'
  1693  00753D  20                 	db	32
  1694  00753E  63                 	db	99	;'c'
  1695  00753F  61                 	db	97	;'a'
  1696  007540  6E                 	db	110	;'n'
  1697  007541  20                 	db	32
  1698  007542  6F                 	db	111	;'o'
  1699  007543  6E                 	db	110	;'n'
  1700  007544  6C                 	db	108	;'l'
  1701  007545  79                 	db	121	;'y'
  1702  007546  20                 	db	32
  1703  007547  62                 	db	98	;'b'
  1704  007548  65                 	db	101	;'e'
  1705  007549  20                 	db	32
  1706  00754A  73                 	db	115	;'s'
  1707  00754B  65                 	db	101	;'e'
  1708  00754C  74                 	db	116	;'t'
  1709  00754D  20                 	db	32
  1710  00754E  61                 	db	97	;'a'
  1711  00754F  73                 	db	115	;'s'
  1712  007550  20                 	db	32
  1713  007551  30                 	db	48	;'0'
  1714  007552  20                 	db	32
  1715  007553  6F                 	db	111	;'o'
  1716  007554  72                 	db	114	;'r'
  1717  007555  20                 	db	32
  1718  007556  31                 	db	49	;'1'
  1719  007557  2E                 	db	46
  1720  007558  0D                 	db	13
  1721  007559  0A                 	db	10
  1722  00755A  00                 	db	0
  1723  00755B                     STR_212:
  1724  00755B  4C                 	db	76	;'L'
  1725  00755C  4F                 	db	79	;'O'
  1726  00755D  4F                 	db	79	;'O'
  1727  00755E  50                 	db	80	;'P'
  1728  00755F  42                 	db	66	;'B'
  1729  007560  41                 	db	65	;'A'
  1730  007561  43                 	db	67	;'C'
  1731  007562  4B                 	db	75	;'K'
  1732  007563  20                 	db	32
  1733  007564  2D                 	db	45
  1734  007565  20                 	db	32
  1735  007566  4F                 	db	79	;'O'
  1736  007567  70                 	db	112	;'p'
  1737  007568  65                 	db	101	;'e'
  1738  007569  6E                 	db	110	;'n'
  1739  00756A  20                 	db	32
  1740  00756B  43                 	db	67	;'C'
  1741  00756C  41                 	db	65	;'A'
  1742  00756D  4E                 	db	78	;'N'
  1743  00756E  20                 	db	32
  1744  00756F  69                 	db	105	;'i'
  1745  007570  6E                 	db	110	;'n'
  1746  007571  74                 	db	116	;'t'
  1747  007572  65                 	db	101	;'e'
  1748  007573  72                 	db	114	;'r'
  1749  007574  66                 	db	102	;'f'
  1750  007575  61                 	db	97	;'a'
  1751  007576  63                 	db	99	;'c'
  1752  007577  65                 	db	101	;'e'
  1753  007578  20                 	db	32
  1754  007579  69                 	db	105	;'i'
  1755  00757A  6E                 	db	110	;'n'
  1756  00757B  20                 	db	32
  1757  00757C  6C                 	db	108	;'l'
  1758  00757D  6F                 	db	111	;'o'
  1759  00757E  6F                 	db	111	;'o'
  1760  00757F  70                 	db	112	;'p'
  1761  007580  62                 	db	98	;'b'
  1762  007581  61                 	db	97	;'a'
  1763  007582  63                 	db	99	;'c'
  1764  007583  6B                 	db	107	;'k'
  1765  007584  20                 	db	32
  1766  007585  6D                 	db	109	;'m'
  1767  007586  6F                 	db	111	;'o'
  1768  007587  64                 	db	100	;'d'
  1769  007588  65                 	db	101	;'e'
  1770  007589  2E                 	db	46
  1771  00758A  0D                 	db	13
  1772  00758B  0A                 	db	10
  1773  00758C  00                 	db	0
  1774  00758D                     STR_214:
  1775  00758D  56                 	db	86	;'V'
  1776  00758E  45                 	db	69	;'E'
  1777  00758F  52                 	db	82	;'R'
  1778  007590  53                 	db	83	;'S'
  1779  007591  49                 	db	73	;'I'
  1780  007592  4F                 	db	79	;'O'
  1781  007593  4E                 	db	78	;'N'
  1782  007594  20                 	db	32
  1783  007595  2D                 	db	45
  1784  007596  20                 	db	32
  1785  007597  44                 	db	68	;'D'
  1786  007598  69                 	db	105	;'i'
  1787  007599  73                 	db	115	;'s'
  1788  00759A  70                 	db	112	;'p'
  1789  00759B  6C                 	db	108	;'l'
  1790  00759C  61                 	db	97	;'a'
  1791  00759D  79                 	db	121	;'y'
  1792  00759E  20                 	db	32
  1793  00759F  66                 	db	102	;'f'
  1794  0075A0  69                 	db	105	;'i'
  1795  0075A1  72                 	db	114	;'r'
  1796  0075A2  6D                 	db	109	;'m'
  1797  0075A3  77                 	db	119	;'w'
  1798  0075A4  61                 	db	97	;'a'
  1799  0075A5  72                 	db	114	;'r'
  1800  0075A6  65                 	db	101	;'e'
  1801  0075A7  20                 	db	32
  1802  0075A8  76                 	db	118	;'v'
  1803  0075A9  65                 	db	101	;'e'
  1804  0075AA  72                 	db	114	;'r'
  1805  0075AB  73                 	db	115	;'s'
  1806  0075AC  69                 	db	105	;'i'
  1807  0075AD  6F                 	db	111	;'o'
  1808  0075AE  6E                 	db	110	;'n'
  1809  0075AF  20                 	db	32
  1810  0075B0  69                 	db	105	;'i'
  1811  0075B1  6E                 	db	110	;'n'
  1812  0075B2  66                 	db	102	;'f'
  1813  0075B3  6F                 	db	111	;'o'
  1814  0075B4  72                 	db	114	;'r'
  1815  0075B5  6D                 	db	109	;'m'
  1816  0075B6  61                 	db	97	;'a'
  1817  0075B7  74                 	db	116	;'t'
  1818  0075B8  69                 	db	105	;'i'
  1819  0075B9  6F                 	db	111	;'o'
  1820  0075BA  6E                 	db	110	;'n'
  1821  0075BB  2E                 	db	46
  1822  0075BC  0D                 	db	13
  1823  0075BD  0A                 	db	10
  1824  0075BE  00                 	db	0
  1825  0075BF                     STR_234:
  1826  0075BF  20                 	db	32
  1827  0075C0  20                 	db	32
  1828  0075C1  20                 	db	32
  1829  0075C2  20                 	db	32
  1830  0075C3  20                 	db	32
  1831  0075C4  20                 	db	32
  1832  0075C5  20                 	db	32
  1833  0075C6  20                 	db	32
  1834  0075C7  20                 	db	32
  1835  0075C8  20                 	db	32
  1836  0075C9  20                 	db	32
  1837  0075CA  20                 	db	32
  1838  0075CB  20                 	db	32
  1839  0075CC  20                 	db	32
  1840  0075CD  20                 	db	32
  1841  0075CE  20                 	db	32
  1842  0075CF  46                 	db	70	;'F'
  1843  0075D0  6F                 	db	111	;'o'
  1844  0075D1  72                 	db	114	;'r'
  1845  0075D2  6D                 	db	109	;'m'
  1846  0075D3  61                 	db	97	;'a'
  1847  0075D4  74                 	db	116	;'t'
  1848  0075D5  3A                 	db	58	;':'
  1849  0075D6  20                 	db	32
  1850  0075D7  73                 	db	115	;'s'
  1851  0075D8  65                 	db	101	;'e'
  1852  0075D9  74                 	db	116	;'t'
  1853  0075DA  20                 	db	32
  1854  0075DB  72                 	db	114	;'r'
  1855  0075DC  77                 	db	119	;'w'
  1856  0075DD  74                 	db	116	;'t'
  1857  0075DE  69                 	db	105	;'i'
  1858  0075DF  6D                 	db	109	;'m'
  1859  0075E0  65                 	db	101	;'e'
  1860  0075E1  6F                 	db	111	;'o'
  1861  0075E2  75                 	db	117	;'u'
  1862  0075E3  74                 	db	116	;'t'
  1863  0075E4  20                 	db	32
  1864  0075E5  74                 	db	116	;'t'
  1865  0075E6  69                 	db	105	;'i'
  1866  0075E7  6D                 	db	109	;'m'
  1867  0075E8  65                 	db	101	;'e'
  1868  0075E9  6F                 	db	111	;'o'
  1869  0075EA  75                 	db	117	;'u'
  1870  0075EB  74                 	db	116	;'t'
  1871  0075EC  2E                 	db	46
  1872  0075ED  0D                 	db	13
  1873  0075EE  0A                 	db	10
  1874  0075EF  00                 	db	0
  1875  0075F0                     STR_232:
  1876  0075F0  20                 	db	32
  1877  0075F1  20                 	db	32
  1878  0075F2  20                 	db	32
  1879  0075F3  20                 	db	32
  1880  0075F4  44                 	db	68	;'D'
  1881  0075F5  45                 	db	69	;'E'
  1882  0075F6  43                 	db	67	;'C'
  1883  0075F7  49                 	db	73	;'I'
  1884  0075F8  4D                 	db	77	;'M'
  1885  0075F9  41                 	db	65	;'A'
  1886  0075FA  4C                 	db	76	;'L'
  1887  0075FB  20                 	db	32
  1888  0075FC  2D                 	db	45
  1889  0075FD  20                 	db	32
  1890  0075FE  44                 	db	68	;'D'
  1891  0075FF  69                 	db	105	;'i'
  1892  007600  73                 	db	115	;'s'
  1893  007601  70                 	db	112	;'p'
  1894  007602  6C                 	db	108	;'l'
  1895  007603  61                 	db	97	;'a'
  1896  007604  79                 	db	121	;'y'
  1897  007605  20                 	db	32
  1898  007606  6E                 	db	110	;'n'
  1899  007607  75                 	db	117	;'u'
  1900  007608  6D                 	db	109	;'m'
  1901  007609  65                 	db	101	;'e'
  1902  00760A  72                 	db	114	;'r'
  1903  00760B  69                 	db	105	;'i'
  1904  00760C  63                 	db	99	;'c'
  1905  00760D  61                 	db	97	;'a'
  1906  00760E  6C                 	db	108	;'l'
  1907  00760F  73                 	db	115	;'s'
  1908  007610  20                 	db	32
  1909  007611  69                 	db	105	;'i'
  1910  007612  6E                 	db	110	;'n'
  1911  007613  20                 	db	32
  1912  007614  64                 	db	100	;'d'
  1913  007615  65                 	db	101	;'e'
  1914  007616  63                 	db	99	;'c'
  1915  007617  69                 	db	105	;'i'
  1916  007618  6D                 	db	109	;'m'
  1917  007619  61                 	db	97	;'a'
  1918  00761A  6C                 	db	108	;'l'
  1919  00761B  2E                 	db	46
  1920  00761C  0D                 	db	13
  1921  00761D  0A                 	db	10
  1922  00761E  00                 	db	0
  1923  00761F                     STR_231:
  1924  00761F  20                 	db	32
  1925  007620  20                 	db	32
  1926  007621  20                 	db	32
  1927  007622  20                 	db	32
  1928  007623  48                 	db	72	;'H'
  1929  007624  45                 	db	69	;'E'
  1930  007625  58                 	db	88	;'X'
  1931  007626  20                 	db	32
  1932  007627  2D                 	db	45
  1933  007628  20                 	db	32
  1934  007629  44                 	db	68	;'D'
  1935  00762A  69                 	db	105	;'i'
  1936  00762B  73                 	db	115	;'s'
  1937  00762C  70                 	db	112	;'p'
  1938  00762D  6C                 	db	108	;'l'
  1939  00762E  61                 	db	97	;'a'
  1940  00762F  79                 	db	121	;'y'
  1941  007630  20                 	db	32
  1942  007631  6E                 	db	110	;'n'
  1943  007632  75                 	db	117	;'u'
  1944  007633  6D                 	db	109	;'m'
  1945  007634  65                 	db	101	;'e'
  1946  007635  72                 	db	114	;'r'
  1947  007636  69                 	db	105	;'i'
  1948  007637  63                 	db	99	;'c'
  1949  007638  61                 	db	97	;'a'
  1950  007639  6C                 	db	108	;'l'
  1951  00763A  73                 	db	115	;'s'
  1952  00763B  20                 	db	32
  1953  00763C  69                 	db	105	;'i'
  1954  00763D  6E                 	db	110	;'n'
  1955  00763E  20                 	db	32
  1956  00763F  68                 	db	104	;'h'
  1957  007640  65                 	db	101	;'e'
  1958  007641  78                 	db	120	;'x'
  1959  007642  61                 	db	97	;'a'
  1960  007643  64                 	db	100	;'d'
  1961  007644  65                 	db	101	;'e'
  1962  007645  63                 	db	99	;'c'
  1963  007646  69                 	db	105	;'i'
  1964  007647  6D                 	db	109	;'m'
  1965  007648  61                 	db	97	;'a'
  1966  007649  6C                 	db	108	;'l'
  1967  00764A  2E                 	db	46
  1968  00764B  0D                 	db	13
  1969  00764C  0A                 	db	10
  1970  00764D  00                 	db	0
  1971  00764E                     STR_222:
  1972  00764E  46                 	db	70	;'F'
  1973  00764F  49                 	db	73	;'I'
  1974  007650  4E                 	db	78	;'N'
  1975  007651  44                 	db	68	;'D'
  1976  007652  20                 	db	32
  1977  007653  2D                 	db	45
  1978  007654  20                 	db	32
  1979  007655  46                 	db	70	;'F'
  1980  007656  69                 	db	105	;'i'
  1981  007657  6E                 	db	110	;'n'
  1982  007658  64                 	db	100	;'d'
  1983  007659  20                 	db	32
  1984  00765A  61                 	db	97	;'a'
  1985  00765B  76                 	db	118	;'v'
  1986  00765C  61                 	db	97	;'a'
  1987  00765D  69                 	db	105	;'i'
  1988  00765E  6C                 	db	108	;'l'
  1989  00765F  61                 	db	97	;'a'
  1990  007660  62                 	db	98	;'b'
  1991  007661  6C                 	db	108	;'l'
  1992  007662  65                 	db	101	;'e'
  1993  007663  20                 	db	32
  1994  007664  43                 	db	67	;'C'
  1995  007665  41                 	db	65	;'A'
  1996  007666  4E                 	db	78	;'N'
  1997  007667  34                 	db	52	;'4'
  1998  007668  56                 	db	86	;'V'
  1999  007669  53                 	db	83	;'S'
  2000  00766A  43                 	db	67	;'C'
  2001  00766B  50                 	db	80	;'P'
  2002  00766C  20                 	db	32
  2003  00766D  6E                 	db	110	;'n'
  2004  00766E  6F                 	db	111	;'o'
  2005  00766F  64                 	db	100	;'d'
  2006  007670  65                 	db	101	;'e'
  2007  007671  73                 	db	115	;'s'
  2008  007672  20                 	db	32
  2009  007673  6F                 	db	111	;'o'
  2010  007674  6E                 	db	110	;'n'
  2011  007675  20                 	db	32
  2012  007676  62                 	db	98	;'b'
  2013  007677  75                 	db	117	;'u'
  2014  007678  73                 	db	115	;'s'
  2015  007679  2E                 	db	46
  2016  00767A  0D                 	db	13
  2017  00767B  0A                 	db	10
  2018  00767C  00                 	db	0
  2019  00767D                     STR_210:
  2020  00767D  53                 	db	83	;'S'
  2021  00767E  49                 	db	73	;'I'
  2022  00767F  4C                 	db	76	;'L'
  2023  007680  45                 	db	69	;'E'
  2024  007681  4E                 	db	78	;'N'
  2025  007682  54                 	db	84	;'T'
  2026  007683  20                 	db	32
  2027  007684  2D                 	db	45
  2028  007685  20                 	db	32
  2029  007686  4F                 	db	79	;'O'
  2030  007687  70                 	db	112	;'p'
  2031  007688  65                 	db	101	;'e'
  2032  007689  6E                 	db	110	;'n'
  2033  00768A  20                 	db	32
  2034  00768B  43                 	db	67	;'C'
  2035  00768C  41                 	db	65	;'A'
  2036  00768D  4E                 	db	78	;'N'
  2037  00768E  20                 	db	32
  2038  00768F  69                 	db	105	;'i'
  2039  007690  6E                 	db	110	;'n'
  2040  007691  74                 	db	116	;'t'
  2041  007692  65                 	db	101	;'e'
  2042  007693  72                 	db	114	;'r'
  2043  007694  66                 	db	102	;'f'
  2044  007695  61                 	db	97	;'a'
  2045  007696  63                 	db	99	;'c'
  2046  007697  65                 	db	101	;'e'
  2047  007698  20                 	db	32
  2048  007699  69                 	db	105	;'i'
  2049  00769A  6E                 	db	110	;'n'
  2050  00769B  20                 	db	32
  2051  00769C  73                 	db	115	;'s'
  2052  00769D  69                 	db	105	;'i'
  2053  00769E  6C                 	db	108	;'l'
  2054  00769F  65                 	db	101	;'e'
  2055  0076A0  6E                 	db	110	;'n'
  2056  0076A1  74                 	db	116	;'t'
  2057  0076A2  20                 	db	32
  2058  0076A3  6D                 	db	109	;'m'
  2059  0076A4  6F                 	db	111	;'o'
  2060  0076A5  64                 	db	100	;'d'
  2061  0076A6  65                 	db	101	;'e'
  2062  0076A7  2E                 	db	46
  2063  0076A8  0D                 	db	13
  2064  0076A9  0A                 	db	10
  2065  0076AA  00                 	db	0
  2066  0076AB                     STR_215:
  2067  0076AB  49                 	db	73	;'I'
  2068  0076AC  46                 	db	70	;'F'
  2069  0076AD  4D                 	db	77	;'M'
  2070  0076AE  4F                 	db	79	;'O'
  2071  0076AF  44                 	db	68	;'D'
  2072  0076B0  45                 	db	69	;'E'
  2073  0076B1  20                 	db	32
  2074  0076B2  2D                 	db	45
  2075  0076B3  20                 	db	32
  2076  0076B4  44                 	db	68	;'D'
  2077  0076B5  69                 	db	105	;'i'
  2078  0076B6  73                 	db	115	;'s'
  2079  0076B7  70                 	db	112	;'p'
  2080  0076B8  6C                 	db	108	;'l'
  2081  0076B9  61                 	db	97	;'a'
  2082  0076BA  79                 	db	121	;'y'
  2083  0076BB  20                 	db	32
  2084  0076BC  73                 	db	115	;'s'
  2085  0076BD  65                 	db	101	;'e'
  2086  0076BE  6C                 	db	108	;'l'
  2087  0076BF  65                 	db	101	;'e'
  2088  0076C0  63                 	db	99	;'c'
  2089  0076C1  74                 	db	116	;'t'
  2090  0076C2  65                 	db	101	;'e'
  2091  0076C3  64                 	db	100	;'d'
  2092  0076C4  20                 	db	32
  2093  0076C5  69                 	db	105	;'i'
  2094  0076C6  6E                 	db	110	;'n'
  2095  0076C7  74                 	db	116	;'t'
  2096  0076C8  65                 	db	101	;'e'
  2097  0076C9  72                 	db	114	;'r'
  2098  0076CA  66                 	db	102	;'f'
  2099  0076CB  61                 	db	97	;'a'
  2100  0076CC  63                 	db	99	;'c'
  2101  0076CD  65                 	db	101	;'e'
  2102  0076CE  20                 	db	32
  2103  0076CF  6D                 	db	109	;'m'
  2104  0076D0  6F                 	db	111	;'o'
  2105  0076D1  64                 	db	100	;'d'
  2106  0076D2  65                 	db	101	;'e'
  2107  0076D3  2E                 	db	46
  2108  0076D4  0D                 	db	13
  2109  0076D5  0A                 	db	10
  2110  0076D6  00                 	db	0
  2111  0076D7                     STR_209:
  2112  0076D7  4F                 	db	79	;'O'
  2113  0076D8  50                 	db	80	;'P'
  2114  0076D9  45                 	db	69	;'E'
  2115  0076DA  4E                 	db	78	;'N'
  2116  0076DB  20                 	db	32
  2117  0076DC  2D                 	db	45
  2118  0076DD  20                 	db	32
  2119  0076DE  4F                 	db	79	;'O'
  2120  0076DF  70                 	db	112	;'p'
  2121  0076E0  65                 	db	101	;'e'
  2122  0076E1  6E                 	db	110	;'n'
  2123  0076E2  20                 	db	32
  2124  0076E3  43                 	db	67	;'C'
  2125  0076E4  41                 	db	65	;'A'
  2126  0076E5  4E                 	db	78	;'N'
  2127  0076E6  20                 	db	32
  2128  0076E7  69                 	db	105	;'i'
  2129  0076E8  6E                 	db	110	;'n'
  2130  0076E9  74                 	db	116	;'t'
  2131  0076EA  65                 	db	101	;'e'
  2132  0076EB  72                 	db	114	;'r'
  2133  0076EC  66                 	db	102	;'f'
  2134  0076ED  61                 	db	97	;'a'
  2135  0076EE  63                 	db	99	;'c'
  2136  0076EF  65                 	db	101	;'e'
  2137  0076F0  20                 	db	32
  2138  0076F1  69                 	db	105	;'i'
  2139  0076F2  6E                 	db	110	;'n'
  2140  0076F3  20                 	db	32
  2141  0076F4  6E                 	db	110	;'n'
  2142  0076F5  6F                 	db	111	;'o'
  2143  0076F6  72                 	db	114	;'r'
  2144  0076F7  6D                 	db	109	;'m'
  2145  0076F8  61                 	db	97	;'a'
  2146  0076F9  6C                 	db	108	;'l'
  2147  0076FA  20                 	db	32
  2148  0076FB  6D                 	db	109	;'m'
  2149  0076FC  6F                 	db	111	;'o'
  2150  0076FD  64                 	db	100	;'d'
  2151  0076FE  65                 	db	101	;'e'
  2152  0076FF  2E                 	db	46
  2153  007700  0D                 	db	13
  2154  007701  0A                 	db	10
  2155  007702  00                 	db	0
  2156  007703                     STR_115:
  2157  007703  2B                 	db	43
  2158  007704  4F                 	db	79	;'O'
  2159  007705  4B                 	db	75	;'K'
  2160  007706  20                 	db	32
  2161  007707  2D                 	db	45
  2162  007708  20                 	db	32
  2163  007709  4E                 	db	78	;'N'
  2164  00770A  75                 	db	117	;'u'
  2165  00770B  6D                 	db	109	;'m'
  2166  00770C  65                 	db	101	;'e'
  2167  00770D  72                 	db	114	;'r'
  2168  00770E  69                 	db	105	;'i'
  2169  00770F  63                 	db	99	;'c'
  2170  007710  61                 	db	97	;'a'
  2171  007711  6C                 	db	108	;'l'
  2172  007712  20                 	db	32
  2173  007713  6F                 	db	111	;'o'
  2174  007714  75                 	db	117	;'u'
  2175  007715  74                 	db	116	;'t'
  2176  007716  70                 	db	112	;'p'
  2177  007717  75                 	db	117	;'u'
  2178  007718  74                 	db	116	;'t'
  2179  007719  20                 	db	32
  2180  00771A  6E                 	db	110	;'n'
  2181  00771B  6F                 	db	111	;'o'
  2182  00771C  77                 	db	119	;'w'
  2183  00771D  20                 	db	32
  2184  00771E  69                 	db	105	;'i'
  2185  00771F  6E                 	db	110	;'n'
  2186  007720  20                 	db	32
  2187  007721  68                 	db	104	;'h'
  2188  007722  65                 	db	101	;'e'
  2189  007723  78                 	db	120	;'x'
  2190  007724  61                 	db	97	;'a'
  2191  007725  64                 	db	100	;'d'
  2192  007726  65                 	db	101	;'e'
  2193  007727  63                 	db	99	;'c'
  2194  007728  69                 	db	105	;'i'
  2195  007729  6D                 	db	109	;'m'
  2196  00772A  61                 	db	97	;'a'
  2197  00772B  6C                 	db	108	;'l'
  2198  00772C  0D                 	db	13
  2199  00772D  0A                 	db	10
  2200  00772E  00                 	db	0
  2201  00772F                     STR_92:
  2202  00772F  2D                 	db	45
  2203  007730  45                 	db	69	;'E'
  2204  007731  52                 	db	82	;'R'
  2205  007732  52                 	db	82	;'R'
  2206  007733  4F                 	db	79	;'O'
  2207  007734  52                 	db	82	;'R'
  2208  007735  20                 	db	32
  2209  007736  2D                 	db	45
  2210  007737  20                 	db	32
  2211  007738  66                 	db	102	;'f'
  2212  007739  69                 	db	105	;'i'
  2213  00773A  6C                 	db	108	;'l'
  2214  00773B  74                 	db	116	;'t'
  2215  00773C  65                 	db	101	;'e'
  2216  00773D  72                 	db	114	;'r'
  2217  00773E  20                 	db	32
  2218  00773F  66                 	db	102	;'f'
  2219  007740  6F                 	db	111	;'o'
  2220  007741  72                 	db	114	;'r'
  2221  007742  20                 	db	32
  2222  007743  70                 	db	112	;'p'
  2223  007744  72                 	db	114	;'r'
  2224  007745  69                 	db	105	;'i'
  2225  007746  6F                 	db	111	;'o'
  2226  007747  72                 	db	114	;'r'
  2227  007748  69                 	db	105	;'i'
  2228  007749  74                 	db	116	;'t'
  2229  00774A  79                 	db	121	;'y'
  2230  00774B  20                 	db	32
  2231  00774C  69                 	db	105	;'i'
  2232  00774D  73                 	db	115	;'s'
  2233  00774E  20                 	db	32
  2234  00774F  6D                 	db	109	;'m'
  2235  007750  69                 	db	105	;'i'
  2236  007751  73                 	db	115	;'s'
  2237  007752  73                 	db	115	;'s'
  2238  007753  69                 	db	105	;'i'
  2239  007754  6E                 	db	110	;'n'
  2240  007755  67                 	db	103	;'g'
  2241  007756  0D                 	db	13
  2242  007757  0A                 	db	10
  2243  007758  00                 	db	0
  2244  007759                     STR_98:
  2245  007759  2D                 	db	45
  2246  00775A  45                 	db	69	;'E'
  2247  00775B  52                 	db	82	;'R'
  2248  00775C  52                 	db	82	;'R'
  2249  00775D  4F                 	db	79	;'O'
  2250  00775E  52                 	db	82	;'R'
  2251  00775F  20                 	db	32
  2252  007760  2D                 	db	45
  2253  007761  20                 	db	32
  2254  007762  66                 	db	102	;'f'
  2255  007763  69                 	db	105	;'i'
  2256  007764  6C                 	db	108	;'l'
  2257  007765  74                 	db	116	;'t'
  2258  007766  65                 	db	101	;'e'
  2259  007767  72                 	db	114	;'r'
  2260  007768  20                 	db	32
  2261  007769  66                 	db	102	;'f'
  2262  00776A  6F                 	db	111	;'o'
  2263  00776B  72                 	db	114	;'r'
  2264  00776C  20                 	db	32
  2265  00776D  6E                 	db	110	;'n'
  2266  00776E  69                 	db	105	;'i'
  2267  00776F  64                 	db	100	;'d'
  2268  007770  65                 	db	101	;'e'
  2269  007771  20                 	db	32
  2270  007772  69                 	db	105	;'i'
  2271  007773  64                 	db	100	;'d'
  2272  007774  20                 	db	32
  2273  007775  69                 	db	105	;'i'
  2274  007776  73                 	db	115	;'s'
  2275  007777  20                 	db	32
  2276  007778  6D                 	db	109	;'m'
  2277  007779  69                 	db	105	;'i'
  2278  00777A  73                 	db	115	;'s'
  2279  00777B  73                 	db	115	;'s'
  2280  00777C  69                 	db	105	;'i'
  2281  00777D  6E                 	db	110	;'n'
  2282  00777E  67                 	db	103	;'g'
  2283  00777F  0D                 	db	13
  2284  007780  0A                 	db	10
  2285  007781  00                 	db	0
  2286  007782                     STR_221:
  2287  007782  48                 	db	72	;'H'
  2288  007783  45                 	db	69	;'E'
  2289  007784  4C                 	db	76	;'L'
  2290  007785  50                 	db	80	;'P'
  2291  007786  20                 	db	32
  2292  007787  2D                 	db	45
  2293  007788  20                 	db	32
  2294  007789  44                 	db	68	;'D'
  2295  00778A  69                 	db	105	;'i'
  2296  00778B  73                 	db	115	;'s'
  2297  00778C  70                 	db	112	;'p'
  2298  00778D  6C                 	db	108	;'l'
  2299  00778E  61                 	db	97	;'a'
  2300  00778F  79                 	db	121	;'y'
  2301  007790  20                 	db	32
  2302  007791  74                 	db	116	;'t'
  2303  007792  68                 	db	104	;'h'
  2304  007793  69                 	db	105	;'i'
  2305  007794  73                 	db	115	;'s'
  2306  007795  20                 	db	32
  2307  007796  68                 	db	104	;'h'
  2308  007797  65                 	db	101	;'e'
  2309  007798  6C                 	db	108	;'l'
  2310  007799  70                 	db	112	;'p'
  2311  00779A  20                 	db	32
  2312  00779B  69                 	db	105	;'i'
  2313  00779C  6E                 	db	110	;'n'
  2314  00779D  66                 	db	102	;'f'
  2315  00779E  6F                 	db	111	;'o'
  2316  00779F  72                 	db	114	;'r'
  2317  0077A0  6D                 	db	109	;'m'
  2318  0077A1  61                 	db	97	;'a'
  2319  0077A2  74                 	db	116	;'t'
  2320  0077A3  69                 	db	105	;'i'
  2321  0077A4  6F                 	db	111	;'o'
  2322  0077A5  6E                 	db	110	;'n'
  2323  0077A6  2E                 	db	46
  2324  0077A7  0D                 	db	13
  2325  0077A8  0A                 	db	10
  2326  0077A9  00                 	db	0
  2327  0077AA                     STR_105:
  2328  0077AA  2D                 	db	45
  2329  0077AB  45                 	db	69	;'E'
  2330  0077AC  52                 	db	82	;'R'
  2331  0077AD  52                 	db	82	;'R'
  2332  0077AE  4F                 	db	79	;'O'
  2333  0077AF  52                 	db	82	;'R'
  2334  0077B0  20                 	db	32
  2335  0077B1  2D                 	db	45
  2336  0077B2  20                 	db	32
  2337  0077B3  6D                 	db	109	;'m'
  2338  0077B4  61                 	db	97	;'a'
  2339  0077B5  73                 	db	115	;'s'
  2340  0077B6  6B                 	db	107	;'k'
  2341  0077B7  20                 	db	32
  2342  0077B8  66                 	db	102	;'f'
  2343  0077B9  6F                 	db	111	;'o'
  2344  0077BA  72                 	db	114	;'r'
  2345  0077BB  20                 	db	32
  2346  0077BC  70                 	db	112	;'p'
  2347  0077BD  72                 	db	114	;'r'
  2348  0077BE  69                 	db	105	;'i'
  2349  0077BF  6F                 	db	111	;'o'
  2350  0077C0  72                 	db	114	;'r'
  2351  0077C1  69                 	db	105	;'i'
  2352  0077C2  74                 	db	116	;'t'
  2353  0077C3  79                 	db	121	;'y'
  2354  0077C4  20                 	db	32
  2355  0077C5  69                 	db	105	;'i'
  2356  0077C6  73                 	db	115	;'s'
  2357  0077C7  20                 	db	32
  2358  0077C8  6D                 	db	109	;'m'
  2359  0077C9  69                 	db	105	;'i'
  2360  0077CA  73                 	db	115	;'s'
  2361  0077CB  73                 	db	115	;'s'
  2362  0077CC  69                 	db	105	;'i'
  2363  0077CD  6E                 	db	110	;'n'
  2364  0077CE  67                 	db	103	;'g'
  2365  0077CF  0D                 	db	13
  2366  0077D0  0A                 	db	10
  2367  0077D1  00                 	db	0
  2368  0077D2                     STR_117:
  2369  0077D2  2B                 	db	43
  2370  0077D3  4F                 	db	79	;'O'
  2371  0077D4  4B                 	db	75	;'K'
  2372  0077D5  20                 	db	32
  2373  0077D6  2D                 	db	45
  2374  0077D7  20                 	db	32
  2375  0077D8  4E                 	db	78	;'N'
  2376  0077D9  75                 	db	117	;'u'
  2377  0077DA  6D                 	db	109	;'m'
  2378  0077DB  65                 	db	101	;'e'
  2379  0077DC  72                 	db	114	;'r'
  2380  0077DD  69                 	db	105	;'i'
  2381  0077DE  63                 	db	99	;'c'
  2382  0077DF  61                 	db	97	;'a'
  2383  0077E0  6C                 	db	108	;'l'
  2384  0077E1  20                 	db	32
  2385  0077E2  6F                 	db	111	;'o'
  2386  0077E3  75                 	db	117	;'u'
  2387  0077E4  74                 	db	116	;'t'
  2388  0077E5  70                 	db	112	;'p'
  2389  0077E6  75                 	db	117	;'u'
  2390  0077E7  74                 	db	116	;'t'
  2391  0077E8  20                 	db	32
  2392  0077E9  6E                 	db	110	;'n'
  2393  0077EA  6F                 	db	111	;'o'
  2394  0077EB  77                 	db	119	;'w'
  2395  0077EC  20                 	db	32
  2396  0077ED  69                 	db	105	;'i'
  2397  0077EE  6E                 	db	110	;'n'
  2398  0077EF  20                 	db	32
  2399  0077F0  64                 	db	100	;'d'
  2400  0077F1  65                 	db	101	;'e'
  2401  0077F2  63                 	db	99	;'c'
  2402  0077F3  69                 	db	105	;'i'
  2403  0077F4  6D                 	db	109	;'m'
  2404  0077F5  61                 	db	97	;'a'
  2405  0077F6  6C                 	db	108	;'l'
  2406  0077F7  0D                 	db	13
  2407  0077F8  0A                 	db	10
  2408  0077F9  00                 	db	0
  2409  0077FA                     STR_90:
  2410  0077FA  2D                 	db	45
  2411  0077FB  45                 	db	69	;'E'
  2412  0077FC  52                 	db	82	;'R'
  2413  0077FD  52                 	db	82	;'R'
  2414  0077FE  4F                 	db	79	;'O'
  2415  0077FF  52                 	db	82	;'R'
  2416  007800  20                 	db	32
  2417  007801  2D                 	db	45
  2418  007802  20                 	db	32
  2419  007803  4E                 	db	78	;'N'
  2420  007804  6F                 	db	111	;'o'
  2421  007805  20                 	db	32
  2422  007806  66                 	db	102	;'f'
  2423  007807  69                 	db	105	;'i'
  2424  007808  6C                 	db	108	;'l'
  2425  007809  74                 	db	116	;'t'
  2426  00780A  65                 	db	101	;'e'
  2427  00780B  72                 	db	114	;'r'
  2428  00780C  20                 	db	32
  2429  00780D  6E                 	db	110	;'n'
  2430  00780E  75                 	db	117	;'u'
  2431  00780F  6D                 	db	109	;'m'
  2432  007810  62                 	db	98	;'b'
  2433  007811  65                 	db	101	;'e'
  2434  007812  72                 	db	114	;'r'
  2435  007813  20                 	db	32
  2436  007814  73                 	db	115	;'s'
  2437  007815  70                 	db	112	;'p'
  2438  007816  65                 	db	101	;'e'
  2439  007817  63                 	db	99	;'c'
  2440  007818  69                 	db	105	;'i'
  2441  007819  66                 	db	102	;'f'
  2442  00781A  69                 	db	105	;'i'
  2443  00781B  65                 	db	101	;'e'
  2444  00781C  64                 	db	100	;'d'
  2445  00781D  2E                 	db	46
  2446  00781E  0D                 	db	13
  2447  00781F  0A                 	db	10
  2448  007820  00                 	db	0
  2449  007821                     STR_220:
  2450  007821  45                 	db	69	;'E'
  2451  007822  52                 	db	82	;'R'
  2452  007823  52                 	db	82	;'R'
  2453  007824  20                 	db	32
  2454  007825  2D                 	db	45
  2455  007826  20                 	db	32
  2456  007827  44                 	db	68	;'D'
  2457  007828  69                 	db	105	;'i'
  2458  007829  73                 	db	115	;'s'
  2459  00782A  70                 	db	112	;'p'
  2460  00782B  6C                 	db	108	;'l'
  2461  00782C  61                 	db	97	;'a'
  2462  00782D  79                 	db	121	;'y'
  2463  00782E  20                 	db	32
  2464  00782F  43                 	db	67	;'C'
  2465  007830  41                 	db	65	;'A'
  2466  007831  4E                 	db	78	;'N'
  2467  007832  20                 	db	32
  2468  007833  65                 	db	101	;'e'
  2469  007834  72                 	db	114	;'r'
  2470  007835  72                 	db	114	;'r'
  2471  007836  6F                 	db	111	;'o'
  2472  007837  72                 	db	114	;'r'
  2473  007838  20                 	db	32
  2474  007839  69                 	db	105	;'i'
  2475  00783A  6E                 	db	110	;'n'
  2476  00783B  66                 	db	102	;'f'
  2477  00783C  6F                 	db	111	;'o'
  2478  00783D  72                 	db	114	;'r'
  2479  00783E  6D                 	db	109	;'m'
  2480  00783F  61                 	db	97	;'a'
  2481  007840  74                 	db	116	;'t'
  2482  007841  69                 	db	105	;'i'
  2483  007842  6F                 	db	111	;'o'
  2484  007843  6E                 	db	110	;'n'
  2485  007844  2E                 	db	46
  2486  007845  0D                 	db	13
  2487  007846  0A                 	db	10
  2488  007847  00                 	db	0
  2489  007848                     STR_206:
  2490  007848  48                 	db	72	;'H'
  2491  007849  65                 	db	101	;'e'
  2492  00784A  6C                 	db	108	;'l'
  2493  00784B  70                 	db	112	;'p'
  2494  00784C  20                 	db	32
  2495  00784D  66                 	db	102	;'f'
  2496  00784E  6F                 	db	111	;'o'
  2497  00784F  72                 	db	114	;'r'
  2498  007850  20                 	db	32
  2499  007851  74                 	db	116	;'t'
  2500  007852  68                 	db	104	;'h'
  2501  007853  65                 	db	101	;'e'
  2502  007854  20                 	db	32
  2503  007855  46                 	db	70	;'F'
  2504  007856  72                 	db	114	;'r'
  2505  007857  61                 	db	97	;'a'
  2506  007858  6E                 	db	110	;'n'
  2507  007859  6B                 	db	107	;'k'
  2508  00785A  66                 	db	102	;'f'
  2509  00785B  75                 	db	117	;'u'
  2510  00785C  72                 	db	114	;'r'
  2511  00785D  74                 	db	116	;'t'
  2512  00785E  20                 	db	32
  2513  00785F  52                 	db	82	;'R'
  2514  007860  53                 	db	83	;'S'
  2515  007861  2D                 	db	45
  2516  007862  32                 	db	50	;'2'
  2517  007863  33                 	db	51	;'3'
  2518  007864  32                 	db	50	;'2'
  2519  007865  20                 	db	32
  2520  007866  6D                 	db	109	;'m'
  2521  007867  6F                 	db	111	;'o'
  2522  007868  64                 	db	100	;'d'
  2523  007869  75                 	db	117	;'u'
  2524  00786A  6C                 	db	108	;'l'
  2525  00786B  65                 	db	101	;'e'
  2526  00786C  0D                 	db	13
  2527  00786D  0A                 	db	10
  2528  00786E  00                 	db	0
  2529  00786F                     STR_111:
  2530  00786F  2D                 	db	45
  2531  007870  45                 	db	69	;'E'
  2532  007871  52                 	db	82	;'R'
  2533  007872  52                 	db	82	;'R'
  2534  007873  4F                 	db	79	;'O'
  2535  007874  52                 	db	82	;'R'
  2536  007875  20                 	db	32
  2537  007876  2D                 	db	45
  2538  007877  20                 	db	32
  2539  007878  6D                 	db	109	;'m'
  2540  007879  61                 	db	97	;'a'
  2541  00787A  73                 	db	115	;'s'
  2542  00787B  6B                 	db	107	;'k'
  2543  00787C  20                 	db	32
  2544  00787D  66                 	db	102	;'f'
  2545  00787E  6F                 	db	111	;'o'
  2546  00787F  72                 	db	114	;'r'
  2547  007880  20                 	db	32
  2548  007881  6E                 	db	110	;'n'
  2549  007882  69                 	db	105	;'i'
  2550  007883  64                 	db	100	;'d'
  2551  007884  65                 	db	101	;'e'
  2552  007885  20                 	db	32
  2553  007886  69                 	db	105	;'i'
  2554  007887  64                 	db	100	;'d'
  2555  007888  20                 	db	32
  2556  007889  69                 	db	105	;'i'
  2557  00788A  73                 	db	115	;'s'
  2558  00788B  20                 	db	32
  2559  00788C  6D                 	db	109	;'m'
  2560  00788D  69                 	db	105	;'i'
  2561  00788E  73                 	db	115	;'s'
  2562  00788F  73                 	db	115	;'s'
  2563  007890  69                 	db	105	;'i'
  2564  007891  6E                 	db	110	;'n'
  2565  007892  67                 	db	103	;'g'
  2566  007893  0D                 	db	13
  2567  007894  0A                 	db	10
  2568  007895  00                 	db	0
  2569  007896                     STR_94:
  2570  007896  2D                 	db	45
  2571  007897  45                 	db	69	;'E'
  2572  007898  52                 	db	82	;'R'
  2573  007899  52                 	db	82	;'R'
  2574  00789A  4F                 	db	79	;'O'
  2575  00789B  52                 	db	82	;'R'
  2576  00789C  20                 	db	32
  2577  00789D  2D                 	db	45
  2578  00789E  20                 	db	32
  2579  00789F  66                 	db	102	;'f'
  2580  0078A0  69                 	db	105	;'i'
  2581  0078A1  6C                 	db	108	;'l'
  2582  0078A2  74                 	db	116	;'t'
  2583  0078A3  65                 	db	101	;'e'
  2584  0078A4  72                 	db	114	;'r'
  2585  0078A5  20                 	db	32
  2586  0078A6  66                 	db	102	;'f'
  2587  0078A7  6F                 	db	111	;'o'
  2588  0078A8  72                 	db	114	;'r'
  2589  0078A9  20                 	db	32
  2590  0078AA  63                 	db	99	;'c'
  2591  0078AB  6C                 	db	108	;'l'
  2592  0078AC  61                 	db	97	;'a'
  2593  0078AD  73                 	db	115	;'s'
  2594  0078AE  73                 	db	115	;'s'
  2595  0078AF  20                 	db	32
  2596  0078B0  69                 	db	105	;'i'
  2597  0078B1  73                 	db	115	;'s'
  2598  0078B2  20                 	db	32
  2599  0078B3  6D                 	db	109	;'m'
  2600  0078B4  69                 	db	105	;'i'
  2601  0078B5  73                 	db	115	;'s'
  2602  0078B6  73                 	db	115	;'s'
  2603  0078B7  69                 	db	105	;'i'
  2604  0078B8  6E                 	db	110	;'n'
  2605  0078B9  67                 	db	103	;'g'
  2606  0078BA  0D                 	db	13
  2607  0078BB  0A                 	db	10
  2608  0078BC  00                 	db	0
  2609  0078BD                     STR_237:
  2610  0078BD  20                 	db	32
  2611  0078BE  20                 	db	32
  2612  0078BF  20                 	db	32
  2613  0078C0  20                 	db	32
  2614  0078C1  20                 	db	32
  2615  0078C2  20                 	db	32
  2616  0078C3  20                 	db	32
  2617  0078C4  20                 	db	32
  2618  0078C5  20                 	db	32
  2619  0078C6  20                 	db	32
  2620  0078C7  20                 	db	32
  2621  0078C8  4D                 	db	77	;'M'
  2622  0078C9  6F                 	db	111	;'o'
  2623  0078CA  64                 	db	100	;'d'
  2624  0078CB  65                 	db	101	;'e'
  2625  0078CC  73                 	db	115	;'s'
  2626  0078CD  3A                 	db	58	;':'
  2627  0078CE  20                 	db	32
  2628  0078CF  76                 	db	118	;'v'
  2629  0078D0  65                 	db	101	;'e'
  2630  0078D1  72                 	db	114	;'r'
  2631  0078D2  62                 	db	98	;'b'
  2632  0078D3  6F                 	db	111	;'o'
  2633  0078D4  73                 	db	115	;'s'
  2634  0078D5  65                 	db	101	;'e'
  2635  0078D6  7C                 	db	124
  2636  0078D7  76                 	db	118	;'v'
  2637  0078D8  73                 	db	115	;'s'
  2638  0078D9  63                 	db	99	;'c'
  2639  0078DA  70                 	db	112	;'p'
  2640  0078DB  7C                 	db	124
  2641  0078DC  73                 	db	115	;'s'
  2642  0078DD  6C                 	db	108	;'l'
  2643  0078DE  63                 	db	99	;'c'
  2644  0078DF  61                 	db	97	;'a'
  2645  0078E0  6E                 	db	110	;'n'
  2646  0078E1  0D                 	db	13
  2647  0078E2  0A                 	db	10
  2648  0078E3  00                 	db	0
  2649  0078E4                     STR_96:
  2650  0078E4  2D                 	db	45
  2651  0078E5  45                 	db	69	;'E'
  2652  0078E6  52                 	db	82	;'R'
  2653  0078E7  52                 	db	82	;'R'
  2654  0078E8  4F                 	db	79	;'O'
  2655  0078E9  52                 	db	82	;'R'
  2656  0078EA  20                 	db	32
  2657  0078EB  2D                 	db	45
  2658  0078EC  20                 	db	32
  2659  0078ED  66                 	db	102	;'f'
  2660  0078EE  69                 	db	105	;'i'
  2661  0078EF  6C                 	db	108	;'l'
  2662  0078F0  74                 	db	116	;'t'
  2663  0078F1  65                 	db	101	;'e'
  2664  0078F2  72                 	db	114	;'r'
  2665  0078F3  20                 	db	32
  2666  0078F4  66                 	db	102	;'f'
  2667  0078F5  6F                 	db	111	;'o'
  2668  0078F6  72                 	db	114	;'r'
  2669  0078F7  20                 	db	32
  2670  0078F8  74                 	db	116	;'t'
  2671  0078F9  79                 	db	121	;'y'
  2672  0078FA  70                 	db	112	;'p'
  2673  0078FB  65                 	db	101	;'e'
  2674  0078FC  20                 	db	32
  2675  0078FD  69                 	db	105	;'i'
  2676  0078FE  73                 	db	115	;'s'
  2677  0078FF  20                 	db	32
  2678  007900  6D                 	db	109	;'m'
  2679  007901  69                 	db	105	;'i'
  2680  007902  73                 	db	115	;'s'
  2681  007903  73                 	db	115	;'s'
  2682  007904  69                 	db	105	;'i'
  2683  007905  6E                 	db	110	;'n'
  2684  007906  67                 	db	103	;'g'
  2685  007907  0D                 	db	13
  2686  007908  0A                 	db	10
  2687  007909  00                 	db	0
  2688  00790A                     STR_103:
  2689  00790A  2D                 	db	45
  2690  00790B  45                 	db	69	;'E'
  2691  00790C  52                 	db	82	;'R'
  2692  00790D  52                 	db	82	;'R'
  2693  00790E  4F                 	db	79	;'O'
  2694  00790F  52                 	db	82	;'R'
  2695  007910  20                 	db	32
  2696  007911  2D                 	db	45
  2697  007912  20                 	db	32
  2698  007913  4E                 	db	78	;'N'
  2699  007914  6F                 	db	111	;'o'
  2700  007915  20                 	db	32
  2701  007916  6D                 	db	109	;'m'
  2702  007917  61                 	db	97	;'a'
  2703  007918  73                 	db	115	;'s'
  2704  007919  6B                 	db	107	;'k'
  2705  00791A  20                 	db	32
  2706  00791B  6E                 	db	110	;'n'
  2707  00791C  75                 	db	117	;'u'
  2708  00791D  6D                 	db	109	;'m'
  2709  00791E  62                 	db	98	;'b'
  2710  00791F  65                 	db	101	;'e'
  2711  007920  72                 	db	114	;'r'
  2712  007921  20                 	db	32
  2713  007922  73                 	db	115	;'s'
  2714  007923  70                 	db	112	;'p'
  2715  007924  65                 	db	101	;'e'
  2716  007925  63                 	db	99	;'c'
  2717  007926  69                 	db	105	;'i'
  2718  007927  66                 	db	102	;'f'
  2719  007928  69                 	db	105	;'i'
  2720  007929  65                 	db	101	;'e'
  2721  00792A  64                 	db	100	;'d'
  2722  00792B  2E                 	db	46
  2723  00792C  0D                 	db	13
  2724  00792D  0A                 	db	10
  2725  00792E  00                 	db	0
  2726  00792F                     STR_1:
  2727  00792F  0D                 	db	13
  2728  007930  0A                 	db	10
  2729  007931  46                 	db	70	;'F'
  2730  007932  72                 	db	114	;'r'
  2731  007933  61                 	db	97	;'a'
  2732  007934  6E                 	db	110	;'n'
  2733  007935  6B                 	db	107	;'k'
  2734  007936  66                 	db	102	;'f'
  2735  007937  75                 	db	117	;'u'
  2736  007938  72                 	db	114	;'r'
  2737  007939  74                 	db	116	;'t'
  2738  00793A  20                 	db	32
  2739  00793B  52                 	db	82	;'R'
  2740  00793C  53                 	db	83	;'S'
  2741  00793D  2D                 	db	45
  2742  00793E  32                 	db	50	;'2'
  2743  00793F  33                 	db	51	;'3'
  2744  007940  32                 	db	50	;'2'
  2745  007941  20                 	db	32
  2746  007942  43                 	db	67	;'C'
  2747  007943  41                 	db	65	;'A'
  2748  007944  4E                 	db	78	;'N'
  2749  007945  34                 	db	52	;'4'
  2750  007946  56                 	db	86	;'V'
  2751  007947  53                 	db	83	;'S'
  2752  007948  43                 	db	67	;'C'
  2753  007949  50                 	db	80	;'P'
  2754  00794A  20                 	db	32
  2755  00794B  6D                 	db	109	;'m'
  2756  00794C  6F                 	db	111	;'o'
  2757  00794D  64                 	db	100	;'d'
  2758  00794E  75                 	db	117	;'u'
  2759  00794F  6C                 	db	108	;'l'
  2760  007950  65                 	db	101	;'e'
  2761  007951  0D                 	db	13
  2762  007952  0A                 	db	10
  2763  007953  00                 	db	0
  2764  007954                     STR_107:
  2765  007954  2D                 	db	45
  2766  007955  45                 	db	69	;'E'
  2767  007956  52                 	db	82	;'R'
  2768  007957  52                 	db	82	;'R'
  2769  007958  4F                 	db	79	;'O'
  2770  007959  52                 	db	82	;'R'
  2771  00795A  20                 	db	32
  2772  00795B  2D                 	db	45
  2773  00795C  20                 	db	32
  2774  00795D  6D                 	db	109	;'m'
  2775  00795E  61                 	db	97	;'a'
  2776  00795F  73                 	db	115	;'s'
  2777  007960  6B                 	db	107	;'k'
  2778  007961  20                 	db	32
  2779  007962  66                 	db	102	;'f'
  2780  007963  6F                 	db	111	;'o'
  2781  007964  72                 	db	114	;'r'
  2782  007965  20                 	db	32
  2783  007966  63                 	db	99	;'c'
  2784  007967  6C                 	db	108	;'l'
  2785  007968  61                 	db	97	;'a'
  2786  007969  73                 	db	115	;'s'
  2787  00796A  73                 	db	115	;'s'
  2788  00796B  20                 	db	32
  2789  00796C  69                 	db	105	;'i'
  2790  00796D  73                 	db	115	;'s'
  2791  00796E  20                 	db	32
  2792  00796F  6D                 	db	109	;'m'
  2793  007970  69                 	db	105	;'i'
  2794  007971  73                 	db	115	;'s'
  2795  007972  73                 	db	115	;'s'
  2796  007973  69                 	db	105	;'i'
  2797  007974  6E                 	db	110	;'n'
  2798  007975  67                 	db	103	;'g'
  2799  007976  0D                 	db	13
  2800  007977  0A                 	db	10
  2801  007978  00                 	db	0
  2802  007979                     STR_109:
  2803  007979  2D                 	db	45
  2804  00797A  45                 	db	69	;'E'
  2805  00797B  52                 	db	82	;'R'
  2806  00797C  52                 	db	82	;'R'
  2807  00797D  4F                 	db	79	;'O'
  2808  00797E  52                 	db	82	;'R'
  2809  00797F  20                 	db	32
  2810  007980  2D                 	db	45
  2811  007981  20                 	db	32
  2812  007982  6D                 	db	109	;'m'
  2813  007983  61                 	db	97	;'a'
  2814  007984  73                 	db	115	;'s'
  2815  007985  6B                 	db	107	;'k'
  2816  007986  20                 	db	32
  2817  007987  66                 	db	102	;'f'
  2818  007988  6F                 	db	111	;'o'
  2819  007989  72                 	db	114	;'r'
  2820  00798A  20                 	db	32
  2821  00798B  74                 	db	116	;'t'
  2822  00798C  79                 	db	121	;'y'
  2823  00798D  70                 	db	112	;'p'
  2824  00798E  65                 	db	101	;'e'
  2825  00798F  20                 	db	32
  2826  007990  69                 	db	105	;'i'
  2827  007991  73                 	db	115	;'s'
  2828  007992  20                 	db	32
  2829  007993  6D                 	db	109	;'m'
  2830  007994  69                 	db	105	;'i'
  2831  007995  73                 	db	115	;'s'
  2832  007996  73                 	db	115	;'s'
  2833  007997  69                 	db	105	;'i'
  2834  007998  6E                 	db	110	;'n'
  2835  007999  67                 	db	103	;'g'
  2836  00799A  0D                 	db	13
  2837  00799B  0A                 	db	10
  2838  00799C  00                 	db	0
  2839  00799D                     STR_3:
  2840  00799D  68                 	db	104	;'h'
  2841  00799E  74                 	db	116	;'t'
  2842  00799F  74                 	db	116	;'t'
  2843  0079A0  70                 	db	112	;'p'
  2844  0079A1  3A                 	db	58	;':'
  2845  0079A2  2F                 	db	47
  2846  0079A3  2F                 	db	47
  2847  0079A4  77                 	db	119	;'w'
  2848  0079A5  77                 	db	119	;'w'
  2849  0079A6  77                 	db	119	;'w'
  2850  0079A7  2E                 	db	46
  2851  0079A8  70                 	db	112	;'p'
  2852  0079A9  61                 	db	97	;'a'
  2853  0079AA  72                 	db	114	;'r'
  2854  0079AB  61                 	db	97	;'a'
  2855  0079AC  64                 	db	100	;'d'
  2856  0079AD  69                 	db	105	;'i'
  2857  0079AE  73                 	db	115	;'s'
  2858  0079AF  65                 	db	101	;'e'
  2859  0079B0  6F                 	db	111	;'o'
  2860  0079B1  66                 	db	102	;'f'
  2861  0079B2  74                 	db	116	;'t'
  2862  0079B3  68                 	db	104	;'h'
  2863  0079B4  65                 	db	101	;'e'
  2864  0079B5  66                 	db	102	;'f'
  2865  0079B6  72                 	db	114	;'r'
  2866  0079B7  6F                 	db	111	;'o'
  2867  0079B8  67                 	db	103	;'g'
  2868  0079B9  2E                 	db	46
  2869  0079BA  63                 	db	99	;'c'
  2870  0079BB  6F                 	db	111	;'o'
  2871  0079BC  6D                 	db	109	;'m'
  2872  0079BD  0D                 	db	13
  2873  0079BE  0A                 	db	10
  2874  0079BF  00                 	db	0
  2875  0079C0                     STR_79:
  2876  0079C0  2B                 	db	43
  2877  0079C1  4F                 	db	79	;'O'
  2878  0079C2  4B                 	db	75	;'K'
  2879  0079C3  20                 	db	32
  2880  0079C4  2D                 	db	45
  2881  0079C5  20                 	db	32
  2882  0079C6  56                 	db	86	;'V'
  2883  0079C7  61                 	db	97	;'a'
  2884  0079C8  6C                 	db	108	;'l'
  2885  0079C9  75                 	db	117	;'u'
  2886  0079CA  65                 	db	101	;'e'
  2887  0079CB  20                 	db	32
  2888  0079CC  77                 	db	119	;'w'
  2889  0079CD  72                 	db	114	;'r'
  2890  0079CE  69                 	db	105	;'i'
  2891  0079CF  74                 	db	116	;'t'
  2892  0079D0  74                 	db	116	;'t'
  2893  0079D1  65                 	db	101	;'e'
  2894  0079D2  6E                 	db	110	;'n'
  2895  0079D3  20                 	db	32
  2896  0079D4  73                 	db	115	;'s'
  2897  0079D5  75                 	db	117	;'u'
  2898  0079D6  63                 	db	99	;'c'
  2899  0079D7  63                 	db	99	;'c'
  2900  0079D8  65                 	db	101	;'e'
  2901  0079D9  73                 	db	115	;'s'
  2902  0079DA  73                 	db	115	;'s'
  2903  0079DB  66                 	db	102	;'f'
  2904  0079DC  75                 	db	117	;'u'
  2905  0079DD  6C                 	db	108	;'l'
  2906  0079DE  6C                 	db	108	;'l'
  2907  0079DF  79                 	db	121	;'y'
  2908  0079E0  0D                 	db	13
  2909  0079E1  0A                 	db	10
  2910  0079E2  00                 	db	0
  2911  0079E3                     STR_230:
  2912  0079E3  53                 	db	83	;'S'
  2913  0079E4  45                 	db	69	;'E'
  2914  0079E5  54                 	db	84	;'T'
  2915  0079E6  20                 	db	32
  2916  0079E7  2D                 	db	45
  2917  0079E8  20                 	db	32
  2918  0079E9  50                 	db	80	;'P'
  2919  0079EA  65                 	db	101	;'e'
  2920  0079EB  72                 	db	114	;'r'
  2921  0079EC  73                 	db	115	;'s'
  2922  0079ED  69                 	db	105	;'i'
  2923  0079EE  73                 	db	115	;'s'
  2924  0079EF  74                 	db	116	;'t'
  2925  0079F0  65                 	db	101	;'e'
  2926  0079F1  6E                 	db	110	;'n'
  2927  0079F2  74                 	db	116	;'t'
  2928  0079F3  20                 	db	32
  2929  0079F4  66                 	db	102	;'f'
  2930  0079F5  75                 	db	117	;'u'
  2931  0079F6  6E                 	db	110	;'n'
  2932  0079F7  63                 	db	99	;'c'
  2933  0079F8  74                 	db	116	;'t'
  2934  0079F9  69                 	db	105	;'i'
  2935  0079FA  6F                 	db	111	;'o'
  2936  0079FB  6E                 	db	110	;'n'
  2937  0079FC  61                 	db	97	;'a'
  2938  0079FD  6C                 	db	108	;'l'
  2939  0079FE  69                 	db	105	;'i'
  2940  0079FF  74                 	db	116	;'t'
  2941  007A00  79                 	db	121	;'y'
  2942  007A01  2E                 	db	46
  2943  007A02  0D                 	db	13
  2944  007A03  0A                 	db	10
  2945  007A04  00                 	db	0
  2946  007A05                     STR_64:
  2947  007A05  2D                 	db	45
  2948  007A06  45                 	db	69	;'E'
  2949  007A07  52                 	db	82	;'R'
  2950  007A08  52                 	db	82	;'R'
  2951  007A09  4F                 	db	79	;'O'
  2952  007A0A  52                 	db	82	;'R'
  2953  007A0B  20                 	db	32
  2954  007A0C  2D                 	db	45
  2955  007A0D  20                 	db	32
  2956  007A0E  55                 	db	85	;'U'
  2957  007A0F  6E                 	db	110	;'n'
  2958  007A10  61                 	db	97	;'a'
  2959  007A11  62                 	db	98	;'b'
  2960  007A12  6C                 	db	108	;'l'
  2961  007A13  65                 	db	101	;'e'
  2962  007A14  20                 	db	32
  2963  007A15  74                 	db	116	;'t'
  2964  007A16  6F                 	db	111	;'o'
  2965  007A17  20                 	db	32
  2966  007A18  72                 	db	114	;'r'
  2967  007A19  65                 	db	101	;'e'
  2968  007A1A  61                 	db	97	;'a'
  2969  007A1B  64                 	db	100	;'d'
  2970  007A1C  20                 	db	32
  2971  007A1D  72                 	db	114	;'r'
  2972  007A1E  65                 	db	101	;'e'
  2973  007A1F  67                 	db	103	;'g'
  2974  007A20  69                 	db	105	;'i'
  2975  007A21  73                 	db	115	;'s'
  2976  007A22  74                 	db	116	;'t'
  2977  007A23  65                 	db	101	;'e'
  2978  007A24  72                 	db	114	;'r'
  2979  007A25  20                 	db	32
  2980  007A26  00                 	db	0
  2981  007A27                     STR_219:
  2982  007A27  53                 	db	83	;'S'
  2983  007A28  54                 	db	84	;'T'
  2984  007A29  41                 	db	65	;'A'
  2985  007A2A  54                 	db	84	;'T'
  2986  007A2B  20                 	db	32
  2987  007A2C  2D                 	db	45
  2988  007A2D  20                 	db	32
  2989  007A2E  44                 	db	68	;'D'
  2990  007A2F  69                 	db	105	;'i'
  2991  007A30  73                 	db	115	;'s'
  2992  007A31  70                 	db	112	;'p'
  2993  007A32  6C                 	db	108	;'l'
  2994  007A33  61                 	db	97	;'a'
  2995  007A34  79                 	db	121	;'y'
  2996  007A35  20                 	db	32
  2997  007A36  43                 	db	67	;'C'
  2998  007A37  41                 	db	65	;'A'
  2999  007A38  4E                 	db	78	;'N'
  3000  007A39  20                 	db	32
  3001  007A3A  73                 	db	115	;'s'
  3002  007A3B  74                 	db	116	;'t'
  3003  007A3C  61                 	db	97	;'a'
  3004  007A3D  74                 	db	116	;'t'
  3005  007A3E  69                 	db	105	;'i'
  3006  007A3F  73                 	db	115	;'s'
  3007  007A40  74                 	db	116	;'t'
  3008  007A41  69                 	db	105	;'i'
  3009  007A42  63                 	db	99	;'c'
  3010  007A43  73                 	db	115	;'s'
  3011  007A44  2E                 	db	46
  3012  007A45  0D                 	db	13
  3013  007A46  0A                 	db	10
  3014  007A47  00                 	db	0
  3015  007A48                     STR_37:
  3016  007A48  2D                 	db	45
  3017  007A49  45                 	db	69	;'E'
  3018  007A4A  52                 	db	82	;'R'
  3019  007A4B  52                 	db	82	;'R'
  3020  007A4C  4F                 	db	79	;'O'
  3021  007A4D  52                 	db	82	;'R'
  3022  007A4E  20                 	db	32
  3023  007A4F  2D                 	db	45
  3024  007A50  20                 	db	32
  3025  007A51  46                 	db	70	;'F'
  3026  007A52  61                 	db	97	;'a'
  3027  007A53  69                 	db	105	;'i'
  3028  007A54  6C                 	db	108	;'l'
  3029  007A55  65                 	db	101	;'e'
  3030  007A56  64                 	db	100	;'d'
  3031  007A57  20                 	db	32
  3032  007A58  74                 	db	116	;'t'
  3033  007A59  6F                 	db	111	;'o'
  3034  007A5A  20                 	db	32
  3035  007A5B  73                 	db	115	;'s'
  3036  007A5C  65                 	db	101	;'e'
  3037  007A5D  6E                 	db	110	;'n'
  3038  007A5E  64                 	db	100	;'d'
  3039  007A5F  20                 	db	32
  3040  007A60  65                 	db	101	;'e'
  3041  007A61  76                 	db	118	;'v'
  3042  007A62  65                 	db	101	;'e'
  3043  007A63  6E                 	db	110	;'n'
  3044  007A64  74                 	db	116	;'t'
  3045  007A65  2E                 	db	46
  3046  007A66  0D                 	db	13
  3047  007A67  0A                 	db	10
  3048  007A68  00                 	db	0
  3049  007A69                     STR_130:
  3050  007A69  2D                 	db	45
  3051  007A6A  45                 	db	69	;'E'
  3052  007A6B  52                 	db	82	;'R'
  3053  007A6C  52                 	db	82	;'R'
  3054  007A6D  4F                 	db	79	;'O'
  3055  007A6E  52                 	db	82	;'R'
  3056  007A6F  20                 	db	32
  3057  007A70  2D                 	db	45
  3058  007A71  20                 	db	32
  3059  007A72  55                 	db	85	;'U'
  3060  007A73  6E                 	db	110	;'n'
  3061  007A74  6B                 	db	107	;'k'
  3062  007A75  6E                 	db	110	;'n'
  3063  007A76  6F                 	db	111	;'o'
  3064  007A77  77                 	db	119	;'w'
  3065  007A78  6E                 	db	110	;'n'
  3066  007A79  20                 	db	32
  3067  007A7A  27                 	db	39
  3068  007A7B  53                 	db	83	;'S'
  3069  007A7C  45                 	db	69	;'E'
  3070  007A7D  54                 	db	84	;'T'
  3071  007A7E  27                 	db	39
  3072  007A7F  20                 	db	32
  3073  007A80  63                 	db	99	;'c'
  3074  007A81  6F                 	db	111	;'o'
  3075  007A82  6D                 	db	109	;'m'
  3076  007A83  6D                 	db	109	;'m'
  3077  007A84  61                 	db	97	;'a'
  3078  007A85  6E                 	db	110	;'n'
  3079  007A86  64                 	db	100	;'d'
  3080  007A87  0D                 	db	13
  3081  007A88  0A                 	db	10
  3082  007A89  00                 	db	0
  3083  007A8A                     STR_80:
  3084  007A8A  2D                 	db	45
  3085  007A8B  45                 	db	69	;'E'
  3086  007A8C  52                 	db	82	;'R'
  3087  007A8D  52                 	db	82	;'R'
  3088  007A8E  4F                 	db	79	;'O'
  3089  007A8F  52                 	db	82	;'R'
  3090  007A90  20                 	db	32
  3091  007A91  2D                 	db	45
  3092  007A92  20                 	db	32
  3093  007A93  46                 	db	70	;'F'
  3094  007A94  61                 	db	97	;'a'
  3095  007A95  69                 	db	105	;'i'
  3096  007A96  6C                 	db	108	;'l'
  3097  007A97  65                 	db	101	;'e'
  3098  007A98  64                 	db	100	;'d'
  3099  007A99  20                 	db	32
  3100  007A9A  74                 	db	116	;'t'
  3101  007A9B  6F                 	db	111	;'o'
  3102  007A9C  20                 	db	32
  3103  007A9D  77                 	db	119	;'w'
  3104  007A9E  72                 	db	114	;'r'
  3105  007A9F  69                 	db	105	;'i'
  3106  007AA0  74                 	db	116	;'t'
  3107  007AA1  65                 	db	101	;'e'
  3108  007AA2  20                 	db	32
  3109  007AA3  76                 	db	118	;'v'
  3110  007AA4  61                 	db	97	;'a'
  3111  007AA5  6C                 	db	108	;'l'
  3112  007AA6  75                 	db	117	;'u'
  3113  007AA7  65                 	db	101	;'e'
  3114  007AA8  0D                 	db	13
  3115  007AA9  0A                 	db	10
  3116  007AAA  00                 	db	0
  3117  007AAB                     STR_53:
  3118  007AAB  2D                 	db	45
  3119  007AAC  45                 	db	69	;'E'
  3120  007AAD  52                 	db	82	;'R'
  3121  007AAE  52                 	db	82	;'R'
  3122  007AAF  4F                 	db	79	;'O'
  3123  007AB0  52                 	db	82	;'R'
  3124  007AB1  20                 	db	32
  3125  007AB2  2D                 	db	45
  3126  007AB3  20                 	db	32
  3127  007AB4  4E                 	db	78	;'N'
  3128  007AB5  65                 	db	101	;'e'
  3129  007AB6  65                 	db	101	;'e'
  3130  007AB7  64                 	db	100	;'d'
  3131  007AB8  73                 	db	115	;'s'
  3132  007AB9  20                 	db	32
  3133  007ABA  5B                 	db	91	;'['
  3134  007ABB  70                 	db	112	;'p'
  3135  007ABC  61                 	db	97	;'a'
  3136  007ABD  67                 	db	103	;'g'
  3137  007ABE  65                 	db	101	;'e'
  3138  007ABF  3A                 	db	58	;':'
  3139  007AC0  5D                 	db	93	;']'
  3140  007AC1  72                 	db	114	;'r'
  3141  007AC2  65                 	db	101	;'e'
  3142  007AC3  67                 	db	103	;'g'
  3143  007AC4  69                 	db	105	;'i'
  3144  007AC5  73                 	db	115	;'s'
  3145  007AC6  74                 	db	116	;'t'
  3146  007AC7  65                 	db	101	;'e'
  3147  007AC8  72                 	db	114	;'r'
  3148  007AC9  0D                 	db	13
  3149  007ACA  0A                 	db	10
  3150  007ACB  00                 	db	0
  3151  007ACC                     STR_125:
  3152  007ACC  2B                 	db	43
  3153  007ACD  4F                 	db	79	;'O'
  3154  007ACE  4B                 	db	75	;'K'
  3155  007ACF  20                 	db	32
  3156  007AD0  2D                 	db	45
  3157  007AD1  20                 	db	32
  3158  007AD2  4D                 	db	77	;'M'
  3159  007AD3  6F                 	db	111	;'o'
  3160  007AD4  64                 	db	100	;'d'
  3161  007AD5  65                 	db	101	;'e'
  3162  007AD6  20                 	db	32
  3163  007AD7  69                 	db	105	;'i'
  3164  007AD8  73                 	db	115	;'s'
  3165  007AD9  20                 	db	32
  3166  007ADA  6E                 	db	110	;'n'
  3167  007ADB  6F                 	db	111	;'o'
  3168  007ADC  77                 	db	119	;'w'
  3169  007ADD  20                 	db	32
  3170  007ADE  56                 	db	86	;'V'
  3171  007ADF  53                 	db	83	;'S'
  3172  007AE0  43                 	db	67	;'C'
  3173  007AE1  50                 	db	80	;'P'
  3174  007AE2  20                 	db	32
  3175  007AE3  44                 	db	68	;'D'
  3176  007AE4  72                 	db	114	;'r'
  3177  007AE5  69                 	db	105	;'i'
  3178  007AE6  76                 	db	118	;'v'
  3179  007AE7  65                 	db	101	;'e'
  3180  007AE8  72                 	db	114	;'r'
  3181  007AE9  0D                 	db	13
  3182  007AEA  0A                 	db	10
  3183  007AEB  00                 	db	0
  3184  007AEC                     STR_7:
  3185  007AEC  57                 	db	87	;'W'
  3186  007AED  69                 	db	105	;'i'
  3187  007AEE  6C                 	db	108	;'l'
  3188  007AEF  6C                 	db	108	;'l'
  3189  007AF0  20                 	db	32
  3190  007AF1  65                 	db	101	;'e'
  3191  007AF2  6E                 	db	110	;'n'
  3192  007AF3  74                 	db	116	;'t'
  3193  007AF4  65                 	db	101	;'e'
  3194  007AF5  72                 	db	114	;'r'
  3195  007AF6  20                 	db	32
  3196  007AF7  62                 	db	98	;'b'
  3197  007AF8  6F                 	db	111	;'o'
  3198  007AF9  6F                 	db	111	;'o'
  3199  007AFA  74                 	db	116	;'t'
  3200  007AFB  6C                 	db	108	;'l'
  3201  007AFC  6F                 	db	111	;'o'
  3202  007AFD  61                 	db	97	;'a'
  3203  007AFE  64                 	db	100	;'d'
  3204  007AFF  65                 	db	101	;'e'
  3205  007B00  72                 	db	114	;'r'
  3206  007B01  20                 	db	32
  3207  007B02  6E                 	db	110	;'n'
  3208  007B03  6F                 	db	111	;'o'
  3209  007B04  77                 	db	119	;'w'
  3210  007B05  2E                 	db	46
  3211  007B06  2E                 	db	46
  3212  007B07  2E                 	db	46
  3213  007B08  0D                 	db	13
  3214  007B09  0A                 	db	10
  3215  007B0A  00                 	db	0
  3216  007B0B                     STR_213:
  3217  007B0B  43                 	db	67	;'C'
  3218  007B0C  4C                 	db	76	;'L'
  3219  007B0D  4F                 	db	79	;'O'
  3220  007B0E  53                 	db	83	;'S'
  3221  007B0F  45                 	db	69	;'E'
  3222  007B10  20                 	db	32
  3223  007B11  2D                 	db	45
  3224  007B12  20                 	db	32
  3225  007B13  43                 	db	67	;'C'
  3226  007B14  6C                 	db	108	;'l'
  3227  007B15  6F                 	db	111	;'o'
  3228  007B16  73                 	db	115	;'s'
  3229  007B17  65                 	db	101	;'e'
  3230  007B18  20                 	db	32
  3231  007B19  43                 	db	67	;'C'
  3232  007B1A  41                 	db	65	;'A'
  3233  007B1B  4E                 	db	78	;'N'
  3234  007B1C  20                 	db	32
  3235  007B1D  69                 	db	105	;'i'
  3236  007B1E  6E                 	db	110	;'n'
  3237  007B1F  74                 	db	116	;'t'
  3238  007B20  65                 	db	101	;'e'
  3239  007B21  72                 	db	114	;'r'
  3240  007B22  66                 	db	102	;'f'
  3241  007B23  61                 	db	97	;'a'
  3242  007B24  63                 	db	99	;'c'
  3243  007B25  65                 	db	101	;'e'
  3244  007B26  2E                 	db	46
  3245  007B27  0D                 	db	13
  3246  007B28  0A                 	db	10
  3247  007B29  00                 	db	0
  3248  007B2A                     STR_5:
  3249  007B2A  54                 	db	84	;'T'
  3250  007B2B  65                 	db	101	;'e'
  3251  007B2C  6D                 	db	109	;'m'
  3252  007B2D  70                 	db	112	;'p'
  3253  007B2E  6F                 	db	111	;'o'
  3254  007B2F  72                 	db	114	;'r'
  3255  007B30  61                 	db	97	;'a'
  3256  007B31  72                 	db	114	;'r'
  3257  007B32  79                 	db	121	;'y'
  3258  007B33  20                 	db	32
  3259  007B34  76                 	db	118	;'v'
  3260  007B35  65                 	db	101	;'e'
  3261  007B36  72                 	db	114	;'r'
  3262  007B37  62                 	db	98	;'b'
  3263  007B38  6F                 	db	111	;'o'
  3264  007B39  73                 	db	115	;'s'
  3265  007B3A  65                 	db	101	;'e'
  3266  007B3B  20                 	db	32
  3267  007B3C  6D                 	db	109	;'m'
  3268  007B3D  6F                 	db	111	;'o'
  3269  007B3E  64                 	db	100	;'d'
  3270  007B3F  65                 	db	101	;'e'
  3271  007B40  20                 	db	32
  3272  007B41  73                 	db	115	;'s'
  3273  007B42  65                 	db	101	;'e'
  3274  007B43  74                 	db	116	;'t'
  3275  007B44  0D                 	db	13
  3276  007B45  0A                 	db	10
  3277  007B46  00                 	db	0
  3278  007B47                     STR_123:
  3279  007B47  2B                 	db	43
  3280  007B48  4F                 	db	79	;'O'
  3281  007B49  4B                 	db	75	;'K'
  3282  007B4A  20                 	db	32
  3283  007B4B  2D                 	db	45
  3284  007B4C  20                 	db	32
  3285  007B4D  4D                 	db	77	;'M'
  3286  007B4E  6F                 	db	111	;'o'
  3287  007B4F  64                 	db	100	;'d'
  3288  007B50  65                 	db	101	;'e'
  3289  007B51  20                 	db	32
  3290  007B52  69                 	db	105	;'i'
  3291  007B53  73                 	db	115	;'s'
  3292  007B54  20                 	db	32
  3293  007B55  6E                 	db	110	;'n'
  3294  007B56  6F                 	db	111	;'o'
  3295  007B57  77                 	db	119	;'w'
  3296  007B58  20                 	db	32
  3297  007B59  76                 	db	118	;'v'
  3298  007B5A  65                 	db	101	;'e'
  3299  007B5B  72                 	db	114	;'r'
  3300  007B5C  62                 	db	98	;'b'
  3301  007B5D  6F                 	db	111	;'o'
  3302  007B5E  73                 	db	115	;'s'
  3303  007B5F  65                 	db	101	;'e'
  3304  007B60  0D                 	db	13
  3305  007B61  0A                 	db	10
  3306  007B62  00                 	db	0
  3307  007B63                     STR_208:
  3308  007B63  42                 	db	66	;'B'
  3309  007B64  4F                 	db	79	;'O'
  3310  007B65  4F                 	db	79	;'O'
  3311  007B66  54                 	db	84	;'T'
  3312  007B67  20                 	db	32
  3313  007B68  2D                 	db	45
  3314  007B69  20                 	db	32
  3315  007B6A  45                 	db	69	;'E'
  3316  007B6B  6E                 	db	110	;'n'
  3317  007B6C  74                 	db	116	;'t'
  3318  007B6D  65                 	db	101	;'e'
  3319  007B6E  72                 	db	114	;'r'
  3320  007B6F  20                 	db	32
  3321  007B70  62                 	db	98	;'b'
  3322  007B71  6F                 	db	111	;'o'
  3323  007B72  6F                 	db	111	;'o'
  3324  007B73  74                 	db	116	;'t'
  3325  007B74  6C                 	db	108	;'l'
  3326  007B75  6F                 	db	111	;'o'
  3327  007B76  61                 	db	97	;'a'
  3328  007B77  64                 	db	100	;'d'
  3329  007B78  65                 	db	101	;'e'
  3330  007B79  72                 	db	114	;'r'
  3331  007B7A  2E                 	db	46
  3332  007B7B  0D                 	db	13
  3333  007B7C  0A                 	db	10
  3334  007B7D  00                 	db	0
  3335  007B7E                     STR_132:
  3336  007B7E  2D                 	db	45
  3337  007B7F  45                 	db	69	;'E'
  3338  007B80  52                 	db	82	;'R'
  3339  007B81  52                 	db	82	;'R'
  3340  007B82  4F                 	db	79	;'O'
  3341  007B83  52                 	db	82	;'R'
  3342  007B84  20                 	db	32
  3343  007B85  2D                 	db	45
  3344  007B86  20                 	db	32
  3345  007B87  55                 	db	85	;'U'
  3346  007B88  6E                 	db	110	;'n'
  3347  007B89  6B                 	db	107	;'k'
  3348  007B8A  6E                 	db	110	;'n'
  3349  007B8B  6F                 	db	111	;'o'
  3350  007B8C  77                 	db	119	;'w'
  3351  007B8D  6E                 	db	110	;'n'
  3352  007B8E  20                 	db	32
  3353  007B8F  63                 	db	99	;'c'
  3354  007B90  6F                 	db	111	;'o'
  3355  007B91  6D                 	db	109	;'m'
  3356  007B92  6D                 	db	109	;'m'
  3357  007B93  61                 	db	97	;'a'
  3358  007B94  6E                 	db	110	;'n'
  3359  007B95  64                 	db	100	;'d'
  3360  007B96  0D                 	db	13
  3361  007B97  0A                 	db	10
  3362  007B98  00                 	db	0
  3363  007B99                     STR_239:
  3364  007B99  4E                 	db	78	;'N'
  3365  007B9A  6F                 	db	111	;'o'
  3366  007B9B  64                 	db	100	;'d'
  3367  007B9C  65                 	db	101	;'e'
  3368  007B9D  20                 	db	32
  3369  007B9E  66                 	db	102	;'f'
  3370  007B9F  6F                 	db	111	;'o'
  3371  007BA0  75                 	db	117	;'u'
  3372  007BA1  6E                 	db	110	;'n'
  3373  007BA2  64                 	db	100	;'d'
  3374  007BA3  20                 	db	32
  3375  007BA4  77                 	db	119	;'w'
  3376  007BA5  69                 	db	105	;'i'
  3377  007BA6  74                 	db	116	;'t'
  3378  007BA7  68                 	db	104	;'h'
  3379  007BA8  20                 	db	32
  3380  007BA9  6E                 	db	110	;'n'
  3381  007BAA  6F                 	db	111	;'o'
  3382  007BAB  64                 	db	100	;'d'
  3383  007BAC  65                 	db	101	;'e'
  3384  007BAD  20                 	db	32
  3385  007BAE  69                 	db	105	;'i'
  3386  007BAF  64                 	db	100	;'d'
  3387  007BB0  20                 	db	32
  3388  007BB1  3D                 	db	61	;'='
  3389  007BB2  20                 	db	32
  3390  007BB3  00                 	db	0
  3391  007BB4                     STR_127:
  3392  007BB4  2B                 	db	43
  3393  007BB5  4F                 	db	79	;'O'
  3394  007BB6  4B                 	db	75	;'K'
  3395  007BB7  20                 	db	32
  3396  007BB8  2D                 	db	45
  3397  007BB9  20                 	db	32
  3398  007BBA  4D                 	db	77	;'M'
  3399  007BBB  6F                 	db	111	;'o'
  3400  007BBC  64                 	db	100	;'d'
  3401  007BBD  65                 	db	101	;'e'
  3402  007BBE  20                 	db	32
  3403  007BBF  69                 	db	105	;'i'
  3404  007BC0  73                 	db	115	;'s'
  3405  007BC1  20                 	db	32
  3406  007BC2  6E                 	db	110	;'n'
  3407  007BC3  6F                 	db	111	;'o'
  3408  007BC4  77                 	db	119	;'w'
  3409  007BC5  20                 	db	32
  3410  007BC6  53                 	db	83	;'S'
  3411  007BC7  4C                 	db	76	;'L'
  3412  007BC8  43                 	db	67	;'C'
  3413  007BC9  41                 	db	65	;'A'
  3414  007BCA  4E                 	db	78	;'N'
  3415  007BCB  0D                 	db	13
  3416  007BCC  0A                 	db	10
  3417  007BCD  00                 	db	0
  3418  007BCE                     STR_25:
  3419  007BCE  2B                 	db	43
  3420  007BCF  4F                 	db	79	;'O'
  3421  007BD0  4B                 	db	75	;'K'
  3422  007BD1  20                 	db	32
  3423  007BD2  2D                 	db	45
  3424  007BD3  20                 	db	32
  3425  007BD4  4C                 	db	76	;'L'
  3426  007BD5  69                 	db	105	;'i'
  3427  007BD6  73                 	db	115	;'s'
  3428  007BD7  74                 	db	116	;'t'
  3429  007BD8  65                 	db	101	;'e'
  3430  007BD9  6E                 	db	110	;'n'
  3431  007BDA  20                 	db	32
  3432  007BDB  6F                 	db	111	;'o'
  3433  007BDC  6E                 	db	110	;'n'
  3434  007BDD  6C                 	db	108	;'l'
  3435  007BDE  79                 	db	121	;'y'
  3436  007BDF  20                 	db	32
  3437  007BE0  6D                 	db	109	;'m'
  3438  007BE1  6F                 	db	111	;'o'
  3439  007BE2  64                 	db	100	;'d'
  3440  007BE3  65                 	db	101	;'e'
  3441  007BE4  0D                 	db	13
  3442  007BE5  0A                 	db	10
  3443  007BE6  00                 	db	0
  3444  007BE7                     STR_192:
  3445  007BE7  54                 	db	84	;'T'
  3446  007BE8  72                 	db	114	;'r'
  3447  007BE9  61                 	db	97	;'a'
  3448  007BEA  6E                 	db	110	;'n'
  3449  007BEB  73                 	db	115	;'s'
  3450  007BEC  6D                 	db	109	;'m'
  3451  007BED  69                 	db	105	;'i'
  3452  007BEE  74                 	db	116	;'t'
  3453  007BEF  20                 	db	32
  3454  007BF0  45                 	db	69	;'E'
  3455  007BF1  72                 	db	114	;'r'
  3456  007BF2  72                 	db	114	;'r'
  3457  007BF3  6F                 	db	111	;'o'
  3458  007BF4  72                 	db	114	;'r'
  3459  007BF5  20                 	db	32
  3460  007BF6  43                 	db	67	;'C'
  3461  007BF7  6F                 	db	111	;'o'
  3462  007BF8  75                 	db	117	;'u'
  3463  007BF9  6E                 	db	110	;'n'
  3464  007BFA  74                 	db	116	;'t'
  3465  007BFB  65                 	db	101	;'e'
  3466  007BFC  72                 	db	114	;'r'
  3467  007BFD  3A                 	db	58	;':'
  3468  007BFE  20                 	db	32
  3469  007BFF  00                 	db	0
  3470  007C00                     STR_216:
  3471  007C00  54                 	db	84	;'T'
  3472  007C01  58                 	db	88	;'X'
  3473  007C02  20                 	db	32
  3474  007C03  2D                 	db	45
  3475  007C04  20                 	db	32
  3476  007C05  53                 	db	83	;'S'
  3477  007C06  65                 	db	101	;'e'
  3478  007C07  6E                 	db	110	;'n'
  3479  007C08  64                 	db	100	;'d'
  3480  007C09  20                 	db	32
  3481  007C0A  43                 	db	67	;'C'
  3482  007C0B  41                 	db	65	;'A'
  3483  007C0C  4E                 	db	78	;'N'
  3484  007C0D  20                 	db	32
  3485  007C0E  66                 	db	102	;'f'
  3486  007C0F  72                 	db	114	;'r'
  3487  007C10  61                 	db	97	;'a'
  3488  007C11  6D                 	db	109	;'m'
  3489  007C12  65                 	db	101	;'e'
  3490  007C13  20                 	db	32
  3491  007C14  2E                 	db	46
  3492  007C15  0D                 	db	13
  3493  007C16  0A                 	db	10
  3494  007C17  00                 	db	0
  3495  007C18                     STR_226:
  3496  007C18  46                 	db	70	;'F'
  3497  007C19  49                 	db	73	;'I'
  3498  007C1A  4C                 	db	76	;'L'
  3499  007C1B  54                 	db	84	;'T'
  3500  007C1C  45                 	db	69	;'E'
  3501  007C1D  52                 	db	82	;'R'
  3502  007C1E  20                 	db	32
  3503  007C1F  2D                 	db	45
  3504  007C20  20                 	db	32
  3505  007C21  53                 	db	83	;'S'
  3506  007C22  65                 	db	101	;'e'
  3507  007C23  74                 	db	116	;'t'
  3508  007C24  20                 	db	32
  3509  007C25  66                 	db	102	;'f'
  3510  007C26  69                 	db	105	;'i'
  3511  007C27  6C                 	db	108	;'l'
  3512  007C28  74                 	db	116	;'t'
  3513  007C29  65                 	db	101	;'e'
  3514  007C2A  72                 	db	114	;'r'
  3515  007C2B  20                 	db	32
  3516  007C2C  2E                 	db	46
  3517  007C2D  0D                 	db	13
  3518  007C2E  0A                 	db	10
  3519  007C2F  00                 	db	0
  3520  007C30                     STR_51:
  3521  007C30  2D                 	db	45
  3522  007C31  45                 	db	69	;'E'
  3523  007C32  52                 	db	82	;'R'
  3524  007C33  52                 	db	82	;'R'
  3525  007C34  4F                 	db	79	;'O'
  3526  007C35  52                 	db	82	;'R'
  3527  007C36  20                 	db	32
  3528  007C37  2D                 	db	45
  3529  007C38  20                 	db	32
  3530  007C39  4E                 	db	78	;'N'
  3531  007C3A  65                 	db	101	;'e'
  3532  007C3B  65                 	db	101	;'e'
  3533  007C3C  64                 	db	100	;'d'
  3534  007C3D  73                 	db	115	;'s'
  3535  007C3E  20                 	db	32
  3536  007C3F  6E                 	db	110	;'n'
  3537  007C40  6F                 	db	111	;'o'
  3538  007C41  64                 	db	100	;'d'
  3539  007C42  65                 	db	101	;'e'
  3540  007C43  69                 	db	105	;'i'
  3541  007C44  64                 	db	100	;'d'
  3542  007C45  0D                 	db	13
  3543  007C46  0A                 	db	10
  3544  007C47  00                 	db	0
  3545  007C48                     STR_28:
  3546  007C48  2D                 	db	45
  3547  007C49  45                 	db	69	;'E'
  3548  007C4A  52                 	db	82	;'R'
  3549  007C4B  52                 	db	82	;'R'
  3550  007C4C  4F                 	db	79	;'O'
  3551  007C4D  52                 	db	82	;'R'
  3552  007C4E  20                 	db	32
  3553  007C4F  2D                 	db	45
  3554  007C50  20                 	db	32
  3555  007C51  55                 	db	85	;'U'
  3556  007C52  6E                 	db	110	;'n'
  3557  007C53  6B                 	db	107	;'k'
  3558  007C54  6E                 	db	110	;'n'
  3559  007C55  6F                 	db	111	;'o'
  3560  007C56  77                 	db	119	;'w'
  3561  007C57  6E                 	db	110	;'n'
  3562  007C58  20                 	db	32
  3563  007C59  6D                 	db	109	;'m'
  3564  007C5A  6F                 	db	111	;'o'
  3565  007C5B  64                 	db	100	;'d'
  3566  007C5C  65                 	db	101	;'e'
  3567  007C5D  0D                 	db	13
  3568  007C5E  0A                 	db	10
  3569  007C5F  00                 	db	0
  3570  007C60                     STR_78:
  3571  007C60  2D                 	db	45
  3572  007C61  45                 	db	69	;'E'
  3573  007C62  52                 	db	82	;'R'
  3574  007C63  52                 	db	82	;'R'
  3575  007C64  4F                 	db	79	;'O'
  3576  007C65  52                 	db	82	;'R'
  3577  007C66  20                 	db	32
  3578  007C67  2D                 	db	45
  3579  007C68  20                 	db	32
  3580  007C69  4E                 	db	78	;'N'
  3581  007C6A  65                 	db	101	;'e'
  3582  007C6B  65                 	db	101	;'e'
  3583  007C6C  64                 	db	100	;'d'
  3584  007C6D  20                 	db	32
  3585  007C6E  61                 	db	97	;'a'
  3586  007C6F  20                 	db	32
  3587  007C70  76                 	db	118	;'v'
  3588  007C71  61                 	db	97	;'a'
  3589  007C72  6C                 	db	108	;'l'
  3590  007C73  75                 	db	117	;'u'
  3591  007C74  65                 	db	101	;'e'
  3592  007C75  0D                 	db	13
  3593  007C76  0A                 	db	10
  3594  007C77  00                 	db	0
  3595  007C78                     STR_199:
  3596  007C78  52                 	db	82	;'R'
  3597  007C79  65                 	db	101	;'e'
  3598  007C7A  63                 	db	99	;'c'
  3599  007C7B  65                 	db	101	;'e'
  3600  007C7C  69                 	db	105	;'i'
  3601  007C7D  76                 	db	118	;'v'
  3602  007C7E  65                 	db	101	;'e'
  3603  007C7F  20                 	db	32
  3604  007C80  45                 	db	69	;'E'
  3605  007C81  72                 	db	114	;'r'
  3606  007C82  72                 	db	114	;'r'
  3607  007C83  6F                 	db	111	;'o'
  3608  007C84  72                 	db	114	;'r'
  3609  007C85  20                 	db	32
  3610  007C86  43                 	db	67	;'C'
  3611  007C87  6F                 	db	111	;'o'
  3612  007C88  75                 	db	117	;'u'
  3613  007C89  6E                 	db	110	;'n'
  3614  007C8A  74                 	db	116	;'t'
  3615  007C8B  65                 	db	101	;'e'
  3616  007C8C  72                 	db	114	;'r'
  3617  007C8D  3A                 	db	58	;':'
  3618  007C8E  20                 	db	32
  3619  007C8F  00                 	db	0
  3620  007C90                     STR_184:
  3621  007C90  55                 	db	85	;'U'
  3622  007C91  41                 	db	65	;'A'
  3623  007C92  52                 	db	82	;'R'
  3624  007C93  54                 	db	84	;'T'
  3625  007C94  20                 	db	32
  3626  007C95  52                 	db	82	;'R'
  3627  007C96  65                 	db	101	;'e'
  3628  007C97  63                 	db	99	;'c'
  3629  007C98  65                 	db	101	;'e'
  3630  007C99  69                 	db	105	;'i'
  3631  007C9A  76                 	db	118	;'v'
  3632  007C9B  65                 	db	101	;'e'
  3633  007C9C  20                 	db	32
  3634  007C9D  6F                 	db	111	;'o'
  3635  007C9E  76                 	db	118	;'v'
  3636  007C9F  65                 	db	101	;'e'
  3637  007CA0  72                 	db	114	;'r'
  3638  007CA1  72                 	db	114	;'r'
  3639  007CA2  75                 	db	117	;'u'
  3640  007CA3  6E                 	db	110	;'n'
  3641  007CA4  73                 	db	115	;'s'
  3642  007CA5  3A                 	db	58	;':'
  3643  007CA6  20                 	db	32
  3644  007CA7  00                 	db	0
  3645  007CA8                     STR_180:
  3646  007CA8  43                 	db	67	;'C'
  3647  007CA9  41                 	db	65	;'A'
  3648  007CAA  4E                 	db	78	;'N'
  3649  007CAB  20                 	db	32
  3650  007CAC  54                 	db	84	;'T'
  3651  007CAD  72                 	db	114	;'r'
  3652  007CAE  61                 	db	97	;'a'
  3653  007CAF  6E                 	db	110	;'n'
  3654  007CB0  73                 	db	115	;'s'
  3655  007CB1  6D                 	db	109	;'m'
  3656  007CB2  69                 	db	105	;'i'
  3657  007CB3  74                 	db	116	;'t'
  3658  007CB4  20                 	db	32
  3659  007CB5  6F                 	db	111	;'o'
  3660  007CB6  76                 	db	118	;'v'
  3661  007CB7  65                 	db	101	;'e'
  3662  007CB8  72                 	db	114	;'r'
  3663  007CB9  72                 	db	114	;'r'
  3664  007CBA  75                 	db	117	;'u'
  3665  007CBB  6E                 	db	110	;'n'
  3666  007CBC  73                 	db	115	;'s'
  3667  007CBD  3A                 	db	58	;':'
  3668  007CBE  20                 	db	32
  3669  007CBF  00                 	db	0
  3670  007CC0                     STR_218:
  3671  007CC0  52                 	db	82	;'R'
  3672  007CC1  58                 	db	88	;'X'
  3673  007CC2  20                 	db	32
  3674  007CC3  2D                 	db	45
  3675  007CC4  20                 	db	32
  3676  007CC5  52                 	db	82	;'R'
  3677  007CC6  65                 	db	101	;'e'
  3678  007CC7  61                 	db	97	;'a'
  3679  007CC8  64                 	db	100	;'d'
  3680  007CC9  20                 	db	32
  3681  007CCA  43                 	db	67	;'C'
  3682  007CCB  41                 	db	65	;'A'
  3683  007CCC  4E                 	db	78	;'N'
  3684  007CCD  20                 	db	32
  3685  007CCE  66                 	db	102	;'f'
  3686  007CCF  72                 	db	114	;'r'
  3687  007CD0  61                 	db	97	;'a'
  3688  007CD1  6D                 	db	109	;'m'
  3689  007CD2  65                 	db	101	;'e'
  3690  007CD3  2E                 	db	46
  3691  007CD4  0D                 	db	13
  3692  007CD5  0A                 	db	10
  3693  007CD6  00                 	db	0
  3694  007CD7                     STR_176:
  3695  007CD7  43                 	db	67	;'C'
  3696  007CD8  41                 	db	65	;'A'
  3697  007CD9  4E                 	db	78	;'N'
  3698  007CDA  20                 	db	32
  3699  007CDB  52                 	db	82	;'R'
  3700  007CDC  65                 	db	101	;'e'
  3701  007CDD  63                 	db	99	;'c'
  3702  007CDE  65                 	db	101	;'e'
  3703  007CDF  69                 	db	105	;'i'
  3704  007CE0  76                 	db	118	;'v'
  3705  007CE1  65                 	db	101	;'e'
  3706  007CE2  20                 	db	32
  3707  007CE3  6F                 	db	111	;'o'
  3708  007CE4  76                 	db	118	;'v'
  3709  007CE5  65                 	db	101	;'e'
  3710  007CE6  72                 	db	114	;'r'
  3711  007CE7  72                 	db	114	;'r'
  3712  007CE8  75                 	db	117	;'u'
  3713  007CE9  6E                 	db	110	;'n'
  3714  007CEA  73                 	db	115	;'s'
  3715  007CEB  3A                 	db	58	;':'
  3716  007CEC  20                 	db	32
  3717  007CED  00                 	db	0
  3718  007CEE                     STR_261:
  3719  007CEE  55                 	db	85	;'U'
  3720  007CEF  6E                 	db	110	;'n'
  3721  007CF0  6B                 	db	107	;'k'
  3722  007CF1  6E                 	db	110	;'n'
  3723  007CF2  6F                 	db	111	;'o'
  3724  007CF3  77                 	db	119	;'w'
  3725  007CF4  6E                 	db	110	;'n'
  3726  007CF5  20                 	db	32
  3727  007CF6  28                 	db	40
  3728  007CF7  56                 	db	86	;'V'
  3729  007CF8  65                 	db	101	;'e'
  3730  007CF9  72                 	db	114	;'r'
  3731  007CFA  62                 	db	98	;'b'
  3732  007CFB  6F                 	db	111	;'o'
  3733  007CFC  73                 	db	115	;'s'
  3734  007CFD  65                 	db	101	;'e'
  3735  007CFE  20                 	db	32
  3736  007CFF  75                 	db	117	;'u'
  3737  007D00  73                 	db	115	;'s'
  3738  007D01  65                 	db	101	;'e'
  3739  007D02  64                 	db	100	;'d'
  3740  007D03  29                 	db	41
  3741  007D04  00                 	db	0
  3742  007D05                     STR_24:
  3743  007D05  2B                 	db	43
  3744  007D06  4F                 	db	79	;'O'
  3745  007D07  4B                 	db	75	;'K'
  3746  007D08  20                 	db	32
  3747  007D09  2D                 	db	45
  3748  007D0A  20                 	db	32
  3749  007D0B  4C                 	db	76	;'L'
  3750  007D0C  6F                 	db	111	;'o'
  3751  007D0D  6F                 	db	111	;'o'
  3752  007D0E  70                 	db	112	;'p'
  3753  007D0F  62                 	db	98	;'b'
  3754  007D10  61                 	db	97	;'a'
  3755  007D11  63                 	db	99	;'c'
  3756  007D12  6B                 	db	107	;'k'
  3757  007D13  20                 	db	32
  3758  007D14  6D                 	db	109	;'m'
  3759  007D15  6F                 	db	111	;'o'
  3760  007D16  64                 	db	100	;'d'
  3761  007D17  65                 	db	101	;'e'
  3762  007D18  0D                 	db	13
  3763  007D19  0A                 	db	10
  3764  007D1A  00                 	db	0
  3765  007D1B                     STR_168:
  3766  007D1B  52                 	db	82	;'R'
  3767  007D1C  65                 	db	101	;'e'
  3768  007D1D  63                 	db	99	;'c'
  3769  007D1E  65                 	db	101	;'e'
  3770  007D1F  69                 	db	105	;'i'
  3771  007D20  76                 	db	118	;'v'
  3772  007D21  65                 	db	101	;'e'
  3773  007D22  64                 	db	100	;'d'
  3774  007D23  20                 	db	32
  3775  007D24  43                 	db	67	;'C'
  3776  007D25  41                 	db	65	;'A'
  3777  007D26  4E                 	db	78	;'N'
  3778  007D27  20                 	db	32
  3779  007D28  66                 	db	102	;'f'
  3780  007D29  72                 	db	114	;'r'
  3781  007D2A  61                 	db	97	;'a'
  3782  007D2B  6D                 	db	109	;'m'
  3783  007D2C  65                 	db	101	;'e'
  3784  007D2D  73                 	db	115	;'s'
  3785  007D2E  3A                 	db	58	;':'
  3786  007D2F  20                 	db	32
  3787  007D30  00                 	db	0
  3788  007D31                     STR_172:
  3789  007D31  52                 	db	82	;'R'
  3790  007D32  65                 	db	101	;'e'
  3791  007D33  63                 	db	99	;'c'
  3792  007D34  65                 	db	101	;'e'
  3793  007D35  69                 	db	105	;'i'
  3794  007D36  76                 	db	118	;'v'
  3795  007D37  65                 	db	101	;'e'
  3796  007D38  64                 	db	100	;'d'
  3797  007D39  20                 	db	32
  3798  007D3A  43                 	db	67	;'C'
  3799  007D3B  41                 	db	65	;'A'
  3800  007D3C  4E                 	db	78	;'N'
  3801  007D3D  20                 	db	32
  3802  007D3E  62                 	db	98	;'b'
  3803  007D3F  79                 	db	121	;'y'
  3804  007D40  74                 	db	116	;'t'
  3805  007D41  65                 	db	101	;'e'
  3806  007D42  73                 	db	115	;'s'
  3807  007D43  3A                 	db	58	;':'
  3808  007D44  20                 	db	32
  3809  007D45  00                 	db	0
  3810  007D46                     STR_228:
  3811  007D46  4D                 	db	77	;'M'
  3812  007D47  41                 	db	65	;'A'
  3813  007D48  53                 	db	83	;'S'
  3814  007D49  4B                 	db	75	;'K'
  3815  007D4A  20                 	db	32
  3816  007D4B  2D                 	db	45
  3817  007D4C  20                 	db	32
  3818  007D4D  53                 	db	83	;'S'
  3819  007D4E  65                 	db	101	;'e'
  3820  007D4F  74                 	db	116	;'t'
  3821  007D50  20                 	db	32
  3822  007D51  6D                 	db	109	;'m'
  3823  007D52  61                 	db	97	;'a'
  3824  007D53  73                 	db	115	;'s'
  3825  007D54  6B                 	db	107	;'k'
  3826  007D55  20                 	db	32
  3827  007D56  2E                 	db	46
  3828  007D57  0D                 	db	13
  3829  007D58  0A                 	db	10
  3830  007D59  00                 	db	0
  3831  007D5A                     STR_133:
  3832  007D5A  4A                 	db	74	;'J'
  3833  007D5B  46                 	db	70	;'F'
  3834  007D5C  72                 	db	114	;'r'
  3835  007D5D  61                 	db	97	;'a'
  3836  007D5E  6E                 	db	110	;'n'
  3837  007D5F  6B                 	db	107	;'k'
  3838  007D60  66                 	db	102	;'f'
  3839  007D61  75                 	db	117	;'u'
  3840  007D62  72                 	db	114	;'r'
  3841  007D63  74                 	db	116	;'t'
  3842  007D64  20                 	db	32
  3843  007D65  52                 	db	82	;'R'
  3844  007D66  53                 	db	83	;'S'
  3845  007D67  2D                 	db	45
  3846  007D68  32                 	db	50	;'2'
  3847  007D69  33                 	db	51	;'3'
  3848  007D6A  32                 	db	50	;'2'
  3849  007D6B  0D                 	db	13
  3850  007D6C  0A                 	db	10
  3851  007D6D  00                 	db	0
  3852  007D6E                     STR_26:
  3853  007D6E  2B                 	db	43
  3854  007D6F  4F                 	db	79	;'O'
  3855  007D70  4B                 	db	75	;'K'
  3856  007D71  20                 	db	32
  3857  007D72  2D                 	db	45
  3858  007D73  20                 	db	32
  3859  007D74  43                 	db	67	;'C'
  3860  007D75  6C                 	db	108	;'l'
  3861  007D76  6F                 	db	111	;'o'
  3862  007D77  73                 	db	115	;'s'
  3863  007D78  65                 	db	101	;'e'
  3864  007D79  64                 	db	100	;'d'
  3865  007D7A  20                 	db	32
  3866  007D7B  6D                 	db	109	;'m'
  3867  007D7C  6F                 	db	111	;'o'
  3868  007D7D  64                 	db	100	;'d'
  3869  007D7E  65                 	db	101	;'e'
  3870  007D7F  0D                 	db	13
  3871  007D80  0A                 	db	10
  3872  007D81  00                 	db	0
  3873  007D82                     STR_21:
  3874  007D82  2B                 	db	43
  3875  007D83  4F                 	db	79	;'O'
  3876  007D84  4B                 	db	75	;'K'
  3877  007D85  20                 	db	32
  3878  007D86  2D                 	db	45
  3879  007D87  20                 	db	32
  3880  007D88  4E                 	db	78	;'N'
  3881  007D89  6F                 	db	111	;'o'
  3882  007D8A  72                 	db	114	;'r'
  3883  007D8B  6D                 	db	109	;'m'
  3884  007D8C  61                 	db	97	;'a'
  3885  007D8D  6C                 	db	108	;'l'
  3886  007D8E  20                 	db	32
  3887  007D8F  6D                 	db	109	;'m'
  3888  007D90  6F                 	db	111	;'o'
  3889  007D91  64                 	db	100	;'d'
  3890  007D92  65                 	db	101	;'e'
  3891  007D93  0D                 	db	13
  3892  007D94  0A                 	db	10
  3893  007D95  00                 	db	0
  3894  007D96                     STR_22:
  3895  007D96  2B                 	db	43
  3896  007D97  4F                 	db	79	;'O'
  3897  007D98  4B                 	db	75	;'K'
  3898  007D99  20                 	db	32
  3899  007D9A  2D                 	db	45
  3900  007D9B  20                 	db	32
  3901  007D9C  53                 	db	83	;'S'
  3902  007D9D  69                 	db	105	;'i'
  3903  007D9E  6C                 	db	108	;'l'
  3904  007D9F  65                 	db	101	;'e'
  3905  007DA0  6E                 	db	110	;'n'
  3906  007DA1  74                 	db	116	;'t'
  3907  007DA2  20                 	db	32
  3908  007DA3  6D                 	db	109	;'m'
  3909  007DA4  6F                 	db	111	;'o'
  3910  007DA5  64                 	db	100	;'d'
  3911  007DA6  65                 	db	101	;'e'
  3912  007DA7  0D                 	db	13
  3913  007DA8  0A                 	db	10
  3914  007DA9  00                 	db	0
  3915  007DAA                     STR_82:
  3916  007DAA  49                 	db	73	;'I'
  3917  007DAB  6E                 	db	110	;'n'
  3918  007DAC  66                 	db	102	;'f'
  3919  007DAD  6F                 	db	111	;'o'
  3920  007DAE  20                 	db	32
  3921  007DAF  66                 	db	102	;'f'
  3922  007DB0  6F                 	db	111	;'o'
  3923  007DB1  72                 	db	114	;'r'
  3924  007DB2  20                 	db	32
  3925  007DB3  6E                 	db	110	;'n'
  3926  007DB4  6F                 	db	111	;'o'
  3927  007DB5  64                 	db	100	;'d'
  3928  007DB6  65                 	db	101	;'e'
  3929  007DB7  20                 	db	32
  3930  007DB8  69                 	db	105	;'i'
  3931  007DB9  64                 	db	100	;'d'
  3932  007DBA  20                 	db	32
  3933  007DBB  3D                 	db	61	;'='
  3934  007DBC  20                 	db	32
  3935  007DBD  00                 	db	0
  3936  007DBE                     STR_250:
  3937  007DBE  46                 	db	70	;'F'
  3938  007DBF  69                 	db	105	;'i'
  3939  007DC0  72                 	db	114	;'r'
  3940  007DC1  6D                 	db	109	;'m'
  3941  007DC2  77                 	db	119	;'w'
  3942  007DC3  61                 	db	97	;'a'
  3943  007DC4  72                 	db	114	;'r'
  3944  007DC5  65                 	db	101	;'e'
  3945  007DC6  20                 	db	32
  3946  007DC7  76                 	db	118	;'v'
  3947  007DC8  65                 	db	101	;'e'
  3948  007DC9  72                 	db	114	;'r'
  3949  007DCA  73                 	db	115	;'s'
  3950  007DCB  69                 	db	105	;'i'
  3951  007DCC  6F                 	db	111	;'o'
  3952  007DCD  6E                 	db	110	;'n'
  3953  007DCE  20                 	db	32
  3954  007DCF  3D                 	db	61	;'='
  3955  007DD0  20                 	db	32
  3956  007DD1  00                 	db	0
  3957  007DD2                     STR_23:
  3958  007DD2  2B                 	db	43
  3959  007DD3  4F                 	db	79	;'O'
  3960  007DD4  4B                 	db	75	;'K'
  3961  007DD5  20                 	db	32
  3962  007DD6  2D                 	db	45
  3963  007DD7  20                 	db	32
  3964  007DD8  53                 	db	83	;'S'
  3965  007DD9  6C                 	db	108	;'l'
  3966  007DDA  65                 	db	101	;'e'
  3967  007DDB  65                 	db	101	;'e'
  3968  007DDC  70                 	db	112	;'p'
  3969  007DDD  20                 	db	32
  3970  007DDE  6D                 	db	109	;'m'
  3971  007DDF  6F                 	db	111	;'o'
  3972  007DE0  64                 	db	100	;'d'
  3973  007DE1  65                 	db	101	;'e'
  3974  007DE2  0D                 	db	13
  3975  007DE3  0A                 	db	10
  3976  007DE4  00                 	db	0
  3977  007DE5                     STR_27:
  3978  007DE5  2B                 	db	43
  3979  007DE6  4F                 	db	79	;'O'
  3980  007DE7  4B                 	db	75	;'K'
  3981  007DE8  20                 	db	32
  3982  007DE9  2D                 	db	45
  3983  007DEA  20                 	db	32
  3984  007DEB  42                 	db	66	;'B'
  3985  007DEC  69                 	db	105	;'i'
  3986  007DED  74                 	db	116	;'t'
  3987  007DEE  73                 	db	115	;'s'
  3988  007DEF  20                 	db	32
  3989  007DF0  6D                 	db	109	;'m'
  3990  007DF1  6F                 	db	111	;'o'
  3991  007DF2  64                 	db	100	;'d'
  3992  007DF3  65                 	db	101	;'e'
  3993  007DF4  0D                 	db	13
  3994  007DF5  0A                 	db	10
  3995  007DF6  00                 	db	0
  3996  007DF7                     STR_40:
  3997  007DF7  2B                 	db	43
  3998  007DF8  4F                 	db	79	;'O'
  3999  007DF9  4B                 	db	75	;'K'
  4000  007DFA  20                 	db	32
  4001  007DFB  2D                 	db	45
  4002  007DFC  20                 	db	32
  4003  007DFD  6E                 	db	110	;'n'
  4004  007DFE  6F                 	db	111	;'o'
  4005  007DFF  20                 	db	32
  4006  007E00  65                 	db	101	;'e'
  4007  007E01  76                 	db	118	;'v'
  4008  007E02  65                 	db	101	;'e'
  4009  007E03  6E                 	db	110	;'n'
  4010  007E04  74                 	db	116	;'t'
  4011  007E05  73                 	db	115	;'s'
  4012  007E06  0D                 	db	13
  4013  007E07  0A                 	db	10
  4014  007E08  00                 	db	0
  4015  007E09                     STR_160:
  4016  007E09  53                 	db	83	;'S'
  4017  007E0A  65                 	db	101	;'e'
  4018  007E0B  6E                 	db	110	;'n'
  4019  007E0C  74                 	db	116	;'t'
  4020  007E0D  20                 	db	32
  4021  007E0E  43                 	db	67	;'C'
  4022  007E0F  41                 	db	65	;'A'
  4023  007E10  4E                 	db	78	;'N'
  4024  007E11  20                 	db	32
  4025  007E12  66                 	db	102	;'f'
  4026  007E13  72                 	db	114	;'r'
  4027  007E14  61                 	db	97	;'a'
  4028  007E15  6D                 	db	109	;'m'
  4029  007E16  65                 	db	101	;'e'
  4030  007E17  73                 	db	115	;'s'
  4031  007E18  3A                 	db	58	;':'
  4032  007E19  20                 	db	32
  4033  007E1A  00                 	db	0
  4034  007E1B                     STR_263:
  4035  007E1B  30                 	db	48	;'0'
  4036  007E1C  31                 	db	49	;'1'
  4037  007E1D  32                 	db	50	;'2'
  4038  007E1E  33                 	db	51	;'3'
  4039  007E1F  34                 	db	52	;'4'
  4040  007E20  35                 	db	53	;'5'
  4041  007E21  36                 	db	54	;'6'
  4042  007E22  37                 	db	55	;'7'
  4043  007E23  38                 	db	56	;'8'
  4044  007E24  39                 	db	57	;'9'
  4045  007E25  41                 	db	65	;'A'
  4046  007E26  42                 	db	66	;'B'
  4047  007E27  43                 	db	67	;'C'
  4048  007E28  44                 	db	68	;'D'
  4049  007E29  45                 	db	69	;'E'
  4050  007E2A  46                 	db	70	;'F'
  4051  007E2B  00                 	db	0
  4052  007E2C                     STR_264:
  4053  007E2C  30                 	db	48	;'0'
  4054  007E2D  31                 	db	49	;'1'
  4055  007E2E  32                 	db	50	;'2'
  4056  007E2F  33                 	db	51	;'3'
  4057  007E30  34                 	db	52	;'4'
  4058  007E31  35                 	db	53	;'5'
  4059  007E32  36                 	db	54	;'6'
  4060  007E33  37                 	db	55	;'7'
  4061  007E34  38                 	db	56	;'8'
  4062  007E35  39                 	db	57	;'9'
  4063  007E36  61                 	db	97	;'a'
  4064  007E37  62                 	db	98	;'b'
  4065  007E38  63                 	db	99	;'c'
  4066  007E39  64                 	db	100	;'d'
  4067  007E3A  65                 	db	101	;'e'
  4068  007E3B  66                 	db	102	;'f'
  4069  007E3C  00                 	db	0
  4070  007E3D                     STR_164:
  4071  007E3D  53                 	db	83	;'S'
  4072  007E3E  65                 	db	101	;'e'
  4073  007E3F  6E                 	db	110	;'n'
  4074  007E40  74                 	db	116	;'t'
  4075  007E41  20                 	db	32
  4076  007E42  43                 	db	67	;'C'
  4077  007E43  41                 	db	65	;'A'
  4078  007E44  4E                 	db	78	;'N'
  4079  007E45  20                 	db	32
  4080  007E46  62                 	db	98	;'b'
  4081  007E47  79                 	db	121	;'y'
  4082  007E48  74                 	db	116	;'t'
  4083  007E49  65                 	db	101	;'e'
  4084  007E4A  73                 	db	115	;'s'
  4085  007E4B  3A                 	db	58	;':'
  4086  007E4C  20                 	db	32
  4087  007E4D  00                 	db	0
  4088  007E4E                     STR_242:
  4089  007E4E  20                 	db	32
  4090  007E4F  6E                 	db	110	;'n'
  4091  007E50  6F                 	db	111	;'o'
  4092  007E51  64                 	db	100	;'d'
  4093  007E52  65                 	db	101	;'e'
  4094  007E53  73                 	db	115	;'s'
  4095  007E54  20                 	db	32
  4096  007E55  66                 	db	102	;'f'
  4097  007E56  6F                 	db	111	;'o'
  4098  007E57  75                 	db	117	;'u'
  4099  007E58  6E                 	db	110	;'n'
  4100  007E59  64                 	db	100	;'d'
  4101  007E5A  0D                 	db	13
  4102  007E5B  0A                 	db	10
  4103  007E5C  00                 	db	0
  4104  007E5D                     STR_55:
  4105  007E5D  56                 	db	86	;'V'
  4106  007E5E  61                 	db	97	;'a'
  4107  007E5F  6C                 	db	108	;'l'
  4108  007E60  75                 	db	117	;'u'
  4109  007E61  65                 	db	101	;'e'
  4110  007E62  20                 	db	32
  4111  007E63  66                 	db	102	;'f'
  4112  007E64  6F                 	db	111	;'o'
  4113  007E65  72                 	db	114	;'r'
  4114  007E66  20                 	db	32
  4115  007E67  72                 	db	114	;'r'
  4116  007E68  65                 	db	101	;'e'
  4117  007E69  67                 	db	103	;'g'
  4118  007E6A  20                 	db	32
  4119  007E6B  00                 	db	0
  4120  007E6C                     STR_248:
  4121  007E6C  4D                 	db	77	;'M'
  4122  007E6D  44                 	db	68	;'D'
  4123  007E6E  46                 	db	70	;'F'
  4124  007E6F  20                 	db	32
  4125  007E70  3D                 	db	61	;'='
  4126  007E71  20                 	db	32
  4127  007E72  68                 	db	104	;'h'
  4128  007E73  74                 	db	116	;'t'
  4129  007E74  74                 	db	116	;'t'
  4130  007E75  70                 	db	112	;'p'
  4131  007E76  3A                 	db	58	;':'
  4132  007E77  2F                 	db	47
  4133  007E78  2F                 	db	47
  4134  007E79  00                 	db	0
  4135  007E7A                     STR_258:
  4136  007E7A  56                 	db	86	;'V'
  4137  007E7B  53                 	db	83	;'S'
  4138  007E7C  43                 	db	67	;'C'
  4139  007E7D  50                 	db	80	;'P'
  4140  007E7E  20                 	db	32
  4141  007E7F  44                 	db	68	;'D'
  4142  007E80  72                 	db	114	;'r'
  4143  007E81  69                 	db	105	;'i'
  4144  007E82  76                 	db	118	;'v'
  4145  007E83  65                 	db	101	;'e'
  4146  007E84  72                 	db	114	;'r'
  4147  007E85  00                 	db	0
  4148  007E86                     STR_118:
  4149  007E86  52                 	db	82	;'R'
  4150  007E87  57                 	db	87	;'W'
  4151  007E88  54                 	db	84	;'T'
  4152  007E89  49                 	db	73	;'I'
  4153  007E8A  4D                 	db	77	;'M'
  4154  007E8B  45                 	db	69	;'E'
  4155  007E8C  4F                 	db	79	;'O'
  4156  007E8D  55                 	db	85	;'U'
  4157  007E8E  54                 	db	84	;'T'
  4158  007E8F  20                 	db	32
  4159  007E90  00                 	db	0
  4160  007E91                     STR_158:
  4161  007E91  2C                 	db	44
  4162  007E92  44                 	db	68	;'D'
  4163  007E93  61                 	db	97	;'a'
  4164  007E94  74                 	db	116	;'t'
  4165  007E95  61                 	db	97	;'a'
  4166  007E96  3D                 	db	61	;'='
  4167  007E97  6E                 	db	110	;'n'
  4168  007E98  6F                 	db	111	;'o'
  4169  007E99  6E                 	db	110	;'n'
  4170  007E9A  65                 	db	101	;'e'
  4171  007E9B  00                 	db	0
  4172  007E9C                     STR_254:
  4173  007E9C  56                 	db	86	;'V'
  4174  007E9D  65                 	db	101	;'e'
  4175  007E9E  72                 	db	114	;'r'
  4176  007E9F  73                 	db	115	;'s'
  4177  007EA0  69                 	db	105	;'i'
  4178  007EA1  6F                 	db	111	;'o'
  4179  007EA2  6E                 	db	110	;'n'
  4180  007EA3  3A                 	db	58	;':'
  4181  007EA4  20                 	db	32
  4182  007EA5  00                 	db	0
  4183  007EA6                     STR_260:
  4184  007EA6  56                 	db	86	;'V'
  4185  007EA7  53                 	db	83	;'S'
  4186  007EA8  43                 	db	67	;'C'
  4187  007EA9  50                 	db	80	;'P'
  4188  007EAA  20                 	db	32
  4189  007EAB  4E                 	db	78	;'N'
  4190  007EAC  6F                 	db	111	;'o'
  4191  007EAD  64                 	db	100	;'d'
  4192  007EAE  65                 	db	101	;'e'
  4193  007EAF  00                 	db	0
  4194  007EB0                     STR_259:
  4195  007EB0  53                 	db	83	;'S'
  4196  007EB1  4C                 	db	76	;'L'
  4197  007EB2  20                 	db	32
  4198  007EB3  44                 	db	68	;'D'
  4199  007EB4  72                 	db	114	;'r'
  4200  007EB5  69                 	db	105	;'i'
  4201  007EB6  76                 	db	118	;'v'
  4202  007EB7  65                 	db	101	;'e'
  4203  007EB8  72                 	db	114	;'r'
  4204  007EB9  00                 	db	0
  4205  007EBA                     STR_120:
  4206  007EBA  53                 	db	83	;'S'
  4207  007EBB  54                 	db	84	;'T'
  4208  007EBC  41                 	db	65	;'A'
  4209  007EBD  52                 	db	82	;'R'
  4210  007EBE  54                 	db	84	;'T'
  4211  007EBF  49                 	db	73	;'I'
  4212  007EC0  46                 	db	70	;'F'
  4213  007EC1  20                 	db	32
  4214  007EC2  00                 	db	0
  4215  007EC3                     STR_148:
  4216  007EC3  2C                 	db	44
  4217  007EC4  6E                 	db	110	;'n'
  4218  007EC5  6F                 	db	111	;'o'
  4219  007EC6  64                 	db	100	;'d'
  4220  007EC7  65                 	db	101	;'e'
  4221  007EC8  69                 	db	105	;'i'
  4222  007EC9  64                 	db	100	;'d'
  4223  007ECA  3D                 	db	61	;'='
  4224  007ECB  00                 	db	0
  4225  007ECC                     STR_14:
  4226  007ECC  4C                 	db	76	;'L'
  4227  007ECD  4F                 	db	79	;'O'
  4228  007ECE  4F                 	db	79	;'O'
  4229  007ECF  50                 	db	80	;'P'
  4230  007ED0  42                 	db	66	;'B'
  4231  007ED1  41                 	db	65	;'A'
  4232  007ED2  43                 	db	67	;'C'
  4233  007ED3  4B                 	db	75	;'K'
  4234  007ED4  00                 	db	0
  4235  007ED5                     STR_134:
  4236  007ED5  56                 	db	86	;'V'
  4237  007ED6  31                 	db	49	;'1'
  4238  007ED7  30                 	db	48	;'0'
  4239  007ED8  31                 	db	49	;'1'
  4240  007ED9  31                 	db	49	;'1'
  4241  007EDA  0D                 	db	13
  4242  007EDB  0A                 	db	10
  4243  007EDC  00                 	db	0
  4244  007EDD                     STR_135:
  4245  007EDD  4E                 	db	78	;'N'
  4246  007EDE  31                 	db	49	;'1'
  4247  007EDF  39                 	db	57	;'9'
  4248  007EE0  37                 	db	55	;'7'
  4249  007EE1  37                 	db	55	;'7'
  4250  007EE2  0D                 	db	13
  4251  007EE3  0A                 	db	10
  4252  007EE4  00                 	db	0
  4253  007EE5                     STR_243:
  4254  007EE5  47                 	db	71	;'G'
  4255  007EE6  55                 	db	85	;'U'
  4256  007EE7  49                 	db	73	;'I'
  4257  007EE8  44                 	db	68	;'D'
  4258  007EE9  20                 	db	32
  4259  007EEA  3D                 	db	61	;'='
  4260  007EEB  20                 	db	32
  4261  007EEC  00                 	db	0
  4262  007EED                     STR_128:
  4263  007EED  46                 	db	70	;'F'
  4264  007EEE  49                 	db	73	;'I'
  4265  007EEF  4C                 	db	76	;'L'
  4266  007EF0  54                 	db	84	;'T'
  4267  007EF1  45                 	db	69	;'E'
  4268  007EF2  52                 	db	82	;'R'
  4269  007EF3  20                 	db	32
  4270  007EF4  00                 	db	0
  4271  007EF5                     STR_142:
  4272  007EF5  2C                 	db	44
  4273  007EF6  63                 	db	99	;'c'
  4274  007EF7  6C                 	db	108	;'l'
  4275  007EF8  61                 	db	97	;'a'
  4276  007EF9  73                 	db	115	;'s'
  4277  007EFA  73                 	db	115	;'s'
  4278  007EFB  3D                 	db	61	;'='
  4279  007EFC  00                 	db	0
  4280  007EFD                     STR_122:
  4281  007EFD  56                 	db	86	;'V'
  4282  007EFE  45                 	db	69	;'E'
  4283  007EFF  52                 	db	82	;'R'
  4284  007F00  42                 	db	66	;'B'
  4285  007F01  4F                 	db	79	;'O'
  4286  007F02  53                 	db	83	;'S'
  4287  007F03  45                 	db	69	;'E'
  4288  007F04  00                 	db	0
  4289  007F05                     STR_116:
  4290  007F05  44                 	db	68	;'D'
  4291  007F06  45                 	db	69	;'E'
  4292  007F07  43                 	db	67	;'C'
  4293  007F08  49                 	db	73	;'I'
  4294  007F09  4D                 	db	77	;'M'
  4295  007F0A  41                 	db	65	;'A'
  4296  007F0B  4C                 	db	76	;'L'
  4297  007F0C  00                 	db	0
  4298  007F0D                     STR_18:
  4299  007F0D  56                 	db	86	;'V'
  4300  007F0E  45                 	db	69	;'E'
  4301  007F0F  52                 	db	82	;'R'
  4302  007F10  53                 	db	83	;'S'
  4303  007F11  49                 	db	73	;'I'
  4304  007F12  4F                 	db	79	;'O'
  4305  007F13  4E                 	db	78	;'N'
  4306  007F14  00                 	db	0
  4307  007F15                     STR_177:
  4308  007F15  30                 	db	48	;'0'
  4309  007F16  78                 	db	120	;'x'
  4310  007F17  25                 	db	37
  4311  007F18  30                 	db	48	;'0'
  4312  007F19  38                 	db	56	;'8'
  4313  007F1A  6C                 	db	108	;'l'
  4314  007F1B  58                 	db	88	;'X'
  4315  007F1C  00                 	db	0
  4316  007F1D                     STR_257:
  4317  007F1D  56                 	db	86	;'V'
  4318  007F1E  65                 	db	101	;'e'
  4319  007F1F  72                 	db	114	;'r'
  4320  007F20  62                 	db	98	;'b'
  4321  007F21  6F                 	db	111	;'o'
  4322  007F22  73                 	db	115	;'s'
  4323  007F23  65                 	db	101	;'e'
  4324  007F24  00                 	db	0
  4325  007F25                     STR_256:
  4326  007F25  4D                 	db	77	;'M'
  4327  007F26  6F                 	db	111	;'o'
  4328  007F27  64                 	db	100	;'d'
  4329  007F28  65                 	db	101	;'e'
  4330  007F29  3A                 	db	58	;':'
  4331  007F2A  20                 	db	32
  4332  007F2B  00                 	db	0
  4333  007F2C                     STR_154:
  4334  007F2C  2C                 	db	44
  4335  007F2D  44                 	db	68	;'D'
  4336  007F2E  61                 	db	97	;'a'
  4337  007F2F  74                 	db	116	;'t'
  4338  007F30  61                 	db	97	;'a'
  4339  007F31  3D                 	db	61	;'='
  4340  007F32  00                 	db	0
  4341  007F33                     STR_145:
  4342  007F33  2C                 	db	44
  4343  007F34  74                 	db	116	;'t'
  4344  007F35  79                 	db	121	;'y'
  4345  007F36  70                 	db	112	;'p'
  4346  007F37  65                 	db	101	;'e'
  4347  007F38  3D                 	db	61	;'='
  4348  007F39  00                 	db	0
  4349  007F3A                     STR_151:
  4350  007F3A  2C                 	db	44
  4351  007F3B  73                 	db	115	;'s'
  4352  007F3C  69                 	db	105	;'i'
  4353  007F3D  7A                 	db	122	;'z'
  4354  007F3E  65                 	db	101	;'e'
  4355  007F3F  3D                 	db	61	;'='
  4356  007F40  00                 	db	0
  4357  007F41                     STR_139:
  4358  007F41  3C                 	db	60	;'<'
  4359  007F42  50                 	db	80	;'P'
  4360  007F43  72                 	db	114	;'r'
  4361  007F44  69                 	db	105	;'i'
  4362  007F45  6F                 	db	111	;'o'
  4363  007F46  3D                 	db	61	;'='
  4364  007F47  00                 	db	0
  4365  007F48                     STR_20:
  4366  007F48  49                 	db	73	;'I'
  4367  007F49  46                 	db	70	;'F'
  4368  007F4A  4D                 	db	77	;'M'
  4369  007F4B  4F                 	db	79	;'O'
  4370  007F4C  44                 	db	68	;'D'
  4371  007F4D  45                 	db	69	;'E'
  4372  007F4E  00                 	db	0
  4373  007F4F                     STR_16:
  4374  007F4F  4C                 	db	76	;'L'
  4375  007F50  49                 	db	73	;'I'
  4376  007F51  53                 	db	83	;'S'
  4377  007F52  54                 	db	84	;'T'
  4378  007F53  45                 	db	69	;'E'
  4379  007F54  4E                 	db	78	;'N'
  4380  007F55  00                 	db	0
  4381  007F56                     STR_87:
  4382  007F56  46                 	db	70	;'F'
  4383  007F57  49                 	db	73	;'I'
  4384  007F58  4C                 	db	76	;'L'
  4385  007F59  54                 	db	84	;'T'
  4386  007F5A  45                 	db	69	;'E'
  4387  007F5B  52                 	db	82	;'R'
  4388  007F5C  00                 	db	0
  4389  007F5D                     STR_10:
  4390  007F5D  53                 	db	83	;'S'
  4391  007F5E  49                 	db	73	;'I'
  4392  007F5F  4C                 	db	76	;'L'
  4393  007F60  45                 	db	69	;'E'
  4394  007F61  4E                 	db	78	;'N'
  4395  007F62  54                 	db	84	;'T'
  4396  007F63  00                 	db	0
  4397  007F64                     STR_56:
  4398  007F64  30                 	db	48	;'0'
  4399  007F65  78                 	db	120	;'x'
  4400  007F66  25                 	db	37
  4401  007F67  30                 	db	48	;'0'
  4402  007F68  32                 	db	50	;'2'
  4403  007F69  58                 	db	88	;'X'
  4404  007F6A  00                 	db	0
  4405  007F6B                     STR_143:
  4406  007F6B  30                 	db	48	;'0'
  4407  007F6C  78                 	db	120	;'x'
  4408  007F6D  25                 	db	37
  4409  007F6E  30                 	db	48	;'0'
  4410  007F6F  34                 	db	52	;'4'
  4411  007F70  58                 	db	88	;'X'
  4412  007F71  00                 	db	0
  4413  007F72                     STR_161:
  4414  007F72  30                 	db	48	;'0'
  4415  007F73  78                 	db	120	;'x'
  4416  007F74  25                 	db	37
  4417  007F75  30                 	db	48	;'0'
  4418  007F76  38                 	db	56	;'8'
  4419  007F77  58                 	db	88	;'X'
  4420  007F78  00                 	db	0
  4421  007F79                     STR_136:
  4422  007F79  46                 	db	70	;'F'
  4423  007F7A  30                 	db	48	;'0'
  4424  007F7B  30                 	db	48	;'0'
  4425  007F7C  0D                 	db	13
  4426  007F7D  0A                 	db	10
  4427  007F7E  00                 	db	0
  4428  007F7F                     STR_9:
  4429  007F7F  2B                 	db	43
  4430  007F80  4F                 	db	79	;'O'
  4431  007F81  4B                 	db	75	;'K'
  4432  007F82  0D                 	db	13
  4433  007F83  0A                 	db	10
  4434  007F84  00                 	db	0
  4435  007F85                     STR_121:
  4436  007F85  4D                 	db	77	;'M'
  4437  007F86  4F                 	db	79	;'O'
  4438  007F87  44                 	db	68	;'D'
  4439  007F88  45                 	db	69	;'E'
  4440  007F89  20                 	db	32
  4441  007F8A  00                 	db	0
  4442  007F8B                     STR_129:
  4443  007F8B  4D                 	db	77	;'M'
  4444  007F8C  41                 	db	65	;'A'
  4445  007F8D  53                 	db	83	;'S'
  4446  007F8E  4B                 	db	75	;'K'
  4447  007F8F  20                 	db	32
  4448  007F90  00                 	db	0
  4449  007F91                     STR_12:
  4450  007F91  43                 	db	67	;'C'
  4451  007F92  4C                 	db	76	;'L'
  4452  007F93  4F                 	db	79	;'O'
  4453  007F94  53                 	db	83	;'S'
  4454  007F95  45                 	db	69	;'E'
  4455  007F96  00                 	db	0
  4456  007F97                     STR_126:
  4457  007F97  53                 	db	83	;'S'
  4458  007F98  4C                 	db	76	;'L'
  4459  007F99  43                 	db	67	;'C'
  4460  007F9A  41                 	db	65	;'A'
  4461  007F9B  4E                 	db	78	;'N'
  4462  007F9C  00                 	db	0
  4463  007F9D                     STR_113:
  4464  007F9D  53                 	db	83	;'S'
  4465  007F9E  45                 	db	69	;'E'
  4466  007F9F  54                 	db	84	;'T'
  4467  007FA0  20                 	db	32
  4468  007FA1  00                 	db	0
  4469  007FA2                     STR_47:
  4470  007FA2  46                 	db	70	;'F'
  4471  007FA3  49                 	db	73	;'I'
  4472  007FA4  4E                 	db	78	;'N'
  4473  007FA5  44                 	db	68	;'D'
  4474  007FA6  00                 	db	0
  4475  007FA7                     STR_49:
  4476  007FA7  52                 	db	82	;'R'
  4477  007FA8  52                 	db	82	;'R'
  4478  007FA9  45                 	db	69	;'E'
  4479  007FAA  47                 	db	71	;'G'
  4480  007FAB  00                 	db	0
  4481  007FAC                     STR_72:
  4482  007FAC  57                 	db	87	;'W'
  4483  007FAD  52                 	db	82	;'R'
  4484  007FAE  45                 	db	69	;'E'
  4485  007FAF  47                 	db	71	;'G'
  4486  007FB0  00                 	db	0
  4487  007FB1                     STR_100:
  4488  007FB1  4D                 	db	77	;'M'
  4489  007FB2  41                 	db	65	;'A'
  4490  007FB3  53                 	db	83	;'S'
  4491  007FB4  4B                 	db	75	;'K'
  4492  007FB5  00                 	db	0
  4493  007FB6                     STR_8:
  4494  007FB6  4F                 	db	79	;'O'
  4495  007FB7  50                 	db	80	;'P'
  4496  007FB8  45                 	db	69	;'E'
  4497  007FB9  4E                 	db	78	;'N'
  4498  007FBA  00                 	db	0
  4499  007FBB                     STR_81:
  4500  007FBB  49                 	db	73	;'I'
  4501  007FBC  4E                 	db	78	;'N'
  4502  007FBD  46                 	db	70	;'F'
  4503  007FBE  4F                 	db	79	;'O'
  4504  007FBF  00                 	db	0
  4505  007FC0                     STR_124:
  4506  007FC0  56                 	db	86	;'V'
  4507  007FC1  53                 	db	83	;'S'
  4508  007FC2  43                 	db	67	;'C'
  4509  007FC3  50                 	db	80	;'P'
  4510  007FC4  00                 	db	0
  4511  007FC5                     STR_45:
  4512  007FC5  48                 	db	72	;'H'
  4513  007FC6  45                 	db	69	;'E'
  4514  007FC7  4C                 	db	76	;'L'
  4515  007FC8  50                 	db	80	;'P'
  4516  007FC9  00                 	db	0
  4517  007FCA                     STR_41:
  4518  007FCA  53                 	db	83	;'S'
  4519  007FCB  54                 	db	84	;'T'
  4520  007FCC  41                 	db	65	;'A'
  4521  007FCD  54                 	db	84	;'T'
  4522  007FCE  00                 	db	0
  4523  007FCF                     STR_6:
  4524  007FCF  42                 	db	66	;'B'
  4525  007FD0  4F                 	db	79	;'O'
  4526  007FD1  4F                 	db	79	;'O'
  4527  007FD2  54                 	db	84	;'T'
  4528  007FD3  00                 	db	0
  4529  007FD4                     STR_159:
  4530  007FD4  3E                 	db	62	;'>'
  4531  007FD5  0D                 	db	13
  4532  007FD6  0A                 	db	10
  4533  007FD7  00                 	db	0
  4534  007FD8                     STR_43:
  4535  007FD8  45                 	db	69	;'E'
  4536  007FD9  52                 	db	82	;'R'
  4537  007FDA  52                 	db	82	;'R'
  4538  007FDB  00                 	db	0
  4539  007FDC                     STR_114:
  4540  007FDC  48                 	db	72	;'H'
  4541  007FDD  45                 	db	69	;'E'
  4542  007FDE  58                 	db	88	;'X'
  4543  007FDF  00                 	db	0
  4544  007FE0                     STR_162:
  4545  007FE0  25                 	db	37
  4546  007FE1  6C                 	db	108	;'l'
  4547  007FE2  75                 	db	117	;'u'
  4548  007FE3  00                 	db	0
  4549  007FE4                     STR_245:
  4550  007FE4  2D                 	db	45
  4551  007FE5  2D                 	db	45
  4552  007FE6  00                 	db	0
  4553  007FE7                     STR_38:
  4554  007FE7  52                 	db	82	;'R'
  4555  007FE8  58                 	db	88	;'X'
  4556  007FE9  00                 	db	0
  4557  007FEA                     STR_29:
  4558  007FEA  54                 	db	84	;'T'
  4559  007FEB  58                 	db	88	;'X'
  4560  007FEC  00                 	db	0
  4561  007FED                     STR_57:
  4562  007FED  25                 	db	37
  4563  007FEE  64                 	db	100	;'d'
  4564  007FEF  00                 	db	0
  4565  007FF0                     STR_138:
  4566  007FF0  07                 	db	7
  4567  007FF1  00                 	db	0
  4568  007FF2                     STR_137:
  4569  007FF2  0D                 	db	13
  4570  007FF3  00                 	db	0
  4571  007FF4                     STR_30:
  4572  007FF4  2C                 	db	44
  4573  007FF5  00                 	db	0
  4574  007FF6                     STR_252:
  4575  007FF6  2E                 	db	46
  4576  007FF7  00                 	db	0
  4577  007FF8                     STR_244:
  4578  007FF8  30                 	db	48	;'0'
  4579  007FF9  00                 	db	0
  4580  007FFA                     STR_246:
  4581  007FFA  3A                 	db	58	;':'
  4582  007FFB  00                 	db	0
  4583  007FFC                     STR_251:
  4584  007FFC  3F                 	db	63	;'?'
  4585  007FFD  00                 	db	0
  4586  007FFE                     __end_of__stringdata:
  4587                           	opt stack 0
  4588                           
  4589                           ; #config settings
  4590  007FFE  00                 	db	0	; dummy byte at the end
  4591  0000                     tblptru	equ	0xFF8
  4592                           tblptrh	equ	0xFF7
  4593                           tblptrl	equ	0xFF6
  4594                           tablat	equ	0xFF5
  4595                           prodh	equ	0xFF4
  4596                           prodl	equ	0xFF3
  4597                           intcon	equ	0xFF2
  4598                           indf0	equ	0xFEF
  4599                           fsr0h	equ	0xFEA
  4600                           fsr0l	equ	0xFE9
  4601                           wreg	equ	0xFE8
  4602                           indf1	equ	0xFE7
  4603                           postinc1	equ	0xFE6
  4604                           postdec1	equ	0xFE5
  4605                           fsr1h	equ	0xFE2
  4606                           fsr1l	equ	0xFE1
  4607                           indf2	equ	0xFDF
  4608                           postinc2	equ	0xFDE
  4609                           postdec2	equ	0xFDD
  4610                           plusw2	equ	0xFDB
  4611                           fsr2h	equ	0xFDA
  4612                           fsr2l	equ	0xFD9
  4613                           status	equ	0xFD8
  4614                           
  4615                           	psect	nvBANK0
  4616  0000F5                     __pnvBANK0:
  4617                           	opt stack 0
  4618  0000F5                     _caps:
  4619                           	opt stack 0
  4620  0000F5                     	ds	2
  4621                           tblptru	equ	0xFF8
  4622                           tblptrh	equ	0xFF7
  4623                           tblptrl	equ	0xFF6
  4624                           tablat	equ	0xFF5
  4625                           prodh	equ	0xFF4
  4626                           prodl	equ	0xFF3
  4627                           intcon	equ	0xFF2
  4628                           indf0	equ	0xFEF
  4629                           fsr0h	equ	0xFEA
  4630                           fsr0l	equ	0xFE9
  4631                           wreg	equ	0xFE8
  4632                           indf1	equ	0xFE7
  4633                           postinc1	equ	0xFE6
  4634                           postdec1	equ	0xFE5
  4635                           fsr1h	equ	0xFE2
  4636                           fsr1l	equ	0xFE1
  4637                           indf2	equ	0xFDF
  4638                           postinc2	equ	0xFDE
  4639                           postdec2	equ	0xFDD
  4640                           plusw2	equ	0xFDB
  4641                           fsr2h	equ	0xFDA
  4642                           fsr2l	equ	0xFD9
  4643                           status	equ	0xFD8
  4644                           
  4645                           	psect	cinit
  4646  004FB2                     __pcinit:
  4647                           	opt stack 0
  4648  004FB2                     start_initialization:
  4649                           	opt stack 0
  4650  004FB2                     __initialization:
  4651                           	opt stack 0
  4652                           
  4653                           ; Clear objects allocated to BIGRAM (494 bytes)
  4654  004FB2  EE04  F000         	lfsr	0,__pbssBIGRAM
  4655  004FB6  EE11 F0EE          	lfsr	1,494
  4656  004FBA                     clear_0:
  4657  004FBA  6AEE               	clrf	postinc0,c
  4658  004FBC  50E5               	movf	postdec1,w,c
  4659  004FBE  50E1               	movf	fsr1l,w,c
  4660  004FC0  E1FC               	bnz	clear_0
  4661  004FC2  50E2               	movf	fsr1h,w,c
  4662  004FC4  E1FA               	bnz	clear_0
  4663                           
  4664                           ; Clear objects allocated to BANK3 (256 bytes)
  4665  004FC6  EE03  F000         	lfsr	0,__pbssBANK3
  4666  004FCA  EE11 F000          	lfsr	1,256
  4667  004FCE                     clear_1:
  4668  004FCE  6AEE               	clrf	postinc0,c
  4669  004FD0  50E5               	movf	postdec1,w,c
  4670  004FD2  50E1               	movf	fsr1l,w,c
  4671  004FD4  E1FC               	bnz	clear_1
  4672  004FD6  50E2               	movf	fsr1h,w,c
  4673  004FD8  E1FA               	bnz	clear_1
  4674                           
  4675                           ; Clear objects allocated to BANK2 (128 bytes)
  4676  004FDA  EE02  F000         	lfsr	0,__pbssBANK2
  4677  004FDE  0E80               	movlw	128
  4678  004FE0                     clear_2:
  4679  004FE0  6AEE               	clrf	postinc0,c
  4680  004FE2  06E8               	decf	wreg,f,c
  4681  004FE4  E1FD               	bnz	clear_2
  4682                           
  4683                           ; Clear objects allocated to BANK1 (178 bytes)
  4684  004FE6  EE01  F000         	lfsr	0,__pbssBANK1
  4685  004FEA  0EB2               	movlw	178
  4686  004FEC                     clear_3:
  4687  004FEC  6AEE               	clrf	postinc0,c
  4688  004FEE  06E8               	decf	wreg,f,c
  4689  004FF0  E1FD               	bnz	clear_3
  4690                           
  4691                           ; Clear objects allocated to BANK0 (36 bytes)
  4692  004FF2  EE00  F0D1         	lfsr	0,__pbssBANK0
  4693  004FF6  0E24               	movlw	36
  4694  004FF8                     clear_4:
  4695  004FF8  6AEE               	clrf	postinc0,c
  4696  004FFA  06E8               	decf	wreg,f,c
  4697  004FFC  E1FD               	bnz	clear_4
  4698                           
  4699                           ; Clear objects allocated to COMRAM (37 bytes)
  4700  004FFE  EE00  F02B         	lfsr	0,__pbssCOMRAM
  4701  005002  0E25               	movlw	37
  4702  005004                     clear_5:
  4703  005004  6AEE               	clrf	postinc0,c
  4704  005006  06E8               	decf	wreg,f,c
  4705  005008  E1FD               	bnz	clear_5
  4706  00500A                     end_of_initialization:
  4707                           	opt stack 0
  4708  00500A                     __end_of__initialization:
  4709                           	opt stack 0
  4710  00500A  0E00               	movlw	low (__Lmediumconst shr (0+16))
  4711  00500C  6EF8               	movwf	tblptru,c
  4712  00500E  0100               	movlb	0
  4713  005010  EF08  F01A         	goto	_main	;jump to C main() function
  4714                           tblptru	equ	0xFF8
  4715                           tblptrh	equ	0xFF7
  4716                           tblptrl	equ	0xFF6
  4717                           tablat	equ	0xFF5
  4718                           prodh	equ	0xFF4
  4719                           prodl	equ	0xFF3
  4720                           intcon	equ	0xFF2
  4721                           indf0	equ	0xFEF
  4722                           postinc0	equ	0xFEE
  4723                           fsr0h	equ	0xFEA
  4724                           fsr0l	equ	0xFE9
  4725                           wreg	equ	0xFE8
  4726                           indf1	equ	0xFE7
  4727                           postinc1	equ	0xFE6
  4728                           postdec1	equ	0xFE5
  4729                           fsr1h	equ	0xFE2
  4730                           fsr1l	equ	0xFE1
  4731                           indf2	equ	0xFDF
  4732                           postinc2	equ	0xFDE
  4733                           postdec2	equ	0xFDD
  4734                           plusw2	equ	0xFDB
  4735                           fsr2h	equ	0xFDA
  4736                           fsr2l	equ	0xFD9
  4737                           status	equ	0xFD8
  4738                           
  4739                           	psect	bssCOMRAM
  4740  00002B                     __pbssCOMRAM:
  4741                           	opt stack 0
  4742  00002B                     _can_transmitOverruns:
  4743                           	opt stack 0
  4744  00002B                     	ds	4
  4745  00002F                     _uart_receiveOverruns:
  4746                           	opt stack 0
  4747  00002F                     	ds	4
  4748  000033                     _uart_transmitOverruns:
  4749                           	opt stack 0
  4750  000033                     	ds	4
  4751  000037                     _made_table:
  4752                           	opt stack 0
  4753  000037                     	ds	2
  4754  000039                     _status_led_cnt:
  4755                           	opt stack 0
  4756  000039                     	ds	2
  4757  00003B                     strtok@sp:
  4758                           	opt stack 0
  4759  00003B                     	ds	2
  4760  00003D                     _USART_Status:
  4761                           	opt stack 0
  4762  00003D                     	ds	1
  4763  00003E                     __ECANRxFilterHitInfo:
  4764                           	opt stack 0
  4765  00003E                     	ds	1
  4766  00003F                     _ledFunctionality:
  4767                           	opt stack 0
  4768  00003F                     	ds	1
  4769  000040                     _canInputFifo:
  4770                           	opt stack 0
  4771  000040                     	ds	8
  4772  000048                     _serialInputFifo:
  4773                           	opt stack 0
  4774  000048                     	ds	8
  4775                           tblptru	equ	0xFF8
  4776                           tblptrh	equ	0xFF7
  4777                           tblptrl	equ	0xFF6
  4778                           tablat	equ	0xFF5
  4779                           prodh	equ	0xFF4
  4780                           prodl	equ	0xFF3
  4781                           intcon	equ	0xFF2
  4782                           indf0	equ	0xFEF
  4783                           postinc0	equ	0xFEE
  4784                           fsr0h	equ	0xFEA
  4785                           fsr0l	equ	0xFE9
  4786                           wreg	equ	0xFE8
  4787                           indf1	equ	0xFE7
  4788                           postinc1	equ	0xFE6
  4789                           postdec1	equ	0xFE5
  4790                           fsr1h	equ	0xFE2
  4791                           fsr1l	equ	0xFE1
  4792                           indf2	equ	0xFDF
  4793                           postinc2	equ	0xFDE
  4794                           postdec2	equ	0xFDD
  4795                           plusw2	equ	0xFDB
  4796                           fsr2h	equ	0xFDA
  4797                           fsr2l	equ	0xFD9
  4798                           status	equ	0xFD8
  4799                           
  4800                           	psect	bssBANK0
  4801  0000D1                     __pbssBANK0:
  4802                           	opt stack 0
  4803  0000D1                     _can_receiveOverruns:
  4804                           	opt stack 0
  4805  0000D1                     	ds	4
  4806  0000D5                     _cntRxBytes:
  4807                           	opt stack 0
  4808  0000D5                     	ds	4
  4809  0000D9                     _cntRxFrames:
  4810                           	opt stack 0
  4811  0000D9                     	ds	4
  4812  0000DD                     _cntTxBytes:
  4813                           	opt stack 0
  4814  0000DD                     	ds	4
  4815  0000E1                     _cntTxFrames:
  4816                           	opt stack 0
  4817  0000E1                     	ds	4
  4818  0000E5                     _timekeeper:
  4819                           	opt stack 0
  4820  0000E5                     	ds	4
  4821  0000E9                     _timer:
  4822                           	opt stack 0
  4823  0000E9                     	ds	4
  4824  0000ED                     _bDLE:
  4825                           	opt stack 0
  4826  0000ED                     	ds	1
  4827  0000EE                     _bInitiated:
  4828                           	opt stack 0
  4829  0000EE                     	ds	1
  4830  0000EF                     _bOpen:
  4831                           	opt stack 0
  4832  0000EF                     	ds	1
  4833  0000F0                     _canrxcount:
  4834                           	opt stack 0
  4835  0000F0                     	ds	1
  4836  0000F1                     _mode:
  4837                           	opt stack 0
  4838  0000F1                     	ds	1
  4839  0000F2                     _nTimeStamp:
  4840                           	opt stack 0
  4841  0000F2                     	ds	1
  4842  0000F3                     _sequencyno:
  4843                           	opt stack 0
  4844  0000F3                     	ds	1
  4845  0000F4                     _stateVscpDriver:
  4846                           	opt stack 0
  4847  0000F4                     	ds	1
  4848                           tblptru	equ	0xFF8
  4849                           tblptrh	equ	0xFF7
  4850                           tblptrl	equ	0xFF6
  4851                           tablat	equ	0xFF5
  4852                           prodh	equ	0xFF4
  4853                           prodl	equ	0xFF3
  4854                           intcon	equ	0xFF2
  4855                           indf0	equ	0xFEF
  4856                           postinc0	equ	0xFEE
  4857                           fsr0h	equ	0xFEA
  4858                           fsr0l	equ	0xFE9
  4859                           wreg	equ	0xFE8
  4860                           indf1	equ	0xFE7
  4861                           postinc1	equ	0xFE6
  4862                           postdec1	equ	0xFE5
  4863                           fsr1h	equ	0xFE2
  4864                           fsr1l	equ	0xFE1
  4865                           indf2	equ	0xFDF
  4866                           postinc2	equ	0xFDE
  4867                           postdec2	equ	0xFDD
  4868                           plusw2	equ	0xFDB
  4869                           fsr2h	equ	0xFDA
  4870                           fsr2l	equ	0xFD9
  4871                           status	equ	0xFD8
  4872                           
  4873                           	psect	bssBANK1
  4874  000100                     __pbssBANK1:
  4875                           	opt stack 0
  4876  000100                     _bHex:
  4877                           	opt stack 0
  4878  000100                     	ds	1
  4879  000101                     _bSilent:
  4880                           	opt stack 0
  4881  000101                     	ds	1
  4882  000102                     _pos:
  4883                           	opt stack 0
  4884  000102                     	ds	1
  4885  000103                     _rwtimeout:
  4886                           	opt stack 0
  4887  000103                     	ds	1
  4888  000104                     _cmdbuf:
  4889                           	opt stack 0
  4890  000104                     	ds	80
  4891  000154                     _wrkbuf:
  4892                           	opt stack 0
  4893  000154                     	ds	80
  4894  0001A4                     _vscpData:
  4895                           	opt stack 0
  4896  0001A4                     	ds	8
  4897  0001AC                     _vscpClass:
  4898                           	opt stack 0
  4899  0001AC                     	ds	2
  4900  0001AE                     _vscpNodeId:
  4901                           	opt stack 0
  4902  0001AE                     	ds	1
  4903  0001AF                     _vscpPriority:
  4904                           	opt stack 0
  4905  0001AF                     	ds	1
  4906  0001B0                     _vscpSize:
  4907                           	opt stack 0
  4908  0001B0                     	ds	1
  4909  0001B1                     _vscpType:
  4910                           	opt stack 0
  4911  0001B1                     	ds	1
  4912                           tblptru	equ	0xFF8
  4913                           tblptrh	equ	0xFF7
  4914                           tblptrl	equ	0xFF6
  4915                           tablat	equ	0xFF5
  4916                           prodh	equ	0xFF4
  4917                           prodl	equ	0xFF3
  4918                           intcon	equ	0xFF2
  4919                           indf0	equ	0xFEF
  4920                           postinc0	equ	0xFEE
  4921                           fsr0h	equ	0xFEA
  4922                           fsr0l	equ	0xFE9
  4923                           wreg	equ	0xFE8
  4924                           indf1	equ	0xFE7
  4925                           postinc1	equ	0xFE6
  4926                           postdec1	equ	0xFE5
  4927                           fsr1h	equ	0xFE2
  4928                           fsr1l	equ	0xFE1
  4929                           indf2	equ	0xFDF
  4930                           postinc2	equ	0xFDE
  4931                           postdec2	equ	0xFDD
  4932                           plusw2	equ	0xFDB
  4933                           fsr2h	equ	0xFDA
  4934                           fsr2l	equ	0xFD9
  4935                           status	equ	0xFD8
  4936                           
  4937                           	psect	bssBANK2
  4938  000200                     __pbssBANK2:
  4939                           	opt stack 0
  4940  000200                     _inputBuffer:
  4941                           	opt stack 0
  4942  000200                     	ds	128
  4943                           tblptru	equ	0xFF8
  4944                           tblptrh	equ	0xFF7
  4945                           tblptrl	equ	0xFF6
  4946                           tablat	equ	0xFF5
  4947                           prodh	equ	0xFF4
  4948                           prodl	equ	0xFF3
  4949                           intcon	equ	0xFF2
  4950                           indf0	equ	0xFEF
  4951                           postinc0	equ	0xFEE
  4952                           fsr0h	equ	0xFEA
  4953                           fsr0l	equ	0xFE9
  4954                           wreg	equ	0xFE8
  4955                           indf1	equ	0xFE7
  4956                           postinc1	equ	0xFE6
  4957                           postdec1	equ	0xFE5
  4958                           fsr1h	equ	0xFE2
  4959                           fsr1l	equ	0xFE1
  4960                           indf2	equ	0xFDF
  4961                           postinc2	equ	0xFDE
  4962                           postdec2	equ	0xFDD
  4963                           plusw2	equ	0xFDB
  4964                           fsr2h	equ	0xFDA
  4965                           fsr2l	equ	0xFD9
  4966                           status	equ	0xFD8
  4967                           
  4968                           	psect	bssBANK3
  4969  000300                     __pbssBANK3:
  4970                           	opt stack 0
  4971  000300                     _crc8_table:
  4972                           	opt stack 0
  4973  000300                     	ds	256
  4974                           tblptru	equ	0xFF8
  4975                           tblptrh	equ	0xFF7
  4976                           tblptrl	equ	0xFF6
  4977                           tablat	equ	0xFF5
  4978                           prodh	equ	0xFF4
  4979                           prodl	equ	0xFF3
  4980                           intcon	equ	0xFF2
  4981                           indf0	equ	0xFEF
  4982                           postinc0	equ	0xFEE
  4983                           fsr0h	equ	0xFEA
  4984                           fsr0l	equ	0xFE9
  4985                           wreg	equ	0xFE8
  4986                           indf1	equ	0xFE7
  4987                           postinc1	equ	0xFE6
  4988                           postdec1	equ	0xFE5
  4989                           fsr1h	equ	0xFE2
  4990                           fsr1l	equ	0xFE1
  4991                           indf2	equ	0xFDF
  4992                           postinc2	equ	0xFDE
  4993                           postdec2	equ	0xFDD
  4994                           plusw2	equ	0xFDB
  4995                           fsr2h	equ	0xFDA
  4996                           fsr2l	equ	0xFD9
  4997                           status	equ	0xFD8
  4998                           
  4999                           	psect	bssBIGRAM
  5000  000400                     __pbssBIGRAM:
  5001                           	opt stack 0
  5002  000400                     _caninputBuffer:
  5003                           	opt stack 0
  5004  000400                     	ds	494
  5005                           tblptru	equ	0xFF8
  5006                           tblptrh	equ	0xFF7
  5007                           tblptrl	equ	0xFF6
  5008                           tablat	equ	0xFF5
  5009                           prodh	equ	0xFF4
  5010                           prodl	equ	0xFF3
  5011                           intcon	equ	0xFF2
  5012                           indf0	equ	0xFEF
  5013                           postinc0	equ	0xFEE
  5014                           fsr0h	equ	0xFEA
  5015                           fsr0l	equ	0xFE9
  5016                           wreg	equ	0xFE8
  5017                           indf1	equ	0xFE7
  5018                           postinc1	equ	0xFE6
  5019                           postdec1	equ	0xFE5
  5020                           fsr1h	equ	0xFE2
  5021                           fsr1l	equ	0xFE1
  5022                           indf2	equ	0xFDF
  5023                           postinc2	equ	0xFDE
  5024                           postdec2	equ	0xFDD
  5025                           plusw2	equ	0xFDB
  5026                           fsr2h	equ	0xFDA
  5027                           fsr2l	equ	0xFD9
  5028                           status	equ	0xFD8
  5029                           
  5030                           	psect	cstackBANK2
  5031  000280                     __pcstackBANK2:
  5032                           	opt stack 0
  5033  000280                     doModeVerbose@id:
  5034                           	opt stack 0
  5035                           
  5036                           ; 4 bytes @ 0x0
  5037  000280                     	ds	4
  5038  000284                     doModeVerbose@preg:
  5039                           	opt stack 0
  5040                           
  5041                           ; 2 bytes @ 0x4
  5042  000284                     	ds	2
  5043  000286                     doModeVerbose@preg_1164:
  5044                           	opt stack 0
  5045                           
  5046                           ; 2 bytes @ 0x6
  5047  000286                     	ds	2
  5048  000288                     doModeVerbose@filter_class:
  5049                           	opt stack 0
  5050                           
  5051                           ; 2 bytes @ 0x8
  5052  000288                     	ds	2
  5053  00028A                     doModeVerbose@mask_class:
  5054                           	opt stack 0
  5055                           
  5056                           ; 2 bytes @ 0xA
  5057  00028A                     	ds	2
  5058  00028C                     doModeVerbose@nodeid:
  5059                           	opt stack 0
  5060                           
  5061                           ; 1 bytes @ 0xC
  5062  00028C                     	ds	1
  5063  00028D                     doModeVerbose@nodeid_1156:
  5064                           	opt stack 0
  5065                           
  5066                           ; 1 bytes @ 0xD
  5067  00028D                     	ds	1
  5068  00028E                     doModeVerbose@filter_priority:
  5069                           	opt stack 0
  5070                           
  5071                           ; 1 bytes @ 0xE
  5072  00028E                     	ds	1
  5073  00028F                     doModeVerbose@filter_type:
  5074                           	opt stack 0
  5075                           
  5076                           ; 1 bytes @ 0xF
  5077  00028F                     	ds	1
  5078  000290                     doModeVerbose@filter_nodeid:
  5079                           	opt stack 0
  5080                           
  5081                           ; 1 bytes @ 0x10
  5082  000290                     	ds	1
  5083  000291                     doModeVerbose@mask_priority:
  5084                           	opt stack 0
  5085                           
  5086                           ; 1 bytes @ 0x11
  5087  000291                     	ds	1
  5088  000292                     doModeVerbose@mask_type:
  5089                           	opt stack 0
  5090                           
  5091                           ; 1 bytes @ 0x12
  5092  000292                     	ds	1
  5093  000293                     doModeVerbose@mask_nodeid:
  5094                           	opt stack 0
  5095                           
  5096                           ; 1 bytes @ 0x13
  5097  000293                     	ds	1
  5098  000294                     _doModeVerbose$1124:
  5099                           	opt stack 0
  5100                           
  5101                           ; 2 bytes @ 0x14
  5102  000294                     	ds	2
  5103  000296                     _doModeVerbose$1136:
  5104                           	opt stack 0
  5105                           
  5106                           ; 2 bytes @ 0x16
  5107  000296                     	ds	2
  5108  000298                     _doModeVerbose$1141:
  5109                           	opt stack 0
  5110                           
  5111                           ; 2 bytes @ 0x18
  5112  000298                     	ds	2
  5113  00029A                     _doModeVerbose$1147:
  5114                           	opt stack 0
  5115                           
  5116                           ; 2 bytes @ 0x1A
  5117  00029A                     	ds	2
  5118  00029C                     _doModeVerbose$1151:
  5119                           	opt stack 0
  5120                           
  5121                           ; 2 bytes @ 0x1C
  5122  00029C                     	ds	2
  5123  00029E                     _doModeVerbose$1176:
  5124                           	opt stack 0
  5125                           
  5126                           ; 2 bytes @ 0x1E
  5127  00029E                     	ds	2
  5128  0002A0                     doModeVerbose@rv:
  5129                           	opt stack 0
  5130                           
  5131                           ; 1 bytes @ 0x20
  5132  0002A0                     	ds	1
  5133  0002A1                     doModeVerbose@page_1157:
  5134                           	opt stack 0
  5135                           
  5136                           ; 1 bytes @ 0x21
  5137  0002A1                     	ds	1
  5138  0002A2                     doModeVerbose@reg_1158:
  5139                           	opt stack 0
  5140                           
  5141                           ; 1 bytes @ 0x22
  5142  0002A2                     	ds	1
  5143  0002A3                     doModeVerbose@id_1217:
  5144                           	opt stack 0
  5145                           
  5146                           ; 4 bytes @ 0x23
  5147  0002A3                     	ds	4
  5148  0002A7                     doModeVerbose@filterno:
  5149                           	opt stack 0
  5150                           
  5151                           ; 1 bytes @ 0x27
  5152  0002A7                     	ds	1
  5153  0002A8                     doModeVerbose@maskno:
  5154                           	opt stack 0
  5155                           
  5156                           ; 1 bytes @ 0x28
  5157  0002A8                     	ds	1
  5158  0002A9                     doModeVerbose@value_1159:
  5159                           	opt stack 0
  5160                           
  5161                           ; 1 bytes @ 0x29
  5162  0002A9                     	ds	1
  5163  0002AA                     doModeVerbose@i:
  5164                           	opt stack 0
  5165                           
  5166                           ; 1 bytes @ 0x2A
  5167  0002AA                     	ds	1
  5168  0002AB                     doModeVerbose@count:
  5169                           	opt stack 0
  5170                           
  5171                           ; 1 bytes @ 0x2B
  5172  0002AB                     	ds	1
  5173  0002AC                     doModeVerbose@c:
  5174                           	opt stack 0
  5175                           
  5176                           ; 1 bytes @ 0x2C
  5177  0002AC                     	ds	1
  5178  0002AD                     doModeVerbose@page:
  5179                           	opt stack 0
  5180                           
  5181                           ; 1 bytes @ 0x2D
  5182  0002AD                     	ds	1
  5183  0002AE                     doModeVerbose@reg:
  5184                           	opt stack 0
  5185                           
  5186                           ; 1 bytes @ 0x2E
  5187  0002AE                     	ds	1
  5188  0002AF                     doModeVerbose@nodeid_1171:
  5189                           	opt stack 0
  5190                           
  5191                           ; 1 bytes @ 0x2F
  5192  0002AF                     	ds	1
  5193  0002B0                     doModeVerbose@i_1106:
  5194                           	opt stack 0
  5195                           
  5196                           ; 1 bytes @ 0x30
  5197  0002B0                     	ds	1
  5198  0002B1                     doModeVerbose@value:
  5199                           	opt stack 0
  5200                           
  5201                           ; 1 bytes @ 0x31
  5202  0002B1                     	ds	1
  5203  0002B2                     doModeVerbose@p_1112:
  5204                           	opt stack 0
  5205                           
  5206                           ; 2 bytes @ 0x32
  5207  0002B2                     	ds	2
  5208  0002B4                     doModeVerbose@p_1160:
  5209                           	opt stack 0
  5210                           
  5211                           ; 2 bytes @ 0x34
  5212  0002B4                     	ds	2
  5213  0002B6                     doModeVerbose@ifmode:
  5214                           	opt stack 0
  5215                           
  5216                           ; 1 bytes @ 0x36
  5217  0002B6                     	ds	1
  5218  0002B7                     doModeVerbose@p:
  5219                           	opt stack 0
  5220                           
  5221                           ; 2 bytes @ 0x37
  5222  0002B7                     	ds	2
  5223  0002B9                     doModeVerbose@p_1185:
  5224                           	opt stack 0
  5225                           
  5226                           ; 2 bytes @ 0x39
  5227  0002B9                     	ds	2
  5228  0002BB                     doModeVerbose@p_1205:
  5229                           	opt stack 0
  5230                           
  5231                           ; 2 bytes @ 0x3B
  5232  0002BB                     	ds	2
  5233                           tblptru	equ	0xFF8
  5234                           tblptrh	equ	0xFF7
  5235                           tblptrl	equ	0xFF6
  5236                           tablat	equ	0xFF5
  5237                           prodh	equ	0xFF4
  5238                           prodl	equ	0xFF3
  5239                           intcon	equ	0xFF2
  5240                           indf0	equ	0xFEF
  5241                           postinc0	equ	0xFEE
  5242                           fsr0h	equ	0xFEA
  5243                           fsr0l	equ	0xFE9
  5244                           wreg	equ	0xFE8
  5245                           indf1	equ	0xFE7
  5246                           postinc1	equ	0xFE6
  5247                           postdec1	equ	0xFE5
  5248                           fsr1h	equ	0xFE2
  5249                           fsr1l	equ	0xFE1
  5250                           indf2	equ	0xFDF
  5251                           postinc2	equ	0xFDE
  5252                           postdec2	equ	0xFDD
  5253                           plusw2	equ	0xFDB
  5254                           fsr2h	equ	0xFDA
  5255                           fsr2l	equ	0xFD9
  5256                           status	equ	0xFD8
  5257                           
  5258                           	psect	cstackBANK1
  5259  0001B2                     __pcstackBANK1:
  5260                           	opt stack 0
  5261  0001B2                     ??_doModeVerbose:
  5262                           
  5263                           ; 0 bytes @ 0x0
  5264  0001B2                     	ds	20
  5265                           tblptru	equ	0xFF8
  5266                           tblptrh	equ	0xFF7
  5267                           tblptrl	equ	0xFF6
  5268                           tablat	equ	0xFF5
  5269                           prodh	equ	0xFF4
  5270                           prodl	equ	0xFF3
  5271                           intcon	equ	0xFF2
  5272                           indf0	equ	0xFEF
  5273                           postinc0	equ	0xFEE
  5274                           fsr0h	equ	0xFEA
  5275                           fsr0l	equ	0xFE9
  5276                           wreg	equ	0xFE8
  5277                           indf1	equ	0xFE7
  5278                           postinc1	equ	0xFE6
  5279                           postdec1	equ	0xFE5
  5280                           fsr1h	equ	0xFE2
  5281                           fsr1l	equ	0xFE1
  5282                           indf2	equ	0xFDF
  5283                           postinc2	equ	0xFDE
  5284                           postdec2	equ	0xFDD
  5285                           plusw2	equ	0xFDB
  5286                           fsr2h	equ	0xFDA
  5287                           fsr2l	equ	0xFD9
  5288                           status	equ	0xFD8
  5289                           
  5290                           	psect	cstackBANK0
  5291  000060                     __pcstackBANK0:
  5292                           	opt stack 0
  5293  000060                     ?_WriteTimer0:
  5294                           	opt stack 0
  5295  000060                     ?_fifo_init:
  5296                           	opt stack 0
  5297  000060                     ?_OpenUSART:
  5298                           	opt stack 0
  5299  000060                     ?_writeEEPROM:
  5300                           	opt stack 0
  5301  000060                     ?_setFilter:
  5302                           	opt stack 0
  5303  000060                     ?__CANIDToRegs:
  5304                           	opt stack 0
  5305  000060                     ??_isdigit:
  5306  000060                     ?_readEEPROM:
  5307                           	opt stack 0
  5308  000060                     ?_fifo_read:
  5309                           	opt stack 0
  5310  000060                     ?_memset:
  5311                           	opt stack 0
  5312  000060                     ?_strcpy:
  5313                           	opt stack 0
  5314  000060                     ?_strchr:
  5315                           	opt stack 0
  5316  000060                     ?_strlen:
  5317                           	opt stack 0
  5318  000060                     ?_memcpy:
  5319                           	opt stack 0
  5320  000060                     ?_strcat:
  5321                           	opt stack 0
  5322  000060                     ?___lwdiv:
  5323                           	opt stack 0
  5324  000060                     ?___lwmod:
  5325                           	opt stack 0
  5326  000060                     ?___wmul:
  5327                           	opt stack 0
  5328  000060                     ?___lldiv:
  5329                           	opt stack 0
  5330  000060                     ECANSetOperationMode@mode:
  5331                           	opt stack 0
  5332  000060                     nibbleFromChar@c:
  5333                           	opt stack 0
  5334  000060                     OpenTimer0@config:
  5335                           	opt stack 0
  5336  000060                     WriteUSART@data:
  5337                           	opt stack 0
  5338  000060                     toupper@c:
  5339                           	opt stack 0
  5340  000060                     __CANIDToRegs@ptr:
  5341                           	opt stack 0
  5342  000060                     fifo_init@buf:
  5343                           	opt stack 0
  5344  000060                     fifo_read@buf:
  5345                           	opt stack 0
  5346  000060                     writeEEPROM@address:
  5347                           	opt stack 0
  5348  000060                     readEEPROM@address:
  5349                           	opt stack 0
  5350  000060                     _init_crc8$2082:
  5351                           	opt stack 0
  5352  000060                     WriteTimer0@timer0:
  5353                           	opt stack 0
  5354  000060                     OpenUSART@spbrg:
  5355                           	opt stack 0
  5356  000060                     ___lwdiv@dividend:
  5357                           	opt stack 0
  5358  000060                     ___lwmod@dividend:
  5359                           	opt stack 0
  5360  000060                     memcpy@d1:
  5361                           	opt stack 0
  5362  000060                     memset@p1:
  5363                           	opt stack 0
  5364  000060                     strcat@to:
  5365                           	opt stack 0
  5366  000060                     strchr@ptr:
  5367                           	opt stack 0
  5368  000060                     strcpy@to:
  5369                           	opt stack 0
  5370  000060                     strlen@s:
  5371                           	opt stack 0
  5372  000060                     ___wmul@multiplier:
  5373                           	opt stack 0
  5374  000060                     setFilter@val:
  5375                           	opt stack 0
  5376  000060                     ___lldiv@dividend:
  5377                           	opt stack 0
  5378                           
  5379                           ; 4 bytes @ 0x0
  5380  000060                     	ds	1
  5381  000061                     ?_putsUSART:
  5382                           	opt stack 0
  5383  000061                     ??_printBinary:
  5384  000061                     ?_strichr:
  5385                           	opt stack 0
  5386  000061                     _isdigit$2895:
  5387                           	opt stack 0
  5388  000061                     putsUSART@data:
  5389                           	opt stack 0
  5390  000061                     strichr@ptr:
  5391                           	opt stack 0
  5392                           
  5393                           ; 2 bytes @ 0x1
  5394  000061                     	ds	1
  5395  000062                     writeEEPROM@data:
  5396                           	opt stack 0
  5397  000062                     readEEPROM@data:
  5398                           	opt stack 0
  5399  000062                     OpenUSART@config:
  5400                           	opt stack 0
  5401  000062                     isdigit@c:
  5402                           	opt stack 0
  5403  000062                     fifo_init@size:
  5404                           	opt stack 0
  5405  000062                     fifo_read@nbytes:
  5406                           	opt stack 0
  5407  000062                     init_crc8@j:
  5408                           	opt stack 0
  5409  000062                     WriteTimer0@timer:
  5410                           	opt stack 0
  5411  000062                     ___lwdiv@divisor:
  5412                           	opt stack 0
  5413  000062                     ___lwmod@divisor:
  5414                           	opt stack 0
  5415  000062                     memcpy@s1:
  5416                           	opt stack 0
  5417  000062                     memset@c:
  5418                           	opt stack 0
  5419  000062                     strcat@from:
  5420                           	opt stack 0
  5421  000062                     strchr@chr:
  5422                           	opt stack 0
  5423  000062                     strcpy@from:
  5424                           	opt stack 0
  5425  000062                     strlen@cp:
  5426                           	opt stack 0
  5427  000062                     ___wmul@multiplicand:
  5428                           	opt stack 0
  5429  000062                     __CANIDToRegs@val:
  5430                           	opt stack 0
  5431                           
  5432                           ; 4 bytes @ 0x2
  5433  000062                     	ds	1
  5434  000063                     ??_putsUSART:
  5435  000063                     init_app_eeprom@i:
  5436                           	opt stack 0
  5437  000063                     printBinary@value:
  5438                           	opt stack 0
  5439  000063                     strichr@chr:
  5440                           	opt stack 0
  5441                           
  5442                           ; 2 bytes @ 0x3
  5443  000063                     	ds	1
  5444  000064                     ??_fifo_read:
  5445  000064                     ??_strchr:
  5446  000064                     ??_setFilter:
  5447  000064                     ?_hexStringToBytes:
  5448                           	opt stack 0
  5449  000064                     ?_strnicmp:
  5450                           	opt stack 0
  5451  000064                     fifo_init@f:
  5452                           	opt stack 0
  5453  000064                     init_crc8@crc:
  5454                           	opt stack 0
  5455  000064                     ___lwdiv@counter:
  5456                           	opt stack 0
  5457  000064                     ___lwmod@counter:
  5458                           	opt stack 0
  5459  000064                     printBinary@i:
  5460                           	opt stack 0
  5461  000064                     hexStringToBytes@buf:
  5462                           	opt stack 0
  5463  000064                     memcpy@n:
  5464                           	opt stack 0
  5465  000064                     memset@n:
  5466                           	opt stack 0
  5467  000064                     strcat@cp:
  5468                           	opt stack 0
  5469  000064                     strcpy@cp:
  5470                           	opt stack 0
  5471  000064                     strnicmp@s1:
  5472                           	opt stack 0
  5473  000064                     ___wmul@product:
  5474                           	opt stack 0
  5475  000064                     ___lldiv@divisor:
  5476                           	opt stack 0
  5477                           
  5478                           ; 4 bytes @ 0x4
  5479  000064                     	ds	1
  5480  000065                     init_crc8@i:
  5481                           	opt stack 0
  5482  000065                     ___lwdiv@quotient:
  5483                           	opt stack 0
  5484                           
  5485                           ; 2 bytes @ 0x5
  5486  000065                     	ds	1
  5487  000066                     ?_atoi:
  5488                           	opt stack 0
  5489  000066                     ?_strspn:
  5490                           	opt stack 0
  5491  000066                     ?_strcspn:
  5492                           	opt stack 0
  5493  000066                     __CANIDToRegs@type:
  5494                           	opt stack 0
  5495  000066                     hexStringToBytes@size:
  5496                           	opt stack 0
  5497  000066                     atoi@s:
  5498                           	opt stack 0
  5499  000066                     memcpy@d:
  5500                           	opt stack 0
  5501  000066                     memset@p:
  5502                           	opt stack 0
  5503  000066                     strnicmp@s2:
  5504                           	opt stack 0
  5505  000066                     strcspn@s1:
  5506                           	opt stack 0
  5507  000066                     strspn@s1:
  5508                           	opt stack 0
  5509                           
  5510                           ; 2 bytes @ 0x6
  5511  000066                     	ds	1
  5512  000067                     ??__CANIDToRegs:
  5513  000067                     ?_crc8:
  5514                           	opt stack 0
  5515  000067                     ?_utoa:
  5516                           	opt stack 0
  5517  000067                     crc8@crc:
  5518                           	opt stack 0
  5519  000067                     hexStringToBytes@inhex:
  5520                           	opt stack 0
  5521  000067                     utoa@buf:
  5522                           	opt stack 0
  5523                           
  5524                           ; 2 bytes @ 0x7
  5525  000067                     	ds	1
  5526  000068                     ??_atoi:
  5527  000068                     fifo_read@p:
  5528                           	opt stack 0
  5529  000068                     memcpy@s:
  5530                           	opt stack 0
  5531  000068                     strnicmp@len:
  5532                           	opt stack 0
  5533  000068                     strcspn@s2:
  5534                           	opt stack 0
  5535  000068                     strspn@s2:
  5536                           	opt stack 0
  5537  000068                     ___lldiv@quotient:
  5538                           	opt stack 0
  5539                           
  5540                           ; 4 bytes @ 0x8
  5541  000068                     	ds	1
  5542  000069                     ??_hexStringToBytes:
  5543  000069                     __CANIDToRegs@Value:
  5544                           	opt stack 0
  5545  000069                     crc8@m:
  5546                           	opt stack 0
  5547  000069                     utoa@val:
  5548                           	opt stack 0
  5549                           
  5550                           ; 2 bytes @ 0x9
  5551  000069                     	ds	1
  5552  00006A                     ??_crc8:
  5553  00006A                     ??_strnicmp:
  5554  00006A                     ?_ECANSendMessage:
  5555                           	opt stack 0
  5556  00006A                     setFilter@filter:
  5557                           	opt stack 0
  5558  00006A                     atoi@sign:
  5559                           	opt stack 0
  5560  00006A                     fifo_read@i:
  5561                           	opt stack 0
  5562  00006A                     strcspn@i:
  5563                           	opt stack 0
  5564  00006A                     strspn@i:
  5565                           	opt stack 0
  5566  00006A                     ECANSendMessage@id:
  5567                           	opt stack 0
  5568                           
  5569                           ; 4 bytes @ 0xA
  5570  00006A                     	ds	1
  5571  00006B                     setFilter@sidh:
  5572                           	opt stack 0
  5573  00006B                     atoi@a:
  5574                           	opt stack 0
  5575  00006B                     utoa@base:
  5576                           	opt stack 0
  5577                           
  5578                           ; 2 bytes @ 0xB
  5579  00006B                     	ds	1
  5580  00006C                     ?_sendEscapedUartData:
  5581                           	opt stack 0
  5582  00006C                     ?_calcCRC:
  5583                           	opt stack 0
  5584  00006C                     ?_strtok:
  5585                           	opt stack 0
  5586  00006C                     setFilter@sidl:
  5587                           	opt stack 0
  5588  00006C                     fifo_read@f:
  5589                           	opt stack 0
  5590  00006C                     ___lldiv@counter:
  5591                           	opt stack 0
  5592  00006C                     strnicmp@r:
  5593                           	opt stack 0
  5594  00006C                     sendEscapedUartData@pcrc:
  5595                           	opt stack 0
  5596  00006C                     calcCRC@p:
  5597                           	opt stack 0
  5598  00006C                     hexStringToBytes@len:
  5599                           	opt stack 0
  5600  00006C                     strtok@s1:
  5601                           	opt stack 0
  5602                           
  5603                           ; 2 bytes @ 0xC
  5604  00006C                     	ds	1
  5605  00006D                     ?_getCANFrame:
  5606                           	opt stack 0
  5607  00006D                     ?_stristr:
  5608                           	opt stack 0
  5609  00006D                     ?___llmod:
  5610                           	opt stack 0
  5611  00006D                     setFilter@eidh:
  5612                           	opt stack 0
  5613  00006D                     getCANFrame@pdlc:
  5614                           	opt stack 0
  5615  00006D                     utoa@v:
  5616                           	opt stack 0
  5617  00006D                     stristr@s1:
  5618                           	opt stack 0
  5619  00006D                     ___llmod@dividend:
  5620                           	opt stack 0
  5621                           
  5622                           ; 4 bytes @ 0xD
  5623  00006D                     	ds	1
  5624  00006E                     sendEscapedUartData@c:
  5625                           	opt stack 0
  5626  00006E                     calcCRC@len:
  5627                           	opt stack 0
  5628  00006E                     setFilter@eidl:
  5629                           	opt stack 0
  5630  00006E                     ECANSendMessage@data:
  5631                           	opt stack 0
  5632  00006E                     hexStringToBytes@p:
  5633                           	opt stack 0
  5634  00006E                     strtok@s2:
  5635                           	opt stack 0
  5636                           
  5637                           ; 2 bytes @ 0xE
  5638  00006E                     	ds	1
  5639  00006F                     ?_sendVSCPDriverCommandReply:
  5640                           	opt stack 0
  5641  00006F                     sendVSCPDriverErrorFrame@errorcode:
  5642                           	opt stack 0
  5643  00006F                     sendVSCPDriverAck@crc:
  5644                           	opt stack 0
  5645  00006F                     sendVSCPDriverNack@crc:
  5646                           	opt stack 0
  5647  00006F                     sendVSCPDriverCommandReply@cmdCode:
  5648                           	opt stack 0
  5649  00006F                     sendVSCPModeCapabilities@crc:
  5650                           	opt stack 0
  5651  00006F                     calcCRC@j:
  5652                           	opt stack 0
  5653  00006F                     utoa@c:
  5654                           	opt stack 0
  5655  00006F                     getCANFrame@pdata:
  5656                           	opt stack 0
  5657  00006F                     stristr@s2:
  5658                           	opt stack 0
  5659                           
  5660                           ; 2 bytes @ 0xF
  5661  00006F                     	ds	1
  5662  000070                     ?_itoa:
  5663                           	opt stack 0
  5664  000070                     sendVSCPDriverErrorFrame@crc:
  5665                           	opt stack 0
  5666  000070                     sendVSCPDriverCommandReply@cmdReplyCode:
  5667                           	opt stack 0
  5668  000070                     calcCRC@crc:
  5669                           	opt stack 0
  5670  000070                     ECANSendMessage@dataLen:
  5671                           	opt stack 0
  5672  000070                     hexStringToBytes@i:
  5673                           	opt stack 0
  5674  000070                     itoa@buf:
  5675                           	opt stack 0
  5676                           
  5677                           ; 2 bytes @ 0x10
  5678  000070                     	ds	1
  5679  000071                     sendVSCPDriverCommandReply@crc:
  5680                           	opt stack 0
  5681  000071                     getCANFrame@pid:
  5682                           	opt stack 0
  5683  000071                     ECANSendMessage@msgFlags:
  5684                           	opt stack 0
  5685  000071                     ___llmod@divisor:
  5686                           	opt stack 0
  5687                           
  5688                           ; 4 bytes @ 0x11
  5689  000071                     	ds	1
  5690  000072                     ??_ECANSendMessage:
  5691  000072                     ?_getVSCPFrame:
  5692                           	opt stack 0
  5693  000072                     getVSCPFrame@pvscpclass:
  5694                           	opt stack 0
  5695  000072                     itoa@val:
  5696                           	opt stack 0
  5697  000072                     receiveSendEventCANAL@data:
  5698                           	opt stack 0
  5699  000072                     receiveSendMultiEventCANAL@data:
  5700                           	opt stack 0
  5701                           
  5702                           ; 8 bytes @ 0x12
  5703  000072                     	ds	1
  5704  000073                     ECANSendMessage@pb:
  5705                           	opt stack 0
  5706                           
  5707                           ; 18 bytes @ 0x13
  5708  000073                     	ds	1
  5709  000074                     getVSCPFrame@pvscptype:
  5710                           	opt stack 0
  5711  000074                     itoa@base:
  5712                           	opt stack 0
  5713                           
  5714                           ; 2 bytes @ 0x14
  5715  000074                     	ds	1
  5716  000075                     ___llmod@counter:
  5717                           	opt stack 0
  5718                           
  5719                           ; 1 bytes @ 0x15
  5720  000075                     	ds	1
  5721  000076                     ?_sprintf:
  5722                           	opt stack 0
  5723  000076                     ?_ultoa:
  5724                           	opt stack 0
  5725  000076                     getVSCPFrame@pNodeId:
  5726                           	opt stack 0
  5727  000076                     sprintf@sp:
  5728                           	opt stack 0
  5729  000076                     ultoa@buf:
  5730                           	opt stack 0
  5731                           
  5732                           ; 2 bytes @ 0x16
  5733  000076                     	ds	2
  5734  000078                     getVSCPFrame@pPriority:
  5735                           	opt stack 0
  5736  000078                     sprintf@f:
  5737                           	opt stack 0
  5738  000078                     ultoa@val:
  5739                           	opt stack 0
  5740  000078                     printFirmwareVersion@wrkbuf:
  5741                           	opt stack 0
  5742                           
  5743                           ; 20 bytes @ 0x18
  5744  000078                     	ds	2
  5745  00007A                     receiveSendEventCANAL@i:
  5746                           	opt stack 0
  5747  00007A                     receiveSendMultiEventCANAL@msgcount:
  5748                           	opt stack 0
  5749  00007A                     getVSCPFrame@pSize:
  5750                           	opt stack 0
  5751                           
  5752                           ; 2 bytes @ 0x1A
  5753  00007A                     	ds	1
  5754  00007B                     receiveSendMultiEventCANAL@i:
  5755                           	opt stack 0
  5756  00007B                     receiveSendEventCANAL@id:
  5757                           	opt stack 0
  5758                           
  5759                           ; 4 bytes @ 0x1B
  5760  00007B                     	ds	1
  5761  00007C                     receiveSendMultiEventCANAL@dlc:
  5762                           	opt stack 0
  5763  00007C                     getVSCPFrame@pData:
  5764                           	opt stack 0
  5765  00007C                     ultoa@base:
  5766                           	opt stack 0
  5767                           
  5768                           ; 2 bytes @ 0x1C
  5769  00007C                     	ds	1
  5770  00007D                     receiveSendMultiEventCANAL@id:
  5771                           	opt stack 0
  5772                           
  5773                           ; 4 bytes @ 0x1D
  5774  00007D                     	ds	1
  5775  00007E                     ??_sprintf:
  5776  00007E                     ??_getVSCPFrame:
  5777  00007E                     ultoa@v:
  5778                           	opt stack 0
  5779                           
  5780                           ; 4 bytes @ 0x1E
  5781  00007E                     	ds	1
  5782  00007F                     receiveSendEventCANAL@dlc:
  5783                           	opt stack 0
  5784                           
  5785                           ; 1 bytes @ 0x1F
  5786  00007F                     	ds	1
  5787  000080                     receiveSendEventCANAL@crc:
  5788                           	opt stack 0
  5789                           
  5790                           ; 1 bytes @ 0x20
  5791  000080                     	ds	1
  5792  000081                     receiveSendMultiEventCANAL@crc:
  5793                           	opt stack 0
  5794  000081                     sprintf@idx:
  5795                           	opt stack 0
  5796                           
  5797                           ; 1 bytes @ 0x21
  5798  000081                     	ds	1
  5799  000082                     receiveSendMultiEventCANAL@pos:
  5800                           	opt stack 0
  5801  000082                     ultoa@c:
  5802                           	opt stack 0
  5803  000082                     _sprintf$2144:
  5804                           	opt stack 0
  5805  000082                     getVSCPFrame@id:
  5806                           	opt stack 0
  5807                           
  5808                           ; 4 bytes @ 0x22
  5809  000082                     	ds	1
  5810  000083                     ??_receiveSendEventSLCAN:
  5811                           
  5812                           ; 0 bytes @ 0x23
  5813  000083                     	ds	1
  5814  000084                     _sprintf$2145:
  5815                           	opt stack 0
  5816                           
  5817                           ; 2 bytes @ 0x24
  5818  000084                     	ds	1
  5819  000085                     ECANSendMessage@mode:
  5820                           	opt stack 0
  5821                           
  5822                           ; 1 bytes @ 0x25
  5823  000085                     	ds	1
  5824  000086                     ECANSendMessage@buffers:
  5825                           	opt stack 0
  5826  000086                     _sprintf$2151:
  5827                           	opt stack 0
  5828  000086                     receiveSendEventSLCAN@id:
  5829                           	opt stack 0
  5830                           
  5831                           ; 4 bytes @ 0x26
  5832  000086                     	ds	1
  5833  000087                     ECANSendMessage@j:
  5834                           	opt stack 0
  5835                           
  5836                           ; 1 bytes @ 0x27
  5837  000087                     	ds	1
  5838  000088                     ECANSendMessage@tempBSEL0:
  5839                           	opt stack 0
  5840  000088                     sprintf@ap:
  5841                           	opt stack 0
  5842                           
  5843                           ; 1 bytes @ 0x28
  5844  000088                     	ds	1
  5845  000089                     ECANSendMessage@tempPtr:
  5846                           	opt stack 0
  5847  000089                     sprintf@prec:
  5848                           	opt stack 0
  5849                           
  5850                           ; 2 bytes @ 0x29
  5851  000089                     	ds	1
  5852  00008A                     receiveSendEventSLCAN@dlc:
  5853                           	opt stack 0
  5854                           
  5855                           ; 1 bytes @ 0x2A
  5856  00008A                     	ds	1
  5857  00008B                     ECANSendMessage@temp:
  5858                           	opt stack 0
  5859  00008B                     receiveSendEventSLCAN@i:
  5860                           	opt stack 0
  5861  00008B                     sprintf@width:
  5862                           	opt stack 0
  5863                           
  5864                           ; 2 bytes @ 0x2B
  5865  00008B                     	ds	1
  5866  00008C                     ECANSendMessage@i:
  5867                           	opt stack 0
  5868                           
  5869                           ; 1 bytes @ 0x2C
  5870  00008C                     	ds	1
  5871  00008D                     ECANSendMessage@ptr:
  5872                           	opt stack 0
  5873  00008D                     sprintf@_val:
  5874                           	opt stack 0
  5875                           
  5876                           ; 4 bytes @ 0x2D
  5877  00008D                     	ds	2
  5878  00008F                     ?_sendCANFrame:
  5879                           	opt stack 0
  5880  00008F                     sendCANFrame@id:
  5881                           	opt stack 0
  5882                           
  5883                           ; 4 bytes @ 0x2F
  5884  00008F                     	ds	2
  5885  000091                     sprintf@c:
  5886                           	opt stack 0
  5887                           
  5888                           ; 1 bytes @ 0x31
  5889  000091                     	ds	1
  5890  000092                     sprintf@flag:
  5891                           	opt stack 0
  5892                           
  5893                           ; 2 bytes @ 0x32
  5894  000092                     	ds	1
  5895  000093                     sendCANFrame@dlc:
  5896                           	opt stack 0
  5897                           
  5898                           ; 1 bytes @ 0x33
  5899  000093                     	ds	1
  5900  000094                     ??_receivePrintEventVerbose:
  5901  000094                     _printStatistics$1366:
  5902                           	opt stack 0
  5903  000094                     _printErrors$1391:
  5904                           	opt stack 0
  5905  000094                     sendCANFrame@pdata:
  5906                           	opt stack 0
  5907                           
  5908                           ; 2 bytes @ 0x34
  5909  000094                     	ds	2
  5910  000096                     ??_doModeSLCAN:
  5911  000096                     ??_receiveVSCPModeCanalMsg:
  5912  000096                     ?_sendVSCPFrame:
  5913                           	opt stack 0
  5914  000096                     _printStatistics$1372:
  5915                           	opt stack 0
  5916  000096                     _printErrors$1397:
  5917                           	opt stack 0
  5918  000096                     sendVSCPFrame@vscpclass:
  5919                           	opt stack 0
  5920                           
  5921                           ; 2 bytes @ 0x36
  5922  000096                     	ds	2
  5923  000098                     sendVSCPFrame@vscptype:
  5924                           	opt stack 0
  5925  000098                     _printStatistics$1378:
  5926                           	opt stack 0
  5927  000098                     _printErrors$1403:
  5928                           	opt stack 0
  5929                           
  5930                           ; 2 bytes @ 0x38
  5931  000098                     	ds	1
  5932  000099                     sendVSCPFrame@nodeid:
  5933                           	opt stack 0
  5934  000099                     _receivePrintEventVerbose$1273:
  5935                           	opt stack 0
  5936                           
  5937                           ; 2 bytes @ 0x39
  5938  000099                     	ds	1
  5939  00009A                     sendVSCPFrame@priority:
  5940                           	opt stack 0
  5941  00009A                     _printStatistics$1384:
  5942                           	opt stack 0
  5943  00009A                     _printErrors$1409:
  5944                           	opt stack 0
  5945                           
  5946                           ; 2 bytes @ 0x3A
  5947  00009A                     	ds	1
  5948  00009B                     sendVSCPFrame@size:
  5949                           	opt stack 0
  5950  00009B                     _receivePrintEventVerbose$1278:
  5951                           	opt stack 0
  5952                           
  5953                           ; 2 bytes @ 0x3B
  5954  00009B                     	ds	1
  5955  00009C                     _printErrors$1415:
  5956                           	opt stack 0
  5957  00009C                     sendVSCPFrame@pData:
  5958                           	opt stack 0
  5959                           
  5960                           ; 2 bytes @ 0x3C
  5961  00009C                     	ds	1
  5962  00009D                     _receivePrintEventVerbose$1283:
  5963                           	opt stack 0
  5964  00009D                     doModeSLCAN@id:
  5965                           	opt stack 0
  5966                           
  5967                           ; 4 bytes @ 0x3D
  5968  00009D                     	ds	1
  5969  00009E                     ??_sendVSCPFrame:
  5970  00009E                     _printErrors$1424:
  5971                           	opt stack 0
  5972                           
  5973                           ; 2 bytes @ 0x3E
  5974  00009E                     	ds	1
  5975  00009F                     _receivePrintEventVerbose$1288:
  5976                           	opt stack 0
  5977                           
  5978                           ; 2 bytes @ 0x3F
  5979  00009F                     	ds	2
  5980  0000A1                     doModeSLCAN@dlc:
  5981                           	opt stack 0
  5982  0000A1                     _receivePrintEventVerbose$1293:
  5983                           	opt stack 0
  5984                           
  5985                           ; 2 bytes @ 0x41
  5986  0000A1                     	ds	1
  5987  0000A2                     doModeSLCAN@c:
  5988                           	opt stack 0
  5989                           
  5990                           ; 1 bytes @ 0x42
  5991  0000A2                     	ds	1
  5992  0000A3                     doModeSLCAN@rv:
  5993                           	opt stack 0
  5994  0000A3                     _receivePrintEventVerbose$1298:
  5995                           	opt stack 0
  5996                           
  5997                           ; 2 bytes @ 0x43
  5998  0000A3                     	ds	2
  5999  0000A5                     receivePrintEventVerbose@i:
  6000                           	opt stack 0
  6001                           
  6002                           ; 1 bytes @ 0x45
  6003  0000A5                     	ds	5
  6004  0000AA                     receiveVSCPModeCanalMsg@data:
  6005                           	opt stack 0
  6006                           
  6007                           ; 8 bytes @ 0x4A
  6008  0000AA                     	ds	8
  6009  0000B2                     receiveVSCPModeCanalMsg@id:
  6010                           	opt stack 0
  6011  0000B2                     sendVSCPFrame@id:
  6012                           	opt stack 0
  6013                           
  6014                           ; 4 bytes @ 0x52
  6015  0000B2                     	ds	4
  6016  0000B6                     ?_readRegisterExtended:
  6017                           	opt stack 0
  6018  0000B6                     ?_writeRegisterExtended:
  6019                           	opt stack 0
  6020  0000B6                     ?_readRegister:
  6021                           	opt stack 0
  6022  0000B6                     receiveVSCPModeCanalMsg@dlc:
  6023                           	opt stack 0
  6024  0000B6                     readRegister@reg:
  6025                           	opt stack 0
  6026  0000B6                     readRegisterExtended@page:
  6027                           	opt stack 0
  6028  0000B6                     writeRegisterExtended@page:
  6029                           	opt stack 0
  6030                           
  6031                           ; 2 bytes @ 0x56
  6032  0000B6                     	ds	1
  6033  0000B7                     doModeVscp@c:
  6034                           	opt stack 0
  6035  0000B7                     readRegister@timeout:
  6036                           	opt stack 0
  6037                           
  6038                           ; 2 bytes @ 0x57
  6039  0000B7                     	ds	1
  6040  0000B8                     readRegisterExtended@reg:
  6041                           	opt stack 0
  6042  0000B8                     writeRegisterExtended@reg:
  6043                           	opt stack 0
  6044                           
  6045                           ; 1 bytes @ 0x58
  6046  0000B8                     	ds	1
  6047  0000B9                     readRegister@value:
  6048                           	opt stack 0
  6049  0000B9                     readRegisterExtended@timeout:
  6050                           	opt stack 0
  6051  0000B9                     writeRegisterExtended@timeout:
  6052                           	opt stack 0
  6053                           
  6054                           ; 2 bytes @ 0x59
  6055  0000B9                     	ds	1
  6056  0000BA                     ??_readRegister:
  6057                           
  6058                           ; 0 bytes @ 0x5A
  6059  0000BA                     	ds	1
  6060  0000BB                     readRegisterExtended@value:
  6061                           	opt stack 0
  6062  0000BB                     writeRegisterExtended@value:
  6063                           	opt stack 0
  6064                           
  6065                           ; 2 bytes @ 0x5B
  6066  0000BB                     	ds	2
  6067  0000BD                     ??_readRegisterExtended:
  6068  0000BD                     ??_writeRegisterExtended:
  6069                           
  6070                           ; 0 bytes @ 0x5D
  6071  0000BD                     	ds	1
  6072  0000BE                     readRegister@nodeid:
  6073                           	opt stack 0
  6074                           
  6075                           ; 1 bytes @ 0x5E
  6076  0000BE                     	ds	1
  6077  0000BF                     printGUID@nodeid:
  6078                           	opt stack 0
  6079  0000BF                     printMDF@nodeid:
  6080                           	opt stack 0
  6081  0000BF                     printNodeFirmwareVersion@nodeid:
  6082                           	opt stack 0
  6083                           
  6084                           ; 1 bytes @ 0x5F
  6085  0000BF                     	ds	1
  6086  0000C0                     printMDF@value:
  6087                           	opt stack 0
  6088  0000C0                     printGUID@buf:
  6089                           	opt stack 0
  6090  0000C0                     printNodeFirmwareVersion@buf:
  6091                           	opt stack 0
  6092                           
  6093                           ; 3 bytes @ 0x60
  6094  0000C0                     	ds	1
  6095  0000C1                     readRegisterExtended@nodeid:
  6096                           	opt stack 0
  6097  0000C1                     writeRegisterExtended@nodeid:
  6098                           	opt stack 0
  6099  0000C1                     printMDF@p:
  6100                           	opt stack 0
  6101                           
  6102                           ; 2 bytes @ 0x61
  6103  0000C1                     	ds	2
  6104  0000C3                     printGUID@value:
  6105                           	opt stack 0
  6106  0000C3                     printMDF@i:
  6107                           	opt stack 0
  6108  0000C3                     printNodeFirmwareVersion@value:
  6109                           	opt stack 0
  6110                           
  6111                           ; 1 bytes @ 0x63
  6112  0000C3                     	ds	1
  6113  0000C4                     printGUID@i:
  6114                           	opt stack 0
  6115  0000C4                     printNodeFirmwareVersion@i:
  6116                           	opt stack 0
  6117                           
  6118                           ; 1 bytes @ 0x64
  6119  0000C4                     	ds	1
  6120  0000C5                     _findNodes$1468:
  6121                           	opt stack 0
  6122                           
  6123                           ; 2 bytes @ 0x65
  6124  0000C5                     	ds	2
  6125  0000C7                     findNodes@nFound:
  6126                           	opt stack 0
  6127                           
  6128                           ; 1 bytes @ 0x67
  6129  0000C7                     	ds	1
  6130  0000C8                     findNodes@value:
  6131                           	opt stack 0
  6132                           
  6133                           ; 1 bytes @ 0x68
  6134  0000C8                     	ds	1
  6135  0000C9                     findNodes@i:
  6136                           	opt stack 0
  6137                           
  6138                           ; 1 bytes @ 0x69
  6139  0000C9                     	ds	1
  6140  0000CA                     
  6141                           ; 2 bytes @ 0x6A
  6142  0000CA                     	ds	2
  6143  0000CC                     
  6144                           ; 3 bytes @ 0x6C
  6145  0000CC                     	ds	3
  6146  0000CF                     ??_main:
  6147                           
  6148                           ; 0 bytes @ 0x6F
  6149  0000CF                     	ds	1
  6150  0000D0                     main@c:
  6151                           	opt stack 0
  6152                           
  6153                           ; 1 bytes @ 0x70
  6154  0000D0                     	ds	1
  6155                           tblptru	equ	0xFF8
  6156                           tblptrh	equ	0xFF7
  6157                           tblptrl	equ	0xFF6
  6158                           tablat	equ	0xFF5
  6159                           prodh	equ	0xFF4
  6160                           prodl	equ	0xFF3
  6161                           intcon	equ	0xFF2
  6162                           indf0	equ	0xFEF
  6163                           postinc0	equ	0xFEE
  6164                           fsr0h	equ	0xFEA
  6165                           fsr0l	equ	0xFE9
  6166                           wreg	equ	0xFE8
  6167                           indf1	equ	0xFE7
  6168                           postinc1	equ	0xFE6
  6169                           postdec1	equ	0xFE5
  6170                           fsr1h	equ	0xFE2
  6171                           fsr1l	equ	0xFE1
  6172                           indf2	equ	0xFDF
  6173                           postinc2	equ	0xFDE
  6174                           postdec2	equ	0xFDD
  6175                           plusw2	equ	0xFDB
  6176                           fsr2h	equ	0xFDA
  6177                           fsr2l	equ	0xFD9
  6178                           status	equ	0xFD8
  6179                           
  6180                           	psect	cstackCOMRAM
  6181  000001                     __pcstackCOMRAM:
  6182                           	opt stack 0
  6183  000001                     ?__RegsToCANID:
  6184                           	opt stack 0
  6185  000001                     ?i1_WriteTimer0:
  6186                           	opt stack 0
  6187  000001                     ?_fifo_write:
  6188                           	opt stack 0
  6189  000001                     ?_fifo_getFree:
  6190                           	opt stack 0
  6191  000001                     ?__ECANPointBuffer:
  6192                           	opt stack 0
  6193  000001                     fifo_write@buf:
  6194                           	opt stack 0
  6195  000001                     ReadUSART@data:
  6196                           	opt stack 0
  6197  000001                     __RegsToCANID@ptr:
  6198                           	opt stack 0
  6199  000001                     i1WriteTimer0@timer0:
  6200                           	opt stack 0
  6201                           
  6202                           ; 2 bytes @ 0x0
  6203  000001                     	ds	1
  6204  000002                     fifo_write@nbytes:
  6205                           	opt stack 0
  6206                           
  6207                           ; 4 bytes @ 0x1
  6208  000002                     	ds	1
  6209  000003                     ??_fifo_getFree:
  6210  000003                     __RegsToCANID@val:
  6211                           	opt stack 0
  6212  000003                     i1WriteTimer0@timer:
  6213                           	opt stack 0
  6214                           
  6215                           ; 2 bytes @ 0x2
  6216  000003                     	ds	1
  6217  000004                     __RegsToCANID@type:
  6218                           	opt stack 0
  6219  000004                     __ECANPointBuffer@b:
  6220                           	opt stack 0
  6221                           
  6222                           ; 1 bytes @ 0x3
  6223  000004                     	ds	1
  6224  000005                     ??__RegsToCANID:
  6225  000005                     __ECANPointBuffer@pt:
  6226                           	opt stack 0
  6227                           
  6228                           ; 2 bytes @ 0x4
  6229  000005                     	ds	1
  6230  000006                     ??_fifo_write:
  6231                           
  6232                           ; 0 bytes @ 0x5
  6233  000006                     	ds	1
  6234  000007                     __RegsToCANID@Value:
  6235                           	opt stack 0
  6236                           
  6237                           ; 1 bytes @ 0x6
  6238  000007                     	ds	1
  6239  000008                     ?_ECANReceiveMessage:
  6240                           	opt stack 0
  6241  000008                     ECANReceiveMessage@data:
  6242                           	opt stack 0
  6243                           
  6244                           ; 1 bytes @ 0x7
  6245  000008                     	ds	1
  6246  000009                     ECANReceiveMessage@dataLen:
  6247                           	opt stack 0
  6248                           
  6249                           ; 1 bytes @ 0x8
  6250  000009                     	ds	1
  6251  00000A                     ECANReceiveMessage@msgFlags:
  6252                           	opt stack 0
  6253  00000A                     fifo_write@p:
  6254                           	opt stack 0
  6255                           
  6256                           ; 1 bytes @ 0x9
  6257  00000A                     	ds	1
  6258  00000B                     fifo_getFree@f:
  6259                           	opt stack 0
  6260  00000B                     ECANReceiveMessage@savedPtr:
  6261                           	opt stack 0
  6262  00000B                     fifo_write@i:
  6263                           	opt stack 0
  6264                           
  6265                           ; 4 bytes @ 0xA
  6266  00000B                     	ds	2
  6267  00000D                     ECANReceiveMessage@id:
  6268                           	opt stack 0
  6269                           
  6270                           ; 1 bytes @ 0xC
  6271  00000D                     	ds	1
  6272  00000E                     ECANReceiveMessage@i:
  6273                           	opt stack 0
  6274                           
  6275                           ; 1 bytes @ 0xD
  6276  00000E                     	ds	1
  6277  00000F                     ECANReceiveMessage@mode:
  6278                           	opt stack 0
  6279  00000F                     fifo_write@f:
  6280                           	opt stack 0
  6281                           
  6282                           ; 1 bytes @ 0xE
  6283  00000F                     	ds	1
  6284  000010                     ECANReceiveMessage@temp:
  6285                           	opt stack 0
  6286                           
  6287                           ; 1 bytes @ 0xF
  6288  000010                     	ds	1
  6289  000011                     ECANReceiveMessage@ptr:
  6290                           	opt stack 0
  6291                           
  6292                           ; 2 bytes @ 0x10
  6293  000011                     	ds	2
  6294  000013                     ??_Interrupt:
  6295                           
  6296                           ; 0 bytes @ 0x12
  6297  000013                     	ds	9
  6298  00001C                     Interrupt@data:
  6299                           	opt stack 0
  6300                           
  6301                           ; 8 bytes @ 0x1B
  6302  00001C                     	ds	8
  6303  000024                     Interrupt@c:
  6304                           	opt stack 0
  6305                           
  6306                           ; 1 bytes @ 0x23
  6307  000024                     	ds	1
  6308  000025                     Interrupt@dlc:
  6309                           	opt stack 0
  6310                           
  6311                           ; 1 bytes @ 0x24
  6312  000025                     	ds	1
  6313  000026                     Interrupt@id:
  6314                           	opt stack 0
  6315                           
  6316                           ; 4 bytes @ 0x25
  6317  000026                     	ds	4
  6318  00002A                     Interrupt@flags:
  6319                           	opt stack 0
  6320                           
  6321                           ; 1 bytes @ 0x29
  6322  00002A                     	ds	1
  6323                           tblptru	equ	0xFF8
  6324                           tblptrh	equ	0xFF7
  6325                           tblptrl	equ	0xFF6
  6326                           tablat	equ	0xFF5
  6327                           prodh	equ	0xFF4
  6328                           prodl	equ	0xFF3
  6329                           intcon	equ	0xFF2
  6330                           indf0	equ	0xFEF
  6331                           postinc0	equ	0xFEE
  6332                           fsr0h	equ	0xFEA
  6333                           fsr0l	equ	0xFE9
  6334                           wreg	equ	0xFE8
  6335                           indf1	equ	0xFE7
  6336                           postinc1	equ	0xFE6
  6337                           postdec1	equ	0xFE5
  6338                           fsr1h	equ	0xFE2
  6339                           fsr1l	equ	0xFE1
  6340                           indf2	equ	0xFDF
  6341                           postinc2	equ	0xFDE
  6342                           postdec2	equ	0xFDD
  6343                           plusw2	equ	0xFDB
  6344                           fsr2h	equ	0xFDA
  6345                           fsr2l	equ	0xFD9
  6346                           status	equ	0xFD8
  6347                           
  6348 ;;
  6349 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6350 ;;
  6351 ;; *************** function _main *****************
  6352 ;; Defined at:
  6353 ;;		line 255 in file "main.c"
  6354 ;; Parameters:    Size  Location     Type
  6355 ;;  argc            2  106[BANK0 ] int 
  6356 ;;  argv            3  108[BANK0 ] PTR PTR unsigned char 
  6357 ;; Auto vars:     Size  Location     Type
  6358 ;;  c               1  112[BANK0 ] unsigned char 
  6359 ;; Return value:  Size  Location     Type
  6360 ;;                  2  106[BANK0 ] int 
  6361 ;; Registers used:
  6362 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6363 ;; Tracked objects:
  6364 ;;		On entry : 0/0
  6365 ;;		On exit  : F/0
  6366 ;;		Unchanged: 0/0
  6367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6368 ;;      Params:         0       5       0       0       0       0       0
  6369 ;;      Locals:         0       1       0       0       0       0       0
  6370 ;;      Temps:          0       1       0       0       0       0       0
  6371 ;;      Totals:         0       7       0       0       0       0       0
  6372 ;;Total ram usage:        7 bytes
  6373 ;; Hardware stack levels required when called:   11
  6374 ;; This function calls:
  6375 ;;		_fifo_init
  6376 ;;		_init_crc8
  6377 ;;		_readEEPROM
  6378 ;;		_vscp_restoreDefaults
  6379 ;;		_init
  6380 ;;		_putsUSART
  6381 ;;		_printFirmwareVersion
  6382 ;;		_printMode
  6383 ;;		_fifo_read
  6384 ;;		_doModeVerbose
  6385 ;;		_doModeVscp
  6386 ;;		_doModeSLCAN
  6387 ;;		_doModeVscpNode
  6388 ;; This function is called by:
  6389 ;;		Startup code after reset
  6390 ;; This function uses a non-reentrant model
  6391 ;;
  6392                           
  6393                           	psect	text0
  6394  003410                     __ptext0:
  6395                           	opt stack 0
  6396  003410                     _main:
  6397                           	opt stack 20
  6398                           
  6399                           ;main.c: 257: caps.maxVscpFrames = 1;
  6400                           
  6401                           ;incstack = 0
  6402                           ;incstack = 0
  6403  003410  0E01               	movlw	1
  6404  003412  0100               	movlb	0	; () banked
  6405  003414  6FF5               	movwf	_caps& (0+255),b
  6406                           
  6407                           ;main.c: 258: caps.maxCanalFrames = 1;
  6408  003416  6FF6               	movwf	(_caps+1)& (0+255),b
  6409                           
  6410                           ; BSR set to: 0
  6411                           ;main.c: 263: fifo_init( &serialInputFifo, inputBuffer, sizeof ( inputBuffer));
  6412  003418  0E02               	movlw	high _inputBuffer
  6413  00341A  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6414  00341C  0E00               	movlw	low _inputBuffer
  6415  00341E  6F60               	movwf	?_fifo_init& (0+255),b
  6416  003420  6B63               	clrf	(?_fifo_init+3)& (0+255),b
  6417  003422  0E80               	movlw	128
  6418  003424  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6419  003426  0E48               	movlw	_serialInputFifo& (0+255)
  6420  003428  EC3D  F02A         	call	_fifo_init
  6421                           
  6422                           ; BSR set to: 0
  6423                           ;main.c: 264: fifo_init( &canInputFifo, caninputBuffer, sizeof ( caninputBuffer));
  6424  00342C  0E04               	movlw	high _caninputBuffer
  6425  00342E  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6426  003430  0E00               	movlw	low _caninputBuffer
  6427  003432  6F60               	movwf	?_fifo_init& (0+255),b
  6428  003434  0E01               	movlw	1
  6429  003436  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6430  003438  0EEE               	movlw	238
  6431  00343A  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6432  00343C  0E40               	movlw	_canInputFifo& (0+255)
  6433  00343E  EC3D  F02A         	call	_fifo_init
  6434                           
  6435                           ; BSR set to: 0
  6436                           ;main.c: 267: init_crc8();
  6437  003442  EC71  F027         	call	_init_crc8	;wreg free
  6438                           
  6439                           ; BSR set to: 0
  6440                           ;main.c: 271: if ( ( 0x55 != readEEPROM(0x01) ) ||
  6441                           ;main.c: 272: ( 0xaa != readEEPROM(0x02) ) ) {
  6442  003446  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
  6443  003448  0E01               	movlw	1
  6444  00344A  6F60               	movwf	?_readEEPROM& (0+255),b
  6445  00344C  ECD8  F02B         	call	_readEEPROM	;wreg free
  6446  003450  0A55               	xorlw	85
  6447  003452  E107               	bnz	l9815
  6448                           
  6449                           ; BSR set to: 0
  6450  003454  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
  6451  003456  0E02               	movlw	2
  6452  003458  6F60               	movwf	?_readEEPROM& (0+255),b
  6453  00345A  ECD8  F02B         	call	_readEEPROM	;wreg free
  6454  00345E  0AAA               	xorlw	170
  6455  003460  A4D8               	btfss	status,2,c
  6456  003462                     l9815:
  6457                           
  6458                           ; BSR set to: 0
  6459                           ;main.c: 273: vscp_restoreDefaults();
  6460  003462  ECEA  F02B         	call	_vscp_restoreDefaults	;wreg free
  6461                           
  6462                           ;main.c: 274: }
  6463                           ;main.c: 277: init();
  6464  003466  EC93  F029         	call	_init	;wreg free
  6465                           
  6466                           ; BSR set to: 0
  6467                           ;main.c: 281: _delay((unsigned long)((10)*(40000000/4000.0)));
  6468  00346A  0E82               	movlw	130
  6469  00346C  6FCF               	movwf	??_main& (0+255),b
  6470  00346E  0EDD               	movlw	221
  6471  003470                     u17137:
  6472  003470  2EE8               	decfsz	wreg,f,c
  6473  003472  D7FE               	goto	u17137
  6474  003474  2FCF               	decfsz	??_main& (0+255),f,b
  6475  003476  D7FC               	goto	u17137
  6476  003478  D000               	nop2	
  6477                           
  6478                           ;main.c: 285: putsUSART((char *) "\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  6479  00347A  0E79               	movlw	high STR_1
  6480  00347C  0100               	movlb	0	; () banked
  6481  00347E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6482  003480  0E2F               	movlw	low STR_1
  6483  003482  6F61               	movwf	?_putsUSART& (0+255),b
  6484  003484  ECF6  F028         	call	_putsUSART	;wreg free
  6485                           
  6486                           ;main.c: 286: putsUSART((char *) "Copyright (C) 2014-2015 Grodans Paradis AB, Sweden\r\n
      +                          ");
  6487  003488  0E74               	movlw	high STR_2
  6488  00348A  0100               	movlb	0	; () banked
  6489  00348C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6490  00348E  0E8D               	movlw	low STR_2
  6491  003490  6F61               	movwf	?_putsUSART& (0+255),b
  6492  003492  ECF6  F028         	call	_putsUSART	;wreg free
  6493                           
  6494                           ;main.c: 287: putsUSART((char *) "http://www.paradiseofthefrog.com\r\n");
  6495  003496  0E79               	movlw	high STR_3
  6496  003498  0100               	movlb	0	; () banked
  6497  00349A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6498  00349C  0E9D               	movlw	low STR_3
  6499  00349E  6F61               	movwf	?_putsUSART& (0+255),b
  6500  0034A0  ECF6  F028         	call	_putsUSART	;wreg free
  6501                           
  6502                           ;main.c: 288: printFirmwareVersion();
  6503  0034A4  EC39  F025         	call	_printFirmwareVersion	;wreg free
  6504                           
  6505                           ;main.c: 289: printMode();
  6506  0034A8  ECFB  F026         	call	_printMode	;wreg free
  6507                           
  6508                           ;main.c: 293: if ( 0 != mode ) {
  6509  0034AC  0100               	movlb	0	; () banked
  6510  0034AE  51F1               	movf	_mode& (0+255),w,b
  6511  0034B0  E034               	bz	l9849
  6512                           
  6513                           ; BSR set to: 0
  6514                           ;main.c: 295: uint8_t c;
  6515                           ;main.c: 297: putsUSART((char *) "Press 'v' within three seconds to enter verbose mode\r
      +                          \n");
  6516  0034B2  0E73               	movlw	high STR_4
  6517  0034B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6518  0034B6  0EB5               	movlw	low STR_4
  6519  0034B8  6F61               	movwf	?_putsUSART& (0+255),b
  6520  0034BA  ECF6  F028         	call	_putsUSART	;wreg free
  6521                           
  6522                           ;main.c: 299: timekeeper = 0;
  6523  0034BE  0100               	movlb	0	; () banked
  6524  0034C0  6BE5               	clrf	_timekeeper& (0+255),b	;volatile
  6525  0034C2  6BE6               	clrf	(_timekeeper+1)& (0+255),b	;volatile
  6526  0034C4  6BE7               	clrf	(_timekeeper+2)& (0+255),b	;volatile
  6527  0034C6  6BE8               	clrf	(_timekeeper+3)& (0+255),b	;volatile
  6528                           
  6529                           ; BSR set to: 0
  6530                           ;main.c: 300: ledFunctionality = 6;
  6531  0034C8  0E06               	movlw	6
  6532  0034CA  6E3F               	movwf	_ledFunctionality,c
  6533                           
  6534                           ;main.c: 301: while (timekeeper < 3000) {
  6535  0034CC  D01D               	goto	l9847
  6536  0034CE                     l421:
  6537                           
  6538                           ; BSR set to: 0
  6539  0034CE  0004               	clrwdt		;# 
  6540                           
  6541                           ;main.c: 303: (INTCONbits.GIE = 0);
  6542  0034D0  9EF2               	bcf	intcon,7,c	;volatile
  6543                           
  6544                           ;main.c: 304: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6545  0034D2  0100               	movlb	0	; () banked
  6546  0034D4  0E00               	movlw	high main@c
  6547  0034D6  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6548  0034D8  0ED0               	movlw	low main@c
  6549  0034DA  6F60               	movwf	?_fifo_read& (0+255),b
  6550  0034DC  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  6551  0034DE  0E01               	movlw	1
  6552  0034E0  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6553  0034E2  0E48               	movlw	_serialInputFifo& (0+255)
  6554  0034E4  EC9C  F021         	call	_fifo_read
  6555  0034E8  0560               	decf	?_fifo_read& (0+255),w,b
  6556  0034EA  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6557  0034EC  E10C               	bnz	l422
  6558                           
  6559                           ; BSR set to: 0
  6560                           ;main.c: 305: (INTCONbits.GIE = 1);
  6561  0034EE  8EF2               	bsf	intcon,7,c	;volatile
  6562                           
  6563                           ; BSR set to: 0
  6564                           ;main.c: 306: if ('v' == c) {
  6565  0034F0  51D0               	movf	main@c& (0+255),w,b
  6566  0034F2  0A76               	xorlw	118
  6567  0034F4  E108               	bnz	l422
  6568                           
  6569                           ; BSR set to: 0
  6570                           ;main.c: 307: mode = 0;
  6571  0034F6  6BF1               	clrf	_mode& (0+255),b
  6572                           
  6573                           ; BSR set to: 0
  6574                           ;main.c: 308: putsUSART((char *) "Temporary verbose mode set\r\n");
  6575  0034F8  0E7B               	movlw	high STR_5
  6576  0034FA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6577  0034FC  0E2A               	movlw	low STR_5
  6578  0034FE  6F61               	movwf	?_putsUSART& (0+255),b
  6579  003500  ECF6  F028         	call	_putsUSART	;wreg free
  6580                           
  6581                           ;main.c: 309: break;
  6582  003504  D00A               	goto	l9849
  6583  003506                     l422:
  6584                           
  6585                           ; BSR set to: 0
  6586                           ;main.c: 310: }
  6587                           ;main.c: 311: }
  6588                           ;main.c: 312: (INTCONbits.GIE = 1);
  6589  003506  8EF2               	bsf	intcon,7,c	;volatile
  6590  003508                     l9847:
  6591                           
  6592                           ; BSR set to: 0
  6593  003508  0EB8               	movlw	184
  6594  00350A  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
  6595  00350C  0E0B               	movlw	11
  6596  00350E  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
  6597  003510  0E00               	movlw	0
  6598  003512  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
  6599  003514  0E00               	movlw	0
  6600  003516  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
  6601  003518  E3DA               	bnc	l421
  6602  00351A                     l9849:
  6603                           
  6604                           ;main.c: 313: }
  6605                           ;main.c: 314: }
  6606                           ;main.c: 316: ledFunctionality = 1;
  6607  00351A  0E01               	movlw	1
  6608  00351C  6E3F               	movwf	_ledFunctionality,c
  6609  00351E                     l425:
  6610  00351E  0004               	clrwdt		;# 
  6611                           
  6612                           ;main.c: 324: if (COMSTATbits.TXBO) {
  6613  003520  AA74               	btfss	3956,5,c	;volatile
  6614  003522  D002               	goto	l426
  6615                           
  6616                           ;main.c: 326: ledFunctionality = 6;
  6617  003524  0E06               	movlw	6
  6618  003526  D009               	goto	L1
  6619  003528                     l426:
  6620                           
  6621                           ;main.c: 328: else if (COMSTATbits.TXBP || COMSTATbits.RXBP) {
  6622  003528  B874               	btfsc	3956,4,c	;volatile
  6623  00352A  D002               	goto	l9857
  6624  00352C  A674               	btfss	3956,3,c	;volatile
  6625  00352E  D002               	goto	l428
  6626  003530                     l9857:
  6627                           
  6628                           ;main.c: 330: ledFunctionality = 5;
  6629  003530  0E05               	movlw	5
  6630  003532  D003               	goto	L1
  6631  003534                     l428:
  6632                           
  6633                           ;main.c: 334: ledFunctionality = 4;
  6634  003534  0E04               	movlw	4
  6635                           
  6636                           ;main.c: 332: else if (COMSTATbits.EWARN) {
  6637  003536  A074               	btfss	3956,0,c	;volatile
  6638                           
  6639                           ;main.c: 336: else {
  6640                           ;main.c: 338: ledFunctionality = 1;
  6641                           
  6642                           ;main.c: 335: }
  6643  003538  0E01               	movlw	1
  6644  00353A                     L1:
  6645  00353A  6E3F               	movwf	_ledFunctionality,c
  6646                           
  6647                           ;main.c: 339: }
  6648                           ;main.c: 342: if (COMSTATbits.RXBnOVFL) {
  6649  00353C  AC74               	btfss	3956,6,c	;volatile
  6650  00353E  D007               	goto	l9869
  6651                           
  6652                           ;main.c: 343: can_receiveOverruns++;
  6653  003540  0100               	movlb	0	; () banked
  6654  003542  2BD1               	incf	_can_receiveOverruns& (0+255),f,b
  6655  003544  0E00               	movlw	0
  6656  003546  23D2               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
  6657  003548  23D3               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
  6658  00354A  23D4               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
  6659                           
  6660                           ; BSR set to: 0
  6661                           ;main.c: 344: COMSTATbits.RXBnOVFL = 0;
  6662  00354C  9C74               	bcf	3956,6,c	;volatile
  6663  00354E                     l9869:
  6664                           
  6665                           ;main.c: 345: }
  6666                           ;main.c: 347: if (0 == mode) {
  6667  00354E  0100               	movlb	0	; () banked
  6668  003550  67F1               	tstfsz	_mode& (0+255),b
  6669  003552  D003               	goto	l9873
  6670  003554                     l9871:
  6671                           
  6672                           ; BSR set to: 0
  6673                           ;main.c: 348: doModeVerbose();
  6674  003554  EC36  F001         	call	_doModeVerbose	;wreg free
  6675                           
  6676                           ;main.c: 349: }
  6677  003558  D7E2               	goto	l425
  6678  00355A                     l9873:
  6679                           
  6680                           ; BSR set to: 0
  6681                           ;main.c: 350: else if (1 == mode) {
  6682  00355A  05F1               	decf	_mode& (0+255),w,b
  6683  00355C  E103               	bnz	l9877
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;main.c: 351: doModeVscp();
  6687  00355E  EC1E  F016         	call	_doModeVscp	;wreg free
  6688                           
  6689                           ;main.c: 352: }
  6690  003562  D7DD               	goto	l425
  6691  003564                     l9877:
  6692                           
  6693                           ; BSR set to: 0
  6694                           ;main.c: 353: else if (2 == mode) {
  6695  003564  51F1               	movf	_mode& (0+255),w,b
  6696  003566  0A02               	xorlw	2
  6697  003568  E103               	bnz	l9881
  6698                           
  6699                           ; BSR set to: 0
  6700                           ;main.c: 354: doModeSLCAN();
  6701  00356A  ECC8  F00E         	call	_doModeSLCAN	;wreg free
  6702                           
  6703                           ;main.c: 355: }
  6704  00356E  D7D7               	goto	l425
  6705  003570                     l9881:
  6706                           
  6707                           ; BSR set to: 0
  6708                           ;main.c: 356: else if (3 == mode) {
  6709  003570  51F1               	movf	_mode& (0+255),w,b
  6710  003572  0A03               	xorlw	3
  6711  003574  E1EF               	bnz	l9871
  6712                           
  6713                           ; BSR set to: 0
  6714                           ;main.c: 357: doModeVscpNode();
  6715  003576  ECEE  F02B         	call	_doModeVscpNode	;wreg free
  6716                           
  6717                           ;main.c: 358: }
  6718  00357A  D7D1               	goto	l425
  6719  00357C                     __end_of_main:
  6720                           	opt stack 0
  6721                           tblptru	equ	0xFF8
  6722                           tblptrh	equ	0xFF7
  6723                           tblptrl	equ	0xFF6
  6724                           tablat	equ	0xFF5
  6725                           prodh	equ	0xFF4
  6726                           prodl	equ	0xFF3
  6727                           intcon	equ	0xFF2
  6728                           indf0	equ	0xFEF
  6729                           postinc0	equ	0xFEE
  6730                           fsr0h	equ	0xFEA
  6731                           fsr0l	equ	0xFE9
  6732                           wreg	equ	0xFE8
  6733                           indf1	equ	0xFE7
  6734                           postinc1	equ	0xFE6
  6735                           postdec1	equ	0xFE5
  6736                           fsr1h	equ	0xFE2
  6737                           fsr1l	equ	0xFE1
  6738                           indf2	equ	0xFDF
  6739                           postinc2	equ	0xFDE
  6740                           postdec2	equ	0xFDD
  6741                           plusw2	equ	0xFDB
  6742                           fsr2h	equ	0xFDA
  6743                           fsr2l	equ	0xFD9
  6744                           status	equ	0xFD8
  6745                           
  6746 ;; *************** function _doModeVscpNode *****************
  6747 ;; Defined at:
  6748 ;;		line 1506 in file "main.c"
  6749 ;; Parameters:    Size  Location     Type
  6750 ;;		None
  6751 ;; Auto vars:     Size  Location     Type
  6752 ;;		None
  6753 ;; Return value:  Size  Location     Type
  6754 ;;		None               void
  6755 ;; Registers used:
  6756 ;;		None
  6757 ;; Tracked objects:
  6758 ;;		On entry : F/0
  6759 ;;		On exit  : F/0
  6760 ;;		Unchanged: F/0
  6761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6762 ;;      Params:         0       0       0       0       0       0       0
  6763 ;;      Locals:         0       0       0       0       0       0       0
  6764 ;;      Temps:          0       0       0       0       0       0       0
  6765 ;;      Totals:         0       0       0       0       0       0       0
  6766 ;;Total ram usage:        0 bytes
  6767 ;; Hardware stack levels used:    1
  6768 ;; Hardware stack levels required when called:    3
  6769 ;; This function calls:
  6770 ;;		Nothing
  6771 ;; This function is called by:
  6772 ;;		_main
  6773 ;; This function uses a non-reentrant model
  6774 ;;
  6775                           
  6776                           	psect	text1
  6777  0057DC                     __ptext1:
  6778                           	opt stack 0
  6779  0057DC                     _doModeVscpNode:
  6780                           	opt stack 27
  6781                           
  6782                           ; BSR set to: 0
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;incstack = 0
  6786                           ;incstack = 0
  6787  0057DC  0012               	return	
  6788  0057DE                     __end_of_doModeVscpNode:
  6789                           	opt stack 0
  6790                           tblptru	equ	0xFF8
  6791                           tblptrh	equ	0xFF7
  6792                           tblptrl	equ	0xFF6
  6793                           tablat	equ	0xFF5
  6794                           prodh	equ	0xFF4
  6795                           prodl	equ	0xFF3
  6796                           intcon	equ	0xFF2
  6797                           indf0	equ	0xFEF
  6798                           postinc0	equ	0xFEE
  6799                           fsr0h	equ	0xFEA
  6800                           fsr0l	equ	0xFE9
  6801                           wreg	equ	0xFE8
  6802                           indf1	equ	0xFE7
  6803                           postinc1	equ	0xFE6
  6804                           postdec1	equ	0xFE5
  6805                           fsr1h	equ	0xFE2
  6806                           fsr1l	equ	0xFE1
  6807                           indf2	equ	0xFDF
  6808                           postinc2	equ	0xFDE
  6809                           postdec2	equ	0xFDD
  6810                           plusw2	equ	0xFDB
  6811                           fsr2h	equ	0xFDA
  6812                           fsr2l	equ	0xFD9
  6813                           status	equ	0xFD8
  6814                           
  6815 ;; *************** function _doModeSLCAN *****************
  6816 ;; Defined at:
  6817 ;;		line 1304 in file "main.c"
  6818 ;; Parameters:    Size  Location     Type
  6819 ;;		None
  6820 ;; Auto vars:     Size  Location     Type
  6821 ;;  id              4   61[BANK0 ] unsigned long 
  6822 ;;  dlc             1   65[BANK0 ] unsigned char 
  6823 ;;  rv              1   67[BANK0 ] enum E15660
  6824 ;;  c               1   66[BANK0 ] unsigned char 
  6825 ;; Return value:  Size  Location     Type
  6826 ;;		None               void
  6827 ;; Registers used:
  6828 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6829 ;; Tracked objects:
  6830 ;;		On entry : F/0
  6831 ;;		On exit  : E/0
  6832 ;;		Unchanged: 0/0
  6833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6834 ;;      Params:         0       0       0       0       0       0       0
  6835 ;;      Locals:         0       7       0       0       0       0       0
  6836 ;;      Temps:          0       7       0       0       0       0       0
  6837 ;;      Totals:         0      14       0       0       0       0       0
  6838 ;;Total ram usage:       14 bytes
  6839 ;; Hardware stack levels used:    1
  6840 ;; Hardware stack levels required when called:    7
  6841 ;; This function calls:
  6842 ;;		_putsUSART
  6843 ;;		_fifo_read
  6844 ;;		_writeEEPROM
  6845 ;;		_ECANSetOperationMode
  6846 ;;		_memset
  6847 ;;		_receiveSendEventSLCAN
  6848 ;;		_strlen
  6849 ;;		_hexStringToBytes
  6850 ;;		_memcpy
  6851 ;;		_sendCANFrame
  6852 ;; This function is called by:
  6853 ;;		_main
  6854 ;; This function uses a non-reentrant model
  6855 ;;
  6856                           
  6857                           	psect	text2
  6858  001D90                     __ptext2:
  6859                           	opt stack 0
  6860  001D90                     _doModeSLCAN:
  6861                           	opt stack 23
  6862                           
  6863                           ; BSR set to: 0
  6864                           ;main.c: 1305: uint8_t c;
  6865                           ;main.c: 1306: BOOL rv = 0;
  6866                           
  6867                           ; BSR set to: 0
  6868                           ;incstack = 0
  6869                           ;incstack = 0
  6870  001D90  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  6871                           
  6872                           ; BSR set to: 0
  6873                           ;main.c: 1309: receiveSendEventSLCAN();
  6874  001D92  ECCF  F017         	call	_receiveSendEventSLCAN	;wreg free
  6875                           
  6876                           ;main.c: 1312: (INTCONbits.GIE = 0);
  6877  001D96  9EF2               	bcf	intcon,7,c	;volatile
  6878                           
  6879                           ;main.c: 1314: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6880  001D98  0100               	movlb	0	; () banked
  6881  001D9A  0E00               	movlw	high doModeSLCAN@c
  6882  001D9C  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6883  001D9E  0EA2               	movlw	low doModeSLCAN@c
  6884  001DA0  6F60               	movwf	?_fifo_read& (0+255),b
  6885  001DA2  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  6886  001DA4  0E01               	movlw	1
  6887  001DA6  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6888  001DA8  0E48               	movlw	_serialInputFifo& (0+255)
  6889  001DAA  EC9C  F021         	call	_fifo_read
  6890  001DAE  0560               	decf	?_fifo_read& (0+255),w,b
  6891  001DB0  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6892  001DB2  E001 D19C          	bnz	l10941
  6893                           
  6894                           ; BSR set to: 0
  6895                           ;main.c: 1317: (INTCONbits.GIE = 1);
  6896  001DB6  8EF2               	bsf	intcon,7,c	;volatile
  6897                           
  6898                           ; BSR set to: 0
  6899                           ;main.c: 1319: if (0x0d != c) {
  6900  001DB8  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  6901  001DBA  0A0D               	xorlw	13
  6902  001DBC  E101 D14E          	bz	l10929
  6903                           
  6904                           ; BSR set to: 0
  6905                           ;main.c: 1320: cmdbuf[ pos ] = c;
  6906  001DC0  ECF3  F016         	call	PL20	;call to abstracted procedure
  6907  001DC4  C0A2  FFDF         	movff	doModeSLCAN@c,indf2
  6908                           
  6909                           ; BSR set to: 0
  6910                           ;main.c: 1321: pos++;
  6911  001DC8  2B02               	incf	_pos& (0+255),f,b
  6912  001DCA  D192               	goto	l707
  6913  001DCC                     l10823:
  6914                           
  6915                           ; BSR set to: 0
  6916                           ;main.c: 1329: if (1 == strlen(cmdbuf)) {
  6917  001DCC  0E01               	movlw	high _cmdbuf
  6918  001DCE  0100               	movlb	0	; () banked
  6919  001DD0  6F61               	movwf	(?_strlen+1)& (0+255),b
  6920  001DD2  0E04               	movlw	low _cmdbuf
  6921  001DD4  6F60               	movwf	?_strlen& (0+255),b
  6922  001DD6  EC1D  F02A         	call	_strlen	;wreg free
  6923  001DDA  0560               	decf	?_strlen& (0+255),w,b
  6924  001DDC  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6925  001DDE  E001 D168          	bnz	l10931
  6926                           
  6927                           ; BSR set to: 0
  6928                           ;main.c: 1330: putsUSART((char *) "JFrankfurt RS-232\r\n");
  6929  001DE2  0E7D               	movlw	high STR_133
  6930  001DE4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6931  001DE6  0E5A               	movlw	low STR_133
  6932  001DE8  6F61               	movwf	?_putsUSART& (0+255),b
  6933  001DEA  ECF6  F028         	call	_putsUSART	;wreg free
  6934  001DEE                     l10827:
  6935                           
  6936                           ;main.c: 1331: rv = 1;
  6937  001DEE  0E01               	movlw	1
  6938  001DF0  0100               	movlb	0	; () banked
  6939  001DF2  D0DE               	goto	L3
  6940  001DF4                     l10829:
  6941                           
  6942                           ; BSR set to: 0
  6943                           ;main.c: 1337: if (1 == strlen(cmdbuf)) {
  6944  001DF4  0E01               	movlw	high _cmdbuf
  6945  001DF6  0100               	movlb	0	; () banked
  6946  001DF8  6F61               	movwf	(?_strlen+1)& (0+255),b
  6947  001DFA  0E04               	movlw	low _cmdbuf
  6948  001DFC  6F60               	movwf	?_strlen& (0+255),b
  6949  001DFE  EC1D  F02A         	call	_strlen	;wreg free
  6950  001E02  0560               	decf	?_strlen& (0+255),w,b
  6951  001E04  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6952  001E06  E001 D154          	bnz	l10931
  6953                           
  6954                           ; BSR set to: 0
  6955                           ;main.c: 1338: putsUSART((char *) "V1011\r\n");
  6956  001E0A  0E7E               	movlw	high STR_134
  6957  001E0C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6958  001E0E  0ED5               	movlw	low STR_134
  6959  001E10  6F61               	movwf	?_putsUSART& (0+255),b
  6960  001E12  ECF6  F028         	call	_putsUSART	;wreg free
  6961  001E16  D7EB               	goto	l10827
  6962  001E18                     l10835:
  6963                           
  6964                           ; BSR set to: 0
  6965                           ;main.c: 1345: if (1 == strlen(cmdbuf)) {
  6966  001E18  0E01               	movlw	high _cmdbuf
  6967  001E1A  0100               	movlb	0	; () banked
  6968  001E1C  6F61               	movwf	(?_strlen+1)& (0+255),b
  6969  001E1E  0E04               	movlw	low _cmdbuf
  6970  001E20  6F60               	movwf	?_strlen& (0+255),b
  6971  001E22  EC1D  F02A         	call	_strlen	;wreg free
  6972  001E26  0560               	decf	?_strlen& (0+255),w,b
  6973  001E28  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6974  001E2A  E001 D142          	bnz	l10931
  6975                           
  6976                           ; BSR set to: 0
  6977                           ;main.c: 1346: putsUSART((char *) "N1977\r\n");
  6978  001E2E  0E7E               	movlw	high STR_135
  6979  001E30  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6980  001E32  0EDD               	movlw	low STR_135
  6981  001E34  6F61               	movwf	?_putsUSART& (0+255),b
  6982  001E36  ECF6  F028         	call	_putsUSART	;wreg free
  6983  001E3A  D7D9               	goto	l10827
  6984  001E3C                     l10841:
  6985                           
  6986                           ; BSR set to: 0
  6987                           ;main.c: 1355: bInitiated = 1;
  6988  001E3C  0E01               	movlw	1
  6989  001E3E  6FEE               	movwf	_bInitiated& (0+255),b
  6990                           
  6991                           ;main.c: 1356: rv = 1;
  6992  001E40  D0B7               	goto	L3
  6993  001E42                     l717:
  6994                           
  6995                           ; BSR set to: 0
  6996                           ;main.c: 1361: if (!bOpen) {
  6997  001E42  67EF               	tstfsz	_bOpen& (0+255),b
  6998  001E44  D003               	goto	l10845
  6999                           
  7000                           ; BSR set to: 0
  7001                           ;main.c: 1362: bInitiated = 1;
  7002  001E46  0E01               	movlw	1
  7003  001E48  6FEE               	movwf	_bInitiated& (0+255),b
  7004                           
  7005                           ;main.c: 1363: rv = 1;
  7006  001E4A  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  7007  001E4C                     l10845:
  7008                           
  7009                           ; BSR set to: 0
  7010                           ;main.c: 1368: if (1 == strlen(cmdbuf)) {
  7011  001E4C  0E01               	movlw	high _cmdbuf
  7012  001E4E  0100               	movlb	0	; () banked
  7013  001E50  6F61               	movwf	(?_strlen+1)& (0+255),b
  7014  001E52  0E04               	movlw	low _cmdbuf
  7015  001E54  6F60               	movwf	?_strlen& (0+255),b
  7016  001E56  EC1D  F02A         	call	_strlen	;wreg free
  7017  001E5A  0560               	decf	?_strlen& (0+255),w,b
  7018  001E5C  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7019  001E5E  E001 D128          	bnz	l10931
  7020                           
  7021                           ; BSR set to: 0
  7022                           ;main.c: 1369: if (!bOpen && bInitiated) {
  7023  001E62  67EF               	tstfsz	_bOpen& (0+255),b
  7024  001E64  D126               	goto	l10931
  7025                           
  7026                           ; BSR set to: 0
  7027  001E66  51EE               	movf	_bInitiated& (0+255),w,b
  7028  001E68  E101 D123          	bz	l10931
  7029                           
  7030                           ; BSR set to: 0
  7031                           ;main.c: 1370: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  7032  001E6C  0E00               	movlw	0
  7033  001E6E  ECAD  F02B         	call	_ECANSetOperationMode
  7034                           
  7035                           ; BSR set to: 0
  7036                           ;main.c: 1371: bOpen = 1;
  7037  001E72  0E01               	movlw	1
  7038  001E74  6FEF               	movwf	_bOpen& (0+255),b
  7039  001E76  D7BB               	goto	l10827
  7040  001E78                     l10857:
  7041                           
  7042                           ; BSR set to: 0
  7043                           ;main.c: 1379: if (1 == strlen(cmdbuf)) {
  7044  001E78  0E01               	movlw	high _cmdbuf
  7045  001E7A  0100               	movlb	0	; () banked
  7046  001E7C  6F61               	movwf	(?_strlen+1)& (0+255),b
  7047  001E7E  0E04               	movlw	low _cmdbuf
  7048  001E80  6F60               	movwf	?_strlen& (0+255),b
  7049  001E82  EC1D  F02A         	call	_strlen	;wreg free
  7050  001E86  0560               	decf	?_strlen& (0+255),w,b
  7051  001E88  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7052  001E8A  E001 D112          	bnz	l10931
  7053                           
  7054                           ; BSR set to: 0
  7055                           ;main.c: 1380: if (bOpen) {
  7056  001E8E  51EF               	movf	_bOpen& (0+255),w,b
  7057  001E90  E0AE               	bz	l10827
  7058                           
  7059                           ; BSR set to: 0
  7060                           ;main.c: 1381: ECANSetOperationMode(0x20);
  7061  001E92  0E20               	movlw	32
  7062  001E94  ECAD  F02B         	call	_ECANSetOperationMode
  7063                           
  7064                           ; BSR set to: 0
  7065                           ;main.c: 1382: bOpen = 0;
  7066  001E98  6BEF               	clrf	_bOpen& (0+255),b
  7067  001E9A  D7A9               	goto	l10827
  7068  001E9C                     l10867:
  7069                           
  7070                           ; BSR set to: 0
  7071                           ;main.c: 1395: if (bOpen && (strlen(cmdbuf) >= 10)) {
  7072  001E9C  51EF               	movf	_bOpen& (0+255),w,b
  7073  001E9E  E101 D108          	bz	l10931
  7074                           
  7075                           ; BSR set to: 0
  7076  001EA2  0E01               	movlw	high _cmdbuf
  7077  001EA4  0100               	movlb	0	; () banked
  7078  001EA6  6F61               	movwf	(?_strlen+1)& (0+255),b
  7079  001EA8  0E04               	movlw	low _cmdbuf
  7080  001EAA  6F60               	movwf	?_strlen& (0+255),b
  7081  001EAC  EC1D  F02A         	call	_strlen	;wreg free
  7082  001EB0  0E0A               	movlw	10
  7083  001EB2  5D60               	subwf	?_strlen& (0+255),w,b
  7084  001EB4  0E00               	movlw	0
  7085  001EB6  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7086  001EB8  E201 D0FB          	bnc	l10931
  7087                           
  7088                           ; BSR set to: 0
  7089                           ;main.c: 1397: uint32_t id;
  7090                           ;main.c: 1398: uint8_t dlc;
  7091                           ;main.c: 1400: if (hexStringToBytes(wrkbuf, sizeof ( wrkbuf), cmdbuf) < 5) {
  7092  001EBC  0E01               	movlw	high _wrkbuf
  7093  001EBE  0100               	movlb	0	; () banked
  7094  001EC0  6F65               	movwf	(?_hexStringToBytes+1)& (0+255),b
  7095  001EC2  0E54               	movlw	low _wrkbuf
  7096  001EC4  6F64               	movwf	?_hexStringToBytes& (0+255),b
  7097  001EC6  0E50               	movlw	80
  7098  001EC8  6F66               	movwf	(?_hexStringToBytes+2)& (0+255),b
  7099  001ECA  0E01               	movlw	high _cmdbuf
  7100  001ECC  6F68               	movwf	(?_hexStringToBytes+4)& (0+255),b
  7101  001ECE  0E04               	movlw	low _cmdbuf
  7102  001ED0  6F67               	movwf	(?_hexStringToBytes+3)& (0+255),b
  7103  001ED2  EC58  F024         	call	_hexStringToBytes	;wreg free
  7104  001ED6  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7105  001ED8  0E05               	movlw	5
  7106  001EDA  5D96               	subwf	??_doModeSLCAN& (0+255),w,b
  7107  001EDC  E201 D0E9          	bnc	l10931
  7108                           
  7109                           ; BSR set to: 0
  7110                           ;main.c: 1402: }
  7111                           ;main.c: 1404: id = (uint32_t) wrkbuf[0] << 24 + (uint32_t) wrkbuf[1] << 16 + (uint32_t)
      +                           wrkbuf[2] << 8 + wrkbuf[3];
  7112  001EE0  C157  F096         	movff	_wrkbuf+3,??_doModeSLCAN
  7113  001EE4  0E08               	movlw	8
  7114  001EE6  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7115  001EE8  C156  F097         	movff	_wrkbuf+2,??_doModeSLCAN+1
  7116  001EEC  0E10               	movlw	16
  7117  001EEE  2797               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  7118  001EF0  C155  F098         	movff	_wrkbuf+1,??_doModeSLCAN+2
  7119  001EF4  0E18               	movlw	24
  7120  001EF6  2798               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  7121  001EF8  C154  F099         	movff	_wrkbuf,??_doModeSLCAN+3
  7122  001EFC  0100               	movlb	0	; () banked
  7123  001EFE  6B9A               	clrf	(??_doModeSLCAN+4)& (0+255),b
  7124  001F00  6B9B               	clrf	(??_doModeSLCAN+5)& (0+255),b
  7125  001F02  6B9C               	clrf	(??_doModeSLCAN+6)& (0+255),b
  7126  001F04  2B98               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  7127  001F06  D001               	goto	u13520
  7128  001F08                     u13525:
  7129  001F08  D8F4               	call	PL88	;call to abstracted procedure
  7130  001F0A                     u13520:
  7131  001F0A  2F98               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  7132  001F0C  D7FD               	goto	u13525
  7133  001F0E  2B97               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  7134  001F10  D001               	goto	u13530
  7135  001F12                     u13535:
  7136  001F12  D8EF               	call	PL88	;call to abstracted procedure
  7137  001F14                     u13530:
  7138  001F14  2F97               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  7139  001F16  D7FD               	goto	u13535
  7140  001F18  2B96               	incf	??_doModeSLCAN& (0+255),f,b
  7141  001F1A  D001               	goto	u13540
  7142  001F1C                     u13545:
  7143  001F1C  D8EA               	call	PL88	;call to abstracted procedure
  7144  001F1E                     u13540:
  7145  001F1E  2F96               	decfsz	??_doModeSLCAN& (0+255),f,b
  7146  001F20  D7FD               	goto	u13545
  7147  001F22  C09C  F0A0         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  7148  001F26  C09B  F09F         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  7149  001F2A  C09A  F09E         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  7150  001F2E  C099  F09D         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  7151                           
  7152                           ; BSR set to: 0
  7153                           ;main.c: 1405: dlc = vscpData[4];
  7154  001F32  C1A8  F0A1         	movff	_vscpData+4,doModeSLCAN@dlc
  7155                           
  7156                           ; BSR set to: 0
  7157                           ;main.c: 1408: if (dlc > 8) break;
  7158  001F36  0E08               	movlw	8
  7159  001F38  65A1               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  7160  001F3A  D001               	goto	l10883
  7161  001F3C  D0BA               	goto	l10931
  7162  001F3E                     l10883:
  7163                           
  7164                           ; BSR set to: 0
  7165                           ;main.c: 1409: if (strlen(cmdbuf) < (10 + 2 * dlc)) break;
  7166  001F3E  90D8               	bcf	status,0,c
  7167  001F40  35A1               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  7168  001F42  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7169  001F44  6B97               	clrf	(??_doModeSLCAN+1)& (0+255),b
  7170  001F46  3797               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  7171  001F48  0E0A               	movlw	10
  7172  001F4A  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7173  001F4C  0E00               	movlw	0
  7174  001F4E  2397               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  7175  001F50  0E01               	movlw	high _cmdbuf
  7176  001F52  0100               	movlb	0	; () banked
  7177  001F54  6F61               	movwf	(?_strlen+1)& (0+255),b
  7178  001F56  0E04               	movlw	low _cmdbuf
  7179  001F58  6F60               	movwf	?_strlen& (0+255),b
  7180  001F5A  EC1D  F02A         	call	_strlen	;wreg free
  7181  001F5E  5196               	movf	??_doModeSLCAN& (0+255),w,b
  7182  001F60  5D60               	subwf	?_strlen& (0+255),w,b
  7183  001F62  5197               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  7184  001F64  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7185  001F66  E201 D0A4          	bnc	l10931
  7186                           
  7187                           ; BSR set to: 0
  7188                           ;main.c: 1411: memcpy(vscpData, vscpData + 5, dlc);
  7189  001F6A  0E01               	movlw	high _vscpData
  7190  001F6C  0100               	movlb	0	; () banked
  7191  001F6E  6F61               	movwf	(?_memcpy+1)& (0+255),b
  7192  001F70  0EA4               	movlw	low _vscpData
  7193  001F72  6F60               	movwf	?_memcpy& (0+255),b
  7194  001F74  0EA9               	movlw	low (_vscpData+5)
  7195  001F76  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7196  001F78  0E01               	movlw	high (_vscpData+5)
  7197  001F7A  6F97               	movwf	(??_doModeSLCAN+1)& (0+255),b
  7198  001F7C  C096  F062         	movff	??_doModeSLCAN,?_memcpy+2
  7199  001F80  C097  F063         	movff	??_doModeSLCAN+1,?_memcpy+3
  7200  001F84  C0A1  F064         	movff	doModeSLCAN@dlc,?_memcpy+4
  7201  001F88  6B65               	clrf	(?_memcpy+5)& (0+255),b
  7202  001F8A  ECFC  F029         	call	_memcpy	;wreg free
  7203                           
  7204                           ; BSR set to: 0
  7205                           ;main.c: 1413: rv = sendCANFrame(id, dlc, vscpData);
  7206  001F8E  C09D  F08F         	movff	doModeSLCAN@id,?_sendCANFrame
  7207  001F92  C09E  F090         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  7208  001F96  C09F  F091         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  7209  001F9A  C0A0  F092         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  7210  001F9E  C0A1  F093         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  7211  001FA2  0E01               	movlw	high _vscpData
  7212  001FA4  0100               	movlb	0	; () banked
  7213  001FA6  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  7214  001FA8  0EA4               	movlw	low _vscpData
  7215  001FAA  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  7216  001FAC  ECBA  F02A         	call	_sendCANFrame	;wreg free
  7217  001FB0                     L3:
  7218  001FB0  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  7219  001FB2  D07F               	goto	l10931
  7220  001FB4                     l10891:
  7221                           
  7222                           ; BSR set to: 0
  7223                           ;main.c: 1428: if (bOpen && (strlen(cmdbuf) == 1)) {
  7224  001FB4  51EF               	movf	_bOpen& (0+255),w,b
  7225  001FB6  E07D               	bz	l10931
  7226                           
  7227                           ; BSR set to: 0
  7228  001FB8  0E01               	movlw	high _cmdbuf
  7229  001FBA  0100               	movlb	0	; () banked
  7230  001FBC  6F61               	movwf	(?_strlen+1)& (0+255),b
  7231  001FBE  0E04               	movlw	low _cmdbuf
  7232  001FC0  6F60               	movwf	?_strlen& (0+255),b
  7233  001FC2  EC1D  F02A         	call	_strlen	;wreg free
  7234  001FC6  0560               	decf	?_strlen& (0+255),w,b
  7235  001FC8  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7236  001FCA  E173               	bnz	l10931
  7237                           
  7238                           ; BSR set to: 0
  7239                           ;main.c: 1429: putsUSART((char *) "F00\r\n");
  7240  001FCC  0E7F               	movlw	high STR_136
  7241  001FCE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7242  001FD0  0E79               	movlw	low STR_136
  7243  001FD2  6F61               	movwf	?_putsUSART& (0+255),b
  7244  001FD4  ECF6  F028         	call	_putsUSART	;wreg free
  7245  001FD8  D06C               	goto	l10931
  7246  001FDA                     l10901:
  7247                           
  7248                           ; BSR set to: 0
  7249                           ;main.c: 1445: if (2 == strlen(cmdbuf)) {
  7250  001FDA  0E01               	movlw	high _cmdbuf
  7251  001FDC  0100               	movlb	0	; () banked
  7252  001FDE  6F61               	movwf	(?_strlen+1)& (0+255),b
  7253  001FE0  0E04               	movlw	low _cmdbuf
  7254  001FE2  6F60               	movwf	?_strlen& (0+255),b
  7255  001FE4  EC1D  F02A         	call	_strlen	;wreg free
  7256  001FE8  5160               	movf	?_strlen& (0+255),w,b
  7257  001FEA  0A02               	xorlw	2
  7258  001FEC  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7259  001FEE  E161               	bnz	l10931
  7260                           
  7261                           ; BSR set to: 0
  7262                           ;main.c: 1446: if (!bOpen) {
  7263  001FF0  67EF               	tstfsz	_bOpen& (0+255),b
  7264  001FF2  D05F               	goto	l10931
  7265                           
  7266                           ; BSR set to: 0
  7267                           ;main.c: 1447: if ('0' == cmdbuf[1]) {
  7268  001FF4  0101               	movlb	1	; () banked
  7269  001FF6  5105               	movf	(_cmdbuf+1)& (0+255),w,b
  7270  001FF8  0A30               	xorlw	48
  7271  001FFA  E10A               	bnz	l10913
  7272                           
  7273                           ; BSR set to: 1
  7274                           ;main.c: 1448: nTimeStamp = 0;
  7275  001FFC  0100               	movlb	0	; () banked
  7276  001FFE  6BF2               	clrf	_nTimeStamp& (0+255),b
  7277                           
  7278                           ; BSR set to: 0
  7279                           ;main.c: 1450: writeEEPROM(0x05, 0);
  7280  002000  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
  7281  002002  0E05               	movlw	5
  7282  002004  6F60               	movwf	?_writeEEPROM& (0+255),b
  7283  002006  0E00               	movlw	0
  7284  002008  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
  7285  00200A  EC6C  F02B         	call	_writeEEPROM	;wreg free
  7286  00200E  D6EF               	goto	l10827
  7287  002010                     l10913:
  7288                           
  7289                           ; BSR set to: 1
  7290  002010  5105               	movf	(_cmdbuf+1)& (0+255),w,b
  7291  002012  0A31               	xorlw	49
  7292  002014  E10B               	bnz	l742
  7293                           
  7294                           ; BSR set to: 1
  7295                           ;main.c: 1453: nTimeStamp = 1;
  7296  002016  0E01               	movlw	1
  7297  002018  0100               	movlb	0	; () banked
  7298  00201A  6FF2               	movwf	_nTimeStamp& (0+255),b
  7299                           
  7300                           ; BSR set to: 0
  7301                           ;main.c: 1455: writeEEPROM(0x05,
  7302                           ;main.c: 1456: 1);
  7303  00201C  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
  7304  00201E  0E05               	movlw	5
  7305  002020  6F60               	movwf	?_writeEEPROM& (0+255),b
  7306  002022  0E01               	movlw	1
  7307  002024  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
  7308  002026  EC6C  F02B         	call	_writeEEPROM	;wreg free
  7309  00202A  D6E1               	goto	l10827
  7310  00202C                     l742:
  7311                           
  7312                           ; BSR set to: 1
  7313                           ;main.c: 1459: rv = 0;
  7314  00202C  0100               	movlb	0	; () banked
  7315  00202E  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  7316  002030  D040               	goto	l10931
  7317  002032                     l10921:
  7318                           
  7319                           ; BSR set to: 0
  7320                           ;main.c: 1467: writeEEPROM(0x01, 0xFF);
  7321  002032  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
  7322  002034  0E01               	movlw	1
  7323  002036  6F60               	movwf	?_writeEEPROM& (0+255),b
  7324  002038  0EFF               	movlw	255
  7325  00203A  6962               	setf	(?_writeEEPROM+2)& (0+255),b
  7326  00203C  EC6C  F02B         	call	_writeEEPROM	;wreg free
  7327  002040  00FF               	reset		;# 
  7328                           
  7329                           ;main.c: 1469: break;
  7330  002042  D037               	goto	l10931
  7331  002044                     l10923:
  7332                           
  7333                           ; BSR set to: 0
  7334                           ;main.c: 1472: {
  7335                           ;main.c: 1474: if (0 == strlen(cmdbuf)) {
  7336  002044  0E01               	movlw	high _cmdbuf
  7337  002046  0100               	movlb	0	; () banked
  7338  002048  6F61               	movwf	(?_strlen+1)& (0+255),b
  7339  00204A  0E04               	movlw	low _cmdbuf
  7340  00204C  6F60               	movwf	?_strlen& (0+255),b
  7341  00204E  EC1D  F02A         	call	_strlen	;wreg free
  7342  002052  5161               	movf	(?_strlen+1)& (0+255),w,b
  7343  002054  1160               	iorwf	?_strlen& (0+255),w,b
  7344  002056  E101 D6CA          	bz	l10827
  7345  00205A  D02B               	goto	l10931
  7346  00205C                     l10929:
  7347                           
  7348                           ; BSR set to: 0
  7349  00205C  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  7350                           
  7351                           ; Switch size 1, requested type "space"
  7352                           ; Number of cases is 16, Range of values is 66 to 116
  7353                           ; switch strategies available:
  7354                           ; Name         Instructions Cycles
  7355                           ; simple_byte           49    25 (average)
  7356                           ;	Chosen strategy is simple_byte
  7357  00205E  0A42               	xorlw	66	; case 66
  7358  002060  E0E8               	bz	l10921
  7359  002062  0A01               	xorlw	1	; case 67
  7360  002064  E101 D708          	bz	l10857
  7361  002068  0A05               	xorlw	5	; case 70
  7362  00206A  E0A4               	bz	l10891
  7363  00206C  0A0C               	xorlw	12	; case 74
  7364  00206E  E101 D6AD          	bz	l10823
  7365  002072  0A07               	xorlw	7	; case 77
  7366  002074  E101 D6BB          	bz	l10827
  7367  002078  0A03               	xorlw	3	; case 78
  7368  00207A  E101 D6CD          	bz	l10835
  7369  00207E  0A01               	xorlw	1	; case 79
  7370  002080  E101 D6E4          	bz	l10845
  7371  002084  0A1D               	xorlw	29	; case 82
  7372  002086  E015               	bz	l10931
  7373  002088  0A01               	xorlw	1	; case 83
  7374  00208A  E101 D6D7          	bz	l10841
  7375  00208E  0A07               	xorlw	7	; case 84
  7376  002090  E101 D704          	bz	l10867
  7377  002094  0A02               	xorlw	2	; case 86
  7378  002096  E101 D6AD          	bz	l10829
  7379  00209A  0A0C               	xorlw	12	; case 90
  7380  00209C  E09E               	bz	l10901
  7381  00209E  0A37               	xorlw	55	; case 109
  7382  0020A0  E101 D6A5          	bz	l10827
  7383  0020A4  0A1F               	xorlw	31	; case 114
  7384  0020A6  E005               	bz	l10931
  7385  0020A8  0A01               	xorlw	1	; case 115
  7386  0020AA  E101 D6CA          	bz	l717
  7387  0020AE  0A07               	xorlw	7	; case 116
  7388  0020B0  E1C9               	bnz	l10923
  7389  0020B2                     l10931:
  7390                           
  7391                           ;main.c: 1482: if (rv) {
  7392  0020B2  0100               	movlb	0	; () banked
  7393  0020B4  51A3               	movf	doModeSLCAN@rv& (0+255),w,b
  7394  0020B6  E007               	bz	l10935
  7395                           
  7396                           ; BSR set to: 0
  7397                           ;main.c: 1484: putsUSART((char *) "\r");
  7398  0020B8  0E7F               	movlw	high STR_137
  7399  0020BA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7400  0020BC  0EF2               	movlw	low STR_137
  7401  0020BE  6F61               	movwf	?_putsUSART& (0+255),b
  7402  0020C0  ECF6  F028         	call	_putsUSART	;wreg free
  7403                           
  7404                           ;main.c: 1485: }
  7405  0020C4  D006               	goto	l10937
  7406  0020C6                     l10935:
  7407                           
  7408                           ; BSR set to: 0
  7409                           ;main.c: 1486: else {
  7410                           ;main.c: 1488: putsUSART((char *) "\a");
  7411  0020C6  0E7F               	movlw	high STR_138
  7412  0020C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7413  0020CA  0EF0               	movlw	low STR_138
  7414  0020CC  6F61               	movwf	?_putsUSART& (0+255),b
  7415  0020CE  ECF6  F028         	call	_putsUSART	;wreg free
  7416  0020D2                     l10937:
  7417                           
  7418                           ;main.c: 1489: }
  7419                           ;main.c: 1492: memset(cmdbuf, 0, sizeof ( cmdbuf));
  7420  0020D2  0E01               	movlw	high _cmdbuf
  7421  0020D4  0100               	movlb	0	; () banked
  7422  0020D6  6F61               	movwf	(?_memset+1)& (0+255),b
  7423  0020D8  0E04               	movlw	low _cmdbuf
  7424  0020DA  6F60               	movwf	?_memset& (0+255),b
  7425  0020DC  6B63               	clrf	(?_memset+3)& (0+255),b
  7426  0020DE  6B62               	clrf	(?_memset+2)& (0+255),b
  7427  0020E0  6B65               	clrf	(?_memset+5)& (0+255),b
  7428  0020E2  0E50               	movlw	80
  7429  0020E4  6F64               	movwf	(?_memset+4)& (0+255),b
  7430  0020E6  EC55  F02B         	call	_memset	;wreg free
  7431                           
  7432                           ; BSR set to: 0
  7433                           ;main.c: 1493: pos = 0;
  7434  0020EA  0101               	movlb	1	; () banked
  7435  0020EC  6B02               	clrf	_pos& (0+255),b
  7436  0020EE                     l10941:
  7437                           
  7438                           ;main.c: 1495: }
  7439                           ;main.c: 1498: (INTCONbits.GIE = 1);
  7440  0020EE  8EF2               	bsf	intcon,7,c	;volatile
  7441  0020F0                     l707:
  7442  0020F0  0012               	return	
  7443  0020F2                     __end_of_doModeSLCAN:
  7444                           	opt stack 0
  7445  0020F2                     PL88:
  7446                           	opt stack 23
  7447  0020F2  90D8               	bcf	status,0,c
  7448  0020F4  3799               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  7449  0020F6  379A               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  7450  0020F8  379B               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  7451  0020FA  379C               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  7452  0020FC  0012               	return	
  7453  0020FE                     __end_ofPL88:
  7454                           	opt stack 0
  7455                           tblptru	equ	0xFF8
  7456                           tblptrh	equ	0xFF7
  7457                           tblptrl	equ	0xFF6
  7458                           tablat	equ	0xFF5
  7459                           prodh	equ	0xFF4
  7460                           prodl	equ	0xFF3
  7461                           intcon	equ	0xFF2
  7462                           indf0	equ	0xFEF
  7463                           postinc0	equ	0xFEE
  7464                           fsr0h	equ	0xFEA
  7465                           fsr0l	equ	0xFE9
  7466                           wreg	equ	0xFE8
  7467                           indf1	equ	0xFE7
  7468                           postinc1	equ	0xFE6
  7469                           postdec1	equ	0xFE5
  7470                           fsr1h	equ	0xFE2
  7471                           fsr1l	equ	0xFE1
  7472                           indf2	equ	0xFDF
  7473                           postinc2	equ	0xFDE
  7474                           postdec2	equ	0xFDD
  7475                           plusw2	equ	0xFDB
  7476                           fsr2h	equ	0xFDA
  7477                           fsr2l	equ	0xFD9
  7478                           status	equ	0xFD8
  7479                           
  7480 ;; *************** function _hexStringToBytes *****************
  7481 ;; Defined at:
  7482 ;;		line 35 in file "hexutils.c"
  7483 ;; Parameters:    Size  Location     Type
  7484 ;;  buf             2    4[BANK0 ] PTR unsigned char 
  7485 ;;		 -> wrkbuf(80), 
  7486 ;;  size            1    6[BANK0 ] unsigned char 
  7487 ;;  inhex           2    7[BANK0 ] PTR unsigned char 
  7488 ;;		 -> cmdbuf(80), 
  7489 ;; Auto vars:     Size  Location     Type
  7490 ;;  i               2   16[BANK0 ] int 
  7491 ;;  p               2   14[BANK0 ] PTR unsigned char 
  7492 ;;		 -> cmdbuf(80), 
  7493 ;;  len             2   12[BANK0 ] int 
  7494 ;; Return value:  Size  Location     Type
  7495 ;;                  1    wreg      unsigned char 
  7496 ;; Registers used:
  7497 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7498 ;; Tracked objects:
  7499 ;;		On entry : F/0
  7500 ;;		On exit  : F/0
  7501 ;;		Unchanged: 0/0
  7502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7503 ;;      Params:         0       5       0       0       0       0       0
  7504 ;;      Locals:         0       6       0       0       0       0       0
  7505 ;;      Temps:          0       3       0       0       0       0       0
  7506 ;;      Totals:         0      14       0       0       0       0       0
  7507 ;;Total ram usage:       14 bytes
  7508 ;; Hardware stack levels used:    1
  7509 ;; Hardware stack levels required when called:    4
  7510 ;; This function calls:
  7511 ;;		_strlen
  7512 ;;		_nibbleFromChar
  7513 ;; This function is called by:
  7514 ;;		_doModeSLCAN
  7515 ;; This function uses a non-reentrant model
  7516 ;;
  7517                           
  7518                           	psect	text3
  7519  0048B0                     __ptext3:
  7520                           	opt stack 0
  7521  0048B0                     _hexStringToBytes:
  7522                           	opt stack 25
  7523                           
  7524                           ; BSR set to: 0
  7525                           ;hexutils.c: 36: uint8_t *p;
  7526                           ;hexutils.c: 37: int len, i;
  7527                           ;hexutils.c: 39: len = strlen(inhex) / 2;
  7528                           
  7529                           ;incstack = 0
  7530                           ;incstack = 0
  7531  0048B0  C067  F060         	movff	hexStringToBytes@inhex,?_strlen
  7532  0048B4  C068  F061         	movff	hexStringToBytes@inhex+1,?_strlen+1
  7533  0048B8  EC1D  F02A         	call	_strlen	;wreg free
  7534  0048BC  90D8               	bcf	status,0,c
  7535  0048BE  3161               	rrcf	(?_strlen+1)& (0+255),w,b
  7536  0048C0  6F6D               	movwf	(hexStringToBytes@len+1)& (0+255),b
  7537  0048C2  3160               	rrcf	?_strlen& (0+255),w,b
  7538  0048C4  6F6C               	movwf	hexStringToBytes@len& (0+255),b
  7539                           
  7540                           ; BSR set to: 0
  7541                           ;hexutils.c: 40: if (len > size) return 0;
  7542  0048C6  5166               	movf	hexStringToBytes@size& (0+255),w,b
  7543  0048C8  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7544  0048CA  6B6A               	clrf	(??_hexStringToBytes+1)& (0+255),b
  7545  0048CC  516A               	movf	(??_hexStringToBytes+1)& (0+255),w,b
  7546  0048CE  0A80               	xorlw	128
  7547  0048D0  6F6B               	movwf	(??_hexStringToBytes+2)& (0+255),b
  7548  0048D2  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7549  0048D4  5D69               	subwf	??_hexStringToBytes& (0+255),w,b
  7550  0048D6  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7551  0048D8  0A80               	xorlw	128
  7552  0048DA  596B               	subwfb	(??_hexStringToBytes+2)& (0+255),w,b
  7553  0048DC  E202               	bc	l1590
  7554                           
  7555                           ; BSR set to: 0
  7556  0048DE  0E00               	movlw	0
  7557  0048E0  D033               	goto	l1591
  7558  0048E2                     l1590:
  7559                           
  7560                           ; BSR set to: 0
  7561                           ;hexutils.c: 41: for (i = 0, p = (uint8_t *) inhex; i < len; i++) {
  7562  0048E2  6B70               	clrf	hexStringToBytes@i& (0+255),b
  7563  0048E4  6B71               	clrf	(hexStringToBytes@i+1)& (0+255),b
  7564  0048E6  C067  F06E         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  7565  0048EA  C068  F06F         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  7566  0048EE  D022               	goto	l12513
  7567  0048F0                     l12507:
  7568                           
  7569                           ; BSR set to: 0
  7570                           ;hexutils.c: 42: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p + 1));
  7571  0048F0  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7572  0048F2  2564               	addwf	hexStringToBytes@buf& (0+255),w,b
  7573  0048F4  6ED9               	movwf	fsr2l,c
  7574  0048F6  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7575  0048F8  2165               	addwfc	(hexStringToBytes@buf+1)& (0+255),w,b
  7576  0048FA  6EDA               	movwf	fsr2h,c
  7577  0048FC  EE10 F001          	lfsr	1,1
  7578  004900  516E               	movf	hexStringToBytes@p& (0+255),w,b
  7579  004902  26E1               	addwf	fsr1l,f,c
  7580  004904  516F               	movf	(hexStringToBytes@p+1)& (0+255),w,b
  7581  004906  22E2               	addwfc	fsr1h,f,c
  7582  004908  50E7               	movf	indf1,w,c
  7583  00490A  EC5D  F02A         	call	_nibbleFromChar
  7584  00490E  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7585  004910  C06E  FFE1         	movff	hexStringToBytes@p,fsr1l
  7586  004914  C06F  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  7587  004918  50E7               	movf	indf1,w,c
  7588  00491A  EC5D  F02A         	call	_nibbleFromChar
  7589  00491E  6F6A               	movwf	(??_hexStringToBytes+1)& (0+255),b
  7590  004920  396A               	swapf	(??_hexStringToBytes+1)& (0+255),w,b
  7591  004922  0BF0               	andlw	240
  7592  004924  1169               	iorwf	??_hexStringToBytes& (0+255),w,b
  7593  004926  6EDF               	movwf	indf2,c
  7594                           
  7595                           ; BSR set to: 0
  7596                           ;hexutils.c: 43: p += 2;
  7597  004928  0E02               	movlw	2
  7598  00492A  276E               	addwf	hexStringToBytes@p& (0+255),f,b
  7599  00492C  0E00               	movlw	0
  7600  00492E  236F               	addwfc	(hexStringToBytes@p+1)& (0+255),f,b
  7601                           
  7602                           ; BSR set to: 0
  7603  004930  4B70               	infsnz	hexStringToBytes@i& (0+255),f,b
  7604  004932  2B71               	incf	(hexStringToBytes@i+1)& (0+255),f,b
  7605  004934                     l12513:
  7606                           
  7607                           ; BSR set to: 0
  7608  004934  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7609  004936  0A80               	xorlw	128
  7610  004938  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7611  00493A  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7612  00493C  5D70               	subwf	hexStringToBytes@i& (0+255),w,b
  7613  00493E  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7614  004940  0A80               	xorlw	128
  7615  004942  5969               	subwfb	??_hexStringToBytes& (0+255),w,b
  7616  004944  E3D5               	bnc	l12507
  7617                           
  7618                           ; BSR set to: 0
  7619                           ;hexutils.c: 44: }
  7620                           ;hexutils.c: 46: return i;
  7621  004946  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7622  004948                     l1591:
  7623                           
  7624                           ; BSR set to: 0
  7625  004948  0012               	return	
  7626  00494A                     __end_of_hexStringToBytes:
  7627                           	opt stack 0
  7628                           tblptru	equ	0xFF8
  7629                           tblptrh	equ	0xFF7
  7630                           tblptrl	equ	0xFF6
  7631                           tablat	equ	0xFF5
  7632                           prodh	equ	0xFF4
  7633                           prodl	equ	0xFF3
  7634                           intcon	equ	0xFF2
  7635                           indf0	equ	0xFEF
  7636                           postinc0	equ	0xFEE
  7637                           fsr0h	equ	0xFEA
  7638                           fsr0l	equ	0xFE9
  7639                           wreg	equ	0xFE8
  7640                           indf1	equ	0xFE7
  7641                           postinc1	equ	0xFE6
  7642                           postdec1	equ	0xFE5
  7643                           fsr1h	equ	0xFE2
  7644                           fsr1l	equ	0xFE1
  7645                           indf2	equ	0xFDF
  7646                           postinc2	equ	0xFDE
  7647                           postdec2	equ	0xFDD
  7648                           plusw2	equ	0xFDB
  7649                           fsr2h	equ	0xFDA
  7650                           fsr2l	equ	0xFD9
  7651                           status	equ	0xFD8
  7652                           
  7653 ;; *************** function _nibbleFromChar *****************
  7654 ;; Defined at:
  7655 ;;		line 20 in file "hexutils.c"
  7656 ;; Parameters:    Size  Location     Type
  7657 ;;  c               1    wreg     unsigned char 
  7658 ;; Auto vars:     Size  Location     Type
  7659 ;;  c               1    0[BANK0 ] unsigned char 
  7660 ;; Return value:  Size  Location     Type
  7661 ;;                  1    wreg      unsigned char 
  7662 ;; Registers used:
  7663 ;;		wreg, status,2, status,0
  7664 ;; Tracked objects:
  7665 ;;		On entry : F/0
  7666 ;;		On exit  : F/0
  7667 ;;		Unchanged: 0/0
  7668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7669 ;;      Params:         0       0       0       0       0       0       0
  7670 ;;      Locals:         0       1       0       0       0       0       0
  7671 ;;      Temps:          0       0       0       0       0       0       0
  7672 ;;      Totals:         0       1       0       0       0       0       0
  7673 ;;Total ram usage:        1 bytes
  7674 ;; Hardware stack levels used:    1
  7675 ;; Hardware stack levels required when called:    3
  7676 ;; This function calls:
  7677 ;;		Nothing
  7678 ;; This function is called by:
  7679 ;;		_hexStringToBytes
  7680 ;; This function uses a non-reentrant model
  7681 ;;
  7682                           
  7683                           	psect	text4
  7684  0054BA                     __ptext4:
  7685                           	opt stack 0
  7686  0054BA                     _nibbleFromChar:
  7687                           	opt stack 25
  7688                           
  7689                           ; BSR set to: 0
  7690                           ;incstack = 0
  7691                           ;incstack = 0
  7692                           ;nibbleFromChar@c stored from wreg
  7693  0054BA  CFE8 F060          	movff	wreg,nibbleFromChar@c
  7694                           
  7695                           ; BSR set to: 0
  7696                           ;hexutils.c: 21: if (c >= '0' && c <= '9') return c - '0';
  7697  0054BE  0E2F               	movlw	47
  7698  0054C0  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7699  0054C2  D006               	goto	l12783
  7700                           
  7701                           ; BSR set to: 0
  7702  0054C4  0E3A               	movlw	58
  7703  0054C6  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7704  0054C8  D003               	goto	l12783
  7705                           
  7706                           ; BSR set to: 0
  7707  0054CA  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7708  0054CC  0FD0               	addlw	208
  7709  0054CE  D013               	goto	l1585
  7710  0054D0                     l12783:
  7711                           
  7712                           ; BSR set to: 0
  7713                           ;hexutils.c: 22: if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  7714  0054D0  0E60               	movlw	96
  7715  0054D2  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7716  0054D4  D006               	goto	l12791
  7717                           
  7718                           ; BSR set to: 0
  7719  0054D6  0E67               	movlw	103
  7720  0054D8  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7721  0054DA  D003               	goto	l12791
  7722                           
  7723                           ; BSR set to: 0
  7724  0054DC  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7725  0054DE  0FA9               	addlw	169
  7726  0054E0  D00A               	goto	l1585
  7727  0054E2                     l12791:
  7728                           
  7729                           ; BSR set to: 0
  7730                           ;hexutils.c: 23: if (c >= 'A' && c <= 'F') return c - 'A' + 10;
  7731  0054E2  0E40               	movlw	64
  7732  0054E4  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7733  0054E6  D006               	goto	l12799
  7734                           
  7735                           ; BSR set to: 0
  7736  0054E8  0E47               	movlw	71
  7737  0054EA  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7738  0054EC  D003               	goto	l12799
  7739                           
  7740                           ; BSR set to: 0
  7741  0054EE  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7742  0054F0  0FC9               	addlw	201
  7743  0054F2  D001               	goto	l1585
  7744  0054F4                     l12799:
  7745                           
  7746                           ; BSR set to: 0
  7747                           ;hexutils.c: 24: return 255;
  7748  0054F4  0EFF               	movlw	255
  7749  0054F6                     l1585:
  7750                           
  7751                           ; BSR set to: 0
  7752  0054F6  0012               	return	
  7753  0054F8                     __end_of_nibbleFromChar:
  7754                           	opt stack 0
  7755                           tblptru	equ	0xFF8
  7756                           tblptrh	equ	0xFF7
  7757                           tblptrl	equ	0xFF6
  7758                           tablat	equ	0xFF5
  7759                           prodh	equ	0xFF4
  7760                           prodl	equ	0xFF3
  7761                           intcon	equ	0xFF2
  7762                           indf0	equ	0xFEF
  7763                           postinc0	equ	0xFEE
  7764                           fsr0h	equ	0xFEA
  7765                           fsr0l	equ	0xFE9
  7766                           wreg	equ	0xFE8
  7767                           indf1	equ	0xFE7
  7768                           postinc1	equ	0xFE6
  7769                           postdec1	equ	0xFE5
  7770                           fsr1h	equ	0xFE2
  7771                           fsr1l	equ	0xFE1
  7772                           indf2	equ	0xFDF
  7773                           postinc2	equ	0xFDE
  7774                           postdec2	equ	0xFDD
  7775                           plusw2	equ	0xFDB
  7776                           fsr2h	equ	0xFDA
  7777                           fsr2l	equ	0xFD9
  7778                           status	equ	0xFD8
  7779                           
  7780 ;; *************** function _receiveSendEventSLCAN *****************
  7781 ;; Defined at:
  7782 ;;		line 2095 in file "main.c"
  7783 ;; Parameters:    Size  Location     Type
  7784 ;;		None
  7785 ;; Auto vars:     Size  Location     Type
  7786 ;;  id              4   38[BANK0 ] unsigned long 
  7787 ;;  i               2   43[BANK0 ] int 
  7788 ;;  dlc             1   42[BANK0 ] unsigned char 
  7789 ;; Return value:  Size  Location     Type
  7790 ;;                  1    wreg      enum E15660
  7791 ;; Registers used:
  7792 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7793 ;; Tracked objects:
  7794 ;;		On entry : F/0
  7795 ;;		On exit  : 0/0
  7796 ;;		Unchanged: 0/0
  7797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7798 ;;      Params:         0       0       0       0       0       0       0
  7799 ;;      Locals:         0       7       0       0       0       0       0
  7800 ;;      Temps:          0       3       0       0       0       0       0
  7801 ;;      Totals:         0      10       0       0       0       0       0
  7802 ;;Total ram usage:       10 bytes
  7803 ;; Hardware stack levels used:    1
  7804 ;; Hardware stack levels required when called:    6
  7805 ;; This function calls:
  7806 ;;		_putsUSART
  7807 ;;		_WriteUSART
  7808 ;;		_strlen
  7809 ;;		_getCANFrame
  7810 ;;		_ultoa
  7811 ;;		_itoa
  7812 ;; This function is called by:
  7813 ;;		_doModeSLCAN
  7814 ;; This function uses a non-reentrant model
  7815 ;;
  7816                           
  7817                           	psect	text5
  7818  002F9E                     __ptext5:
  7819                           	opt stack 0
  7820  002F9E                     _receiveSendEventSLCAN:
  7821                           	opt stack 23
  7822                           
  7823                           ; BSR set to: 0
  7824                           ;main.c: 2096: int i;
  7825                           ;main.c: 2097: uint8_t dlc;
  7826                           ;main.c: 2098: uint32_t id;
  7827                           ;main.c: 2100: if (getCANFrame(&id, &dlc, vscpData)) {
  7828                           
  7829                           ; BSR set to: 0
  7830                           ;incstack = 0
  7831                           ;incstack = 0
  7832  002F9E  0E00               	movlw	high receiveSendEventSLCAN@dlc
  7833  002FA0  6F6E               	movwf	(?_getCANFrame+1)& (0+255),b
  7834  002FA2  0E8A               	movlw	low receiveSendEventSLCAN@dlc
  7835  002FA4  6F6D               	movwf	?_getCANFrame& (0+255),b
  7836  002FA6  0E01               	movlw	high _vscpData
  7837  002FA8  0100               	movlb	0	; () banked
  7838  002FAA  6F70               	movwf	(?_getCANFrame+3)& (0+255),b
  7839  002FAC  0EA4               	movlw	low _vscpData
  7840  002FAE  6F6F               	movwf	(?_getCANFrame+2)& (0+255),b
  7841  002FB0  0E86               	movlw	receiveSendEventSLCAN@id& (0+255)
  7842  002FB2  EC84  F026         	call	_getCANFrame
  7843  002FB6  0900               	iorlw	0
  7844  002FB8  E101 D0AD          	bz	l1049
  7845                           
  7846                           ; BSR set to: 0
  7847                           ;main.c: 2103: cntRxFrames++;
  7848  002FBC  2BD9               	incf	_cntRxFrames& (0+255),f,b
  7849  002FBE  0E00               	movlw	0
  7850  002FC0  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  7851  002FC2  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  7852  002FC4  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  7853                           
  7854                           ;main.c: 2104: cntRxBytes += dlc;
  7855  002FC6  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  7856  002FC8  27D5               	addwf	_cntRxBytes& (0+255),f,b
  7857  002FCA  0E00               	movlw	0
  7858  002FCC  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  7859  002FCE  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  7860  002FD0  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  7861  002FD2                     l1022:
  7862                           
  7863                           ; BSR set to: 0
  7864  002FD2  A2AC               	btfss	4012,1,c	;volatile
  7865  002FD4  D7FE               	goto	l1022
  7866                           
  7867                           ; BSR set to: 0
  7868                           ;main.c: 2107: WriteUSART('T');
  7869  002FD6  0E54               	movlw	84
  7870  002FD8  ECC5  F02B         	call	_WriteUSART
  7871                           
  7872                           ;main.c: 2109: ultoa(wrkbuf, id, 16);
  7873  002FDC  0E01               	movlw	high _wrkbuf
  7874  002FDE  0100               	movlb	0	; () banked
  7875  002FE0  6F77               	movwf	(?_ultoa+1)& (0+255),b
  7876  002FE2  0E54               	movlw	low _wrkbuf
  7877  002FE4  6F76               	movwf	?_ultoa& (0+255),b
  7878  002FE6  C086  F078         	movff	receiveSendEventSLCAN@id,?_ultoa+2
  7879  002FEA  C087  F079         	movff	receiveSendEventSLCAN@id+1,?_ultoa+3
  7880  002FEE  C088  F07A         	movff	receiveSendEventSLCAN@id+2,?_ultoa+4
  7881  002FF2  C089  F07B         	movff	receiveSendEventSLCAN@id+3,?_ultoa+5
  7882  002FF6  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  7883  002FF8  0E10               	movlw	16
  7884  002FFA  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  7885  002FFC  EC83  F01F         	call	_ultoa	;wreg free
  7886                           
  7887                           ; BSR set to: 0
  7888                           ;main.c: 2111: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  7889  003000  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  7890  003002  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  7891  003004                     l1027:
  7892                           
  7893                           ; BSR set to: 0
  7894  003004  A2AC               	btfss	4012,1,c	;volatile
  7895  003006  D7FE               	goto	l1027
  7896                           
  7897                           ; BSR set to: 0
  7898                           ;main.c: 2113: WriteUSART('0');
  7899  003008  0E30               	movlw	48
  7900  00300A  ECC5  F02B         	call	_WriteUSART
  7901                           
  7902                           ; BSR set to: 0
  7903  00300E  D884               	call	PL96	;call to abstracted procedure
  7904  003010  B4D8               	btfsc	status,2,c
  7905  003012  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  7906  003014  E3F7               	bnc	l1027
  7907                           
  7908                           ; BSR set to: 0
  7909                           ;main.c: 2114: }
  7910                           ;main.c: 2115: putsUSART(wrkbuf);
  7911  003016  0E01               	movlw	high _wrkbuf
  7912  003018  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7913  00301A  0E54               	movlw	low _wrkbuf
  7914  00301C  6F61               	movwf	?_putsUSART& (0+255),b
  7915  00301E  ECF6  F028         	call	_putsUSART	;wreg free
  7916                           
  7917                           ;main.c: 2118: itoa(wrkbuf, dlc, 16);
  7918  003022  0E01               	movlw	high _wrkbuf
  7919  003024  0100               	movlb	0	; () banked
  7920  003026  6F71               	movwf	(?_itoa+1)& (0+255),b
  7921  003028  0E54               	movlw	low _wrkbuf
  7922  00302A  6F70               	movwf	?_itoa& (0+255),b
  7923  00302C  C08A  F072         	movff	receiveSendEventSLCAN@dlc,?_itoa+2
  7924  003030  6B73               	clrf	(?_itoa+3)& (0+255),b
  7925  003032  6B75               	clrf	(?_itoa+5)& (0+255),b
  7926  003034  0E10               	movlw	16
  7927  003036  6F74               	movwf	(?_itoa+4)& (0+255),b
  7928  003038  ECD6  F02A         	call	_itoa	;wreg free
  7929  00303C                     l1030:
  7930                           
  7931                           ; BSR set to: 0
  7932  00303C  A2AC               	btfss	4012,1,c	;volatile
  7933  00303E  D7FE               	goto	l1030
  7934                           
  7935                           ; BSR set to: 0
  7936                           ;main.c: 2120: WriteUSART(wrkbuf[0]);
  7937  003040  0101               	movlb	1	; () banked
  7938  003042  5154               	movf	_wrkbuf& (0+255),w,b
  7939  003044  ECC5  F02B         	call	_WriteUSART
  7940                           
  7941                           ;main.c: 2123: for (i = 0; i < dlc; i++) {
  7942  003048  0100               	movlb	0	; () banked
  7943  00304A  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  7944  00304C  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  7945  00304E  D02D               	goto	l12465
  7946  003050                     l12453:
  7947                           
  7948                           ; BSR set to: 0
  7949                           ;main.c: 2124: itoa(wrkbuf, vscpData[i], 16);
  7950  003050  0E01               	movlw	high _wrkbuf
  7951  003052  0100               	movlb	0	; () banked
  7952  003054  6F71               	movwf	(?_itoa+1)& (0+255),b
  7953  003056  0E54               	movlw	low _wrkbuf
  7954  003058  6F70               	movwf	?_itoa& (0+255),b
  7955  00305A  0EA4               	movlw	low _vscpData
  7956  00305C  258B               	addwf	receiveSendEventSLCAN@i& (0+255),w,b
  7957  00305E  6ED9               	movwf	fsr2l,c
  7958  003060  0E01               	movlw	high _vscpData
  7959  003062  218C               	addwfc	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  7960  003064  6EDA               	movwf	fsr2h,c
  7961  003066  50DF               	movf	indf2,w,c
  7962  003068  6F72               	movwf	(?_itoa+2)& (0+255),b
  7963  00306A  6B73               	clrf	(?_itoa+3)& (0+255),b
  7964  00306C  6B75               	clrf	(?_itoa+5)& (0+255),b
  7965  00306E  0E10               	movlw	16
  7966  003070  6F74               	movwf	(?_itoa+4)& (0+255),b
  7967  003072  ECD6  F02A         	call	_itoa	;wreg free
  7968                           
  7969                           ; BSR set to: 0
  7970                           ;main.c: 2126: if (2 != strlen(wrkbuf)) {
  7971  003076  0E01               	movlw	high _wrkbuf
  7972  003078  0100               	movlb	0	; () banked
  7973  00307A  6F61               	movwf	(?_strlen+1)& (0+255),b
  7974  00307C  0E54               	movlw	low _wrkbuf
  7975  00307E  6F60               	movwf	?_strlen& (0+255),b
  7976  003080  EC1D  F02A         	call	_strlen	;wreg free
  7977  003084  5160               	movf	?_strlen& (0+255),w,b
  7978  003086  0A02               	xorlw	2
  7979  003088  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7980  00308A  E005               	bz	l12461
  7981  00308C                     l1036:
  7982                           
  7983                           ; BSR set to: 0
  7984  00308C  A2AC               	btfss	4012,1,c	;volatile
  7985  00308E  D7FE               	goto	l1036
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;main.c: 2128: WriteUSART('0');
  7989  003090  0E30               	movlw	48
  7990  003092  ECC5  F02B         	call	_WriteUSART
  7991  003096                     l12461:
  7992                           
  7993                           ;main.c: 2129: }
  7994                           ;main.c: 2131: putsUSART(wrkbuf);
  7995  003096  0E01               	movlw	high _wrkbuf
  7996  003098  0100               	movlb	0	; () banked
  7997  00309A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7998  00309C  0E54               	movlw	low _wrkbuf
  7999  00309E  6F61               	movwf	?_putsUSART& (0+255),b
  8000  0030A0  ECF6  F028         	call	_putsUSART	;wreg free
  8001  0030A4  0100               	movlb	0	; () banked
  8002  0030A6  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8003  0030A8  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8004  0030AA                     l12465:
  8005                           
  8006                           ; BSR set to: 0
  8007  0030AA  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8008  0030AC  6F83               	movwf	??_receiveSendEventSLCAN& (0+255),b
  8009  0030AE  6B84               	clrf	(??_receiveSendEventSLCAN+1)& (0+255),b
  8010  0030B0  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8011  0030B2  0A80               	xorlw	128
  8012  0030B4  6F85               	movwf	(??_receiveSendEventSLCAN+2)& (0+255),b
  8013  0030B6  5183               	movf	??_receiveSendEventSLCAN& (0+255),w,b
  8014  0030B8  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8015  0030BA  5184               	movf	(??_receiveSendEventSLCAN+1)& (0+255),w,b
  8016  0030BC  0A80               	xorlw	128
  8017  0030BE  5985               	subwfb	(??_receiveSendEventSLCAN+2)& (0+255),w,b
  8018  0030C0  E3C7               	bnc	l12453
  8019                           
  8020                           ; BSR set to: 0
  8021                           ;main.c: 2132: }
  8022                           ;main.c: 2135: if (nTimeStamp) {
  8023  0030C2  51F2               	movf	_nTimeStamp& (0+255),w,b
  8024  0030C4  E023               	bz	l1046
  8025                           
  8026                           ; BSR set to: 0
  8027                           ;main.c: 2136: ultoa(wrkbuf, timer, 16);
  8028  0030C6  0E01               	movlw	high _wrkbuf
  8029  0030C8  0100               	movlb	0	; () banked
  8030  0030CA  6F77               	movwf	(?_ultoa+1)& (0+255),b
  8031  0030CC  0E54               	movlw	low _wrkbuf
  8032  0030CE  6F76               	movwf	?_ultoa& (0+255),b
  8033  0030D0  C0E9  F078         	movff	_timer,?_ultoa+2	;volatile
  8034  0030D4  C0EA  F079         	movff	_timer+1,?_ultoa+3	;volatile
  8035  0030D8  C0EB  F07A         	movff	_timer+2,?_ultoa+4	;volatile
  8036  0030DC  C0EC  F07B         	movff	_timer+3,?_ultoa+5	;volatile
  8037  0030E0  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  8038  0030E2  0E10               	movlw	16
  8039  0030E4  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  8040  0030E6  EC83  F01F         	call	_ultoa	;wreg free
  8041                           
  8042                           ; BSR set to: 0
  8043                           ;main.c: 2138: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8044  0030EA  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8045  0030EC  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8046  0030EE                     l1043:
  8047                           
  8048                           ; BSR set to: 0
  8049  0030EE  A2AC               	btfss	4012,1,c	;volatile
  8050  0030F0  D7FE               	goto	l1043
  8051                           
  8052                           ; BSR set to: 0
  8053                           ;main.c: 2140: WriteUSART('0');
  8054  0030F2  0E30               	movlw	48
  8055  0030F4  ECC5  F02B         	call	_WriteUSART
  8056                           
  8057                           ; BSR set to: 0
  8058  0030F8  D80F               	call	PL96	;call to abstracted procedure
  8059  0030FA  B4D8               	btfsc	status,2,c
  8060  0030FC  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8061  0030FE  E3F7               	bnc	l1043
  8062                           
  8063                           ; BSR set to: 0
  8064                           ;main.c: 2141: }
  8065                           ;main.c: 2142: putsUSART(wrkbuf);
  8066  003100  0E01               	movlw	high _wrkbuf
  8067  003102  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8068  003104  0E54               	movlw	low _wrkbuf
  8069  003106  6F61               	movwf	?_putsUSART& (0+255),b
  8070  003108  ECF6  F028         	call	_putsUSART	;wreg free
  8071  00310C                     l1046:
  8072  00310C  A2AC               	btfss	4012,1,c	;volatile
  8073  00310E  D7FE               	goto	l1046
  8074                           
  8075                           ;main.c: 2146: WriteUSART(0x0d);
  8076  003110  0E0D               	movlw	13
  8077  003112  ECC5  F02B         	call	_WriteUSART
  8078  003116                     l1049:
  8079  003116  0012               	return	
  8080  003118                     __end_of_receiveSendEventSLCAN:
  8081                           	opt stack 0
  8082  003118                     PL96:
  8083                           	opt stack 23
  8084  003118  0100               	movlb	0	; () banked
  8085  00311A  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8086  00311C  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8087  00311E  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8088  003120  0A80               	xorlw	128
  8089  003122  0F80               	addlw	-128
  8090  003124  0CB8               	retlw	184
  8091  003126                     __end_ofPL96:
  8092                           	opt stack 0
  8093                           tblptru	equ	0xFF8
  8094                           tblptrh	equ	0xFF7
  8095                           tblptrl	equ	0xFF6
  8096                           tablat	equ	0xFF5
  8097                           prodh	equ	0xFF4
  8098                           prodl	equ	0xFF3
  8099                           intcon	equ	0xFF2
  8100                           indf0	equ	0xFEF
  8101                           postinc0	equ	0xFEE
  8102                           fsr0h	equ	0xFEA
  8103                           fsr0l	equ	0xFE9
  8104                           wreg	equ	0xFE8
  8105                           indf1	equ	0xFE7
  8106                           postinc1	equ	0xFE6
  8107                           postdec1	equ	0xFE5
  8108                           fsr1h	equ	0xFE2
  8109                           fsr1l	equ	0xFE1
  8110                           indf2	equ	0xFDF
  8111                           postinc2	equ	0xFDE
  8112                           postdec2	equ	0xFDD
  8113                           plusw2	equ	0xFDB
  8114                           fsr2h	equ	0xFDA
  8115                           fsr2l	equ	0xFD9
  8116                           status	equ	0xFD8
  8117                           
  8118 ;; *************** function _ultoa *****************
  8119 ;; Defined at:
  8120 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  8121 ;; Parameters:    Size  Location     Type
  8122 ;;  buf             2   22[BANK0 ] PTR unsigned char 
  8123 ;;		 -> wrkbuf(80), 
  8124 ;;  val             4   24[BANK0 ] unsigned long 
  8125 ;;  base            2   28[BANK0 ] int 
  8126 ;; Auto vars:     Size  Location     Type
  8127 ;;  v               4   30[BANK0 ] unsigned long 
  8128 ;;  c               1   34[BANK0 ] unsigned char 
  8129 ;; Return value:  Size  Location     Type
  8130 ;;                  2   22[BANK0 ] PTR unsigned char 
  8131 ;; Registers used:
  8132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8133 ;; Tracked objects:
  8134 ;;		On entry : F/0
  8135 ;;		On exit  : F/0
  8136 ;;		Unchanged: 0/0
  8137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8138 ;;      Params:         0       8       0       0       0       0       0
  8139 ;;      Locals:         0       5       0       0       0       0       0
  8140 ;;      Temps:          0       0       0       0       0       0       0
  8141 ;;      Totals:         0      13       0       0       0       0       0
  8142 ;;Total ram usage:       13 bytes
  8143 ;; Hardware stack levels used:    1
  8144 ;; Hardware stack levels required when called:    4
  8145 ;; This function calls:
  8146 ;;		___lldiv
  8147 ;;		___llmod
  8148 ;; This function is called by:
  8149 ;;		_receiveSendEventSLCAN
  8150 ;; This function uses a non-reentrant model
  8151 ;;
  8152                           
  8153                           	psect	text6
  8154  003F06                     __ptext6:
  8155                           	opt stack 0
  8156  003F06                     _ultoa:
  8157                           	opt stack 24
  8158                           
  8159                           ; BSR set to: 0
  8160                           
  8161                           ;incstack = 0
  8162                           ;incstack = 0
  8163  003F06  C078  F07E         	movff	ultoa@val,ultoa@v
  8164  003F0A  C079  F07F         	movff	ultoa@val+1,ultoa@v+1
  8165  003F0E  C07A  F080         	movff	ultoa@val+2,ultoa@v+2
  8166  003F12  C07B  F081         	movff	ultoa@val+3,ultoa@v+3
  8167  003F16                     l12623:
  8168                           
  8169                           ; BSR set to: 0
  8170  003F16  C07E  F060         	movff	ultoa@v,?___lldiv
  8171  003F1A  C07F  F061         	movff	ultoa@v+1,?___lldiv+1
  8172  003F1E  C080  F062         	movff	ultoa@v+2,?___lldiv+2
  8173  003F22  C081  F063         	movff	ultoa@v+3,?___lldiv+3
  8174  003F26  D858               	call	PL74	;call to abstracted procedure
  8175  003F28  ECC0  F026         	call	___lldiv	;wreg free
  8176  003F2C  C063  F081         	movff	?___lldiv+3,ultoa@v+3
  8177  003F30  C062  F080         	movff	?___lldiv+2,ultoa@v+2
  8178  003F34  C061  F07F         	movff	?___lldiv+1,ultoa@v+1
  8179  003F38  C060  F07E         	movff	?___lldiv,ultoa@v
  8180                           
  8181                           ; BSR set to: 0
  8182  003F3C  4B76               	infsnz	ultoa@buf& (0+255),f,b
  8183  003F3E  2B77               	incf	(ultoa@buf+1)& (0+255),f,b
  8184                           
  8185                           ; BSR set to: 0
  8186  003F40  5181               	movf	(ultoa@v+3)& (0+255),w,b
  8187  003F42  117E               	iorwf	ultoa@v& (0+255),w,b
  8188  003F44  117F               	iorwf	(ultoa@v+1)& (0+255),w,b
  8189  003F46  1180               	iorwf	(ultoa@v+2)& (0+255),w,b
  8190  003F48  E1E6               	bnz	l12623
  8191                           
  8192                           ; BSR set to: 0
  8193  003F4A  C076  FFD9         	movff	ultoa@buf,fsr2l
  8194  003F4E  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8195  003F52  6ADF               	clrf	indf2,c
  8196                           
  8197                           ; BSR set to: 0
  8198  003F54  0776               	decf	ultoa@buf& (0+255),f,b
  8199  003F56  A0D8               	btfss	status,0,c
  8200  003F58  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8201  003F5A                     l12633:
  8202                           
  8203                           ; BSR set to: 0
  8204  003F5A  C078  F06D         	movff	ultoa@val,?___llmod
  8205  003F5E  C079  F06E         	movff	ultoa@val+1,?___llmod+1
  8206  003F62  C07A  F06F         	movff	ultoa@val+2,?___llmod+2
  8207  003F66  C07B  F070         	movff	ultoa@val+3,?___llmod+3
  8208  003F6A  C07C  F071         	movff	ultoa@base,?___llmod+4
  8209  003F6E  C07D  F072         	movff	ultoa@base+1,?___llmod+5
  8210  003F72  0E00               	movlw	0
  8211  003F74  BF72               	btfsc	(?___llmod+5)& (0+255),7,b
  8212  003F76  0EFF               	movlw	-1
  8213  003F78  6F73               	movwf	(?___llmod+6)& (0+255),b
  8214  003F7A  6F74               	movwf	(?___llmod+7)& (0+255),b
  8215  003F7C  EC3B  F028         	call	___llmod	;wreg free
  8216  003F80  516D               	movf	?___llmod& (0+255),w,b
  8217  003F82  6F82               	movwf	ultoa@c& (0+255),b
  8218                           
  8219                           ; BSR set to: 0
  8220  003F84  C078  F060         	movff	ultoa@val,?___lldiv
  8221  003F88  C079  F061         	movff	ultoa@val+1,?___lldiv+1
  8222  003F8C  C07A  F062         	movff	ultoa@val+2,?___lldiv+2
  8223  003F90  C07B  F063         	movff	ultoa@val+3,?___lldiv+3
  8224  003F94  D821               	call	PL74	;call to abstracted procedure
  8225  003F96  ECC0  F026         	call	___lldiv	;wreg free
  8226  003F9A  C063  F07B         	movff	?___lldiv+3,ultoa@val+3
  8227  003F9E  C062  F07A         	movff	?___lldiv+2,ultoa@val+2
  8228  003FA2  C061  F079         	movff	?___lldiv+1,ultoa@val+1
  8229  003FA6  C060  F078         	movff	?___lldiv,ultoa@val
  8230                           
  8231                           ; BSR set to: 0
  8232  003FAA  0E09               	movlw	9
  8233  003FAC  6582               	cpfsgt	ultoa@c& (0+255),b
  8234  003FAE  D002               	goto	l2386
  8235                           
  8236                           ; BSR set to: 0
  8237  003FB0  0E07               	movlw	7
  8238  003FB2  2782               	addwf	ultoa@c& (0+255),f,b
  8239  003FB4                     l2386:
  8240                           
  8241                           ; BSR set to: 0
  8242  003FB4  0E30               	movlw	48
  8243  003FB6  2782               	addwf	ultoa@c& (0+255),f,b
  8244                           
  8245                           ; BSR set to: 0
  8246  003FB8  C076  FFD9         	movff	ultoa@buf,fsr2l
  8247  003FBC  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8248  003FC0  C082  FFDF         	movff	ultoa@c,indf2
  8249                           
  8250                           ; BSR set to: 0
  8251  003FC4  0776               	decf	ultoa@buf& (0+255),f,b
  8252  003FC6  A0D8               	btfss	status,0,c
  8253  003FC8  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8254                           
  8255                           ; BSR set to: 0
  8256  003FCA  517B               	movf	(ultoa@val+3)& (0+255),w,b
  8257  003FCC  1178               	iorwf	ultoa@val& (0+255),w,b
  8258  003FCE  1179               	iorwf	(ultoa@val+1)& (0+255),w,b
  8259  003FD0  117A               	iorwf	(ultoa@val+2)& (0+255),w,b
  8260  003FD2  B4D8               	btfsc	status,2,c
  8261                           
  8262                           ; BSR set to: 0
  8263  003FD4  0012               	return	
  8264  003FD6  D7C1               	goto	l12633
  8265  003FD8                     __end_of_ultoa:
  8266                           	opt stack 0
  8267  003FD8                     PL74:
  8268                           	opt stack 24
  8269  003FD8  C07C  F064         	movff	ultoa@base,?___lldiv+4
  8270  003FDC  C07D  F065         	movff	ultoa@base+1,?___lldiv+5
  8271  003FE0  0E00               	movlw	0
  8272  003FE2  BF65               	btfsc	(?___lldiv+5)& (0+255),7,b
  8273  003FE4  0EFF               	movlw	-1
  8274  003FE6  6F66               	movwf	(?___lldiv+6)& (0+255),b
  8275  003FE8  6F67               	movwf	(?___lldiv+7)& (0+255),b
  8276  003FEA  0012               	return	
  8277  003FEC                     __end_ofPL74:
  8278                           	opt stack 0
  8279                           tblptru	equ	0xFF8
  8280                           tblptrh	equ	0xFF7
  8281                           tblptrl	equ	0xFF6
  8282                           tablat	equ	0xFF5
  8283                           prodh	equ	0xFF4
  8284                           prodl	equ	0xFF3
  8285                           intcon	equ	0xFF2
  8286                           indf0	equ	0xFEF
  8287                           postinc0	equ	0xFEE
  8288                           fsr0h	equ	0xFEA
  8289                           fsr0l	equ	0xFE9
  8290                           wreg	equ	0xFE8
  8291                           indf1	equ	0xFE7
  8292                           postinc1	equ	0xFE6
  8293                           postdec1	equ	0xFE5
  8294                           fsr1h	equ	0xFE2
  8295                           fsr1l	equ	0xFE1
  8296                           indf2	equ	0xFDF
  8297                           postinc2	equ	0xFDE
  8298                           postdec2	equ	0xFDD
  8299                           plusw2	equ	0xFDB
  8300                           fsr2h	equ	0xFDA
  8301                           fsr2l	equ	0xFD9
  8302                           status	equ	0xFD8
  8303                           
  8304 ;; *************** function _doModeVscp *****************
  8305 ;; Defined at:
  8306 ;;		line 1094 in file "main.c"
  8307 ;; Parameters:    Size  Location     Type
  8308 ;;		None
  8309 ;; Auto vars:     Size  Location     Type
  8310 ;;  c               1   87[BANK0 ] unsigned char 
  8311 ;; Return value:  Size  Location     Type
  8312 ;;		None               void
  8313 ;; Registers used:
  8314 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8315 ;; Tracked objects:
  8316 ;;		On entry : F/0
  8317 ;;		On exit  : E/0
  8318 ;;		Unchanged: 0/0
  8319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8320 ;;      Params:         0       0       0       0       0       0       0
  8321 ;;      Locals:         0       1       0       0       0       0       0
  8322 ;;      Temps:          0       0       0       0       0       0       0
  8323 ;;      Totals:         0       1       0       0       0       0       0
  8324 ;;Total ram usage:        1 bytes
  8325 ;; Hardware stack levels used:    1
  8326 ;; Hardware stack levels required when called:    7
  8327 ;; This function calls:
  8328 ;;		_fifo_read
  8329 ;;		_ECANSetOperationMode
  8330 ;;		_receiveSendMultiEventCANAL
  8331 ;;		_receiveSendEventCANAL
  8332 ;;		_calcCRC
  8333 ;;		_sendVSCPDriverErrorFrame
  8334 ;;		_sendVSCPDriverAck
  8335 ;;		_receiveVSCPModeCanalMsg
  8336 ;;		_sendVSCPDriverNack
  8337 ;;		_receiveVSCPModeMultiCanalMsg
  8338 ;;		_sendVSCPModeCapabilities
  8339 ;;		_sendVSCPDriverCommandReply
  8340 ;; This function is called by:
  8341 ;;		_main
  8342 ;; This function uses a non-reentrant model
  8343 ;;
  8344                           
  8345                           	psect	text7
  8346  002C3C                     __ptext7:
  8347                           	opt stack 0
  8348  002C3C                     _doModeVscp:
  8349                           	opt stack 23
  8350                           
  8351                           ; BSR set to: 0
  8352                           ;main.c: 1095: uint8_t c;
  8353                           ;main.c: 1098: if ( caps.maxCanalFrames > 1 ) {
  8354                           
  8355                           ; BSR set to: 0
  8356                           ;incstack = 0
  8357                           ;incstack = 0
  8358  002C3C  EE20  F0F6         	lfsr	2,_caps+1
  8359  002C40  0E01               	movlw	1
  8360  002C42  64DF               	cpfsgt	indf2,c
  8361  002C44  D003               	goto	l10657
  8362                           
  8363                           ; BSR set to: 0
  8364                           ;main.c: 1101: receiveSendMultiEventCANAL();
  8365  002C46  EC93  F018         	call	_receiveSendMultiEventCANAL	;wreg free
  8366                           
  8367                           ;main.c: 1102: }
  8368  002C4A  D002               	goto	l10659
  8369  002C4C                     l10657:
  8370                           
  8371                           ; BSR set to: 0
  8372                           ;main.c: 1103: else {
  8373                           ;main.c: 1106: receiveSendEventCANAL();
  8374  002C4C  ECBE  F01A         	call	_receiveSendEventCANAL	;wreg free
  8375  002C50                     l10659:
  8376                           
  8377                           ;main.c: 1107: }
  8378                           ;main.c: 1110: (INTCONbits.GIE = 0);
  8379  002C50  9EF2               	bcf	intcon,7,c	;volatile
  8380                           
  8381                           ;main.c: 1112: if ( 1 == fifo_read(&serialInputFifo, &c, 1 ) ) {
  8382  002C52  0100               	movlb	0	; () banked
  8383  002C54  0E00               	movlw	high doModeVscp@c
  8384  002C56  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  8385  002C58  0EB7               	movlw	low doModeVscp@c
  8386  002C5A  6F60               	movwf	?_fifo_read& (0+255),b
  8387  002C5C  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  8388  002C5E  0E01               	movlw	1
  8389  002C60  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  8390  002C62  0E48               	movlw	_serialInputFifo& (0+255)
  8391  002C64  EC9C  F021         	call	_fifo_read
  8392  002C68  0560               	decf	?_fifo_read& (0+255),w,b
  8393  002C6A  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  8394  002C6C  E001 D0B9          	bnz	l10803
  8395                           
  8396                           ; BSR set to: 0
  8397                           ;main.c: 1115: (INTCONbits.GIE = 1);
  8398  002C70  8EF2               	bsf	intcon,7,c	;volatile
  8399                           
  8400                           ;main.c: 1117: if ( 0 == stateVscpDriver ) {
  8401  002C72  67F4               	tstfsz	_stateVscpDriver& (0+255),b
  8402  002C74  D00E               	goto	l10679
  8403                           
  8404                           ; BSR set to: 0
  8405                           ;main.c: 1118: if ( bDLE ) {
  8406  002C76  51ED               	movf	_bDLE& (0+255),w,b
  8407  002C78  E009               	bz	l10675
  8408                           
  8409                           ; BSR set to: 0
  8410                           ;main.c: 1119: bDLE = 0;
  8411  002C7A  6BED               	clrf	_bDLE& (0+255),b
  8412                           
  8413                           ; BSR set to: 0
  8414                           ;main.c: 1122: if ( 0x02 == c ) {
  8415  002C7C  51B7               	movf	doModeVscp@c& (0+255),w,b
  8416  002C7E  0A02               	xorlw	2
  8417  002C80  E129               	bnz	l10713
  8418                           
  8419                           ; BSR set to: 0
  8420                           ;main.c: 1123: stateVscpDriver = 1;
  8421  002C82  0E01               	movlw	1
  8422  002C84  6FF4               	movwf	_stateVscpDriver& (0+255),b
  8423                           
  8424                           ; BSR set to: 0
  8425                           ;main.c: 1124: pos = 0;
  8426  002C86  0101               	movlb	1	; () banked
  8427  002C88  6B02               	clrf	_pos& (0+255),b
  8428  002C8A  D024               	goto	l10713
  8429  002C8C                     l10675:
  8430                           
  8431                           ; BSR set to: 0
  8432                           ;main.c: 1127: else {
  8433                           ;main.c: 1128: bDLE = 1;
  8434  002C8C  0E01               	movlw	1
  8435  002C8E  6FED               	movwf	_bDLE& (0+255),b
  8436  002C90  D0A9               	goto	l657
  8437  002C92                     l10679:
  8438                           
  8439                           ; BSR set to: 0
  8440                           ;main.c: 1132: else if ( 1 == stateVscpDriver ) {
  8441  002C92  05F4               	decf	_stateVscpDriver& (0+255),w,b
  8442  002C94  E11F               	bnz	l10713
  8443                           
  8444                           ; BSR set to: 0
  8445                           ;main.c: 1133: if (bDLE) {
  8446  002C96  51ED               	movf	_bDLE& (0+255),w,b
  8447  002C98  E00F               	bz	l10697
  8448                           
  8449                           ; BSR set to: 0
  8450                           ;main.c: 1135: bDLE = 0;
  8451  002C9A  6BED               	clrf	_bDLE& (0+255),b
  8452                           
  8453                           ; BSR set to: 0
  8454                           ;main.c: 1138: if (0x03 == c) {
  8455  002C9C  51B7               	movf	doModeVscp@c& (0+255),w,b
  8456  002C9E  0A03               	xorlw	3
  8457  002CA0  E103               	bnz	l10689
  8458                           
  8459                           ; BSR set to: 0
  8460                           ;main.c: 1139: stateVscpDriver = 2;
  8461  002CA2  0E02               	movlw	2
  8462  002CA4  6FF4               	movwf	_stateVscpDriver& (0+255),b
  8463                           
  8464                           ;main.c: 1140: }
  8465  002CA6  D016               	goto	l10713
  8466  002CA8                     l10689:
  8467                           
  8468                           ; BSR set to: 0
  8469                           ;main.c: 1141: else if (0x10 == c) {
  8470  002CA8  51B7               	movf	doModeVscp@c& (0+255),w,b
  8471  002CAA  0A10               	xorlw	16
  8472  002CAC  E113               	bnz	l10713
  8473                           
  8474                           ; BSR set to: 0
  8475                           ;main.c: 1143: cmdbuf[ pos++ ] = c;
  8476  002CAE  D89B               	call	PL20	;call to abstracted procedure
  8477  002CB0  C0B7  FFDF         	movff	doModeVscp@c,indf2
  8478                           
  8479                           ; BSR set to: 0
  8480  002CB4  2B02               	incf	_pos& (0+255),f,b
  8481  002CB6  D096               	goto	l657
  8482  002CB8                     l10697:
  8483                           
  8484                           ; BSR set to: 0
  8485                           ;main.c: 1147: else {
  8486                           ;main.c: 1148: if (0x10 == c) {
  8487  002CB8  51B7               	movf	doModeVscp@c& (0+255),w,b
  8488  002CBA  0A10               	xorlw	16
  8489  002CBC  E0E7               	bz	l10675
  8490                           
  8491                           ; BSR set to: 0
  8492                           ;main.c: 1152: else {
  8493                           ;main.c: 1154: cmdbuf[ pos++ ] = c;
  8494  002CBE  D893               	call	PL20	;call to abstracted procedure
  8495  002CC0  C0B7  FFDF         	movff	doModeVscp@c,indf2
  8496                           
  8497                           ; BSR set to: 0
  8498  002CC4  2B02               	incf	_pos& (0+255),f,b
  8499                           
  8500                           ; BSR set to: 1
  8501                           ;main.c: 1156: if (pos >= 128u) {
  8502  002CC6  0E7F               	movlw	127
  8503  002CC8  6502               	cpfsgt	_pos& (0+255),b
  8504  002CCA  D08C               	goto	l657
  8505                           
  8506                           ; BSR set to: 1
  8507                           ;main.c: 1159: pos = 0;
  8508  002CCC  6B02               	clrf	_pos& (0+255),b
  8509                           
  8510                           ;main.c: 1160: stateVscpDriver = 0;
  8511  002CCE  0100               	movlb	0	; () banked
  8512  002CD0  6BF4               	clrf	_stateVscpDriver& (0+255),b
  8513  002CD2  D088               	goto	l657
  8514  002CD4                     l10713:
  8515                           
  8516                           ;main.c: 1164: }
  8517                           ;main.c: 1165: }
  8518                           ;main.c: 1166: }
  8519                           ;main.c: 1171: if (2 == stateVscpDriver) {
  8520  002CD4  0100               	movlb	0	; () banked
  8521  002CD6  51F4               	movf	_stateVscpDriver& (0+255),w,b
  8522  002CD8  0A02               	xorlw	2
  8523  002CDA  E001 D082          	bnz	l10803
  8524                           
  8525                           ; BSR set to: 0
  8526                           ;main.c: 1174: stateVscpDriver = 0;
  8527  002CDE  6BF4               	clrf	_stateVscpDriver& (0+255),b
  8528                           
  8529                           ; BSR set to: 0
  8530                           ;main.c: 1187: if (calcCRC(cmdbuf, pos)) {
  8531  002CE0  0E01               	movlw	high _cmdbuf
  8532  002CE2  6F6D               	movwf	(?_calcCRC+1)& (0+255),b
  8533  002CE4  0E04               	movlw	low _cmdbuf
  8534  002CE6  6F6C               	movwf	?_calcCRC& (0+255),b
  8535  002CE8  C102  F06E         	movff	_pos,?_calcCRC+2
  8536  002CEC  EC3E  F02B         	call	_calcCRC	;wreg free
  8537  002CF0  0900               	iorlw	0
  8538  002CF2  E003               	bz	l10721
  8539                           
  8540                           ; BSR set to: 0
  8541                           ;main.c: 1188: sendVSCPDriverErrorFrame(1);
  8542  002CF4  0E01               	movlw	1
  8543  002CF6  EC03  F022         	call	_sendVSCPDriverErrorFrame
  8544  002CFA                     l10721:
  8545                           
  8546                           ;main.c: 1189: }
  8547                           ;main.c: 1192: if (0 ==
  8548                           ;main.c: 1193: cmdbuf[ 0 ]) {
  8549  002CFA  0101               	movlb	1	; () banked
  8550  002CFC  6704               	tstfsz	_cmdbuf& (0+255),b
  8551  002CFE  D003               	goto	l10725
  8552  002D00                     l10723:
  8553                           
  8554                           ;main.c: 1194: sendVSCPDriverAck();
  8555  002D00  EC68  F023         	call	_sendVSCPDriverAck	;wreg free
  8556                           
  8557                           ;main.c: 1195: }
  8558  002D04  D06A               	goto	l10799
  8559  002D06                     l10725:
  8560                           
  8561                           ; BSR set to: 1
  8562                           ;main.c: 1197: else if (1 ==
  8563                           ;main.c: 1198: cmdbuf[ 0 ]) {
  8564  002D06  0504               	decf	_cmdbuf& (0+255),w,b
  8565  002D08  E068               	bz	l10799
  8566                           
  8567                           ; BSR set to: 1
  8568                           ;main.c: 1202: else if (2 ==
  8569                           ;main.c: 1203: cmdbuf[ 0 ]) {
  8570  002D0A  5104               	movf	_cmdbuf& (0+255),w,b
  8571  002D0C  0A02               	xorlw	2
  8572  002D0E  E107               	bnz	l10737
  8573                           
  8574                           ; BSR set to: 1
  8575                           ;main.c: 1204: if ( receiveVSCPModeCanalMsg() ) {
  8576  002D10  ECF6  F01F         	call	_receiveVSCPModeCanalMsg	;wreg free
  8577  002D14  0900               	iorlw	0
  8578  002D16  E1F4               	bnz	l10723
  8579  002D18                     l10735:
  8580                           
  8581                           ;main.c: 1207: else {
  8582                           ;main.c: 1208: sendVSCPDriverNack();
  8583  002D18  EC18  F023         	call	_sendVSCPDriverNack	;wreg free
  8584  002D1C  D05E               	goto	l10799
  8585  002D1E                     l10737:
  8586                           
  8587                           ; BSR set to: 1
  8588                           ;main.c: 1212: else if (6 ==
  8589                           ;main.c: 1213: cmdbuf[ 0 ]) {
  8590  002D1E  5104               	movf	_cmdbuf& (0+255),w,b
  8591  002D20  0A06               	xorlw	6
  8592  002D22  E103               	bnz	l10745
  8593                           
  8594                           ; BSR set to: 1
  8595                           ;main.c: 1214: if (receiveVSCPModeMultiCanalMsg()) {
  8596  002D24  ECEF  F02B         	call	_receiveVSCPModeMultiCanalMsg	;wreg free
  8597  002D28  D7F5               	goto	L4
  8598  002D2A                     l10745:
  8599                           
  8600                           ; BSR set to: 1
  8601                           ;main.c: 1222: else if (6 ==
  8602                           ;main.c: 1223: cmdbuf[ 0 ]) {
  8603  002D2A  5104               	movf	_cmdbuf& (0+255),w,b
  8604  002D2C  0A06               	xorlw	6
  8605  002D2E  E0F4               	bz	l10735
  8606                           
  8607                           ; BSR set to: 1
  8608                           ;main.c: 1227: else if (3 ==
  8609                           ;main.c: 1228: cmdbuf[ 0 ]) {
  8610  002D30  5104               	movf	_cmdbuf& (0+255),w,b
  8611  002D32  0A03               	xorlw	3
  8612  002D34  E0F1               	bz	l10735
  8613                           
  8614                           ; BSR set to: 1
  8615                           ;main.c: 1232: else if (4 ==
  8616                           ;main.c: 1233: cmdbuf[ 0 ]) {
  8617  002D36  5104               	movf	_cmdbuf& (0+255),w,b
  8618  002D38  0A04               	xorlw	4
  8619  002D3A  E0EE               	bz	l10735
  8620                           
  8621                           ; BSR set to: 1
  8622                           ;main.c: 1237: else if (8 ==
  8623                           ;main.c: 1238: cmdbuf[ 0 ]) {
  8624  002D3C  5104               	movf	_cmdbuf& (0+255),w,b
  8625  002D3E  0A08               	xorlw	8
  8626  002D40  E107               	bnz	l10763
  8627                           
  8628                           ; BSR set to: 1
  8629                           ;main.c: 1239: caps.maxVscpFrames = cmdbuf[ 5 ];
  8630  002D42  C109  F0F5         	movff	_cmdbuf+5,_caps
  8631                           
  8632                           ;main.c: 1240: caps.maxCanalFrames = cmdbuf[ 5 + 1 ];
  8633  002D46  C10A  F0F6         	movff	_cmdbuf+6,_caps+1
  8634                           
  8635                           ; BSR set to: 1
  8636                           ;main.c: 1241: sendVSCPModeCapabilities();
  8637  002D4A  EC62  F022         	call	_sendVSCPModeCapabilities	;wreg free
  8638                           
  8639                           ;main.c: 1242: }
  8640  002D4E  D045               	goto	l10799
  8641  002D50                     l10763:
  8642                           
  8643                           ; BSR set to: 1
  8644                           ;main.c: 1244: else if (255 ==
  8645                           ;main.c: 1245: cmdbuf[ 0 ]) {
  8646  002D50  2904               	incf	_cmdbuf& (0+255),w,b
  8647  002D52  E140               	bnz	l10797
  8648                           
  8649                           ; BSR set to: 1
  8650                           ;main.c: 1247: if (cmdbuf[ 5 ] ==
  8651                           ;main.c: 1248: 0) {
  8652  002D54  6709               	tstfsz	(_cmdbuf+5)& (0+255),b
  8653  002D56  D006               	goto	l10769
  8654                           
  8655                           ; BSR set to: 1
  8656                           ;main.c: 1249: sendVSCPDriverCommandReply(0, 0);
  8657  002D58  0E00               	movlw	0
  8658  002D5A  0100               	movlb	0	; () banked
  8659  002D5C  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8660  002D5E  EC64  F020         	call	_sendVSCPDriverCommandReply
  8661                           
  8662                           ;main.c: 1250: }
  8663  002D62  D03B               	goto	l10799
  8664  002D64                     l10769:
  8665                           
  8666                           ; BSR set to: 1
  8667                           ;main.c: 1252: else if (cmdbuf[ 5 ] ==
  8668                           ;main.c: 1253: 1) {
  8669  002D64  0509               	decf	(_cmdbuf+5)& (0+255),w,b
  8670  002D66  E109               	bnz	l10775
  8671                           
  8672                           ; BSR set to: 1
  8673                           ;main.c: 1254: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  8674  002D68  0E00               	movlw	0
  8675  002D6A  ECAD  F02B         	call	_ECANSetOperationMode
  8676                           
  8677                           ; BSR set to: 0
  8678                           ;main.c: 1255: sendVSCPDriverCommandReply(0, 1);
  8679  002D6E  0E01               	movlw	1
  8680  002D70  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8681  002D72  0E00               	movlw	0
  8682  002D74  EC64  F020         	call	_sendVSCPDriverCommandReply
  8683                           
  8684                           ;main.c: 1256: }
  8685  002D78  D030               	goto	l10799
  8686  002D7A                     l10775:
  8687                           
  8688                           ; BSR set to: 1
  8689                           ;main.c: 1258: else if (cmdbuf[ 5 ] ==
  8690                           ;main.c: 1259: 2) {
  8691  002D7A  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8692  002D7C  0A02               	xorlw	2
  8693  002D7E  E109               	bnz	l10781
  8694                           
  8695                           ; BSR set to: 1
  8696                           ;main.c: 1260: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  8697  002D80  0E40               	movlw	64
  8698  002D82  ECAD  F02B         	call	_ECANSetOperationMode
  8699                           
  8700                           ; BSR set to: 0
  8701                           ;main.c: 1261: sendVSCPDriverCommandReply(0, 2);
  8702  002D86  0E02               	movlw	2
  8703  002D88  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8704  002D8A  0E00               	movlw	0
  8705  002D8C  EC64  F020         	call	_sendVSCPDriverCommandReply
  8706                           
  8707                           ;main.c: 1262: }
  8708  002D90  D024               	goto	l10799
  8709  002D92                     l10781:
  8710                           
  8711                           ; BSR set to: 1
  8712                           ;main.c: 1264: else if (cmdbuf[ 5 ] ==
  8713                           ;main.c: 1265: 3) {
  8714  002D92  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8715  002D94  0A03               	xorlw	3
  8716  002D96  E109               	bnz	l10787
  8717                           
  8718                           ; BSR set to: 1
  8719                           ;main.c: 1266: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  8720  002D98  0E60               	movlw	96
  8721  002D9A  ECAD  F02B         	call	_ECANSetOperationMode
  8722                           
  8723                           ; BSR set to: 0
  8724                           ;main.c: 1267: sendVSCPDriverCommandReply(0, 3);
  8725  002D9E  0E03               	movlw	3
  8726  002DA0  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8727  002DA2  0E00               	movlw	0
  8728  002DA4  EC64  F020         	call	_sendVSCPDriverCommandReply
  8729                           
  8730                           ;main.c: 1268: }
  8731  002DA8  D018               	goto	l10799
  8732  002DAA                     l10787:
  8733                           
  8734                           ; BSR set to: 1
  8735                           ;main.c: 1270: else if (cmdbuf[ 5 ] ==
  8736                           ;main.c: 1271: 4) {
  8737  002DAA  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8738  002DAC  0A04               	xorlw	4
  8739  002DAE  E109               	bnz	l10793
  8740                           
  8741                           ; BSR set to: 1
  8742                           ;main.c: 1272: ECANSetOperationMode(0x20);
  8743  002DB0  0E20               	movlw	32
  8744  002DB2  ECAD  F02B         	call	_ECANSetOperationMode
  8745                           
  8746                           ; BSR set to: 0
  8747                           ;main.c: 1273: sendVSCPDriverCommandReply(0, 4);
  8748  002DB6  0E04               	movlw	4
  8749  002DB8  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8750  002DBA  0E00               	movlw	0
  8751  002DBC  EC64  F020         	call	_sendVSCPDriverCommandReply
  8752                           
  8753                           ;main.c: 1274: }
  8754  002DC0  D00C               	goto	l10799
  8755  002DC2                     l10793:
  8756                           
  8757                           ; BSR set to: 1
  8758                           ;main.c: 1276: else if (cmdbuf[ 5 ] ==
  8759                           ;main.c: 1277: 5) {
  8760  002DC2  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8761  002DC4  0A05               	xorlw	5
  8762  002DC6  E109               	bnz	l10799
  8763                           
  8764                           ; BSR set to: 1
  8765                           ;main.c: 1278: sendVSCPDriverCommandReply(0, 0);
  8766  002DC8  0E00               	movlw	0
  8767  002DCA  0100               	movlb	0	; () banked
  8768  002DCC  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8769  002DCE  EC64  F020         	call	_sendVSCPDriverCommandReply
  8770  002DD2  D003               	goto	l10799
  8771  002DD4                     l10797:
  8772                           
  8773                           ; BSR set to: 1
  8774                           ;main.c: 1282: else {
  8775                           ;main.c: 1284: sendVSCPDriverErrorFrame(2);
  8776  002DD4  0E02               	movlw	2
  8777  002DD6  EC03  F022         	call	_sendVSCPDriverErrorFrame
  8778  002DDA                     l10799:
  8779                           
  8780                           ;main.c: 1285: }
  8781                           ;main.c: 1288: pos = 0;
  8782  002DDA  0101               	movlb	1	; () banked
  8783  002DDC  6B02               	clrf	_pos& (0+255),b
  8784                           
  8785                           ; BSR set to: 1
  8786                           ;main.c: 1289: stateVscpDriver = 0;
  8787  002DDE  0100               	movlb	0	; () banked
  8788  002DE0  6BF4               	clrf	_stateVscpDriver& (0+255),b
  8789  002DE2                     l10803:
  8790                           
  8791                           ; BSR set to: 0
  8792                           ;main.c: 1291: }
  8793                           ;main.c: 1293: }
  8794                           ;main.c: 1296: (INTCONbits.GIE = 1);
  8795  002DE2  8EF2               	bsf	intcon,7,c	;volatile
  8796  002DE4                     l657:
  8797  002DE4  0012               	return	
  8798  002DE6                     __end_of_doModeVscp:
  8799                           	opt stack 0
  8800  002DE6                     PL20:
  8801                           	opt stack 20
  8802  002DE6  0101               	movlb	1	; () banked
  8803  002DE8  0E04               	movlw	low _cmdbuf
  8804  002DEA  2502               	addwf	_pos& (0+255),w,b
  8805  002DEC  6ED9               	movwf	fsr2l,c
  8806  002DEE  6ADA               	clrf	fsr2h,c
  8807  002DF0  0E01               	movlw	high _cmdbuf
  8808  002DF2  22DA               	addwfc	fsr2h,f,c
  8809  002DF4  0012               	return	
  8810  002DF6                     __end_ofPL20:
  8811                           	opt stack 0
  8812                           tblptru	equ	0xFF8
  8813                           tblptrh	equ	0xFF7
  8814                           tblptrl	equ	0xFF6
  8815                           tablat	equ	0xFF5
  8816                           prodh	equ	0xFF4
  8817                           prodl	equ	0xFF3
  8818                           intcon	equ	0xFF2
  8819                           indf0	equ	0xFEF
  8820                           postinc0	equ	0xFEE
  8821                           fsr0h	equ	0xFEA
  8822                           fsr0l	equ	0xFE9
  8823                           wreg	equ	0xFE8
  8824                           indf1	equ	0xFE7
  8825                           postinc1	equ	0xFE6
  8826                           postdec1	equ	0xFE5
  8827                           fsr1h	equ	0xFE2
  8828                           fsr1l	equ	0xFE1
  8829                           indf2	equ	0xFDF
  8830                           postinc2	equ	0xFDE
  8831                           postdec2	equ	0xFDD
  8832                           plusw2	equ	0xFDB
  8833                           fsr2h	equ	0xFDA
  8834                           fsr2l	equ	0xFD9
  8835                           status	equ	0xFD8
  8836                           
  8837 ;; *************** function _sendVSCPDriverCommandReply *****************
  8838 ;; Defined at:
  8839 ;;		line 1678 in file "main.c"
  8840 ;; Parameters:    Size  Location     Type
  8841 ;;  cmdReplyCode    1    wreg     unsigned char 
  8842 ;;  cmdCode         1   15[BANK0 ] unsigned char 
  8843 ;; Auto vars:     Size  Location     Type
  8844 ;;  cmdReplyCode    1   16[BANK0 ] unsigned char 
  8845 ;;  crc             1   17[BANK0 ] unsigned char 
  8846 ;; Return value:  Size  Location     Type
  8847 ;;		None               void
  8848 ;; Registers used:
  8849 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8850 ;; Tracked objects:
  8851 ;;		On entry : F/0
  8852 ;;		On exit  : 0/0
  8853 ;;		Unchanged: 0/0
  8854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8855 ;;      Params:         0       1       0       0       0       0       0
  8856 ;;      Locals:         0       2       0       0       0       0       0
  8857 ;;      Temps:          0       0       0       0       0       0       0
  8858 ;;      Totals:         0       3       0       0       0       0       0
  8859 ;;Total ram usage:        3 bytes
  8860 ;; Hardware stack levels used:    1
  8861 ;; Hardware stack levels required when called:    6
  8862 ;; This function calls:
  8863 ;;		_WriteUSART
  8864 ;;		_sendEscapedUartData
  8865 ;;		_crc8
  8866 ;; This function is called by:
  8867 ;;		_doModeVscp
  8868 ;; This function uses a non-reentrant model
  8869 ;;
  8870                           
  8871                           	psect	text8
  8872  0040C8                     __ptext8:
  8873                           	opt stack 0
  8874  0040C8                     _sendVSCPDriverCommandReply:
  8875                           	opt stack 23
  8876                           
  8877                           ;incstack = 0
  8878                           ;incstack = 0
  8879                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
  8880  0040C8  CFE8 F070          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
  8881                           
  8882                           ; BSR set to: 0
  8883                           ;main.c: 1679: uint8_t crc = 0;
  8884  0040CC  6B71               	clrf	sendVSCPDriverCommandReply@crc& (0+255),b
  8885  0040CE                     l851:
  8886                           
  8887                           ; BSR set to: 0
  8888  0040CE  A2AC               	btfss	4012,1,c	;volatile
  8889  0040D0  D7FE               	goto	l851
  8890                           
  8891                           ; BSR set to: 0
  8892                           ;main.c: 1683: WriteUSART(0x10);
  8893  0040D2  0E10               	movlw	16
  8894  0040D4  ECC5  F02B         	call	_WriteUSART
  8895  0040D8                     l854:
  8896  0040D8  A2AC               	btfss	4012,1,c	;volatile
  8897  0040DA  D7FE               	goto	l854
  8898                           
  8899                           ;main.c: 1685: WriteUSART(0x02);
  8900  0040DC  0E02               	movlw	2
  8901  0040DE  ECC5  F02B         	call	_WriteUSART
  8902  0040E2                     l857:
  8903  0040E2  A2AC               	btfss	4012,1,c	;volatile
  8904  0040E4  D7FE               	goto	l857
  8905                           
  8906                           ;main.c: 1689: WriteUSART(254);
  8907  0040E6  0EFE               	movlw	254
  8908  0040E8  ECC5  F02B         	call	_WriteUSART
  8909                           
  8910                           ;main.c: 1690: crc8(&crc, 254);
  8911  0040EC  0100               	movlb	0	; () banked
  8912  0040EE  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8913  0040F0  6F68               	movwf	(?_crc8+1)& (0+255),b
  8914  0040F2  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8915  0040F4  6F67               	movwf	?_crc8& (0+255),b
  8916  0040F6  0EFE               	movlw	254
  8917  0040F8  6F69               	movwf	(?_crc8+2)& (0+255),b
  8918  0040FA  ECF2  F02A         	call	_crc8	;wreg free
  8919  0040FE                     l860:
  8920                           
  8921                           ; BSR set to: 0
  8922  0040FE  A2AC               	btfss	4012,1,c	;volatile
  8923  004100  D7FE               	goto	l860
  8924                           
  8925                           ; BSR set to: 0
  8926                           ;main.c: 1694: WriteUSART(0);
  8927  004102  0E00               	movlw	0
  8928  004104  ECC5  F02B         	call	_WriteUSART
  8929                           
  8930                           ;main.c: 1695: crc8(&crc, 0);
  8931  004108  D841               	call	PL100	;call to abstracted procedure
  8932  00410A  ECF2  F02A         	call	_crc8	;wreg free
  8933                           
  8934                           ; BSR set to: 0
  8935                           ;main.c: 1698: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  8936  00410E  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8937  004110  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  8938  004112  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8939  004114  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  8940  004116  0101               	movlb	1	; () banked
  8941  004118  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  8942  00411A  EC6C  F028         	call	_sendEscapedUartData
  8943  00411E                     l863:
  8944                           
  8945                           ; BSR set to: 0
  8946  00411E  A2AC               	btfss	4012,1,c	;volatile
  8947  004120  D7FE               	goto	l863
  8948                           
  8949                           ; BSR set to: 0
  8950                           ;main.c: 1702: WriteUSART(0);
  8951  004122  0E00               	movlw	0
  8952  004124  ECC5  F02B         	call	_WriteUSART
  8953                           
  8954                           ;main.c: 1703: crc8(&crc, 0);
  8955  004128  D831               	call	PL100	;call to abstracted procedure
  8956  00412A  ECF2  F02A         	call	_crc8	;wreg free
  8957  00412E                     l866:
  8958                           
  8959                           ; BSR set to: 0
  8960  00412E  A2AC               	btfss	4012,1,c	;volatile
  8961  004130  D7FE               	goto	l866
  8962                           
  8963                           ; BSR set to: 0
  8964                           ;main.c: 1705: WriteUSART(2);
  8965  004132  0E02               	movlw	2
  8966  004134  ECC5  F02B         	call	_WriteUSART
  8967                           
  8968                           ;main.c: 1706: crc8(&crc, 2);
  8969  004138  0100               	movlb	0	; () banked
  8970  00413A  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8971  00413C  6F68               	movwf	(?_crc8+1)& (0+255),b
  8972  00413E  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8973  004140  6F67               	movwf	?_crc8& (0+255),b
  8974  004142  0E02               	movlw	2
  8975  004144  6F69               	movwf	(?_crc8+2)& (0+255),b
  8976  004146  ECF2  F02A         	call	_crc8	;wreg free
  8977  00414A                     l869:
  8978                           
  8979                           ; BSR set to: 0
  8980  00414A  A2AC               	btfss	4012,1,c	;volatile
  8981  00414C  D7FE               	goto	l869
  8982                           
  8983                           ; BSR set to: 0
  8984                           ;main.c: 1710: sendEscapedUartData(cmdReplyCode, &crc);
  8985  00414E  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8986  004150  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  8987  004152  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8988  004154  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  8989  004156  5170               	movf	sendVSCPDriverCommandReply@cmdReplyCode& (0+255),w,b
  8990  004158  EC6C  F028         	call	_sendEscapedUartData
  8991  00415C                     l872:
  8992                           
  8993                           ; BSR set to: 0
  8994  00415C  A2AC               	btfss	4012,1,c	;volatile
  8995  00415E  D7FE               	goto	l872
  8996                           
  8997                           ; BSR set to: 0
  8998                           ;main.c: 1714: sendEscapedUartData(cmdCode, &crc);
  8999  004160  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9000  004162  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9001  004164  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9002  004166  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9003  004168  516F               	movf	sendVSCPDriverCommandReply@cmdCode& (0+255),w,b
  9004  00416A  EC6C  F028         	call	_sendEscapedUartData
  9005                           
  9006                           ;main.c: 1717: sendEscapedUartData(crc, (0));
  9007  00416E  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9008  004170  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9009  004172  5171               	movf	sendVSCPDriverCommandReply@crc& (0+255),w,b
  9010  004174  EC6C  F028         	call	_sendEscapedUartData
  9011  004178                     l875:
  9012                           
  9013                           ; BSR set to: 0
  9014  004178  A2AC               	btfss	4012,1,c	;volatile
  9015  00417A  D7FE               	goto	l875
  9016                           
  9017                           ; BSR set to: 0
  9018                           ;main.c: 1721: WriteUSART(0x10);
  9019  00417C  0E10               	movlw	16
  9020  00417E  ECC5  F02B         	call	_WriteUSART
  9021  004182                     l878:
  9022  004182  A2AC               	btfss	4012,1,c	;volatile
  9023  004184  D7FE               	goto	l878
  9024                           
  9025                           ;main.c: 1723: WriteUSART(0x03);
  9026  004186  0E03               	movlw	3
  9027  004188  EFC5  F02B         	goto	_WriteUSART
  9028  00418C                     __end_of_sendVSCPDriverCommandReply:
  9029                           	opt stack 0
  9030  00418C                     PL100:
  9031                           	opt stack 23
  9032  00418C  0100               	movlb	0	; () banked
  9033  00418E  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9034  004190  6F68               	movwf	(?_crc8+1)& (0+255),b
  9035  004192  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9036  004194  6F67               	movwf	?_crc8& (0+255),b
  9037  004196  6B69               	clrf	(?_crc8+2)& (0+255),b
  9038  004198  0C00               	retlw	0
  9039  00419A                     __end_ofPL100:
  9040                           	opt stack 0
  9041                           tblptru	equ	0xFF8
  9042                           tblptrh	equ	0xFF7
  9043                           tblptrl	equ	0xFF6
  9044                           tablat	equ	0xFF5
  9045                           prodh	equ	0xFF4
  9046                           prodl	equ	0xFF3
  9047                           intcon	equ	0xFF2
  9048                           indf0	equ	0xFEF
  9049                           postinc0	equ	0xFEE
  9050                           fsr0h	equ	0xFEA
  9051                           fsr0l	equ	0xFE9
  9052                           wreg	equ	0xFE8
  9053                           indf1	equ	0xFE7
  9054                           postinc1	equ	0xFE6
  9055                           postdec1	equ	0xFE5
  9056                           fsr1h	equ	0xFE2
  9057                           fsr1l	equ	0xFE1
  9058                           indf2	equ	0xFDF
  9059                           postinc2	equ	0xFDE
  9060                           postdec2	equ	0xFDD
  9061                           plusw2	equ	0xFDB
  9062                           fsr2h	equ	0xFDA
  9063                           fsr2l	equ	0xFD9
  9064                           status	equ	0xFD8
  9065                           
  9066 ;; *************** function _sendVSCPModeCapabilities *****************
  9067 ;; Defined at:
  9068 ;;		line 2047 in file "main.c"
  9069 ;; Parameters:    Size  Location     Type
  9070 ;;		None
  9071 ;; Auto vars:     Size  Location     Type
  9072 ;;  crc             1   15[BANK0 ] unsigned char 
  9073 ;; Return value:  Size  Location     Type
  9074 ;;                  1    wreg      enum E15660
  9075 ;; Registers used:
  9076 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9077 ;; Tracked objects:
  9078 ;;		On entry : F/1
  9079 ;;		On exit  : 0/0
  9080 ;;		Unchanged: 0/0
  9081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9082 ;;      Params:         0       0       0       0       0       0       0
  9083 ;;      Locals:         0       1       0       0       0       0       0
  9084 ;;      Temps:          0       0       0       0       0       0       0
  9085 ;;      Totals:         0       1       0       0       0       0       0
  9086 ;;Total ram usage:        1 bytes
  9087 ;; Hardware stack levels used:    1
  9088 ;; Hardware stack levels required when called:    6
  9089 ;; This function calls:
  9090 ;;		_WriteUSART
  9091 ;;		_sendEscapedUartData
  9092 ;;		_crc8
  9093 ;; This function is called by:
  9094 ;;		_doModeVscp
  9095 ;; This function uses a non-reentrant model
  9096 ;;
  9097                           
  9098                           	psect	text9
  9099  0044C4                     __ptext9:
  9100                           	opt stack 0
  9101  0044C4                     _sendVSCPModeCapabilities:
  9102                           	opt stack 23
  9103                           
  9104                           ; BSR set to: 1
  9105                           ;main.c: 2048: uint8_t crc = 0;
  9106                           
  9107                           ;incstack = 0
  9108                           ;incstack = 0
  9109  0044C4  0100               	movlb	0	; () banked
  9110  0044C6  6B6F               	clrf	sendVSCPModeCapabilities@crc& (0+255),b
  9111  0044C8                     l1000:
  9112  0044C8  A2AC               	btfss	4012,1,c	;volatile
  9113  0044CA  D7FE               	goto	l1000
  9114                           
  9115                           ;main.c: 2052: WriteUSART(0x10);
  9116  0044CC  0E10               	movlw	16
  9117  0044CE  ECC5  F02B         	call	_WriteUSART
  9118  0044D2                     l1003:
  9119  0044D2  A2AC               	btfss	4012,1,c	;volatile
  9120  0044D4  D7FE               	goto	l1003
  9121                           
  9122                           ;main.c: 2054: WriteUSART(0x02);
  9123  0044D6  0E02               	movlw	2
  9124  0044D8  ECC5  F02B         	call	_WriteUSART
  9125  0044DC                     l1006:
  9126  0044DC  A2AC               	btfss	4012,1,c	;volatile
  9127  0044DE  D7FE               	goto	l1006
  9128                           
  9129                           ;main.c: 2058: WriteUSART(9);
  9130  0044E0  0E09               	movlw	9
  9131  0044E2  ECC5  F02B         	call	_WriteUSART
  9132                           
  9133                           ;main.c: 2059: crc8(&crc, 9);
  9134  0044E6  0100               	movlb	0	; () banked
  9135  0044E8  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9136  0044EA  6F68               	movwf	(?_crc8+1)& (0+255),b
  9137  0044EC  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9138  0044EE  6F67               	movwf	?_crc8& (0+255),b
  9139  0044F0  0E09               	movlw	9
  9140  0044F2  6F69               	movwf	(?_crc8+2)& (0+255),b
  9141  0044F4  ECF2  F02A         	call	_crc8	;wreg free
  9142  0044F8                     l1009:
  9143  0044F8  A2AC               	btfss	4012,1,c	;volatile
  9144  0044FA  D7FE               	goto	l1009
  9145                           
  9146                           ;main.c: 2063: WriteUSART(0);
  9147  0044FC  0E00               	movlw	0
  9148  0044FE  ECC5  F02B         	call	_WriteUSART
  9149                           
  9150                           ;main.c: 2064: crc8(&crc, 0);
  9151  004502  0100               	movlb	0	; () banked
  9152  004504  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9153  004506  6F68               	movwf	(?_crc8+1)& (0+255),b
  9154  004508  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9155  00450A  6F67               	movwf	?_crc8& (0+255),b
  9156  00450C  0E00               	movlw	0
  9157  00450E  6B69               	clrf	(?_crc8+2)& (0+255),b
  9158  004510  ECF2  F02A         	call	_crc8	;wreg free
  9159                           
  9160                           ; BSR set to: 0
  9161                           ;main.c: 2067: sendEscapedUartData(sequencyno, &crc );
  9162  004514  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9163  004516  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9164  004518  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9165  00451A  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9166  00451C  51F3               	movf	_sequencyno& (0+255),w,b
  9167  00451E  EC6C  F028         	call	_sendEscapedUartData
  9168                           
  9169                           ; BSR set to: 0
  9170                           ;main.c: 2068: sequencyno++;
  9171  004522  2BF3               	incf	_sequencyno& (0+255),f,b
  9172                           
  9173                           ; BSR set to: 0
  9174                           ;main.c: 2071: sendEscapedUartData( 0, &crc );
  9175  004524  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9176  004526  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9177  004528  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9178  00452A  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9179  00452C  0E00               	movlw	0
  9180  00452E  EC6C  F028         	call	_sendEscapedUartData
  9181                           
  9182                           ; BSR set to: 0
  9183                           ;main.c: 2072: sendEscapedUartData( 2, &crc );
  9184  004532  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9185  004534  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9186  004536  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9187  004538  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9188  00453A  0E02               	movlw	2
  9189  00453C  EC6C  F028         	call	_sendEscapedUartData
  9190                           
  9191                           ; BSR set to: 0
  9192                           ;main.c: 2075: sendEscapedUartData( 1, &crc );
  9193  004540  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9194  004542  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9195  004544  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9196  004546  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9197  004548  0E01               	movlw	1
  9198  00454A  EC6C  F028         	call	_sendEscapedUartData
  9199                           
  9200                           ; BSR set to: 0
  9201                           ;main.c: 2076: sendEscapedUartData( 0, &crc );
  9202  00454E  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9203  004550  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9204  004552  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9205  004554  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9206  004556  0E00               	movlw	0
  9207  004558  EC6C  F028         	call	_sendEscapedUartData
  9208                           
  9209                           ; BSR set to: 0
  9210                           ;main.c: 2079: sendEscapedUartData(crc, (0));
  9211  00455C  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9212  00455E  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9213  004560  516F               	movf	sendVSCPModeCapabilities@crc& (0+255),w,b
  9214  004562  EC6C  F028         	call	_sendEscapedUartData
  9215  004566                     l1012:
  9216  004566  A2AC               	btfss	4012,1,c	;volatile
  9217  004568  D7FE               	goto	l1012
  9218                           
  9219                           ;main.c: 2083: WriteUSART(0x10);
  9220  00456A  0E10               	movlw	16
  9221  00456C  ECC5  F02B         	call	_WriteUSART
  9222  004570                     l1015:
  9223  004570  A2AC               	btfss	4012,1,c	;volatile
  9224  004572  D7FE               	goto	l1015
  9225                           
  9226                           ;main.c: 2085: WriteUSART(0x03);
  9227  004574  0E03               	movlw	3
  9228  004576  EFC5  F02B         	goto	_WriteUSART
  9229  00457A                     __end_of_sendVSCPModeCapabilities:
  9230                           	opt stack 0
  9231                           tblptru	equ	0xFF8
  9232                           tblptrh	equ	0xFF7
  9233                           tblptrl	equ	0xFF6
  9234                           tablat	equ	0xFF5
  9235                           prodh	equ	0xFF4
  9236                           prodl	equ	0xFF3
  9237                           intcon	equ	0xFF2
  9238                           indf0	equ	0xFEF
  9239                           postinc0	equ	0xFEE
  9240                           fsr0h	equ	0xFEA
  9241                           fsr0l	equ	0xFE9
  9242                           wreg	equ	0xFE8
  9243                           indf1	equ	0xFE7
  9244                           postinc1	equ	0xFE6
  9245                           postdec1	equ	0xFE5
  9246                           fsr1h	equ	0xFE2
  9247                           fsr1l	equ	0xFE1
  9248                           indf2	equ	0xFDF
  9249                           postinc2	equ	0xFDE
  9250                           postdec2	equ	0xFDD
  9251                           plusw2	equ	0xFDB
  9252                           fsr2h	equ	0xFDA
  9253                           fsr2l	equ	0xFD9
  9254                           status	equ	0xFD8
  9255                           
  9256 ;; *************** function _receiveVSCPModeMultiCanalMsg *****************
  9257 ;; Defined at:
  9258 ;;		line 2178 in file "main.c"
  9259 ;; Parameters:    Size  Location     Type
  9260 ;;		None
  9261 ;; Auto vars:     Size  Location     Type
  9262 ;;		None
  9263 ;; Return value:  Size  Location     Type
  9264 ;;                  1    wreg      enum E15660
  9265 ;; Registers used:
  9266 ;;		wreg
  9267 ;; Tracked objects:
  9268 ;;		On entry : F/1
  9269 ;;		On exit  : F/1
  9270 ;;		Unchanged: F/0
  9271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9272 ;;      Params:         0       0       0       0       0       0       0
  9273 ;;      Locals:         0       0       0       0       0       0       0
  9274 ;;      Temps:          0       0       0       0       0       0       0
  9275 ;;      Totals:         0       0       0       0       0       0       0
  9276 ;;Total ram usage:        0 bytes
  9277 ;; Hardware stack levels used:    1
  9278 ;; Hardware stack levels required when called:    3
  9279 ;; This function calls:
  9280 ;;		Nothing
  9281 ;; This function is called by:
  9282 ;;		_doModeVscp
  9283 ;; This function uses a non-reentrant model
  9284 ;;
  9285                           
  9286                           	psect	text10
  9287  0057DE                     __ptext10:
  9288                           	opt stack 0
  9289  0057DE                     _receiveVSCPModeMultiCanalMsg:
  9290                           	opt stack 26
  9291                           
  9292                           ; BSR set to: 1
  9293                           
  9294                           ; BSR set to: 1
  9295                           ;main.c: 2180: return 0;
  9296                           
  9297                           ;incstack = 0
  9298                           ;incstack = 0
  9299  0057DE  0C00               	retlw	0
  9300  0057E0                     __end_of_receiveVSCPModeMultiCanalMsg:
  9301                           	opt stack 0
  9302                           tblptru	equ	0xFF8
  9303                           tblptrh	equ	0xFF7
  9304                           tblptrl	equ	0xFF6
  9305                           tablat	equ	0xFF5
  9306                           prodh	equ	0xFF4
  9307                           prodl	equ	0xFF3
  9308                           intcon	equ	0xFF2
  9309                           indf0	equ	0xFEF
  9310                           postinc0	equ	0xFEE
  9311                           fsr0h	equ	0xFEA
  9312                           fsr0l	equ	0xFE9
  9313                           wreg	equ	0xFE8
  9314                           indf1	equ	0xFE7
  9315                           postinc1	equ	0xFE6
  9316                           postdec1	equ	0xFE5
  9317                           fsr1h	equ	0xFE2
  9318                           fsr1l	equ	0xFE1
  9319                           indf2	equ	0xFDF
  9320                           postinc2	equ	0xFDE
  9321                           postdec2	equ	0xFDD
  9322                           plusw2	equ	0xFDB
  9323                           fsr2h	equ	0xFDA
  9324                           fsr2l	equ	0xFD9
  9325                           status	equ	0xFD8
  9326                           
  9327 ;; *************** function _sendVSCPDriverNack *****************
  9328 ;; Defined at:
  9329 ;;		line 1633 in file "main.c"
  9330 ;; Parameters:    Size  Location     Type
  9331 ;;		None
  9332 ;; Auto vars:     Size  Location     Type
  9333 ;;  crc             1   15[BANK0 ] unsigned char 
  9334 ;; Return value:  Size  Location     Type
  9335 ;;		None               void
  9336 ;; Registers used:
  9337 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9338 ;; Tracked objects:
  9339 ;;		On entry : E/0
  9340 ;;		On exit  : 0/0
  9341 ;;		Unchanged: 0/0
  9342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9343 ;;      Params:         0       0       0       0       0       0       0
  9344 ;;      Locals:         0       1       0       0       0       0       0
  9345 ;;      Temps:          0       0       0       0       0       0       0
  9346 ;;      Totals:         0       1       0       0       0       0       0
  9347 ;;Total ram usage:        1 bytes
  9348 ;; Hardware stack levels used:    1
  9349 ;; Hardware stack levels required when called:    6
  9350 ;; This function calls:
  9351 ;;		_WriteUSART
  9352 ;;		_sendEscapedUartData
  9353 ;;		_crc8
  9354 ;; This function is called by:
  9355 ;;		_doModeVscp
  9356 ;; This function uses a non-reentrant model
  9357 ;;
  9358                           
  9359                           	psect	text11
  9360  004630                     __ptext11:
  9361                           	opt stack 0
  9362  004630                     _sendVSCPDriverNack:
  9363                           	opt stack 23
  9364                           
  9365                           ;main.c: 1634: uint8_t crc = 0;
  9366                           
  9367                           ; BSR set to: 1
  9368                           ;incstack = 0
  9369                           ;incstack = 0
  9370  004630  0100               	movlb	0	; () banked
  9371  004632  6B6F               	clrf	sendVSCPDriverNack@crc& (0+255),b
  9372  004634                     l824:
  9373  004634  A2AC               	btfss	4012,1,c	;volatile
  9374  004636  D7FE               	goto	l824
  9375                           
  9376                           ;main.c: 1638: WriteUSART(0x10);
  9377  004638  0E10               	movlw	16
  9378  00463A  ECC5  F02B         	call	_WriteUSART
  9379  00463E                     l827:
  9380  00463E  A2AC               	btfss	4012,1,c	;volatile
  9381  004640  D7FE               	goto	l827
  9382                           
  9383                           ;main.c: 1640: WriteUSART(0x02);
  9384  004642  0E02               	movlw	2
  9385  004644  ECC5  F02B         	call	_WriteUSART
  9386  004648                     l830:
  9387  004648  A2AC               	btfss	4012,1,c	;volatile
  9388  00464A  D7FE               	goto	l830
  9389                           
  9390                           ;main.c: 1644: WriteUSART(252);
  9391  00464C  0EFC               	movlw	252
  9392  00464E  ECC5  F02B         	call	_WriteUSART
  9393                           
  9394                           ;main.c: 1645: crc8(&crc, 252);
  9395  004652  0100               	movlb	0	; () banked
  9396  004654  0E00               	movlw	high sendVSCPDriverNack@crc
  9397  004656  6F68               	movwf	(?_crc8+1)& (0+255),b
  9398  004658  0E6F               	movlw	low sendVSCPDriverNack@crc
  9399  00465A  6F67               	movwf	?_crc8& (0+255),b
  9400  00465C  0EFC               	movlw	252
  9401  00465E  6F69               	movwf	(?_crc8+2)& (0+255),b
  9402  004660  ECF2  F02A         	call	_crc8	;wreg free
  9403  004664                     l833:
  9404  004664  A2AC               	btfss	4012,1,c	;volatile
  9405  004666  D7FE               	goto	l833
  9406                           
  9407                           ;main.c: 1649: WriteUSART(0);
  9408  004668  0E00               	movlw	0
  9409  00466A  ECC5  F02B         	call	_WriteUSART
  9410                           
  9411                           ;main.c: 1650: crc8(&crc, 0);
  9412  00466E  D829               	call	PL48	;call to abstracted procedure
  9413  004670  ECF2  F02A         	call	_crc8	;wreg free
  9414                           
  9415                           ; BSR set to: 0
  9416                           ;main.c: 1653: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9417  004674  0E00               	movlw	high sendVSCPDriverNack@crc
  9418  004676  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9419  004678  0E6F               	movlw	low sendVSCPDriverNack@crc
  9420  00467A  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9421  00467C  0101               	movlb	1	; () banked
  9422  00467E  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  9423  004680  EC6C  F028         	call	_sendEscapedUartData
  9424  004684                     l836:
  9425  004684  A2AC               	btfss	4012,1,c	;volatile
  9426  004686  D7FE               	goto	l836
  9427                           
  9428                           ;main.c: 1657: WriteUSART(0);
  9429  004688  0E00               	movlw	0
  9430  00468A  ECC5  F02B         	call	_WriteUSART
  9431                           
  9432                           ;main.c: 1658: crc8(&crc, 0);
  9433  00468E  D819               	call	PL48	;call to abstracted procedure
  9434  004690  ECF2  F02A         	call	_crc8	;wreg free
  9435  004694                     l839:
  9436  004694  A2AC               	btfss	4012,1,c	;volatile
  9437  004696  D7FE               	goto	l839
  9438                           
  9439                           ;main.c: 1660: WriteUSART(0);
  9440  004698  0E00               	movlw	0
  9441  00469A  ECC5  F02B         	call	_WriteUSART
  9442                           
  9443                           ;main.c: 1661: crc8(&crc, 0);
  9444  00469E  D811               	call	PL48	;call to abstracted procedure
  9445  0046A0  ECF2  F02A         	call	_crc8	;wreg free
  9446                           
  9447                           ; BSR set to: 0
  9448                           ;main.c: 1664: sendEscapedUartData(crc, (0));
  9449  0046A4  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9450  0046A6  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9451  0046A8  516F               	movf	sendVSCPDriverNack@crc& (0+255),w,b
  9452  0046AA  EC6C  F028         	call	_sendEscapedUartData
  9453  0046AE                     l842:
  9454  0046AE  A2AC               	btfss	4012,1,c	;volatile
  9455  0046B0  D7FE               	goto	l842
  9456                           
  9457                           ;main.c: 1668: WriteUSART(0x10);
  9458  0046B2  0E10               	movlw	16
  9459  0046B4  ECC5  F02B         	call	_WriteUSART
  9460  0046B8                     l845:
  9461  0046B8  A2AC               	btfss	4012,1,c	;volatile
  9462  0046BA  D7FE               	goto	l845
  9463                           
  9464                           ;main.c: 1670: WriteUSART(0x03);
  9465  0046BC  0E03               	movlw	3
  9466  0046BE  EFC5  F02B         	goto	_WriteUSART
  9467  0046C2                     __end_of_sendVSCPDriverNack:
  9468                           	opt stack 0
  9469  0046C2                     PL48:
  9470                           	opt stack 23
  9471  0046C2  0100               	movlb	0	; () banked
  9472  0046C4  0E00               	movlw	high sendVSCPDriverNack@crc
  9473  0046C6  6F68               	movwf	(?_crc8+1)& (0+255),b
  9474  0046C8  0E6F               	movlw	low sendVSCPDriverNack@crc
  9475  0046CA  6F67               	movwf	?_crc8& (0+255),b
  9476  0046CC  6B69               	clrf	(?_crc8+2)& (0+255),b
  9477  0046CE  0C00               	retlw	0
  9478  0046D0                     __end_ofPL48:
  9479                           	opt stack 0
  9480                           tblptru	equ	0xFF8
  9481                           tblptrh	equ	0xFF7
  9482                           tblptrl	equ	0xFF6
  9483                           tablat	equ	0xFF5
  9484                           prodh	equ	0xFF4
  9485                           prodl	equ	0xFF3
  9486                           intcon	equ	0xFF2
  9487                           indf0	equ	0xFEF
  9488                           postinc0	equ	0xFEE
  9489                           fsr0h	equ	0xFEA
  9490                           fsr0l	equ	0xFE9
  9491                           wreg	equ	0xFE8
  9492                           indf1	equ	0xFE7
  9493                           postinc1	equ	0xFE6
  9494                           postdec1	equ	0xFE5
  9495                           fsr1h	equ	0xFE2
  9496                           fsr1l	equ	0xFE1
  9497                           indf2	equ	0xFDF
  9498                           postinc2	equ	0xFDE
  9499                           postdec2	equ	0xFDD
  9500                           plusw2	equ	0xFDB
  9501                           fsr2h	equ	0xFDA
  9502                           fsr2l	equ	0xFD9
  9503                           status	equ	0xFD8
  9504                           
  9505 ;; *************** function _receiveVSCPModeCanalMsg *****************
  9506 ;; Defined at:
  9507 ;;		line 2157 in file "main.c"
  9508 ;; Parameters:    Size  Location     Type
  9509 ;;		None
  9510 ;; Auto vars:     Size  Location     Type
  9511 ;;  data            8   74[BANK0 ] unsigned char [8]
  9512 ;;  id              4   82[BANK0 ] unsigned long 
  9513 ;;  dlc             1   86[BANK0 ] unsigned char 
  9514 ;; Return value:  Size  Location     Type
  9515 ;;                  1    wreg      enum E15660
  9516 ;; Registers used:
  9517 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9518 ;; Tracked objects:
  9519 ;;		On entry : F/1
  9520 ;;		On exit  : F/0
  9521 ;;		Unchanged: 0/0
  9522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9523 ;;      Params:         0       0       0       0       0       0       0
  9524 ;;      Locals:         0      13       0       0       0       0       0
  9525 ;;      Temps:          0      20       0       0       0       0       0
  9526 ;;      Totals:         0      33       0       0       0       0       0
  9527 ;;Total ram usage:       33 bytes
  9528 ;; Hardware stack levels used:    1
  9529 ;; Hardware stack levels required when called:    6
  9530 ;; This function calls:
  9531 ;;		_memcpy
  9532 ;;		_sendCANFrame
  9533 ;; This function is called by:
  9534 ;;		_doModeVscp
  9535 ;; This function uses a non-reentrant model
  9536 ;;
  9537                           
  9538                           	psect	text12
  9539  003FEC                     __ptext12:
  9540                           	opt stack 0
  9541  003FEC                     _receiveVSCPModeCanalMsg:
  9542                           	opt stack 23
  9543                           
  9544                           ; BSR set to: 1
  9545                           ;main.c: 2158: uint32_t id;
  9546                           ;main.c: 2159: uint8_t dlc;
  9547                           ;main.c: 2160: uint8_t data[8];
  9548                           ;main.c: 2162: id = ((uint32_t) cmdbuf[5] << 26) |
  9549                           ;main.c: 2163: ((uint32_t) cmdbuf[5 + 1] << 16) |
  9550                           ;main.c: 2164: ((uint32_t) cmdbuf[5 + 2] << 8) |
  9551                           ;main.c: 2165: cmdbuf[5 + 3];
  9552                           
  9553                           ;incstack = 0
  9554                           ;incstack = 0
  9555  003FEC  C10B  F096         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
  9556  003FF0  0100               	movlb	0	; () banked
  9557  003FF2  6B97               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9558  003FF4  6B98               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
  9559  003FF6  6B99               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
  9560  003FF8  C098  F099         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
  9561  003FFC  C097  F098         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
  9562  004000  C096  F097         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
  9563  004004  6B96               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
  9564  004006  C10A  F09A         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
  9565  00400A  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9566  00400C  6B9C               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
  9567  00400E  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
  9568  004010  C09B  F09D         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
  9569  004014  C09A  F09C         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
  9570  004018  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9571  00401A  6B9A               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
  9572  00401C  C109  F09E         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
  9573  004020  6B9F               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
  9574  004022  6BA0               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
  9575  004024  6BA1               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
  9576  004026  0E1A               	movlw	26
  9577  004028                     u15765:
  9578  004028  90D8               	bcf	status,0,c
  9579  00402A  379E               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
  9580  00402C  379F               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
  9581  00402E  37A0               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
  9582  004030  37A1               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
  9583  004032  2EE8               	decfsz	wreg,f,c
  9584  004034  D7F9               	goto	u15765
  9585  004036  519A               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
  9586  004038  119E               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
  9587  00403A  6FA2               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
  9588  00403C  519B               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
  9589  00403E  119F               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
  9590  004040  6FA3               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
  9591  004042  519C               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
  9592  004044  11A0               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
  9593  004046  6FA4               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
  9594  004048  519D               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
  9595  00404A  11A1               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
  9596  00404C  6FA5               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
  9597  00404E  5196               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
  9598  004050  11A2               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
  9599  004052  6FA6               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
  9600  004054  5197               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
  9601  004056  11A3               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
  9602  004058  6FA7               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
  9603  00405A  5198               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
  9604  00405C  11A4               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
  9605  00405E  6FA8               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
  9606  004060  5199               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
  9607  004062  11A5               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
  9608  004064  6FA9               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
  9609  004066  0101               	movlb	1	; () banked
  9610  004068  510C               	movf	(_cmdbuf+8)& (0+255),w,b
  9611  00406A  0100               	movlb	0	; () banked
  9612  00406C  11A6               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
  9613  00406E  6FB2               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
  9614  004070  51A7               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
  9615  004072  6FB3               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
  9616  004074  51A8               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
  9617  004076  6FB4               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
  9618  004078  51A9               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
  9619  00407A  6FB5               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
  9620                           
  9621                           ;main.c: 2166: dlc = cmdbuf[4] - 4;
  9622  00407C  0101               	movlb	1	; () banked
  9623  00407E  5108               	movf	(_cmdbuf+4)& (0+255),w,b
  9624  004080  0FFC               	addlw	252
  9625  004082  0100               	movlb	0	; () banked
  9626  004084  6FB6               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9627                           
  9628                           ; BSR set to: 0
  9629                           ;main.c: 2167: memcpy(data, cmdbuf + 5 + 4, dlc);
  9630  004086  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9631  004088  6F61               	movwf	(?_memcpy+1)& (0+255),b
  9632  00408A  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9633  00408C  6F60               	movwf	?_memcpy& (0+255),b
  9634  00408E  0E0D               	movlw	low (_cmdbuf+9)
  9635  004090  6F96               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
  9636  004092  0E01               	movlw	high (_cmdbuf+9)
  9637  004094  6F97               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9638  004096  C096  F062         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
  9639  00409A  C097  F063         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
  9640  00409E  C0B6  F064         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
  9641  0040A2  6B65               	clrf	(?_memcpy+5)& (0+255),b
  9642  0040A4  ECFC  F029         	call	_memcpy	;wreg free
  9643                           
  9644                           ; BSR set to: 0
  9645                           ;main.c: 2169: return sendCANFrame(id, dlc, data);
  9646  0040A8  C0B2  F08F         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
  9647  0040AC  C0B3  F090         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
  9648  0040B0  C0B4  F091         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
  9649  0040B4  C0B5  F092         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
  9650  0040B8  C0B6  F093         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
  9651  0040BC  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9652  0040BE  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  9653  0040C0  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9654  0040C2  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  9655  0040C4  EFBA  F02A         	goto	_sendCANFrame	;wreg free
  9656  0040C8                     __end_of_receiveVSCPModeCanalMsg:
  9657                           	opt stack 0
  9658                           tblptru	equ	0xFF8
  9659                           tblptrh	equ	0xFF7
  9660                           tblptrl	equ	0xFF6
  9661                           tablat	equ	0xFF5
  9662                           prodh	equ	0xFF4
  9663                           prodl	equ	0xFF3
  9664                           intcon	equ	0xFF2
  9665                           indf0	equ	0xFEF
  9666                           postinc0	equ	0xFEE
  9667                           fsr0h	equ	0xFEA
  9668                           fsr0l	equ	0xFE9
  9669                           wreg	equ	0xFE8
  9670                           indf1	equ	0xFE7
  9671                           postinc1	equ	0xFE6
  9672                           postdec1	equ	0xFE5
  9673                           fsr1h	equ	0xFE2
  9674                           fsr1l	equ	0xFE1
  9675                           indf2	equ	0xFDF
  9676                           postinc2	equ	0xFDE
  9677                           postdec2	equ	0xFDD
  9678                           plusw2	equ	0xFDB
  9679                           fsr2h	equ	0xFDA
  9680                           fsr2l	equ	0xFD9
  9681                           status	equ	0xFD8
  9682                           
  9683 ;; *************** function _memcpy *****************
  9684 ;; Defined at:
  9685 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
  9686 ;; Parameters:    Size  Location     Type
  9687 ;;  d1              2    0[BANK0 ] PTR void 
  9688 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9689 ;;  s1              2    2[BANK0 ] PTR const void 
  9690 ;;		 -> vscpData(8), cmdbuf(80), 
  9691 ;;  n               2    4[BANK0 ] unsigned int 
  9692 ;; Auto vars:     Size  Location     Type
  9693 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  9694 ;;		 -> vscpData(8), cmdbuf(80), 
  9695 ;;  d               2    6[BANK0 ] PTR unsigned char 
  9696 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9697 ;; Return value:  Size  Location     Type
  9698 ;;                  2    0[BANK0 ] PTR void 
  9699 ;; Registers used:
  9700 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9701 ;; Tracked objects:
  9702 ;;		On entry : F/0
  9703 ;;		On exit  : F/0
  9704 ;;		Unchanged: 0/0
  9705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9706 ;;      Params:         0       6       0       0       0       0       0
  9707 ;;      Locals:         0       4       0       0       0       0       0
  9708 ;;      Temps:          0       0       0       0       0       0       0
  9709 ;;      Totals:         0      10       0       0       0       0       0
  9710 ;;Total ram usage:       10 bytes
  9711 ;; Hardware stack levels used:    1
  9712 ;; Hardware stack levels required when called:    3
  9713 ;; This function calls:
  9714 ;;		Nothing
  9715 ;; This function is called by:
  9716 ;;		_doModeSLCAN
  9717 ;;		_receiveVSCPModeCanalMsg
  9718 ;; This function uses a non-reentrant model
  9719 ;;
  9720                           
  9721                           	psect	text13
  9722  0053F8                     __ptext13:
  9723                           	opt stack 0
  9724  0053F8                     _memcpy:
  9725                           	opt stack 26
  9726                           
  9727                           ; BSR set to: 0
  9728                           
  9729                           ; BSR set to: 0
  9730                           ;incstack = 0
  9731                           ;incstack = 0
  9732  0053F8  C062  F068         	movff	memcpy@s1,memcpy@s
  9733  0053FC  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
  9734  005400  C060  F066         	movff	memcpy@d1,memcpy@d
  9735  005404  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
  9736  005408  D00E               	goto	l12527
  9737  00540A                     l12521:
  9738                           
  9739                           ; BSR set to: 0
  9740  00540A  C068  FFD9         	movff	memcpy@s,fsr2l
  9741  00540E  C069  FFDA         	movff	memcpy@s+1,fsr2h
  9742  005412  C066  FFE1         	movff	memcpy@d,fsr1l
  9743  005416  C067  FFE2         	movff	memcpy@d+1,fsr1h
  9744  00541A  CFDF FFE7          	movff	indf2,indf1
  9745                           
  9746                           ; BSR set to: 0
  9747  00541E  4B68               	infsnz	memcpy@s& (0+255),f,b
  9748  005420  2B69               	incf	(memcpy@s+1)& (0+255),f,b
  9749                           
  9750                           ; BSR set to: 0
  9751  005422  4B66               	infsnz	memcpy@d& (0+255),f,b
  9752  005424  2B67               	incf	(memcpy@d+1)& (0+255),f,b
  9753  005426                     l12527:
  9754                           
  9755                           ; BSR set to: 0
  9756  005426  0764               	decf	memcpy@n& (0+255),f,b
  9757  005428  A0D8               	btfss	status,0,c
  9758  00542A  0765               	decf	(memcpy@n+1)& (0+255),f,b
  9759  00542C  0100               	movlb	0	; () banked
  9760  00542E  2964               	incf	memcpy@n& (0+255),w,b
  9761  005430  B4D8               	btfsc	status,2,c
  9762  005432  2965               	incf	(memcpy@n+1)& (0+255),w,b
  9763  005434  B4D8               	btfsc	status,2,c
  9764                           
  9765                           ; BSR set to: 0
  9766  005436  0012               	return	
  9767  005438  D7E8               	goto	l12521
  9768  00543A                     __end_of_memcpy:
  9769                           	opt stack 0
  9770                           tblptru	equ	0xFF8
  9771                           tblptrh	equ	0xFF7
  9772                           tblptrl	equ	0xFF6
  9773                           tablat	equ	0xFF5
  9774                           prodh	equ	0xFF4
  9775                           prodl	equ	0xFF3
  9776                           intcon	equ	0xFF2
  9777                           indf0	equ	0xFEF
  9778                           postinc0	equ	0xFEE
  9779                           fsr0h	equ	0xFEA
  9780                           fsr0l	equ	0xFE9
  9781                           wreg	equ	0xFE8
  9782                           indf1	equ	0xFE7
  9783                           postinc1	equ	0xFE6
  9784                           postdec1	equ	0xFE5
  9785                           fsr1h	equ	0xFE2
  9786                           fsr1l	equ	0xFE1
  9787                           indf2	equ	0xFDF
  9788                           postinc2	equ	0xFDE
  9789                           postdec2	equ	0xFDD
  9790                           plusw2	equ	0xFDB
  9791                           fsr2h	equ	0xFDA
  9792                           fsr2l	equ	0xFD9
  9793                           status	equ	0xFD8
  9794                           
  9795 ;; *************** function _sendVSCPDriverAck *****************
  9796 ;; Defined at:
  9797 ;;		line 1589 in file "main.c"
  9798 ;; Parameters:    Size  Location     Type
  9799 ;;		None
  9800 ;; Auto vars:     Size  Location     Type
  9801 ;;  crc             1   15[BANK0 ] unsigned char 
  9802 ;; Return value:  Size  Location     Type
  9803 ;;		None               void
  9804 ;; Registers used:
  9805 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9806 ;; Tracked objects:
  9807 ;;		On entry : E/1
  9808 ;;		On exit  : 0/0
  9809 ;;		Unchanged: 0/0
  9810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9811 ;;      Params:         0       0       0       0       0       0       0
  9812 ;;      Locals:         0       1       0       0       0       0       0
  9813 ;;      Temps:          0       0       0       0       0       0       0
  9814 ;;      Totals:         0       1       0       0       0       0       0
  9815 ;;Total ram usage:        1 bytes
  9816 ;; Hardware stack levels used:    1
  9817 ;; Hardware stack levels required when called:    6
  9818 ;; This function calls:
  9819 ;;		_WriteUSART
  9820 ;;		_sendEscapedUartData
  9821 ;;		_crc8
  9822 ;; This function is called by:
  9823 ;;		_doModeVscp
  9824 ;; This function uses a non-reentrant model
  9825 ;;
  9826                           
  9827                           	psect	text14
  9828  0046D0                     __ptext14:
  9829                           	opt stack 0
  9830  0046D0                     _sendVSCPDriverAck:
  9831                           	opt stack 23
  9832                           
  9833                           ;main.c: 1590: uint8_t crc = 0;
  9834                           
  9835                           ; BSR set to: 0
  9836                           ;incstack = 0
  9837                           ;incstack = 0
  9838  0046D0  0100               	movlb	0	; () banked
  9839  0046D2  6B6F               	clrf	sendVSCPDriverAck@crc& (0+255),b
  9840  0046D4                     l797:
  9841  0046D4  A2AC               	btfss	4012,1,c	;volatile
  9842  0046D6  D7FE               	goto	l797
  9843                           
  9844                           ;main.c: 1594: WriteUSART(0x10);
  9845  0046D8  0E10               	movlw	16
  9846  0046DA  ECC5  F02B         	call	_WriteUSART
  9847  0046DE                     l800:
  9848  0046DE  A2AC               	btfss	4012,1,c	;volatile
  9849  0046E0  D7FE               	goto	l800
  9850                           
  9851                           ;main.c: 1596: WriteUSART(0x02);
  9852  0046E2  0E02               	movlw	2
  9853  0046E4  ECC5  F02B         	call	_WriteUSART
  9854  0046E8                     l803:
  9855  0046E8  A2AC               	btfss	4012,1,c	;volatile
  9856  0046EA  D7FE               	goto	l803
  9857                           
  9858                           ;main.c: 1600: WriteUSART(251);
  9859  0046EC  0EFB               	movlw	251
  9860  0046EE  ECC5  F02B         	call	_WriteUSART
  9861                           
  9862                           ;main.c: 1601: crc8(&crc, 251);
  9863  0046F2  0100               	movlb	0	; () banked
  9864  0046F4  0E00               	movlw	high sendVSCPDriverAck@crc
  9865  0046F6  6F68               	movwf	(?_crc8+1)& (0+255),b
  9866  0046F8  0E6F               	movlw	low sendVSCPDriverAck@crc
  9867  0046FA  6F67               	movwf	?_crc8& (0+255),b
  9868  0046FC  0EFB               	movlw	251
  9869  0046FE  6F69               	movwf	(?_crc8+2)& (0+255),b
  9870  004700  ECF2  F02A         	call	_crc8	;wreg free
  9871  004704                     l806:
  9872  004704  A2AC               	btfss	4012,1,c	;volatile
  9873  004706  D7FE               	goto	l806
  9874                           
  9875                           ;main.c: 1605: WriteUSART(0);
  9876  004708  0E00               	movlw	0
  9877  00470A  ECC5  F02B         	call	_WriteUSART
  9878                           
  9879                           ;main.c: 1606: crc8(&crc, 0);
  9880  00470E  D829               	call	PL50	;call to abstracted procedure
  9881  004710  ECF2  F02A         	call	_crc8	;wreg free
  9882                           
  9883                           ; BSR set to: 0
  9884                           ;main.c: 1609: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9885  004714  0E00               	movlw	high sendVSCPDriverAck@crc
  9886  004716  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9887  004718  0E6F               	movlw	low sendVSCPDriverAck@crc
  9888  00471A  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9889  00471C  0101               	movlb	1	; () banked
  9890  00471E  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  9891  004720  EC6C  F028         	call	_sendEscapedUartData
  9892  004724                     l809:
  9893  004724  A2AC               	btfss	4012,1,c	;volatile
  9894  004726  D7FE               	goto	l809
  9895                           
  9896                           ;main.c: 1613: WriteUSART(0);
  9897  004728  0E00               	movlw	0
  9898  00472A  ECC5  F02B         	call	_WriteUSART
  9899                           
  9900                           ;main.c: 1614: crc8(&crc, 0);
  9901  00472E  D819               	call	PL50	;call to abstracted procedure
  9902  004730  ECF2  F02A         	call	_crc8	;wreg free
  9903  004734                     l812:
  9904  004734  A2AC               	btfss	4012,1,c	;volatile
  9905  004736  D7FE               	goto	l812
  9906                           
  9907                           ;main.c: 1616: WriteUSART(0);
  9908  004738  0E00               	movlw	0
  9909  00473A  ECC5  F02B         	call	_WriteUSART
  9910                           
  9911                           ;main.c: 1617: crc8(&crc, 0);
  9912  00473E  D811               	call	PL50	;call to abstracted procedure
  9913  004740  ECF2  F02A         	call	_crc8	;wreg free
  9914                           
  9915                           ; BSR set to: 0
  9916                           ;main.c: 1620: sendEscapedUartData(crc, (0));
  9917  004744  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9918  004746  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9919  004748  516F               	movf	sendVSCPDriverAck@crc& (0+255),w,b
  9920  00474A  EC6C  F028         	call	_sendEscapedUartData
  9921  00474E                     l815:
  9922  00474E  A2AC               	btfss	4012,1,c	;volatile
  9923  004750  D7FE               	goto	l815
  9924                           
  9925                           ;main.c: 1624: WriteUSART(0x10);
  9926  004752  0E10               	movlw	16
  9927  004754  ECC5  F02B         	call	_WriteUSART
  9928  004758                     l818:
  9929  004758  A2AC               	btfss	4012,1,c	;volatile
  9930  00475A  D7FE               	goto	l818
  9931                           
  9932                           ;main.c: 1626: WriteUSART(0x03);
  9933  00475C  0E03               	movlw	3
  9934  00475E  EFC5  F02B         	goto	_WriteUSART
  9935  004762                     __end_of_sendVSCPDriverAck:
  9936                           	opt stack 0
  9937  004762                     PL50:
  9938                           	opt stack 23
  9939  004762  0100               	movlb	0	; () banked
  9940  004764  0E00               	movlw	high sendVSCPDriverAck@crc
  9941  004766  6F68               	movwf	(?_crc8+1)& (0+255),b
  9942  004768  0E6F               	movlw	low sendVSCPDriverAck@crc
  9943  00476A  6F67               	movwf	?_crc8& (0+255),b
  9944  00476C  6B69               	clrf	(?_crc8+2)& (0+255),b
  9945  00476E  0C00               	retlw	0
  9946  004770                     __end_ofPL50:
  9947                           	opt stack 0
  9948                           tblptru	equ	0xFF8
  9949                           tblptrh	equ	0xFF7
  9950                           tblptrl	equ	0xFF6
  9951                           tablat	equ	0xFF5
  9952                           prodh	equ	0xFF4
  9953                           prodl	equ	0xFF3
  9954                           intcon	equ	0xFF2
  9955                           indf0	equ	0xFEF
  9956                           postinc0	equ	0xFEE
  9957                           fsr0h	equ	0xFEA
  9958                           fsr0l	equ	0xFE9
  9959                           wreg	equ	0xFE8
  9960                           indf1	equ	0xFE7
  9961                           postinc1	equ	0xFE6
  9962                           postdec1	equ	0xFE5
  9963                           fsr1h	equ	0xFE2
  9964                           fsr1l	equ	0xFE1
  9965                           indf2	equ	0xFDF
  9966                           postinc2	equ	0xFDE
  9967                           postdec2	equ	0xFDD
  9968                           plusw2	equ	0xFDB
  9969                           fsr2h	equ	0xFDA
  9970                           fsr2l	equ	0xFD9
  9971                           status	equ	0xFD8
  9972                           
  9973 ;; *************** function _sendVSCPDriverErrorFrame *****************
  9974 ;; Defined at:
  9975 ;;		line 1541 in file "main.c"
  9976 ;; Parameters:    Size  Location     Type
  9977 ;;  errorcode       1    wreg     unsigned char 
  9978 ;; Auto vars:     Size  Location     Type
  9979 ;;  errorcode       1   15[BANK0 ] unsigned char 
  9980 ;;  crc             1   16[BANK0 ] unsigned char 
  9981 ;; Return value:  Size  Location     Type
  9982 ;;		None               void
  9983 ;; Registers used:
  9984 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9985 ;; Tracked objects:
  9986 ;;		On entry : E/0
  9987 ;;		On exit  : 0/0
  9988 ;;		Unchanged: 0/0
  9989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9990 ;;      Params:         0       0       0       0       0       0       0
  9991 ;;      Locals:         0       2       0       0       0       0       0
  9992 ;;      Temps:          0       0       0       0       0       0       0
  9993 ;;      Totals:         0       2       0       0       0       0       0
  9994 ;;Total ram usage:        2 bytes
  9995 ;; Hardware stack levels used:    1
  9996 ;; Hardware stack levels required when called:    6
  9997 ;; This function calls:
  9998 ;;		_WriteUSART
  9999 ;;		_sendEscapedUartData
 10000 ;;		_crc8
 10001 ;; This function is called by:
 10002 ;;		_doModeVscp
 10003 ;; This function uses a non-reentrant model
 10004 ;;
 10005                           
 10006                           	psect	text15
 10007  004406                     __ptext15:
 10008                           	opt stack 0
 10009  004406                     _sendVSCPDriverErrorFrame:
 10010                           	opt stack 23
 10011                           
 10012                           ;incstack = 0
 10013                           ;incstack = 0
 10014                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
 10015  004406  CFE8 F06F          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
 10016                           
 10017                           ;main.c: 1542: uint8_t crc = 0;
 10018  00440A  0100               	movlb	0	; () banked
 10019  00440C  6B70               	clrf	sendVSCPDriverErrorFrame@crc& (0+255),b
 10020  00440E                     l770:
 10021  00440E  A2AC               	btfss	4012,1,c	;volatile
 10022  004410  D7FE               	goto	l770
 10023                           
 10024                           ;main.c: 1546: WriteUSART(0x10);
 10025  004412  0E10               	movlw	16
 10026  004414  ECC5  F02B         	call	_WriteUSART
 10027  004418                     l773:
 10028  004418  A2AC               	btfss	4012,1,c	;volatile
 10029  00441A  D7FE               	goto	l773
 10030                           
 10031                           ;main.c: 1548: WriteUSART(0x02);
 10032  00441C  0E02               	movlw	2
 10033  00441E  ECC5  F02B         	call	_WriteUSART
 10034  004422                     l776:
 10035  004422  A2AC               	btfss	4012,1,c	;volatile
 10036  004424  D7FE               	goto	l776
 10037                           
 10038                           ;main.c: 1552: WriteUSART(253);
 10039  004426  0EFD               	movlw	253
 10040  004428  ECC5  F02B         	call	_WriteUSART
 10041                           
 10042                           ;main.c: 1553: crc8(&crc, 253);
 10043  00442C  0100               	movlb	0	; () banked
 10044  00442E  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10045  004430  6F68               	movwf	(?_crc8+1)& (0+255),b
 10046  004432  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10047  004434  6F67               	movwf	?_crc8& (0+255),b
 10048  004436  0EFD               	movlw	253
 10049  004438  6F69               	movwf	(?_crc8+2)& (0+255),b
 10050  00443A  ECF2  F02A         	call	_crc8	;wreg free
 10051  00443E                     l779:
 10052  00443E  A2AC               	btfss	4012,1,c	;volatile
 10053  004440  D7FE               	goto	l779
 10054                           
 10055                           ;main.c: 1557: WriteUSART(0);
 10056  004442  0E00               	movlw	0
 10057  004444  ECC5  F02B         	call	_WriteUSART
 10058                           
 10059                           ;main.c: 1558: crc8(&crc, 0);
 10060  004448  D836               	call	PL98	;call to abstracted procedure
 10061  00444A  ECF2  F02A         	call	_crc8	;wreg free
 10062                           
 10063                           ; BSR set to: 0
 10064                           ;main.c: 1561: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10065  00444E  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10066  004450  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10067  004452  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10068  004454  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10069  004456  0101               	movlb	1	; () banked
 10070  004458  5106               	movf	(_cmdbuf+2)& (0+255),w,b
 10071  00445A  EC6C  F028         	call	_sendEscapedUartData
 10072  00445E                     l782:
 10073  00445E  A2AC               	btfss	4012,1,c	;volatile
 10074  004460  D7FE               	goto	l782
 10075                           
 10076                           ;main.c: 1565: WriteUSART(0);
 10077  004462  0E00               	movlw	0
 10078  004464  ECC5  F02B         	call	_WriteUSART
 10079                           
 10080                           ;main.c: 1566: crc8(&crc, 0);
 10081  004468  D826               	call	PL98	;call to abstracted procedure
 10082  00446A  ECF2  F02A         	call	_crc8	;wreg free
 10083  00446E                     l785:
 10084  00446E  A2AC               	btfss	4012,1,c	;volatile
 10085  004470  D7FE               	goto	l785
 10086                           
 10087                           ;main.c: 1568: WriteUSART(1);
 10088  004472  0E01               	movlw	1
 10089  004474  ECC5  F02B         	call	_WriteUSART
 10090                           
 10091                           ;main.c: 1569: crc8(&crc, 1);
 10092  004478  0100               	movlb	0	; () banked
 10093  00447A  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10094  00447C  6F68               	movwf	(?_crc8+1)& (0+255),b
 10095  00447E  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10096  004480  6F67               	movwf	?_crc8& (0+255),b
 10097  004482  0E01               	movlw	1
 10098  004484  6F69               	movwf	(?_crc8+2)& (0+255),b
 10099  004486  ECF2  F02A         	call	_crc8	;wreg free
 10100                           
 10101                           ; BSR set to: 0
 10102                           ;main.c: 1572: sendEscapedUartData(errorcode, &crc);
 10103  00448A  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10104  00448C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10105  00448E  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10106  004490  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10107  004492  516F               	movf	sendVSCPDriverErrorFrame@errorcode& (0+255),w,b
 10108  004494  EC6C  F028         	call	_sendEscapedUartData
 10109                           
 10110                           ; BSR set to: 0
 10111                           ;main.c: 1575: sendEscapedUartData(crc, (0));
 10112  004498  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10113  00449A  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10114  00449C  5170               	movf	sendVSCPDriverErrorFrame@crc& (0+255),w,b
 10115  00449E  EC6C  F028         	call	_sendEscapedUartData
 10116  0044A2                     l788:
 10117  0044A2  A2AC               	btfss	4012,1,c	;volatile
 10118  0044A4  D7FE               	goto	l788
 10119                           
 10120                           ;main.c: 1579: WriteUSART(0x10);
 10121  0044A6  0E10               	movlw	16
 10122  0044A8  ECC5  F02B         	call	_WriteUSART
 10123  0044AC                     l791:
 10124  0044AC  A2AC               	btfss	4012,1,c	;volatile
 10125  0044AE  D7FE               	goto	l791
 10126                           
 10127                           ;main.c: 1581: WriteUSART(0x03);
 10128  0044B0  0E03               	movlw	3
 10129  0044B2  EFC5  F02B         	goto	_WriteUSART
 10130  0044B6                     __end_of_sendVSCPDriverErrorFrame:
 10131                           	opt stack 0
 10132  0044B6                     PL98:
 10133                           	opt stack 23
 10134  0044B6  0100               	movlb	0	; () banked
 10135  0044B8  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10136  0044BA  6F68               	movwf	(?_crc8+1)& (0+255),b
 10137  0044BC  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10138  0044BE  6F67               	movwf	?_crc8& (0+255),b
 10139  0044C0  6B69               	clrf	(?_crc8+2)& (0+255),b
 10140  0044C2  0C00               	retlw	0
 10141  0044C4                     __end_ofPL98:
 10142                           	opt stack 0
 10143                           tblptru	equ	0xFF8
 10144                           tblptrh	equ	0xFF7
 10145                           tblptrl	equ	0xFF6
 10146                           tablat	equ	0xFF5
 10147                           prodh	equ	0xFF4
 10148                           prodl	equ	0xFF3
 10149                           intcon	equ	0xFF2
 10150                           indf0	equ	0xFEF
 10151                           postinc0	equ	0xFEE
 10152                           fsr0h	equ	0xFEA
 10153                           fsr0l	equ	0xFE9
 10154                           wreg	equ	0xFE8
 10155                           indf1	equ	0xFE7
 10156                           postinc1	equ	0xFE6
 10157                           postdec1	equ	0xFE5
 10158                           fsr1h	equ	0xFE2
 10159                           fsr1l	equ	0xFE1
 10160                           indf2	equ	0xFDF
 10161                           postinc2	equ	0xFDE
 10162                           postdec2	equ	0xFDD
 10163                           plusw2	equ	0xFDB
 10164                           fsr2h	equ	0xFDA
 10165                           fsr2l	equ	0xFD9
 10166                           status	equ	0xFD8
 10167                           
 10168 ;; *************** function _calcCRC *****************
 10169 ;; Defined at:
 10170 ;;		line 2390 in file "main.c"
 10171 ;; Parameters:    Size  Location     Type
 10172 ;;  p               2   12[BANK0 ] PTR unsigned char 
 10173 ;;		 -> cmdbuf(80), 
 10174 ;;  len             1   14[BANK0 ] unsigned char 
 10175 ;; Auto vars:     Size  Location     Type
 10176 ;;  crc             1   16[BANK0 ] unsigned char 
 10177 ;;  j               1   15[BANK0 ] unsigned char 
 10178 ;; Return value:  Size  Location     Type
 10179 ;;                  1    wreg      unsigned char 
 10180 ;; Registers used:
 10181 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10182 ;; Tracked objects:
 10183 ;;		On entry : F/0
 10184 ;;		On exit  : F/0
 10185 ;;		Unchanged: 0/0
 10186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10187 ;;      Params:         0       3       0       0       0       0       0
 10188 ;;      Locals:         0       2       0       0       0       0       0
 10189 ;;      Temps:          0       0       0       0       0       0       0
 10190 ;;      Totals:         0       5       0       0       0       0       0
 10191 ;;Total ram usage:        5 bytes
 10192 ;; Hardware stack levels used:    1
 10193 ;; Hardware stack levels required when called:    5
 10194 ;; This function calls:
 10195 ;;		_crc8
 10196 ;; This function is called by:
 10197 ;;		_doModeVscp
 10198 ;; This function uses a non-reentrant model
 10199 ;;
 10200                           
 10201                           	psect	text16
 10202  00567C                     __ptext16:
 10203                           	opt stack 0
 10204  00567C                     _calcCRC:
 10205                           	opt stack 24
 10206                           
 10207                           ; BSR set to: 0
 10208                           ;main.c: 2391: uint8_t j;
 10209                           ;main.c: 2392: uint8_t crc = 0;
 10210                           
 10211                           ;incstack = 0
 10212                           ;incstack = 0
 10213  00567C  6B70               	clrf	calcCRC@crc& (0+255),b
 10214                           
 10215                           ;main.c: 2394: for (j = 0; j < len; j++) {
 10216  00567E  6B6F               	clrf	calcCRC@j& (0+255),b
 10217  005680  D00F               	goto	l12249
 10218  005682                     l12245:
 10219                           
 10220                           ; BSR set to: 0
 10221                           ;main.c: 2395: crc8(&crc, p[j]);
 10222  005682  0E00               	movlw	high calcCRC@crc
 10223  005684  6F68               	movwf	(?_crc8+1)& (0+255),b
 10224  005686  0E70               	movlw	low calcCRC@crc
 10225  005688  6F67               	movwf	?_crc8& (0+255),b
 10226  00568A  516F               	movf	calcCRC@j& (0+255),w,b
 10227  00568C  256C               	addwf	calcCRC@p& (0+255),w,b
 10228  00568E  6ED9               	movwf	fsr2l,c
 10229  005690  0E00               	movlw	0
 10230  005692  216D               	addwfc	(calcCRC@p+1)& (0+255),w,b
 10231  005694  6EDA               	movwf	fsr2h,c
 10232  005696  50DF               	movf	indf2,w,c
 10233  005698  6F69               	movwf	(?_crc8+2)& (0+255),b
 10234  00569A  ECF2  F02A         	call	_crc8	;wreg free
 10235                           
 10236                           ; BSR set to: 0
 10237  00569E  2B6F               	incf	calcCRC@j& (0+255),f,b
 10238  0056A0                     l12249:
 10239                           
 10240                           ; BSR set to: 0
 10241  0056A0  516E               	movf	calcCRC@len& (0+255),w,b
 10242  0056A2  5D6F               	subwf	calcCRC@j& (0+255),w,b
 10243  0056A4  E3EE               	bnc	l12245
 10244                           
 10245                           ; BSR set to: 0
 10246                           ;main.c: 2396: }
 10247                           ;main.c: 2398: return crc;
 10248  0056A6  5170               	movf	calcCRC@crc& (0+255),w,b
 10249                           
 10250                           ; BSR set to: 0
 10251  0056A8  0012               	return	
 10252  0056AA                     __end_of_calcCRC:
 10253                           	opt stack 0
 10254                           tblptru	equ	0xFF8
 10255                           tblptrh	equ	0xFF7
 10256                           tblptrl	equ	0xFF6
 10257                           tablat	equ	0xFF5
 10258                           prodh	equ	0xFF4
 10259                           prodl	equ	0xFF3
 10260                           intcon	equ	0xFF2
 10261                           indf0	equ	0xFEF
 10262                           postinc0	equ	0xFEE
 10263                           fsr0h	equ	0xFEA
 10264                           fsr0l	equ	0xFE9
 10265                           wreg	equ	0xFE8
 10266                           indf1	equ	0xFE7
 10267                           postinc1	equ	0xFE6
 10268                           postdec1	equ	0xFE5
 10269                           fsr1h	equ	0xFE2
 10270                           fsr1l	equ	0xFE1
 10271                           indf2	equ	0xFDF
 10272                           postinc2	equ	0xFDE
 10273                           postdec2	equ	0xFDD
 10274                           plusw2	equ	0xFDB
 10275                           fsr2h	equ	0xFDA
 10276                           fsr2l	equ	0xFD9
 10277                           status	equ	0xFD8
 10278                           
 10279 ;; *************** function _receiveSendEventCANAL *****************
 10280 ;; Defined at:
 10281 ;;		line 1785 in file "main.c"
 10282 ;; Parameters:    Size  Location     Type
 10283 ;;		None
 10284 ;; Auto vars:     Size  Location     Type
 10285 ;;  crc             1   32[BANK0 ] unsigned char 
 10286 ;;  data            8   18[BANK0 ] unsigned char [8]
 10287 ;;  id              4   27[BANK0 ] unsigned long 
 10288 ;;  dlc             1   31[BANK0 ] unsigned char 
 10289 ;;  i               1   26[BANK0 ] unsigned char 
 10290 ;; Return value:  Size  Location     Type
 10291 ;;                  1    wreg      enum E15660
 10292 ;; Registers used:
 10293 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10294 ;; Tracked objects:
 10295 ;;		On entry : F/0
 10296 ;;		On exit  : 0/0
 10297 ;;		Unchanged: 0/0
 10298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10299 ;;      Params:         0       0       0       0       0       0       0
 10300 ;;      Locals:         0      15       0       0       0       0       0
 10301 ;;      Temps:          0       0       0       0       0       0       0
 10302 ;;      Totals:         0      15       0       0       0       0       0
 10303 ;;Total ram usage:       15 bytes
 10304 ;; Hardware stack levels used:    1
 10305 ;; Hardware stack levels required when called:    6
 10306 ;; This function calls:
 10307 ;;		_WriteUSART
 10308 ;;		_sendEscapedUartData
 10309 ;;		_crc8
 10310 ;;		_getCANFrame
 10311 ;; This function is called by:
 10312 ;;		_doModeVscp
 10313 ;; This function uses a non-reentrant model
 10314 ;;
 10315                           
 10316                           	psect	text17
 10317  00357C                     __ptext17:
 10318                           	opt stack 0
 10319  00357C                     _receiveSendEventCANAL:
 10320                           	opt stack 23
 10321                           
 10322                           ; BSR set to: 0
 10323                           ;main.c: 1786: uint8_t i;
 10324                           ;main.c: 1787: uint32_t id;
 10325                           ;main.c: 1788: uint8_t dlc;
 10326                           ;main.c: 1789: uint8_t data[8];
 10327                           ;main.c: 1791: if ( getCANFrame( &id, &dlc, &data ) ) {
 10328                           
 10329                           ; BSR set to: 0
 10330                           ;incstack = 0
 10331                           ;incstack = 0
 10332  00357C  0E00               	movlw	high receiveSendEventCANAL@dlc
 10333  00357E  6F6E               	movwf	(?_getCANFrame+1)& (0+255),b
 10334  003580  0E7F               	movlw	low receiveSendEventCANAL@dlc
 10335  003582  6F6D               	movwf	?_getCANFrame& (0+255),b
 10336  003584  0E00               	movlw	high receiveSendEventCANAL@data
 10337  003586  6F70               	movwf	(?_getCANFrame+3)& (0+255),b
 10338  003588  0E72               	movlw	low receiveSendEventCANAL@data
 10339  00358A  6F6F               	movwf	(?_getCANFrame+2)& (0+255),b
 10340  00358C  0E7B               	movlw	receiveSendEventCANAL@id& (0+255)
 10341  00358E  EC84  F026         	call	_getCANFrame
 10342  003592  0900               	iorlw	0
 10343  003594  E101 D08F          	bz	l940
 10344                           
 10345                           ; BSR set to: 0
 10346                           ;main.c: 1793: uint8_t crc = 0;
 10347  003598  6B80               	clrf	receiveSendEventCANAL@crc& (0+255),b
 10348                           
 10349                           ; BSR set to: 0
 10350                           ;main.c: 1796: cntRxFrames++;
 10351  00359A  2BD9               	incf	_cntRxFrames& (0+255),f,b
 10352  00359C  0E00               	movlw	0
 10353  00359E  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10354  0035A0  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10355  0035A2  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10356                           
 10357                           ;main.c: 1797: cntRxBytes += dlc;
 10358  0035A4  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10359  0035A6  27D5               	addwf	_cntRxBytes& (0+255),f,b
 10360  0035A8  0E00               	movlw	0
 10361  0035AA  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10362  0035AC  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10363  0035AE  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10364  0035B0                     l919:
 10365                           
 10366                           ; BSR set to: 0
 10367  0035B0  A2AC               	btfss	4012,1,c	;volatile
 10368  0035B2  D7FE               	goto	l919
 10369                           
 10370                           ; BSR set to: 0
 10371                           ;main.c: 1801: WriteUSART(0x10);
 10372  0035B4  0E10               	movlw	16
 10373  0035B6  ECC5  F02B         	call	_WriteUSART
 10374  0035BA                     l922:
 10375  0035BA  A2AC               	btfss	4012,1,c	;volatile
 10376  0035BC  D7FE               	goto	l922
 10377                           
 10378                           ;main.c: 1803: WriteUSART(0x02);
 10379  0035BE  0E02               	movlw	2
 10380  0035C0  ECC5  F02B         	call	_WriteUSART
 10381  0035C4                     l925:
 10382  0035C4  A2AC               	btfss	4012,1,c	;volatile
 10383  0035C6  D7FE               	goto	l925
 10384                           
 10385                           ;main.c: 1807: WriteUSART(2);
 10386  0035C8  0E02               	movlw	2
 10387  0035CA  ECC5  F02B         	call	_WriteUSART
 10388                           
 10389                           ;main.c: 1808: crc8(&crc, 2);
 10390  0035CE  0100               	movlb	0	; () banked
 10391  0035D0  0E00               	movlw	high receiveSendEventCANAL@crc
 10392  0035D2  6F68               	movwf	(?_crc8+1)& (0+255),b
 10393  0035D4  0E80               	movlw	low receiveSendEventCANAL@crc
 10394  0035D6  6F67               	movwf	?_crc8& (0+255),b
 10395  0035D8  0E02               	movlw	2
 10396  0035DA  6F69               	movwf	(?_crc8+2)& (0+255),b
 10397  0035DC  ECF2  F02A         	call	_crc8	;wreg free
 10398  0035E0                     l928:
 10399                           
 10400                           ; BSR set to: 0
 10401  0035E0  A2AC               	btfss	4012,1,c	;volatile
 10402  0035E2  D7FE               	goto	l928
 10403                           
 10404                           ; BSR set to: 0
 10405                           ;main.c: 1812: WriteUSART(0);
 10406  0035E4  0E00               	movlw	0
 10407  0035E6  ECC5  F02B         	call	_WriteUSART
 10408                           
 10409                           ;main.c: 1813: crc8(&crc, 0);
 10410  0035EA  0100               	movlb	0	; () banked
 10411  0035EC  0E00               	movlw	high receiveSendEventCANAL@crc
 10412  0035EE  6F68               	movwf	(?_crc8+1)& (0+255),b
 10413  0035F0  0E80               	movlw	low receiveSendEventCANAL@crc
 10414  0035F2  6F67               	movwf	?_crc8& (0+255),b
 10415  0035F4  0E00               	movlw	0
 10416  0035F6  6B69               	clrf	(?_crc8+2)& (0+255),b
 10417  0035F8  ECF2  F02A         	call	_crc8	;wreg free
 10418                           
 10419                           ; BSR set to: 0
 10420                           ;main.c: 1816: sendEscapedUartData(sequencyno, &crc);
 10421  0035FC  0E00               	movlw	high receiveSendEventCANAL@crc
 10422  0035FE  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10423  003600  0E80               	movlw	low receiveSendEventCANAL@crc
 10424  003602  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10425  003604  51F3               	movf	_sequencyno& (0+255),w,b
 10426  003606  EC6C  F028         	call	_sendEscapedUartData
 10427                           
 10428                           ; BSR set to: 0
 10429                           ;main.c: 1817: sequencyno++;
 10430  00360A  2BF3               	incf	_sequencyno& (0+255),f,b
 10431                           
 10432                           ; BSR set to: 0
 10433                           ;main.c: 1820: sendEscapedUartData(0, &crc);
 10434  00360C  0E00               	movlw	high receiveSendEventCANAL@crc
 10435  00360E  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10436  003610  0E80               	movlw	low receiveSendEventCANAL@crc
 10437  003612  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10438  003614  0E00               	movlw	0
 10439  003616  EC6C  F028         	call	_sendEscapedUartData
 10440                           
 10441                           ; BSR set to: 0
 10442                           ;main.c: 1821: sendEscapedUartData(5 + dlc, &crc);
 10443  00361A  0E00               	movlw	high receiveSendEventCANAL@crc
 10444  00361C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10445  00361E  0E80               	movlw	low receiveSendEventCANAL@crc
 10446  003620  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10447  003622  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10448  003624  0F05               	addlw	5
 10449  003626  EC6C  F028         	call	_sendEscapedUartData
 10450                           
 10451                           ; BSR set to: 0
 10452                           ;main.c: 1827: sendEscapedUartData( ((id >> 24) & 0xff), &crc);
 10453  00362A  0E00               	movlw	high receiveSendEventCANAL@crc
 10454  00362C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10455  00362E  0E80               	movlw	low receiveSendEventCANAL@crc
 10456  003630  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10457  003632  0100               	movlb	0	; () banked
 10458  003634  517E               	movf	(receiveSendEventCANAL@id+3)& (0+255),w,b
 10459  003636  EC6C  F028         	call	_sendEscapedUartData
 10460                           
 10461                           ; BSR set to: 0
 10462                           ;main.c: 1828: sendEscapedUartData(((id >> 16) & 0xff), &crc);
 10463  00363A  0E00               	movlw	high receiveSendEventCANAL@crc
 10464  00363C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10465  00363E  0E80               	movlw	low receiveSendEventCANAL@crc
 10466  003640  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10467  003642  0100               	movlb	0	; () banked
 10468  003644  517D               	movf	(receiveSendEventCANAL@id+2)& (0+255),w,b
 10469  003646  EC6C  F028         	call	_sendEscapedUartData
 10470                           
 10471                           ; BSR set to: 0
 10472                           ;main.c: 1829: sendEscapedUartData(((id >> 8) & 0xff), &crc);
 10473  00364A  0E00               	movlw	high receiveSendEventCANAL@crc
 10474  00364C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10475  00364E  0E80               	movlw	low receiveSendEventCANAL@crc
 10476  003650  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10477  003652  0100               	movlb	0	; () banked
 10478  003654  517C               	movf	(receiveSendEventCANAL@id+1)& (0+255),w,b
 10479  003656  EC6C  F028         	call	_sendEscapedUartData
 10480                           
 10481                           ; BSR set to: 0
 10482                           ;main.c: 1830: sendEscapedUartData((id & 0xff), &crc);
 10483  00365A  0E00               	movlw	high receiveSendEventCANAL@crc
 10484  00365C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10485  00365E  0E80               	movlw	low receiveSendEventCANAL@crc
 10486  003660  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10487  003662  517B               	movf	receiveSendEventCANAL@id& (0+255),w,b
 10488  003664  EC6C  F028         	call	_sendEscapedUartData
 10489                           
 10490                           ; BSR set to: 0
 10491                           ;main.c: 1833: sendEscapedUartData(dlc, &crc);
 10492  003668  0E00               	movlw	high receiveSendEventCANAL@crc
 10493  00366A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10494  00366C  0E80               	movlw	low receiveSendEventCANAL@crc
 10495  00366E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10496  003670  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10497  003672  EC6C  F028         	call	_sendEscapedUartData
 10498                           
 10499                           ; BSR set to: 0
 10500                           ;main.c: 1836: for (i = 0; i < dlc; i++) {
 10501  003676  6B7A               	clrf	receiveSendEventCANAL@i& (0+255),b
 10502  003678  D00C               	goto	l12233
 10503  00367A                     l12229:
 10504                           
 10505                           ; BSR set to: 0
 10506                           ;main.c: 1837: sendEscapedUartData( data[ i ], &crc );
 10507  00367A  0E00               	movlw	high receiveSendEventCANAL@crc
 10508  00367C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10509  00367E  0E80               	movlw	low receiveSendEventCANAL@crc
 10510  003680  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10511  003682  517A               	movf	receiveSendEventCANAL@i& (0+255),w,b
 10512  003684  0F72               	addlw	low receiveSendEventCANAL@data
 10513  003686  6ED9               	movwf	fsr2l,c
 10514  003688  6ADA               	clrf	fsr2h,c
 10515  00368A  50DF               	movf	indf2,w,c
 10516  00368C  EC6C  F028         	call	_sendEscapedUartData
 10517                           
 10518                           ; BSR set to: 0
 10519  003690  2B7A               	incf	receiveSendEventCANAL@i& (0+255),f,b
 10520  003692                     l12233:
 10521                           
 10522                           ; BSR set to: 0
 10523  003692  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10524  003694  5D7A               	subwf	receiveSendEventCANAL@i& (0+255),w,b
 10525  003696  E3F1               	bnc	l12229
 10526                           
 10527                           ; BSR set to: 0
 10528                           ;main.c: 1838: }
 10529                           ;main.c: 1843: sendEscapedUartData(crc, (0));
 10530  003698  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10531  00369A  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10532  00369C  5180               	movf	receiveSendEventCANAL@crc& (0+255),w,b
 10533  00369E  EC6C  F028         	call	_sendEscapedUartData
 10534  0036A2                     l934:
 10535                           
 10536                           ; BSR set to: 0
 10537  0036A2  A2AC               	btfss	4012,1,c	;volatile
 10538  0036A4  D7FE               	goto	l934
 10539                           
 10540                           ; BSR set to: 0
 10541                           ;main.c: 1847: WriteUSART(0x10);
 10542  0036A6  0E10               	movlw	16
 10543  0036A8  ECC5  F02B         	call	_WriteUSART
 10544  0036AC                     l937:
 10545  0036AC  A2AC               	btfss	4012,1,c	;volatile
 10546  0036AE  D7FE               	goto	l937
 10547                           
 10548                           ;main.c: 1849: WriteUSART(0x03);
 10549  0036B0  0E03               	movlw	3
 10550  0036B2  ECC5  F02B         	call	_WriteUSART
 10551  0036B6                     l940:
 10552  0036B6  0012               	return	
 10553  0036B8                     __end_of_receiveSendEventCANAL:
 10554                           	opt stack 0
 10555                           tblptru	equ	0xFF8
 10556                           tblptrh	equ	0xFF7
 10557                           tblptrl	equ	0xFF6
 10558                           tablat	equ	0xFF5
 10559                           prodh	equ	0xFF4
 10560                           prodl	equ	0xFF3
 10561                           intcon	equ	0xFF2
 10562                           indf0	equ	0xFEF
 10563                           postinc0	equ	0xFEE
 10564                           fsr0h	equ	0xFEA
 10565                           fsr0l	equ	0xFE9
 10566                           wreg	equ	0xFE8
 10567                           indf1	equ	0xFE7
 10568                           postinc1	equ	0xFE6
 10569                           postdec1	equ	0xFE5
 10570                           fsr1h	equ	0xFE2
 10571                           fsr1l	equ	0xFE1
 10572                           indf2	equ	0xFDF
 10573                           postinc2	equ	0xFDE
 10574                           postdec2	equ	0xFDD
 10575                           plusw2	equ	0xFDB
 10576                           fsr2h	equ	0xFDA
 10577                           fsr2l	equ	0xFD9
 10578                           status	equ	0xFD8
 10579                           
 10580 ;; *************** function _receiveSendMultiEventCANAL *****************
 10581 ;; Defined at:
 10582 ;;		line 1862 in file "main.c"
 10583 ;; Parameters:    Size  Location     Type
 10584 ;;		None
 10585 ;; Auto vars:     Size  Location     Type
 10586 ;;  crc             1   33[BANK0 ] unsigned char 
 10587 ;;  data            8   18[BANK0 ] unsigned char [8]
 10588 ;;  id              4   29[BANK0 ] unsigned long 
 10589 ;;  pos             1   34[BANK0 ] unsigned char 
 10590 ;;  dlc             1   28[BANK0 ] unsigned char 
 10591 ;;  i               1   27[BANK0 ] unsigned char 
 10592 ;;  msgcount        1   26[BANK0 ] unsigned char 
 10593 ;; Return value:  Size  Location     Type
 10594 ;;                  1    wreg      enum E15660
 10595 ;; Registers used:
 10596 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10597 ;; Tracked objects:
 10598 ;;		On entry : F/0
 10599 ;;		On exit  : 0/0
 10600 ;;		Unchanged: 0/0
 10601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10602 ;;      Params:         0       0       0       0       0       0       0
 10603 ;;      Locals:         0      17       0       0       0       0       0
 10604 ;;      Temps:          0       0       0       0       0       0       0
 10605 ;;      Totals:         0      17       0       0       0       0       0
 10606 ;;Total ram usage:       17 bytes
 10607 ;; Hardware stack levels used:    1
 10608 ;; Hardware stack levels required when called:    6
 10609 ;; This function calls:
 10610 ;;		_WriteUSART
 10611 ;;		_sendEscapedUartData
 10612 ;;		_crc8
 10613 ;;		_getCANFrame
 10614 ;; This function is called by:
 10615 ;;		_doModeVscp
 10616 ;; This function uses a non-reentrant model
 10617 ;;
 10618                           
 10619                           	psect	text18
 10620  003126                     __ptext18:
 10621                           	opt stack 0
 10622  003126                     _receiveSendMultiEventCANAL:
 10623                           	opt stack 23
 10624                           
 10625                           ; BSR set to: 0
 10626                           ;main.c: 1863: uint8_t i;
 10627                           ;main.c: 1864: uint8_t pos=0;
 10628                           
 10629                           ;incstack = 0
 10630                           ;incstack = 0
 10631  003126  6B82               	clrf	receiveSendMultiEventCANAL@pos& (0+255),b
 10632                           
 10633                           ;main.c: 1865: uint8_t msgcount=0;
 10634  003128  6B7A               	clrf	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10635                           
 10636                           ; BSR set to: 0
 10637                           ;main.c: 1866: uint32_t id;
 10638                           ;main.c: 1867: uint8_t dlc;
 10639                           ;main.c: 1868: uint8_t data[8];
 10640                           ;main.c: 1870: if ( getCANFrame( &id, &dlc, &data ) ) {
 10641  00312A  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 10642  00312C  D8B1               	call	PL82	;call to abstracted procedure
 10643  00312E  EC84  F026         	call	_getCANFrame
 10644  003132  0900               	iorlw	0
 10645  003134  E101 D0A3          	bz	l972
 10646                           
 10647                           ; BSR set to: 0
 10648                           ;main.c: 1872: uint8_t crc = 0;
 10649  003138  6B81               	clrf	receiveSendMultiEventCANAL@crc& (0+255),b
 10650                           
 10651                           ; BSR set to: 0
 10652                           ;main.c: 1875: cntRxFrames++;
 10653  00313A  2BD9               	incf	_cntRxFrames& (0+255),f,b
 10654  00313C  0E00               	movlw	0
 10655  00313E  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10656  003140  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10657  003142  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10658                           
 10659                           ;main.c: 1876: cntRxBytes += dlc;
 10660  003144  517C               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10661  003146  27D5               	addwf	_cntRxBytes& (0+255),f,b
 10662  003148  0E00               	movlw	0
 10663  00314A  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10664  00314C  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10665  00314E  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10666  003150                     l944:
 10667                           
 10668                           ; BSR set to: 0
 10669  003150  A2AC               	btfss	4012,1,c	;volatile
 10670  003152  D7FE               	goto	l944
 10671                           
 10672                           ; BSR set to: 0
 10673                           ;main.c: 1880: WriteUSART(0x10);
 10674  003154  0E10               	movlw	16
 10675  003156  ECC5  F02B         	call	_WriteUSART
 10676  00315A                     l947:
 10677  00315A  A2AC               	btfss	4012,1,c	;volatile
 10678  00315C  D7FE               	goto	l947
 10679                           
 10680                           ;main.c: 1882: WriteUSART(0x02);
 10681  00315E  0E02               	movlw	2
 10682  003160  ECC5  F02B         	call	_WriteUSART
 10683  003164                     l950:
 10684  003164  A2AC               	btfss	4012,1,c	;volatile
 10685  003166  D7FE               	goto	l950
 10686                           
 10687                           ;main.c: 1886: WriteUSART(6);
 10688  003168  0E06               	movlw	6
 10689  00316A  ECC5  F02B         	call	_WriteUSART
 10690                           
 10691                           ;main.c: 1887: crc8(&crc, 6);
 10692  00316E  0100               	movlb	0	; () banked
 10693  003170  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10694  003172  6F68               	movwf	(?_crc8+1)& (0+255),b
 10695  003174  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10696  003176  6F67               	movwf	?_crc8& (0+255),b
 10697  003178  0E06               	movlw	6
 10698  00317A  6F69               	movwf	(?_crc8+2)& (0+255),b
 10699  00317C  ECF2  F02A         	call	_crc8	;wreg free
 10700  003180                     l953:
 10701                           
 10702                           ; BSR set to: 0
 10703  003180  A2AC               	btfss	4012,1,c	;volatile
 10704  003182  D7FE               	goto	l953
 10705                           
 10706                           ; BSR set to: 0
 10707                           ;main.c: 1891: WriteUSART(0);
 10708  003184  0E00               	movlw	0
 10709  003186  ECC5  F02B         	call	_WriteUSART
 10710                           
 10711                           ;main.c: 1892: crc8(&crc, 0);
 10712  00318A  0100               	movlb	0	; () banked
 10713  00318C  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10714  00318E  6F68               	movwf	(?_crc8+1)& (0+255),b
 10715  003190  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10716  003192  6F67               	movwf	?_crc8& (0+255),b
 10717  003194  0E00               	movlw	0
 10718  003196  6B69               	clrf	(?_crc8+2)& (0+255),b
 10719  003198  ECF2  F02A         	call	_crc8	;wreg free
 10720                           
 10721                           ; BSR set to: 0
 10722                           ;main.c: 1895: sendEscapedUartData(sequencyno, &crc);
 10723  00319C  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10724  00319E  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10725  0031A0  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10726  0031A2  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10727  0031A4  51F3               	movf	_sequencyno& (0+255),w,b
 10728  0031A6  EC6C  F028         	call	_sendEscapedUartData
 10729                           
 10730                           ; BSR set to: 0
 10731                           ;main.c: 1896: sequencyno++;
 10732  0031AA  2BF3               	incf	_sequencyno& (0+255),f,b
 10733  0031AC                     l12135:
 10734                           
 10735                           ; BSR set to: 0
 10736                           ;main.c: 1906: wrkbuf[ pos ] = (id >> 24) & 0xff;
 10737  0031AC  0E54               	movlw	low _wrkbuf
 10738  0031AE  0100               	movlb	0	; () banked
 10739  0031B0  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10740  0031B2  6ED9               	movwf	fsr2l,c
 10741  0031B4  6ADA               	clrf	fsr2h,c
 10742  0031B6  0E01               	movlw	high _wrkbuf
 10743  0031B8  22DA               	addwfc	fsr2h,f,c
 10744  0031BA  C080  FFDF         	movff	receiveSendMultiEventCANAL@id+3,indf2
 10745                           
 10746                           ; BSR set to: 0
 10747                           ;main.c: 1907: pos++;
 10748                           
 10749                           ; BSR set to: 0
 10750                           ;main.c: 1908: wrkbuf[ pos ] = (id >> 16) & 0xff;
 10751  0031BE  D860               	call	PL26	;call to abstracted procedure
 10752  0031C0  C07F  FFDF         	movff	receiveSendMultiEventCANAL@id+2,indf2
 10753                           
 10754                           ; BSR set to: 0
 10755                           ;main.c: 1909: pos++;
 10756                           
 10757                           ; BSR set to: 0
 10758                           ;main.c: 1910: wrkbuf[ pos ] = (id >> 8) & 0xff;
 10759  0031C4  D85D               	call	PL26	;call to abstracted procedure
 10760  0031C6  C07E  FFDF         	movff	receiveSendMultiEventCANAL@id+1,indf2
 10761                           
 10762                           ; BSR set to: 0
 10763                           ;main.c: 1911: pos++;
 10764                           
 10765                           ; BSR set to: 0
 10766                           ;main.c: 1912: wrkbuf[ pos ] = id & 0xff;
 10767  0031CA  D85A               	call	PL26	;call to abstracted procedure
 10768  0031CC  C07D  FFDF         	movff	receiveSendMultiEventCANAL@id,indf2
 10769                           
 10770                           ; BSR set to: 0
 10771                           ;main.c: 1913: pos++;
 10772                           
 10773                           ; BSR set to: 0
 10774                           ;main.c: 1916: wrkbuf[ pos ] = dlc;
 10775  0031D0  D857               	call	PL26	;call to abstracted procedure
 10776  0031D2  C07C  FFDF         	movff	receiveSendMultiEventCANAL@dlc,indf2
 10777                           
 10778                           ; BSR set to: 0
 10779                           ;main.c: 1917: pos++;
 10780  0031D6  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10781                           
 10782                           ; BSR set to: 0
 10783                           ;main.c: 1920: for (i = 0; i < dlc; i++) {
 10784  0031D8  6B7B               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 10785  0031DA  D00F               	goto	l12163
 10786  0031DC                     l12157:
 10787                           
 10788                           ; BSR set to: 0
 10789                           ;main.c: 1921: wrkbuf[ pos ] = data[ i ];
 10790  0031DC  517B               	movf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10791  0031DE  0F72               	addlw	low receiveSendMultiEventCANAL@data
 10792  0031E0  6ED9               	movwf	fsr2l,c
 10793  0031E2  6ADA               	clrf	fsr2h,c
 10794  0031E4  0E54               	movlw	low _wrkbuf
 10795  0031E6  0100               	movlb	0	; () banked
 10796  0031E8  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10797  0031EA  6EE1               	movwf	fsr1l,c
 10798  0031EC  6AE2               	clrf	fsr1h,c
 10799  0031EE  0E01               	movlw	high _wrkbuf
 10800  0031F0  22E2               	addwfc	fsr1h,f,c
 10801  0031F2  CFDF FFE7          	movff	indf2,indf1
 10802                           
 10803                           ; BSR set to: 1
 10804                           ;main.c: 1922: pos++;
 10805  0031F6  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10806                           
 10807                           ; BSR set to: 0
 10808  0031F8  2B7B               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 10809  0031FA                     l12163:
 10810                           
 10811                           ; BSR set to: 0
 10812  0031FA  517C               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10813  0031FC  5D7B               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10814  0031FE  E3EE               	bnc	l12157
 10815                           
 10816                           ; BSR set to: 0
 10817                           ;main.c: 1923: }
 10818                           ;main.c: 1925: msgcount++;
 10819  003200  2B7A               	incf	receiveSendMultiEventCANAL@msgcount& (0+255),f,b
 10820                           
 10821                           ; BSR set to: 0
 10822                           ;main.c: 1927: } while ( ( msgcount < caps.maxCanalFrames ) &&
 10823                           ;main.c: 1928: ( msgcount < 5 ) &&
 10824                           ;main.c: 1929: getCANFrame( &id, &dlc, &data ) );
 10825  003202  51F6               	movf	(_caps+1)& (0+255),w,b
 10826  003204  617A               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10827  003206  D009               	goto	l12173
 10828                           
 10829                           ; BSR set to: 0
 10830  003208  0E05               	movlw	5
 10831  00320A  617A               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10832  00320C  D006               	goto	l12173
 10833                           
 10834                           ; BSR set to: 0
 10835  00320E  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 10836  003210  D83F               	call	PL82	;call to abstracted procedure
 10837  003212  EC84  F026         	call	_getCANFrame
 10838  003216  0900               	iorlw	0
 10839  003218  E1C9               	bnz	l12135
 10840  00321A                     l12173:
 10841                           
 10842                           ; BSR set to: 0
 10843                           ;main.c: 1934: sendEscapedUartData(0, &crc);
 10844  00321A  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10845  00321C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10846  00321E  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10847  003220  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10848  003222  0E00               	movlw	0
 10849  003224  EC6C  F028         	call	_sendEscapedUartData
 10850                           
 10851                           ;main.c: 1935: sendEscapedUartData(pos, &crc);
 10852  003228  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10853  00322A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10854  00322C  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10855  00322E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10856  003230  5182               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10857  003232  EC6C  F028         	call	_sendEscapedUartData
 10858                           
 10859                           ; BSR set to: 0
 10860                           ;main.c: 1938: for (i = 0; i < pos; i++) {
 10861  003236  6B7B               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 10862  003238  D010               	goto	l12181
 10863  00323A                     l12177:
 10864                           
 10865                           ; BSR set to: 0
 10866                           ;main.c: 1939: sendEscapedUartData( wrkbuf[ i ], &crc);
 10867  00323A  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10868  00323C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10869  00323E  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10870  003240  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10871  003242  0E54               	movlw	low _wrkbuf
 10872  003244  0100               	movlb	0	; () banked
 10873  003246  257B               	addwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10874  003248  6ED9               	movwf	fsr2l,c
 10875  00324A  6ADA               	clrf	fsr2h,c
 10876  00324C  0101               	movlb	1	; () banked
 10877  00324E  0E01               	movlw	high _wrkbuf
 10878  003250  22DA               	addwfc	fsr2h,f,c
 10879  003252  50DF               	movf	indf2,w,c
 10880  003254  EC6C  F028         	call	_sendEscapedUartData
 10881                           
 10882                           ; BSR set to: 0
 10883  003258  2B7B               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 10884  00325A                     l12181:
 10885                           
 10886                           ; BSR set to: 0
 10887  00325A  5182               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10888  00325C  5D7B               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10889  00325E  E3ED               	bnc	l12177
 10890                           
 10891                           ; BSR set to: 0
 10892                           ;main.c: 1940: }
 10893                           ;main.c: 1943: sendEscapedUartData(crc, (0));
 10894  003260  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10895  003262  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10896  003264  5181               	movf	receiveSendMultiEventCANAL@crc& (0+255),w,b
 10897  003266  EC6C  F028         	call	_sendEscapedUartData
 10898  00326A                     l966:
 10899                           
 10900                           ; BSR set to: 0
 10901  00326A  A2AC               	btfss	4012,1,c	;volatile
 10902  00326C  D7FE               	goto	l966
 10903                           
 10904                           ; BSR set to: 0
 10905                           ;main.c: 1947: WriteUSART(0x10);
 10906  00326E  0E10               	movlw	16
 10907  003270  ECC5  F02B         	call	_WriteUSART
 10908  003274                     l969:
 10909  003274  A2AC               	btfss	4012,1,c	;volatile
 10910  003276  D7FE               	goto	l969
 10911                           
 10912                           ;main.c: 1949: WriteUSART(0x03);
 10913  003278  0E03               	movlw	3
 10914  00327A  ECC5  F02B         	call	_WriteUSART
 10915  00327E                     l972:
 10916  00327E  0012               	return	
 10917  003280                     __end_of_receiveSendMultiEventCANAL:
 10918                           	opt stack 0
 10919  003280                     PL26:
 10920                           	opt stack 23
 10921  003280  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10922  003282  0E54               	movlw	low _wrkbuf
 10923  003284  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10924  003286  6ED9               	movwf	fsr2l,c
 10925  003288  6ADA               	clrf	fsr2h,c
 10926  00328A  0E01               	movlw	high _wrkbuf
 10927  00328C  22DA               	addwfc	fsr2h,f,c
 10928  00328E  0012               	return	
 10929  003290                     __end_ofPL26:
 10930                           	opt stack 0
 10931  003290                     PL82:
 10932                           	opt stack 23
 10933  003290  6F6E               	movwf	(?_getCANFrame+1)& (0+255),b
 10934  003292  0E7C               	movlw	low receiveSendMultiEventCANAL@dlc
 10935  003294  6F6D               	movwf	?_getCANFrame& (0+255),b
 10936  003296  0E00               	movlw	high receiveSendMultiEventCANAL@data
 10937  003298  6F70               	movwf	(?_getCANFrame+3)& (0+255),b
 10938  00329A  0E72               	movlw	low receiveSendMultiEventCANAL@data
 10939  00329C  6F6F               	movwf	(?_getCANFrame+2)& (0+255),b
 10940  00329E  0E7D               	movlw	receiveSendMultiEventCANAL@id& (0+255)
 10941  0032A0  0012               	return	
 10942  0032A2                     __end_ofPL82:
 10943                           	opt stack 0
 10944                           tblptru	equ	0xFF8
 10945                           tblptrh	equ	0xFF7
 10946                           tblptrl	equ	0xFF6
 10947                           tablat	equ	0xFF5
 10948                           prodh	equ	0xFF4
 10949                           prodl	equ	0xFF3
 10950                           intcon	equ	0xFF2
 10951                           indf0	equ	0xFEF
 10952                           postinc0	equ	0xFEE
 10953                           fsr0h	equ	0xFEA
 10954                           fsr0l	equ	0xFE9
 10955                           wreg	equ	0xFE8
 10956                           indf1	equ	0xFE7
 10957                           postinc1	equ	0xFE6
 10958                           postdec1	equ	0xFE5
 10959                           fsr1h	equ	0xFE2
 10960                           fsr1l	equ	0xFE1
 10961                           indf2	equ	0xFDF
 10962                           postinc2	equ	0xFDE
 10963                           postdec2	equ	0xFDD
 10964                           plusw2	equ	0xFDB
 10965                           fsr2h	equ	0xFDA
 10966                           fsr2l	equ	0xFD9
 10967                           status	equ	0xFD8
 10968                           
 10969 ;; *************** function _sendEscapedUartData *****************
 10970 ;; Defined at:
 10971 ;;		line 1515 in file "main.c"
 10972 ;; Parameters:    Size  Location     Type
 10973 ;;  c               1    wreg     unsigned char 
 10974 ;;  pcrc            2   12[BANK0 ] PTR unsigned char 
 10975 ;;		 -> sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), receiveSendEven
      +tCANAL@crc(1), 
 10976 ;;		 -> sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame
      +@crc(1), 
 10977 ;;		 -> NULL(0), 
 10978 ;; Auto vars:     Size  Location     Type
 10979 ;;  c               1   14[BANK0 ] unsigned char 
 10980 ;; Return value:  Size  Location     Type
 10981 ;;		None               void
 10982 ;; Registers used:
 10983 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10984 ;; Tracked objects:
 10985 ;;		On entry : E/1
 10986 ;;		On exit  : F/0
 10987 ;;		Unchanged: 0/0
 10988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10989 ;;      Params:         0       2       0       0       0       0       0
 10990 ;;      Locals:         0       1       0       0       0       0       0
 10991 ;;      Temps:          0       0       0       0       0       0       0
 10992 ;;      Totals:         0       3       0       0       0       0       0
 10993 ;;Total ram usage:        3 bytes
 10994 ;; Hardware stack levels used:    1
 10995 ;; Hardware stack levels required when called:    5
 10996 ;; This function calls:
 10997 ;;		_WriteUSART
 10998 ;;		_crc8
 10999 ;; This function is called by:
 11000 ;;		_sendVSCPDriverErrorFrame
 11001 ;;		_sendVSCPDriverAck
 11002 ;;		_sendVSCPDriverNack
 11003 ;;		_sendVSCPDriverCommandReply
 11004 ;;		_receiveSendEventCANAL
 11005 ;;		_receiveSendMultiEventCANAL
 11006 ;;		_sendVSCPModeCapabilities
 11007 ;; This function uses a non-reentrant model
 11008 ;;
 11009                           
 11010                           	psect	text19
 11011  0050D8                     __ptext19:
 11012                           	opt stack 0
 11013  0050D8                     _sendEscapedUartData:
 11014                           	opt stack 23
 11015                           
 11016                           ;incstack = 0
 11017                           ;incstack = 0
 11018                           ;sendEscapedUartData@c stored from wreg
 11019  0050D8  CFE8 F06E          	movff	wreg,sendEscapedUartData@c
 11020                           
 11021                           ;main.c: 1516: if (0x10 == c) {
 11022  0050DC  0100               	movlb	0	; () banked
 11023  0050DE  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11024  0050E0  0A10               	xorlw	16
 11025  0050E2  E117               	bnz	l763
 11026  0050E4                     l755:
 11027  0050E4  A2AC               	btfss	4012,1,c	;volatile
 11028  0050E6  D7FE               	goto	l755
 11029                           
 11030                           ;main.c: 1519: WriteUSART(0x10);
 11031  0050E8  0E10               	movlw	16
 11032  0050EA  ECC5  F02B         	call	_WriteUSART
 11033  0050EE                     l758:
 11034  0050EE  A2AC               	btfss	4012,1,c	;volatile
 11035  0050F0  D7FE               	goto	l758
 11036                           
 11037                           ;main.c: 1523: WriteUSART(0x10);
 11038  0050F2  0E10               	movlw	16
 11039  0050F4  ECC5  F02B         	call	_WriteUSART
 11040                           
 11041                           ;main.c: 1524: if ((0) != pcrc) crc8(pcrc, 0x10);
 11042  0050F8  0100               	movlb	0	; () banked
 11043  0050FA  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11044  0050FC  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11045  0050FE  E01B               	bz	l767
 11046                           
 11047                           ; BSR set to: 0
 11048  005100  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11049  005104  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11050  005108  0E10               	movlw	16
 11051  00510A  6F69               	movwf	(?_crc8+2)& (0+255),b
 11052  00510C  ECF2  F02A         	call	_crc8	;wreg free
 11053  005110  D012               	goto	l767
 11054  005112                     l763:
 11055  005112  A2AC               	btfss	4012,1,c	;volatile
 11056  005114  D7FE               	goto	l763
 11057                           
 11058                           ;main.c: 1530: WriteUSART(c);
 11059  005116  0100               	movlb	0	; () banked
 11060  005118  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11061  00511A  ECC5  F02B         	call	_WriteUSART
 11062                           
 11063                           ;main.c: 1531: if ((0) != pcrc) crc8(pcrc, c);
 11064  00511E  0100               	movlb	0	; () banked
 11065  005120  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11066  005122  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11067  005124  E008               	bz	l767
 11068                           
 11069                           ; BSR set to: 0
 11070  005126  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11071  00512A  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11072  00512E  C06E  F069         	movff	sendEscapedUartData@c,?_crc8+2
 11073  005132  ECF2  F02A         	call	_crc8	;wreg free
 11074  005136                     l767:
 11075                           
 11076                           ; BSR set to: 0
 11077  005136  0012               	return	
 11078  005138                     __end_of_sendEscapedUartData:
 11079                           	opt stack 0
 11080                           tblptru	equ	0xFF8
 11081                           tblptrh	equ	0xFF7
 11082                           tblptrl	equ	0xFF6
 11083                           tablat	equ	0xFF5
 11084                           prodh	equ	0xFF4
 11085                           prodl	equ	0xFF3
 11086                           intcon	equ	0xFF2
 11087                           indf0	equ	0xFEF
 11088                           postinc0	equ	0xFEE
 11089                           fsr0h	equ	0xFEA
 11090                           fsr0l	equ	0xFE9
 11091                           wreg	equ	0xFE8
 11092                           indf1	equ	0xFE7
 11093                           postinc1	equ	0xFE6
 11094                           postdec1	equ	0xFE5
 11095                           fsr1h	equ	0xFE2
 11096                           fsr1l	equ	0xFE1
 11097                           indf2	equ	0xFDF
 11098                           postinc2	equ	0xFDE
 11099                           postdec2	equ	0xFDD
 11100                           plusw2	equ	0xFDB
 11101                           fsr2h	equ	0xFDA
 11102                           fsr2l	equ	0xFD9
 11103                           status	equ	0xFD8
 11104                           
 11105 ;; *************** function _crc8 *****************
 11106 ;; Defined at:
 11107 ;;		line 47 in file "crc8.c"
 11108 ;; Parameters:    Size  Location     Type
 11109 ;;  crc             2    7[BANK0 ] PTR unsigned char 
 11110 ;;		 -> calcCRC@crc(1), sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), 
 11111 ;;		 -> receiveSendEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@cr
      +c(1), 
 11112 ;;		 -> sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 11113 ;;  m               1    9[BANK0 ] unsigned char 
 11114 ;; Auto vars:     Size  Location     Type
 11115 ;;		None
 11116 ;; Return value:  Size  Location     Type
 11117 ;;		None               void
 11118 ;; Registers used:
 11119 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11120 ;; Tracked objects:
 11121 ;;		On entry : F/0
 11122 ;;		On exit  : F/0
 11123 ;;		Unchanged: 0/0
 11124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11125 ;;      Params:         0       3       0       0       0       0       0
 11126 ;;      Locals:         0       0       0       0       0       0       0
 11127 ;;      Temps:          0       2       0       0       0       0       0
 11128 ;;      Totals:         0       5       0       0       0       0       0
 11129 ;;Total ram usage:        5 bytes
 11130 ;; Hardware stack levels used:    1
 11131 ;; Hardware stack levels required when called:    4
 11132 ;; This function calls:
 11133 ;;		_init_crc8
 11134 ;; This function is called by:
 11135 ;;		_sendEscapedUartData
 11136 ;;		_sendVSCPDriverErrorFrame
 11137 ;;		_sendVSCPDriverAck
 11138 ;;		_sendVSCPDriverNack
 11139 ;;		_sendVSCPDriverCommandReply
 11140 ;;		_receiveSendEventCANAL
 11141 ;;		_receiveSendMultiEventCANAL
 11142 ;;		_sendVSCPModeCapabilities
 11143 ;;		_calcCRC
 11144 ;; This function uses a non-reentrant model
 11145 ;;
 11146                           
 11147                           	psect	text20
 11148  0055E4                     __ptext20:
 11149                           	opt stack 0
 11150  0055E4                     _crc8:
 11151                           	opt stack 24
 11152                           
 11153                           ; BSR set to: 0
 11154                           ;crc8.c: 48: if ( !made_table ) {
 11155                           
 11156                           ; BSR set to: 0
 11157                           ;incstack = 0
 11158                           ;incstack = 0
 11159  0055E4  5038               	movf	_made_table+1,w,c
 11160  0055E6  1037               	iorwf	_made_table,w,c
 11161  0055E8  B4D8               	btfsc	status,2,c
 11162                           
 11163                           ; BSR set to: 0
 11164                           ;crc8.c: 49: init_crc8();
 11165  0055EA  EC71  F027         	call	_init_crc8	;wreg free
 11166                           
 11167                           ; BSR set to: 0
 11168                           ;crc8.c: 50: }
 11169                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 11170  0055EE  C067  FFD9         	movff	crc8@crc,fsr2l
 11171  0055F2  C068  FFDA         	movff	crc8@crc+1,fsr2h
 11172  0055F6  50DF               	movf	indf2,w,c
 11173  0055F8  1969               	xorwf	crc8@m& (0+255),w,b
 11174  0055FA  6F6A               	movwf	??_crc8& (0+255),b
 11175  0055FC  6B6B               	clrf	(??_crc8+1)& (0+255),b
 11176  0055FE  0E00               	movlw	low _crc8_table
 11177  005600  0100               	movlb	0	; () banked
 11178  005602  256A               	addwf	??_crc8& (0+255),w,b
 11179  005604  6ED9               	movwf	fsr2l,c
 11180  005606  0E03               	movlw	high _crc8_table
 11181  005608  216B               	addwfc	(??_crc8+1)& (0+255),w,b
 11182  00560A  6EDA               	movwf	fsr2h,c
 11183  00560C  C067  FFE1         	movff	crc8@crc,fsr1l
 11184  005610  C068  FFE2         	movff	crc8@crc+1,fsr1h
 11185  005614  CFDF FFE7          	movff	indf2,indf1
 11186                           
 11187                           ; BSR set to: 0
 11188  005618  0012               	return	
 11189  00561A                     __end_of_crc8:
 11190                           	opt stack 0
 11191                           tblptru	equ	0xFF8
 11192                           tblptrh	equ	0xFF7
 11193                           tblptrl	equ	0xFF6
 11194                           tablat	equ	0xFF5
 11195                           prodh	equ	0xFF4
 11196                           prodl	equ	0xFF3
 11197                           intcon	equ	0xFF2
 11198                           indf0	equ	0xFEF
 11199                           postinc0	equ	0xFEE
 11200                           fsr0h	equ	0xFEA
 11201                           fsr0l	equ	0xFE9
 11202                           wreg	equ	0xFE8
 11203                           indf1	equ	0xFE7
 11204                           postinc1	equ	0xFE6
 11205                           postdec1	equ	0xFE5
 11206                           fsr1h	equ	0xFE2
 11207                           fsr1l	equ	0xFE1
 11208                           indf2	equ	0xFDF
 11209                           postinc2	equ	0xFDE
 11210                           postdec2	equ	0xFDD
 11211                           plusw2	equ	0xFDB
 11212                           fsr2h	equ	0xFDA
 11213                           fsr2l	equ	0xFD9
 11214                           status	equ	0xFD8
 11215                           
 11216 ;; *************** function _init_crc8 *****************
 11217 ;; Defined at:
 11218 ;;		line 25 in file "crc8.c"
 11219 ;; Parameters:    Size  Location     Type
 11220 ;;		None
 11221 ;; Auto vars:     Size  Location     Type
 11222 ;;  i               2    5[BANK0 ] int 
 11223 ;;  j               2    2[BANK0 ] int 
 11224 ;;  crc             1    4[BANK0 ] unsigned char 
 11225 ;; Return value:  Size  Location     Type
 11226 ;;		None               void
 11227 ;; Registers used:
 11228 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11229 ;; Tracked objects:
 11230 ;;		On entry : F/0
 11231 ;;		On exit  : F/0
 11232 ;;		Unchanged: 0/0
 11233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11234 ;;      Params:         0       0       0       0       0       0       0
 11235 ;;      Locals:         0       7       0       0       0       0       0
 11236 ;;      Temps:          0       0       0       0       0       0       0
 11237 ;;      Totals:         0       7       0       0       0       0       0
 11238 ;;Total ram usage:        7 bytes
 11239 ;; Hardware stack levels used:    1
 11240 ;; Hardware stack levels required when called:    3
 11241 ;; This function calls:
 11242 ;;		Nothing
 11243 ;; This function is called by:
 11244 ;;		_main
 11245 ;;		_crc8
 11246 ;; This function uses a non-reentrant model
 11247 ;;
 11248                           
 11249                           	psect	text21
 11250  004EE2                     __ptext21:
 11251                           	opt stack 0
 11252  004EE2                     _init_crc8:
 11253                           	opt stack 24
 11254                           
 11255                           ; BSR set to: 0
 11256                           ;crc8.c: 26: int i,j;
 11257                           ;crc8.c: 27: unsigned char crc;
 11258                           ;crc8.c: 29: if (!made_table) {
 11259                           
 11260                           ; BSR set to: 0
 11261                           ;incstack = 0
 11262                           ;incstack = 0
 11263  004EE2  5038               	movf	_made_table+1,w,c
 11264  004EE4  1037               	iorwf	_made_table,w,c
 11265  004EE6  E131               	bnz	l1571
 11266                           
 11267                           ; BSR set to: 0
 11268                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 11269  004EE8  6B65               	clrf	init_crc8@i& (0+255),b
 11270  004EEA  6B66               	clrf	(init_crc8@i+1)& (0+255),b
 11271  004EEC                     l1563:
 11272                           
 11273                           ; BSR set to: 0
 11274                           ;crc8.c: 31: crc = i;
 11275  004EEC  C065  F064         	movff	init_crc8@i,init_crc8@crc
 11276                           
 11277                           ;crc8.c: 32: for (j=0; j<8; j++) {
 11278  004EF0  6B62               	clrf	init_crc8@j& (0+255),b
 11279  004EF2  6B63               	clrf	(init_crc8@j+1)& (0+255),b
 11280  004EF4                     l1565:
 11281                           
 11282                           ; BSR set to: 0
 11283                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 11284  004EF4  BF64               	btfsc	init_crc8@crc& (0+255),7,b
 11285  004EF6  D003               	goto	l9905
 11286                           
 11287                           ; BSR set to: 0
 11288  004EF8  6B60               	clrf	_init_crc8$2082& (0+255),b
 11289  004EFA  6B61               	clrf	(_init_crc8$2082+1)& (0+255),b
 11290  004EFC  D003               	goto	l9907
 11291  004EFE                     l9905:
 11292                           
 11293                           ; BSR set to: 0
 11294  004EFE  6B61               	clrf	(_init_crc8$2082+1)& (0+255),b
 11295  004F00  0E07               	movlw	7
 11296  004F02  6F60               	movwf	_init_crc8$2082& (0+255),b
 11297  004F04                     l9907:
 11298                           
 11299                           ; BSR set to: 0
 11300  004F04  5164               	movf	init_crc8@crc& (0+255),w,b
 11301  004F06  2564               	addwf	init_crc8@crc& (0+255),w,b
 11302  004F08  1960               	xorwf	_init_crc8$2082& (0+255),w,b
 11303  004F0A  6F64               	movwf	init_crc8@crc& (0+255),b
 11304                           
 11305                           ; BSR set to: 0
 11306  004F0C  4B62               	infsnz	init_crc8@j& (0+255),f,b
 11307  004F0E  2B63               	incf	(init_crc8@j+1)& (0+255),f,b
 11308                           
 11309                           ; BSR set to: 0
 11310  004F10  5163               	movf	(init_crc8@j+1)& (0+255),w,b
 11311  004F12  0A80               	xorlw	128
 11312  004F14  0F80               	addlw	-128
 11313  004F16  0E08               	movlw	8
 11314  004F18  B4D8               	btfsc	status,2,c
 11315  004F1A  5D62               	subwf	init_crc8@j& (0+255),w,b
 11316  004F1C  E3EB               	bnc	l1565
 11317                           
 11318                           ; BSR set to: 0
 11319                           ;crc8.c: 34: }
 11320                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 11321  004F1E  0E00               	movlw	low _crc8_table
 11322  004F20  0100               	movlb	0	; () banked
 11323  004F22  2565               	addwf	init_crc8@i& (0+255),w,b
 11324  004F24  6ED9               	movwf	fsr2l,c
 11325  004F26  0E03               	movlw	high _crc8_table
 11326  004F28  2166               	addwfc	(init_crc8@i+1)& (0+255),w,b
 11327  004F2A  6EDA               	movwf	fsr2h,c
 11328  004F2C  C064  FFDF         	movff	init_crc8@crc,indf2
 11329                           
 11330                           ; BSR set to: 0
 11331  004F30  4B65               	infsnz	init_crc8@i& (0+255),f,b
 11332  004F32  2B66               	incf	(init_crc8@i+1)& (0+255),f,b
 11333                           
 11334                           ; BSR set to: 0
 11335  004F34  5166               	movf	(init_crc8@i+1)& (0+255),w,b
 11336  004F36  0A80               	xorlw	128
 11337  004F38  0F7F               	addlw	-129
 11338  004F3A  0E00               	movlw	0
 11339  004F3C  B4D8               	btfsc	status,2,c
 11340  004F3E  5D65               	subwf	init_crc8@i& (0+255),w,b
 11341  004F40  E3D5               	bnc	l1563
 11342                           
 11343                           ; BSR set to: 0
 11344                           ;crc8.c: 37: }
 11345                           ;crc8.c: 38: made_table=1;
 11346  004F42  0E00               	movlw	0
 11347  004F44  6E38               	movwf	_made_table+1,c
 11348  004F46  0E01               	movlw	1
 11349  004F48  6E37               	movwf	_made_table,c
 11350  004F4A                     l1571:
 11351                           
 11352                           ; BSR set to: 0
 11353  004F4A  0012               	return	
 11354  004F4C                     __end_of_init_crc8:
 11355                           	opt stack 0
 11356                           tblptru	equ	0xFF8
 11357                           tblptrh	equ	0xFF7
 11358                           tblptrl	equ	0xFF6
 11359                           tablat	equ	0xFF5
 11360                           prodh	equ	0xFF4
 11361                           prodl	equ	0xFF3
 11362                           intcon	equ	0xFF2
 11363                           indf0	equ	0xFEF
 11364                           postinc0	equ	0xFEE
 11365                           fsr0h	equ	0xFEA
 11366                           fsr0l	equ	0xFE9
 11367                           wreg	equ	0xFE8
 11368                           indf1	equ	0xFE7
 11369                           postinc1	equ	0xFE6
 11370                           postdec1	equ	0xFE5
 11371                           fsr1h	equ	0xFE2
 11372                           fsr1l	equ	0xFE1
 11373                           indf2	equ	0xFDF
 11374                           postinc2	equ	0xFDE
 11375                           postdec2	equ	0xFDD
 11376                           plusw2	equ	0xFDB
 11377                           fsr2h	equ	0xFDA
 11378                           fsr2l	equ	0xFD9
 11379                           status	equ	0xFD8
 11380                           
 11381 ;; *************** function _doModeVerbose *****************
 11382 ;; Defined at:
 11383 ;;		line 492 in file "main.c"
 11384 ;; Parameters:    Size  Location     Type
 11385 ;;		None
 11386 ;; Auto vars:     Size  Location     Type
 11387 ;;  preg            2    6[BANK2 ] PTR unsigned char 
 11388 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 11389 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 11390 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 11391 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 11392 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11393 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11394 ;;  preg            2    4[BANK2 ] PTR unsigned char 
 11395 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 11396 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 11397 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 11398 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 11399 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11400 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11401 ;;  id              4   35[BANK2 ] unsigned long 
 11402 ;;  p               2   59[BANK2 ] PTR unsigned char 
 11403 ;;		 -> NULL(0), cmdbuf(80), 
 11404 ;;  mask_class      2   10[BANK2 ] unsigned short 
 11405 ;;  maskno          1   40[BANK2 ] unsigned char 
 11406 ;;  mask_nodeid     1   19[BANK2 ] unsigned char 
 11407 ;;  mask_type       1   18[BANK2 ] unsigned char 
 11408 ;;  mask_priorit    1   17[BANK2 ] unsigned char 
 11409 ;;  id              4    0[BANK2 ] unsigned long 
 11410 ;;  p               2   57[BANK2 ] PTR unsigned char 
 11411 ;;		 -> NULL(0), cmdbuf(80), 
 11412 ;;  filter_class    2    8[BANK2 ] unsigned short 
 11413 ;;  filterno        1   39[BANK2 ] unsigned char 
 11414 ;;  filter_nodei    1   16[BANK2 ] unsigned char 
 11415 ;;  filter_type     1   15[BANK2 ] unsigned char 
 11416 ;;  filter_prior    1   14[BANK2 ] unsigned char 
 11417 ;;  nodeid          1   47[BANK2 ] unsigned char 
 11418 ;;  p               2   52[BANK2 ] PTR unsigned char 
 11419 ;;		 -> NULL(0), cmdbuf(80), 
 11420 ;;  value           1   41[BANK2 ] unsigned char 
 11421 ;;  reg             1   34[BANK2 ] unsigned char 
 11422 ;;  page            1   33[BANK2 ] unsigned char 
 11423 ;;  nodeid          1   13[BANK2 ] unsigned char 
 11424 ;;  p               2   50[BANK2 ] PTR unsigned char 
 11425 ;;		 -> NULL(0), cmdbuf(80), 
 11426 ;;  value           1   49[BANK2 ] unsigned char 
 11427 ;;  i               1   48[BANK2 ] unsigned char 
 11428 ;;  reg             1   46[BANK2 ] unsigned char 
 11429 ;;  page            1   45[BANK2 ] unsigned char 
 11430 ;;  count           1   43[BANK2 ] unsigned char 
 11431 ;;  rv              1   32[BANK2 ] enum E15660
 11432 ;;  nodeid          1   12[BANK2 ] unsigned char 
 11433 ;;  p               2   55[BANK2 ] PTR unsigned char 
 11434 ;;		 -> NULL(0), cmdbuf(80), 
 11435 ;;  ifmode          1   54[BANK2 ] enum E16362
 11436 ;;  c               1   44[BANK2 ] unsigned char 
 11437 ;;  i               1   42[BANK2 ] unsigned char 
 11438 ;; Return value:  Size  Location     Type
 11439 ;;		None               void
 11440 ;; Registers used:
 11441 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11442 ;; Tracked objects:
 11443 ;;		On entry : 0/0
 11444 ;;		On exit  : 0/0
 11445 ;;		Unchanged: 0/0
 11446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11447 ;;      Params:         0       0       0       0       0       0       0
 11448 ;;      Locals:         0       0       0      61       0       0       0
 11449 ;;      Temps:          0       0      20       0       0       0       0
 11450 ;;      Totals:         0       0      20      61       0       0       0
 11451 ;;Total ram usage:       81 bytes
 11452 ;; Hardware stack levels used:    1
 11453 ;; Hardware stack levels required when called:   10
 11454 ;; This function calls:
 11455 ;;		_putsUSART
 11456 ;;		_printFirmwareVersion
 11457 ;;		_fifo_read
 11458 ;;		_writeEEPROM
 11459 ;;		_receivePrintEventVerbose
 11460 ;;		_stristr
 11461 ;;		_ECANSetOperationMode
 11462 ;;		_strtok
 11463 ;;		_atoi
 11464 ;;		_memset
 11465 ;;		_sendVSCPFrame
 11466 ;;		_printStatistics
 11467 ;;		_printErrors
 11468 ;;		_printHelp
 11469 ;;		_findNodes
 11470 ;;		_strcpy
 11471 ;;		_strchr
 11472 ;;		_readRegisterExtended
 11473 ;;		_sprintf
 11474 ;;		_WriteUSART
 11475 ;;		_printBinary
 11476 ;;		_writeRegisterExtended
 11477 ;;		_printNodeFirmwareVersion
 11478 ;;		_printGUID
 11479 ;;		_printMDF
 11480 ;;		_setFilter
 11481 ;;		__CANIDToRegs
 11482 ;; This function is called by:
 11483 ;;		_main
 11484 ;; This function uses a non-reentrant model
 11485 ;;
 11486                           
 11487                           	psect	text22
 11488  00026C                     __ptext22:
 11489                           	opt stack 0
 11490  00026C                     _doModeVerbose:
 11491                           	opt stack 20
 11492                           
 11493                           ;main.c: 493: uint8_t c;
 11494                           ;main.c: 494: uint8_t i;
 11495                           ;main.c: 497: if (!bSilent) {
 11496                           
 11497                           ; BSR set to: 0
 11498                           ;incstack = 0
 11499                           ;incstack = 0
 11500  00026C  0101               	movlb	1	; () banked
 11501  00026E  6701               	tstfsz	_bSilent& (0+255),b
 11502  000270  D002               	goto	l10035
 11503                           
 11504                           ; BSR set to: 1
 11505                           ;main.c: 498: receivePrintEventVerbose();
 11506  000272  ECEA  F011         	call	_receivePrintEventVerbose	;wreg free
 11507  000276                     l10035:
 11508                           
 11509                           ;main.c: 499: }
 11510                           ;main.c: 502: (INTCONbits.GIE = 0);
 11511  000276  9EF2               	bcf	intcon,7,c	;volatile
 11512                           
 11513                           ;main.c: 504: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
 11514  000278  0E02               	movlw	high doModeVerbose@c
 11515  00027A  0100               	movlb	0	; () banked
 11516  00027C  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 11517  00027E  0EAC               	movlw	low doModeVerbose@c
 11518  000280  6F60               	movwf	?_fifo_read& (0+255),b
 11519  000282  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 11520  000284  0E01               	movlw	1
 11521  000286  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 11522  000288  0E48               	movlw	_serialInputFifo& (0+255)
 11523  00028A  EC9C  F021         	call	_fifo_read
 11524  00028E  0560               	decf	?_fifo_read& (0+255),w,b
 11525  000290  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 11526  000292  E002 EF7E  F00A    	bnz	l10651
 11527                           
 11528                           ; BSR set to: 0
 11529                           ;main.c: 507: (INTCONbits.GIE = 1);
 11530  000298  8EF2               	bsf	intcon,7,c	;volatile
 11531                           
 11532                           ; BSR set to: 0
 11533                           ;main.c: 510: cmdbuf[ pos ] = c;
 11534  00029A  ECF3  F016         	call	PL20	;call to abstracted procedure
 11535  00029E  C2AC  FFDF         	movff	doModeVerbose@c,indf2
 11536                           
 11537                           ; BSR set to: 2
 11538                           ;main.c: 511: pos++;
 11539  0002A2  2B02               	incf	_pos& (0+255),f,b
 11540                           
 11541                           ; BSR set to: 1
 11542                           ;main.c: 513: if (pos >= 128u) {
 11543  0002A4  0E7F               	movlw	127
 11544  0002A6  6502               	cpfsgt	_pos& (0+255),b
 11545  0002A8  D001               	goto	l10049
 11546                           
 11547                           ; BSR set to: 1
 11548                           ;main.c: 517: pos = 0;
 11549  0002AA  6B02               	clrf	_pos& (0+255),b
 11550  0002AC                     l10049:
 11551                           
 11552                           ; BSR set to: 1
 11553                           ;main.c: 519: }
 11554                           ;main.c: 522: if (0x0d == c) {
 11555  0002AC  0102               	movlb	2	; () banked
 11556  0002AE  51AC               	movf	doModeVerbose@c& (0+255),w,b
 11557  0002B0  0A0D               	xorlw	13
 11558  0002B2  E002 EF7E  F00A    	bnz	l10651
 11559                           
 11560                           ; BSR set to: 2
 11561                           ;main.c: 524: cmdbuf[ pos ] = 0;
 11562  0002B8  ECF3  F016         	call	PL20	;call to abstracted procedure
 11563  0002BC  6ADF               	clrf	indf2,c
 11564                           
 11565                           ; BSR set to: 1
 11566                           ;main.c: 527: if (cmdbuf == stristr(cmdbuf, "BOOT")) {
 11567  0002BE  0100               	movlb	0	; () banked
 11568  0002C0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11569  0002C2  0E04               	movlw	low _cmdbuf
 11570  0002C4  6F6D               	movwf	?_stristr& (0+255),b
 11571  0002C6  0E7F               	movlw	high STR_6
 11572  0002C8  6F70               	movwf	(?_stristr+3)& (0+255),b
 11573  0002CA  0ECF               	movlw	low STR_6
 11574  0002CC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11575  0002CE  EC48  F026         	call	_stristr	;wreg free
 11576  0002D2  EC80  F00A         	call	PL2	;call to abstracted procedure
 11577  0002D6  E104               	bnz	u12175
 11578  0002D8  0100               	movlb	0	; () banked
 11579  0002DA  516D               	movf	?_stristr& (0+255),w,b
 11580  0002DC  0101               	movlb	1	; () banked
 11581  0002DE  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11582  0002E0                     u12175:
 11583  0002E0  E111               	bnz	l10059
 11584                           
 11585                           ; BSR set to: 1
 11586                           ;main.c: 528: putsUSART((char *) "Will enter bootloader now...\r\n");
 11587  0002E2  0E7A               	movlw	high STR_7
 11588  0002E4  0100               	movlb	0	; () banked
 11589  0002E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11590  0002E8  0EEC               	movlw	low STR_7
 11591  0002EA  6F61               	movwf	?_putsUSART& (0+255),b
 11592  0002EC  ECF6  F028         	call	_putsUSART	;wreg free
 11593                           
 11594                           ;main.c: 529: writeEEPROM(0x00, 0xFF);
 11595  0002F0  0100               	movlb	0	; () banked
 11596  0002F2  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 11597  0002F4  6B60               	clrf	?_writeEEPROM& (0+255),b
 11598  0002F6  0EFF               	movlw	255
 11599  0002F8  6962               	setf	(?_writeEEPROM+2)& (0+255),b
 11600  0002FA  EC6C  F02B         	call	_writeEEPROM	;wreg free
 11601  0002FE  00FF               	reset		;# 
 11602                           
 11603                           ;main.c: 531: }
 11604  000300  EF70  F00A         	goto	l10647
 11605  000304                     l10059:
 11606                           
 11607                           ; BSR set to: 1
 11608                           ;main.c: 533: else if (cmdbuf == stristr(cmdbuf, "OPEN")) {
 11609  000304  0E01               	movlw	high _cmdbuf
 11610  000306  0100               	movlb	0	; () banked
 11611  000308  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11612  00030A  0E04               	movlw	low _cmdbuf
 11613  00030C  6F6D               	movwf	?_stristr& (0+255),b
 11614  00030E  0E7F               	movlw	high STR_8
 11615  000310  6F70               	movwf	(?_stristr+3)& (0+255),b
 11616  000312  0EB6               	movlw	low STR_8
 11617  000314  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11618  000316  EC48  F026         	call	_stristr	;wreg free
 11619  00031A  EC80  F00A         	call	PL2	;call to abstracted procedure
 11620  00031E  E104               	bnz	u12185
 11621  000320  0100               	movlb	0	; () banked
 11622  000322  516D               	movf	?_stristr& (0+255),w,b
 11623  000324  0101               	movlb	1	; () banked
 11624  000326  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11625  000328                     u12185:
 11626  000328  E10C               	bnz	l10067
 11627                           
 11628                           ; BSR set to: 1
 11629                           ;main.c: 534: bSilent = 0;
 11630  00032A  6B01               	clrf	_bSilent& (0+255),b
 11631                           
 11632                           ; BSR set to: 1
 11633                           ;main.c: 535: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11634  00032C  0E00               	movlw	0
 11635  00032E  ECAD  F02B         	call	_ECANSetOperationMode
 11636                           
 11637                           ; BSR set to: 0
 11638                           ;main.c: 536: putsUSART((char *) "+OK\r\n");
 11639  000332  0E7F               	movlw	high STR_9
 11640  000334  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11641  000336  0E7F               	movlw	low STR_9
 11642  000338  6F61               	movwf	?_putsUSART& (0+255),b
 11643  00033A  ECF6  F028         	call	_putsUSART	;wreg free
 11644                           
 11645                           ;main.c: 537: }
 11646  00033E  EF70  F00A         	goto	l10647
 11647  000342                     l10067:
 11648                           
 11649                           ; BSR set to: 1
 11650                           ;main.c: 539: else if (cmdbuf == stristr(cmdbuf, "SILENT")) {
 11651  000342  0E01               	movlw	high _cmdbuf
 11652  000344  0100               	movlb	0	; () banked
 11653  000346  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11654  000348  0E04               	movlw	low _cmdbuf
 11655  00034A  6F6D               	movwf	?_stristr& (0+255),b
 11656  00034C  0E7F               	movlw	high STR_10
 11657  00034E  6F70               	movwf	(?_stristr+3)& (0+255),b
 11658  000350  0E5D               	movlw	low STR_10
 11659  000352  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11660  000354  EC48  F026         	call	_stristr	;wreg free
 11661  000358  EC80  F00A         	call	PL2	;call to abstracted procedure
 11662  00035C  E104               	bnz	u12195
 11663  00035E  0100               	movlb	0	; () banked
 11664  000360  516D               	movf	?_stristr& (0+255),w,b
 11665  000362  0101               	movlb	1	; () banked
 11666  000364  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11667  000366                     u12195:
 11668  000366  E10D               	bnz	l10075
 11669                           
 11670                           ; BSR set to: 1
 11671                           ;main.c: 540: bSilent = 1;
 11672  000368  0E01               	movlw	1
 11673  00036A  6F01               	movwf	_bSilent& (0+255),b
 11674                           
 11675                           ; BSR set to: 1
 11676                           ;main.c: 541: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11677  00036C  0E00               	movlw	0
 11678  00036E  ECAD  F02B         	call	_ECANSetOperationMode
 11679                           
 11680                           ; BSR set to: 0
 11681                           ;main.c: 542: putsUSART((char *) "+OK\r\n");
 11682  000372  0E7F               	movlw	high STR_9
 11683  000374  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11684  000376  0E7F               	movlw	low STR_9
 11685  000378  6F61               	movwf	?_putsUSART& (0+255),b
 11686  00037A  ECF6  F028         	call	_putsUSART	;wreg free
 11687                           
 11688                           ;main.c: 543: }
 11689  00037E  EF70  F00A         	goto	l10647
 11690  000382                     l10075:
 11691                           
 11692                           ; BSR set to: 1
 11693                           ;main.c: 545: else if (cmdbuf == stristr(cmdbuf, "CLOSE")) {
 11694  000382  0E01               	movlw	high _cmdbuf
 11695  000384  0100               	movlb	0	; () banked
 11696  000386  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11697  000388  0E04               	movlw	low _cmdbuf
 11698  00038A  6F6D               	movwf	?_stristr& (0+255),b
 11699  00038C  0E7F               	movlw	high STR_12
 11700  00038E  6F70               	movwf	(?_stristr+3)& (0+255),b
 11701  000390  0E91               	movlw	low STR_12
 11702  000392  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11703  000394  EC48  F026         	call	_stristr	;wreg free
 11704  000398  EC80  F00A         	call	PL2	;call to abstracted procedure
 11705  00039C  E104               	bnz	u12205
 11706  00039E  0100               	movlb	0	; () banked
 11707  0003A0  516D               	movf	?_stristr& (0+255),w,b
 11708  0003A2  0101               	movlb	1	; () banked
 11709  0003A4  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11710  0003A6                     u12205:
 11711  0003A6  E10D               	bnz	l10083
 11712                           
 11713                           ; BSR set to: 1
 11714                           ;main.c: 546: bSilent = 1;
 11715  0003A8  0E01               	movlw	1
 11716  0003AA  6F01               	movwf	_bSilent& (0+255),b
 11717                           
 11718                           ; BSR set to: 1
 11719                           ;main.c: 547: ECANSetOperationMode(0x20);
 11720  0003AC  0E20               	movlw	32
 11721  0003AE  ECAD  F02B         	call	_ECANSetOperationMode
 11722                           
 11723                           ; BSR set to: 0
 11724                           ;main.c: 548: putsUSART((char *) "+OK\r\n");
 11725  0003B2  0E7F               	movlw	high STR_9
 11726  0003B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11727  0003B6  0E7F               	movlw	low STR_9
 11728  0003B8  6F61               	movwf	?_putsUSART& (0+255),b
 11729  0003BA  ECF6  F028         	call	_putsUSART	;wreg free
 11730                           
 11731                           ;main.c: 549: }
 11732  0003BE  EF70  F00A         	goto	l10647
 11733  0003C2                     l10083:
 11734                           
 11735                           ; BSR set to: 1
 11736                           ;main.c: 551: else if (cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 11737  0003C2  0E01               	movlw	high _cmdbuf
 11738  0003C4  0100               	movlb	0	; () banked
 11739  0003C6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11740  0003C8  0E04               	movlw	low _cmdbuf
 11741  0003CA  6F6D               	movwf	?_stristr& (0+255),b
 11742  0003CC  0E7E               	movlw	high STR_14
 11743  0003CE  6F70               	movwf	(?_stristr+3)& (0+255),b
 11744  0003D0  0ECC               	movlw	low STR_14
 11745  0003D2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11746  0003D4  EC48  F026         	call	_stristr	;wreg free
 11747  0003D8  EC80  F00A         	call	PL2	;call to abstracted procedure
 11748  0003DC  E104               	bnz	u12215
 11749  0003DE  0100               	movlb	0	; () banked
 11750  0003E0  516D               	movf	?_stristr& (0+255),w,b
 11751  0003E2  0101               	movlb	1	; () banked
 11752  0003E4  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11753  0003E6                     u12215:
 11754  0003E6  E10C               	bnz	l10091
 11755                           
 11756                           ; BSR set to: 1
 11757                           ;main.c: 552: bSilent = 0;
 11758  0003E8  6B01               	clrf	_bSilent& (0+255),b
 11759                           
 11760                           ; BSR set to: 1
 11761                           ;main.c: 553: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 11762  0003EA  0E40               	movlw	64
 11763  0003EC  ECAD  F02B         	call	_ECANSetOperationMode
 11764                           
 11765                           ; BSR set to: 0
 11766                           ;main.c: 554: putsUSART((char *) "+OK\r\n");
 11767  0003F0  0E7F               	movlw	high STR_9
 11768  0003F2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11769  0003F4  0E7F               	movlw	low STR_9
 11770  0003F6  6F61               	movwf	?_putsUSART& (0+255),b
 11771  0003F8  ECF6  F028         	call	_putsUSART	;wreg free
 11772                           
 11773                           ;main.c: 555: }
 11774  0003FC  EF70  F00A         	goto	l10647
 11775  000400                     l10091:
 11776                           
 11777                           ; BSR set to: 1
 11778                           ;main.c: 557: else if (cmdbuf == stristr(cmdbuf, "LISTEN")) {
 11779  000400  0E01               	movlw	high _cmdbuf
 11780  000402  0100               	movlb	0	; () banked
 11781  000404  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11782  000406  0E04               	movlw	low _cmdbuf
 11783  000408  6F6D               	movwf	?_stristr& (0+255),b
 11784  00040A  0E7F               	movlw	high STR_16
 11785  00040C  6F70               	movwf	(?_stristr+3)& (0+255),b
 11786  00040E  0E4F               	movlw	low STR_16
 11787  000410  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11788  000412  EC48  F026         	call	_stristr	;wreg free
 11789  000416  EC80  F00A         	call	PL2	;call to abstracted procedure
 11790  00041A  E104               	bnz	u12225
 11791  00041C  0100               	movlb	0	; () banked
 11792  00041E  516D               	movf	?_stristr& (0+255),w,b
 11793  000420  0101               	movlb	1	; () banked
 11794  000422  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11795  000424                     u12225:
 11796  000424  E10C               	bnz	l10099
 11797                           
 11798                           ; BSR set to: 1
 11799                           ;main.c: 558: bSilent = 0;
 11800  000426  6B01               	clrf	_bSilent& (0+255),b
 11801                           
 11802                           ; BSR set to: 1
 11803                           ;main.c: 559: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 11804  000428  0E60               	movlw	96
 11805  00042A  ECAD  F02B         	call	_ECANSetOperationMode
 11806                           
 11807                           ; BSR set to: 0
 11808                           ;main.c: 560: putsUSART((char *) "+OK\r\n");
 11809  00042E  0E7F               	movlw	high STR_9
 11810  000430  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11811  000432  0E7F               	movlw	low STR_9
 11812  000434  6F61               	movwf	?_putsUSART& (0+255),b
 11813  000436  ECF6  F028         	call	_putsUSART	;wreg free
 11814                           
 11815                           ;main.c: 561: }
 11816  00043A  EF70  F00A         	goto	l10647
 11817  00043E                     l10099:
 11818                           
 11819                           ; BSR set to: 1
 11820                           ;main.c: 563: else if (cmdbuf == stristr(cmdbuf, "VERSION")) {
 11821  00043E  0E01               	movlw	high _cmdbuf
 11822  000440  0100               	movlb	0	; () banked
 11823  000442  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11824  000444  0E04               	movlw	low _cmdbuf
 11825  000446  6F6D               	movwf	?_stristr& (0+255),b
 11826  000448  0E7F               	movlw	high STR_18
 11827  00044A  6F70               	movwf	(?_stristr+3)& (0+255),b
 11828  00044C  0E0D               	movlw	low STR_18
 11829  00044E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11830  000450  EC48  F026         	call	_stristr	;wreg free
 11831  000454  EC80  F00A         	call	PL2	;call to abstracted procedure
 11832  000458  E104               	bnz	u12235
 11833  00045A  0100               	movlb	0	; () banked
 11834  00045C  516D               	movf	?_stristr& (0+255),w,b
 11835  00045E  0101               	movlb	1	; () banked
 11836  000460  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11837  000462                     u12235:
 11838  000462  E10B               	bnz	l10105
 11839                           
 11840                           ; BSR set to: 1
 11841                           ;main.c: 564: printFirmwareVersion();
 11842  000464  EC39  F025         	call	_printFirmwareVersion	;wreg free
 11843                           
 11844                           ;main.c: 565: putsUSART((char *) "+OK\r\n");
 11845  000468  0E7F               	movlw	high STR_9
 11846  00046A  0100               	movlb	0	; () banked
 11847  00046C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11848  00046E  0E7F               	movlw	low STR_9
 11849  000470  6F61               	movwf	?_putsUSART& (0+255),b
 11850  000472  ECF6  F028         	call	_putsUSART	;wreg free
 11851                           
 11852                           ;main.c: 566: }
 11853  000476  EF70  F00A         	goto	l10647
 11854  00047A                     l10105:
 11855                           
 11856                           ; BSR set to: 1
 11857                           ;main.c: 567: else if (cmdbuf == stristr(cmdbuf, "IFMODE")) {
 11858  00047A  0E01               	movlw	high _cmdbuf
 11859  00047C  0100               	movlb	0	; () banked
 11860  00047E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11861  000480  0E04               	movlw	low _cmdbuf
 11862  000482  6F6D               	movwf	?_stristr& (0+255),b
 11863  000484  0E7F               	movlw	high STR_20
 11864  000486  6F70               	movwf	(?_stristr+3)& (0+255),b
 11865  000488  0E48               	movlw	low STR_20
 11866  00048A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11867  00048C  EC48  F026         	call	_stristr	;wreg free
 11868  000490  EC80  F00A         	call	PL2	;call to abstracted procedure
 11869  000494  E104               	bnz	u12245
 11870  000496  0100               	movlb	0	; () banked
 11871  000498  516D               	movf	?_stristr& (0+255),w,b
 11872  00049A  0101               	movlb	1	; () banked
 11873  00049C  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11874  00049E                     u12245:
 11875  00049E  E169               	bnz	l10141
 11876                           
 11877                           ; BSR set to: 1
 11878                           ;main.c: 568: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 11879  0004A0  506F               	movf	3951,w,c	;volatile
 11880  0004A2  0BE0               	andlw	224
 11881  0004A4  0102               	movlb	2	; () banked
 11882  0004A6  6FB6               	movwf	doModeVerbose@ifmode& (0+255),b
 11883                           
 11884                           ; BSR set to: 2
 11885                           ;main.c: 569: if ((ECAN_OP_MODE_NORMAL == ifmode) & !bSilent) {
 11886  0004A8  67B6               	tstfsz	doModeVerbose@ifmode& (0+255),b
 11887  0004AA  D00C               	goto	l10115
 11888                           
 11889                           ; BSR set to: 2
 11890  0004AC  0101               	movlb	1	; () banked
 11891  0004AE  6701               	tstfsz	_bSilent& (0+255),b
 11892  0004B0  D009               	goto	l10115
 11893                           
 11894                           ; BSR set to: 1
 11895                           ;main.c: 570: putsUSART((char *) "+OK - Normal mode\r\n");
 11896  0004B2  0E7D               	movlw	high STR_21
 11897  0004B4  0100               	movlb	0	; () banked
 11898  0004B6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11899  0004B8  0E82               	movlw	low STR_21
 11900  0004BA  6F61               	movwf	?_putsUSART& (0+255),b
 11901  0004BC  ECF6  F028         	call	_putsUSART	;wreg free
 11902                           
 11903                           ;main.c: 571: }
 11904  0004C0  EF70  F00A         	goto	l10647
 11905  0004C4                     l10115:
 11906                           
 11907                           ;main.c: 572: else if ((ECAN_OP_MODE_NORMAL == ifmode) & bSilent) {
 11908  0004C4  0102               	movlb	2	; () banked
 11909  0004C6  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11910  0004C8  0E01               	movlw	1
 11911  0004CA  A4D8               	btfss	status,2,c
 11912  0004CC  0E00               	movlw	0
 11913  0004CE  0101               	movlb	1	; () banked
 11914  0004D0  1501               	andwf	_bSilent& (0+255),w,b
 11915  0004D2  E009               	bz	l10119
 11916                           
 11917                           ; BSR set to: 1
 11918                           ;main.c: 573: putsUSART((char *) "+OK - Silent mode\r\n");
 11919  0004D4  0E7D               	movlw	high STR_22
 11920  0004D6  0100               	movlb	0	; () banked
 11921  0004D8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11922  0004DA  0E96               	movlw	low STR_22
 11923  0004DC  6F61               	movwf	?_putsUSART& (0+255),b
 11924  0004DE  ECF6  F028         	call	_putsUSART	;wreg free
 11925                           
 11926                           ;main.c: 574: }
 11927  0004E2  EF70  F00A         	goto	l10647
 11928  0004E6                     l10119:
 11929                           
 11930                           ; BSR set to: 1
 11931                           ;main.c: 575: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 11932  0004E6  0102               	movlb	2	; () banked
 11933  0004E8  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11934  0004EA  0A20               	xorlw	32
 11935  0004EC  E109               	bnz	l10123
 11936                           
 11937                           ; BSR set to: 2
 11938                           ;main.c: 576: putsUSART((char *) "+OK - Sleep mode\r\n");
 11939  0004EE  0E7D               	movlw	high STR_23
 11940  0004F0  0100               	movlb	0	; () banked
 11941  0004F2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11942  0004F4  0ED2               	movlw	low STR_23
 11943  0004F6  6F61               	movwf	?_putsUSART& (0+255),b
 11944  0004F8  ECF6  F028         	call	_putsUSART	;wreg free
 11945                           
 11946                           ;main.c: 577: }
 11947  0004FC  EF70  F00A         	goto	l10647
 11948  000500                     l10123:
 11949                           
 11950                           ; BSR set to: 2
 11951                           ;main.c: 578: else if (ECAN_OP_MODE_LOOP == ifmode) {
 11952  000500  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11953  000502  0A40               	xorlw	64
 11954  000504  E109               	bnz	l10127
 11955                           
 11956                           ; BSR set to: 2
 11957                           ;main.c: 579: putsUSART((char *) "+OK - Loopback mode\r\n");
 11958  000506  0E7D               	movlw	high STR_24
 11959  000508  0100               	movlb	0	; () banked
 11960  00050A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11961  00050C  0E05               	movlw	low STR_24
 11962  00050E  6F61               	movwf	?_putsUSART& (0+255),b
 11963  000510  ECF6  F028         	call	_putsUSART	;wreg free
 11964                           
 11965                           ;main.c: 580: }
 11966  000514  EF70  F00A         	goto	l10647
 11967  000518                     l10127:
 11968                           
 11969                           ; BSR set to: 2
 11970                           ;main.c: 581: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 11971  000518  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11972  00051A  0A60               	xorlw	96
 11973  00051C  E109               	bnz	l10131
 11974                           
 11975                           ; BSR set to: 2
 11976                           ;main.c: 582: putsUSART((char *) "+OK - Listen only mode\r\n");
 11977  00051E  0E7B               	movlw	high STR_25
 11978  000520  0100               	movlb	0	; () banked
 11979  000522  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11980  000524  0ECE               	movlw	low STR_25
 11981  000526  6F61               	movwf	?_putsUSART& (0+255),b
 11982  000528  ECF6  F028         	call	_putsUSART	;wreg free
 11983                           
 11984                           ;main.c: 583: }
 11985  00052C  EF70  F00A         	goto	l10647
 11986  000530                     l10131:
 11987                           
 11988                           ; BSR set to: 2
 11989                           ;main.c: 584: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 11990  000530  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11991  000532  0A80               	xorlw	128
 11992  000534  E109               	bnz	l10135
 11993                           
 11994                           ; BSR set to: 2
 11995                           ;main.c: 585: putsUSART((char *) "+OK - Closed mode\r\n");
 11996  000536  0E7D               	movlw	high STR_26
 11997  000538  0100               	movlb	0	; () banked
 11998  00053A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11999  00053C  0E6E               	movlw	low STR_26
 12000  00053E  6F61               	movwf	?_putsUSART& (0+255),b
 12001  000540  ECF6  F028         	call	_putsUSART	;wreg free
 12002                           
 12003                           ;main.c: 586: }
 12004  000544  EF70  F00A         	goto	l10647
 12005  000548                     l10135:
 12006                           
 12007                           ; BSR set to: 2
 12008                           ;main.c: 587: else if (ECAN_OP_MODE_BITS == ifmode) {
 12009  000548  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12010  00054A  0AE0               	xorlw	224
 12011  00054C  E109               	bnz	l10139
 12012                           
 12013                           ; BSR set to: 2
 12014                           ;main.c: 588: putsUSART((char *) "+OK - Bits mode\r\n");
 12015  00054E  0E7D               	movlw	high STR_27
 12016  000550  0100               	movlb	0	; () banked
 12017  000552  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12018  000554  0EE5               	movlw	low STR_27
 12019  000556  6F61               	movwf	?_putsUSART& (0+255),b
 12020  000558  ECF6  F028         	call	_putsUSART	;wreg free
 12021                           
 12022                           ;main.c: 589: }
 12023  00055C  EF70  F00A         	goto	l10647
 12024  000560                     l10139:
 12025                           
 12026                           ; BSR set to: 2
 12027                           ;main.c: 590: else {
 12028                           ;main.c: 591: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 12029  000560  0E7C               	movlw	high STR_28
 12030  000562  0100               	movlb	0	; () banked
 12031  000564  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12032  000566  0E48               	movlw	low STR_28
 12033  000568  6F61               	movwf	?_putsUSART& (0+255),b
 12034  00056A  ECF6  F028         	call	_putsUSART	;wreg free
 12035  00056E  EF70  F00A         	goto	l10647
 12036  000572                     l10141:
 12037                           
 12038                           ; BSR set to: 1
 12039                           ;main.c: 596: else if (cmdbuf == stristr(cmdbuf, "TX")) {
 12040  000572  0E01               	movlw	high _cmdbuf
 12041  000574  0100               	movlb	0	; () banked
 12042  000576  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12043  000578  0E04               	movlw	low _cmdbuf
 12044  00057A  6F6D               	movwf	?_stristr& (0+255),b
 12045  00057C  0E7F               	movlw	high STR_29
 12046  00057E  6F70               	movwf	(?_stristr+3)& (0+255),b
 12047  000580  0EEA               	movlw	low STR_29
 12048  000582  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12049  000584  EC48  F026         	call	_stristr	;wreg free
 12050  000588  EC80  F00A         	call	PL2	;call to abstracted procedure
 12051  00058C  E104               	bnz	u12345
 12052  00058E  0100               	movlb	0	; () banked
 12053  000590  516D               	movf	?_stristr& (0+255),w,b
 12054  000592  0101               	movlb	1	; () banked
 12055  000594  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12056  000596                     u12345:
 12057  000596  E001 D0D9          	bnz	l10195
 12058                           
 12059                           ; BSR set to: 1
 12060                           ;main.c: 598: char *p = strtok(cmdbuf, ",");
 12061  00059A  ECE3  F00A         	call	PL30	;call to abstracted procedure
 12062  00059E  ECF0  F024         	call	_strtok	;wreg free
 12063  0005A2  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12064  0005A6  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12065                           
 12066                           ; BSR set to: 0
 12067                           ;main.c: 601: vscpPriority = 3;
 12068  0005AA  0E03               	movlw	3
 12069  0005AC  0101               	movlb	1	; () banked
 12070  0005AE  6FAF               	movwf	_vscpPriority& (0+255),b
 12071                           
 12072                           ; BSR set to: 1
 12073                           ;main.c: 602: if ((0) != p) {
 12074  0005B0  0102               	movlb	2	; () banked
 12075  0005B2  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12076  0005B4  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12077  0005B6  E009               	bz	l10151
 12078                           
 12079                           ; BSR set to: 2
 12080                           ;main.c: 603: vscpPriority = atoi(p);
 12081  0005B8  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12082  0005BC  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12083  0005C0  EC86  F01D         	call	_atoi	;wreg free
 12084  0005C4  5166               	movf	?_atoi& (0+255),w,b
 12085  0005C6  0101               	movlb	1	; () banked
 12086  0005C8  6FAF               	movwf	_vscpPriority& (0+255),b
 12087  0005CA                     l10151:
 12088                           
 12089                           ;main.c: 604: }
 12090                           ;main.c: 607: vscpClass = 0;
 12091  0005CA  0101               	movlb	1	; () banked
 12092  0005CC  6BAC               	clrf	_vscpClass& (0+255),b
 12093  0005CE  6BAD               	clrf	(_vscpClass+1)& (0+255),b
 12094                           
 12095                           ; BSR set to: 1
 12096                           ;main.c: 608: if ((0) != (p = strtok((0), ","))) {
 12097  0005D0  EC99  F00A         	call	PL6	;call to abstracted procedure
 12098  0005D4  ECF0  F024         	call	_strtok	;wreg free
 12099  0005D8  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12100  0005DC  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12101  0005E0  0102               	movlb	2	; () banked
 12102  0005E2  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12103  0005E4  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12104  0005E6  E00A               	bz	l10157
 12105                           
 12106                           ; BSR set to: 2
 12107                           ;main.c: 609: vscpClass = atoi(p);
 12108  0005E8  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12109  0005EC  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12110  0005F0  EC86  F01D         	call	_atoi	;wreg free
 12111  0005F4  C066  F1AC         	movff	?_atoi,_vscpClass
 12112  0005F8  C067  F1AD         	movff	?_atoi+1,_vscpClass+1
 12113  0005FC                     l10157:
 12114                           
 12115                           ;main.c: 610: }
 12116                           ;main.c: 613: vscpType = 0;
 12117  0005FC  0101               	movlb	1	; () banked
 12118  0005FE  6BB1               	clrf	_vscpType& (0+255),b
 12119                           
 12120                           ; BSR set to: 1
 12121                           ;main.c: 614: if ((0) != (p = strtok((0), ","))) {
 12122  000600  EC99  F00A         	call	PL6	;call to abstracted procedure
 12123  000604  ECF0  F024         	call	_strtok	;wreg free
 12124  000608  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12125  00060C  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12126  000610  0102               	movlb	2	; () banked
 12127  000612  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12128  000614  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12129  000616  E009               	bz	l10163
 12130                           
 12131                           ; BSR set to: 2
 12132                           ;main.c: 615: vscpType = atoi(p);
 12133  000618  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12134  00061C  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12135  000620  EC86  F01D         	call	_atoi	;wreg free
 12136  000624  5166               	movf	?_atoi& (0+255),w,b
 12137  000626  0101               	movlb	1	; () banked
 12138  000628  6FB1               	movwf	_vscpType& (0+255),b
 12139  00062A                     l10163:
 12140                           
 12141                           ;main.c: 616: }
 12142                           ;main.c: 619: vscpNodeId = 0;
 12143  00062A  0101               	movlb	1	; () banked
 12144  00062C  6BAE               	clrf	_vscpNodeId& (0+255),b
 12145                           
 12146                           ; BSR set to: 1
 12147                           ;main.c: 620: if ((0) != (p = strtok((0), ","))) {
 12148  00062E  EC99  F00A         	call	PL6	;call to abstracted procedure
 12149  000632  ECF0  F024         	call	_strtok	;wreg free
 12150  000636  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12151  00063A  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12152  00063E  0102               	movlb	2	; () banked
 12153  000640  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12154  000642  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12155  000644  E009               	bz	l10169
 12156                           
 12157                           ; BSR set to: 2
 12158                           ;main.c: 621: vscpNodeId = atoi(p);
 12159  000646  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12160  00064A  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12161  00064E  EC86  F01D         	call	_atoi	;wreg free
 12162  000652  5166               	movf	?_atoi& (0+255),w,b
 12163  000654  0101               	movlb	1	; () banked
 12164  000656  6FAE               	movwf	_vscpNodeId& (0+255),b
 12165  000658                     l10169:
 12166                           
 12167                           ;main.c: 622: }
 12168                           ;main.c: 625: vscpSize = 0;
 12169  000658  0101               	movlb	1	; () banked
 12170  00065A  6BB0               	clrf	_vscpSize& (0+255),b
 12171                           
 12172                           ; BSR set to: 1
 12173                           ;main.c: 626: if ((0) != (p = strtok((0), ","))) {
 12174  00065C  EC99  F00A         	call	PL6	;call to abstracted procedure
 12175  000660  ECF0  F024         	call	_strtok	;wreg free
 12176  000664  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12177  000668  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12178  00066C  0102               	movlb	2	; () banked
 12179  00066E  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12180  000670  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12181  000672  E009               	bz	l10175
 12182                           
 12183                           ; BSR set to: 2
 12184                           ;main.c: 627: vscpSize = atoi(p);
 12185  000674  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12186  000678  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12187  00067C  EC86  F01D         	call	_atoi	;wreg free
 12188  000680  5166               	movf	?_atoi& (0+255),w,b
 12189  000682  0101               	movlb	1	; () banked
 12190  000684  6FB0               	movwf	_vscpSize& (0+255),b
 12191  000686                     l10175:
 12192                           
 12193                           ;main.c: 628: }
 12194                           ;main.c: 630: memset(vscpData, 0, 8);
 12195  000686  0E01               	movlw	high _vscpData
 12196  000688  0100               	movlb	0	; () banked
 12197  00068A  6F61               	movwf	(?_memset+1)& (0+255),b
 12198  00068C  0EA4               	movlw	low _vscpData
 12199  00068E  6F60               	movwf	?_memset& (0+255),b
 12200  000690  6B63               	clrf	(?_memset+3)& (0+255),b
 12201  000692  6B62               	clrf	(?_memset+2)& (0+255),b
 12202  000694  6B65               	clrf	(?_memset+5)& (0+255),b
 12203  000696  0E08               	movlw	8
 12204  000698  6F64               	movwf	(?_memset+4)& (0+255),b
 12205  00069A  EC55  F02B         	call	_memset	;wreg free
 12206                           
 12207                           ; BSR set to: 0
 12208                           ;main.c: 631: for (i = 0; i < vscpSize; i++) {
 12209  00069E  0102               	movlb	2	; () banked
 12210  0006A0  6BAA               	clrf	doModeVerbose@i& (0+255),b
 12211  0006A2  D01D               	goto	l10185
 12212  0006A4                     l10179:
 12213                           
 12214                           ; BSR set to: 2
 12215                           ;main.c: 632: if ((0) != (p = strtok((0), ","))) {
 12216  0006A4  EC99  F00A         	call	PL6	;call to abstracted procedure
 12217  0006A8  ECF0  F024         	call	_strtok	;wreg free
 12218  0006AC  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12219  0006B0  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12220  0006B4  0102               	movlb	2	; () banked
 12221  0006B6  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12222  0006B8  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12223  0006BA  E016               	bz	l10187
 12224                           
 12225                           ; BSR set to: 2
 12226                           ;main.c: 633: vscpData[ i ] = atoi(p);
 12227  0006BC  0EA4               	movlw	low _vscpData
 12228  0006BE  25AA               	addwf	doModeVerbose@i& (0+255),w,b
 12229  0006C0  6ED9               	movwf	fsr2l,c
 12230  0006C2  6ADA               	clrf	fsr2h,c
 12231  0006C4  0101               	movlb	1	; () banked
 12232  0006C6  0E01               	movlw	high _vscpData
 12233  0006C8  22DA               	addwfc	fsr2h,f,c
 12234  0006CA  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12235  0006CE  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12236  0006D2  EC86  F01D         	call	_atoi	;wreg free
 12237  0006D6  5166               	movf	?_atoi& (0+255),w,b
 12238  0006D8  6EDF               	movwf	indf2,c
 12239                           
 12240                           ; BSR set to: 0
 12241                           
 12242                           ;main.c: 634: } else {
 12243  0006DA  0102               	movlb	2	; () banked
 12244  0006DC  2BAA               	incf	doModeVerbose@i& (0+255),f,b
 12245  0006DE                     l10185:
 12246                           
 12247                           ; BSR set to: 2
 12248  0006DE  0101               	movlb	1	; () banked
 12249  0006E0  51B0               	movf	_vscpSize& (0+255),w,b
 12250  0006E2  0102               	movlb	2	; () banked
 12251  0006E4  5DAA               	subwf	doModeVerbose@i& (0+255),w,b
 12252  0006E6  E3DE               	bnc	l10179
 12253  0006E8                     l10187:
 12254                           
 12255                           ; BSR set to: 2
 12256                           ;main.c: 636: }
 12257                           ;main.c: 637: }
 12258                           ;main.c: 639: if ( sendVSCPFrame(vscpClass,
 12259                           ;main.c: 640: vscpType,
 12260                           ;main.c: 641: vscpNodeId,
 12261                           ;main.c: 642: vscpPriority,
 12262                           ;main.c: 643: vscpSize,
 12263                           ;main.c: 644: vscpData ) ) {
 12264  0006E8  C1AC  F096         	movff	_vscpClass,?_sendVSCPFrame
 12265  0006EC  C1AD  F097         	movff	_vscpClass+1,?_sendVSCPFrame+1
 12266  0006F0  C1B1  F098         	movff	_vscpType,?_sendVSCPFrame+2
 12267  0006F4  C1AE  F099         	movff	_vscpNodeId,?_sendVSCPFrame+3
 12268  0006F8  C1AF  F09A         	movff	_vscpPriority,?_sendVSCPFrame+4
 12269  0006FC  C1B0  F09B         	movff	_vscpSize,?_sendVSCPFrame+5
 12270  000700  0E01               	movlw	high _vscpData
 12271  000702  0100               	movlb	0	; () banked
 12272  000704  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 12273  000706  0EA4               	movlw	low _vscpData
 12274  000708  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 12275  00070A  ECBD  F022         	call	_sendVSCPFrame	;wreg free
 12276  00070E  0900               	iorlw	0
 12277  000710  E015               	bz	l10193
 12278                           
 12279                           ; BSR set to: 0
 12280                           ;main.c: 646: cntTxFrames++;
 12281  000712  2BE1               	incf	_cntTxFrames& (0+255),f,b
 12282  000714  0E00               	movlw	0
 12283  000716  23E2               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 12284  000718  23E3               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 12285  00071A  23E4               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 12286                           
 12287                           ;main.c: 647: cntTxBytes += vscpSize;
 12288  00071C  0101               	movlb	1	; () banked
 12289  00071E  51B0               	movf	_vscpSize& (0+255),w,b
 12290  000720  0100               	movlb	0	; () banked
 12291  000722  27DD               	addwf	_cntTxBytes& (0+255),f,b
 12292  000724  0E00               	movlw	0
 12293  000726  23DE               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 12294  000728  23DF               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 12295  00072A  23E0               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 12296                           
 12297                           ; BSR set to: 0
 12298                           ;main.c: 648: putsUSART((char *) "+OK\r\n");
 12299  00072C  0E7F               	movlw	high STR_9
 12300  00072E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12301  000730  0E7F               	movlw	low STR_9
 12302  000732  6F61               	movwf	?_putsUSART& (0+255),b
 12303  000734  ECF6  F028         	call	_putsUSART	;wreg free
 12304                           
 12305                           ;main.c: 649: }
 12306  000738  EF70  F00A         	goto	l10647
 12307  00073C                     l10193:
 12308                           
 12309                           ; BSR set to: 0
 12310                           ;main.c: 650: else {
 12311                           ;main.c: 651: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 12312  00073C  0E7A               	movlw	high STR_37
 12313  00073E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12314  000740  0E48               	movlw	low STR_37
 12315  000742  6F61               	movwf	?_putsUSART& (0+255),b
 12316  000744  ECF6  F028         	call	_putsUSART	;wreg free
 12317  000748  EF70  F00A         	goto	l10647
 12318  00074C                     l10195:
 12319                           
 12320                           ; BSR set to: 1
 12321                           ;main.c: 655: else if (cmdbuf == stristr(cmdbuf, "RX")) {
 12322  00074C  0E01               	movlw	high _cmdbuf
 12323  00074E  0100               	movlb	0	; () banked
 12324  000750  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12325  000752  0E04               	movlw	low _cmdbuf
 12326  000754  6F6D               	movwf	?_stristr& (0+255),b
 12327  000756  0E7F               	movlw	high STR_38
 12328  000758  6F70               	movwf	(?_stristr+3)& (0+255),b
 12329  00075A  0EE7               	movlw	low STR_38
 12330  00075C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12331  00075E  EC48  F026         	call	_stristr	;wreg free
 12332  000762  EC80  F00A         	call	PL2	;call to abstracted procedure
 12333  000766  E104               	bnz	u12435
 12334  000768  0100               	movlb	0	; () banked
 12335  00076A  516D               	movf	?_stristr& (0+255),w,b
 12336  00076C  0101               	movlb	1	; () banked
 12337  00076E  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12338  000770                     u12435:
 12339  000770  E116               	bnz	l10203
 12340                           
 12341                           ; BSR set to: 1
 12342                           ;main.c: 656: if (receivePrintEventVerbose()) {
 12343  000772  ECEA  F011         	call	_receivePrintEventVerbose	;wreg free
 12344  000776  0900               	iorlw	0
 12345  000778  E009               	bz	l10201
 12346                           
 12347                           ;main.c: 657: putsUSART((char *) "+OK\r\n");
 12348  00077A  0E7F               	movlw	high STR_9
 12349  00077C  0100               	movlb	0	; () banked
 12350  00077E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12351  000780  0E7F               	movlw	low STR_9
 12352  000782  6F61               	movwf	?_putsUSART& (0+255),b
 12353  000784  ECF6  F028         	call	_putsUSART	;wreg free
 12354                           
 12355                           ;main.c: 658: }
 12356  000788  EF70  F00A         	goto	l10647
 12357  00078C                     l10201:
 12358                           
 12359                           ;main.c: 659: else {
 12360                           ;main.c: 660: putsUSART((char *) "+OK - no events\r\n");
 12361  00078C  0E7D               	movlw	high STR_40
 12362  00078E  0100               	movlb	0	; () banked
 12363  000790  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12364  000792  0EF7               	movlw	low STR_40
 12365  000794  6F61               	movwf	?_putsUSART& (0+255),b
 12366  000796  ECF6  F028         	call	_putsUSART	;wreg free
 12367  00079A  EF70  F00A         	goto	l10647
 12368  00079E                     l10203:
 12369                           
 12370                           ; BSR set to: 1
 12371                           ;main.c: 664: else if (cmdbuf == stristr(cmdbuf, "STAT")) {
 12372  00079E  0E01               	movlw	high _cmdbuf
 12373  0007A0  0100               	movlb	0	; () banked
 12374  0007A2  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12375  0007A4  0E04               	movlw	low _cmdbuf
 12376  0007A6  6F6D               	movwf	?_stristr& (0+255),b
 12377  0007A8  0E7F               	movlw	high STR_41
 12378  0007AA  6F70               	movwf	(?_stristr+3)& (0+255),b
 12379  0007AC  0ECA               	movlw	low STR_41
 12380  0007AE  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12381  0007B0  EC48  F026         	call	_stristr	;wreg free
 12382  0007B4  EC80  F00A         	call	PL2	;call to abstracted procedure
 12383  0007B8  E104               	bnz	u12455
 12384  0007BA  0100               	movlb	0	; () banked
 12385  0007BC  516D               	movf	?_stristr& (0+255),w,b
 12386  0007BE  0101               	movlb	1	; () banked
 12387  0007C0  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12388  0007C2                     u12455:
 12389  0007C2  E10B               	bnz	l10209
 12390                           
 12391                           ; BSR set to: 1
 12392                           ;main.c: 665: printStatistics();
 12393  0007C4  ECFB  F016         	call	_printStatistics	;wreg free
 12394                           
 12395                           ;main.c: 666: putsUSART((char *) "+OK\r\n");
 12396  0007C8  0E7F               	movlw	high STR_9
 12397  0007CA  0100               	movlb	0	; () banked
 12398  0007CC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12399  0007CE  0E7F               	movlw	low STR_9
 12400  0007D0  6F61               	movwf	?_putsUSART& (0+255),b
 12401  0007D2  ECF6  F028         	call	_putsUSART	;wreg free
 12402                           
 12403                           ;main.c: 667: }
 12404  0007D6  EF70  F00A         	goto	l10647
 12405  0007DA                     l10209:
 12406                           
 12407                           ; BSR set to: 1
 12408                           ;main.c: 669: else if (cmdbuf == stristr(cmdbuf, "ERR")) {
 12409  0007DA  0E01               	movlw	high _cmdbuf
 12410  0007DC  0100               	movlb	0	; () banked
 12411  0007DE  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12412  0007E0  0E04               	movlw	low _cmdbuf
 12413  0007E2  6F6D               	movwf	?_stristr& (0+255),b
 12414  0007E4  0E7F               	movlw	high STR_43
 12415  0007E6  6F70               	movwf	(?_stristr+3)& (0+255),b
 12416  0007E8  0ED8               	movlw	low STR_43
 12417  0007EA  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12418  0007EC  EC48  F026         	call	_stristr	;wreg free
 12419  0007F0  EC80  F00A         	call	PL2	;call to abstracted procedure
 12420  0007F4  E104               	bnz	u12465
 12421  0007F6  0100               	movlb	0	; () banked
 12422  0007F8  516D               	movf	?_stristr& (0+255),w,b
 12423  0007FA  0101               	movlb	1	; () banked
 12424  0007FC  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12425  0007FE                     u12465:
 12426  0007FE  E10B               	bnz	l10215
 12427                           
 12428                           ; BSR set to: 1
 12429                           ;main.c: 670: printErrors();
 12430  000800  EC7F  F010         	call	_printErrors	;wreg free
 12431                           
 12432                           ;main.c: 671: putsUSART((char *) "+OK\r\n");
 12433  000804  0E7F               	movlw	high STR_9
 12434  000806  0100               	movlb	0	; () banked
 12435  000808  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12436  00080A  0E7F               	movlw	low STR_9
 12437  00080C  6F61               	movwf	?_putsUSART& (0+255),b
 12438  00080E  ECF6  F028         	call	_putsUSART	;wreg free
 12439                           
 12440                           ;main.c: 672: }
 12441  000812  EF70  F00A         	goto	l10647
 12442  000816                     l10215:
 12443                           
 12444                           ; BSR set to: 1
 12445                           ;main.c: 674: else if (cmdbuf == stristr(cmdbuf, "HELP")) {
 12446  000816  0E01               	movlw	high _cmdbuf
 12447  000818  0100               	movlb	0	; () banked
 12448  00081A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12449  00081C  0E04               	movlw	low _cmdbuf
 12450  00081E  6F6D               	movwf	?_stristr& (0+255),b
 12451  000820  0E7F               	movlw	high STR_45
 12452  000822  6F70               	movwf	(?_stristr+3)& (0+255),b
 12453  000824  0EC5               	movlw	low STR_45
 12454  000826  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12455  000828  EC48  F026         	call	_stristr	;wreg free
 12456  00082C  EC80  F00A         	call	PL2	;call to abstracted procedure
 12457  000830  E104               	bnz	u12475
 12458  000832  0100               	movlb	0	; () banked
 12459  000834  516D               	movf	?_stristr& (0+255),w,b
 12460  000836  0101               	movlb	1	; () banked
 12461  000838  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12462  00083A                     u12475:
 12463  00083A  E10B               	bnz	l10219
 12464                           
 12465                           ; BSR set to: 1
 12466                           ;main.c: 675: printHelp();
 12467  00083C  EC3E  F015         	call	_printHelp	;wreg free
 12468                           
 12469                           ;main.c: 676: putsUSART((char *) "+OK\r\n");
 12470  000840  0E7F               	movlw	high STR_9
 12471  000842  0100               	movlb	0	; () banked
 12472  000844  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12473  000846  0E7F               	movlw	low STR_9
 12474  000848  6F61               	movwf	?_putsUSART& (0+255),b
 12475  00084A  ECF6  F028         	call	_putsUSART	;wreg free
 12476                           
 12477                           ;main.c: 677: }
 12478  00084E  EF70  F00A         	goto	l10647
 12479  000852                     l10219:
 12480                           
 12481                           ; BSR set to: 1
 12482                           ;main.c: 679: else if (cmdbuf == stristr(cmdbuf, "FIND")) {
 12483  000852  0E01               	movlw	high _cmdbuf
 12484  000854  0100               	movlb	0	; () banked
 12485  000856  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12486  000858  0E04               	movlw	low _cmdbuf
 12487  00085A  6F6D               	movwf	?_stristr& (0+255),b
 12488  00085C  0E7F               	movlw	high STR_47
 12489  00085E  6F70               	movwf	(?_stristr+3)& (0+255),b
 12490  000860  0EA2               	movlw	low STR_47
 12491  000862  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12492  000864  EC48  F026         	call	_stristr	;wreg free
 12493  000868  EC80  F00A         	call	PL2	;call to abstracted procedure
 12494  00086C  E104               	bnz	u12485
 12495  00086E  0100               	movlb	0	; () banked
 12496  000870  516D               	movf	?_stristr& (0+255),w,b
 12497  000872  0101               	movlb	1	; () banked
 12498  000874  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12499  000876                     u12485:
 12500  000876  E10B               	bnz	l10225
 12501                           
 12502                           ; BSR set to: 1
 12503                           ;main.c: 680: findNodes();
 12504  000878  EC09  F01F         	call	_findNodes	;wreg free
 12505                           
 12506                           ;main.c: 681: putsUSART((char *) "+OK\r\n");
 12507  00087C  0E7F               	movlw	high STR_9
 12508  00087E  0100               	movlb	0	; () banked
 12509  000880  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12510  000882  0E7F               	movlw	low STR_9
 12511  000884  6F61               	movwf	?_putsUSART& (0+255),b
 12512  000886  ECF6  F028         	call	_putsUSART	;wreg free
 12513                           
 12514                           ;main.c: 682: }
 12515  00088A  EF70  F00A         	goto	l10647
 12516  00088E                     l10225:
 12517                           
 12518                           ; BSR set to: 1
 12519                           ;main.c: 685: else if (cmdbuf == stristr(cmdbuf, "RREG")) {
 12520  00088E  0E01               	movlw	high _cmdbuf
 12521  000890  0100               	movlb	0	; () banked
 12522  000892  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12523  000894  0E04               	movlw	low _cmdbuf
 12524  000896  6F6D               	movwf	?_stristr& (0+255),b
 12525  000898  0E7F               	movlw	high STR_49
 12526  00089A  6F70               	movwf	(?_stristr+3)& (0+255),b
 12527  00089C  0EA7               	movlw	low STR_49
 12528  00089E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12529  0008A0  EC48  F026         	call	_stristr	;wreg free
 12530  0008A4  EC80  F00A         	call	PL2	;call to abstracted procedure
 12531  0008A8  E104               	bnz	u12495
 12532  0008AA  0100               	movlb	0	; () banked
 12533  0008AC  516D               	movf	?_stristr& (0+255),w,b
 12534  0008AE  0101               	movlb	1	; () banked
 12535  0008B0  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12536  0008B2                     u12495:
 12537  0008B2  E001 D1B4          	bnz	l10355
 12538                           
 12539                           ; BSR set to: 1
 12540                           ;main.c: 687: uint8_t i;
 12541                           ;main.c: 688: uint8_t nodeid;
 12542                           ;main.c: 689: uint8_t page = 0;
 12543  0008B6  0102               	movlb	2	; () banked
 12544  0008B8  6BAD               	clrf	doModeVerbose@page& (0+255),b
 12545                           
 12546                           ; BSR set to: 2
 12547                           ;main.c: 690: uint8_t reg;
 12548                           ;main.c: 691: uint8_t value;
 12549                           ;main.c: 692: uint8_t count = 1;
 12550  0008BA  0E01               	movlw	1
 12551  0008BC  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12552                           
 12553                           ; BSR set to: 2
 12554                           ;main.c: 694: strcpy(cmdbuf, cmdbuf + 5);
 12555  0008BE  EC8A  F00A         	call	PL4	;call to abstracted procedure
 12556  0008C2  EC26  F02B         	call	_strcpy	;wreg free
 12557                           
 12558                           ;main.c: 695: char *p = strtok(cmdbuf, " ");
 12559  0008C6  0E01               	movlw	high _cmdbuf
 12560  0008C8  ECED  F00A         	call	PL36	;call to abstracted procedure
 12561  0008CC  ECF0  F024         	call	_strtok	;wreg free
 12562  0008D0  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1112
 12563  0008D4  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1112+1
 12564                           
 12565                           ; BSR set to: 0
 12566                           ;main.c: 696: if ((0) != p) {
 12567  0008D8  0102               	movlb	2	; () banked
 12568  0008DA  51B3               	movf	(doModeVerbose@p_1112+1)& (0+255),w,b
 12569  0008DC  11B2               	iorwf	doModeVerbose@p_1112& (0+255),w,b
 12570  0008DE  E00A               	bz	l10239
 12571                           
 12572                           ; BSR set to: 2
 12573                           ;main.c: 697: nodeid = atoi(p);
 12574  0008E0  C2B2  F066         	movff	doModeVerbose@p_1112,?_atoi
 12575  0008E4  C2B3  F067         	movff	doModeVerbose@p_1112+1,?_atoi+1
 12576  0008E8  EC86  F01D         	call	_atoi	;wreg free
 12577  0008EC  5166               	movf	?_atoi& (0+255),w,b
 12578  0008EE  0102               	movlb	2	; () banked
 12579  0008F0  6F8C               	movwf	doModeVerbose@nodeid& (0+255),b
 12580                           
 12581                           ;main.c: 698: } else {
 12582  0008F2  D009               	goto	l10243
 12583  0008F4                     l10239:
 12584                           
 12585                           ; BSR set to: 2
 12586                           ;main.c: 699: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 12587  0008F4  0E7C               	movlw	high STR_51
 12588  0008F6  0100               	movlb	0	; () banked
 12589  0008F8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12590  0008FA  0E30               	movlw	low STR_51
 12591  0008FC  6F61               	movwf	?_putsUSART& (0+255),b
 12592  0008FE  ECF6  F028         	call	_putsUSART	;wreg free
 12593  000902  EF7F  F00A         	goto	l524
 12594  000906                     l10243:
 12595                           
 12596                           ; BSR set to: 2
 12597                           ;main.c: 701: }
 12598                           ;main.c: 703: if ((0) != (p = strtok((0), " "))) {
 12599  000906  ECDB  F00A         	call	PL28	;call to abstracted procedure
 12600  00090A  ECF0  F024         	call	_strtok	;wreg free
 12601  00090E  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1112
 12602  000912  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1112+1
 12603  000916  0102               	movlb	2	; () banked
 12604  000918  51B3               	movf	(doModeVerbose@p_1112+1)& (0+255),w,b
 12605  00091A  11B2               	iorwf	doModeVerbose@p_1112& (0+255),w,b
 12606  00091C  E034               	bz	l10251
 12607                           
 12608                           ; BSR set to: 2
 12609                           ;main.c: 705: char *preg;
 12610                           ;main.c: 706: if (preg = strchr(p, ':')) {
 12611  00091E  C2B2  F060         	movff	doModeVerbose@p_1112,?_strchr
 12612  000922  C2B3  F061         	movff	doModeVerbose@p_1112+1,?_strchr+1
 12613  000926  0100               	movlb	0	; () banked
 12614  000928  6B63               	clrf	(?_strchr+3)& (0+255),b
 12615  00092A  0E3A               	movlw	58
 12616  00092C  6F62               	movwf	(?_strchr+2)& (0+255),b
 12617  00092E  EC0A  F028         	call	_strchr	;wreg free
 12618  000932  C060  F284         	movff	?_strchr,doModeVerbose@preg
 12619  000936  C061  F285         	movff	?_strchr+1,doModeVerbose@preg+1
 12620  00093A  0102               	movlb	2	; () banked
 12621  00093C  5185               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 12622  00093E  1184               	iorwf	doModeVerbose@preg& (0+255),w,b
 12623  000940  E018               	bz	l10249
 12624                           
 12625                           ; BSR set to: 2
 12626                           ;main.c: 707: page = atoi(p);
 12627  000942  C2B2  F066         	movff	doModeVerbose@p_1112,?_atoi
 12628  000946  C2B3  F067         	movff	doModeVerbose@p_1112+1,?_atoi+1
 12629  00094A  EC86  F01D         	call	_atoi	;wreg free
 12630  00094E  5166               	movf	?_atoi& (0+255),w,b
 12631  000950  0102               	movlb	2	; () banked
 12632  000952  6FAD               	movwf	doModeVerbose@page& (0+255),b
 12633                           
 12634                           ;main.c: 708: reg = atoi(preg + 1);
 12635  000954  2984               	incf	doModeVerbose@preg& (0+255),w,b
 12636  000956  0101               	movlb	1	; () banked
 12637  000958  6FB2               	movwf	??_doModeVerbose& (0+255),b
 12638  00095A  0E00               	movlw	0
 12639  00095C  0102               	movlb	2	; () banked
 12640  00095E  2185               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 12641  000960  0101               	movlb	1	; () banked
 12642  000962  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 12643  000964  C1B2  F066         	movff	??_doModeVerbose,?_atoi
 12644  000968  C1B3  F067         	movff	??_doModeVerbose+1,?_atoi+1
 12645  00096C  EC86  F01D         	call	_atoi	;wreg free
 12646  000970  D006               	goto	L5
 12647  000972                     l10249:
 12648                           
 12649                           ; BSR set to: 2
 12650                           ;main.c: 710: reg = atoi(p);
 12651  000972  C2B2  F066         	movff	doModeVerbose@p_1112,?_atoi
 12652  000976  C2B3  F067         	movff	doModeVerbose@p_1112+1,?_atoi+1
 12653  00097A  EC86  F01D         	call	_atoi	;wreg free
 12654  00097E                     L5:
 12655  00097E  5166               	movf	?_atoi& (0+255),w,b
 12656  000980  0102               	movlb	2	; () banked
 12657  000982  6FAE               	movwf	doModeVerbose@reg& (0+255),b
 12658  000984  D009               	goto	l10255
 12659  000986                     l10251:
 12660                           
 12661                           ; BSR set to: 2
 12662                           ;main.c: 715: else {
 12663                           ;main.c: 716: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 12664  000986  0E7A               	movlw	high STR_53
 12665  000988  0100               	movlb	0	; () banked
 12666  00098A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12667  00098C  0EAB               	movlw	low STR_53
 12668  00098E  6F61               	movwf	?_putsUSART& (0+255),b
 12669  000990  ECF6  F028         	call	_putsUSART	;wreg free
 12670  000994  EF7F  F00A         	goto	l524
 12671  000998                     l10255:
 12672                           
 12673                           ; BSR set to: 2
 12674                           ;main.c: 718: }
 12675                           ;main.c: 721: if ((0) != (p = strtok((0), " "))) {
 12676  000998  ECDB  F00A         	call	PL28	;call to abstracted procedure
 12677  00099C  ECF0  F024         	call	_strtok	;wreg free
 12678  0009A0  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1112
 12679  0009A4  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1112+1
 12680  0009A8  0102               	movlb	2	; () banked
 12681  0009AA  51B3               	movf	(doModeVerbose@p_1112+1)& (0+255),w,b
 12682  0009AC  11B2               	iorwf	doModeVerbose@p_1112& (0+255),w,b
 12683  0009AE  E00D               	bz	l529
 12684                           
 12685                           ; BSR set to: 2
 12686                           ;main.c: 722: count = atoi(p);
 12687  0009B0  C2B2  F066         	movff	doModeVerbose@p_1112,?_atoi
 12688  0009B4  C2B3  F067         	movff	doModeVerbose@p_1112+1,?_atoi+1
 12689  0009B8  EC86  F01D         	call	_atoi	;wreg free
 12690  0009BC  5166               	movf	?_atoi& (0+255),w,b
 12691  0009BE  0102               	movlb	2	; () banked
 12692  0009C0  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12693                           
 12694                           ; BSR set to: 2
 12695                           ;main.c: 723: if (0 == count) count = 1;
 12696  0009C2  67AB               	tstfsz	doModeVerbose@count& (0+255),b
 12697  0009C4  D002               	goto	l529
 12698                           
 12699                           ; BSR set to: 2
 12700  0009C6  0E01               	movlw	1
 12701  0009C8  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12702  0009CA                     l529:
 12703                           
 12704                           ; BSR set to: 2
 12705                           ;main.c: 724: }
 12706                           ;main.c: 726: BOOL rv = 1;
 12707  0009CA  0E01               	movlw	1
 12708  0009CC  6FA0               	movwf	doModeVerbose@rv& (0+255),b
 12709                           
 12710                           ; BSR set to: 2
 12711                           ;main.c: 727: for (i = 0; i < count; i++) {
 12712  0009CE  6BB0               	clrf	doModeVerbose@i_1106& (0+255),b
 12713  0009D0  D10E               	goto	l10347
 12714  0009D2                     l10265:
 12715                           
 12716                           ; BSR set to: 2
 12717                           ;main.c: 729: if (readRegisterExtended(nodeid,
 12718                           ;main.c: 730: page,
 12719                           ;main.c: 731: (reg + i) & 0xff,
 12720                           ;main.c: 732: rwtimeout,
 12721                           ;main.c: 733: &value)) {
 12722  0009D2  0100               	movlb	0	; () banked
 12723  0009D4  C2AD  F0B6         	movff	doModeVerbose@page,?_readRegisterExtended
 12724  0009D8  6BB7               	clrf	(?_readRegisterExtended+1)& (0+255),b
 12725  0009DA  0102               	movlb	2	; () banked
 12726  0009DC  51AE               	movf	doModeVerbose@reg& (0+255),w,b
 12727  0009DE  25B0               	addwf	doModeVerbose@i_1106& (0+255),w,b
 12728  0009E0  0100               	movlb	0	; () banked
 12729  0009E2  6FB8               	movwf	(?_readRegisterExtended+2)& (0+255),b
 12730  0009E4  C103  F0B9         	movff	_rwtimeout,?_readRegisterExtended+3
 12731  0009E8  6BBA               	clrf	(?_readRegisterExtended+4)& (0+255),b
 12732  0009EA  0E02               	movlw	high doModeVerbose@value
 12733  0009EC  6FBC               	movwf	(?_readRegisterExtended+6)& (0+255),b
 12734  0009EE  0EB1               	movlw	low doModeVerbose@value
 12735  0009F0  6FBB               	movwf	(?_readRegisterExtended+5)& (0+255),b
 12736  0009F2  0102               	movlb	2	; () banked
 12737  0009F4  518C               	movf	doModeVerbose@nodeid& (0+255),w,b
 12738  0009F6  EC8B  F01E         	call	_readRegisterExtended
 12739  0009FA  0900               	iorlw	0
 12740  0009FC  E101 D09D          	bz	l533
 12741                           
 12742                           ;main.c: 734: putsUSART((char *) "Value for reg ");
 12743  000A00  0E7E               	movlw	high STR_55
 12744  000A02  0100               	movlb	0	; () banked
 12745  000A04  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12746  000A06  0E5D               	movlw	low STR_55
 12747  000A08  6F61               	movwf	?_putsUSART& (0+255),b
 12748  000A0A  ECF6  F028         	call	_putsUSART	;wreg free
 12749                           
 12750                           ;main.c: 735: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 12751  000A0E  0101               	movlb	1	; () banked
 12752  000A10  6700               	tstfsz	_bHex& (0+255),b
 12753  000A12  D005               	goto	l10273
 12754                           
 12755                           ; BSR set to: 1
 12756  000A14  0E7F               	movlw	high STR_57
 12757  000A16  0102               	movlb	2	; () banked
 12758  000A18  6F95               	movwf	(_doModeVerbose$1124+1)& (0+255),b
 12759  000A1A  0EED               	movlw	low STR_57
 12760  000A1C  D004               	goto	L6
 12761  000A1E                     l10273:
 12762                           
 12763                           ; BSR set to: 1
 12764  000A1E  0E7F               	movlw	high STR_56
 12765  000A20  0102               	movlb	2	; () banked
 12766  000A22  6F95               	movwf	(_doModeVerbose$1124+1)& (0+255),b
 12767  000A24  0E64               	movlw	low STR_56
 12768  000A26                     L6:
 12769  000A26  6F94               	movwf	_doModeVerbose$1124& (0+255),b
 12770                           
 12771                           ; BSR set to: 2
 12772  000A28  0E01               	movlw	high _wrkbuf
 12773  000A2A  0100               	movlb	0	; () banked
 12774  000A2C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12775  000A2E  0E54               	movlw	low _wrkbuf
 12776  000A30  6F76               	movwf	?_sprintf& (0+255),b
 12777  000A32  C294  F078         	movff	_doModeVerbose$1124,?_sprintf+2
 12778  000A36  C295  F079         	movff	_doModeVerbose$1124+1,?_sprintf+3
 12779  000A3A  C2AD  F07A         	movff	doModeVerbose@page,?_sprintf+4
 12780  000A3E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12781  000A40  EC28  F00B         	call	_sprintf	;wreg free
 12782                           
 12783                           ; BSR set to: 0
 12784                           ;main.c: 736: putsUSART(wrkbuf);
 12785  000A44  0E01               	movlw	high _wrkbuf
 12786  000A46  0100               	movlb	0	; () banked
 12787  000A48  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12788  000A4A  0E54               	movlw	low _wrkbuf
 12789  000A4C  6F61               	movwf	?_putsUSART& (0+255),b
 12790  000A4E  ECF6  F028         	call	_putsUSART	;wreg free
 12791  000A52                     l538:
 12792  000A52  A2AC               	btfss	4012,1,c	;volatile
 12793  000A54  D7FE               	goto	l538
 12794                           
 12795                           ;main.c: 738: WriteUSART(':');
 12796  000A56  0E3A               	movlw	58
 12797  000A58  ECC5  F02B         	call	_WriteUSART
 12798                           
 12799                           ;main.c: 739: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 12800  000A5C  0101               	movlb	1	; () banked
 12801  000A5E  6700               	tstfsz	_bHex& (0+255),b
 12802  000A60  D005               	goto	l10285
 12803                           
 12804                           ; BSR set to: 1
 12805  000A62  0E7F               	movlw	high STR_57
 12806  000A64  0102               	movlb	2	; () banked
 12807  000A66  6F97               	movwf	(_doModeVerbose$1136+1)& (0+255),b
 12808  000A68  0EED               	movlw	low STR_57
 12809  000A6A  D004               	goto	L7
 12810  000A6C                     l10285:
 12811                           
 12812                           ; BSR set to: 1
 12813  000A6C  0E7F               	movlw	high STR_56
 12814  000A6E  0102               	movlb	2	; () banked
 12815  000A70  6F97               	movwf	(_doModeVerbose$1136+1)& (0+255),b
 12816  000A72  0E64               	movlw	low STR_56
 12817  000A74                     L7:
 12818  000A74  6F96               	movwf	_doModeVerbose$1136& (0+255),b
 12819                           
 12820                           ; BSR set to: 2
 12821  000A76  0E01               	movlw	high _wrkbuf
 12822  000A78  0100               	movlb	0	; () banked
 12823  000A7A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12824  000A7C  0E54               	movlw	low _wrkbuf
 12825  000A7E  6F76               	movwf	?_sprintf& (0+255),b
 12826  000A80  C296  F078         	movff	_doModeVerbose$1136,?_sprintf+2
 12827  000A84  C297  F079         	movff	_doModeVerbose$1136+1,?_sprintf+3
 12828  000A88  ECF6  F00A         	call	PL42	;call to abstracted procedure
 12829  000A8C  EC28  F00B         	call	_sprintf	;wreg free
 12830                           
 12831                           ; BSR set to: 0
 12832                           ;main.c: 740: putsUSART(wrkbuf);
 12833  000A90  0E01               	movlw	high _wrkbuf
 12834  000A92  0100               	movlb	0	; () banked
 12835  000A94  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12836  000A96  0E54               	movlw	low _wrkbuf
 12837  000A98  6F61               	movwf	?_putsUSART& (0+255),b
 12838  000A9A  ECF6  F028         	call	_putsUSART	;wreg free
 12839                           
 12840                           ;main.c: 741: putsUSART((char *) " = ");
 12841  000A9E  0E7E               	movlw	high (STR_243+4)
 12842  000AA0  0100               	movlb	0	; () banked
 12843  000AA2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12844  000AA4  0EE9               	movlw	low (STR_243+4)
 12845  000AA6  6F61               	movwf	?_putsUSART& (0+255),b
 12846  000AA8  ECF6  F028         	call	_putsUSART	;wreg free
 12847                           
 12848                           ;main.c: 742: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", value);
 12849  000AAC  0101               	movlb	1	; () banked
 12850  000AAE  6700               	tstfsz	_bHex& (0+255),b
 12851  000AB0  D005               	goto	l10297
 12852                           
 12853                           ; BSR set to: 1
 12854  000AB2  0E7F               	movlw	high STR_57
 12855  000AB4  0102               	movlb	2	; () banked
 12856  000AB6  6F99               	movwf	(_doModeVerbose$1141+1)& (0+255),b
 12857  000AB8  0EED               	movlw	low STR_57
 12858  000ABA  D004               	goto	L8
 12859  000ABC                     l10297:
 12860                           
 12861                           ; BSR set to: 1
 12862  000ABC  0E7F               	movlw	high STR_56
 12863  000ABE  0102               	movlb	2	; () banked
 12864  000AC0  6F99               	movwf	(_doModeVerbose$1141+1)& (0+255),b
 12865  000AC2  0E64               	movlw	low STR_56
 12866  000AC4                     L8:
 12867  000AC4  6F98               	movwf	_doModeVerbose$1141& (0+255),b
 12868                           
 12869                           ; BSR set to: 2
 12870  000AC6  0E01               	movlw	high _wrkbuf
 12871  000AC8  0100               	movlb	0	; () banked
 12872  000ACA  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12873  000ACC  0E54               	movlw	low _wrkbuf
 12874  000ACE  6F76               	movwf	?_sprintf& (0+255),b
 12875  000AD0  C298  F078         	movff	_doModeVerbose$1141,?_sprintf+2
 12876  000AD4  C299  F079         	movff	_doModeVerbose$1141+1,?_sprintf+3
 12877  000AD8  C2B1  F07A         	movff	doModeVerbose@value,?_sprintf+4
 12878  000ADC  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12879  000ADE  EC28  F00B         	call	_sprintf	;wreg free
 12880                           
 12881                           ; BSR set to: 0
 12882                           ;main.c: 743: putsUSART(wrkbuf);
 12883  000AE2  0E01               	movlw	high _wrkbuf
 12884  000AE4  0100               	movlb	0	; () banked
 12885  000AE6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12886  000AE8  0E54               	movlw	low _wrkbuf
 12887  000AEA  6F61               	movwf	?_putsUSART& (0+255),b
 12888  000AEC  ECF6  F028         	call	_putsUSART	;wreg free
 12889  000AF0                     l549:
 12890  000AF0  A2AC               	btfss	4012,1,c	;volatile
 12891  000AF2  D7FE               	goto	l549
 12892                           
 12893                           ;main.c: 745: WriteUSART(' ');
 12894  000AF4  0E20               	movlw	32
 12895  000AF6  ECC5  F02B         	call	_WriteUSART
 12896  000AFA                     l552:
 12897  000AFA  A2AC               	btfss	4012,1,c	;volatile
 12898  000AFC  D7FE               	goto	l552
 12899                           
 12900                           ;main.c: 747: if ((value > 32) && (value < 127)) {
 12901  000AFE  0E20               	movlw	32
 12902  000B00  0102               	movlb	2	; () banked
 12903  000B02  65B1               	cpfsgt	doModeVerbose@value& (0+255),b
 12904  000B04  D007               	goto	l10311
 12905                           
 12906                           ; BSR set to: 2
 12907  000B06  0E7F               	movlw	127
 12908  000B08  61B1               	cpfslt	doModeVerbose@value& (0+255),b
 12909  000B0A  D004               	goto	l10311
 12910                           
 12911                           ; BSR set to: 2
 12912                           ;main.c: 748: WriteUSART(value);
 12913  000B0C  51B1               	movf	doModeVerbose@value& (0+255),w,b
 12914  000B0E  ECC5  F02B         	call	_WriteUSART
 12915                           
 12916                           ;main.c: 749: }
 12917  000B12  D003               	goto	l557
 12918  000B14                     l10311:
 12919                           
 12920                           ; BSR set to: 2
 12921                           ;main.c: 750: else {
 12922                           ;main.c: 751: WriteUSART('.');
 12923  000B14  0E2E               	movlw	46
 12924  000B16  ECC5  F02B         	call	_WriteUSART
 12925  000B1A                     l557:
 12926  000B1A  A2AC               	btfss	4012,1,c	;volatile
 12927  000B1C  D7FE               	goto	l557
 12928                           
 12929                           ;main.c: 754: WriteUSART(' ');
 12930  000B1E  0E20               	movlw	32
 12931  000B20  ECC5  F02B         	call	_WriteUSART
 12932                           
 12933                           ;main.c: 755: printBinary(value);
 12934  000B24  0102               	movlb	2	; () banked
 12935  000B26  51B1               	movf	doModeVerbose@value& (0+255),w,b
 12936  000B28  EC49  F029         	call	_printBinary
 12937                           
 12938                           ; BSR set to: 0
 12939                           ;main.c: 756: putsUSART((char *) "\r\n");
 12940  000B2C  0E74               	movlw	high (STR_197+50)
 12941  000B2E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12942  000B30  0E8A               	movlw	low (STR_197+50)
 12943  000B32  6F61               	movwf	?_putsUSART& (0+255),b
 12944  000B34  ECF6  F028         	call	_putsUSART	;wreg free
 12945                           
 12946                           ;main.c: 757: }
 12947  000B38  D058               	goto	l10345
 12948  000B3A                     l533:
 12949                           
 12950                           ;main.c: 758: else {
 12951                           ;main.c: 759: rv = 0;
 12952  000B3A  0102               	movlb	2	; () banked
 12953  000B3C  6BA0               	clrf	doModeVerbose@rv& (0+255),b
 12954                           
 12955                           ; BSR set to: 2
 12956                           ;main.c: 760: putsUSART((char *) "-ERROR - Unable to read register ");
 12957  000B3E  0E7A               	movlw	high STR_64
 12958  000B40  0100               	movlb	0	; () banked
 12959  000B42  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12960  000B44  0E05               	movlw	low STR_64
 12961  000B46  6F61               	movwf	?_putsUSART& (0+255),b
 12962  000B48  ECF6  F028         	call	_putsUSART	;wreg free
 12963                           
 12964                           ;main.c: 761: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 12965  000B4C  0101               	movlb	1	; () banked
 12966  000B4E  6700               	tstfsz	_bHex& (0+255),b
 12967  000B50  D005               	goto	l10325
 12968                           
 12969                           ; BSR set to: 1
 12970  000B52  0E7F               	movlw	high STR_57
 12971  000B54  0102               	movlb	2	; () banked
 12972  000B56  6F9B               	movwf	(_doModeVerbose$1147+1)& (0+255),b
 12973  000B58  0EED               	movlw	low STR_57
 12974  000B5A  D004               	goto	L9
 12975  000B5C                     l10325:
 12976                           
 12977                           ; BSR set to: 1
 12978  000B5C  0E7F               	movlw	high STR_56
 12979  000B5E  0102               	movlb	2	; () banked
 12980  000B60  6F9B               	movwf	(_doModeVerbose$1147+1)& (0+255),b
 12981  000B62  0E64               	movlw	low STR_56
 12982  000B64                     L9:
 12983  000B64  6F9A               	movwf	_doModeVerbose$1147& (0+255),b
 12984                           
 12985                           ; BSR set to: 2
 12986  000B66  0E01               	movlw	high _wrkbuf
 12987  000B68  0100               	movlb	0	; () banked
 12988  000B6A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12989  000B6C  0E54               	movlw	low _wrkbuf
 12990  000B6E  6F76               	movwf	?_sprintf& (0+255),b
 12991  000B70  C29A  F078         	movff	_doModeVerbose$1147,?_sprintf+2
 12992  000B74  C29B  F079         	movff	_doModeVerbose$1147+1,?_sprintf+3
 12993  000B78  C2AD  F07A         	movff	doModeVerbose@page,?_sprintf+4
 12994  000B7C  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12995  000B7E  EC28  F00B         	call	_sprintf	;wreg free
 12996                           
 12997                           ; BSR set to: 0
 12998                           ;main.c: 762: putsUSART(wrkbuf);
 12999  000B82  0E01               	movlw	high _wrkbuf
 13000  000B84  0100               	movlb	0	; () banked
 13001  000B86  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13002  000B88  0E54               	movlw	low _wrkbuf
 13003  000B8A  6F61               	movwf	?_putsUSART& (0+255),b
 13004  000B8C  ECF6  F028         	call	_putsUSART	;wreg free
 13005  000B90                     l565:
 13006  000B90  A2AC               	btfss	4012,1,c	;volatile
 13007  000B92  D7FE               	goto	l565
 13008                           
 13009                           ;main.c: 764: WriteUSART(':');
 13010  000B94  0E3A               	movlw	58
 13011  000B96  ECC5  F02B         	call	_WriteUSART
 13012                           
 13013                           ;main.c: 765: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 13014  000B9A  0101               	movlb	1	; () banked
 13015  000B9C  6700               	tstfsz	_bHex& (0+255),b
 13016  000B9E  D005               	goto	l10337
 13017                           
 13018                           ; BSR set to: 1
 13019  000BA0  0E7F               	movlw	high STR_57
 13020  000BA2  0102               	movlb	2	; () banked
 13021  000BA4  6F9D               	movwf	(_doModeVerbose$1151+1)& (0+255),b
 13022  000BA6  0EED               	movlw	low STR_57
 13023  000BA8  D004               	goto	L10
 13024  000BAA                     l10337:
 13025                           
 13026                           ; BSR set to: 1
 13027  000BAA  0E7F               	movlw	high STR_56
 13028  000BAC  0102               	movlb	2	; () banked
 13029  000BAE  6F9D               	movwf	(_doModeVerbose$1151+1)& (0+255),b
 13030  000BB0  0E64               	movlw	low STR_56
 13031  000BB2                     L10:
 13032  000BB2  6F9C               	movwf	_doModeVerbose$1151& (0+255),b
 13033                           
 13034                           ; BSR set to: 2
 13035  000BB4  0E01               	movlw	high _wrkbuf
 13036  000BB6  0100               	movlb	0	; () banked
 13037  000BB8  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13038  000BBA  0E54               	movlw	low _wrkbuf
 13039  000BBC  6F76               	movwf	?_sprintf& (0+255),b
 13040  000BBE  C29C  F078         	movff	_doModeVerbose$1151,?_sprintf+2
 13041  000BC2  C29D  F079         	movff	_doModeVerbose$1151+1,?_sprintf+3
 13042  000BC6  ECF6  F00A         	call	PL42	;call to abstracted procedure
 13043  000BCA  EC28  F00B         	call	_sprintf	;wreg free
 13044                           
 13045                           ; BSR set to: 0
 13046                           ;main.c: 766: putsUSART(wrkbuf);
 13047  000BCE  0E01               	movlw	high _wrkbuf
 13048  000BD0  0100               	movlb	0	; () banked
 13049  000BD2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13050  000BD4  0E54               	movlw	low _wrkbuf
 13051  000BD6  6F61               	movwf	?_putsUSART& (0+255),b
 13052  000BD8  ECF6  F028         	call	_putsUSART	;wreg free
 13053                           
 13054                           ;main.c: 767: putsUSART((char *) "\r\n");
 13055  000BDC  0E74               	movlw	high (STR_197+50)
 13056  000BDE  0100               	movlb	0	; () banked
 13057  000BE0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13058  000BE2  0E8A               	movlw	low (STR_197+50)
 13059  000BE4  6F61               	movwf	?_putsUSART& (0+255),b
 13060  000BE6  ECF6  F028         	call	_putsUSART	;wreg free
 13061  000BEA                     l10345:
 13062  000BEA  0102               	movlb	2	; () banked
 13063  000BEC  2BB0               	incf	doModeVerbose@i_1106& (0+255),f,b
 13064  000BEE                     l10347:
 13065                           
 13066                           ; BSR set to: 2
 13067  000BEE  51AB               	movf	doModeVerbose@count& (0+255),w,b
 13068  000BF0  5DB0               	subwf	doModeVerbose@i_1106& (0+255),w,b
 13069  000BF2  E201 D6EE          	bnc	l10265
 13070                           
 13071                           ; BSR set to: 2
 13072                           ;main.c: 768: }
 13073                           ;main.c: 769: }
 13074                           ;main.c: 771: if (rv) {
 13075  000BF6  51A0               	movf	doModeVerbose@rv& (0+255),w,b
 13076  000BF8  E009               	bz	l10353
 13077                           
 13078                           ; BSR set to: 2
 13079                           ;main.c: 772: putsUSART((char *) "+OK\r\n");
 13080  000BFA  0E7F               	movlw	high STR_9
 13081  000BFC  0100               	movlb	0	; () banked
 13082  000BFE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13083  000C00  0E7F               	movlw	low STR_9
 13084  000C02  6F61               	movwf	?_putsUSART& (0+255),b
 13085  000C04  ECF6  F028         	call	_putsUSART	;wreg free
 13086                           
 13087                           ;main.c: 773: }
 13088  000C08  EF70  F00A         	goto	l10647
 13089  000C0C                     l10353:
 13090                           
 13091                           ; BSR set to: 2
 13092                           ;main.c: 774: else {
 13093                           ;main.c: 775: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 13094  000C0C  0E74               	movlw	high STR_71
 13095  000C0E  0100               	movlb	0	; () banked
 13096  000C10  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13097  000C12  0E22               	movlw	low STR_71
 13098  000C14  6F61               	movwf	?_putsUSART& (0+255),b
 13099  000C16  ECF6  F028         	call	_putsUSART	;wreg free
 13100  000C1A  EF70  F00A         	goto	l10647
 13101  000C1E                     l10355:
 13102                           
 13103                           ; BSR set to: 1
 13104                           ;main.c: 781: else if (cmdbuf == stristr(cmdbuf, "WREG")) {
 13105  000C1E  0E01               	movlw	high _cmdbuf
 13106  000C20  0100               	movlb	0	; () banked
 13107  000C22  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13108  000C24  0E04               	movlw	low _cmdbuf
 13109  000C26  6F6D               	movwf	?_stristr& (0+255),b
 13110  000C28  0E7F               	movlw	high STR_72
 13111  000C2A  6F70               	movwf	(?_stristr+3)& (0+255),b
 13112  000C2C  0EAC               	movlw	low STR_72
 13113  000C2E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13114  000C30  EC48  F026         	call	_stristr	;wreg free
 13115  000C34  EC80  F00A         	call	PL2	;call to abstracted procedure
 13116  000C38  E104               	bnz	u12705
 13117  000C3A  0100               	movlb	0	; () banked
 13118  000C3C  516D               	movf	?_stristr& (0+255),w,b
 13119  000C3E  0101               	movlb	1	; () banked
 13120  000C40  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13121  000C42                     u12705:
 13122  000C42  E001 D0AF          	bnz	l10397
 13123                           
 13124                           ; BSR set to: 1
 13125                           ;main.c: 783: uint8_t nodeid;
 13126                           ;main.c: 784: uint8_t page = 0;
 13127  000C46  0102               	movlb	2	; () banked
 13128  000C48  6BA1               	clrf	doModeVerbose@page_1157& (0+255),b
 13129                           
 13130                           ; BSR set to: 2
 13131                           ;main.c: 785: uint8_t reg;
 13132                           ;main.c: 786: uint8_t value;
 13133                           ;main.c: 788: strcpy(cmdbuf, cmdbuf + 5);
 13134  000C4A  EC8A  F00A         	call	PL4	;call to abstracted procedure
 13135  000C4E  EC26  F02B         	call	_strcpy	;wreg free
 13136                           
 13137                           ;main.c: 789: char *p = strtok(cmdbuf, " ");
 13138  000C52  0E01               	movlw	high _cmdbuf
 13139  000C54  ECED  F00A         	call	PL36	;call to abstracted procedure
 13140  000C58  ECF0  F024         	call	_strtok	;wreg free
 13141  000C5C  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1160
 13142  000C60  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1160+1
 13143                           
 13144                           ; BSR set to: 0
 13145                           ;main.c: 790: if ((0) != p) {
 13146  000C64  0102               	movlb	2	; () banked
 13147  000C66  51B5               	movf	(doModeVerbose@p_1160+1)& (0+255),w,b
 13148  000C68  11B4               	iorwf	doModeVerbose@p_1160& (0+255),w,b
 13149  000C6A  E00A               	bz	l10367
 13150                           
 13151                           ; BSR set to: 2
 13152                           ;main.c: 791: nodeid = atoi(p);
 13153  000C6C  C2B4  F066         	movff	doModeVerbose@p_1160,?_atoi
 13154  000C70  C2B5  F067         	movff	doModeVerbose@p_1160+1,?_atoi+1
 13155  000C74  EC86  F01D         	call	_atoi	;wreg free
 13156  000C78  5166               	movf	?_atoi& (0+255),w,b
 13157  000C7A  0102               	movlb	2	; () banked
 13158  000C7C  6F8D               	movwf	doModeVerbose@nodeid_1156& (0+255),b
 13159                           
 13160                           ;main.c: 792: }
 13161  000C7E  D009               	goto	l10371
 13162  000C80                     l10367:
 13163                           
 13164                           ; BSR set to: 2
 13165                           ;main.c: 793: else {
 13166                           ;main.c: 794: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 13167  000C80  0E7C               	movlw	high STR_51
 13168  000C82  0100               	movlb	0	; () banked
 13169  000C84  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13170  000C86  0E30               	movlw	low STR_51
 13171  000C88  6F61               	movwf	?_putsUSART& (0+255),b
 13172  000C8A  ECF6  F028         	call	_putsUSART	;wreg free
 13173  000C8E  EF7F  F00A         	goto	l524
 13174  000C92                     l10371:
 13175                           
 13176                           ; BSR set to: 2
 13177                           ;main.c: 796: }
 13178                           ;main.c: 798: if ((0) != (p = strtok((0), " "))) {
 13179  000C92  ECDB  F00A         	call	PL28	;call to abstracted procedure
 13180  000C96  ECF0  F024         	call	_strtok	;wreg free
 13181  000C9A  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1160
 13182  000C9E  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1160+1
 13183  000CA2  0102               	movlb	2	; () banked
 13184  000CA4  51B5               	movf	(doModeVerbose@p_1160+1)& (0+255),w,b
 13185  000CA6  11B4               	iorwf	doModeVerbose@p_1160& (0+255),w,b
 13186  000CA8  E034               	bz	l10379
 13187                           
 13188                           ; BSR set to: 2
 13189                           ;main.c: 800: char *preg;
 13190                           ;main.c: 801: if (preg = strchr(p, ':')) {
 13191  000CAA  C2B4  F060         	movff	doModeVerbose@p_1160,?_strchr
 13192  000CAE  C2B5  F061         	movff	doModeVerbose@p_1160+1,?_strchr+1
 13193  000CB2  0100               	movlb	0	; () banked
 13194  000CB4  6B63               	clrf	(?_strchr+3)& (0+255),b
 13195  000CB6  0E3A               	movlw	58
 13196  000CB8  6F62               	movwf	(?_strchr+2)& (0+255),b
 13197  000CBA  EC0A  F028         	call	_strchr	;wreg free
 13198  000CBE  C060  F286         	movff	?_strchr,doModeVerbose@preg_1164
 13199  000CC2  C061  F287         	movff	?_strchr+1,doModeVerbose@preg_1164+1
 13200  000CC6  0102               	movlb	2	; () banked
 13201  000CC8  5187               	movf	(doModeVerbose@preg_1164+1)& (0+255),w,b
 13202  000CCA  1186               	iorwf	doModeVerbose@preg_1164& (0+255),w,b
 13203  000CCC  E018               	bz	l10377
 13204                           
 13205                           ; BSR set to: 2
 13206                           ;main.c: 802: page = atoi(p);
 13207  000CCE  C2B4  F066         	movff	doModeVerbose@p_1160,?_atoi
 13208  000CD2  C2B5  F067         	movff	doModeVerbose@p_1160+1,?_atoi+1
 13209  000CD6  EC86  F01D         	call	_atoi	;wreg free
 13210  000CDA  5166               	movf	?_atoi& (0+255),w,b
 13211  000CDC  0102               	movlb	2	; () banked
 13212  000CDE  6FA1               	movwf	doModeVerbose@page_1157& (0+255),b
 13213                           
 13214                           ;main.c: 803: reg = atoi(preg + 1);
 13215  000CE0  2986               	incf	doModeVerbose@preg_1164& (0+255),w,b
 13216  000CE2  0101               	movlb	1	; () banked
 13217  000CE4  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13218  000CE6  0E00               	movlw	0
 13219  000CE8  0102               	movlb	2	; () banked
 13220  000CEA  2187               	addwfc	(doModeVerbose@preg_1164+1)& (0+255),w,b
 13221  000CEC  0101               	movlb	1	; () banked
 13222  000CEE  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13223  000CF0  C1B2  F066         	movff	??_doModeVerbose,?_atoi
 13224  000CF4  C1B3  F067         	movff	??_doModeVerbose+1,?_atoi+1
 13225  000CF8  EC86  F01D         	call	_atoi	;wreg free
 13226  000CFC  D006               	goto	L11
 13227  000CFE                     l10377:
 13228                           
 13229                           ; BSR set to: 2
 13230                           ;main.c: 805: else {
 13231                           ;main.c: 806: reg = atoi(p);
 13232  000CFE  C2B4  F066         	movff	doModeVerbose@p_1160,?_atoi
 13233  000D02  C2B5  F067         	movff	doModeVerbose@p_1160+1,?_atoi+1
 13234  000D06  EC86  F01D         	call	_atoi	;wreg free
 13235  000D0A                     L11:
 13236  000D0A  5166               	movf	?_atoi& (0+255),w,b
 13237  000D0C  0102               	movlb	2	; () banked
 13238  000D0E  6FA2               	movwf	doModeVerbose@reg_1158& (0+255),b
 13239  000D10  D008               	goto	l10383
 13240  000D12                     l10379:
 13241                           
 13242                           ; BSR set to: 2
 13243                           ;main.c: 810: else {
 13244                           ;main.c: 811: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 13245  000D12  0E7A               	movlw	high STR_53
 13246  000D14  0100               	movlb	0	; () banked
 13247  000D16  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13248  000D18  0EAB               	movlw	low STR_53
 13249  000D1A  6F61               	movwf	?_putsUSART& (0+255),b
 13250  000D1C  ECF6  F028         	call	_putsUSART	;wreg free
 13251  000D20  D3EE               	goto	l524
 13252  000D22                     l10383:
 13253                           
 13254                           ; BSR set to: 2
 13255                           ;main.c: 813: }
 13256                           ;main.c: 816: if ((0) != (p = strtok((0), " "))) {
 13257  000D22  ECDB  F00A         	call	PL28	;call to abstracted procedure
 13258  000D26  ECF0  F024         	call	_strtok	;wreg free
 13259  000D2A  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1160
 13260  000D2E  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1160+1
 13261  000D32  0102               	movlb	2	; () banked
 13262  000D34  51B5               	movf	(doModeVerbose@p_1160+1)& (0+255),w,b
 13263  000D36  11B4               	iorwf	doModeVerbose@p_1160& (0+255),w,b
 13264  000D38  E00A               	bz	l10387
 13265                           
 13266                           ; BSR set to: 2
 13267                           ;main.c: 817: value = atoi(p);
 13268  000D3A  C2B4  F066         	movff	doModeVerbose@p_1160,?_atoi
 13269  000D3E  C2B5  F067         	movff	doModeVerbose@p_1160+1,?_atoi+1
 13270  000D42  EC86  F01D         	call	_atoi	;wreg free
 13271  000D46  5166               	movf	?_atoi& (0+255),w,b
 13272  000D48  0102               	movlb	2	; () banked
 13273  000D4A  6FA9               	movwf	doModeVerbose@value_1159& (0+255),b
 13274                           
 13275                           ;main.c: 818: }
 13276  000D4C  D008               	goto	l10391
 13277  000D4E                     l10387:
 13278                           
 13279                           ; BSR set to: 2
 13280                           ;main.c: 819: else {
 13281                           ;main.c: 820: putsUSART((char *) "-ERROR - Need a value\r\n");
 13282  000D4E  0E7C               	movlw	high STR_78
 13283  000D50  0100               	movlb	0	; () banked
 13284  000D52  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13285  000D54  0E60               	movlw	low STR_78
 13286  000D56  6F61               	movwf	?_putsUSART& (0+255),b
 13287  000D58  ECF6  F028         	call	_putsUSART	;wreg free
 13288  000D5C  D3D0               	goto	l524
 13289  000D5E                     l10391:
 13290                           
 13291                           ; BSR set to: 2
 13292                           ;main.c: 822: }
 13293                           ;main.c: 824: if (writeRegisterExtended(nodeid,
 13294                           ;main.c: 825: page,
 13295                           ;main.c: 826: reg,
 13296                           ;main.c: 827: rwtimeout,
 13297                           ;main.c: 828: &value)) {
 13298  000D5E  0100               	movlb	0	; () banked
 13299  000D60  C2A1  F0B6         	movff	doModeVerbose@page_1157,?_writeRegisterExtended
 13300  000D64  6BB7               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 13301  000D66  C2A2  F0B8         	movff	doModeVerbose@reg_1158,?_writeRegisterExtended+2
 13302  000D6A  C103  F0B9         	movff	_rwtimeout,?_writeRegisterExtended+3
 13303  000D6E  6BBA               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 13304  000D70  0E02               	movlw	high doModeVerbose@value_1159
 13305  000D72  6FBC               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 13306  000D74  0EA9               	movlw	low doModeVerbose@value_1159
 13307  000D76  6FBB               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 13308  000D78  0102               	movlb	2	; () banked
 13309  000D7A  518D               	movf	doModeVerbose@nodeid_1156& (0+255),w,b
 13310  000D7C  EC03  F01D         	call	_writeRegisterExtended
 13311  000D80  0900               	iorlw	0
 13312  000D82  E008               	bz	l10395
 13313                           
 13314                           ;main.c: 829: putsUSART((char *) "+OK - Value written successfully\r\n");
 13315  000D84  0E79               	movlw	high STR_79
 13316  000D86  0100               	movlb	0	; () banked
 13317  000D88  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13318  000D8A  0EC0               	movlw	low STR_79
 13319  000D8C  6F61               	movwf	?_putsUSART& (0+255),b
 13320  000D8E  ECF6  F028         	call	_putsUSART	;wreg free
 13321                           
 13322                           ;main.c: 830: }
 13323  000D92  D3A6               	goto	l10647
 13324  000D94                     l10395:
 13325                           
 13326                           ;main.c: 831: else {
 13327                           ;main.c: 832: putsUSART((char *) "-ERROR - Failed to write value\r\n");
 13328  000D94  0E7A               	movlw	high STR_80
 13329  000D96  0100               	movlb	0	; () banked
 13330  000D98  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13331  000D9A  0E8A               	movlw	low STR_80
 13332  000D9C  6F61               	movwf	?_putsUSART& (0+255),b
 13333  000D9E  ECF6  F028         	call	_putsUSART	;wreg free
 13334  000DA2  D39E               	goto	l10647
 13335  000DA4                     l10397:
 13336                           
 13337                           ; BSR set to: 1
 13338                           ;main.c: 838: else if (cmdbuf == stristr(cmdbuf, "INFO")) {
 13339  000DA4  0E01               	movlw	high _cmdbuf
 13340  000DA6  0100               	movlb	0	; () banked
 13341  000DA8  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13342  000DAA  0E04               	movlw	low _cmdbuf
 13343  000DAC  6F6D               	movwf	?_stristr& (0+255),b
 13344  000DAE  0E7F               	movlw	high STR_81
 13345  000DB0  6F70               	movwf	(?_stristr+3)& (0+255),b
 13346  000DB2  0EBB               	movlw	low STR_81
 13347  000DB4  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13348  000DB6  EC48  F026         	call	_stristr	;wreg free
 13349  000DBA  DBA2               	call	PL2	;call to abstracted procedure
 13350  000DBC  E104               	bnz	u12765
 13351  000DBE  0100               	movlb	0	; () banked
 13352  000DC0  516D               	movf	?_stristr& (0+255),w,b
 13353  000DC2  0101               	movlb	1	; () banked
 13354  000DC4  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13355  000DC6                     u12765:
 13356  000DC6  E151               	bnz	l10425
 13357                           
 13358                           ; BSR set to: 1
 13359                           ;main.c: 839: uint8_t nodeid;
 13360                           ;main.c: 841: strcpy(cmdbuf, cmdbuf + 5);
 13361  000DC8  DBA5               	call	PL4	;call to abstracted procedure
 13362  000DCA  EC26  F02B         	call	_strcpy	;wreg free
 13363                           
 13364                           ;main.c: 842: nodeid = atoi(cmdbuf);
 13365  000DCE  0E01               	movlw	high _cmdbuf
 13366  000DD0  0100               	movlb	0	; () banked
 13367  000DD2  6F67               	movwf	(?_atoi+1)& (0+255),b
 13368  000DD4  0E04               	movlw	low _cmdbuf
 13369  000DD6  6F66               	movwf	?_atoi& (0+255),b
 13370  000DD8  EC86  F01D         	call	_atoi	;wreg free
 13371  000DDC  5166               	movf	?_atoi& (0+255),w,b
 13372  000DDE  0102               	movlb	2	; () banked
 13373  000DE0  6FAF               	movwf	doModeVerbose@nodeid_1171& (0+255),b
 13374                           
 13375                           ; BSR set to: 2
 13376                           ;main.c: 844: putsUSART((char *) "Info for node id = ");
 13377  000DE2  0E7D               	movlw	high STR_82
 13378  000DE4  0100               	movlb	0	; () banked
 13379  000DE6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13380  000DE8  0EAA               	movlw	low STR_82
 13381  000DEA  6F61               	movwf	?_putsUSART& (0+255),b
 13382  000DEC  ECF6  F028         	call	_putsUSART	;wreg free
 13383                           
 13384                           ;main.c: 845: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", nodeid);
 13385  000DF0  0101               	movlb	1	; () banked
 13386  000DF2  6700               	tstfsz	_bHex& (0+255),b
 13387  000DF4  D005               	goto	l10409
 13388                           
 13389                           ; BSR set to: 1
 13390  000DF6  0E7F               	movlw	high STR_57
 13391  000DF8  0102               	movlb	2	; () banked
 13392  000DFA  6F9F               	movwf	(_doModeVerbose$1176+1)& (0+255),b
 13393  000DFC  0EED               	movlw	low STR_57
 13394  000DFE  D004               	goto	L12
 13395  000E00                     l10409:
 13396                           
 13397                           ; BSR set to: 1
 13398  000E00  0E7F               	movlw	high STR_56
 13399  000E02  0102               	movlb	2	; () banked
 13400  000E04  6F9F               	movwf	(_doModeVerbose$1176+1)& (0+255),b
 13401  000E06  0E64               	movlw	low STR_56
 13402  000E08                     L12:
 13403  000E08  6F9E               	movwf	_doModeVerbose$1176& (0+255),b
 13404                           
 13405                           ; BSR set to: 2
 13406  000E0A  0E01               	movlw	high _wrkbuf
 13407  000E0C  0100               	movlb	0	; () banked
 13408  000E0E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13409  000E10  0E54               	movlw	low _wrkbuf
 13410  000E12  6F76               	movwf	?_sprintf& (0+255),b
 13411  000E14  C29E  F078         	movff	_doModeVerbose$1176,?_sprintf+2
 13412  000E18  C29F  F079         	movff	_doModeVerbose$1176+1,?_sprintf+3
 13413  000E1C  C2AF  F07A         	movff	doModeVerbose@nodeid_1171,?_sprintf+4
 13414  000E20  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13415  000E22  EC28  F00B         	call	_sprintf	;wreg free
 13416                           
 13417                           ; BSR set to: 0
 13418                           ;main.c: 846: putsUSART(wrkbuf);
 13419  000E26  0E01               	movlw	high _wrkbuf
 13420  000E28  0100               	movlb	0	; () banked
 13421  000E2A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13422  000E2C  0E54               	movlw	low _wrkbuf
 13423  000E2E  6F61               	movwf	?_putsUSART& (0+255),b
 13424  000E30  ECF6  F028         	call	_putsUSART	;wreg free
 13425                           
 13426                           ;main.c: 847: putsUSART((char *) "\r\n");
 13427  000E34  0E74               	movlw	high (STR_197+50)
 13428  000E36  0100               	movlb	0	; () banked
 13429  000E38  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13430  000E3A  0E8A               	movlw	low (STR_197+50)
 13431  000E3C  6F61               	movwf	?_putsUSART& (0+255),b
 13432  000E3E  ECF6  F028         	call	_putsUSART	;wreg free
 13433                           
 13434                           ;main.c: 848: printNodeFirmwareVersion(nodeid);
 13435  000E42  0102               	movlb	2	; () banked
 13436  000E44  51AF               	movf	doModeVerbose@nodeid_1171& (0+255),w,b
 13437  000E46  ECCD  F020         	call	_printNodeFirmwareVersion
 13438                           
 13439                           ;main.c: 849: printGUID(nodeid);
 13440  000E4A  0102               	movlb	2	; () banked
 13441  000E4C  51AF               	movf	doModeVerbose@nodeid_1171& (0+255),w,b
 13442  000E4E  EC09  F01E         	call	_printGUID
 13443                           
 13444                           ;main.c: 850: printMDF(nodeid);
 13445  000E52  0102               	movlb	2	; () banked
 13446  000E54  51AF               	movf	doModeVerbose@nodeid_1171& (0+255),w,b
 13447  000E56  ECA5  F024         	call	_printMDF
 13448                           
 13449                           ;main.c: 851: putsUSART((char *) "+OK\r\n");
 13450  000E5A  0E7F               	movlw	high STR_9
 13451  000E5C  0100               	movlb	0	; () banked
 13452  000E5E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13453  000E60  0E7F               	movlw	low STR_9
 13454  000E62  6F61               	movwf	?_putsUSART& (0+255),b
 13455  000E64  ECF6  F028         	call	_putsUSART	;wreg free
 13456                           
 13457                           ;main.c: 852: }
 13458  000E68  D33B               	goto	l10647
 13459  000E6A                     l10425:
 13460                           
 13461                           ; BSR set to: 1
 13462                           ;main.c: 856: else if (cmdbuf == stristr(cmdbuf, "FILTER")) {
 13463  000E6A  0E01               	movlw	high _cmdbuf
 13464  000E6C  0100               	movlb	0	; () banked
 13465  000E6E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13466  000E70  0E04               	movlw	low _cmdbuf
 13467  000E72  6F6D               	movwf	?_stristr& (0+255),b
 13468  000E74  0E7F               	movlw	high STR_87
 13469  000E76  6F70               	movwf	(?_stristr+3)& (0+255),b
 13470  000E78  0E56               	movlw	low STR_87
 13471  000E7A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13472  000E7C  EC48  F026         	call	_stristr	;wreg free
 13473  000E80  DB3F               	call	PL2	;call to abstracted procedure
 13474  000E82  E104               	bnz	u12785
 13475  000E84  0100               	movlb	0	; () banked
 13476  000E86  516D               	movf	?_stristr& (0+255),w,b
 13477  000E88  0101               	movlb	1	; () banked
 13478  000E8A  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13479  000E8C                     u12785:
 13480  000E8C  E001 D0D2          	bnz	l10493
 13481                           
 13482                           ; BSR set to: 1
 13483                           ;main.c: 858: uint8_t filterno;
 13484                           ;main.c: 859: uint8_t filter_priority;
 13485                           ;main.c: 860: uint16_t filter_class;
 13486                           ;main.c: 861: uint8_t filter_type;
 13487                           ;main.c: 862: uint8_t filter_nodeid;
 13488                           ;main.c: 864: strcpy(cmdbuf, cmdbuf + 8);
 13489  000E90  0E01               	movlw	high _cmdbuf
 13490  000E92  DB57               	call	PL8	;call to abstracted procedure
 13491  000E94  EC26  F02B         	call	_strcpy	;wreg free
 13492                           
 13493                           ;main.c: 865: char *p = strtok(cmdbuf, ",");
 13494  000E98  DB96               	call	PL30	;call to abstracted procedure
 13495  000E9A  ECF0  F024         	call	_strtok	;wreg free
 13496  000E9E  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1185
 13497  000EA2  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1185+1
 13498                           
 13499                           ; BSR set to: 0
 13500                           ;main.c: 866: if ((0) != p) {
 13501  000EA6  0102               	movlb	2	; () banked
 13502  000EA8  51BA               	movf	(doModeVerbose@p_1185+1)& (0+255),w,b
 13503  000EAA  11B9               	iorwf	doModeVerbose@p_1185& (0+255),w,b
 13504  000EAC  E014               	bz	l10441
 13505                           
 13506                           ; BSR set to: 2
 13507                           ;main.c: 867: filterno = atoi(p);
 13508  000EAE  C2B9  F066         	movff	doModeVerbose@p_1185,?_atoi
 13509  000EB2  C2BA  F067         	movff	doModeVerbose@p_1185+1,?_atoi+1
 13510  000EB6  EC86  F01D         	call	_atoi	;wreg free
 13511  000EBA  5166               	movf	?_atoi& (0+255),w,b
 13512  000EBC  0102               	movlb	2	; () banked
 13513  000EBE  6FA7               	movwf	doModeVerbose@filterno& (0+255),b
 13514                           
 13515                           ; BSR set to: 2
 13516                           ;main.c: 868: if (filterno > 15) {
 13517  000EC0  0E0F               	movlw	15
 13518  000EC2  65A7               	cpfsgt	doModeVerbose@filterno& (0+255),b
 13519  000EC4  D010               	goto	l10445
 13520                           
 13521                           ; BSR set to: 2
 13522                           ;main.c: 869: putsUSART((char *) "-ERROR - Filter number can only be set to a value betw
      +                          een 0-15.\r\n");
 13523  000EC6  0E72               	movlw	high STR_89
 13524  000EC8  0100               	movlb	0	; () banked
 13525  000ECA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13526  000ECC  0E1C               	movlw	low STR_89
 13527  000ECE  6F61               	movwf	?_putsUSART& (0+255),b
 13528  000ED0  ECF6  F028         	call	_putsUSART	;wreg free
 13529  000ED4  D314               	goto	l524
 13530  000ED6                     l10441:
 13531                           
 13532                           ; BSR set to: 2
 13533                           ;main.c: 873: else {
 13534                           ;main.c: 874: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 13535  000ED6  0E77               	movlw	high STR_90
 13536  000ED8  0100               	movlb	0	; () banked
 13537  000EDA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13538  000EDC  0EFA               	movlw	low STR_90
 13539  000EDE  6F61               	movwf	?_putsUSART& (0+255),b
 13540  000EE0  ECF6  F028         	call	_putsUSART	;wreg free
 13541  000EE4  D30C               	goto	l524
 13542  000EE6                     l10445:
 13543                           
 13544                           ; BSR set to: 2
 13545                           ;main.c: 876: }
 13546                           ;main.c: 879: p = strtok((0), ",");
 13547  000EE6  DB25               	call	PL6	;call to abstracted procedure
 13548  000EE8  ECF0  F024         	call	_strtok	;wreg free
 13549  000EEC  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1185
 13550  000EF0  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1185+1
 13551                           
 13552                           ; BSR set to: 0
 13553                           ;main.c: 880: if ((0) != p) {
 13554  000EF4  0102               	movlb	2	; () banked
 13555  000EF6  51BA               	movf	(doModeVerbose@p_1185+1)& (0+255),w,b
 13556  000EF8  11B9               	iorwf	doModeVerbose@p_1185& (0+255),w,b
 13557  000EFA  E00A               	bz	l10451
 13558                           
 13559                           ; BSR set to: 2
 13560                           ;main.c: 881: filter_priority = atoi(p);
 13561  000EFC  C2B9  F066         	movff	doModeVerbose@p_1185,?_atoi
 13562  000F00  C2BA  F067         	movff	doModeVerbose@p_1185+1,?_atoi+1
 13563  000F04  EC86  F01D         	call	_atoi	;wreg free
 13564  000F08  5166               	movf	?_atoi& (0+255),w,b
 13565  000F0A  0102               	movlb	2	; () banked
 13566  000F0C  6F8E               	movwf	doModeVerbose@filter_priority& (0+255),b
 13567                           
 13568                           ;main.c: 882: }
 13569  000F0E  D008               	goto	l10455
 13570  000F10                     l10451:
 13571                           
 13572                           ; BSR set to: 2
 13573                           ;main.c: 883: else {
 13574                           ;main.c: 884: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 13575  000F10  0E77               	movlw	high STR_92
 13576  000F12  0100               	movlb	0	; () banked
 13577  000F14  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13578  000F16  0E2F               	movlw	low STR_92
 13579  000F18  6F61               	movwf	?_putsUSART& (0+255),b
 13580  000F1A  ECF6  F028         	call	_putsUSART	;wreg free
 13581  000F1E  D2EF               	goto	l524
 13582  000F20                     l10455:
 13583                           
 13584                           ; BSR set to: 2
 13585                           ;main.c: 886: }
 13586                           ;main.c: 889: p = strtok((0), ",");
 13587  000F20  DB08               	call	PL6	;call to abstracted procedure
 13588  000F22  ECF0  F024         	call	_strtok	;wreg free
 13589  000F26  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1185
 13590  000F2A  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1185+1
 13591                           
 13592                           ; BSR set to: 0
 13593                           ;main.c: 890: if ((0) != p) {
 13594  000F2E  0102               	movlb	2	; () banked
 13595  000F30  51BA               	movf	(doModeVerbose@p_1185+1)& (0+255),w,b
 13596  000F32  11B9               	iorwf	doModeVerbose@p_1185& (0+255),w,b
 13597  000F34  E00B               	bz	l10461
 13598                           
 13599                           ; BSR set to: 2
 13600                           ;main.c: 891: filter_class = atoi(p);
 13601  000F36  C2B9  F066         	movff	doModeVerbose@p_1185,?_atoi
 13602  000F3A  C2BA  F067         	movff	doModeVerbose@p_1185+1,?_atoi+1
 13603  000F3E  EC86  F01D         	call	_atoi	;wreg free
 13604  000F42  C066  F288         	movff	?_atoi,doModeVerbose@filter_class
 13605  000F46  C067  F289         	movff	?_atoi+1,doModeVerbose@filter_class+1
 13606                           
 13607                           ;main.c: 892: }
 13608  000F4A  D008               	goto	l10465
 13609  000F4C                     l10461:
 13610                           
 13611                           ; BSR set to: 2
 13612                           ;main.c: 893: else {
 13613                           ;main.c: 894: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 13614  000F4C  0E78               	movlw	high STR_94
 13615  000F4E  0100               	movlb	0	; () banked
 13616  000F50  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13617  000F52  0E96               	movlw	low STR_94
 13618  000F54  6F61               	movwf	?_putsUSART& (0+255),b
 13619  000F56  ECF6  F028         	call	_putsUSART	;wreg free
 13620  000F5A  D2D1               	goto	l524
 13621  000F5C                     l10465:
 13622                           
 13623                           ; BSR set to: 0
 13624                           ;main.c: 896: }
 13625                           ;main.c: 899: p = strtok((0), ",");
 13626  000F5C  DB00               	call	PL10	;call to abstracted procedure
 13627  000F5E  ECF0  F024         	call	_strtok	;wreg free
 13628  000F62  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1185
 13629  000F66  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1185+1
 13630                           
 13631                           ; BSR set to: 0
 13632                           ;main.c: 900: if ((0) != p) {
 13633  000F6A  0102               	movlb	2	; () banked
 13634  000F6C  51BA               	movf	(doModeVerbose@p_1185+1)& (0+255),w,b
 13635  000F6E  11B9               	iorwf	doModeVerbose@p_1185& (0+255),w,b
 13636  000F70  E00A               	bz	l10471
 13637                           
 13638                           ; BSR set to: 2
 13639                           ;main.c: 901: filter_type = atoi(p);
 13640  000F72  C2B9  F066         	movff	doModeVerbose@p_1185,?_atoi
 13641  000F76  C2BA  F067         	movff	doModeVerbose@p_1185+1,?_atoi+1
 13642  000F7A  EC86  F01D         	call	_atoi	;wreg free
 13643  000F7E  5166               	movf	?_atoi& (0+255),w,b
 13644  000F80  0102               	movlb	2	; () banked
 13645  000F82  6F8F               	movwf	doModeVerbose@filter_type& (0+255),b
 13646                           
 13647                           ;main.c: 902: }
 13648  000F84  D008               	goto	l10475
 13649  000F86                     l10471:
 13650                           
 13651                           ; BSR set to: 2
 13652                           ;main.c: 903: else {
 13653                           ;main.c: 904: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 13654  000F86  0E78               	movlw	high STR_96
 13655  000F88  0100               	movlb	0	; () banked
 13656  000F8A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13657  000F8C  0EE4               	movlw	low STR_96
 13658  000F8E  6F61               	movwf	?_putsUSART& (0+255),b
 13659  000F90  ECF6  F028         	call	_putsUSART	;wreg free
 13660  000F94  D2B4               	goto	l524
 13661  000F96                     l10475:
 13662                           
 13663                           ; BSR set to: 2
 13664                           ;main.c: 906: }
 13665                           ;main.c: 909: p = strtok((0), ",");
 13666  000F96  DACD               	call	PL6	;call to abstracted procedure
 13667  000F98  ECF0  F024         	call	_strtok	;wreg free
 13668  000F9C  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1185
 13669  000FA0  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1185+1
 13670                           
 13671                           ; BSR set to: 0
 13672                           ;main.c: 910: if ((0) != p) {
 13673  000FA4  0102               	movlb	2	; () banked
 13674  000FA6  51BA               	movf	(doModeVerbose@p_1185+1)& (0+255),w,b
 13675  000FA8  11B9               	iorwf	doModeVerbose@p_1185& (0+255),w,b
 13676  000FAA  E00A               	bz	l10481
 13677                           
 13678                           ; BSR set to: 2
 13679                           ;main.c: 911: filter_nodeid = atoi(p);
 13680  000FAC  C2B9  F066         	movff	doModeVerbose@p_1185,?_atoi
 13681  000FB0  C2BA  F067         	movff	doModeVerbose@p_1185+1,?_atoi+1
 13682  000FB4  EC86  F01D         	call	_atoi	;wreg free
 13683  000FB8  5166               	movf	?_atoi& (0+255),w,b
 13684  000FBA  0102               	movlb	2	; () banked
 13685  000FBC  6F90               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 13686                           
 13687                           ;main.c: 912: }
 13688  000FBE  D008               	goto	l10485
 13689  000FC0                     l10481:
 13690                           
 13691                           ; BSR set to: 2
 13692                           ;main.c: 913: else {
 13693                           ;main.c: 914: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 13694  000FC0  0E77               	movlw	high STR_98
 13695  000FC2  0100               	movlb	0	; () banked
 13696  000FC4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13697  000FC6  0E59               	movlw	low STR_98
 13698  000FC8  6F61               	movwf	?_putsUSART& (0+255),b
 13699  000FCA  ECF6  F028         	call	_putsUSART	;wreg free
 13700  000FCE  D297               	goto	l524
 13701  000FD0                     l10485:
 13702                           
 13703                           ; BSR set to: 2
 13704                           ;main.c: 916: }
 13705                           ;main.c: 919: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 13706  000FD0  0E80               	movlw	128
 13707  000FD2  ECAD  F02B         	call	_ECANSetOperationMode
 13708                           
 13709                           ; BSR set to: 0
 13710                           ;main.c: 921: uint32_t id = ((uint32_t) filter_priority << 26) |
 13711                           ;main.c: 922: ((uint32_t) filter_class << 16) |
 13712                           ;main.c: 923: ((uint32_t) filter_type << 8) |
 13713                           ;main.c: 924: filter_nodeid;
 13714  000FD6  C28F  F1B2         	movff	doModeVerbose@filter_type,??_doModeVerbose
 13715  000FDA  DB16               	call	PL44	;call to abstracted procedure
 13716  000FDC  5188               	movf	doModeVerbose@filter_class& (0+255),w,b
 13717  000FDE  0101               	movlb	1	; () banked
 13718  000FE0  6FB6               	movwf	(??_doModeVerbose+4)& (0+255),b
 13719  000FE2  0102               	movlb	2	; () banked
 13720  000FE4  5189               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 13721  000FE6  DB29               	call	PL60	;call to abstracted procedure
 13722  000FE8  C28E  F1BA         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 13723  000FEC  DABF               	call	PL12	;call to abstracted procedure
 13724  000FEE  5190               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 13725  000FF0  0101               	movlb	1	; () banked
 13726  000FF2  11C2               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 13727  000FF4  0102               	movlb	2	; () banked
 13728  000FF6  6F80               	movwf	doModeVerbose@id& (0+255),b
 13729  000FF8  0101               	movlb	1	; () banked
 13730  000FFA  51C3               	movf	(??_doModeVerbose+17)& (0+255),w,b
 13731  000FFC  0102               	movlb	2	; () banked
 13732  000FFE  6F81               	movwf	(doModeVerbose@id+1)& (0+255),b
 13733  001000  0101               	movlb	1	; () banked
 13734  001002  51C4               	movf	(??_doModeVerbose+18)& (0+255),w,b
 13735  001004  0102               	movlb	2	; () banked
 13736  001006  6F82               	movwf	(doModeVerbose@id+2)& (0+255),b
 13737  001008  0101               	movlb	1	; () banked
 13738  00100A  51C5               	movf	(??_doModeVerbose+19)& (0+255),w,b
 13739  00100C  0102               	movlb	2	; () banked
 13740  00100E  6F83               	movwf	(doModeVerbose@id+3)& (0+255),b
 13741                           
 13742                           ; BSR set to: 2
 13743                           ;main.c: 925: setFilter(filterno, id);
 13744  001010  C280  F060         	movff	doModeVerbose@id,?_setFilter
 13745  001014  C281  F061         	movff	doModeVerbose@id+1,?_setFilter+1
 13746  001018  C282  F062         	movff	doModeVerbose@id+2,?_setFilter+2
 13747  00101C  C283  F063         	movff	doModeVerbose@id+3,?_setFilter+3
 13748  001020  51A7               	movf	doModeVerbose@filterno& (0+255),w,b
 13749  001022  EC4F  F014         	call	_setFilter
 13750                           
 13751                           ; BSR set to: 0
 13752                           ;main.c: 926: putsUSART((char *) "+OK\r\n");
 13753  001026  0E7F               	movlw	high STR_9
 13754  001028  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13755  00102A  0E7F               	movlw	low STR_9
 13756  00102C  6F61               	movwf	?_putsUSART& (0+255),b
 13757  00102E  ECF6  F028         	call	_putsUSART	;wreg free
 13758                           
 13759                           ;main.c: 927: }
 13760  001032  D256               	goto	l10647
 13761  001034                     l10493:
 13762                           
 13763                           ; BSR set to: 1
 13764                           ;main.c: 931: else if (cmdbuf == stristr(cmdbuf, "MASK")) {
 13765  001034  0E01               	movlw	high _cmdbuf
 13766  001036  0100               	movlb	0	; () banked
 13767  001038  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13768  00103A  0E04               	movlw	low _cmdbuf
 13769  00103C  6F6D               	movwf	?_stristr& (0+255),b
 13770  00103E  0E7F               	movlw	high STR_100
 13771  001040  6F70               	movwf	(?_stristr+3)& (0+255),b
 13772  001042  0EB1               	movlw	low STR_100
 13773  001044  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13774  001046  EC48  F026         	call	_stristr	;wreg free
 13775  00104A  DA5A               	call	PL2	;call to abstracted procedure
 13776  00104C  E104               	bnz	u12865
 13777  00104E  0100               	movlb	0	; () banked
 13778  001050  516D               	movf	?_stristr& (0+255),w,b
 13779  001052  0101               	movlb	1	; () banked
 13780  001054  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13781  001056                     u12865:
 13782  001056  E001 D0D9          	bnz	l10565
 13783                           
 13784                           ; BSR set to: 1
 13785                           ;main.c: 933: uint8_t maskno;
 13786                           ;main.c: 934: uint8_t mask_priority;
 13787                           ;main.c: 935: uint16_t mask_class;
 13788                           ;main.c: 936: uint8_t mask_type;
 13789                           ;main.c: 937: uint8_t mask_nodeid;
 13790                           ;main.c: 939: strcpy(cmdbuf, cmdbuf + 8);
 13791  00105A  0E01               	movlw	high _cmdbuf
 13792  00105C  DA72               	call	PL8	;call to abstracted procedure
 13793  00105E  EC26  F02B         	call	_strcpy	;wreg free
 13794                           
 13795                           ;main.c: 940: char *p = strtok(cmdbuf, ",");
 13796  001062  DAB1               	call	PL30	;call to abstracted procedure
 13797  001064  ECF0  F024         	call	_strtok	;wreg free
 13798  001068  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1205
 13799  00106C  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1205+1
 13800                           
 13801                           ; BSR set to: 0
 13802                           ;main.c: 941: if ((0) != p) {
 13803  001070  0102               	movlb	2	; () banked
 13804  001072  51BC               	movf	(doModeVerbose@p_1205+1)& (0+255),w,b
 13805  001074  11BB               	iorwf	doModeVerbose@p_1205& (0+255),w,b
 13806  001076  E014               	bz	l10509
 13807                           
 13808                           ; BSR set to: 2
 13809                           ;main.c: 942: maskno = atoi(p);
 13810  001078  C2BB  F066         	movff	doModeVerbose@p_1205,?_atoi
 13811  00107C  C2BC  F067         	movff	doModeVerbose@p_1205+1,?_atoi+1
 13812  001080  EC86  F01D         	call	_atoi	;wreg free
 13813  001084  5166               	movf	?_atoi& (0+255),w,b
 13814  001086  0102               	movlb	2	; () banked
 13815  001088  6FA8               	movwf	doModeVerbose@maskno& (0+255),b
 13816                           
 13817                           ; BSR set to: 2
 13818                           ;main.c: 943: if (maskno > 1) {
 13819  00108A  0E01               	movlw	1
 13820  00108C  65A8               	cpfsgt	doModeVerbose@maskno& (0+255),b
 13821  00108E  D010               	goto	l10513
 13822                           
 13823                           ; BSR set to: 2
 13824                           ;main.c: 944: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 13825  001090  0E75               	movlw	high STR_102
 13826  001092  0100               	movlb	0	; () banked
 13827  001094  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13828  001096  0E29               	movlw	low STR_102
 13829  001098  6F61               	movwf	?_putsUSART& (0+255),b
 13830  00109A  ECF6  F028         	call	_putsUSART	;wreg free
 13831  00109E  D22F               	goto	l524
 13832  0010A0                     l10509:
 13833                           
 13834                           ; BSR set to: 2
 13835                           ;main.c: 948: else {
 13836                           ;main.c: 949: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 13837  0010A0  0E79               	movlw	high STR_103
 13838  0010A2  0100               	movlb	0	; () banked
 13839  0010A4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13840  0010A6  0E0A               	movlw	low STR_103
 13841  0010A8  6F61               	movwf	?_putsUSART& (0+255),b
 13842  0010AA  ECF6  F028         	call	_putsUSART	;wreg free
 13843  0010AE  D227               	goto	l524
 13844  0010B0                     l10513:
 13845                           
 13846                           ; BSR set to: 2
 13847                           ;main.c: 951: }
 13848                           ;main.c: 954: p = strtok((0), ",");
 13849  0010B0  DA40               	call	PL6	;call to abstracted procedure
 13850  0010B2  ECF0  F024         	call	_strtok	;wreg free
 13851  0010B6  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1205
 13852  0010BA  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1205+1
 13853                           
 13854                           ; BSR set to: 0
 13855                           ;main.c: 955: if ((0) != p) {
 13856  0010BE  0102               	movlb	2	; () banked
 13857  0010C0  51BC               	movf	(doModeVerbose@p_1205+1)& (0+255),w,b
 13858  0010C2  11BB               	iorwf	doModeVerbose@p_1205& (0+255),w,b
 13859  0010C4  E00A               	bz	l10519
 13860                           
 13861                           ; BSR set to: 2
 13862                           ;main.c: 956: mask_priority = atoi(p);
 13863  0010C6  C2BB  F066         	movff	doModeVerbose@p_1205,?_atoi
 13864  0010CA  C2BC  F067         	movff	doModeVerbose@p_1205+1,?_atoi+1
 13865  0010CE  EC86  F01D         	call	_atoi	;wreg free
 13866  0010D2  5166               	movf	?_atoi& (0+255),w,b
 13867  0010D4  0102               	movlb	2	; () banked
 13868  0010D6  6F91               	movwf	doModeVerbose@mask_priority& (0+255),b
 13869                           
 13870                           ;main.c: 957: }
 13871  0010D8  D008               	goto	l10523
 13872  0010DA                     l10519:
 13873                           
 13874                           ; BSR set to: 2
 13875                           ;main.c: 958: else {
 13876                           ;main.c: 959: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 13877  0010DA  0E77               	movlw	high STR_105
 13878  0010DC  0100               	movlb	0	; () banked
 13879  0010DE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13880  0010E0  0EAA               	movlw	low STR_105
 13881  0010E2  6F61               	movwf	?_putsUSART& (0+255),b
 13882  0010E4  ECF6  F028         	call	_putsUSART	;wreg free
 13883  0010E8  D20A               	goto	l524
 13884  0010EA                     l10523:
 13885                           
 13886                           ; BSR set to: 2
 13887                           ;main.c: 961: }
 13888                           ;main.c: 964: p = strtok((0), ",");
 13889  0010EA  DA23               	call	PL6	;call to abstracted procedure
 13890  0010EC  ECF0  F024         	call	_strtok	;wreg free
 13891  0010F0  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1205
 13892  0010F4  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1205+1
 13893                           
 13894                           ; BSR set to: 0
 13895                           ;main.c: 965: if ((0) != p) {
 13896  0010F8  0102               	movlb	2	; () banked
 13897  0010FA  51BC               	movf	(doModeVerbose@p_1205+1)& (0+255),w,b
 13898  0010FC  11BB               	iorwf	doModeVerbose@p_1205& (0+255),w,b
 13899  0010FE  E00B               	bz	l10529
 13900                           
 13901                           ; BSR set to: 2
 13902                           ;main.c: 966: mask_class = atoi(p);
 13903  001100  C2BB  F066         	movff	doModeVerbose@p_1205,?_atoi
 13904  001104  C2BC  F067         	movff	doModeVerbose@p_1205+1,?_atoi+1
 13905  001108  EC86  F01D         	call	_atoi	;wreg free
 13906  00110C  C066  F28A         	movff	?_atoi,doModeVerbose@mask_class
 13907  001110  C067  F28B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 13908                           
 13909                           ;main.c: 967: }
 13910  001114  D008               	goto	l10533
 13911  001116                     l10529:
 13912                           
 13913                           ; BSR set to: 2
 13914                           ;main.c: 968: else {
 13915                           ;main.c: 969: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 13916  001116  0E79               	movlw	high STR_107
 13917  001118  0100               	movlb	0	; () banked
 13918  00111A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13919  00111C  0E54               	movlw	low STR_107
 13920  00111E  6F61               	movwf	?_putsUSART& (0+255),b
 13921  001120  ECF6  F028         	call	_putsUSART	;wreg free
 13922  001124  D1EC               	goto	l524
 13923  001126                     l10533:
 13924                           
 13925                           ; BSR set to: 0
 13926                           ;main.c: 971: }
 13927                           ;main.c: 974: p = strtok((0), ",");
 13928  001126  DA1B               	call	PL10	;call to abstracted procedure
 13929  001128  ECF0  F024         	call	_strtok	;wreg free
 13930  00112C  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1205
 13931  001130  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1205+1
 13932                           
 13933                           ; BSR set to: 0
 13934                           ;main.c: 975: if ((0) != p) {
 13935  001134  0102               	movlb	2	; () banked
 13936  001136  51BC               	movf	(doModeVerbose@p_1205+1)& (0+255),w,b
 13937  001138  11BB               	iorwf	doModeVerbose@p_1205& (0+255),w,b
 13938  00113A  E00A               	bz	l10539
 13939                           
 13940                           ; BSR set to: 2
 13941                           ;main.c: 976: mask_type = atoi(p);
 13942  00113C  C2BB  F066         	movff	doModeVerbose@p_1205,?_atoi
 13943  001140  C2BC  F067         	movff	doModeVerbose@p_1205+1,?_atoi+1
 13944  001144  EC86  F01D         	call	_atoi	;wreg free
 13945  001148  5166               	movf	?_atoi& (0+255),w,b
 13946  00114A  0102               	movlb	2	; () banked
 13947  00114C  6F92               	movwf	doModeVerbose@mask_type& (0+255),b
 13948                           
 13949                           ;main.c: 977: }
 13950  00114E  D008               	goto	l10543
 13951  001150                     l10539:
 13952                           
 13953                           ; BSR set to: 2
 13954                           ;main.c: 978: else {
 13955                           ;main.c: 979: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 13956  001150  0E79               	movlw	high STR_109
 13957  001152  0100               	movlb	0	; () banked
 13958  001154  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13959  001156  0E79               	movlw	low STR_109
 13960  001158  6F61               	movwf	?_putsUSART& (0+255),b
 13961  00115A  ECF6  F028         	call	_putsUSART	;wreg free
 13962  00115E  D1CF               	goto	l524
 13963  001160                     l10543:
 13964                           
 13965                           ; BSR set to: 2
 13966                           ;main.c: 981: }
 13967                           ;main.c: 984: p = strtok((0), ",");
 13968  001160  D9E8               	call	PL6	;call to abstracted procedure
 13969  001162  ECF0  F024         	call	_strtok	;wreg free
 13970  001166  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1205
 13971  00116A  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1205+1
 13972                           
 13973                           ; BSR set to: 0
 13974                           ;main.c: 985: if ((0) != p) {
 13975  00116E  0102               	movlb	2	; () banked
 13976  001170  51BC               	movf	(doModeVerbose@p_1205+1)& (0+255),w,b
 13977  001172  11BB               	iorwf	doModeVerbose@p_1205& (0+255),w,b
 13978  001174  E00A               	bz	l10549
 13979                           
 13980                           ; BSR set to: 2
 13981                           ;main.c: 986: mask_nodeid = atoi(p);
 13982  001176  C2BB  F066         	movff	doModeVerbose@p_1205,?_atoi
 13983  00117A  C2BC  F067         	movff	doModeVerbose@p_1205+1,?_atoi+1
 13984  00117E  EC86  F01D         	call	_atoi	;wreg free
 13985  001182  5166               	movf	?_atoi& (0+255),w,b
 13986  001184  0102               	movlb	2	; () banked
 13987  001186  6F93               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 13988                           
 13989                           ;main.c: 987: }
 13990  001188  D008               	goto	l10553
 13991  00118A                     l10549:
 13992                           
 13993                           ; BSR set to: 2
 13994                           ;main.c: 988: else {
 13995                           ;main.c: 989: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 13996  00118A  0E78               	movlw	high STR_111
 13997  00118C  0100               	movlb	0	; () banked
 13998  00118E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13999  001190  0E6F               	movlw	low STR_111
 14000  001192  6F61               	movwf	?_putsUSART& (0+255),b
 14001  001194  ECF6  F028         	call	_putsUSART	;wreg free
 14002  001198  D1B2               	goto	l524
 14003  00119A                     l10553:
 14004                           
 14005                           ; BSR set to: 2
 14006                           ;main.c: 991: }
 14007                           ;main.c: 993: uint32_t id = ((uint32_t) mask_priority << 26) |
 14008                           ;main.c: 994: ((uint32_t) mask_class << 16) |
 14009                           ;main.c: 995: ((uint32_t) mask_type << 8) |
 14010                           ;main.c: 996: mask_nodeid;
 14011  00119A  C292  F1B2         	movff	doModeVerbose@mask_type,??_doModeVerbose
 14012  00119E  DA34               	call	PL44	;call to abstracted procedure
 14013  0011A0  518A               	movf	doModeVerbose@mask_class& (0+255),w,b
 14014  0011A2  0101               	movlb	1	; () banked
 14015  0011A4  6FB6               	movwf	(??_doModeVerbose+4)& (0+255),b
 14016  0011A6  0102               	movlb	2	; () banked
 14017  0011A8  518B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 14018  0011AA  DA47               	call	PL60	;call to abstracted procedure
 14019  0011AC  C291  F1BA         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 14020  0011B0  D9DD               	call	PL12	;call to abstracted procedure
 14021  0011B2  5193               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 14022  0011B4  0101               	movlb	1	; () banked
 14023  0011B6  11C2               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 14024  0011B8  0102               	movlb	2	; () banked
 14025  0011BA  6FA3               	movwf	doModeVerbose@id_1217& (0+255),b
 14026  0011BC  0101               	movlb	1	; () banked
 14027  0011BE  51C3               	movf	(??_doModeVerbose+17)& (0+255),w,b
 14028  0011C0  0102               	movlb	2	; () banked
 14029  0011C2  6FA4               	movwf	(doModeVerbose@id_1217+1)& (0+255),b
 14030  0011C4  0101               	movlb	1	; () banked
 14031  0011C6  51C4               	movf	(??_doModeVerbose+18)& (0+255),w,b
 14032  0011C8  0102               	movlb	2	; () banked
 14033  0011CA  6FA5               	movwf	(doModeVerbose@id_1217+2)& (0+255),b
 14034  0011CC  0101               	movlb	1	; () banked
 14035  0011CE  51C5               	movf	(??_doModeVerbose+19)& (0+255),w,b
 14036  0011D0  0102               	movlb	2	; () banked
 14037  0011D2  6FA6               	movwf	(doModeVerbose@id_1217+3)& (0+255),b
 14038                           
 14039                           ; BSR set to: 2
 14040                           ;main.c: 999: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 14041  0011D4  0E80               	movlw	128
 14042  0011D6  ECAD  F02B         	call	_ECANSetOperationMode
 14043                           
 14044                           ; BSR set to: 0
 14045                           ;main.c: 1001: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 14046                           ;main.c: 1002: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 14047  0011DA  0102               	movlb	2	; () banked
 14048  0011DC  51A8               	movf	doModeVerbose@maskno& (0+255),w,b
 14049  0011DE  E008               	bz	l10561
 14050                           
 14051                           ; BSR set to: 2
 14052  0011E0  0E0F               	movlw	15	;volatile
 14053  0011E2  0100               	movlb	0	; () banked
 14054  0011E4  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14055  0011E6  0E18               	movlw	24	;volatile
 14056  0011E8  DA1C               	call	PL56	;call to abstracted procedure
 14057  0011EA  EC79  F01C         	call	__CANIDToRegs	;wreg free
 14058  0011EE  D007               	goto	l10563
 14059  0011F0                     l10561:
 14060                           
 14061                           ; BSR set to: 2
 14062  0011F0  0E0F               	movlw	15	;volatile
 14063  0011F2  0100               	movlb	0	; () banked
 14064  0011F4  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14065  0011F6  0E1C               	movlw	28	;volatile
 14066  0011F8  DA14               	call	PL56	;call to abstracted procedure
 14067  0011FA  EC79  F01C         	call	__CANIDToRegs	;wreg free
 14068  0011FE                     l10563:
 14069                           
 14070                           ; BSR set to: 0
 14071                           ;main.c: 1003: putsUSART((char *) "+OK\r\n");
 14072  0011FE  0E7F               	movlw	high STR_9
 14073  001200  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14074  001202  0E7F               	movlw	low STR_9
 14075  001204  6F61               	movwf	?_putsUSART& (0+255),b
 14076  001206  ECF6  F028         	call	_putsUSART	;wreg free
 14077                           
 14078                           ;main.c: 1004: }
 14079  00120A  D16A               	goto	l10647
 14080  00120C                     l10565:
 14081                           
 14082                           ; BSR set to: 1
 14083                           ;main.c: 1011: else if (cmdbuf == stristr(cmdbuf, "SET ")) {
 14084  00120C  0E01               	movlw	high _cmdbuf
 14085  00120E  0100               	movlb	0	; () banked
 14086  001210  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14087  001212  0E04               	movlw	low _cmdbuf
 14088  001214  6F6D               	movwf	?_stristr& (0+255),b
 14089  001216  0E7F               	movlw	high STR_113
 14090  001218  6F70               	movwf	(?_stristr+3)& (0+255),b
 14091  00121A  0E9D               	movlw	low STR_113
 14092  00121C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14093  00121E  EC48  F026         	call	_stristr	;wreg free
 14094  001222  D96E               	call	PL2	;call to abstracted procedure
 14095  001224  E104               	bnz	u12955
 14096  001226  0100               	movlb	0	; () banked
 14097  001228  516D               	movf	?_stristr& (0+255),w,b
 14098  00122A  0101               	movlb	1	; () banked
 14099  00122C  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 14100  00122E                     u12955:
 14101  00122E  E001 D145          	bnz	l10641
 14102                           
 14103                           ; BSR set to: 1
 14104                           ;main.c: 1014: strcpy(cmdbuf, cmdbuf + 4);
 14105  001232  0E01               	movlw	high _cmdbuf
 14106  001234  0100               	movlb	0	; () banked
 14107  001236  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14108  001238  0E04               	movlw	low _cmdbuf
 14109  00123A  6F60               	movwf	?_strcpy& (0+255),b
 14110  00123C  0E08               	movlw	low (_cmdbuf+4)
 14111  00123E  0101               	movlb	1	; () banked
 14112  001240  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14113  001242  0E01               	movlw	high (_cmdbuf+4)
 14114  001244  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14115  001246  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14116  00124A  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14117  00124E  EC26  F02B         	call	_strcpy	;wreg free
 14118                           
 14119                           ;main.c: 1017: if (cmdbuf == stristr(cmdbuf, "HEX")) {
 14120  001252  0E01               	movlw	high _cmdbuf
 14121  001254  0100               	movlb	0	; () banked
 14122  001256  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14123  001258  0E04               	movlw	low _cmdbuf
 14124  00125A  6F6D               	movwf	?_stristr& (0+255),b
 14125  00125C  0E7F               	movlw	high STR_114
 14126  00125E  6F70               	movwf	(?_stristr+3)& (0+255),b
 14127  001260  0EDC               	movlw	low STR_114
 14128  001262  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14129  001264  EC48  F026         	call	_stristr	;wreg free
 14130  001268  D94B               	call	PL2	;call to abstracted procedure
 14131  00126A  E104               	bnz	u12965
 14132  00126C  0100               	movlb	0	; () banked
 14133  00126E  516D               	movf	?_stristr& (0+255),w,b
 14134  001270  0101               	movlb	1	; () banked
 14135  001272  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 14136  001274                     u12965:
 14137  001274  E111               	bnz	l10577
 14138                           
 14139                           ; BSR set to: 1
 14140                           ;main.c: 1018: bHex = 1;
 14141  001276  0E01               	movlw	1
 14142  001278  6F00               	movwf	_bHex& (0+255),b
 14143                           
 14144                           ; BSR set to: 1
 14145                           ;main.c: 1019: writeEEPROM(0x06, 1);
 14146  00127A  0100               	movlb	0	; () banked
 14147  00127C  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14148  00127E  0E06               	movlw	6
 14149  001280  6F60               	movwf	?_writeEEPROM& (0+255),b
 14150  001282  0E01               	movlw	1
 14151  001284  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 14152  001286  EC6C  F02B         	call	_writeEEPROM	;wreg free
 14153                           
 14154                           ; BSR set to: 0
 14155                           ;main.c: 1020: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 14156  00128A  0E77               	movlw	high STR_115
 14157  00128C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14158  00128E  0E03               	movlw	low STR_115
 14159  001290  6F61               	movwf	?_putsUSART& (0+255),b
 14160  001292  ECF6  F028         	call	_putsUSART	;wreg free
 14161                           
 14162                           ;main.c: 1021: }
 14163  001296  D124               	goto	l10647
 14164  001298                     l10577:
 14165                           
 14166                           ; BSR set to: 1
 14167                           ;main.c: 1023: else if (cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 14168  001298  0E01               	movlw	high _cmdbuf
 14169  00129A  0100               	movlb	0	; () banked
 14170  00129C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14171  00129E  0E04               	movlw	low _cmdbuf
 14172  0012A0  6F6D               	movwf	?_stristr& (0+255),b
 14173  0012A2  0E7F               	movlw	high STR_116
 14174  0012A4  6F70               	movwf	(?_stristr+3)& (0+255),b
 14175  0012A6  0E05               	movlw	low STR_116
 14176  0012A8  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14177  0012AA  EC48  F026         	call	_stristr	;wreg free
 14178  0012AE  D928               	call	PL2	;call to abstracted procedure
 14179  0012B0  E104               	bnz	u12975
 14180  0012B2  0100               	movlb	0	; () banked
 14181  0012B4  516D               	movf	?_stristr& (0+255),w,b
 14182  0012B6  0101               	movlb	1	; () banked
 14183  0012B8  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 14184  0012BA                     u12975:
 14185  0012BA  E110               	bnz	l10585
 14186                           
 14187                           ; BSR set to: 1
 14188                           ;main.c: 1024: bHex = 0;
 14189  0012BC  6B00               	clrf	_bHex& (0+255),b
 14190                           
 14191                           ; BSR set to: 1
 14192                           ;main.c: 1025: writeEEPROM(0x06, 0);
 14193  0012BE  0100               	movlb	0	; () banked
 14194  0012C0  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14195  0012C2  0E06               	movlw	6
 14196  0012C4  6F60               	movwf	?_writeEEPROM& (0+255),b
 14197  0012C6  0E00               	movlw	0
 14198  0012C8  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 14199  0012CA  EC6C  F02B         	call	_writeEEPROM	;wreg free
 14200                           
 14201                           ; BSR set to: 0
 14202                           ;main.c: 1026: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 14203  0012CE  0E77               	movlw	high STR_117
 14204  0012D0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14205  0012D2  0ED2               	movlw	low STR_117
 14206  0012D4  6F61               	movwf	?_putsUSART& (0+255),b
 14207  0012D6  ECF6  F028         	call	_putsUSART	;wreg free
 14208                           
 14209                           ;main.c: 1027: }
 14210  0012DA  D102               	goto	l10647
 14211  0012DC                     l10585:
 14212                           
 14213                           ; BSR set to: 1
 14214                           ;main.c: 1028: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 14215  0012DC  0E01               	movlw	high _cmdbuf
 14216  0012DE  0100               	movlb	0	; () banked
 14217  0012E0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14218  0012E2  0E04               	movlw	low _cmdbuf
 14219  0012E4  6F6D               	movwf	?_stristr& (0+255),b
 14220  0012E6  0E7E               	movlw	high STR_118
 14221  0012E8  6F70               	movwf	(?_stristr+3)& (0+255),b
 14222  0012EA  0E86               	movlw	low STR_118
 14223  0012EC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14224  0012EE  EC48  F026         	call	_stristr	;wreg free
 14225  0012F2  516E               	movf	(?_stristr+1)& (0+255),w,b
 14226  0012F4  116D               	iorwf	?_stristr& (0+255),w,b
 14227  0012F6  E02D               	bz	l10599
 14228                           
 14229                           ; BSR set to: 0
 14230                           ;main.c: 1029: strcpy(cmdbuf, cmdbuf + 10);
 14231  0012F8  0E01               	movlw	high _cmdbuf
 14232  0012FA  0100               	movlb	0	; () banked
 14233  0012FC  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14234  0012FE  0E04               	movlw	low _cmdbuf
 14235  001300  6F60               	movwf	?_strcpy& (0+255),b
 14236  001302  0E0E               	movlw	low (_cmdbuf+10)
 14237  001304  0101               	movlb	1	; () banked
 14238  001306  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14239  001308  0E01               	movlw	high (_cmdbuf+10)
 14240  00130A  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14241  00130C  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14242  001310  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14243  001314  EC26  F02B         	call	_strcpy	;wreg free
 14244                           
 14245                           ;main.c: 1030: rwtimeout = atoi(cmdbuf);
 14246  001318  0E01               	movlw	high _cmdbuf
 14247  00131A  0100               	movlb	0	; () banked
 14248  00131C  6F67               	movwf	(?_atoi+1)& (0+255),b
 14249  00131E  0E04               	movlw	low _cmdbuf
 14250  001320  6F66               	movwf	?_atoi& (0+255),b
 14251  001322  EC86  F01D         	call	_atoi	;wreg free
 14252  001326  5166               	movf	?_atoi& (0+255),w,b
 14253  001328  0101               	movlb	1	; () banked
 14254  00132A  6F03               	movwf	_rwtimeout& (0+255),b
 14255                           
 14256                           ; BSR set to: 1
 14257                           ;main.c: 1031: if (rwtimeout < 10u) {
 14258  00132C  0E0A               	movlw	10
 14259  00132E  6103               	cpfslt	_rwtimeout& (0+255),b
 14260  001330  D001               	goto	l10595
 14261                           
 14262                           ; BSR set to: 1
 14263                           ;main.c: 1032: rwtimeout = 10u;
 14264  001332  6F03               	movwf	_rwtimeout& (0+255),b
 14265  001334                     l10595:
 14266                           
 14267                           ; BSR set to: 1
 14268                           ;main.c: 1033: }
 14269                           ;main.c: 1034: writeEEPROM(0x09, rwtimeout);
 14270  001334  0100               	movlb	0	; () banked
 14271  001336  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14272  001338  0E09               	movlw	9
 14273  00133A  6F60               	movwf	?_writeEEPROM& (0+255),b
 14274  00133C  C103  F062         	movff	_rwtimeout,?_writeEEPROM+2
 14275  001340  EC6C  F02B         	call	_writeEEPROM	;wreg free
 14276                           
 14277                           ; BSR set to: 0
 14278                           ;main.c: 1035: putsUSART((char *) "+OK\r\n");
 14279  001344  0E7F               	movlw	high STR_9
 14280  001346  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14281  001348  0E7F               	movlw	low STR_9
 14282  00134A  6F61               	movwf	?_putsUSART& (0+255),b
 14283  00134C  ECF6  F028         	call	_putsUSART	;wreg free
 14284                           
 14285                           ;main.c: 1036: }
 14286  001350  D0C7               	goto	l10647
 14287  001352                     l10599:
 14288                           
 14289                           ; BSR set to: 0
 14290                           ;main.c: 1037: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 14291  001352  0E01               	movlw	high _cmdbuf
 14292  001354  0100               	movlb	0	; () banked
 14293  001356  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14294  001358  0E04               	movlw	low _cmdbuf
 14295  00135A  6F6D               	movwf	?_stristr& (0+255),b
 14296  00135C  0E7E               	movlw	high STR_120
 14297  00135E  6F70               	movwf	(?_stristr+3)& (0+255),b
 14298  001360  0EBA               	movlw	low STR_120
 14299  001362  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14300  001364  EC48  F026         	call	_stristr	;wreg free
 14301  001368  516E               	movf	(?_stristr+1)& (0+255),w,b
 14302  00136A  116D               	iorwf	?_stristr& (0+255),w,b
 14303  00136C  E005               	bz	l10603
 14304                           
 14305                           ; BSR set to: 0
 14306                           ;main.c: 1038: strcpy(cmdbuf, cmdbuf + 8);
 14307  00136E  0E01               	movlw	high _cmdbuf
 14308  001370  D8E8               	call	PL8	;call to abstracted procedure
 14309  001372  EC26  F02B         	call	_strcpy	;wreg free
 14310                           
 14311                           ;main.c: 1039: }
 14312  001376  D0B4               	goto	l10647
 14313  001378                     l10603:
 14314                           
 14315                           ; BSR set to: 0
 14316                           ;main.c: 1040: else if (0 != stristr(cmdbuf, "MODE ")) {
 14317  001378  0E01               	movlw	high _cmdbuf
 14318  00137A  0100               	movlb	0	; () banked
 14319  00137C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14320  00137E  0E04               	movlw	low _cmdbuf
 14321  001380  6F6D               	movwf	?_stristr& (0+255),b
 14322  001382  0E7F               	movlw	high STR_121
 14323  001384  6F70               	movwf	(?_stristr+3)& (0+255),b
 14324  001386  0E85               	movlw	low STR_121
 14325  001388  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14326  00138A  EC48  F026         	call	_stristr	;wreg free
 14327  00138E  516E               	movf	(?_stristr+1)& (0+255),w,b
 14328  001390  116D               	iorwf	?_stristr& (0+255),w,b
 14329  001392  E05C               	bz	l10631
 14330                           
 14331                           ; BSR set to: 0
 14332                           ;main.c: 1041: strcpy(cmdbuf, cmdbuf + 5);
 14333  001394  D8BF               	call	PL4	;call to abstracted procedure
 14334  001396  EC26  F02B         	call	_strcpy	;wreg free
 14335                           
 14336                           ;main.c: 1042: if (0 != stristr(cmdbuf, "VERBOSE")) {
 14337  00139A  0E01               	movlw	high _cmdbuf
 14338  00139C  0100               	movlb	0	; () banked
 14339  00139E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14340  0013A0  0E04               	movlw	low _cmdbuf
 14341  0013A2  6F6D               	movwf	?_stristr& (0+255),b
 14342  0013A4  0E7E               	movlw	high STR_122
 14343  0013A6  6F70               	movwf	(?_stristr+3)& (0+255),b
 14344  0013A8  0EFD               	movlw	low STR_122
 14345  0013AA  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14346  0013AC  EC48  F026         	call	_stristr	;wreg free
 14347  0013B0  516E               	movf	(?_stristr+1)& (0+255),w,b
 14348  0013B2  116D               	iorwf	?_stristr& (0+255),w,b
 14349  0013B4  E00F               	bz	l10615
 14350                           
 14351                           ; BSR set to: 0
 14352                           ;main.c: 1043: mode = 0;
 14353  0013B6  6BF1               	clrf	_mode& (0+255),b
 14354                           
 14355                           ; BSR set to: 0
 14356                           ;main.c: 1044: writeEEPROM(0x03, 0);
 14357  0013B8  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14358  0013BA  0E03               	movlw	3
 14359  0013BC  6F60               	movwf	?_writeEEPROM& (0+255),b
 14360  0013BE  0E00               	movlw	0
 14361  0013C0  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 14362  0013C2  EC6C  F02B         	call	_writeEEPROM	;wreg free
 14363                           
 14364                           ; BSR set to: 0
 14365                           ;main.c: 1045: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 14366  0013C6  0E7B               	movlw	high STR_123
 14367  0013C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14368  0013CA  0E47               	movlw	low STR_123
 14369  0013CC  6F61               	movwf	?_putsUSART& (0+255),b
 14370  0013CE  ECF6  F028         	call	_putsUSART	;wreg free
 14371                           
 14372                           ;main.c: 1046: }
 14373  0013D2  D086               	goto	l10647
 14374  0013D4                     l10615:
 14375                           
 14376                           ; BSR set to: 0
 14377                           ;main.c: 1047: else if (0 != stristr(cmdbuf, "VSCP")) {
 14378  0013D4  0E01               	movlw	high _cmdbuf
 14379  0013D6  0100               	movlb	0	; () banked
 14380  0013D8  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14381  0013DA  0E04               	movlw	low _cmdbuf
 14382  0013DC  6F6D               	movwf	?_stristr& (0+255),b
 14383  0013DE  0E7F               	movlw	high STR_124
 14384  0013E0  6F70               	movwf	(?_stristr+3)& (0+255),b
 14385  0013E2  0EC0               	movlw	low STR_124
 14386  0013E4  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14387  0013E6  EC48  F026         	call	_stristr	;wreg free
 14388  0013EA  516E               	movf	(?_stristr+1)& (0+255),w,b
 14389  0013EC  116D               	iorwf	?_stristr& (0+255),w,b
 14390  0013EE  E010               	bz	l10623
 14391                           
 14392                           ; BSR set to: 0
 14393                           ;main.c: 1048: mode = 1;
 14394  0013F0  0E01               	movlw	1
 14395  0013F2  6FF1               	movwf	_mode& (0+255),b
 14396                           
 14397                           ; BSR set to: 0
 14398                           ;main.c: 1049: writeEEPROM(0x03, 1);
 14399  0013F4  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14400  0013F6  0E03               	movlw	3
 14401  0013F8  6F60               	movwf	?_writeEEPROM& (0+255),b
 14402  0013FA  0E01               	movlw	1
 14403  0013FC  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 14404  0013FE  EC6C  F02B         	call	_writeEEPROM	;wreg free
 14405                           
 14406                           ; BSR set to: 0
 14407                           ;main.c: 1050: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 14408  001402  0E7A               	movlw	high STR_125
 14409  001404  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14410  001406  0ECC               	movlw	low STR_125
 14411  001408  6F61               	movwf	?_putsUSART& (0+255),b
 14412  00140A  ECF6  F028         	call	_putsUSART	;wreg free
 14413                           
 14414                           ;main.c: 1051: }
 14415  00140E  D068               	goto	l10647
 14416  001410                     l10623:
 14417                           
 14418                           ; BSR set to: 0
 14419                           ;main.c: 1052: else if (0 != stristr(cmdbuf, "SLCAN")) {
 14420  001410  0E01               	movlw	high _cmdbuf
 14421  001412  0100               	movlb	0	; () banked
 14422  001414  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14423  001416  0E04               	movlw	low _cmdbuf
 14424  001418  6F6D               	movwf	?_stristr& (0+255),b
 14425  00141A  0E7F               	movlw	high STR_126
 14426  00141C  6F70               	movwf	(?_stristr+3)& (0+255),b
 14427  00141E  0E97               	movlw	low STR_126
 14428  001420  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14429  001422  EC48  F026         	call	_stristr	;wreg free
 14430  001426  516E               	movf	(?_stristr+1)& (0+255),w,b
 14431  001428  116D               	iorwf	?_stristr& (0+255),w,b
 14432  00142A  E05A               	bz	l10647
 14433                           
 14434                           ; BSR set to: 0
 14435                           ;main.c: 1053: mode = 2;
 14436  00142C  0E02               	movlw	2
 14437  00142E  6FF1               	movwf	_mode& (0+255),b
 14438                           
 14439                           ; BSR set to: 0
 14440                           ;main.c: 1054: writeEEPROM(0x03, 2);
 14441  001430  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14442  001432  0E03               	movlw	3
 14443  001434  6F60               	movwf	?_writeEEPROM& (0+255),b
 14444  001436  0E02               	movlw	2
 14445  001438  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 14446  00143A  EC6C  F02B         	call	_writeEEPROM	;wreg free
 14447                           
 14448                           ; BSR set to: 0
 14449                           ;main.c: 1055: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 14450  00143E  0E7B               	movlw	high STR_127
 14451  001440  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14452  001442  0EB4               	movlw	low STR_127
 14453  001444  6F61               	movwf	?_putsUSART& (0+255),b
 14454  001446  ECF6  F028         	call	_putsUSART	;wreg free
 14455  00144A  D04A               	goto	l10647
 14456  00144C                     l10631:
 14457                           
 14458                           ; BSR set to: 0
 14459                           ;main.c: 1059: else if (0 != stristr(cmdbuf, "FILTER ")) {
 14460  00144C  0E01               	movlw	high _cmdbuf
 14461  00144E  0100               	movlb	0	; () banked
 14462  001450  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14463  001452  0E04               	movlw	low _cmdbuf
 14464  001454  6F6D               	movwf	?_stristr& (0+255),b
 14465  001456  0E7E               	movlw	high STR_128
 14466  001458  6F70               	movwf	(?_stristr+3)& (0+255),b
 14467  00145A  0EED               	movlw	low STR_128
 14468  00145C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14469  00145E  EC48  F026         	call	_stristr	;wreg free
 14470  001462  516E               	movf	(?_stristr+1)& (0+255),w,b
 14471  001464  116D               	iorwf	?_stristr& (0+255),w,b
 14472  001466  E011               	bz	l10635
 14473                           
 14474                           ; BSR set to: 0
 14475                           ;main.c: 1060: strcpy(cmdbuf, cmdbuf + 7);
 14476  001468  0E01               	movlw	high _cmdbuf
 14477  00146A  0100               	movlb	0	; () banked
 14478  00146C  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14479  00146E  0E04               	movlw	low _cmdbuf
 14480  001470  6F60               	movwf	?_strcpy& (0+255),b
 14481  001472  0E0B               	movlw	low (_cmdbuf+7)
 14482  001474  0101               	movlb	1	; () banked
 14483  001476  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14484  001478  0E01               	movlw	high (_cmdbuf+7)
 14485  00147A  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14486  00147C  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14487  001480  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14488  001484  EC26  F02B         	call	_strcpy	;wreg free
 14489                           
 14490                           ;main.c: 1061: }
 14491  001488  D02B               	goto	l10647
 14492  00148A                     l10635:
 14493                           
 14494                           ; BSR set to: 0
 14495                           ;main.c: 1063: else if (0 != stristr(cmdbuf, "MASK ")) {
 14496  00148A  0E01               	movlw	high _cmdbuf
 14497  00148C  0100               	movlb	0	; () banked
 14498  00148E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14499  001490  0E04               	movlw	low _cmdbuf
 14500  001492  6F6D               	movwf	?_stristr& (0+255),b
 14501  001494  0E7F               	movlw	high STR_129
 14502  001496  6F70               	movwf	(?_stristr+3)& (0+255),b
 14503  001498  0E8B               	movlw	low STR_129
 14504  00149A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14505  00149C  EC48  F026         	call	_stristr	;wreg free
 14506  0014A0  516E               	movf	(?_stristr+1)& (0+255),w,b
 14507  0014A2  116D               	iorwf	?_stristr& (0+255),w,b
 14508  0014A4  E004               	bz	l10639
 14509                           
 14510                           ; BSR set to: 0
 14511                           ;main.c: 1064: strcpy(cmdbuf, cmdbuf + 5);
 14512  0014A6  D836               	call	PL4	;call to abstracted procedure
 14513  0014A8  EC26  F02B         	call	_strcpy	;wreg free
 14514                           
 14515                           ;main.c: 1065: }
 14516  0014AC  D019               	goto	l10647
 14517  0014AE                     l10639:
 14518                           
 14519                           ; BSR set to: 0
 14520                           ;main.c: 1066: else {
 14521                           ;main.c: 1067: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 14522  0014AE  0E7A               	movlw	high STR_130
 14523  0014B0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14524  0014B2  0E69               	movlw	low STR_130
 14525  0014B4  6F61               	movwf	?_putsUSART& (0+255),b
 14526  0014B6  ECF6  F028         	call	_putsUSART	;wreg free
 14527  0014BA  D012               	goto	l10647
 14528  0014BC                     l10641:
 14529                           
 14530                           ; BSR set to: 1
 14531                           ;main.c: 1071: else {
 14532                           ;main.c: 1072: if ( 0x0d == cmdbuf[ 0 ] ) {
 14533  0014BC  5104               	movf	_cmdbuf& (0+255),w,b
 14534  0014BE  0A0D               	xorlw	13
 14535  0014C0  E108               	bnz	l10645
 14536                           
 14537                           ; BSR set to: 1
 14538                           ;main.c: 1073: putsUSART((char *) "+OK\r\n");
 14539  0014C2  0E7F               	movlw	high STR_9
 14540  0014C4  0100               	movlb	0	; () banked
 14541  0014C6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14542  0014C8  0E7F               	movlw	low STR_9
 14543  0014CA  6F61               	movwf	?_putsUSART& (0+255),b
 14544  0014CC  ECF6  F028         	call	_putsUSART	;wreg free
 14545                           
 14546                           ;main.c: 1074: }
 14547  0014D0  D007               	goto	l10647
 14548  0014D2                     l10645:
 14549                           
 14550                           ; BSR set to: 1
 14551                           ;main.c: 1075: else {
 14552                           ;main.c: 1076: putsUSART((char *) "-ERROR - Unknown command\r\n");
 14553  0014D2  0E7B               	movlw	high STR_132
 14554  0014D4  0100               	movlb	0	; () banked
 14555  0014D6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14556  0014D8  0E7E               	movlw	low STR_132
 14557  0014DA  6F61               	movwf	?_putsUSART& (0+255),b
 14558  0014DC  ECF6  F028         	call	_putsUSART	;wreg free
 14559  0014E0                     l10647:
 14560                           
 14561                           ;main.c: 1077: }
 14562                           ;main.c: 1078: }
 14563                           ;main.c: 1080: memset(cmdbuf, 0, sizeof ( cmdbuf));
 14564  0014E0  0E01               	movlw	high _cmdbuf
 14565  0014E2  0100               	movlb	0	; () banked
 14566  0014E4  6F61               	movwf	(?_memset+1)& (0+255),b
 14567  0014E6  0E04               	movlw	low _cmdbuf
 14568  0014E8  6F60               	movwf	?_memset& (0+255),b
 14569  0014EA  6B63               	clrf	(?_memset+3)& (0+255),b
 14570  0014EC  6B62               	clrf	(?_memset+2)& (0+255),b
 14571  0014EE  6B65               	clrf	(?_memset+5)& (0+255),b
 14572  0014F0  0E50               	movlw	80
 14573  0014F2  6F64               	movwf	(?_memset+4)& (0+255),b
 14574  0014F4  EC55  F02B         	call	_memset	;wreg free
 14575                           
 14576                           ; BSR set to: 0
 14577                           ;main.c: 1081: pos = 0;
 14578  0014F8  0101               	movlb	1	; () banked
 14579  0014FA  6B02               	clrf	_pos& (0+255),b
 14580  0014FC                     l10651:
 14581                           
 14582                           ;main.c: 1082: }
 14583                           ;main.c: 1083: }
 14584                           ;main.c: 1086: (INTCONbits.GIE = 1);
 14585  0014FC  8EF2               	bsf	intcon,7,c	;volatile
 14586  0014FE                     l524:
 14587  0014FE  0012               	return	
 14588  001500                     __end_of_doModeVerbose:
 14589                           	opt stack 0
 14590  001500                     PL2:
 14591                           	opt stack 20
 14592  001500  0E04               	movlw	low _cmdbuf
 14593  001502  0101               	movlb	1	; () banked
 14594  001504  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14595  001506  0E01               	movlw	high _cmdbuf
 14596  001508  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14597  00150A  0100               	movlb	0	; () banked
 14598  00150C  516E               	movf	(?_stristr+1)& (0+255),w,b
 14599  00150E  0101               	movlb	1	; () banked
 14600  001510  19B3               	xorwf	(??_doModeVerbose+1)& (0+255),w,b
 14601  001512  0012               	return	
 14602  001514                     __end_ofPL2:
 14603                           	opt stack 0
 14604  001514                     PL4:
 14605                           	opt stack 20
 14606  001514  0E01               	movlw	high _cmdbuf
 14607  001516  0100               	movlb	0	; () banked
 14608  001518  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14609  00151A  0E04               	movlw	low _cmdbuf
 14610  00151C  6F60               	movwf	?_strcpy& (0+255),b
 14611  00151E  0E09               	movlw	low (_cmdbuf+5)
 14612  001520  0101               	movlb	1	; () banked
 14613  001522  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14614  001524  0E01               	movlw	high (_cmdbuf+5)
 14615  001526  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14616  001528  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14617  00152C  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14618  001530  0012               	return	
 14619  001532                     __end_ofPL4:
 14620                           	opt stack 0
 14621  001532                     PL6:
 14622                           	opt stack 20
 14623  001532  0100               	movlb	0	; () banked
 14624  001534  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14625  001536  6B6C               	clrf	?_strtok& (0+255),b
 14626  001538  0E7F               	movlw	high STR_30
 14627  00153A  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14628  00153C  0EF4               	movlw	low STR_30
 14629  00153E  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14630  001540  0012               	return	
 14631  001542                     __end_ofPL6:
 14632                           	opt stack 0
 14633  001542                     PL8:
 14634                           	opt stack 20
 14635  001542  0100               	movlb	0	; () banked
 14636  001544  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14637  001546  0E04               	movlw	low _cmdbuf
 14638  001548  6F60               	movwf	?_strcpy& (0+255),b
 14639  00154A  0E0C               	movlw	low (_cmdbuf+8)
 14640  00154C  0101               	movlb	1	; () banked
 14641  00154E  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14642  001550  0E01               	movlw	high (_cmdbuf+8)
 14643  001552  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14644  001554  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14645  001558  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14646  00155C  0012               	return	
 14647  00155E                     __end_ofPL8:
 14648                           	opt stack 0
 14649  00155E                     PL10:
 14650                           	opt stack 20
 14651  00155E  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14652  001560  6B6C               	clrf	?_strtok& (0+255),b
 14653  001562  0E7F               	movlw	high STR_30
 14654  001564  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14655  001566  0EF4               	movlw	low STR_30
 14656  001568  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14657  00156A  0012               	return	
 14658  00156C                     __end_ofPL10:
 14659                           	opt stack 0
 14660  00156C                     PL12:
 14661                           	opt stack 20
 14662  00156C  6BBB               	clrf	(??_doModeVerbose+9)& (0+255),b
 14663  00156E  6BBC               	clrf	(??_doModeVerbose+10)& (0+255),b
 14664  001570  6BBD               	clrf	(??_doModeVerbose+11)& (0+255),b
 14665  001572  0E1A               	movlw	26
 14666  001574                     u12855:
 14667  001574  90D8               	bcf	status,0,c
 14668  001576  37BA               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 14669  001578  37BB               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 14670  00157A  37BC               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 14671  00157C  37BD               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 14672  00157E  2EE8               	decfsz	wreg,f,c
 14673  001580  D7F9               	goto	u12855
 14674  001582  51B6               	movf	(??_doModeVerbose+4)& (0+255),w,b
 14675  001584  11BA               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 14676  001586  6FBE               	movwf	(??_doModeVerbose+12)& (0+255),b
 14677  001588  51B7               	movf	(??_doModeVerbose+5)& (0+255),w,b
 14678  00158A  11BB               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 14679  00158C  6FBF               	movwf	(??_doModeVerbose+13)& (0+255),b
 14680  00158E  51B8               	movf	(??_doModeVerbose+6)& (0+255),w,b
 14681  001590  11BC               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 14682  001592  6FC0               	movwf	(??_doModeVerbose+14)& (0+255),b
 14683  001594  51B9               	movf	(??_doModeVerbose+7)& (0+255),w,b
 14684  001596  11BD               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 14685  001598  6FC1               	movwf	(??_doModeVerbose+15)& (0+255),b
 14686  00159A  51B2               	movf	??_doModeVerbose& (0+255),w,b
 14687  00159C  11BE               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 14688  00159E  6FC2               	movwf	(??_doModeVerbose+16)& (0+255),b
 14689  0015A0  51B3               	movf	(??_doModeVerbose+1)& (0+255),w,b
 14690  0015A2  11BF               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 14691  0015A4  6FC3               	movwf	(??_doModeVerbose+17)& (0+255),b
 14692  0015A6  51B4               	movf	(??_doModeVerbose+2)& (0+255),w,b
 14693  0015A8  11C0               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 14694  0015AA  6FC4               	movwf	(??_doModeVerbose+18)& (0+255),b
 14695  0015AC  51B5               	movf	(??_doModeVerbose+3)& (0+255),w,b
 14696  0015AE  11C1               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 14697  0015B0  6FC5               	movwf	(??_doModeVerbose+19)& (0+255),b
 14698  0015B2  0102               	movlb	2	; () banked
 14699  0015B4  0012               	return	
 14700  0015B6                     __end_ofPL12:
 14701                           	opt stack 0
 14702  0015B6                     PL28:
 14703                           	opt stack 20
 14704  0015B6  0100               	movlb	0	; () banked
 14705  0015B8  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14706  0015BA  6B6C               	clrf	?_strtok& (0+255),b
 14707  0015BC  0E7F               	movlw	high (STR_256+5)
 14708  0015BE  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14709  0015C0  0E2A               	movlw	low (STR_256+5)
 14710  0015C2  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14711  0015C4  0012               	return	
 14712  0015C6                     __end_ofPL28:
 14713                           	opt stack 0
 14714  0015C6                     PL30:
 14715                           	opt stack 20
 14716  0015C6  0E01               	movlw	high _cmdbuf
 14717  0015C8  0100               	movlb	0	; () banked
 14718  0015CA  6F6D               	movwf	(?_strtok+1)& (0+255),b
 14719  0015CC  0E04               	movlw	low _cmdbuf
 14720  0015CE  6F6C               	movwf	?_strtok& (0+255),b
 14721  0015D0  0E7F               	movlw	high STR_30
 14722  0015D2  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14723  0015D4  0EF4               	movlw	low STR_30
 14724  0015D6  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14725  0015D8  0012               	return	
 14726  0015DA                     __end_ofPL30:
 14727                           	opt stack 0
 14728  0015DA                     PL36:
 14729                           	opt stack 20
 14730  0015DA  0100               	movlb	0	; () banked
 14731  0015DC  6F6D               	movwf	(?_strtok+1)& (0+255),b
 14732  0015DE  0E04               	movlw	low _cmdbuf
 14733  0015E0  6F6C               	movwf	?_strtok& (0+255),b
 14734  0015E2  0E7F               	movlw	high (STR_256+5)
 14735  0015E4  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14736  0015E6  0E2A               	movlw	low (STR_256+5)
 14737  0015E8  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14738  0015EA  0012               	return	
 14739  0015EC                     __end_ofPL36:
 14740                           	opt stack 0
 14741  0015EC                     PL42:
 14742                           	opt stack 20
 14743  0015EC  0102               	movlb	2	; () banked
 14744  0015EE  51B0               	movf	doModeVerbose@i_1106& (0+255),w,b
 14745  0015F0  C2AE  F1B2         	movff	doModeVerbose@reg,??_doModeVerbose
 14746  0015F4  0101               	movlb	1	; () banked
 14747  0015F6  6BB3               	clrf	(??_doModeVerbose+1)& (0+255),b
 14748  0015F8  27B2               	addwf	??_doModeVerbose& (0+255),f,b
 14749  0015FA  0E00               	movlw	0
 14750  0015FC  23B3               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 14751  0015FE  51B2               	movf	??_doModeVerbose& (0+255),w,b
 14752  001600  0100               	movlb	0	; () banked
 14753  001602  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 14754  001604  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 14755  001606  0012               	return	
 14756  001608                     __end_ofPL42:
 14757                           	opt stack 0
 14758  001608                     PL44:
 14759                           	opt stack 20
 14760  001608  0101               	movlb	1	; () banked
 14761  00160A  6BB3               	clrf	(??_doModeVerbose+1)& (0+255),b
 14762  00160C  6BB4               	clrf	(??_doModeVerbose+2)& (0+255),b
 14763  00160E  6BB5               	clrf	(??_doModeVerbose+3)& (0+255),b
 14764  001610  C1B4  F1B5         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 14765  001614  C1B3  F1B4         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 14766  001618  C1B2  F1B3         	movff	??_doModeVerbose,??_doModeVerbose+1
 14767  00161C  6BB2               	clrf	??_doModeVerbose& (0+255),b
 14768  00161E  0102               	movlb	2	; () banked
 14769  001620  0012               	return	
 14770  001622                     __end_ofPL44:
 14771                           	opt stack 0
 14772  001622                     PL56:
 14773                           	opt stack 20
 14774  001622  6F60               	movwf	?__CANIDToRegs& (0+255),b
 14775  001624  C2A3  F062         	movff	doModeVerbose@id_1217,?__CANIDToRegs+2
 14776  001628  C2A4  F063         	movff	doModeVerbose@id_1217+1,?__CANIDToRegs+3
 14777  00162C  C2A5  F064         	movff	doModeVerbose@id_1217+2,?__CANIDToRegs+4
 14778  001630  C2A6  F065         	movff	doModeVerbose@id_1217+3,?__CANIDToRegs+5
 14779  001634  0E01               	movlw	1
 14780  001636  6F66               	movwf	(?__CANIDToRegs+6)& (0+255),b
 14781  001638  0C01               	retlw	1
 14782  00163A                     __end_ofPL56:
 14783                           	opt stack 0
 14784  00163A                     PL60:
 14785                           	opt stack 20
 14786  00163A  0101               	movlb	1	; () banked
 14787  00163C  6FB7               	movwf	(??_doModeVerbose+5)& (0+255),b
 14788  00163E  6BB8               	clrf	(??_doModeVerbose+6)& (0+255),b
 14789  001640  6BB9               	clrf	(??_doModeVerbose+7)& (0+255),b
 14790  001642  C1B7  F1B9         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 14791  001646  C1B6  F1B8         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 14792  00164A  6BB7               	clrf	(??_doModeVerbose+5)& (0+255),b
 14793  00164C  6BB6               	clrf	(??_doModeVerbose+4)& (0+255),b
 14794  00164E  0012               	return	
 14795  001650                     __end_ofPL60:
 14796                           	opt stack 0
 14797                           tblptru	equ	0xFF8
 14798                           tblptrh	equ	0xFF7
 14799                           tblptrl	equ	0xFF6
 14800                           tablat	equ	0xFF5
 14801                           prodh	equ	0xFF4
 14802                           prodl	equ	0xFF3
 14803                           intcon	equ	0xFF2
 14804                           indf0	equ	0xFEF
 14805                           postinc0	equ	0xFEE
 14806                           fsr0h	equ	0xFEA
 14807                           fsr0l	equ	0xFE9
 14808                           wreg	equ	0xFE8
 14809                           indf1	equ	0xFE7
 14810                           postinc1	equ	0xFE6
 14811                           postdec1	equ	0xFE5
 14812                           fsr1h	equ	0xFE2
 14813                           fsr1l	equ	0xFE1
 14814                           indf2	equ	0xFDF
 14815                           postinc2	equ	0xFDE
 14816                           postdec2	equ	0xFDD
 14817                           plusw2	equ	0xFDB
 14818                           fsr2h	equ	0xFDA
 14819                           fsr2l	equ	0xFD9
 14820                           status	equ	0xFD8
 14821                           
 14822 ;; *************** function _setFilter *****************
 14823 ;; Defined at:
 14824 ;;		line 2776 in file "main.c"
 14825 ;; Parameters:    Size  Location     Type
 14826 ;;  filter          1    wreg     unsigned char 
 14827 ;;  val             4    0[BANK0 ] unsigned long 
 14828 ;; Auto vars:     Size  Location     Type
 14829 ;;  filter          1   10[BANK0 ] unsigned char 
 14830 ;;  eidl            1   14[BANK0 ] unsigned char 
 14831 ;;  eidh            1   13[BANK0 ] unsigned char 
 14832 ;;  sidl            1   12[BANK0 ] unsigned char 
 14833 ;;  sidh            1   11[BANK0 ] unsigned char 
 14834 ;; Return value:  Size  Location     Type
 14835 ;;		None               void
 14836 ;; Registers used:
 14837 ;;		wreg, status,2, status,0
 14838 ;; Tracked objects:
 14839 ;;		On entry : F/2
 14840 ;;		On exit  : F/0
 14841 ;;		Unchanged: 0/0
 14842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14843 ;;      Params:         0       4       0       0       0       0       0
 14844 ;;      Locals:         0       5       0       0       0       0       0
 14845 ;;      Temps:          0       6       0       0       0       0       0
 14846 ;;      Totals:         0      15       0       0       0       0       0
 14847 ;;Total ram usage:       15 bytes
 14848 ;; Hardware stack levels used:    1
 14849 ;; Hardware stack levels required when called:    3
 14850 ;; This function calls:
 14851 ;;		Nothing
 14852 ;; This function is called by:
 14853 ;;		_doModeVerbose
 14854 ;; This function uses a non-reentrant model
 14855 ;;
 14856                           
 14857                           	psect	text23
 14858  00289E                     __ptext23:
 14859                           	opt stack 0
 14860  00289E                     _setFilter:
 14861                           	opt stack 26
 14862                           
 14863                           ;incstack = 0
 14864                           ;incstack = 0
 14865                           ;setFilter@filter stored from wreg
 14866  00289E  CFE8 F06A          	movff	wreg,setFilter@filter
 14867                           
 14868                           ; BSR set to: 2
 14869                           ;main.c: 2777: uint8_t sidh = (long) val >> 21L;
 14870  0028A2  0E15               	movlw	21
 14871  0028A4  0100               	movlb	0	; () banked
 14872  0028A6  6F64               	movwf	??_setFilter& (0+255),b
 14873  0028A8  C060  F065         	movff	setFilter@val,??_setFilter+1
 14874  0028AC  C061  F066         	movff	setFilter@val+1,??_setFilter+2
 14875  0028B0  C062  F067         	movff	setFilter@val+2,??_setFilter+3
 14876  0028B4  C063  F068         	movff	setFilter@val+3,??_setFilter+4
 14877  0028B8                     u15335:
 14878  0028B8  6764               	tstfsz	??_setFilter& (0+255),b
 14879  0028BA  D001               	goto	u15336
 14880  0028BC  D007               	goto	u15337
 14881  0028BE                     u15336:
 14882  0028BE  3568               	rlcf	(??_setFilter+4)& (0+255),w,b
 14883  0028C0  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 14884  0028C2  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 14885  0028C4  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 14886  0028C6  3365               	rrcf	(??_setFilter+1)& (0+255),f,b
 14887  0028C8  2F64               	decfsz	??_setFilter& (0+255),f,b
 14888  0028CA  D7F6               	goto	u15335
 14889  0028CC                     u15337:
 14890  0028CC  5165               	movf	(??_setFilter+1)& (0+255),w,b
 14891  0028CE  6F6B               	movwf	setFilter@sidh& (0+255),b
 14892                           
 14893                           ;main.c: 2778: uint8_t sidl = (((long) val >> 13L) & 0xe0) |
 14894                           ;main.c: 2779: ((long) (val) & 0x03L) |
 14895                           ;main.c: 2780: 0x08;
 14896  0028D0  C060  F064         	movff	setFilter@val,??_setFilter
 14897  0028D4  0E03               	movlw	3
 14898  0028D6  1764               	andwf	??_setFilter& (0+255),f,b
 14899  0028D8  0E0D               	movlw	13
 14900  0028DA  6F65               	movwf	(??_setFilter+1)& (0+255),b
 14901  0028DC  C060  F066         	movff	setFilter@val,??_setFilter+2
 14902  0028E0  C061  F067         	movff	setFilter@val+1,??_setFilter+3
 14903  0028E4  C062  F068         	movff	setFilter@val+2,??_setFilter+4
 14904  0028E8  C063  F069         	movff	setFilter@val+3,??_setFilter+5
 14905  0028EC                     u15345:
 14906  0028EC  6765               	tstfsz	(??_setFilter+1)& (0+255),b
 14907  0028EE  D001               	goto	u15346
 14908  0028F0  D007               	goto	u15347
 14909  0028F2                     u15346:
 14910  0028F2  3569               	rlcf	(??_setFilter+5)& (0+255),w,b
 14911  0028F4  3369               	rrcf	(??_setFilter+5)& (0+255),f,b
 14912  0028F6  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 14913  0028F8  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 14914  0028FA  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 14915  0028FC  2F65               	decfsz	(??_setFilter+1)& (0+255),f,b
 14916  0028FE  D7F6               	goto	u15345
 14917  002900                     u15347:
 14918  002900  5166               	movf	(??_setFilter+2)& (0+255),w,b
 14919  002902  0BE0               	andlw	224
 14920  002904  1164               	iorwf	??_setFilter& (0+255),w,b
 14921  002906  0908               	iorlw	8
 14922  002908  6F6C               	movwf	setFilter@sidl& (0+255),b
 14923                           
 14924                           ; BSR set to: 0
 14925                           ;main.c: 2781: uint8_t eidh = (long) val >> 8L;
 14926  00290A  C061  F06D         	movff	setFilter@val+1,setFilter@eidh
 14927                           
 14928                           ; BSR set to: 0
 14929                           ;main.c: 2782: uint8_t eidl = val;
 14930  00290E  C060  F06E         	movff	setFilter@val,setFilter@eidl
 14931                           
 14932                           ;main.c: 2784: switch (filter) {
 14933  002912  D090               	goto	l12083
 14934  002914                     l1230:
 14935                           
 14936                           ; BSR set to: 0
 14937                           ;main.c: 2787: RXF0SIDH = sidh;
 14938  002914  C06B  FF00         	movff	setFilter@sidh,3840	;volatile
 14939                           
 14940                           ;main.c: 2788: RXF0SIDL = sidl;
 14941  002918  C06C  FF01         	movff	setFilter@sidl,3841	;volatile
 14942                           
 14943                           ;main.c: 2789: RXF0EIDH = eidh;
 14944  00291C  C06D  FF02         	movff	setFilter@eidh,3842	;volatile
 14945                           
 14946                           ;main.c: 2790: RXF0EIDL = eidl;
 14947  002920  C06E  FF03         	movff	setFilter@eidl,3843	;volatile
 14948                           
 14949                           ;main.c: 2791: break;
 14950  002924  D0AA               	goto	l1247
 14951  002926                     l1232:
 14952                           
 14953                           ; BSR set to: 0
 14954                           ;main.c: 2794: RXF1SIDH = sidh;
 14955  002926  C06B  FF04         	movff	setFilter@sidh,3844	;volatile
 14956                           
 14957                           ;main.c: 2795: RXF1SIDL = sidl;
 14958  00292A  C06C  FF05         	movff	setFilter@sidl,3845	;volatile
 14959                           
 14960                           ;main.c: 2796: RXF1EIDH = eidh;
 14961  00292E  C06D  FF06         	movff	setFilter@eidh,3846	;volatile
 14962                           
 14963                           ;main.c: 2797: RXF1EIDL = eidl;
 14964  002932  C06E  FF07         	movff	setFilter@eidl,3847	;volatile
 14965                           
 14966                           ;main.c: 2798: break;
 14967  002936  D0A1               	goto	l1247
 14968  002938                     l1233:
 14969                           
 14970                           ; BSR set to: 0
 14971                           ;main.c: 2801: RXF2SIDH = sidh;
 14972  002938  C06B  FF08         	movff	setFilter@sidh,3848	;volatile
 14973                           
 14974                           ;main.c: 2802: RXF2SIDL = sidl;
 14975  00293C  C06C  FF09         	movff	setFilter@sidl,3849	;volatile
 14976                           
 14977                           ;main.c: 2803: RXF2EIDH = eidh;
 14978  002940  C06D  FF0A         	movff	setFilter@eidh,3850	;volatile
 14979                           
 14980                           ;main.c: 2804: RXF2EIDL = eidl;
 14981  002944  C06E  FF0B         	movff	setFilter@eidl,3851	;volatile
 14982                           
 14983                           ;main.c: 2805: break;
 14984  002948  D098               	goto	l1247
 14985  00294A                     l1234:
 14986                           
 14987                           ; BSR set to: 0
 14988                           ;main.c: 2808: RXF3SIDH = sidh;
 14989  00294A  C06B  FF0C         	movff	setFilter@sidh,3852	;volatile
 14990                           
 14991                           ;main.c: 2809: RXF3SIDL = sidl;
 14992  00294E  C06C  FF0D         	movff	setFilter@sidl,3853	;volatile
 14993                           
 14994                           ;main.c: 2810: RXF3EIDH = eidh;
 14995  002952  C06D  FF0E         	movff	setFilter@eidh,3854	;volatile
 14996                           
 14997                           ;main.c: 2811: RXF3EIDL = eidl;
 14998  002956  C06E  FF0F         	movff	setFilter@eidl,3855	;volatile
 14999                           
 15000                           ;main.c: 2812: break;
 15001  00295A  D08F               	goto	l1247
 15002  00295C                     l1235:
 15003                           
 15004                           ; BSR set to: 0
 15005                           ;main.c: 2815: RXF4SIDH = sidh;
 15006  00295C  C06B  FF10         	movff	setFilter@sidh,3856	;volatile
 15007                           
 15008                           ;main.c: 2816: RXF4SIDL = sidl;
 15009  002960  C06C  FF11         	movff	setFilter@sidl,3857	;volatile
 15010                           
 15011                           ;main.c: 2817: RXF4EIDH = eidh;
 15012  002964  C06D  FF12         	movff	setFilter@eidh,3858	;volatile
 15013                           
 15014                           ;main.c: 2818: RXF4EIDL = eidl;
 15015  002968  C06E  FF13         	movff	setFilter@eidl,3859	;volatile
 15016                           
 15017                           ;main.c: 2819: break;
 15018  00296C  D086               	goto	l1247
 15019  00296E                     l1236:
 15020                           
 15021                           ; BSR set to: 0
 15022                           ;main.c: 2822: RXF5SIDH = sidh;
 15023  00296E  C06B  FF14         	movff	setFilter@sidh,3860	;volatile
 15024                           
 15025                           ;main.c: 2823: RXF5SIDL = sidl;
 15026  002972  C06C  FF15         	movff	setFilter@sidl,3861	;volatile
 15027                           
 15028                           ;main.c: 2824: RXF5EIDH = eidh;
 15029  002976  C06D  FF16         	movff	setFilter@eidh,3862	;volatile
 15030                           
 15031                           ;main.c: 2825: RXF5EIDL = eidl;
 15032  00297A  C06E  FF17         	movff	setFilter@eidl,3863	;volatile
 15033                           
 15034                           ;main.c: 2826: break;
 15035  00297E  D07D               	goto	l1247
 15036  002980                     l1237:
 15037                           
 15038                           ; BSR set to: 0
 15039                           ;main.c: 2829: RXF6SIDH = sidh;
 15040  002980  C06B  FD60         	movff	setFilter@sidh,3424	;volatile
 15041                           
 15042                           ;main.c: 2830: RXF6SIDL = sidl;
 15043  002984  C06C  FD61         	movff	setFilter@sidl,3425	;volatile
 15044                           
 15045                           ;main.c: 2831: RXF6EIDH = eidh;
 15046  002988  C06D  FD62         	movff	setFilter@eidh,3426	;volatile
 15047                           
 15048                           ;main.c: 2832: RXF6EIDL = eidl;
 15049  00298C  C06E  FD63         	movff	setFilter@eidl,3427	;volatile
 15050                           
 15051                           ;main.c: 2833: break;
 15052  002990  D074               	goto	l1247
 15053  002992                     l1238:
 15054                           
 15055                           ; BSR set to: 0
 15056                           ;main.c: 2836: RXF7SIDH = sidh;
 15057  002992  C06B  FD64         	movff	setFilter@sidh,3428	;volatile
 15058                           
 15059                           ;main.c: 2837: RXF7SIDL = sidl;
 15060  002996  C06C  FD65         	movff	setFilter@sidl,3429	;volatile
 15061                           
 15062                           ;main.c: 2838: RXF7EIDH = eidh;
 15063  00299A  C06D  FD66         	movff	setFilter@eidh,3430	;volatile
 15064                           
 15065                           ;main.c: 2839: RXF7EIDL = eidl;
 15066  00299E  C06E  FD67         	movff	setFilter@eidl,3431	;volatile
 15067                           
 15068                           ;main.c: 2840: break;
 15069  0029A2  D06B               	goto	l1247
 15070  0029A4                     l1239:
 15071                           
 15072                           ; BSR set to: 0
 15073                           ;main.c: 2843: RXF8SIDH = sidh;
 15074  0029A4  C06B  FD68         	movff	setFilter@sidh,3432	;volatile
 15075                           
 15076                           ;main.c: 2844: RXF8SIDL = sidl;
 15077  0029A8  C06C  FD69         	movff	setFilter@sidl,3433	;volatile
 15078                           
 15079                           ;main.c: 2845: RXF8EIDH = eidh;
 15080  0029AC  C06D  FD6A         	movff	setFilter@eidh,3434	;volatile
 15081                           
 15082                           ;main.c: 2846: RXF8EIDL = eidl;
 15083  0029B0  C06E  FD6B         	movff	setFilter@eidl,3435	;volatile
 15084                           
 15085                           ;main.c: 2847: break;
 15086  0029B4  D062               	goto	l1247
 15087  0029B6                     l1240:
 15088                           
 15089                           ; BSR set to: 0
 15090                           ;main.c: 2850: RXF9SIDH = sidh;
 15091  0029B6  C06B  FD70         	movff	setFilter@sidh,3440	;volatile
 15092                           
 15093                           ;main.c: 2851: RXF9SIDL = sidl;
 15094  0029BA  C06C  FD71         	movff	setFilter@sidl,3441	;volatile
 15095                           
 15096                           ;main.c: 2852: RXF9EIDH = eidh;
 15097  0029BE  C06D  FD72         	movff	setFilter@eidh,3442	;volatile
 15098                           
 15099                           ;main.c: 2853: RXF9EIDL = eidl;
 15100  0029C2  C06E  FD73         	movff	setFilter@eidl,3443	;volatile
 15101                           
 15102                           ;main.c: 2854: break;
 15103  0029C6  D059               	goto	l1247
 15104  0029C8                     l1241:
 15105                           
 15106                           ; BSR set to: 0
 15107                           ;main.c: 2857: RXF10SIDH = sidh;
 15108  0029C8  C06B  FD74         	movff	setFilter@sidh,3444	;volatile
 15109                           
 15110                           ;main.c: 2858: RXF10SIDL = sidl;
 15111  0029CC  C06C  FD75         	movff	setFilter@sidl,3445	;volatile
 15112                           
 15113                           ;main.c: 2859: RXF10EIDH = eidh;
 15114  0029D0  C06D  FD76         	movff	setFilter@eidh,3446	;volatile
 15115                           
 15116                           ;main.c: 2860: RXF10EIDL = eidl;
 15117  0029D4  C06E  FD77         	movff	setFilter@eidl,3447	;volatile
 15118                           
 15119                           ;main.c: 2861: break;
 15120  0029D8  D050               	goto	l1247
 15121  0029DA                     l1242:
 15122                           
 15123                           ; BSR set to: 0
 15124                           ;main.c: 2864: RXF11SIDH = sidh;
 15125  0029DA  C06B  FD78         	movff	setFilter@sidh,3448	;volatile
 15126                           
 15127                           ;main.c: 2865: RXF11SIDL = sidl;
 15128  0029DE  C06C  FD79         	movff	setFilter@sidl,3449	;volatile
 15129                           
 15130                           ;main.c: 2866: RXF11EIDH = eidh;
 15131  0029E2  C06D  FD7A         	movff	setFilter@eidh,3450	;volatile
 15132                           
 15133                           ;main.c: 2867: RXF11EIDL = eidl;
 15134  0029E6  C06E  FD7B         	movff	setFilter@eidl,3451	;volatile
 15135                           
 15136                           ;main.c: 2868: break;
 15137  0029EA  D047               	goto	l1247
 15138  0029EC                     l1243:
 15139                           
 15140                           ; BSR set to: 0
 15141                           ;main.c: 2871: RXF12SIDH = sidh;
 15142  0029EC  C06B  FD80         	movff	setFilter@sidh,3456	;volatile
 15143                           
 15144                           ;main.c: 2872: RXF12SIDL = sidl;
 15145  0029F0  C06C  FD81         	movff	setFilter@sidl,3457	;volatile
 15146                           
 15147                           ;main.c: 2873: RXF12EIDH = eidh;
 15148  0029F4  C06D  FD82         	movff	setFilter@eidh,3458	;volatile
 15149                           
 15150                           ;main.c: 2874: RXF12EIDL = eidl;
 15151  0029F8  C06E  FD83         	movff	setFilter@eidl,3459	;volatile
 15152                           
 15153                           ;main.c: 2875: break;
 15154  0029FC  D03E               	goto	l1247
 15155  0029FE                     l1244:
 15156                           
 15157                           ; BSR set to: 0
 15158                           ;main.c: 2878: RXF13SIDH = sidh;
 15159  0029FE  C06B  FD84         	movff	setFilter@sidh,3460	;volatile
 15160                           
 15161                           ;main.c: 2879: RXF13SIDL = sidl;
 15162  002A02  C06C  FD85         	movff	setFilter@sidl,3461	;volatile
 15163                           
 15164                           ;main.c: 2880: RXF13EIDH = eidh;
 15165  002A06  C06D  FD86         	movff	setFilter@eidh,3462	;volatile
 15166                           
 15167                           ;main.c: 2881: RXF13EIDL = eidl;
 15168  002A0A  C06E  FD87         	movff	setFilter@eidl,3463	;volatile
 15169                           
 15170                           ;main.c: 2882: break;
 15171  002A0E  D035               	goto	l1247
 15172  002A10                     l1245:
 15173                           
 15174                           ; BSR set to: 0
 15175                           ;main.c: 2885: RXF14SIDH = sidh;
 15176  002A10  C06B  FD88         	movff	setFilter@sidh,3464	;volatile
 15177                           
 15178                           ;main.c: 2886: RXF14SIDL = sidl;
 15179  002A14  C06C  FD89         	movff	setFilter@sidl,3465	;volatile
 15180                           
 15181                           ;main.c: 2887: RXF14EIDH = eidh;
 15182  002A18  C06D  FD8A         	movff	setFilter@eidh,3466	;volatile
 15183                           
 15184                           ;main.c: 2888: RXF14EIDL = eidl;
 15185  002A1C  C06E  FD8B         	movff	setFilter@eidl,3467	;volatile
 15186                           
 15187                           ;main.c: 2889: break;
 15188  002A20  D02C               	goto	l1247
 15189  002A22                     l1246:
 15190                           
 15191                           ; BSR set to: 0
 15192                           ;main.c: 2892: RXF15SIDH = sidh;
 15193  002A22  C06B  FD90         	movff	setFilter@sidh,3472	;volatile
 15194                           
 15195                           ;main.c: 2893: RXF15SIDL = sidl;
 15196  002A26  C06C  FD91         	movff	setFilter@sidl,3473	;volatile
 15197                           
 15198                           ;main.c: 2894: RXF15EIDH = eidh;
 15199  002A2A  C06D  FD92         	movff	setFilter@eidh,3474	;volatile
 15200                           
 15201                           ;main.c: 2895: RXF15EIDL = eidl;
 15202  002A2E  C06E  FD93         	movff	setFilter@eidl,3475	;volatile
 15203                           
 15204                           ;main.c: 2896: break;
 15205  002A32  D023               	goto	l1247
 15206  002A34                     l12083:
 15207                           
 15208                           ; BSR set to: 0
 15209  002A34  516A               	movf	setFilter@filter& (0+255),w,b
 15210                           
 15211                           ; Switch size 1, requested type "space"
 15212                           ; Number of cases is 16, Range of values is 0 to 15
 15213                           ; switch strategies available:
 15214                           ; Name         Instructions Cycles
 15215                           ; simple_byte           49    25 (average)
 15216                           ;	Chosen strategy is simple_byte
 15217  002A36  E101 D76D          	bz	l1230
 15218  002A3A  0A01               	xorlw	1	; case 1
 15219  002A3C  E101 D773          	bz	l1232
 15220  002A40  0A03               	xorlw	3	; case 2
 15221  002A42  E101 D779          	bz	l1233
 15222  002A46  0A01               	xorlw	1	; case 3
 15223  002A48  E080               	bz	l1234
 15224  002A4A  0A07               	xorlw	7	; case 4
 15225  002A4C  E087               	bz	l1235
 15226  002A4E  0A01               	xorlw	1	; case 5
 15227  002A50  E08E               	bz	l1236
 15228  002A52  0A03               	xorlw	3	; case 6
 15229  002A54  E095               	bz	l1237
 15230  002A56  0A01               	xorlw	1	; case 7
 15231  002A58  E09C               	bz	l1238
 15232  002A5A  0A0F               	xorlw	15	; case 8
 15233  002A5C  E0A3               	bz	l1239
 15234  002A5E  0A01               	xorlw	1	; case 9
 15235  002A60  E0AA               	bz	l1240
 15236  002A62  0A03               	xorlw	3	; case 10
 15237  002A64  E0B1               	bz	l1241
 15238  002A66  0A01               	xorlw	1	; case 11
 15239  002A68  E0B8               	bz	l1242
 15240  002A6A  0A07               	xorlw	7	; case 12
 15241  002A6C  E0BF               	bz	l1243
 15242  002A6E  0A01               	xorlw	1	; case 13
 15243  002A70  E0C6               	bz	l1244
 15244  002A72  0A03               	xorlw	3	; case 14
 15245  002A74  E0CD               	bz	l1245
 15246  002A76  0A01               	xorlw	1	; case 15
 15247  002A78  E0D4               	bz	l1246
 15248  002A7A                     l1247:
 15249                           
 15250                           ; BSR set to: 0
 15251  002A7A  0012               	return	
 15252  002A7C                     __end_of_setFilter:
 15253                           	opt stack 0
 15254                           tblptru	equ	0xFF8
 15255                           tblptrh	equ	0xFF7
 15256                           tblptrl	equ	0xFF6
 15257                           tablat	equ	0xFF5
 15258                           prodh	equ	0xFF4
 15259                           prodl	equ	0xFF3
 15260                           intcon	equ	0xFF2
 15261                           indf0	equ	0xFEF
 15262                           postinc0	equ	0xFEE
 15263                           fsr0h	equ	0xFEA
 15264                           fsr0l	equ	0xFE9
 15265                           wreg	equ	0xFE8
 15266                           indf1	equ	0xFE7
 15267                           postinc1	equ	0xFE6
 15268                           postdec1	equ	0xFE5
 15269                           fsr1h	equ	0xFE2
 15270                           fsr1l	equ	0xFE1
 15271                           indf2	equ	0xFDF
 15272                           postinc2	equ	0xFDE
 15273                           postdec2	equ	0xFDD
 15274                           plusw2	equ	0xFDB
 15275                           fsr2h	equ	0xFDA
 15276                           fsr2l	equ	0xFD9
 15277                           status	equ	0xFD8
 15278                           
 15279 ;; *************** function _writeRegisterExtended *****************
 15280 ;; Defined at:
 15281 ;;		line 2339 in file "main.c"
 15282 ;; Parameters:    Size  Location     Type
 15283 ;;  nodeid          1    wreg     unsigned char 
 15284 ;;  page            2   86[BANK0 ] unsigned short 
 15285 ;;  reg             1   88[BANK0 ] unsigned char 
 15286 ;;  timeout         2   89[BANK0 ] unsigned short 
 15287 ;;  value           2   91[BANK0 ] PTR unsigned char 
 15288 ;;		 -> doModeVerbose@value_1159(1), 
 15289 ;; Auto vars:     Size  Location     Type
 15290 ;;  nodeid          1   97[BANK0 ] unsigned char 
 15291 ;; Return value:  Size  Location     Type
 15292 ;;                  1    wreg      enum E15660
 15293 ;; Registers used:
 15294 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15295 ;; Tracked objects:
 15296 ;;		On entry : F/2
 15297 ;;		On exit  : E/0
 15298 ;;		Unchanged: 0/0
 15299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15300 ;;      Params:         0       7       0       0       0       0       0
 15301 ;;      Locals:         0       1       0       0       0       0       0
 15302 ;;      Temps:          0       4       0       0       0       0       0
 15303 ;;      Totals:         0      12       0       0       0       0       0
 15304 ;;Total ram usage:       12 bytes
 15305 ;; Hardware stack levels used:    1
 15306 ;; Hardware stack levels required when called:    7
 15307 ;; This function calls:
 15308 ;;		_sendVSCPFrame
 15309 ;;		_getVSCPFrame
 15310 ;; This function is called by:
 15311 ;;		_doModeVerbose
 15312 ;; This function uses a non-reentrant model
 15313 ;;
 15314                           
 15315                           	psect	text24
 15316  003A06                     __ptext24:
 15317                           	opt stack 0
 15318  003A06                     _writeRegisterExtended:
 15319                           	opt stack 22
 15320                           
 15321                           ; BSR set to: 0
 15322                           ;incstack = 0
 15323                           ;incstack = 0
 15324                           ;writeRegisterExtended@nodeid stored from wreg
 15325  003A06  CFE8 F0C1          	movff	wreg,writeRegisterExtended@nodeid
 15326                           
 15327                           ; BSR set to: 2
 15328                           ;main.c: 2340: vscpData[ 0 ] = nodeid;
 15329  003A0A  C0C1  F1A4         	movff	writeRegisterExtended@nodeid,_vscpData
 15330                           
 15331                           ; BSR set to: 2
 15332                           ;main.c: 2341: vscpData[ 1 ] = page >> 8;
 15333  003A0E  0100               	movlb	0	; () banked
 15334  003A10  51B7               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15335  003A12  0101               	movlb	1	; () banked
 15336  003A14  6FA5               	movwf	(_vscpData+1)& (0+255),b
 15337                           
 15338                           ; BSR set to: 1
 15339                           ;main.c: 2342: vscpData[ 2 ] = page & 0xff;
 15340  003A16  C0B6  F1A6         	movff	writeRegisterExtended@page,_vscpData+2
 15341                           
 15342                           ; BSR set to: 1
 15343                           ;main.c: 2343: vscpData[ 3 ] = reg;
 15344  003A1A  C0B8  F1A7         	movff	writeRegisterExtended@reg,_vscpData+3
 15345                           
 15346                           ; BSR set to: 1
 15347                           ;main.c: 2344: vscpData[ 4 ] = *value;
 15348  003A1E  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15349  003A22  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15350  003A26  50DF               	movf	indf2,w,c
 15351  003A28  6FA8               	movwf	(_vscpData+4)& (0+255),b
 15352                           
 15353                           ; BSR set to: 1
 15354                           ;main.c: 2346: if (sendVSCPFrame(0,
 15355                           ;main.c: 2347: 38,
 15356                           ;main.c: 2348: 0,
 15357                           ;main.c: 2349: 0,
 15358                           ;main.c: 2350: 5,
 15359                           ;main.c: 2351: vscpData)) {
 15360  003A2A  0100               	movlb	0	; () banked
 15361  003A2C  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15362  003A2E  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 15363  003A30  0E26               	movlw	38
 15364  003A32  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15365  003A34  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15366  003A36  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15367  003A38  0E05               	movlw	5
 15368  003A3A  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15369  003A3C  0E01               	movlw	high _vscpData
 15370  003A3E  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 15371  003A40  0EA4               	movlw	low _vscpData
 15372  003A42  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15373  003A44  ECBD  F022         	call	_sendVSCPFrame	;wreg free
 15374  003A48  0900               	iorlw	0
 15375  003A4A  E05E               	bz	l11983
 15376                           
 15377                           ; BSR set to: 0
 15378                           ;main.c: 2353: timekeeper = 0;
 15379  003A4C  6BE5               	clrf	_timekeeper& (0+255),b	;volatile
 15380  003A4E  6BE6               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 15381  003A50  6BE7               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 15382  003A52  6BE8               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 15383                           
 15384                           ;main.c: 2354: while (timekeeper < timeout) {
 15385  003A54  D049               	goto	l11981
 15386  003A56                     l1087:
 15387                           
 15388                           ; BSR set to: 0
 15389  003A56  0004               	clrwdt		;# 
 15390                           
 15391                           ;main.c: 2358: if (getVSCPFrame(&vscpClass,
 15392                           ;main.c: 2359: &vscpType,
 15393                           ;main.c: 2360: &vscpNodeId,
 15394                           ;main.c: 2361: &vscpPriority,
 15395                           ;main.c: 2362: &vscpSize,
 15396                           ;main.c: 2363: vscpData)) {
 15397  003A58  0E01               	movlw	high _vscpClass
 15398  003A5A  0100               	movlb	0	; () banked
 15399  003A5C  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15400  003A5E  0EAC               	movlw	low _vscpClass
 15401  003A60  6F72               	movwf	?_getVSCPFrame& (0+255),b
 15402  003A62  0E01               	movlw	high _vscpType
 15403  003A64  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15404  003A66  0EB1               	movlw	low _vscpType
 15405  003A68  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15406  003A6A  0E01               	movlw	high _vscpNodeId
 15407  003A6C  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 15408  003A6E  0EAE               	movlw	low _vscpNodeId
 15409  003A70  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15410  003A72  0E01               	movlw	high _vscpPriority
 15411  003A74  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 15412  003A76  0EAF               	movlw	low _vscpPriority
 15413  003A78  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 15414  003A7A  0E01               	movlw	high _vscpSize
 15415  003A7C  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 15416  003A7E  0EB0               	movlw	low _vscpSize
 15417  003A80  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 15418  003A82  0E01               	movlw	high _vscpData
 15419  003A84  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 15420  003A86  0EA4               	movlw	low _vscpData
 15421  003A88  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 15422  003A8A  ECC5  F025         	call	_getVSCPFrame	;wreg free
 15423  003A8E  0900               	iorlw	0
 15424  003A90  E02B               	bz	l11981
 15425                           
 15426                           ; BSR set to: 0
 15427                           ;main.c: 2365: if ((nodeid == vscpNodeId) &&
 15428                           ;main.c: 2366: (5 == vscpSize) &&
 15429                           ;main.c: 2367: (0 == vscpData[ 0 ]) &&
 15430                           ;main.c: 2368: ((page >> 8) == vscpData[ 1 ]) &&
 15431                           ;main.c: 2369: ((page & 0xff) == vscpData[ 2 ]) &&
 15432                           ;main.c: 2370: (reg == vscpData[ 3 ]) &&
 15433                           ;main.c: 2371: (*value == vscpData[ 4 ])) {
 15434  003A92  0101               	movlb	1	; () banked
 15435  003A94  51AE               	movf	_vscpNodeId& (0+255),w,b
 15436  003A96  0100               	movlb	0	; () banked
 15437  003A98  63C1               	cpfseq	writeRegisterExtended@nodeid& (0+255),b
 15438  003A9A  D026               	goto	l11981
 15439                           
 15440                           ; BSR set to: 0
 15441  003A9C  0101               	movlb	1	; () banked
 15442  003A9E  51B0               	movf	_vscpSize& (0+255),w,b
 15443  003AA0  0A05               	xorlw	5
 15444  003AA2  E122               	bnz	l11981
 15445                           
 15446                           ; BSR set to: 1
 15447  003AA4  67A4               	tstfsz	_vscpData& (0+255),b
 15448  003AA6  D020               	goto	l11981
 15449                           
 15450                           ; BSR set to: 1
 15451  003AA8  0100               	movlb	0	; () banked
 15452  003AAA  51B7               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15453  003AAC  0101               	movlb	1	; () banked
 15454  003AAE  19A5               	xorwf	(_vscpData+1)& (0+255),w,b
 15455  003AB0  E11B               	bnz	l11981
 15456                           
 15457                           ; BSR set to: 1
 15458  003AB2  0100               	movlb	0	; () banked
 15459  003AB4  51B6               	movf	writeRegisterExtended@page& (0+255),w,b
 15460  003AB6  EE21  F0A6         	lfsr	2,_vscpData+2
 15461  003ABA  62DF               	cpfseq	indf2,c
 15462  003ABC  D015               	goto	l11981
 15463                           
 15464                           ; BSR set to: 1
 15465  003ABE  51B8               	movf	writeRegisterExtended@reg& (0+255),w,b
 15466  003AC0  0101               	movlb	1	; () banked
 15467  003AC2  EE21  F0A7         	lfsr	2,_vscpData+3
 15468  003AC6  62DF               	cpfseq	indf2,c
 15469  003AC8  D00F               	goto	l11981
 15470                           
 15471                           ; BSR set to: 1
 15472  003ACA  51A8               	movf	(_vscpData+4)& (0+255),w,b
 15473  003ACC  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15474  003AD0  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15475  003AD4  62DF               	cpfseq	indf2,c
 15476  003AD6  D008               	goto	l11981
 15477                           
 15478                           ; BSR set to: 1
 15479                           ;main.c: 2372: *value = vscpData[ 1 ];
 15480  003AD8  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15481  003ADC  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15482  003AE0  C1A5  FFDF         	movff	_vscpData+1,indf2
 15483                           
 15484                           ; BSR set to: 1
 15485                           ;main.c: 2373: return 1;
 15486  003AE4  0E01               	movlw	1
 15487  003AE6  D011               	goto	l1090
 15488  003AE8                     l11981:
 15489  003AE8  0100               	movlb	0	; () banked
 15490  003AEA  51B9               	movf	writeRegisterExtended@timeout& (0+255),w,b
 15491  003AEC  6FBD               	movwf	??_writeRegisterExtended& (0+255),b
 15492  003AEE  51BA               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 15493  003AF0  6FBE               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 15494  003AF2  6BBF               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 15495  003AF4  6BC0               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 15496  003AF6  51BD               	movf	??_writeRegisterExtended& (0+255),w,b
 15497  003AF8  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
 15498  003AFA  51BE               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 15499  003AFC  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 15500  003AFE  51BF               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 15501  003B00  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 15502  003B02  51C0               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 15503  003B04  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 15504  003B06  E3A7               	bnc	l1087
 15505  003B08                     l11983:
 15506                           
 15507                           ; BSR set to: 0
 15508                           ;main.c: 2374: }
 15509                           ;main.c: 2376: }
 15510                           ;main.c: 2378: }
 15511                           ;main.c: 2380: }
 15512                           ;main.c: 2382: return 0;
 15513  003B08  0E00               	movlw	0
 15514  003B0A                     l1090:
 15515  003B0A  0012               	return	
 15516  003B0C                     __end_of_writeRegisterExtended:
 15517                           	opt stack 0
 15518                           tblptru	equ	0xFF8
 15519                           tblptrh	equ	0xFF7
 15520                           tblptrl	equ	0xFF6
 15521                           tablat	equ	0xFF5
 15522                           prodh	equ	0xFF4
 15523                           prodl	equ	0xFF3
 15524                           intcon	equ	0xFF2
 15525                           indf0	equ	0xFEF
 15526                           postinc0	equ	0xFEE
 15527                           fsr0h	equ	0xFEA
 15528                           fsr0l	equ	0xFE9
 15529                           wreg	equ	0xFE8
 15530                           indf1	equ	0xFE7
 15531                           postinc1	equ	0xFE6
 15532                           postdec1	equ	0xFE5
 15533                           fsr1h	equ	0xFE2
 15534                           fsr1l	equ	0xFE1
 15535                           indf2	equ	0xFDF
 15536                           postinc2	equ	0xFDE
 15537                           postdec2	equ	0xFDD
 15538                           plusw2	equ	0xFDB
 15539                           fsr2h	equ	0xFDA
 15540                           fsr2l	equ	0xFD9
 15541                           status	equ	0xFD8
 15542                           
 15543 ;; *************** function _printBinary *****************
 15544 ;; Defined at:
 15545 ;;		line 2426 in file "main.c"
 15546 ;; Parameters:    Size  Location     Type
 15547 ;;  value           1    wreg     unsigned char 
 15548 ;; Auto vars:     Size  Location     Type
 15549 ;;  value           1    3[BANK0 ] unsigned char 
 15550 ;;  i               2    4[BANK0 ] int 
 15551 ;; Return value:  Size  Location     Type
 15552 ;;		None               void
 15553 ;; Registers used:
 15554 ;;		wreg, status,2, status,0, cstack
 15555 ;; Tracked objects:
 15556 ;;		On entry : F/2
 15557 ;;		On exit  : F/0
 15558 ;;		Unchanged: 0/0
 15559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15560 ;;      Params:         0       0       0       0       0       0       0
 15561 ;;      Locals:         0       3       0       0       0       0       0
 15562 ;;      Temps:          0       2       0       0       0       0       0
 15563 ;;      Totals:         0       5       0       0       0       0       0
 15564 ;;Total ram usage:        5 bytes
 15565 ;; Hardware stack levels used:    1
 15566 ;; Hardware stack levels required when called:    4
 15567 ;; This function calls:
 15568 ;;		_WriteUSART
 15569 ;; This function is called by:
 15570 ;;		_doModeVerbose
 15571 ;; This function uses a non-reentrant model
 15572 ;;
 15573                           
 15574                           	psect	text25
 15575  005292                     __ptext25:
 15576                           	opt stack 0
 15577  005292                     _printBinary:
 15578                           	opt stack 25
 15579                           
 15580                           ;incstack = 0
 15581                           ;incstack = 0
 15582                           ;printBinary@value stored from wreg
 15583  005292  CFE8 F063          	movff	wreg,printBinary@value
 15584                           
 15585                           ; BSR set to: 2
 15586                           ;main.c: 2427: int i;
 15587                           ;main.c: 2429: for (i = 7; i >= 0; i--) {
 15588  005296  0100               	movlb	0	; () banked
 15589  005298  6B65               	clrf	(printBinary@i+1)& (0+255),b
 15590  00529A  0E07               	movlw	7
 15591  00529C  6F64               	movwf	printBinary@i& (0+255),b
 15592  00529E                     l11933:
 15593                           
 15594                           ; BSR set to: 0
 15595                           ;main.c: 2430: if (value & (1 << i)) {
 15596  00529E  C064  F061         	movff	printBinary@i,??_printBinary
 15597  0052A2  0E01               	movlw	1
 15598  0052A4  6F62               	movwf	(??_printBinary+1)& (0+255),b
 15599  0052A6  2B61               	incf	??_printBinary& (0+255),f,b
 15600  0052A8  D002               	goto	u15094
 15601  0052AA                     u15095:
 15602  0052AA  90D8               	bcf	status,0,c
 15603  0052AC  3762               	rlcf	(??_printBinary+1)& (0+255),f,b
 15604  0052AE                     u15094:
 15605  0052AE  2F61               	decfsz	??_printBinary& (0+255),f,b
 15606  0052B0  D7FC               	goto	u15095
 15607  0052B2  5162               	movf	(??_printBinary+1)& (0+255),w,b
 15608  0052B4  1563               	andwf	printBinary@value& (0+255),w,b
 15609  0052B6  E006               	bz	l1110
 15610  0052B8                     l1106:
 15611  0052B8  A2AC               	btfss	4012,1,c	;volatile
 15612  0052BA  D7FE               	goto	l1106
 15613                           
 15614                           ;main.c: 2432: WriteUSART('1');
 15615  0052BC  0E31               	movlw	49
 15616  0052BE  ECC5  F02B         	call	_WriteUSART
 15617                           
 15618                           ;main.c: 2433: } else {
 15619  0052C2  D005               	goto	l11941
 15620  0052C4                     l1110:
 15621  0052C4  A2AC               	btfss	4012,1,c	;volatile
 15622  0052C6  D7FE               	goto	l1110
 15623                           
 15624                           ;main.c: 2435: WriteUSART('0');
 15625  0052C8  0E30               	movlw	48
 15626  0052CA  ECC5  F02B         	call	_WriteUSART
 15627  0052CE                     l11941:
 15628  0052CE  0100               	movlb	0	; () banked
 15629  0052D0  0764               	decf	printBinary@i& (0+255),f,b
 15630  0052D2  A0D8               	btfss	status,0,c
 15631  0052D4  0765               	decf	(printBinary@i+1)& (0+255),f,b
 15632                           
 15633                           ; BSR set to: 0
 15634  0052D6  BF65               	btfsc	(printBinary@i+1)& (0+255),7,b
 15635                           
 15636                           ; BSR set to: 0
 15637  0052D8  0012               	return	
 15638  0052DA  D7E1               	goto	l11933
 15639  0052DC                     __end_of_printBinary:
 15640                           	opt stack 0
 15641                           tblptru	equ	0xFF8
 15642                           tblptrh	equ	0xFF7
 15643                           tblptrl	equ	0xFF6
 15644                           tablat	equ	0xFF5
 15645                           prodh	equ	0xFF4
 15646                           prodl	equ	0xFF3
 15647                           intcon	equ	0xFF2
 15648                           indf0	equ	0xFEF
 15649                           postinc0	equ	0xFEE
 15650                           fsr0h	equ	0xFEA
 15651                           fsr0l	equ	0xFE9
 15652                           wreg	equ	0xFE8
 15653                           indf1	equ	0xFE7
 15654                           postinc1	equ	0xFE6
 15655                           postdec1	equ	0xFE5
 15656                           fsr1h	equ	0xFE2
 15657                           fsr1l	equ	0xFE1
 15658                           indf2	equ	0xFDF
 15659                           postinc2	equ	0xFDE
 15660                           postdec2	equ	0xFDD
 15661                           plusw2	equ	0xFDB
 15662                           fsr2h	equ	0xFDA
 15663                           fsr2l	equ	0xFD9
 15664                           status	equ	0xFD8
 15665                           
 15666 ;; *************** function _readRegisterExtended *****************
 15667 ;; Defined at:
 15668 ;;		line 2238 in file "main.c"
 15669 ;; Parameters:    Size  Location     Type
 15670 ;;  nodeid          1    wreg     unsigned char 
 15671 ;;  page            2   86[BANK0 ] unsigned short 
 15672 ;;  reg             1   88[BANK0 ] unsigned char 
 15673 ;;  timeout         2   89[BANK0 ] unsigned short 
 15674 ;;  value           2   91[BANK0 ] PTR unsigned char 
 15675 ;;		 -> doModeVerbose@value(1), 
 15676 ;; Auto vars:     Size  Location     Type
 15677 ;;  nodeid          1   97[BANK0 ] unsigned char 
 15678 ;; Return value:  Size  Location     Type
 15679 ;;                  1    wreg      enum E15660
 15680 ;; Registers used:
 15681 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15682 ;; Tracked objects:
 15683 ;;		On entry : F/2
 15684 ;;		On exit  : E/0
 15685 ;;		Unchanged: 0/0
 15686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15687 ;;      Params:         0       7       0       0       0       0       0
 15688 ;;      Locals:         0       1       0       0       0       0       0
 15689 ;;      Temps:          0       4       0       0       0       0       0
 15690 ;;      Totals:         0      12       0       0       0       0       0
 15691 ;;Total ram usage:       12 bytes
 15692 ;; Hardware stack levels used:    1
 15693 ;; Hardware stack levels required when called:    7
 15694 ;; This function calls:
 15695 ;;		_sendVSCPFrame
 15696 ;;		_getVSCPFrame
 15697 ;; This function is called by:
 15698 ;;		_doModeVerbose
 15699 ;; This function uses a non-reentrant model
 15700 ;;
 15701                           
 15702                           	psect	text26
 15703  003D16                     __ptext26:
 15704                           	opt stack 0
 15705  003D16                     _readRegisterExtended:
 15706                           	opt stack 22
 15707                           
 15708                           ; BSR set to: 0
 15709                           ;incstack = 0
 15710                           ;incstack = 0
 15711                           ;readRegisterExtended@nodeid stored from wreg
 15712  003D16  CFE8 F0C1          	movff	wreg,readRegisterExtended@nodeid
 15713                           
 15714                           ; BSR set to: 2
 15715                           ;main.c: 2239: vscpData[ 0 ] = nodeid;
 15716  003D1A  C0C1  F1A4         	movff	readRegisterExtended@nodeid,_vscpData
 15717                           
 15718                           ; BSR set to: 2
 15719                           ;main.c: 2240: vscpData[ 1 ] = page >> 8;
 15720  003D1E  0100               	movlb	0	; () banked
 15721  003D20  51B7               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 15722  003D22  0101               	movlb	1	; () banked
 15723  003D24  6FA5               	movwf	(_vscpData+1)& (0+255),b
 15724                           
 15725                           ; BSR set to: 1
 15726                           ;main.c: 2241: vscpData[ 2 ] = page & 0xff;
 15727  003D26  C0B6  F1A6         	movff	readRegisterExtended@page,_vscpData+2
 15728                           
 15729                           ; BSR set to: 1
 15730                           ;main.c: 2242: vscpData[ 3 ] = reg;
 15731  003D2A  C0B8  F1A7         	movff	readRegisterExtended@reg,_vscpData+3
 15732                           
 15733                           ; BSR set to: 1
 15734                           ;main.c: 2243: vscpData[ 4 ] = 1;
 15735  003D2E  0E01               	movlw	1
 15736  003D30  6FA8               	movwf	(_vscpData+4)& (0+255),b
 15737                           
 15738                           ; BSR set to: 1
 15739                           ;main.c: 2245: if (sendVSCPFrame(0,
 15740                           ;main.c: 2246: 37,
 15741                           ;main.c: 2247: 0,
 15742                           ;main.c: 2248: 0,
 15743                           ;main.c: 2249: 5,
 15744                           ;main.c: 2250: vscpData)) {
 15745  003D32  0100               	movlb	0	; () banked
 15746  003D34  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15747  003D36  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 15748  003D38  0E25               	movlw	37
 15749  003D3A  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15750  003D3C  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15751  003D3E  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15752  003D40  0E05               	movlw	5
 15753  003D42  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15754  003D44  0E01               	movlw	high _vscpData
 15755  003D46  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 15756  003D48  0EA4               	movlw	low _vscpData
 15757  003D4A  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15758  003D4C  ECBD  F022         	call	_sendVSCPFrame	;wreg free
 15759  003D50  0900               	iorlw	0
 15760  003D52  E05D               	bz	l11573
 15761                           
 15762                           ; BSR set to: 0
 15763                           ;main.c: 2252: timekeeper = 0;
 15764  003D54  6BE5               	clrf	_timekeeper& (0+255),b	;volatile
 15765  003D56  6BE6               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 15766  003D58  6BE7               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 15767  003D5A  6BE8               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 15768                           
 15769                           ;main.c: 2253: while (timekeeper < timeout) {
 15770  003D5C  D048               	goto	l11571
 15771  003D5E                     l1069:
 15772                           
 15773                           ; BSR set to: 0
 15774  003D5E  0004               	clrwdt		;# 
 15775                           
 15776                           ;main.c: 2257: if (getVSCPFrame(&vscpClass,
 15777                           ;main.c: 2258: &vscpType,
 15778                           ;main.c: 2259: &vscpNodeId,
 15779                           ;main.c: 2260: &vscpPriority,
 15780                           ;main.c: 2261: &vscpSize,
 15781                           ;main.c: 2262: vscpData)) {
 15782  003D60  0E01               	movlw	high _vscpClass
 15783  003D62  0100               	movlb	0	; () banked
 15784  003D64  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15785  003D66  0EAC               	movlw	low _vscpClass
 15786  003D68  6F72               	movwf	?_getVSCPFrame& (0+255),b
 15787  003D6A  0E01               	movlw	high _vscpType
 15788  003D6C  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15789  003D6E  0EB1               	movlw	low _vscpType
 15790  003D70  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15791  003D72  0E01               	movlw	high _vscpNodeId
 15792  003D74  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 15793  003D76  0EAE               	movlw	low _vscpNodeId
 15794  003D78  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15795  003D7A  0E01               	movlw	high _vscpPriority
 15796  003D7C  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 15797  003D7E  0EAF               	movlw	low _vscpPriority
 15798  003D80  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 15799  003D82  0E01               	movlw	high _vscpSize
 15800  003D84  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 15801  003D86  0EB0               	movlw	low _vscpSize
 15802  003D88  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 15803  003D8A  0E01               	movlw	high _vscpData
 15804  003D8C  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 15805  003D8E  0EA4               	movlw	low _vscpData
 15806  003D90  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 15807  003D92  ECC5  F025         	call	_getVSCPFrame	;wreg free
 15808  003D96  0900               	iorlw	0
 15809  003D98  E02A               	bz	l11571
 15810                           
 15811                           ; BSR set to: 0
 15812                           ;main.c: 2263: if ((nodeid == vscpNodeId) &&
 15813                           ;main.c: 2264: (0 == vscpClass) &&
 15814                           ;main.c: 2265: (39 == vscpType) &&
 15815                           ;main.c: 2266: (5 == vscpSize) &&
 15816                           ;main.c: 2267: (0 == vscpData[ 0 ]) &&
 15817                           ;main.c: 2268: ((page >> 8) == vscpData[ 1 ]) &&
 15818                           ;main.c: 2269: ((page & 0xff) == vscpData[ 2 ]) &&
 15819                           ;main.c: 2270: (reg == vscpData[ 3 ])) {
 15820  003D9A  0101               	movlb	1	; () banked
 15821  003D9C  51AE               	movf	_vscpNodeId& (0+255),w,b
 15822  003D9E  0100               	movlb	0	; () banked
 15823  003DA0  63C1               	cpfseq	readRegisterExtended@nodeid& (0+255),b
 15824  003DA2  D025               	goto	l11571
 15825                           
 15826                           ; BSR set to: 0
 15827  003DA4  0101               	movlb	1	; () banked
 15828  003DA6  51AD               	movf	(_vscpClass+1)& (0+255),w,b
 15829  003DA8  11AC               	iorwf	_vscpClass& (0+255),w,b
 15830  003DAA  E121               	bnz	l11571
 15831                           
 15832                           ; BSR set to: 1
 15833  003DAC  51B1               	movf	_vscpType& (0+255),w,b
 15834  003DAE  0A27               	xorlw	39
 15835  003DB0  E11E               	bnz	l11571
 15836                           
 15837                           ; BSR set to: 1
 15838  003DB2  51B0               	movf	_vscpSize& (0+255),w,b
 15839  003DB4  0A05               	xorlw	5
 15840  003DB6  E11B               	bnz	l11571
 15841                           
 15842                           ; BSR set to: 1
 15843  003DB8  67A4               	tstfsz	_vscpData& (0+255),b
 15844  003DBA  D019               	goto	l11571
 15845                           
 15846                           ; BSR set to: 1
 15847  003DBC  0100               	movlb	0	; () banked
 15848  003DBE  51B7               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 15849  003DC0  0101               	movlb	1	; () banked
 15850  003DC2  19A5               	xorwf	(_vscpData+1)& (0+255),w,b
 15851  003DC4  E114               	bnz	l11571
 15852                           
 15853                           ; BSR set to: 1
 15854  003DC6  0100               	movlb	0	; () banked
 15855  003DC8  51B6               	movf	readRegisterExtended@page& (0+255),w,b
 15856  003DCA  EE21  F0A6         	lfsr	2,_vscpData+2
 15857  003DCE  62DF               	cpfseq	indf2,c
 15858  003DD0  D00E               	goto	l11571
 15859                           
 15860                           ; BSR set to: 1
 15861  003DD2  51B8               	movf	readRegisterExtended@reg& (0+255),w,b
 15862  003DD4  0101               	movlb	1	; () banked
 15863  003DD6  EE21  F0A7         	lfsr	2,_vscpData+3
 15864  003DDA  62DF               	cpfseq	indf2,c
 15865  003DDC  D008               	goto	l11571
 15866                           
 15867                           ; BSR set to: 1
 15868                           ;main.c: 2271: *value = vscpData[ 4 ];
 15869  003DDE  C0BB  FFD9         	movff	readRegisterExtended@value,fsr2l
 15870  003DE2  C0BC  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 15871  003DE6  C1A8  FFDF         	movff	_vscpData+4,indf2
 15872                           
 15873                           ; BSR set to: 1
 15874                           ;main.c: 2272: return 1;
 15875  003DEA  0E01               	movlw	1
 15876  003DEC  D011               	goto	l1072
 15877  003DEE                     l11571:
 15878  003DEE  0100               	movlb	0	; () banked
 15879  003DF0  51B9               	movf	readRegisterExtended@timeout& (0+255),w,b
 15880  003DF2  6FBD               	movwf	??_readRegisterExtended& (0+255),b
 15881  003DF4  51BA               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 15882  003DF6  6FBE               	movwf	(??_readRegisterExtended+1)& (0+255),b
 15883  003DF8  6BBF               	clrf	(??_readRegisterExtended+2)& (0+255),b
 15884  003DFA  6BC0               	clrf	(??_readRegisterExtended+3)& (0+255),b
 15885  003DFC  51BD               	movf	??_readRegisterExtended& (0+255),w,b
 15886  003DFE  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
 15887  003E00  51BE               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 15888  003E02  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 15889  003E04  51BF               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 15890  003E06  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 15891  003E08  51C0               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 15892  003E0A  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 15893  003E0C  E3A8               	bnc	l1069
 15894  003E0E                     l11573:
 15895                           
 15896                           ; BSR set to: 0
 15897                           ;main.c: 2273: }
 15898                           ;main.c: 2274: }
 15899                           ;main.c: 2275: }
 15900                           ;main.c: 2276: }
 15901                           ;main.c: 2278: return 0;
 15902  003E0E  0E00               	movlw	0
 15903  003E10                     l1072:
 15904  003E10  0012               	return	
 15905  003E12                     __end_of_readRegisterExtended:
 15906                           	opt stack 0
 15907                           tblptru	equ	0xFF8
 15908                           tblptrh	equ	0xFF7
 15909                           tblptrl	equ	0xFF6
 15910                           tablat	equ	0xFF5
 15911                           prodh	equ	0xFF4
 15912                           prodl	equ	0xFF3
 15913                           intcon	equ	0xFF2
 15914                           indf0	equ	0xFEF
 15915                           postinc0	equ	0xFEE
 15916                           fsr0h	equ	0xFEA
 15917                           fsr0l	equ	0xFE9
 15918                           wreg	equ	0xFE8
 15919                           indf1	equ	0xFE7
 15920                           postinc1	equ	0xFE6
 15921                           postdec1	equ	0xFE5
 15922                           fsr1h	equ	0xFE2
 15923                           fsr1l	equ	0xFE1
 15924                           indf2	equ	0xFDF
 15925                           postinc2	equ	0xFDE
 15926                           postdec2	equ	0xFDD
 15927                           plusw2	equ	0xFDB
 15928                           fsr2h	equ	0xFDA
 15929                           fsr2l	equ	0xFD9
 15930                           status	equ	0xFD8
 15931                           
 15932 ;; *************** function _strcpy *****************
 15933 ;; Defined at:
 15934 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 15935 ;; Parameters:    Size  Location     Type
 15936 ;;  to              2    0[BANK0 ] PTR unsigned char 
 15937 ;;		 -> cmdbuf(80), 
 15938 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 15939 ;;		 -> cmdbuf(80), 
 15940 ;; Auto vars:     Size  Location     Type
 15941 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 15942 ;;		 -> cmdbuf(80), 
 15943 ;; Return value:  Size  Location     Type
 15944 ;;                  2    0[BANK0 ] PTR unsigned char 
 15945 ;; Registers used:
 15946 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15947 ;; Tracked objects:
 15948 ;;		On entry : F/1
 15949 ;;		On exit  : E/0
 15950 ;;		Unchanged: 0/0
 15951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15952 ;;      Params:         0       4       0       0       0       0       0
 15953 ;;      Locals:         0       2       0       0       0       0       0
 15954 ;;      Temps:          0       0       0       0       0       0       0
 15955 ;;      Totals:         0       6       0       0       0       0       0
 15956 ;;Total ram usage:        6 bytes
 15957 ;; Hardware stack levels used:    1
 15958 ;; Hardware stack levels required when called:    3
 15959 ;; This function calls:
 15960 ;;		Nothing
 15961 ;; This function is called by:
 15962 ;;		_doModeVerbose
 15963 ;; This function uses a non-reentrant model
 15964 ;;
 15965                           
 15966                           	psect	text27
 15967  00564C                     __ptext27:
 15968                           	opt stack 0
 15969  00564C                     _strcpy:
 15970                           	opt stack 26
 15971                           
 15972                           ; BSR set to: 1
 15973                           
 15974                           ;incstack = 0
 15975                           ;incstack = 0
 15976  00564C  C060  F064         	movff	strcpy@to,strcpy@cp
 15977  005650  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 15978  005654  D005               	goto	l11525
 15979  005656                     l11523:
 15980  005656  0100               	movlb	0	; () banked
 15981  005658  4B64               	infsnz	strcpy@cp& (0+255),f,b
 15982  00565A  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 15983  00565C  4B62               	infsnz	strcpy@from& (0+255),f,b
 15984  00565E  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 15985  005660                     l11525:
 15986  005660  C062  FFD9         	movff	strcpy@from,fsr2l
 15987  005664  C063  FFDA         	movff	strcpy@from+1,fsr2h
 15988  005668  C064  FFE1         	movff	strcpy@cp,fsr1l
 15989  00566C  C065  FFE2         	movff	strcpy@cp+1,fsr1h
 15990  005670  CFDF FFE7          	movff	indf2,indf1
 15991  005674  50E7               	movf	indf1,w,c
 15992  005676  B4D8               	btfsc	status,2,c
 15993  005678  0012               	return	
 15994  00567A  D7ED               	goto	l11523
 15995  00567C                     __end_of_strcpy:
 15996                           	opt stack 0
 15997                           tblptru	equ	0xFF8
 15998                           tblptrh	equ	0xFF7
 15999                           tblptrl	equ	0xFF6
 16000                           tablat	equ	0xFF5
 16001                           prodh	equ	0xFF4
 16002                           prodl	equ	0xFF3
 16003                           intcon	equ	0xFF2
 16004                           indf0	equ	0xFEF
 16005                           postinc0	equ	0xFEE
 16006                           fsr0h	equ	0xFEA
 16007                           fsr0l	equ	0xFE9
 16008                           wreg	equ	0xFE8
 16009                           indf1	equ	0xFE7
 16010                           postinc1	equ	0xFE6
 16011                           postdec1	equ	0xFE5
 16012                           fsr1h	equ	0xFE2
 16013                           fsr1l	equ	0xFE1
 16014                           indf2	equ	0xFDF
 16015                           postinc2	equ	0xFDE
 16016                           postdec2	equ	0xFDD
 16017                           plusw2	equ	0xFDB
 16018                           fsr2h	equ	0xFDA
 16019                           fsr2l	equ	0xFD9
 16020                           status	equ	0xFD8
 16021                           
 16022 ;; *************** function _findNodes *****************
 16023 ;; Defined at:
 16024 ;;		line 2577 in file "main.c"
 16025 ;; Parameters:    Size  Location     Type
 16026 ;;		None
 16027 ;; Auto vars:     Size  Location     Type
 16028 ;;  i               1  105[BANK0 ] unsigned char 
 16029 ;;  value           1  104[BANK0 ] unsigned char 
 16030 ;;  nFound          1  103[BANK0 ] unsigned char 
 16031 ;; Return value:  Size  Location     Type
 16032 ;;		None               void
 16033 ;; Registers used:
 16034 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16035 ;; Tracked objects:
 16036 ;;		On entry : F/1
 16037 ;;		On exit  : 0/0
 16038 ;;		Unchanged: 0/0
 16039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16040 ;;      Params:         0       0       0       0       0       0       0
 16041 ;;      Locals:         0       5       0       0       0       0       0
 16042 ;;      Temps:          0       0       0       0       0       0       0
 16043 ;;      Totals:         0       5       0       0       0       0       0
 16044 ;;Total ram usage:        5 bytes
 16045 ;; Hardware stack levels used:    1
 16046 ;; Hardware stack levels required when called:    9
 16047 ;; This function calls:
 16048 ;;		_putsUSART
 16049 ;;		_printNodeFirmwareVersion
 16050 ;;		_printGUID
 16051 ;;		_printMDF
 16052 ;;		_itoa
 16053 ;;		_readRegister
 16054 ;; This function is called by:
 16055 ;;		_doModeVerbose
 16056 ;; This function uses a non-reentrant model
 16057 ;;
 16058                           
 16059                           	psect	text28
 16060  003E12                     __ptext28:
 16061                           	opt stack 0
 16062  003E12                     _findNodes:
 16063                           	opt stack 20
 16064                           
 16065                           ; BSR set to: 1
 16066                           ;main.c: 2578: uint8_t nFound = 0;
 16067                           
 16068                           ;incstack = 0
 16069                           ;incstack = 0
 16070  003E12  0100               	movlb	0	; () banked
 16071  003E14  6BC7               	clrf	findNodes@nFound& (0+255),b
 16072                           
 16073                           ; BSR set to: 0
 16074                           ;main.c: 2579: uint8_t i;
 16075                           ;main.c: 2580: uint8_t value;
 16076                           ;main.c: 2582: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16077  003E16  0E71               	movlw	high STR_238
 16078  003E18  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16079  003E1A  0E53               	movlw	low STR_238
 16080  003E1C  6F61               	movwf	?_putsUSART& (0+255),b
 16081  003E1E  ECF6  F028         	call	_putsUSART	;wreg free
 16082                           
 16083                           ;main.c: 2584: for (i = 1; i != 0; i++) {
 16084  003E22  0E01               	movlw	1
 16085  003E24  0100               	movlb	0	; () banked
 16086  003E26  6FC9               	movwf	findNodes@i& (0+255),b
 16087  003E28                     l1171:
 16088                           
 16089                           ; BSR set to: 0
 16090  003E28  0004               	clrwdt		;# 
 16091                           
 16092                           ;main.c: 2588: if (readRegister(i,
 16093                           ;main.c: 2589: 0xE0,
 16094                           ;main.c: 2590: rwtimeout,
 16095                           ;main.c: 2591: &value)) {
 16096  003E2A  0EE0               	movlw	224
 16097  003E2C  0100               	movlb	0	; () banked
 16098  003E2E  6FB6               	movwf	?_readRegister& (0+255),b
 16099  003E30  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16100  003E34  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16101  003E36  0EC8               	movlw	low findNodes@value
 16102  003E38  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16103  003E3A  51C9               	movf	findNodes@i& (0+255),w,b
 16104  003E3C  EC35  F021         	call	_readRegister
 16105  003E40  0900               	iorlw	0
 16106  003E42  E043               	bz	l11511
 16107                           
 16108                           ;main.c: 2592: putsUSART((char *) "Node found with node id = ");
 16109  003E44  0E7B               	movlw	high STR_239
 16110  003E46  0100               	movlb	0	; () banked
 16111  003E48  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16112  003E4A  0E99               	movlw	low STR_239
 16113  003E4C  6F61               	movwf	?_putsUSART& (0+255),b
 16114  003E4E  ECF6  F028         	call	_putsUSART	;wreg free
 16115                           
 16116                           ;main.c: 2593: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 16117  003E52  0101               	movlb	1	; () banked
 16118  003E54  6700               	tstfsz	_bHex& (0+255),b
 16119  003E56  D004               	goto	l11493
 16120                           
 16121                           ; BSR set to: 1
 16122  003E58  0100               	movlb	0	; () banked
 16123  003E5A  6BC6               	clrf	(_findNodes$1468+1)& (0+255),b
 16124  003E5C  0E0A               	movlw	10
 16125  003E5E  D003               	goto	L13
 16126  003E60                     l11493:
 16127                           
 16128                           ; BSR set to: 1
 16129  003E60  0100               	movlb	0	; () banked
 16130  003E62  6BC6               	clrf	(_findNodes$1468+1)& (0+255),b
 16131  003E64  0E10               	movlw	16
 16132  003E66                     L13:
 16133  003E66  6FC5               	movwf	_findNodes$1468& (0+255),b
 16134                           
 16135                           ; BSR set to: 0
 16136  003E68  0E01               	movlw	high _wrkbuf
 16137  003E6A  0100               	movlb	0	; () banked
 16138  003E6C  6F71               	movwf	(?_itoa+1)& (0+255),b
 16139  003E6E  0E54               	movlw	low _wrkbuf
 16140  003E70  6F70               	movwf	?_itoa& (0+255),b
 16141  003E72  C1AE  F072         	movff	_vscpNodeId,?_itoa+2
 16142  003E76  6B73               	clrf	(?_itoa+3)& (0+255),b
 16143  003E78  C0C5  F074         	movff	_findNodes$1468,?_itoa+4
 16144  003E7C  C0C6  F075         	movff	_findNodes$1468+1,?_itoa+5
 16145  003E80  ECD6  F02A         	call	_itoa	;wreg free
 16146                           
 16147                           ; BSR set to: 0
 16148                           ;main.c: 2594: putsUSART(wrkbuf);
 16149  003E84  0E01               	movlw	high _wrkbuf
 16150  003E86  0100               	movlb	0	; () banked
 16151  003E88  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16152  003E8A  0E54               	movlw	low _wrkbuf
 16153  003E8C  6F61               	movwf	?_putsUSART& (0+255),b
 16154  003E8E  ECF6  F028         	call	_putsUSART	;wreg free
 16155                           
 16156                           ;main.c: 2595: putsUSART((char *) "\r\n");
 16157  003E92  0E74               	movlw	high (STR_197+50)
 16158  003E94  0100               	movlb	0	; () banked
 16159  003E96  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16160  003E98  0E8A               	movlw	low (STR_197+50)
 16161  003E9A  6F61               	movwf	?_putsUSART& (0+255),b
 16162  003E9C  ECF6  F028         	call	_putsUSART	;wreg free
 16163                           
 16164                           ;main.c: 2596: printNodeFirmwareVersion(i);
 16165  003EA0  0100               	movlb	0	; () banked
 16166  003EA2  51C9               	movf	findNodes@i& (0+255),w,b
 16167  003EA4  ECCD  F020         	call	_printNodeFirmwareVersion
 16168                           
 16169                           ;main.c: 2597: printGUID(i);
 16170  003EA8  0100               	movlb	0	; () banked
 16171  003EAA  51C9               	movf	findNodes@i& (0+255),w,b
 16172  003EAC  EC09  F01E         	call	_printGUID
 16173                           
 16174                           ;main.c: 2598: printMDF(i);
 16175  003EB0  0100               	movlb	0	; () banked
 16176  003EB2  51C9               	movf	findNodes@i& (0+255),w,b
 16177  003EB4  ECA5  F024         	call	_printMDF
 16178                           
 16179                           ;main.c: 2599: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16180  003EB8  0E71               	movlw	high STR_238
 16181  003EBA  0100               	movlb	0	; () banked
 16182  003EBC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16183  003EBE  0E53               	movlw	low STR_238
 16184  003EC0  6F61               	movwf	?_putsUSART& (0+255),b
 16185  003EC2  ECF6  F028         	call	_putsUSART	;wreg free
 16186                           
 16187                           ;main.c: 2600: nFound++;
 16188  003EC6  0100               	movlb	0	; () banked
 16189  003EC8  2BC7               	incf	findNodes@nFound& (0+255),f,b
 16190  003ECA                     l11511:
 16191  003ECA  0100               	movlb	0	; () banked
 16192  003ECC  2BC9               	incf	findNodes@i& (0+255),f,b
 16193                           
 16194                           ; BSR set to: 0
 16195  003ECE  67C9               	tstfsz	findNodes@i& (0+255),b
 16196  003ED0  D7AB               	goto	l1171
 16197                           
 16198                           ; BSR set to: 0
 16199                           ;main.c: 2601: }
 16200                           ;main.c: 2603: }
 16201                           ;main.c: 2605: itoa(wrkbuf, nFound, 10);
 16202  003ED2  0E01               	movlw	high _wrkbuf
 16203  003ED4  6F71               	movwf	(?_itoa+1)& (0+255),b
 16204  003ED6  0E54               	movlw	low _wrkbuf
 16205  003ED8  6F70               	movwf	?_itoa& (0+255),b
 16206  003EDA  C0C7  F072         	movff	findNodes@nFound,?_itoa+2
 16207  003EDE  6B73               	clrf	(?_itoa+3)& (0+255),b
 16208  003EE0  6B75               	clrf	(?_itoa+5)& (0+255),b
 16209  003EE2  0E0A               	movlw	10
 16210  003EE4  6F74               	movwf	(?_itoa+4)& (0+255),b
 16211  003EE6  ECD6  F02A         	call	_itoa	;wreg free
 16212                           
 16213                           ; BSR set to: 0
 16214                           ;main.c: 2606: putsUSART(wrkbuf);
 16215  003EEA  0E01               	movlw	high _wrkbuf
 16216  003EEC  0100               	movlb	0	; () banked
 16217  003EEE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16218  003EF0  0E54               	movlw	low _wrkbuf
 16219  003EF2  6F61               	movwf	?_putsUSART& (0+255),b
 16220  003EF4  ECF6  F028         	call	_putsUSART	;wreg free
 16221                           
 16222                           ;main.c: 2607: putsUSART((char *) " nodes found\r\n");
 16223  003EF8  0E7E               	movlw	high STR_242
 16224  003EFA  0100               	movlb	0	; () banked
 16225  003EFC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16226  003EFE  0E4E               	movlw	low STR_242
 16227  003F00  6F61               	movwf	?_putsUSART& (0+255),b
 16228  003F02  EFF6  F028         	goto	_putsUSART	;wreg free
 16229  003F06                     __end_of_findNodes:
 16230                           	opt stack 0
 16231                           tblptru	equ	0xFF8
 16232                           tblptrh	equ	0xFF7
 16233                           tblptrl	equ	0xFF6
 16234                           tablat	equ	0xFF5
 16235                           prodh	equ	0xFF4
 16236                           prodl	equ	0xFF3
 16237                           intcon	equ	0xFF2
 16238                           indf0	equ	0xFEF
 16239                           postinc0	equ	0xFEE
 16240                           fsr0h	equ	0xFEA
 16241                           fsr0l	equ	0xFE9
 16242                           wreg	equ	0xFE8
 16243                           indf1	equ	0xFE7
 16244                           postinc1	equ	0xFE6
 16245                           postdec1	equ	0xFE5
 16246                           fsr1h	equ	0xFE2
 16247                           fsr1l	equ	0xFE1
 16248                           indf2	equ	0xFDF
 16249                           postinc2	equ	0xFDE
 16250                           postdec2	equ	0xFDD
 16251                           plusw2	equ	0xFDB
 16252                           fsr2h	equ	0xFDA
 16253                           fsr2l	equ	0xFD9
 16254                           status	equ	0xFD8
 16255                           
 16256 ;; *************** function _printMDF *****************
 16257 ;; Defined at:
 16258 ;;		line 2658 in file "main.c"
 16259 ;; Parameters:    Size  Location     Type
 16260 ;;  nodeid          1    wreg     unsigned char 
 16261 ;; Auto vars:     Size  Location     Type
 16262 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16263 ;;  p               2   97[BANK0 ] PTR unsigned char 
 16264 ;;		 -> wrkbuf(80), 
 16265 ;;  i               1   99[BANK0 ] unsigned char 
 16266 ;;  value           1   96[BANK0 ] unsigned char 
 16267 ;; Return value:  Size  Location     Type
 16268 ;;		None               void
 16269 ;; Registers used:
 16270 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16271 ;; Tracked objects:
 16272 ;;		On entry : D/2
 16273 ;;		On exit  : 0/0
 16274 ;;		Unchanged: 0/0
 16275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16276 ;;      Params:         0       0       0       0       0       0       0
 16277 ;;      Locals:         0       5       0       0       0       0       0
 16278 ;;      Temps:          0       0       0       0       0       0       0
 16279 ;;      Totals:         0       5       0       0       0       0       0
 16280 ;;Total ram usage:        5 bytes
 16281 ;; Hardware stack levels used:    1
 16282 ;; Hardware stack levels required when called:    8
 16283 ;; This function calls:
 16284 ;;		_putsUSART
 16285 ;;		_memset
 16286 ;;		_readRegister
 16287 ;; This function is called by:
 16288 ;;		_doModeVerbose
 16289 ;;		_findNodes
 16290 ;; This function uses a non-reentrant model
 16291 ;;
 16292                           
 16293                           	psect	text29
 16294  00494A                     __ptext29:
 16295                           	opt stack 0
 16296  00494A                     _printMDF:
 16297                           	opt stack 21
 16298                           
 16299                           ;incstack = 0
 16300                           ;incstack = 0
 16301                           ;printMDF@nodeid stored from wreg
 16302  00494A  CFE8 F0BF          	movff	wreg,printMDF@nodeid
 16303                           
 16304                           ;main.c: 2659: uint8_t i;
 16305                           ;main.c: 2660: uint8_t value;
 16306                           ;main.c: 2661: char *p = wrkbuf;
 16307  00494E  0E01               	movlw	high _wrkbuf
 16308  004950  0100               	movlb	0	; () banked
 16309  004952  6FC2               	movwf	(printMDF@p+1)& (0+255),b
 16310  004954  0E54               	movlw	low _wrkbuf
 16311  004956  6FC1               	movwf	printMDF@p& (0+255),b
 16312                           
 16313                           ; BSR set to: 0
 16314                           ;main.c: 2662: memset(wrkbuf, 0, sizeof (wrkbuf));
 16315  004958  0E01               	movlw	high _wrkbuf
 16316  00495A  6F61               	movwf	(?_memset+1)& (0+255),b
 16317  00495C  0E54               	movlw	low _wrkbuf
 16318  00495E  6F60               	movwf	?_memset& (0+255),b
 16319  004960  6B63               	clrf	(?_memset+3)& (0+255),b
 16320  004962  6B62               	clrf	(?_memset+2)& (0+255),b
 16321  004964  6B65               	clrf	(?_memset+5)& (0+255),b
 16322  004966  0E50               	movlw	80
 16323  004968  6F64               	movwf	(?_memset+4)& (0+255),b
 16324  00496A  EC55  F02B         	call	_memset	;wreg free
 16325                           
 16326                           ; BSR set to: 0
 16327                           ;main.c: 2663: putsUSART((char *) "MDF = http://");
 16328  00496E  0E7E               	movlw	high STR_248
 16329  004970  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16330  004972  0E6C               	movlw	low STR_248
 16331  004974  6F61               	movwf	?_putsUSART& (0+255),b
 16332  004976  ECF6  F028         	call	_putsUSART	;wreg free
 16333                           
 16334                           ;main.c: 2665: for (i = 0; i < 32; i++) {
 16335  00497A  0100               	movlb	0	; () banked
 16336  00497C  6BC3               	clrf	printMDF@i& (0+255),b
 16337  00497E                     l12059:
 16338                           
 16339                           ; BSR set to: 0
 16340                           ;main.c: 2666: if (readRegister(nodeid,
 16341                           ;main.c: 2667: 0xE0 + i,
 16342                           ;main.c: 2668: rwtimeout,
 16343                           ;main.c: 2669: &value)) {
 16344  00497E  51C3               	movf	printMDF@i& (0+255),w,b
 16345  004980  0FE0               	addlw	224
 16346  004982  6FB6               	movwf	?_readRegister& (0+255),b
 16347  004984  0100               	movlb	0	; () banked
 16348  004986  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16349  00498A  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16350  00498C  0EC0               	movlw	low printMDF@value
 16351  00498E  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16352  004990  51BF               	movf	printMDF@nodeid& (0+255),w,b
 16353  004992  EC35  F021         	call	_readRegister
 16354  004996  0900               	iorlw	0
 16355  004998  E00A               	bz	l12065
 16356                           
 16357                           ;main.c: 2670: *p = value;
 16358  00499A  C0C1  FFD9         	movff	printMDF@p,fsr2l
 16359  00499E  C0C2  FFDA         	movff	printMDF@p+1,fsr2h
 16360  0049A2  C0C0  FFDF         	movff	printMDF@value,indf2
 16361  0049A6                     l12063:
 16362                           
 16363                           ;main.c: 2671: p++;
 16364  0049A6  0100               	movlb	0	; () banked
 16365  0049A8  4BC1               	infsnz	printMDF@p& (0+255),f,b
 16366  0049AA  2BC2               	incf	(printMDF@p+1)& (0+255),f,b
 16367                           
 16368                           ;main.c: 2673: }
 16369  0049AC  D007               	goto	l12069
 16370  0049AE                     l12065:
 16371                           
 16372                           ;main.c: 2674: else {
 16373                           ;main.c: 2675: *p = '?';
 16374  0049AE  C0C1  FFD9         	movff	printMDF@p,fsr2l
 16375  0049B2  C0C2  FFDA         	movff	printMDF@p+1,fsr2h
 16376  0049B6  0E3F               	movlw	63
 16377  0049B8  6EDF               	movwf	indf2,c
 16378  0049BA  D7F5               	goto	l12063
 16379  0049BC                     l12069:
 16380                           
 16381                           ; BSR set to: 0
 16382  0049BC  2BC3               	incf	printMDF@i& (0+255),f,b
 16383                           
 16384                           ; BSR set to: 0
 16385  0049BE  0E1F               	movlw	31
 16386  0049C0  65C3               	cpfsgt	printMDF@i& (0+255),b
 16387  0049C2  D7DD               	goto	l12059
 16388                           
 16389                           ; BSR set to: 0
 16390                           ;main.c: 2677: }
 16391                           ;main.c: 2678: }
 16392                           ;main.c: 2680: putsUSART(wrkbuf);
 16393  0049C4  0E01               	movlw	high _wrkbuf
 16394  0049C6  0100               	movlb	0	; () banked
 16395  0049C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16396  0049CA  0E54               	movlw	low _wrkbuf
 16397  0049CC  6F61               	movwf	?_putsUSART& (0+255),b
 16398  0049CE  ECF6  F028         	call	_putsUSART	;wreg free
 16399                           
 16400                           ;main.c: 2681: putsUSART((char *) "\r\n");
 16401  0049D2  0E74               	movlw	high (STR_197+50)
 16402  0049D4  0100               	movlb	0	; () banked
 16403  0049D6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16404  0049D8  0E8A               	movlw	low (STR_197+50)
 16405  0049DA  6F61               	movwf	?_putsUSART& (0+255),b
 16406  0049DC  EFF6  F028         	goto	_putsUSART	;wreg free
 16407  0049E0                     __end_of_printMDF:
 16408                           	opt stack 0
 16409                           tblptru	equ	0xFF8
 16410                           tblptrh	equ	0xFF7
 16411                           tblptrl	equ	0xFF6
 16412                           tablat	equ	0xFF5
 16413                           prodh	equ	0xFF4
 16414                           prodl	equ	0xFF3
 16415                           intcon	equ	0xFF2
 16416                           indf0	equ	0xFEF
 16417                           postinc0	equ	0xFEE
 16418                           fsr0h	equ	0xFEA
 16419                           fsr0l	equ	0xFE9
 16420                           wreg	equ	0xFE8
 16421                           indf1	equ	0xFE7
 16422                           postinc1	equ	0xFE6
 16423                           postdec1	equ	0xFE5
 16424                           fsr1h	equ	0xFE2
 16425                           fsr1l	equ	0xFE1
 16426                           indf2	equ	0xFDF
 16427                           postinc2	equ	0xFDE
 16428                           postdec2	equ	0xFDD
 16429                           plusw2	equ	0xFDB
 16430                           fsr2h	equ	0xFDA
 16431                           fsr2l	equ	0xFD9
 16432                           status	equ	0xFD8
 16433                           
 16434 ;; *************** function _printGUID *****************
 16435 ;; Defined at:
 16436 ;;		line 2617 in file "main.c"
 16437 ;; Parameters:    Size  Location     Type
 16438 ;;  nodeid          1    wreg     unsigned char 
 16439 ;; Auto vars:     Size  Location     Type
 16440 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16441 ;;  buf             3   96[BANK0 ] unsigned char [3]
 16442 ;;  i               1  100[BANK0 ] unsigned char 
 16443 ;;  value           1   99[BANK0 ] unsigned char 
 16444 ;; Return value:  Size  Location     Type
 16445 ;;		None               void
 16446 ;; Registers used:
 16447 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16448 ;; Tracked objects:
 16449 ;;		On entry : D/2
 16450 ;;		On exit  : 0/0
 16451 ;;		Unchanged: 0/0
 16452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16453 ;;      Params:         0       0       0       0       0       0       0
 16454 ;;      Locals:         0       6       0       0       0       0       0
 16455 ;;      Temps:          0       0       0       0       0       0       0
 16456 ;;      Totals:         0       6       0       0       0       0       0
 16457 ;;Total ram usage:        6 bytes
 16458 ;; Hardware stack levels used:    1
 16459 ;; Hardware stack levels required when called:    8
 16460 ;; This function calls:
 16461 ;;		_putsUSART
 16462 ;;		_memset
 16463 ;;		_strlen
 16464 ;;		_itoa
 16465 ;;		_readRegister
 16466 ;;		_strcat
 16467 ;; This function is called by:
 16468 ;;		_doModeVerbose
 16469 ;;		_findNodes
 16470 ;; This function uses a non-reentrant model
 16471 ;;
 16472                           
 16473                           	psect	text30
 16474  003C12                     __ptext30:
 16475                           	opt stack 0
 16476  003C12                     _printGUID:
 16477                           	opt stack 21
 16478                           
 16479                           ;incstack = 0
 16480                           ;incstack = 0
 16481                           ;printGUID@nodeid stored from wreg
 16482  003C12  CFE8 F0BF          	movff	wreg,printGUID@nodeid
 16483                           
 16484                           ;main.c: 2618: uint8_t i;
 16485                           ;main.c: 2619: uint8_t value;
 16486                           ;main.c: 2620: char buf[3];
 16487                           ;main.c: 2622: memset(wrkbuf, 0, sizeof (wrkbuf));
 16488  003C16  0E01               	movlw	high _wrkbuf
 16489  003C18  0100               	movlb	0	; () banked
 16490  003C1A  6F61               	movwf	(?_memset+1)& (0+255),b
 16491  003C1C  0E54               	movlw	low _wrkbuf
 16492  003C1E  6F60               	movwf	?_memset& (0+255),b
 16493  003C20  6B63               	clrf	(?_memset+3)& (0+255),b
 16494  003C22  6B62               	clrf	(?_memset+2)& (0+255),b
 16495  003C24  6B65               	clrf	(?_memset+5)& (0+255),b
 16496  003C26  0E50               	movlw	80
 16497  003C28  6F64               	movwf	(?_memset+4)& (0+255),b
 16498  003C2A  EC55  F02B         	call	_memset	;wreg free
 16499                           
 16500                           ; BSR set to: 0
 16501                           ;main.c: 2623: putsUSART((char *) "GUID = ");
 16502  003C2E  0E7E               	movlw	high STR_243
 16503  003C30  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16504  003C32  0EE5               	movlw	low STR_243
 16505  003C34  6F61               	movwf	?_putsUSART& (0+255),b
 16506  003C36  ECF6  F028         	call	_putsUSART	;wreg free
 16507                           
 16508                           ;main.c: 2625: for (i = 0; i < 16; i++) {
 16509  003C3A  0100               	movlb	0	; () banked
 16510  003C3C  6BC4               	clrf	printGUID@i& (0+255),b
 16511  003C3E                     l12025:
 16512                           
 16513                           ; BSR set to: 0
 16514                           ;main.c: 2626: if (readRegister(nodeid,
 16515                           ;main.c: 2627: 0xD0 + i,
 16516                           ;main.c: 2628: rwtimeout,
 16517                           ;main.c: 2629: &value)) {
 16518  003C3E  51C4               	movf	printGUID@i& (0+255),w,b
 16519  003C40  0FD0               	addlw	208
 16520  003C42  6FB6               	movwf	?_readRegister& (0+255),b
 16521  003C44  0100               	movlb	0	; () banked
 16522  003C46  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16523  003C4A  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16524  003C4C  0EC3               	movlw	low printGUID@value
 16525  003C4E  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16526  003C50  51BF               	movf	printGUID@nodeid& (0+255),w,b
 16527  003C52  EC35  F021         	call	_readRegister
 16528  003C56  0900               	iorlw	0
 16529  003C58  E029               	bz	l12035
 16530                           
 16531                           ;main.c: 2630: itoa(buf, value, 16);
 16532  003C5A  0100               	movlb	0	; () banked
 16533  003C5C  0E00               	movlw	high printGUID@buf
 16534  003C5E  6F71               	movwf	(?_itoa+1)& (0+255),b
 16535  003C60  0EC0               	movlw	low printGUID@buf
 16536  003C62  6F70               	movwf	?_itoa& (0+255),b
 16537  003C64  C0C3  F072         	movff	printGUID@value,?_itoa+2
 16538  003C68  6B73               	clrf	(?_itoa+3)& (0+255),b
 16539  003C6A  6B75               	clrf	(?_itoa+5)& (0+255),b
 16540  003C6C  0E10               	movlw	16
 16541  003C6E  6F74               	movwf	(?_itoa+4)& (0+255),b
 16542  003C70  ECD6  F02A         	call	_itoa	;wreg free
 16543                           
 16544                           ; BSR set to: 0
 16545                           ;main.c: 2631: if (1 == strlen(buf)) {
 16546  003C74  0E00               	movlw	high printGUID@buf
 16547  003C76  6F61               	movwf	(?_strlen+1)& (0+255),b
 16548  003C78  0EC0               	movlw	low printGUID@buf
 16549  003C7A  6F60               	movwf	?_strlen& (0+255),b
 16550  003C7C  EC1D  F02A         	call	_strlen	;wreg free
 16551  003C80  0560               	decf	?_strlen& (0+255),w,b
 16552  003C82  1161               	iorwf	(?_strlen+1)& (0+255),w,b
 16553  003C84  E10F               	bnz	l12033
 16554                           
 16555                           ; BSR set to: 0
 16556                           ;main.c: 2632: strcat(wrkbuf, "0");
 16557  003C86  0E01               	movlw	high _wrkbuf
 16558  003C88  0100               	movlb	0	; () banked
 16559  003C8A  6F61               	movwf	(?_strcat+1)& (0+255),b
 16560  003C8C  0E54               	movlw	low _wrkbuf
 16561  003C8E  6F60               	movwf	?_strcat& (0+255),b
 16562  003C90  0E7F               	movlw	high STR_244
 16563  003C92  6F63               	movwf	(?_strcat+3)& (0+255),b
 16564  003C94  0EF8               	movlw	low STR_244
 16565  003C96  6F62               	movwf	(?_strcat+2)& (0+255),b
 16566  003C98  ECCA  F028         	call	_strcat	;wreg free
 16567                           
 16568                           ;main.c: 2633: strcat(wrkbuf, buf);
 16569  003C9C  D832               	call	PL76	;call to abstracted procedure
 16570  003C9E  ECCA  F028         	call	_strcat	;wreg free
 16571                           
 16572                           ;main.c: 2634: } else {
 16573  003CA2  D00F               	goto	l12037
 16574  003CA4                     l12033:
 16575                           
 16576                           ; BSR set to: 0
 16577                           ;main.c: 2635: strcat(wrkbuf, buf);
 16578  003CA4  D82E               	call	PL76	;call to abstracted procedure
 16579  003CA6  ECCA  F028         	call	_strcat	;wreg free
 16580  003CAA  D00B               	goto	l12037
 16581  003CAC                     l12035:
 16582                           
 16583                           ;main.c: 2639: strcat(wrkbuf, "--");
 16584  003CAC  0E01               	movlw	high _wrkbuf
 16585  003CAE  0100               	movlb	0	; () banked
 16586  003CB0  6F61               	movwf	(?_strcat+1)& (0+255),b
 16587  003CB2  0E54               	movlw	low _wrkbuf
 16588  003CB4  6F60               	movwf	?_strcat& (0+255),b
 16589  003CB6  0E7F               	movlw	high STR_245
 16590  003CB8  6F63               	movwf	(?_strcat+3)& (0+255),b
 16591  003CBA  0EE4               	movlw	low STR_245
 16592  003CBC  6F62               	movwf	(?_strcat+2)& (0+255),b
 16593  003CBE  ECCA  F028         	call	_strcat	;wreg free
 16594  003CC2                     l12037:
 16595                           
 16596                           ;main.c: 2640: }
 16597                           ;main.c: 2642: if (i < 15) {
 16598  003CC2  0E0F               	movlw	15
 16599  003CC4  0100               	movlb	0	; () banked
 16600  003CC6  61C4               	cpfslt	printGUID@i& (0+255),b
 16601  003CC8  D00A               	goto	l12041
 16602                           
 16603                           ; BSR set to: 0
 16604                           ;main.c: 2643: strcat(wrkbuf, ":");
 16605  003CCA  0E01               	movlw	high _wrkbuf
 16606  003CCC  6F61               	movwf	(?_strcat+1)& (0+255),b
 16607  003CCE  0E54               	movlw	low _wrkbuf
 16608  003CD0  6F60               	movwf	?_strcat& (0+255),b
 16609  003CD2  0E7F               	movlw	high STR_246
 16610  003CD4  6F63               	movwf	(?_strcat+3)& (0+255),b
 16611  003CD6  0EFA               	movlw	low STR_246
 16612  003CD8  6F62               	movwf	(?_strcat+2)& (0+255),b
 16613  003CDA  ECCA  F028         	call	_strcat	;wreg free
 16614  003CDE                     l12041:
 16615  003CDE  0100               	movlb	0	; () banked
 16616  003CE0  2BC4               	incf	printGUID@i& (0+255),f,b
 16617                           
 16618                           ; BSR set to: 0
 16619  003CE2  0E0F               	movlw	15
 16620  003CE4  65C4               	cpfsgt	printGUID@i& (0+255),b
 16621  003CE6  D7AB               	goto	l12025
 16622                           
 16623                           ; BSR set to: 0
 16624                           ;main.c: 2644: }
 16625                           ;main.c: 2646: }
 16626                           ;main.c: 2648: putsUSART(wrkbuf);
 16627  003CE8  0E01               	movlw	high _wrkbuf
 16628  003CEA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16629  003CEC  0E54               	movlw	low _wrkbuf
 16630  003CEE  6F61               	movwf	?_putsUSART& (0+255),b
 16631  003CF0  ECF6  F028         	call	_putsUSART	;wreg free
 16632                           
 16633                           ;main.c: 2649: putsUSART((char *) "\r\n");
 16634  003CF4  0E74               	movlw	high (STR_197+50)
 16635  003CF6  0100               	movlb	0	; () banked
 16636  003CF8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16637  003CFA  0E8A               	movlw	low (STR_197+50)
 16638  003CFC  6F61               	movwf	?_putsUSART& (0+255),b
 16639  003CFE  EFF6  F028         	goto	_putsUSART	;wreg free
 16640  003D02                     __end_of_printGUID:
 16641                           	opt stack 0
 16642  003D02                     PL76:
 16643                           	opt stack 21
 16644  003D02  0E01               	movlw	high _wrkbuf
 16645  003D04  0100               	movlb	0	; () banked
 16646  003D06  6F61               	movwf	(?_strcat+1)& (0+255),b
 16647  003D08  0E54               	movlw	low _wrkbuf
 16648  003D0A  6F60               	movwf	?_strcat& (0+255),b
 16649  003D0C  0E00               	movlw	high printGUID@buf
 16650  003D0E  6F63               	movwf	(?_strcat+3)& (0+255),b
 16651  003D10  0EC0               	movlw	low printGUID@buf
 16652  003D12  6F62               	movwf	(?_strcat+2)& (0+255),b
 16653  003D14  0012               	return	
 16654  003D16                     __end_ofPL76:
 16655                           	opt stack 0
 16656                           tblptru	equ	0xFF8
 16657                           tblptrh	equ	0xFF7
 16658                           tblptrl	equ	0xFF6
 16659                           tablat	equ	0xFF5
 16660                           prodh	equ	0xFF4
 16661                           prodl	equ	0xFF3
 16662                           intcon	equ	0xFF2
 16663                           indf0	equ	0xFEF
 16664                           postinc0	equ	0xFEE
 16665                           fsr0h	equ	0xFEA
 16666                           fsr0l	equ	0xFE9
 16667                           wreg	equ	0xFE8
 16668                           indf1	equ	0xFE7
 16669                           postinc1	equ	0xFE6
 16670                           postdec1	equ	0xFE5
 16671                           fsr1h	equ	0xFE2
 16672                           fsr1l	equ	0xFE1
 16673                           indf2	equ	0xFDF
 16674                           postinc2	equ	0xFDE
 16675                           postdec2	equ	0xFDD
 16676                           plusw2	equ	0xFDB
 16677                           fsr2h	equ	0xFDA
 16678                           fsr2l	equ	0xFD9
 16679                           status	equ	0xFD8
 16680                           
 16681 ;; *************** function _printNodeFirmwareVersion *****************
 16682 ;; Defined at:
 16683 ;;		line 2689 in file "main.c"
 16684 ;; Parameters:    Size  Location     Type
 16685 ;;  nodeid          1    wreg     unsigned char 
 16686 ;; Auto vars:     Size  Location     Type
 16687 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16688 ;;  buf             3   96[BANK0 ] unsigned char [3]
 16689 ;;  i               1  100[BANK0 ] unsigned char 
 16690 ;;  value           1   99[BANK0 ] unsigned char 
 16691 ;; Return value:  Size  Location     Type
 16692 ;;		None               void
 16693 ;; Registers used:
 16694 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16695 ;; Tracked objects:
 16696 ;;		On entry : D/2
 16697 ;;		On exit  : 0/0
 16698 ;;		Unchanged: 0/0
 16699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16700 ;;      Params:         0       0       0       0       0       0       0
 16701 ;;      Locals:         0       6       0       0       0       0       0
 16702 ;;      Temps:          0       0       0       0       0       0       0
 16703 ;;      Totals:         0       6       0       0       0       0       0
 16704 ;;Total ram usage:        6 bytes
 16705 ;; Hardware stack levels used:    1
 16706 ;; Hardware stack levels required when called:    8
 16707 ;; This function calls:
 16708 ;;		_putsUSART
 16709 ;;		_memset
 16710 ;;		_itoa
 16711 ;;		_readRegister
 16712 ;;		_strcat
 16713 ;; This function is called by:
 16714 ;;		_doModeVerbose
 16715 ;;		_findNodes
 16716 ;; This function uses a non-reentrant model
 16717 ;;
 16718                           
 16719                           	psect	text31
 16720  00419A                     __ptext31:
 16721                           	opt stack 0
 16722  00419A                     _printNodeFirmwareVersion:
 16723                           	opt stack 21
 16724                           
 16725                           ;incstack = 0
 16726                           ;incstack = 0
 16727                           ;printNodeFirmwareVersion@nodeid stored from wreg
 16728  00419A  CFE8 F0BF          	movff	wreg,printNodeFirmwareVersion@nodeid
 16729                           
 16730                           ;main.c: 2690: uint8_t i;
 16731                           ;main.c: 2691: uint8_t value;
 16732                           ;main.c: 2692: char buf[3];
 16733                           ;main.c: 2694: memset(wrkbuf, 0, sizeof (wrkbuf));
 16734  00419E  0E01               	movlw	high _wrkbuf
 16735  0041A0  0100               	movlb	0	; () banked
 16736  0041A2  6F61               	movwf	(?_memset+1)& (0+255),b
 16737  0041A4  0E54               	movlw	low _wrkbuf
 16738  0041A6  6F60               	movwf	?_memset& (0+255),b
 16739  0041A8  6B63               	clrf	(?_memset+3)& (0+255),b
 16740  0041AA  6B62               	clrf	(?_memset+2)& (0+255),b
 16741  0041AC  6B65               	clrf	(?_memset+5)& (0+255),b
 16742  0041AE  0E50               	movlw	80
 16743  0041B0  6F64               	movwf	(?_memset+4)& (0+255),b
 16744  0041B2  EC55  F02B         	call	_memset	;wreg free
 16745                           
 16746                           ; BSR set to: 0
 16747                           ;main.c: 2695: putsUSART((char *) "Firmware version = ");
 16748  0041B6  0E7D               	movlw	high STR_250
 16749  0041B8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16750  0041BA  0EBE               	movlw	low STR_250
 16751  0041BC  6F61               	movwf	?_putsUSART& (0+255),b
 16752  0041BE  ECF6  F028         	call	_putsUSART	;wreg free
 16753                           
 16754                           ;main.c: 2697: for (i = 0; i < 3; i++) {
 16755  0041C2  0100               	movlb	0	; () banked
 16756  0041C4  6BC4               	clrf	printNodeFirmwareVersion@i& (0+255),b
 16757  0041C6                     l11997:
 16758                           
 16759                           ; BSR set to: 0
 16760                           ;main.c: 2698: if (readRegister(nodeid,
 16761                           ;main.c: 2699: 0x94 + i,
 16762                           ;main.c: 2700: rwtimeout,
 16763                           ;main.c: 2701: &value)) {
 16764  0041C6  51C4               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 16765  0041C8  0F94               	addlw	148
 16766  0041CA  6FB6               	movwf	?_readRegister& (0+255),b
 16767  0041CC  0100               	movlb	0	; () banked
 16768  0041CE  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16769  0041D2  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16770  0041D4  0EC3               	movlw	low printNodeFirmwareVersion@value
 16771  0041D6  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16772  0041D8  51BF               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 16773  0041DA  EC35  F021         	call	_readRegister
 16774  0041DE  0900               	iorlw	0
 16775  0041E0  E019               	bz	l12003
 16776                           
 16777                           ;main.c: 2702: itoa(buf, value, 16);
 16778  0041E2  0100               	movlb	0	; () banked
 16779  0041E4  0E00               	movlw	high printNodeFirmwareVersion@buf
 16780  0041E6  6F71               	movwf	(?_itoa+1)& (0+255),b
 16781  0041E8  0EC0               	movlw	low printNodeFirmwareVersion@buf
 16782  0041EA  6F70               	movwf	?_itoa& (0+255),b
 16783  0041EC  C0C3  F072         	movff	printNodeFirmwareVersion@value,?_itoa+2
 16784  0041F0  6B73               	clrf	(?_itoa+3)& (0+255),b
 16785  0041F2  6B75               	clrf	(?_itoa+5)& (0+255),b
 16786  0041F4  0E10               	movlw	16
 16787  0041F6  6F74               	movwf	(?_itoa+4)& (0+255),b
 16788  0041F8  ECD6  F02A         	call	_itoa	;wreg free
 16789                           
 16790                           ; BSR set to: 0
 16791                           ;main.c: 2703: strcat(wrkbuf, buf);
 16792  0041FC  0E01               	movlw	high _wrkbuf
 16793  0041FE  0100               	movlb	0	; () banked
 16794  004200  6F61               	movwf	(?_strcat+1)& (0+255),b
 16795  004202  0E54               	movlw	low _wrkbuf
 16796  004204  6F60               	movwf	?_strcat& (0+255),b
 16797  004206  0E00               	movlw	high printNodeFirmwareVersion@buf
 16798  004208  6F63               	movwf	(?_strcat+3)& (0+255),b
 16799  00420A  0EC0               	movlw	low printNodeFirmwareVersion@buf
 16800  00420C  6F62               	movwf	(?_strcat+2)& (0+255),b
 16801  00420E  ECCA  F028         	call	_strcat	;wreg free
 16802                           
 16803                           ;main.c: 2704: }
 16804  004212  D00B               	goto	l12005
 16805  004214                     l12003:
 16806                           
 16807                           ;main.c: 2705: else {
 16808                           ;main.c: 2706: strcat(wrkbuf, "?");
 16809  004214  0E01               	movlw	high _wrkbuf
 16810  004216  0100               	movlb	0	; () banked
 16811  004218  6F61               	movwf	(?_strcat+1)& (0+255),b
 16812  00421A  0E54               	movlw	low _wrkbuf
 16813  00421C  6F60               	movwf	?_strcat& (0+255),b
 16814  00421E  0E7F               	movlw	high STR_251
 16815  004220  6F63               	movwf	(?_strcat+3)& (0+255),b
 16816  004222  0EFC               	movlw	low STR_251
 16817  004224  6F62               	movwf	(?_strcat+2)& (0+255),b
 16818  004226  ECCA  F028         	call	_strcat	;wreg free
 16819  00422A                     l12005:
 16820                           
 16821                           ;main.c: 2707: }
 16822                           ;main.c: 2709: if (i < 2) {
 16823  00422A  0E02               	movlw	2
 16824  00422C  0100               	movlb	0	; () banked
 16825  00422E  61C4               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 16826  004230  D00A               	goto	l12009
 16827                           
 16828                           ; BSR set to: 0
 16829                           ;main.c: 2710: strcat(wrkbuf, ".");
 16830  004232  0E01               	movlw	high _wrkbuf
 16831  004234  6F61               	movwf	(?_strcat+1)& (0+255),b
 16832  004236  0E54               	movlw	low _wrkbuf
 16833  004238  6F60               	movwf	?_strcat& (0+255),b
 16834  00423A  0E7F               	movlw	high STR_252
 16835  00423C  6F63               	movwf	(?_strcat+3)& (0+255),b
 16836  00423E  0EF6               	movlw	low STR_252
 16837  004240  6F62               	movwf	(?_strcat+2)& (0+255),b
 16838  004242  ECCA  F028         	call	_strcat	;wreg free
 16839  004246                     l12009:
 16840  004246  0100               	movlb	0	; () banked
 16841  004248  2BC4               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 16842                           
 16843                           ; BSR set to: 0
 16844  00424A  0E02               	movlw	2
 16845  00424C  65C4               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 16846  00424E  D7BB               	goto	l11997
 16847                           
 16848                           ; BSR set to: 0
 16849                           ;main.c: 2711: }
 16850                           ;main.c: 2713: }
 16851                           ;main.c: 2715: putsUSART(wrkbuf);
 16852  004250  0E01               	movlw	high _wrkbuf
 16853  004252  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16854  004254  0E54               	movlw	low _wrkbuf
 16855  004256  6F61               	movwf	?_putsUSART& (0+255),b
 16856  004258  ECF6  F028         	call	_putsUSART	;wreg free
 16857                           
 16858                           ;main.c: 2716: putsUSART((char *) "\r\n");
 16859  00425C  0E74               	movlw	high (STR_197+50)
 16860  00425E  0100               	movlb	0	; () banked
 16861  004260  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16862  004262  0E8A               	movlw	low (STR_197+50)
 16863  004264  6F61               	movwf	?_putsUSART& (0+255),b
 16864  004266  EFF6  F028         	goto	_putsUSART	;wreg free
 16865  00426A                     __end_of_printNodeFirmwareVersion:
 16866                           	opt stack 0
 16867                           tblptru	equ	0xFF8
 16868                           tblptrh	equ	0xFF7
 16869                           tblptrl	equ	0xFF6
 16870                           tablat	equ	0xFF5
 16871                           prodh	equ	0xFF4
 16872                           prodl	equ	0xFF3
 16873                           intcon	equ	0xFF2
 16874                           indf0	equ	0xFEF
 16875                           postinc0	equ	0xFEE
 16876                           fsr0h	equ	0xFEA
 16877                           fsr0l	equ	0xFE9
 16878                           wreg	equ	0xFE8
 16879                           indf1	equ	0xFE7
 16880                           postinc1	equ	0xFE6
 16881                           postdec1	equ	0xFE5
 16882                           fsr1h	equ	0xFE2
 16883                           fsr1l	equ	0xFE1
 16884                           indf2	equ	0xFDF
 16885                           postinc2	equ	0xFDE
 16886                           postdec2	equ	0xFDD
 16887                           plusw2	equ	0xFDB
 16888                           fsr2h	equ	0xFDA
 16889                           fsr2l	equ	0xFD9
 16890                           status	equ	0xFD8
 16891                           
 16892 ;; *************** function _strcat *****************
 16893 ;; Defined at:
 16894 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 16895 ;; Parameters:    Size  Location     Type
 16896 ;;  to              2    0[BANK0 ] PTR unsigned char 
 16897 ;;		 -> wrkbuf(80), 
 16898 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 16899 ;;		 -> STR_252(2), STR_251(2), printNodeFirmwareVersion@buf(3), STR_246(2), 
 16900 ;;		 -> STR_245(3), STR_244(2), printGUID@buf(3), 
 16901 ;; Auto vars:     Size  Location     Type
 16902 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 16903 ;;		 -> wrkbuf(80), 
 16904 ;; Return value:  Size  Location     Type
 16905 ;;                  2    0[BANK0 ] PTR unsigned char 
 16906 ;; Registers used:
 16907 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16908 ;; Tracked objects:
 16909 ;;		On entry : F/0
 16910 ;;		On exit  : 0/0
 16911 ;;		Unchanged: 0/0
 16912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16913 ;;      Params:         0       4       0       0       0       0       0
 16914 ;;      Locals:         0       2       0       0       0       0       0
 16915 ;;      Temps:          0       0       0       0       0       0       0
 16916 ;;      Totals:         0       6       0       0       0       0       0
 16917 ;;Total ram usage:        6 bytes
 16918 ;; Hardware stack levels used:    1
 16919 ;; Hardware stack levels required when called:    3
 16920 ;; This function calls:
 16921 ;;		Nothing
 16922 ;; This function is called by:
 16923 ;;		_printGUID
 16924 ;;		_printNodeFirmwareVersion
 16925 ;; This function uses a non-reentrant model
 16926 ;;
 16927                           
 16928                           	psect	text32
 16929  005194                     __ptext32:
 16930                           	opt stack 0
 16931  005194                     _strcat:
 16932                           	opt stack 25
 16933                           
 16934                           ; BSR set to: 0
 16935                           
 16936                           ;incstack = 0
 16937                           ;incstack = 0
 16938  005194  C060  F064         	movff	strcat@to,strcat@cp
 16939  005198  C061  F065         	movff	strcat@to+1,strcat@cp+1
 16940  00519C  D002               	goto	l12695
 16941  00519E                     l12693:
 16942                           
 16943                           ; BSR set to: 0
 16944  00519E  4B64               	infsnz	strcat@cp& (0+255),f,b
 16945  0051A0  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 16946  0051A2                     l12695:
 16947                           
 16948                           ; BSR set to: 0
 16949  0051A2  C064  FFD9         	movff	strcat@cp,fsr2l
 16950  0051A6  C065  FFDA         	movff	strcat@cp+1,fsr2h
 16951  0051AA  50DF               	movf	indf2,w,c
 16952  0051AC  E006               	bz	l12699
 16953  0051AE  D7F7               	goto	l12693
 16954  0051B0                     l12697:
 16955  0051B0  0100               	movlb	0	; () banked
 16956  0051B2  4B64               	infsnz	strcat@cp& (0+255),f,b
 16957  0051B4  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 16958  0051B6  4B62               	infsnz	strcat@from& (0+255),f,b
 16959  0051B8  2B63               	incf	(strcat@from+1)& (0+255),f,b
 16960  0051BA                     l12699:
 16961                           
 16962                           ; BSR set to: 0
 16963  0051BA  C062  FFF6         	movff	strcat@from,tblptrl
 16964  0051BE  C063  FFF7         	movff	strcat@from+1,tblptrh
 16965  0051C2  6AF8               	clrf	tblptru,c
 16966  0051C4  C064  FFD9         	movff	strcat@cp,fsr2l
 16967  0051C8  C065  FFDA         	movff	strcat@cp+1,fsr2h
 16968  0051CC  0E05               	movlw	(high __ramtop+-1)
 16969  0051CE  64F7               	cpfsgt	tblptrh,c
 16970  0051D0  D003               	bra	u16457
 16971  0051D2  0008               	tblrd		*
 16972  0051D4  50F5               	movf	tablat,w,c
 16973  0051D6  D005               	bra	u16450
 16974  0051D8                     u16457:
 16975  0051D8  CFF6 FFE9          	movff	tblptrl,fsr0l
 16976  0051DC  CFF7 FFEA          	movff	tblptrh,fsr0h
 16977  0051E0  50EF               	movf	indf0,w,c
 16978  0051E2                     u16450:
 16979  0051E2  6EDF               	movwf	indf2,c
 16980  0051E4  50DF               	movf	indf2,w,c
 16981  0051E6  B4D8               	btfsc	status,2,c
 16982  0051E8  0012               	return	
 16983  0051EA  D7E2               	goto	l12697
 16984  0051EC                     __end_of_strcat:
 16985                           	opt stack 0
 16986                           tblptru	equ	0xFF8
 16987                           tblptrh	equ	0xFF7
 16988                           tblptrl	equ	0xFF6
 16989                           tablat	equ	0xFF5
 16990                           prodh	equ	0xFF4
 16991                           prodl	equ	0xFF3
 16992                           intcon	equ	0xFF2
 16993                           indf0	equ	0xFEF
 16994                           postinc0	equ	0xFEE
 16995                           fsr0h	equ	0xFEA
 16996                           fsr0l	equ	0xFE9
 16997                           wreg	equ	0xFE8
 16998                           indf1	equ	0xFE7
 16999                           postinc1	equ	0xFE6
 17000                           postdec1	equ	0xFE5
 17001                           fsr1h	equ	0xFE2
 17002                           fsr1l	equ	0xFE1
 17003                           indf2	equ	0xFDF
 17004                           postinc2	equ	0xFDE
 17005                           postdec2	equ	0xFDD
 17006                           plusw2	equ	0xFDB
 17007                           fsr2h	equ	0xFDA
 17008                           fsr2l	equ	0xFD9
 17009                           status	equ	0xFD8
 17010                           
 17011 ;; *************** function _readRegister *****************
 17012 ;; Defined at:
 17013 ;;		line 2192 in file "main.c"
 17014 ;; Parameters:    Size  Location     Type
 17015 ;;  nodeid          1    wreg     unsigned char 
 17016 ;;  reg             1   86[BANK0 ] unsigned char 
 17017 ;;  timeout         2   87[BANK0 ] unsigned short 
 17018 ;;  value           1   89[BANK0 ] PTR unsigned char 
 17019 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 17020 ;; Auto vars:     Size  Location     Type
 17021 ;;  nodeid          1   94[BANK0 ] unsigned char 
 17022 ;; Return value:  Size  Location     Type
 17023 ;;                  1    wreg      enum E15660
 17024 ;; Registers used:
 17025 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17026 ;; Tracked objects:
 17027 ;;		On entry : F/0
 17028 ;;		On exit  : E/0
 17029 ;;		Unchanged: 0/0
 17030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17031 ;;      Params:         0       4       0       0       0       0       0
 17032 ;;      Locals:         0       1       0       0       0       0       0
 17033 ;;      Temps:          0       4       0       0       0       0       0
 17034 ;;      Totals:         0       9       0       0       0       0       0
 17035 ;;Total ram usage:        9 bytes
 17036 ;; Hardware stack levels used:    1
 17037 ;; Hardware stack levels required when called:    7
 17038 ;; This function calls:
 17039 ;;		_sendVSCPFrame
 17040 ;;		_getVSCPFrame
 17041 ;; This function is called by:
 17042 ;;		_findNodes
 17043 ;;		_printGUID
 17044 ;;		_printMDF
 17045 ;;		_printNodeFirmwareVersion
 17046 ;; This function uses a non-reentrant model
 17047 ;;
 17048                           
 17049                           	psect	text33
 17050  00426A                     __ptext33:
 17051                           	opt stack 0
 17052  00426A                     _readRegister:
 17053                           	opt stack 21
 17054                           
 17055                           ;incstack = 0
 17056                           ;incstack = 0
 17057                           ;readRegister@nodeid stored from wreg
 17058  00426A  CFE8 F0BE          	movff	wreg,readRegister@nodeid
 17059                           
 17060                           ; BSR set to: 0
 17061                           ;main.c: 2193: vscpData[ 0 ] = nodeid;
 17062  00426E  C0BE  F1A4         	movff	readRegister@nodeid,_vscpData
 17063                           
 17064                           ; BSR set to: 0
 17065                           ;main.c: 2194: vscpData[ 1 ] = reg;
 17066  004272  C0B6  F1A5         	movff	readRegister@reg,_vscpData+1
 17067                           
 17068                           ; BSR set to: 0
 17069                           ;main.c: 2196: if (sendVSCPFrame(0,
 17070                           ;main.c: 2197: 9,
 17071                           ;main.c: 2198: 0,
 17072                           ;main.c: 2199: 0,
 17073                           ;main.c: 2200: 2,
 17074                           ;main.c: 2201: vscpData)) {
 17075  004276  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 17076  004278  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 17077  00427A  0E09               	movlw	9
 17078  00427C  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 17079  00427E  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 17080  004280  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 17081  004282  0E02               	movlw	2
 17082  004284  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 17083  004286  0E01               	movlw	high _vscpData
 17084  004288  0100               	movlb	0	; () banked
 17085  00428A  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 17086  00428C  0EA4               	movlw	low _vscpData
 17087  00428E  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 17088  004290  ECBD  F022         	call	_sendVSCPFrame	;wreg free
 17089  004294  0900               	iorlw	0
 17090  004296  E04E               	bz	l12687
 17091                           
 17092                           ; BSR set to: 0
 17093                           ;main.c: 2203: timekeeper = 0;
 17094  004298  6BE5               	clrf	_timekeeper& (0+255),b	;volatile
 17095  00429A  6BE6               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 17096  00429C  6BE7               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 17097  00429E  6BE8               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 17098                           
 17099                           ;main.c: 2204: while (timekeeper < timeout) {
 17100  0042A0  D039               	goto	l12685
 17101  0042A2                     l1060:
 17102                           
 17103                           ; BSR set to: 0
 17104  0042A2  0004               	clrwdt		;# 
 17105                           
 17106                           ;main.c: 2208: if (getVSCPFrame(&vscpClass,
 17107                           ;main.c: 2209: &vscpType,
 17108                           ;main.c: 2210: &vscpNodeId,
 17109                           ;main.c: 2211: &vscpPriority,
 17110                           ;main.c: 2212: &vscpSize,
 17111                           ;main.c: 2213: vscpData)) {
 17112  0042A4  0E01               	movlw	high _vscpClass
 17113  0042A6  0100               	movlb	0	; () banked
 17114  0042A8  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 17115  0042AA  0EAC               	movlw	low _vscpClass
 17116  0042AC  6F72               	movwf	?_getVSCPFrame& (0+255),b
 17117  0042AE  0E01               	movlw	high _vscpType
 17118  0042B0  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 17119  0042B2  0EB1               	movlw	low _vscpType
 17120  0042B4  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 17121  0042B6  0E01               	movlw	high _vscpNodeId
 17122  0042B8  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 17123  0042BA  0EAE               	movlw	low _vscpNodeId
 17124  0042BC  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 17125  0042BE  0E01               	movlw	high _vscpPriority
 17126  0042C0  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 17127  0042C2  0EAF               	movlw	low _vscpPriority
 17128  0042C4  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 17129  0042C6  0E01               	movlw	high _vscpSize
 17130  0042C8  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 17131  0042CA  0EB0               	movlw	low _vscpSize
 17132  0042CC  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 17133  0042CE  0E01               	movlw	high _vscpData
 17134  0042D0  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 17135  0042D2  0EA4               	movlw	low _vscpData
 17136  0042D4  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 17137  0042D6  ECC5  F025         	call	_getVSCPFrame	;wreg free
 17138  0042DA  0900               	iorlw	0
 17139  0042DC  E01B               	bz	l12685
 17140                           
 17141                           ; BSR set to: 0
 17142                           ;main.c: 2214: if ((nodeid == vscpNodeId) &&
 17143                           ;main.c: 2215: (0 == vscpClass) &&
 17144                           ;main.c: 2216: (10 == vscpType) &&
 17145                           ;main.c: 2217: (2 == vscpSize) &&
 17146                           ;main.c: 2218: (reg == vscpData[ 0 ])) {
 17147  0042DE  0101               	movlb	1	; () banked
 17148  0042E0  51AE               	movf	_vscpNodeId& (0+255),w,b
 17149  0042E2  0100               	movlb	0	; () banked
 17150  0042E4  63BE               	cpfseq	readRegister@nodeid& (0+255),b
 17151  0042E6  D016               	goto	l12685
 17152                           
 17153                           ; BSR set to: 0
 17154  0042E8  0101               	movlb	1	; () banked
 17155  0042EA  51AD               	movf	(_vscpClass+1)& (0+255),w,b
 17156  0042EC  11AC               	iorwf	_vscpClass& (0+255),w,b
 17157  0042EE  E112               	bnz	l12685
 17158                           
 17159                           ; BSR set to: 1
 17160  0042F0  51B1               	movf	_vscpType& (0+255),w,b
 17161  0042F2  0A0A               	xorlw	10
 17162  0042F4  E10F               	bnz	l12685
 17163                           
 17164                           ; BSR set to: 1
 17165  0042F6  51B0               	movf	_vscpSize& (0+255),w,b
 17166  0042F8  0A02               	xorlw	2
 17167  0042FA  E10C               	bnz	l12685
 17168                           
 17169                           ; BSR set to: 1
 17170  0042FC  51A4               	movf	_vscpData& (0+255),w,b
 17171  0042FE  0100               	movlb	0	; () banked
 17172  004300  63B6               	cpfseq	readRegister@reg& (0+255),b
 17173  004302  D008               	goto	l12685
 17174                           
 17175                           ; BSR set to: 0
 17176                           ;main.c: 2219: *value = vscpData[ 1 ];
 17177  004304  51B9               	movf	readRegister@value& (0+255),w,b
 17178  004306  6ED9               	movwf	fsr2l,c
 17179  004308  6ADA               	clrf	fsr2h,c
 17180  00430A  0101               	movlb	1	; () banked
 17181  00430C  C1A5  FFDF         	movff	_vscpData+1,indf2
 17182                           
 17183                           ; BSR set to: 1
 17184                           ;main.c: 2220: return 1;
 17185  004310  0E01               	movlw	1
 17186  004312  D011               	goto	l1063
 17187  004314                     l12685:
 17188  004314  0100               	movlb	0	; () banked
 17189  004316  51B7               	movf	readRegister@timeout& (0+255),w,b
 17190  004318  6FBA               	movwf	??_readRegister& (0+255),b
 17191  00431A  51B8               	movf	(readRegister@timeout+1)& (0+255),w,b
 17192  00431C  6FBB               	movwf	(??_readRegister+1)& (0+255),b
 17193  00431E  6BBC               	clrf	(??_readRegister+2)& (0+255),b
 17194  004320  6BBD               	clrf	(??_readRegister+3)& (0+255),b
 17195  004322  51BA               	movf	??_readRegister& (0+255),w,b
 17196  004324  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
 17197  004326  51BB               	movf	(??_readRegister+1)& (0+255),w,b
 17198  004328  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 17199  00432A  51BC               	movf	(??_readRegister+2)& (0+255),w,b
 17200  00432C  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 17201  00432E  51BD               	movf	(??_readRegister+3)& (0+255),w,b
 17202  004330  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 17203  004332  E3B7               	bnc	l1060
 17204  004334                     l12687:
 17205                           
 17206                           ; BSR set to: 0
 17207                           ;main.c: 2221: }
 17208                           ;main.c: 2222: }
 17209                           ;main.c: 2223: }
 17210                           ;main.c: 2224: }
 17211                           ;main.c: 2226: return 0;
 17212  004334  0E00               	movlw	0
 17213  004336                     l1063:
 17214  004336  0012               	return	
 17215  004338                     __end_of_readRegister:
 17216                           	opt stack 0
 17217                           tblptru	equ	0xFF8
 17218                           tblptrh	equ	0xFF7
 17219                           tblptrl	equ	0xFF6
 17220                           tablat	equ	0xFF5
 17221                           prodh	equ	0xFF4
 17222                           prodl	equ	0xFF3
 17223                           intcon	equ	0xFF2
 17224                           indf0	equ	0xFEF
 17225                           postinc0	equ	0xFEE
 17226                           fsr0h	equ	0xFEA
 17227                           fsr0l	equ	0xFE9
 17228                           wreg	equ	0xFE8
 17229                           indf1	equ	0xFE7
 17230                           postinc1	equ	0xFE6
 17231                           postdec1	equ	0xFE5
 17232                           fsr1h	equ	0xFE2
 17233                           fsr1l	equ	0xFE1
 17234                           indf2	equ	0xFDF
 17235                           postinc2	equ	0xFDE
 17236                           postdec2	equ	0xFDD
 17237                           plusw2	equ	0xFDB
 17238                           fsr2h	equ	0xFDA
 17239                           fsr2l	equ	0xFD9
 17240                           status	equ	0xFD8
 17241                           
 17242 ;; *************** function _sendVSCPFrame *****************
 17243 ;; Defined at:
 17244 ;;		line 2913 in file "main.c"
 17245 ;; Parameters:    Size  Location     Type
 17246 ;;  vscpclass       2   54[BANK0 ] unsigned short 
 17247 ;;  vscptype        1   56[BANK0 ] unsigned char 
 17248 ;;  nodeid          1   57[BANK0 ] unsigned char 
 17249 ;;  priority        1   58[BANK0 ] unsigned char 
 17250 ;;  size            1   59[BANK0 ] unsigned char 
 17251 ;;  pData           2   60[BANK0 ] PTR unsigned char 
 17252 ;;		 -> vscpData(8), 
 17253 ;; Auto vars:     Size  Location     Type
 17254 ;;  id              4   82[BANK0 ] unsigned long 
 17255 ;; Return value:  Size  Location     Type
 17256 ;;                  1    wreg      unsigned char 
 17257 ;; Registers used:
 17258 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17259 ;; Tracked objects:
 17260 ;;		On entry : F/0
 17261 ;;		On exit  : F/0
 17262 ;;		Unchanged: 0/0
 17263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17264 ;;      Params:         0       8       0       0       0       0       0
 17265 ;;      Locals:         0       4       0       0       0       0       0
 17266 ;;      Temps:          0      20       0       0       0       0       0
 17267 ;;      Totals:         0      32       0       0       0       0       0
 17268 ;;Total ram usage:       32 bytes
 17269 ;; Hardware stack levels used:    1
 17270 ;; Hardware stack levels required when called:    6
 17271 ;; This function calls:
 17272 ;;		_sendCANFrame
 17273 ;; This function is called by:
 17274 ;;		_doModeVerbose
 17275 ;;		_readRegister
 17276 ;;		_readRegisterExtended
 17277 ;;		_writeRegisterExtended
 17278 ;; This function uses a non-reentrant model
 17279 ;;
 17280                           
 17281                           	psect	text34
 17282  00457A                     __ptext34:
 17283                           	opt stack 0
 17284  00457A                     _sendVSCPFrame:
 17285                           	opt stack 21
 17286                           
 17287                           ; BSR set to: 0
 17288                           ;main.c: 2914: uint32_t id = ((uint32_t) priority << 26) |
 17289                           ;main.c: 2915: ((uint32_t) vscpclass << 16) |
 17290                           ;main.c: 2916: ((uint32_t) vscptype << 8) |
 17291                           ;main.c: 2917: nodeid;
 17292                           
 17293                           ;incstack = 0
 17294                           ;incstack = 0
 17295  00457A  C098  F09E         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 17296  00457E  6B9F               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 17297  004580  6BA0               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 17298  004582  6BA1               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 17299  004584  C0A0  F0A1         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 17300  004588  C09F  F0A0         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 17301  00458C  C09E  F09F         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 17302  004590  6B9E               	clrf	??_sendVSCPFrame& (0+255),b
 17303  004592  5196               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 17304  004594  6FA2               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 17305  004596  5197               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 17306  004598  6FA3               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 17307  00459A  6BA4               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 17308  00459C  6BA5               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 17309  00459E  C0A3  F0A5         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 17310  0045A2  C0A2  F0A4         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 17311  0045A6  6BA3               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 17312  0045A8  6BA2               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 17313  0045AA  C09A  F0A6         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 17314  0045AE  6BA7               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 17315  0045B0  6BA8               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 17316  0045B2  6BA9               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 17317  0045B4  0E1A               	movlw	26
 17318  0045B6                     u14105:
 17319  0045B6  90D8               	bcf	status,0,c
 17320  0045B8  37A6               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 17321  0045BA  37A7               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 17322  0045BC  37A8               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 17323  0045BE  37A9               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 17324  0045C0  2EE8               	decfsz	wreg,f,c
 17325  0045C2  D7F9               	goto	u14105
 17326  0045C4  51A2               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 17327  0045C6  11A6               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 17328  0045C8  6FAA               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 17329  0045CA  51A3               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 17330  0045CC  11A7               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 17331  0045CE  6FAB               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 17332  0045D0  51A4               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 17333  0045D2  11A8               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 17334  0045D4  6FAC               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 17335  0045D6  51A5               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 17336  0045D8  11A9               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 17337  0045DA  6FAD               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 17338  0045DC  519E               	movf	??_sendVSCPFrame& (0+255),w,b
 17339  0045DE  11AA               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 17340  0045E0  6FAE               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 17341  0045E2  519F               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 17342  0045E4  11AB               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 17343  0045E6  6FAF               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 17344  0045E8  51A0               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 17345  0045EA  11AC               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 17346  0045EC  6FB0               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 17347  0045EE  51A1               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 17348  0045F0  11AD               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 17349  0045F2  6FB1               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 17350  0045F4  5199               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 17351  0045F6  11AE               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 17352  0045F8  6FB2               	movwf	sendVSCPFrame@id& (0+255),b
 17353  0045FA  51AF               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 17354  0045FC  6FB3               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 17355  0045FE  51B0               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 17356  004600  6FB4               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 17357  004602  51B1               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 17358  004604  6FB5               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 17359                           
 17360                           ; BSR set to: 0
 17361                           ;main.c: 2919: if (!sendCANFrame(id, size, pData)) {
 17362  004606  C0B2  F08F         	movff	sendVSCPFrame@id,?_sendCANFrame
 17363  00460A  C0B3  F090         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 17364  00460E  C0B4  F091         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 17365  004612  C0B5  F092         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 17366  004616  C09B  F093         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 17367  00461A  C09C  F094         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 17368  00461E  C09D  F095         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 17369  004622  ECBA  F02A         	call	_sendCANFrame	;wreg free
 17370  004626  0900               	iorlw	0
 17371                           
 17372                           ; BSR set to: 0
 17373                           ;main.c: 2921: return 0;
 17374  004628  0E00               	movlw	0
 17375  00462A  A4D8               	btfss	status,2,c
 17376                           
 17377                           ; BSR set to: 0
 17378                           ;main.c: 2922: }
 17379                           ;main.c: 2924: return 1;
 17380  00462C  0E01               	movlw	1
 17381                           
 17382                           ; BSR set to: 0
 17383  00462E  0012               	return	
 17384  004630                     __end_of_sendVSCPFrame:
 17385                           	opt stack 0
 17386                           tblptru	equ	0xFF8
 17387                           tblptrh	equ	0xFF7
 17388                           tblptrl	equ	0xFF6
 17389                           tablat	equ	0xFF5
 17390                           prodh	equ	0xFF4
 17391                           prodl	equ	0xFF3
 17392                           intcon	equ	0xFF2
 17393                           indf0	equ	0xFEF
 17394                           postinc0	equ	0xFEE
 17395                           fsr0h	equ	0xFEA
 17396                           fsr0l	equ	0xFE9
 17397                           wreg	equ	0xFE8
 17398                           indf1	equ	0xFE7
 17399                           postinc1	equ	0xFE6
 17400                           postdec1	equ	0xFE5
 17401                           fsr1h	equ	0xFE2
 17402                           fsr1l	equ	0xFE1
 17403                           indf2	equ	0xFDF
 17404                           postinc2	equ	0xFDE
 17405                           postdec2	equ	0xFDD
 17406                           plusw2	equ	0xFDB
 17407                           fsr2h	equ	0xFDA
 17408                           fsr2l	equ	0xFD9
 17409                           status	equ	0xFD8
 17410                           
 17411 ;; *************** function _sendCANFrame *****************
 17412 ;; Defined at:
 17413 ;;		line 2959 in file "main.c"
 17414 ;; Parameters:    Size  Location     Type
 17415 ;;  id              4   47[BANK0 ] unsigned long 
 17416 ;;  dlc             1   51[BANK0 ] unsigned char 
 17417 ;;  pdata           2   52[BANK0 ] PTR unsigned char 
 17418 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17419 ;; Auto vars:     Size  Location     Type
 17420 ;;		None
 17421 ;; Return value:  Size  Location     Type
 17422 ;;                  1    wreg      unsigned char 
 17423 ;; Registers used:
 17424 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17425 ;; Tracked objects:
 17426 ;;		On entry : F/0
 17427 ;;		On exit  : F/0
 17428 ;;		Unchanged: 0/0
 17429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17430 ;;      Params:         0       7       0       0       0       0       0
 17431 ;;      Locals:         0       0       0       0       0       0       0
 17432 ;;      Temps:          0       0       0       0       0       0       0
 17433 ;;      Totals:         0       7       0       0       0       0       0
 17434 ;;Total ram usage:        7 bytes
 17435 ;; Hardware stack levels used:    1
 17436 ;; Hardware stack levels required when called:    5
 17437 ;; This function calls:
 17438 ;;		_ECANSendMessage
 17439 ;; This function is called by:
 17440 ;;		_doModeSLCAN
 17441 ;;		_receiveVSCPModeCanalMsg
 17442 ;;		_sendVSCPFrame
 17443 ;; This function uses a non-reentrant model
 17444 ;;
 17445                           
 17446                           	psect	text35
 17447  005574                     __ptext35:
 17448                           	opt stack 0
 17449  005574                     _sendCANFrame:
 17450                           	opt stack 24
 17451                           
 17452                           ; BSR set to: 0
 17453                           ;main.c: 2960: if (!ECANSendMessage(id, pdata, dlc, ECAN_TX_XTD_FRAME)) {
 17454                           
 17455                           ; BSR set to: 0
 17456                           ;incstack = 0
 17457                           ;incstack = 0
 17458  005574  C08F  F06A         	movff	sendCANFrame@id,?_ECANSendMessage
 17459  005578  C090  F06B         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 17460  00557C  C091  F06C         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 17461  005580  C092  F06D         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 17462  005584  C094  F06E         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 17463  005588  C095  F06F         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 17464  00558C  C093  F070         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 17465  005590  0E20               	movlw	32
 17466  005592  6F71               	movwf	(?_ECANSendMessage+7)& (0+255),b
 17467  005594  EC51  F019         	call	_ECANSendMessage	;wreg free
 17468  005598  0900               	iorlw	0
 17469  00559A  E106               	bnz	l12537
 17470                           
 17471                           ; BSR set to: 0
 17472                           ;main.c: 2962: can_transmitOverruns++;
 17473  00559C  2A2B               	incf	_can_transmitOverruns,f,c
 17474  00559E  0E00               	movlw	0
 17475  0055A0  222C               	addwfc	_can_transmitOverruns+1,f,c
 17476  0055A2  222D               	addwfc	_can_transmitOverruns+2,f,c
 17477  0055A4  222E               	addwfc	_can_transmitOverruns+3,f,c
 17478                           
 17479                           ; BSR set to: 0
 17480                           ;main.c: 2963: return 0;
 17481  0055A6  D001               	goto	l1259
 17482  0055A8                     l12537:
 17483                           
 17484                           ; BSR set to: 0
 17485                           ;main.c: 2964: }
 17486                           ;main.c: 2966: return 1;
 17487  0055A8  0E01               	movlw	1
 17488  0055AA                     l1259:
 17489                           
 17490                           ; BSR set to: 0
 17491  0055AA  0012               	return	
 17492  0055AC                     __end_of_sendCANFrame:
 17493                           	opt stack 0
 17494                           tblptru	equ	0xFF8
 17495                           tblptrh	equ	0xFF7
 17496                           tblptrl	equ	0xFF6
 17497                           tablat	equ	0xFF5
 17498                           prodh	equ	0xFF4
 17499                           prodl	equ	0xFF3
 17500                           intcon	equ	0xFF2
 17501                           indf0	equ	0xFEF
 17502                           postinc0	equ	0xFEE
 17503                           fsr0h	equ	0xFEA
 17504                           fsr0l	equ	0xFE9
 17505                           wreg	equ	0xFE8
 17506                           indf1	equ	0xFE7
 17507                           postinc1	equ	0xFE6
 17508                           postdec1	equ	0xFE5
 17509                           fsr1h	equ	0xFE2
 17510                           fsr1l	equ	0xFE1
 17511                           indf2	equ	0xFDF
 17512                           postinc2	equ	0xFDE
 17513                           postdec2	equ	0xFDD
 17514                           plusw2	equ	0xFDB
 17515                           fsr2h	equ	0xFDA
 17516                           fsr2l	equ	0xFD9
 17517                           status	equ	0xFD8
 17518                           
 17519 ;; *************** function _ECANSendMessage *****************
 17520 ;; Defined at:
 17521 ;;		line 617 in file "ECAN.c"
 17522 ;; Parameters:    Size  Location     Type
 17523 ;;  id              4   10[BANK0 ] unsigned long 
 17524 ;;  data            2   14[BANK0 ] PTR unsigned char 
 17525 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17526 ;;  dataLen         1   16[BANK0 ] unsigned char 
 17527 ;;  msgFlags        1   17[BANK0 ] enum E16306
 17528 ;; Auto vars:     Size  Location     Type
 17529 ;;  pb             18   19[BANK0 ] PTR unsigned char [9]
 17530 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17531 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17532 ;;		 -> B0CON(1), 
 17533 ;;  ptr             2   45[BANK0 ] PTR unsigned char 
 17534 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17535 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17536 ;;		 -> B0CON(1), 
 17537 ;;  tempPtr         2   41[BANK0 ] PTR unsigned char 
 17538 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17539 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17540 ;;		 -> B0CON(1), 
 17541 ;;  i               1   44[BANK0 ] unsigned char 
 17542 ;;  temp            1   43[BANK0 ] unsigned char 
 17543 ;;  tempBSEL0       1   40[BANK0 ] struct .
 17544 ;;  j               1   39[BANK0 ] unsigned char 
 17545 ;;  buffers         1   38[BANK0 ] unsigned char 
 17546 ;;  mode            1   37[BANK0 ] unsigned char 
 17547 ;; Return value:  Size  Location     Type
 17548 ;;                  1    wreg      enum E15660
 17549 ;; Registers used:
 17550 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17551 ;; Tracked objects:
 17552 ;;		On entry : F/0
 17553 ;;		On exit  : F/0
 17554 ;;		Unchanged: 0/0
 17555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17556 ;;      Params:         0       8       0       0       0       0       0
 17557 ;;      Locals:         0      28       0       0       0       0       0
 17558 ;;      Temps:          0       1       0       0       0       0       0
 17559 ;;      Totals:         0      37       0       0       0       0       0
 17560 ;;Total ram usage:       37 bytes
 17561 ;; Hardware stack levels used:    1
 17562 ;; Hardware stack levels required when called:    4
 17563 ;; This function calls:
 17564 ;;		__CANIDToRegs
 17565 ;; This function is called by:
 17566 ;;		_sendCANFrame
 17567 ;; This function uses a non-reentrant model
 17568 ;;
 17569                           
 17570                           	psect	text36
 17571  0032A2                     __ptext36:
 17572                           	opt stack 0
 17573  0032A2                     _ECANSendMessage:
 17574                           	opt stack 24
 17575                           
 17576                           ; BSR set to: 0
 17577                           ;ECAN.c: 619: BYTE mode;
 17578                           ;ECAN.c: 620: BYTE buffers;
 17579                           ;ECAN.c: 628: BYTE i,j;
 17580                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 17581                           ;ECAN.c: 630: BYTE* pb[9];
 17582                           ;ECAN.c: 631: BYTE temp;
 17583                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 17584                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 17585                           
 17586                           ; BSR set to: 0
 17587                           ;incstack = 0
 17588                           ;incstack = 0
 17589  0032A2  0E0F               	movlw	15	;volatile
 17590  0032A4  0100               	movlb	0	; () banked
 17591  0032A6  6F74               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 17592  0032A8  0E40               	movlw	64	;volatile
 17593  0032AA  6F73               	movwf	ECANSendMessage@pb& (0+255),b
 17594                           
 17595                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 17596  0032AC  0E0F               	movlw	15	;volatile
 17597  0032AE  6F76               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 17598  0032B0  0E30               	movlw	48	;volatile
 17599  0032B2  6F75               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 17600                           
 17601                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 17602  0032B4  0E0F               	movlw	15	;volatile
 17603  0032B6  6F78               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 17604  0032B8  0E20               	movlw	32	;volatile
 17605  0032BA  6F77               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 17606                           
 17607                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 17608  0032BC  0E0E               	movlw	14	;volatile
 17609  0032BE  6F7A               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 17610  0032C0  0E20               	movlw	32	;volatile
 17611  0032C2  6F79               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 17612                           
 17613                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 17614  0032C4  0E0E               	movlw	14	;volatile
 17615  0032C6  6F7C               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 17616  0032C8  0E30               	movlw	48	;volatile
 17617  0032CA  6F7B               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 17618                           
 17619                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 17620  0032CC  0E0E               	movlw	14	;volatile
 17621  0032CE  6F7E               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 17622  0032D0  0E40               	movlw	64	;volatile
 17623  0032D2  6F7D               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 17624                           
 17625                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 17626  0032D4  0E0E               	movlw	14	;volatile
 17627  0032D6  6F80               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 17628  0032D8  0E50               	movlw	80	;volatile
 17629  0032DA  6F7F               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 17630                           
 17631                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 17632  0032DC  0E0E               	movlw	14	;volatile
 17633  0032DE  6F82               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 17634  0032E0  0E60               	movlw	96	;volatile
 17635  0032E2  6F81               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 17636                           
 17637                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 17638  0032E4  0E0E               	movlw	14	;volatile
 17639  0032E6  6F84               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 17640  0032E8  0E70               	movlw	112	;volatile
 17641  0032EA  6F83               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 17642                           
 17643                           ; BSR set to: 0
 17644                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 17645  0032EC  5077               	movf	3959,w,c	;volatile
 17646  0032EE  0BC0               	andlw	192
 17647  0032F0  6F85               	movwf	ECANSendMessage@mode& (0+255),b
 17648                           
 17649                           ; BSR set to: 0
 17650                           ;ECAN.c: 660: if ( mode == 0x00 )
 17651  0032F2  6785               	tstfsz	ECANSendMessage@mode& (0+255),b
 17652  0032F4  D002               	goto	l12709
 17653                           
 17654                           ; BSR set to: 0
 17655                           ;ECAN.c: 661: buffers = 2;
 17656  0032F6  0E02               	movlw	2
 17657  0032F8  D001               	goto	L14
 17658  0032FA                     l12709:
 17659                           
 17660                           ; BSR set to: 0
 17661                           ;ECAN.c: 662: else
 17662                           ;ECAN.c: 663: buffers = 8;
 17663  0032FA  0E08               	movlw	8
 17664  0032FC                     L14:
 17665  0032FC  6F86               	movwf	ECANSendMessage@buffers& (0+255),b
 17666                           
 17667                           ; BSR set to: 0
 17668                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 17669  0032FE  010D               	movlb	13	; () banked
 17670  003300  90D8               	bcf	status,0,c
 17671  003302  31F8               	rrcf	248,w,b	;volatile
 17672  003304  0100               	movlb	0	; () banked
 17673  003306  6F88               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 17674                           
 17675                           ; BSR set to: 0
 17676                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 17677  003308  6B8C               	clrf	ECANSendMessage@i& (0+255),b
 17678  00330A  D07D               	goto	l12769
 17679  00330C                     l12715:
 17680                           
 17681                           ; BSR set to: 0
 17682                           ;ECAN.c: 688: {
 17683                           ;ECAN.c: 693: ptr = pb[i];
 17684  00330C  518C               	movf	ECANSendMessage@i& (0+255),w,b
 17685  00330E  0D02               	mullw	2
 17686  003310  50F3               	movf	prodl,w,c
 17687  003312  0F73               	addlw	low ECANSendMessage@pb
 17688  003314  6ED9               	movwf	fsr2l,c
 17689  003316  6ADA               	clrf	fsr2h,c
 17690  003318  CFDE F08D          	movff	postinc2,ECANSendMessage@ptr
 17691  00331C  CFDD F08E          	movff	postdec2,ECANSendMessage@ptr+1
 17692                           
 17693                           ; BSR set to: 0
 17694                           ;ECAN.c: 694: tempPtr = ptr;
 17695  003320  C08D  F089         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 17696  003324  C08E  F08A         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 17697                           
 17698                           ; BSR set to: 0
 17699                           ;ECAN.c: 702: if ( i > 2 )
 17700  003328  0E02               	movlw	2
 17701  00332A  658C               	cpfsgt	ECANSendMessage@i& (0+255),b
 17702  00332C  D004               	goto	l12727
 17703                           
 17704                           ; BSR set to: 0
 17705                           ;ECAN.c: 703: {
 17706                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 17707  00332E  90D8               	bcf	status,0,c
 17708  003330  3388               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 17709                           
 17710                           ; BSR set to: 0
 17711                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 17712  003332  A188               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 17713  003334  D067               	goto	l12767
 17714  003336                     l12727:
 17715                           
 17716                           ; BSR set to: 0
 17717                           ;ECAN.c: 714: }
 17718                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 17719  003336  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17720  00333A  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17721  00333E  50DF               	movf	indf2,w,c
 17722  003340  6F72               	movwf	??_ECANSendMessage& (0+255),b
 17723  003342  B772               	btfsc	??_ECANSendMessage& (0+255),3,b
 17724  003344  D05F               	goto	l12767
 17725                           
 17726                           ; BSR set to: 0
 17727                           ;ECAN.c: 721: {
 17728                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 17729  003346  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17730  00334A  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17731  00334E  0EFC               	movlw	252
 17732  003350  16DF               	andwf	indf2,f,c
 17733                           
 17734                           ; BSR set to: 0
 17735                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 17736  003352  C071  F072         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 17737  003356  0E03               	movlw	3
 17738  003358  1772               	andwf	??_ECANSendMessage& (0+255),f,b
 17739  00335A  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17740  00335E  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17741  003362  5172               	movf	??_ECANSendMessage& (0+255),w,b
 17742  003364  12DF               	iorwf	indf2,f,c
 17743                           
 17744                           ; BSR set to: 0
 17745                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 17746  003366  AD71               	btfss	ECANSendMessage@msgFlags& (0+255),6,b
 17747  003368  D004               	goto	l1426
 17748                           
 17749                           ; BSR set to: 0
 17750                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 17751  00336A  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 17752  00336C  0940               	iorlw	64
 17753  00336E  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 17754  003370  D002               	goto	l12737
 17755  003372                     l1426:
 17756                           
 17757                           ; BSR set to: 0
 17758                           ;ECAN.c: 729: else
 17759                           ;ECAN.c: 730: temp = dataLen;
 17760  003372  C070  F08B         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 17761  003376                     l12737:
 17762                           
 17763                           ; BSR set to: 0
 17764                           ;ECAN.c: 732: *(ptr+5) = temp;
 17765  003376  EE20 F005          	lfsr	2,5
 17766  00337A  518D               	movf	ECANSendMessage@ptr& (0+255),w,b
 17767  00337C  26D9               	addwf	fsr2l,f,c
 17768  00337E  518E               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 17769  003380  22DA               	addwfc	fsr2h,f,c
 17770  003382  C08B  FFDF         	movff	ECANSendMessage@temp,indf2
 17771                           
 17772                           ; BSR set to: 0
 17773                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 17774  003386  AB71               	btfss	ECANSendMessage@msgFlags& (0+255),5,b
 17775  003388  D003               	goto	l1428
 17776                           
 17777                           ; BSR set to: 0
 17778                           ;ECAN.c: 736: temp = 1;
 17779  00338A  0E01               	movlw	1
 17780  00338C  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 17781  00338E  D001               	goto	l12743
 17782  003390                     l1428:
 17783                           
 17784                           ; BSR set to: 0
 17785                           ;ECAN.c: 738: else
 17786                           ;ECAN.c: 739: temp = 0;
 17787  003390  6B8B               	clrf	ECANSendMessage@temp& (0+255),b
 17788  003392                     l12743:
 17789                           
 17790                           ; BSR set to: 0
 17791                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 17792  003392  298D               	incf	ECANSendMessage@ptr& (0+255),w,b
 17793  003394  6F60               	movwf	?__CANIDToRegs& (0+255),b
 17794  003396  0E00               	movlw	0
 17795  003398  218E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 17796  00339A  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 17797  00339C  C06A  F062         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 17798  0033A0  C06B  F063         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 17799  0033A4  C06C  F064         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 17800  0033A8  C06D  F065         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 17801  0033AC  C08B  F066         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 17802  0033B0  EC79  F01C         	call	__CANIDToRegs	;wreg free
 17803                           
 17804                           ; BSR set to: 0
 17805                           ;ECAN.c: 745: ptr += 6;
 17806  0033B4  0E06               	movlw	6
 17807  0033B6  278D               	addwf	ECANSendMessage@ptr& (0+255),f,b
 17808  0033B8  0E00               	movlw	0
 17809  0033BA  238E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 17810                           
 17811                           ; BSR set to: 0
 17812                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 17813  0033BC  6B87               	clrf	ECANSendMessage@j& (0+255),b
 17814  0033BE  D00F               	goto	l12757
 17815  0033C0                     l12749:
 17816                           
 17817                           ; BSR set to: 0
 17818                           ;ECAN.c: 748: *ptr++ = *data++;
 17819  0033C0  C06E  FFD9         	movff	ECANSendMessage@data,fsr2l
 17820  0033C4  C06F  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 17821  0033C8  C08D  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 17822  0033CC  C08E  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 17823  0033D0  CFDF FFE7          	movff	indf2,indf1
 17824                           
 17825                           ; BSR set to: 0
 17826  0033D4  4B6E               	infsnz	ECANSendMessage@data& (0+255),f,b
 17827  0033D6  2B6F               	incf	(ECANSendMessage@data+1)& (0+255),f,b
 17828                           
 17829                           ; BSR set to: 0
 17830  0033D8  4B8D               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 17831  0033DA  2B8E               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 17832                           
 17833                           ; BSR set to: 0
 17834  0033DC  2B87               	incf	ECANSendMessage@j& (0+255),f,b
 17835  0033DE                     l12757:
 17836                           
 17837                           ; BSR set to: 0
 17838  0033DE  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 17839  0033E0  5D87               	subwf	ECANSendMessage@j& (0+255),w,b
 17840  0033E2  E3EE               	bnc	l12749
 17841                           
 17842                           ; BSR set to: 0
 17843                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 17844  0033E4  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 17845  0033E8  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 17846  0033EC  50DF               	movf	indf2,w,c
 17847  0033EE  6F72               	movwf	??_ECANSendMessage& (0+255),b
 17848  0033F0  B572               	btfsc	??_ECANSendMessage& (0+255),2,b
 17849  0033F2  D006               	goto	l12763
 17850                           
 17851                           ; BSR set to: 0
 17852                           ;ECAN.c: 753: *tempPtr |= 0x08;
 17853  0033F4  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 17854  0033F8  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 17855  0033FC  0E00               	movlw	0
 17856  0033FE  86DB               	bsf	plusw2,3,c
 17857  003400                     l12763:
 17858                           
 17859                           ; BSR set to: 0
 17860                           ;ECAN.c: 755: return TRUE;
 17861  003400  0E01               	movlw	1
 17862  003402  D005               	goto	l1434
 17863  003404                     l12767:
 17864                           
 17865                           ; BSR set to: 0
 17866  003404  2B8C               	incf	ECANSendMessage@i& (0+255),f,b
 17867  003406                     l12769:
 17868                           
 17869                           ; BSR set to: 0
 17870  003406  5186               	movf	ECANSendMessage@buffers& (0+255),w,b
 17871  003408  5D8C               	subwf	ECANSendMessage@i& (0+255),w,b
 17872  00340A  E380               	bnc	l12715
 17873                           
 17874                           ; BSR set to: 0
 17875                           ;ECAN.c: 756: }
 17876                           ;ECAN.c: 757: }
 17877                           ;ECAN.c: 760: return FALSE;
 17878  00340C  0E00               	movlw	0
 17879  00340E                     l1434:
 17880                           
 17881                           ; BSR set to: 0
 17882  00340E  0012               	return	
 17883  003410                     __end_of_ECANSendMessage:
 17884                           	opt stack 0
 17885                           tblptru	equ	0xFF8
 17886                           tblptrh	equ	0xFF7
 17887                           tblptrl	equ	0xFF6
 17888                           tablat	equ	0xFF5
 17889                           prodh	equ	0xFF4
 17890                           prodl	equ	0xFF3
 17891                           intcon	equ	0xFF2
 17892                           indf0	equ	0xFEF
 17893                           postinc0	equ	0xFEE
 17894                           fsr0h	equ	0xFEA
 17895                           fsr0l	equ	0xFE9
 17896                           wreg	equ	0xFE8
 17897                           indf1	equ	0xFE7
 17898                           postinc1	equ	0xFE6
 17899                           postdec1	equ	0xFE5
 17900                           fsr1h	equ	0xFE2
 17901                           fsr1l	equ	0xFE1
 17902                           indf2	equ	0xFDF
 17903                           postinc2	equ	0xFDE
 17904                           postdec2	equ	0xFDD
 17905                           plusw2	equ	0xFDB
 17906                           fsr2h	equ	0xFDA
 17907                           fsr2l	equ	0xFD9
 17908                           status	equ	0xFD8
 17909                           
 17910 ;; *************** function __CANIDToRegs *****************
 17911 ;; Defined at:
 17912 ;;		line 1101 in file "ECAN.c"
 17913 ;; Parameters:    Size  Location     Type
 17914 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 17915 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17916 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17917 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 17918 ;;  val             4    2[BANK0 ] unsigned long 
 17919 ;;  type            1    6[BANK0 ] unsigned char 
 17920 ;; Auto vars:     Size  Location     Type
 17921 ;;  Value           1    9[BANK0 ] PTR struct _CAN_MESSAGE_
 17922 ;;		 -> _CANIDToRegs@val(4), 
 17923 ;; Return value:  Size  Location     Type
 17924 ;;		None               void
 17925 ;; Registers used:
 17926 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17927 ;; Tracked objects:
 17928 ;;		On entry : F/0
 17929 ;;		On exit  : F/0
 17930 ;;		Unchanged: 0/0
 17931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17932 ;;      Params:         0       7       0       0       0       0       0
 17933 ;;      Locals:         0       1       0       0       0       0       0
 17934 ;;      Temps:          0       2       0       0       0       0       0
 17935 ;;      Totals:         0      10       0       0       0       0       0
 17936 ;;Total ram usage:       10 bytes
 17937 ;; Hardware stack levels used:    1
 17938 ;; Hardware stack levels required when called:    3
 17939 ;; This function calls:
 17940 ;;		Nothing
 17941 ;; This function is called by:
 17942 ;;		_doModeVerbose
 17943 ;;		_ECANSendMessage
 17944 ;; This function uses a non-reentrant model
 17945 ;;
 17946                           
 17947                           	psect	text37
 17948  0038F2                     __ptext37:
 17949                           	opt stack 0
 17950  0038F2                     __CANIDToRegs:
 17951                           	opt stack 24
 17952                           
 17953                           ; BSR set to: 0
 17954                           ;ECAN.c: 1102: CAN_MESSAGE_ID *Value;
 17955                           ;ECAN.c: 1104: Value = (CAN_MESSAGE_ID*)&val;
 17956                           
 17957                           ; BSR set to: 0
 17958                           ;incstack = 0
 17959                           ;incstack = 0
 17960  0038F2  0E62               	movlw	low __CANIDToRegs@val
 17961  0038F4  6F69               	movwf	__CANIDToRegs@Value& (0+255),b
 17962                           
 17963                           ; BSR set to: 0
 17964                           ;ECAN.c: 1106: if ( type == 0 )
 17965  0038F6  6766               	tstfsz	__CANIDToRegs@type& (0+255),b
 17966  0038F8  D022               	goto	l12095
 17967                           
 17968                           ; BSR set to: 0
 17969                           ;ECAN.c: 1107: {
 17970                           ;ECAN.c: 1109: *ptr = Value->BYTES.BYTE_1 >> 3;
 17971  0038FA  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 17972  0038FC  6ED9               	movwf	fsr2l,c
 17973  0038FE  6ADA               	clrf	fsr2h,c
 17974  003900  50DF               	movf	indf2,w,c
 17975  003902  6F67               	movwf	??__CANIDToRegs& (0+255),b
 17976  003904  90D8               	bcf	status,0,c
 17977  003906  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 17978  003908  90D8               	bcf	status,0,c
 17979  00390A  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 17980  00390C  90D8               	bcf	status,0,c
 17981  00390E  3167               	rrcf	??__CANIDToRegs& (0+255),w,b
 17982                           
 17983                           ;ECAN.c: 1110: *ptr |= (Value->BYTES.BYTE_2 << 5);
 17984  003910  D862               	call	PL54	;call to abstracted procedure
 17985  003912  2AD9               	incf	fsr2l,f,c
 17986  003914  6ADA               	clrf	fsr2h,c
 17987  003916  D872               	call	PL110	;call to abstracted procedure
 17988  003918                     u15365:
 17989  003918  90D8               	bcf	status,0,c
 17990  00391A  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 17991  00391C  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 17992  00391E  D7FC               	goto	u15365
 17993  003920  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17994                           
 17995                           ; BSR set to: 0
 17996                           ;ECAN.c: 1111: ptr++;
 17997                           
 17998                           ; BSR set to: 0
 17999                           ;ECAN.c: 1112: *ptr = Value->BYTES.BYTE_1 << 5;
 18000  003924  D846               	call	PL32	;call to abstracted procedure
 18001  003926  D86A               	call	PL110	;call to abstracted procedure
 18002  003928                     u15375:
 18003  003928  90D8               	bcf	status,0,c
 18004  00392A  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18005  00392C  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 18006  00392E  D7FC               	goto	u15375
 18007  003930  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18008  003932  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18009  003936  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18010  00393A  6EDF               	movwf	indf2,c
 18011                           
 18012                           ;ECAN.c: 1113: }
 18013  00393C  D039               	goto	l1488
 18014  00393E                     l12095:
 18015                           
 18016                           ; BSR set to: 0
 18017                           ;ECAN.c: 1114: else
 18018                           ;ECAN.c: 1115: {
 18019                           ;ECAN.c: 1117: *ptr = Value->BYTES.BYTE_3 >> 5;
 18020  00393E  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18021  003940  D842               	call	PL52	;call to abstracted procedure
 18022  003942  0E05               	movlw	5
 18023  003944  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 18024  003946                     u15385:
 18025  003946  90D8               	bcf	status,0,c
 18026  003948  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 18027  00394A  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 18028  00394C  D7FC               	goto	u15385
 18029  00394E  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18030                           
 18031                           ;ECAN.c: 1118: *ptr |= Value->BYTES.BYTE_4 << 3;
 18032  003950  D842               	call	PL54	;call to abstracted procedure
 18033  003952  0E03               	movlw	3
 18034  003954  D849               	call	PL78	;call to abstracted procedure
 18035  003956  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18036  003958  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18037                           
 18038                           ; BSR set to: 0
 18039                           ;ECAN.c: 1119: ptr++;
 18040                           
 18041                           ; BSR set to: 0
 18042                           ;ECAN.c: 1120: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 18043  00395C  D82A               	call	PL32	;call to abstracted procedure
 18044  00395E  0E02               	movlw	2
 18045  003960  D843               	call	PL78	;call to abstracted procedure
 18046  003962  3567               	rlcf	??__CANIDToRegs& (0+255),w,b
 18047  003964  0BE0               	andlw	224
 18048  003966  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18049  00396A  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18050  00396E  6EDF               	movwf	indf2,c
 18051                           
 18052                           ; BSR set to: 0
 18053                           ;ECAN.c: 1122: *ptr |= 0b00001000;
 18054  003970  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18055  003974  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18056  003978  0E00               	movlw	0
 18057  00397A  86DB               	bsf	plusw2,3,c
 18058                           
 18059                           ; BSR set to: 0
 18060                           ;ECAN.c: 1123: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 18061  00397C  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18062  00397E  D823               	call	PL52	;call to abstracted procedure
 18063  003980  0E03               	movlw	3
 18064  003982  1767               	andwf	??__CANIDToRegs& (0+255),f,b
 18065  003984  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18066                           
 18067                           ;ECAN.c: 1124: ptr++;
 18068                           
 18069                           ; BSR set to: 0
 18070                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_2;
 18071  003988  D814               	call	PL32	;call to abstracted procedure
 18072  00398A  2AD9               	incf	fsr2l,f,c
 18073  00398C  6ADA               	clrf	fsr2h,c
 18074  00398E  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18075  003992  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18076  003996  CFDF FFE7          	movff	indf2,indf1
 18077                           
 18078                           ; BSR set to: 0
 18079                           ;ECAN.c: 1126: ptr++;
 18080  00399A  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 18081  00399C  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 18082                           
 18083                           ; BSR set to: 0
 18084                           ;ECAN.c: 1127: *ptr = Value->BYTES.BYTE_1;
 18085  00399E  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18086  0039A0  6ED9               	movwf	fsr2l,c
 18087  0039A2  6ADA               	clrf	fsr2h,c
 18088  0039A4  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18089  0039A8  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18090  0039AC  CFDF FFE7          	movff	indf2,indf1
 18091  0039B0                     l1488:
 18092                           
 18093                           ; BSR set to: 0
 18094  0039B0  0012               	return	
 18095  0039B2                     __end_of__CANIDToRegs:
 18096                           	opt stack 0
 18097  0039B2                     PL32:
 18098                           	opt stack 24
 18099  0039B2  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18100  0039B6  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18101  0039B8  12DF               	iorwf	indf2,f,c
 18102  0039BA  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 18103  0039BC  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 18104  0039BE  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18105  0039C0  6ED9               	movwf	fsr2l,c
 18106  0039C2  6ADA               	clrf	fsr2h,c
 18107  0039C4  0012               	return	
 18108  0039C6                     __end_ofPL32:
 18109                           	opt stack 0
 18110  0039C6                     PL52:
 18111                           	opt stack 24
 18112  0039C6  6ED9               	movwf	fsr2l,c
 18113  0039C8  6ADA               	clrf	fsr2h,c
 18114  0039CA  0E02               	movlw	2
 18115  0039CC  26D9               	addwf	fsr2l,f,c
 18116  0039CE  6ADA               	clrf	fsr2h,c
 18117  0039D0  50DF               	movf	indf2,w,c
 18118  0039D2  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18119  0039D4  0012               	return	
 18120  0039D6                     __end_ofPL52:
 18121                           	opt stack 0
 18122  0039D6                     PL54:
 18123                           	opt stack 24
 18124  0039D6  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18125  0039DA  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18126  0039DE  6EDF               	movwf	indf2,c
 18127  0039E0  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18128  0039E2  6ED9               	movwf	fsr2l,c
 18129  0039E4  6ADA               	clrf	fsr2h,c
 18130  0039E6  0012               	return	
 18131  0039E8                     __end_ofPL54:
 18132                           	opt stack 0
 18133  0039E8                     PL78:
 18134                           	opt stack 24
 18135  0039E8  26D9               	addwf	fsr2l,f,c
 18136  0039EA  6ADA               	clrf	fsr2h,c
 18137  0039EC  50DF               	movf	indf2,w,c
 18138  0039EE  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18139  0039F0  90D8               	bcf	status,0,c
 18140  0039F2  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18141  0039F4  90D8               	bcf	status,0,c
 18142  0039F6  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18143  0039F8  90D8               	bcf	status,0,c
 18144  0039FA  0012               	return	
 18145  0039FC                     __end_ofPL78:
 18146                           	opt stack 0
 18147  0039FC                     PL110:
 18148                           	opt stack 24
 18149  0039FC  50DF               	movf	indf2,w,c
 18150  0039FE  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18151  003A00  0E05               	movlw	5
 18152  003A02  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 18153  003A04  0C05               	retlw	5
 18154  003A06                     __end_ofPL110:
 18155                           	opt stack 0
 18156                           tblptru	equ	0xFF8
 18157                           tblptrh	equ	0xFF7
 18158                           tblptrl	equ	0xFF6
 18159                           tablat	equ	0xFF5
 18160                           prodh	equ	0xFF4
 18161                           prodl	equ	0xFF3
 18162                           intcon	equ	0xFF2
 18163                           indf0	equ	0xFEF
 18164                           postinc0	equ	0xFEE
 18165                           fsr0h	equ	0xFEA
 18166                           fsr0l	equ	0xFE9
 18167                           wreg	equ	0xFE8
 18168                           indf1	equ	0xFE7
 18169                           postinc1	equ	0xFE6
 18170                           postdec1	equ	0xFE5
 18171                           fsr1h	equ	0xFE2
 18172                           fsr1l	equ	0xFE1
 18173                           indf2	equ	0xFDF
 18174                           postinc2	equ	0xFDE
 18175                           postdec2	equ	0xFDD
 18176                           plusw2	equ	0xFDB
 18177                           fsr2h	equ	0xFDA
 18178                           fsr2l	equ	0xFD9
 18179                           status	equ	0xFD8
 18180                           
 18181 ;; *************** function _memset *****************
 18182 ;; Defined at:
 18183 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 18184 ;; Parameters:    Size  Location     Type
 18185 ;;  p1              2    0[BANK0 ] PTR void 
 18186 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18187 ;;  c               2    2[BANK0 ] int 
 18188 ;;  n               2    4[BANK0 ] unsigned int 
 18189 ;; Auto vars:     Size  Location     Type
 18190 ;;  p               2    6[BANK0 ] PTR unsigned char 
 18191 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18192 ;; Return value:  Size  Location     Type
 18193 ;;                  2    0[BANK0 ] PTR void 
 18194 ;; Registers used:
 18195 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18196 ;; Tracked objects:
 18197 ;;		On entry : F/0
 18198 ;;		On exit  : F/0
 18199 ;;		Unchanged: 0/0
 18200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18201 ;;      Params:         0       6       0       0       0       0       0
 18202 ;;      Locals:         0       2       0       0       0       0       0
 18203 ;;      Temps:          0       0       0       0       0       0       0
 18204 ;;      Totals:         0       8       0       0       0       0       0
 18205 ;;Total ram usage:        8 bytes
 18206 ;; Hardware stack levels used:    1
 18207 ;; Hardware stack levels required when called:    3
 18208 ;; This function calls:
 18209 ;;		Nothing
 18210 ;; This function is called by:
 18211 ;;		_doModeVerbose
 18212 ;;		_doModeSLCAN
 18213 ;;		_printGUID
 18214 ;;		_printMDF
 18215 ;;		_printNodeFirmwareVersion
 18216 ;; This function uses a non-reentrant model
 18217 ;;
 18218                           
 18219                           	psect	text38
 18220  0056AA                     __ptext38:
 18221                           	opt stack 0
 18222  0056AA                     _memset:
 18223                           	opt stack 26
 18224                           
 18225                           ; BSR set to: 0
 18226                           
 18227                           ; BSR set to: 0
 18228                           ;incstack = 0
 18229                           ;incstack = 0
 18230  0056AA  C060  F066         	movff	memset@p1,memset@p
 18231  0056AE  C061  F067         	movff	memset@p1+1,memset@p+1
 18232  0056B2  D008               	goto	l11297
 18233  0056B4                     l11293:
 18234                           
 18235                           ; BSR set to: 0
 18236  0056B4  C066  FFD9         	movff	memset@p,fsr2l
 18237  0056B8  C067  FFDA         	movff	memset@p+1,fsr2h
 18238  0056BC  C062  FFDF         	movff	memset@c,indf2
 18239                           
 18240                           ; BSR set to: 0
 18241  0056C0  4B66               	infsnz	memset@p& (0+255),f,b
 18242  0056C2  2B67               	incf	(memset@p+1)& (0+255),f,b
 18243  0056C4                     l11297:
 18244                           
 18245                           ; BSR set to: 0
 18246  0056C4  0764               	decf	memset@n& (0+255),f,b
 18247  0056C6  A0D8               	btfss	status,0,c
 18248  0056C8  0765               	decf	(memset@n+1)& (0+255),f,b
 18249  0056CA  0100               	movlb	0	; () banked
 18250  0056CC  2964               	incf	memset@n& (0+255),w,b
 18251  0056CE  B4D8               	btfsc	status,2,c
 18252  0056D0  2965               	incf	(memset@n+1)& (0+255),w,b
 18253  0056D2  B4D8               	btfsc	status,2,c
 18254                           
 18255                           ; BSR set to: 0
 18256  0056D4  0012               	return	
 18257  0056D6  D7EE               	goto	l11293
 18258  0056D8                     __end_of_memset:
 18259                           	opt stack 0
 18260                           tblptru	equ	0xFF8
 18261                           tblptrh	equ	0xFF7
 18262                           tblptrl	equ	0xFF6
 18263                           tablat	equ	0xFF5
 18264                           prodh	equ	0xFF4
 18265                           prodl	equ	0xFF3
 18266                           intcon	equ	0xFF2
 18267                           indf0	equ	0xFEF
 18268                           postinc0	equ	0xFEE
 18269                           fsr0h	equ	0xFEA
 18270                           fsr0l	equ	0xFE9
 18271                           wreg	equ	0xFE8
 18272                           indf1	equ	0xFE7
 18273                           postinc1	equ	0xFE6
 18274                           postdec1	equ	0xFE5
 18275                           fsr1h	equ	0xFE2
 18276                           fsr1l	equ	0xFE1
 18277                           indf2	equ	0xFDF
 18278                           postinc2	equ	0xFDE
 18279                           postdec2	equ	0xFDD
 18280                           plusw2	equ	0xFDB
 18281                           fsr2h	equ	0xFDA
 18282                           fsr2l	equ	0xFD9
 18283                           status	equ	0xFD8
 18284                           
 18285 ;; *************** function _printHelp *****************
 18286 ;; Defined at:
 18287 ;;		line 2536 in file "main.c"
 18288 ;; Parameters:    Size  Location     Type
 18289 ;;		None
 18290 ;; Auto vars:     Size  Location     Type
 18291 ;;		None
 18292 ;; Return value:  Size  Location     Type
 18293 ;;		None               void
 18294 ;; Registers used:
 18295 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18296 ;; Tracked objects:
 18297 ;;		On entry : F/1
 18298 ;;		On exit  : 0/0
 18299 ;;		Unchanged: 0/0
 18300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18301 ;;      Params:         0       0       0       0       0       0       0
 18302 ;;      Locals:         0       0       0       0       0       0       0
 18303 ;;      Temps:          0       0       0       0       0       0       0
 18304 ;;      Totals:         0       0       0       0       0       0       0
 18305 ;;Total ram usage:        0 bytes
 18306 ;; Hardware stack levels used:    1
 18307 ;; Hardware stack levels required when called:    5
 18308 ;; This function calls:
 18309 ;;		_putsUSART
 18310 ;; This function is called by:
 18311 ;;		_doModeVerbose
 18312 ;; This function uses a non-reentrant model
 18313 ;;
 18314                           
 18315                           	psect	text39
 18316  002A7C                     __ptext39:
 18317                           	opt stack 0
 18318  002A7C                     _printHelp:
 18319                           	opt stack 24
 18320                           
 18321                           ; BSR set to: 1
 18322                           ;main.c: 2537: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 18323                           
 18324                           ; BSR set to: 0
 18325                           ;incstack = 0
 18326                           ;incstack = 0
 18327  002A7C  0E78               	movlw	high STR_206
 18328  002A7E  0100               	movlb	0	; () banked
 18329  002A80  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18330  002A82  0E48               	movlw	low STR_206
 18331  002A84  6F61               	movwf	?_putsUSART& (0+255),b
 18332  002A86  ECF6  F028         	call	_putsUSART	;wreg free
 18333                           
 18334                           ;main.c: 2538: putsUSART((char *) "------------------------------------\r\n");
 18335  002A8A  0E71               	movlw	high (STR_238+28)
 18336  002A8C  0100               	movlb	0	; () banked
 18337  002A8E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18338  002A90  0E6F               	movlw	low (STR_238+28)
 18339  002A92  6F61               	movwf	?_putsUSART& (0+255),b
 18340  002A94  ECF6  F028         	call	_putsUSART	;wreg free
 18341                           
 18342                           ;main.c: 2539: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 18343  002A98  0E7B               	movlw	high STR_208
 18344  002A9A  0100               	movlb	0	; () banked
 18345  002A9C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18346  002A9E  0E63               	movlw	low STR_208
 18347  002AA0  6F61               	movwf	?_putsUSART& (0+255),b
 18348  002AA2  ECF6  F028         	call	_putsUSART	;wreg free
 18349                           
 18350                           ;main.c: 2540: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 18351  002AA6  0E76               	movlw	high STR_209
 18352  002AA8  0100               	movlb	0	; () banked
 18353  002AAA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18354  002AAC  0ED7               	movlw	low STR_209
 18355  002AAE  6F61               	movwf	?_putsUSART& (0+255),b
 18356  002AB0  ECF6  F028         	call	_putsUSART	;wreg free
 18357                           
 18358                           ;main.c: 2541: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 18359  002AB4  0E76               	movlw	high STR_210
 18360  002AB6  0100               	movlb	0	; () banked
 18361  002AB8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18362  002ABA  0E7D               	movlw	low STR_210
 18363  002ABC  6F61               	movwf	?_putsUSART& (0+255),b
 18364  002ABE  ECF6  F028         	call	_putsUSART	;wreg free
 18365                           
 18366                           ;main.c: 2542: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 18367  002AC2  0E74               	movlw	high STR_211
 18368  002AC4  0100               	movlb	0	; () banked
 18369  002AC6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18370  002AC8  0EF6               	movlw	low STR_211
 18371  002ACA  6F61               	movwf	?_putsUSART& (0+255),b
 18372  002ACC  ECF6  F028         	call	_putsUSART	;wreg free
 18373                           
 18374                           ;main.c: 2543: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 18375  002AD0  0E75               	movlw	high STR_212
 18376  002AD2  0100               	movlb	0	; () banked
 18377  002AD4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18378  002AD6  0E5B               	movlw	low STR_212
 18379  002AD8  6F61               	movwf	?_putsUSART& (0+255),b
 18380  002ADA  ECF6  F028         	call	_putsUSART	;wreg free
 18381                           
 18382                           ;main.c: 2544: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 18383  002ADE  0E7B               	movlw	high STR_213
 18384  002AE0  0100               	movlb	0	; () banked
 18385  002AE2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18386  002AE4  0E0B               	movlw	low STR_213
 18387  002AE6  6F61               	movwf	?_putsUSART& (0+255),b
 18388  002AE8  ECF6  F028         	call	_putsUSART	;wreg free
 18389                           
 18390                           ;main.c: 2545: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 18391  002AEC  0E75               	movlw	high STR_214
 18392  002AEE  0100               	movlb	0	; () banked
 18393  002AF0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18394  002AF2  0E8D               	movlw	low STR_214
 18395  002AF4  6F61               	movwf	?_putsUSART& (0+255),b
 18396  002AF6  ECF6  F028         	call	_putsUSART	;wreg free
 18397                           
 18398                           ;main.c: 2546: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 18399  002AFA  0E76               	movlw	high STR_215
 18400  002AFC  0100               	movlb	0	; () banked
 18401  002AFE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18402  002B00  0EAB               	movlw	low STR_215
 18403  002B02  6F61               	movwf	?_putsUSART& (0+255),b
 18404  002B04  ECF6  F028         	call	_putsUSART	;wreg free
 18405                           
 18406                           ;main.c: 2547: putsUSART((char *) "TX - Send CAN frame .\r\n");
 18407  002B08  0E7C               	movlw	high STR_216
 18408  002B0A  0100               	movlb	0	; () banked
 18409  002B0C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18410  002B0E  0E00               	movlw	low STR_216
 18411  002B10  6F61               	movwf	?_putsUSART& (0+255),b
 18412  002B12  ECF6  F028         	call	_putsUSART	;wreg free
 18413                           
 18414                           ;main.c: 2548: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 18415  002B16  0E73               	movlw	high STR_217
 18416  002B18  0100               	movlb	0	; () banked
 18417  002B1A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18418  002B1C  0E0F               	movlw	low STR_217
 18419  002B1E  6F61               	movwf	?_putsUSART& (0+255),b
 18420  002B20  ECF6  F028         	call	_putsUSART	;wreg free
 18421                           
 18422                           ;main.c: 2549: putsUSART((char *) "RX - Read CAN frame.\r\n");
 18423  002B24  0E7C               	movlw	high STR_218
 18424  002B26  0100               	movlb	0	; () banked
 18425  002B28  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18426  002B2A  0EC0               	movlw	low STR_218
 18427  002B2C  6F61               	movwf	?_putsUSART& (0+255),b
 18428  002B2E  ECF6  F028         	call	_putsUSART	;wreg free
 18429                           
 18430                           ;main.c: 2550: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 18431  002B32  0E7A               	movlw	high STR_219
 18432  002B34  0100               	movlb	0	; () banked
 18433  002B36  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18434  002B38  0E27               	movlw	low STR_219
 18435  002B3A  6F61               	movwf	?_putsUSART& (0+255),b
 18436  002B3C  ECF6  F028         	call	_putsUSART	;wreg free
 18437                           
 18438                           ;main.c: 2551: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 18439  002B40  0E78               	movlw	high STR_220
 18440  002B42  0100               	movlb	0	; () banked
 18441  002B44  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18442  002B46  0E21               	movlw	low STR_220
 18443  002B48  6F61               	movwf	?_putsUSART& (0+255),b
 18444  002B4A  ECF6  F028         	call	_putsUSART	;wreg free
 18445                           
 18446                           ;main.c: 2552: putsUSART((char *) "HELP - Display this help information.\r\n");
 18447  002B4E  0E77               	movlw	high STR_221
 18448  002B50  0100               	movlb	0	; () banked
 18449  002B52  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18450  002B54  0E82               	movlw	low STR_221
 18451  002B56  6F61               	movwf	?_putsUSART& (0+255),b
 18452  002B58  ECF6  F028         	call	_putsUSART	;wreg free
 18453                           
 18454                           ;main.c: 2553: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 18455  002B5C  0E76               	movlw	high STR_222
 18456  002B5E  0100               	movlb	0	; () banked
 18457  002B60  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18458  002B62  0E4E               	movlw	low STR_222
 18459  002B64  6F61               	movwf	?_putsUSART& (0+255),b
 18460  002B66  ECF6  F028         	call	_putsUSART	;wreg free
 18461                           
 18462                           ;main.c: 2554: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg [page:]
      +                          reg [count]).\r\n");
 18463  002B6A  0E71               	movlw	high STR_223
 18464  002B6C  0100               	movlb	0	; () banked
 18465  002B6E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18466  002B70  0E0E               	movlw	low STR_223
 18467  002B72  6F61               	movwf	?_putsUSART& (0+255),b
 18468  002B74  ECF6  F028         	call	_putsUSART	;wreg free
 18469                           
 18470                           ;main.c: 2555: putsUSART((char *) "WREG - Write register of node (Format: wreg [page:]re
      +                          g content).\r\n");
 18471  002B78  0E71               	movlw	high STR_224
 18472  002B7A  0100               	movlb	0	; () banked
 18473  002B7C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18474  002B7E  0ED9               	movlw	low STR_224
 18475  002B80  6F61               	movwf	?_putsUSART& (0+255),b
 18476  002B82  ECF6  F028         	call	_putsUSART	;wreg free
 18477                           
 18478                           ;main.c: 2556: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 18479  002B86  0E70               	movlw	high STR_225
 18480  002B88  0100               	movlb	0	; () banked
 18481  002B8A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18482  002B8C  0E7A               	movlw	low STR_225
 18483  002B8E  6F61               	movwf	?_putsUSART& (0+255),b
 18484  002B90  ECF6  F028         	call	_putsUSART	;wreg free
 18485                           
 18486                           ;main.c: 2557: putsUSART((char *) "FILTER - Set filter .\r\n");
 18487  002B94  0E7C               	movlw	high STR_226
 18488  002B96  0100               	movlb	0	; () banked
 18489  002B98  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18490  002B9A  0E18               	movlw	low STR_226
 18491  002B9C  6F61               	movwf	?_putsUSART& (0+255),b
 18492  002B9E  ECF6  F028         	call	_putsUSART	;wreg free
 18493                           
 18494                           ;main.c: 2558: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 18495  002BA2  0E70               	movlw	high STR_227
 18496  002BA4  0100               	movlb	0	; () banked
 18497  002BA6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18498  002BA8  0E2C               	movlw	low STR_227
 18499  002BAA  6F61               	movwf	?_putsUSART& (0+255),b
 18500  002BAC  ECF6  F028         	call	_putsUSART	;wreg free
 18501                           
 18502                           ;main.c: 2559: putsUSART((char *) "MASK - Set mask .\r\n");
 18503  002BB0  0E7D               	movlw	high STR_228
 18504  002BB2  0100               	movlb	0	; () banked
 18505  002BB4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18506  002BB6  0E46               	movlw	low STR_228
 18507  002BB8  6F61               	movwf	?_putsUSART& (0+255),b
 18508  002BBA  ECF6  F028         	call	_putsUSART	;wreg free
 18509                           
 18510                           ;main.c: 2560: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 18511  002BBE  0E70               	movlw	high STR_229
 18512  002BC0  0100               	movlb	0	; () banked
 18513  002BC2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18514  002BC4  0EC7               	movlw	low STR_229
 18515  002BC6  6F61               	movwf	?_putsUSART& (0+255),b
 18516  002BC8  ECF6  F028         	call	_putsUSART	;wreg free
 18517                           
 18518                           ;main.c: 2561: putsUSART((char *) "SET - Persistent functionality.\r\n");
 18519  002BCC  0E79               	movlw	high STR_230
 18520  002BCE  0100               	movlb	0	; () banked
 18521  002BD0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18522  002BD2  0EE3               	movlw	low STR_230
 18523  002BD4  6F61               	movwf	?_putsUSART& (0+255),b
 18524  002BD6  ECF6  F028         	call	_putsUSART	;wreg free
 18525                           
 18526                           ;main.c: 2562: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 18527  002BDA  0E76               	movlw	high STR_231
 18528  002BDC  0100               	movlb	0	; () banked
 18529  002BDE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18530  002BE0  0E1F               	movlw	low STR_231
 18531  002BE2  6F61               	movwf	?_putsUSART& (0+255),b
 18532  002BE4  ECF6  F028         	call	_putsUSART	;wreg free
 18533                           
 18534                           ;main.c: 2563: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 18535  002BE8  0E75               	movlw	high STR_232
 18536  002BEA  0100               	movlb	0	; () banked
 18537  002BEC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18538  002BEE  0EF0               	movlw	low STR_232
 18539  002BF0  6F61               	movwf	?_putsUSART& (0+255),b
 18540  002BF2  ECF6  F028         	call	_putsUSART	;wreg free
 18541                           
 18542                           ;main.c: 2564: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=10 ms .\r\n");
 18543  002BF6  0E71               	movlw	high STR_233
 18544  002BF8  0100               	movlb	0	; () banked
 18545  002BFA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18546  002BFC  0E96               	movlw	low STR_233
 18547  002BFE  6F61               	movwf	?_putsUSART& (0+255),b
 18548  002C00  ECF6  F028         	call	_putsUSART	;wreg free
 18549                           
 18550                           ;main.c: 2565: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 18551  002C04  0E75               	movlw	high STR_234
 18552  002C06  0100               	movlb	0	; () banked
 18553  002C08  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18554  002C0A  0EBF               	movlw	low STR_234
 18555  002C0C  6F61               	movwf	?_putsUSART& (0+255),b
 18556  002C0E  ECF6  F028         	call	_putsUSART	;wreg free
 18557                           
 18558                           ;main.c: 2566: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 18559  002C12  0E73               	movlw	high STR_235
 18560  002C14  0100               	movlb	0	; () banked
 18561  002C16  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18562  002C18  0E7E               	movlw	low STR_235
 18563  002C1A  6F61               	movwf	?_putsUSART& (0+255),b
 18564  002C1C  ECF6  F028         	call	_putsUSART	;wreg free
 18565                           
 18566                           ;main.c: 2567: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 18567  002C20  0E72               	movlw	high STR_236
 18568  002C22  0100               	movlb	0	; () banked
 18569  002C24  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18570  002C26  0E5E               	movlw	low STR_236
 18571  002C28  6F61               	movwf	?_putsUSART& (0+255),b
 18572  002C2A  ECF6  F028         	call	_putsUSART	;wreg free
 18573                           
 18574                           ;main.c: 2568: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 18575  002C2E  0E78               	movlw	high STR_237
 18576  002C30  0100               	movlb	0	; () banked
 18577  002C32  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18578  002C34  0EBD               	movlw	low STR_237
 18579  002C36  6F61               	movwf	?_putsUSART& (0+255),b
 18580  002C38  EFF6  F028         	goto	_putsUSART	;wreg free
 18581  002C3C                     __end_of_printHelp:
 18582                           	opt stack 0
 18583                           tblptru	equ	0xFF8
 18584                           tblptrh	equ	0xFF7
 18585                           tblptrl	equ	0xFF6
 18586                           tablat	equ	0xFF5
 18587                           prodh	equ	0xFF4
 18588                           prodl	equ	0xFF3
 18589                           intcon	equ	0xFF2
 18590                           indf0	equ	0xFEF
 18591                           postinc0	equ	0xFEE
 18592                           fsr0h	equ	0xFEA
 18593                           fsr0l	equ	0xFE9
 18594                           wreg	equ	0xFE8
 18595                           indf1	equ	0xFE7
 18596                           postinc1	equ	0xFE6
 18597                           postdec1	equ	0xFE5
 18598                           fsr1h	equ	0xFE2
 18599                           fsr1l	equ	0xFE1
 18600                           indf2	equ	0xFDF
 18601                           postinc2	equ	0xFDE
 18602                           postdec2	equ	0xFDD
 18603                           plusw2	equ	0xFDB
 18604                           fsr2h	equ	0xFDA
 18605                           fsr2l	equ	0xFD9
 18606                           status	equ	0xFD8
 18607                           
 18608 ;; *************** function _printErrors *****************
 18609 ;; Defined at:
 18610 ;;		line 2472 in file "main.c"
 18611 ;; Parameters:    Size  Location     Type
 18612 ;;		None
 18613 ;; Auto vars:     Size  Location     Type
 18614 ;;		None
 18615 ;; Return value:  Size  Location     Type
 18616 ;;		None               void
 18617 ;; Registers used:
 18618 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18619 ;; Tracked objects:
 18620 ;;		On entry : F/1
 18621 ;;		On exit  : 0/0
 18622 ;;		Unchanged: 0/0
 18623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18624 ;;      Params:         0       0       0       0       0       0       0
 18625 ;;      Locals:         0      12       0       0       0       0       0
 18626 ;;      Temps:          0       0       0       0       0       0       0
 18627 ;;      Totals:         0      12       0       0       0       0       0
 18628 ;;Total ram usage:       12 bytes
 18629 ;; Hardware stack levels used:    1
 18630 ;; Hardware stack levels required when called:    5
 18631 ;; This function calls:
 18632 ;;		_putsUSART
 18633 ;;		_sprintf
 18634 ;; This function is called by:
 18635 ;;		_doModeVerbose
 18636 ;; This function uses a non-reentrant model
 18637 ;;
 18638                           
 18639                           	psect	text40
 18640  0020FE                     __ptext40:
 18641                           	opt stack 0
 18642  0020FE                     _printErrors:
 18643                           	opt stack 24
 18644                           
 18645                           ; BSR set to: 1
 18646                           ;main.c: 2473: putsUSART((char *) "CAN Receive overruns: ");
 18647                           
 18648                           ;incstack = 0
 18649                           ;incstack = 0
 18650  0020FE  0E7C               	movlw	high STR_176
 18651  002100  0100               	movlb	0	; () banked
 18652  002102  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18653  002104  0ED7               	movlw	low STR_176
 18654  002106  6F61               	movwf	?_putsUSART& (0+255),b
 18655  002108  ECF6  F028         	call	_putsUSART	;wreg free
 18656                           
 18657                           ;main.c: 2474: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns);
 18658  00210C  0101               	movlb	1	; () banked
 18659  00210E  6700               	tstfsz	_bHex& (0+255),b
 18660  002110  D005               	goto	l11373
 18661                           
 18662                           ; BSR set to: 1
 18663  002112  0E7F               	movlw	high STR_162
 18664  002114  0100               	movlb	0	; () banked
 18665  002116  6F95               	movwf	(_printErrors$1391+1)& (0+255),b
 18666  002118  0EE0               	movlw	low STR_162
 18667  00211A  D004               	goto	L15
 18668  00211C                     l11373:
 18669                           
 18670                           ; BSR set to: 1
 18671  00211C  0E7F               	movlw	high STR_177
 18672  00211E  0100               	movlb	0	; () banked
 18673  002120  6F95               	movwf	(_printErrors$1391+1)& (0+255),b
 18674  002122  0E15               	movlw	low STR_177
 18675  002124                     L15:
 18676  002124  6F94               	movwf	_printErrors$1391& (0+255),b
 18677                           
 18678                           ; BSR set to: 0
 18679  002126  0E01               	movlw	high _wrkbuf
 18680  002128  0100               	movlb	0	; () banked
 18681  00212A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18682  00212C  0E54               	movlw	low _wrkbuf
 18683  00212E  6F76               	movwf	?_sprintf& (0+255),b
 18684  002130  C094  F078         	movff	_printErrors$1391,?_sprintf+2
 18685  002134  C095  F079         	movff	_printErrors$1391+1,?_sprintf+3
 18686  002138  C0D1  F07A         	movff	_can_receiveOverruns,?_sprintf+4
 18687  00213C  C0D2  F07B         	movff	_can_receiveOverruns+1,?_sprintf+5
 18688  002140  C0D3  F07C         	movff	_can_receiveOverruns+2,?_sprintf+6
 18689  002144  C0D4  F07D         	movff	_can_receiveOverruns+3,?_sprintf+7
 18690  002148  EC28  F00B         	call	_sprintf	;wreg free
 18691                           
 18692                           ; BSR set to: 0
 18693                           ;main.c: 2475: putsUSART(wrkbuf);
 18694  00214C  0E01               	movlw	high _wrkbuf
 18695  00214E  0100               	movlb	0	; () banked
 18696  002150  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18697  002152  0E54               	movlw	low _wrkbuf
 18698  002154  6F61               	movwf	?_putsUSART& (0+255),b
 18699  002156  ECF6  F028         	call	_putsUSART	;wreg free
 18700                           
 18701                           ;main.c: 2476: putsUSART((char *) "\r\n");
 18702  00215A  0E74               	movlw	high (STR_197+50)
 18703  00215C  0100               	movlb	0	; () banked
 18704  00215E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18705  002160  0E8A               	movlw	low (STR_197+50)
 18706  002162  6F61               	movwf	?_putsUSART& (0+255),b
 18707  002164  ECF6  F028         	call	_putsUSART	;wreg free
 18708                           
 18709                           ;main.c: 2478: putsUSART((char *) "CAN Transmit overruns: ");
 18710  002168  0E7C               	movlw	high STR_180
 18711  00216A  0100               	movlb	0	; () banked
 18712  00216C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18713  00216E  0EA8               	movlw	low STR_180
 18714  002170  6F61               	movwf	?_putsUSART& (0+255),b
 18715  002172  ECF6  F028         	call	_putsUSART	;wreg free
 18716                           
 18717                           ;main.c: 2479: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns);
 18718  002176  0101               	movlb	1	; () banked
 18719  002178  6700               	tstfsz	_bHex& (0+255),b
 18720  00217A  D005               	goto	l11387
 18721                           
 18722                           ; BSR set to: 1
 18723  00217C  0E7F               	movlw	high STR_162
 18724  00217E  0100               	movlb	0	; () banked
 18725  002180  6F97               	movwf	(_printErrors$1397+1)& (0+255),b
 18726  002182  0EE0               	movlw	low STR_162
 18727  002184  D004               	goto	L16
 18728  002186                     l11387:
 18729                           
 18730                           ; BSR set to: 1
 18731  002186  0E7F               	movlw	high STR_177
 18732  002188  0100               	movlb	0	; () banked
 18733  00218A  6F97               	movwf	(_printErrors$1397+1)& (0+255),b
 18734  00218C  0E15               	movlw	low STR_177
 18735  00218E                     L16:
 18736  00218E  6F96               	movwf	_printErrors$1397& (0+255),b
 18737                           
 18738                           ; BSR set to: 0
 18739  002190  0E01               	movlw	high _wrkbuf
 18740  002192  0100               	movlb	0	; () banked
 18741  002194  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18742  002196  0E54               	movlw	low _wrkbuf
 18743  002198  6F76               	movwf	?_sprintf& (0+255),b
 18744  00219A  C096  F078         	movff	_printErrors$1397,?_sprintf+2
 18745  00219E  C097  F079         	movff	_printErrors$1397+1,?_sprintf+3
 18746  0021A2  C02B  F07A         	movff	_can_transmitOverruns,?_sprintf+4
 18747  0021A6  C02C  F07B         	movff	_can_transmitOverruns+1,?_sprintf+5
 18748  0021AA  C02D  F07C         	movff	_can_transmitOverruns+2,?_sprintf+6
 18749  0021AE  C02E  F07D         	movff	_can_transmitOverruns+3,?_sprintf+7
 18750  0021B2  EC28  F00B         	call	_sprintf	;wreg free
 18751                           
 18752                           ; BSR set to: 0
 18753                           ;main.c: 2480: putsUSART(wrkbuf);
 18754  0021B6  0E01               	movlw	high _wrkbuf
 18755  0021B8  0100               	movlb	0	; () banked
 18756  0021BA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18757  0021BC  0E54               	movlw	low _wrkbuf
 18758  0021BE  6F61               	movwf	?_putsUSART& (0+255),b
 18759  0021C0  ECF6  F028         	call	_putsUSART	;wreg free
 18760                           
 18761                           ;main.c: 2481: putsUSART((char *) "\r\n");
 18762  0021C4  0E74               	movlw	high (STR_197+50)
 18763  0021C6  0100               	movlb	0	; () banked
 18764  0021C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18765  0021CA  0E8A               	movlw	low (STR_197+50)
 18766  0021CC  6F61               	movwf	?_putsUSART& (0+255),b
 18767  0021CE  ECF6  F028         	call	_putsUSART	;wreg free
 18768                           
 18769                           ;main.c: 2483: putsUSART((char *) "UART Receive overruns: ");
 18770  0021D2  0E7C               	movlw	high STR_184
 18771  0021D4  0100               	movlb	0	; () banked
 18772  0021D6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18773  0021D8  0E90               	movlw	low STR_184
 18774  0021DA  6F61               	movwf	?_putsUSART& (0+255),b
 18775  0021DC  ECF6  F028         	call	_putsUSART	;wreg free
 18776                           
 18777                           ;main.c: 2484: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns);
 18778  0021E0  0101               	movlb	1	; () banked
 18779  0021E2  6700               	tstfsz	_bHex& (0+255),b
 18780  0021E4  D005               	goto	l11401
 18781                           
 18782                           ; BSR set to: 1
 18783  0021E6  0E7F               	movlw	high STR_162
 18784  0021E8  0100               	movlb	0	; () banked
 18785  0021EA  6F99               	movwf	(_printErrors$1403+1)& (0+255),b
 18786  0021EC  0EE0               	movlw	low STR_162
 18787  0021EE  D004               	goto	L17
 18788  0021F0                     l11401:
 18789                           
 18790                           ; BSR set to: 1
 18791  0021F0  0E7F               	movlw	high STR_177
 18792  0021F2  0100               	movlb	0	; () banked
 18793  0021F4  6F99               	movwf	(_printErrors$1403+1)& (0+255),b
 18794  0021F6  0E15               	movlw	low STR_177
 18795  0021F8                     L17:
 18796  0021F8  6F98               	movwf	_printErrors$1403& (0+255),b
 18797                           
 18798                           ; BSR set to: 0
 18799  0021FA  0E01               	movlw	high _wrkbuf
 18800  0021FC  0100               	movlb	0	; () banked
 18801  0021FE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18802  002200  0E54               	movlw	low _wrkbuf
 18803  002202  6F76               	movwf	?_sprintf& (0+255),b
 18804  002204  C098  F078         	movff	_printErrors$1403,?_sprintf+2
 18805  002208  C099  F079         	movff	_printErrors$1403+1,?_sprintf+3
 18806  00220C  C02F  F07A         	movff	_uart_receiveOverruns,?_sprintf+4
 18807  002210  C030  F07B         	movff	_uart_receiveOverruns+1,?_sprintf+5
 18808  002214  C031  F07C         	movff	_uart_receiveOverruns+2,?_sprintf+6
 18809  002218  C032  F07D         	movff	_uart_receiveOverruns+3,?_sprintf+7
 18810  00221C  EC28  F00B         	call	_sprintf	;wreg free
 18811                           
 18812                           ; BSR set to: 0
 18813                           ;main.c: 2485: putsUSART(wrkbuf);
 18814  002220  0E01               	movlw	high _wrkbuf
 18815  002222  0100               	movlb	0	; () banked
 18816  002224  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18817  002226  0E54               	movlw	low _wrkbuf
 18818  002228  6F61               	movwf	?_putsUSART& (0+255),b
 18819  00222A  ECF6  F028         	call	_putsUSART	;wreg free
 18820                           
 18821                           ;main.c: 2486: putsUSART((char *) "\r\n");
 18822  00222E  0E74               	movlw	high (STR_197+50)
 18823  002230  0100               	movlb	0	; () banked
 18824  002232  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18825  002234  0E8A               	movlw	low (STR_197+50)
 18826  002236  6F61               	movwf	?_putsUSART& (0+255),b
 18827  002238  ECF6  F028         	call	_putsUSART	;wreg free
 18828                           
 18829                           ;main.c: 2488: putsUSART((char *) "UART Receive overruns: ");
 18830  00223C  0E7C               	movlw	high STR_184
 18831  00223E  0100               	movlb	0	; () banked
 18832  002240  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18833  002242  0E90               	movlw	low STR_184
 18834  002244  6F61               	movwf	?_putsUSART& (0+255),b
 18835  002246  ECF6  F028         	call	_putsUSART	;wreg free
 18836                           
 18837                           ;main.c: 2489: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns);
 18838  00224A  0101               	movlb	1	; () banked
 18839  00224C  6700               	tstfsz	_bHex& (0+255),b
 18840  00224E  D005               	goto	l11415
 18841                           
 18842                           ; BSR set to: 1
 18843  002250  0E7F               	movlw	high STR_162
 18844  002252  0100               	movlb	0	; () banked
 18845  002254  6F9B               	movwf	(_printErrors$1409+1)& (0+255),b
 18846  002256  0EE0               	movlw	low STR_162
 18847  002258  D004               	goto	L18
 18848  00225A                     l11415:
 18849                           
 18850                           ; BSR set to: 1
 18851  00225A  0E7F               	movlw	high STR_177
 18852  00225C  0100               	movlb	0	; () banked
 18853  00225E  6F9B               	movwf	(_printErrors$1409+1)& (0+255),b
 18854  002260  0E15               	movlw	low STR_177
 18855  002262                     L18:
 18856  002262  6F9A               	movwf	_printErrors$1409& (0+255),b
 18857                           
 18858                           ; BSR set to: 0
 18859  002264  0E01               	movlw	high _wrkbuf
 18860  002266  0100               	movlb	0	; () banked
 18861  002268  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18862  00226A  0E54               	movlw	low _wrkbuf
 18863  00226C  6F76               	movwf	?_sprintf& (0+255),b
 18864  00226E  C09A  F078         	movff	_printErrors$1409,?_sprintf+2
 18865  002272  C09B  F079         	movff	_printErrors$1409+1,?_sprintf+3
 18866  002276  C033  F07A         	movff	_uart_transmitOverruns,?_sprintf+4
 18867  00227A  C034  F07B         	movff	_uart_transmitOverruns+1,?_sprintf+5
 18868  00227E  C035  F07C         	movff	_uart_transmitOverruns+2,?_sprintf+6
 18869  002282  C036  F07D         	movff	_uart_transmitOverruns+3,?_sprintf+7
 18870  002286  EC28  F00B         	call	_sprintf	;wreg free
 18871                           
 18872                           ; BSR set to: 0
 18873                           ;main.c: 2490: putsUSART(wrkbuf);
 18874  00228A  0E01               	movlw	high _wrkbuf
 18875  00228C  0100               	movlb	0	; () banked
 18876  00228E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18877  002290  0E54               	movlw	low _wrkbuf
 18878  002292  6F61               	movwf	?_putsUSART& (0+255),b
 18879  002294  ECF6  F028         	call	_putsUSART	;wreg free
 18880                           
 18881                           ;main.c: 2491: putsUSART((char *) "\r\n");
 18882  002298  0E74               	movlw	high (STR_197+50)
 18883  00229A  0100               	movlb	0	; () banked
 18884  00229C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18885  00229E  0E8A               	movlw	low (STR_197+50)
 18886  0022A0  6F61               	movwf	?_putsUSART& (0+255),b
 18887  0022A2  ECF6  F028         	call	_putsUSART	;wreg free
 18888                           
 18889                           ;main.c: 2493: putsUSART((char *) "Transmit Error Counter: ");
 18890  0022A6  0E7B               	movlw	high STR_192
 18891  0022A8  0100               	movlb	0	; () banked
 18892  0022AA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18893  0022AC  0EE7               	movlw	low STR_192
 18894  0022AE  6F61               	movwf	?_putsUSART& (0+255),b
 18895  0022B0  ECF6  F028         	call	_putsUSART	;wreg free
 18896                           
 18897                           ;main.c: 2494: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT);
 18898  0022B4  0101               	movlb	1	; () banked
 18899  0022B6  6700               	tstfsz	_bHex& (0+255),b
 18900  0022B8  D005               	goto	l11429
 18901                           
 18902                           ; BSR set to: 1
 18903  0022BA  0E7F               	movlw	high STR_57
 18904  0022BC  0100               	movlb	0	; () banked
 18905  0022BE  6F9D               	movwf	(_printErrors$1415+1)& (0+255),b
 18906  0022C0  0EED               	movlw	low STR_57
 18907  0022C2  D004               	goto	L19
 18908  0022C4                     l11429:
 18909                           
 18910                           ; BSR set to: 1
 18911  0022C4  0E7F               	movlw	high STR_56
 18912  0022C6  0100               	movlb	0	; () banked
 18913  0022C8  6F9D               	movwf	(_printErrors$1415+1)& (0+255),b
 18914  0022CA  0E64               	movlw	low STR_56
 18915  0022CC                     L19:
 18916  0022CC  6F9C               	movwf	_printErrors$1415& (0+255),b
 18917                           
 18918                           ; BSR set to: 0
 18919  0022CE  0E01               	movlw	high _wrkbuf
 18920  0022D0  0100               	movlb	0	; () banked
 18921  0022D2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18922  0022D4  0E54               	movlw	low _wrkbuf
 18923  0022D6  6F76               	movwf	?_sprintf& (0+255),b
 18924  0022D8  C09C  F078         	movff	_printErrors$1415,?_sprintf+2
 18925  0022DC  C09D  F079         	movff	_printErrors$1415+1,?_sprintf+3
 18926  0022E0  CF76 F07A          	movff	3958,?_sprintf+4	;volatile
 18927  0022E4  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 18928  0022E6  EC28  F00B         	call	_sprintf	;wreg free
 18929                           
 18930                           ; BSR set to: 0
 18931                           ;main.c: 2495: putsUSART(wrkbuf);
 18932  0022EA  0E01               	movlw	high _wrkbuf
 18933  0022EC  0100               	movlb	0	; () banked
 18934  0022EE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18935  0022F0  0E54               	movlw	low _wrkbuf
 18936  0022F2  6F61               	movwf	?_putsUSART& (0+255),b
 18937  0022F4  ECF6  F028         	call	_putsUSART	;wreg free
 18938                           
 18939                           ;main.c: 2496: putsUSART((char *) "\r\n");
 18940  0022F8  0E74               	movlw	high (STR_197+50)
 18941  0022FA  0100               	movlb	0	; () banked
 18942  0022FC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18943  0022FE  0E8A               	movlw	low (STR_197+50)
 18944  002300  6F61               	movwf	?_putsUSART& (0+255),b
 18945  002302  ECF6  F028         	call	_putsUSART	;wreg free
 18946                           
 18947                           ;main.c: 2498: if (COMSTATbits.TXWARN) {
 18948  002306  A474               	btfss	3956,2,c	;volatile
 18949  002308  D007               	goto	l11441
 18950                           
 18951                           ;main.c: 2499: putsUSART((char *) "Transmitter in Error State Warning (128 > TERRCNT ? 9
      +                          6)\r\n");
 18952  00230A  0E72               	movlw	high STR_196
 18953  00230C  0100               	movlb	0	; () banked
 18954  00230E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18955  002310  0E9C               	movlw	low STR_196
 18956  002312  6F61               	movwf	?_putsUSART& (0+255),b
 18957  002314  ECF6  F028         	call	_putsUSART	;wreg free
 18958  002318                     l11441:
 18959                           
 18960                           ;main.c: 2500: }
 18961                           ;main.c: 2502: if (COMSTATbits.TXBO) {
 18962  002318  AA74               	btfss	3956,5,c	;volatile
 18963  00231A  D007               	goto	l11445
 18964                           
 18965                           ;main.c: 2503: putsUSART((char *) "Transmitter in Error State Bus OFF (TERRCNT ? 256)\r\
      +                          n");
 18966  00231C  0E74               	movlw	high STR_197
 18967  00231E  0100               	movlb	0	; () banked
 18968  002320  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18969  002322  0E58               	movlw	low STR_197
 18970  002324  6F61               	movwf	?_putsUSART& (0+255),b
 18971  002326  ECF6  F028         	call	_putsUSART	;wreg free
 18972  00232A                     l11445:
 18973                           
 18974                           ;main.c: 2504: }
 18975                           ;main.c: 2506: if (COMSTATbits.TXBP) {
 18976  00232A  A874               	btfss	3956,4,c	;volatile
 18977  00232C  D007               	goto	l1157
 18978                           
 18979                           ;main.c: 2507: putsUSART((char *) "Transmitter in Error State Bus Passive (TERRCNT ? 128
      +                          )\r\n");
 18980  00232E  0E72               	movlw	high STR_198
 18981  002330  0100               	movlb	0	; () banked
 18982  002332  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18983  002334  0ED6               	movlw	low STR_198
 18984  002336  6F61               	movwf	?_putsUSART& (0+255),b
 18985  002338  ECF6  F028         	call	_putsUSART	;wreg free
 18986  00233C                     l1157:
 18987                           
 18988                           ;main.c: 2508: }
 18989                           ;main.c: 2511: putsUSART((char *) "Receive Error Counter: ");
 18990  00233C  0E7C               	movlw	high STR_199
 18991  00233E  0100               	movlb	0	; () banked
 18992  002340  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18993  002342  0E78               	movlw	low STR_199
 18994  002344  6F61               	movwf	?_putsUSART& (0+255),b
 18995  002346  ECF6  F028         	call	_putsUSART	;wreg free
 18996                           
 18997                           ;main.c: 2512: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT);
 18998  00234A  0101               	movlb	1	; () banked
 18999  00234C  6700               	tstfsz	_bHex& (0+255),b
 19000  00234E  D005               	goto	l11453
 19001                           
 19002                           ; BSR set to: 1
 19003  002350  0E7F               	movlw	high STR_57
 19004  002352  0100               	movlb	0	; () banked
 19005  002354  6F9F               	movwf	(_printErrors$1424+1)& (0+255),b
 19006  002356  0EED               	movlw	low STR_57
 19007  002358  D004               	goto	L20
 19008  00235A                     l11453:
 19009                           
 19010                           ; BSR set to: 1
 19011  00235A  0E7F               	movlw	high STR_56
 19012  00235C  0100               	movlb	0	; () banked
 19013  00235E  6F9F               	movwf	(_printErrors$1424+1)& (0+255),b
 19014  002360  0E64               	movlw	low STR_56
 19015  002362                     L20:
 19016  002362  6F9E               	movwf	_printErrors$1424& (0+255),b
 19017                           
 19018                           ; BSR set to: 0
 19019  002364  0E01               	movlw	high _wrkbuf
 19020  002366  0100               	movlb	0	; () banked
 19021  002368  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19022  00236A  0E54               	movlw	low _wrkbuf
 19023  00236C  6F76               	movwf	?_sprintf& (0+255),b
 19024  00236E  C09E  F078         	movff	_printErrors$1424,?_sprintf+2
 19025  002372  C09F  F079         	movff	_printErrors$1424+1,?_sprintf+3
 19026  002376  CF75 F07A          	movff	3957,?_sprintf+4	;volatile
 19027  00237A  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 19028  00237C  EC28  F00B         	call	_sprintf	;wreg free
 19029                           
 19030                           ; BSR set to: 0
 19031                           ;main.c: 2513: putsUSART(wrkbuf);
 19032  002380  0E01               	movlw	high _wrkbuf
 19033  002382  0100               	movlb	0	; () banked
 19034  002384  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19035  002386  0E54               	movlw	low _wrkbuf
 19036  002388  6F61               	movwf	?_putsUSART& (0+255),b
 19037  00238A  ECF6  F028         	call	_putsUSART	;wreg free
 19038                           
 19039                           ;main.c: 2514: putsUSART((char *) "\r\n");
 19040  00238E  0E74               	movlw	high (STR_197+50)
 19041  002390  0100               	movlb	0	; () banked
 19042  002392  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19043  002394  0E8A               	movlw	low (STR_197+50)
 19044  002396  6F61               	movwf	?_putsUSART& (0+255),b
 19045  002398  ECF6  F028         	call	_putsUSART	;wreg free
 19046                           
 19047                           ;main.c: 2516: if (COMSTATbits.RXWARN) {
 19048  00239C  A274               	btfss	3956,1,c	;volatile
 19049  00239E  D007               	goto	l11465
 19050                           
 19051                           ;main.c: 2517: putsUSART((char *) "Receiver in Error State Warning (128 > RERRCNT ? 96)\
      +                          r\n");
 19052  0023A0  0E73               	movlw	high STR_203
 19053  0023A2  0100               	movlb	0	; () banked
 19054  0023A4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19055  0023A6  0E47               	movlw	low STR_203
 19056  0023A8  6F61               	movwf	?_putsUSART& (0+255),b
 19057  0023AA  ECF6  F028         	call	_putsUSART	;wreg free
 19058  0023AE                     l11465:
 19059                           
 19060                           ;main.c: 2518: }
 19061                           ;main.c: 2520: if (COMSTATbits.RXBP) {
 19062  0023AE  A674               	btfss	3956,3,c	;volatile
 19063  0023B0  D007               	goto	l11469
 19064                           
 19065                           ;main.c: 2521: putsUSART((char *) "Receiver in Error State Bus Passive (RERRCNT ? 128)\r
      +                          \n");
 19066  0023B2  0E73               	movlw	high STR_204
 19067  0023B4  0100               	movlb	0	; () banked
 19068  0023B6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19069  0023B8  0EEC               	movlw	low STR_204
 19070  0023BA  6F61               	movwf	?_putsUSART& (0+255),b
 19071  0023BC  ECF6  F028         	call	_putsUSART	;wreg free
 19072  0023C0                     l11469:
 19073                           
 19074                           ;main.c: 2522: }
 19075                           ;main.c: 2524: if (COMSTATbits.EWARN) {
 19076  0023C0  A074               	btfss	3956,0,c	;volatile
 19077  0023C2  D007               	goto	l1165
 19078                           
 19079                           ;main.c: 2525: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 19080  0023C4  0E74               	movlw	high STR_205
 19081  0023C6  0100               	movlb	0	; () banked
 19082  0023C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19083  0023CA  0EC2               	movlw	low STR_205
 19084  0023CC  6F61               	movwf	?_putsUSART& (0+255),b
 19085  0023CE  ECF6  F028         	call	_putsUSART	;wreg free
 19086  0023D2                     l1165:
 19087  0023D2  0012               	return	
 19088  0023D4                     __end_of_printErrors:
 19089                           	opt stack 0
 19090                           tblptru	equ	0xFF8
 19091                           tblptrh	equ	0xFF7
 19092                           tblptrl	equ	0xFF6
 19093                           tablat	equ	0xFF5
 19094                           prodh	equ	0xFF4
 19095                           prodl	equ	0xFF3
 19096                           intcon	equ	0xFF2
 19097                           indf0	equ	0xFEF
 19098                           postinc0	equ	0xFEE
 19099                           fsr0h	equ	0xFEA
 19100                           fsr0l	equ	0xFE9
 19101                           wreg	equ	0xFE8
 19102                           indf1	equ	0xFE7
 19103                           postinc1	equ	0xFE6
 19104                           postdec1	equ	0xFE5
 19105                           fsr1h	equ	0xFE2
 19106                           fsr1l	equ	0xFE1
 19107                           indf2	equ	0xFDF
 19108                           postinc2	equ	0xFDE
 19109                           postdec2	equ	0xFDD
 19110                           plusw2	equ	0xFDB
 19111                           fsr2h	equ	0xFDA
 19112                           fsr2l	equ	0xFD9
 19113                           status	equ	0xFD8
 19114                           
 19115 ;; *************** function _printStatistics *****************
 19116 ;; Defined at:
 19117 ;;		line 2445 in file "main.c"
 19118 ;; Parameters:    Size  Location     Type
 19119 ;;		None
 19120 ;; Auto vars:     Size  Location     Type
 19121 ;;		None
 19122 ;; Return value:  Size  Location     Type
 19123 ;;		None               void
 19124 ;; Registers used:
 19125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19126 ;; Tracked objects:
 19127 ;;		On entry : F/1
 19128 ;;		On exit  : 0/0
 19129 ;;		Unchanged: 0/0
 19130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19131 ;;      Params:         0       0       0       0       0       0       0
 19132 ;;      Locals:         0       8       0       0       0       0       0
 19133 ;;      Temps:          0       0       0       0       0       0       0
 19134 ;;      Totals:         0       8       0       0       0       0       0
 19135 ;;Total ram usage:        8 bytes
 19136 ;; Hardware stack levels used:    1
 19137 ;; Hardware stack levels required when called:    5
 19138 ;; This function calls:
 19139 ;;		_putsUSART
 19140 ;;		_sprintf
 19141 ;; This function is called by:
 19142 ;;		_doModeVerbose
 19143 ;; This function uses a non-reentrant model
 19144 ;;
 19145                           
 19146                           	psect	text41
 19147  002DF6                     __ptext41:
 19148                           	opt stack 0
 19149  002DF6                     _printStatistics:
 19150                           	opt stack 24
 19151                           
 19152                           ; BSR set to: 1
 19153                           ;main.c: 2446: putsUSART((char *) "Sent CAN frames: ");
 19154                           
 19155                           ;incstack = 0
 19156                           ;incstack = 0
 19157  002DF6  0E7E               	movlw	high STR_160
 19158  002DF8  0100               	movlb	0	; () banked
 19159  002DFA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19160  002DFC  0E09               	movlw	low STR_160
 19161  002DFE  6F61               	movwf	?_putsUSART& (0+255),b
 19162  002E00  ECF6  F028         	call	_putsUSART	;wreg free
 19163                           
 19164                           ;main.c: 2447: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames);
 19165  002E04  0101               	movlb	1	; () banked
 19166  002E06  6700               	tstfsz	_bHex& (0+255),b
 19167  002E08  D005               	goto	l11317
 19168                           
 19169                           ; BSR set to: 1
 19170  002E0A  0E7F               	movlw	high STR_162
 19171  002E0C  0100               	movlb	0	; () banked
 19172  002E0E  6F95               	movwf	(_printStatistics$1366+1)& (0+255),b
 19173  002E10  0EE0               	movlw	low STR_162
 19174  002E12  D004               	goto	L21
 19175  002E14                     l11317:
 19176                           
 19177                           ; BSR set to: 1
 19178  002E14  0E7F               	movlw	high STR_161
 19179  002E16  0100               	movlb	0	; () banked
 19180  002E18  6F95               	movwf	(_printStatistics$1366+1)& (0+255),b
 19181  002E1A  0E72               	movlw	low STR_161
 19182  002E1C                     L21:
 19183  002E1C  6F94               	movwf	_printStatistics$1366& (0+255),b
 19184                           
 19185                           ; BSR set to: 0
 19186  002E1E  0E01               	movlw	high _wrkbuf
 19187  002E20  0100               	movlb	0	; () banked
 19188  002E22  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19189  002E24  0E54               	movlw	low _wrkbuf
 19190  002E26  6F76               	movwf	?_sprintf& (0+255),b
 19191  002E28  C094  F078         	movff	_printStatistics$1366,?_sprintf+2
 19192  002E2C  C095  F079         	movff	_printStatistics$1366+1,?_sprintf+3
 19193  002E30  C0E1  F07A         	movff	_cntTxFrames,?_sprintf+4
 19194  002E34  C0E2  F07B         	movff	_cntTxFrames+1,?_sprintf+5
 19195  002E38  C0E3  F07C         	movff	_cntTxFrames+2,?_sprintf+6
 19196  002E3C  C0E4  F07D         	movff	_cntTxFrames+3,?_sprintf+7
 19197  002E40  EC28  F00B         	call	_sprintf	;wreg free
 19198                           
 19199                           ; BSR set to: 0
 19200                           ;main.c: 2448: putsUSART(wrkbuf);
 19201  002E44  0E01               	movlw	high _wrkbuf
 19202  002E46  0100               	movlb	0	; () banked
 19203  002E48  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19204  002E4A  0E54               	movlw	low _wrkbuf
 19205  002E4C  6F61               	movwf	?_putsUSART& (0+255),b
 19206  002E4E  ECF6  F028         	call	_putsUSART	;wreg free
 19207                           
 19208                           ;main.c: 2449: putsUSART((char *) "\r\n");
 19209  002E52  0E74               	movlw	high (STR_197+50)
 19210  002E54  0100               	movlb	0	; () banked
 19211  002E56  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19212  002E58  0E8A               	movlw	low (STR_197+50)
 19213  002E5A  6F61               	movwf	?_putsUSART& (0+255),b
 19214  002E5C  ECF6  F028         	call	_putsUSART	;wreg free
 19215                           
 19216                           ;main.c: 2451: putsUSART((char *) "Sent CAN bytes: ");
 19217  002E60  0E7E               	movlw	high STR_164
 19218  002E62  0100               	movlb	0	; () banked
 19219  002E64  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19220  002E66  0E3D               	movlw	low STR_164
 19221  002E68  6F61               	movwf	?_putsUSART& (0+255),b
 19222  002E6A  ECF6  F028         	call	_putsUSART	;wreg free
 19223                           
 19224                           ;main.c: 2452: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes);
 19225  002E6E  0101               	movlb	1	; () banked
 19226  002E70  6700               	tstfsz	_bHex& (0+255),b
 19227  002E72  D005               	goto	l11331
 19228                           
 19229                           ; BSR set to: 1
 19230  002E74  0E7F               	movlw	high STR_162
 19231  002E76  0100               	movlb	0	; () banked
 19232  002E78  6F97               	movwf	(_printStatistics$1372+1)& (0+255),b
 19233  002E7A  0EE0               	movlw	low STR_162
 19234  002E7C  D004               	goto	L22
 19235  002E7E                     l11331:
 19236                           
 19237                           ; BSR set to: 1
 19238  002E7E  0E7F               	movlw	high STR_161
 19239  002E80  0100               	movlb	0	; () banked
 19240  002E82  6F97               	movwf	(_printStatistics$1372+1)& (0+255),b
 19241  002E84  0E72               	movlw	low STR_161
 19242  002E86                     L22:
 19243  002E86  6F96               	movwf	_printStatistics$1372& (0+255),b
 19244                           
 19245                           ; BSR set to: 0
 19246  002E88  0E01               	movlw	high _wrkbuf
 19247  002E8A  0100               	movlb	0	; () banked
 19248  002E8C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19249  002E8E  0E54               	movlw	low _wrkbuf
 19250  002E90  6F76               	movwf	?_sprintf& (0+255),b
 19251  002E92  C096  F078         	movff	_printStatistics$1372,?_sprintf+2
 19252  002E96  C097  F079         	movff	_printStatistics$1372+1,?_sprintf+3
 19253  002E9A  C0DD  F07A         	movff	_cntTxBytes,?_sprintf+4
 19254  002E9E  C0DE  F07B         	movff	_cntTxBytes+1,?_sprintf+5
 19255  002EA2  C0DF  F07C         	movff	_cntTxBytes+2,?_sprintf+6
 19256  002EA6  C0E0  F07D         	movff	_cntTxBytes+3,?_sprintf+7
 19257  002EAA  EC28  F00B         	call	_sprintf	;wreg free
 19258                           
 19259                           ; BSR set to: 0
 19260                           ;main.c: 2453: putsUSART(wrkbuf);
 19261  002EAE  0E01               	movlw	high _wrkbuf
 19262  002EB0  0100               	movlb	0	; () banked
 19263  002EB2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19264  002EB4  0E54               	movlw	low _wrkbuf
 19265  002EB6  6F61               	movwf	?_putsUSART& (0+255),b
 19266  002EB8  ECF6  F028         	call	_putsUSART	;wreg free
 19267                           
 19268                           ;main.c: 2454: putsUSART((char *) "\r\n");
 19269  002EBC  0E74               	movlw	high (STR_197+50)
 19270  002EBE  0100               	movlb	0	; () banked
 19271  002EC0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19272  002EC2  0E8A               	movlw	low (STR_197+50)
 19273  002EC4  6F61               	movwf	?_putsUSART& (0+255),b
 19274  002EC6  ECF6  F028         	call	_putsUSART	;wreg free
 19275                           
 19276                           ;main.c: 2456: putsUSART((char *) "Received CAN frames: ");
 19277  002ECA  0E7D               	movlw	high STR_168
 19278  002ECC  0100               	movlb	0	; () banked
 19279  002ECE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19280  002ED0  0E1B               	movlw	low STR_168
 19281  002ED2  6F61               	movwf	?_putsUSART& (0+255),b
 19282  002ED4  ECF6  F028         	call	_putsUSART	;wreg free
 19283                           
 19284                           ;main.c: 2457: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames);
 19285  002ED8  0101               	movlb	1	; () banked
 19286  002EDA  6700               	tstfsz	_bHex& (0+255),b
 19287  002EDC  D005               	goto	l11345
 19288                           
 19289                           ; BSR set to: 1
 19290  002EDE  0E7F               	movlw	high STR_162
 19291  002EE0  0100               	movlb	0	; () banked
 19292  002EE2  6F99               	movwf	(_printStatistics$1378+1)& (0+255),b
 19293  002EE4  0EE0               	movlw	low STR_162
 19294  002EE6  D004               	goto	L23
 19295  002EE8                     l11345:
 19296                           
 19297                           ; BSR set to: 1
 19298  002EE8  0E7F               	movlw	high STR_161
 19299  002EEA  0100               	movlb	0	; () banked
 19300  002EEC  6F99               	movwf	(_printStatistics$1378+1)& (0+255),b
 19301  002EEE  0E72               	movlw	low STR_161
 19302  002EF0                     L23:
 19303  002EF0  6F98               	movwf	_printStatistics$1378& (0+255),b
 19304                           
 19305                           ; BSR set to: 0
 19306  002EF2  0E01               	movlw	high _wrkbuf
 19307  002EF4  0100               	movlb	0	; () banked
 19308  002EF6  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19309  002EF8  0E54               	movlw	low _wrkbuf
 19310  002EFA  6F76               	movwf	?_sprintf& (0+255),b
 19311  002EFC  C098  F078         	movff	_printStatistics$1378,?_sprintf+2
 19312  002F00  C099  F079         	movff	_printStatistics$1378+1,?_sprintf+3
 19313  002F04  C0D9  F07A         	movff	_cntRxFrames,?_sprintf+4
 19314  002F08  C0DA  F07B         	movff	_cntRxFrames+1,?_sprintf+5
 19315  002F0C  C0DB  F07C         	movff	_cntRxFrames+2,?_sprintf+6
 19316  002F10  C0DC  F07D         	movff	_cntRxFrames+3,?_sprintf+7
 19317  002F14  EC28  F00B         	call	_sprintf	;wreg free
 19318                           
 19319                           ; BSR set to: 0
 19320                           ;main.c: 2458: putsUSART(wrkbuf);
 19321  002F18  0E01               	movlw	high _wrkbuf
 19322  002F1A  0100               	movlb	0	; () banked
 19323  002F1C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19324  002F1E  0E54               	movlw	low _wrkbuf
 19325  002F20  6F61               	movwf	?_putsUSART& (0+255),b
 19326  002F22  ECF6  F028         	call	_putsUSART	;wreg free
 19327                           
 19328                           ;main.c: 2459: putsUSART((char *) "\r\n");
 19329  002F26  0E74               	movlw	high (STR_197+50)
 19330  002F28  0100               	movlb	0	; () banked
 19331  002F2A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19332  002F2C  0E8A               	movlw	low (STR_197+50)
 19333  002F2E  6F61               	movwf	?_putsUSART& (0+255),b
 19334  002F30  ECF6  F028         	call	_putsUSART	;wreg free
 19335                           
 19336                           ;main.c: 2461: putsUSART((char *) "Received CAN bytes: ");
 19337  002F34  0E7D               	movlw	high STR_172
 19338  002F36  0100               	movlb	0	; () banked
 19339  002F38  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19340  002F3A  0E31               	movlw	low STR_172
 19341  002F3C  6F61               	movwf	?_putsUSART& (0+255),b
 19342  002F3E  ECF6  F028         	call	_putsUSART	;wreg free
 19343                           
 19344                           ;main.c: 2462: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes);
 19345  002F42  0101               	movlb	1	; () banked
 19346  002F44  6700               	tstfsz	_bHex& (0+255),b
 19347  002F46  D005               	goto	l11359
 19348                           
 19349                           ; BSR set to: 1
 19350  002F48  0E7F               	movlw	high STR_162
 19351  002F4A  0100               	movlb	0	; () banked
 19352  002F4C  6F9B               	movwf	(_printStatistics$1384+1)& (0+255),b
 19353  002F4E  0EE0               	movlw	low STR_162
 19354  002F50  D004               	goto	L24
 19355  002F52                     l11359:
 19356                           
 19357                           ; BSR set to: 1
 19358  002F52  0E7F               	movlw	high STR_161
 19359  002F54  0100               	movlb	0	; () banked
 19360  002F56  6F9B               	movwf	(_printStatistics$1384+1)& (0+255),b
 19361  002F58  0E72               	movlw	low STR_161
 19362  002F5A                     L24:
 19363  002F5A  6F9A               	movwf	_printStatistics$1384& (0+255),b
 19364                           
 19365                           ; BSR set to: 0
 19366  002F5C  0E01               	movlw	high _wrkbuf
 19367  002F5E  0100               	movlb	0	; () banked
 19368  002F60  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19369  002F62  0E54               	movlw	low _wrkbuf
 19370  002F64  6F76               	movwf	?_sprintf& (0+255),b
 19371  002F66  C09A  F078         	movff	_printStatistics$1384,?_sprintf+2
 19372  002F6A  C09B  F079         	movff	_printStatistics$1384+1,?_sprintf+3
 19373  002F6E  C0D5  F07A         	movff	_cntRxBytes,?_sprintf+4
 19374  002F72  C0D6  F07B         	movff	_cntRxBytes+1,?_sprintf+5
 19375  002F76  C0D7  F07C         	movff	_cntRxBytes+2,?_sprintf+6
 19376  002F7A  C0D8  F07D         	movff	_cntRxBytes+3,?_sprintf+7
 19377  002F7E  EC28  F00B         	call	_sprintf	;wreg free
 19378                           
 19379                           ; BSR set to: 0
 19380                           ;main.c: 2463: putsUSART(wrkbuf);
 19381  002F82  0E01               	movlw	high _wrkbuf
 19382  002F84  0100               	movlb	0	; () banked
 19383  002F86  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19384  002F88  0E54               	movlw	low _wrkbuf
 19385  002F8A  6F61               	movwf	?_putsUSART& (0+255),b
 19386  002F8C  ECF6  F028         	call	_putsUSART	;wreg free
 19387                           
 19388                           ;main.c: 2464: putsUSART((char *) "\r\n");
 19389  002F90  0E74               	movlw	high (STR_197+50)
 19390  002F92  0100               	movlb	0	; () banked
 19391  002F94  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19392  002F96  0E8A               	movlw	low (STR_197+50)
 19393  002F98  6F61               	movwf	?_putsUSART& (0+255),b
 19394  002F9A  EFF6  F028         	goto	_putsUSART	;wreg free
 19395  002F9E                     __end_of_printStatistics:
 19396                           	opt stack 0
 19397                           tblptru	equ	0xFF8
 19398                           tblptrh	equ	0xFF7
 19399                           tblptrl	equ	0xFF6
 19400                           tablat	equ	0xFF5
 19401                           prodh	equ	0xFF4
 19402                           prodl	equ	0xFF3
 19403                           intcon	equ	0xFF2
 19404                           indf0	equ	0xFEF
 19405                           postinc0	equ	0xFEE
 19406                           fsr0h	equ	0xFEA
 19407                           fsr0l	equ	0xFE9
 19408                           wreg	equ	0xFE8
 19409                           indf1	equ	0xFE7
 19410                           postinc1	equ	0xFE6
 19411                           postdec1	equ	0xFE5
 19412                           fsr1h	equ	0xFE2
 19413                           fsr1l	equ	0xFE1
 19414                           indf2	equ	0xFDF
 19415                           postinc2	equ	0xFDE
 19416                           postdec2	equ	0xFDD
 19417                           plusw2	equ	0xFDB
 19418                           fsr2h	equ	0xFDA
 19419                           fsr2l	equ	0xFD9
 19420                           status	equ	0xFD8
 19421                           
 19422 ;; *************** function _atoi *****************
 19423 ;; Defined at:
 19424 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 19425 ;; Parameters:    Size  Location     Type
 19426 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 19427 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19428 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19429 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19430 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19431 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19432 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 19433 ;; Auto vars:     Size  Location     Type
 19434 ;;  a               2   11[BANK0 ] int 
 19435 ;;  sign            1   10[BANK0 ] unsigned char 
 19436 ;; Return value:  Size  Location     Type
 19437 ;;                  2    6[BANK0 ] int 
 19438 ;; Registers used:
 19439 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19440 ;; Tracked objects:
 19441 ;;		On entry : C/2
 19442 ;;		On exit  : F/0
 19443 ;;		Unchanged: 0/0
 19444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19445 ;;      Params:         0       2       0       0       0       0       0
 19446 ;;      Locals:         0       3       0       0       0       0       0
 19447 ;;      Temps:          0       2       0       0       0       0       0
 19448 ;;      Totals:         0       7       0       0       0       0       0
 19449 ;;Total ram usage:        7 bytes
 19450 ;; Hardware stack levels used:    1
 19451 ;; Hardware stack levels required when called:    4
 19452 ;; This function calls:
 19453 ;;		_isdigit
 19454 ;;		___wmul
 19455 ;; This function is called by:
 19456 ;;		_doModeVerbose
 19457 ;; This function uses a non-reentrant model
 19458 ;;
 19459                           
 19460                           	psect	text42
 19461  003B0C                     __ptext42:
 19462                           	opt stack 0
 19463  003B0C                     _atoi:
 19464                           	opt stack 25
 19465                           
 19466                           ;incstack = 0
 19467                           ;incstack = 0
 19468  003B0C  D003               	goto	l11269
 19469  003B0E                     l11267:
 19470  003B0E  0100               	movlb	0	; () banked
 19471  003B10  4B66               	infsnz	atoi@s& (0+255),f,b
 19472  003B12  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19473  003B14                     l11269:
 19474  003B14  0100               	movlb	0	; () banked
 19475  003B16  D876               	call	PL22	;call to abstracted procedure
 19476  003B18  64EA               	cpfsgt	fsr0h,c
 19477  003B1A  D003               	bra	u13977
 19478  003B1C  6EEA               	movwf	fsr0h,c
 19479  003B1E  50EF               	movf	indf0,w,c
 19480  003B20  D003               	bra	u13970
 19481  003B22                     u13977:
 19482  003B22  6EF7               	movwf	tblptrh,c
 19483  003B24  0008               	tblrd		*
 19484  003B26  50F5               	movf	tablat,w,c
 19485  003B28                     u13970:
 19486  003B28  0A20               	xorlw	32
 19487  003B2A  E0F1               	bz	l11267
 19488  003B2C  0100               	movlb	0	; () banked
 19489  003B2E  D86A               	call	PL22	;call to abstracted procedure
 19490  003B30  64EA               	cpfsgt	fsr0h,c
 19491  003B32  D003               	bra	u13997
 19492  003B34  6EEA               	movwf	fsr0h,c
 19493  003B36  50EF               	movf	indf0,w,c
 19494  003B38  D003               	bra	u13990
 19495  003B3A                     u13997:
 19496  003B3A  6EF7               	movwf	tblptrh,c
 19497  003B3C  0008               	tblrd		*
 19498  003B3E  50F5               	movf	tablat,w,c
 19499  003B40                     u13990:
 19500  003B40  0A09               	xorlw	9
 19501  003B42  E0E5               	bz	l11267
 19502  003B44  0100               	movlb	0	; () banked
 19503  003B46  6B6B               	clrf	atoi@a& (0+255),b
 19504  003B48  6B6C               	clrf	(atoi@a+1)& (0+255),b
 19505  003B4A  6B6A               	clrf	atoi@sign& (0+255),b
 19506                           
 19507                           ; BSR set to: 0
 19508  003B4C  D85B               	call	PL22	;call to abstracted procedure
 19509  003B4E  64EA               	cpfsgt	fsr0h,c
 19510  003B50  D003               	bra	u14017
 19511  003B52  6EEA               	movwf	fsr0h,c
 19512  003B54  50EF               	movf	indf0,w,c
 19513  003B56  D003               	bra	u14010
 19514  003B58                     u14017:
 19515  003B58  6EF7               	movwf	tblptrh,c
 19516  003B5A  0008               	tblrd		*
 19517  003B5C  50F5               	movf	tablat,w,c
 19518  003B5E                     u14010:
 19519  003B5E  0A2D               	xorlw	45
 19520  003B60  E103               	bnz	l11277
 19521  003B62  0100               	movlb	0	; () banked
 19522  003B64  2B6A               	incf	atoi@sign& (0+255),f,b
 19523  003B66  D00D               	goto	L25
 19524  003B68                     l11277:
 19525  003B68  0100               	movlb	0	; () banked
 19526  003B6A  D84C               	call	PL22	;call to abstracted procedure
 19527  003B6C  64EA               	cpfsgt	fsr0h,c
 19528  003B6E  D003               	bra	u14037
 19529  003B70  6EEA               	movwf	fsr0h,c
 19530  003B72  50EF               	movf	indf0,w,c
 19531  003B74  D003               	bra	u14030
 19532  003B76                     u14037:
 19533  003B76  6EF7               	movwf	tblptrh,c
 19534  003B78  0008               	tblrd		*
 19535  003B7A  50F5               	movf	tablat,w,c
 19536  003B7C                     u14030:
 19537  003B7C  0A2B               	xorlw	43
 19538  003B7E  E121               	bnz	l11285
 19539  003B80                     l11279:
 19540  003B80  0100               	movlb	0	; () banked
 19541  003B82                     L25:
 19542  003B82  4B66               	infsnz	atoi@s& (0+255),f,b
 19543  003B84  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19544  003B86  D01D               	goto	l11285
 19545  003B88                     l11281:
 19546                           
 19547                           ; BSR set to: 0
 19548  003B88  C06B  F060         	movff	atoi@a,?___wmul
 19549  003B8C  C06C  F061         	movff	atoi@a+1,?___wmul+1
 19550  003B90  6B63               	clrf	(?___wmul+3)& (0+255),b
 19551  003B92  0E0A               	movlw	10
 19552  003B94  6F62               	movwf	(?___wmul+2)& (0+255),b
 19553  003B96  EC0D  F02B         	call	___wmul	;wreg free
 19554  003B9A  D834               	call	PL22	;call to abstracted procedure
 19555  003B9C  64EA               	cpfsgt	fsr0h,c
 19556  003B9E  D003               	bra	u14057
 19557  003BA0  6EEA               	movwf	fsr0h,c
 19558  003BA2  50EF               	movf	indf0,w,c
 19559  003BA4  D003               	bra	u14050
 19560  003BA6                     u14057:
 19561  003BA6  6EF7               	movwf	tblptrh,c
 19562  003BA8  0008               	tblrd		*
 19563  003BAA  50F5               	movf	tablat,w,c
 19564  003BAC                     u14050:
 19565  003BAC  0100               	movlb	0	; () banked
 19566  003BAE  2760               	addwf	?___wmul& (0+255),f,b
 19567  003BB0  0E00               	movlw	0
 19568  003BB2  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 19569  003BB4  0ED0               	movlw	208
 19570  003BB6  2560               	addwf	?___wmul& (0+255),w,b
 19571  003BB8  6F6B               	movwf	atoi@a& (0+255),b
 19572  003BBA  0EFF               	movlw	255
 19573  003BBC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19574  003BBE  6F6C               	movwf	(atoi@a+1)& (0+255),b
 19575  003BC0  D7DF               	goto	l11279
 19576  003BC2                     l11285:
 19577  003BC2  0100               	movlb	0	; () banked
 19578  003BC4  D81F               	call	PL22	;call to abstracted procedure
 19579  003BC6  64EA               	cpfsgt	fsr0h,c
 19580  003BC8  D003               	bra	u14067
 19581  003BCA  6EEA               	movwf	fsr0h,c
 19582  003BCC  50EF               	movf	indf0,w,c
 19583  003BCE  D003               	bra	u14060
 19584  003BD0                     u14067:
 19585  003BD0  6EF7               	movwf	tblptrh,c
 19586  003BD2  0008               	tblrd		*
 19587  003BD4  50F5               	movf	tablat,w,c
 19588  003BD6                     u14060:
 19589  003BD6  EC7F  F02B         	call	_isdigit
 19590  003BDA  E2D6               	bc	l11281
 19591                           
 19592                           ; BSR set to: 0
 19593  003BDC  516A               	movf	atoi@sign& (0+255),w,b
 19594  003BDE  E00D               	bz	l2011
 19595                           
 19596                           ; BSR set to: 0
 19597  003BE0  C06B  F068         	movff	atoi@a,??_atoi
 19598  003BE4  C06C  F069         	movff	atoi@a+1,??_atoi+1
 19599  003BE8  1F68               	comf	??_atoi& (0+255),f,b
 19600  003BEA  1F69               	comf	(??_atoi+1)& (0+255),f,b
 19601  003BEC  4B68               	infsnz	??_atoi& (0+255),f,b
 19602  003BEE  2B69               	incf	(??_atoi+1)& (0+255),f,b
 19603  003BF0  C068  F066         	movff	??_atoi,?_atoi
 19604  003BF4  C069  F067         	movff	??_atoi+1,?_atoi+1
 19605  003BF8  D004               	goto	l2012
 19606  003BFA                     l2011:
 19607                           
 19608                           ; BSR set to: 0
 19609  003BFA  C06B  F066         	movff	atoi@a,?_atoi
 19610  003BFE  C06C  F067         	movff	atoi@a+1,?_atoi+1
 19611  003C02                     l2012:
 19612                           
 19613                           ; BSR set to: 0
 19614  003C02  0012               	return	
 19615  003C04                     __end_of_atoi:
 19616                           	opt stack 0
 19617  003C04                     PL22:
 19618                           	opt stack 25
 19619  003C04  5166               	movf	atoi@s& (0+255),w,b
 19620  003C06  6EF6               	movwf	tblptrl,c
 19621  003C08  6EE9               	movwf	fsr0l,c
 19622  003C0A  0E05               	movlw	(high __ramtop+-1)
 19623  003C0C  6EEA               	movwf	fsr0h,c
 19624  003C0E  5167               	movf	(atoi@s+1)& (0+255),w,b
 19625  003C10  0012               	return	
 19626  003C12                     __end_ofPL22:
 19627                           	opt stack 0
 19628                           tblptru	equ	0xFF8
 19629                           tblptrh	equ	0xFF7
 19630                           tblptrl	equ	0xFF6
 19631                           tablat	equ	0xFF5
 19632                           prodh	equ	0xFF4
 19633                           prodl	equ	0xFF3
 19634                           intcon	equ	0xFF2
 19635                           indf0	equ	0xFEF
 19636                           postinc0	equ	0xFEE
 19637                           fsr0h	equ	0xFEA
 19638                           fsr0l	equ	0xFE9
 19639                           wreg	equ	0xFE8
 19640                           indf1	equ	0xFE7
 19641                           postinc1	equ	0xFE6
 19642                           postdec1	equ	0xFE5
 19643                           fsr1h	equ	0xFE2
 19644                           fsr1l	equ	0xFE1
 19645                           indf2	equ	0xFDF
 19646                           postinc2	equ	0xFDE
 19647                           postdec2	equ	0xFDD
 19648                           plusw2	equ	0xFDB
 19649                           fsr2h	equ	0xFDA
 19650                           fsr2l	equ	0xFD9
 19651                           status	equ	0xFD8
 19652                           
 19653 ;; *************** function _strtok *****************
 19654 ;; Defined at:
 19655 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 19656 ;; Parameters:    Size  Location     Type
 19657 ;;  s1              2   12[BANK0 ] PTR unsigned char 
 19658 ;;		 -> NULL(0), cmdbuf(80), 
 19659 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
 19660 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19661 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19662 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19663 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19664 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19665 ;;		 -> STR_31(2), STR_30(2), 
 19666 ;; Auto vars:     Size  Location     Type
 19667 ;;		None
 19668 ;; Return value:  Size  Location     Type
 19669 ;;                  2   12[BANK0 ] PTR unsigned char 
 19670 ;; Registers used:
 19671 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19672 ;; Tracked objects:
 19673 ;;		On entry : F/0
 19674 ;;		On exit  : F/0
 19675 ;;		Unchanged: 0/0
 19676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19677 ;;      Params:         0       4       0       0       0       0       0
 19678 ;;      Locals:         0       0       0       0       0       0       0
 19679 ;;      Temps:          0       0       0       0       0       0       0
 19680 ;;      Totals:         0       4       0       0       0       0       0
 19681 ;;Total ram usage:        4 bytes
 19682 ;; Hardware stack levels used:    1
 19683 ;; Hardware stack levels required when called:    5
 19684 ;; This function calls:
 19685 ;;		_strspn
 19686 ;;		_strcspn
 19687 ;; This function is called by:
 19688 ;;		_doModeVerbose
 19689 ;; This function uses a non-reentrant model
 19690 ;;
 19691                           
 19692                           	psect	text43
 19693  0049E0                     __ptext43:
 19694                           	opt stack 0
 19695  0049E0                     _strtok:
 19696                           	opt stack 24
 19697                           
 19698                           ; BSR set to: 0
 19699                           
 19700                           ; BSR set to: 0
 19701                           ;incstack = 0
 19702                           ;incstack = 0
 19703  0049E0  516D               	movf	(strtok@s1+1)& (0+255),w,b
 19704  0049E2  116C               	iorwf	strtok@s1& (0+255),w,b
 19705  0049E4  E104               	bnz	l11247
 19706                           
 19707                           ; BSR set to: 0
 19708  0049E6  C03B  F06C         	movff	strtok@sp,strtok@s1
 19709  0049EA  C03C  F06D         	movff	strtok@sp+1,strtok@s1+1
 19710  0049EE                     l11247:
 19711                           
 19712                           ; BSR set to: 0
 19713  0049EE  516D               	movf	(strtok@s1+1)& (0+255),w,b
 19714  0049F0  116C               	iorwf	strtok@s1& (0+255),w,b
 19715  0049F2  E016               	bz	L26
 19716                           
 19717                           ; BSR set to: 0
 19718                           
 19719                           ; BSR set to: 0
 19720  0049F4  C06C  F066         	movff	strtok@s1,?_strspn
 19721  0049F8  C06D  F067         	movff	strtok@s1+1,?_strspn+1
 19722  0049FC  C06E  F068         	movff	strtok@s2,?_strspn+2
 19723  004A00  C06F  F069         	movff	strtok@s2+1,?_strspn+3
 19724  004A04  ECDA  F029         	call	_strspn	;wreg free
 19725  004A08  5166               	movf	?_strspn& (0+255),w,b
 19726  004A0A  276C               	addwf	strtok@s1& (0+255),f,b
 19727  004A0C  5167               	movf	(?_strspn+1)& (0+255),w,b
 19728  004A0E  236D               	addwfc	(strtok@s1+1)& (0+255),f,b
 19729                           
 19730                           ; BSR set to: 0
 19731  004A10  C06C  FFD9         	movff	strtok@s1,fsr2l
 19732  004A14  C06D  FFDA         	movff	strtok@s1+1,fsr2h
 19733  004A18  50DF               	movf	indf2,w,c
 19734  004A1A  E105               	bnz	l11257
 19735                           
 19736                           ; BSR set to: 0
 19737  004A1C  6A3B               	clrf	strtok@sp,c
 19738  004A1E  6A3C               	clrf	strtok@sp+1,c
 19739  004A20                     L26:
 19740  004A20  6B6C               	clrf	?_strtok& (0+255),b
 19741  004A22  6B6D               	clrf	(?_strtok+1)& (0+255),b
 19742  004A24  D025               	goto	l2504
 19743  004A26                     l11257:
 19744                           
 19745                           ; BSR set to: 0
 19746  004A26  C06C  F066         	movff	strtok@s1,?_strcspn
 19747  004A2A  C06D  F067         	movff	strtok@s1+1,?_strcspn+1
 19748  004A2E  C06E  F068         	movff	strtok@s2,?_strcspn+2
 19749  004A32  C06F  F069         	movff	strtok@s2+1,?_strcspn+3
 19750  004A36  ECB8  F029         	call	_strcspn	;wreg free
 19751  004A3A  5166               	movf	?_strcspn& (0+255),w,b
 19752  004A3C  256C               	addwf	strtok@s1& (0+255),w,b
 19753  004A3E  6E3B               	movwf	strtok@sp,c
 19754  004A40  5167               	movf	(?_strcspn+1)& (0+255),w,b
 19755  004A42  216D               	addwfc	(strtok@s1+1)& (0+255),w,b
 19756  004A44  6E3C               	movwf	strtok@sp+1,c
 19757                           
 19758                           ; BSR set to: 0
 19759  004A46  C03B  FFD9         	movff	strtok@sp,fsr2l
 19760  004A4A  C03C  FFDA         	movff	strtok@sp+1,fsr2h
 19761  004A4E  50DF               	movf	indf2,w,c
 19762  004A50  E009               	bz	l2506
 19763                           
 19764                           ; BSR set to: 0
 19765  004A52  C03B  FFD9         	movff	strtok@sp,fsr2l
 19766  004A56  C03C  FFDA         	movff	strtok@sp+1,fsr2h
 19767  004A5A  0E00               	movlw	0
 19768  004A5C  6EDF               	movwf	indf2,c
 19769                           
 19770                           ; BSR set to: 0
 19771  004A5E  4A3B               	infsnz	strtok@sp,f,c
 19772  004A60  2A3C               	incf	strtok@sp+1,f,c
 19773  004A62  D002               	goto	l2507
 19774  004A64                     l2506:
 19775                           
 19776                           ; BSR set to: 0
 19777  004A64  6A3B               	clrf	strtok@sp,c
 19778  004A66  6A3C               	clrf	strtok@sp+1,c
 19779  004A68                     l2507:
 19780                           
 19781                           ; BSR set to: 0
 19782  004A68  C06C  F06C         	movff	strtok@s1,?_strtok
 19783  004A6C  C06D  F06D         	movff	strtok@s1+1,?_strtok+1
 19784  004A70                     l2504:
 19785                           
 19786                           ; BSR set to: 0
 19787  004A70  0012               	return	
 19788  004A72                     __end_of_strtok:
 19789                           	opt stack 0
 19790                           tblptru	equ	0xFF8
 19791                           tblptrh	equ	0xFF7
 19792                           tblptrl	equ	0xFF6
 19793                           tablat	equ	0xFF5
 19794                           prodh	equ	0xFF4
 19795                           prodl	equ	0xFF3
 19796                           intcon	equ	0xFF2
 19797                           indf0	equ	0xFEF
 19798                           postinc0	equ	0xFEE
 19799                           fsr0h	equ	0xFEA
 19800                           fsr0l	equ	0xFE9
 19801                           wreg	equ	0xFE8
 19802                           indf1	equ	0xFE7
 19803                           postinc1	equ	0xFE6
 19804                           postdec1	equ	0xFE5
 19805                           fsr1h	equ	0xFE2
 19806                           fsr1l	equ	0xFE1
 19807                           indf2	equ	0xFDF
 19808                           postinc2	equ	0xFDE
 19809                           postdec2	equ	0xFDD
 19810                           plusw2	equ	0xFDB
 19811                           fsr2h	equ	0xFDA
 19812                           fsr2l	equ	0xFD9
 19813                           status	equ	0xFD8
 19814                           
 19815 ;; *************** function _strcspn *****************
 19816 ;; Defined at:
 19817 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 19818 ;; Parameters:    Size  Location     Type
 19819 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19820 ;;		 -> NULL(0), cmdbuf(80), 
 19821 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19822 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19823 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19824 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19825 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19826 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19827 ;;		 -> STR_31(2), STR_30(2), 
 19828 ;; Auto vars:     Size  Location     Type
 19829 ;;  i               2   10[BANK0 ] unsigned int 
 19830 ;; Return value:  Size  Location     Type
 19831 ;;                  2    6[BANK0 ] unsigned int 
 19832 ;; Registers used:
 19833 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19834 ;; Tracked objects:
 19835 ;;		On entry : F/0
 19836 ;;		On exit  : F/0
 19837 ;;		Unchanged: 0/0
 19838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19839 ;;      Params:         0       4       0       0       0       0       0
 19840 ;;      Locals:         0       2       0       0       0       0       0
 19841 ;;      Temps:          0       0       0       0       0       0       0
 19842 ;;      Totals:         0       6       0       0       0       0       0
 19843 ;;Total ram usage:        6 bytes
 19844 ;; Hardware stack levels used:    1
 19845 ;; Hardware stack levels required when called:    4
 19846 ;; This function calls:
 19847 ;;		_strchr
 19848 ;; This function is called by:
 19849 ;;		_strtok
 19850 ;; This function uses a non-reentrant model
 19851 ;;
 19852                           
 19853                           	psect	text44
 19854  005370                     __ptext44:
 19855                           	opt stack 0
 19856  005370                     _strcspn:
 19857                           	opt stack 24
 19858                           
 19859                           ; BSR set to: 0
 19860                           
 19861                           ; BSR set to: 0
 19862                           ;incstack = 0
 19863                           ;incstack = 0
 19864  005370  6B6A               	clrf	strcspn@i& (0+255),b
 19865  005372  6B6B               	clrf	(strcspn@i+1)& (0+255),b
 19866  005374  D004               	goto	l12967
 19867  005376                     l12965:
 19868                           
 19869                           ; BSR set to: 0
 19870  005376  4B66               	infsnz	strcspn@s1& (0+255),f,b
 19871  005378  2B67               	incf	(strcspn@s1+1)& (0+255),f,b
 19872  00537A  4B6A               	infsnz	strcspn@i& (0+255),f,b
 19873  00537C  2B6B               	incf	(strcspn@i+1)& (0+255),f,b
 19874  00537E                     l12967:
 19875                           
 19876                           ; BSR set to: 0
 19877  00537E  C066  FFD9         	movff	strcspn@s1,fsr2l
 19878  005382  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 19879  005386  50DF               	movf	indf2,w,c
 19880  005388  E010               	bz	l2531
 19881                           
 19882                           ; BSR set to: 0
 19883  00538A  C068  F060         	movff	strcspn@s2,?_strchr
 19884  00538E  C069  F061         	movff	strcspn@s2+1,?_strchr+1
 19885  005392  C066  FFD9         	movff	strcspn@s1,fsr2l
 19886  005396  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 19887  00539A  50DF               	movf	indf2,w,c
 19888  00539C  6F62               	movwf	(?_strchr+2)& (0+255),b
 19889  00539E  6B63               	clrf	(?_strchr+3)& (0+255),b
 19890  0053A0  EC0A  F028         	call	_strchr	;wreg free
 19891  0053A4  5161               	movf	(?_strchr+1)& (0+255),w,b
 19892  0053A6  1160               	iorwf	?_strchr& (0+255),w,b
 19893  0053A8  E0E6               	bz	l12965
 19894  0053AA                     l2531:
 19895                           
 19896                           ; BSR set to: 0
 19897  0053AA  C06A  F066         	movff	strcspn@i,?_strcspn
 19898  0053AE  C06B  F067         	movff	strcspn@i+1,?_strcspn+1
 19899                           
 19900                           ; BSR set to: 0
 19901  0053B2  0012               	return	
 19902  0053B4                     __end_of_strcspn:
 19903                           	opt stack 0
 19904                           tblptru	equ	0xFF8
 19905                           tblptrh	equ	0xFF7
 19906                           tblptrl	equ	0xFF6
 19907                           tablat	equ	0xFF5
 19908                           prodh	equ	0xFF4
 19909                           prodl	equ	0xFF3
 19910                           intcon	equ	0xFF2
 19911                           indf0	equ	0xFEF
 19912                           postinc0	equ	0xFEE
 19913                           fsr0h	equ	0xFEA
 19914                           fsr0l	equ	0xFE9
 19915                           wreg	equ	0xFE8
 19916                           indf1	equ	0xFE7
 19917                           postinc1	equ	0xFE6
 19918                           postdec1	equ	0xFE5
 19919                           fsr1h	equ	0xFE2
 19920                           fsr1l	equ	0xFE1
 19921                           indf2	equ	0xFDF
 19922                           postinc2	equ	0xFDE
 19923                           postdec2	equ	0xFDD
 19924                           plusw2	equ	0xFDB
 19925                           fsr2h	equ	0xFDA
 19926                           fsr2l	equ	0xFD9
 19927                           status	equ	0xFD8
 19928                           
 19929 ;; *************** function _strspn *****************
 19930 ;; Defined at:
 19931 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 19932 ;; Parameters:    Size  Location     Type
 19933 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19934 ;;		 -> NULL(0), cmdbuf(80), 
 19935 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19936 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19937 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19938 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19939 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19940 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19941 ;;		 -> STR_31(2), STR_30(2), 
 19942 ;; Auto vars:     Size  Location     Type
 19943 ;;  i               2   10[BANK0 ] unsigned int 
 19944 ;; Return value:  Size  Location     Type
 19945 ;;                  2    6[BANK0 ] unsigned int 
 19946 ;; Registers used:
 19947 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19948 ;; Tracked objects:
 19949 ;;		On entry : F/0
 19950 ;;		On exit  : F/0
 19951 ;;		Unchanged: 0/0
 19952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19953 ;;      Params:         0       4       0       0       0       0       0
 19954 ;;      Locals:         0       2       0       0       0       0       0
 19955 ;;      Temps:          0       0       0       0       0       0       0
 19956 ;;      Totals:         0       6       0       0       0       0       0
 19957 ;;Total ram usage:        6 bytes
 19958 ;; Hardware stack levels used:    1
 19959 ;; Hardware stack levels required when called:    4
 19960 ;; This function calls:
 19961 ;;		_strchr
 19962 ;; This function is called by:
 19963 ;;		_strtok
 19964 ;; This function uses a non-reentrant model
 19965 ;;
 19966                           
 19967                           	psect	text45
 19968  0053B4                     __ptext45:
 19969                           	opt stack 0
 19970  0053B4                     _strspn:
 19971                           	opt stack 24
 19972                           
 19973                           ; BSR set to: 0
 19974                           
 19975                           ; BSR set to: 0
 19976                           ;incstack = 0
 19977                           ;incstack = 0
 19978  0053B4  6B6A               	clrf	strspn@i& (0+255),b
 19979  0053B6  6B6B               	clrf	(strspn@i+1)& (0+255),b
 19980  0053B8  D004               	goto	l12959
 19981  0053BA                     l12957:
 19982                           
 19983                           ; BSR set to: 0
 19984  0053BA  4B66               	infsnz	strspn@s1& (0+255),f,b
 19985  0053BC  2B67               	incf	(strspn@s1+1)& (0+255),f,b
 19986  0053BE  4B6A               	infsnz	strspn@i& (0+255),f,b
 19987  0053C0  2B6B               	incf	(strspn@i+1)& (0+255),f,b
 19988  0053C2                     l12959:
 19989                           
 19990                           ; BSR set to: 0
 19991  0053C2  C066  FFD9         	movff	strspn@s1,fsr2l
 19992  0053C6  C067  FFDA         	movff	strspn@s1+1,fsr2h
 19993  0053CA  50DF               	movf	indf2,w,c
 19994  0053CC  E010               	bz	l2550
 19995                           
 19996                           ; BSR set to: 0
 19997  0053CE  C068  F060         	movff	strspn@s2,?_strchr
 19998  0053D2  C069  F061         	movff	strspn@s2+1,?_strchr+1
 19999  0053D6  C066  FFD9         	movff	strspn@s1,fsr2l
 20000  0053DA  C067  FFDA         	movff	strspn@s1+1,fsr2h
 20001  0053DE  50DF               	movf	indf2,w,c
 20002  0053E0  6F62               	movwf	(?_strchr+2)& (0+255),b
 20003  0053E2  6B63               	clrf	(?_strchr+3)& (0+255),b
 20004  0053E4  EC0A  F028         	call	_strchr	;wreg free
 20005  0053E8  5161               	movf	(?_strchr+1)& (0+255),w,b
 20006  0053EA  1160               	iorwf	?_strchr& (0+255),w,b
 20007  0053EC  E1E6               	bnz	l12957
 20008  0053EE                     l2550:
 20009                           
 20010                           ; BSR set to: 0
 20011  0053EE  C06A  F066         	movff	strspn@i,?_strspn
 20012  0053F2  C06B  F067         	movff	strspn@i+1,?_strspn+1
 20013                           
 20014                           ; BSR set to: 0
 20015  0053F6  0012               	return	
 20016  0053F8                     __end_of_strspn:
 20017                           	opt stack 0
 20018                           tblptru	equ	0xFF8
 20019                           tblptrh	equ	0xFF7
 20020                           tblptrl	equ	0xFF6
 20021                           tablat	equ	0xFF5
 20022                           prodh	equ	0xFF4
 20023                           prodl	equ	0xFF3
 20024                           intcon	equ	0xFF2
 20025                           indf0	equ	0xFEF
 20026                           postinc0	equ	0xFEE
 20027                           fsr0h	equ	0xFEA
 20028                           fsr0l	equ	0xFE9
 20029                           wreg	equ	0xFE8
 20030                           indf1	equ	0xFE7
 20031                           postinc1	equ	0xFE6
 20032                           postdec1	equ	0xFE5
 20033                           fsr1h	equ	0xFE2
 20034                           fsr1l	equ	0xFE1
 20035                           indf2	equ	0xFDF
 20036                           postinc2	equ	0xFDE
 20037                           postdec2	equ	0xFDD
 20038                           plusw2	equ	0xFDB
 20039                           fsr2h	equ	0xFDA
 20040                           fsr2l	equ	0xFD9
 20041                           status	equ	0xFD8
 20042                           
 20043 ;; *************** function _strchr *****************
 20044 ;; Defined at:
 20045 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 20046 ;; Parameters:    Size  Location     Type
 20047 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 20048 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 20049 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 20050 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 20051 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 20052 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20053 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 20054 ;;  chr             2    2[BANK0 ] int 
 20055 ;; Auto vars:     Size  Location     Type
 20056 ;;		None
 20057 ;; Return value:  Size  Location     Type
 20058 ;;                  2    0[BANK0 ] PTR unsigned char 
 20059 ;; Registers used:
 20060 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20061 ;; Tracked objects:
 20062 ;;		On entry : F/0
 20063 ;;		On exit  : F/0
 20064 ;;		Unchanged: 0/0
 20065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20066 ;;      Params:         0       4       0       0       0       0       0
 20067 ;;      Locals:         0       0       0       0       0       0       0
 20068 ;;      Temps:          0       2       0       0       0       0       0
 20069 ;;      Totals:         0       6       0       0       0       0       0
 20070 ;;Total ram usage:        6 bytes
 20071 ;; Hardware stack levels used:    1
 20072 ;; Hardware stack levels required when called:    3
 20073 ;; This function calls:
 20074 ;;		Nothing
 20075 ;; This function is called by:
 20076 ;;		_doModeVerbose
 20077 ;;		_strcspn
 20078 ;;		_strspn
 20079 ;; This function uses a non-reentrant model
 20080 ;;
 20081                           
 20082                           	psect	text46
 20083  005014                     __ptext46:
 20084                           	opt stack 0
 20085  005014                     _strchr:
 20086                           	opt stack 26
 20087  005014                     l2452:
 20088                           
 20089                           ; BSR set to: 0
 20090  005014  0100               	movlb	0	; () banked
 20091  005016  5160               	movf	strchr@ptr& (0+255),w,b
 20092  005018  6EF6               	movwf	tblptrl,c
 20093  00501A  6EE9               	movwf	fsr0l,c
 20094  00501C  0E05               	movlw	(high __ramtop+-1)
 20095  00501E  6EEA               	movwf	fsr0h,c
 20096  005020  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20097  005022  64EA               	cpfsgt	fsr0h,c
 20098  005024  D003               	bra	u14327
 20099  005026  6EEA               	movwf	fsr0h,c
 20100  005028  50EF               	movf	indf0,w,c
 20101  00502A  D003               	bra	u14320
 20102  00502C                     u14327:
 20103  00502C  6EF7               	movwf	tblptrh,c
 20104  00502E  0008               	tblrd		*
 20105  005030  50F5               	movf	tablat,w,c
 20106  005032                     u14320:
 20107  005032  0100               	movlb	0	; () banked
 20108  005034  1962               	xorwf	strchr@chr& (0+255),w,b
 20109  005036  E105               	bnz	l11531
 20110                           
 20111                           ; BSR set to: 0
 20112  005038  C060  F060         	movff	strchr@ptr,?_strchr
 20113  00503C  C061  F061         	movff	strchr@ptr+1,?_strchr+1
 20114  005040  D019               	goto	l2454
 20115  005042                     l11531:
 20116                           
 20117                           ; BSR set to: 0
 20118  005042  5160               	movf	strchr@ptr& (0+255),w,b
 20119  005044  6F64               	movwf	??_strchr& (0+255),b
 20120  005046  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20121  005048  6F65               	movwf	(??_strchr+1)& (0+255),b
 20122  00504A  4B60               	infsnz	strchr@ptr& (0+255),f,b
 20123  00504C  2B61               	incf	(strchr@ptr+1)& (0+255),f,b
 20124  00504E  5164               	movf	??_strchr& (0+255),w,b
 20125  005050  6EF6               	movwf	tblptrl,c
 20126  005052  6EE9               	movwf	fsr0l,c
 20127  005054  0E05               	movlw	(high __ramtop+-1)
 20128  005056  6EEA               	movwf	fsr0h,c
 20129  005058  5165               	movf	(??_strchr+1)& (0+255),w,b
 20130  00505A  64EA               	cpfsgt	fsr0h,c
 20131  00505C  D003               	bra	u14347
 20132  00505E  6EEA               	movwf	fsr0h,c
 20133  005060  50EF               	movf	indf0,w,c
 20134  005062  D003               	bra	u14340
 20135  005064                     u14347:
 20136  005064  6EF7               	movwf	tblptrh,c
 20137  005066  0008               	tblrd		*
 20138  005068  50F5               	movf	tablat,w,c
 20139  00506A                     u14340:
 20140  00506A  0900               	iorlw	0
 20141  00506C  E1D3               	bnz	l2452
 20142  00506E  0100               	movlb	0	; () banked
 20143  005070  6B60               	clrf	?_strchr& (0+255),b
 20144  005072  6B61               	clrf	(?_strchr+1)& (0+255),b
 20145  005074                     l2454:
 20146                           
 20147                           ; BSR set to: 0
 20148  005074  0012               	return	
 20149  005076                     __end_of_strchr:
 20150                           	opt stack 0
 20151                           tblptru	equ	0xFF8
 20152                           tblptrh	equ	0xFF7
 20153                           tblptrl	equ	0xFF6
 20154                           tablat	equ	0xFF5
 20155                           prodh	equ	0xFF4
 20156                           prodl	equ	0xFF3
 20157                           intcon	equ	0xFF2
 20158                           indf0	equ	0xFEF
 20159                           postinc0	equ	0xFEE
 20160                           fsr0h	equ	0xFEA
 20161                           fsr0l	equ	0xFE9
 20162                           wreg	equ	0xFE8
 20163                           indf1	equ	0xFE7
 20164                           postinc1	equ	0xFE6
 20165                           postdec1	equ	0xFE5
 20166                           fsr1h	equ	0xFE2
 20167                           fsr1l	equ	0xFE1
 20168                           indf2	equ	0xFDF
 20169                           postinc2	equ	0xFDE
 20170                           postdec2	equ	0xFDD
 20171                           plusw2	equ	0xFDB
 20172                           fsr2h	equ	0xFDA
 20173                           fsr2l	equ	0xFD9
 20174                           status	equ	0xFD8
 20175                           
 20176 ;; *************** function _stristr *****************
 20177 ;; Defined at:
 20178 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 20179 ;; Parameters:    Size  Location     Type
 20180 ;;  s1              2   13[BANK0 ] PTR const unsigned char 
 20181 ;;		 -> NULL(0), cmdbuf(80), 
 20182 ;;  s2              2   15[BANK0 ] PTR const unsigned char 
 20183 ;;		 -> STR_129(6), STR_128(8), STR_126(6), STR_124(5), 
 20184 ;;		 -> STR_122(8), STR_121(6), STR_120(9), STR_118(11), 
 20185 ;;		 -> STR_116(8), STR_114(4), STR_113(5), STR_100(5), 
 20186 ;;		 -> STR_87(7), STR_81(5), STR_72(5), STR_49(5), 
 20187 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 20188 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20189 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20190 ;;		 -> STR_8(5), STR_6(5), 
 20191 ;; Auto vars:     Size  Location     Type
 20192 ;;		None
 20193 ;; Return value:  Size  Location     Type
 20194 ;;                  2   13[BANK0 ] PTR unsigned char 
 20195 ;; Registers used:
 20196 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20197 ;; Tracked objects:
 20198 ;;		On entry : F/0
 20199 ;;		On exit  : F/0
 20200 ;;		Unchanged: 0/0
 20201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20202 ;;      Params:         0       4       0       0       0       0       0
 20203 ;;      Locals:         0       0       0       0       0       0       0
 20204 ;;      Temps:          0       0       0       0       0       0       0
 20205 ;;      Totals:         0       4       0       0       0       0       0
 20206 ;;Total ram usage:        4 bytes
 20207 ;; Hardware stack levels used:    1
 20208 ;; Hardware stack levels required when called:    5
 20209 ;; This function calls:
 20210 ;;		_strlen
 20211 ;;		_strnicmp
 20212 ;;		_strichr
 20213 ;; This function is called by:
 20214 ;;		_doModeVerbose
 20215 ;; This function uses a non-reentrant model
 20216 ;;
 20217                           
 20218                           	psect	text47
 20219  004C90                     __ptext47:
 20220                           	opt stack 0
 20221  004C90                     _stristr:
 20222                           	opt stack 24
 20223                           
 20224                           ; BSR set to: 0
 20225                           
 20226                           ; BSR set to: 0
 20227                           ;incstack = 0
 20228                           ;incstack = 0
 20229  004C90  D02F               	goto	l11235
 20230  004C92                     l11229:
 20231                           
 20232                           ; BSR set to: 0
 20233  004C92  C06D  F064         	movff	stristr@s1,?_strnicmp
 20234  004C96  C06E  F065         	movff	stristr@s1+1,?_strnicmp+1
 20235  004C9A  C06F  F066         	movff	stristr@s2,?_strnicmp+2
 20236  004C9E  C070  F067         	movff	stristr@s2+1,?_strnicmp+3
 20237  004CA2  C06F  F060         	movff	stristr@s2,?_strlen
 20238  004CA6  C070  F061         	movff	stristr@s2+1,?_strlen+1
 20239  004CAA  EC1D  F02A         	call	_strlen	;wreg free
 20240  004CAE  C060  F068         	movff	?_strlen,?_strnicmp+4
 20241  004CB2  C061  F069         	movff	?_strlen+1,?_strnicmp+5
 20242  004CB6  ECA6  F027         	call	_strnicmp	;wreg free
 20243  004CBA  5165               	movf	(?_strnicmp+1)& (0+255),w,b
 20244  004CBC  1164               	iorwf	?_strnicmp& (0+255),w,b
 20245  004CBE  E105               	bnz	l11233
 20246                           
 20247                           ; BSR set to: 0
 20248  004CC0  C06D  F06D         	movff	stristr@s1,?_stristr
 20249  004CC4  C06E  F06E         	movff	stristr@s1+1,?_stristr+1
 20250  004CC8  D01E               	goto	l2473
 20251  004CCA                     l11233:
 20252                           
 20253                           ; BSR set to: 0
 20254  004CCA  296D               	incf	stristr@s1& (0+255),w,b
 20255  004CCC  6F61               	movwf	?_strichr& (0+255),b
 20256  004CCE  0E00               	movlw	0
 20257  004CD0  216E               	addwfc	(stristr@s1+1)& (0+255),w,b
 20258  004CD2  6F62               	movwf	(?_strichr+1)& (0+255),b
 20259  004CD4  C06F  FFF6         	movff	stristr@s2,tblptrl
 20260  004CD8  C070  FFF7         	movff	stristr@s2+1,tblptrh
 20261  004CDC  0008               	tblrd		*
 20262  004CDE  50F5               	movf	tablat,w,c
 20263  004CE0  6F63               	movwf	(?_strichr+2)& (0+255),b
 20264  004CE2  6B64               	clrf	(?_strichr+3)& (0+255),b
 20265  004CE4  EC7C  F02A         	call	_strichr	;wreg free
 20266  004CE8  C061  F06D         	movff	?_strichr,stristr@s1
 20267  004CEC  C062  F06E         	movff	?_strichr+1,stristr@s1+1
 20268  004CF0                     l11235:
 20269                           
 20270                           ; BSR set to: 0
 20271  004CF0  516E               	movf	(stristr@s1+1)& (0+255),w,b
 20272  004CF2  116D               	iorwf	stristr@s1& (0+255),w,b
 20273  004CF4  E006               	bz	l2476
 20274                           
 20275                           ; BSR set to: 0
 20276  004CF6  C06D  FFD9         	movff	stristr@s1,fsr2l
 20277  004CFA  C06E  FFDA         	movff	stristr@s1+1,fsr2h
 20278  004CFE  50DF               	movf	indf2,w,c
 20279  004D00  E1C8               	bnz	l11229
 20280  004D02                     l2476:
 20281                           
 20282                           ; BSR set to: 0
 20283  004D02  6B6D               	clrf	?_stristr& (0+255),b
 20284  004D04  6B6E               	clrf	(?_stristr+1)& (0+255),b
 20285  004D06                     l2473:
 20286                           
 20287                           ; BSR set to: 0
 20288  004D06  0012               	return	
 20289  004D08                     __end_of_stristr:
 20290                           	opt stack 0
 20291                           tblptru	equ	0xFF8
 20292                           tblptrh	equ	0xFF7
 20293                           tblptrl	equ	0xFF6
 20294                           tablat	equ	0xFF5
 20295                           prodh	equ	0xFF4
 20296                           prodl	equ	0xFF3
 20297                           intcon	equ	0xFF2
 20298                           indf0	equ	0xFEF
 20299                           postinc0	equ	0xFEE
 20300                           fsr0h	equ	0xFEA
 20301                           fsr0l	equ	0xFE9
 20302                           wreg	equ	0xFE8
 20303                           indf1	equ	0xFE7
 20304                           postinc1	equ	0xFE6
 20305                           postdec1	equ	0xFE5
 20306                           fsr1h	equ	0xFE2
 20307                           fsr1l	equ	0xFE1
 20308                           indf2	equ	0xFDF
 20309                           postinc2	equ	0xFDE
 20310                           postdec2	equ	0xFDD
 20311                           plusw2	equ	0xFDB
 20312                           fsr2h	equ	0xFDA
 20313                           fsr2l	equ	0xFD9
 20314                           status	equ	0xFD8
 20315                           
 20316 ;; *************** function _strichr *****************
 20317 ;; Defined at:
 20318 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 20319 ;; Parameters:    Size  Location     Type
 20320 ;;  ptr             2    1[BANK0 ] PTR const unsigned char 
 20321 ;;		 -> NULL(0), cmdbuf(80), 
 20322 ;;  chr             2    3[BANK0 ] int 
 20323 ;; Auto vars:     Size  Location     Type
 20324 ;;		None
 20325 ;; Return value:  Size  Location     Type
 20326 ;;                  2    1[BANK0 ] PTR unsigned char 
 20327 ;; Registers used:
 20328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20329 ;; Tracked objects:
 20330 ;;		On entry : F/0
 20331 ;;		On exit  : F/0
 20332 ;;		Unchanged: 0/0
 20333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20334 ;;      Params:         0       4       0       0       0       0       0
 20335 ;;      Locals:         0       0       0       0       0       0       0
 20336 ;;      Temps:          0       0       0       0       0       0       0
 20337 ;;      Totals:         0       4       0       0       0       0       0
 20338 ;;Total ram usage:        4 bytes
 20339 ;; Hardware stack levels used:    1
 20340 ;; Hardware stack levels required when called:    4
 20341 ;; This function calls:
 20342 ;;		_toupper
 20343 ;; This function is called by:
 20344 ;;		_stristr
 20345 ;; This function uses a non-reentrant model
 20346 ;;
 20347                           
 20348                           	psect	text48
 20349  0054F8                     __ptext48:
 20350                           	opt stack 0
 20351  0054F8                     _strichr:
 20352                           	opt stack 24
 20353                           
 20354                           ; BSR set to: 0
 20355                           
 20356                           ; BSR set to: 0
 20357                           ;incstack = 0
 20358                           ;incstack = 0
 20359  0054F8  5163               	movf	strichr@chr& (0+255),w,b
 20360  0054FA  ECBA  F02B         	call	_toupper
 20361  0054FE  6F63               	movwf	strichr@chr& (0+255),b
 20362  005500  6B64               	clrf	(strichr@chr+1)& (0+255),b
 20363  005502  D010               	goto	l12943
 20364  005504                     l12937:
 20365                           
 20366                           ; BSR set to: 0
 20367  005504  C061  FFD9         	movff	strichr@ptr,fsr2l
 20368  005508  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20369  00550C  50DF               	movf	indf2,w,c
 20370  00550E  ECBA  F02B         	call	_toupper
 20371  005512  1963               	xorwf	strichr@chr& (0+255),w,b
 20372  005514  E105               	bnz	l12941
 20373                           
 20374                           ; BSR set to: 0
 20375  005516  C061  F061         	movff	strichr@ptr,?_strichr
 20376  00551A  C062  F062         	movff	strichr@ptr+1,?_strichr+1
 20377  00551E  D00A               	goto	l2540
 20378  005520                     l12941:
 20379                           
 20380                           ; BSR set to: 0
 20381  005520  4B61               	infsnz	strichr@ptr& (0+255),f,b
 20382  005522  2B62               	incf	(strichr@ptr+1)& (0+255),f,b
 20383  005524                     l12943:
 20384                           
 20385                           ; BSR set to: 0
 20386  005524  C061  FFD9         	movff	strichr@ptr,fsr2l
 20387  005528  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20388  00552C  50DF               	movf	indf2,w,c
 20389  00552E  E1EA               	bnz	l12937
 20390                           
 20391                           ; BSR set to: 0
 20392  005530  6B61               	clrf	?_strichr& (0+255),b
 20393  005532  6B62               	clrf	(?_strichr+1)& (0+255),b
 20394  005534                     l2540:
 20395                           
 20396                           ; BSR set to: 0
 20397  005534  0012               	return	
 20398  005536                     __end_of_strichr:
 20399                           	opt stack 0
 20400                           tblptru	equ	0xFF8
 20401                           tblptrh	equ	0xFF7
 20402                           tblptrl	equ	0xFF6
 20403                           tablat	equ	0xFF5
 20404                           prodh	equ	0xFF4
 20405                           prodl	equ	0xFF3
 20406                           intcon	equ	0xFF2
 20407                           indf0	equ	0xFEF
 20408                           postinc0	equ	0xFEE
 20409                           fsr0h	equ	0xFEA
 20410                           fsr0l	equ	0xFE9
 20411                           wreg	equ	0xFE8
 20412                           indf1	equ	0xFE7
 20413                           postinc1	equ	0xFE6
 20414                           postdec1	equ	0xFE5
 20415                           fsr1h	equ	0xFE2
 20416                           fsr1l	equ	0xFE1
 20417                           indf2	equ	0xFDF
 20418                           postinc2	equ	0xFDE
 20419                           postdec2	equ	0xFDD
 20420                           plusw2	equ	0xFDB
 20421                           fsr2h	equ	0xFDA
 20422                           fsr2l	equ	0xFD9
 20423                           status	equ	0xFD8
 20424                           
 20425 ;; *************** function _strnicmp *****************
 20426 ;; Defined at:
 20427 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 20428 ;; Parameters:    Size  Location     Type
 20429 ;;  s1              2    4[BANK0 ] PTR const unsigned char 
 20430 ;;		 -> NULL(0), cmdbuf(80), 
 20431 ;;  s2              2    6[BANK0 ] PTR const unsigned char 
 20432 ;;		 -> STR_129(6), STR_128(8), STR_126(6), STR_124(5), 
 20433 ;;		 -> STR_122(8), STR_121(6), STR_120(9), STR_118(11), 
 20434 ;;		 -> STR_116(8), STR_114(4), STR_113(5), STR_100(5), 
 20435 ;;		 -> STR_87(7), STR_81(5), STR_72(5), STR_49(5), 
 20436 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 20437 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20438 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20439 ;;		 -> STR_8(5), STR_6(5), 
 20440 ;;  len             2    8[BANK0 ] unsigned int 
 20441 ;; Auto vars:     Size  Location     Type
 20442 ;;  r               1   12[BANK0 ] char 
 20443 ;; Return value:  Size  Location     Type
 20444 ;;                  2    4[BANK0 ] int 
 20445 ;; Registers used:
 20446 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20447 ;; Tracked objects:
 20448 ;;		On entry : F/0
 20449 ;;		On exit  : F/0
 20450 ;;		Unchanged: 0/0
 20451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20452 ;;      Params:         0       6       0       0       0       0       0
 20453 ;;      Locals:         0       1       0       0       0       0       0
 20454 ;;      Temps:          0       2       0       0       0       0       0
 20455 ;;      Totals:         0       9       0       0       0       0       0
 20456 ;;Total ram usage:        9 bytes
 20457 ;; Hardware stack levels used:    1
 20458 ;; Hardware stack levels required when called:    4
 20459 ;; This function calls:
 20460 ;;		_toupper
 20461 ;; This function is called by:
 20462 ;;		_stristr
 20463 ;; This function uses a non-reentrant model
 20464 ;;
 20465                           
 20466                           	psect	text49
 20467  004F4C                     __ptext49:
 20468                           	opt stack 0
 20469  004F4C                     _strnicmp:
 20470                           	opt stack 24
 20471                           
 20472                           ; BSR set to: 0
 20473                           
 20474                           ; BSR set to: 0
 20475                           ;incstack = 0
 20476                           ;incstack = 0
 20477  004F4C  D027               	goto	l12933
 20478  004F4E                     l12923:
 20479                           
 20480                           ; BSR set to: 0
 20481  004F4E  C066  FFF6         	movff	strnicmp@s2,tblptrl
 20482  004F52  C067  FFF7         	movff	strnicmp@s2+1,tblptrh
 20483  004F56  0008               	tblrd		*
 20484  004F58  50F5               	movf	tablat,w,c
 20485  004F5A  ECBA  F02B         	call	_toupper
 20486  004F5E  6F6A               	movwf	??_strnicmp& (0+255),b
 20487  004F60  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20488  004F64  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20489  004F68  50DF               	movf	indf2,w,c
 20490  004F6A  ECBA  F02B         	call	_toupper
 20491  004F6E  6F6B               	movwf	(??_strnicmp+1)& (0+255),b
 20492  004F70  516A               	movf	??_strnicmp& (0+255),w,b
 20493  004F72  5D6B               	subwf	(??_strnicmp+1)& (0+255),w,b
 20494  004F74  6F6C               	movwf	strnicmp@r& (0+255),b
 20495  004F76  0100               	movlb	0	; () banked
 20496  004F78  676C               	tstfsz	strnicmp@r& (0+255),b
 20497  004F7A  D006               	goto	l12927
 20498                           
 20499                           ; BSR set to: 0
 20500  004F7C  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20501  004F80  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20502  004F84  50DF               	movf	indf2,w,c
 20503  004F86  E106               	bnz	l12931
 20504  004F88                     l12927:
 20505                           
 20506                           ; BSR set to: 0
 20507  004F88  516C               	movf	strnicmp@r& (0+255),w,b
 20508  004F8A  6F64               	movwf	?_strnicmp& (0+255),b
 20509  004F8C  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20510  004F8E  BF64               	btfsc	?_strnicmp& (0+255),7,b
 20511  004F90  0765               	decf	(?_strnicmp+1)& (0+255),f,b
 20512  004F92  D00E               	goto	l2492
 20513  004F94                     l12931:
 20514                           
 20515                           ; BSR set to: 0
 20516  004F94  4B64               	infsnz	strnicmp@s1& (0+255),f,b
 20517  004F96  2B65               	incf	(strnicmp@s1+1)& (0+255),f,b
 20518  004F98  4B66               	infsnz	strnicmp@s2& (0+255),f,b
 20519  004F9A  2B67               	incf	(strnicmp@s2+1)& (0+255),f,b
 20520  004F9C                     l12933:
 20521                           
 20522                           ; BSR set to: 0
 20523  004F9C  0768               	decf	strnicmp@len& (0+255),f,b
 20524  004F9E  A0D8               	btfss	status,0,c
 20525  004FA0  0769               	decf	(strnicmp@len+1)& (0+255),f,b
 20526  004FA2  0100               	movlb	0	; () banked
 20527  004FA4  2968               	incf	strnicmp@len& (0+255),w,b
 20528  004FA6  B4D8               	btfsc	status,2,c
 20529  004FA8  2969               	incf	(strnicmp@len+1)& (0+255),w,b
 20530  004FAA  E1D1               	bnz	l12923
 20531                           
 20532                           ; BSR set to: 0
 20533  004FAC  6B64               	clrf	?_strnicmp& (0+255),b
 20534  004FAE  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20535  004FB0                     l2492:
 20536                           
 20537                           ; BSR set to: 0
 20538  004FB0  0012               	return	
 20539  004FB2                     __end_of_strnicmp:
 20540                           	opt stack 0
 20541                           tblptru	equ	0xFF8
 20542                           tblptrh	equ	0xFF7
 20543                           tblptrl	equ	0xFF6
 20544                           tablat	equ	0xFF5
 20545                           prodh	equ	0xFF4
 20546                           prodl	equ	0xFF3
 20547                           intcon	equ	0xFF2
 20548                           indf0	equ	0xFEF
 20549                           postinc0	equ	0xFEE
 20550                           fsr0h	equ	0xFEA
 20551                           fsr0l	equ	0xFE9
 20552                           wreg	equ	0xFE8
 20553                           indf1	equ	0xFE7
 20554                           postinc1	equ	0xFE6
 20555                           postdec1	equ	0xFE5
 20556                           fsr1h	equ	0xFE2
 20557                           fsr1l	equ	0xFE1
 20558                           indf2	equ	0xFDF
 20559                           postinc2	equ	0xFDE
 20560                           postdec2	equ	0xFDD
 20561                           plusw2	equ	0xFDB
 20562                           fsr2h	equ	0xFDA
 20563                           fsr2l	equ	0xFD9
 20564                           status	equ	0xFD8
 20565                           
 20566 ;; *************** function _toupper *****************
 20567 ;; Defined at:
 20568 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 20569 ;; Parameters:    Size  Location     Type
 20570 ;;  c               1    wreg     unsigned char 
 20571 ;; Auto vars:     Size  Location     Type
 20572 ;;  c               1    0[BANK0 ] unsigned char 
 20573 ;; Return value:  Size  Location     Type
 20574 ;;                  1    wreg      unsigned char 
 20575 ;; Registers used:
 20576 ;;		wreg, status,2, status,0
 20577 ;; Tracked objects:
 20578 ;;		On entry : F/0
 20579 ;;		On exit  : F/0
 20580 ;;		Unchanged: 0/0
 20581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20582 ;;      Params:         0       0       0       0       0       0       0
 20583 ;;      Locals:         0       1       0       0       0       0       0
 20584 ;;      Temps:          0       0       0       0       0       0       0
 20585 ;;      Totals:         0       1       0       0       0       0       0
 20586 ;;Total ram usage:        1 bytes
 20587 ;; Hardware stack levels used:    1
 20588 ;; Hardware stack levels required when called:    3
 20589 ;; This function calls:
 20590 ;;		Nothing
 20591 ;; This function is called by:
 20592 ;;		_strnicmp
 20593 ;;		_strichr
 20594 ;; This function uses a non-reentrant model
 20595 ;;
 20596                           
 20597                           	psect	text50
 20598  005774                     __ptext50:
 20599                           	opt stack 0
 20600  005774                     _toupper:
 20601                           	opt stack 24
 20602                           
 20603                           ; BSR set to: 0
 20604                           ;incstack = 0
 20605                           ;incstack = 0
 20606                           ;toupper@c stored from wreg
 20607  005774  CFE8 F060          	movff	wreg,toupper@c
 20608                           
 20609                           ; BSR set to: 0
 20610  005778  0E7B               	movlw	123
 20611  00577A  6160               	cpfslt	toupper@c& (0+255),b
 20612  00577C  D004               	goto	l12951
 20613                           
 20614                           ; BSR set to: 0
 20615  00577E  0E60               	movlw	96
 20616  005780  6560               	cpfsgt	toupper@c& (0+255),b
 20617  005782  D001               	goto	l12951
 20618                           
 20619                           ; BSR set to: 0
 20620  005784  9B60               	bcf	toupper@c& (0+255),5,b
 20621  005786                     l12951:
 20622                           
 20623                           ; BSR set to: 0
 20624  005786  5160               	movf	toupper@c& (0+255),w,b
 20625                           
 20626                           ; BSR set to: 0
 20627  005788  0012               	return	
 20628  00578A                     __end_of_toupper:
 20629                           	opt stack 0
 20630                           tblptru	equ	0xFF8
 20631                           tblptrh	equ	0xFF7
 20632                           tblptrl	equ	0xFF6
 20633                           tablat	equ	0xFF5
 20634                           prodh	equ	0xFF4
 20635                           prodl	equ	0xFF3
 20636                           intcon	equ	0xFF2
 20637                           indf0	equ	0xFEF
 20638                           postinc0	equ	0xFEE
 20639                           fsr0h	equ	0xFEA
 20640                           fsr0l	equ	0xFE9
 20641                           wreg	equ	0xFE8
 20642                           indf1	equ	0xFE7
 20643                           postinc1	equ	0xFE6
 20644                           postdec1	equ	0xFE5
 20645                           fsr1h	equ	0xFE2
 20646                           fsr1l	equ	0xFE1
 20647                           indf2	equ	0xFDF
 20648                           postinc2	equ	0xFDE
 20649                           postdec2	equ	0xFDD
 20650                           plusw2	equ	0xFDB
 20651                           fsr2h	equ	0xFDA
 20652                           fsr2l	equ	0xFD9
 20653                           status	equ	0xFD8
 20654                           
 20655 ;; *************** function _strlen *****************
 20656 ;; Defined at:
 20657 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 20658 ;; Parameters:    Size  Location     Type
 20659 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 20660 ;;		 -> printGUID@buf(3), STR_129(6), STR_128(8), STR_126(6), 
 20661 ;;		 -> STR_124(5), STR_122(8), STR_121(6), STR_120(9), 
 20662 ;;		 -> STR_118(11), STR_116(8), STR_114(4), STR_113(5), 
 20663 ;;		 -> STR_100(5), STR_87(7), STR_81(5), STR_72(5), 
 20664 ;;		 -> wrkbuf(80), STR_49(5), STR_47(5), STR_45(5), 
 20665 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20666 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20667 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20668 ;;		 -> cmdbuf(80), 
 20669 ;; Auto vars:     Size  Location     Type
 20670 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
 20671 ;;		 -> printGUID@buf(3), STR_129(6), STR_128(8), STR_126(6), 
 20672 ;;		 -> STR_124(5), STR_122(8), STR_121(6), STR_120(9), 
 20673 ;;		 -> STR_118(11), STR_116(8), STR_114(4), STR_113(5), 
 20674 ;;		 -> STR_100(5), STR_87(7), STR_81(5), STR_72(5), 
 20675 ;;		 -> wrkbuf(80), STR_49(5), STR_47(5), STR_45(5), 
 20676 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20677 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20678 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20679 ;;		 -> cmdbuf(80), 
 20680 ;; Return value:  Size  Location     Type
 20681 ;;                  2    0[BANK0 ] unsigned int 
 20682 ;; Registers used:
 20683 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20684 ;; Tracked objects:
 20685 ;;		On entry : F/0
 20686 ;;		On exit  : F/0
 20687 ;;		Unchanged: 0/0
 20688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20689 ;;      Params:         0       2       0       0       0       0       0
 20690 ;;      Locals:         0       2       0       0       0       0       0
 20691 ;;      Temps:          0       0       0       0       0       0       0
 20692 ;;      Totals:         0       4       0       0       0       0       0
 20693 ;;Total ram usage:        4 bytes
 20694 ;; Hardware stack levels used:    1
 20695 ;; Hardware stack levels required when called:    3
 20696 ;; This function calls:
 20697 ;;		Nothing
 20698 ;; This function is called by:
 20699 ;;		_doModeSLCAN
 20700 ;;		_receiveSendEventSLCAN
 20701 ;;		_printGUID
 20702 ;;		_hexStringToBytes
 20703 ;;		_stristr
 20704 ;; This function uses a non-reentrant model
 20705 ;;
 20706                           
 20707                           	psect	text51
 20708  00543A                     __ptext51:
 20709                           	opt stack 0
 20710  00543A                     _strlen:
 20711                           	opt stack 25
 20712                           
 20713                           ; BSR set to: 0
 20714                           
 20715                           ; BSR set to: 0
 20716                           ;incstack = 0
 20717                           ;incstack = 0
 20718  00543A  C060  F062         	movff	strlen@s,strlen@cp
 20719  00543E  C061  F063         	movff	strlen@s+1,strlen@cp+1
 20720  005442  D003               	goto	l12493
 20721  005444                     l12491:
 20722  005444  0100               	movlb	0	; () banked
 20723  005446  4B62               	infsnz	strlen@cp& (0+255),f,b
 20724  005448  2B63               	incf	(strlen@cp+1)& (0+255),f,b
 20725  00544A                     l12493:
 20726                           
 20727                           ; BSR set to: 0
 20728  00544A  5162               	movf	strlen@cp& (0+255),w,b
 20729  00544C  6EF6               	movwf	tblptrl,c
 20730  00544E  6EE9               	movwf	fsr0l,c
 20731  005450  0E05               	movlw	(high __ramtop+-1)
 20732  005452  6EEA               	movwf	fsr0h,c
 20733  005454  5163               	movf	(strlen@cp+1)& (0+255),w,b
 20734  005456  64EA               	cpfsgt	fsr0h,c
 20735  005458  D003               	bra	u16137
 20736  00545A  6EEA               	movwf	fsr0h,c
 20737  00545C  50EF               	movf	indf0,w,c
 20738  00545E  D003               	bra	u16130
 20739  005460                     u16137:
 20740  005460  6EF7               	movwf	tblptrh,c
 20741  005462  0008               	tblrd		*
 20742  005464  50F5               	movf	tablat,w,c
 20743  005466                     u16130:
 20744  005466  0900               	iorlw	0
 20745  005468  E1ED               	bnz	l12491
 20746  00546A  0100               	movlb	0	; () banked
 20747  00546C  5160               	movf	strlen@s& (0+255),w,b
 20748  00546E  5D62               	subwf	strlen@cp& (0+255),w,b
 20749  005470  6F60               	movwf	?_strlen& (0+255),b
 20750  005472  5161               	movf	(strlen@s+1)& (0+255),w,b
 20751  005474  5963               	subwfb	(strlen@cp+1)& (0+255),w,b
 20752  005476  6F61               	movwf	(?_strlen+1)& (0+255),b
 20753                           
 20754                           ; BSR set to: 0
 20755  005478  0012               	return	
 20756  00547A                     __end_of_strlen:
 20757                           	opt stack 0
 20758                           tblptru	equ	0xFF8
 20759                           tblptrh	equ	0xFF7
 20760                           tblptrl	equ	0xFF6
 20761                           tablat	equ	0xFF5
 20762                           prodh	equ	0xFF4
 20763                           prodl	equ	0xFF3
 20764                           intcon	equ	0xFF2
 20765                           indf0	equ	0xFEF
 20766                           postinc0	equ	0xFEE
 20767                           fsr0h	equ	0xFEA
 20768                           fsr0l	equ	0xFE9
 20769                           wreg	equ	0xFE8
 20770                           indf1	equ	0xFE7
 20771                           postinc1	equ	0xFE6
 20772                           postdec1	equ	0xFE5
 20773                           fsr1h	equ	0xFE2
 20774                           fsr1l	equ	0xFE1
 20775                           indf2	equ	0xFDF
 20776                           postinc2	equ	0xFDE
 20777                           postdec2	equ	0xFDD
 20778                           plusw2	equ	0xFDB
 20779                           fsr2h	equ	0xFDA
 20780                           fsr2l	equ	0xFD9
 20781                           status	equ	0xFD8
 20782                           
 20783 ;; *************** function _receivePrintEventVerbose *****************
 20784 ;; Defined at:
 20785 ;;		line 1731 in file "main.c"
 20786 ;; Parameters:    Size  Location     Type
 20787 ;;		None
 20788 ;; Auto vars:     Size  Location     Type
 20789 ;;  i               1   69[BANK0 ] unsigned char 
 20790 ;; Return value:  Size  Location     Type
 20791 ;;                  1    wreg      enum E15660
 20792 ;; Registers used:
 20793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20794 ;; Tracked objects:
 20795 ;;		On entry : F/1
 20796 ;;		On exit  : 0/0
 20797 ;;		Unchanged: 0/0
 20798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20799 ;;      Params:         0       0       0       0       0       0       0
 20800 ;;      Locals:         0      13       0       0       0       0       0
 20801 ;;      Temps:          0       5       0       0       0       0       0
 20802 ;;      Totals:         0      18       0       0       0       0       0
 20803 ;;Total ram usage:       18 bytes
 20804 ;; Hardware stack levels used:    1
 20805 ;; Hardware stack levels required when called:    6
 20806 ;; This function calls:
 20807 ;;		_putsUSART
 20808 ;;		_sprintf
 20809 ;;		_getVSCPFrame
 20810 ;; This function is called by:
 20811 ;;		_doModeVerbose
 20812 ;; This function uses a non-reentrant model
 20813 ;;
 20814                           
 20815                           	psect	text52
 20816  0023D4                     __ptext52:
 20817                           	opt stack 0
 20818  0023D4                     _receivePrintEventVerbose:
 20819                           	opt stack 23
 20820                           
 20821                           ; BSR set to: 1
 20822                           ;main.c: 1732: uint8_t i;
 20823                           ;main.c: 1734: if (getVSCPFrame(&vscpClass,
 20824                           ;main.c: 1735: &vscpType,
 20825                           ;main.c: 1736: &vscpNodeId,
 20826                           ;main.c: 1737: &vscpPriority,
 20827                           ;main.c: 1738: &vscpSize,
 20828                           ;main.c: 1739: vscpData)) {
 20829                           
 20830                           ; BSR set to: 0
 20831                           ;incstack = 0
 20832                           ;incstack = 0
 20833  0023D4  0E01               	movlw	high _vscpClass
 20834  0023D6  0100               	movlb	0	; () banked
 20835  0023D8  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 20836  0023DA  0EAC               	movlw	low _vscpClass
 20837  0023DC  6F72               	movwf	?_getVSCPFrame& (0+255),b
 20838  0023DE  0E01               	movlw	high _vscpType
 20839  0023E0  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 20840  0023E2  0EB1               	movlw	low _vscpType
 20841  0023E4  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 20842  0023E6  0E01               	movlw	high _vscpNodeId
 20843  0023E8  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 20844  0023EA  0EAE               	movlw	low _vscpNodeId
 20845  0023EC  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 20846  0023EE  0E01               	movlw	high _vscpPriority
 20847  0023F0  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 20848  0023F2  0EAF               	movlw	low _vscpPriority
 20849  0023F4  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 20850  0023F6  0E01               	movlw	high _vscpSize
 20851  0023F8  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 20852  0023FA  0EB0               	movlw	low _vscpSize
 20853  0023FC  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 20854  0023FE  0E01               	movlw	high _vscpData
 20855  002400  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 20856  002402  0EA4               	movlw	low _vscpData
 20857  002404  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 20858  002406  ECC5  F025         	call	_getVSCPFrame	;wreg free
 20859  00240A  0900               	iorlw	0
 20860  00240C  E101 D141          	bz	l11223
 20861                           
 20862                           ; BSR set to: 0
 20863                           ;main.c: 1742: cntRxFrames++;
 20864  002410  2BD9               	incf	_cntRxFrames& (0+255),f,b
 20865  002412  0E00               	movlw	0
 20866  002414  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 20867  002416  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 20868  002418  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 20869                           
 20870                           ;main.c: 1743: cntRxBytes += vscpSize;
 20871  00241A  0101               	movlb	1	; () banked
 20872  00241C  51B0               	movf	_vscpSize& (0+255),w,b
 20873  00241E  0100               	movlb	0	; () banked
 20874  002420  27D5               	addwf	_cntRxBytes& (0+255),f,b
 20875  002422  0E00               	movlw	0
 20876  002424  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 20877  002426  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 20878  002428  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 20879                           
 20880                           ; BSR set to: 0
 20881                           ;main.c: 1745: putsUSART((char *) "<Prio=");
 20882  00242A  0E7F               	movlw	high STR_139
 20883  00242C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20884  00242E  0E41               	movlw	low STR_139
 20885  002430  6F61               	movwf	?_putsUSART& (0+255),b
 20886  002432  ECF6  F028         	call	_putsUSART	;wreg free
 20887                           
 20888                           ;main.c: 1746: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority);
 20889  002436  0101               	movlb	1	; () banked
 20890  002438  6700               	tstfsz	_bHex& (0+255),b
 20891  00243A  D005               	goto	l11141
 20892                           
 20893                           ; BSR set to: 1
 20894  00243C  0E7F               	movlw	high STR_57
 20895  00243E  0100               	movlb	0	; () banked
 20896  002440  6F9A               	movwf	(_receivePrintEventVerbose$1273+1)& (0+255),b
 20897  002442  0EED               	movlw	low STR_57
 20898  002444  D004               	goto	L27
 20899  002446                     l11141:
 20900                           
 20901                           ; BSR set to: 1
 20902  002446  0E7F               	movlw	high STR_56
 20903  002448  0100               	movlb	0	; () banked
 20904  00244A  6F9A               	movwf	(_receivePrintEventVerbose$1273+1)& (0+255),b
 20905  00244C  0E64               	movlw	low STR_56
 20906  00244E                     L27:
 20907  00244E  6F99               	movwf	_receivePrintEventVerbose$1273& (0+255),b
 20908                           
 20909                           ; BSR set to: 0
 20910  002450  0E01               	movlw	high _wrkbuf
 20911  002452  0100               	movlb	0	; () banked
 20912  002454  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20913  002456  0E54               	movlw	low _wrkbuf
 20914  002458  6F76               	movwf	?_sprintf& (0+255),b
 20915  00245A  C099  F078         	movff	_receivePrintEventVerbose$1273,?_sprintf+2
 20916  00245E  C09A  F079         	movff	_receivePrintEventVerbose$1273+1,?_sprintf+3
 20917  002462  C1AF  F07A         	movff	_vscpPriority,?_sprintf+4
 20918  002466  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 20919  002468  EC28  F00B         	call	_sprintf	;wreg free
 20920                           
 20921                           ; BSR set to: 0
 20922                           ;main.c: 1747: putsUSART(wrkbuf);
 20923  00246C  0E01               	movlw	high _wrkbuf
 20924  00246E  0100               	movlb	0	; () banked
 20925  002470  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20926  002472  0E54               	movlw	low _wrkbuf
 20927  002474  6F61               	movwf	?_putsUSART& (0+255),b
 20928  002476  ECF6  F028         	call	_putsUSART	;wreg free
 20929                           
 20930                           ;main.c: 1748: putsUSART((char *) ",class=");
 20931  00247A  0E7E               	movlw	high STR_142
 20932  00247C  0100               	movlb	0	; () banked
 20933  00247E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20934  002480  0EF5               	movlw	low STR_142
 20935  002482  6F61               	movwf	?_putsUSART& (0+255),b
 20936  002484  ECF6  F028         	call	_putsUSART	;wreg free
 20937                           
 20938                           ;main.c: 1749: sprintf(wrkbuf, bHex ? "0x%04X" : "%d", vscpClass);
 20939  002488  0101               	movlb	1	; () banked
 20940  00248A  6700               	tstfsz	_bHex& (0+255),b
 20941  00248C  D005               	goto	l11153
 20942                           
 20943                           ; BSR set to: 1
 20944  00248E  0E7F               	movlw	high STR_57
 20945  002490  0100               	movlb	0	; () banked
 20946  002492  6F9C               	movwf	(_receivePrintEventVerbose$1278+1)& (0+255),b
 20947  002494  0EED               	movlw	low STR_57
 20948  002496  D004               	goto	L28
 20949  002498                     l11153:
 20950                           
 20951                           ; BSR set to: 1
 20952  002498  0E7F               	movlw	high STR_143
 20953  00249A  0100               	movlb	0	; () banked
 20954  00249C  6F9C               	movwf	(_receivePrintEventVerbose$1278+1)& (0+255),b
 20955  00249E  0E6B               	movlw	low STR_143
 20956  0024A0                     L28:
 20957  0024A0  6F9B               	movwf	_receivePrintEventVerbose$1278& (0+255),b
 20958                           
 20959                           ; BSR set to: 0
 20960  0024A2  0E01               	movlw	high _wrkbuf
 20961  0024A4  0100               	movlb	0	; () banked
 20962  0024A6  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20963  0024A8  0E54               	movlw	low _wrkbuf
 20964  0024AA  6F76               	movwf	?_sprintf& (0+255),b
 20965  0024AC  C09B  F078         	movff	_receivePrintEventVerbose$1278,?_sprintf+2
 20966  0024B0  C09C  F079         	movff	_receivePrintEventVerbose$1278+1,?_sprintf+3
 20967  0024B4  C1AC  F07A         	movff	_vscpClass,?_sprintf+4
 20968  0024B8  C1AD  F07B         	movff	_vscpClass+1,?_sprintf+5
 20969  0024BC  EC28  F00B         	call	_sprintf	;wreg free
 20970                           
 20971                           ; BSR set to: 0
 20972                           ;main.c: 1750: putsUSART(wrkbuf);
 20973  0024C0  0E01               	movlw	high _wrkbuf
 20974  0024C2  0100               	movlb	0	; () banked
 20975  0024C4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20976  0024C6  0E54               	movlw	low _wrkbuf
 20977  0024C8  6F61               	movwf	?_putsUSART& (0+255),b
 20978  0024CA  ECF6  F028         	call	_putsUSART	;wreg free
 20979                           
 20980                           ;main.c: 1751: putsUSART((char *) ",type=");
 20981  0024CE  0E7F               	movlw	high STR_145
 20982  0024D0  0100               	movlb	0	; () banked
 20983  0024D2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20984  0024D4  0E33               	movlw	low STR_145
 20985  0024D6  6F61               	movwf	?_putsUSART& (0+255),b
 20986  0024D8  ECF6  F028         	call	_putsUSART	;wreg free
 20987                           
 20988                           ;main.c: 1752: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpType);
 20989  0024DC  0101               	movlb	1	; () banked
 20990  0024DE  6700               	tstfsz	_bHex& (0+255),b
 20991  0024E0  D005               	goto	l11165
 20992                           
 20993                           ; BSR set to: 1
 20994  0024E2  0E7F               	movlw	high STR_57
 20995  0024E4  0100               	movlb	0	; () banked
 20996  0024E6  6F9E               	movwf	(_receivePrintEventVerbose$1283+1)& (0+255),b
 20997  0024E8  0EED               	movlw	low STR_57
 20998  0024EA  D004               	goto	L29
 20999  0024EC                     l11165:
 21000                           
 21001                           ; BSR set to: 1
 21002  0024EC  0E7F               	movlw	high STR_56
 21003  0024EE  0100               	movlb	0	; () banked
 21004  0024F0  6F9E               	movwf	(_receivePrintEventVerbose$1283+1)& (0+255),b
 21005  0024F2  0E64               	movlw	low STR_56
 21006  0024F4                     L29:
 21007  0024F4  6F9D               	movwf	_receivePrintEventVerbose$1283& (0+255),b
 21008                           
 21009                           ; BSR set to: 0
 21010  0024F6  0E01               	movlw	high _wrkbuf
 21011  0024F8  0100               	movlb	0	; () banked
 21012  0024FA  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21013  0024FC  0E54               	movlw	low _wrkbuf
 21014  0024FE  6F76               	movwf	?_sprintf& (0+255),b
 21015  002500  C09D  F078         	movff	_receivePrintEventVerbose$1283,?_sprintf+2
 21016  002504  C09E  F079         	movff	_receivePrintEventVerbose$1283+1,?_sprintf+3
 21017  002508  C1B1  F07A         	movff	_vscpType,?_sprintf+4
 21018  00250C  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21019  00250E  EC28  F00B         	call	_sprintf	;wreg free
 21020                           
 21021                           ; BSR set to: 0
 21022                           ;main.c: 1753: putsUSART(wrkbuf);
 21023  002512  0E01               	movlw	high _wrkbuf
 21024  002514  0100               	movlb	0	; () banked
 21025  002516  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21026  002518  0E54               	movlw	low _wrkbuf
 21027  00251A  6F61               	movwf	?_putsUSART& (0+255),b
 21028  00251C  ECF6  F028         	call	_putsUSART	;wreg free
 21029                           
 21030                           ;main.c: 1754: putsUSART((char *) ",nodeid=");
 21031  002520  0E7E               	movlw	high STR_148
 21032  002522  0100               	movlb	0	; () banked
 21033  002524  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21034  002526  0EC3               	movlw	low STR_148
 21035  002528  6F61               	movwf	?_putsUSART& (0+255),b
 21036  00252A  ECF6  F028         	call	_putsUSART	;wreg free
 21037                           
 21038                           ;main.c: 1755: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId);
 21039  00252E  0101               	movlb	1	; () banked
 21040  002530  6700               	tstfsz	_bHex& (0+255),b
 21041  002532  D005               	goto	l11177
 21042                           
 21043                           ; BSR set to: 1
 21044  002534  0E7F               	movlw	high STR_57
 21045  002536  0100               	movlb	0	; () banked
 21046  002538  6FA0               	movwf	(_receivePrintEventVerbose$1288+1)& (0+255),b
 21047  00253A  0EED               	movlw	low STR_57
 21048  00253C  D004               	goto	L30
 21049  00253E                     l11177:
 21050                           
 21051                           ; BSR set to: 1
 21052  00253E  0E7F               	movlw	high STR_56
 21053  002540  0100               	movlb	0	; () banked
 21054  002542  6FA0               	movwf	(_receivePrintEventVerbose$1288+1)& (0+255),b
 21055  002544  0E64               	movlw	low STR_56
 21056  002546                     L30:
 21057  002546  6F9F               	movwf	_receivePrintEventVerbose$1288& (0+255),b
 21058                           
 21059                           ; BSR set to: 0
 21060  002548  0E01               	movlw	high _wrkbuf
 21061  00254A  0100               	movlb	0	; () banked
 21062  00254C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21063  00254E  0E54               	movlw	low _wrkbuf
 21064  002550  6F76               	movwf	?_sprintf& (0+255),b
 21065  002552  C09F  F078         	movff	_receivePrintEventVerbose$1288,?_sprintf+2
 21066  002556  C0A0  F079         	movff	_receivePrintEventVerbose$1288+1,?_sprintf+3
 21067  00255A  C1AE  F07A         	movff	_vscpNodeId,?_sprintf+4
 21068  00255E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21069  002560  EC28  F00B         	call	_sprintf	;wreg free
 21070                           
 21071                           ; BSR set to: 0
 21072                           ;main.c: 1756: putsUSART(wrkbuf);
 21073  002564  0E01               	movlw	high _wrkbuf
 21074  002566  0100               	movlb	0	; () banked
 21075  002568  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21076  00256A  0E54               	movlw	low _wrkbuf
 21077  00256C  6F61               	movwf	?_putsUSART& (0+255),b
 21078  00256E  ECF6  F028         	call	_putsUSART	;wreg free
 21079                           
 21080                           ;main.c: 1757: putsUSART((char *) ",size=");
 21081  002572  0E7F               	movlw	high STR_151
 21082  002574  0100               	movlb	0	; () banked
 21083  002576  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21084  002578  0E3A               	movlw	low STR_151
 21085  00257A  6F61               	movwf	?_putsUSART& (0+255),b
 21086  00257C  ECF6  F028         	call	_putsUSART	;wreg free
 21087                           
 21088                           ;main.c: 1758: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpSize);
 21089  002580  0101               	movlb	1	; () banked
 21090  002582  6700               	tstfsz	_bHex& (0+255),b
 21091  002584  D005               	goto	l11189
 21092                           
 21093                           ; BSR set to: 1
 21094  002586  0E7F               	movlw	high STR_57
 21095  002588  0100               	movlb	0	; () banked
 21096  00258A  6FA2               	movwf	(_receivePrintEventVerbose$1293+1)& (0+255),b
 21097  00258C  0EED               	movlw	low STR_57
 21098  00258E  D004               	goto	L31
 21099  002590                     l11189:
 21100                           
 21101                           ; BSR set to: 1
 21102  002590  0E7F               	movlw	high STR_56
 21103  002592  0100               	movlb	0	; () banked
 21104  002594  6FA2               	movwf	(_receivePrintEventVerbose$1293+1)& (0+255),b
 21105  002596  0E64               	movlw	low STR_56
 21106  002598                     L31:
 21107  002598  6FA1               	movwf	_receivePrintEventVerbose$1293& (0+255),b
 21108                           
 21109                           ; BSR set to: 0
 21110  00259A  0E01               	movlw	high _wrkbuf
 21111  00259C  0100               	movlb	0	; () banked
 21112  00259E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21113  0025A0  0E54               	movlw	low _wrkbuf
 21114  0025A2  6F76               	movwf	?_sprintf& (0+255),b
 21115  0025A4  C0A1  F078         	movff	_receivePrintEventVerbose$1293,?_sprintf+2
 21116  0025A8  C0A2  F079         	movff	_receivePrintEventVerbose$1293+1,?_sprintf+3
 21117  0025AC  C1B0  F07A         	movff	_vscpSize,?_sprintf+4
 21118  0025B0  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21119  0025B2  EC28  F00B         	call	_sprintf	;wreg free
 21120                           
 21121                           ; BSR set to: 0
 21122                           ;main.c: 1759: putsUSART(wrkbuf);
 21123  0025B6  0E01               	movlw	high _wrkbuf
 21124  0025B8  0100               	movlb	0	; () banked
 21125  0025BA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21126  0025BC  0E54               	movlw	low _wrkbuf
 21127  0025BE  6F61               	movwf	?_putsUSART& (0+255),b
 21128  0025C0  ECF6  F028         	call	_putsUSART	;wreg free
 21129                           
 21130                           ;main.c: 1760: if (vscpSize > 0) {
 21131  0025C4  0101               	movlb	1	; () banked
 21132  0025C6  51B0               	movf	_vscpSize& (0+255),w,b
 21133  0025C8  E054               	bz	l11217
 21134                           
 21135                           ; BSR set to: 1
 21136                           ;main.c: 1761: putsUSART((char *) ",Data=");
 21137  0025CA  0E7F               	movlw	high STR_154
 21138  0025CC  0100               	movlb	0	; () banked
 21139  0025CE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21140  0025D0  0E2C               	movlw	low STR_154
 21141  0025D2  6F61               	movwf	?_putsUSART& (0+255),b
 21142  0025D4  ECF6  F028         	call	_putsUSART	;wreg free
 21143                           
 21144                           ;main.c: 1762: for (i = 0; i < vscpSize; i++) {
 21145  0025D8  0100               	movlb	0	; () banked
 21146  0025DA  6BA5               	clrf	receivePrintEventVerbose@i& (0+255),b
 21147  0025DC  D044               	goto	l11215
 21148  0025DE                     l907:
 21149                           
 21150                           ; BSR set to: 0
 21151                           ;main.c: 1764: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i]);
 21152  0025DE  0101               	movlb	1	; () banked
 21153  0025E0  6700               	tstfsz	_bHex& (0+255),b
 21154  0025E2  D005               	goto	l11203
 21155                           
 21156                           ; BSR set to: 1
 21157  0025E4  0E7F               	movlw	high STR_57
 21158  0025E6  0100               	movlb	0	; () banked
 21159  0025E8  6FA4               	movwf	(_receivePrintEventVerbose$1298+1)& (0+255),b
 21160  0025EA  0EED               	movlw	low STR_57
 21161  0025EC  D004               	goto	L32
 21162  0025EE                     l11203:
 21163                           
 21164                           ; BSR set to: 1
 21165  0025EE  0E7F               	movlw	high STR_56
 21166  0025F0  0100               	movlb	0	; () banked
 21167  0025F2  6FA4               	movwf	(_receivePrintEventVerbose$1298+1)& (0+255),b
 21168  0025F4  0E64               	movlw	low STR_56
 21169  0025F6                     L32:
 21170  0025F6  6FA3               	movwf	_receivePrintEventVerbose$1298& (0+255),b
 21171                           
 21172                           ; BSR set to: 0
 21173  0025F8  0E01               	movlw	high _wrkbuf
 21174  0025FA  0100               	movlb	0	; () banked
 21175  0025FC  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21176  0025FE  0E54               	movlw	low _wrkbuf
 21177  002600  6F76               	movwf	?_sprintf& (0+255),b
 21178  002602  C0A3  F078         	movff	_receivePrintEventVerbose$1298,?_sprintf+2
 21179  002606  C0A4  F079         	movff	_receivePrintEventVerbose$1298+1,?_sprintf+3
 21180  00260A  0EA4               	movlw	low _vscpData
 21181  00260C  25A5               	addwf	receivePrintEventVerbose@i& (0+255),w,b
 21182  00260E  6ED9               	movwf	fsr2l,c
 21183  002610  6ADA               	clrf	fsr2h,c
 21184  002612  0E01               	movlw	high _vscpData
 21185  002614  22DA               	addwfc	fsr2h,f,c
 21186  002616  50DF               	movf	indf2,w,c
 21187  002618  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 21188  00261A  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21189  00261C  EC28  F00B         	call	_sprintf	;wreg free
 21190                           
 21191                           ; BSR set to: 0
 21192                           ;main.c: 1765: putsUSART(wrkbuf);
 21193  002620  0E01               	movlw	high _wrkbuf
 21194  002622  0100               	movlb	0	; () banked
 21195  002624  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21196  002626  0E54               	movlw	low _wrkbuf
 21197  002628  6F61               	movwf	?_putsUSART& (0+255),b
 21198  00262A  ECF6  F028         	call	_putsUSART	;wreg free
 21199                           
 21200                           ;main.c: 1766: if (i < (vscpSize - 1)) {
 21201  00262E  0EFF               	movlw	255
 21202  002630  0101               	movlb	1	; () banked
 21203  002632  25B0               	addwf	_vscpSize& (0+255),w,b
 21204  002634  0100               	movlb	0	; () banked
 21205  002636  6F94               	movwf	??_receivePrintEventVerbose& (0+255),b
 21206  002638  6B95               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 21207  00263A  0EFF               	movlw	255
 21208  00263C  2395               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 21209  00263E  51A5               	movf	receivePrintEventVerbose@i& (0+255),w,b
 21210  002640  6F96               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 21211  002642  6B97               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 21212  002644  5197               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 21213  002646  0A80               	xorlw	128
 21214  002648  6F98               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 21215  00264A  5194               	movf	??_receivePrintEventVerbose& (0+255),w,b
 21216  00264C  5D96               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 21217  00264E  5195               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 21218  002650  0A80               	xorlw	128
 21219  002652  5998               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 21220  002654  E206               	bc	l11213
 21221                           
 21222                           ; BSR set to: 0
 21223                           ;main.c: 1767: putsUSART((char *) ",");
 21224  002656  0E7F               	movlw	high STR_30
 21225  002658  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21226  00265A  0EF4               	movlw	low STR_30
 21227  00265C  6F61               	movwf	?_putsUSART& (0+255),b
 21228  00265E  ECF6  F028         	call	_putsUSART	;wreg free
 21229  002662                     l11213:
 21230  002662  0100               	movlb	0	; () banked
 21231  002664  2BA5               	incf	receivePrintEventVerbose@i& (0+255),f,b
 21232  002666                     l11215:
 21233                           
 21234                           ; BSR set to: 0
 21235  002666  0101               	movlb	1	; () banked
 21236  002668  51B0               	movf	_vscpSize& (0+255),w,b
 21237  00266A  0100               	movlb	0	; () banked
 21238  00266C  5DA5               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 21239  00266E  E208               	bc	l914
 21240  002670  D7B6               	goto	l907
 21241  002672                     l11217:
 21242                           
 21243                           ; BSR set to: 1
 21244                           ;main.c: 1771: putsUSART((char *) ",Data=none");
 21245  002672  0E7E               	movlw	high STR_158
 21246  002674  0100               	movlb	0	; () banked
 21247  002676  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21248  002678  0E91               	movlw	low STR_158
 21249  00267A  6F61               	movwf	?_putsUSART& (0+255),b
 21250  00267C  ECF6  F028         	call	_putsUSART	;wreg free
 21251  002680                     l914:
 21252                           
 21253                           ;main.c: 1772: }
 21254                           ;main.c: 1773: putsUSART((char *) ">\r\n");
 21255  002680  0E7F               	movlw	high STR_159
 21256  002682  0100               	movlb	0	; () banked
 21257  002684  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21258  002686  0ED4               	movlw	low STR_159
 21259  002688  6F61               	movwf	?_putsUSART& (0+255),b
 21260  00268A  ECF6  F028         	call	_putsUSART	;wreg free
 21261                           
 21262                           ;main.c: 1774: return 1;
 21263  00268E  0E01               	movlw	1
 21264  002690  D001               	goto	l915
 21265  002692                     l11223:
 21266                           
 21267                           ; BSR set to: 0
 21268                           ;main.c: 1775: }
 21269                           ;main.c: 1777: return 0;
 21270  002692  0E00               	movlw	0
 21271  002694                     l915:
 21272  002694  0012               	return	
 21273  002696                     __end_of_receivePrintEventVerbose:
 21274                           	opt stack 0
 21275                           tblptru	equ	0xFF8
 21276                           tblptrh	equ	0xFF7
 21277                           tblptrl	equ	0xFF6
 21278                           tablat	equ	0xFF5
 21279                           prodh	equ	0xFF4
 21280                           prodl	equ	0xFF3
 21281                           intcon	equ	0xFF2
 21282                           indf0	equ	0xFEF
 21283                           postinc0	equ	0xFEE
 21284                           fsr0h	equ	0xFEA
 21285                           fsr0l	equ	0xFE9
 21286                           wreg	equ	0xFE8
 21287                           indf1	equ	0xFE7
 21288                           postinc1	equ	0xFE6
 21289                           postdec1	equ	0xFE5
 21290                           fsr1h	equ	0xFE2
 21291                           fsr1l	equ	0xFE1
 21292                           indf2	equ	0xFDF
 21293                           postinc2	equ	0xFDE
 21294                           postdec2	equ	0xFDD
 21295                           plusw2	equ	0xFDB
 21296                           fsr2h	equ	0xFDA
 21297                           fsr2l	equ	0xFD9
 21298                           status	equ	0xFD8
 21299                           
 21300 ;; *************** function _getVSCPFrame *****************
 21301 ;; Defined at:
 21302 ;;		line 2938 in file "main.c"
 21303 ;; Parameters:    Size  Location     Type
 21304 ;;  pvscpclass      2   18[BANK0 ] PTR unsigned short 
 21305 ;;		 -> vscpClass(2), 
 21306 ;;  pvscptype       2   20[BANK0 ] PTR unsigned char 
 21307 ;;		 -> vscpType(1), 
 21308 ;;  pNodeId         2   22[BANK0 ] PTR unsigned char 
 21309 ;;		 -> vscpNodeId(1), 
 21310 ;;  pPriority       2   24[BANK0 ] PTR unsigned char 
 21311 ;;		 -> vscpPriority(1), 
 21312 ;;  pSize           2   26[BANK0 ] PTR unsigned char 
 21313 ;;		 -> vscpSize(1), 
 21314 ;;  pData           2   28[BANK0 ] PTR unsigned char 
 21315 ;;		 -> vscpData(8), 
 21316 ;; Auto vars:     Size  Location     Type
 21317 ;;  id              4   34[BANK0 ] unsigned long 
 21318 ;; Return value:  Size  Location     Type
 21319 ;;                  1    wreg      unsigned char 
 21320 ;; Registers used:
 21321 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21322 ;; Tracked objects:
 21323 ;;		On entry : F/0
 21324 ;;		On exit  : F/0
 21325 ;;		Unchanged: 0/0
 21326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21327 ;;      Params:         0      12       0       0       0       0       0
 21328 ;;      Locals:         0       4       0       0       0       0       0
 21329 ;;      Temps:          0       4       0       0       0       0       0
 21330 ;;      Totals:         0      20       0       0       0       0       0
 21331 ;;Total ram usage:       20 bytes
 21332 ;; Hardware stack levels used:    1
 21333 ;; Hardware stack levels required when called:    5
 21334 ;; This function calls:
 21335 ;;		_getCANFrame
 21336 ;; This function is called by:
 21337 ;;		_receivePrintEventVerbose
 21338 ;;		_readRegister
 21339 ;;		_readRegisterExtended
 21340 ;;		_writeRegisterExtended
 21341 ;; This function uses a non-reentrant model
 21342 ;;
 21343                           
 21344                           	psect	text53
 21345  004B8A                     __ptext53:
 21346                           	opt stack 0
 21347  004B8A                     _getVSCPFrame:
 21348                           	opt stack 22
 21349                           
 21350                           ; BSR set to: 0
 21351                           ;main.c: 2939: uint32_t id;
 21352                           ;main.c: 2941: if (!getCANFrame(&id, pSize, pData)) {
 21353                           
 21354                           ;incstack = 0
 21355                           ;incstack = 0
 21356  004B8A  C07A  F06D         	movff	getVSCPFrame@pSize,?_getCANFrame
 21357  004B8E  C07B  F06E         	movff	getVSCPFrame@pSize+1,?_getCANFrame+1
 21358  004B92  C07C  F06F         	movff	getVSCPFrame@pData,?_getCANFrame+2
 21359  004B96  C07D  F070         	movff	getVSCPFrame@pData+1,?_getCANFrame+3
 21360  004B9A  0E82               	movlw	getVSCPFrame@id& (0+255)
 21361  004B9C  EC84  F026         	call	_getCANFrame
 21362  004BA0  0900               	iorlw	0
 21363  004BA2  E102               	bnz	l12571
 21364                           
 21365                           ; BSR set to: 0
 21366                           ;main.c: 2942: return 0;
 21367  004BA4  0E00               	movlw	0
 21368  004BA6  D033               	goto	l1255
 21369  004BA8                     l12571:
 21370                           
 21371                           ; BSR set to: 0
 21372                           ;main.c: 2943: }
 21373                           ;main.c: 2945: *pNodeId = id & 0x0ff;
 21374  004BA8  C076  FFD9         	movff	getVSCPFrame@pNodeId,fsr2l
 21375  004BAC  C077  FFDA         	movff	getVSCPFrame@pNodeId+1,fsr2h
 21376  004BB0  C082  FFDF         	movff	getVSCPFrame@id,indf2
 21377                           
 21378                           ;main.c: 2946: *pvscptype = (id >> 8) & 0xff;
 21379  004BB4  C074  FFD9         	movff	getVSCPFrame@pvscptype,fsr2l
 21380  004BB8  C075  FFDA         	movff	getVSCPFrame@pvscptype+1,fsr2h
 21381  004BBC  C083  FFDF         	movff	getVSCPFrame@id+1,indf2
 21382                           
 21383                           ; BSR set to: 0
 21384                           ;main.c: 2947: *pvscpclass = (id >> 16) & 0x1ff;
 21385  004BC0  0100               	movlb	0	; () banked
 21386  004BC2  5184               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 21387  004BC4  6F7E               	movwf	??_getVSCPFrame& (0+255),b
 21388  004BC6  0E01               	movlw	1
 21389  004BC8  1585               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 21390  004BCA  6F7F               	movwf	(??_getVSCPFrame+1)& (0+255),b
 21391  004BCC  C072  FFD9         	movff	getVSCPFrame@pvscpclass,fsr2l
 21392  004BD0  C073  FFDA         	movff	getVSCPFrame@pvscpclass+1,fsr2h
 21393  004BD4  C07E  FFDE         	movff	??_getVSCPFrame,postinc2
 21394  004BD8  C07F  FFDD         	movff	??_getVSCPFrame+1,postdec2
 21395                           
 21396                           ; BSR set to: 0
 21397                           ;main.c: 2948: *pPriority = (uint16_t) (0x07 & (id >> 26));
 21398  004BDC  C082  F07E         	movff	getVSCPFrame@id,??_getVSCPFrame
 21399  004BE0  C083  F07F         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 21400  004BE4  C084  F080         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 21401  004BE8  C085  F081         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 21402  004BEC  0E1B               	movlw	27
 21403  004BEE  D005               	goto	u16270
 21404  004BF0                     u16275:
 21405  004BF0  90D8               	bcf	status,0,c
 21406  004BF2  3381               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 21407  004BF4  3380               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 21408  004BF6  337F               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 21409  004BF8  337E               	rrcf	??_getVSCPFrame& (0+255),f,b
 21410  004BFA                     u16270:
 21411  004BFA  2EE8               	decfsz	wreg,f,c
 21412  004BFC  D7F9               	goto	u16275
 21413  004BFE  517E               	movf	??_getVSCPFrame& (0+255),w,b
 21414  004C00  0B07               	andlw	7
 21415  004C02  C078  FFD9         	movff	getVSCPFrame@pPriority,fsr2l
 21416  004C06  C079  FFDA         	movff	getVSCPFrame@pPriority+1,fsr2h
 21417  004C0A  6EDF               	movwf	indf2,c
 21418                           
 21419                           ; BSR set to: 0
 21420                           ;main.c: 2950: return 1;
 21421  004C0C  0E01               	movlw	1
 21422  004C0E                     l1255:
 21423                           
 21424                           ; BSR set to: 0
 21425  004C0E  0012               	return	
 21426  004C10                     __end_of_getVSCPFrame:
 21427                           	opt stack 0
 21428                           tblptru	equ	0xFF8
 21429                           tblptrh	equ	0xFF7
 21430                           tblptrl	equ	0xFF6
 21431                           tablat	equ	0xFF5
 21432                           prodh	equ	0xFF4
 21433                           prodl	equ	0xFF3
 21434                           intcon	equ	0xFF2
 21435                           indf0	equ	0xFEF
 21436                           postinc0	equ	0xFEE
 21437                           fsr0h	equ	0xFEA
 21438                           fsr0l	equ	0xFE9
 21439                           wreg	equ	0xFE8
 21440                           indf1	equ	0xFE7
 21441                           postinc1	equ	0xFE6
 21442                           postdec1	equ	0xFE5
 21443                           fsr1h	equ	0xFE2
 21444                           fsr1l	equ	0xFE1
 21445                           indf2	equ	0xFDF
 21446                           postinc2	equ	0xFDE
 21447                           postdec2	equ	0xFDD
 21448                           plusw2	equ	0xFDB
 21449                           fsr2h	equ	0xFDA
 21450                           fsr2l	equ	0xFD9
 21451                           status	equ	0xFD8
 21452                           
 21453 ;; *************** function _getCANFrame *****************
 21454 ;; Defined at:
 21455 ;;		line 2974 in file "main.c"
 21456 ;; Parameters:    Size  Location     Type
 21457 ;;  pid             1    wreg     PTR unsigned long 
 21458 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21459 ;;  pdlc            2   13[BANK0 ] PTR unsigned char 
 21460 ;;		 -> receiveSendEventSLCAN@dlc(1), receiveSendMultiEventCANAL@dlc(1), receiveSendEventCANAL@dlc(1), vscpSize(1), 
 21461 ;;  pdata           2   15[BANK0 ] PTR unsigned char 
 21462 ;;		 -> receiveSendMultiEventCANAL@data(8), receiveSendEventCANAL@data(8), vscpData(8), 
 21463 ;; Auto vars:     Size  Location     Type
 21464 ;;  pid             1   17[BANK0 ] PTR unsigned long 
 21465 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21466 ;; Return value:  Size  Location     Type
 21467 ;;                  1    wreg      unsigned char 
 21468 ;; Registers used:
 21469 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21470 ;; Tracked objects:
 21471 ;;		On entry : F/0
 21472 ;;		On exit  : F/0
 21473 ;;		Unchanged: 0/0
 21474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21475 ;;      Params:         0       4       0       0       0       0       0
 21476 ;;      Locals:         0       1       0       0       0       0       0
 21477 ;;      Temps:          0       0       0       0       0       0       0
 21478 ;;      Totals:         0       5       0       0       0       0       0
 21479 ;;Total ram usage:        5 bytes
 21480 ;; Hardware stack levels used:    1
 21481 ;; Hardware stack levels required when called:    4
 21482 ;; This function calls:
 21483 ;;		_fifo_read
 21484 ;; This function is called by:
 21485 ;;		_receiveSendEventCANAL
 21486 ;;		_receiveSendMultiEventCANAL
 21487 ;;		_receiveSendEventSLCAN
 21488 ;;		_getVSCPFrame
 21489 ;; This function uses a non-reentrant model
 21490 ;;
 21491                           
 21492                           	psect	text54
 21493  004D08                     __ptext54:
 21494                           	opt stack 0
 21495  004D08                     _getCANFrame:
 21496                           	opt stack 24
 21497                           
 21498                           ; BSR set to: 0
 21499                           ;incstack = 0
 21500                           ;incstack = 0
 21501                           ;getCANFrame@pid stored from wreg
 21502  004D08  CFE8 F071          	movff	wreg,getCANFrame@pid
 21503                           
 21504                           ; BSR set to: 0
 21505                           ;main.c: 2995: if ( canrxcount ) {
 21506  004D0C  51F0               	movf	_canrxcount& (0+255),w,b	;volatile
 21507  004D0E  E00F               	bz	l12589
 21508                           
 21509                           ; BSR set to: 0
 21510                           ;main.c: 2997: (INTCONbits.GIE = 0);
 21511  004D10  9EF2               	bcf	intcon,7,c	;volatile
 21512                           
 21513                           ; BSR set to: 0
 21514                           ;main.c: 3000: if ( 4 != fifo_read( &canInputFifo, (uint8_t *)pid, 4 ) ) {
 21515  004D12  C071  F060         	movff	getCANFrame@pid,?_fifo_read
 21516  004D16  6B61               	clrf	(?_fifo_read+1)& (0+255),b
 21517  004D18  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21518  004D1A  0E04               	movlw	4
 21519  004D1C  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 21520  004D1E  0E40               	movlw	_canInputFifo& (0+255)
 21521  004D20  EC9C  F021         	call	_fifo_read
 21522  004D24  5160               	movf	?_fifo_read& (0+255),w,b
 21523  004D26  0A04               	xorlw	4
 21524  004D28  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21525  004D2A  E003               	bz	l12593
 21526  004D2C                     l12587:
 21527                           
 21528                           ; BSR set to: 0
 21529                           ;main.c: 3001: (INTCONbits.GIE = 1);
 21530  004D2C  8EF2               	bsf	intcon,7,c	;volatile
 21531  004D2E                     l12589:
 21532                           
 21533                           ; BSR set to: 0
 21534                           ;main.c: 3002: return 0;
 21535  004D2E  0E00               	movlw	0
 21536  004D30  D026               	goto	l1264
 21537  004D32                     l12593:
 21538                           
 21539                           ; BSR set to: 0
 21540                           ;main.c: 3003: }
 21541                           ;main.c: 3006: if ( 1 != fifo_read( &canInputFifo, pdlc, 1 ) ) {
 21542  004D32  C06D  F060         	movff	getCANFrame@pdlc,?_fifo_read
 21543  004D36  C06E  F061         	movff	getCANFrame@pdlc+1,?_fifo_read+1
 21544  004D3A  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21545  004D3C  0E01               	movlw	1
 21546  004D3E  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 21547  004D40  0E40               	movlw	_canInputFifo& (0+255)
 21548  004D42  EC9C  F021         	call	_fifo_read
 21549  004D46  0560               	decf	?_fifo_read& (0+255),w,b
 21550  004D48  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21551  004D4A  E1F0               	bnz	l12587
 21552                           
 21553                           ; BSR set to: 0
 21554                           ;main.c: 3009: }
 21555                           ;main.c: 3012: if ( *pdlc != fifo_read( &canInputFifo, pdata, *pdlc ) ) {
 21556  004D4C  C06F  F060         	movff	getCANFrame@pdata,?_fifo_read
 21557  004D50  C070  F061         	movff	getCANFrame@pdata+1,?_fifo_read+1
 21558  004D54  C06D  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21559  004D58  C06E  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21560  004D5C  50DF               	movf	indf2,w,c
 21561  004D5E  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 21562  004D60  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21563  004D62  0E40               	movlw	_canInputFifo& (0+255)
 21564  004D64  EC9C  F021         	call	_fifo_read
 21565  004D68  C06D  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21566  004D6C  C06E  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21567  004D70  50DF               	movf	indf2,w,c
 21568  004D72  1960               	xorwf	?_fifo_read& (0+255),w,b
 21569  004D74  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21570  004D76  E1DA               	bnz	l12587
 21571                           
 21572                           ; BSR set to: 0
 21573                           ;main.c: 3015: }
 21574                           ;main.c: 3017: canrxcount--;
 21575  004D78  07F0               	decf	_canrxcount& (0+255),f,b	;volatile
 21576                           
 21577                           ; BSR set to: 0
 21578                           ;main.c: 3019: (INTCONbits.GIE = 1);
 21579  004D7A  8EF2               	bsf	intcon,7,c	;volatile
 21580                           
 21581                           ; BSR set to: 0
 21582                           ;main.c: 3021: return 1;
 21583  004D7C  0E01               	movlw	1
 21584  004D7E                     l1264:
 21585                           
 21586                           ; BSR set to: 0
 21587  004D7E  0012               	return	
 21588  004D80                     __end_of_getCANFrame:
 21589                           	opt stack 0
 21590                           tblptru	equ	0xFF8
 21591                           tblptrh	equ	0xFF7
 21592                           tblptrl	equ	0xFF6
 21593                           tablat	equ	0xFF5
 21594                           prodh	equ	0xFF4
 21595                           prodl	equ	0xFF3
 21596                           intcon	equ	0xFF2
 21597                           indf0	equ	0xFEF
 21598                           postinc0	equ	0xFEE
 21599                           fsr0h	equ	0xFEA
 21600                           fsr0l	equ	0xFE9
 21601                           wreg	equ	0xFE8
 21602                           indf1	equ	0xFE7
 21603                           postinc1	equ	0xFE6
 21604                           postdec1	equ	0xFE5
 21605                           fsr1h	equ	0xFE2
 21606                           fsr1l	equ	0xFE1
 21607                           indf2	equ	0xFDF
 21608                           postinc2	equ	0xFDE
 21609                           postdec2	equ	0xFDD
 21610                           plusw2	equ	0xFDB
 21611                           fsr2h	equ	0xFDA
 21612                           fsr2l	equ	0xFD9
 21613                           status	equ	0xFD8
 21614                           
 21615 ;; *************** function _fifo_read *****************
 21616 ;; Defined at:
 21617 ;;		line 29 in file "fifo.c"
 21618 ;; Parameters:    Size  Location     Type
 21619 ;;  f               1    wreg     PTR struct .
 21620 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 21621 ;;  buf             2    0[BANK0 ] PTR void 
 21622 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21623 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21624 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21625 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21626 ;;  nbytes          2    2[BANK0 ] unsigned short 
 21627 ;; Auto vars:     Size  Location     Type
 21628 ;;  f               1   12[BANK0 ] PTR struct .
 21629 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 21630 ;;  i               2   10[BANK0 ] unsigned short 
 21631 ;;  p               2    8[BANK0 ] PTR unsigned char 
 21632 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21633 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21634 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21635 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21636 ;; Return value:  Size  Location     Type
 21637 ;;                  2    0[BANK0 ] unsigned short 
 21638 ;; Registers used:
 21639 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 21640 ;; Tracked objects:
 21641 ;;		On entry : F/0
 21642 ;;		On exit  : F/0
 21643 ;;		Unchanged: 0/0
 21644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21645 ;;      Params:         0       4       0       0       0       0       0
 21646 ;;      Locals:         0       5       0       0       0       0       0
 21647 ;;      Temps:          0       4       0       0       0       0       0
 21648 ;;      Totals:         0      13       0       0       0       0       0
 21649 ;;Total ram usage:       13 bytes
 21650 ;; Hardware stack levels used:    1
 21651 ;; Hardware stack levels required when called:    3
 21652 ;; This function calls:
 21653 ;;		Nothing
 21654 ;; This function is called by:
 21655 ;;		_main
 21656 ;;		_doModeVerbose
 21657 ;;		_doModeVscp
 21658 ;;		_doModeSLCAN
 21659 ;;		_getCANFrame
 21660 ;; This function uses a non-reentrant model
 21661 ;;
 21662                           
 21663                           	psect	text55
 21664  004338                     __ptext55:
 21665                           	opt stack 0
 21666  004338                     _fifo_read:
 21667                           	opt stack 24
 21668                           
 21669                           ; BSR set to: 0
 21670                           ;incstack = 0
 21671                           ;incstack = 0
 21672                           ;fifo_read@f stored from wreg
 21673  004338  CFE8 F06C          	movff	wreg,fifo_read@f
 21674                           
 21675                           ; BSR set to: 0
 21676                           ;fifo.c: 30: uint16_t i;
 21677                           ;fifo.c: 31: uint8_t *p;
 21678                           ;fifo.c: 32: p = buf;
 21679  00433C  C060  F068         	movff	fifo_read@buf,fifo_read@p
 21680  004340  C061  F069         	movff	fifo_read@buf+1,fifo_read@p+1
 21681                           
 21682                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 21683  004344  6B6A               	clrf	fifo_read@i& (0+255),b
 21684  004346  6B6B               	clrf	(fifo_read@i+1)& (0+255),b
 21685  004348  D03E               	goto	l10029
 21686  00434A                     l10015:
 21687                           
 21688                           ; BSR set to: 0
 21689                           ;fifo.c: 36: if (f->tail != f->head) {
 21690  00434A  516C               	movf	fifo_read@f& (0+255),w,b
 21691  00434C  6ED9               	movwf	fsr2l,c
 21692  00434E  6ADA               	clrf	fsr2h,c
 21693  004350  0E02               	movlw	2
 21694  004352  D843               	call	PL34	;call to abstracted procedure
 21695  004354  B4D8               	btfsc	status,2,c
 21696  004356  18E7               	xorwf	indf1,w,c
 21697  004358  E02F               	bz	l1514
 21698                           
 21699                           ; BSR set to: 0
 21700                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 21701  00435A  D84E               	call	PL104	;call to abstracted procedure
 21702  00435C  CFDE F064          	movff	postinc2,??_fifo_read
 21703  004360  CFDD F065          	movff	postdec2,??_fifo_read+1
 21704  004364  516C               	movf	fifo_read@f& (0+255),w,b
 21705  004366  6ED9               	movwf	fsr2l,c
 21706  004368  6ADA               	clrf	fsr2h,c
 21707  00436A  CFDE F066          	movff	postinc2,??_fifo_read+2
 21708  00436E  CFDD F067          	movff	postdec2,??_fifo_read+3
 21709  004372  5164               	movf	??_fifo_read& (0+255),w,b
 21710  004374  2566               	addwf	(??_fifo_read+2)& (0+255),w,b
 21711  004376  6ED9               	movwf	fsr2l,c
 21712  004378  5165               	movf	(??_fifo_read+1)& (0+255),w,b
 21713  00437A  2167               	addwfc	(??_fifo_read+3)& (0+255),w,b
 21714  00437C  6EDA               	movwf	fsr2h,c
 21715  00437E  C068  FFE1         	movff	fifo_read@p,fsr1l
 21716  004382  C069  FFE2         	movff	fifo_read@p+1,fsr1h
 21717  004386  CFDF FFE7          	movff	indf2,indf1
 21718                           
 21719                           ; BSR set to: 0
 21720  00438A  4B68               	infsnz	fifo_read@p& (0+255),f,b
 21721  00438C  2B69               	incf	(fifo_read@p+1)& (0+255),f,b
 21722                           
 21723                           ; BSR set to: 0
 21724                           ;fifo.c: 38: f->tail++;
 21725  00438E  516C               	movf	fifo_read@f& (0+255),w,b
 21726  004390  6ED9               	movwf	fsr2l,c
 21727  004392  6ADA               	clrf	fsr2h,c
 21728  004394  0E04               	movlw	4
 21729  004396  26D9               	addwf	fsr2l,f,c
 21730  004398  6ADA               	clrf	fsr2h,c
 21731  00439A  2ADE               	incf	postinc2,f,c
 21732  00439C  0E00               	movlw	0
 21733  00439E  22DD               	addwfc	postdec2,f,c
 21734                           
 21735                           ; BSR set to: 0
 21736                           ;fifo.c: 39: if (f->tail == f->size) {
 21737  0043A0  516C               	movf	fifo_read@f& (0+255),w,b
 21738  0043A2  6ED9               	movwf	fsr2l,c
 21739  0043A4  6ADA               	clrf	fsr2h,c
 21740  0043A6  0E06               	movlw	6
 21741  0043A8  D818               	call	PL34	;call to abstracted procedure
 21742  0043AA  B4D8               	btfsc	status,2,c
 21743  0043AC  18E7               	xorwf	indf1,w,c
 21744  0043AE  E109               	bnz	l10027
 21745                           
 21746                           ; BSR set to: 0
 21747                           ;fifo.c: 40: f->tail = 0;
 21748  0043B0  D823               	call	PL104	;call to abstracted procedure
 21749  0043B2  6ADE               	clrf	postinc2,c
 21750  0043B4  6ADD               	clrf	postdec2,c
 21751  0043B6  D005               	goto	l10027
 21752  0043B8                     l1514:
 21753                           
 21754                           ; BSR set to: 0
 21755                           ;fifo.c: 43: else {
 21756                           ;fifo.c: 44: return i;
 21757  0043B8  C06A  F060         	movff	fifo_read@i,?_fifo_read
 21758  0043BC  C06B  F061         	movff	fifo_read@i+1,?_fifo_read+1
 21759  0043C0  D00B               	goto	l1517
 21760  0043C2                     l10027:
 21761                           
 21762                           ; BSR set to: 0
 21763  0043C2  4B6A               	infsnz	fifo_read@i& (0+255),f,b
 21764  0043C4  2B6B               	incf	(fifo_read@i+1)& (0+255),f,b
 21765  0043C6                     l10029:
 21766                           
 21767                           ; BSR set to: 0
 21768  0043C6  5162               	movf	fifo_read@nbytes& (0+255),w,b
 21769  0043C8  5D6A               	subwf	fifo_read@i& (0+255),w,b
 21770  0043CA  5163               	movf	(fifo_read@nbytes+1)& (0+255),w,b
 21771  0043CC  596B               	subwfb	(fifo_read@i+1)& (0+255),w,b
 21772  0043CE  E3BD               	bnc	l10015
 21773                           
 21774                           ; BSR set to: 0
 21775                           ;fifo.c: 45: }
 21776                           ;fifo.c: 47: }
 21777                           ;fifo.c: 49: return nbytes;
 21778  0043D0  C062  F060         	movff	fifo_read@nbytes,?_fifo_read
 21779  0043D4  C063  F061         	movff	fifo_read@nbytes+1,?_fifo_read+1
 21780  0043D8                     l1517:
 21781                           
 21782                           ; BSR set to: 0
 21783  0043D8  0012               	return	
 21784  0043DA                     __end_of_fifo_read:
 21785                           	opt stack 0
 21786  0043DA                     PL34:
 21787                           	opt stack 24
 21788  0043DA  26D9               	addwf	fsr2l,f,c
 21789  0043DC  6ADA               	clrf	fsr2h,c
 21790  0043DE  516C               	movf	fifo_read@f& (0+255),w,b
 21791  0043E0  6EE1               	movwf	fsr1l,c
 21792  0043E2  6AE2               	clrf	fsr1h,c
 21793  0043E4  0E04               	movlw	4
 21794  0043E6  26E1               	addwf	fsr1l,f,c
 21795  0043E8  6AE2               	clrf	fsr1h,c
 21796  0043EA  52E6               	movf	postinc1,f,c
 21797  0043EC  52DE               	movf	postinc2,f,c
 21798  0043EE  50DD               	movf	postdec2,w,c
 21799  0043F0  18E5               	xorwf	postdec1,w,c
 21800  0043F2  CFDF FFE8          	movff	indf2,wreg
 21801  0043F6  0012               	return	
 21802  0043F8                     __end_ofPL34:
 21803                           	opt stack 0
 21804  0043F8                     PL104:
 21805                           	opt stack 24
 21806  0043F8  516C               	movf	fifo_read@f& (0+255),w,b
 21807  0043FA  6ED9               	movwf	fsr2l,c
 21808  0043FC  6ADA               	clrf	fsr2h,c
 21809  0043FE  0E04               	movlw	4
 21810  004400  26D9               	addwf	fsr2l,f,c
 21811  004402  6ADA               	clrf	fsr2h,c
 21812  004404  0012               	return	
 21813  004406                     __end_ofPL104:
 21814                           	opt stack 0
 21815                           tblptru	equ	0xFF8
 21816                           tblptrh	equ	0xFF7
 21817                           tblptrl	equ	0xFF6
 21818                           tablat	equ	0xFF5
 21819                           prodh	equ	0xFF4
 21820                           prodl	equ	0xFF3
 21821                           intcon	equ	0xFF2
 21822                           indf0	equ	0xFEF
 21823                           postinc0	equ	0xFEE
 21824                           fsr0h	equ	0xFEA
 21825                           fsr0l	equ	0xFE9
 21826                           wreg	equ	0xFE8
 21827                           indf1	equ	0xFE7
 21828                           postinc1	equ	0xFE6
 21829                           postdec1	equ	0xFE5
 21830                           fsr1h	equ	0xFE2
 21831                           fsr1l	equ	0xFE1
 21832                           indf2	equ	0xFDF
 21833                           postinc2	equ	0xFDE
 21834                           postdec2	equ	0xFDD
 21835                           plusw2	equ	0xFDB
 21836                           fsr2h	equ	0xFDA
 21837                           fsr2l	equ	0xFD9
 21838                           status	equ	0xFD8
 21839                           
 21840 ;; *************** function _sprintf *****************
 21841 ;; Defined at:
 21842 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 21843 ;; Parameters:    Size  Location     Type
 21844 ;;  sp              2   22[BANK0 ] PTR unsigned char 
 21845 ;;		 -> wrkbuf(80), 
 21846 ;;  f               2   24[BANK0 ] PTR const unsigned char 
 21847 ;;		 -> STR_201(3), STR_200(7), STR_194(3), STR_193(7), 
 21848 ;;		 -> STR_190(4), STR_189(8), STR_186(4), STR_185(8), 
 21849 ;;		 -> STR_182(4), STR_181(8), STR_178(4), STR_177(8), 
 21850 ;;		 -> STR_174(4), STR_173(7), STR_170(4), STR_169(7), 
 21851 ;;		 -> STR_166(4), STR_165(7), STR_162(4), STR_161(7), 
 21852 ;;		 -> STR_156(3), STR_155(7), STR_153(3), STR_152(7), 
 21853 ;;		 -> STR_150(3), STR_149(7), STR_147(3), STR_146(7), 
 21854 ;;		 -> STR_144(3), STR_143(7), STR_141(3), STR_140(7), 
 21855 ;;		 -> STR_84(3), STR_83(7), STR_68(3), STR_67(7), 
 21856 ;;		 -> STR_66(3), STR_65(7), STR_62(3), STR_61(7), 
 21857 ;;		 -> STR_59(3), STR_58(7), STR_57(3), STR_56(7), 
 21858 ;; Auto vars:     Size  Location     Type
 21859 ;;  idx             1   33[BANK0 ] unsigned char 
 21860 ;;  _val            4   45[BANK0 ] struct .
 21861 ;;  flag            2   50[BANK0 ] unsigned short 
 21862 ;;  width           2   43[BANK0 ] int 
 21863 ;;  prec            2   41[BANK0 ] int 
 21864 ;;  c               1   49[BANK0 ] char 
 21865 ;;  ap              1   40[BANK0 ] PTR void [1]
 21866 ;;		 -> ?_sprintf(2), 
 21867 ;; Return value:  Size  Location     Type
 21868 ;;                  2   22[BANK0 ] int 
 21869 ;; Registers used:
 21870 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21871 ;; Tracked objects:
 21872 ;;		On entry : F/0
 21873 ;;		On exit  : F/0
 21874 ;;		Unchanged: 0/0
 21875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21876 ;;      Params:         0       8       0       0       0       0       0
 21877 ;;      Locals:         0      19       0       0       0       0       0
 21878 ;;      Temps:          0       3       0       0       0       0       0
 21879 ;;      Totals:         0      30       0       0       0       0       0
 21880 ;;Total ram usage:       30 bytes
 21881 ;; Hardware stack levels used:    1
 21882 ;; Hardware stack levels required when called:    4
 21883 ;; This function calls:
 21884 ;;		_isdigit
 21885 ;;		___lldiv
 21886 ;;		___llmod
 21887 ;;		___wmul
 21888 ;; This function is called by:
 21889 ;;		_doModeVerbose
 21890 ;;		_receivePrintEventVerbose
 21891 ;;		_printStatistics
 21892 ;;		_printErrors
 21893 ;; This function uses a non-reentrant model
 21894 ;;
 21895                           
 21896                           	psect	text56
 21897  001650                     __ptext56:
 21898                           	opt stack 0
 21899  001650                     _sprintf:
 21900                           	opt stack 25
 21901                           
 21902                           ; BSR set to: 0
 21903                           ;doprnt.c: 494: va_list ap;
 21904                           ;doprnt.c: 499: signed char c;
 21905                           ;doprnt.c: 501: int width;
 21906                           ;doprnt.c: 504: int prec;
 21907                           ;doprnt.c: 508: unsigned short flag;
 21908                           ;doprnt.c: 527: union {
 21909                           ;doprnt.c: 528: unsigned long _val;
 21910                           ;doprnt.c: 529: struct {
 21911                           ;doprnt.c: 530: const char * _cp;
 21912                           ;doprnt.c: 531: unsigned _len;
 21913                           ;doprnt.c: 532: } _str;
 21914                           ;doprnt.c: 533: } _val;
 21915                           ;doprnt.c: 542: *ap = __va_start();
 21916                           
 21917                           ; BSR set to: 0
 21918                           ;incstack = 0
 21919                           ;incstack = 0
 21920  001650  0E7A               	movlw	low (?_sprintf+4)
 21921  001652  6F88               	movwf	sprintf@ap& (0+255),b
 21922                           
 21923                           ;doprnt.c: 545: while(c = *f++) {
 21924  001654  D32C               	goto	l11913
 21925  001656                     l11579:
 21926                           
 21927                           ; BSR set to: 0
 21928                           ;doprnt.c: 547: if(c != '%')
 21929  001656  5191               	movf	sprintf@c& (0+255),w,b
 21930  001658  0A25               	xorlw	37
 21931  00165A  E009               	bz	l1622
 21932                           
 21933                           ; BSR set to: 0
 21934                           ;doprnt.c: 549: {
 21935                           ;doprnt.c: 550: ((*sp++ = (c)));
 21936  00165C  C076  FFD9         	movff	sprintf@sp,fsr2l
 21937  001660  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 21938  001664  C091  FFDF         	movff	sprintf@c,indf2
 21939                           
 21940                           ; BSR set to: 0
 21941  001668  4B76               	infsnz	sprintf@sp& (0+255),f,b
 21942  00166A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 21943                           
 21944                           ;doprnt.c: 551: continue;
 21945  00166C  D320               	goto	l11913
 21946  00166E                     l1622:
 21947                           
 21948                           ; BSR set to: 0
 21949                           ;doprnt.c: 552: }
 21950                           ;doprnt.c: 555: width = 0;
 21951  00166E  6B8B               	clrf	sprintf@width& (0+255),b
 21952  001670  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 21953                           
 21954                           ;doprnt.c: 557: flag = 0;
 21955  001672  6B92               	clrf	sprintf@flag& (0+255),b
 21956  001674  6B93               	clrf	(sprintf@flag+1)& (0+255),b
 21957  001676  D009               	goto	l11595
 21958  001678                     l11585:
 21959                           
 21960                           ; BSR set to: 0
 21961                           ;doprnt.c: 563: flag |= 0x08;
 21962  001678  8792               	bsf	sprintf@flag& (0+255),3,b
 21963  00167A  D005               	goto	L33
 21964  00167C                     l11587:
 21965                           
 21966                           ; BSR set to: 0
 21967                           ;doprnt.c: 570: flag |= 0x01;
 21968  00167C  8192               	bsf	sprintf@flag& (0+255),0,b
 21969  00167E  D003               	goto	L33
 21970  001680                     l11589:
 21971                           
 21972                           ; BSR set to: 0
 21973                           ;doprnt.c: 583: flag |= 0x800;
 21974  001680  8793               	bsf	(sprintf@flag+1)& (0+255),3,b
 21975  001682  D001               	goto	L33
 21976  001684                     l11591:
 21977                           
 21978                           ; BSR set to: 0
 21979                           ;doprnt.c: 589: flag |= 0x04;
 21980  001684  8592               	bsf	sprintf@flag& (0+255),2,b
 21981  001686                     L33:
 21982                           
 21983                           ;doprnt.c: 590: f++;
 21984  001686  4B78               	infsnz	sprintf@f& (0+255),f,b
 21985  001688  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 21986  00168A                     l11595:
 21987                           
 21988                           ; BSR set to: 0
 21989  00168A  C078  FFF6         	movff	sprintf@f,tblptrl
 21990  00168E  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21991  001692  0008               	tblrd		*
 21992  001694  50F5               	movf	tablat,w,c
 21993                           
 21994                           ; Switch size 1, requested type "space"
 21995                           ; Number of cases is 4, Range of values is 32 to 48
 21996                           ; switch strategies available:
 21997                           ; Name         Instructions Cycles
 21998                           ; simple_byte           13     7 (average)
 21999                           ;	Chosen strategy is simple_byte
 22000  001696  0A20               	xorlw	32	; case 32
 22001  001698  E0F1               	bz	l11587
 22002  00169A  0A03               	xorlw	3	; case 35
 22003  00169C  E0F1               	bz	l11589
 22004  00169E  0A0E               	xorlw	14	; case 45
 22005  0016A0  E0EB               	bz	l11585
 22006  0016A2  0A1D               	xorlw	29	; case 48
 22007  0016A4  E0EF               	bz	l11591
 22008                           
 22009                           ; BSR set to: 0
 22010                           ;doprnt.c: 602: if(flag & 0x08)
 22011  0016A6  B792               	btfsc	sprintf@flag& (0+255),3,b
 22012                           
 22013                           ; BSR set to: 0
 22014                           ;doprnt.c: 603: flag &= ~0x04;
 22015  0016A8  9592               	bcf	sprintf@flag& (0+255),2,b
 22016                           
 22017                           ; BSR set to: 0
 22018                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 22019  0016AA  C078  FFF6         	movff	sprintf@f,tblptrl
 22020  0016AE  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22021  0016B2  0008               	tblrd		*
 22022  0016B4  50F5               	movf	tablat,w,c
 22023  0016B6  EC7F  F02B         	call	_isdigit
 22024  0016BA  E325               	bnc	l11611
 22025                           
 22026                           ; BSR set to: 0
 22027                           ;doprnt.c: 607: width = 0;
 22028  0016BC  6B8B               	clrf	sprintf@width& (0+255),b
 22029  0016BE  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22030  0016C0                     l11603:
 22031                           
 22032                           ; BSR set to: 0
 22033                           ;doprnt.c: 609: width *= 10;
 22034  0016C0  C08B  F060         	movff	sprintf@width,?___wmul
 22035  0016C4  C08C  F061         	movff	sprintf@width+1,?___wmul+1
 22036  0016C8  6B63               	clrf	(?___wmul+3)& (0+255),b
 22037  0016CA  0E0A               	movlw	10
 22038  0016CC  6F62               	movwf	(?___wmul+2)& (0+255),b
 22039  0016CE  EC0D  F02B         	call	___wmul	;wreg free
 22040  0016D2  C060  F08B         	movff	?___wmul,sprintf@width
 22041  0016D6  C061  F08C         	movff	?___wmul+1,sprintf@width+1
 22042                           
 22043                           ; BSR set to: 0
 22044                           ;doprnt.c: 610: width += *f++ - '0';
 22045  0016DA  C078  FFF6         	movff	sprintf@f,tblptrl
 22046  0016DE  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22047  0016E2  0008               	tblrd		*
 22048  0016E4  CFF5 F07E          	movff	tablat,??_sprintf
 22049  0016E8  0ED0               	movlw	208
 22050  0016EA  257E               	addwf	??_sprintf& (0+255),w,b
 22051  0016EC  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 22052  0016EE  6B80               	clrf	(??_sprintf+2)& (0+255),b
 22053  0016F0  0EFF               	movlw	255
 22054  0016F2  2380               	addwfc	(??_sprintf+2)& (0+255),f,b
 22055  0016F4  517F               	movf	(??_sprintf+1)& (0+255),w,b
 22056  0016F6  278B               	addwf	sprintf@width& (0+255),f,b
 22057  0016F8  5180               	movf	(??_sprintf+2)& (0+255),w,b
 22058  0016FA  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22059                           
 22060                           ; BSR set to: 0
 22061                           
 22062                           ; BSR set to: 0
 22063                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 22064  0016FC  DB36               	call	PL86	;call to abstracted procedure
 22065  0016FE  EC7F  F02B         	call	_isdigit
 22066  001702  E314               	bnc	l11619
 22067  001704  D7DD               	goto	l11603
 22068  001706                     l11611:
 22069                           
 22070                           ; BSR set to: 0
 22071  001706  C078  FFF6         	movff	sprintf@f,tblptrl
 22072  00170A  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22073  00170E  0008               	tblrd		*
 22074  001710  50F5               	movf	tablat,w,c
 22075  001712  0A2A               	xorlw	42
 22076  001714  E10B               	bnz	l11619
 22077                           
 22078                           ; BSR set to: 0
 22079                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 22080  001716  5188               	movf	sprintf@ap& (0+255),w,b
 22081  001718  6ED9               	movwf	fsr2l,c
 22082  00171A  6ADA               	clrf	fsr2h,c
 22083  00171C  CFDE F08B          	movff	postinc2,sprintf@width
 22084  001720  CFDD F08C          	movff	postdec2,sprintf@width+1
 22085                           
 22086                           ; BSR set to: 0
 22087  001724  0E02               	movlw	2
 22088  001726  2788               	addwf	sprintf@ap& (0+255),f,b
 22089                           
 22090                           ; BSR set to: 0
 22091                           ;doprnt.c: 615: f++;
 22092  001728  4B78               	infsnz	sprintf@f& (0+255),f,b
 22093  00172A  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22094  00172C                     l11619:
 22095                           
 22096                           ; BSR set to: 0
 22097                           ;doprnt.c: 617: }
 22098                           ;doprnt.c: 620: if(*f == '.') {
 22099  00172C  C078  FFF6         	movff	sprintf@f,tblptrl
 22100  001730  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22101  001734  0008               	tblrd		*
 22102  001736  50F5               	movf	tablat,w,c
 22103  001738  0A2E               	xorlw	46
 22104  00173A  E137               	bnz	l1638
 22105                           
 22106                           ; BSR set to: 0
 22107                           ;doprnt.c: 621: flag |= 0x4000;
 22108  00173C  8D93               	bsf	(sprintf@flag+1)& (0+255),6,b
 22109                           
 22110                           ;doprnt.c: 622: f++;
 22111                           
 22112                           ; BSR set to: 0
 22113                           ;doprnt.c: 624: if(*f == '*') {
 22114  00173E  DB15               	call	PL86	;call to abstracted procedure
 22115  001740  0A2A               	xorlw	42
 22116  001742  E10C               	bnz	l1639
 22117                           
 22118                           ; BSR set to: 0
 22119                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 22120  001744  5188               	movf	sprintf@ap& (0+255),w,b
 22121  001746  6ED9               	movwf	fsr2l,c
 22122  001748  6ADA               	clrf	fsr2h,c
 22123  00174A  CFDE F089          	movff	postinc2,sprintf@prec
 22124  00174E  CFDD F08A          	movff	postdec2,sprintf@prec+1
 22125                           
 22126                           ; BSR set to: 0
 22127  001752  0E02               	movlw	2
 22128  001754  2788               	addwf	sprintf@ap& (0+255),f,b
 22129                           
 22130                           ; BSR set to: 0
 22131                           ;doprnt.c: 626: f++;
 22132  001756  4B78               	infsnz	sprintf@f& (0+255),f,b
 22133  001758  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22134                           
 22135                           ;doprnt.c: 627: } else
 22136  00175A  D088               	goto	l11689
 22137  00175C                     l1639:
 22138                           
 22139                           ; BSR set to: 0
 22140                           ;doprnt.c: 629: {
 22141                           ;doprnt.c: 630: prec = 0;
 22142  00175C  6B89               	clrf	sprintf@prec& (0+255),b
 22143  00175E  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22144                           
 22145                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 22146  001760  D01A               	goto	l11635
 22147  001762                     l11631:
 22148                           
 22149                           ; BSR set to: 0
 22150                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 22151  001762  C089  F060         	movff	sprintf@prec,?___wmul
 22152  001766  C08A  F061         	movff	sprintf@prec+1,?___wmul+1
 22153  00176A  6B63               	clrf	(?___wmul+3)& (0+255),b
 22154  00176C  0E0A               	movlw	10
 22155  00176E  6F62               	movwf	(?___wmul+2)& (0+255),b
 22156  001770  EC0D  F02B         	call	___wmul	;wreg free
 22157  001774  C078  FFF6         	movff	sprintf@f,tblptrl
 22158  001778  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22159  00177C  0008               	tblrd		*
 22160  00177E  50F5               	movf	tablat,w,c
 22161  001780  2760               	addwf	?___wmul& (0+255),f,b
 22162  001782  0E00               	movlw	0
 22163  001784  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22164  001786  0ED0               	movlw	208
 22165  001788  2560               	addwf	?___wmul& (0+255),w,b
 22166  00178A  6F89               	movwf	sprintf@prec& (0+255),b
 22167  00178C  0EFF               	movlw	255
 22168  00178E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 22169  001790  6F8A               	movwf	(sprintf@prec+1)& (0+255),b
 22170                           
 22171                           ; BSR set to: 0
 22172  001792  4B78               	infsnz	sprintf@f& (0+255),f,b
 22173  001794  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22174  001796                     l11635:
 22175                           
 22176                           ; BSR set to: 0
 22177  001796  C078  FFF6         	movff	sprintf@f,tblptrl
 22178  00179A  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22179  00179E  0008               	tblrd		*
 22180  0017A0  50F5               	movf	tablat,w,c
 22181  0017A2  EC7F  F02B         	call	_isdigit
 22182  0017A6  E362               	bnc	l11689
 22183  0017A8  D7DC               	goto	l11631
 22184  0017AA                     l1638:
 22185                           
 22186                           ; BSR set to: 0
 22187                           ;doprnt.c: 635: prec = 0;
 22188  0017AA  6B89               	clrf	sprintf@prec& (0+255),b
 22189  0017AC  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22190  0017AE  D05E               	goto	l11689
 22191  0017B0                     l11637:
 22192                           
 22193                           ; BSR set to: 0
 22194                           ;doprnt.c: 652: flag |= 0x10;
 22195  0017B0  8992               	bsf	sprintf@flag& (0+255),4,b
 22196                           
 22197                           ;doprnt.c: 653: goto loop;
 22198  0017B2  D05C               	goto	l11689
 22199  0017B4                     l11639:
 22200                           
 22201                           ; BSR set to: 0
 22202                           ;doprnt.c: 700: flag |= 0x40;
 22203  0017B4  8D92               	bsf	sprintf@flag& (0+255),6,b
 22204                           
 22205                           ;doprnt.c: 702: break;
 22206  0017B6  D06F               	goto	l11691
 22207  0017B8                     l11641:
 22208                           
 22209                           ; BSR set to: 0
 22210                           ;doprnt.c: 723: flag |= 0x20;
 22211  0017B8  8B92               	bsf	sprintf@flag& (0+255),5,b
 22212  0017BA                     l1655:
 22213                           
 22214                           ; BSR set to: 0
 22215                           ;doprnt.c: 730: flag |= 0x80;
 22216  0017BA  8F92               	bsf	sprintf@flag& (0+255),7,b
 22217                           
 22218                           ;doprnt.c: 732: break;
 22219  0017BC  D06C               	goto	l11691
 22220  0017BE                     l11643:
 22221                           
 22222                           ; BSR set to: 0
 22223                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 22224  0017BE  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22225  0017C0  1189               	iorwf	sprintf@prec& (0+255),w,b
 22226  0017C2  E009               	bz	l11649
 22227                           
 22228                           ; BSR set to: 0
 22229  0017C4  518E               	movf	(sprintf@_val+1)& (0+255),w,b
 22230  0017C6  5D89               	subwf	sprintf@prec& (0+255),w,b
 22231  0017C8  518F               	movf	(sprintf@_val+2)& (0+255),w,b
 22232  0017CA  598A               	subwfb	(sprintf@prec+1)& (0+255),w,b
 22233  0017CC  E204               	bc	l11649
 22234                           
 22235                           ; BSR set to: 0
 22236                           ;doprnt.c: 763: _val._str._len = prec;
 22237  0017CE  C089  F08E         	movff	sprintf@prec,sprintf@_val+1
 22238  0017D2  C08A  F08F         	movff	sprintf@prec+1,sprintf@_val+2
 22239  0017D6                     l11649:
 22240                           
 22241                           ; BSR set to: 0
 22242                           ;doprnt.c: 766: if(width > _val._str._len)
 22243  0017D6  518B               	movf	sprintf@width& (0+255),w,b
 22244  0017D8  5D8E               	subwf	(sprintf@_val+1)& (0+255),w,b
 22245  0017DA  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22246  0017DC  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22247  0017DE  E207               	bc	l1658
 22248                           
 22249                           ; BSR set to: 0
 22250                           ;doprnt.c: 767: width -= _val._str._len;
 22251  0017E0  EE20  F08E         	lfsr	2,sprintf@_val+1
 22252  0017E4  50DE               	movf	postinc2,w,c
 22253  0017E6  5F8B               	subwf	sprintf@width& (0+255),f,b
 22254  0017E8  50DD               	movf	postdec2,w,c
 22255  0017EA  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22256  0017EC  D002               	goto	l1659
 22257  0017EE                     l1658:
 22258                           
 22259                           ; BSR set to: 0
 22260                           ;doprnt.c: 768: else
 22261                           ;doprnt.c: 769: width = 0;
 22262  0017EE  6B8B               	clrf	sprintf@width& (0+255),b
 22263  0017F0  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22264  0017F2                     l1659:
 22265                           
 22266                           ; BSR set to: 0
 22267                           ;doprnt.c: 771: if(!(flag & 0x08))
 22268  0017F2  A792               	btfss	sprintf@flag& (0+255),3,b
 22269  0017F4  D004               	goto	l11659
 22270  0017F6  D015               	goto	l11667
 22271  0017F8                     l11655:
 22272                           
 22273                           ; BSR set to: 0
 22274                           ;doprnt.c: 774: ((*sp++ = (' ')));
 22275  0017F8  DAB1               	call	PL68	;call to abstracted procedure
 22276                           
 22277                           ; BSR set to: 0
 22278  0017FA  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22279  0017FC  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22280  0017FE                     l11659:
 22281                           
 22282                           ; BSR set to: 0
 22283  0017FE  078B               	decf	sprintf@width& (0+255),f,b
 22284  001800  DAC2               	call	PL112	;call to abstracted procedure
 22285  001802  B4D8               	btfsc	status,2,c
 22286  001804  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22287  001806  E00D               	bz	l11667
 22288  001808  D7F7               	goto	l11655
 22289  00180A                     l11661:
 22290                           
 22291                           ; BSR set to: 0
 22292                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 22293  00180A  518D               	movf	sprintf@_val& (0+255),w,b
 22294  00180C  6ED9               	movwf	fsr2l,c
 22295  00180E  6ADA               	clrf	fsr2h,c
 22296  001810  C076  FFE1         	movff	sprintf@sp,fsr1l
 22297  001814  C077  FFE2         	movff	sprintf@sp+1,fsr1h
 22298  001818  CFDF FFE7          	movff	indf2,indf1
 22299                           
 22300                           ; BSR set to: 0
 22301  00181C  2B8D               	incf	sprintf@_val& (0+255),f,b
 22302                           
 22303                           ; BSR set to: 0
 22304  00181E  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22305  001820  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22306  001822                     l11667:
 22307                           
 22308                           ; BSR set to: 0
 22309  001822  078E               	decf	(sprintf@_val+1)& (0+255),f,b
 22310  001824  A0D8               	btfss	status,0,c
 22311  001826  078F               	decf	(sprintf@_val+2)& (0+255),f,b
 22312  001828  0100               	movlb	0	; () banked
 22313  00182A  298E               	incf	(sprintf@_val+1)& (0+255),w,b
 22314  00182C  B4D8               	btfsc	status,2,c
 22315  00182E  298F               	incf	(sprintf@_val+2)& (0+255),w,b
 22316  001830  E1EC               	bnz	l11661
 22317                           
 22318                           ; BSR set to: 0
 22319                           ;doprnt.c: 779: if(flag & 0x08)
 22320  001832  B792               	btfsc	sprintf@flag& (0+255),3,b
 22321  001834  D004               	goto	l11675
 22322  001836  D23B               	goto	l11913
 22323  001838                     l11671:
 22324                           
 22325                           ; BSR set to: 0
 22326                           ;doprnt.c: 781: ((*sp++ = (' ')));
 22327  001838  DA91               	call	PL68	;call to abstracted procedure
 22328                           
 22329                           ; BSR set to: 0
 22330  00183A  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22331  00183C  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22332  00183E                     l11675:
 22333                           
 22334                           ; BSR set to: 0
 22335  00183E  078B               	decf	sprintf@width& (0+255),f,b
 22336  001840  DAA2               	call	PL112	;call to abstracted procedure
 22337  001842  B4D8               	btfsc	status,2,c
 22338  001844  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22339  001846  E101 D232          	bz	l11913
 22340  00184A  D7F6               	goto	l11671
 22341  00184C                     l11677:
 22342                           
 22343                           ; BSR set to: 0
 22344                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 22345  00184C  5188               	movf	sprintf@ap& (0+255),w,b
 22346  00184E  6ED9               	movwf	fsr2l,c
 22347  001850  6ADA               	clrf	fsr2h,c
 22348  001852  50DF               	movf	indf2,w,c
 22349  001854  6F91               	movwf	sprintf@c& (0+255),b
 22350                           
 22351                           ; BSR set to: 0
 22352  001856  0E02               	movlw	2
 22353  001858  2788               	addwf	sprintf@ap& (0+255),f,b
 22354  00185A                     l11681:
 22355                           
 22356                           ; BSR set to: 0
 22357                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 22358  00185A  0E91               	movlw	low sprintf@c
 22359  00185C  6F8D               	movwf	sprintf@_val& (0+255),b
 22360                           
 22361                           ; BSR set to: 0
 22362                           ;doprnt.c: 815: _val._str._len = 1;
 22363  00185E  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22364  001860  0E01               	movlw	1
 22365  001862  6F8E               	movwf	(sprintf@_val+1)& (0+255),b
 22366                           
 22367                           ;doprnt.c: 816: goto dostring;
 22368  001864  D7AC               	goto	l11643
 22369  001866                     l11685:
 22370                           
 22371                           ; BSR set to: 0
 22372                           ;doprnt.c: 827: flag |= 0xC0;
 22373  001866  0EC0               	movlw	192
 22374  001868  1392               	iorwf	sprintf@flag& (0+255),f,b
 22375                           
 22376                           ;doprnt.c: 828: break;
 22377  00186A  D015               	goto	l11691
 22378  00186C                     l11689:
 22379                           
 22380                           ; BSR set to: 0
 22381  00186C  DA6C               	call	PL62	;call to abstracted procedure
 22382  00186E  5191               	movf	sprintf@c& (0+255),w,b
 22383                           
 22384                           ; Switch size 1, requested type "space"
 22385                           ; Number of cases is 9, Range of values is 0 to 120
 22386                           ; switch strategies available:
 22387                           ; Name         Instructions Cycles
 22388                           ; simple_byte           28    15 (average)
 22389                           ;	Chosen strategy is simple_byte
 22390  001870  E101 D220          	bz	l11915
 22391  001874  0A58               	xorlw	88	; case 88
 22392  001876  E0A0               	bz	l11641
 22393  001878  0A3B               	xorlw	59	; case 99
 22394  00187A  E0E8               	bz	l11677
 22395  00187C  0A07               	xorlw	7	; case 100
 22396  00187E  E00B               	bz	l11691
 22397  001880  0A0D               	xorlw	13	; case 105
 22398  001882  E009               	bz	l11691
 22399  001884  0A05               	xorlw	5	; case 108
 22400  001886  E094               	bz	l11637
 22401  001888  0A03               	xorlw	3	; case 111
 22402  00188A  E094               	bz	l11639
 22403  00188C  0A1A               	xorlw	26	; case 117
 22404  00188E  E0EB               	bz	l11685
 22405  001890  0A0D               	xorlw	13	; case 120
 22406  001892  E093               	bz	l1655
 22407  001894  D7E2               	goto	l11681
 22408  001896                     l11691:
 22409                           
 22410                           ; BSR set to: 0
 22411                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 22412  001896  5192               	movf	sprintf@flag& (0+255),w,b
 22413  001898  0BC0               	andlw	192
 22414  00189A  E120               	bnz	l1674
 22415                           
 22416                           ; BSR set to: 0
 22417                           ;doprnt.c: 1260: {
 22418                           ;doprnt.c: 1262: if(flag & 0x10)
 22419  00189C  A992               	btfss	sprintf@flag& (0+255),4,b
 22420  00189E  D003               	goto	l11699
 22421                           
 22422                           ; BSR set to: 0
 22423                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 22424  0018A0  5188               	movf	sprintf@ap& (0+255),w,b
 22425                           
 22426                           ; BSR set to: 0
 22427  0018A2  DA46               	call	PL58	;call to abstracted procedure
 22428  0018A4  D00D               	goto	L34
 22429  0018A6                     l11699:
 22430                           
 22431                           ; BSR set to: 0
 22432                           ;doprnt.c: 1264: else
 22433                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 22434  0018A6  5188               	movf	sprintf@ap& (0+255),w,b
 22435  0018A8  6ED9               	movwf	fsr2l,c
 22436  0018AA  6ADA               	clrf	fsr2h,c
 22437  0018AC  CFDE F08D          	movff	postinc2,sprintf@_val
 22438  0018B0  CFDD F08E          	movff	postdec2,sprintf@_val+1
 22439  0018B4  0E00               	movlw	0
 22440  0018B6  BF8E               	btfsc	(sprintf@_val+1)& (0+255),7,b
 22441  0018B8  0EFF               	movlw	-1
 22442  0018BA  6F8F               	movwf	(sprintf@_val+2)& (0+255),b
 22443  0018BC  6F90               	movwf	(sprintf@_val+3)& (0+255),b
 22444                           
 22445                           ; BSR set to: 0
 22446  0018BE  0E02               	movlw	2
 22447  0018C0                     L34:
 22448  0018C0  2788               	addwf	sprintf@ap& (0+255),f,b
 22449                           
 22450                           ; BSR set to: 0
 22451                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 22452  0018C2  AF90               	btfss	(sprintf@_val+3)& (0+255),7,b
 22453  0018C4  D01F               	goto	l11717
 22454                           
 22455                           ; BSR set to: 0
 22456                           ;doprnt.c: 1269: flag |= 0x03;
 22457  0018C6  0E03               	movlw	3
 22458  0018C8  1392               	iorwf	sprintf@flag& (0+255),f,b
 22459                           
 22460                           ; BSR set to: 0
 22461                           ;doprnt.c: 1270: _val._val = -_val._val;
 22462  0018CA  1F90               	comf	(sprintf@_val+3)& (0+255),f,b
 22463  0018CC  1F8F               	comf	(sprintf@_val+2)& (0+255),f,b
 22464  0018CE  1F8E               	comf	(sprintf@_val+1)& (0+255),f,b
 22465  0018D0  6D8D               	negf	sprintf@_val& (0+255),b
 22466  0018D2  0E00               	movlw	0
 22467  0018D4  238E               	addwfc	(sprintf@_val+1)& (0+255),f,b
 22468  0018D6  238F               	addwfc	(sprintf@_val+2)& (0+255),f,b
 22469  0018D8  2390               	addwfc	(sprintf@_val+3)& (0+255),f,b
 22470  0018DA  D014               	goto	l11717
 22471  0018DC                     l1674:
 22472                           
 22473                           ; BSR set to: 0
 22474                           ;doprnt.c: 1275: else
 22475                           ;doprnt.c: 1280: {
 22476                           ;doprnt.c: 1288: if(flag & 0x10)
 22477  0018DC  A992               	btfss	sprintf@flag& (0+255),4,b
 22478  0018DE  D003               	goto	l11713
 22479                           
 22480                           ; BSR set to: 0
 22481                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 22482  0018E0  5188               	movf	sprintf@ap& (0+255),w,b
 22483                           
 22484                           ; BSR set to: 0
 22485  0018E2  DA26               	call	PL58	;call to abstracted procedure
 22486  0018E4  D00E               	goto	L35
 22487  0018E6                     l11713:
 22488                           
 22489                           ; BSR set to: 0
 22490                           ;doprnt.c: 1290: else
 22491                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22492  0018E6  5188               	movf	sprintf@ap& (0+255),w,b
 22493  0018E8  6ED9               	movwf	fsr2l,c
 22494  0018EA  6ADA               	clrf	fsr2h,c
 22495  0018EC  CFDE F07E          	movff	postinc2,??_sprintf
 22496  0018F0  CFDD F07F          	movff	postdec2,??_sprintf+1
 22497  0018F4  C07E  F08D         	movff	??_sprintf,sprintf@_val
 22498  0018F8  C07F  F08E         	movff	??_sprintf+1,sprintf@_val+1
 22499  0018FC  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22500  0018FE  6B90               	clrf	(sprintf@_val+3)& (0+255),b
 22501                           
 22502                           ; BSR set to: 0
 22503  001900  0E02               	movlw	2
 22504  001902                     L35:
 22505  001902  2788               	addwf	sprintf@ap& (0+255),f,b
 22506  001904                     l11717:
 22507                           
 22508                           ; BSR set to: 0
 22509                           ;doprnt.c: 1294: }
 22510                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 22511  001904  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22512  001906  1189               	iorwf	sprintf@prec& (0+255),w,b
 22513  001908  E15C               	bnz	l11767
 22514                           
 22515                           ; BSR set to: 0
 22516  00190A  5190               	movf	(sprintf@_val+3)& (0+255),w,b
 22517  00190C  118D               	iorwf	sprintf@_val& (0+255),w,b
 22518  00190E  118E               	iorwf	(sprintf@_val+1)& (0+255),w,b
 22519  001910  118F               	iorwf	(sprintf@_val+2)& (0+255),w,b
 22520  001912  E157               	bnz	l11767
 22521                           
 22522                           ; BSR set to: 0
 22523                           ;doprnt.c: 1298: prec++;
 22524  001914  4B89               	infsnz	sprintf@prec& (0+255),f,b
 22525  001916  2B8A               	incf	(sprintf@prec+1)& (0+255),f,b
 22526  001918  D054               	goto	l11767
 22527  00191A                     l11723:
 22528                           
 22529                           ; BSR set to: 0
 22530                           ;doprnt.c: 1309: case 0xC0:
 22531                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22532  00191A  0E01               	movlw	1
 22533  00191C  6F91               	movwf	sprintf@c& (0+255),b
 22534  00191E                     l11725:
 22535                           
 22536                           ; BSR set to: 0
 22537  00191E  5191               	movf	sprintf@c& (0+255),w,b
 22538  001920  0A0A               	xorlw	10
 22539  001922  E058               	bz	l11769
 22540                           
 22541                           ; BSR set to: 0
 22542                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 22543  001924  5191               	movf	sprintf@c& (0+255),w,b
 22544  001926  0D04               	mullw	4
 22545  001928  0EE4               	movlw	low _dpowers
 22546  00192A  24F3               	addwf	prodl,w,c
 22547  00192C  6EF6               	movwf	tblptrl,c
 22548  00192E  0E6F               	movlw	high _dpowers
 22549  001930  20F4               	addwfc	prodh,w,c
 22550  001932  6EF7               	movwf	tblptrh,c
 22551  001934  0009               	tblrd		*+
 22552  001936  50F5               	movf	tablat,w,c
 22553  001938  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22554  00193A  0009               	tblrd		*+
 22555  00193C  50F5               	movf	tablat,w,c
 22556  00193E  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22557  001940  0009               	tblrd		*+
 22558  001942  50F5               	movf	tablat,w,c
 22559  001944  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22560  001946  0009               	tblrd		*+
 22561  001948  50F5               	movf	tablat,w,c
 22562  00194A  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22563  00194C  E343               	bnc	l11769
 22564                           
 22565                           ; BSR set to: 0
 22566  00194E  2B91               	incf	sprintf@c& (0+255),f,b
 22567  001950  D7E6               	goto	l11725
 22568  001952                     l11737:
 22569                           
 22570                           ; BSR set to: 0
 22571                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 22572  001952  0E01               	movlw	1
 22573  001954  6F91               	movwf	sprintf@c& (0+255),b
 22574  001956                     l11739:
 22575                           
 22576                           ; BSR set to: 0
 22577  001956  5191               	movf	sprintf@c& (0+255),w,b
 22578  001958  0A08               	xorlw	8
 22579  00195A  E03C               	bz	l11769
 22580                           
 22581                           ; BSR set to: 0
 22582                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 22583  00195C  5191               	movf	sprintf@c& (0+255),w,b
 22584  00195E  0D04               	mullw	4
 22585  001960  0E0C               	movlw	low _hexpowers
 22586  001962  24F3               	addwf	prodl,w,c
 22587  001964  6EF6               	movwf	tblptrl,c
 22588  001966  0E70               	movlw	high _hexpowers
 22589  001968  20F4               	addwfc	prodh,w,c
 22590  00196A  6EF7               	movwf	tblptrh,c
 22591  00196C  0009               	tblrd		*+
 22592  00196E  50F5               	movf	tablat,w,c
 22593  001970  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22594  001972  0009               	tblrd		*+
 22595  001974  50F5               	movf	tablat,w,c
 22596  001976  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22597  001978  0009               	tblrd		*+
 22598  00197A  50F5               	movf	tablat,w,c
 22599  00197C  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22600  00197E  0009               	tblrd		*+
 22601  001980  50F5               	movf	tablat,w,c
 22602  001982  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22603  001984  E327               	bnc	l11769
 22604                           
 22605                           ; BSR set to: 0
 22606  001986  2B91               	incf	sprintf@c& (0+255),f,b
 22607  001988  D7E6               	goto	l11739
 22608  00198A                     l11751:
 22609                           
 22610                           ; BSR set to: 0
 22611                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 22612  00198A  0E01               	movlw	1
 22613  00198C  6F91               	movwf	sprintf@c& (0+255),b
 22614  00198E                     l11753:
 22615                           
 22616                           ; BSR set to: 0
 22617  00198E  5191               	movf	sprintf@c& (0+255),w,b
 22618  001990  0A0C               	xorlw	12
 22619  001992  E020               	bz	l11769
 22620                           
 22621                           ; BSR set to: 0
 22622                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 22623  001994  5191               	movf	sprintf@c& (0+255),w,b
 22624  001996  0D04               	mullw	4
 22625  001998  0EB4               	movlw	low _octpowers
 22626  00199A  24F3               	addwf	prodl,w,c
 22627  00199C  6EF6               	movwf	tblptrl,c
 22628  00199E  0E6F               	movlw	high _octpowers
 22629  0019A0  20F4               	addwfc	prodh,w,c
 22630  0019A2  6EF7               	movwf	tblptrh,c
 22631  0019A4  0009               	tblrd		*+
 22632  0019A6  50F5               	movf	tablat,w,c
 22633  0019A8  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22634  0019AA  0009               	tblrd		*+
 22635  0019AC  50F5               	movf	tablat,w,c
 22636  0019AE  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22637  0019B0  0009               	tblrd		*+
 22638  0019B2  50F5               	movf	tablat,w,c
 22639  0019B4  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22640  0019B6  0009               	tblrd		*+
 22641  0019B8  50F5               	movf	tablat,w,c
 22642  0019BA  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22643  0019BC  E30B               	bnc	l11769
 22644                           
 22645                           ; BSR set to: 0
 22646  0019BE  2B91               	incf	sprintf@c& (0+255),f,b
 22647  0019C0  D7E6               	goto	l11753
 22648  0019C2                     l11767:
 22649                           
 22650                           ; BSR set to: 0
 22651  0019C2  5192               	movf	sprintf@flag& (0+255),w,b
 22652  0019C4  0BC0               	andlw	192
 22653                           
 22654                           ; Switch size 1, requested type "space"
 22655                           ; Number of cases is 4, Range of values is 0 to 192
 22656                           ; switch strategies available:
 22657                           ; Name         Instructions Cycles
 22658                           ; simple_byte           13     7 (average)
 22659                           ;	Chosen strategy is simple_byte
 22660  0019C6  E0A9               	bz	l11723
 22661  0019C8  0A40               	xorlw	64	; case 64
 22662  0019CA  E0DF               	bz	l11751
 22663  0019CC  0AC0               	xorlw	192	; case 128
 22664  0019CE  E0C1               	bz	l11737
 22665  0019D0  0A40               	xorlw	64	; case 192
 22666  0019D2  E0A3               	bz	l11723
 22667  0019D4                     l11769:
 22668                           
 22669                           ; BSR set to: 0
 22670                           ;doprnt.c: 1346: if(c < prec)
 22671  0019D4  0E80               	movlw	128
 22672  0019D6  BF91               	btfsc	sprintf@c& (0+255),7,b
 22673  0019D8  0E7F               	movlw	127
 22674  0019DA  6F7E               	movwf	??_sprintf& (0+255),b
 22675  0019DC  5189               	movf	sprintf@prec& (0+255),w,b
 22676  0019DE  5D91               	subwf	sprintf@c& (0+255),w,b
 22677  0019E0  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22678  0019E2  0A80               	xorlw	128
 22679  0019E4  597E               	subwfb	??_sprintf& (0+255),w,b
 22680  0019E6  E203               	bc	l11773
 22681                           
 22682                           ; BSR set to: 0
 22683                           ;doprnt.c: 1347: c = prec;
 22684  0019E8  C089  F091         	movff	sprintf@prec,sprintf@c
 22685  0019EC  D00F               	goto	l11777
 22686  0019EE                     l11773:
 22687                           
 22688                           ; BSR set to: 0
 22689                           ;doprnt.c: 1348: else if(prec < c)
 22690  0019EE  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22691  0019F0  0A80               	xorlw	128
 22692  0019F2  6F7E               	movwf	??_sprintf& (0+255),b
 22693  0019F4  5191               	movf	sprintf@c& (0+255),w,b
 22694  0019F6  5D89               	subwf	sprintf@prec& (0+255),w,b
 22695  0019F8  0E80               	movlw	128
 22696  0019FA  BF91               	btfsc	sprintf@c& (0+255),7,b
 22697  0019FC  0E7F               	movlw	127
 22698  0019FE  597E               	subwfb	??_sprintf& (0+255),w,b
 22699  001A00  E205               	bc	l11777
 22700                           
 22701                           ; BSR set to: 0
 22702                           ;doprnt.c: 1349: prec = c;
 22703  001A02  5191               	movf	sprintf@c& (0+255),w,b
 22704  001A04  6F89               	movwf	sprintf@prec& (0+255),b
 22705  001A06  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22706  001A08  BF89               	btfsc	sprintf@prec& (0+255),7,b
 22707  001A0A  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 22708  001A0C                     l11777:
 22709                           
 22710                           ; BSR set to: 0
 22711                           ;doprnt.c: 1352: if(width && flag & 0x03)
 22712  001A0C  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22713  001A0E  118B               	iorwf	sprintf@width& (0+255),w,b
 22714  001A10  E006               	bz	l11783
 22715                           
 22716                           ; BSR set to: 0
 22717  001A12  5192               	movf	sprintf@flag& (0+255),w,b
 22718  001A14  0B03               	andlw	3
 22719  001A16  E003               	bz	l11783
 22720                           
 22721                           ; BSR set to: 0
 22722                           ;doprnt.c: 1353: width--;
 22723  001A18  078B               	decf	sprintf@width& (0+255),f,b
 22724  001A1A  A0D8               	btfss	status,0,c
 22725  001A1C  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22726  001A1E                     l11783:
 22727                           
 22728                           ; BSR set to: 0
 22729                           ;doprnt.c: 1355: if(flag & 0x4000) {
 22730  001A1E  AD93               	btfss	(sprintf@flag+1)& (0+255),6,b
 22731  001A20  D010               	goto	l11789
 22732                           
 22733                           ; BSR set to: 0
 22734                           ;doprnt.c: 1356: if(width > prec)
 22735  001A22  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22736  001A24  0A80               	xorlw	128
 22737  001A26  6F7E               	movwf	??_sprintf& (0+255),b
 22738  001A28  518B               	movf	sprintf@width& (0+255),w,b
 22739  001A2A  5D89               	subwf	sprintf@prec& (0+255),w,b
 22740  001A2C  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22741  001A2E  0A80               	xorlw	128
 22742  001A30  597E               	subwfb	??_sprintf& (0+255),w,b
 22743  001A32  E205               	bc	l1702
 22744                           
 22745                           ; BSR set to: 0
 22746                           ;doprnt.c: 1357: width -= prec;
 22747  001A34  5189               	movf	sprintf@prec& (0+255),w,b
 22748  001A36  5F8B               	subwf	sprintf@width& (0+255),f,b
 22749  001A38  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22750  001A3A  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22751  001A3C  D002               	goto	l11789
 22752  001A3E                     l1702:
 22753                           
 22754                           ; BSR set to: 0
 22755                           ;doprnt.c: 1358: else
 22756                           ;doprnt.c: 1359: width = 0;
 22757  001A3E  6B8B               	clrf	sprintf@width& (0+255),b
 22758  001A40  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22759  001A42                     l11789:
 22760                           
 22761                           ; BSR set to: 0
 22762                           ;doprnt.c: 1360: }
 22763                           ;doprnt.c: 1364: if((flag & (
 22764                           ;doprnt.c: 1366: 0x04|
 22765                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 22766  001A42  0EC4               	movlw	196
 22767  001A44  D94D               	call	PL18	;call to abstracted procedure
 22768  001A46  0E40               	movlw	64
 22769  001A48  B4D8               	btfsc	status,2,c
 22770  001A4A  197E               	xorwf	??_sprintf& (0+255),w,b
 22771  001A4C  E107               	bnz	l11795
 22772                           
 22773                           ; BSR set to: 0
 22774                           ;doprnt.c: 1369: if(width)
 22775  001A4E  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22776  001A50  118B               	iorwf	sprintf@width& (0+255),w,b
 22777  001A52  E018               	bz	l11801
 22778                           
 22779                           ; BSR set to: 0
 22780                           ;doprnt.c: 1370: width--;
 22781  001A54  078B               	decf	sprintf@width& (0+255),f,b
 22782  001A56  A0D8               	btfss	status,0,c
 22783  001A58  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22784  001A5A  D014               	goto	l11801
 22785  001A5C                     l11795:
 22786                           
 22787                           ; BSR set to: 0
 22788                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22789  001A5C  0EC0               	movlw	192
 22790  001A5E  D940               	call	PL18	;call to abstracted procedure
 22791  001A60  0E80               	movlw	128
 22792  001A62  B4D8               	btfsc	status,2,c
 22793  001A64  197E               	xorwf	??_sprintf& (0+255),w,b
 22794  001A66  E10E               	bnz	l11801
 22795                           
 22796                           ; BSR set to: 0
 22797                           ;doprnt.c: 1379: if(width > 2)
 22798  001A68  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22799  001A6A  0A80               	xorlw	128
 22800  001A6C  0F80               	addlw	-128
 22801  001A6E  0E03               	movlw	3
 22802  001A70  B4D8               	btfsc	status,2,c
 22803  001A72  5D8B               	subwf	sprintf@width& (0+255),w,b
 22804  001A74  E305               	bnc	l1708
 22805                           
 22806                           ; BSR set to: 0
 22807                           ;doprnt.c: 1380: width -= 2;
 22808  001A76  0EFE               	movlw	254
 22809  001A78  278B               	addwf	sprintf@width& (0+255),f,b
 22810  001A7A  0EFF               	movlw	255
 22811  001A7C  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22812  001A7E  D002               	goto	l11801
 22813  001A80                     l1708:
 22814                           
 22815                           ; BSR set to: 0
 22816                           ;doprnt.c: 1381: else
 22817                           ;doprnt.c: 1382: width = 0;
 22818  001A80  6B8B               	clrf	sprintf@width& (0+255),b
 22819  001A82  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22820  001A84                     l11801:
 22821                           
 22822                           ; BSR set to: 0
 22823                           ;doprnt.c: 1383: }
 22824                           ;doprnt.c: 1388: if(width > c)
 22825  001A84  0E80               	movlw	128
 22826  001A86  BF91               	btfsc	sprintf@c& (0+255),7,b
 22827  001A88  0E7F               	movlw	127
 22828  001A8A  6F7E               	movwf	??_sprintf& (0+255),b
 22829  001A8C  518B               	movf	sprintf@width& (0+255),w,b
 22830  001A8E  5D91               	subwf	sprintf@c& (0+255),w,b
 22831  001A90  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22832  001A92  0A80               	xorlw	128
 22833  001A94  597E               	subwfb	??_sprintf& (0+255),w,b
 22834  001A96  E207               	bc	l1710
 22835                           
 22836                           ; BSR set to: 0
 22837                           ;doprnt.c: 1389: width -= c;
 22838  001A98  5191               	movf	sprintf@c& (0+255),w,b
 22839  001A9A  5F8B               	subwf	sprintf@width& (0+255),f,b
 22840  001A9C  0E00               	movlw	0
 22841  001A9E  BF91               	btfsc	sprintf@c& (0+255),7,b
 22842  001AA0  0EFF               	movlw	255
 22843  001AA2  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22844  001AA4  D002               	goto	l1711
 22845  001AA6                     l1710:
 22846                           
 22847                           ; BSR set to: 0
 22848                           ;doprnt.c: 1390: else
 22849                           ;doprnt.c: 1391: width = 0;
 22850  001AA6  6B8B               	clrf	sprintf@width& (0+255),b
 22851  001AA8  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22852  001AAA                     l1711:
 22853                           
 22854                           ; BSR set to: 0
 22855                           ;doprnt.c: 1394: if(flag & 0x04) {
 22856  001AAA  A592               	btfss	sprintf@flag& (0+255),2,b
 22857  001AAC  D03C               	goto	l11839
 22858                           
 22859                           ; BSR set to: 0
 22860                           ;doprnt.c: 1399: if(flag & 0x03)
 22861  001AAE  5192               	movf	sprintf@flag& (0+255),w,b
 22862  001AB0  0B03               	andlw	3
 22863  001AB2  E009               	bz	l1713
 22864                           
 22865                           ; BSR set to: 0
 22866                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 22867  001AB4  C076  FFD9         	movff	sprintf@sp,fsr2l
 22868  001AB8  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22869  001ABC  0E2D               	movlw	45
 22870  001ABE  6EDF               	movwf	indf2,c
 22871  001AC0                     l11809:
 22872                           
 22873                           ; BSR set to: 0
 22874  001AC0  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22875  001AC2  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22876  001AC4  D022               	goto	l11831
 22877  001AC6                     l1713:
 22878                           
 22879                           ; BSR set to: 0
 22880                           ;doprnt.c: 1403: else
 22881                           ;doprnt.c: 1406: if(flag & 0x01)
 22882  001AC6  A192               	btfss	sprintf@flag& (0+255),0,b
 22883  001AC8  D006               	goto	l11815
 22884                           
 22885                           ; BSR set to: 0
 22886                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 22887  001ACA  C076  FFD9         	movff	sprintf@sp,fsr2l
 22888  001ACE  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22889  001AD2  0E20               	movlw	32
 22890  001AD4  D7F4               	goto	L36
 22891  001AD6                     l11815:
 22892                           
 22893                           ; BSR set to: 0
 22894                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22895  001AD6  0EC0               	movlw	192
 22896  001AD8  D903               	call	PL18	;call to abstracted procedure
 22897  001ADA  0E80               	movlw	128
 22898  001ADC  B4D8               	btfsc	status,2,c
 22899  001ADE  197E               	xorwf	??_sprintf& (0+255),w,b
 22900  001AE0  E114               	bnz	l11831
 22901                           
 22902                           ; BSR set to: 0
 22903                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 22904  001AE2  C076  FFD9         	movff	sprintf@sp,fsr2l
 22905  001AE6  D94A               	call	PL102	;call to abstracted procedure
 22906                           
 22907                           ; BSR set to: 0
 22908  001AE8  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22909  001AEA  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22910                           
 22911                           ; BSR set to: 0
 22912                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 22913  001AEC  BB92               	btfsc	sprintf@flag& (0+255),5,b
 22914  001AEE  D003               	goto	l11825
 22915                           
 22916                           ; BSR set to: 0
 22917  001AF0  6B83               	clrf	(_sprintf$2144+1)& (0+255),b
 22918  001AF2  0E78               	movlw	120
 22919  001AF4  D002               	goto	L37
 22920  001AF6                     l11825:
 22921                           
 22922                           ; BSR set to: 0
 22923  001AF6  6B83               	clrf	(_sprintf$2144+1)& (0+255),b
 22924  001AF8  0E58               	movlw	88
 22925  001AFA                     L37:
 22926  001AFA  6F82               	movwf	_sprintf$2144& (0+255),b
 22927                           
 22928                           ; BSR set to: 0
 22929  001AFC  C076  FFD9         	movff	sprintf@sp,fsr2l
 22930  001B00  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22931  001B04  C082  FFDF         	movff	_sprintf$2144,indf2
 22932  001B08  D7DB               	goto	l11809
 22933  001B0A                     l11831:
 22934                           
 22935                           ; BSR set to: 0
 22936                           ;doprnt.c: 1419: }
 22937                           ;doprnt.c: 1422: if(width)
 22938  001B0A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22939  001B0C  118B               	iorwf	sprintf@width& (0+255),w,b
 22940  001B0E  E101 D0B9          	bz	l11903
 22941                           
 22942                           ; BSR set to: 0
 22943                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 22944  001B12  C076  FFD9         	movff	sprintf@sp,fsr2l
 22945  001B16  D932               	call	PL102	;call to abstracted procedure
 22946                           
 22947                           ; BSR set to: 0
 22948  001B18  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22949  001B1A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22950                           
 22951                           ; BSR set to: 0
 22952                           ;doprnt.c: 1425: while(--width);
 22953  001B1C  078B               	decf	sprintf@width& (0+255),f,b
 22954  001B1E  A0D8               	btfss	status,0,c
 22955  001B20  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22956  001B22  0100               	movlb	0	; () banked
 22957  001B24  D7F2               	goto	l11831
 22958  001B26                     l11839:
 22959                           
 22960                           ; BSR set to: 0
 22961                           ;doprnt.c: 1429: {
 22962                           ;doprnt.c: 1431: if(width
 22963                           ;doprnt.c: 1433: && !(flag & 0x08)
 22964                           ;doprnt.c: 1435: )
 22965  001B26  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22966  001B28  118B               	iorwf	sprintf@width& (0+255),w,b
 22967  001B2A  A4D8               	btfss	status,2,c
 22968                           
 22969                           ; BSR set to: 0
 22970  001B2C  B792               	btfsc	sprintf@flag& (0+255),3,b
 22971  001B2E  D004               	goto	l11849
 22972  001B30                     l11843:
 22973                           
 22974                           ; BSR set to: 0
 22975                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 22976  001B30  C076  FFD9         	movff	sprintf@sp,fsr2l
 22977                           
 22978                           ; BSR set to: 0
 22979                           
 22980                           ; BSR set to: 0
 22981                           ;doprnt.c: 1438: while(--width);
 22982  001B34  D8F0               	call	PL46	;call to abstracted procedure
 22983  001B36  E1FC               	bnz	l11843
 22984  001B38                     l11849:
 22985                           
 22986                           ; BSR set to: 0
 22987                           ;doprnt.c: 1445: if(flag & 0x03)
 22988  001B38  5192               	movf	sprintf@flag& (0+255),w,b
 22989  001B3A  0B03               	andlw	3
 22990  001B3C  E009               	bz	l1729
 22991                           
 22992                           ; BSR set to: 0
 22993                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 22994  001B3E  C076  FFD9         	movff	sprintf@sp,fsr2l
 22995  001B42  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22996  001B46  0E2D               	movlw	45
 22997  001B48  6EDF               	movwf	indf2,c
 22998                           
 22999                           ; BSR set to: 0
 23000  001B4A  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23001  001B4C  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23002  001B4E  D008               	goto	l11859
 23003  001B50                     l1729:
 23004                           
 23005                           ; BSR set to: 0
 23006                           ;doprnt.c: 1450: else if(flag & 0x01)
 23007  001B50  A192               	btfss	sprintf@flag& (0+255),0,b
 23008  001B52  D006               	goto	l11859
 23009                           
 23010                           ; BSR set to: 0
 23011                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 23012  001B54  C076  FFD9         	movff	sprintf@sp,fsr2l
 23013  001B58  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23014  001B5C  0E20               	movlw	32
 23015  001B5E  D7F4               	goto	L38
 23016  001B60                     l11859:
 23017                           
 23018                           ; BSR set to: 0
 23019                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 23020  001B60  0EC0               	movlw	192
 23021  001B62  D8BE               	call	PL18	;call to abstracted procedure
 23022  001B64  0E40               	movlw	64
 23023  001B66  B4D8               	btfsc	status,2,c
 23024  001B68  197E               	xorwf	??_sprintf& (0+255),w,b
 23025  001B6A  E106               	bnz	l11865
 23026                           
 23027                           ; BSR set to: 0
 23028                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 23029  001B6C  C076  FFD9         	movff	sprintf@sp,fsr2l
 23030  001B70  D905               	call	PL102	;call to abstracted procedure
 23031  001B72                     l11863:
 23032                           
 23033                           ; BSR set to: 0
 23034  001B72  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23035  001B74  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23036  001B76  D086               	goto	l11903
 23037  001B78                     l11865:
 23038                           
 23039                           ; BSR set to: 0
 23040                           ;doprnt.c: 1457: else
 23041                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23042  001B78  0EC0               	movlw	192
 23043  001B7A  D8B2               	call	PL18	;call to abstracted procedure
 23044  001B7C  0E80               	movlw	128
 23045  001B7E  B4D8               	btfsc	status,2,c
 23046  001B80  197E               	xorwf	??_sprintf& (0+255),w,b
 23047  001B82  E001 D07F          	bnz	l11903
 23048                           
 23049                           ; BSR set to: 0
 23050                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 23051  001B86  C076  FFD9         	movff	sprintf@sp,fsr2l
 23052  001B8A  D8F8               	call	PL102	;call to abstracted procedure
 23053                           
 23054                           ; BSR set to: 0
 23055  001B8C  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23056  001B8E  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23057                           
 23058                           ; BSR set to: 0
 23059                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 23060  001B90  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23061  001B92  D003               	goto	l11875
 23062                           
 23063                           ; BSR set to: 0
 23064  001B94  6B85               	clrf	(_sprintf$2145+1)& (0+255),b
 23065  001B96  0E78               	movlw	120
 23066  001B98  D002               	goto	L39
 23067  001B9A                     l11875:
 23068                           
 23069                           ; BSR set to: 0
 23070  001B9A  6B85               	clrf	(_sprintf$2145+1)& (0+255),b
 23071  001B9C  0E58               	movlw	88
 23072  001B9E                     L39:
 23073  001B9E  6F84               	movwf	_sprintf$2145& (0+255),b
 23074                           
 23075                           ; BSR set to: 0
 23076  001BA0  C076  FFD9         	movff	sprintf@sp,fsr2l
 23077  001BA4  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23078  001BA8  C084  FFDF         	movff	_sprintf$2145,indf2
 23079  001BAC  D7E2               	goto	l11863
 23080  001BAE                     l11881:
 23081                           
 23082                           ; BSR set to: 0
 23083                           ;doprnt.c: 1493: case 0xC0:
 23084                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 23085  001BAE  C089  F07E         	movff	sprintf@prec,??_sprintf
 23086  001BB2  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23087  001BB6  90D8               	bcf	status,0,c
 23088  001BB8  377E               	rlcf	??_sprintf& (0+255),f,b
 23089  001BBA  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23090  001BBC  90D8               	bcf	status,0,c
 23091  001BBE  377E               	rlcf	??_sprintf& (0+255),f,b
 23092  001BC0  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23093  001BC2  0EE4               	movlw	low _dpowers
 23094  001BC4  257E               	addwf	??_sprintf& (0+255),w,b
 23095  001BC6  6EF6               	movwf	tblptrl,c
 23096  001BC8  0E6F               	movlw	high _dpowers
 23097  001BCA  D87B               	call	PL14	;call to abstracted procedure
 23098  001BCC  C08D  F060         	movff	sprintf@_val,?___lldiv
 23099  001BD0  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23100  001BD4  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23101  001BD8  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23102  001BDC  ECC0  F026         	call	___lldiv	;wreg free
 23103  001BE0  C063  F070         	movff	?___lldiv+3,?___llmod+3
 23104  001BE4  C062  F06F         	movff	?___lldiv+2,?___llmod+2
 23105  001BE8  C061  F06E         	movff	?___lldiv+1,?___llmod+1
 23106  001BEC  C060  F06D         	movff	?___lldiv,?___llmod
 23107  001BF0  0E0A               	movlw	10
 23108  001BF2  6F71               	movwf	(?___llmod+4)& (0+255),b
 23109  001BF4  0E00               	movlw	0
 23110  001BF6  6B72               	clrf	(?___llmod+5)& (0+255),b
 23111  001BF8  6B73               	clrf	(?___llmod+6)& (0+255),b
 23112  001BFA  6B74               	clrf	(?___llmod+7)& (0+255),b
 23113  001BFC  EC3B  F028         	call	___llmod	;wreg free
 23114  001C00  516D               	movf	?___llmod& (0+255),w,b
 23115  001C02  D02D               	goto	L40
 23116  001C04                     l11883:
 23117                           
 23118                           ; BSR set to: 0
 23119                           ;doprnt.c: 1506: {
 23120                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 23121  001C04  D875               	call	PL24	;call to abstracted procedure
 23122  001C06  0E0C               	movlw	low _hexpowers
 23123  001C08  257E               	addwf	??_sprintf& (0+255),w,b
 23124  001C0A  6EF6               	movwf	tblptrl,c
 23125  001C0C  0E70               	movlw	high _hexpowers
 23126  001C0E  D859               	call	PL14	;call to abstracted procedure
 23127  001C10  ECC0  F026         	call	___lldiv	;wreg free
 23128  001C14  5160               	movf	?___lldiv& (0+255),w,b
 23129  001C16  0B0F               	andlw	15
 23130  001C18  6F81               	movwf	sprintf@idx& (0+255),b
 23131                           
 23132                           ; BSR set to: 0
 23133                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 23134  001C1A  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23135  001C1C  D004               	goto	l11889
 23136                           
 23137                           ; BSR set to: 0
 23138  001C1E  0E7E               	movlw	high STR_264
 23139  001C20  6F87               	movwf	(_sprintf$2151+1)& (0+255),b
 23140  001C22  0E2C               	movlw	low STR_264
 23141  001C24  D003               	goto	L41
 23142  001C26                     l11889:
 23143                           
 23144                           ; BSR set to: 0
 23145  001C26  0E7E               	movlw	high STR_263
 23146  001C28  6F87               	movwf	(_sprintf$2151+1)& (0+255),b
 23147  001C2A  0E1B               	movlw	low STR_263
 23148  001C2C                     L41:
 23149  001C2C  6F86               	movwf	_sprintf$2151& (0+255),b
 23150                           
 23151                           ; BSR set to: 0
 23152  001C2E  5181               	movf	sprintf@idx& (0+255),w,b
 23153  001C30  2586               	addwf	_sprintf$2151& (0+255),w,b
 23154  001C32  6F7E               	movwf	??_sprintf& (0+255),b
 23155  001C34  0E00               	movlw	0
 23156  001C36  2187               	addwfc	(_sprintf$2151+1)& (0+255),w,b
 23157  001C38  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23158  001C3A  C07E  FFF6         	movff	??_sprintf,tblptrl
 23159  001C3E  C07F  FFF7         	movff	??_sprintf+1,tblptrh
 23160  001C42  0008               	tblrd		*
 23161  001C44  CFF5 F091          	movff	tablat,sprintf@c
 23162                           
 23163                           ;doprnt.c: 1515: }
 23164                           ;doprnt.c: 1517: break;
 23165  001C48  D016               	goto	l11899
 23166  001C4A                     l11893:
 23167                           
 23168                           ; BSR set to: 0
 23169                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 23170  001C4A  D852               	call	PL24	;call to abstracted procedure
 23171  001C4C  0EB4               	movlw	low _octpowers
 23172  001C4E  257E               	addwf	??_sprintf& (0+255),w,b
 23173  001C50  6EF6               	movwf	tblptrl,c
 23174  001C52  0E6F               	movlw	high _octpowers
 23175  001C54  D836               	call	PL14	;call to abstracted procedure
 23176  001C56  ECC0  F026         	call	___lldiv	;wreg free
 23177  001C5A  5160               	movf	?___lldiv& (0+255),w,b
 23178  001C5C  0B07               	andlw	7
 23179  001C5E                     L40:
 23180  001C5E  0F30               	addlw	48
 23181  001C60  6F91               	movwf	sprintf@c& (0+255),b
 23182                           
 23183                           ;doprnt.c: 1527: break;
 23184  001C62  D009               	goto	l11899
 23185  001C64                     l11897:
 23186                           
 23187                           ; BSR set to: 0
 23188  001C64  5192               	movf	sprintf@flag& (0+255),w,b
 23189  001C66  0BC0               	andlw	192
 23190                           
 23191                           ; Switch size 1, requested type "space"
 23192                           ; Number of cases is 4, Range of values is 0 to 192
 23193                           ; switch strategies available:
 23194                           ; Name         Instructions Cycles
 23195                           ; simple_byte           13     7 (average)
 23196                           ;	Chosen strategy is simple_byte
 23197  001C68  E0A2               	bz	l11881
 23198  001C6A  0A40               	xorlw	64	; case 64
 23199  001C6C  E0EE               	bz	l11893
 23200  001C6E  0AC0               	xorlw	192	; case 128
 23201  001C70  E0C9               	bz	l11883
 23202  001C72  0A40               	xorlw	64	; case 192
 23203  001C74  E09C               	bz	l11881
 23204  001C76                     l11899:
 23205                           
 23206                           ; BSR set to: 0
 23207                           ;doprnt.c: 1531: ((*sp++ = (c)));
 23208  001C76  C076  FFD9         	movff	sprintf@sp,fsr2l
 23209  001C7A  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23210  001C7E  C091  FFDF         	movff	sprintf@c,indf2
 23211  001C82  D777               	goto	l11863
 23212  001C84                     l11903:
 23213                           
 23214                           ; BSR set to: 0
 23215  001C84  0789               	decf	sprintf@prec& (0+255),f,b
 23216  001C86  A0D8               	btfss	status,0,c
 23217  001C88  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 23218  001C8A  0100               	movlb	0	; () banked
 23219  001C8C  2989               	incf	sprintf@prec& (0+255),w,b
 23220  001C8E  B4D8               	btfsc	status,2,c
 23221  001C90  298A               	incf	(sprintf@prec+1)& (0+255),w,b
 23222  001C92  E1E8               	bnz	l11897
 23223                           
 23224                           ; BSR set to: 0
 23225                           ;doprnt.c: 1532: }
 23226                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 23227  001C94  A792               	btfss	sprintf@flag& (0+255),3,b
 23228  001C96  D00B               	goto	l11913
 23229                           
 23230                           ; BSR set to: 0
 23231  001C98  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23232  001C9A  0A80               	xorlw	128
 23233  001C9C  0F80               	addlw	-128
 23234  001C9E  0E01               	movlw	1
 23235  001CA0  B4D8               	btfsc	status,2,c
 23236  001CA2  5D8B               	subwf	sprintf@width& (0+255),w,b
 23237  001CA4  E304               	bnc	l11913
 23238  001CA6                     l11907:
 23239                           
 23240                           ; BSR set to: 0
 23241                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 23242  001CA6  C076  FFD9         	movff	sprintf@sp,fsr2l
 23243                           
 23244                           ; BSR set to: 0
 23245                           
 23246                           ; BSR set to: 0
 23247                           ;doprnt.c: 1538: while(--width);
 23248  001CAA  D835               	call	PL46	;call to abstracted procedure
 23249  001CAC  E1FC               	bnz	l11907
 23250  001CAE                     l11913:
 23251                           
 23252                           ; BSR set to: 0
 23253  001CAE  D84B               	call	PL62	;call to abstracted procedure
 23254  001CB0  6791               	tstfsz	sprintf@c& (0+255),b
 23255  001CB2  D4D1               	goto	l11579
 23256  001CB4                     l11915:
 23257                           
 23258                           ; BSR set to: 0
 23259                           ;doprnt.c: 1545: *sp = 0;
 23260  001CB4  C076  FFD9         	movff	sprintf@sp,fsr2l
 23261  001CB8  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23262  001CBC  0E00               	movlw	0
 23263  001CBE  6EDF               	movwf	indf2,c
 23264                           
 23265                           ; BSR set to: 0
 23266  001CC0  0C00               	retlw	0
 23267  001CC2                     __end_of_sprintf:
 23268                           	opt stack 0
 23269  001CC2                     PL14:
 23270                           	opt stack 25
 23271  001CC2  217F               	addwfc	(??_sprintf+1)& (0+255),w,b
 23272  001CC4  6EF7               	movwf	tblptrh,c
 23273  001CC6  0009               	tblrd		*+
 23274  001CC8  CFF5 F064          	movff	tablat,?___lldiv+4
 23275  001CCC  0009               	tblrd		*+
 23276  001CCE  CFF5 F065          	movff	tablat,?___lldiv+5
 23277  001CD2  0009               	tblrd		*+
 23278  001CD4  CFF5 F066          	movff	tablat,?___lldiv+6
 23279  001CD8  000A               	tblrd		*-
 23280  001CDA  CFF5 F067          	movff	tablat,?___lldiv+7
 23281  001CDE  0012               	return	
 23282  001CE0                     __end_ofPL14:
 23283                           	opt stack 0
 23284  001CE0                     PL18:
 23285                           	opt stack 25
 23286  001CE0  1592               	andwf	sprintf@flag& (0+255),w,b
 23287  001CE2  6F7E               	movwf	??_sprintf& (0+255),b
 23288  001CE4  0E08               	movlw	8
 23289  001CE6  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
 23290  001CE8  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23291  001CEA  517F               	movf	(??_sprintf+1)& (0+255),w,b
 23292  001CEC  0A08               	xorlw	8
 23293  001CEE  0012               	return	
 23294  001CF0                     __end_ofPL18:
 23295                           	opt stack 0
 23296  001CF0                     PL24:
 23297                           	opt stack 25
 23298  001CF0  C08D  F060         	movff	sprintf@_val,?___lldiv
 23299  001CF4  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23300  001CF8  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23301  001CFC  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23302  001D00  C089  F07E         	movff	sprintf@prec,??_sprintf
 23303  001D04  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23304  001D08  90D8               	bcf	status,0,c
 23305  001D0A  377E               	rlcf	??_sprintf& (0+255),f,b
 23306  001D0C  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23307  001D0E  90D8               	bcf	status,0,c
 23308  001D10  377E               	rlcf	??_sprintf& (0+255),f,b
 23309  001D12  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23310  001D14  0012               	return	
 23311  001D16                     __end_ofPL24:
 23312                           	opt stack 0
 23313  001D16                     PL46:
 23314                           	opt stack 25
 23315  001D16  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23316  001D1A  0E20               	movlw	32
 23317  001D1C  6EDF               	movwf	indf2,c
 23318  001D1E  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23319  001D20  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23320  001D22  078B               	decf	sprintf@width& (0+255),f,b
 23321  001D24  A0D8               	btfss	status,0,c
 23322  001D26  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23323  001D28  0100               	movlb	0	; () banked
 23324  001D2A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23325  001D2C  118B               	iorwf	sprintf@width& (0+255),w,b
 23326  001D2E  0012               	return	
 23327  001D30                     __end_ofPL46:
 23328                           	opt stack 0
 23329  001D30                     PL58:
 23330                           	opt stack 25
 23331  001D30  6ED9               	movwf	fsr2l,c
 23332  001D32  6ADA               	clrf	fsr2h,c
 23333  001D34  CFDE F08D          	movff	postinc2,sprintf@_val
 23334  001D38  CFDE F08E          	movff	postinc2,sprintf@_val+1
 23335  001D3C  CFDE F08F          	movff	postinc2,sprintf@_val+2
 23336  001D40  CFDE F090          	movff	postinc2,sprintf@_val+3
 23337  001D44  0C04               	retlw	4
 23338  001D46                     __end_ofPL58:
 23339                           	opt stack 0
 23340  001D46                     PL62:
 23341                           	opt stack 25
 23342  001D46  C078  FFF6         	movff	sprintf@f,tblptrl
 23343  001D4A  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23344  001D4E  4B78               	infsnz	sprintf@f& (0+255),f,b
 23345  001D50  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23346  001D52  0008               	tblrd		*
 23347  001D54  CFF5 F091          	movff	tablat,sprintf@c
 23348  001D58  0100               	movlb	0	; () banked
 23349  001D5A  0012               	return	
 23350  001D5C                     __end_ofPL62:
 23351                           	opt stack 0
 23352  001D5C                     PL68:
 23353                           	opt stack 25
 23354  001D5C  C076  FFD9         	movff	sprintf@sp,fsr2l
 23355  001D60  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23356  001D64  0E20               	movlw	32
 23357  001D66  6EDF               	movwf	indf2,c
 23358  001D68  0C20               	retlw	32
 23359  001D6A                     __end_ofPL68:
 23360                           	opt stack 0
 23361  001D6A                     PL86:
 23362                           	opt stack 25
 23363  001D6A  4B78               	infsnz	sprintf@f& (0+255),f,b
 23364  001D6C  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23365  001D6E  C078  FFF6         	movff	sprintf@f,tblptrl
 23366  001D72  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23367  001D76  0008               	tblrd		*
 23368  001D78  50F5               	movf	tablat,w,c
 23369  001D7A  0012               	return	
 23370  001D7C                     __end_ofPL86:
 23371                           	opt stack 0
 23372  001D7C                     PL102:
 23373                           	opt stack 25
 23374  001D7C  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23375  001D80  0E30               	movlw	48
 23376  001D82  6EDF               	movwf	indf2,c
 23377  001D84  0C30               	retlw	48
 23378  001D86                     __end_ofPL102:
 23379                           	opt stack 0
 23380  001D86                     PL112:
 23381                           	opt stack 25
 23382  001D86  A0D8               	btfss	status,0,c
 23383  001D88  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23384  001D8A  0100               	movlb	0	; () banked
 23385  001D8C  298B               	incf	sprintf@width& (0+255),w,b
 23386  001D8E  0012               	return	
 23387  001D90                     __end_ofPL112:
 23388                           	opt stack 0
 23389                           tblptru	equ	0xFF8
 23390                           tblptrh	equ	0xFF7
 23391                           tblptrl	equ	0xFF6
 23392                           tablat	equ	0xFF5
 23393                           prodh	equ	0xFF4
 23394                           prodl	equ	0xFF3
 23395                           intcon	equ	0xFF2
 23396                           indf0	equ	0xFEF
 23397                           postinc0	equ	0xFEE
 23398                           fsr0h	equ	0xFEA
 23399                           fsr0l	equ	0xFE9
 23400                           wreg	equ	0xFE8
 23401                           indf1	equ	0xFE7
 23402                           postinc1	equ	0xFE6
 23403                           postdec1	equ	0xFE5
 23404                           fsr1h	equ	0xFE2
 23405                           fsr1l	equ	0xFE1
 23406                           indf2	equ	0xFDF
 23407                           postinc2	equ	0xFDE
 23408                           postdec2	equ	0xFDD
 23409                           plusw2	equ	0xFDB
 23410                           fsr2h	equ	0xFDA
 23411                           fsr2l	equ	0xFD9
 23412                           status	equ	0xFD8
 23413                           
 23414 ;; *************** function ___wmul *****************
 23415 ;; Defined at:
 23416 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 23417 ;; Parameters:    Size  Location     Type
 23418 ;;  multiplier      2    0[BANK0 ] unsigned int 
 23419 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 23420 ;; Auto vars:     Size  Location     Type
 23421 ;;  product         2    4[BANK0 ] unsigned int 
 23422 ;; Return value:  Size  Location     Type
 23423 ;;                  2    0[BANK0 ] unsigned int 
 23424 ;; Registers used:
 23425 ;;		wreg, status,2, status,0, prodl, prodh
 23426 ;; Tracked objects:
 23427 ;;		On entry : F/0
 23428 ;;		On exit  : F/0
 23429 ;;		Unchanged: 0/0
 23430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23431 ;;      Params:         0       4       0       0       0       0       0
 23432 ;;      Locals:         0       2       0       0       0       0       0
 23433 ;;      Temps:          0       0       0       0       0       0       0
 23434 ;;      Totals:         0       6       0       0       0       0       0
 23435 ;;Total ram usage:        6 bytes
 23436 ;; Hardware stack levels used:    1
 23437 ;; Hardware stack levels required when called:    3
 23438 ;; This function calls:
 23439 ;;		Nothing
 23440 ;; This function is called by:
 23441 ;;		_sprintf
 23442 ;;		_atoi
 23443 ;; This function uses a non-reentrant model
 23444 ;;
 23445                           
 23446                           	psect	text57
 23447  00561A                     __ptext57:
 23448                           	opt stack 0
 23449  00561A                     ___wmul:
 23450                           	opt stack 25
 23451                           
 23452                           ; BSR set to: 0
 23453                           
 23454                           ; BSR set to: 0
 23455                           ;incstack = 0
 23456                           ;incstack = 0
 23457  00561A  5160               	movf	___wmul@multiplier& (0+255),w,b
 23458  00561C  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23459  00561E  CFF3 F064          	movff	prodl,___wmul@product
 23460  005622  CFF4 F065          	movff	prodh,___wmul@product+1
 23461  005626  5160               	movf	___wmul@multiplier& (0+255),w,b
 23462  005628  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 23463  00562A  D808               	call	PL90	;call to abstracted procedure
 23464  00562C  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 23465  00562E  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23466  005630  D805               	call	PL90	;call to abstracted procedure
 23467                           
 23468                           ; BSR set to: 0
 23469  005632  C064  F060         	movff	___wmul@product,?___wmul
 23470  005636  C065  F061         	movff	___wmul@product+1,?___wmul+1
 23471                           
 23472                           ; BSR set to: 0
 23473  00563A  0012               	return	
 23474  00563C                     __end_of___wmul:
 23475                           	opt stack 0
 23476  00563C                     PL90:
 23477                           	opt stack 25
 23478  00563C  CFF3 FFF4          	movff	prodl,prodh
 23479  005640  6AF3               	clrf	prodl,c
 23480  005642  50F3               	movf	prodl,w,c
 23481  005644  2764               	addwf	___wmul@product& (0+255),f,b
 23482  005646  50F4               	movf	prodh,w,c
 23483  005648  2365               	addwfc	(___wmul@product+1)& (0+255),f,b
 23484  00564A  0012               	return	
 23485  00564C                     __end_ofPL90:
 23486                           	opt stack 0
 23487                           tblptru	equ	0xFF8
 23488                           tblptrh	equ	0xFF7
 23489                           tblptrl	equ	0xFF6
 23490                           tablat	equ	0xFF5
 23491                           prodh	equ	0xFF4
 23492                           prodl	equ	0xFF3
 23493                           intcon	equ	0xFF2
 23494                           indf0	equ	0xFEF
 23495                           postinc0	equ	0xFEE
 23496                           fsr0h	equ	0xFEA
 23497                           fsr0l	equ	0xFE9
 23498                           wreg	equ	0xFE8
 23499                           indf1	equ	0xFE7
 23500                           postinc1	equ	0xFE6
 23501                           postdec1	equ	0xFE5
 23502                           fsr1h	equ	0xFE2
 23503                           fsr1l	equ	0xFE1
 23504                           indf2	equ	0xFDF
 23505                           postinc2	equ	0xFDE
 23506                           postdec2	equ	0xFDD
 23507                           plusw2	equ	0xFDB
 23508                           fsr2h	equ	0xFDA
 23509                           fsr2l	equ	0xFD9
 23510                           status	equ	0xFD8
 23511                           
 23512 ;; *************** function ___llmod *****************
 23513 ;; Defined at:
 23514 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 23515 ;; Parameters:    Size  Location     Type
 23516 ;;  dividend        4   13[BANK0 ] unsigned long 
 23517 ;;  divisor         4   17[BANK0 ] unsigned long 
 23518 ;; Auto vars:     Size  Location     Type
 23519 ;;  counter         1   21[BANK0 ] unsigned char 
 23520 ;; Return value:  Size  Location     Type
 23521 ;;                  4   13[BANK0 ] unsigned long 
 23522 ;; Registers used:
 23523 ;;		wreg, status,2, status,0
 23524 ;; Tracked objects:
 23525 ;;		On entry : F/0
 23526 ;;		On exit  : F/0
 23527 ;;		Unchanged: 0/0
 23528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23529 ;;      Params:         0       8       0       0       0       0       0
 23530 ;;      Locals:         0       1       0       0       0       0       0
 23531 ;;      Temps:          0       0       0       0       0       0       0
 23532 ;;      Totals:         0       9       0       0       0       0       0
 23533 ;;Total ram usage:        9 bytes
 23534 ;; Hardware stack levels used:    1
 23535 ;; Hardware stack levels required when called:    3
 23536 ;; This function calls:
 23537 ;;		Nothing
 23538 ;; This function is called by:
 23539 ;;		_sprintf
 23540 ;;		_ultoa
 23541 ;; This function uses a non-reentrant model
 23542 ;;
 23543                           
 23544                           	psect	text58
 23545  005076                     __ptext58:
 23546                           	opt stack 0
 23547  005076                     ___llmod:
 23548                           	opt stack 24
 23549                           
 23550                           ; BSR set to: 0
 23551                           
 23552                           ; BSR set to: 0
 23553                           ;incstack = 0
 23554                           ;incstack = 0
 23555  005076  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23556  005078  1171               	iorwf	___llmod@divisor& (0+255),w,b
 23557  00507A  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 23558  00507C  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 23559  00507E  E023               	bz	l2328
 23560                           
 23561                           ; BSR set to: 0
 23562  005080  0E01               	movlw	1
 23563  005082  6F75               	movwf	___llmod@counter& (0+255),b
 23564  005084  D006               	goto	l12873
 23565  005086                     l12871:
 23566                           
 23567                           ; BSR set to: 0
 23568  005086  90D8               	bcf	status,0,c
 23569  005088  3771               	rlcf	___llmod@divisor& (0+255),f,b
 23570  00508A  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 23571  00508C  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 23572  00508E  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 23573  005090  2B75               	incf	___llmod@counter& (0+255),f,b
 23574  005092                     l12873:
 23575                           
 23576                           ; BSR set to: 0
 23577  005092  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
 23578  005094  D7F8               	goto	l12871
 23579  005096                     l12875:
 23580                           
 23581                           ; BSR set to: 0
 23582  005096  5171               	movf	___llmod@divisor& (0+255),w,b
 23583  005098  5D6D               	subwf	___llmod@dividend& (0+255),w,b
 23584  00509A  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23585  00509C  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 23586  00509E  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23587  0050A0  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 23588  0050A2  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23589  0050A4  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 23590  0050A6  E308               	bnc	l12879
 23591                           
 23592                           ; BSR set to: 0
 23593  0050A8  5171               	movf	___llmod@divisor& (0+255),w,b
 23594  0050AA  5F6D               	subwf	___llmod@dividend& (0+255),f,b
 23595  0050AC  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23596  0050AE  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 23597  0050B0  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23598  0050B2  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 23599  0050B4  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23600  0050B6  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 23601  0050B8                     l12879:
 23602                           
 23603                           ; BSR set to: 0
 23604  0050B8  90D8               	bcf	status,0,c
 23605  0050BA  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 23606  0050BC  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 23607  0050BE  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 23608  0050C0  3371               	rrcf	___llmod@divisor& (0+255),f,b
 23609                           
 23610                           ; BSR set to: 0
 23611  0050C2  2F75               	decfsz	___llmod@counter& (0+255),f,b
 23612  0050C4  D7E8               	goto	l12875
 23613  0050C6                     l2328:
 23614                           
 23615                           ; BSR set to: 0
 23616  0050C6  C06D  F06D         	movff	___llmod@dividend,?___llmod
 23617  0050CA  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
 23618  0050CE  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
 23619  0050D2  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
 23620                           
 23621                           ; BSR set to: 0
 23622  0050D6  0012               	return	
 23623  0050D8                     __end_of___llmod:
 23624                           	opt stack 0
 23625                           tblptru	equ	0xFF8
 23626                           tblptrh	equ	0xFF7
 23627                           tblptrl	equ	0xFF6
 23628                           tablat	equ	0xFF5
 23629                           prodh	equ	0xFF4
 23630                           prodl	equ	0xFF3
 23631                           intcon	equ	0xFF2
 23632                           indf0	equ	0xFEF
 23633                           postinc0	equ	0xFEE
 23634                           fsr0h	equ	0xFEA
 23635                           fsr0l	equ	0xFE9
 23636                           wreg	equ	0xFE8
 23637                           indf1	equ	0xFE7
 23638                           postinc1	equ	0xFE6
 23639                           postdec1	equ	0xFE5
 23640                           fsr1h	equ	0xFE2
 23641                           fsr1l	equ	0xFE1
 23642                           indf2	equ	0xFDF
 23643                           postinc2	equ	0xFDE
 23644                           postdec2	equ	0xFDD
 23645                           plusw2	equ	0xFDB
 23646                           fsr2h	equ	0xFDA
 23647                           fsr2l	equ	0xFD9
 23648                           status	equ	0xFD8
 23649                           
 23650 ;; *************** function ___lldiv *****************
 23651 ;; Defined at:
 23652 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 23653 ;; Parameters:    Size  Location     Type
 23654 ;;  dividend        4    0[BANK0 ] unsigned long 
 23655 ;;  divisor         4    4[BANK0 ] unsigned long 
 23656 ;; Auto vars:     Size  Location     Type
 23657 ;;  quotient        4    8[BANK0 ] unsigned long 
 23658 ;;  counter         1   12[BANK0 ] unsigned char 
 23659 ;; Return value:  Size  Location     Type
 23660 ;;                  4    0[BANK0 ] unsigned long 
 23661 ;; Registers used:
 23662 ;;		wreg, status,2, status,0
 23663 ;; Tracked objects:
 23664 ;;		On entry : F/0
 23665 ;;		On exit  : F/0
 23666 ;;		Unchanged: 0/0
 23667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23668 ;;      Params:         0       8       0       0       0       0       0
 23669 ;;      Locals:         0       5       0       0       0       0       0
 23670 ;;      Temps:          0       0       0       0       0       0       0
 23671 ;;      Totals:         0      13       0       0       0       0       0
 23672 ;;Total ram usage:       13 bytes
 23673 ;; Hardware stack levels used:    1
 23674 ;; Hardware stack levels required when called:    3
 23675 ;; This function calls:
 23676 ;;		Nothing
 23677 ;; This function is called by:
 23678 ;;		_sprintf
 23679 ;;		_ultoa
 23680 ;; This function uses a non-reentrant model
 23681 ;;
 23682                           
 23683                           	psect	text59
 23684  004D80                     __ptext59:
 23685                           	opt stack 0
 23686  004D80                     ___lldiv:
 23687                           	opt stack 24
 23688                           
 23689                           ; BSR set to: 0
 23690                           
 23691                           ; BSR set to: 0
 23692                           ;incstack = 0
 23693                           ;incstack = 0
 23694  004D80  6B68               	clrf	___lldiv@quotient& (0+255),b
 23695  004D82  6B69               	clrf	(___lldiv@quotient+1)& (0+255),b
 23696  004D84  6B6A               	clrf	(___lldiv@quotient+2)& (0+255),b
 23697  004D86  6B6B               	clrf	(___lldiv@quotient+3)& (0+255),b
 23698                           
 23699                           ; BSR set to: 0
 23700  004D88  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23701  004D8A  1164               	iorwf	___lldiv@divisor& (0+255),w,b
 23702  004D8C  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 23703  004D8E  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 23704  004D90  E029               	bz	l2318
 23705                           
 23706                           ; BSR set to: 0
 23707  004D92  0E01               	movlw	1
 23708  004D94  6F6C               	movwf	___lldiv@counter& (0+255),b
 23709  004D96  D006               	goto	l12853
 23710  004D98                     l12851:
 23711                           
 23712                           ; BSR set to: 0
 23713  004D98  90D8               	bcf	status,0,c
 23714  004D9A  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 23715  004D9C  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 23716  004D9E  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 23717  004DA0  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 23718  004DA2  2B6C               	incf	___lldiv@counter& (0+255),f,b
 23719  004DA4                     l12853:
 23720                           
 23721                           ; BSR set to: 0
 23722  004DA4  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 23723  004DA6  D7F8               	goto	l12851
 23724  004DA8                     l12855:
 23725                           
 23726                           ; BSR set to: 0
 23727  004DA8  90D8               	bcf	status,0,c
 23728  004DAA  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 23729  004DAC  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 23730  004DAE  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 23731  004DB0  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 23732                           
 23733                           ; BSR set to: 0
 23734  004DB2  5164               	movf	___lldiv@divisor& (0+255),w,b
 23735  004DB4  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 23736  004DB6  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23737  004DB8  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 23738  004DBA  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23739  004DBC  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 23740  004DBE  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23741  004DC0  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 23742  004DC2  E309               	bnc	l12863
 23743                           
 23744                           ; BSR set to: 0
 23745  004DC4  5164               	movf	___lldiv@divisor& (0+255),w,b
 23746  004DC6  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 23747  004DC8  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23748  004DCA  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 23749  004DCC  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23750  004DCE  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 23751  004DD0  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23752  004DD2  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 23753                           
 23754                           ; BSR set to: 0
 23755  004DD4  8168               	bsf	___lldiv@quotient& (0+255),0,b
 23756  004DD6                     l12863:
 23757                           
 23758                           ; BSR set to: 0
 23759  004DD6  90D8               	bcf	status,0,c
 23760  004DD8  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 23761  004DDA  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 23762  004DDC  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 23763  004DDE  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 23764                           
 23765                           ; BSR set to: 0
 23766  004DE0  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 23767  004DE2  D7E2               	goto	l12855
 23768  004DE4                     l2318:
 23769                           
 23770                           ; BSR set to: 0
 23771  004DE4  C068  F060         	movff	___lldiv@quotient,?___lldiv
 23772  004DE8  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 23773  004DEC  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 23774  004DF0  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 23775                           
 23776                           ; BSR set to: 0
 23777  004DF4  0012               	return	
 23778  004DF6                     __end_of___lldiv:
 23779                           	opt stack 0
 23780                           tblptru	equ	0xFF8
 23781                           tblptrh	equ	0xFF7
 23782                           tblptrl	equ	0xFF6
 23783                           tablat	equ	0xFF5
 23784                           prodh	equ	0xFF4
 23785                           prodl	equ	0xFF3
 23786                           intcon	equ	0xFF2
 23787                           indf0	equ	0xFEF
 23788                           postinc0	equ	0xFEE
 23789                           fsr0h	equ	0xFEA
 23790                           fsr0l	equ	0xFE9
 23791                           wreg	equ	0xFE8
 23792                           indf1	equ	0xFE7
 23793                           postinc1	equ	0xFE6
 23794                           postdec1	equ	0xFE5
 23795                           fsr1h	equ	0xFE2
 23796                           fsr1l	equ	0xFE1
 23797                           indf2	equ	0xFDF
 23798                           postinc2	equ	0xFDE
 23799                           postdec2	equ	0xFDD
 23800                           plusw2	equ	0xFDB
 23801                           fsr2h	equ	0xFDA
 23802                           fsr2l	equ	0xFD9
 23803                           status	equ	0xFD8
 23804                           
 23805 ;; *************** function _isdigit *****************
 23806 ;; Defined at:
 23807 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 23808 ;; Parameters:    Size  Location     Type
 23809 ;;  c               1    wreg     unsigned char 
 23810 ;; Auto vars:     Size  Location     Type
 23811 ;;  c               1    2[BANK0 ] unsigned char 
 23812 ;; Return value:  Size  Location     Type
 23813 ;;		None               void
 23814 ;; Registers used:
 23815 ;;		wreg, status,2, status,0
 23816 ;; Tracked objects:
 23817 ;;		On entry : 0/0
 23818 ;;		On exit  : F/0
 23819 ;;		Unchanged: 0/0
 23820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23821 ;;      Params:         0       0       0       0       0       0       0
 23822 ;;      Locals:         0       2       0       0       0       0       0
 23823 ;;      Temps:          0       1       0       0       0       0       0
 23824 ;;      Totals:         0       3       0       0       0       0       0
 23825 ;;Total ram usage:        3 bytes
 23826 ;; Hardware stack levels used:    1
 23827 ;; Hardware stack levels required when called:    3
 23828 ;; This function calls:
 23829 ;;		Nothing
 23830 ;; This function is called by:
 23831 ;;		_sprintf
 23832 ;;		_atoi
 23833 ;; This function uses a non-reentrant model
 23834 ;;
 23835                           
 23836                           	psect	text60
 23837  0056FE                     __ptext60:
 23838                           	opt stack 0
 23839  0056FE                     _isdigit:
 23840                           	opt stack 25
 23841                           
 23842                           ; BSR set to: 0
 23843                           ;incstack = 0
 23844                           ;incstack = 0
 23845                           ;isdigit@c stored from wreg
 23846  0056FE  CFE8 F062          	movff	wreg,isdigit@c
 23847  005702  0100               	movlb	0	; () banked
 23848  005704  6B61               	clrf	_isdigit$2895& (0+255),b
 23849                           
 23850                           ; BSR set to: 0
 23851  005706  0E3A               	movlw	58
 23852  005708  6162               	cpfslt	isdigit@c& (0+255),b
 23853  00570A  D005               	goto	l12811
 23854                           
 23855                           ; BSR set to: 0
 23856  00570C  0E2F               	movlw	47
 23857  00570E  6562               	cpfsgt	isdigit@c& (0+255),b
 23858  005710  D002               	goto	l12811
 23859                           
 23860                           ; BSR set to: 0
 23861  005712  0E01               	movlw	1
 23862  005714  6F61               	movwf	_isdigit$2895& (0+255),b
 23863  005716                     l12811:
 23864                           
 23865                           ; BSR set to: 0
 23866  005716  C061  F060         	movff	_isdigit$2895,??_isdigit
 23867  00571A  3160               	rrcf	??_isdigit& (0+255),w,b
 23868                           
 23869                           ; BSR set to: 0
 23870  00571C  0012               	return	
 23871  00571E                     __end_of_isdigit:
 23872                           	opt stack 0
 23873                           tblptru	equ	0xFF8
 23874                           tblptrh	equ	0xFF7
 23875                           tblptrl	equ	0xFF6
 23876                           tablat	equ	0xFF5
 23877                           prodh	equ	0xFF4
 23878                           prodl	equ	0xFF3
 23879                           intcon	equ	0xFF2
 23880                           indf0	equ	0xFEF
 23881                           postinc0	equ	0xFEE
 23882                           fsr0h	equ	0xFEA
 23883                           fsr0l	equ	0xFE9
 23884                           wreg	equ	0xFE8
 23885                           indf1	equ	0xFE7
 23886                           postinc1	equ	0xFE6
 23887                           postdec1	equ	0xFE5
 23888                           fsr1h	equ	0xFE2
 23889                           fsr1l	equ	0xFE1
 23890                           indf2	equ	0xFDF
 23891                           postinc2	equ	0xFDE
 23892                           postdec2	equ	0xFDD
 23893                           plusw2	equ	0xFDB
 23894                           fsr2h	equ	0xFDA
 23895                           fsr2l	equ	0xFD9
 23896                           status	equ	0xFD8
 23897                           
 23898 ;; *************** function _printFirmwareVersion *****************
 23899 ;; Defined at:
 23900 ;;		line 2734 in file "main.c"
 23901 ;; Parameters:    Size  Location     Type
 23902 ;;		None
 23903 ;; Auto vars:     Size  Location     Type
 23904 ;;  wrkbuf         20   24[BANK0 ] unsigned char [20]
 23905 ;; Return value:  Size  Location     Type
 23906 ;;		None               void
 23907 ;; Registers used:
 23908 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 23909 ;; Tracked objects:
 23910 ;;		On entry : 0/0
 23911 ;;		On exit  : 0/0
 23912 ;;		Unchanged: 0/0
 23913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23914 ;;      Params:         0       0       0       0       0       0       0
 23915 ;;      Locals:         0      20       0       0       0       0       0
 23916 ;;      Temps:          0       0       0       0       0       0       0
 23917 ;;      Totals:         0      20       0       0       0       0       0
 23918 ;;Total ram usage:       20 bytes
 23919 ;; Hardware stack levels used:    1
 23920 ;; Hardware stack levels required when called:    6
 23921 ;; This function calls:
 23922 ;;		_putsUSART
 23923 ;;		_WriteUSART
 23924 ;;		_itoa
 23925 ;; This function is called by:
 23926 ;;		_main
 23927 ;;		_doModeVerbose
 23928 ;; This function uses a non-reentrant model
 23929 ;;
 23930                           
 23931                           	psect	text61
 23932  004A72                     __ptext61:
 23933                           	opt stack 0
 23934  004A72                     _printFirmwareVersion:
 23935                           	opt stack 23
 23936                           
 23937                           ;main.c: 2735: char wrkbuf[20];
 23938                           ;main.c: 2736: putsUSART((char *) "Version: ");
 23939                           
 23940                           ; BSR set to: 0
 23941                           ;incstack = 0
 23942                           ;incstack = 0
 23943  004A72  0E7E               	movlw	high STR_254
 23944  004A74  0100               	movlb	0	; () banked
 23945  004A76  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23946  004A78  0E9C               	movlw	low STR_254
 23947  004A7A  6F61               	movwf	?_putsUSART& (0+255),b
 23948  004A7C  ECF6  F028         	call	_putsUSART	;wreg free
 23949                           
 23950                           ;main.c: 2737: itoa(wrkbuf, 1, 10);
 23951  004A80  D838               	call	PL64	;call to abstracted procedure
 23952  004A82  0E01               	movlw	1
 23953  004A84  6F72               	movwf	(?_itoa+2)& (0+255),b
 23954  004A86  6B75               	clrf	(?_itoa+5)& (0+255),b
 23955  004A88  0E0A               	movlw	10
 23956  004A8A  6F74               	movwf	(?_itoa+4)& (0+255),b
 23957  004A8C  ECD6  F02A         	call	_itoa	;wreg free
 23958                           
 23959                           ; BSR set to: 0
 23960                           ;main.c: 2738: putsUSART(wrkbuf);
 23961  004A90  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23962  004A92  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23963  004A94  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23964  004A96  6F61               	movwf	?_putsUSART& (0+255),b
 23965  004A98  ECF6  F028         	call	_putsUSART	;wreg free
 23966  004A9C                     l1209:
 23967  004A9C  A2AC               	btfss	4012,1,c	;volatile
 23968  004A9E  D7FE               	goto	l1209
 23969                           
 23970                           ;main.c: 2740: WriteUSART('.');
 23971  004AA0  0E2E               	movlw	46
 23972  004AA2  ECC5  F02B         	call	_WriteUSART
 23973                           
 23974                           ;main.c: 2741: itoa(wrkbuf, 0, 10);
 23975  004AA6  D825               	call	PL64	;call to abstracted procedure
 23976  004AA8  6B72               	clrf	(?_itoa+2)& (0+255),b
 23977  004AAA  6B75               	clrf	(?_itoa+5)& (0+255),b
 23978  004AAC  0E0A               	movlw	10
 23979  004AAE  6F74               	movwf	(?_itoa+4)& (0+255),b
 23980  004AB0  ECD6  F02A         	call	_itoa	;wreg free
 23981                           
 23982                           ; BSR set to: 0
 23983                           ;main.c: 2742: putsUSART(wrkbuf);
 23984  004AB4  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23985  004AB6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23986  004AB8  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23987  004ABA  6F61               	movwf	?_putsUSART& (0+255),b
 23988  004ABC  ECF6  F028         	call	_putsUSART	;wreg free
 23989  004AC0                     l1212:
 23990  004AC0  A2AC               	btfss	4012,1,c	;volatile
 23991  004AC2  D7FE               	goto	l1212
 23992                           
 23993                           ;main.c: 2744: WriteUSART('.');
 23994  004AC4  0E2E               	movlw	46
 23995  004AC6  ECC5  F02B         	call	_WriteUSART
 23996                           
 23997                           ;main.c: 2745: itoa(wrkbuf, 0, 10);
 23998  004ACA  D813               	call	PL64	;call to abstracted procedure
 23999  004ACC  6B72               	clrf	(?_itoa+2)& (0+255),b
 24000  004ACE  6B75               	clrf	(?_itoa+5)& (0+255),b
 24001  004AD0  0E0A               	movlw	10
 24002  004AD2  6F74               	movwf	(?_itoa+4)& (0+255),b
 24003  004AD4  ECD6  F02A         	call	_itoa	;wreg free
 24004                           
 24005                           ; BSR set to: 0
 24006                           ;main.c: 2746: putsUSART(wrkbuf);
 24007  004AD8  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24008  004ADA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24009  004ADC  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24010  004ADE  6F61               	movwf	?_putsUSART& (0+255),b
 24011  004AE0  ECF6  F028         	call	_putsUSART	;wreg free
 24012                           
 24013                           ;main.c: 2747: putsUSART((char *) "\r\n");
 24014  004AE4  0E74               	movlw	high (STR_197+50)
 24015  004AE6  0100               	movlb	0	; () banked
 24016  004AE8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24017  004AEA  0E8A               	movlw	low (STR_197+50)
 24018  004AEC  6F61               	movwf	?_putsUSART& (0+255),b
 24019  004AEE  EFF6  F028         	goto	_putsUSART	;wreg free
 24020  004AF2                     __end_of_printFirmwareVersion:
 24021                           	opt stack 0
 24022  004AF2                     PL64:
 24023                           	opt stack 23
 24024  004AF2  0100               	movlb	0	; () banked
 24025  004AF4  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24026  004AF6  6F71               	movwf	(?_itoa+1)& (0+255),b
 24027  004AF8  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24028  004AFA  6F70               	movwf	?_itoa& (0+255),b
 24029  004AFC  6B73               	clrf	(?_itoa+3)& (0+255),b
 24030  004AFE  0012               	return	
 24031  004B00                     __end_ofPL64:
 24032                           	opt stack 0
 24033                           tblptru	equ	0xFF8
 24034                           tblptrh	equ	0xFF7
 24035                           tblptrl	equ	0xFF6
 24036                           tablat	equ	0xFF5
 24037                           prodh	equ	0xFF4
 24038                           prodl	equ	0xFF3
 24039                           intcon	equ	0xFF2
 24040                           indf0	equ	0xFEF
 24041                           postinc0	equ	0xFEE
 24042                           fsr0h	equ	0xFEA
 24043                           fsr0l	equ	0xFE9
 24044                           wreg	equ	0xFE8
 24045                           indf1	equ	0xFE7
 24046                           postinc1	equ	0xFE6
 24047                           postdec1	equ	0xFE5
 24048                           fsr1h	equ	0xFE2
 24049                           fsr1l	equ	0xFE1
 24050                           indf2	equ	0xFDF
 24051                           postinc2	equ	0xFDE
 24052                           postdec2	equ	0xFDD
 24053                           plusw2	equ	0xFDB
 24054                           fsr2h	equ	0xFDA
 24055                           fsr2l	equ	0xFD9
 24056                           status	equ	0xFD8
 24057                           
 24058 ;; *************** function _itoa *****************
 24059 ;; Defined at:
 24060 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24061 ;; Parameters:    Size  Location     Type
 24062 ;;  buf             2   16[BANK0 ] PTR unsigned char 
 24063 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24064 ;;  val             2   18[BANK0 ] int 
 24065 ;;  base            2   20[BANK0 ] int 
 24066 ;; Auto vars:     Size  Location     Type
 24067 ;;  cp              2    0        PTR unsigned char 
 24068 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24069 ;; Return value:  Size  Location     Type
 24070 ;;                  2   16[BANK0 ] PTR unsigned char 
 24071 ;; Registers used:
 24072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24073 ;; Tracked objects:
 24074 ;;		On entry : F/0
 24075 ;;		On exit  : F/0
 24076 ;;		Unchanged: 0/0
 24077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24078 ;;      Params:         0       6       0       0       0       0       0
 24079 ;;      Locals:         0       2       0       0       0       0       0
 24080 ;;      Temps:          0       0       0       0       0       0       0
 24081 ;;      Totals:         0       8       0       0       0       0       0
 24082 ;;Total ram usage:        8 bytes
 24083 ;; Hardware stack levels used:    1
 24084 ;; Hardware stack levels required when called:    5
 24085 ;; This function calls:
 24086 ;;		_utoa
 24087 ;; This function is called by:
 24088 ;;		_receiveSendEventSLCAN
 24089 ;;		_findNodes
 24090 ;;		_printGUID
 24091 ;;		_printNodeFirmwareVersion
 24092 ;;		_printFirmwareVersion
 24093 ;; This function uses a non-reentrant model
 24094 ;;
 24095                           
 24096                           	psect	text62
 24097  0055AC                     __ptext62:
 24098                           	opt stack 0
 24099  0055AC                     _itoa:
 24100                           	opt stack 23
 24101                           
 24102                           ; BSR set to: 0
 24103                           
 24104                           ;incstack = 0
 24105                           ;incstack = 0
 24106  0055AC  AF73               	btfss	(itoa@val+1)& (0+255),7,b
 24107  0055AE  D00C               	goto	l12655
 24108                           
 24109                           ; BSR set to: 0
 24110  0055B0  C070  FFD9         	movff	itoa@buf,fsr2l
 24111  0055B4  C071  FFDA         	movff	itoa@buf+1,fsr2h
 24112  0055B8  0E2D               	movlw	45
 24113  0055BA  6EDF               	movwf	indf2,c
 24114                           
 24115                           ; BSR set to: 0
 24116  0055BC  4B70               	infsnz	itoa@buf& (0+255),f,b
 24117  0055BE  2B71               	incf	(itoa@buf+1)& (0+255),f,b
 24118                           
 24119                           ; BSR set to: 0
 24120  0055C0  6D72               	negf	itoa@val& (0+255),b
 24121  0055C2  1F73               	comf	(itoa@val+1)& (0+255),f,b
 24122  0055C4  B0D8               	btfsc	status,0,c
 24123  0055C6  2B73               	incf	(itoa@val+1)& (0+255),f,b
 24124  0055C8                     l12655:
 24125                           
 24126                           ; BSR set to: 0
 24127  0055C8  C070  F067         	movff	itoa@buf,?_utoa
 24128  0055CC  C071  F068         	movff	itoa@buf+1,?_utoa+1
 24129  0055D0  C072  F069         	movff	itoa@val,?_utoa+2
 24130  0055D4  C073  F06A         	movff	itoa@val+1,?_utoa+3
 24131  0055D8  C074  F06B         	movff	itoa@base,?_utoa+4
 24132  0055DC  C075  F06C         	movff	itoa@base+1,?_utoa+5
 24133  0055E0  EFB8  F023         	goto	_utoa	;wreg free
 24134  0055E4                     __end_of_itoa:
 24135                           	opt stack 0
 24136                           tblptru	equ	0xFF8
 24137                           tblptrh	equ	0xFF7
 24138                           tblptrl	equ	0xFF6
 24139                           tablat	equ	0xFF5
 24140                           prodh	equ	0xFF4
 24141                           prodl	equ	0xFF3
 24142                           intcon	equ	0xFF2
 24143                           indf0	equ	0xFEF
 24144                           postinc0	equ	0xFEE
 24145                           fsr0h	equ	0xFEA
 24146                           fsr0l	equ	0xFE9
 24147                           wreg	equ	0xFE8
 24148                           indf1	equ	0xFE7
 24149                           postinc1	equ	0xFE6
 24150                           postdec1	equ	0xFE5
 24151                           fsr1h	equ	0xFE2
 24152                           fsr1l	equ	0xFE1
 24153                           indf2	equ	0xFDF
 24154                           postinc2	equ	0xFDE
 24155                           postdec2	equ	0xFDD
 24156                           plusw2	equ	0xFDB
 24157                           fsr2h	equ	0xFDA
 24158                           fsr2l	equ	0xFD9
 24159                           status	equ	0xFD8
 24160                           
 24161 ;; *************** function _utoa *****************
 24162 ;; Defined at:
 24163 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24164 ;; Parameters:    Size  Location     Type
 24165 ;;  buf             2    7[BANK0 ] PTR unsigned char 
 24166 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24167 ;;  val             2    9[BANK0 ] unsigned int 
 24168 ;;  base            2   11[BANK0 ] int 
 24169 ;; Auto vars:     Size  Location     Type
 24170 ;;  v               2   13[BANK0 ] unsigned int 
 24171 ;;  c               1   15[BANK0 ] unsigned char 
 24172 ;; Return value:  Size  Location     Type
 24173 ;;                  2    7[BANK0 ] PTR unsigned char 
 24174 ;; Registers used:
 24175 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24176 ;; Tracked objects:
 24177 ;;		On entry : F/0
 24178 ;;		On exit  : F/0
 24179 ;;		Unchanged: 0/0
 24180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24181 ;;      Params:         0       6       0       0       0       0       0
 24182 ;;      Locals:         0       3       0       0       0       0       0
 24183 ;;      Temps:          0       0       0       0       0       0       0
 24184 ;;      Totals:         0       9       0       0       0       0       0
 24185 ;;Total ram usage:        9 bytes
 24186 ;; Hardware stack levels used:    1
 24187 ;; Hardware stack levels required when called:    4
 24188 ;; This function calls:
 24189 ;;		___lwdiv
 24190 ;;		___lwmod
 24191 ;; This function is called by:
 24192 ;;		_itoa
 24193 ;; This function uses a non-reentrant model
 24194 ;;
 24195                           
 24196                           	psect	text63
 24197  004770                     __ptext63:
 24198                           	opt stack 0
 24199  004770                     _utoa:
 24200                           	opt stack 23
 24201                           
 24202                           ; BSR set to: 0
 24203                           
 24204                           ; BSR set to: 0
 24205                           ;incstack = 0
 24206                           ;incstack = 0
 24207  004770  C069  F06D         	movff	utoa@val,utoa@v
 24208  004774  C06A  F06E         	movff	utoa@val+1,utoa@v+1
 24209  004778                     l12817:
 24210                           
 24211                           ; BSR set to: 0
 24212  004778  C06D  F060         	movff	utoa@v,?___lwdiv
 24213  00477C  C06E  F061         	movff	utoa@v+1,?___lwdiv+1
 24214  004780  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24215  004784  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24216  004788  EC6E  F029         	call	___lwdiv	;wreg free
 24217  00478C  C060  F06D         	movff	?___lwdiv,utoa@v
 24218  004790  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
 24219                           
 24220                           ; BSR set to: 0
 24221  004794  4B67               	infsnz	utoa@buf& (0+255),f,b
 24222  004796  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24223                           
 24224                           ; BSR set to: 0
 24225  004798  516E               	movf	(utoa@v+1)& (0+255),w,b
 24226  00479A  116D               	iorwf	utoa@v& (0+255),w,b
 24227  00479C  E1ED               	bnz	l12817
 24228                           
 24229                           ; BSR set to: 0
 24230  00479E  C067  FFD9         	movff	utoa@buf,fsr2l
 24231  0047A2  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24232  0047A6  0E00               	movlw	0
 24233  0047A8  6ADF               	clrf	indf2,c
 24234                           
 24235                           ; BSR set to: 0
 24236  0047AA  0767               	decf	utoa@buf& (0+255),f,b
 24237  0047AC  A0D8               	btfss	status,0,c
 24238  0047AE  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24239  0047B0                     l12827:
 24240                           
 24241                           ; BSR set to: 0
 24242  0047B0  C069  F060         	movff	utoa@val,?___lwmod
 24243  0047B4  C06A  F061         	movff	utoa@val+1,?___lwmod+1
 24244  0047B8  C06B  F062         	movff	utoa@base,?___lwmod+2
 24245  0047BC  C06C  F063         	movff	utoa@base+1,?___lwmod+3
 24246  0047C0  EC9B  F02A         	call	___lwmod	;wreg free
 24247  0047C4  5160               	movf	?___lwmod& (0+255),w,b
 24248  0047C6  6F6F               	movwf	utoa@c& (0+255),b
 24249                           
 24250                           ; BSR set to: 0
 24251  0047C8  C069  F060         	movff	utoa@val,?___lwdiv
 24252  0047CC  C06A  F061         	movff	utoa@val+1,?___lwdiv+1
 24253  0047D0  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24254  0047D4  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24255  0047D8  EC6E  F029         	call	___lwdiv	;wreg free
 24256  0047DC  C060  F069         	movff	?___lwdiv,utoa@val
 24257  0047E0  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
 24258                           
 24259                           ; BSR set to: 0
 24260  0047E4  0E09               	movlw	9
 24261  0047E6  656F               	cpfsgt	utoa@c& (0+255),b
 24262  0047E8  D002               	goto	l2287
 24263                           
 24264                           ; BSR set to: 0
 24265  0047EA  0E07               	movlw	7
 24266  0047EC  276F               	addwf	utoa@c& (0+255),f,b
 24267  0047EE                     l2287:
 24268                           
 24269                           ; BSR set to: 0
 24270  0047EE  0E30               	movlw	48
 24271  0047F0  276F               	addwf	utoa@c& (0+255),f,b
 24272                           
 24273                           ; BSR set to: 0
 24274  0047F2  C067  FFD9         	movff	utoa@buf,fsr2l
 24275  0047F6  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24276  0047FA  C06F  FFDF         	movff	utoa@c,indf2
 24277                           
 24278                           ; BSR set to: 0
 24279  0047FE  0767               	decf	utoa@buf& (0+255),f,b
 24280  004800  A0D8               	btfss	status,0,c
 24281  004802  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24282                           
 24283                           ; BSR set to: 0
 24284  004804  516A               	movf	(utoa@val+1)& (0+255),w,b
 24285  004806  1169               	iorwf	utoa@val& (0+255),w,b
 24286  004808  E1D3               	bnz	l12827
 24287                           
 24288                           ; BSR set to: 0
 24289                           ;	Return value of _utoa is never used
 24290  00480A  4B67               	infsnz	utoa@buf& (0+255),f,b
 24291  00480C  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24292                           
 24293                           ; BSR set to: 0
 24294  00480E  0012               	return	
 24295  004810                     __end_of_utoa:
 24296                           	opt stack 0
 24297                           tblptru	equ	0xFF8
 24298                           tblptrh	equ	0xFF7
 24299                           tblptrl	equ	0xFF6
 24300                           tablat	equ	0xFF5
 24301                           prodh	equ	0xFF4
 24302                           prodl	equ	0xFF3
 24303                           intcon	equ	0xFF2
 24304                           indf0	equ	0xFEF
 24305                           postinc0	equ	0xFEE
 24306                           fsr0h	equ	0xFEA
 24307                           fsr0l	equ	0xFE9
 24308                           wreg	equ	0xFE8
 24309                           indf1	equ	0xFE7
 24310                           postinc1	equ	0xFE6
 24311                           postdec1	equ	0xFE5
 24312                           fsr1h	equ	0xFE2
 24313                           fsr1l	equ	0xFE1
 24314                           indf2	equ	0xFDF
 24315                           postinc2	equ	0xFDE
 24316                           postdec2	equ	0xFDD
 24317                           plusw2	equ	0xFDB
 24318                           fsr2h	equ	0xFDA
 24319                           fsr2l	equ	0xFD9
 24320                           status	equ	0xFD8
 24321                           
 24322 ;; *************** function ___lwmod *****************
 24323 ;; Defined at:
 24324 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 24325 ;; Parameters:    Size  Location     Type
 24326 ;;  dividend        2    0[BANK0 ] unsigned int 
 24327 ;;  divisor         2    2[BANK0 ] unsigned int 
 24328 ;; Auto vars:     Size  Location     Type
 24329 ;;  counter         1    4[BANK0 ] unsigned char 
 24330 ;; Return value:  Size  Location     Type
 24331 ;;                  2    0[BANK0 ] unsigned int 
 24332 ;; Registers used:
 24333 ;;		wreg, status,2, status,0
 24334 ;; Tracked objects:
 24335 ;;		On entry : F/0
 24336 ;;		On exit  : F/0
 24337 ;;		Unchanged: 0/0
 24338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24339 ;;      Params:         0       4       0       0       0       0       0
 24340 ;;      Locals:         0       1       0       0       0       0       0
 24341 ;;      Temps:          0       0       0       0       0       0       0
 24342 ;;      Totals:         0       5       0       0       0       0       0
 24343 ;;Total ram usage:        5 bytes
 24344 ;; Hardware stack levels used:    1
 24345 ;; Hardware stack levels required when called:    3
 24346 ;; This function calls:
 24347 ;;		Nothing
 24348 ;; This function is called by:
 24349 ;;		_utoa
 24350 ;; This function uses a non-reentrant model
 24351 ;;
 24352                           
 24353                           	psect	text64
 24354  005536                     __ptext64:
 24355                           	opt stack 0
 24356  005536                     ___lwmod:
 24357                           	opt stack 23
 24358                           
 24359                           ; BSR set to: 0
 24360                           
 24361                           ; BSR set to: 0
 24362                           ;incstack = 0
 24363                           ;incstack = 0
 24364  005536  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24365  005538  1162               	iorwf	___lwmod@divisor& (0+255),w,b
 24366  00553A  E017               	bz	l2411
 24367                           
 24368                           ; BSR set to: 0
 24369  00553C  0E01               	movlw	1
 24370  00553E  6F64               	movwf	___lwmod@counter& (0+255),b
 24371  005540  D004               	goto	l12911
 24372  005542                     l12909:
 24373                           
 24374                           ; BSR set to: 0
 24375  005542  90D8               	bcf	status,0,c
 24376  005544  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 24377  005546  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 24378  005548  2B64               	incf	___lwmod@counter& (0+255),f,b
 24379  00554A                     l12911:
 24380                           
 24381                           ; BSR set to: 0
 24382  00554A  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 24383  00554C  D7FA               	goto	l12909
 24384  00554E                     l12913:
 24385                           
 24386                           ; BSR set to: 0
 24387  00554E  5162               	movf	___lwmod@divisor& (0+255),w,b
 24388  005550  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 24389  005552  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24390  005554  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 24391  005556  E304               	bnc	l12917
 24392                           
 24393                           ; BSR set to: 0
 24394  005558  5162               	movf	___lwmod@divisor& (0+255),w,b
 24395  00555A  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 24396  00555C  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24397  00555E  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 24398  005560                     l12917:
 24399                           
 24400                           ; BSR set to: 0
 24401  005560  90D8               	bcf	status,0,c
 24402  005562  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 24403  005564  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 24404                           
 24405                           ; BSR set to: 0
 24406  005566  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 24407  005568  D7F2               	goto	l12913
 24408  00556A                     l2411:
 24409                           
 24410                           ; BSR set to: 0
 24411  00556A  C060  F060         	movff	___lwmod@dividend,?___lwmod
 24412  00556E  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 24413                           
 24414                           ; BSR set to: 0
 24415  005572  0012               	return	
 24416  005574                     __end_of___lwmod:
 24417                           	opt stack 0
 24418                           tblptru	equ	0xFF8
 24419                           tblptrh	equ	0xFF7
 24420                           tblptrl	equ	0xFF6
 24421                           tablat	equ	0xFF5
 24422                           prodh	equ	0xFF4
 24423                           prodl	equ	0xFF3
 24424                           intcon	equ	0xFF2
 24425                           indf0	equ	0xFEF
 24426                           postinc0	equ	0xFEE
 24427                           fsr0h	equ	0xFEA
 24428                           fsr0l	equ	0xFE9
 24429                           wreg	equ	0xFE8
 24430                           indf1	equ	0xFE7
 24431                           postinc1	equ	0xFE6
 24432                           postdec1	equ	0xFE5
 24433                           fsr1h	equ	0xFE2
 24434                           fsr1l	equ	0xFE1
 24435                           indf2	equ	0xFDF
 24436                           postinc2	equ	0xFDE
 24437                           postdec2	equ	0xFDD
 24438                           plusw2	equ	0xFDB
 24439                           fsr2h	equ	0xFDA
 24440                           fsr2l	equ	0xFD9
 24441                           status	equ	0xFD8
 24442                           
 24443 ;; *************** function ___lwdiv *****************
 24444 ;; Defined at:
 24445 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 24446 ;; Parameters:    Size  Location     Type
 24447 ;;  dividend        2    0[BANK0 ] unsigned int 
 24448 ;;  divisor         2    2[BANK0 ] unsigned int 
 24449 ;; Auto vars:     Size  Location     Type
 24450 ;;  quotient        2    5[BANK0 ] unsigned int 
 24451 ;;  counter         1    4[BANK0 ] unsigned char 
 24452 ;; Return value:  Size  Location     Type
 24453 ;;                  2    0[BANK0 ] unsigned int 
 24454 ;; Registers used:
 24455 ;;		wreg, status,2, status,0
 24456 ;; Tracked objects:
 24457 ;;		On entry : F/0
 24458 ;;		On exit  : F/0
 24459 ;;		Unchanged: 0/0
 24460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24461 ;;      Params:         0       4       0       0       0       0       0
 24462 ;;      Locals:         0       3       0       0       0       0       0
 24463 ;;      Temps:          0       0       0       0       0       0       0
 24464 ;;      Totals:         0       7       0       0       0       0       0
 24465 ;;Total ram usage:        7 bytes
 24466 ;; Hardware stack levels used:    1
 24467 ;; Hardware stack levels required when called:    3
 24468 ;; This function calls:
 24469 ;;		Nothing
 24470 ;; This function is called by:
 24471 ;;		_utoa
 24472 ;; This function uses a non-reentrant model
 24473 ;;
 24474                           
 24475                           	psect	text65
 24476  0052DC                     __ptext65:
 24477                           	opt stack 0
 24478  0052DC                     ___lwdiv:
 24479                           	opt stack 23
 24480                           
 24481                           ; BSR set to: 0
 24482                           
 24483                           ; BSR set to: 0
 24484                           ;incstack = 0
 24485                           ;incstack = 0
 24486  0052DC  6B65               	clrf	___lwdiv@quotient& (0+255),b
 24487  0052DE  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
 24488                           
 24489                           ; BSR set to: 0
 24490  0052E0  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24491  0052E2  1162               	iorwf	___lwdiv@divisor& (0+255),w,b
 24492  0052E4  E01B               	bz	l2401
 24493                           
 24494                           ; BSR set to: 0
 24495  0052E6  0E01               	movlw	1
 24496  0052E8  6F64               	movwf	___lwdiv@counter& (0+255),b
 24497  0052EA  D004               	goto	l12891
 24498  0052EC                     l12889:
 24499                           
 24500                           ; BSR set to: 0
 24501  0052EC  90D8               	bcf	status,0,c
 24502  0052EE  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 24503  0052F0  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 24504  0052F2  2B64               	incf	___lwdiv@counter& (0+255),f,b
 24505  0052F4                     l12891:
 24506                           
 24507                           ; BSR set to: 0
 24508  0052F4  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 24509  0052F6  D7FA               	goto	l12889
 24510  0052F8                     l12893:
 24511                           
 24512                           ; BSR set to: 0
 24513  0052F8  90D8               	bcf	status,0,c
 24514  0052FA  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 24515  0052FC  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 24516                           
 24517                           ; BSR set to: 0
 24518  0052FE  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24519  005300  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 24520  005302  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24521  005304  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 24522  005306  E305               	bnc	l12901
 24523                           
 24524                           ; BSR set to: 0
 24525  005308  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24526  00530A  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 24527  00530C  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24528  00530E  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 24529                           
 24530                           ; BSR set to: 0
 24531  005310  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 24532  005312                     l12901:
 24533                           
 24534                           ; BSR set to: 0
 24535  005312  90D8               	bcf	status,0,c
 24536  005314  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 24537  005316  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 24538                           
 24539                           ; BSR set to: 0
 24540  005318  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 24541  00531A  D7EE               	goto	l12893
 24542  00531C                     l2401:
 24543                           
 24544                           ; BSR set to: 0
 24545  00531C  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 24546  005320  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 24547                           
 24548                           ; BSR set to: 0
 24549  005324  0012               	return	
 24550  005326                     __end_of___lwdiv:
 24551                           	opt stack 0
 24552                           tblptru	equ	0xFF8
 24553                           tblptrh	equ	0xFF7
 24554                           tblptrl	equ	0xFF6
 24555                           tablat	equ	0xFF5
 24556                           prodh	equ	0xFF4
 24557                           prodl	equ	0xFF3
 24558                           intcon	equ	0xFF2
 24559                           indf0	equ	0xFEF
 24560                           postinc0	equ	0xFEE
 24561                           fsr0h	equ	0xFEA
 24562                           fsr0l	equ	0xFE9
 24563                           wreg	equ	0xFE8
 24564                           indf1	equ	0xFE7
 24565                           postinc1	equ	0xFE6
 24566                           postdec1	equ	0xFE5
 24567                           fsr1h	equ	0xFE2
 24568                           fsr1l	equ	0xFE1
 24569                           indf2	equ	0xFDF
 24570                           postinc2	equ	0xFDE
 24571                           postdec2	equ	0xFDD
 24572                           plusw2	equ	0xFDB
 24573                           fsr2h	equ	0xFDA
 24574                           fsr2l	equ	0xFD9
 24575                           status	equ	0xFD8
 24576                           
 24577 ;; *************** function _printMode *****************
 24578 ;; Defined at:
 24579 ;;		line 2755 in file "main.c"
 24580 ;; Parameters:    Size  Location     Type
 24581 ;;		None
 24582 ;; Auto vars:     Size  Location     Type
 24583 ;;		None
 24584 ;; Return value:  Size  Location     Type
 24585 ;;		None               void
 24586 ;; Registers used:
 24587 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24588 ;; Tracked objects:
 24589 ;;		On entry : 0/0
 24590 ;;		On exit  : 0/0
 24591 ;;		Unchanged: 0/0
 24592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24593 ;;      Params:         0       0       0       0       0       0       0
 24594 ;;      Locals:         0       0       0       0       0       0       0
 24595 ;;      Temps:          0       0       0       0       0       0       0
 24596 ;;      Totals:         0       0       0       0       0       0       0
 24597 ;;Total ram usage:        0 bytes
 24598 ;; Hardware stack levels used:    1
 24599 ;; Hardware stack levels required when called:    5
 24600 ;; This function calls:
 24601 ;;		_putsUSART
 24602 ;; This function is called by:
 24603 ;;		_main
 24604 ;; This function uses a non-reentrant model
 24605 ;;
 24606                           
 24607                           	psect	text66
 24608  004DF6                     __ptext66:
 24609                           	opt stack 0
 24610  004DF6                     _printMode:
 24611                           	opt stack 25
 24612                           
 24613                           ;main.c: 2756: putsUSART((char *) "Mode: ");
 24614                           
 24615                           ; BSR set to: 0
 24616                           ;incstack = 0
 24617                           ;incstack = 0
 24618  004DF6  0E7F               	movlw	high STR_256
 24619  004DF8  0100               	movlb	0	; () banked
 24620  004DFA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24621  004DFC  0E25               	movlw	low STR_256
 24622  004DFE  6F61               	movwf	?_putsUSART& (0+255),b
 24623  004E00  ECF6  F028         	call	_putsUSART	;wreg free
 24624                           
 24625                           ;main.c: 2757: if (0 == mode) {
 24626  004E04  0100               	movlb	0	; () banked
 24627  004E06  67F1               	tstfsz	_mode& (0+255),b
 24628  004E08  D007               	goto	l9999
 24629                           
 24630                           ; BSR set to: 0
 24631                           ;main.c: 2758: putsUSART((char *) "Verbose");
 24632  004E0A  0E7F               	movlw	high STR_257
 24633  004E0C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24634  004E0E  0E1D               	movlw	low STR_257
 24635  004E10  6F61               	movwf	?_putsUSART& (0+255),b
 24636  004E12  ECF6  F028         	call	_putsUSART	;wreg free
 24637                           
 24638                           ;main.c: 2759: } else if (1 == mode) {
 24639  004E16  D023               	goto	l1219
 24640  004E18                     l9999:
 24641                           
 24642                           ; BSR set to: 0
 24643  004E18  05F1               	decf	_mode& (0+255),w,b
 24644  004E1A  E107               	bnz	l10003
 24645                           
 24646                           ; BSR set to: 0
 24647                           ;main.c: 2760: putsUSART((char *) "VSCP Driver");
 24648  004E1C  0E7E               	movlw	high STR_258
 24649  004E1E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24650  004E20  0E7A               	movlw	low STR_258
 24651  004E22  6F61               	movwf	?_putsUSART& (0+255),b
 24652  004E24  ECF6  F028         	call	_putsUSART	;wreg free
 24653                           
 24654                           ;main.c: 2761: } else if (2 == mode) {
 24655  004E28  D01A               	goto	l1219
 24656  004E2A                     l10003:
 24657                           
 24658                           ; BSR set to: 0
 24659  004E2A  51F1               	movf	_mode& (0+255),w,b
 24660  004E2C  0A02               	xorlw	2
 24661  004E2E  E107               	bnz	l10007
 24662                           
 24663                           ; BSR set to: 0
 24664                           ;main.c: 2762: putsUSART((char *) "SL Driver");
 24665  004E30  0E7E               	movlw	high STR_259
 24666  004E32  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24667  004E34  0EB0               	movlw	low STR_259
 24668  004E36  6F61               	movwf	?_putsUSART& (0+255),b
 24669  004E38  ECF6  F028         	call	_putsUSART	;wreg free
 24670                           
 24671                           ;main.c: 2763: } else if (3 == mode) {
 24672  004E3C  D010               	goto	l1219
 24673  004E3E                     l10007:
 24674                           
 24675                           ; BSR set to: 0
 24676  004E3E  51F1               	movf	_mode& (0+255),w,b
 24677  004E40  0A03               	xorlw	3
 24678  004E42  E107               	bnz	l10011
 24679                           
 24680                           ; BSR set to: 0
 24681                           ;main.c: 2764: putsUSART((char *) "VSCP Node");
 24682  004E44  0E7E               	movlw	high STR_260
 24683  004E46  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24684  004E48  0EA6               	movlw	low STR_260
 24685  004E4A  6F61               	movwf	?_putsUSART& (0+255),b
 24686  004E4C  ECF6  F028         	call	_putsUSART	;wreg free
 24687                           
 24688                           ;main.c: 2765: } else {
 24689  004E50  D006               	goto	l1219
 24690  004E52                     l10011:
 24691                           
 24692                           ; BSR set to: 0
 24693                           ;main.c: 2766: putsUSART((char *) "Unknown (Verbose used)");
 24694  004E52  0E7C               	movlw	high STR_261
 24695  004E54  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24696  004E56  0EEE               	movlw	low STR_261
 24697  004E58  6F61               	movwf	?_putsUSART& (0+255),b
 24698  004E5A  ECF6  F028         	call	_putsUSART	;wreg free
 24699  004E5E                     l1219:
 24700                           
 24701                           ;main.c: 2767: }
 24702                           ;main.c: 2768: putsUSART((char *) "\r\n");
 24703  004E5E  0E74               	movlw	high (STR_197+50)
 24704  004E60  0100               	movlb	0	; () banked
 24705  004E62  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24706  004E64  0E8A               	movlw	low (STR_197+50)
 24707  004E66  6F61               	movwf	?_putsUSART& (0+255),b
 24708  004E68  EFF6  F028         	goto	_putsUSART	;wreg free
 24709  004E6C                     __end_of_printMode:
 24710                           	opt stack 0
 24711                           tblptru	equ	0xFF8
 24712                           tblptrh	equ	0xFF7
 24713                           tblptrl	equ	0xFF6
 24714                           tablat	equ	0xFF5
 24715                           prodh	equ	0xFF4
 24716                           prodl	equ	0xFF3
 24717                           intcon	equ	0xFF2
 24718                           indf0	equ	0xFEF
 24719                           postinc0	equ	0xFEE
 24720                           fsr0h	equ	0xFEA
 24721                           fsr0l	equ	0xFE9
 24722                           wreg	equ	0xFE8
 24723                           indf1	equ	0xFE7
 24724                           postinc1	equ	0xFE6
 24725                           postdec1	equ	0xFE5
 24726                           fsr1h	equ	0xFE2
 24727                           fsr1l	equ	0xFE1
 24728                           indf2	equ	0xFDF
 24729                           postinc2	equ	0xFDE
 24730                           postdec2	equ	0xFDD
 24731                           plusw2	equ	0xFDB
 24732                           fsr2h	equ	0xFDA
 24733                           fsr2l	equ	0xFD9
 24734                           status	equ	0xFD8
 24735                           
 24736 ;; *************** function _putsUSART *****************
 24737 ;; Defined at:
 24738 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 24739 ;; Parameters:    Size  Location     Type
 24740 ;;  data            2    1[BANK0 ] PTR unsigned char 
 24741 ;;		 -> STR_262(3), STR_261(23), STR_260(10), STR_259(10), 
 24742 ;;		 -> STR_258(12), STR_257(8), STR_256(7), STR_255(3), 
 24743 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_254(10), STR_253(3), STR_250(20), 
 24744 ;;		 -> STR_249(3), STR_248(14), STR_247(3), STR_243(8), 
 24745 ;;		 -> STR_242(15), STR_241(67), STR_240(3), STR_239(27), 
 24746 ;;		 -> STR_238(67), STR_237(39), STR_236(62), STR_235(55), 
 24747 ;;		 -> STR_234(49), STR_233(67), STR_232(47), STR_231(47), 
 24748 ;;		 -> STR_230(34), STR_229(71), STR_228(20), STR_227(78), 
 24749 ;;		 -> STR_226(24), STR_225(77), STR_224(67), STR_223(69), 
 24750 ;;		 -> STR_222(47), STR_221(40), STR_220(39), STR_219(33), 
 24751 ;;		 -> STR_218(23), STR_217(56), STR_216(24), STR_215(44), 
 24752 ;;		 -> STR_214(50), STR_213(31), STR_212(50), STR_211(51), 
 24753 ;;		 -> STR_210(46), STR_209(44), STR_208(27), STR_207(39), 
 24754 ;;		 -> STR_206(39), STR_205(52), STR_204(54), STR_203(55), 
 24755 ;;		 -> STR_202(3), STR_199(24), STR_198(57), STR_197(53), 
 24756 ;;		 -> STR_196(58), STR_195(3), STR_192(25), STR_191(3), 
 24757 ;;		 -> STR_188(24), STR_187(3), STR_184(24), STR_183(3), 
 24758 ;;		 -> STR_180(24), STR_179(3), STR_176(23), STR_175(3), 
 24759 ;;		 -> STR_172(21), STR_171(3), STR_168(22), STR_167(3), 
 24760 ;;		 -> STR_164(17), STR_163(3), STR_160(18), STR_159(4), 
 24761 ;;		 -> STR_158(11), STR_157(2), STR_154(7), STR_151(7), 
 24762 ;;		 -> STR_148(9), STR_145(7), STR_142(8), STR_139(7), 
 24763 ;;		 -> STR_138(2), STR_137(2), STR_136(6), STR_135(8), 
 24764 ;;		 -> STR_134(8), STR_133(20), STR_132(27), STR_131(6), 
 24765 ;;		 -> STR_130(33), STR_127(26), STR_125(32), STR_123(28), 
 24766 ;;		 -> STR_119(6), STR_117(40), STR_115(44), STR_112(6), 
 24767 ;;		 -> STR_111(39), STR_109(36), STR_107(37), STR_105(40), 
 24768 ;;		 -> STR_103(37), STR_102(50), STR_99(6), STR_98(41), 
 24769 ;;		 -> STR_96(38), STR_94(39), STR_92(42), STR_90(39), 
 24770 ;;		 -> STR_89(66), STR_86(6), STR_85(3), STR_82(20), 
 24771 ;;		 -> STR_80(33), STR_79(35), STR_78(24), STR_76(33), 
 24772 ;;		 -> STR_74(24), STR_71(54), STR_70(6), STR_69(3), 
 24773 ;;		 -> STR_64(34), STR_63(3), STR_60(4), wrkbuf(80), 
 24774 ;;		 -> STR_55(15), STR_53(33), STR_51(24), STR_48(6), 
 24775 ;;		 -> STR_46(6), STR_44(6), STR_42(6), STR_40(18), 
 24776 ;;		 -> STR_39(6), STR_37(33), STR_36(6), STR_28(24), 
 24777 ;;		 -> STR_27(18), STR_26(20), STR_25(25), STR_24(22), 
 24778 ;;		 -> STR_23(19), STR_22(20), STR_21(20), STR_19(6), 
 24779 ;;		 -> STR_17(6), STR_15(6), STR_13(6), STR_11(6), 
 24780 ;;		 -> STR_9(6), STR_7(31), STR_5(29), STR_4(55), 
 24781 ;;		 -> STR_3(35), STR_2(53), STR_1(37), 
 24782 ;; Auto vars:     Size  Location     Type
 24783 ;;		None
 24784 ;; Return value:  Size  Location     Type
 24785 ;;		None               void
 24786 ;; Registers used:
 24787 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24788 ;; Tracked objects:
 24789 ;;		On entry : F/0
 24790 ;;		On exit  : 0/0
 24791 ;;		Unchanged: 0/0
 24792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24793 ;;      Params:         0       2       0       0       0       0       0
 24794 ;;      Locals:         0       0       0       0       0       0       0
 24795 ;;      Temps:          0       2       0       0       0       0       0
 24796 ;;      Totals:         0       4       0       0       0       0       0
 24797 ;;Total ram usage:        4 bytes
 24798 ;; Hardware stack levels used:    1
 24799 ;; Hardware stack levels required when called:    4
 24800 ;; This function calls:
 24801 ;;		_WriteUSART
 24802 ;; This function is called by:
 24803 ;;		_main
 24804 ;;		_doModeVerbose
 24805 ;;		_doModeSLCAN
 24806 ;;		_receivePrintEventVerbose
 24807 ;;		_receiveSendEventSLCAN
 24808 ;;		_printStatistics
 24809 ;;		_printErrors
 24810 ;;		_printHelp
 24811 ;;		_findNodes
 24812 ;;		_printGUID
 24813 ;;		_printMDF
 24814 ;;		_printNodeFirmwareVersion
 24815 ;;		_printFirmwareVersion
 24816 ;;		_printMode
 24817 ;; This function uses a non-reentrant model
 24818 ;;
 24819                           
 24820                           	psect	text67
 24821  0051EC                     __ptext67:
 24822                           	opt stack 0
 24823  0051EC                     _putsUSART:
 24824                           	opt stack 24
 24825  0051EC                     l1819:
 24826  0051EC  A2AC               	btfss	4012,1,c	;volatile
 24827  0051EE  D7FE               	goto	l1819
 24828  0051F0  0100               	movlb	0	; () banked
 24829  0051F2  5161               	movf	putsUSART@data& (0+255),w,b
 24830  0051F4  6EF6               	movwf	tblptrl,c
 24831  0051F6  6EE9               	movwf	fsr0l,c
 24832  0051F8  0E05               	movlw	(high __ramtop+-1)
 24833  0051FA  6EEA               	movwf	fsr0h,c
 24834  0051FC  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 24835  0051FE  64EA               	cpfsgt	fsr0h,c
 24836  005200  D003               	bra	u12017
 24837  005202  6EEA               	movwf	fsr0h,c
 24838  005204  50EF               	movf	indf0,w,c
 24839  005206  D003               	bra	u12010
 24840  005208                     u12017:
 24841  005208  6EF7               	movwf	tblptrh,c
 24842  00520A  0008               	tblrd		*
 24843  00520C  50F5               	movf	tablat,w,c
 24844  00520E                     u12010:
 24845  00520E  ECC5  F02B         	call	_WriteUSART
 24846  005212  0100               	movlb	0	; () banked
 24847  005214  5161               	movf	putsUSART@data& (0+255),w,b
 24848  005216  6F63               	movwf	??_putsUSART& (0+255),b
 24849  005218  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 24850  00521A  6F64               	movwf	(??_putsUSART+1)& (0+255),b
 24851  00521C  4B61               	infsnz	putsUSART@data& (0+255),f,b
 24852  00521E  2B62               	incf	(putsUSART@data+1)& (0+255),f,b
 24853  005220  5163               	movf	??_putsUSART& (0+255),w,b
 24854  005222  6EF6               	movwf	tblptrl,c
 24855  005224  6EE9               	movwf	fsr0l,c
 24856  005226  0E05               	movlw	(high __ramtop+-1)
 24857  005228  6EEA               	movwf	fsr0h,c
 24858  00522A  5164               	movf	(??_putsUSART+1)& (0+255),w,b
 24859  00522C  64EA               	cpfsgt	fsr0h,c
 24860  00522E  D003               	bra	u12027
 24861  005230  6EEA               	movwf	fsr0h,c
 24862  005232  50EF               	movf	indf0,w,c
 24863  005234  D003               	bra	u12020
 24864  005236                     u12027:
 24865  005236  6EF7               	movwf	tblptrh,c
 24866  005238  0008               	tblrd		*
 24867  00523A  50F5               	movf	tablat,w,c
 24868  00523C                     u12020:
 24869  00523C  0900               	iorlw	0
 24870  00523E  B4D8               	btfsc	status,2,c
 24871  005240  0012               	return	
 24872  005242  D7D4               	goto	l1819
 24873  005244                     __end_of_putsUSART:
 24874                           	opt stack 0
 24875                           tblptru	equ	0xFF8
 24876                           tblptrh	equ	0xFF7
 24877                           tblptrl	equ	0xFF6
 24878                           tablat	equ	0xFF5
 24879                           prodh	equ	0xFF4
 24880                           prodl	equ	0xFF3
 24881                           intcon	equ	0xFF2
 24882                           indf0	equ	0xFEF
 24883                           postinc0	equ	0xFEE
 24884                           fsr0h	equ	0xFEA
 24885                           fsr0l	equ	0xFE9
 24886                           wreg	equ	0xFE8
 24887                           indf1	equ	0xFE7
 24888                           postinc1	equ	0xFE6
 24889                           postdec1	equ	0xFE5
 24890                           fsr1h	equ	0xFE2
 24891                           fsr1l	equ	0xFE1
 24892                           indf2	equ	0xFDF
 24893                           postinc2	equ	0xFDE
 24894                           postdec2	equ	0xFDD
 24895                           plusw2	equ	0xFDB
 24896                           fsr2h	equ	0xFDA
 24897                           fsr2l	equ	0xFD9
 24898                           status	equ	0xFD8
 24899                           
 24900 ;; *************** function _WriteUSART *****************
 24901 ;; Defined at:
 24902 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 24903 ;; Parameters:    Size  Location     Type
 24904 ;;  data            1    wreg     unsigned char 
 24905 ;; Auto vars:     Size  Location     Type
 24906 ;;  data            1    0[BANK0 ] unsigned char 
 24907 ;; Return value:  Size  Location     Type
 24908 ;;		None               void
 24909 ;; Registers used:
 24910 ;;		wreg
 24911 ;; Tracked objects:
 24912 ;;		On entry : 0/0
 24913 ;;		On exit  : 0/0
 24914 ;;		Unchanged: 0/0
 24915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24916 ;;      Params:         0       0       0       0       0       0       0
 24917 ;;      Locals:         0       1       0       0       0       0       0
 24918 ;;      Temps:          0       0       0       0       0       0       0
 24919 ;;      Totals:         0       1       0       0       0       0       0
 24920 ;;Total ram usage:        1 bytes
 24921 ;; Hardware stack levels used:    1
 24922 ;; Hardware stack levels required when called:    3
 24923 ;; This function calls:
 24924 ;;		Nothing
 24925 ;; This function is called by:
 24926 ;;		_doModeVerbose
 24927 ;;		_sendEscapedUartData
 24928 ;;		_sendVSCPDriverErrorFrame
 24929 ;;		_sendVSCPDriverAck
 24930 ;;		_sendVSCPDriverNack
 24931 ;;		_sendVSCPDriverCommandReply
 24932 ;;		_receiveSendEventCANAL
 24933 ;;		_receiveSendMultiEventCANAL
 24934 ;;		_sendVSCPModeCapabilities
 24935 ;;		_receiveSendEventSLCAN
 24936 ;;		_printBinary
 24937 ;;		_printFirmwareVersion
 24938 ;;		_putsUSART
 24939 ;; This function uses a non-reentrant model
 24940 ;;
 24941                           
 24942                           	psect	text68
 24943  00578A                     __ptext68:
 24944                           	opt stack 0
 24945  00578A                     _WriteUSART:
 24946                           	opt stack 25
 24947                           
 24948                           ;incstack = 0
 24949                           ;incstack = 0
 24950                           ;WriteUSART@data stored from wreg
 24951  00578A  CFE8 F060          	movff	wreg,WriteUSART@data
 24952  00578E  ACAC               	btfss	4012,6,c	;volatile
 24953  005790  D003               	goto	l11925
 24954  005792  90AC               	bcf	4012,0,c	;volatile
 24955  005794  B23D               	btfsc	_USART_Status,1,c
 24956  005796  80AC               	bsf	4012,0,c	;volatile
 24957  005798                     l11925:
 24958  005798  C060  FFAD         	movff	WriteUSART@data,4013	;volatile
 24959  00579C  0012               	return	
 24960  00579E                     __end_of_WriteUSART:
 24961                           	opt stack 0
 24962                           tblptru	equ	0xFF8
 24963                           tblptrh	equ	0xFF7
 24964                           tblptrl	equ	0xFF6
 24965                           tablat	equ	0xFF5
 24966                           prodh	equ	0xFF4
 24967                           prodl	equ	0xFF3
 24968                           intcon	equ	0xFF2
 24969                           indf0	equ	0xFEF
 24970                           postinc0	equ	0xFEE
 24971                           fsr0h	equ	0xFEA
 24972                           fsr0l	equ	0xFE9
 24973                           wreg	equ	0xFE8
 24974                           indf1	equ	0xFE7
 24975                           postinc1	equ	0xFE6
 24976                           postdec1	equ	0xFE5
 24977                           fsr1h	equ	0xFE2
 24978                           fsr1l	equ	0xFE1
 24979                           indf2	equ	0xFDF
 24980                           postinc2	equ	0xFDE
 24981                           postdec2	equ	0xFDD
 24982                           plusw2	equ	0xFDB
 24983                           fsr2h	equ	0xFDA
 24984                           fsr2l	equ	0xFD9
 24985                           status	equ	0xFD8
 24986                           
 24987 ;; *************** function _init *****************
 24988 ;; Defined at:
 24989 ;;		line 375 in file "main.c"
 24990 ;; Parameters:    Size  Location     Type
 24991 ;;		None
 24992 ;; Auto vars:     Size  Location     Type
 24993 ;;		None
 24994 ;; Return value:  Size  Location     Type
 24995 ;;		None               void
 24996 ;; Registers used:
 24997 ;;		wreg, status,2, status,0, cstack
 24998 ;; Tracked objects:
 24999 ;;		On entry : E/0
 25000 ;;		On exit  : F/0
 25001 ;;		Unchanged: 0/0
 25002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25003 ;;      Params:         0       0       0       0       0       0       0
 25004 ;;      Locals:         0       0       0       0       0       0       0
 25005 ;;      Temps:          0       0       0       0       0       0       0
 25006 ;;      Totals:         0       0       0       0       0       0       0
 25007 ;;Total ram usage:        0 bytes
 25008 ;; Hardware stack levels used:    1
 25009 ;; Hardware stack levels required when called:    5
 25010 ;; This function calls:
 25011 ;;		_WriteTimer0
 25012 ;;		_init_app_ram
 25013 ;;		_OpenUSART
 25014 ;;		_OpenTimer0
 25015 ;;		_ECANInitialize
 25016 ;; This function is called by:
 25017 ;;		_main
 25018 ;; This function uses a non-reentrant model
 25019 ;;
 25020                           
 25021                           	psect	text69
 25022  005326                     __ptext69:
 25023                           	opt stack 0
 25024  005326                     _init:
 25025                           	opt stack 25
 25026                           
 25027                           ;main.c: 377: init_app_ram();
 25028                           
 25029                           ;incstack = 0
 25030                           ;incstack = 0
 25031  005326  EC22  F029         	call	_init_app_ram	;wreg free
 25032                           
 25033                           ; BSR set to: 1
 25034                           ;main.c: 380: OSCCONbits.IRCF0 = 1;
 25035  00532A  88D3               	bsf	4051,4,c	;volatile
 25036                           
 25037                           ; BSR set to: 1
 25038                           ;main.c: 381: OSCCONbits.IRCF1 = 1;
 25039  00532C  8AD3               	bsf	4051,5,c	;volatile
 25040                           
 25041                           ; BSR set to: 1
 25042                           ;main.c: 382: OSCCONbits.IRCF2 = 1;
 25043  00532E  8CD3               	bsf	4051,6,c	;volatile
 25044                           
 25045                           ; BSR set to: 1
 25046                           ;main.c: 383: OSCTUNEbits.PLLEN = 1;
 25047  005330  8C9B               	bsf	3995,6,c	;volatile
 25048                           
 25049                           ; BSR set to: 1
 25050                           ;main.c: 385: TRISBbits.RB2 = 0;
 25051  005332  9493               	bcf	3987,2,c	;volatile
 25052                           
 25053                           ; BSR set to: 1
 25054                           ;main.c: 386: TRISBbits.RB3 = 1;
 25055  005334  8693               	bsf	3987,3,c	;volatile
 25056                           
 25057                           ; BSR set to: 1
 25058                           ;main.c: 388: TRISCbits.RC1 = 0;
 25059  005336  9294               	bcf	3988,1,c	;volatile
 25060                           
 25061                           ; BSR set to: 1
 25062                           ;main.c: 389: TRISCbits.RC6 = 0;
 25063  005338  9C94               	bcf	3988,6,c	;volatile
 25064                           
 25065                           ; BSR set to: 1
 25066                           ;main.c: 390: TRISCbits.RC7 = 1;
 25067  00533A  8E94               	bsf	3988,7,c	;volatile
 25068                           
 25069                           ;main.c: 394: OpenUSART( 0b01111111 &
 25070                           ;main.c: 395: 0b11111111 &
 25071                           ;main.c: 396: 0b11111110 &
 25072                           ;main.c: 397: 0b11111101 &
 25073                           ;main.c: 398: 0b11111111,
 25074                           ;main.c: 399: 21 );
 25075  00533C  0100               	movlb	0	; () banked
 25076  00533E  6B61               	clrf	(?_OpenUSART+1)& (0+255),b
 25077  005340  0E15               	movlw	21
 25078  005342  6F60               	movwf	?_OpenUSART& (0+255),b
 25079  005344  0E7C               	movlw	124
 25080  005346  EC9C  F028         	call	_OpenUSART
 25081                           
 25082                           ; BSR set to: 0
 25083                           ;main.c: 401: RCIF = 0;
 25084  00534A  9A9E               	bcf	3998,5,c	;volatile
 25085                           
 25086                           ; BSR set to: 0
 25087                           ;main.c: 402: RCIP = 0;
 25088  00534C  9A9F               	bcf	3999,5,c	;volatile
 25089                           
 25090                           ; BSR set to: 0
 25091                           ;main.c: 403: RCIE = 1;
 25092  00534E  8A9D               	bsf	3997,5,c	;volatile
 25093                           
 25094                           ; BSR set to: 0
 25095                           ;main.c: 404: PEIE = 1;
 25096  005350  8CF2               	bsf	intcon,6,c	;volatile
 25097                           
 25098                           ; BSR set to: 0
 25099                           ;main.c: 407: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 25100  005352  0E92               	movlw	146
 25101  005354  EC8F  F02B         	call	_OpenTimer0
 25102                           
 25103                           ; BSR set to: 0
 25104                           ;main.c: 408: WriteTimer0(0xfb1d);
 25105  005358  0EFB               	movlw	251
 25106  00535A  6F61               	movwf	(?_WriteTimer0+1)& (0+255),b
 25107  00535C  0E1D               	movlw	29
 25108  00535E  6F60               	movwf	?_WriteTimer0& (0+255),b
 25109  005360  ECCF  F02B         	call	_WriteTimer0	;wreg free
 25110                           
 25111                           ;main.c: 411: ECANInitialize();
 25112  005364  EC08  F026         	call	_ECANInitialize	;wreg free
 25113                           
 25114                           ; BSR set to: 0
 25115                           ;main.c: 435: RXBnIE = 1;
 25116  005368  82A3               	bsf	4003,1,c	;volatile
 25117                           
 25118                           ; BSR set to: 0
 25119                           ;main.c: 436: ERRIE = 1;
 25120  00536A  8AA3               	bsf	4003,5,c	;volatile
 25121                           
 25122                           ; BSR set to: 0
 25123                           ;main.c: 438: (INTCONbits.GIE = 1);
 25124  00536C  8EF2               	bsf	intcon,7,c	;volatile
 25125                           
 25126                           ; BSR set to: 0
 25127  00536E  0012               	return	
 25128  005370                     __end_of_init:
 25129                           	opt stack 0
 25130                           tblptru	equ	0xFF8
 25131                           tblptrh	equ	0xFF7
 25132                           tblptrl	equ	0xFF6
 25133                           tablat	equ	0xFF5
 25134                           prodh	equ	0xFF4
 25135                           prodl	equ	0xFF3
 25136                           intcon	equ	0xFF2
 25137                           indf0	equ	0xFEF
 25138                           postinc0	equ	0xFEE
 25139                           fsr0h	equ	0xFEA
 25140                           fsr0l	equ	0xFE9
 25141                           wreg	equ	0xFE8
 25142                           indf1	equ	0xFE7
 25143                           postinc1	equ	0xFE6
 25144                           postdec1	equ	0xFE5
 25145                           fsr1h	equ	0xFE2
 25146                           fsr1l	equ	0xFE1
 25147                           indf2	equ	0xFDF
 25148                           postinc2	equ	0xFDE
 25149                           postdec2	equ	0xFDD
 25150                           plusw2	equ	0xFDB
 25151                           fsr2h	equ	0xFDA
 25152                           fsr2l	equ	0xFD9
 25153                           status	equ	0xFD8
 25154                           
 25155 ;; *************** function _ECANInitialize *****************
 25156 ;; Defined at:
 25157 ;;		line 168 in file "ECAN.c"
 25158 ;; Parameters:    Size  Location     Type
 25159 ;;		None
 25160 ;; Auto vars:     Size  Location     Type
 25161 ;;		None
 25162 ;; Return value:  Size  Location     Type
 25163 ;;		None               void
 25164 ;; Registers used:
 25165 ;;		wreg, status,2, status,0, cstack
 25166 ;; Tracked objects:
 25167 ;;		On entry : F/0
 25168 ;;		On exit  : F/0
 25169 ;;		Unchanged: 0/0
 25170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25171 ;;      Params:         0       0       0       0       0       0       0
 25172 ;;      Locals:         0       0       0       0       0       0       0
 25173 ;;      Temps:          0       0       0       0       0       0       0
 25174 ;;      Totals:         0       0       0       0       0       0       0
 25175 ;;Total ram usage:        0 bytes
 25176 ;; Hardware stack levels used:    1
 25177 ;; Hardware stack levels required when called:    4
 25178 ;; This function calls:
 25179 ;;		_ECANSetOperationMode
 25180 ;; This function is called by:
 25181 ;;		_init
 25182 ;; This function uses a non-reentrant model
 25183 ;;
 25184                           
 25185                           	psect	text70
 25186  004C10                     __ptext70:
 25187                           	opt stack 0
 25188  004C10                     _ECANInitialize:
 25189                           	opt stack 25
 25190                           
 25191                           ; BSR set to: 0
 25192                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 25193                           
 25194                           ; BSR set to: 0
 25195                           ;incstack = 0
 25196                           ;incstack = 0
 25197  004C10  0E80               	movlw	128
 25198  004C12  ECAD  F02B         	call	_ECANSetOperationMode
 25199                           
 25200                           ; BSR set to: 0
 25201                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 25202  004C16  0E09               	movlw	9
 25203  004C18  6E70               	movwf	3952,c	;volatile
 25204                           
 25205                           ; BSR set to: 0
 25206                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 25207  004C1A  0EFC               	movlw	252
 25208  004C1C  6E71               	movwf	3953,c	;volatile
 25209                           
 25210                           ; BSR set to: 0
 25211                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 25212                           ;ECAN.c: 181: (0 << 6) |
 25213                           ;ECAN.c: 182: (2-1);
 25214  004C1E  0E01               	movlw	1
 25215  004C20  6E72               	movwf	3954,c	;volatile
 25216                           
 25217                           ; BSR set to: 0
 25218                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 25219  004C22  0E20               	movlw	32
 25220  004C24  6E73               	movwf	3955,c	;volatile
 25221                           
 25222                           ; BSR set to: 0
 25223                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 25224  004C26  8E77               	bsf	3959,7,c	;volatile
 25225                           
 25226                           ; BSR set to: 0
 25227                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 25228  004C28  9C77               	bcf	3959,6,c	;volatile
 25229                           
 25230                           ; BSR set to: 0
 25231                           ;ECAN.c: 205: RXB0CON = 0;
 25232  004C2A  6A60               	clrf	3936,c	;volatile
 25233                           
 25234                           ; BSR set to: 0
 25235                           ;ECAN.c: 211: RXB1CON = 0;
 25236  004C2C  010F               	movlb	15	; () banked
 25237  004C2E  6B50               	clrf	80,b	;volatile
 25238                           
 25239                           ; BSR set to: 15
 25240                           ;ECAN.c: 221: B0CON = 0;
 25241  004C30  010E               	movlb	14	; () banked
 25242  004C32  6B20               	clrf	32,b	;volatile
 25243                           
 25244                           ; BSR set to: 14
 25245                           ;ECAN.c: 231: B1CON = 0;
 25246  004C34  6B30               	clrf	48,b	;volatile
 25247                           
 25248                           ; BSR set to: 14
 25249                           ;ECAN.c: 241: B2CON = 0;
 25250  004C36  6B40               	clrf	64,b	;volatile
 25251                           
 25252                           ; BSR set to: 14
 25253                           ;ECAN.c: 251: B3CON = 0;
 25254  004C38  6B50               	clrf	80,b	;volatile
 25255                           
 25256                           ; BSR set to: 14
 25257                           ;ECAN.c: 261: B4CON = 0;
 25258  004C3A  6B60               	clrf	96,b	;volatile
 25259                           
 25260                           ; BSR set to: 14
 25261                           ;ECAN.c: 271: B5CON = 0;
 25262  004C3C  6B70               	clrf	112,b	;volatile
 25263                           
 25264                           ; BSR set to: 14
 25265                           ;ECAN.c: 278: BSEL0 = 0 << 7 | 0 << 6 | 0 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 25266  004C3E  010D               	movlb	13	; () banked
 25267  004C40  6BF8               	clrf	248,b	;volatile
 25268                           
 25269                           ; BSR set to: 13
 25270                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 25271  004C42  010F               	movlb	15	; () banked
 25272  004C44  6B00               	clrf	0,b	;volatile
 25273                           
 25274                           ; BSR set to: 15
 25275  004C46  0E08               	movlw	8
 25276  004C48  6F01               	movwf	1,b	;volatile
 25277                           
 25278                           ; BSR set to: 15
 25279  004C4A  6B02               	clrf	2,b	;volatile
 25280                           
 25281                           ; BSR set to: 15
 25282  004C4C  6B03               	clrf	3,b	;volatile
 25283                           
 25284                           ; BSR set to: 15
 25285                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 25286  004C4E  0E01               	movlw	1
 25287  004C50  010D               	movlb	13	; () banked
 25288  004C52  6FD4               	movwf	212,b	;volatile
 25289                           
 25290                           ; BSR set to: 13
 25291                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 25292  004C54  6BD5               	clrf	213,b	;volatile
 25293                           
 25294                           ; BSR set to: 13
 25295                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 25296  004C56  6BE0               	clrf	224,b	;volatile
 25297                           
 25298                           ; BSR set to: 13
 25299                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 25300  004C58  0E11               	movlw	17
 25301  004C5A  6FE1               	movwf	225,b	;volatile
 25302                           
 25303                           ; BSR set to: 13
 25304                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 25305  004C5C  6FE2               	movwf	226,b	;volatile
 25306                           
 25307                           ; BSR set to: 13
 25308                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 25309  004C5E  6BE3               	clrf	227,b	;volatile
 25310                           
 25311                           ; BSR set to: 13
 25312                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 25313  004C60  6BE4               	clrf	228,b	;volatile
 25314                           
 25315                           ; BSR set to: 13
 25316                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 25317  004C62  6BE5               	clrf	229,b	;volatile
 25318                           
 25319                           ; BSR set to: 13
 25320                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 25321  004C64  6BE6               	clrf	230,b	;volatile
 25322                           
 25323                           ; BSR set to: 13
 25324                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 25325  004C66  6BE7               	clrf	231,b	;volatile
 25326                           
 25327                           ; BSR set to: 13
 25328                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 25329  004C68  0E54               	movlw	84
 25330  004C6A  6FF0               	movwf	240,b	;volatile
 25331                           
 25332                           ; BSR set to: 13
 25333                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 25334  004C6C  0E05               	movlw	5
 25335  004C6E  6FF1               	movwf	241,b	;volatile
 25336                           
 25337                           ; BSR set to: 13
 25338                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25339  004C70  6BF2               	clrf	242,b	;volatile
 25340                           
 25341                           ; BSR set to: 13
 25342                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25343  004C72  6BF2               	clrf	242,b	;volatile
 25344                           
 25345                           ; BSR set to: 13
 25346                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 25347  004C74  010F               	movlb	15	; () banked
 25348  004C76  6B18               	clrf	24,b	;volatile
 25349                           
 25350                           ; BSR set to: 15
 25351  004C78  6B19               	clrf	25,b	;volatile
 25352                           
 25353                           ; BSR set to: 15
 25354  004C7A  6B1A               	clrf	26,b	;volatile
 25355                           
 25356                           ; BSR set to: 15
 25357  004C7C  6B1B               	clrf	27,b	;volatile
 25358                           
 25359                           ; BSR set to: 15
 25360                           ;ECAN.c: 482: RXM0EXIDM = 1;
 25361  004C7E  8719               	bsf	25,3,b	;volatile
 25362                           
 25363                           ; BSR set to: 15
 25364                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 25365  004C80  6B1C               	clrf	28,b	;volatile
 25366                           
 25367                           ; BSR set to: 15
 25368  004C82  6B1D               	clrf	29,b	;volatile
 25369                           
 25370                           ; BSR set to: 15
 25371  004C84  6B1E               	clrf	30,b	;volatile
 25372                           
 25373                           ; BSR set to: 15
 25374  004C86  6B1F               	clrf	31,b	;volatile
 25375                           
 25376                           ; BSR set to: 15
 25377                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 25378  004C88  871D               	bsf	29,3,b	;volatile
 25379                           
 25380                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 25381  004C8A  0E20               	movlw	32
 25382  004C8C  EFAD  F02B         	goto	_ECANSetOperationMode
 25383  004C90                     __end_of_ECANInitialize:
 25384                           	opt stack 0
 25385                           tblptru	equ	0xFF8
 25386                           tblptrh	equ	0xFF7
 25387                           tblptrl	equ	0xFF6
 25388                           tablat	equ	0xFF5
 25389                           prodh	equ	0xFF4
 25390                           prodl	equ	0xFF3
 25391                           intcon	equ	0xFF2
 25392                           indf0	equ	0xFEF
 25393                           postinc0	equ	0xFEE
 25394                           fsr0h	equ	0xFEA
 25395                           fsr0l	equ	0xFE9
 25396                           wreg	equ	0xFE8
 25397                           indf1	equ	0xFE7
 25398                           postinc1	equ	0xFE6
 25399                           postdec1	equ	0xFE5
 25400                           fsr1h	equ	0xFE2
 25401                           fsr1l	equ	0xFE1
 25402                           indf2	equ	0xFDF
 25403                           postinc2	equ	0xFDE
 25404                           postdec2	equ	0xFDD
 25405                           plusw2	equ	0xFDB
 25406                           fsr2h	equ	0xFDA
 25407                           fsr2l	equ	0xFD9
 25408                           status	equ	0xFD8
 25409                           
 25410 ;; *************** function _ECANSetOperationMode *****************
 25411 ;; Defined at:
 25412 ;;		line 1014 in file "ECAN.c"
 25413 ;; Parameters:    Size  Location     Type
 25414 ;;  mode            1    wreg     enum E16337
 25415 ;; Auto vars:     Size  Location     Type
 25416 ;;  mode            1    0[BANK0 ] enum E16337
 25417 ;; Return value:  Size  Location     Type
 25418 ;;		None               void
 25419 ;; Registers used:
 25420 ;;		wreg, status,2, status,0
 25421 ;; Tracked objects:
 25422 ;;		On entry : 0/0
 25423 ;;		On exit  : F/0
 25424 ;;		Unchanged: 0/0
 25425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25426 ;;      Params:         0       0       0       0       0       0       0
 25427 ;;      Locals:         0       1       0       0       0       0       0
 25428 ;;      Temps:          0       0       0       0       0       0       0
 25429 ;;      Totals:         0       1       0       0       0       0       0
 25430 ;;Total ram usage:        1 bytes
 25431 ;; Hardware stack levels used:    1
 25432 ;; Hardware stack levels required when called:    3
 25433 ;; This function calls:
 25434 ;;		Nothing
 25435 ;; This function is called by:
 25436 ;;		_doModeVerbose
 25437 ;;		_doModeVscp
 25438 ;;		_doModeSLCAN
 25439 ;;		_ECANInitialize
 25440 ;; This function uses a non-reentrant model
 25441 ;;
 25442                           
 25443                           	psect	text71
 25444  00575A                     __ptext71:
 25445                           	opt stack 0
 25446  00575A                     _ECANSetOperationMode:
 25447                           	opt stack 26
 25448                           
 25449                           ; BSR set to: 0
 25450                           ;incstack = 0
 25451                           ;incstack = 0
 25452                           ;ECANSetOperationMode@mode stored from wreg
 25453  00575A  CFE8 F060          	movff	wreg,ECANSetOperationMode@mode
 25454                           
 25455                           ;ECAN.c: 1015: CANCON &= 0x1F;
 25456  00575E  0E1F               	movlw	31
 25457  005760  166F               	andwf	3951,f,c	;volatile
 25458                           
 25459                           ;ECAN.c: 1016: CANCON |= mode;
 25460  005762  0100               	movlb	0	; () banked
 25461  005764  5160               	movf	ECANSetOperationMode@mode& (0+255),w,b
 25462  005766  126F               	iorwf	3951,f,c	;volatile
 25463  005768                     l11241:
 25464                           
 25465                           ; BSR set to: 0
 25466  005768  506F               	movf	3951,w,c	;volatile
 25467  00576A  0BE0               	andlw	224
 25468  00576C  1960               	xorwf	ECANSetOperationMode@mode& (0+255),w,b
 25469  00576E  B4D8               	btfsc	status,2,c
 25470                           
 25471                           ; BSR set to: 0
 25472  005770  0012               	return	
 25473  005772  D7FA               	goto	l11241
 25474  005774                     __end_of_ECANSetOperationMode:
 25475                           	opt stack 0
 25476                           tblptru	equ	0xFF8
 25477                           tblptrh	equ	0xFF7
 25478                           tblptrl	equ	0xFF6
 25479                           tablat	equ	0xFF5
 25480                           prodh	equ	0xFF4
 25481                           prodl	equ	0xFF3
 25482                           intcon	equ	0xFF2
 25483                           indf0	equ	0xFEF
 25484                           postinc0	equ	0xFEE
 25485                           fsr0h	equ	0xFEA
 25486                           fsr0l	equ	0xFE9
 25487                           wreg	equ	0xFE8
 25488                           indf1	equ	0xFE7
 25489                           postinc1	equ	0xFE6
 25490                           postdec1	equ	0xFE5
 25491                           fsr1h	equ	0xFE2
 25492                           fsr1l	equ	0xFE1
 25493                           indf2	equ	0xFDF
 25494                           postinc2	equ	0xFDE
 25495                           postdec2	equ	0xFDD
 25496                           plusw2	equ	0xFDB
 25497                           fsr2h	equ	0xFDA
 25498                           fsr2l	equ	0xFD9
 25499                           status	equ	0xFD8
 25500                           
 25501 ;; *************** function _OpenTimer0 *****************
 25502 ;; Defined at:
 25503 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 25504 ;; Parameters:    Size  Location     Type
 25505 ;;  config          1    wreg     unsigned char 
 25506 ;; Auto vars:     Size  Location     Type
 25507 ;;  config          1    0[BANK0 ] unsigned char 
 25508 ;; Return value:  Size  Location     Type
 25509 ;;		None               void
 25510 ;; Registers used:
 25511 ;;		wreg, status,2, status,0
 25512 ;; Tracked objects:
 25513 ;;		On entry : F/0
 25514 ;;		On exit  : F/0
 25515 ;;		Unchanged: 0/0
 25516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25517 ;;      Params:         0       0       0       0       0       0       0
 25518 ;;      Locals:         0       1       0       0       0       0       0
 25519 ;;      Temps:          0       0       0       0       0       0       0
 25520 ;;      Totals:         0       1       0       0       0       0       0
 25521 ;;Total ram usage:        1 bytes
 25522 ;; Hardware stack levels used:    1
 25523 ;; Hardware stack levels required when called:    3
 25524 ;; This function calls:
 25525 ;;		Nothing
 25526 ;; This function is called by:
 25527 ;;		_init
 25528 ;; This function uses a non-reentrant model
 25529 ;;
 25530                           
 25531                           	psect	text72
 25532  00571E                     __ptext72:
 25533                           	opt stack 0
 25534  00571E                     _OpenTimer0:
 25535                           	opt stack 26
 25536                           
 25537                           ; BSR set to: 0
 25538                           ;incstack = 0
 25539                           ;incstack = 0
 25540                           ;OpenTimer0@config stored from wreg
 25541  00571E  CFE8 F060          	movff	wreg,OpenTimer0@config
 25542                           
 25543                           ; BSR set to: 0
 25544  005722  5160               	movf	OpenTimer0@config& (0+255),w,b
 25545  005724  0B7F               	andlw	127
 25546  005726  6ED5               	movwf	4053,c	;volatile
 25547                           
 25548                           ; BSR set to: 0
 25549  005728  6AD7               	clrf	4055,c	;volatile
 25550                           
 25551                           ; BSR set to: 0
 25552  00572A  6AD6               	clrf	4054,c	;volatile
 25553                           
 25554                           ; BSR set to: 0
 25555  00572C  94F2               	bcf	intcon,2,c	;volatile
 25556                           
 25557                           ; BSR set to: 0
 25558  00572E  AF60               	btfss	OpenTimer0@config& (0+255),7,b
 25559  005730  D002               	goto	l1769
 25560                           
 25561                           ; BSR set to: 0
 25562  005732  8AF2               	bsf	intcon,5,c	;volatile
 25563  005734  D001               	goto	l1770
 25564  005736                     l1769:
 25565                           
 25566                           ; BSR set to: 0
 25567  005736  9AF2               	bcf	intcon,5,c	;volatile
 25568  005738                     l1770:
 25569                           
 25570                           ; BSR set to: 0
 25571  005738  8ED5               	bsf	4053,7,c	;volatile
 25572                           
 25573                           ; BSR set to: 0
 25574  00573A  0012               	return	
 25575  00573C                     __end_of_OpenTimer0:
 25576                           	opt stack 0
 25577                           tblptru	equ	0xFF8
 25578                           tblptrh	equ	0xFF7
 25579                           tblptrl	equ	0xFF6
 25580                           tablat	equ	0xFF5
 25581                           prodh	equ	0xFF4
 25582                           prodl	equ	0xFF3
 25583                           intcon	equ	0xFF2
 25584                           indf0	equ	0xFEF
 25585                           postinc0	equ	0xFEE
 25586                           fsr0h	equ	0xFEA
 25587                           fsr0l	equ	0xFE9
 25588                           wreg	equ	0xFE8
 25589                           indf1	equ	0xFE7
 25590                           postinc1	equ	0xFE6
 25591                           postdec1	equ	0xFE5
 25592                           fsr1h	equ	0xFE2
 25593                           fsr1l	equ	0xFE1
 25594                           indf2	equ	0xFDF
 25595                           postinc2	equ	0xFDE
 25596                           postdec2	equ	0xFDD
 25597                           plusw2	equ	0xFDB
 25598                           fsr2h	equ	0xFDA
 25599                           fsr2l	equ	0xFD9
 25600                           status	equ	0xFD8
 25601                           
 25602 ;; *************** function _OpenUSART *****************
 25603 ;; Defined at:
 25604 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 25605 ;; Parameters:    Size  Location     Type
 25606 ;;  config          1    wreg     unsigned char 
 25607 ;;  spbrg           2    0[BANK0 ] unsigned int 
 25608 ;; Auto vars:     Size  Location     Type
 25609 ;;  config          1    2[BANK0 ] unsigned char 
 25610 ;; Return value:  Size  Location     Type
 25611 ;;		None               void
 25612 ;; Registers used:
 25613 ;;		wreg, status,2
 25614 ;; Tracked objects:
 25615 ;;		On entry : F/0
 25616 ;;		On exit  : F/0
 25617 ;;		Unchanged: 0/0
 25618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25619 ;;      Params:         0       2       0       0       0       0       0
 25620 ;;      Locals:         0       1       0       0       0       0       0
 25621 ;;      Temps:          0       0       0       0       0       0       0
 25622 ;;      Totals:         0       3       0       0       0       0       0
 25623 ;;Total ram usage:        3 bytes
 25624 ;; Hardware stack levels used:    1
 25625 ;; Hardware stack levels required when called:    3
 25626 ;; This function calls:
 25627 ;;		Nothing
 25628 ;; This function is called by:
 25629 ;;		_init
 25630 ;; This function uses a non-reentrant model
 25631 ;;
 25632                           
 25633                           	psect	text73
 25634  005138                     __ptext73:
 25635                           	opt stack 0
 25636  005138                     _OpenUSART:
 25637                           	opt stack 26
 25638                           
 25639                           ; BSR set to: 0
 25640                           ;incstack = 0
 25641                           ;incstack = 0
 25642                           ;OpenUSART@config stored from wreg
 25643  005138  CFE8 F062          	movff	wreg,OpenUSART@config
 25644                           
 25645                           ; BSR set to: 0
 25646  00513C  6AAC               	clrf	4012,c	;volatile
 25647  00513E  6AAB               	clrf	4011,c	;volatile
 25648                           
 25649                           ; BSR set to: 0
 25650  005140  B162               	btfsc	OpenUSART@config& (0+255),0,b
 25651                           
 25652                           ; BSR set to: 0
 25653  005142  88AC               	bsf	4012,4,c	;volatile
 25654                           
 25655                           ; BSR set to: 0
 25656  005144  A362               	btfss	OpenUSART@config& (0+255),1,b
 25657  005146  D002               	goto	l10957
 25658                           
 25659                           ; BSR set to: 0
 25660  005148  8CAC               	bsf	4012,6,c	;volatile
 25661  00514A  8CAB               	bsf	4011,6,c	;volatile
 25662  00514C                     l10957:
 25663                           
 25664                           ; BSR set to: 0
 25665  00514C  B562               	btfsc	OpenUSART@config& (0+255),2,b
 25666                           
 25667                           ; BSR set to: 0
 25668  00514E  8EAC               	bsf	4012,7,c	;volatile
 25669                           
 25670                           ; BSR set to: 0
 25671  005150  A762               	btfss	OpenUSART@config& (0+255),3,b
 25672  005152  D002               	goto	l1802
 25673                           
 25674                           ; BSR set to: 0
 25675  005154  88AB               	bsf	4011,4,c	;volatile
 25676  005156  D001               	goto	l10965
 25677  005158                     l1802:
 25678                           
 25679                           ; BSR set to: 0
 25680  005158  8AAB               	bsf	4011,5,c	;volatile
 25681  00515A                     l10965:
 25682                           
 25683                           ; BSR set to: 0
 25684  00515A  B962               	btfsc	OpenUSART@config& (0+255),4,b
 25685                           
 25686                           ; BSR set to: 0
 25687  00515C  84AC               	bsf	4012,2,c	;volatile
 25688                           
 25689                           ; BSR set to: 0
 25690  00515E  989E               	bcf	3998,4,c	;volatile
 25691                           
 25692                           ; BSR set to: 0
 25693  005160  BB62               	btfsc	OpenUSART@config& (0+255),5,b
 25694                           
 25695                           ; BSR set to: 0
 25696  005162  86AB               	bsf	4011,3,c	;volatile
 25697                           
 25698                           ; BSR set to: 0
 25699  005164  AD62               	btfss	OpenUSART@config& (0+255),6,b
 25700  005166  D002               	goto	l1806
 25701                           
 25702                           ; BSR set to: 0
 25703  005168  8A9D               	bsf	3997,5,c	;volatile
 25704  00516A  D001               	goto	l1807
 25705  00516C                     l1806:
 25706                           
 25707                           ; BSR set to: 0
 25708  00516C  9A9D               	bcf	3997,5,c	;volatile
 25709  00516E                     l1807:
 25710                           
 25711                           ; BSR set to: 0
 25712  00516E  9A9E               	bcf	3998,5,c	;volatile
 25713                           
 25714                           ; BSR set to: 0
 25715  005170  AF62               	btfss	OpenUSART@config& (0+255),7,b
 25716  005172  D002               	goto	l1808
 25717                           
 25718                           ; BSR set to: 0
 25719  005174  889D               	bsf	3997,4,c	;volatile
 25720  005176  D001               	goto	l1809
 25721  005178                     l1808:
 25722                           
 25723                           ; BSR set to: 0
 25724  005178  989D               	bcf	3997,4,c	;volatile
 25725  00517A                     l1809:
 25726                           
 25727                           ; BSR set to: 0
 25728  00517A  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 25729                           
 25730                           ; BSR set to: 0
 25731  00517E  5161               	movf	(OpenUSART@spbrg+1)& (0+255),w,b
 25732  005180  6EB0               	movwf	4016,c	;volatile
 25733                           
 25734                           ; BSR set to: 0
 25735  005182  8AAC               	bsf	4012,5,c	;volatile
 25736                           
 25737                           ; BSR set to: 0
 25738  005184  8EAB               	bsf	4011,7,c	;volatile
 25739                           
 25740                           ; BSR set to: 0
 25741  005186  9C94               	bcf	3988,6,c	;volatile
 25742                           
 25743                           ; BSR set to: 0
 25744  005188  8E94               	bsf	3988,7,c	;volatile
 25745                           
 25746                           ; BSR set to: 0
 25747  00518A  B8AC               	btfsc	4012,4,c	;volatile
 25748                           
 25749                           ; BSR set to: 0
 25750  00518C  BEAC               	btfsc	4012,7,c	;volatile
 25751  00518E  D001               	goto	l1811
 25752                           
 25753                           ; BSR set to: 0
 25754  005190  8C94               	bsf	3988,6,c	;volatile
 25755  005192                     l1811:
 25756                           
 25757                           ; BSR set to: 0
 25758  005192  0012               	return	
 25759  005194                     __end_of_OpenUSART:
 25760                           	opt stack 0
 25761                           tblptru	equ	0xFF8
 25762                           tblptrh	equ	0xFF7
 25763                           tblptrl	equ	0xFF6
 25764                           tablat	equ	0xFF5
 25765                           prodh	equ	0xFF4
 25766                           prodl	equ	0xFF3
 25767                           intcon	equ	0xFF2
 25768                           indf0	equ	0xFEF
 25769                           postinc0	equ	0xFEE
 25770                           fsr0h	equ	0xFEA
 25771                           fsr0l	equ	0xFE9
 25772                           wreg	equ	0xFE8
 25773                           indf1	equ	0xFE7
 25774                           postinc1	equ	0xFE6
 25775                           postdec1	equ	0xFE5
 25776                           fsr1h	equ	0xFE2
 25777                           fsr1l	equ	0xFE1
 25778                           indf2	equ	0xFDF
 25779                           postinc2	equ	0xFDE
 25780                           postdec2	equ	0xFDD
 25781                           plusw2	equ	0xFDB
 25782                           fsr2h	equ	0xFDA
 25783                           fsr2l	equ	0xFD9
 25784                           status	equ	0xFD8
 25785                           
 25786 ;; *************** function _WriteTimer0 *****************
 25787 ;; Defined at:
 25788 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 25789 ;; Parameters:    Size  Location     Type
 25790 ;;  timer0          2    0[BANK0 ] unsigned int 
 25791 ;; Auto vars:     Size  Location     Type
 25792 ;;  timer           2    2[BANK0 ] struct Timers
 25793 ;; Return value:  Size  Location     Type
 25794 ;;		None               void
 25795 ;; Registers used:
 25796 ;;		None
 25797 ;; Tracked objects:
 25798 ;;		On entry : F/0
 25799 ;;		On exit  : F/0
 25800 ;;		Unchanged: F/0
 25801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25802 ;;      Params:         0       2       0       0       0       0       0
 25803 ;;      Locals:         0       2       0       0       0       0       0
 25804 ;;      Temps:          0       0       0       0       0       0       0
 25805 ;;      Totals:         0       4       0       0       0       0       0
 25806 ;;Total ram usage:        4 bytes
 25807 ;; Hardware stack levels used:    1
 25808 ;; Hardware stack levels required when called:    3
 25809 ;; This function calls:
 25810 ;;		Nothing
 25811 ;; This function is called by:
 25812 ;;		_init
 25813 ;; This function uses a non-reentrant model
 25814 ;;
 25815                           
 25816                           	psect	text74
 25817  00579E                     __ptext74:
 25818                           	opt stack 0
 25819  00579E                     _WriteTimer0:
 25820                           	opt stack 26
 25821                           
 25822                           ; BSR set to: 0
 25823                           
 25824                           ; BSR set to: 0
 25825                           ;incstack = 0
 25826                           ;incstack = 0
 25827  00579E  C060  F062         	movff	WriteTimer0@timer0,WriteTimer0@timer
 25828  0057A2  C061  F063         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 25829  0057A6  C063  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 25830  0057AA  C062  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 25831                           
 25832                           ; BSR set to: 0
 25833  0057AE  0012               	return	
 25834  0057B0                     __end_of_WriteTimer0:
 25835                           	opt stack 0
 25836                           tblptru	equ	0xFF8
 25837                           tblptrh	equ	0xFF7
 25838                           tblptrl	equ	0xFF6
 25839                           tablat	equ	0xFF5
 25840                           prodh	equ	0xFF4
 25841                           prodl	equ	0xFF3
 25842                           intcon	equ	0xFF2
 25843                           indf0	equ	0xFEF
 25844                           postinc0	equ	0xFEE
 25845                           fsr0h	equ	0xFEA
 25846                           fsr0l	equ	0xFE9
 25847                           wreg	equ	0xFE8
 25848                           indf1	equ	0xFE7
 25849                           postinc1	equ	0xFE6
 25850                           postdec1	equ	0xFE5
 25851                           fsr1h	equ	0xFE2
 25852                           fsr1l	equ	0xFE1
 25853                           indf2	equ	0xFDF
 25854                           postinc2	equ	0xFDE
 25855                           postdec2	equ	0xFDD
 25856                           plusw2	equ	0xFDB
 25857                           fsr2h	equ	0xFDA
 25858                           fsr2l	equ	0xFD9
 25859                           status	equ	0xFD8
 25860                           
 25861 ;; *************** function _vscp_restoreDefaults *****************
 25862 ;; Defined at:
 25863 ;;		line 2724 in file "main.c"
 25864 ;; Parameters:    Size  Location     Type
 25865 ;;		None
 25866 ;; Auto vars:     Size  Location     Type
 25867 ;;		None
 25868 ;; Return value:  Size  Location     Type
 25869 ;;		None               void
 25870 ;; Registers used:
 25871 ;;		wreg, status,2, status,0, cstack
 25872 ;; Tracked objects:
 25873 ;;		On entry : F/0
 25874 ;;		On exit  : F/1
 25875 ;;		Unchanged: 0/0
 25876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25877 ;;      Params:         0       0       0       0       0       0       0
 25878 ;;      Locals:         0       0       0       0       0       0       0
 25879 ;;      Temps:          0       0       0       0       0       0       0
 25880 ;;      Totals:         0       0       0       0       0       0       0
 25881 ;;Total ram usage:        0 bytes
 25882 ;; Hardware stack levels used:    1
 25883 ;; Hardware stack levels required when called:    5
 25884 ;; This function calls:
 25885 ;;		_init_app_ram
 25886 ;;		_init_app_eeprom
 25887 ;; This function is called by:
 25888 ;;		_main
 25889 ;; This function uses a non-reentrant model
 25890 ;;
 25891                           
 25892                           	psect	text75
 25893  0057D4                     __ptext75:
 25894                           	opt stack 0
 25895  0057D4                     _vscp_restoreDefaults:
 25896                           	opt stack 25
 25897                           
 25898                           ; BSR set to: 0
 25899                           ;main.c: 2725: init_app_eeprom();
 25900                           
 25901                           ; BSR set to: 0
 25902                           ;incstack = 0
 25903                           ;incstack = 0
 25904  0057D4  EC80  F025         	call	_init_app_eeprom	;wreg free
 25905                           
 25906                           ; BSR set to: 0
 25907                           ;main.c: 2726: init_app_ram();
 25908  0057D8  EF22  F029         	goto	_init_app_ram	;wreg free
 25909  0057DC                     __end_of_vscp_restoreDefaults:
 25910                           	opt stack 0
 25911                           tblptru	equ	0xFF8
 25912                           tblptrh	equ	0xFF7
 25913                           tblptrl	equ	0xFF6
 25914                           tablat	equ	0xFF5
 25915                           prodh	equ	0xFF4
 25916                           prodl	equ	0xFF3
 25917                           intcon	equ	0xFF2
 25918                           indf0	equ	0xFEF
 25919                           postinc0	equ	0xFEE
 25920                           fsr0h	equ	0xFEA
 25921                           fsr0l	equ	0xFE9
 25922                           wreg	equ	0xFE8
 25923                           indf1	equ	0xFE7
 25924                           postinc1	equ	0xFE6
 25925                           postdec1	equ	0xFE5
 25926                           fsr1h	equ	0xFE2
 25927                           fsr1l	equ	0xFE1
 25928                           indf2	equ	0xFDF
 25929                           postinc2	equ	0xFDE
 25930                           postdec2	equ	0xFDD
 25931                           plusw2	equ	0xFDB
 25932                           fsr2h	equ	0xFDA
 25933                           fsr2l	equ	0xFD9
 25934                           status	equ	0xFD8
 25935                           
 25936 ;; *************** function _init_app_eeprom *****************
 25937 ;; Defined at:
 25938 ;;		line 465 in file "main.c"
 25939 ;; Parameters:    Size  Location     Type
 25940 ;;		None
 25941 ;; Auto vars:     Size  Location     Type
 25942 ;;  i               1    3[BANK0 ] unsigned char 
 25943 ;; Return value:  Size  Location     Type
 25944 ;;		None               void
 25945 ;; Registers used:
 25946 ;;		wreg, status,2, status,0, cstack
 25947 ;; Tracked objects:
 25948 ;;		On entry : F/0
 25949 ;;		On exit  : F/0
 25950 ;;		Unchanged: 0/0
 25951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25952 ;;      Params:         0       0       0       0       0       0       0
 25953 ;;      Locals:         0       1       0       0       0       0       0
 25954 ;;      Temps:          0       0       0       0       0       0       0
 25955 ;;      Totals:         0       1       0       0       0       0       0
 25956 ;;Total ram usage:        1 bytes
 25957 ;; Hardware stack levels used:    1
 25958 ;; Hardware stack levels required when called:    4
 25959 ;; This function calls:
 25960 ;;		_writeEEPROM
 25961 ;; This function is called by:
 25962 ;;		_vscp_restoreDefaults
 25963 ;; This function uses a non-reentrant model
 25964 ;;
 25965                           
 25966                           	psect	text76
 25967  004B00                     __ptext76:
 25968                           	opt stack 0
 25969  004B00                     _init_app_eeprom:
 25970                           	opt stack 25
 25971                           
 25972                           ; BSR set to: 0
 25973                           ;main.c: 466: uint8_t i;
 25974                           ;main.c: 468: writeEEPROM(0x01, 0x55);
 25975                           
 25976                           ; BSR set to: 1
 25977                           ;incstack = 0
 25978                           ;incstack = 0
 25979  004B00  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25980  004B02  0E01               	movlw	1
 25981  004B04  6F60               	movwf	?_writeEEPROM& (0+255),b
 25982  004B06  0E55               	movlw	85
 25983  004B08  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 25984  004B0A  EC6C  F02B         	call	_writeEEPROM	;wreg free
 25985                           
 25986                           ;main.c: 469: writeEEPROM(0x02, 0xAA);
 25987  004B0E  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25988  004B10  0E02               	movlw	2
 25989  004B12  6F60               	movwf	?_writeEEPROM& (0+255),b
 25990  004B14  0EAA               	movlw	170
 25991  004B16  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 25992  004B18  EC6C  F02B         	call	_writeEEPROM	;wreg free
 25993                           
 25994                           ;main.c: 470: writeEEPROM(0x03, 0);
 25995  004B1C  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25996  004B1E  0E03               	movlw	3
 25997  004B20  6F60               	movwf	?_writeEEPROM& (0+255),b
 25998  004B22  0E00               	movlw	0
 25999  004B24  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 26000  004B26  EC6C  F02B         	call	_writeEEPROM	;wreg free
 26001                           
 26002                           ;main.c: 471: writeEEPROM(0x05, 0);
 26003  004B2A  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 26004  004B2C  0E05               	movlw	5
 26005  004B2E  6F60               	movwf	?_writeEEPROM& (0+255),b
 26006  004B30  0E00               	movlw	0
 26007  004B32  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 26008  004B34  EC6C  F02B         	call	_writeEEPROM	;wreg free
 26009                           
 26010                           ;main.c: 472: writeEEPROM(0x06, 0);
 26011  004B38  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 26012  004B3A  0E06               	movlw	6
 26013  004B3C  6F60               	movwf	?_writeEEPROM& (0+255),b
 26014  004B3E  0E00               	movlw	0
 26015  004B40  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 26016  004B42  EC6C  F02B         	call	_writeEEPROM	;wreg free
 26017                           
 26018                           ;main.c: 473: writeEEPROM(0x09, 10u);
 26019  004B46  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 26020  004B48  0E09               	movlw	9
 26021  004B4A  6F60               	movwf	?_writeEEPROM& (0+255),b
 26022  004B4C  0E0A               	movlw	10
 26023  004B4E  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 26024  004B50  EC6C  F02B         	call	_writeEEPROM	;wreg free
 26025                           
 26026                           ; BSR set to: 0
 26027                           ;main.c: 476: for (i = 0x20; i < (0x5C + 4); i++) {
 26028  004B54  0E20               	movlw	32
 26029  004B56  6F63               	movwf	init_app_eeprom@i& (0+255),b
 26030  004B58                     l11105:
 26031                           
 26032                           ; BSR set to: 0
 26033                           ;main.c: 477: writeEEPROM(0x01, 0xFF);
 26034  004B58  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 26035  004B5A  0E01               	movlw	1
 26036  004B5C  6F60               	movwf	?_writeEEPROM& (0+255),b
 26037  004B5E  0EFF               	movlw	255
 26038  004B60  6962               	setf	(?_writeEEPROM+2)& (0+255),b
 26039  004B62  EC6C  F02B         	call	_writeEEPROM	;wreg free
 26040                           
 26041                           ; BSR set to: 0
 26042  004B66  2B63               	incf	init_app_eeprom@i& (0+255),f,b
 26043                           
 26044                           ; BSR set to: 0
 26045  004B68  0E5F               	movlw	95
 26046  004B6A  6563               	cpfsgt	init_app_eeprom@i& (0+255),b
 26047  004B6C  D7F5               	goto	l11105
 26048                           
 26049                           ; BSR set to: 0
 26050                           ;main.c: 478: }
 26051                           ;main.c: 481: for (i = 0x60; i < (0x64 + 4); i++) {
 26052  004B6E  0E60               	movlw	96
 26053  004B70  6F63               	movwf	init_app_eeprom@i& (0+255),b
 26054  004B72                     l11117:
 26055                           
 26056                           ; BSR set to: 0
 26057                           ;main.c: 482: writeEEPROM(0x01, 0xFF);
 26058  004B72  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 26059  004B74  0E01               	movlw	1
 26060  004B76  6F60               	movwf	?_writeEEPROM& (0+255),b
 26061  004B78  0EFF               	movlw	255
 26062  004B7A  6962               	setf	(?_writeEEPROM+2)& (0+255),b
 26063  004B7C  EC6C  F02B         	call	_writeEEPROM	;wreg free
 26064                           
 26065                           ; BSR set to: 0
 26066  004B80  2B63               	incf	init_app_eeprom@i& (0+255),f,b
 26067                           
 26068                           ; BSR set to: 0
 26069  004B82  0E67               	movlw	103
 26070  004B84  6563               	cpfsgt	init_app_eeprom@i& (0+255),b
 26071  004B86  D7F5               	goto	l11117
 26072                           
 26073                           ; BSR set to: 0
 26074  004B88  0C67               	retlw	103
 26075  004B8A                     __end_of_init_app_eeprom:
 26076                           	opt stack 0
 26077                           tblptru	equ	0xFF8
 26078                           tblptrh	equ	0xFF7
 26079                           tblptrl	equ	0xFF6
 26080                           tablat	equ	0xFF5
 26081                           prodh	equ	0xFF4
 26082                           prodl	equ	0xFF3
 26083                           intcon	equ	0xFF2
 26084                           indf0	equ	0xFEF
 26085                           postinc0	equ	0xFEE
 26086                           fsr0h	equ	0xFEA
 26087                           fsr0l	equ	0xFE9
 26088                           wreg	equ	0xFE8
 26089                           indf1	equ	0xFE7
 26090                           postinc1	equ	0xFE6
 26091                           postdec1	equ	0xFE5
 26092                           fsr1h	equ	0xFE2
 26093                           fsr1l	equ	0xFE1
 26094                           indf2	equ	0xFDF
 26095                           postinc2	equ	0xFDE
 26096                           postdec2	equ	0xFDD
 26097                           plusw2	equ	0xFDB
 26098                           fsr2h	equ	0xFDA
 26099                           fsr2l	equ	0xFD9
 26100                           status	equ	0xFD8
 26101                           
 26102 ;; *************** function _writeEEPROM *****************
 26103 ;; Defined at:
 26104 ;;		line 23 in file "eeprom.c"
 26105 ;; Parameters:    Size  Location     Type
 26106 ;;  address         2    0[BANK0 ] unsigned short 
 26107 ;;  data            1    2[BANK0 ] unsigned char 
 26108 ;; Auto vars:     Size  Location     Type
 26109 ;;		None
 26110 ;; Return value:  Size  Location     Type
 26111 ;;		None               void
 26112 ;; Registers used:
 26113 ;;		wreg, status,2
 26114 ;; Tracked objects:
 26115 ;;		On entry : F/0
 26116 ;;		On exit  : F/0
 26117 ;;		Unchanged: F/0
 26118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26119 ;;      Params:         0       3       0       0       0       0       0
 26120 ;;      Locals:         0       0       0       0       0       0       0
 26121 ;;      Temps:          0       0       0       0       0       0       0
 26122 ;;      Totals:         0       3       0       0       0       0       0
 26123 ;;Total ram usage:        3 bytes
 26124 ;; Hardware stack levels used:    1
 26125 ;; Hardware stack levels required when called:    3
 26126 ;; This function calls:
 26127 ;;		Nothing
 26128 ;; This function is called by:
 26129 ;;		_init_app_eeprom
 26130 ;;		_doModeVerbose
 26131 ;;		_doModeSLCAN
 26132 ;; This function uses a non-reentrant model
 26133 ;;
 26134                           
 26135                           	psect	text77
 26136  0056D8                     __ptext77:
 26137                           	opt stack 0
 26138  0056D8                     _writeEEPROM:
 26139                           	opt stack 26
 26140                           
 26141                           ; BSR set to: 0
 26142                           ;eeprom.c: 29: EEADR = address & 0xff;
 26143                           
 26144                           ; BSR set to: 0
 26145                           ;incstack = 0
 26146                           ;incstack = 0
 26147  0056D8  C060  FFA9         	movff	writeEEPROM@address,4009	;volatile
 26148                           
 26149                           ;eeprom.c: 30: EEDATA = data;
 26150  0056DC  C062  FFA8         	movff	writeEEPROM@data,4008	;volatile
 26151                           
 26152                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 26153  0056E0  9EA6               	bcf	4006,7,c	;volatile
 26154                           
 26155                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 26156  0056E2  9CA6               	bcf	4006,6,c	;volatile
 26157                           
 26158                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 26159  0056E4  84A6               	bsf	4006,2,c	;volatile
 26160                           
 26161                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 26162  0056E6  9EF2               	bcf	intcon,7,c	;volatile
 26163                           
 26164                           ; BSR set to: 0
 26165                           ;eeprom.c: 37: EECON2 = 0x55;
 26166  0056E8  0E55               	movlw	85
 26167  0056EA  6EA7               	movwf	4007,c	;volatile
 26168                           
 26169                           ;eeprom.c: 38: EECON2 = 0xaa;
 26170  0056EC  0EAA               	movlw	170
 26171  0056EE  6EA7               	movwf	4007,c	;volatile
 26172                           
 26173                           ; BSR set to: 0
 26174                           ;eeprom.c: 39: EECON1bits.WR = 1;
 26175  0056F0  82A6               	bsf	4006,1,c	;volatile
 26176                           
 26177                           ; BSR set to: 0
 26178                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 26179  0056F2  8EF2               	bsf	intcon,7,c	;volatile
 26180  0056F4                     l1549:
 26181                           
 26182                           ; BSR set to: 0
 26183  0056F4  A8A1               	btfss	4001,4,c	;volatile
 26184  0056F6  D7FE               	goto	l1549
 26185                           
 26186                           ; BSR set to: 0
 26187                           ;eeprom.c: 43: PIR2bits.EEIF = 0;
 26188  0056F8  98A1               	bcf	4001,4,c	;volatile
 26189                           
 26190                           ;eeprom.c: 44: EECON1bits.WREN = 0;
 26191  0056FA  94A6               	bcf	4006,2,c	;volatile
 26192                           
 26193                           ; BSR set to: 0
 26194  0056FC  0012               	return	
 26195  0056FE                     __end_of_writeEEPROM:
 26196                           	opt stack 0
 26197                           tblptru	equ	0xFF8
 26198                           tblptrh	equ	0xFF7
 26199                           tblptrl	equ	0xFF6
 26200                           tablat	equ	0xFF5
 26201                           prodh	equ	0xFF4
 26202                           prodl	equ	0xFF3
 26203                           intcon	equ	0xFF2
 26204                           indf0	equ	0xFEF
 26205                           postinc0	equ	0xFEE
 26206                           fsr0h	equ	0xFEA
 26207                           fsr0l	equ	0xFE9
 26208                           wreg	equ	0xFE8
 26209                           indf1	equ	0xFE7
 26210                           postinc1	equ	0xFE6
 26211                           postdec1	equ	0xFE5
 26212                           fsr1h	equ	0xFE2
 26213                           fsr1l	equ	0xFE1
 26214                           indf2	equ	0xFDF
 26215                           postinc2	equ	0xFDE
 26216                           postdec2	equ	0xFDD
 26217                           plusw2	equ	0xFDB
 26218                           fsr2h	equ	0xFDA
 26219                           fsr2l	equ	0xFD9
 26220                           status	equ	0xFD8
 26221                           
 26222 ;; *************** function _init_app_ram *****************
 26223 ;; Defined at:
 26224 ;;		line 447 in file "main.c"
 26225 ;; Parameters:    Size  Location     Type
 26226 ;;		None
 26227 ;; Auto vars:     Size  Location     Type
 26228 ;;		None
 26229 ;; Return value:  Size  Location     Type
 26230 ;;		None               void
 26231 ;; Registers used:
 26232 ;;		wreg, status,2, cstack
 26233 ;; Tracked objects:
 26234 ;;		On entry : E/0
 26235 ;;		On exit  : F/1
 26236 ;;		Unchanged: 0/0
 26237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26238 ;;      Params:         0       0       0       0       0       0       0
 26239 ;;      Locals:         0       0       0       0       0       0       0
 26240 ;;      Temps:          0       0       0       0       0       0       0
 26241 ;;      Totals:         0       0       0       0       0       0       0
 26242 ;;Total ram usage:        0 bytes
 26243 ;; Hardware stack levels used:    1
 26244 ;; Hardware stack levels required when called:    4
 26245 ;; This function calls:
 26246 ;;		_readEEPROM
 26247 ;; This function is called by:
 26248 ;;		_init
 26249 ;;		_vscp_restoreDefaults
 26250 ;; This function uses a non-reentrant model
 26251 ;;
 26252                           
 26253                           	psect	text78
 26254  005244                     __ptext78:
 26255                           	opt stack 0
 26256  005244                     _init_app_ram:
 26257                           	opt stack 25
 26258                           
 26259                           ;main.c: 449: can_receiveOverruns = 0;
 26260                           
 26261                           ; BSR set to: 0
 26262                           ;incstack = 0
 26263                           ;incstack = 0
 26264  005244  0100               	movlb	0	; () banked
 26265  005246  6BD1               	clrf	_can_receiveOverruns& (0+255),b
 26266  005248  6BD2               	clrf	(_can_receiveOverruns+1)& (0+255),b
 26267  00524A  6BD3               	clrf	(_can_receiveOverruns+2)& (0+255),b
 26268  00524C  6BD4               	clrf	(_can_receiveOverruns+3)& (0+255),b
 26269                           
 26270                           ;main.c: 450: can_transmitOverruns = 0;
 26271  00524E  6A2B               	clrf	_can_transmitOverruns,c
 26272  005250  6A2C               	clrf	_can_transmitOverruns+1,c
 26273  005252  6A2D               	clrf	_can_transmitOverruns+2,c
 26274  005254  6A2E               	clrf	_can_transmitOverruns+3,c
 26275                           
 26276                           ;main.c: 451: uart_receiveOverruns = 0;
 26277  005256  6A2F               	clrf	_uart_receiveOverruns,c
 26278  005258  6A30               	clrf	_uart_receiveOverruns+1,c
 26279  00525A  6A31               	clrf	_uart_receiveOverruns+2,c
 26280  00525C  6A32               	clrf	_uart_receiveOverruns+3,c
 26281                           
 26282                           ;main.c: 452: uart_transmitOverruns = 0;
 26283  00525E  6A33               	clrf	_uart_transmitOverruns,c
 26284  005260  6A34               	clrf	_uart_transmitOverruns+1,c
 26285  005262  6A35               	clrf	_uart_transmitOverruns+2,c
 26286  005264  6A36               	clrf	_uart_transmitOverruns+3,c
 26287                           
 26288                           ; BSR set to: 0
 26289                           ;main.c: 454: bHex = readEEPROM(0x06);
 26290  005266  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
 26291  005268  0E06               	movlw	6
 26292  00526A  6F60               	movwf	?_readEEPROM& (0+255),b
 26293  00526C  ECD8  F02B         	call	_readEEPROM	;wreg free
 26294  005270  0101               	movlb	1	; () banked
 26295  005272  6F00               	movwf	_bHex& (0+255),b
 26296                           
 26297                           ;main.c: 455: mode = readEEPROM(0x03);
 26298  005274  0100               	movlb	0	; () banked
 26299  005276  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
 26300  005278  0E03               	movlw	3
 26301  00527A  6F60               	movwf	?_readEEPROM& (0+255),b
 26302  00527C  ECD8  F02B         	call	_readEEPROM	;wreg free
 26303  005280  6FF1               	movwf	_mode& (0+255),b
 26304                           
 26305                           ;main.c: 457: rwtimeout = readEEPROM(0x09);
 26306  005282  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
 26307  005284  0E09               	movlw	9
 26308  005286  6F60               	movwf	?_readEEPROM& (0+255),b
 26309  005288  ECD8  F02B         	call	_readEEPROM	;wreg free
 26310  00528C  0101               	movlb	1	; () banked
 26311  00528E  6F03               	movwf	_rwtimeout& (0+255),b
 26312                           
 26313                           ; BSR set to: 1
 26314  005290  0012               	return	
 26315  005292                     __end_of_init_app_ram:
 26316                           	opt stack 0
 26317                           tblptru	equ	0xFF8
 26318                           tblptrh	equ	0xFF7
 26319                           tblptrl	equ	0xFF6
 26320                           tablat	equ	0xFF5
 26321                           prodh	equ	0xFF4
 26322                           prodl	equ	0xFF3
 26323                           intcon	equ	0xFF2
 26324                           indf0	equ	0xFEF
 26325                           postinc0	equ	0xFEE
 26326                           fsr0h	equ	0xFEA
 26327                           fsr0l	equ	0xFE9
 26328                           wreg	equ	0xFE8
 26329                           indf1	equ	0xFE7
 26330                           postinc1	equ	0xFE6
 26331                           postdec1	equ	0xFE5
 26332                           fsr1h	equ	0xFE2
 26333                           fsr1l	equ	0xFE1
 26334                           indf2	equ	0xFDF
 26335                           postinc2	equ	0xFDE
 26336                           postdec2	equ	0xFDD
 26337                           plusw2	equ	0xFDB
 26338                           fsr2h	equ	0xFDA
 26339                           fsr2l	equ	0xFD9
 26340                           status	equ	0xFD8
 26341                           
 26342 ;; *************** function _readEEPROM *****************
 26343 ;; Defined at:
 26344 ;;		line 87 in file "eeprom.c"
 26345 ;; Parameters:    Size  Location     Type
 26346 ;;  address         2    0[BANK0 ] unsigned short 
 26347 ;; Auto vars:     Size  Location     Type
 26348 ;;  data            1    2[BANK0 ] unsigned char 
 26349 ;; Return value:  Size  Location     Type
 26350 ;;                  1    wreg      unsigned char 
 26351 ;; Registers used:
 26352 ;;		wreg, status,2
 26353 ;; Tracked objects:
 26354 ;;		On entry : F/0
 26355 ;;		On exit  : F/0
 26356 ;;		Unchanged: 0/0
 26357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26358 ;;      Params:         0       2       0       0       0       0       0
 26359 ;;      Locals:         0       1       0       0       0       0       0
 26360 ;;      Temps:          0       0       0       0       0       0       0
 26361 ;;      Totals:         0       3       0       0       0       0       0
 26362 ;;Total ram usage:        3 bytes
 26363 ;; Hardware stack levels used:    1
 26364 ;; Hardware stack levels required when called:    3
 26365 ;; This function calls:
 26366 ;;		Nothing
 26367 ;; This function is called by:
 26368 ;;		_main
 26369 ;;		_init_app_ram
 26370 ;; This function uses a non-reentrant model
 26371 ;;
 26372                           
 26373                           	psect	text79
 26374  0057B0                     __ptext79:
 26375                           	opt stack 0
 26376  0057B0                     _readEEPROM:
 26377                           	opt stack 25
 26378                           
 26379                           ; BSR set to: 0
 26380                           ;eeprom.c: 88: uint8_t data;
 26381                           ;eeprom.c: 93: EEADR = address & 0xff;
 26382                           
 26383                           ; BSR set to: 1
 26384                           ;incstack = 0
 26385                           ;incstack = 0
 26386  0057B0  C060  FFA9         	movff	readEEPROM@address,4009	;volatile
 26387                           
 26388                           ;eeprom.c: 94: EECON1bits.EEPGD= 0;
 26389  0057B4  9EA6               	bcf	4006,7,c	;volatile
 26390                           
 26391                           ;eeprom.c: 95: EECON1bits.CFGS = 0;
 26392  0057B6  9CA6               	bcf	4006,6,c	;volatile
 26393                           
 26394                           ;eeprom.c: 96: EECON1bits.RD = 1;
 26395  0057B8  80A6               	bsf	4006,0,c	;volatile
 26396                           
 26397                           ;eeprom.c: 97: data = EEDATA;
 26398  0057BA  CFA8 F062          	movff	4008,readEEPROM@data	;volatile
 26399                           
 26400                           ; BSR set to: 0
 26401                           ;eeprom.c: 99: return data;
 26402  0057BE  5162               	movf	readEEPROM@data& (0+255),w,b
 26403                           
 26404                           ; BSR set to: 0
 26405  0057C0  0012               	return	
 26406  0057C2                     __end_of_readEEPROM:
 26407                           	opt stack 0
 26408                           tblptru	equ	0xFF8
 26409                           tblptrh	equ	0xFF7
 26410                           tblptrl	equ	0xFF6
 26411                           tablat	equ	0xFF5
 26412                           prodh	equ	0xFF4
 26413                           prodl	equ	0xFF3
 26414                           intcon	equ	0xFF2
 26415                           indf0	equ	0xFEF
 26416                           postinc0	equ	0xFEE
 26417                           fsr0h	equ	0xFEA
 26418                           fsr0l	equ	0xFE9
 26419                           wreg	equ	0xFE8
 26420                           indf1	equ	0xFE7
 26421                           postinc1	equ	0xFE6
 26422                           postdec1	equ	0xFE5
 26423                           fsr1h	equ	0xFE2
 26424                           fsr1l	equ	0xFE1
 26425                           indf2	equ	0xFDF
 26426                           postinc2	equ	0xFDE
 26427                           postdec2	equ	0xFDD
 26428                           plusw2	equ	0xFDB
 26429                           fsr2h	equ	0xFDA
 26430                           fsr2l	equ	0xFD9
 26431                           status	equ	0xFD8
 26432                           
 26433 ;; *************** function _fifo_init *****************
 26434 ;; Defined at:
 26435 ;;		line 14 in file "fifo.c"
 26436 ;; Parameters:    Size  Location     Type
 26437 ;;  f               1    wreg     PTR struct .
 26438 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 26439 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 26440 ;;		 -> caninputBuffer(494), inputBuffer(128), 
 26441 ;;  size            2    2[BANK0 ] unsigned short 
 26442 ;; Auto vars:     Size  Location     Type
 26443 ;;  f               1    4[BANK0 ] PTR struct .
 26444 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 26445 ;; Return value:  Size  Location     Type
 26446 ;;		None               void
 26447 ;; Registers used:
 26448 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 26449 ;; Tracked objects:
 26450 ;;		On entry : F/0
 26451 ;;		On exit  : F/0
 26452 ;;		Unchanged: 0/0
 26453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26454 ;;      Params:         0       4       0       0       0       0       0
 26455 ;;      Locals:         0       1       0       0       0       0       0
 26456 ;;      Temps:          0       0       0       0       0       0       0
 26457 ;;      Totals:         0       5       0       0       0       0       0
 26458 ;;Total ram usage:        5 bytes
 26459 ;; Hardware stack levels used:    1
 26460 ;; Hardware stack levels required when called:    3
 26461 ;; This function calls:
 26462 ;;		Nothing
 26463 ;; This function is called by:
 26464 ;;		_main
 26465 ;; This function uses a non-reentrant model
 26466 ;;
 26467                           
 26468                           	psect	text80
 26469  00547A                     __ptext80:
 26470                           	opt stack 0
 26471  00547A                     _fifo_init:
 26472                           	opt stack 27
 26473                           
 26474                           ; BSR set to: 0
 26475                           ;incstack = 0
 26476                           ;incstack = 0
 26477                           ;fifo_init@f stored from wreg
 26478  00547A  CFE8 F064          	movff	wreg,fifo_init@f
 26479                           
 26480                           ; BSR set to: 0
 26481                           ;fifo.c: 15: f->head = 0;
 26482  00547E  5164               	movf	fifo_init@f& (0+255),w,b
 26483  005480  6ED9               	movwf	fsr2l,c
 26484  005482  6ADA               	clrf	fsr2h,c
 26485  005484  0E02               	movlw	2
 26486                           
 26487                           ;fifo.c: 16: f->tail = 0;
 26488  005486  D811               	call	PL94	;call to abstracted procedure
 26489  005488  0E04               	movlw	4
 26490                           
 26491                           ;fifo.c: 17: f->size = size;
 26492  00548A  D80F               	call	PL94	;call to abstracted procedure
 26493  00548C  0E06               	movlw	6
 26494  00548E  26D9               	addwf	fsr2l,f,c
 26495  005490  6ADA               	clrf	fsr2h,c
 26496  005492  C062  FFDE         	movff	fifo_init@size,postinc2
 26497  005496  C063  FFDD         	movff	fifo_init@size+1,postdec2
 26498                           
 26499                           ; BSR set to: 0
 26500                           ;fifo.c: 18: f->buf = buf;
 26501  00549A  5164               	movf	fifo_init@f& (0+255),w,b
 26502  00549C  6ED9               	movwf	fsr2l,c
 26503  00549E  6ADA               	clrf	fsr2h,c
 26504  0054A0  C060  FFDE         	movff	fifo_init@buf,postinc2
 26505  0054A4  C061  FFDD         	movff	fifo_init@buf+1,postdec2
 26506                           
 26507                           ; BSR set to: 0
 26508  0054A8  0012               	return	
 26509  0054AA                     __end_of_fifo_init:
 26510                           	opt stack 0
 26511  0054AA                     PL94:
 26512                           	opt stack 27
 26513  0054AA  26D9               	addwf	fsr2l,f,c
 26514  0054AC  6ADA               	clrf	fsr2h,c
 26515  0054AE  6ADE               	clrf	postinc2,c
 26516  0054B0  6ADD               	clrf	postdec2,c
 26517  0054B2  5164               	movf	fifo_init@f& (0+255),w,b
 26518  0054B4  6ED9               	movwf	fsr2l,c
 26519  0054B6  6ADA               	clrf	fsr2h,c
 26520  0054B8  0012               	return	
 26521  0054BA                     __end_ofPL94:
 26522                           	opt stack 0
 26523                           tblptru	equ	0xFF8
 26524                           tblptrh	equ	0xFF7
 26525                           tblptrl	equ	0xFF6
 26526                           tablat	equ	0xFF5
 26527                           prodh	equ	0xFF4
 26528                           prodl	equ	0xFF3
 26529                           intcon	equ	0xFF2
 26530                           indf0	equ	0xFEF
 26531                           postinc0	equ	0xFEE
 26532                           fsr0h	equ	0xFEA
 26533                           fsr0l	equ	0xFE9
 26534                           wreg	equ	0xFE8
 26535                           indf1	equ	0xFE7
 26536                           postinc1	equ	0xFE6
 26537                           postdec1	equ	0xFE5
 26538                           fsr1h	equ	0xFE2
 26539                           fsr1l	equ	0xFE1
 26540                           indf2	equ	0xFDF
 26541                           postinc2	equ	0xFDE
 26542                           postdec2	equ	0xFDD
 26543                           plusw2	equ	0xFDB
 26544                           fsr2h	equ	0xFDA
 26545                           fsr2l	equ	0xFD9
 26546                           status	equ	0xFD8
 26547                           
 26548 ;; *************** function _Interrupt *****************
 26549 ;; Defined at:
 26550 ;;		line 137 in file "main.c"
 26551 ;; Parameters:    Size  Location     Type
 26552 ;;		None
 26553 ;; Auto vars:     Size  Location     Type
 26554 ;;  data            8   27[COMRAM] unsigned char [8]
 26555 ;;  id              4   37[COMRAM] unsigned long 
 26556 ;;  flags           1   41[COMRAM] enum E16349
 26557 ;;  dlc             1   36[COMRAM] unsigned char 
 26558 ;;  c               1   35[COMRAM] unsigned char 
 26559 ;; Return value:  Size  Location     Type
 26560 ;;		None               void
 26561 ;; Registers used:
 26562 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26563 ;; Tracked objects:
 26564 ;;		On entry : 0/0
 26565 ;;		On exit  : 0/0
 26566 ;;		Unchanged: 0/0
 26567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26568 ;;      Params:         0       0       0       0       0       0       0
 26569 ;;      Locals:        15       0       0       0       0       0       0
 26570 ;;      Temps:          9       0       0       0       0       0       0
 26571 ;;      Totals:        24       0       0       0       0       0       0
 26572 ;;Total ram usage:       24 bytes
 26573 ;; Hardware stack levels used:    1
 26574 ;; Hardware stack levels required when called:    2
 26575 ;; This function calls:
 26576 ;;		_ReadUSART
 26577 ;;		_fifo_write
 26578 ;;		_ECANReceiveMessage
 26579 ;;		_fifo_getFree
 26580 ;;		i1_WriteTimer0
 26581 ;; This function is called by:
 26582 ;;		Interrupt level 1
 26583 ;; This function uses a non-reentrant model
 26584 ;;
 26585                           
 26586                           	psect	intcodelo
 26587  000018                     __pintcodelo:
 26588                           	opt stack 0
 26589  000018                     _Interrupt:
 26590                           	opt stack 20
 26591                           
 26592                           ; BSR set to: 0
 26593                           ;incstack = 0
 26594  000018  CFD8 F015          	movff	status,??_Interrupt+2
 26595  00001C  CFE8 F016          	movff	wreg,??_Interrupt+3
 26596  000020  CFE0 F017          	movff	bsr,??_Interrupt+4
 26597  000024  CFE1 F018          	movff	fsr1l,??_Interrupt+5
 26598  000028  CFE2 F019          	movff	fsr1h,??_Interrupt+6
 26599  00002C  CFD9 F01A          	movff	fsr2l,??_Interrupt+7
 26600  000030  CFDA F01B          	movff	fsr2h,??_Interrupt+8
 26601  000034                     
 26602                           ;main.c: 138: uint8_t c;
 26603                           ;main.c: 141: if ( 1 == PIR1bits.RCIF ) {
 26604  000034  AA9E               	btfss	3998,5,c	;volatile
 26605  000036  D001               	goto	i1u1690_21
 26606  000038  D001               	goto	i1u1690_20
 26607  00003A                     i1u1690_21:
 26608  00003A  D020               	goto	i1l387
 26609  00003C                     i1u1690_20:
 26610  00003C                     
 26611                           ;main.c: 143: c = ReadUSART();
 26612  00003C  EC9E  F02B         	call	_ReadUSART	;wreg free
 26613  000040  6E24               	movwf	Interrupt@c,c
 26614  000042                     
 26615                           ;main.c: 145: if (1 != fifo_write(&serialInputFifo, &c, 1)) {
 26616  000042  0E24               	movlw	low Interrupt@c
 26617  000044  6E01               	movwf	?_fifo_write,c
 26618  000046  0E01               	movlw	1
 26619  000048  6E02               	movwf	?_fifo_write+1,c
 26620  00004A  0E00               	movlw	0
 26621  00004C  6E03               	movwf	?_fifo_write+2,c
 26622  00004E  0E00               	movlw	0
 26623  000050  6E04               	movwf	?_fifo_write+3,c
 26624  000052  0E00               	movlw	0
 26625  000054  6E05               	movwf	?_fifo_write+4,c
 26626  000056  0E48               	movlw	_serialInputFifo& (0+255)
 26627  000058  ECEB  F01B         	call	_fifo_write
 26628  00005C  0401               	decf	?_fifo_write,w,c
 26629  00005E  1002               	iorwf	?_fifo_write+1,w,c
 26630  000060  B4D8               	btfsc	status,2,c
 26631  000062  D001               	goto	i1u1691_21
 26632  000064  D001               	goto	i1u1691_20
 26633  000066                     i1u1691_21:
 26634  000066  D008               	goto	i1l12987
 26635  000068                     i1u1691_20:
 26636  000068                     
 26637                           ;main.c: 147: uart_receiveOverruns++;
 26638  000068  0E01               	movlw	1
 26639  00006A  262F               	addwf	_uart_receiveOverruns,f,c
 26640  00006C  0E00               	movlw	0
 26641  00006E  2230               	addwfc	_uart_receiveOverruns+1,f,c
 26642  000070  0E00               	movlw	0
 26643  000072  2231               	addwfc	_uart_receiveOverruns+2,f,c
 26644  000074  0E00               	movlw	0
 26645  000076  2232               	addwfc	_uart_receiveOverruns+3,f,c
 26646  000078                     i1l12987:
 26647                           
 26648                           ;main.c: 148: }
 26649                           ;main.c: 151: PIR1bits.RCIF = 0;
 26650  000078  9A9E               	bcf	3998,5,c	;volatile
 26651                           
 26652                           ;main.c: 153: }
 26653  00007A  D07D               	goto	i1l389
 26654  00007C                     i1l387:
 26655                           
 26656                           ;main.c: 155: else if (1 == INTCONbits.TMR0IF) {
 26657  00007C  A4F2               	btfss	intcon,2,c	;volatile
 26658  00007E  D001               	goto	i1u1692_21
 26659  000080  D001               	goto	i1u1692_20
 26660  000082                     i1u1692_21:
 26661  000082  D079               	goto	i1l389
 26662  000084                     i1u1692_20:
 26663  000084                     
 26664                           ;main.c: 157: WriteTimer0(0xfb1d);
 26665  000084  0EFB               	movlw	251
 26666  000086  6E02               	movwf	?i1_WriteTimer0+1,c
 26667  000088  0E1D               	movlw	29
 26668  00008A  6E01               	movwf	?i1_WriteTimer0,c
 26669  00008C  ECE1  F02B         	call	i1_WriteTimer0	;wreg free
 26670  000090                     
 26671                           ;main.c: 159: timer++;
 26672  000090  0E01               	movlw	1
 26673  000092  0100               	movlb	0	; () banked
 26674  000094  27E9               	addwf	_timer& (0+255),f,b	;volatile
 26675  000096  0E00               	movlw	0
 26676  000098  23EA               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 26677  00009A  0E00               	movlw	0
 26678  00009C  23EB               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 26679  00009E  0E00               	movlw	0
 26680  0000A0  23EC               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 26681  0000A2                     
 26682                           ; BSR set to: 0
 26683                           ;main.c: 160: timekeeper++;
 26684  0000A2  0E01               	movlw	1
 26685  0000A4  27E5               	addwf	_timekeeper& (0+255),f,b	;volatile
 26686  0000A6  0E00               	movlw	0
 26687  0000A8  23E6               	addwfc	(_timekeeper+1)& (0+255),f,b	;volatile
 26688  0000AA  0E00               	movlw	0
 26689  0000AC  23E7               	addwfc	(_timekeeper+2)& (0+255),f,b	;volatile
 26690  0000AE  0E00               	movlw	0
 26691  0000B0  23E8               	addwfc	(_timekeeper+3)& (0+255),f,b	;volatile
 26692  0000B2                     
 26693                           ; BSR set to: 0
 26694                           ;main.c: 163: status_led_cnt++;
 26695  0000B2  4A39               	infsnz	_status_led_cnt,f,c	;volatile
 26696  0000B4  2A3A               	incf	_status_led_cnt+1,f,c	;volatile
 26697  0000B6                     
 26698                           ; BSR set to: 0
 26699                           ;main.c: 164: if ((2 == ledFunctionality) &&
 26700                           ;main.c: 165: (status_led_cnt > 1000)) {
 26701  0000B6  503F               	movf	_ledFunctionality,w,c
 26702  0000B8  0A02               	xorlw	2
 26703  0000BA  A4D8               	btfss	status,2,c
 26704  0000BC  D001               	goto	i1u1693_21
 26705  0000BE  D001               	goto	i1u1693_20
 26706  0000C0                     i1u1693_21:
 26707  0000C0  D00C               	goto	i1l13003
 26708  0000C2                     i1u1693_20:
 26709  0000C2                     
 26710                           ; BSR set to: 0
 26711  0000C2  0EE9               	movlw	233
 26712  0000C4  5C39               	subwf	_status_led_cnt,w,c	;volatile
 26713  0000C6  0E03               	movlw	3
 26714  0000C8  583A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26715  0000CA  A0D8               	btfss	status,0,c
 26716  0000CC  D001               	goto	i1u1694_21
 26717  0000CE  D001               	goto	i1u1694_20
 26718  0000D0                     i1u1694_21:
 26719  0000D0  D004               	goto	i1l13003
 26720  0000D2                     i1u1694_20:
 26721  0000D2                     i1l13001:
 26722                           
 26723                           ; BSR set to: 0
 26724                           ;main.c: 166: LATC1 = ~LATC1;
 26725  0000D2  728B               	btg	3979,1,c	;volatile
 26726                           
 26727                           ;main.c: 167: status_led_cnt = 0;
 26728  0000D4  6A39               	clrf	_status_led_cnt,c	;volatile
 26729  0000D6  6A3A               	clrf	_status_led_cnt+1,c	;volatile
 26730                           
 26731                           ;main.c: 168: }
 26732  0000D8  D04D               	goto	i1l392
 26733  0000DA                     i1l13003:
 26734                           
 26735                           ; BSR set to: 0
 26736                           ;main.c: 169: else if ((3 == ledFunctionality) &&
 26737                           ;main.c: 170: (status_led_cnt > 400)) {
 26738  0000DA  503F               	movf	_ledFunctionality,w,c
 26739  0000DC  0A03               	xorlw	3
 26740  0000DE  A4D8               	btfss	status,2,c
 26741  0000E0  D001               	goto	i1u1695_21
 26742  0000E2  D001               	goto	i1u1695_20
 26743  0000E4                     i1u1695_21:
 26744  0000E4  D009               	goto	i1l13009
 26745  0000E6                     i1u1695_20:
 26746  0000E6                     
 26747                           ; BSR set to: 0
 26748  0000E6  0E91               	movlw	145
 26749  0000E8  5C39               	subwf	_status_led_cnt,w,c	;volatile
 26750  0000EA  0E01               	movlw	1
 26751  0000EC  583A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26752  0000EE  A0D8               	btfss	status,0,c
 26753  0000F0  D001               	goto	i1u1696_21
 26754  0000F2  D001               	goto	i1u1696_20
 26755  0000F4                     i1u1696_21:
 26756  0000F4  D001               	goto	i1l13009
 26757  0000F6                     i1u1696_20:
 26758  0000F6  D7ED               	goto	i1l13001
 26759  0000F8                     i1l13009:
 26760                           
 26761                           ; BSR set to: 0
 26762                           ;main.c: 174: else if ((4 == ledFunctionality) &&
 26763                           ;main.c: 175: (status_led_cnt > 100)) {
 26764  0000F8  503F               	movf	_ledFunctionality,w,c
 26765  0000FA  0A04               	xorlw	4
 26766  0000FC  A4D8               	btfss	status,2,c
 26767  0000FE  D001               	goto	i1u1697_21
 26768  000100  D001               	goto	i1u1697_20
 26769  000102                     i1u1697_21:
 26770  000102  D009               	goto	i1l13015
 26771  000104                     i1u1697_20:
 26772  000104                     
 26773                           ; BSR set to: 0
 26774  000104  0E65               	movlw	101
 26775  000106  5C39               	subwf	_status_led_cnt,w,c	;volatile
 26776  000108  0E00               	movlw	0
 26777  00010A  583A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26778  00010C  A0D8               	btfss	status,0,c
 26779  00010E  D001               	goto	i1u1698_21
 26780  000110  D001               	goto	i1u1698_20
 26781  000112                     i1u1698_21:
 26782  000112  D001               	goto	i1l13015
 26783  000114                     i1u1698_20:
 26784  000114  D7DE               	goto	i1l13001
 26785  000116                     i1l13015:
 26786                           
 26787                           ; BSR set to: 0
 26788                           ;main.c: 179: else if ((5 == ledFunctionality) &&
 26789                           ;main.c: 180: (status_led_cnt > 70)) {
 26790  000116  503F               	movf	_ledFunctionality,w,c
 26791  000118  0A05               	xorlw	5
 26792  00011A  A4D8               	btfss	status,2,c
 26793  00011C  D001               	goto	i1u1699_21
 26794  00011E  D001               	goto	i1u1699_20
 26795  000120                     i1u1699_21:
 26796  000120  D009               	goto	i1l13021
 26797  000122                     i1u1699_20:
 26798  000122                     
 26799                           ; BSR set to: 0
 26800  000122  0E47               	movlw	71
 26801  000124  5C39               	subwf	_status_led_cnt,w,c	;volatile
 26802  000126  0E00               	movlw	0
 26803  000128  583A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26804  00012A  A0D8               	btfss	status,0,c
 26805  00012C  D001               	goto	i1u1700_21
 26806  00012E  D001               	goto	i1u1700_20
 26807  000130                     i1u1700_21:
 26808  000130  D001               	goto	i1l13021
 26809  000132                     i1u1700_20:
 26810  000132  D7CF               	goto	i1l13001
 26811  000134                     i1l13021:
 26812                           
 26813                           ; BSR set to: 0
 26814                           ;main.c: 184: else if ((6 == ledFunctionality) &&
 26815                           ;main.c: 185: (status_led_cnt > 40)) {
 26816  000134  503F               	movf	_ledFunctionality,w,c
 26817  000136  0A06               	xorlw	6
 26818  000138  A4D8               	btfss	status,2,c
 26819  00013A  D001               	goto	i1u1701_21
 26820  00013C  D001               	goto	i1u1701_20
 26821  00013E                     i1u1701_21:
 26822  00013E  D009               	goto	i1l13027
 26823  000140                     i1u1701_20:
 26824  000140                     
 26825                           ; BSR set to: 0
 26826  000140  0E29               	movlw	41
 26827  000142  5C39               	subwf	_status_led_cnt,w,c	;volatile
 26828  000144  0E00               	movlw	0
 26829  000146  583A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26830  000148  A0D8               	btfss	status,0,c
 26831  00014A  D001               	goto	i1u1702_21
 26832  00014C  D001               	goto	i1u1702_20
 26833  00014E                     i1u1702_21:
 26834  00014E  D001               	goto	i1l13027
 26835  000150                     i1u1702_20:
 26836  000150  D7C0               	goto	i1l13001
 26837  000152                     i1l13027:
 26838                           
 26839                           ; BSR set to: 0
 26840                           ;main.c: 189: else if (1 == ledFunctionality) {
 26841  000152  043F               	decf	_ledFunctionality,w,c
 26842  000154  A4D8               	btfss	status,2,c
 26843  000156  D001               	goto	i1u1703_21
 26844  000158  D001               	goto	i1u1703_20
 26845  00015A                     i1u1703_21:
 26846  00015A  D004               	goto	i1l401
 26847  00015C                     i1u1703_20:
 26848  00015C                     
 26849                           ; BSR set to: 0
 26850                           ;main.c: 190: LATC1 = 1;
 26851  00015C  828B               	bsf	3979,1,c	;volatile
 26852                           
 26853                           ;main.c: 191: status_led_cnt = 0;
 26854  00015E  6A39               	clrf	_status_led_cnt,c	;volatile
 26855  000160  6A3A               	clrf	_status_led_cnt+1,c	;volatile
 26856                           
 26857                           ;main.c: 192: }
 26858  000162  D008               	goto	i1l392
 26859  000164                     i1l401:
 26860                           
 26861                           ; BSR set to: 0
 26862                           ;main.c: 193: else if (0 == ledFunctionality) {
 26863  000164  663F               	tstfsz	_ledFunctionality,c
 26864  000166  D001               	goto	i1u1704_21
 26865  000168  D001               	goto	i1u1704_20
 26866  00016A                     i1u1704_21:
 26867  00016A  D004               	goto	i1l398
 26868  00016C                     i1u1704_20:
 26869  00016C                     
 26870                           ; BSR set to: 0
 26871                           ;main.c: 194: LATC1 = 0;
 26872  00016C  928B               	bcf	3979,1,c	;volatile
 26873                           
 26874                           ;main.c: 195: status_led_cnt = 0;
 26875  00016E  6A39               	clrf	_status_led_cnt,c	;volatile
 26876  000170  6A3A               	clrf	_status_led_cnt+1,c	;volatile
 26877  000172  D000               	goto	i1l392
 26878  000174                     i1l398:
 26879  000174                     i1l392:
 26880                           
 26881                           ; BSR set to: 0
 26882                           ;main.c: 196: }
 26883                           ;main.c: 198: INTCONbits.TMR0IF = 0;
 26884  000174  94F2               	bcf	intcon,2,c	;volatile
 26885  000176                     i1l389:
 26886                           
 26887                           ;main.c: 199: }
 26888                           ;main.c: 202: if ( 1 == IRXIF ) {
 26889  000176  AEA4               	btfss	4004,7,c	;volatile
 26890  000178  D001               	goto	i1u1705_21
 26891  00017A  D001               	goto	i1u1705_20
 26892  00017C                     i1u1705_21:
 26893  00017C  D001               	goto	i1l404
 26894  00017E                     i1u1705_20:
 26895  00017E                     
 26896                           ;main.c: 204: IRXIF = 0;
 26897  00017E  9EA4               	bcf	4004,7,c	;volatile
 26898  000180                     i1l404:
 26899                           
 26900                           ;main.c: 205: }
 26901                           ;main.c: 208: if ( RXBnIF ) {
 26902  000180  A2A4               	btfss	4004,1,c	;volatile
 26903  000182  D001               	goto	i1u1706_21
 26904  000184  D001               	goto	i1u1706_20
 26905  000186                     i1u1706_21:
 26906  000186  D061               	goto	i1l413
 26907  000188                     i1u1706_20:
 26908  000188                     
 26909                           ;main.c: 210: uint32_t id;
 26910                           ;main.c: 211: uint8_t dlc;
 26911                           ;main.c: 212: uint8_t data[8];
 26912                           ;main.c: 213: ECAN_RX_MSG_FLAGS flags;
 26913                           ;main.c: 215: if ( ECANReceiveMessage((unsigned long *)&id,
 26914                           ;main.c: 216: (BYTE*)&data,
 26915                           ;main.c: 217: (BYTE*)&dlc,
 26916                           ;main.c: 218: &flags) ) {
 26917  000188  0E1C               	movlw	low Interrupt@data
 26918  00018A  6E08               	movwf	?_ECANReceiveMessage,c
 26919  00018C  0E25               	movlw	low Interrupt@dlc
 26920  00018E  6E09               	movwf	?_ECANReceiveMessage+1,c
 26921  000190  0E2A               	movlw	low Interrupt@flags
 26922  000192  6E0A               	movwf	?_ECANReceiveMessage+2,c
 26923  000194  0E26               	movlw	Interrupt@id& (0+255)
 26924  000196  EC4B  F013         	call	_ECANReceiveMessage
 26925  00019A  0900               	iorlw	0
 26926  00019C  B4D8               	btfsc	status,2,c
 26927  00019E  D001               	goto	i1u1707_21
 26928  0001A0  D001               	goto	i1u1707_20
 26929  0001A2                     i1u1707_21:
 26930  0001A2  D052               	goto	i1l13053
 26931  0001A4                     i1u1707_20:
 26932  0001A4                     
 26933                           ;main.c: 221: if ( flags & ECAN_RX_OVERFLOW ) {
 26934  0001A4  A62A               	btfss	Interrupt@flags,3,c
 26935  0001A6  D001               	goto	i1u1708_21
 26936  0001A8  D001               	goto	i1u1708_20
 26937  0001AA                     i1u1708_21:
 26938  0001AA  D00E               	goto	i1l407
 26939  0001AC                     i1u1708_20:
 26940  0001AC                     
 26941                           ;main.c: 222: if ( flags & ECAN_RX_XTD_FRAME ) can_receiveOverruns++;
 26942  0001AC  AA2A               	btfss	Interrupt@flags,5,c
 26943  0001AE  D001               	goto	i1u1709_21
 26944  0001B0  D001               	goto	i1u1709_20
 26945  0001B2                     i1u1709_21:
 26946  0001B2  D04A               	goto	i1l13053
 26947  0001B4                     i1u1709_20:
 26948  0001B4                     i1l13041:
 26949  0001B4  0E01               	movlw	1
 26950  0001B6  0100               	movlb	0	; () banked
 26951  0001B8  27D1               	addwf	_can_receiveOverruns& (0+255),f,b
 26952  0001BA  0E00               	movlw	0
 26953  0001BC  23D2               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 26954  0001BE  0E00               	movlw	0
 26955  0001C0  23D3               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 26956  0001C2  0E00               	movlw	0
 26957  0001C4  23D4               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 26958  0001C6  D040               	goto	i1l13053
 26959  0001C8                     i1l407:
 26960                           
 26961                           ;main.c: 224: else if ( !( flags & ECAN_RX_RTR_FRAME ) &&
 26962                           ;main.c: 225: ( flags & ECAN_RX_XTD_FRAME ) ) {
 26963  0001C8  BC2A               	btfsc	Interrupt@flags,6,c
 26964  0001CA  D001               	goto	i1u1710_21
 26965  0001CC  D001               	goto	i1u1710_20
 26966  0001CE                     i1u1710_21:
 26967  0001CE  D03C               	goto	i1l13053
 26968  0001D0                     i1u1710_20:
 26969  0001D0  AA2A               	btfss	Interrupt@flags,5,c
 26970  0001D2  D001               	goto	i1u1711_21
 26971  0001D4  D001               	goto	i1u1711_20
 26972  0001D6                     i1u1711_21:
 26973  0001D6  D038               	goto	i1l13053
 26974  0001D8                     i1u1711_20:
 26975  0001D8                     
 26976                           ;main.c: 227: if ( ( fifo_getFree( &canInputFifo ) >= (5+dlc) ) ) {
 26977  0001D8  5025               	movf	Interrupt@dlc,w,c
 26978  0001DA  6E13               	movwf	??_Interrupt& (0+255),c
 26979  0001DC  6A14               	clrf	(??_Interrupt+1)& (0+255),c
 26980  0001DE  0E05               	movlw	5
 26981  0001E0  2613               	addwf	??_Interrupt,f,c
 26982  0001E2  0E00               	movlw	0
 26983  0001E4  2214               	addwfc	??_Interrupt+1,f,c
 26984  0001E6  0E40               	movlw	_canInputFifo& (0+255)
 26985  0001E8  EC08  F024         	call	_fifo_getFree
 26986  0001EC  5013               	movf	??_Interrupt,w,c
 26987  0001EE  5C01               	subwf	?_fifo_getFree,w,c
 26988  0001F0  5014               	movf	??_Interrupt+1,w,c
 26989  0001F2  5802               	subwfb	?_fifo_getFree+1,w,c
 26990  0001F4  A0D8               	btfss	status,0,c
 26991  0001F6  D001               	goto	i1u1712_21
 26992  0001F8  D001               	goto	i1u1712_20
 26993  0001FA                     i1u1712_21:
 26994  0001FA  D7DC               	goto	i1l13041
 26995  0001FC                     i1u1712_20:
 26996  0001FC                     
 26997                           ;main.c: 228: fifo_write( &canInputFifo, (uint8_t *)&id, 4 );
 26998  0001FC  0E26               	movlw	low Interrupt@id
 26999  0001FE  6E01               	movwf	?_fifo_write,c
 27000  000200  0E04               	movlw	4
 27001  000202  6E02               	movwf	?_fifo_write+1,c
 27002  000204  0E00               	movlw	0
 27003  000206  6E03               	movwf	?_fifo_write+2,c
 27004  000208  0E00               	movlw	0
 27005  00020A  6E04               	movwf	?_fifo_write+3,c
 27006  00020C  0E00               	movlw	0
 27007  00020E  6E05               	movwf	?_fifo_write+4,c
 27008  000210  0E40               	movlw	_canInputFifo& (0+255)
 27009  000212  ECEB  F01B         	call	_fifo_write
 27010                           
 27011                           ;main.c: 229: fifo_write( &canInputFifo, &dlc, 1 );
 27012  000216  0E25               	movlw	low Interrupt@dlc
 27013  000218  6E01               	movwf	?_fifo_write,c
 27014  00021A  0E01               	movlw	1
 27015  00021C  6E02               	movwf	?_fifo_write+1,c
 27016  00021E  0E00               	movlw	0
 27017  000220  6E03               	movwf	?_fifo_write+2,c
 27018  000222  0E00               	movlw	0
 27019  000224  6E04               	movwf	?_fifo_write+3,c
 27020  000226  0E00               	movlw	0
 27021  000228  6E05               	movwf	?_fifo_write+4,c
 27022  00022A  0E40               	movlw	_canInputFifo& (0+255)
 27023  00022C  ECEB  F01B         	call	_fifo_write
 27024                           
 27025                           ;main.c: 230: fifo_write( &canInputFifo, (uint8_t *)&data, dlc );
 27026  000230  0E1C               	movlw	low Interrupt@data
 27027  000232  6E01               	movwf	?_fifo_write,c
 27028  000234  5025               	movf	Interrupt@dlc,w,c
 27029  000236  6E02               	movwf	?_fifo_write+1,c
 27030  000238  6A03               	clrf	?_fifo_write+2,c
 27031  00023A  6A04               	clrf	?_fifo_write+3,c
 27032  00023C  6A05               	clrf	?_fifo_write+4,c
 27033  00023E  0E40               	movlw	_canInputFifo& (0+255)
 27034  000240  ECEB  F01B         	call	_fifo_write
 27035  000244                     
 27036                           ;main.c: 232: canrxcount++;
 27037  000244  0100               	movlb	0	; () banked
 27038  000246  2BF0               	incf	_canrxcount& (0+255),f,b	;volatile
 27039  000248                     i1l13053:
 27040                           
 27041                           ;main.c: 236: }
 27042                           ;main.c: 238: }
 27043                           ;main.c: 240: }
 27044                           ;main.c: 243: RXBnIF = 0;
 27045  000248  92A4               	bcf	4004,1,c	;volatile
 27046  00024A                     i1l413:
 27047  00024A  C01B  FFDA         	movff	??_Interrupt+8,fsr2h
 27048  00024E  C01A  FFD9         	movff	??_Interrupt+7,fsr2l
 27049  000252  C019  FFE2         	movff	??_Interrupt+6,fsr1h
 27050  000256  C018  FFE1         	movff	??_Interrupt+5,fsr1l
 27051  00025A  C017  FFE0         	movff	??_Interrupt+4,bsr
 27052  00025E  C016  FFE8         	movff	??_Interrupt+3,wreg
 27053  000262  C015  FFD8         	movff	??_Interrupt+2,status
 27054  000266  0010               	retfie	
 27055  000268                     __end_of_Interrupt:
 27056                           	opt stack 0
 27057                           tblptru	equ	0xFF8
 27058                           tblptrh	equ	0xFF7
 27059                           tblptrl	equ	0xFF6
 27060                           tablat	equ	0xFF5
 27061                           prodh	equ	0xFF4
 27062                           prodl	equ	0xFF3
 27063                           intcon	equ	0xFF2
 27064                           indf0	equ	0xFEF
 27065                           postinc0	equ	0xFEE
 27066                           fsr0h	equ	0xFEA
 27067                           fsr0l	equ	0xFE9
 27068                           wreg	equ	0xFE8
 27069                           indf1	equ	0xFE7
 27070                           postinc1	equ	0xFE6
 27071                           postdec1	equ	0xFE5
 27072                           fsr1h	equ	0xFE2
 27073                           fsr1l	equ	0xFE1
 27074                           bsr	equ	0xFE0
 27075                           indf2	equ	0xFDF
 27076                           postinc2	equ	0xFDE
 27077                           postdec2	equ	0xFDD
 27078                           plusw2	equ	0xFDB
 27079                           fsr2h	equ	0xFDA
 27080                           fsr2l	equ	0xFD9
 27081                           status	equ	0xFD8
 27082                           
 27083 ;; *************** function i1_WriteTimer0 *****************
 27084 ;; Defined at:
 27085 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 27086 ;; Parameters:    Size  Location     Type
 27087 ;;  timer0          2    0[COMRAM] unsigned int 
 27088 ;; Auto vars:     Size  Location     Type
 27089 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 27090 ;; Return value:  Size  Location     Type
 27091 ;;		None               void
 27092 ;; Registers used:
 27093 ;;		None
 27094 ;; Tracked objects:
 27095 ;;		On entry : 0/0
 27096 ;;		On exit  : 0/0
 27097 ;;		Unchanged: 0/0
 27098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27099 ;;      Params:         2       0       0       0       0       0       0
 27100 ;;      Locals:         2       0       0       0       0       0       0
 27101 ;;      Temps:          0       0       0       0       0       0       0
 27102 ;;      Totals:         4       0       0       0       0       0       0
 27103 ;;Total ram usage:        4 bytes
 27104 ;; Hardware stack levels used:    1
 27105 ;; This function calls:
 27106 ;;		Nothing
 27107 ;; This function is called by:
 27108 ;;		_Interrupt
 27109 ;; This function uses a non-reentrant model
 27110 ;;
 27111                           
 27112                           	psect	text82
 27113  0057C2                     __ptext82:
 27114                           	opt stack 0
 27115  0057C2                     i1_WriteTimer0:
 27116                           	opt stack 21
 27117                           
 27118                           ;incstack = 0
 27119                           ;incstack = 0
 27120  0057C2  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 27121  0057C6  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 27122  0057CA  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 27123  0057CE  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 27124  0057D2  0012               	return	
 27125  0057D4                     __end_ofi1_WriteTimer0:
 27126                           	opt stack 0
 27127                           tblptru	equ	0xFF8
 27128                           tblptrh	equ	0xFF7
 27129                           tblptrl	equ	0xFF6
 27130                           tablat	equ	0xFF5
 27131                           prodh	equ	0xFF4
 27132                           prodl	equ	0xFF3
 27133                           intcon	equ	0xFF2
 27134                           indf0	equ	0xFEF
 27135                           postinc0	equ	0xFEE
 27136                           fsr0h	equ	0xFEA
 27137                           fsr0l	equ	0xFE9
 27138                           wreg	equ	0xFE8
 27139                           indf1	equ	0xFE7
 27140                           postinc1	equ	0xFE6
 27141                           postdec1	equ	0xFE5
 27142                           fsr1h	equ	0xFE2
 27143                           fsr1l	equ	0xFE1
 27144                           bsr	equ	0xFE0
 27145                           indf2	equ	0xFDF
 27146                           postinc2	equ	0xFDE
 27147                           postdec2	equ	0xFDD
 27148                           plusw2	equ	0xFDB
 27149                           fsr2h	equ	0xFDA
 27150                           fsr2l	equ	0xFD9
 27151                           status	equ	0xFD8
 27152                           
 27153 ;; *************** function _fifo_getFree *****************
 27154 ;; Defined at:
 27155 ;;		line 96 in file "fifo.c"
 27156 ;; Parameters:    Size  Location     Type
 27157 ;;  f               1    wreg     PTR struct .
 27158 ;;		 -> canInputFifo(8), 
 27159 ;; Auto vars:     Size  Location     Type
 27160 ;;  f               1   10[COMRAM] PTR struct .
 27161 ;;		 -> canInputFifo(8), 
 27162 ;; Return value:  Size  Location     Type
 27163 ;;                  2    0[COMRAM] unsigned short 
 27164 ;; Registers used:
 27165 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27166 ;; Tracked objects:
 27167 ;;		On entry : 0/0
 27168 ;;		On exit  : 0/0
 27169 ;;		Unchanged: 0/0
 27170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27171 ;;      Params:         2       0       0       0       0       0       0
 27172 ;;      Locals:         1       0       0       0       0       0       0
 27173 ;;      Temps:          8       0       0       0       0       0       0
 27174 ;;      Totals:        11       0       0       0       0       0       0
 27175 ;;Total ram usage:       11 bytes
 27176 ;; Hardware stack levels used:    1
 27177 ;; This function calls:
 27178 ;;		Nothing
 27179 ;; This function is called by:
 27180 ;;		_Interrupt
 27181 ;; This function uses a non-reentrant model
 27182 ;;
 27183                           
 27184                           	psect	text83
 27185  004810                     __ptext83:
 27186                           	opt stack 0
 27187  004810                     _fifo_getFree:
 27188                           	opt stack 21
 27189                           
 27190                           ;incstack = 0
 27191                           ;incstack = 0
 27192                           ;fifo_getFree@f stored from wreg
 27193  004810  CFE8 F00B          	movff	wreg,fifo_getFree@f
 27194                           
 27195                           ;fifo.c: 97: if (f->head < f->tail) {
 27196  004814  D83F               	call	PL66	;call to abstracted procedure
 27197  004816  500B               	movf	fifo_getFree@f,w,c
 27198  004818  6EE1               	movwf	fsr1l,c
 27199  00481A  6AE2               	clrf	fsr1h,c
 27200  00481C  0E02               	movlw	2
 27201  00481E  26E1               	addwf	fsr1l,f,c
 27202  004820  6AE2               	clrf	fsr1h,c
 27203  004822  52E6               	movf	postinc1,f,c
 27204  004824  52DE               	movf	postinc2,f,c
 27205  004826  50DD               	movf	postdec2,w,c
 27206  004828  5CE5               	subwf	postdec1,w,c
 27207  00482A  E102               	bnz	i1u615_25
 27208  00482C  50DF               	movf	indf2,w,c
 27209  00482E  5CE7               	subwf	indf1,w,c
 27210  004830                     i1u615_25:
 27211  004830  E210               	bc	i1l6333
 27212                           
 27213                           ;fifo.c: 98: return (f->tail - f->head);
 27214  004832  D837               	call	PL108	;call to abstracted procedure
 27215  004834  CFDE F003          	movff	postinc2,??_fifo_getFree
 27216  004838  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 27217  00483C  D82B               	call	PL66	;call to abstracted procedure
 27218  00483E  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 27219  004842  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 27220  004846  5003               	movf	??_fifo_getFree,w,c
 27221  004848  5C05               	subwf	??_fifo_getFree+2,w,c
 27222  00484A  6E01               	movwf	?_fifo_getFree,c
 27223  00484C  5004               	movf	??_fifo_getFree+1,w,c
 27224  00484E  5806               	subwfb	??_fifo_getFree+3,w,c
 27225  004850  D01F               	goto	L42
 27226  004852                     i1l6333:
 27227                           
 27228                           ;fifo.c: 100: else {
 27229                           ;fifo.c: 101: return (f->size + (f->tail - f->head));
 27230  004852  D820               	call	PL66	;call to abstracted procedure
 27231  004854  CFDE F003          	movff	postinc2,??_fifo_getFree
 27232  004858  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 27233  00485C  D822               	call	PL108	;call to abstracted procedure
 27234  00485E  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 27235  004862  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 27236  004866  500B               	movf	fifo_getFree@f,w,c
 27237  004868  6ED9               	movwf	fsr2l,c
 27238  00486A  6ADA               	clrf	fsr2h,c
 27239  00486C  0E06               	movlw	6
 27240  00486E  26D9               	addwf	fsr2l,f,c
 27241  004870  6ADA               	clrf	fsr2h,c
 27242  004872  CFDE F007          	movff	postinc2,??_fifo_getFree+4
 27243  004876  CFDD F008          	movff	postdec2,??_fifo_getFree+5
 27244  00487A  5005               	movf	??_fifo_getFree+2,w,c
 27245  00487C  5C07               	subwf	??_fifo_getFree+4,w,c
 27246  00487E  6E09               	movwf	(??_fifo_getFree+6)& (0+255),c
 27247  004880  5006               	movf	??_fifo_getFree+3,w,c
 27248  004882  5808               	subwfb	??_fifo_getFree+5,w,c
 27249  004884  6E0A               	movwf	(??_fifo_getFree+7)& (0+255),c
 27250  004886  5003               	movf	??_fifo_getFree,w,c
 27251  004888  2409               	addwf	??_fifo_getFree+6,w,c
 27252  00488A  6E01               	movwf	?_fifo_getFree,c
 27253  00488C  5004               	movf	??_fifo_getFree+1,w,c
 27254  00488E  200A               	addwfc	??_fifo_getFree+7,w,c
 27255  004890                     L42:
 27256  004890  6E02               	movwf	?_fifo_getFree+1,c
 27257  004892  0012               	return	
 27258  004894                     __end_of_fifo_getFree:
 27259                           	opt stack 0
 27260  004894                     PL66:
 27261                           	opt stack 21
 27262  004894  500B               	movf	fifo_getFree@f,w,c
 27263  004896  6ED9               	movwf	fsr2l,c
 27264  004898  6ADA               	clrf	fsr2h,c
 27265  00489A  0E04               	movlw	4
 27266  00489C  26D9               	addwf	fsr2l,f,c
 27267  00489E  6ADA               	clrf	fsr2h,c
 27268  0048A0  0012               	return	
 27269  0048A2                     __end_ofPL66:
 27270                           	opt stack 0
 27271  0048A2                     PL108:
 27272                           	opt stack 21
 27273  0048A2  500B               	movf	fifo_getFree@f,w,c
 27274  0048A4  6ED9               	movwf	fsr2l,c
 27275  0048A6  6ADA               	clrf	fsr2h,c
 27276  0048A8  0E02               	movlw	2
 27277  0048AA  26D9               	addwf	fsr2l,f,c
 27278  0048AC  6ADA               	clrf	fsr2h,c
 27279  0048AE  0012               	return	
 27280  0048B0                     __end_ofPL108:
 27281                           	opt stack 0
 27282                           tblptru	equ	0xFF8
 27283                           tblptrh	equ	0xFF7
 27284                           tblptrl	equ	0xFF6
 27285                           tablat	equ	0xFF5
 27286                           prodh	equ	0xFF4
 27287                           prodl	equ	0xFF3
 27288                           intcon	equ	0xFF2
 27289                           indf0	equ	0xFEF
 27290                           postinc0	equ	0xFEE
 27291                           fsr0h	equ	0xFEA
 27292                           fsr0l	equ	0xFE9
 27293                           wreg	equ	0xFE8
 27294                           indf1	equ	0xFE7
 27295                           postinc1	equ	0xFE6
 27296                           postdec1	equ	0xFE5
 27297                           fsr1h	equ	0xFE2
 27298                           fsr1l	equ	0xFE1
 27299                           bsr	equ	0xFE0
 27300                           indf2	equ	0xFDF
 27301                           postinc2	equ	0xFDE
 27302                           postdec2	equ	0xFDD
 27303                           plusw2	equ	0xFDB
 27304                           fsr2h	equ	0xFDA
 27305                           fsr2l	equ	0xFD9
 27306                           status	equ	0xFD8
 27307                           
 27308 ;; *************** function _ECANReceiveMessage *****************
 27309 ;; Defined at:
 27310 ;;		line 803 in file "ECAN.c"
 27311 ;; Parameters:    Size  Location     Type
 27312 ;;  id              1    wreg     PTR unsigned long 
 27313 ;;		 -> Interrupt@id(4), 
 27314 ;;  data            1    7[COMRAM] PTR unsigned char 
 27315 ;;		 -> Interrupt@data(8), 
 27316 ;;  dataLen         1    8[COMRAM] PTR unsigned char 
 27317 ;;		 -> Interrupt@dlc(1), 
 27318 ;;  msgFlags        1    9[COMRAM] PTR enum E16324
 27319 ;;		 -> Interrupt@flags(1), 
 27320 ;; Auto vars:     Size  Location     Type
 27321 ;;  id              1   12[COMRAM] PTR unsigned long 
 27322 ;;		 -> Interrupt@id(4), 
 27323 ;;  ptr             2   16[COMRAM] PTR unsigned char 
 27324 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27325 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27326 ;;  savedPtr        2   10[COMRAM] PTR unsigned char 
 27327 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27328 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27329 ;;  temp            1   15[COMRAM] struct .
 27330 ;;  mode            1   14[COMRAM] unsigned char 
 27331 ;;  i               1   13[COMRAM] unsigned char 
 27332 ;; Return value:  Size  Location     Type
 27333 ;;                  1    wreg      enum E15660
 27334 ;; Registers used:
 27335 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27336 ;; Tracked objects:
 27337 ;;		On entry : 0/0
 27338 ;;		On exit  : 0/0
 27339 ;;		Unchanged: 0/0
 27340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27341 ;;      Params:         3       0       0       0       0       0       0
 27342 ;;      Locals:         8       0       0       0       0       0       0
 27343 ;;      Temps:          0       0       0       0       0       0       0
 27344 ;;      Totals:        11       0       0       0       0       0       0
 27345 ;;Total ram usage:       11 bytes
 27346 ;; Hardware stack levels used:    1
 27347 ;; Hardware stack levels required when called:    1
 27348 ;; This function calls:
 27349 ;;		__ECANPointBuffer
 27350 ;;		__RegsToCANID
 27351 ;; This function is called by:
 27352 ;;		_Interrupt
 27353 ;; This function uses a non-reentrant model
 27354 ;;
 27355                           
 27356                           	psect	text84
 27357  002696                     __ptext84:
 27358                           	opt stack 0
 27359  002696                     _ECANReceiveMessage:
 27360                           	opt stack 20
 27361                           
 27362                           ;incstack = 0
 27363                           ;incstack = 0
 27364                           ;ECANReceiveMessage@id stored from wreg
 27365  002696  CFE8 F00D          	movff	wreg,ECANReceiveMessage@id
 27366                           
 27367                           ;ECAN.c: 805: BYTE mode;
 27368                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 27369                           ;ECAN.c: 809: char i;
 27370                           ;ECAN.c: 810: BYTE_VAL temp;
 27371                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 27372  00269A  6A3E               	clrf	__ECANRxFilterHitInfo,c
 27373                           
 27374                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 27375  00269C  5077               	movf	3959,w,c	;volatile
 27376  00269E  0BC0               	andlw	192
 27377  0026A0  6E0F               	movwf	ECANReceiveMessage@mode,c
 27378                           
 27379                           ;ECAN.c: 816: if ( mode == 0x00 )
 27380  0026A2  660F               	tstfsz	ECANReceiveMessage@mode,c
 27381  0026A4  D032               	goto	i1l9595
 27382                           
 27383                           ;ECAN.c: 822: {
 27384                           ;ECAN.c: 824: if ( RXB0FUL )
 27385  0026A6  AE60               	btfss	3936,7,c	;volatile
 27386  0026A8  D012               	goto	i1l1439
 27387                           
 27388                           ;ECAN.c: 825: {
 27389                           ;ECAN.c: 827: RXB0IF = 0;
 27390  0026AA  90A4               	bcf	4004,0,c	;volatile
 27391                           
 27392                           ;ECAN.c: 830: if ( RXB0OVFL )
 27393  0026AC  AE74               	btfss	3956,7,c	;volatile
 27394  0026AE  D006               	goto	i1l9571
 27395                           
 27396                           ;ECAN.c: 831: {
 27397                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 27398  0026B0  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27399  0026B2  6ED9               	movwf	fsr2l,c
 27400  0026B4  6ADA               	clrf	fsr2h,c
 27401  0026B6  0E00               	movlw	0
 27402  0026B8  86DB               	bsf	plusw2,3,c
 27403                           
 27404                           ;ECAN.c: 833: RXB0OVFL = 0;
 27405  0026BA  9E74               	bcf	3956,7,c	;volatile
 27406  0026BC                     i1l9571:
 27407                           
 27408                           ;ECAN.c: 834: }
 27409                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 27410  0026BC  A060               	btfss	3936,0,c	;volatile
 27411  0026BE  D002               	bra	i1u1132_25
 27412  0026C0  803E               	bsf	__ECANRxFilterHitInfo,0,c
 27413  0026C2  D001               	bra	i1u1132_27
 27414  0026C4                     i1u1132_25:
 27415  0026C4  903E               	bcf	__ECANRxFilterHitInfo,0,c
 27416  0026C6                     i1u1132_27:
 27417                           
 27418                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 27419  0026C6  0E0F               	movlw	15	;volatile
 27420  0026C8  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27421  0026CA  0E60               	movlw	96	;volatile
 27422  0026CC  D01A               	goto	L43
 27423  0026CE                     i1l1439:
 27424                           
 27425                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 27426  0026CE  010F               	movlb	15	; () banked
 27427  0026D0  AF50               	btfss	80,7,b	;volatile
 27428  0026D2  D019               	goto	i1l9589
 27429                           
 27430                           ; BSR set to: 15
 27431                           ;ECAN.c: 842: {
 27432                           ;ECAN.c: 844: RXB1IF = 0;
 27433  0026D4  92A4               	bcf	4004,1,c	;volatile
 27434                           
 27435                           ;ECAN.c: 847: if ( RXB1OVFL )
 27436  0026D6  AC74               	btfss	3956,6,c	;volatile
 27437  0026D8  D006               	goto	i1l9581
 27438                           
 27439                           ; BSR set to: 15
 27440                           ;ECAN.c: 848: {
 27441                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 27442  0026DA  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27443  0026DC  6ED9               	movwf	fsr2l,c
 27444  0026DE  6ADA               	clrf	fsr2h,c
 27445  0026E0  0E00               	movlw	0
 27446  0026E2  86DB               	bsf	plusw2,3,c
 27447                           
 27448                           ; BSR set to: 15
 27449                           ;ECAN.c: 850: RXB1OVFL = 0;
 27450  0026E4  9C74               	bcf	3956,6,c	;volatile
 27451  0026E6                     i1l9581:
 27452                           
 27453                           ; BSR set to: 15
 27454                           ;ECAN.c: 851: }
 27455                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 27456  0026E6  5150               	movf	80,w,b	;volatile
 27457  0026E8  0B07               	andlw	7
 27458  0026EA  6E3E               	movwf	__ECANRxFilterHitInfo,c
 27459                           
 27460                           ; BSR set to: 15
 27461                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 27462  0026EC  0E02               	movlw	2
 27463  0026EE  603E               	cpfslt	__ECANRxFilterHitInfo,c
 27464  0026F0  D005               	goto	i1l9587
 27465                           
 27466                           ; BSR set to: 15
 27467                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 27468  0026F2  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27469  0026F4  6ED9               	movwf	fsr2l,c
 27470  0026F6  6ADA               	clrf	fsr2h,c
 27471  0026F8  0E00               	movlw	0
 27472  0026FA  8EDB               	bsf	plusw2,7,c
 27473  0026FC                     i1l9587:
 27474                           
 27475                           ; BSR set to: 15
 27476                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 27477  0026FC  0E0F               	movlw	15	;volatile
 27478  0026FE  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27479  002700  0E50               	movlw	80	;volatile
 27480  002702                     L43:
 27481  002702  6E11               	movwf	ECANReceiveMessage@ptr,c
 27482                           
 27483                           ;ECAN.c: 860: }
 27484  002704  D065               	goto	i1l9649
 27485  002706                     i1l9589:
 27486                           
 27487                           ;ECAN.c: 861: else
 27488                           ;ECAN.c: 862: return FALSE;
 27489  002706  0E00               	movlw	0
 27490  002708  D0C2               	goto	i1l1446
 27491  00270A                     i1l9595:
 27492                           
 27493                           ;ECAN.c: 869: else if ( mode == 0x40 )
 27494  00270A  500F               	movf	ECANReceiveMessage@mode,w,c
 27495  00270C  0A40               	xorlw	64
 27496  00270E  E146               	bnz	i1l1449
 27497                           
 27498                           ;ECAN.c: 875: {
 27499                           ;ECAN.c: 876: if ( RXB0FUL )
 27500  002710  AE60               	btfss	3936,7,c	;volatile
 27501  002712  D004               	goto	i1l1450
 27502                           
 27503                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 27504  002714  0E0F               	movlw	15	;volatile
 27505  002716  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27506  002718  0E60               	movlw	96	;volatile
 27507  00271A  D03E               	goto	L50
 27508  00271C                     i1l1450:
 27509                           
 27510                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 27511  00271C  010F               	movlb	15	; () banked
 27512  00271E  AF50               	btfss	80,7,b	;volatile
 27513  002720  D004               	goto	i1l1452
 27514                           
 27515                           ; BSR set to: 15
 27516                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 27517  002722  0E0F               	movlw	15	;volatile
 27518  002724  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27519  002726  0E50               	movlw	80	;volatile
 27520  002728  D037               	goto	L50
 27521  00272A                     i1l1452:
 27522                           
 27523                           ; BSR set to: 15
 27524                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 27525  00272A  010D               	movlb	13
 27526  00272C  B5F8               	btfsc	248,2,b	;volatile
 27527  00272E  D007               	goto	i1l1454
 27528  002730  010E               	movlb	14
 27529  002732  AF20               	btfss	32,7,b	;volatile
 27530  002734  D004               	goto	i1l1454
 27531                           
 27532                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 27533  002736  0E0E               	movlw	14	;volatile
 27534  002738  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27535  00273A  0E20               	movlw	32	;volatile
 27536  00273C  D02D               	goto	L50
 27537  00273E                     i1l1454:
 27538                           
 27539                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 27540  00273E  010D               	movlb	13
 27541  002740  B7F8               	btfsc	248,3,b	;volatile
 27542  002742  D007               	goto	i1l1456
 27543  002744  010E               	movlb	14
 27544  002746  AF30               	btfss	48,7,b	;volatile
 27545  002748  D004               	goto	i1l1456
 27546                           
 27547                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 27548  00274A  0E0E               	movlw	14	;volatile
 27549  00274C  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27550  00274E  0E30               	movlw	48	;volatile
 27551  002750  D023               	goto	L50
 27552  002752                     i1l1456:
 27553                           
 27554                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 27555  002752  010D               	movlb	13
 27556  002754  B9F8               	btfsc	248,4,b	;volatile
 27557  002756  D007               	goto	i1l1458
 27558  002758  010E               	movlb	14
 27559  00275A  AF40               	btfss	64,7,b	;volatile
 27560  00275C  D004               	goto	i1l1458
 27561                           
 27562                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 27563  00275E  0E0E               	movlw	14	;volatile
 27564  002760  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27565  002762  0E40               	movlw	64	;volatile
 27566  002764  D019               	goto	L50
 27567  002766                     i1l1458:
 27568                           
 27569                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 27570  002766  010D               	movlb	13
 27571  002768  BBF8               	btfsc	248,5,b	;volatile
 27572  00276A  D005               	goto	i1l1460
 27573  00276C  010E               	movlb	14
 27574  00276E  AF50               	btfss	80,7,b	;volatile
 27575  002770  D002               	goto	i1l1460
 27576                           
 27577                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 27578  002772  0E0E               	movlw	14	;volatile
 27579  002774  D7D7               	goto	L51
 27580  002776                     i1l1460:
 27581                           
 27582                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 27583  002776  010D               	movlb	13
 27584  002778  BDF8               	btfsc	248,6,b	;volatile
 27585  00277A  D005               	goto	i1l1462
 27586  00277C  010E               	movlb	14
 27587  00277E  AF60               	btfss	96,7,b	;volatile
 27588  002780  D002               	goto	i1l1462
 27589                           
 27590                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 27591  002782  0E0E               	movlw	14	;volatile
 27592  002784  D7C8               	goto	L52
 27593  002786                     i1l1462:
 27594                           
 27595                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 27596  002786  010D               	movlb	13
 27597  002788  BFF8               	btfsc	248,7,b	;volatile
 27598  00278A  D7BD               	goto	i1l9589
 27599  00278C  010E               	movlb	14
 27600  00278E  AF70               	btfss	112,7,b	;volatile
 27601  002790  D7BA               	goto	i1l9589
 27602                           
 27603                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 27604  002792  0E0E               	movlw	14	;volatile
 27605  002794  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27606  002796  0E70               	movlw	112	;volatile
 27607  002798                     L50:
 27608  002798  6E11               	movwf	ECANReceiveMessage@ptr,c
 27609  00279A  D00A               	goto	i1l9639
 27610  00279C                     i1l1449:
 27611                           
 27612                           ;ECAN.c: 910: else
 27613                           ;ECAN.c: 915: {
 27614                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 27615  00279C  AE74               	btfss	3956,7,c	;volatile
 27616  00279E  D7B3               	goto	i1l9589
 27617                           
 27618                           ;ECAN.c: 919: {
 27619                           ;ECAN.c: 920: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 27620  0027A0  506F               	movf	3951,w,c	;volatile
 27621  0027A2  0B07               	andlw	7
 27622  0027A4  EC36  F027         	call	__ECANPointBuffer
 27623  0027A8  C001  F011         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 27624  0027AC  C002  F012         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 27625  0027B0                     i1l9639:
 27626                           
 27627                           ;ECAN.c: 932: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 27628  0027B0  C011  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 27629  0027B4  C012  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 27630  0027B8  50DF               	movf	indf2,w,c
 27631  0027BA  0B1F               	andlw	31
 27632  0027BC  6E3E               	movwf	__ECANRxFilterHitInfo,c
 27633                           
 27634                           ;ECAN.c: 934: RXB1IF = 0;
 27635  0027BE  92A4               	bcf	4004,1,c	;volatile
 27636                           
 27637                           ;ECAN.c: 936: if ( RXB1OVFL )
 27638  0027C0  AC74               	btfss	3956,6,c	;volatile
 27639  0027C2  D006               	goto	i1l9649
 27640                           
 27641                           ;ECAN.c: 937: {
 27642                           ;ECAN.c: 938: *msgFlags |= ECAN_RX_OVERFLOW;
 27643  0027C4  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27644  0027C6  6ED9               	movwf	fsr2l,c
 27645  0027C8  6ADA               	clrf	fsr2h,c
 27646  0027CA  0E00               	movlw	0
 27647  0027CC  86DB               	bsf	plusw2,3,c
 27648                           
 27649                           ;ECAN.c: 939: RXB1OVFL = 0;
 27650  0027CE  9C74               	bcf	3956,6,c	;volatile
 27651  0027D0                     i1l9649:
 27652                           
 27653                           ;ECAN.c: 944: savedPtr = ptr;
 27654  0027D0  C011  F00B         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 27655  0027D4  C012  F00C         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 27656                           
 27657                           ;ECAN.c: 945: *msgFlags = 0;
 27658  0027D8  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27659  0027DA  6ED9               	movwf	fsr2l,c
 27660  0027DC  6ADA               	clrf	fsr2h,c
 27661  0027DE  6ADF               	clrf	indf2,c
 27662                           
 27663                           ;ECAN.c: 948: temp.Val = *(ptr+5);
 27664  0027E0  EE20 F005          	lfsr	2,5
 27665  0027E4  D855               	call	PL106	;call to abstracted procedure
 27666                           
 27667                           ;ECAN.c: 949: *dataLen = temp.Val & 0b00001111;
 27668  0027E6  5009               	movf	ECANReceiveMessage@dataLen,w,c
 27669  0027E8  6ED9               	movwf	fsr2l,c
 27670  0027EA  6ADA               	clrf	fsr2h,c
 27671  0027EC  5010               	movf	ECANReceiveMessage@temp,w,c
 27672  0027EE  0B0F               	andlw	15
 27673  0027F0  6EDF               	movwf	indf2,c
 27674                           
 27675                           ;ECAN.c: 952: if ( temp.bits.b6 )
 27676  0027F2  AC10               	btfss	ECANReceiveMessage@temp,6,c
 27677  0027F4  D005               	goto	i1l1470
 27678                           
 27679                           ;ECAN.c: 953: *msgFlags |= ECAN_RX_RTR_FRAME;
 27680  0027F6  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27681  0027F8  6ED9               	movwf	fsr2l,c
 27682  0027FA  6ADA               	clrf	fsr2h,c
 27683  0027FC  0E00               	movlw	0
 27684  0027FE  8CDB               	bsf	plusw2,6,c
 27685  002800                     i1l1470:
 27686                           
 27687                           ;ECAN.c: 956: temp.Val = *(ptr+2);
 27688  002800  EE20 F002          	lfsr	2,2
 27689  002804  D845               	call	PL106	;call to abstracted procedure
 27690                           
 27691                           ;ECAN.c: 957: if ( temp.bits.b3 )
 27692  002806  A610               	btfss	ECANReceiveMessage@temp,3,c
 27693  002808  D008               	goto	i1l1471
 27694                           
 27695                           ;ECAN.c: 958: {
 27696                           ;ECAN.c: 959: *msgFlags |= ECAN_RX_XTD_FRAME;
 27697  00280A  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27698  00280C  6ED9               	movwf	fsr2l,c
 27699  00280E  6ADA               	clrf	fsr2h,c
 27700  002810  0E00               	movlw	0
 27701  002812  8ADB               	bsf	plusw2,5,c
 27702                           
 27703                           ;ECAN.c: 960: temp.Val = 1;
 27704  002814  0E01               	movlw	1
 27705  002816  6E10               	movwf	ECANReceiveMessage@temp,c
 27706                           
 27707                           ;ECAN.c: 961: }
 27708  002818  D001               	goto	i1l9667
 27709  00281A                     i1l1471:
 27710                           
 27711                           ;ECAN.c: 962: else
 27712                           ;ECAN.c: 963: temp.Val = 0;
 27713  00281A  6A10               	clrf	ECANReceiveMessage@temp,c
 27714  00281C                     i1l9667:
 27715                           
 27716                           ;ECAN.c: 965: _RegsToCANID(ptr+1, id, temp.Val);
 27717  00281C  2811               	incf	ECANReceiveMessage@ptr,w,c
 27718  00281E  6E01               	movwf	?__RegsToCANID,c
 27719  002820  0E00               	movlw	0
 27720  002822  2012               	addwfc	ECANReceiveMessage@ptr+1,w,c
 27721  002824  6E02               	movwf	?__RegsToCANID+1,c
 27722  002826  C00D  F003         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 27723  00282A  C010  F004         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 27724  00282E  EC5C  F01B         	call	__RegsToCANID	;wreg free
 27725                           
 27726                           ;ECAN.c: 968: ptr += 6;
 27727  002832  0E06               	movlw	6
 27728  002834  2611               	addwf	ECANReceiveMessage@ptr,f,c
 27729  002836  0E00               	movlw	0
 27730  002838  2212               	addwfc	ECANReceiveMessage@ptr+1,f,c
 27731                           
 27732                           ;ECAN.c: 969: temp.Val = *dataLen;
 27733  00283A  5009               	movf	ECANReceiveMessage@dataLen,w,c
 27734  00283C  6ED9               	movwf	fsr2l,c
 27735  00283E  6ADA               	clrf	fsr2h,c
 27736  002840  50DF               	movf	indf2,w,c
 27737  002842  6E10               	movwf	ECANReceiveMessage@temp,c
 27738                           
 27739                           ;ECAN.c: 970: for ( i = 0; i < temp.Val; i++ )
 27740  002844  6A0E               	clrf	ECANReceiveMessage@i,c
 27741  002846  D00D               	goto	i1l9683
 27742  002848                     i1l9675:
 27743                           
 27744                           ;ECAN.c: 971: *data++ = *ptr++;
 27745  002848  C011  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 27746  00284C  C012  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 27747  002850  5008               	movf	ECANReceiveMessage@data,w,c
 27748  002852  6EE1               	movwf	fsr1l,c
 27749  002854  6AE2               	clrf	fsr1h,c
 27750  002856  CFDF FFE7          	movff	indf2,indf1
 27751  00285A  4A11               	infsnz	ECANReceiveMessage@ptr,f,c
 27752  00285C  2A12               	incf	ECANReceiveMessage@ptr+1,f,c
 27753  00285E  2A08               	incf	ECANReceiveMessage@data,f,c
 27754  002860  2A0E               	incf	ECANReceiveMessage@i,f,c
 27755  002862                     i1l9683:
 27756  002862  5010               	movf	ECANReceiveMessage@temp,w,c
 27757  002864  5C0E               	subwf	ECANReceiveMessage@i,w,c
 27758  002866  E3F0               	bnc	i1l9675
 27759                           
 27760                           ;ECAN.c: 974: if ( IRXIF )
 27761  002868  AEA4               	btfss	4004,7,c	;volatile
 27762  00286A  D006               	goto	i1l9689
 27763                           
 27764                           ;ECAN.c: 975: {
 27765                           ;ECAN.c: 976: *msgFlags |= ECAN_RX_INVALID_MSG;
 27766  00286C  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27767  00286E  6ED9               	movwf	fsr2l,c
 27768  002870  6ADA               	clrf	fsr2h,c
 27769  002872  0E00               	movlw	0
 27770  002874  88DB               	bsf	plusw2,4,c
 27771                           
 27772                           ;ECAN.c: 977: IRXIF = 0;
 27773  002876  9EA4               	bcf	4004,7,c	;volatile
 27774  002878                     i1l9689:
 27775                           
 27776                           ;ECAN.c: 978: }
 27777                           ;ECAN.c: 981: *savedPtr &= 0x7f;
 27778  002878  C00B  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 27779  00287C  C00C  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 27780  002880  0E7F               	movlw	127
 27781  002882  16DF               	andwf	indf2,f,c
 27782                           
 27783                           ;ECAN.c: 985: if ( mode == 0x80 )
 27784  002884  500F               	movf	ECANReceiveMessage@mode,w,c
 27785  002886  0A80               	xorlw	128
 27786  002888  B4D8               	btfsc	status,2,c
 27787                           
 27788                           ;ECAN.c: 986: FIFOEMPTY = 0;
 27789  00288A  9E74               	bcf	3956,7,c	;volatile
 27790                           
 27791                           ;ECAN.c: 992: return TRUE;
 27792  00288C  0E01               	movlw	1
 27793  00288E                     i1l1446:
 27794  00288E  0012               	return	
 27795  002890                     __end_of_ECANReceiveMessage:
 27796                           	opt stack 0
 27797  002890                     PL106:
 27798                           	opt stack 20
 27799  002890  5011               	movf	ECANReceiveMessage@ptr,w,c
 27800  002892  26D9               	addwf	fsr2l,f,c
 27801  002894  5012               	movf	ECANReceiveMessage@ptr+1,w,c
 27802  002896  22DA               	addwfc	fsr2h,f,c
 27803  002898  50DF               	movf	indf2,w,c
 27804  00289A  6E10               	movwf	ECANReceiveMessage@temp,c
 27805  00289C  0012               	return	
 27806  00289E                     __end_ofPL106:
 27807                           	opt stack 0
 27808                           tblptru	equ	0xFF8
 27809                           tblptrh	equ	0xFF7
 27810                           tblptrl	equ	0xFF6
 27811                           tablat	equ	0xFF5
 27812                           prodh	equ	0xFF4
 27813                           prodl	equ	0xFF3
 27814                           intcon	equ	0xFF2
 27815                           indf0	equ	0xFEF
 27816                           postinc0	equ	0xFEE
 27817                           fsr0h	equ	0xFEA
 27818                           fsr0l	equ	0xFE9
 27819                           wreg	equ	0xFE8
 27820                           indf1	equ	0xFE7
 27821                           postinc1	equ	0xFE6
 27822                           postdec1	equ	0xFE5
 27823                           fsr1h	equ	0xFE2
 27824                           fsr1l	equ	0xFE1
 27825                           bsr	equ	0xFE0
 27826                           indf2	equ	0xFDF
 27827                           postinc2	equ	0xFDE
 27828                           postdec2	equ	0xFDD
 27829                           plusw2	equ	0xFDB
 27830                           fsr2h	equ	0xFDA
 27831                           fsr2l	equ	0xFD9
 27832                           status	equ	0xFD8
 27833                           
 27834 ;; *************** function __RegsToCANID *****************
 27835 ;; Defined at:
 27836 ;;		line 1158 in file "ECAN.c"
 27837 ;; Parameters:    Size  Location     Type
 27838 ;;  ptr             2    0[COMRAM] PTR unsigned char 
 27839 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27840 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27841 ;;  val             1    2[COMRAM] PTR unsigned long 
 27842 ;;		 -> Interrupt@id(4), 
 27843 ;;  type            1    3[COMRAM] unsigned char 
 27844 ;; Auto vars:     Size  Location     Type
 27845 ;;  Value           1    6[COMRAM] PTR struct _CAN_MESSAGE_
 27846 ;;		 -> Interrupt@id(4), 
 27847 ;; Return value:  Size  Location     Type
 27848 ;;		None               void
 27849 ;; Registers used:
 27850 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27851 ;; Tracked objects:
 27852 ;;		On entry : 0/0
 27853 ;;		On exit  : 0/0
 27854 ;;		Unchanged: 0/0
 27855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27856 ;;      Params:         4       0       0       0       0       0       0
 27857 ;;      Locals:         1       0       0       0       0       0       0
 27858 ;;      Temps:          2       0       0       0       0       0       0
 27859 ;;      Totals:         7       0       0       0       0       0       0
 27860 ;;Total ram usage:        7 bytes
 27861 ;; Hardware stack levels used:    1
 27862 ;; This function calls:
 27863 ;;		Nothing
 27864 ;; This function is called by:
 27865 ;;		_ECANReceiveMessage
 27866 ;; This function uses a non-reentrant model
 27867 ;;
 27868                           
 27869                           	psect	text85
 27870  0036B8                     __ptext85:
 27871                           	opt stack 0
 27872  0036B8                     __RegsToCANID:
 27873                           	opt stack 20
 27874                           
 27875                           ;ECAN.c: 1159: CAN_MESSAGE_ID *Value;
 27876                           ;ECAN.c: 1161: Value = (CAN_MESSAGE_ID*)val;
 27877                           
 27878                           ;incstack = 0
 27879                           ;incstack = 0
 27880  0036B8  C003  F007         	movff	__RegsToCANID@val,__RegsToCANID@Value
 27881                           
 27882                           ;ECAN.c: 1163: if ( type == 0 )
 27883  0036BC  6604               	tstfsz	__RegsToCANID@type,c
 27884  0036BE  D02B               	goto	i1l9339
 27885                           
 27886                           ;ECAN.c: 1164: {
 27887                           ;ECAN.c: 1166: Value->BYTES.BYTE_1 = (*ptr << 3);
 27888  0036C0  5007               	movf	__RegsToCANID@Value,w,c
 27889  0036C2  6ED9               	movwf	fsr2l,c
 27890  0036C4  D862               	call	PL70	;call to abstracted procedure
 27891  0036C6  3605               	rlcf	??__RegsToCANID,f,c
 27892  0036C8  90D8               	bcf	status,0,c
 27893  0036CA  3605               	rlcf	??__RegsToCANID,f,c
 27894  0036CC  90D8               	bcf	status,0,c
 27895  0036CE  3405               	rlcf	??__RegsToCANID,w,c
 27896  0036D0  6EDF               	movwf	indf2,c
 27897                           
 27898                           ;ECAN.c: 1167: Value->BYTES.BYTE_2 = *ptr >> 5;
 27899  0036D2  5007               	movf	__RegsToCANID@Value,w,c
 27900  0036D4  6ED9               	movwf	fsr2l,c
 27901  0036D6  6ADA               	clrf	fsr2h,c
 27902  0036D8  2AD9               	incf	fsr2l,f,c
 27903  0036DA  6ADA               	clrf	fsr2h,c
 27904  0036DC  D873               	call	PL84	;call to abstracted procedure
 27905  0036DE                     i1u1092_25:
 27906  0036DE  90D8               	bcf	status,0,c
 27907  0036E0  3205               	rrcf	??__RegsToCANID,f,c
 27908  0036E2  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 27909  0036E4  D7FC               	goto	i1u1092_25
 27910  0036E6  5005               	movf	??__RegsToCANID,w,c
 27911                           
 27912                           ;ECAN.c: 1168: ptr++;
 27913                           
 27914                           ;ECAN.c: 1169: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 27915  0036E8  D859               	call	PL72	;call to abstracted procedure
 27916  0036EA  0E05               	movlw	5
 27917  0036EC  6E06               	movwf	(??__RegsToCANID+1)& (0+255),c
 27918  0036EE                     i1u1093_25:
 27919  0036EE  90D8               	bcf	status,0,c
 27920  0036F0  3205               	rrcf	??__RegsToCANID,f,c
 27921  0036F2  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 27922  0036F4  D7FC               	goto	i1u1093_25
 27923  0036F6  5007               	movf	__RegsToCANID@Value,w,c
 27924  0036F8  6ED9               	movwf	fsr2l,c
 27925  0036FA  6ADA               	clrf	fsr2h,c
 27926  0036FC  5005               	movf	??__RegsToCANID,w,c
 27927  0036FE  12DF               	iorwf	indf2,f,c
 27928                           
 27929                           ;ECAN.c: 1170: Value->BYTES.BYTE_3 = 0x00;
 27930  003700  D83D               	call	PL40	;call to abstracted procedure
 27931  003702  6ADF               	clrf	indf2,c
 27932                           
 27933                           ;ECAN.c: 1171: Value->BYTES.BYTE_4 = 0x00;
 27934  003704  5007               	movf	__RegsToCANID@Value,w,c
 27935  003706  6ED9               	movwf	fsr2l,c
 27936  003708  6ADA               	clrf	fsr2h,c
 27937  00370A  0E03               	movlw	3
 27938  00370C  26D9               	addwf	fsr2l,f,c
 27939  00370E  6ADA               	clrf	fsr2h,c
 27940  003710  0E00               	movlw	0
 27941  003712  6EDF               	movwf	indf2,c
 27942                           
 27943                           ;ECAN.c: 1172: }
 27944  003714  D032               	goto	i1l1493
 27945  003716                     i1l9339:
 27946                           
 27947                           ;ECAN.c: 1173: else
 27948                           ;ECAN.c: 1174: {
 27949                           ;ECAN.c: 1176: Value->BYTES.BYTE_3 = (*ptr << 5);
 27950  003716  D832               	call	PL40	;call to abstracted procedure
 27951  003718  D855               	call	PL84	;call to abstracted procedure
 27952  00371A                     i1u1094_25:
 27953  00371A  90D8               	bcf	status,0,c
 27954  00371C  3605               	rlcf	??__RegsToCANID,f,c
 27955  00371E  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 27956  003720  D7FC               	goto	i1u1094_25
 27957  003722  5005               	movf	??__RegsToCANID,w,c
 27958  003724  6EDF               	movwf	indf2,c
 27959                           
 27960                           ;ECAN.c: 1177: Value->BYTES.BYTE_4 = (*ptr >> 3);
 27961  003726  5007               	movf	__RegsToCANID@Value,w,c
 27962  003728  6ED9               	movwf	fsr2l,c
 27963  00372A  6ADA               	clrf	fsr2h,c
 27964  00372C  0E03               	movlw	3
 27965  00372E  26D9               	addwf	fsr2l,f,c
 27966  003730  D82C               	call	PL70	;call to abstracted procedure
 27967  003732  3205               	rrcf	??__RegsToCANID,f,c
 27968  003734  90D8               	bcf	status,0,c
 27969  003736  3205               	rrcf	??__RegsToCANID,f,c
 27970  003738  90D8               	bcf	status,0,c
 27971  00373A  3005               	rrcf	??__RegsToCANID,w,c
 27972                           
 27973                           ;ECAN.c: 1178: ptr++;
 27974                           
 27975                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 27976  00373C  D82F               	call	PL72	;call to abstracted procedure
 27977  00373E  0E03               	movlw	3
 27978  003740  1605               	andwf	??__RegsToCANID,f,c
 27979  003742  D81C               	call	PL40	;call to abstracted procedure
 27980  003744  5005               	movf	??__RegsToCANID,w,c
 27981  003746  12DF               	iorwf	indf2,f,c
 27982                           
 27983                           ;ECAN.c: 1181: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 27984  003748  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 27985  00374C  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 27986  003750  50DF               	movf	indf2,w,c
 27987  003752  6E05               	movwf	??__RegsToCANID& (0+255),c
 27988  003754  90D8               	bcf	status,0,c
 27989  003756  3205               	rrcf	??__RegsToCANID,f,c
 27990  003758  90D8               	bcf	status,0,c
 27991  00375A  3205               	rrcf	??__RegsToCANID,f,c
 27992  00375C  90D8               	bcf	status,0,c
 27993  00375E  3205               	rrcf	??__RegsToCANID,f,c
 27994  003760  0E1C               	movlw	28
 27995  003762  1605               	andwf	??__RegsToCANID,f,c
 27996  003764  D80B               	call	PL40	;call to abstracted procedure
 27997  003766  5005               	movf	??__RegsToCANID,w,c
 27998  003768  12DF               	iorwf	indf2,f,c
 27999                           
 28000                           ;ECAN.c: 1182: ptr++;
 28001                           
 28002                           ;ECAN.c: 1183: Value->BYTES.BYTE_2 = *ptr;
 28003  00376A  D822               	call	PL80	;call to abstracted procedure
 28004  00376C  2AE1               	incf	fsr1l,f,c
 28005  00376E  6AE2               	clrf	fsr1h,c
 28006  003770  CFDF FFE7          	movff	indf2,indf1
 28007                           
 28008                           ;ECAN.c: 1184: ptr++;
 28009                           
 28010                           ;ECAN.c: 1185: Value->BYTES.BYTE_1 = *ptr;
 28011  003774  D81D               	call	PL80	;call to abstracted procedure
 28012  003776  CFDF FFE7          	movff	indf2,indf1
 28013  00377A                     i1l1493:
 28014  00377A  0012               	return	
 28015  00377C                     __end_of__RegsToCANID:
 28016                           	opt stack 0
 28017  00377C                     PL40:
 28018                           	opt stack 20
 28019  00377C  5007               	movf	__RegsToCANID@Value,w,c
 28020  00377E  6ED9               	movwf	fsr2l,c
 28021  003780  6ADA               	clrf	fsr2h,c
 28022  003782  0E02               	movlw	2
 28023  003784  26D9               	addwf	fsr2l,f,c
 28024  003786  6ADA               	clrf	fsr2h,c
 28025  003788  0012               	return	
 28026  00378A                     __end_ofPL40:
 28027                           	opt stack 0
 28028  00378A                     PL70:
 28029                           	opt stack 20
 28030  00378A  6ADA               	clrf	fsr2h,c
 28031  00378C  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 28032  003790  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 28033  003794  50E7               	movf	indf1,w,c
 28034  003796  6E05               	movwf	??__RegsToCANID& (0+255),c
 28035  003798  90D8               	bcf	status,0,c
 28036  00379A  0012               	return	
 28037  00379C                     __end_ofPL70:
 28038                           	opt stack 0
 28039  00379C                     PL72:
 28040                           	opt stack 20
 28041  00379C  6EDF               	movwf	indf2,c
 28042  00379E  4A01               	infsnz	__RegsToCANID@ptr,f,c
 28043  0037A0  2A02               	incf	__RegsToCANID@ptr+1,f,c
 28044  0037A2  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28045  0037A6  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28046  0037AA  50DF               	movf	indf2,w,c
 28047  0037AC  6E05               	movwf	??__RegsToCANID& (0+255),c
 28048  0037AE  0012               	return	
 28049  0037B0                     __end_ofPL72:
 28050                           	opt stack 0
 28051  0037B0                     PL80:
 28052                           	opt stack 20
 28053  0037B0  4A01               	infsnz	__RegsToCANID@ptr,f,c
 28054  0037B2  2A02               	incf	__RegsToCANID@ptr+1,f,c
 28055  0037B4  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28056  0037B8  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28057  0037BC  5007               	movf	__RegsToCANID@Value,w,c
 28058  0037BE  6EE1               	movwf	fsr1l,c
 28059  0037C0  6AE2               	clrf	fsr1h,c
 28060  0037C2  0012               	return	
 28061  0037C4                     __end_ofPL80:
 28062                           	opt stack 0
 28063  0037C4                     PL84:
 28064                           	opt stack 20
 28065  0037C4  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 28066  0037C8  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 28067  0037CC  50E7               	movf	indf1,w,c
 28068  0037CE  6E05               	movwf	??__RegsToCANID& (0+255),c
 28069  0037D0  0E05               	movlw	5
 28070  0037D2  6E06               	movwf	(??__RegsToCANID+1)& (0+255),c
 28071  0037D4  0C05               	retlw	5
 28072  0037D6                     __end_ofPL84:
 28073                           	opt stack 0
 28074                           tblptru	equ	0xFF8
 28075                           tblptrh	equ	0xFF7
 28076                           tblptrl	equ	0xFF6
 28077                           tablat	equ	0xFF5
 28078                           prodh	equ	0xFF4
 28079                           prodl	equ	0xFF3
 28080                           intcon	equ	0xFF2
 28081                           indf0	equ	0xFEF
 28082                           postinc0	equ	0xFEE
 28083                           fsr0h	equ	0xFEA
 28084                           fsr0l	equ	0xFE9
 28085                           wreg	equ	0xFE8
 28086                           indf1	equ	0xFE7
 28087                           postinc1	equ	0xFE6
 28088                           postdec1	equ	0xFE5
 28089                           fsr1h	equ	0xFE2
 28090                           fsr1l	equ	0xFE1
 28091                           bsr	equ	0xFE0
 28092                           indf2	equ	0xFDF
 28093                           postinc2	equ	0xFDE
 28094                           postdec2	equ	0xFDD
 28095                           plusw2	equ	0xFDB
 28096                           fsr2h	equ	0xFDA
 28097                           fsr2l	equ	0xFD9
 28098                           status	equ	0xFD8
 28099                           
 28100 ;; *************** function __ECANPointBuffer *****************
 28101 ;; Defined at:
 28102 ;;		line 1209 in file "ECAN.c"
 28103 ;; Parameters:    Size  Location     Type
 28104 ;;  b               1    wreg     unsigned char 
 28105 ;; Auto vars:     Size  Location     Type
 28106 ;;  b               1    3[COMRAM] unsigned char 
 28107 ;;  pt              2    4[COMRAM] PTR unsigned char 
 28108 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28109 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28110 ;; Return value:  Size  Location     Type
 28111 ;;                  2    0[COMRAM] PTR unsigned char 
 28112 ;; Registers used:
 28113 ;;		wreg, status,2, status,0
 28114 ;; Tracked objects:
 28115 ;;		On entry : 0/0
 28116 ;;		On exit  : 0/0
 28117 ;;		Unchanged: 0/0
 28118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28119 ;;      Params:         3       0       0       0       0       0       0
 28120 ;;      Locals:         3       0       0       0       0       0       0
 28121 ;;      Temps:          0       0       0       0       0       0       0
 28122 ;;      Totals:         6       0       0       0       0       0       0
 28123 ;;Total ram usage:        6 bytes
 28124 ;; Hardware stack levels used:    1
 28125 ;; This function calls:
 28126 ;;		Nothing
 28127 ;; This function is called by:
 28128 ;;		_ECANReceiveMessage
 28129 ;; This function uses a non-reentrant model
 28130 ;;
 28131                           
 28132                           	psect	text86
 28133  004E6C                     __ptext86:
 28134                           	opt stack 0
 28135  004E6C                     __ECANPointBuffer:
 28136                           	opt stack 20
 28137                           
 28138                           ;incstack = 0
 28139                           ;incstack = 0
 28140                           ;__ECANPointBuffer@b stored from wreg
 28141  004E6C  CFE8 F004          	movff	wreg,__ECANPointBuffer@b
 28142                           
 28143                           ;ECAN.c: 1210: BYTE* pt;
 28144                           ;ECAN.c: 1212: switch(b)
 28145  004E70  D024               	goto	i1l9325
 28146  004E72                     i1l9307:
 28147                           
 28148                           ;ECAN.c: 1215: pt=(BYTE*)&RXB0CON;
 28149  004E72  0E0F               	movlw	15	;volatile
 28150  004E74  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28151  004E76  0E60               	movlw	96	;volatile
 28152  004E78  D01E               	goto	L59
 28153  004E7A                     i1l9309:
 28154                           
 28155                           ;ECAN.c: 1218: pt=(BYTE*)&RXB1CON;
 28156  004E7A  010F               	movlb	15	; () banked
 28157  004E7C  0E0F               	movlw	15	;volatile
 28158  004E7E  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28159  004E80  0E50               	movlw	80	;volatile
 28160  004E82  D019               	goto	L59
 28161  004E84                     i1l9311:
 28162                           
 28163                           ;ECAN.c: 1221: pt=(BYTE*)&B0CON;
 28164  004E84  010E               	movlb	14	; () banked
 28165  004E86  0E0E               	movlw	14	;volatile
 28166  004E88  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28167  004E8A  0E20               	movlw	32	;volatile
 28168  004E8C  D014               	goto	L59
 28169  004E8E                     i1l9313:
 28170                           
 28171                           ;ECAN.c: 1224: pt=(BYTE*)&B1CON;
 28172  004E8E  010E               	movlb	14	; () banked
 28173  004E90  0E0E               	movlw	14	;volatile
 28174  004E92  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28175  004E94  0E30               	movlw	48	;volatile
 28176  004E96  D00F               	goto	L59
 28177  004E98                     i1l9315:
 28178                           
 28179                           ;ECAN.c: 1227: pt=(BYTE*)&B2CON;
 28180  004E98  010E               	movlb	14	; () banked
 28181  004E9A  0E0E               	movlw	14	;volatile
 28182  004E9C  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28183  004E9E  0E40               	movlw	64	;volatile
 28184  004EA0  D00A               	goto	L59
 28185  004EA2                     i1l9317:
 28186                           
 28187                           ;ECAN.c: 1230: pt=(BYTE*)&B3CON;
 28188  004EA2  010E               	movlb	14	; () banked
 28189  004EA4  0E0E               	movlw	14	;volatile
 28190  004EA6  D7EB               	goto	L60
 28191  004EA8                     i1l9319:
 28192                           
 28193                           ;ECAN.c: 1233: pt=(BYTE*)&B4CON;
 28194  004EA8  010E               	movlb	14	; () banked
 28195  004EAA  0E0E               	movlw	14	;volatile
 28196  004EAC  D7E3               	goto	L61
 28197  004EAE                     i1l9321:
 28198                           
 28199                           ;ECAN.c: 1236: pt=(BYTE*)&B5CON;
 28200  004EAE  010E               	movlb	14	; () banked
 28201  004EB0  0E0E               	movlw	14	;volatile
 28202  004EB2  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28203  004EB4  0E70               	movlw	112	;volatile
 28204  004EB6                     L59:
 28205  004EB6  6E05               	movwf	__ECANPointBuffer@pt,c
 28206                           
 28207                           ;ECAN.c: 1237: break;
 28208  004EB8  D00F               	goto	i1l1498
 28209  004EBA                     i1l9325:
 28210  004EBA  5004               	movf	__ECANPointBuffer@b,w,c
 28211                           
 28212                           ; Switch size 1, requested type "space"
 28213                           ; Number of cases is 7, Range of values is 0 to 6
 28214                           ; switch strategies available:
 28215                           ; Name         Instructions Cycles
 28216                           ; simple_byte           22    12 (average)
 28217                           ;	Chosen strategy is simple_byte
 28218  004EBC  E0DA               	bz	i1l9307
 28219  004EBE  0A01               	xorlw	1	; case 1
 28220  004EC0  E0DC               	bz	i1l9309
 28221  004EC2  0A03               	xorlw	3	; case 2
 28222  004EC4  E0DF               	bz	i1l9311
 28223  004EC6  0A01               	xorlw	1	; case 3
 28224  004EC8  E0E2               	bz	i1l9313
 28225  004ECA  0A07               	xorlw	7	; case 4
 28226  004ECC  E0E5               	bz	i1l9315
 28227  004ECE  0A01               	xorlw	1	; case 5
 28228  004ED0  E0E8               	bz	i1l9317
 28229  004ED2  0A03               	xorlw	3	; case 6
 28230  004ED4  E0E9               	bz	i1l9319
 28231  004ED6  D7EB               	goto	i1l9321
 28232  004ED8                     i1l1498:
 28233                           
 28234                           ;ECAN.c: 1239: return (pt);
 28235  004ED8  C005  F001         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 28236  004EDC  C006  F002         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 28237  004EE0  0012               	return	
 28238  004EE2                     __end_of__ECANPointBuffer:
 28239                           	opt stack 0
 28240                           tblptru	equ	0xFF8
 28241                           tblptrh	equ	0xFF7
 28242                           tblptrl	equ	0xFF6
 28243                           tablat	equ	0xFF5
 28244                           prodh	equ	0xFF4
 28245                           prodl	equ	0xFF3
 28246                           intcon	equ	0xFF2
 28247                           indf0	equ	0xFEF
 28248                           postinc0	equ	0xFEE
 28249                           fsr0h	equ	0xFEA
 28250                           fsr0l	equ	0xFE9
 28251                           wreg	equ	0xFE8
 28252                           indf1	equ	0xFE7
 28253                           postinc1	equ	0xFE6
 28254                           postdec1	equ	0xFE5
 28255                           fsr1h	equ	0xFE2
 28256                           fsr1l	equ	0xFE1
 28257                           bsr	equ	0xFE0
 28258                           indf2	equ	0xFDF
 28259                           postinc2	equ	0xFDE
 28260                           postdec2	equ	0xFDD
 28261                           plusw2	equ	0xFDB
 28262                           fsr2h	equ	0xFDA
 28263                           fsr2l	equ	0xFD9
 28264                           status	equ	0xFD8
 28265                           
 28266 ;; *************** function _fifo_write *****************
 28267 ;; Defined at:
 28268 ;;		line 61 in file "fifo.c"
 28269 ;; Parameters:    Size  Location     Type
 28270 ;;  f               1    wreg     PTR struct .
 28271 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 28272 ;;  buf             1    0[COMRAM] PTR const void 
 28273 ;;		 -> Interrupt@dlc(1), Interrupt@data(8), Interrupt@id(4), Interrupt@c(1), 
 28274 ;;  nbytes          4    1[COMRAM] unsigned long 
 28275 ;; Auto vars:     Size  Location     Type
 28276 ;;  f               1   14[COMRAM] PTR struct .
 28277 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 28278 ;;  i               4   10[COMRAM] unsigned long 
 28279 ;;  p               1    9[COMRAM] PTR const unsigned char 
 28280 ;;		 -> Interrupt@dlc(1), Interrupt@data(8), Interrupt@id(4), Interrupt@c(1), 
 28281 ;; Return value:  Size  Location     Type
 28282 ;;                  2    0[COMRAM] unsigned short 
 28283 ;; Registers used:
 28284 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28285 ;; Tracked objects:
 28286 ;;		On entry : 0/0
 28287 ;;		On exit  : 0/0
 28288 ;;		Unchanged: 0/0
 28289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28290 ;;      Params:         5       0       0       0       0       0       0
 28291 ;;      Locals:         6       0       0       0       0       0       0
 28292 ;;      Temps:          4       0       0       0       0       0       0
 28293 ;;      Totals:        15       0       0       0       0       0       0
 28294 ;;Total ram usage:       15 bytes
 28295 ;; Hardware stack levels used:    1
 28296 ;; This function calls:
 28297 ;;		Nothing
 28298 ;; This function is called by:
 28299 ;;		_Interrupt
 28300 ;; This function uses a non-reentrant model
 28301 ;;
 28302                           
 28303                           	psect	text87
 28304  0037D6                     __ptext87:
 28305                           	opt stack 0
 28306  0037D6                     _fifo_write:
 28307                           	opt stack 21
 28308                           
 28309                           ;incstack = 0
 28310                           ;incstack = 0
 28311                           ;fifo_write@f stored from wreg
 28312  0037D6  CFE8 F00F          	movff	wreg,fifo_write@f
 28313                           
 28314                           ;fifo.c: 62: uint32_t i;
 28315                           ;fifo.c: 63: const uint8_t *p;
 28316                           ;fifo.c: 64: p = buf;
 28317  0037DA  C001  F00A         	movff	fifo_write@buf,fifo_write@p
 28318                           
 28319                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 28320  0037DE  6A0B               	clrf	fifo_write@i,c
 28321  0037E0  6A0C               	clrf	fifo_write@i+1,c
 28322  0037E2  6A0D               	clrf	fifo_write@i+2,c
 28323  0037E4  6A0E               	clrf	fifo_write@i+3,c
 28324  0037E6  D052               	goto	i1l6321
 28325  0037E8                     i1l6301:
 28326                           
 28327                           ;fifo.c: 69: if ((f->head + 1 == f->tail) ||
 28328                           ;fifo.c: 70: ((f->head + 1 == f->size) && (f->tail == 0))) {
 28329  0037E8  500F               	movf	fifo_write@f,w,c
 28330  0037EA  6ED9               	movwf	fsr2l,c
 28331  0037EC  6ADA               	clrf	fsr2h,c
 28332  0037EE  0E04               	movlw	4
 28333  0037F0  D85B               	call	PL16	;call to abstracted procedure
 28334  0037F2  E102               	bnz	i1u610_25
 28335  0037F4  5006               	movf	??_fifo_write,w,c
 28336  0037F6  1808               	xorwf	??_fifo_write+2,w,c
 28337  0037F8                     i1u610_25:
 28338  0037F8  E012               	bz	i1l1525
 28339  0037FA  500F               	movf	fifo_write@f,w,c
 28340  0037FC  6ED9               	movwf	fsr2l,c
 28341  0037FE  6ADA               	clrf	fsr2h,c
 28342  003800  0E06               	movlw	6
 28343  003802  D852               	call	PL16	;call to abstracted procedure
 28344  003804  E102               	bnz	i1u611_25
 28345  003806  5006               	movf	??_fifo_write,w,c
 28346  003808  1808               	xorwf	??_fifo_write+2,w,c
 28347  00380A                     i1u611_25:
 28348  00380A  E10E               	bnz	i1l6309
 28349  00380C  500F               	movf	fifo_write@f,w,c
 28350  00380E  6ED9               	movwf	fsr2l,c
 28351  003810  6ADA               	clrf	fsr2h,c
 28352  003812  0E04               	movlw	4
 28353  003814  26D9               	addwf	fsr2l,f,c
 28354  003816  6ADA               	clrf	fsr2h,c
 28355  003818  50DE               	movf	postinc2,w,c
 28356  00381A  10DD               	iorwf	postdec2,w,c
 28357  00381C  E105               	bnz	i1l6309
 28358  00381E                     i1l1525:
 28359                           
 28360                           ;fifo.c: 71: return i;
 28361  00381E  C00B  F001         	movff	fifo_write@i,?_fifo_write
 28362  003822  C00C  F002         	movff	fifo_write@i+1,?_fifo_write+1
 28363  003826  D03F               	goto	i1l1526
 28364  003828                     i1l6309:
 28365                           
 28366                           ;fifo.c: 73: else {
 28367                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 28368  003828  500A               	movf	fifo_write@p,w,c
 28369  00382A  6ED9               	movwf	fsr2l,c
 28370  00382C  D85A               	call	PL92	;call to abstracted procedure
 28371  00382E  CFE6 F006          	movff	postinc1,??_fifo_write
 28372  003832  CFE5 F007          	movff	postdec1,??_fifo_write+1
 28373  003836  500F               	movf	fifo_write@f,w,c
 28374  003838  6EE1               	movwf	fsr1l,c
 28375  00383A  6AE2               	clrf	fsr1h,c
 28376  00383C  CFE6 F008          	movff	postinc1,??_fifo_write+2
 28377  003840  CFE5 F009          	movff	postdec1,??_fifo_write+3
 28378  003844  5006               	movf	??_fifo_write,w,c
 28379  003846  2408               	addwf	??_fifo_write+2,w,c
 28380  003848  6EE1               	movwf	fsr1l,c
 28381  00384A  5007               	movf	??_fifo_write+1,w,c
 28382  00384C  2009               	addwfc	??_fifo_write+3,w,c
 28383  00384E  6EE2               	movwf	fsr1h,c
 28384  003850  CFDF FFE7          	movff	indf2,indf1
 28385  003854  2A0A               	incf	fifo_write@p,f,c
 28386                           
 28387                           ;fifo.c: 75: f->head++;
 28388  003856  D83E               	call	PL38	;call to abstracted procedure
 28389  003858  2ADE               	incf	postinc2,f,c
 28390  00385A  0E00               	movlw	0
 28391  00385C  22DD               	addwfc	postdec2,f,c
 28392                           
 28393                           ;fifo.c: 76: if (f->head == f->size) {
 28394  00385E  500F               	movf	fifo_write@f,w,c
 28395  003860  6ED9               	movwf	fsr2l,c
 28396  003862  6ADA               	clrf	fsr2h,c
 28397  003864  0E06               	movlw	6
 28398  003866  26D9               	addwf	fsr2l,f,c
 28399  003868  D83C               	call	PL92	;call to abstracted procedure
 28400  00386A  52E6               	movf	postinc1,f,c
 28401  00386C  52DE               	movf	postinc2,f,c
 28402  00386E  50DD               	movf	postdec2,w,c
 28403  003870  18E5               	xorwf	postdec1,w,c
 28404  003872  CFDF FFE8          	movff	indf2,wreg
 28405  003876  B4D8               	btfsc	status,2,c
 28406  003878  18E7               	xorwf	indf1,w,c
 28407  00387A  E103               	bnz	i1l6319
 28408                           
 28409                           ;fifo.c: 77: f->head = 0;
 28410  00387C  D82B               	call	PL38	;call to abstracted procedure
 28411  00387E  6ADE               	clrf	postinc2,c
 28412  003880  6ADD               	clrf	postdec2,c
 28413  003882                     i1l6319:
 28414  003882  2A0B               	incf	fifo_write@i,f,c
 28415  003884  0E00               	movlw	0
 28416  003886  220C               	addwfc	fifo_write@i+1,f,c
 28417  003888  220D               	addwfc	fifo_write@i+2,f,c
 28418  00388A  220E               	addwfc	fifo_write@i+3,f,c
 28419  00388C                     i1l6321:
 28420  00388C  5002               	movf	fifo_write@nbytes,w,c
 28421  00388E  5C0B               	subwf	fifo_write@i,w,c
 28422  003890  5003               	movf	fifo_write@nbytes+1,w,c
 28423  003892  580C               	subwfb	fifo_write@i+1,w,c
 28424  003894  5004               	movf	fifo_write@nbytes+2,w,c
 28425  003896  580D               	subwfb	fifo_write@i+2,w,c
 28426  003898  5005               	movf	fifo_write@nbytes+3,w,c
 28427  00389A  580E               	subwfb	fifo_write@i+3,w,c
 28428  00389C  E3A5               	bnc	i1l6301
 28429                           
 28430                           ;fifo.c: 78: }
 28431                           ;fifo.c: 79: }
 28432                           ;fifo.c: 81: }
 28433                           ;fifo.c: 83: return nbytes;
 28434  00389E  C002  F001         	movff	fifo_write@nbytes,?_fifo_write
 28435  0038A2  C003  F002         	movff	fifo_write@nbytes+1,?_fifo_write+1
 28436  0038A6                     i1l1526:
 28437  0038A6  0012               	return	
 28438  0038A8                     __end_of_fifo_write:
 28439                           	opt stack 0
 28440  0038A8                     PL16:
 28441                           	opt stack 21
 28442  0038A8  26D9               	addwf	fsr2l,f,c
 28443  0038AA  6ADA               	clrf	fsr2h,c
 28444  0038AC  CFDE F006          	movff	postinc2,??_fifo_write
 28445  0038B0  CFDD F007          	movff	postdec2,??_fifo_write+1
 28446  0038B4  500F               	movf	fifo_write@f,w,c
 28447  0038B6  6ED9               	movwf	fsr2l,c
 28448  0038B8  6ADA               	clrf	fsr2h,c
 28449  0038BA  0E02               	movlw	2
 28450  0038BC  26D9               	addwf	fsr2l,f,c
 28451  0038BE  6ADA               	clrf	fsr2h,c
 28452  0038C0  CFDE F008          	movff	postinc2,??_fifo_write+2
 28453  0038C4  CFDD F009          	movff	postdec2,??_fifo_write+3
 28454  0038C8  2A08               	incf	??_fifo_write+2,f,c
 28455  0038CA  0E00               	movlw	0
 28456  0038CC  2209               	addwfc	??_fifo_write+3,f,c
 28457  0038CE  5007               	movf	??_fifo_write+1,w,c
 28458  0038D0  1809               	xorwf	??_fifo_write+3,w,c
 28459  0038D2  0012               	return	
 28460  0038D4                     __end_ofPL16:
 28461                           	opt stack 0
 28462  0038D4                     PL38:
 28463                           	opt stack 21
 28464  0038D4  500F               	movf	fifo_write@f,w,c
 28465  0038D6  6ED9               	movwf	fsr2l,c
 28466  0038D8  6ADA               	clrf	fsr2h,c
 28467  0038DA  0E02               	movlw	2
 28468  0038DC  26D9               	addwf	fsr2l,f,c
 28469  0038DE  6ADA               	clrf	fsr2h,c
 28470  0038E0  0012               	return	
 28471  0038E2                     __end_ofPL38:
 28472                           	opt stack 0
 28473  0038E2                     PL92:
 28474                           	opt stack 21
 28475  0038E2  6ADA               	clrf	fsr2h,c
 28476  0038E4  500F               	movf	fifo_write@f,w,c
 28477  0038E6  6EE1               	movwf	fsr1l,c
 28478  0038E8  6AE2               	clrf	fsr1h,c
 28479  0038EA  0E02               	movlw	2
 28480  0038EC  26E1               	addwf	fsr1l,f,c
 28481  0038EE  6AE2               	clrf	fsr1h,c
 28482  0038F0  0012               	return	
 28483  0038F2                     __end_ofPL92:
 28484                           	opt stack 0
 28485                           tblptru	equ	0xFF8
 28486                           tblptrh	equ	0xFF7
 28487                           tblptrl	equ	0xFF6
 28488                           tablat	equ	0xFF5
 28489                           prodh	equ	0xFF4
 28490                           prodl	equ	0xFF3
 28491                           intcon	equ	0xFF2
 28492                           indf0	equ	0xFEF
 28493                           postinc0	equ	0xFEE
 28494                           fsr0h	equ	0xFEA
 28495                           fsr0l	equ	0xFE9
 28496                           wreg	equ	0xFE8
 28497                           indf1	equ	0xFE7
 28498                           postinc1	equ	0xFE6
 28499                           postdec1	equ	0xFE5
 28500                           fsr1h	equ	0xFE2
 28501                           fsr1l	equ	0xFE1
 28502                           bsr	equ	0xFE0
 28503                           indf2	equ	0xFDF
 28504                           postinc2	equ	0xFDE
 28505                           postdec2	equ	0xFDD
 28506                           plusw2	equ	0xFDB
 28507                           fsr2h	equ	0xFDA
 28508                           fsr2l	equ	0xFD9
 28509                           status	equ	0xFD8
 28510                           
 28511 ;; *************** function _ReadUSART *****************
 28512 ;; Defined at:
 28513 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 28514 ;; Parameters:    Size  Location     Type
 28515 ;;		None
 28516 ;; Auto vars:     Size  Location     Type
 28517 ;;  data            1    0[COMRAM] unsigned char 
 28518 ;; Return value:  Size  Location     Type
 28519 ;;                  1    wreg      unsigned char 
 28520 ;; Registers used:
 28521 ;;		wreg, status,2, status,0
 28522 ;; Tracked objects:
 28523 ;;		On entry : 0/0
 28524 ;;		On exit  : 0/0
 28525 ;;		Unchanged: 0/0
 28526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28527 ;;      Params:         0       0       0       0       0       0       0
 28528 ;;      Locals:         1       0       0       0       0       0       0
 28529 ;;      Temps:          0       0       0       0       0       0       0
 28530 ;;      Totals:         1       0       0       0       0       0       0
 28531 ;;Total ram usage:        1 bytes
 28532 ;; Hardware stack levels used:    1
 28533 ;; This function calls:
 28534 ;;		Nothing
 28535 ;; This function is called by:
 28536 ;;		_Interrupt
 28537 ;; This function uses a non-reentrant model
 28538 ;;
 28539                           
 28540                           	psect	text88
 28541  00573C                     __ptext88:
 28542                           	opt stack 0
 28543  00573C                     _ReadUSART:
 28544                           	opt stack 21
 28545                           
 28546                           ;incstack = 0
 28547                           ;incstack = 0
 28548  00573C  0EF2               	movlw	242
 28549  00573E  163D               	andwf	_USART_Status,f,c
 28550  005740  ACAB               	btfss	4011,6,c	;volatile
 28551  005742  D003               	goto	i1l1832
 28552  005744  903D               	bcf	_USART_Status,0,c
 28553  005746  B0AB               	btfsc	4011,0,c	;volatile
 28554  005748  803D               	bsf	_USART_Status,0,c
 28555  00574A                     i1l1832:
 28556  00574A  B4AB               	btfsc	4011,2,c	;volatile
 28557  00574C  843D               	bsf	_USART_Status,2,c
 28558  00574E  B2AB               	btfsc	4011,1,c	;volatile
 28559  005750  863D               	bsf	_USART_Status,3,c
 28560  005752  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 28561  005756  5001               	movf	ReadUSART@data,w,c
 28562  005758  0012               	return	
 28563  00575A                     __end_of_ReadUSART:
 28564                           	opt stack 0
 28565                           tblptru	equ	0xFF8
 28566                           tblptrh	equ	0xFF7
 28567                           tblptrl	equ	0xFF6
 28568                           tablat	equ	0xFF5
 28569                           prodh	equ	0xFF4
 28570                           prodl	equ	0xFF3
 28571                           intcon	equ	0xFF2
 28572                           indf0	equ	0xFEF
 28573                           postinc0	equ	0xFEE
 28574                           fsr0h	equ	0xFEA
 28575                           fsr0l	equ	0xFE9
 28576                           wreg	equ	0xFE8
 28577                           indf1	equ	0xFE7
 28578                           postinc1	equ	0xFE6
 28579                           postdec1	equ	0xFE5
 28580                           fsr1h	equ	0xFE2
 28581                           fsr1l	equ	0xFE1
 28582                           bsr	equ	0xFE0
 28583                           indf2	equ	0xFDF
 28584                           postinc2	equ	0xFDE
 28585                           postdec2	equ	0xFDD
 28586                           plusw2	equ	0xFDB
 28587                           fsr2h	equ	0xFDA
 28588                           fsr2l	equ	0xFD9
 28589                           status	equ	0xFD8
 28590                           tblptru	equ	0xFF8
 28591                           tblptrh	equ	0xFF7
 28592                           tblptrl	equ	0xFF6
 28593                           tablat	equ	0xFF5
 28594                           prodh	equ	0xFF4
 28595                           prodl	equ	0xFF3
 28596                           intcon	equ	0xFF2
 28597                           indf0	equ	0xFEF
 28598                           postinc0	equ	0xFEE
 28599                           fsr0h	equ	0xFEA
 28600                           fsr0l	equ	0xFE9
 28601                           wreg	equ	0xFE8
 28602                           indf1	equ	0xFE7
 28603                           postinc1	equ	0xFE6
 28604                           postdec1	equ	0xFE5
 28605                           fsr1h	equ	0xFE2
 28606                           fsr1l	equ	0xFE1
 28607                           bsr	equ	0xFE0
 28608                           indf2	equ	0xFDF
 28609                           postinc2	equ	0xFDE
 28610                           postdec2	equ	0xFDD
 28611                           plusw2	equ	0xFDB
 28612                           fsr2h	equ	0xFDA
 28613                           fsr2l	equ	0xFD9
 28614                           status	equ	0xFD8
 28615                           
 28616                           	psect	rparam
 28617  0000                     tblptru	equ	0xFF8
 28618                           tblptrh	equ	0xFF7
 28619                           tblptrl	equ	0xFF6
 28620                           tablat	equ	0xFF5
 28621                           prodh	equ	0xFF4
 28622                           prodl	equ	0xFF3
 28623                           intcon	equ	0xFF2
 28624                           indf0	equ	0xFEF
 28625                           postinc0	equ	0xFEE
 28626                           fsr0h	equ	0xFEA
 28627                           fsr0l	equ	0xFE9
 28628                           wreg	equ	0xFE8
 28629                           indf1	equ	0xFE7
 28630                           postinc1	equ	0xFE6
 28631                           postdec1	equ	0xFE5
 28632                           fsr1h	equ	0xFE2
 28633                           fsr1l	equ	0xFE1
 28634                           bsr	equ	0xFE0
 28635                           indf2	equ	0xFDF
 28636                           postinc2	equ	0xFDE
 28637                           postdec2	equ	0xFDD
 28638                           plusw2	equ	0xFDB
 28639                           fsr2h	equ	0xFDA
 28640                           fsr2l	equ	0xFD9
 28641                           status	equ	0xFD8
 28642                           tblptru	equ	0xFF8
 28643                           tblptrh	equ	0xFF7
 28644                           tblptrl	equ	0xFF6
 28645                           tablat	equ	0xFF5
 28646                           prodh	equ	0xFF4
 28647                           prodl	equ	0xFF3
 28648                           intcon	equ	0xFF2
 28649                           indf0	equ	0xFEF
 28650                           postinc0	equ	0xFEE
 28651                           fsr0h	equ	0xFEA
 28652                           fsr0l	equ	0xFE9
 28653                           wreg	equ	0xFE8
 28654                           indf1	equ	0xFE7
 28655                           postinc1	equ	0xFE6
 28656                           postdec1	equ	0xFE5
 28657                           fsr1h	equ	0xFE2
 28658                           fsr1l	equ	0xFE1
 28659                           bsr	equ	0xFE0
 28660                           indf2	equ	0xFDF
 28661                           postinc2	equ	0xFDE
 28662                           postdec2	equ	0xFDD
 28663                           plusw2	equ	0xFDB
 28664                           fsr2h	equ	0xFDA
 28665                           fsr2l	equ	0xFD9
 28666                           status	equ	0xFD8


Data Sizes:
    Strings     4050
    Constant    120
    Data        0
    BSS         1129
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     42      79
    BANK0           160    113     151
    BANK1           256     20     198
    BANK2           256     61     189
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?___llmod	unsigned long  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_read	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?_fifo_getFree	unsigned short  size(2) Largest target is 0

    ?_fifo_write	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), STR_124(CODE[5]), 
		 -> STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), STR_118(CODE[11]), 
		 -> STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), STR_100(CODE[5]), 
		 -> STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), STR_124(CODE[5]), 
		 -> STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), STR_118(CODE[11]), 
		 -> STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), STR_100(CODE[5]), 
		 -> STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_252(CODE[2]), STR_251(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_246(CODE[2]), 
		 -> STR_245(CODE[3]), STR_244(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_262(CODE[3]), STR_261(CODE[23]), STR_260(CODE[10]), STR_259(CODE[10]), 
		 -> STR_258(CODE[12]), STR_257(CODE[8]), STR_256(CODE[7]), STR_255(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_254(CODE[10]), STR_253(CODE[3]), STR_250(CODE[20]), 
		 -> STR_249(CODE[3]), STR_248(CODE[14]), STR_247(CODE[3]), STR_243(CODE[8]), 
		 -> STR_242(CODE[15]), STR_241(CODE[67]), STR_240(CODE[3]), STR_239(CODE[27]), 
		 -> STR_238(CODE[67]), STR_237(CODE[39]), STR_236(CODE[62]), STR_235(CODE[55]), 
		 -> STR_234(CODE[49]), STR_233(CODE[67]), STR_232(CODE[47]), STR_231(CODE[47]), 
		 -> STR_230(CODE[34]), STR_229(CODE[71]), STR_228(CODE[20]), STR_227(CODE[78]), 
		 -> STR_226(CODE[24]), STR_225(CODE[77]), STR_224(CODE[67]), STR_223(CODE[69]), 
		 -> STR_222(CODE[47]), STR_221(CODE[40]), STR_220(CODE[39]), STR_219(CODE[33]), 
		 -> STR_218(CODE[23]), STR_217(CODE[56]), STR_216(CODE[24]), STR_215(CODE[44]), 
		 -> STR_214(CODE[50]), STR_213(CODE[31]), STR_212(CODE[50]), STR_211(CODE[51]), 
		 -> STR_210(CODE[46]), STR_209(CODE[44]), STR_208(CODE[27]), STR_207(CODE[39]), 
		 -> STR_206(CODE[39]), STR_205(CODE[52]), STR_204(CODE[54]), STR_203(CODE[55]), 
		 -> STR_202(CODE[3]), STR_199(CODE[24]), STR_198(CODE[57]), STR_197(CODE[53]), 
		 -> STR_196(CODE[58]), STR_195(CODE[3]), STR_192(CODE[25]), STR_191(CODE[3]), 
		 -> STR_188(CODE[24]), STR_187(CODE[3]), STR_184(CODE[24]), STR_183(CODE[3]), 
		 -> STR_180(CODE[24]), STR_179(CODE[3]), STR_176(CODE[23]), STR_175(CODE[3]), 
		 -> STR_172(CODE[21]), STR_171(CODE[3]), STR_168(CODE[22]), STR_167(CODE[3]), 
		 -> STR_164(CODE[17]), STR_163(CODE[3]), STR_160(CODE[18]), STR_159(CODE[4]), 
		 -> STR_158(CODE[11]), STR_157(CODE[2]), STR_154(CODE[7]), STR_151(CODE[7]), 
		 -> STR_148(CODE[9]), STR_145(CODE[7]), STR_142(CODE[8]), STR_139(CODE[7]), 
		 -> STR_138(CODE[2]), STR_137(CODE[2]), STR_136(CODE[6]), STR_135(CODE[8]), 
		 -> STR_134(CODE[8]), STR_133(CODE[20]), STR_132(CODE[27]), STR_131(CODE[6]), 
		 -> STR_130(CODE[33]), STR_127(CODE[26]), STR_125(CODE[32]), STR_123(CODE[28]), 
		 -> STR_119(CODE[6]), STR_117(CODE[40]), STR_115(CODE[44]), STR_112(CODE[6]), 
		 -> STR_111(CODE[39]), STR_109(CODE[36]), STR_107(CODE[37]), STR_105(CODE[40]), 
		 -> STR_103(CODE[37]), STR_102(CODE[50]), STR_99(CODE[6]), STR_98(CODE[41]), 
		 -> STR_96(CODE[38]), STR_94(CODE[39]), STR_92(CODE[42]), STR_90(CODE[39]), 
		 -> STR_89(CODE[66]), STR_86(CODE[6]), STR_85(CODE[3]), STR_82(CODE[20]), 
		 -> STR_80(CODE[33]), STR_79(CODE[35]), STR_78(CODE[24]), STR_76(CODE[33]), 
		 -> STR_74(CODE[24]), STR_71(CODE[54]), STR_70(CODE[6]), STR_69(CODE[3]), 
		 -> STR_64(CODE[34]), STR_63(CODE[3]), STR_60(CODE[4]), wrkbuf(BANK1[80]), 
		 -> STR_55(CODE[15]), STR_53(CODE[33]), STR_51(CODE[24]), STR_48(CODE[6]), 
		 -> STR_46(CODE[6]), STR_44(CODE[6]), STR_42(CODE[6]), STR_40(CODE[18]), 
		 -> STR_39(CODE[6]), STR_37(CODE[33]), STR_36(CODE[6]), STR_28(CODE[24]), 
		 -> STR_27(CODE[18]), STR_26(CODE[20]), STR_25(CODE[25]), STR_24(CODE[22]), 
		 -> STR_23(CODE[19]), STR_22(CODE[20]), STR_21(CODE[20]), STR_19(CODE[6]), 
		 -> STR_17(CODE[6]), STR_15(CODE[6]), STR_13(CODE[6]), STR_11(CODE[6]), 
		 -> STR_9(CODE[6]), STR_7(CODE[31]), STR_5(CODE[29]), STR_4(CODE[55]), 
		 -> STR_3(CODE[35]), STR_2(CODE[53]), STR_1(CODE[37]), 

    sprintf$2151	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_264(CODE[17]), STR_263(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_201(CODE[3]), STR_200(CODE[7]), STR_194(CODE[3]), STR_193(CODE[7]), 
		 -> STR_190(CODE[4]), STR_189(CODE[8]), STR_186(CODE[4]), STR_185(CODE[8]), 
		 -> STR_182(CODE[4]), STR_181(CODE[8]), STR_178(CODE[4]), STR_177(CODE[8]), 
		 -> STR_174(CODE[4]), STR_173(CODE[7]), STR_170(CODE[4]), STR_169(CODE[7]), 
		 -> STR_166(CODE[4]), STR_165(CODE[7]), STR_162(CODE[4]), STR_161(CODE[7]), 
		 -> STR_156(CODE[3]), STR_155(CODE[7]), STR_153(CODE[3]), STR_152(CODE[7]), 
		 -> STR_150(CODE[3]), STR_149(CODE[7]), STR_147(CODE[3]), STR_146(CODE[7]), 
		 -> STR_144(CODE[3]), STR_143(CODE[7]), STR_141(CODE[3]), STR_140(CODE[7]), 
		 -> STR_84(CODE[3]), STR_83(CODE[7]), STR_68(CODE[3]), STR_67(CODE[7]), 
		 -> STR_66(CODE[3]), STR_65(CODE[7]), STR_62(CODE[3]), STR_61(CODE[7]), 
		 -> STR_59(CODE[3]), STR_58(CODE[7]), STR_57(CODE[3]), STR_56(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2131$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(BANK0[1]), sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), 
		 -> receiveSendEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), 
		 -> sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_getFree@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_write@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    fifo_write@buf	PTR const void  size(1) Largest target is 8
		 -> Interrupt@dlc(COMRAM[1]), Interrupt@data(COMRAM[8]), Interrupt@id(COMRAM[4]), Interrupt@c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(1) Largest target is 8
		 -> Interrupt@dlc(COMRAM[1]), Interrupt@data(COMRAM[8]), Interrupt@id(COMRAM[4]), Interrupt@c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_read@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    fifo_read@buf	PTR void  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(BANK1[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(BANK1[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_init@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(BANK0[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 8
		 -> Interrupt@data(COMRAM[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> Interrupt@dlc(COMRAM[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> Interrupt@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveSendMultiEventCANAL@data(BANK0[8]), receiveSendEventCANAL@data(BANK0[8]), vscpData(BANK1[8]), 

    getCANFrame@pdlc	PTR unsigned char  size(2) Largest target is 1
		 -> receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendEventCANAL@dlc(BANK0[1]), vscpSize(BANK1[1]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(2) Largest target is 1
		 -> vscpPriority(BANK1[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(2) Largest target is 2
		 -> vscpClass(BANK1[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(2) Largest target is 1
		 -> vscpType(BANK1[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(2) Largest target is 1
		 -> vscpNodeId(BANK1[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(2) Largest target is 1
		 -> vscpSize(BANK1[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1424	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_201(CODE[3]), STR_200(CODE[7]), 

    printErrors$1415	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_194(CODE[3]), STR_193(CODE[7]), 

    printErrors$1409	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_190(CODE[4]), STR_189(CODE[8]), 

    printErrors$1403	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_186(CODE[4]), STR_185(CODE[8]), 

    printErrors$1397	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_182(CODE[4]), STR_181(CODE[8]), 

    printErrors$1391	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_178(CODE[4]), STR_177(CODE[8]), 

    printStatistics$1384	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_174(CODE[4]), STR_173(CODE[7]), 

    printStatistics$1378	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_170(CODE[4]), STR_169(CODE[7]), 

    printStatistics$1372	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_166(CODE[4]), STR_165(CODE[7]), 

    printStatistics$1366	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_162(CODE[4]), STR_161(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1159(BANK2[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value(BANK2[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1298	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_156(CODE[3]), STR_155(CODE[7]), 

    receivePrintEventVerbose$1293	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_153(CODE[3]), STR_152(CODE[7]), 

    receivePrintEventVerbose$1288	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_150(CODE[3]), STR_149(CODE[7]), 

    receivePrintEventVerbose$1283	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_147(CODE[3]), STR_146(CODE[7]), 

    receivePrintEventVerbose$1278	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_144(CODE[3]), STR_143(CODE[7]), 

    receivePrintEventVerbose$1273	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_141(CODE[3]), STR_140(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), receiveSendEventCANAL@crc(BANK0[1]), 
		 -> sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), 
		 -> NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    doModeVerbose@p_1205	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1185	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1176	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_84(CODE[3]), STR_83(CODE[7]), 

    doModeVerbose@preg_1164	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1160	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1151	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_68(CODE[3]), STR_67(CODE[7]), 

    doModeVerbose$1147	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_66(CODE[3]), STR_65(CODE[7]), 

    doModeVerbose$1141	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_62(CODE[3]), STR_61(CODE[7]), 

    doModeVerbose$1136	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_59(CODE[3]), STR_58(CODE[7]), 

    doModeVerbose$1124	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_57(CODE[3]), STR_56(CODE[7]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1112	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    canInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    S21$buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    serialInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID

Critical Paths under _main in BANK0

    _doModeSLCAN->_sendCANFrame
    _hexStringToBytes->_strlen
    _receiveSendEventSLCAN->_ultoa
    _ultoa->___llmod
    _doModeVscp->_receiveVSCPModeCanalMsg
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPModeCapabilities->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _calcCRC->_crc8
    _receiveSendEventCANAL->_getCANFrame
    _receiveSendMultiEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _crc8->_init_crc8
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _printBinary->_WriteUSART
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _strichr->_toupper
    _strnicmp->_strlen
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_writeEEPROM
    _init_app_ram->_readEEPROM

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  103692
                                            106 BANK0      7     2      5
                          _fifo_init
                          _init_crc8
                         _readEEPROM
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0    7534
                                             54 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
                        _writeEEPROM
               _ECANSetOperationMode
                             _memset
              _receiveSendEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5     765
                                              4 BANK0     14     9      5
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     279
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventSLCAN                               10    10      0    3319
                                             35 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8     910
                                             22 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           1     1      0   16070
                                             87 BANK0      1     1      0
                          _fifo_read
               _ECANSetOperationMode
         _receiveSendMultiEventCANAL
              _receiveSendEventCANAL
                            _calcCRC
           _sendVSCPDriverErrorFrame
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
                 _sendVSCPDriverNack
       _receiveVSCPModeMultiCanalMsg
           _sendVSCPModeCapabilities
         _sendVSCPDriverCommandReply
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    1455
                                             15 BANK0      3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPModeCapabilities                             1     1      0    1393
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeMultiCanalMsg                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1331
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    2323
                                             54 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     174
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1331
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1393
                                             15 BANK0      2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     631
                                             12 BANK0      5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventCANAL                               15    15      0    2585
                                             18 BANK0     15    15      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (2) _receiveSendMultiEventCANAL                          17    17      0    2897
                                             18 BANK0     17    17      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     675
                                             12 BANK0      3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     427
                                              7 BANK0      5     2      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     334
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       81    81      0   76457
                                              0 BANK1     20    20      0
                                              0 BANK2     61    61      0
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
                        _writeEEPROM
           _receivePrintEventVerbose
                            _stristr
               _ECANSetOperationMode
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                         _WriteUSART
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           15    11      4    2182
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    3519
                                             86 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     161
                                              1 BANK0      5     5      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    3457
                                             86 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     109
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            5     5      0   19230
                                            101 BANK0      5     5      0
                          _putsUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    3832
                                             95 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    5359
                                             95 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    5164
                                             95 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     143
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    3333
                                             86 BANK0      9     5      4
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    2199
                                             54 BANK0     32    24      8
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    1979
                                             47 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    1886
                                             10 BANK0     37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     693
                                              0 BANK0     10     3      7
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     137
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0      93
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    5402
                                             52 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    5328
                                             52 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     665
                                              6 BANK0      7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4     799
                                             12 BANK0      4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     257
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     257
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     124
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4     898
                                             13 BANK0      4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     257
                                              1 BANK0      4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     260
                                              4 BANK0      9     3      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0      96
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     130
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            18    18      0    6449
                                             52 BANK0     18    18      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        20     8     12     948
                                             18 BANK0     20     8     12
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          5     1      4     601
                                             13 BANK0      5     1      4
                          _fifo_read
 ---------------------------------------------------------------------------------
 (4) _fifo_read                                           13     9      4     446
                                              0 BANK0     13     9      4
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    5087
                                             22 BANK0     30    22      8
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     232
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     232
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     241
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    1480
                                             24 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1146
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6     913
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     232
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     241
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0      93
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2      93
                                              1 BANK0      4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     603
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      62
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     310
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     104
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _vscp_restoreDefaults                                 0     0      0     263
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (2) _init_app_eeprom                                      1     1      0     198
                                              3 BANK0      1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      62
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _init_app_ram                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            5     1      4     186
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                           24    24      0    2582
                                             18 COMRAM    24    24      0
                          _ReadUSART
                         _fifo_write
                 _ECANReceiveMessage
                       _fifo_getFree
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     269
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _fifo_getFree                                       11     9      2     154
                                              0 COMRAM    11     9      2
 ---------------------------------------------------------------------------------
 (10) _ECANReceiveMessage                                 11     8      3    1180
                                              7 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (11) __RegsToCANID                                        7     3      4     489
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (11) __ECANPointBuffer                                    6     3      3      52
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         15    10      5     378
                                              0 COMRAM    15    10      5
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_init
   _init_crc8
   _readEEPROM
   _vscp_restoreDefaults
     _init_app_ram
       _readEEPROM
     _init_app_eeprom
       _writeEEPROM
   _init
     _WriteTimer0
     _init_app_ram
       _readEEPROM
     _OpenUSART
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _doModeVerbose
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _writeEEPROM
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _ECANSetOperationMode
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _strcpy
     _strchr
     _readRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _sprintf
       _isdigit
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
     _WriteUSART
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _setFilter
     __CANIDToRegs
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _receiveSendMultiEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _receiveSendEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeMultiCanalMsg
     _sendVSCPModeCapabilities
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _writeEEPROM
     _ECANSetOperationMode
     _memset
     _receiveSendEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _fifo_read
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   _ECANReceiveMessage
     __ECANPointBuffer
     __RegsToCANID
   _fifo_getFree
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     1EE      16       32.2%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     3D      BD       9       73.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     14      C6       7       77.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     71      97       5       94.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2A      4F       1       83.2%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       E       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     369       3        0.0%
DATA                 0      0     565      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Mon Mar 16 21:31:37 2015

        ??_receiveVSCPModeMultiCanalMsg 0060                   __end_of_doModeVerbose 1500  
                          printBinary@i 0064                             fifo_write@f 000F  
                           fifo_write@i 000B                             fifo_write@p 000A  
                        ??_fifo_getFree 0003                   __end_of_sendVSCPFrame 4630  
            doModeVerbose@filter_nodeid 0290                                      PL2 1500  
                                    PL4 1514                                      PL6 1532  
                                    PL8 1542                                      bsr 000FE0  
                   ___wmul@multiplicand 0062                             __CFG_BORV$3 000000  
                __end_of_doModeVscpNode 57DE                                     PL10 155E  
                                   PL20 2DE6                                     PL12 156C  
                                   PL30 15C6                                     PL22 3C04  
                                   PL14 1CC2                                     PL40 377C  
                                   PL32 39B2                                     PL24 1CF0  
                                   PL16 38A8                                     PL50 4762  
                                   PL42 15EC                                     PL34 43DA  
                                   PL26 3280                                     PL18 1CE0  
                                   PL60 163A                                     PL52 39C6  
                                   PL44 1608                                     PL36 15DA  
                                   PL28 15B6                                     PL70 378A  
                                   PL62 1D46                                     PL54 39D6  
                                   PL46 1D16                                     PL38 38D4  
                                   PL80 37B0                                     PL72 379C  
                                   PL64 4AF2                                     PL56 1622  
                                   PL48 46C2                                     PL90 563C  
                                   PL82 3290                                     PL74 3FD8  
                                   PL66 4894                                     PL58 1D30  
                                   PL92 38E2                                     PL84 37C4  
                                   PL76 3D02                                     PL68 1D5C  
                                   PL94 54AA                                     PL86 1D6A  
                                   PL78 39E8                                     PL96 3118  
                                   PL88 20F2                                     PL98 44B6  
               sendEscapedUartData@pcrc 006C                                     l421 34CE  
                                   l422 3506                                     l425 351E  
                                   l426 3528                                     l524 14FE  
                                   l428 3534                                     l533 0B3A  
                                   l552 0AFA                                     l800 46DE  
                                   l529 09CA                                     l538 0A52  
                                   l803 46E8                                     l707 20F0  
                                   l812 4734                                     l565 0B90  
                                   l557 0B1A                                     l549 0AF0  
                                   l717 1E42                                     l806 4704  
                                   l830 4648                                     l742 202C  
                                   l815 474E                                     l824 4634  
                                   l809 4724                                     l833 4664  
                                   l657 2DE4                                     l914 2680  
                                   l922 35BA                                     l770 440E  
                                   l818 4758                                     l842 46AE  
                                   l915 2694                                     l907 25DE  
                                   l755 50E4                                     l763 5112  
                                   l827 463E                                     l851 40CE  
                                   l940 36B6                                     l836 4684  
                                   l860 40FE                                     l925 35C4  
                                   l773 4418                                     l845 46B8  
                                   l758 50EE                                     l950 3164  
                                   l934 36A2                                     l782 445E  
                                   l854 40D8                                     l767 5136  
                                   l919 35B0                                     l791 44AC  
                                   l839 4694                                     l863 411E  
                                   l944 3150                                     l928 35E0  
                                   l776 4422                                     l872 415C  
                                   l953 3180                                     l937 36AC  
                                   l785 446E                                     l857 40E2  
                                   l866 412E                                     l947 315A  
                                   l779 443E                                     l875 4178  
                                   l972 327E                                     l788 44A2  
                                   l797 46D4                                     l869 414A  
                                   l966 326A                                     l878 4182  
                                   l969 3274                            __CFG_CPB$OFF 000000  
                        getVSCPFrame@id 0082                           fifo_write@buf 0001  
                 ?_vscp_restoreDefaults 0001                    __size_of_WriteTimer0 0012  
                                   _pos 0102          __size_of_writeRegisterExtended 0106  
                                   wreg 000FE8           __end_of_writeRegisterExtended 3B0C  
                                  PL100 418C                                    PL110 39FC  
                                  PL102 1D7C                                    PL112 1D86  
                                  PL104 43F8                                    PL106 2890  
                                  PL108 48A2                            __CFG_LVP$OFF 000000  
                          __CFG_WDT$OFF 000000                                    l1000 44C8  
                                  l1003 44D2                                    l1012 4566  
                                  l1110 52C4                                    l1006 44DC  
                                  l1030 303C                                    l1022 2FD2  
                                  l1015 4570                                    l1009 44F8  
                                  l1106 52B8                                    l2011 3BFA  
                                  l1043 30EE                                    l1027 3004  
                                  l1212 4AC0                                    l2012 3C02  
                                  l1060 42A2                                    l1036 308C  
                                  l1230 2914                                    l1046 310C  
                                  l1063 4336                                    l1072 3E10  
                                  l1240 29B6                                    l1232 2926  
                                  l1209 4A9C                                    l1241 29C8  
                                  l1233 2938                                    l1049 3116  
                                  l1090 3B0A                                    l1242 29DA  
                                  l1234 294A                                    l1219 4E5E  
                                  l1171 3E28                                    l1243 29EC  
                                  l1235 295C                                    l1244 29FE  
                                  l1236 296E                                    l1165 23D2  
                                  l1157 233C                                    l1069 3D5E  
                                  l1245 2A10                                    l1237 2980  
                                  l1246 2A22                                    l1238 2992  
                                  l1255 4C0E                                    l1087 3A56  
                                  l1239 29A4                                    l1247 2A7A  
                                  l1264 4D7E                                    l2401 531C  
                                  l1514 43B8                                    l1434 340E  
                                  l1426 3372                                    l2411 556A  
                                  l1259 55AA                                    l1428 3390  
                                  l1517 43D8                                    l2318 4DE4  
                                  l1710 1AA6                                    l1702 1A3E  
                                  l1622 166E                                    l1711 1AAA  
                                  l2328 50C6                                    l2504 4A70  
                                  l1713 1AC6                                    l1802 5158  
                                  l2506 4A64                                    l1811 5192  
                                  l2531 53AA                                    l2507 4A68  
                                  l1563 4EEC                                    l1571 4F4A  
                                  l1708 1A80                                    l2540 5534  
                                  l2452 5014                                    l1549 56F4  
                                  l1565 4EF4                                    l1806 516C  
                                  l1638 17AA                                    l2454 5074  
                                  l2550 53EE                                    l1590 48E2  
                                  l1807 516E                                    l2287 47EE  
                                  l1655 17BA                                    l1639 175C  
                                  l1591 4948                                    l1808 5178  
                                  l1488 39B0                                    l1809 517A  
                                  l1729 1B50                                    l2473 4D06  
                                  l1585 54F6                                    l1770 5738  
                                  l1674 18DC                                    l1658 17EE  
                                  l2386 3FB4                                    l1819 51EC  
                                  l1659 17F2                                    l2492 4FB0  
                                  l2476 4D02                                    l1769 5736  
                                  l9815 3462                                    l9905 4EFE  
                                  l9907 4F04                                    l9871 3554  
                                  l9847 3508                                    STR_1 792F  
                                  STR_2 748D                                    l9881 3570  
                                  l9873 355A                                    l9857 3530  
                                  l9849 351A                                    STR_3 799D  
                                  STR_4 73B5                                    STR_5 7B2A  
                                  STR_6 7FCF                                    l9877 3564  
                                  l9869 354E                                    STR_7 7AEC  
                                  STR_8 7FB6                                    STR_9 7F7F  
                                  l9999 4E18                                    _PEIE 007F96  
                        sendCANFrame@id 008F                                    _RCIE 007CED  
                                  _RCIF 007CF5                                    _RCIP 007CFD  
                      ??_ECANInitialize 0061                                    _bDLE 00ED  
                          __CFG_PWRT$ON 000000              __end_of_sendVSCPDriverNack 46C2  
                                  _bHex 0100            doModeVerbose@filter_priority 028E  
                                  _crc8 55E4                                    _caps 00F5  
                                  _atoi 3B0C                                    _main 3410  
                                  _init 5326                                    _mode 00F1  
                                  _itoa 55AC                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    indf0 000FEF  
                                  fsr0l 000FE9                                    fsr2h 000FDA  
                                  indf1 000FE7                                    fsr1l 000FE1  
                                  indf2 000FDF                                    fsr2l 000FD9  
                                  _utoa 4770                     i1WriteTimer0@timer0 0001  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 0268                            _sprintf$2151 0086  
                          _sprintf$2144 0082                            _sprintf$2145 0084  
          receiveSendMultiEventCANAL@id 007D                             _writeEEPROM 56D8  
             ECANReceiveMessage@dataLen 0009      __end_of_receiveSendMultiEventCANAL 3280  
            _receiveSendMultiEventCANAL 3126                      doModeVerbose@count 02AB  
                 getVSCPFrame@pPriority 0078                          _caninputBuffer 0400  
                    doModeVerbose@value 02B1                    __end_of_getVSCPFrame 4C10  
                      __RegsToCANID@val 0003                        __RegsToCANID@ptr 0001  
                  __size_of_getCANFrame 0078                ?_receiveVSCPModeCanalMsg 0001  
                       ?_doModeVscpNode 0001                                   l10011 4E52  
                                 l10003 4E2A                                   l10007 4E3E  
                                 l10015 434A                                   l10201 078C  
                                 l10105 047A                                   l10027 43C2  
                                 l10203 079E                                   l10131 0530  
                                 l10123 0500                                   l10115 04C4  
                                 l10035 0276                                   l10029 43C6  
                                 l10141 0572                                   l10311 0B14  
                                 l10215 0816                                   l10151 05CA  
                                 l10135 0548                                   l10127 0518  
                                 l10119 04E6                                   l11105 4B58  
                                 l10225 088E                                   l10209 07DA  
                                 l10049 02AC                                   l11203 25EE  
                                 l12003 4214                                   l10251 0986  
                                 l10243 0906                                   l10219 0852  
                                 l10163 062A                                   l10139 0560  
                                 l10091 0400                                   l10083 03C2  
                                 l10075 0382                                   l10067 0342  
                                 l10059 0304                                   l11117 4B72  
                                 l11213 2662                                   l11141 2446  
                                 l12005 422A                                   l10325 0B5C  
                                 l10157 05FC                                   l11215 2666  
                                 l11223 2692                                   l10255 0998  
                                 l10239 08F4                                   l10175 0686  
                                 _B0CON 000E20                                   l11241 5768  
                                 l11217 2672                                   l11153 2498  
                                 l11233 4CCA                                   l11401 21F0  
                                 l12009 4246                                   l12041 3CDE  
                                 l12033 3CA4                                   l12025 3C3E  
                                 l10513 10B0                                   l10441 0ED6  
                                 l10409 0E00                                   l10425 0E6A  
                                 l10353 0C0C                                   l10337 0BAA  
                                 l10345 0BEA                                   l10273 0A1E  
                                 l10265 09D2                                   l10249 0972  
                                 l10193 073C                                   l10185 06DE  
                                 l10169 0658                                   l11235 4CF0  
                                 l11331 2E7E                                   l12035 3CAC  
                                 l10603 1378                                   l10523 10EA  
                                 l10451 0F10                                   l10371 0C92  
                                 l10347 0BEE                                   l10355 0C1E  
                                 l10187 06E8                                   l10179 06A4  
                                 l10195 074C                                   l10099 043E  
                                 l11165 24EC                                   l11229 4C92  
                                 l11317 2E14                                   l12037 3CC2  
                                 l10533 1126                                   l10509 10A0  
                                 l10461 0F4C                                   l10445 0EE6  
                                 l10285 0A6C                                   l11247 49EE  
                                 l11415 225A                                   l12063 49A6  
                                 l11511 3ECA                                   l10623 1410  
                                 l10615 13D4                                   l10631 144C  
                                 l10543 1160                                   l10519 10DA  
                                 l10471 0F86                                   l10455 0F20  
                                 l10391 0D5E                                   l10383 0D22  
                                 l10367 0C80                                   l12135 31AC  
                                 _B1CON 000E30                                   l11177 253E  
                                 l11257 4A26                                   l11281 3B88  
                                 l11345 2EE8                                   l11441 2318  
                                 l12065 49AE                                   l10641 14BC  
                                 l10561 11F0                                   l10553 119A  
                                 l10529 1116                                   l10481 0FC0  
                                 l10465 0F5C                                   l10377 0CFE  
                                 l10297 0ABC                                   l12233 3692  
                                 l10721 2CFA                                   l10713 2CD4  
                                 l11603 16C0                                   l11611 1706  
                                 l11531 5042                                   l11267 3B0E  
                                 l12059 497E                                   l11523 5656  
                                 l12083 2A34                                   l10635 148A  
                                 l10563 11FE                                   l10539 1150  
                                 l10475 0F96                                   l10395 0D94  
                                 l10387 0D4E                                   l10379 0D12  
                                 l10651 14FC                                   l12163 31FA  
                                 l10723 2D00                                   l10803 2DE2  
                                 l11189 2590                                   l11285 3BC2  
                                 l11277 3B68                                   l11269 3B14  
                                 l11453 235A                                   l11445 232A  
                                 l11429 22C4                                   l11373 211C  
                                 l11293 56B4                                   l12069 49BC  
                                 l11525 5660                                   l10645 14D2  
                                 l10549 118A                                   l10565 120C  
                                 l10485 0FD0                                   l10493 1034  
                                 l10397 0DA4                                   l12181 325A  
                                 l12173 321A                                   l12157 31DC  
                                 l12229 367A                                   l12245 5682  
                                 l10725 2D06                                   l10901 1FDA  
                                 l11631 1762                                   l11279 3B80  
                                 l11359 2F52                                   l12095 393E  
                                 l10639 14AE                                   l10647 14E0  
                                 l10735 2D18                                   l10823 1DCC  
                                 _B2CON 000E40                                   l11801 1A84  
                                 l11713 18E6                                   l11641 17B8  
                                 l11465 23AE                                   l11297 56C4  
                                 l10585 12DC                                   l10577 1298  
                                 l12177 323A                                   l12249 56A0  
                                 l12521 540A                                   l10745 2D2A  
                                 l10737 2D1E                                   l10657 2C4C  
                                 l12513 4934                                   l10921 2032  
                                 l10913 2010                                   l10841 1E3C  
                                 l11723 191A                                   l11643 17BE  
                                 l11635 1796                                   l11619 172C  
                                 l11387 2186                                   l11571 3DEE  
                                 l10595 1334                                   l10763 2D50  
                                 l10675 2C8C                                   l10659 2C50  
                                 l12507 48F0                                   l10923 2044  
                                 l10835 1E18                                   l10827 1DEE  
                                 l10931 20B2                                   l11725 191E  
                                 l11717 1904                                   l11661 180A  
                                 l11637 17B0                                   l11469 23C0  
                                 l11493 3E60                                   l11573 3E0E  
                                 l10781 2D92                                   l12461 3096  
                                 l12453 3050                                   l10845 1E4C  
                                 l10829 1DF4                                   l10941 20EE  
                                 l11903 1C84                                   l11815 1AD6  
                                 l11831 1B0A                                   l11751 198A  
                                 l11671 1838                                   l11655 17F8  
                                 l11639 17B4                                   l11591 1684  
                                 l10599 1352                                   l12527 5426  
                                 l10775 2D7A                                   l10679 2C92  
                                 l12623 3F16                                   l10935 20C6  
                                 _B3CON 000E50                                   l11825 1AF6  
                                 l11809 1AC0                                   l11753 198E  
                                 l11737 1952                                   l11681 185A  
                                 l11649 17D6                                   l11585 1678  
                                 l11913 1CAE                                   l12537 55A8  
                                 l10793 2DC2                                   l10769 2D64  
                                 l10689 2CA8                                   l10697 2CB8  
                                 l12633 3F5A                                   l12465 30AA  
                                 l10937 20D2                                   l10857 1E78  
                                 l10929 205C                                   l12811 5716  
                                 l11907 1CA6                                   l11843 1B30  
                                 l11739 1956                                   l11915 1CB4  
                                 l11675 183E                                   l11659 17FE  
                                 l11667 1822                                   l11691 1896  
                                 l11587 167C                                   l11595 168A  
                                 l11579 1656                                   l12571 4BA8  
                                 l12491 5444                                   l12715 330C  
                                 l10787 2DAA                                   l10891 1FB4  
                                 l10883 1F3E                                   l10867 1E9C  
                                 l10965 515A                                   l10957 514C  
                                 l11925 5798                                   l12901 5312  
                                 l11773 19EE                                   l11685 1866  
                                 l11677 184C                                   l11589 1680  
                                 l12493 544A                                   l12709 32FA  
                                 l11941 52CE                                   l11933 529E  
                                 l10797 2DD4                                   l12911 554A  
                                 l12655 55C8                                   l11863 1B72  
                                 l11839 1B26                                   l11783 1A1E  
                                 l11767 19C2                                   l12743 3392  
                                 l12727 3336                                   l10799 2DDA  
                                 _B4CON 000E60                                   l12913 554E  
                                 l12817 4778                                   l11881 1BAE  
                                 l11865 1B78                                   l11849 1B38  
                                 l11777 1A0C                                   l11769 19D4  
                                 l11689 186C                                   l12593 4D32  
                                 l12737 3376                                   l12827 47B0  
                                 l12851 4D98                                   l11883 1C04  
                                 l11875 1B9A                                   l11859 1B60  
                                 l11795 1A5C                                   l11699 18A6  
                                 l12587 4D2C                                   l12931 4F94  
                                 l12923 4F4E                                   l12763 3400  
                                 l12917 5560                                   l12909 5542  
                                 l12853 4DA4                                   l11893 1C4A  
                                 l11789 1A42                                   l12589 4D2E  
                                 l12933 4F9C                                   l12941 5520  
                                 l12749 33C0                                   l12757 33DE  
                                 l12685 4314                                   l12693 519E  
                                 l11981 3AE8                                   l12863 4DD6  
                                 l12855 4DA8                                   l12871 5086  
                                 l12951 5786                                   l12927 4F88  
                                 l12943 5524                                   l12767 3404  
                                 l12687 4334                                   l12695 51A2  
                                 l11983 3B08                                   l12791 54E2  
                                 l12783 54D0                                   _B5CON 000E70  
                                 l12873 5092                                   l11897 1C64  
                                 l11889 1C26                                   l12937 5504  
                                 l12769 3406                                   l12697 51B0  
                                 l12891 52F4                                   l12875 5096  
                                 l11899 1C76                                   l12699 51BA  
                                 l12893 52F8                                   l12957 53BA  
                                 l12965 5376                                   l11997 41C6  
                                 l12879 50B8                                   l12959 53C2  
                                 l12967 537E                                   l12799 54F4  
                                 l12889 52EC                                   ?_crc8 0067  
                  __size_of_doModeSLCAN 0362                      writeEEPROM@address 0060  
                                 ?_atoi 0066                                   ?_main 00CA  
                                 ?_init 0001                                   ?_itoa 0070  
                         i1_WriteTimer0 57C2                                   _EEADR 000FA9  
                                 STR_10 7F5D                                   STR_11 7F7F  
                                 STR_12 7F91                                   STR_20 7F48  
                                 STR_13 7F7F                                   STR_21 7D82  
                                 STR_30 7FF4                                   STR_14 7ECC  
                                 STR_22 7D96                                   STR_15 7F7F  
                                 STR_31 7FF4                                   STR_23 7DD2  
                                 STR_32 7FF4                                   STR_16 7F4F  
                                 STR_40 7DF7                                   STR_24 7D05  
                                 STR_17 7F7F                                   STR_33 7FF4  
                                 STR_41 7FCA                                   STR_25 7BCE  
                                 STR_42 7F7F                                   STR_50 7F2A  
                                 STR_34 7FF4                                   STR_18 7F0D  
                                 STR_26 7D6E                                   STR_19 7F7F  
                                 STR_35 7FF4                                   STR_43 7FD8  
                                 STR_27 7DE5                                   STR_51 7C30  
                                 STR_44 7F7F                                   STR_36 7F7F  
                                 STR_52 7F2A                                   STR_60 7EE9  
                                 STR_28 7C48                                   STR_61 7F64  
                                 STR_29 7FEA                                   STR_45 7FC5  
                                 STR_53 7AAB                                   STR_37 7A48  
                                 STR_70 7F7F                                   STR_46 7F7F  
                                 STR_54 7F2A                                   STR_62 7FED  
                                 STR_38 7FE7                                   STR_63 748A  
                                 STR_39 7F7F                                   STR_47 7FA2  
                                 STR_55 7E5D                                   STR_71 7422  
                                 STR_48 7F7F                                   STR_72 7FAC  
                                 STR_56 7F64                                   STR_80 7A8A  
                                 STR_64 7A05                                   STR_73 7F2A  
                                 STR_65 7F64                                   STR_57 7FED  
                                 STR_81 7FBB                                   STR_49 7FA7  
                                 STR_74 7C30                                   STR_58 7F64  
                                 STR_66 7FED                                   STR_82 7DAA  
                                 STR_90 77FA                                   STR_75 7F2A  
                                 STR_91 7FF4                                   STR_83 7F64  
                                 STR_67 7F64                                   STR_59 7FED  
                                 STR_76 7AAB                                   STR_84 7FED  
                                 STR_68 7FED                                   STR_92 772F  
                                 STR_85 748A                                   STR_69 748A  
                                 STR_77 7F2A                                   STR_93 7FF4  
                                 STR_86 7F7F                                   STR_78 7C60  
                                 STR_94 7896                                   STR_95 7FF4  
                                 STR_87 7F56                                   STR_79 79C0  
                                 STR_88 7FF4                                   STR_96 78E4  
                                 STR_97 7FF4                                   STR_89 721C  
                                 STR_98 7759                                   STR_99 7F7F  
          __end_of_printFirmwareVersion 4AF2                                   _BSEL0 000DF8  
                       __end_of___lldiv 4DF6                                   ?_utoa 0067  
                                 u12010 520E                                   u12020 523C  
                       __end_of_calcCRC 56AA                                   _T0CON 000FD5  
                                 u12017 5208                                   u12027 5236  
                                 u12205 03A6                                   u12215 03E6  
                       __end_of___llmod 50D8                                   u12225 0424  
                                 u14010 3B5E                                   u12235 0462  
                                 u12245 049E                                   u14030 3B7C  
                                 u12175 02E0                                   u14017 3B58  
                                 u14105 45B6                                   u12345 0596  
                                 u12185 0328                                   u14050 3BAC  
                                 u12435 0770                                   u12195 0366  
                                 u14060 3BD6                                   u14037 3B76  
                                 u12455 07C2                                   _LATC1 007C59  
                                 u14320 5032                                   u13520 1F0A  
                                 u14057 3BA6                                   u12705 0C42  
                                 u12465 07FE                                   u13530 1F14  
                                 u14067 3BD0                                   u12475 083A  
                                 u14340 506A                                   u13540 1F1E  
                                 u12485 0876                                   u13525 1F08  
                                 u14327 502C                                   u12495 08B2  
                                 u13535 1F12                                   u13545 1F1C  
                                 u16130 5466                                   u14347 5064  
                                 u12765 0DC6                                   u15094 52AE  
                                 u15095 52AA                                   u15335 28B8  
                                 u12855 1574                                   u15336 28BE  
                                 u16137 5460                                   u15345 28EC  
                                 u15337 28CC                                   u12865 1056  
                                 u12785 0E8C                                   u15346 28F2  
                                 u15347 2900                                   u12955 122E  
                                 u15365 3918                                   u12965 1274  
                                 u16270 4BFA                                   u15375 3928  
                                 u12975 12BA                                   u15385 3946  
                                 u17137 3470                                   u13970 3B28  
                                 u16450 51E2                                   u16275 4BF0  
                                 u13990 3B40                                   u13977 3B22  
                                 u16457 51D8                                   u13997 3B3A  
                                 u15765 4028                         __end_of___lwdiv 5326  
                                 _ERRIE 007D1D                            _vscpPriority 01AF  
                                 i1l401 0164                                   i1l404 0180  
                                 i1l413 024A                                   i1l407 01C8  
                       __end_of___lwmod 5574                                   i1l392 0174  
                                 i1l387 007C                                   i1l389 0176  
                                 i1l398 0174                         sendCANFrame@dlc 0093  
                                 _MSEL0 000DF0                                   _MSEL1 000DF1  
                                 _MSEL2 000DF2                                   _RCREG 000FAE  
                                 _IRXIF 007D27                                   _RCSTA 000FAB  
                      printBinary@value 0063                                   _TMR0H 000FD7  
                                 _TMR0L 000FD6                                   _SPBRG 000FAF  
              writeRegisterExtended@reg 00B8                                   _TXREG 000FAD  
                                 _TXSTA 000FAC                          __CFG_EBTR0$OFF 000000  
                        __CFG_EBTR1$OFF 000000                          __CFG_EBTR2$OFF 000000  
                        __CFG_EBTR3$OFF 000000                                   _bOpen 00EF  
               readRegisterExtended@reg 00B8                           __CFG_WRTD$OFF 000000  
                        __CFG_EBTRB$OFF 000000                        _hexStringToBytes 48B0  
                                 crc8@m 0069                         __end_of_dpowers 700C  
                       __end_of_isdigit 571E                                   _timer 00E9  
                                 atoi@a 006B                                   atoi@s 0066  
                                 main@c 00D0                                   _ultoa 3F06  
                            Interrupt@c 0024              ??_printNodeFirmwareVersion 00BF  
                      _printErrors$1403 0098                        _printErrors$1415 009C  
                      _printErrors$1424 009E                        _printErrors$1409 009A  
                      _printErrors$1391 0094                                   tablat 000FF5  
                      _printErrors$1397 0096                 ??_receiveSendEventCANAL 0072  
           __end_of_sendEscapedUartData 5138                                   plusw2 000FDB  
                                 utoa@c 006F                                   utoa@v 006D  
                                 status 000FD8                         __end_of_sprintf 1CC2  
               ??_receiveSendEventSLCAN 0083                         __end_of_strichr 5536  
                       __end_of_strcspn 53B4                         __end_of_toupper 578A  
                       __end_of_stristr 4D08                            __end_ofPL100 419A  
                          __end_ofPL110 3A06                            __end_ofPL102 1D86  
                          __end_ofPL112 1D90                            __end_ofPL104 4406  
                          __end_ofPL106 289E                            __end_ofPL108 48B0  
     __size_of_receivePrintEventVerbose 02C2                     doModeVerbose@i_1106 02B0  
             ?_receivePrintEventVerbose 0001                     doModeVerbose@p_1112 02B2  
                   doModeVerbose@p_1205 02BB                     doModeVerbose@p_1160 02B4  
                   doModeVerbose@p_1185 02B9                          WriteUSART@data 0060  
                  _ECANSetOperationMode 575A                            _canInputFifo 0040  
                       __initialization 4FB2                  doModeVerbose@page_1157 02A1  
         receiveSendMultiEventCANAL@dlc 007C                            __end_of_crc8 561A  
         receiveSendMultiEventCANAL@crc 0081                            __end_of_atoi 3C04  
         receiveSendMultiEventCANAL@pos 0082                            __end_of_main 357C  
                          __end_of_init 5370                            __end_of_itoa 55E4  
                          __end_of_utoa 4810                     doModeVerbose@ifmode 02B6  
                   doModeVerbose@maskno 02A8                     doModeVerbose@nodeid 028C  
                         doModeSLCAN@id 009D                          __CFG_OSC$HSPLL 000000  
                         doModeSLCAN@rv 00A3                       ??_ECANSendMessage 0072  
                        ?i1_WriteTimer0 0001              writeRegisterExtended@value 00BB  
                                ??_crc8 006A                   getVSCPFrame@pvscptype 0074  
                                ??_atoi 0068                  ??_vscp_restoreDefaults 0064  
                                ??_main 00CF                       readRegister@value 00B9  
                                ??_init 0064                                  ??_itoa 0076  
                                ??_utoa 006D                  doModeVerbose@mask_type 0292  
                         __activetblptr 000002                         _stateVscpDriver 00F4  
                     __RegsToCANID@type 0004                    _can_transmitOverruns 002B  
            ECANReceiveMessage@msgFlags 000A                           ?_readRegister 00B6  
             __size_of__ECANPointBuffer 0076                                  _B0TXEN 006FC2  
                                _B1TXEN 006FC3                                  _B2TXEN 006FC4  
                doModeVerbose@preg_1164 0286                                  _B3TXEN 006FC5  
                                _B4TXEN 006FC6                                  _B5TXEN 006FC7  
           readRegisterExtended@timeout 00B9              ECANReceiveMessage@savedPtr 000B  
                                _CANCON 000F6F                        ___llmod@dividend 006D  
                                STR_100 7FB1                                  STR_101 7FF4  
                                STR_110 7FF4                                  STR_102 7529  
                                STR_103 790A                                  STR_111 786F  
                                STR_112 7F7F                                  STR_104 7FF4  
                                STR_200 7F64                                  STR_120 7EBA  
                                STR_201 7FED                                  STR_113 7F9D  
                                STR_121 7F85                                  STR_105 77AA  
                                STR_202 748A                                  STR_106 7FF4  
                                STR_114 7FDC                                  STR_122 7EFD  
                                STR_130 7A69                                  STR_210 767D  
                                STR_131 7F7F                                  STR_123 7B47  
                                STR_107 7954                                  STR_115 7703  
                                STR_211 74F6                                  STR_203 7347  
                                STR_108 7FF4                                  STR_140 7F64  
                                STR_124 7FC0                                  STR_116 7F05  
                                STR_132 7B7E                                  STR_220 7821  
                                STR_212 755B                                  STR_204 73EC  
                                STR_141 7FED                                  STR_133 7D5A  
                                STR_213 7B0B                                  STR_125 7ACC  
                                STR_109 7979                                  STR_117 77D2  
                                STR_221 7782                                  STR_205 74C2  
                                STR_150 7FED                                  STR_126 7F97  
                                STR_142 7EF5                                  STR_134 7ED5  
                                STR_118 7E86                                  STR_230 79E3  
                                STR_206 7848                                  STR_222 764E  
                                STR_214 758D                                  STR_207 716F  
                                STR_119 7F7F                                  STR_143 7F6B  
                                STR_151 7F3A                                  STR_135 7EDD  
                                STR_127 7BB4                                  STR_215 76AB  
                                STR_231 761F                                  STR_223 710E  
                                STR_240 748A                                  STR_152 7F64  
                                STR_144 7FED                                  STR_136 7F79  
                                STR_128 7EED                                  STR_160 7E09  
                                STR_216 7C00                                  STR_208 7B63  
                                STR_232 75F0                                  STR_224 71D9  
                                STR_241 7153                                  STR_153 7FED  
                                STR_137 7FF2                                  STR_129 7F8B  
                                STR_161 7F72                                  STR_145 7F33  
                                STR_209 76D7                                  STR_217 730F  
                                STR_233 7196                                  STR_225 707A  
                                STR_146 7F64                                  STR_170 7FE0  
                                STR_138 7FF0                                  STR_162 7FE0  
                                STR_154 7F2C                                  STR_242 7E4E  
                                STR_250 7DBE                                  STR_218 7CC0  
                                STR_226 7C18                                  STR_234 75BF  
                                STR_171 748A                                  STR_163 748A  
                                STR_155 7F64                                  STR_147 7FED  
                                STR_251 7FFC                                  STR_139 7F41  
                                STR_243 7EE5                                  STR_219 7A27  
                                STR_235 737E                                  STR_227 702C  
                                STR_156 7FED                                  STR_244 7FF8  
                                STR_252 7FF6                                  STR_148 7EC3  
                                STR_260 7EA6                                  STR_164 7E3D  
                                STR_228 7D46                                  STR_172 7D31  
                                STR_180 7CA8                                  STR_236 725E  
                                STR_253 748A                                  STR_157 7FF4  
                                STR_149 7F64                                  STR_173 7F72  
                                STR_165 7F72                                  STR_181 7F15  
                                STR_245 7FE4                                  STR_261 7CEE  
                                STR_237 78BD                                  STR_229 70C7  
                                _EEDATA 000FA8                                  STR_262 748A  
                                STR_190 7FE0                                  STR_182 7FE0  
                                STR_174 7FE0                                  STR_166 7FE0  
                                STR_246 7FFA                                  STR_254 7E9C  
                                STR_158 7E91                                  STR_238 7153  
                                STR_255 748A                                  STR_247 748A  
                                STR_191 748A                                  STR_183 748A  
                                STR_175 748A                                  STR_167 748A  
                                STR_159 7FD4                                  STR_263 7E1B  
                                STR_239 7B99                                  STR_256 7F25  
                                STR_248 7E6C                                  STR_264 7E2C  
                                STR_168 7D1B                                  STR_176 7CD7  
                                STR_184 7C90                                  STR_192 7BE7  
                                STR_249 748A                                  STR_193 7F64  
                                STR_169 7F72                                  STR_185 7F15  
                                STR_257 7F1D                                  STR_177 7F15  
                                STR_194 7FED                                  STR_186 7FE0  
                                STR_178 7FE0                                  STR_258 7E7A  
                                STR_195 748A                                  STR_187 748A  
                                STR_179 748A                                  STR_259 7EB0  
                                STR_188 7C90                                  STR_196 729C  
                                STR_189 7F15                                  STR_197 7458  
                                STR_198 72D6                                  STR_199 7C78  
                                _EECON2 000FA7            __end_of_readRegisterExtended 3E12  
                                _CIOCON 000F73                                  ?_ultoa 0076  
          ??_sendVSCPDriverCommandReply 0070                    __end_of_fifo_getFree 4894  
                         ?_init_app_ram 0001                                  i1l1450 271C  
                                i1l1460 2776                                  i1l1452 272A  
                                _MDSEL0 007BBE                                  i1l1525 381E  
                                _MDSEL1 007BBF                                  i1l1526 38A6  
                                i1l1470 2800                                  i1l1462 2786  
                                i1l1454 273E                                  i1l1446 288E  
                                i1l1471 281A                                  i1l1439 26CE  
                                i1l1456 2752                                  i1l1449 279C  
                                i1l1458 2766                                  i1l1493 377A  
                                i1l1832 574A                                  i1l1498 4ED8  
                                i1l6301 37E8                                  i1l6321 388C  
                                i1l6309 3828                                  i1l6333 4852  
                                i1l6319 3882                              _OpenTimer0 571E  
                                i1l9311 4E84                                  i1l9321 4EAE  
                                i1l9313 4E8E                                  i1l9315 4E98  
                                i1l9307 4E72                                  i1l9317 4EA2  
                                i1l9309 4E7A                                  i1l9325 4EBA  
                                i1l9319 4EA8                                  i1l9339 3716  
                                i1l9571 26BC                                  i1l9581 26E6  
                                i1l9639 27B0                                  i1l9649 27D0  
                                i1l9675 2848                                  i1l9683 2862  
                                i1l9667 281C                                  i1l9587 26FC  
                                i1l9595 270A                                  i1l9589 2706  
                                i1l9689 2878                         _init_app_eeprom 4B00  
                    __size_of_ReadUSART 001E                                  _RXB0IF 007D20  
                                _RXB1IF 007D21                                  _SPBRGH 000FB0  
                ECANReceiveMessage@data 0008                  ECANReceiveMessage@mode 000F  
                ECANReceiveMessage@temp 0010                                  _RXBnIE 007D19  
                                _RXBnIF 007D21                       getVSCPFrame@pData 007C  
            ??_sendVSCPDriverErrorFrame 006F                       getVSCPFrame@pSize 007A  
                    _doModeVerbose$1124 0294                      _doModeVerbose$1141 0298  
                    _doModeVerbose$1151 029C                      _doModeVerbose$1136 0296  
                    _doModeVerbose$1147 029A                      _doModeVerbose$1176 029E  
                 ?_ECANSetOperationMode 0001                      __CANIDToRegs@Value 0069  
                    __size_of_Interrupt 0250                readRegisterExtended@page 00B6  
                    __size_of_OpenUSART 005C                        fifo_write@nbytes 0002  
                        getCANFrame@pid 0071                                  ___wmul 561A  
                            _bInitiated 00EE                          __CFG_STVREN$ON 000000  
                             ??___lldiv 0068                               ??_calcCRC 006F  
                                _cmdbuf 0104                               ??___llmod 0075  
                      OpenTimer0@config 0060                  receiveSendEventCANAL@i 007A  
                             ??___lwdiv 0064                               ??___lwmod 0064  
         _receivePrintEventVerbose$1273 0099           _receivePrintEventVerbose$1283 009D  
         _receivePrintEventVerbose$1293 00A1           _receivePrintEventVerbose$1278 009B  
         _receivePrintEventVerbose$1288 009F           _receivePrintEventVerbose$1298 00A3  
                                _memcpy 53F8                                  _memset 56AA  
                                clear_0 4FBA                                  clear_1 4FCE  
                                clear_2 4FE0                                  clear_3 4FEC  
                                clear_4 4FF8                                  clear_5 5004  
                         ?_sendCANFrame 008F                                  _strcat 5194  
                                _strchr 5014                                  _strcpy 564C  
                                _strlen 543A                                  _wrkbuf 0154  
                                _strtok 49E0                                  _strspn 53B4  
                           Interrupt@id 0026     __size_of_sendVSCPDriverCommandReply 00C4  
                             ??_isdigit 0060                  receiveSendEventSLCAN@i 008B  
                      __end_of_printMDF 49E0                            __mediumconst 6FB4  
                        ??_readRegister 00BA                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                          ?_printBinary 0001                 __size_of_nibbleFromChar 003E  
                                ultoa@c 0082                                  ultoa@v 007E  
                          ?_printErrors 0001                               ??_sprintf 007E  
                             ??_strichr 0065                               ??_strcspn 006A  
                             ??_toupper 0060                          ??_init_app_ram 0063  
                             ??_stristr 0071              ??_sendVSCPModeCapabilities 006F  
            doModeVerbose@mask_priority 0291                        __end_of_strnicmp 4FB2  
                            __accesstop 0060                 __end_of__initialization 500A  
                  _printFirmwareVersion 4A72                         writeEEPROM@data 0062  
                 __size_of_getVSCPFrame 0086               receiveSendEventCANAL@data 0072  
                  doModeVerbose@id_1217 02A3                              _WriteUSART 578A  
                        __pcstackCOMRAM 0001                __size_of_printStatistics 01A8  
                  _printStatistics$1372 0096                    _printStatistics$1366 0094  
                  _printStatistics$1384 009A                    _printStatistics$1378 0098  
                 _uart_transmitOverruns 0033                         ??i1_WriteTimer0 0003  
                         __end_of_ultoa 3FD8                              __end_ofPL2 1514  
                            __end_ofPL4 1532                              __end_ofPL6 1542  
                            __end_ofPL8 155E                          ??_sendCANFrame 0096  
                     __end_of_ReadUSART 575A                           ?__RegsToCANID 0001  
           __size_of_ECANReceiveMessage 01FA                      sendVSCPFrame@pData 009C  
                       readRegister@reg 00B6                    sendVSCPDriverAck@crc 006F  
                    __size_of_findNodes 00F4                          doModeSLCAN@dlc 00A1  
                    __size_of_fifo_init 0030                      __size_of_fifo_read 00A2  
                getVSCPFrame@pvscpclass 0072                 __end_of_init_app_eeprom 4B8A  
                     __end_of_Interrupt 0268                           ReadUSART@data 0001  
                    readRegister@nodeid 00BE                          _status_led_cnt 0039  
                    __RegsToCANID@Value 0007                              _crc8_table 0300  
                     __end_of_OpenUSART 5194                 doModeVerbose@mask_class 028A  
             printNodeFirmwareVersion@i 00C4                         setFilter@filter 006A  
                          sprintf@width 008B        __end_of_printNodeFirmwareVersion 426A  
                            _doModeVscp 2C3C                                 ??_ultoa 007E  
                          _getVSCPFrame 4B8A                              __pbssBANK0 00D1  
                            __pbssBANK1 0100                              __pbssBANK2 0200  
                            __pbssBANK3 0300                             ?_OpenTimer0 0001  
                            calcCRC@crc 0070                              calcCRC@len 006E  
                 ?_printFirmwareVersion 0001                  ??_ECANSetOperationMode 0060  
                    __size_of_init_crc8 006A                           setFilter@eidh 006D  
                         setFilter@eidl 006E                           setFilter@sidh 006B  
                         setFilter@sidl 006C                              _canrxcount 00F0  
                          ?_writeEEPROM 0060                        ??_doModeVscpNode 0060  
                            _nTimeStamp 00F2             ?_receiveSendMultiEventCANAL 0001  
              __end_of_hexStringToBytes 494A                ECANSetOperationMode@mode 0060  
                               ?___wmul 0060                      __size_of_setFilter 01DE  
                               _B0RXFUL 007107                                 _B1RXFUL 007187  
                  __ECANRxFilterHitInfo 003E                                 _B2RXFUL 007207  
                               _B3RXFUL 007287                                 _B4RXFUL 007307  
                    _sendVSCPDriverNack 4630                                 _B5RXFUL 007387  
                      WriteTimer0@timer 0062                           putsUSART@data 0061  
                  _readRegisterExtended 3D16                                 ?_memcpy 0060  
                               _ECANCON 000F77                                 ?_memset 0060  
                         ??_WriteTimer0 0062                          ??__RegsToCANID 0005  
                 sendVSCPFrame@priority 009A                                 _BRGCON1 000F70  
                               _BRGCON2 000F71                                 _BRGCON3 000F72  
                               ?_strcat 0060                                 ?_strchr 0060  
                               ?_strcpy 0060                                 ?_strlen 0060  
                               ?_strtok 006C                                 ?_strspn 0066  
                            _cntRxBytes 00D5                              _cntTxBytes 00DD  
                               i1l13001 00D2                                 i1l13011 0104  
                               i1l13003 00DA                                 i1l13021 0134  
                               i1l13005 00E6                                 i1l13031 016C  
                               i1l13023 0140                                 i1l13015 0116  
                               i1l13041 01B4                                 i1l13033 017E  
                               i1l13017 0122                                 i1l13009 00F8  
                               i1l13043 01D0                                 i1l13035 0188  
                               i1l13027 0152                      __size_of_printGUID 00F0  
                               i1l13045 01D8                                 i1l13037 01A4  
                               i1l13053 0248                                 i1l13029 015C  
                               i1l13047 01FC                                 i1l13039 01AC  
                   ?_sendVSCPDriverNack 0001                                 i1l13049 0244  
                               i1l12981 003C                                 i1l12991 0090  
                               i1l12983 0042                                 i1l12993 00A2  
                               i1l12985 0068                                 i1l12995 00B2  
                               i1l12987 0078                                 i1l12979 0034  
                               i1l12997 00B6                                 i1l12989 0084  
                               i1l12999 00C2                              _fifo_write 37D6  
                    __size_of_printHelp 01C0                      __size_of_printMode 0076  
                 sendVSCPFrame@vscptype 0098                   __size_of_fifo_getFree 0084  
               doModeVerbose@value_1159 02A9                       sendCANFrame@pdata 0094  
                            _made_table 0037                                 _RXB0CON 000F60  
                               _RXB1CON 000F50                                 _RXB0FUL 007B07  
                      __ECANPointBuffer 4E6C                                 _TXB0CON 000F40  
                               _TXB1CON 000F30                                 _TXB2CON 000F20  
                    __size_of_putsUSART 0058      __end_of_sendVSCPDriverCommandReply 418C  
            _sendVSCPDriverCommandReply 40C8                                 _RXFCON0 000DD4  
                               _RXFCON1 000DD5                   _writeRegisterExtended 3A06  
      __size_of_receiveVSCPModeCanalMsg 00DC                  __size_of_doModeVerbose 1294  
                  sendEscapedUartData@c 006E                  __size_of_sendVSCPFrame 00B6  
      __end_of_sendVSCPDriverErrorFrame 44B6                              _readEEPROM 57B0  
        __size_of_receiveSendEventCANAL 013C           __end_of_receiveSendEventCANAL 36B8  
                  ??_sendVSCPDriverNack 006F              printFirmwareVersion@wrkbuf 0078  
        __size_of_receiveSendEventSLCAN 017A                         _ECANSendMessage 32A2  
         __end_of_receiveSendEventSLCAN 3118                                 __Hparam 0000  
                     __end_of_findNodes 3F06                                 __Lparam 0000  
                     __end_of_fifo_init 54AA                       __end_of_fifo_read 43DA  
                         ??_getCANFrame 0071                             ?_WriteUSART 0001  
            receiveVSCPModeCanalMsg@dlc 00B6                    __end_of_readRegister 4338  
                             ?_printMDF 0001                                 _bSilent 0101  
             receiveVSCPModeCanalMsg@id 00B2                           ??_doModeSLCAN 0096  
                               ___lldiv 4D80                         __size_of___wmul 0022  
                               _calcCRC 567C                         getCANFrame@pdlc 006D  
                               ___llmod 5076                                 ___lwdiv 52DC  
                             _FIFOEMPTY 007BA7                                 ___lwmod 5536  
                 ?_readRegisterExtended 00B6             printNodeFirmwareVersion@buf 00C0  
                  __end_of_init_app_ram 5292                            _fifo_getFree 4810  
                          init_crc8@crc 0064                                 __pcinit 4FB2  
                       __size_of_memcpy 0042                         __size_of_memset 002E  
                               __ramtop 0600                     __size_of_OpenTimer0 001E  
                             ?_strnicmp 0064                                 __ptext0 3410  
                               __ptext1 57DC                                 __ptext2 1D90  
                               __ptext3 48B0                                 __ptext4 54BA  
               receiveSendEventCANAL@id 007B                                 __ptext5 2F9E  
                               __ptext6 3F06                                 __ptext7 2C3C  
                               __ptext8 40C8                                 __ptext9 44C4  
                               crc8@crc 0067           printNodeFirmwareVersion@value 00C3  
                     ??_printStatistics 0094                               _T0CONbits 000FD5  
                       __size_of_strcat 0058                         __size_of_strchr 0062  
                       __size_of_strcpy 0030                         __size_of_strlen 0040  
                     __end_of_hexpowers 702C                         __size_of_strtok 0092  
                       __size_of_strspn 0044                                 _dpowers 6FE4  
                     __end_of_init_crc8 4F4C                                 _isdigit 56FE  
        printNodeFirmwareVersion@nodeid 00BF                     __end_of_WriteTimer0 57B0  
                        _nibbleFromChar 54BA                        ?_init_app_eeprom 0001  
                               _sprintf 1650        __end_of_sendVSCPModeCapabilities 457A  
                     __end_of_setFilter 2A7C                                 _strichr 54F8  
                        doModeVerbose@c 02AC                          doModeVerbose@i 02AA  
                        doModeVerbose@p 02B7                                 _strcspn 5370  
                               _toupper 5774                             ?_doModeVscp 0001  
                               _stristr 4C90                    __size_of_printBinary 004A  
                  end_of_initialization 500A                            Interrupt@dlc 0025  
                     __end_of_octpowers 6FE4                    __size_of_printErrors 02D6  
                               memcpy@d 0066                                 memcpy@n 0064  
                               memcpy@s 0068                  ??_printFirmwareVersion 0078  
                               itoa@buf 0070                               i1u1132_25 26C4  
                             i1u1132_27 26C6                                 memset@c 0062  
                               itoa@val 0072                                 memset@n 0064  
                               memset@p 0066                           __Lmediumconst 6FB4  
                             i1u1092_25 36DE                    __end_of_sendCANFrame 55AC  
                             i1u1093_25 36EE                               i1u1094_25 371A  
                             i1u1700_20 0132                               i1u1700_21 0130  
                             i1u1701_20 0140                               i1u1701_21 013E  
                             i1u1710_20 01D0                               i1u1702_20 0150  
                             i1u1710_21 01CE                               i1u1702_21 014E  
                             i1u1711_20 01D8                               i1u1703_20 015C  
                             i1u1711_21 01D6                               i1u1703_21 015A  
                             i1u1712_20 01FC                               i1u1704_20 016C  
                             i1u1712_21 01FA                               i1u1704_21 016A  
                             i1u1705_20 017E                               i1u1705_21 017C  
                             i1u1706_20 0188                               i1u1706_21 0186  
                             i1u1707_20 01A4                               i1u1707_21 01A2  
                             i1u1708_20 01AC                               i1u1708_21 01AA  
                             i1u1709_20 01B4                               i1u1709_21 01B2  
                             i1u1690_20 003C                               i1u1690_21 003A  
                             i1u1691_20 0068                               i1u1691_21 0066  
                             i1u1692_20 0084                               i1u1692_21 0082  
                             i1u1693_20 00C2                               i1u1693_21 00C0  
                             i1u1694_20 00D2                               i1u1694_21 00D0  
                             i1u1695_20 00E6                               i1u1695_21 00E4  
                             i1u1696_20 00F6                               i1u1696_21 00F4  
                             i1u1697_20 0104                               i1u1697_21 0102  
                             i1u1698_20 0114                               i1u1698_21 0112  
                             i1u1699_20 0122                               i1u1699_21 0120  
                   _can_receiveOverruns 00D1                 receiveSendEventSLCAN@id 0086  
                     __end_of_printGUID 3D02                         ___lldiv@divisor 0064  
                     __end_of_printHelp 2C3C                         ___lldiv@counter 006C  
                     __end_of_printMode 4E6C                       ECANSendMessage@id 006A  
                     ECANSendMessage@pb 0073            __size_of_sendEscapedUartData 0060  
                             _RXF10EIDH 000D76                               _RXF10EIDL 000D77  
                             _RXF11EIDH 000D7A                               _RXF11EIDL 000D7B  
                            ??_printMDF 00BF                               _RXF12EIDH 000D82  
                             _RCSTAbits 000FAB                               _RXF12EIDL 000D83  
                             _RXF13EIDH 000D86                               _RXF13EIDL 000D87  
                             _RXF14EIDH 000D8A                               _RXF14EIDL 000D8B  
                             _RXF15EIDH 000D92                               _RXF15EIDL 000D93  
                             _RXF10SIDH 000D74                               _RXF10SIDL 000D75  
                             _RXF11SIDH 000D78                               _RXF11SIDL 000D79  
                             _RXF12SIDH 000D80                               _RXF12SIDL 000D81  
                               postdec1 000FE5                                 postdec2 000FDD  
                             _RXF13SIDH 000D84                               _RXF13SIDL 000D85  
                             _RXF14SIDH 000D88                               _RXF14SIDL 000D89  
               __size_of_ECANInitialize 0080                               _RXF15SIDH 000D90  
                             _RXF15SIDL 000D91                                 postinc0 000FEE  
                               postinc1 000FE6                                 postinc2 000FDE  
                     __end_of_putsUSART 5244                      __ECANPointBuffer@b 0004  
                         _doModeVerbose 026C                                 utoa@buf 0067  
     __size_of_printNodeFirmwareVersion 00D0                                 utoa@val 0069  
             ?_printNodeFirmwareVersion 0001                           _sendVSCPFrame 457A  
                               strlen@s 0060                              _sequencyno 00F3  
                            _timekeeper 00E5                               _RXM0EXIDM 0078CB  
                               strspn@i 006A                              ??_strnicmp 006A  
                   __end_of_getCANFrame 4D80                              findNodes@i 00C9  
                __end_of_nibbleFromChar 54F8                     __end_of_doModeSLCAN 20F2  
                           ?_fifo_write 0001                              fifo_init@f 0064  
         __size_of_vscp_restoreDefaults 0008                              fifo_read@f 006C  
                            fifo_read@i 006A                              fifo_read@p 0068  
                             _TRISBbits 000F93                               _TRISCbits 000F94  
                ?_writeRegisterExtended 00B6       sendVSCPDriverCommandReply@cmdCode 006F  
                   __size_of_WriteUSART 0014                       readEEPROM@address 0060  
           sendVSCPModeCapabilities@crc 006F                 __end_of_ECANSendMessage 3410  
                  _uart_receiveOverruns 002F                _receivePrintEventVerbose 23D4  
                            _vscpNodeId 01AE                           ?__CANIDToRegs 0060  
                  __end_of__RegsToCANID 377C                             ?_readEEPROM 0060  
                             _TXSTAbits 000FAC                      i1WriteTimer0@timer 0003  
                     doModeVerbose@page 02AD                       doModeVerbose@preg 0284  
                        _init_crc8$2082 0060                  ??_readRegisterExtended 00BD  
                        ?_doModeVerbose 0001                          ?_sendVSCPFrame 0096  
                  __size_of_writeEEPROM 0026                          __end_of___wmul 563C  
                   __size_of_doModeVscp 01AA                             _WriteTimer0 579E  
                        __end_of_memcpy 543A                          __end_of_memset 56D8  
     __size_of_sendVSCPDriverErrorFrame 00B0               ?_sendVSCPDriverErrorFrame 0001  
                       ?_nibbleFromChar 0001                          __end_of_strcat 51EC  
                        __end_of_strchr 5076                          __end_of_strcpy 567C  
                        __end_of_strlen 547A                doModeVerbose@filter_type 028F  
                        __end_of_strtok 4A72                          __end_of_strspn 53F8  
                           __end_ofPL10 156C                             __end_ofPL20 2DF6  
                           __end_ofPL12 15B6                             __end_ofPL30 15DA  
                           __end_ofPL22 3C12                             __end_ofPL14 1CE0  
                           __end_ofPL40 378A                             __end_ofPL32 39C6  
                           __end_ofPL24 1D16                             __end_ofPL16 38D4  
                           __end_ofPL50 4770                             __end_ofPL42 1608  
                           __end_ofPL34 43F8                             __end_ofPL26 3290  
                           __end_ofPL18 1CF0                             __end_ofPL60 1650  
                           __end_ofPL52 39D6                             __end_ofPL44 1622  
                           __end_ofPL36 15EC                             __end_ofPL28 15C6  
                           __end_ofPL70 379C                             __end_ofPL62 1D5C  
                           __end_ofPL54 39E8                             __end_ofPL46 1D30  
                           __end_ofPL38 38E2                             __end_ofPL80 37C4  
                           __end_ofPL72 37B0                             __end_ofPL64 4B00  
                           __end_ofPL56 163A                             __end_ofPL48 46D0  
                           __end_ofPL90 564C                             __end_ofPL82 32A2  
                           __end_ofPL74 3FEC                             __end_ofPL66 48A2  
                           __end_ofPL58 1D46                             __end_ofPL92 38F2  
                           __end_ofPL84 37D6                             __end_ofPL76 3D16  
                           __end_ofPL68 1D6A                             __end_ofPL94 54BA  
                           __end_ofPL86 1D7C                             __end_ofPL78 39FC  
                           __end_ofPL96 3126                             __end_ofPL88 20FE  
                           __end_ofPL98 44C4                     start_initialization 4FB2  
                             _ReadUSART 573C                         findNodes@nFound 00C7  
                 doModeVerbose@reg_1158 02A2                   doModeVerbose@filterno 02A7  
               _receiveVSCPModeCanalMsg 3FEC                     __CFG_BOREN$BOACTIVE 000000  
                          doModeSLCAN@c 00A2                            ??_OpenTimer0 0060  
sendVSCPDriverCommandReply@cmdReplyCode 0070                               _Interrupt 0018  
                        ??__CANIDToRegs 0067              readRegisterExtended@nodeid 00C1  
                             _OpenUSART 5138                     sendVSCPFrame@nodeid 0099  
                       ___llmod@divisor 0071                   __size_of_readRegister 00CE  
                       ___llmod@counter 0075                   ECANReceiveMessage@ptr 0011  
                   __size_of_fifo_write 00D2                   __size_of_init_app_ram 004E  
                        _findNodes$1468 00C5                __end_of__ECANPointBuffer 4EE2  
                     __CANIDToRegs@type 0066                              init_crc8@i 0065  
                            init_crc8@j 0062                             _getCANFrame 4D08  
                              ??___wmul 0064       __size_of_sendVSCPModeCapabilities 00B6  
                     ?_hexStringToBytes 0064                             _doModeSLCAN 1D90  
             ?_sendVSCPModeCapabilities 0001              __end_of_ECANReceiveMessage 2890  
                              ??_memcpy 0066                     readRegister@timeout 00B7  
                              ??_memset 0066                   sendVSCPDriverNack@crc 006F  
              doModeVerbose@mask_nodeid 0293                   __end_ofi1_WriteTimer0 57D4  
                    ??_hexStringToBytes 0069                                ??_strcat 0064  
                              ??_strchr 0064                                ??_strcpy 0064  
                              ??_strlen 0062                      __end_of_OpenTimer0 573C  
                              ??_strtok 0070                                ??_strspn 006A  
                   __size_of_readEEPROM 0012                             __pbssBIGRAM 0400  
                           __pbssCOMRAM 002B                              ?_ReadUSART 0001  
                         __pcstackBANK0 0060                           __pcstackBANK1 01B2  
                         __pcstackBANK2 0280                     __end_of__stringdata 7FFE  
                          _readRegister 426A                   __size_of_sendCANFrame 0038  
                          _isdigit$2895 0061             ?_sendVSCPDriverCommandReply 006F  
           sendVSCPDriverErrorFrame@crc 0070                        ?_ECANSendMessage 006A  
                     sendVSCPFrame@size 009B                            _init_app_ram 5244  
                            ?_Interrupt 0001                              ?_OpenUSART 0060  
                           sprintf@_val 008D                             sprintf@flag 0092  
                           sprintf@prec 0089                               __pnvBANK0 00F5  
                      _ledFunctionality 003F                doModeVerbose@nodeid_1171 02AF  
              doModeVerbose@nodeid_1156 028D                            setFilter@val 0060  
                      ___lwdiv@dividend 0060                         ??_doModeVerbose 01B2  
         __size_of_ECANSetOperationMode 001A                         _printStatistics 2DF6  
                          ??_WriteUSART 0060                         ??_sendVSCPFrame 009E  
                        _ECANInitialize 4C10                       _sendVSCPDriverAck 46D0  
                         __pmediumconst 6FB4                                ?___lldiv 0060  
                              ?_calcCRC 006C                                ?___llmod 006D  
                             _findNodes 3E12                                ?___lwdiv 0060  
                              ?___lwmod 0060                               _fifo_init 547A  
                             _fifo_read 4338                      ?_sendVSCPDriverAck 0001  
                     __size_of_printMDF 0096                             __pintcodelo 0018  
                          _sendCANFrame 5574                       WriteTimer0@timer0 0060  
                           _COMSTATbits 000F74                                ?_isdigit 0001  
             ??_receiveVSCPModeCanalMsg 0096                     ??_sendVSCPDriverAck 006F  
                     __size_of_strnicmp 0066                         printGUID@nodeid 00BF  
                   _sendEscapedUartData 50D8                               _hexpowers 700C  
                      ___lwdiv@quotient 0065                               _init_crc8 4EE2  
                 __size_of__RegsToCANID 00C4               doModeVerbose@filter_class 0288  
                              ?_sprintf 0076                                ?_strichr 0061  
                           _cntRxFrames 00D9                            ??_doModeVscp 00B7  
                              ?_strcspn 0066                                ?_toupper 0001  
                              ?_stristr 006D                      __end_of_WriteUSART 579E  
                        __size_of_ultoa 00D2                             _cntTxFrames 00E1  
                        ___wmul@product 0064                  sendVSCPFrame@vscpclass 0096  
                             _setFilter 289E                             strnicmp@len 0068  
                             _octpowers 6FB4                                _PIE1bits 000F9D  
           __size_of_sendVSCPDriverNack 0092                  __end_of_ECANInitialize 4C90  
             __end_of_sendVSCPDriverAck 4762                                i1u610_25 37F8  
                              i1u611_25 380A                                i1u615_25 4830  
                              _PIR1bits 000F9E                   _receiveSendEventCANAL 357C  
                              _PIR2bits 000FA1                        ECANSendMessage@i 008C  
                      ECANSendMessage@j 0087                    ?_sendEscapedUartData 006C  
                 _receiveSendEventSLCAN 2F9E                                _RXF0EIDH 000F02  
                              _RXF0EIDL 000F03                                _RXB0OVFL 007BA7  
                              _RXF1EIDH 000F06                                _RXF1EIDL 000F07  
                              _RXB1OVFL 007BA6                                _RXF2EIDH 000F0A  
                              _RXF2EIDL 000F0B                                _RXF3EIDH 000F0E  
                              _RXF3EIDL 000F0F                                _RXF4EIDH 000F12  
                              _RXF4EIDL 000F13                                _RXF5EIDH 000F16  
                              _RXF5EIDL 000F17                                _RXF6EIDH 000D62  
           receiveSendMultiEventCANAL@i 007B                                _RXF6EIDL 000D63  
                     hexStringToBytes@i 0070                                _RXF7EIDH 000D66  
                              _RXF0SIDH 000F00                       hexStringToBytes@p 006E  
                              _RXF7EIDL 000D67                                _RXF0SIDL 000F01  
                             _printGUID 3C12                                _RXF8EIDH 000D6A  
                              _RXF1SIDH 000F04                                _RXF8EIDL 000D6B  
                              _RXF1SIDL 000F05                                _RXF9EIDH 000D72  
                              _RXF2SIDH 000F08                                _RXF9EIDL 000D73  
                              _RXF2SIDL 000F09                                _RXF3SIDH 000F0C  
                              _RXF3SIDL 000F0D                              printGUID@i 00C4  
                              _RXF4SIDH 000F10                                _RXF4SIDL 000F11  
                              _RXF5SIDH 000F14                                _RXF5SIDL 000F15  
                              _RXF6SIDH 000D60                                _RXF6SIDL 000D61  
                              _RXM0EIDH 000F1A                                _RXF7SIDH 000D64  
                              _RXM0EIDL 000F1B                                _RXF7SIDL 000D65  
                              _RXM1EIDH 000F1E                                _RXF8SIDH 000D68  
                              _RXM1EIDL 000F1F                                _RXF8SIDL 000D69  
                              _RXF9SIDH 000D70                                _RXF9SIDL 000D71  
                              _RXFBCON0 000DE0                                _RXFBCON1 000DE1  
                              _RXFBCON2 000DE2                                _RXFBCON3 000DE3  
                              _RXFBCON4 000DE4                                _RXFBCON5 000DE5  
                              _RXFBCON6 000DE6                                _RXFBCON7 000DE7  
                            ?_findNodes 0001                               _printHelp 2A7C  
                              _RXM0SIDH 000F18                                _RXM0SIDL 000F19  
                              _RXM1SIDH 000F1C                                _RXM1SIDL 000F1D  
                             _printMode 4DF6                              ?_fifo_init 0060  
                            ?_fifo_read 0060                                _RXERRCNT 000F75  
                    __end_of_doModeVscp 2DE6                                _TXERRCNT 000F76  
                  __end_of__CANIDToRegs 39B2                               _putsUSART 51EC  
                           __stringdata 702C                       ___wmul@multiplier 0060  
                          __RegsToCANID 36B8                               _vscpClass 01AC  
               ??_writeRegisterExtended 00BD                            ??_fifo_write 0006  
               __size_of_doModeVscpNode 0002              ??_receivePrintEventVerbose 0094  
                           ??_ReadUSART 0001                     getVSCPFrame@pNodeId 0076  
                         ??_printBinary 0061                        doModeVerbose@reg 02AE  
                         ??_printErrors 0094                              ?_init_crc8 0001  
                             _rwtimeout 0103               writeRegisterExtended@page 00B6  
                        Interrupt@flags 002A    __end_of_receiveVSCPModeMultiCanalMsg 57E0  
 __size_of_receiveVSCPModeMultiCanalMsg 0002            _receiveVSCPModeMultiCanalMsg 57DE  
                           ??_Interrupt 0013                 __end_of_printStatistics 2F9E  
                           ??_OpenUSART 0062            writeRegisterExtended@timeout 00B9  
                          ??_readEEPROM 0062                __size_of_init_app_eeprom 008A  
                            ?_setFilter 0060                         OpenUSART@config 0062  
                        findNodes@value 00C8            __end_of_vscp_restoreDefaults 57DC  
                            _EECON1bits 000FA6           __size_of_printFirmwareVersion 0080  
       __end_of_receiveVSCPModeCanalMsg 40C8                         ?_ECANInitialize 0001  
                              __Hrparam 0000                    ECANReceiveMessage@id 000D  
                 ??_sendEscapedUartData 006E                                __Lrparam 0000  
                      __CANIDToRegs@val 0062                      __end_of_fifo_write 38A8  
                      __CANIDToRegs@ptr 0060             receiveVSCPModeCanalMsg@data 00AA  
                            ?_printGUID 0001                             doModeVscp@c 00B7  
                            ?_printHelp 0001                              ?_printMode 0001  
                       nibbleFromChar@c 0060                        ??_nibbleFromChar 0060  
                      __size_of___lldiv 0076                        __size_of_calcCRC 002E  
                      __size_of___llmod 0062                        __size_of___lwdiv 004A  
                      __size_of___lwmod 003E                            ?_WriteTimer0 0060  
                      getCANFrame@pdata 006F                              ?_putsUSART 0061  
                       fifo_read@nbytes 0062                              sprintf@idx 0081  
                    __end_of_readEEPROM 57C2                   hexStringToBytes@inhex 0067  
                              calcCRC@j 006F                                calcCRC@p 006C  
                            strcat@from 0062                        __size_of_isdigit 0020  
                       ___lwdiv@divisor 0062                         ___lwdiv@counter 0064  
                              __ptext10 57DE                                __ptext11 4630  
                              __ptext20 55E4                                __ptext12 3FEC  
                              __ptext21 4EE2                                __ptext13 53F8  
                              __ptext30 3C12                                __ptext22 026C  
                              __ptext14 46D0                                __ptext31 419A  
                              __ptext23 289E                                __ptext15 4406  
                              __ptext40 20FE                                __ptext32 5194  
                              __ptext24 3A06                                __ptext16 567C  
                              __ptext41 2DF6                                __ptext33 426A  
                              __ptext25 5292                                __ptext17 357C  
                              __ptext50 5774                                __ptext42 3B0C  
                              __ptext34 457A                                __ptext26 3D16  
                              __ptext18 3126                                __ptext51 543A  
                              __ptext43 49E0                                __ptext35 5574  
                              __ptext27 564C                                __ptext19 50D8  
                              __ptext60 56FE                                __ptext52 23D4  
                              __ptext44 5370                                __ptext36 32A2  
                              __ptext28 3E12                                __ptext61 4A72  
                              __ptext53 4B8A                                __ptext45 53B4  
                              __ptext37 38F2                                __ptext29 494A  
                              __ptext70 4C10                                __ptext62 55AC  
                              __ptext54 4D08                                __ptext46 5014  
                              __ptext38 56AA                                __ptext71 575A  
                              __ptext63 4770                                __ptext55 4338  
                              __ptext47 4C90                                __ptext39 2A7C  
                              __ptext80 547A                                __ptext72 571E  
                              __ptext64 5536                                __ptext56 1650  
                              __ptext48 54F8                                __ptext73 5138  
                              __ptext65 52DC                                __ptext57 561A  
                              __ptext49 4F4C                                __ptext82 57C2  
                              __ptext74 579E                                __ptext66 4DF6  
                              __ptext58 5076                                __ptext83 4810  
                              __ptext75 57D4                                __ptext67 51EC  
                              __ptext59 4D80                                __ptext84 2696  
                              __ptext76 4B00                                __ptext68 578A  
                              __ptext85 36B8                                __ptext77 56D8  
                              __ptext69 5326                                __ptext86 4E6C  
                              __ptext78 5244                                __ptext87 37D6  
                              __ptext79 57B0                                __ptext88 573C  
              receiveSendEventCANAL@dlc 007F                receiveSendEventCANAL@crc 0080  
                        printMDF@nodeid 00BF                           ?_getVSCPFrame 0072  
                            strichr@chr 0063                        __size_of_sprintf 0672  
                            strichr@ptr 0061                        __size_of_strichr 003E  
                      __size_of_strcspn 0044                        __size_of_toupper 0016  
                      __size_of_stristr 0078                              strcpy@from 0062  
                        printGUID@value 00C3                     __end_of_printBinary 52DC  
                         __size_of_crc8 0036                           __size_of_atoi 00F8  
                         __size_of_main 016C                           __size_of_init 004A  
                         __size_of_itoa 0038           ?_receiveVSCPModeMultiCanalMsg 0001  
                   __end_of_printErrors 23D4                           __size_of_utoa 00A0  
                ?_receiveSendEventCANAL 0001                              strnicmp@s1 0064  
                            strnicmp@s2 0066                             _inputBuffer 0200  
            __size_of_sendVSCPDriverAck 0092          receiveSendMultiEventCANAL@data 0072  
                ?_receiveSendEventSLCAN 0001                           ??_writeEEPROM 0063  
              _printNodeFirmwareVersion 419A                     ECANSendMessage@data 006E  
              ECANSendMessage@tempBSEL0 0088                                _printMDF 494A  
                             printMDF@i 00C3                               printMDF@p 00C1  
                          ?_getCANFrame 006D                     ECANSendMessage@mode 0085  
                   ECANSendMessage@temp 008B                       ?__ECANPointBuffer 0001  
          ??_receiveSendMultiEventCANAL 0072                                atoi@sign 006A  
                           ??_findNodes 00C5                            ?_doModeSLCAN 0001  
                           ??_fifo_init 0064                             ??_fifo_read 0064  
                              _vscpData 01A4           __size_of_readRegisterExtended 00FC  
                              main@argc 00CA                                main@argv 00CC  
                              _vscpSize 01B0                      ??__ECANPointBuffer 0004  
                              _vscpType 01B1                             _RXB0FILHIT0 007B00  
     sendVSCPDriverErrorFrame@errorcode 006F                         doModeVerbose@id 0280  
                       doModeVerbose@rv 02A0                                _strnicmp 4F4C  
                      init_app_eeprom@i 0063             writeRegisterExtended@nodeid 00C1  
                         Interrupt@data 001C                         _serialInputFifo 0048  
                           _RXB1CONbits 000F50                             _OSCTUNEbits 000F9B  
                            _INTCONbits 000FF2                          OpenUSART@spbrg 0060  
                   ECANReceiveMessage@i 000E                                memcpy@d1 0060  
                              memcpy@s1 0062               receivePrintEventVerbose@i 00A5  
                              itoa@base 0074                                isdigit@c 0062  
                    _ECANReceiveMessage 2696                                memset@p1 0060  
                           ??_init_crc8 0060                               ultoa@base 007C  
                        ??_getVSCPFrame 007E               __size_of_hexStringToBytes 009A  
                       sendVSCPFrame@id 00B2                                intlevel1 0000  
                             sprintf@ap 0088                               sprintf@sp 0076  
                  hexStringToBytes@size 0066                               strchr@chr 0062  
                      ?_printStatistics 0001                receiveSendEventSLCAN@dlc 008A  
                      ___lwmod@dividend 0060                               strchr@ptr 0060  
                   ?_ECANReceiveMessage 0008                        ___lldiv@dividend 0060  
                           ??_setFilter 0064                           printMDF@value 00C0  
   __size_of_receiveSendMultiEventCANAL 015A                           fifo_getFree@f 000B  
                             strcspn@s1 0066                               strcspn@s2 0068  
    receiveSendMultiEventCANAL@msgcount 007A                 ECANSendMessage@msgFlags 0071  
                            _OSCCONbits 000FD3                               strnicmp@r 006C  
                             stristr@s1 006D                               stristr@s2 006F  
                    ECANSendMessage@ptr 008D                       ??_init_app_eeprom 0063  
                 __size_of__CANIDToRegs 00C0                             ??_printGUID 00BF  
                        readEEPROM@data 0062                             ??_printHelp 0065  
                           ??_printMode 0065                _sendVSCPDriverErrorFrame 4406  
                         ?_fifo_getFree 0001                  ECANSendMessage@dataLen 0070  
                   __end_of_writeEEPROM 56FE                     __ECANPointBuffer@pt 0005  
                  ??_ECANReceiveMessage 000B                             ??_putsUSART 0063  
                              utoa@base 006B                                ultoa@buf 0076  
                              ultoa@val 0078                           fifo_init@size 0062  
                              sprintf@c 0091                                sprintf@f 0078  
                   hexStringToBytes@buf 0064                                strcat@cp 0064  
                   hexStringToBytes@len 006C                          _doModeVscpNode 57DC  
                              strcat@to 0060        __end_of_receivePrintEventVerbose 2696  
                ECANSendMessage@buffers 0086                        ___lldiv@quotient 0068  
                       ___lwmod@divisor 0062            __end_of_ECANSetOperationMode 5774  
                  _vscp_restoreDefaults 57D4                            printGUID@buf 00C0  
                              strcpy@cp 0064                                strlen@cp 0062  
                              strcpy@to 0060                         ___lwmod@counter 0064  
                              strcspn@i 006A                                toupper@c 0060  
                           _printBinary 5292                                strtok@s1 006C  
                              strtok@s2 006E                                strspn@s1 0066  
                              strspn@s2 0068                              _RXM1EXIDEN 0078EB  
                              strtok@sp 003B                  ECANSendMessage@tempPtr 0089  
                           _printErrors 20FE                            fifo_init@buf 0060  
                          fifo_read@buf 0060           sendVSCPDriverCommandReply@crc 0071  
                          __CANIDToRegs 38F2                  __size_ofi1_WriteTimer0 0012  
                          _USART_Status 003D               readRegisterExtended@value 00BB  
              _sendVSCPModeCapabilities 44C4                __size_of_ECANSendMessage 016E  
