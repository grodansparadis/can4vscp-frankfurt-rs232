

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Tue Feb 24 23:06:19 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	text81,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	text85,global,reloc=2,class=CODE,delta=1
   104                           	psect	text86,global,reloc=2,class=CODE,delta=1
   105                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   106                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   107                           	psect	pa_nodes,global,class=CODE,delta=1
   108  0000                     tblptru	equ	0xFF8
   109                           tblptrh	equ	0xFF7
   110                           tblptrl	equ	0xFF6
   111                           tablat	equ	0xFF5
   112                           prodh	equ	0xFF4
   113                           prodl	equ	0xFF3
   114                           intcon	equ	0xFF2
   115                           indf0	equ	0xFEF
   116                           fsr0h	equ	0xFEA
   117                           fsr0l	equ	0xFE9
   118                           wreg	equ	0xFE8
   119                           indf1	equ	0xFE7
   120                           postinc1	equ	0xFE6
   121                           postdec1	equ	0xFE5
   122                           fsr1h	equ	0xFE2
   123                           fsr1l	equ	0xFE1
   124                           indf2	equ	0xFDF
   125                           postinc2	equ	0xFDE
   126                           postdec2	equ	0xFDD
   127                           plusw2	equ	0xFDB
   128                           fsr2h	equ	0xFDA
   129                           fsr2l	equ	0xFD9
   130                           status	equ	0xFD8
   131                           
   132                           	psect	mediumconst
   133  006FD8                     __pmediumconst:
   134                           	opt stack 0
   135  006FD8                     _octpowers:
   136                           	opt stack 0
   137  006FD8  0001               	dw	1
   138  006FDA  0000               	dw	0
   139  006FDC  0008               	dw	8
   140  006FDE  0000               	dw	0
   141  006FE0  0040               	dw	64
   142  006FE2  0000               	dw	0
   143  006FE4  0200               	dw	512
   144  006FE6  0000               	dw	0
   145  006FE8  1000               	dw	4096
   146  006FEA  0000               	dw	0
   147  006FEC  8000               	dw	32768
   148  006FEE  0000               	dw	0
   149  006FF0  0000               	dw	0
   150  006FF2  0004               	dw	4
   151  006FF4  0000               	dw	0
   152  006FF6  0020               	dw	32
   153  006FF8  0000               	dw	0
   154  006FFA  0100               	dw	256
   155  006FFC  0000               	dw	0
   156  006FFE  0800               	dw	2048
   157  007000  0000               	dw	0
   158  007002  4000               	dw	16384
   159  007004  0000               	dw	0
   160  007006  0000               	dw	0
   161  007008                     __end_of_octpowers:
   162                           	opt stack 0
   163  007008                     _dpowers:
   164                           	opt stack 0
   165  007008  0001               	dw	1
   166  00700A  0000               	dw	0
   167  00700C  000A               	dw	10
   168  00700E  0000               	dw	0
   169  007010  0064               	dw	100
   170  007012  0000               	dw	0
   171  007014  03E8               	dw	1000
   172  007016  0000               	dw	0
   173  007018  2710               	dw	10000
   174  00701A  0000               	dw	0
   175  00701C  86A0               	dw	34464
   176  00701E  0001               	dw	1
   177  007020  4240               	dw	16960
   178  007022  000F               	dw	15
   179  007024  9680               	dw	38528
   180  007026  0098               	dw	152
   181  007028  E100               	dw	57600
   182  00702A  05F5               	dw	1525
   183  00702C  CA00               	dw	51712
   184  00702E  3B9A               	dw	15258
   185  007030                     __end_of_dpowers:
   186                           	opt stack 0
   187  007030                     _hexpowers:
   188                           	opt stack 0
   189  007030  0001               	dw	1
   190  007032  0000               	dw	0
   191  007034  0010               	dw	16
   192  007036  0000               	dw	0
   193  007038  0100               	dw	256
   194  00703A  0000               	dw	0
   195  00703C  1000               	dw	4096
   196  00703E  0000               	dw	0
   197  007040  0000               	dw	0
   198  007042  0001               	dw	1
   199  007044  0000               	dw	0
   200  007046  0010               	dw	16
   201  007048  0000               	dw	0
   202  00704A  0100               	dw	256
   203  00704C  0000               	dw	0
   204  00704E  1000               	dw	4096
   205  007050                     __end_of_hexpowers:
   206                           	opt stack 0
   207  0000                     _BRGCON1	set	3952
   208  0000                     _BRGCON2	set	3953
   209  0000                     _BRGCON3	set	3954
   210  0000                     _BSEL0	set	3576
   211  0000                     _CANCON	set	3951
   212  0000                     _CIOCON	set	3955
   213  0000                     _COMSTATbits	set	3956
   214  0000                     _ECANCON	set	3959
   215  0000                     _EEADR	set	4009
   216  0000                     _EECON1bits	set	4006
   217  0000                     _EECON2	set	4007
   218  0000                     _EEDATA	set	4008
   219  0000                     _INTCONbits	set	4082
   220  0000                     _MSEL0	set	3568
   221  0000                     _MSEL1	set	3569
   222  0000                     _MSEL2	set	3570
   223  0000                     _OSCCONbits	set	4051
   224  0000                     _OSCTUNEbits	set	3995
   225  0000                     _PIE1bits	set	3997
   226  0000                     _PIR1bits	set	3998
   227  0000                     _PIR2bits	set	4001
   228  0000                     _PIR3bits	set	4004
   229  0000                     _RCREG	set	4014
   230  0000                     _RCSTA	set	4011
   231  0000                     _RCSTAbits	set	4011
   232  0000                     _RXB1CONbits	set	3920
   233  0000                     _RXERRCNT	set	3957
   234  0000                     _RXF0EIDH	set	3842
   235  0000                     _RXF0EIDL	set	3843
   236  0000                     _RXF0SIDH	set	3840
   237  0000                     _RXF0SIDL	set	3841
   238  0000                     _RXF10EIDH	set	3446
   239  0000                     _RXF10EIDL	set	3447
   240  0000                     _RXF10SIDH	set	3444
   241  0000                     _RXF10SIDL	set	3445
   242  0000                     _RXF11EIDH	set	3450
   243  0000                     _RXF11EIDL	set	3451
   244  0000                     _RXF11SIDH	set	3448
   245  0000                     _RXF11SIDL	set	3449
   246  0000                     _RXF12EIDH	set	3458
   247  0000                     _RXF12EIDL	set	3459
   248  0000                     _RXF12SIDH	set	3456
   249  0000                     _RXF12SIDL	set	3457
   250  0000                     _RXF13EIDH	set	3462
   251  0000                     _RXF13EIDL	set	3463
   252  0000                     _RXF13SIDH	set	3460
   253  0000                     _RXF13SIDL	set	3461
   254  0000                     _RXF14EIDH	set	3466
   255  0000                     _RXF14EIDL	set	3467
   256  0000                     _RXF14SIDH	set	3464
   257  0000                     _RXF14SIDL	set	3465
   258  0000                     _RXF15EIDH	set	3474
   259  0000                     _RXF15EIDL	set	3475
   260  0000                     _RXF15SIDH	set	3472
   261  0000                     _RXF15SIDL	set	3473
   262  0000                     _RXF1EIDH	set	3846
   263  0000                     _RXF1EIDL	set	3847
   264  0000                     _RXF1SIDH	set	3844
   265  0000                     _RXF1SIDL	set	3845
   266  0000                     _RXF2EIDH	set	3850
   267  0000                     _RXF2EIDL	set	3851
   268  0000                     _RXF2SIDH	set	3848
   269  0000                     _RXF2SIDL	set	3849
   270  0000                     _RXF3EIDH	set	3854
   271  0000                     _RXF3EIDL	set	3855
   272  0000                     _RXF3SIDH	set	3852
   273  0000                     _RXF3SIDL	set	3853
   274  0000                     _RXF4EIDH	set	3858
   275  0000                     _RXF4EIDL	set	3859
   276  0000                     _RXF4SIDH	set	3856
   277  0000                     _RXF4SIDL	set	3857
   278  0000                     _RXF5EIDH	set	3862
   279  0000                     _RXF5EIDL	set	3863
   280  0000                     _RXF5SIDH	set	3860
   281  0000                     _RXF5SIDL	set	3861
   282  0000                     _RXF6EIDH	set	3426
   283  0000                     _RXF6EIDL	set	3427
   284  0000                     _RXF6SIDH	set	3424
   285  0000                     _RXF6SIDL	set	3425
   286  0000                     _RXF7EIDH	set	3430
   287  0000                     _RXF7EIDL	set	3431
   288  0000                     _RXF7SIDH	set	3428
   289  0000                     _RXF7SIDL	set	3429
   290  0000                     _RXF8EIDH	set	3434
   291  0000                     _RXF8EIDL	set	3435
   292  0000                     _RXF8SIDH	set	3432
   293  0000                     _RXF8SIDL	set	3433
   294  0000                     _RXF9EIDH	set	3442
   295  0000                     _RXF9EIDL	set	3443
   296  0000                     _RXF9SIDH	set	3440
   297  0000                     _RXF9SIDL	set	3441
   298  0000                     _RXFBCON0	set	3552
   299  0000                     _RXFBCON1	set	3553
   300  0000                     _RXFBCON2	set	3554
   301  0000                     _RXFBCON3	set	3555
   302  0000                     _RXFBCON4	set	3556
   303  0000                     _RXFBCON5	set	3557
   304  0000                     _RXFBCON6	set	3558
   305  0000                     _RXFBCON7	set	3559
   306  0000                     _RXFCON0	set	3540
   307  0000                     _RXFCON1	set	3541
   308  0000                     _RXM0EIDH	set	3866
   309  0000                     _RXM0EIDL	set	3867
   310  0000                     _RXM0SIDL	set	3865
   311  0000                     _RXM1EIDH	set	3870
   312  0000                     _RXM1EIDL	set	3871
   313  0000                     _RXM1SIDL	set	3869
   314  0000                     _SPBRG	set	4015
   315  0000                     _SPBRGH	set	4016
   316  0000                     _T0CON	set	4053
   317  0000                     _T0CONbits	set	4053
   318  0000                     _TMR0H	set	4055
   319  0000                     _TMR0L	set	4054
   320  0000                     _TRISBbits	set	3987
   321  0000                     _TRISCbits	set	3988
   322  0000                     _TXERRCNT	set	3958
   323  0000                     _TXREG	set	4013
   324  0000                     _TXSTA	set	4012
   325  0000                     _TXSTAbits	set	4012
   326  0000                     _B0RXFUL	set	28935
   327  0000                     _B0TXEN	set	28610
   328  0000                     _B1RXFUL	set	29063
   329  0000                     _B1TXEN	set	28611
   330  0000                     _B2RXFUL	set	29191
   331  0000                     _B2TXEN	set	28612
   332  0000                     _B3RXFUL	set	29319
   333  0000                     _B3TXEN	set	28613
   334  0000                     _B4RXFUL	set	29447
   335  0000                     _B4TXEN	set	28614
   336  0000                     _B5RXFUL	set	29575
   337  0000                     _B5TXEN	set	28615
   338  0000                     _FIFOEMPTY	set	31655
   339  0000                     _IRXIF	set	32039
   340  0000                     _LATC1	set	31833
   341  0000                     _MDSEL0	set	31678
   342  0000                     _MDSEL1	set	31679
   343  0000                     _PEIE	set	32662
   344  0000                     _RCIE	set	31981
   345  0000                     _RCIF	set	31989
   346  0000                     _RCIP	set	31997
   347  0000                     _RXB0FILHIT0	set	31488
   348  0000                     _RXB0FUL	set	31495
   349  0000                     _RXB0IF	set	32032
   350  0000                     _RXB0OVFL	set	31655
   351  0000                     _RXB1IF	set	32033
   352  0000                     _RXB1OVFL	set	31654
   353  0000                     _RXM0EXIDM	set	30923
   354  0000                     _RXM1EXIDEN	set	30955
   355  0000                     _B0CON	set	3616
   356  0000                     _B1CON	set	3632
   357  0000                     _B2CON	set	3648
   358  0000                     _B3CON	set	3664
   359  0000                     _B4CON	set	3680
   360  0000                     _B5CON	set	3696
   361  0000                     _RXB0CON	set	3936
   362  0000                     _RXB1CON	set	3920
   363  0000                     _RXM0SIDH	set	3864
   364  0000                     _RXM1SIDH	set	3868
   365  0000                     _TXB0CON	set	3904
   366  0000                     _TXB1CON	set	3888
   367  0000                     _TXB2CON	set	3872
   368  007050                     __stringdata:
   369                           	opt stack 0
   370  007050                     STR_219:
   371  007050  20                 	db	32
   372  007051  20                 	db	32
   373  007052  20                 	db	32
   374  007053  20                 	db	32
   375  007054  20                 	db	32
   376  007055  20                 	db	32
   377  007056  20                 	db	32
   378  007057  20                 	db	32
   379  007058  20                 	db	32
   380  007059  46                 	db	70	;'F'
   381  00705A  6F                 	db	111	;'o'
   382  00705B  72                 	db	114	;'r'
   383  00705C  6D                 	db	109	;'m'
   384  00705D  61                 	db	97	;'a'
   385  00705E  74                 	db	116	;'t'
   386  00705F  3A                 	db	58	;':'
   387  007060  20                 	db	32
   388  007061  66                 	db	102	;'f'
   389  007062  69                 	db	105	;'i'
   390  007063  6C                 	db	108	;'l'
   391  007064  74                 	db	116	;'t'
   392  007065  65                 	db	101	;'e'
   393  007066  72                 	db	114	;'r'
   394  007067  20                 	db	32
   395  007068  66                 	db	102	;'f'
   396  007069  69                 	db	105	;'i'
   397  00706A  6C                 	db	108	;'l'
   398  00706B  74                 	db	116	;'t'
   399  00706C  65                 	db	101	;'e'
   400  00706D  72                 	db	114	;'r'
   401  00706E  6E                 	db	110	;'n'
   402  00706F  6F                 	db	111	;'o'
   403  007070  2C                 	db	44
   404  007071  70                 	db	112	;'p'
   405  007072  72                 	db	114	;'r'
   406  007073  69                 	db	105	;'i'
   407  007074  6F                 	db	111	;'o'
   408  007075  2C                 	db	44
   409  007076  63                 	db	99	;'c'
   410  007077  6C                 	db	108	;'l'
   411  007078  61                 	db	97	;'a'
   412  007079  73                 	db	115	;'s'
   413  00707A  73                 	db	115	;'s'
   414  00707B  2C                 	db	44
   415  00707C  74                 	db	116	;'t'
   416  00707D  79                 	db	121	;'y'
   417  00707E  70                 	db	112	;'p'
   418  00707F  65                 	db	101	;'e'
   419  007080  2C                 	db	44
   420  007081  6E                 	db	110	;'n'
   421  007082  6F                 	db	111	;'o'
   422  007083  64                 	db	100	;'d'
   423  007084  65                 	db	101	;'e'
   424  007085  69                 	db	105	;'i'
   425  007086  64                 	db	100	;'d'
   426  007087  20                 	db	32
   427  007088  20                 	db	32
   428  007089  28                 	db	40
   429  00708A  66                 	db	102	;'f'
   430  00708B  69                 	db	105	;'i'
   431  00708C  6C                 	db	108	;'l'
   432  00708D  74                 	db	116	;'t'
   433  00708E  65                 	db	101	;'e'
   434  00708F  72                 	db	114	;'r'
   435  007090  6E                 	db	110	;'n'
   436  007091  6F                 	db	111	;'o'
   437  007092  20                 	db	32
   438  007093  3D                 	db	61	;'='
   439  007094  20                 	db	32
   440  007095  30                 	db	48	;'0'
   441  007096  2D                 	db	45
   442  007097  31                 	db	49	;'1'
   443  007098  35                 	db	53	;'5'
   444  007099  29                 	db	41
   445  00709A  2E                 	db	46
   446  00709B  0D                 	db	13
   447  00709C  0A                 	db	10
   448  00709D  00                 	db	0
   449  00709E                     STR_217:
   450  00709E  49                 	db	73	;'I'
   451  00709F  4E                 	db	78	;'N'
   452  0070A0  46                 	db	70	;'F'
   453  0070A1  4F                 	db	79	;'O'
   454  0070A2  20                 	db	32
   455  0070A3  2D                 	db	45
   456  0070A4  20                 	db	32
   457  0070A5  47                 	db	71	;'G'
   458  0070A6  65                 	db	101	;'e'
   459  0070A7  74                 	db	116	;'t'
   460  0070A8  20                 	db	32
   461  0070A9  69                 	db	105	;'i'
   462  0070AA  6E                 	db	110	;'n'
   463  0070AB  66                 	db	102	;'f'
   464  0070AC  6F                 	db	111	;'o'
   465  0070AD  20                 	db	32
   466  0070AE  61                 	db	97	;'a'
   467  0070AF  62                 	db	98	;'b'
   468  0070B0  6F                 	db	111	;'o'
   469  0070B1  75                 	db	117	;'u'
   470  0070B2  74                 	db	116	;'t'
   471  0070B3  20                 	db	32
   472  0070B4  61                 	db	97	;'a'
   473  0070B5  6E                 	db	110	;'n'
   474  0070B6  20                 	db	32
   475  0070B7  65                 	db	101	;'e'
   476  0070B8  78                 	db	120	;'x'
   477  0070B9  69                 	db	105	;'i'
   478  0070BA  73                 	db	115	;'s'
   479  0070BB  74                 	db	116	;'t'
   480  0070BC  65                 	db	101	;'e'
   481  0070BD  6E                 	db	110	;'n'
   482  0070BE  74                 	db	116	;'t'
   483  0070BF  20                 	db	32
   484  0070C0  6E                 	db	110	;'n'
   485  0070C1  6F                 	db	111	;'o'
   486  0070C2  64                 	db	100	;'d'
   487  0070C3  65                 	db	101	;'e'
   488  0070C4  20                 	db	32
   489  0070C5  6F                 	db	111	;'o'
   490  0070C6  6E                 	db	110	;'n'
   491  0070C7  20                 	db	32
   492  0070C8  74                 	db	116	;'t'
   493  0070C9  68                 	db	104	;'h'
   494  0070CA  65                 	db	101	;'e'
   495  0070CB  20                 	db	32
   496  0070CC  62                 	db	98	;'b'
   497  0070CD  75                 	db	117	;'u'
   498  0070CE  73                 	db	115	;'s'
   499  0070CF  20                 	db	32
   500  0070D0  28                 	db	40
   501  0070D1  46                 	db	70	;'F'
   502  0070D2  6F                 	db	111	;'o'
   503  0070D3  72                 	db	114	;'r'
   504  0070D4  6D                 	db	109	;'m'
   505  0070D5  61                 	db	97	;'a'
   506  0070D6  74                 	db	116	;'t'
   507  0070D7  3A                 	db	58	;':'
   508  0070D8  20                 	db	32
   509  0070D9  69                 	db	105	;'i'
   510  0070DA  6E                 	db	110	;'n'
   511  0070DB  66                 	db	102	;'f'
   512  0070DC  6F                 	db	111	;'o'
   513  0070DD  20                 	db	32
   514  0070DE  6E                 	db	110	;'n'
   515  0070DF  69                 	db	105	;'i'
   516  0070E0  63                 	db	99	;'c'
   517  0070E1  6B                 	db	107	;'k'
   518  0070E2  6E                 	db	110	;'n'
   519  0070E3  61                 	db	97	;'a'
   520  0070E4  6D                 	db	109	;'m'
   521  0070E5  65                 	db	101	;'e'
   522  0070E6  29                 	db	41
   523  0070E7  2E                 	db	46
   524  0070E8  0D                 	db	13
   525  0070E9  0A                 	db	10
   526  0070EA  00                 	db	0
   527  0070EB                     STR_221:
   528  0070EB  20                 	db	32
   529  0070EC  20                 	db	32
   530  0070ED  20                 	db	32
   531  0070EE  20                 	db	32
   532  0070EF  20                 	db	32
   533  0070F0  20                 	db	32
   534  0070F1  20                 	db	32
   535  0070F2  46                 	db	70	;'F'
   536  0070F3  6F                 	db	111	;'o'
   537  0070F4  72                 	db	114	;'r'
   538  0070F5  6D                 	db	109	;'m'
   539  0070F6  61                 	db	97	;'a'
   540  0070F7  74                 	db	116	;'t'
   541  0070F8  3A                 	db	58	;':'
   542  0070F9  20                 	db	32
   543  0070FA  6D                 	db	109	;'m'
   544  0070FB  61                 	db	97	;'a'
   545  0070FC  73                 	db	115	;'s'
   546  0070FD  6B                 	db	107	;'k'
   547  0070FE  20                 	db	32
   548  0070FF  6D                 	db	109	;'m'
   549  007100  61                 	db	97	;'a'
   550  007101  73                 	db	115	;'s'
   551  007102  6B                 	db	107	;'k'
   552  007103  6E                 	db	110	;'n'
   553  007104  6F                 	db	111	;'o'
   554  007105  2C                 	db	44
   555  007106  70                 	db	112	;'p'
   556  007107  72                 	db	114	;'r'
   557  007108  69                 	db	105	;'i'
   558  007109  6F                 	db	111	;'o'
   559  00710A  2C                 	db	44
   560  00710B  63                 	db	99	;'c'
   561  00710C  6C                 	db	108	;'l'
   562  00710D  61                 	db	97	;'a'
   563  00710E  73                 	db	115	;'s'
   564  00710F  73                 	db	115	;'s'
   565  007110  2C                 	db	44
   566  007111  74                 	db	116	;'t'
   567  007112  79                 	db	121	;'y'
   568  007113  70                 	db	112	;'p'
   569  007114  65                 	db	101	;'e'
   570  007115  2C                 	db	44
   571  007116  6E                 	db	110	;'n'
   572  007117  6F                 	db	111	;'o'
   573  007118  64                 	db	100	;'d'
   574  007119  65                 	db	101	;'e'
   575  00711A  69                 	db	105	;'i'
   576  00711B  64                 	db	100	;'d'
   577  00711C  20                 	db	32
   578  00711D  28                 	db	40
   579  00711E  6D                 	db	109	;'m'
   580  00711F  61                 	db	97	;'a'
   581  007120  73                 	db	115	;'s'
   582  007121  6B                 	db	107	;'k'
   583  007122  6E                 	db	110	;'n'
   584  007123  6F                 	db	111	;'o'
   585  007124  20                 	db	32
   586  007125  3D                 	db	61	;'='
   587  007126  20                 	db	32
   588  007127  30                 	db	48	;'0'
   589  007128  20                 	db	32
   590  007129  6F                 	db	111	;'o'
   591  00712A  72                 	db	114	;'r'
   592  00712B  20                 	db	32
   593  00712C  31                 	db	49	;'1'
   594  00712D  29                 	db	41
   595  00712E  2E                 	db	46
   596  00712F  0D                 	db	13
   597  007130  0A                 	db	10
   598  007131  00                 	db	0
   599  007132                     STR_215:
   600  007132  52                 	db	82	;'R'
   601  007133  52                 	db	82	;'R'
   602  007134  45                 	db	69	;'E'
   603  007135  47                 	db	71	;'G'
   604  007136  20                 	db	32
   605  007137  2D                 	db	45
   606  007138  20                 	db	32
   607  007139  52                 	db	82	;'R'
   608  00713A  65                 	db	101	;'e'
   609  00713B  61                 	db	97	;'a'
   610  00713C  64                 	db	100	;'d'
   611  00713D  20                 	db	32
   612  00713E  72                 	db	114	;'r'
   613  00713F  65                 	db	101	;'e'
   614  007140  67                 	db	103	;'g'
   615  007141  69                 	db	105	;'i'
   616  007142  73                 	db	115	;'s'
   617  007143  74                 	db	116	;'t'
   618  007144  65                 	db	101	;'e'
   619  007145  72                 	db	114	;'r'
   620  007146  28                 	db	40
   621  007147  73                 	db	115	;'s'
   622  007148  29                 	db	41
   623  007149  20                 	db	32
   624  00714A  6F                 	db	111	;'o'
   625  00714B  66                 	db	102	;'f'
   626  00714C  20                 	db	32
   627  00714D  6E                 	db	110	;'n'
   628  00714E  6F                 	db	111	;'o'
   629  00714F  64                 	db	100	;'d'
   630  007150  65                 	db	101	;'e'
   631  007151  20                 	db	32
   632  007152  28                 	db	40
   633  007153  46                 	db	70	;'F'
   634  007154  6F                 	db	111	;'o'
   635  007155  72                 	db	114	;'r'
   636  007156  6D                 	db	109	;'m'
   637  007157  61                 	db	97	;'a'
   638  007158  74                 	db	116	;'t'
   639  007159  3A                 	db	58	;':'
   640  00715A  20                 	db	32
   641  00715B  72                 	db	114	;'r'
   642  00715C  72                 	db	114	;'r'
   643  00715D  65                 	db	101	;'e'
   644  00715E  67                 	db	103	;'g'
   645  00715F  20                 	db	32
   646  007160  5B                 	db	91	;'['
   647  007161  70                 	db	112	;'p'
   648  007162  61                 	db	97	;'a'
   649  007163  67                 	db	103	;'g'
   650  007164  65                 	db	101	;'e'
   651  007165  3A                 	db	58	;':'
   652  007166  5D                 	db	93	;']'
   653  007167  72                 	db	114	;'r'
   654  007168  65                 	db	101	;'e'
   655  007169  67                 	db	103	;'g'
   656  00716A  20                 	db	32
   657  00716B  5B                 	db	91	;'['
   658  00716C  63                 	db	99	;'c'
   659  00716D  6F                 	db	111	;'o'
   660  00716E  75                 	db	117	;'u'
   661  00716F  6E                 	db	110	;'n'
   662  007170  74                 	db	116	;'t'
   663  007171  5D                 	db	93	;']'
   664  007172  29                 	db	41
   665  007173  2E                 	db	46
   666  007174  0D                 	db	13
   667  007175  0A                 	db	10
   668  007176  00                 	db	0
   669  007177                     STR_230:
   670  007177  2D                 	db	45
   671  007178  2D                 	db	45
   672  007179  2D                 	db	45
   673  00717A  2D                 	db	45
   674  00717B  2D                 	db	45
   675  00717C  2D                 	db	45
   676  00717D  2D                 	db	45
   677  00717E  2D                 	db	45
   678  00717F  2D                 	db	45
   679  007180  2D                 	db	45
   680  007181  2D                 	db	45
   681  007182  2D                 	db	45
   682  007183  2D                 	db	45
   683  007184  2D                 	db	45
   684  007185  2D                 	db	45
   685  007186  2D                 	db	45
   686  007187  2D                 	db	45
   687  007188  2D                 	db	45
   688  007189  2D                 	db	45
   689  00718A  2D                 	db	45
   690  00718B  2D                 	db	45
   691  00718C  2D                 	db	45
   692  00718D  2D                 	db	45
   693  00718E  2D                 	db	45
   694  00718F  2D                 	db	45
   695  007190  2D                 	db	45
   696  007191  2D                 	db	45
   697  007192  2D                 	db	45
   698  007193  2D                 	db	45
   699  007194  2D                 	db	45
   700  007195  2D                 	db	45
   701  007196  2D                 	db	45
   702  007197  2D                 	db	45
   703  007198  2D                 	db	45
   704  007199  2D                 	db	45
   705  00719A  2D                 	db	45
   706  00719B  2D                 	db	45
   707  00719C  2D                 	db	45
   708  00719D  2D                 	db	45
   709  00719E  2D                 	db	45
   710  00719F  2D                 	db	45
   711  0071A0  2D                 	db	45
   712  0071A1  2D                 	db	45
   713  0071A2  2D                 	db	45
   714  0071A3  2D                 	db	45
   715  0071A4  2D                 	db	45
   716  0071A5  2D                 	db	45
   717  0071A6  2D                 	db	45
   718  0071A7  2D                 	db	45
   719  0071A8  2D                 	db	45
   720  0071A9  2D                 	db	45
   721  0071AA  2D                 	db	45
   722  0071AB  2D                 	db	45
   723  0071AC  2D                 	db	45
   724  0071AD  2D                 	db	45
   725  0071AE  2D                 	db	45
   726  0071AF  2D                 	db	45
   727  0071B0  2D                 	db	45
   728  0071B1  2D                 	db	45
   729  0071B2  2D                 	db	45
   730  0071B3  2D                 	db	45
   731  0071B4  2D                 	db	45
   732  0071B5  2D                 	db	45
   733  0071B6  2D                 	db	45
   734  0071B7  0D                 	db	13
   735  0071B8  0A                 	db	10
   736  0071B9  00                 	db	0
   737  0071BA                     STR_225:
   738  0071BA  20                 	db	32
   739  0071BB  20                 	db	32
   740  0071BC  20                 	db	32
   741  0071BD  20                 	db	32
   742  0071BE  52                 	db	82	;'R'
   743  0071BF  57                 	db	87	;'W'
   744  0071C0  54                 	db	84	;'T'
   745  0071C1  49                 	db	73	;'I'
   746  0071C2  4D                 	db	77	;'M'
   747  0071C3  45                 	db	69	;'E'
   748  0071C4  4F                 	db	79	;'O'
   749  0071C5  55                 	db	85	;'U'
   750  0071C6  54                 	db	84	;'T'
   751  0071C7  20                 	db	32
   752  0071C8  2D                 	db	45
   753  0071C9  20                 	db	32
   754  0071CA  53                 	db	83	;'S'
   755  0071CB  65                 	db	101	;'e'
   756  0071CC  74                 	db	116	;'t'
   757  0071CD  20                 	db	32
   758  0071CE  72                 	db	114	;'r'
   759  0071CF  65                 	db	101	;'e'
   760  0071D0  67                 	db	103	;'g'
   761  0071D1  69                 	db	105	;'i'
   762  0071D2  73                 	db	115	;'s'
   763  0071D3  74                 	db	116	;'t'
   764  0071D4  65                 	db	101	;'e'
   765  0071D5  72                 	db	114	;'r'
   766  0071D6  20                 	db	32
   767  0071D7  72                 	db	114	;'r'
   768  0071D8  65                 	db	101	;'e'
   769  0071D9  61                 	db	97	;'a'
   770  0071DA  64                 	db	100	;'d'
   771  0071DB  2F                 	db	47
   772  0071DC  77                 	db	119	;'w'
   773  0071DD  72                 	db	114	;'r'
   774  0071DE  69                 	db	105	;'i'
   775  0071DF  74                 	db	116	;'t'
   776  0071E0  65                 	db	101	;'e'
   777  0071E1  20                 	db	32
   778  0071E2  74                 	db	116	;'t'
   779  0071E3  69                 	db	105	;'i'
   780  0071E4  6D                 	db	109	;'m'
   781  0071E5  65                 	db	101	;'e'
   782  0071E6  6F                 	db	111	;'o'
   783  0071E7  75                 	db	117	;'u'
   784  0071E8  74                 	db	116	;'t'
   785  0071E9  2E                 	db	46
   786  0071EA  20                 	db	32
   787  0071EB  44                 	db	68	;'D'
   788  0071EC  65                 	db	101	;'e'
   789  0071ED  66                 	db	102	;'f'
   790  0071EE  61                 	db	97	;'a'
   791  0071EF  75                 	db	117	;'u'
   792  0071F0  6C                 	db	108	;'l'
   793  0071F1  74                 	db	116	;'t'
   794  0071F2  3D                 	db	61	;'='
   795  0071F3  31                 	db	49	;'1'
   796  0071F4  30                 	db	48	;'0'
   797  0071F5  20                 	db	32
   798  0071F6  6D                 	db	109	;'m'
   799  0071F7  73                 	db	115	;'s'
   800  0071F8  20                 	db	32
   801  0071F9  2E                 	db	46
   802  0071FA  0D                 	db	13
   803  0071FB  0A                 	db	10
   804  0071FC  00                 	db	0
   805  0071FD                     STR_216:
   806  0071FD  57                 	db	87	;'W'
   807  0071FE  52                 	db	82	;'R'
   808  0071FF  45                 	db	69	;'E'
   809  007200  47                 	db	71	;'G'
   810  007201  20                 	db	32
   811  007202  2D                 	db	45
   812  007203  20                 	db	32
   813  007204  57                 	db	87	;'W'
   814  007205  72                 	db	114	;'r'
   815  007206  69                 	db	105	;'i'
   816  007207  74                 	db	116	;'t'
   817  007208  65                 	db	101	;'e'
   818  007209  20                 	db	32
   819  00720A  72                 	db	114	;'r'
   820  00720B  65                 	db	101	;'e'
   821  00720C  67                 	db	103	;'g'
   822  00720D  69                 	db	105	;'i'
   823  00720E  73                 	db	115	;'s'
   824  00720F  74                 	db	116	;'t'
   825  007210  65                 	db	101	;'e'
   826  007211  72                 	db	114	;'r'
   827  007212  20                 	db	32
   828  007213  6F                 	db	111	;'o'
   829  007214  66                 	db	102	;'f'
   830  007215  20                 	db	32
   831  007216  6E                 	db	110	;'n'
   832  007217  6F                 	db	111	;'o'
   833  007218  64                 	db	100	;'d'
   834  007219  65                 	db	101	;'e'
   835  00721A  20                 	db	32
   836  00721B  28                 	db	40
   837  00721C  46                 	db	70	;'F'
   838  00721D  6F                 	db	111	;'o'
   839  00721E  72                 	db	114	;'r'
   840  00721F  6D                 	db	109	;'m'
   841  007220  61                 	db	97	;'a'
   842  007221  74                 	db	116	;'t'
   843  007222  3A                 	db	58	;':'
   844  007223  20                 	db	32
   845  007224  77                 	db	119	;'w'
   846  007225  72                 	db	114	;'r'
   847  007226  65                 	db	101	;'e'
   848  007227  67                 	db	103	;'g'
   849  007228  20                 	db	32
   850  007229  5B                 	db	91	;'['
   851  00722A  70                 	db	112	;'p'
   852  00722B  61                 	db	97	;'a'
   853  00722C  67                 	db	103	;'g'
   854  00722D  65                 	db	101	;'e'
   855  00722E  3A                 	db	58	;':'
   856  00722F  5D                 	db	93	;']'
   857  007230  72                 	db	114	;'r'
   858  007231  65                 	db	101	;'e'
   859  007232  67                 	db	103	;'g'
   860  007233  20                 	db	32
   861  007234  63                 	db	99	;'c'
   862  007235  6F                 	db	111	;'o'
   863  007236  6E                 	db	110	;'n'
   864  007237  74                 	db	116	;'t'
   865  007238  65                 	db	101	;'e'
   866  007239  6E                 	db	110	;'n'
   867  00723A  74                 	db	116	;'t'
   868  00723B  29                 	db	41
   869  00723C  2E                 	db	46
   870  00723D  0D                 	db	13
   871  00723E  0A                 	db	10
   872  00723F  00                 	db	0
   873  007240                     STR_84:
   874  007240  2D                 	db	45
   875  007241  45                 	db	69	;'E'
   876  007242  52                 	db	82	;'R'
   877  007243  52                 	db	82	;'R'
   878  007244  4F                 	db	79	;'O'
   879  007245  52                 	db	82	;'R'
   880  007246  20                 	db	32
   881  007247  2D                 	db	45
   882  007248  20                 	db	32
   883  007249  46                 	db	70	;'F'
   884  00724A  69                 	db	105	;'i'
   885  00724B  6C                 	db	108	;'l'
   886  00724C  74                 	db	116	;'t'
   887  00724D  65                 	db	101	;'e'
   888  00724E  72                 	db	114	;'r'
   889  00724F  20                 	db	32
   890  007250  6E                 	db	110	;'n'
   891  007251  75                 	db	117	;'u'
   892  007252  6D                 	db	109	;'m'
   893  007253  62                 	db	98	;'b'
   894  007254  65                 	db	101	;'e'
   895  007255  72                 	db	114	;'r'
   896  007256  20                 	db	32
   897  007257  63                 	db	99	;'c'
   898  007258  61                 	db	97	;'a'
   899  007259  6E                 	db	110	;'n'
   900  00725A  20                 	db	32
   901  00725B  6F                 	db	111	;'o'
   902  00725C  6E                 	db	110	;'n'
   903  00725D  6C                 	db	108	;'l'
   904  00725E  79                 	db	121	;'y'
   905  00725F  20                 	db	32
   906  007260  62                 	db	98	;'b'
   907  007261  65                 	db	101	;'e'
   908  007262  20                 	db	32
   909  007263  73                 	db	115	;'s'
   910  007264  65                 	db	101	;'e'
   911  007265  74                 	db	116	;'t'
   912  007266  20                 	db	32
   913  007267  74                 	db	116	;'t'
   914  007268  6F                 	db	111	;'o'
   915  007269  20                 	db	32
   916  00726A  61                 	db	97	;'a'
   917  00726B  20                 	db	32
   918  00726C  76                 	db	118	;'v'
   919  00726D  61                 	db	97	;'a'
   920  00726E  6C                 	db	108	;'l'
   921  00726F  75                 	db	117	;'u'
   922  007270  65                 	db	101	;'e'
   923  007271  20                 	db	32
   924  007272  62                 	db	98	;'b'
   925  007273  65                 	db	101	;'e'
   926  007274  74                 	db	116	;'t'
   927  007275  77                 	db	119	;'w'
   928  007276  65                 	db	101	;'e'
   929  007277  65                 	db	101	;'e'
   930  007278  6E                 	db	110	;'n'
   931  007279  20                 	db	32
   932  00727A  30                 	db	48	;'0'
   933  00727B  2D                 	db	45
   934  00727C  31                 	db	49	;'1'
   935  00727D  35                 	db	53	;'5'
   936  00727E  2E                 	db	46
   937  00727F  0D                 	db	13
   938  007280  0A                 	db	10
   939  007281  00                 	db	0
   940  007282                     STR_228:
   941  007282  20                 	db	32
   942  007283  20                 	db	32
   943  007284  20                 	db	32
   944  007285  20                 	db	32
   945  007286  4D                 	db	77	;'M'
   946  007287  4F                 	db	79	;'O'
   947  007288  44                 	db	68	;'D'
   948  007289  45                 	db	69	;'E'
   949  00728A  20                 	db	32
   950  00728B  2D                 	db	45
   951  00728C  20                 	db	32
   952  00728D  53                 	db	83	;'S'
   953  00728E  65                 	db	101	;'e'
   954  00728F  74                 	db	116	;'t'
   955  007290  20                 	db	32
   956  007291  61                 	db	97	;'a'
   957  007292  64                 	db	100	;'d'
   958  007293  61                 	db	97	;'a'
   959  007294  70                 	db	112	;'p'
   960  007295  74                 	db	116	;'t'
   961  007296  65                 	db	101	;'e'
   962  007297  72                 	db	114	;'r'
   963  007298  20                 	db	32
   964  007299  6D                 	db	109	;'m'
   965  00729A  6F                 	db	111	;'o'
   966  00729B  64                 	db	100	;'d'
   967  00729C  65                 	db	101	;'e'
   968  00729D  20                 	db	32
   969  00729E  74                 	db	116	;'t'
   970  00729F  68                 	db	104	;'h'
   971  0072A0  61                 	db	97	;'a'
   972  0072A1  74                 	db	116	;'t'
   973  0072A2  20                 	db	32
   974  0072A3  73                 	db	115	;'s'
   975  0072A4  68                 	db	104	;'h'
   976  0072A5  6F                 	db	111	;'o'
   977  0072A6  75                 	db	117	;'u'
   978  0072A7  6C                 	db	108	;'l'
   979  0072A8  64                 	db	100	;'d'
   980  0072A9  20                 	db	32
   981  0072AA  62                 	db	98	;'b'
   982  0072AB  65                 	db	101	;'e'
   983  0072AC  20                 	db	32
   984  0072AD  75                 	db	117	;'u'
   985  0072AE  73                 	db	115	;'s'
   986  0072AF  65                 	db	101	;'e'
   987  0072B0  64                 	db	100	;'d'
   988  0072B1  20                 	db	32
   989  0072B2  6F                 	db	111	;'o'
   990  0072B3  6E                 	db	110	;'n'
   991  0072B4  20                 	db	32
   992  0072B5  73                 	db	115	;'s'
   993  0072B6  74                 	db	116	;'t'
   994  0072B7  61                 	db	97	;'a'
   995  0072B8  72                 	db	114	;'r'
   996  0072B9  74                 	db	116	;'t'
   997  0072BA  75                 	db	117	;'u'
   998  0072BB  70                 	db	112	;'p'
   999  0072BC  2E                 	db	46
  1000  0072BD  0D                 	db	13
  1001  0072BE  0A                 	db	10
  1002  0072BF  00                 	db	0
  1003  0072C0                     STR_188:
  1004  0072C0  54                 	db	84	;'T'
  1005  0072C1  72                 	db	114	;'r'
  1006  0072C2  61                 	db	97	;'a'
  1007  0072C3  6E                 	db	110	;'n'
  1008  0072C4  73                 	db	115	;'s'
  1009  0072C5  6D                 	db	109	;'m'
  1010  0072C6  69                 	db	105	;'i'
  1011  0072C7  74                 	db	116	;'t'
  1012  0072C8  74                 	db	116	;'t'
  1013  0072C9  65                 	db	101	;'e'
  1014  0072CA  72                 	db	114	;'r'
  1015  0072CB  20                 	db	32
  1016  0072CC  69                 	db	105	;'i'
  1017  0072CD  6E                 	db	110	;'n'
  1018  0072CE  20                 	db	32
  1019  0072CF  45                 	db	69	;'E'
  1020  0072D0  72                 	db	114	;'r'
  1021  0072D1  72                 	db	114	;'r'
  1022  0072D2  6F                 	db	111	;'o'
  1023  0072D3  72                 	db	114	;'r'
  1024  0072D4  20                 	db	32
  1025  0072D5  53                 	db	83	;'S'
  1026  0072D6  74                 	db	116	;'t'
  1027  0072D7  61                 	db	97	;'a'
  1028  0072D8  74                 	db	116	;'t'
  1029  0072D9  65                 	db	101	;'e'
  1030  0072DA  20                 	db	32
  1031  0072DB  57                 	db	87	;'W'
  1032  0072DC  61                 	db	97	;'a'
  1033  0072DD  72                 	db	114	;'r'
  1034  0072DE  6E                 	db	110	;'n'
  1035  0072DF  69                 	db	105	;'i'
  1036  0072E0  6E                 	db	110	;'n'
  1037  0072E1  67                 	db	103	;'g'
  1038  0072E2  20                 	db	32
  1039  0072E3  28                 	db	40
  1040  0072E4  31                 	db	49	;'1'
  1041  0072E5  32                 	db	50	;'2'
  1042  0072E6  38                 	db	56	;'8'
  1043  0072E7  20                 	db	32
  1044  0072E8  3E                 	db	62	;'>'
  1045  0072E9  20                 	db	32
  1046  0072EA  54                 	db	84	;'T'
  1047  0072EB  45                 	db	69	;'E'
  1048  0072EC  52                 	db	82	;'R'
  1049  0072ED  52                 	db	82	;'R'
  1050  0072EE  43                 	db	67	;'C'
  1051  0072EF  4E                 	db	78	;'N'
  1052  0072F0  54                 	db	84	;'T'
  1053  0072F1  20                 	db	32
  1054  0072F2  3F                 	db	63	;'?'
  1055  0072F3  20                 	db	32
  1056  0072F4  39                 	db	57	;'9'
  1057  0072F5  36                 	db	54	;'6'
  1058  0072F6  29                 	db	41
  1059  0072F7  0D                 	db	13
  1060  0072F8  0A                 	db	10
  1061  0072F9  00                 	db	0
  1062  0072FA                     STR_190:
  1063  0072FA  54                 	db	84	;'T'
  1064  0072FB  72                 	db	114	;'r'
  1065  0072FC  61                 	db	97	;'a'
  1066  0072FD  6E                 	db	110	;'n'
  1067  0072FE  73                 	db	115	;'s'
  1068  0072FF  6D                 	db	109	;'m'
  1069  007300  69                 	db	105	;'i'
  1070  007301  74                 	db	116	;'t'
  1071  007302  74                 	db	116	;'t'
  1072  007303  65                 	db	101	;'e'
  1073  007304  72                 	db	114	;'r'
  1074  007305  20                 	db	32
  1075  007306  69                 	db	105	;'i'
  1076  007307  6E                 	db	110	;'n'
  1077  007308  20                 	db	32
  1078  007309  45                 	db	69	;'E'
  1079  00730A  72                 	db	114	;'r'
  1080  00730B  72                 	db	114	;'r'
  1081  00730C  6F                 	db	111	;'o'
  1082  00730D  72                 	db	114	;'r'
  1083  00730E  20                 	db	32
  1084  00730F  53                 	db	83	;'S'
  1085  007310  74                 	db	116	;'t'
  1086  007311  61                 	db	97	;'a'
  1087  007312  74                 	db	116	;'t'
  1088  007313  65                 	db	101	;'e'
  1089  007314  20                 	db	32
  1090  007315  42                 	db	66	;'B'
  1091  007316  75                 	db	117	;'u'
  1092  007317  73                 	db	115	;'s'
  1093  007318  20                 	db	32
  1094  007319  50                 	db	80	;'P'
  1095  00731A  61                 	db	97	;'a'
  1096  00731B  73                 	db	115	;'s'
  1097  00731C  73                 	db	115	;'s'
  1098  00731D  69                 	db	105	;'i'
  1099  00731E  76                 	db	118	;'v'
  1100  00731F  65                 	db	101	;'e'
  1101  007320  20                 	db	32
  1102  007321  28                 	db	40
  1103  007322  54                 	db	84	;'T'
  1104  007323  45                 	db	69	;'E'
  1105  007324  52                 	db	82	;'R'
  1106  007325  52                 	db	82	;'R'
  1107  007326  43                 	db	67	;'C'
  1108  007327  4E                 	db	78	;'N'
  1109  007328  54                 	db	84	;'T'
  1110  007329  20                 	db	32
  1111  00732A  3F                 	db	63	;'?'
  1112  00732B  20                 	db	32
  1113  00732C  31                 	db	49	;'1'
  1114  00732D  32                 	db	50	;'2'
  1115  00732E  38                 	db	56	;'8'
  1116  00732F  29                 	db	41
  1117  007330  0D                 	db	13
  1118  007331  0A                 	db	10
  1119  007332  00                 	db	0
  1120  007333                     STR_209:
  1121  007333  20                 	db	32
  1122  007334  20                 	db	32
  1123  007335  20                 	db	32
  1124  007336  20                 	db	32
  1125  007337  20                 	db	32
  1126  007338  46                 	db	70	;'F'
  1127  007339  6F                 	db	111	;'o'
  1128  00733A  72                 	db	114	;'r'
  1129  00733B  6D                 	db	109	;'m'
  1130  00733C  61                 	db	97	;'a'
  1131  00733D  74                 	db	116	;'t'
  1132  00733E  3A                 	db	58	;':'
  1133  00733F  20                 	db	32
  1134  007340  70                 	db	112	;'p'
  1135  007341  72                 	db	114	;'r'
  1136  007342  69                 	db	105	;'i'
  1137  007343  6F                 	db	111	;'o'
  1138  007344  72                 	db	114	;'r'
  1139  007345  69                 	db	105	;'i'
  1140  007346  74                 	db	116	;'t'
  1141  007347  79                 	db	121	;'y'
  1142  007348  2C                 	db	44
  1143  007349  63                 	db	99	;'c'
  1144  00734A  6C                 	db	108	;'l'
  1145  00734B  61                 	db	97	;'a'
  1146  00734C  73                 	db	115	;'s'
  1147  00734D  73                 	db	115	;'s'
  1148  00734E  2C                 	db	44
  1149  00734F  74                 	db	116	;'t'
  1150  007350  79                 	db	121	;'y'
  1151  007351  70                 	db	112	;'p'
  1152  007352  65                 	db	101	;'e'
  1153  007353  2C                 	db	44
  1154  007354  6E                 	db	110	;'n'
  1155  007355  6F                 	db	111	;'o'
  1156  007356  64                 	db	100	;'d'
  1157  007357  65                 	db	101	;'e'
  1158  007358  69                 	db	105	;'i'
  1159  007359  64                 	db	100	;'d'
  1160  00735A  2C                 	db	44
  1161  00735B  63                 	db	99	;'c'
  1162  00735C  6F                 	db	111	;'o'
  1163  00735D  75                 	db	117	;'u'
  1164  00735E  6E                 	db	110	;'n'
  1165  00735F  74                 	db	116	;'t'
  1166  007360  2C                 	db	44
  1167  007361  64                 	db	100	;'d'
  1168  007362  61                 	db	97	;'a'
  1169  007363  74                 	db	116	;'t'
  1170  007364  61                 	db	97	;'a'
  1171  007365  2C                 	db	44
  1172  007366  2C                 	db	44
  1173  007367  2C                 	db	44
  1174  007368  0D                 	db	13
  1175  007369  0A                 	db	10
  1176  00736A  00                 	db	0
  1177  00736B                     STR_195:
  1178  00736B  52                 	db	82	;'R'
  1179  00736C  65                 	db	101	;'e'
  1180  00736D  63                 	db	99	;'c'
  1181  00736E  65                 	db	101	;'e'
  1182  00736F  69                 	db	105	;'i'
  1183  007370  76                 	db	118	;'v'
  1184  007371  65                 	db	101	;'e'
  1185  007372  72                 	db	114	;'r'
  1186  007373  20                 	db	32
  1187  007374  69                 	db	105	;'i'
  1188  007375  6E                 	db	110	;'n'
  1189  007376  20                 	db	32
  1190  007377  45                 	db	69	;'E'
  1191  007378  72                 	db	114	;'r'
  1192  007379  72                 	db	114	;'r'
  1193  00737A  6F                 	db	111	;'o'
  1194  00737B  72                 	db	114	;'r'
  1195  00737C  20                 	db	32
  1196  00737D  53                 	db	83	;'S'
  1197  00737E  74                 	db	116	;'t'
  1198  00737F  61                 	db	97	;'a'
  1199  007380  74                 	db	116	;'t'
  1200  007381  65                 	db	101	;'e'
  1201  007382  20                 	db	32
  1202  007383  57                 	db	87	;'W'
  1203  007384  61                 	db	97	;'a'
  1204  007385  72                 	db	114	;'r'
  1205  007386  6E                 	db	110	;'n'
  1206  007387  69                 	db	105	;'i'
  1207  007388  6E                 	db	110	;'n'
  1208  007389  67                 	db	103	;'g'
  1209  00738A  20                 	db	32
  1210  00738B  28                 	db	40
  1211  00738C  31                 	db	49	;'1'
  1212  00738D  32                 	db	50	;'2'
  1213  00738E  38                 	db	56	;'8'
  1214  00738F  20                 	db	32
  1215  007390  3E                 	db	62	;'>'
  1216  007391  20                 	db	32
  1217  007392  52                 	db	82	;'R'
  1218  007393  45                 	db	69	;'E'
  1219  007394  52                 	db	82	;'R'
  1220  007395  52                 	db	82	;'R'
  1221  007396  43                 	db	67	;'C'
  1222  007397  4E                 	db	78	;'N'
  1223  007398  54                 	db	84	;'T'
  1224  007399  20                 	db	32
  1225  00739A  3F                 	db	63	;'?'
  1226  00739B  20                 	db	32
  1227  00739C  39                 	db	57	;'9'
  1228  00739D  36                 	db	54	;'6'
  1229  00739E  29                 	db	41
  1230  00739F  0D                 	db	13
  1231  0073A0  0A                 	db	10
  1232  0073A1  00                 	db	0
  1233  0073A2                     STR_227:
  1234  0073A2  20                 	db	32
  1235  0073A3  20                 	db	32
  1236  0073A4  20                 	db	32
  1237  0073A5  20                 	db	32
  1238  0073A6  53                 	db	83	;'S'
  1239  0073A7  54                 	db	84	;'T'
  1240  0073A8  41                 	db	65	;'A'
  1241  0073A9  52                 	db	82	;'R'
  1242  0073AA  54                 	db	84	;'T'
  1243  0073AB  49                 	db	73	;'I'
  1244  0073AC  46                 	db	70	;'F'
  1245  0073AD  20                 	db	32
  1246  0073AE  2D                 	db	45
  1247  0073AF  20                 	db	32
  1248  0073B0  53                 	db	83	;'S'
  1249  0073B1  65                 	db	101	;'e'
  1250  0073B2  74                 	db	116	;'t'
  1251  0073B3  20                 	db	32
  1252  0073B4  69                 	db	105	;'i'
  1253  0073B5  6E                 	db	110	;'n'
  1254  0073B6  74                 	db	116	;'t'
  1255  0073B7  65                 	db	101	;'e'
  1256  0073B8  72                 	db	114	;'r'
  1257  0073B9  66                 	db	102	;'f'
  1258  0073BA  61                 	db	97	;'a'
  1259  0073BB  63                 	db	99	;'c'
  1260  0073BC  65                 	db	101	;'e'
  1261  0073BD  20                 	db	32
  1262  0073BE  73                 	db	115	;'s'
  1263  0073BF  74                 	db	116	;'t'
  1264  0073C0  61                 	db	97	;'a'
  1265  0073C1  74                 	db	116	;'t'
  1266  0073C2  65                 	db	101	;'e'
  1267  0073C3  20                 	db	32
  1268  0073C4  74                 	db	116	;'t'
  1269  0073C5  6F                 	db	111	;'o'
  1270  0073C6  20                 	db	32
  1271  0073C7  75                 	db	117	;'u'
  1272  0073C8  73                 	db	115	;'s'
  1273  0073C9  65                 	db	101	;'e'
  1274  0073CA  20                 	db	32
  1275  0073CB  6F                 	db	111	;'o'
  1276  0073CC  6E                 	db	110	;'n'
  1277  0073CD  20                 	db	32
  1278  0073CE  73                 	db	115	;'s'
  1279  0073CF  74                 	db	116	;'t'
  1280  0073D0  61                 	db	97	;'a'
  1281  0073D1  72                 	db	114	;'r'
  1282  0073D2  74                 	db	116	;'t'
  1283  0073D3  75                 	db	117	;'u'
  1284  0073D4  70                 	db	112	;'p'
  1285  0073D5  2E                 	db	46
  1286  0073D6  0D                 	db	13
  1287  0073D7  0A                 	db	10
  1288  0073D8  00                 	db	0
  1289  0073D9  50                 	db	80	;'P'
  1290  0073DA  72                 	db	114	;'r'
  1291  0073DB  65                 	db	101	;'e'
  1292  0073DC  73                 	db	115	;'s'
  1293  0073DD  73                 	db	115	;'s'
  1294  0073DE  20                 	db	32
  1295  0073DF  27                 	db	39
  1296  0073E0  76                 	db	118	;'v'
  1297  0073E1  27                 	db	39
  1298  0073E2  20                 	db	32
  1299  0073E3  77                 	db	119	;'w'
  1300  0073E4  69                 	db	105	;'i'
  1301  0073E5  74                 	db	116	;'t'
  1302  0073E6  68                 	db	104	;'h'
  1303  0073E7  69                 	db	105	;'i'
  1304  0073E8  6E                 	db	110	;'n'
  1305  0073E9  20                 	db	32
  1306  0073EA  74                 	db	116	;'t'
  1307  0073EB  68                 	db	104	;'h'
  1308  0073EC  72                 	db	114	;'r'
  1309  0073ED  65                 	db	101	;'e'
  1310  0073EE  65                 	db	101	;'e'
  1311  0073EF  20                 	db	32
  1312  0073F0  73                 	db	115	;'s'
  1313  0073F1  65                 	db	101	;'e'
  1314  0073F2  63                 	db	99	;'c'
  1315  0073F3  6F                 	db	111	;'o'
  1316  0073F4  6E                 	db	110	;'n'
  1317  0073F5  64                 	db	100	;'d'
  1318  0073F6  73                 	db	115	;'s'
  1319  0073F7  20                 	db	32
  1320  0073F8  74                 	db	116	;'t'
  1321  0073F9  6F                 	db	111	;'o'
  1322  0073FA  20                 	db	32
  1323  0073FB  65                 	db	101	;'e'
  1324  0073FC  6E                 	db	110	;'n'
  1325  0073FD  74                 	db	116	;'t'
  1326  0073FE  65                 	db	101	;'e'
  1327  0073FF  72                 	db	114	;'r'
  1328  007400  20                 	db	32
  1329  007401  76                 	db	118	;'v'
  1330  007402  65                 	db	101	;'e'
  1331  007403  72                 	db	114	;'r'
  1332  007404  62                 	db	98	;'b'
  1333  007405  6F                 	db	111	;'o'
  1334  007406  73                 	db	115	;'s'
  1335  007407  65                 	db	101	;'e'
  1336  007408  20                 	db	32
  1337  007409  6D                 	db	109	;'m'
  1338  00740A  6F                 	db	111	;'o'
  1339  00740B  64                 	db	100	;'d'
  1340  00740C  65                 	db	101	;'e'
  1341  00740D  0D                 	db	13
  1342  00740E  0A                 	db	10
  1343  00740F  00                 	db	0
  1344  007410                     STR_196:
  1345  007410  52                 	db	82	;'R'
  1346  007411  65                 	db	101	;'e'
  1347  007412  63                 	db	99	;'c'
  1348  007413  65                 	db	101	;'e'
  1349  007414  69                 	db	105	;'i'
  1350  007415  76                 	db	118	;'v'
  1351  007416  65                 	db	101	;'e'
  1352  007417  72                 	db	114	;'r'
  1353  007418  20                 	db	32
  1354  007419  69                 	db	105	;'i'
  1355  00741A  6E                 	db	110	;'n'
  1356  00741B  20                 	db	32
  1357  00741C  45                 	db	69	;'E'
  1358  00741D  72                 	db	114	;'r'
  1359  00741E  72                 	db	114	;'r'
  1360  00741F  6F                 	db	111	;'o'
  1361  007420  72                 	db	114	;'r'
  1362  007421  20                 	db	32
  1363  007422  53                 	db	83	;'S'
  1364  007423  74                 	db	116	;'t'
  1365  007424  61                 	db	97	;'a'
  1366  007425  74                 	db	116	;'t'
  1367  007426  65                 	db	101	;'e'
  1368  007427  20                 	db	32
  1369  007428  42                 	db	66	;'B'
  1370  007429  75                 	db	117	;'u'
  1371  00742A  73                 	db	115	;'s'
  1372  00742B  20                 	db	32
  1373  00742C  50                 	db	80	;'P'
  1374  00742D  61                 	db	97	;'a'
  1375  00742E  73                 	db	115	;'s'
  1376  00742F  73                 	db	115	;'s'
  1377  007430  69                 	db	105	;'i'
  1378  007431  76                 	db	118	;'v'
  1379  007432  65                 	db	101	;'e'
  1380  007433  20                 	db	32
  1381  007434  28                 	db	40
  1382  007435  52                 	db	82	;'R'
  1383  007436  45                 	db	69	;'E'
  1384  007437  52                 	db	82	;'R'
  1385  007438  52                 	db	82	;'R'
  1386  007439  43                 	db	67	;'C'
  1387  00743A  4E                 	db	78	;'N'
  1388  00743B  54                 	db	84	;'T'
  1389  00743C  20                 	db	32
  1390  00743D  3F                 	db	63	;'?'
  1391  00743E  20                 	db	32
  1392  00743F  31                 	db	49	;'1'
  1393  007440  32                 	db	50	;'2'
  1394  007441  38                 	db	56	;'8'
  1395  007442  29                 	db	41
  1396  007443  0D                 	db	13
  1397  007444  0A                 	db	10
  1398  007445  00                 	db	0
  1399  007446                     STR_67:
  1400  007446  2D                 	db	45
  1401  007447  45                 	db	69	;'E'
  1402  007448  52                 	db	82	;'R'
  1403  007449  52                 	db	82	;'R'
  1404  00744A  4F                 	db	79	;'O'
  1405  00744B  52                 	db	82	;'R'
  1406  00744C  20                 	db	32
  1407  00744D  2D                 	db	45
  1408  00744E  20                 	db	32
  1409  00744F  4F                 	db	79	;'O'
  1410  007450  6E                 	db	110	;'n'
  1411  007451  65                 	db	101	;'e'
  1412  007452  20                 	db	32
  1413  007453  6F                 	db	111	;'o'
  1414  007454  72                 	db	114	;'r'
  1415  007455  20                 	db	32
  1416  007456  6D                 	db	109	;'m'
  1417  007457  6F                 	db	111	;'o'
  1418  007458  72                 	db	114	;'r'
  1419  007459  65                 	db	101	;'e'
  1420  00745A  20                 	db	32
  1421  00745B  72                 	db	114	;'r'
  1422  00745C  65                 	db	101	;'e'
  1423  00745D  67                 	db	103	;'g'
  1424  00745E  69                 	db	105	;'i'
  1425  00745F  73                 	db	115	;'s'
  1426  007460  74                 	db	116	;'t'
  1427  007461  65                 	db	101	;'e'
  1428  007462  72                 	db	114	;'r'
  1429  007463  28                 	db	40
  1430  007464  73                 	db	115	;'s'
  1431  007465  29                 	db	41
  1432  007466  20                 	db	32
  1433  007467  63                 	db	99	;'c'
  1434  007468  6F                 	db	111	;'o'
  1435  007469  75                 	db	117	;'u'
  1436  00746A  6C                 	db	108	;'l'
  1437  00746B  64                 	db	100	;'d'
  1438  00746C  20                 	db	32
  1439  00746D  6E                 	db	110	;'n'
  1440  00746E  6F                 	db	111	;'o'
  1441  00746F  74                 	db	116	;'t'
  1442  007470  20                 	db	32
  1443  007471  62                 	db	98	;'b'
  1444  007472  65                 	db	101	;'e'
  1445  007473  20                 	db	32
  1446  007474  72                 	db	114	;'r'
  1447  007475  65                 	db	101	;'e'
  1448  007476  61                 	db	97	;'a'
  1449  007477  64                 	db	100	;'d'
  1450  007478  2E                 	db	46
  1451  007479  0D                 	db	13
  1452  00747A  0A                 	db	10
  1453  00747B  00                 	db	0
  1454  00747C                     STR_189:
  1455  00747C  54                 	db	84	;'T'
  1456  00747D  72                 	db	114	;'r'
  1457  00747E  61                 	db	97	;'a'
  1458  00747F  6E                 	db	110	;'n'
  1459  007480  73                 	db	115	;'s'
  1460  007481  6D                 	db	109	;'m'
  1461  007482  69                 	db	105	;'i'
  1462  007483  74                 	db	116	;'t'
  1463  007484  74                 	db	116	;'t'
  1464  007485  65                 	db	101	;'e'
  1465  007486  72                 	db	114	;'r'
  1466  007487  20                 	db	32
  1467  007488  69                 	db	105	;'i'
  1468  007489  6E                 	db	110	;'n'
  1469  00748A  20                 	db	32
  1470  00748B  45                 	db	69	;'E'
  1471  00748C  72                 	db	114	;'r'
  1472  00748D  72                 	db	114	;'r'
  1473  00748E  6F                 	db	111	;'o'
  1474  00748F  72                 	db	114	;'r'
  1475  007490  20                 	db	32
  1476  007491  53                 	db	83	;'S'
  1477  007492  74                 	db	116	;'t'
  1478  007493  61                 	db	97	;'a'
  1479  007494  74                 	db	116	;'t'
  1480  007495  65                 	db	101	;'e'
  1481  007496  20                 	db	32
  1482  007497  42                 	db	66	;'B'
  1483  007498  75                 	db	117	;'u'
  1484  007499  73                 	db	115	;'s'
  1485  00749A  20                 	db	32
  1486  00749B  4F                 	db	79	;'O'
  1487  00749C  46                 	db	70	;'F'
  1488  00749D  46                 	db	70	;'F'
  1489  00749E  20                 	db	32
  1490  00749F  28                 	db	40
  1491  0074A0  54                 	db	84	;'T'
  1492  0074A1  45                 	db	69	;'E'
  1493  0074A2  52                 	db	82	;'R'
  1494  0074A3  52                 	db	82	;'R'
  1495  0074A4  43                 	db	67	;'C'
  1496  0074A5  4E                 	db	78	;'N'
  1497  0074A6  54                 	db	84	;'T'
  1498  0074A7  20                 	db	32
  1499  0074A8  3F                 	db	63	;'?'
  1500  0074A9  20                 	db	32
  1501  0074AA  32                 	db	50	;'2'
  1502  0074AB  35                 	db	53	;'5'
  1503  0074AC  36                 	db	54	;'6'
  1504  0074AD  29                 	db	41
  1505  0074AE  0D                 	db	13
  1506  0074AF  0A                 	db	10
  1507  0074B0  00                 	db	0
  1508  0074B1                     STR_2:
  1509  0074B1  43                 	db	67	;'C'
  1510  0074B2  6F                 	db	111	;'o'
  1511  0074B3  70                 	db	112	;'p'
  1512  0074B4  79                 	db	121	;'y'
  1513  0074B5  72                 	db	114	;'r'
  1514  0074B6  69                 	db	105	;'i'
  1515  0074B7  67                 	db	103	;'g'
  1516  0074B8  68                 	db	104	;'h'
  1517  0074B9  74                 	db	116	;'t'
  1518  0074BA  20                 	db	32
  1519  0074BB  28                 	db	40
  1520  0074BC  43                 	db	67	;'C'
  1521  0074BD  29                 	db	41
  1522  0074BE  20                 	db	32
  1523  0074BF  32                 	db	50	;'2'
  1524  0074C0  30                 	db	48	;'0'
  1525  0074C1  31                 	db	49	;'1'
  1526  0074C2  34                 	db	52	;'4'
  1527  0074C3  2D                 	db	45
  1528  0074C4  32                 	db	50	;'2'
  1529  0074C5  30                 	db	48	;'0'
  1530  0074C6  31                 	db	49	;'1'
  1531  0074C7  35                 	db	53	;'5'
  1532  0074C8  20                 	db	32
  1533  0074C9  47                 	db	71	;'G'
  1534  0074CA  72                 	db	114	;'r'
  1535  0074CB  6F                 	db	111	;'o'
  1536  0074CC  64                 	db	100	;'d'
  1537  0074CD  61                 	db	97	;'a'
  1538  0074CE  6E                 	db	110	;'n'
  1539  0074CF  73                 	db	115	;'s'
  1540  0074D0  20                 	db	32
  1541  0074D1  50                 	db	80	;'P'
  1542  0074D2  61                 	db	97	;'a'
  1543  0074D3  72                 	db	114	;'r'
  1544  0074D4  61                 	db	97	;'a'
  1545  0074D5  64                 	db	100	;'d'
  1546  0074D6  69                 	db	105	;'i'
  1547  0074D7  73                 	db	115	;'s'
  1548  0074D8  20                 	db	32
  1549  0074D9  41                 	db	65	;'A'
  1550  0074DA  42                 	db	66	;'B'
  1551  0074DB  2C                 	db	44
  1552  0074DC  20                 	db	32
  1553  0074DD  53                 	db	83	;'S'
  1554  0074DE  77                 	db	119	;'w'
  1555  0074DF  65                 	db	101	;'e'
  1556  0074E0  64                 	db	100	;'d'
  1557  0074E1  65                 	db	101	;'e'
  1558  0074E2  6E                 	db	110	;'n'
  1559  0074E3  0D                 	db	13
  1560  0074E4  0A                 	db	10
  1561  0074E5  00                 	db	0
  1562  0074E6                     STR_197:
  1563  0074E6  54                 	db	84	;'T'
  1564  0074E7  72                 	db	114	;'r'
  1565  0074E8  61                 	db	97	;'a'
  1566  0074E9  6E                 	db	110	;'n'
  1567  0074EA  73                 	db	115	;'s'
  1568  0074EB  6D                 	db	109	;'m'
  1569  0074EC  69                 	db	105	;'i'
  1570  0074ED  74                 	db	116	;'t'
  1571  0074EE  74                 	db	116	;'t'
  1572  0074EF  65                 	db	101	;'e'
  1573  0074F0  72                 	db	114	;'r'
  1574  0074F1  20                 	db	32
  1575  0074F2  6F                 	db	111	;'o'
  1576  0074F3  72                 	db	114	;'r'
  1577  0074F4  20                 	db	32
  1578  0074F5  52                 	db	82	;'R'
  1579  0074F6  65                 	db	101	;'e'
  1580  0074F7  63                 	db	99	;'c'
  1581  0074F8  65                 	db	101	;'e'
  1582  0074F9  69                 	db	105	;'i'
  1583  0074FA  76                 	db	118	;'v'
  1584  0074FB  65                 	db	101	;'e'
  1585  0074FC  72                 	db	114	;'r'
  1586  0074FD  20                 	db	32
  1587  0074FE  69                 	db	105	;'i'
  1588  0074FF  73                 	db	115	;'s'
  1589  007500  20                 	db	32
  1590  007501  69                 	db	105	;'i'
  1591  007502  6E                 	db	110	;'n'
  1592  007503  20                 	db	32
  1593  007504  45                 	db	69	;'E'
  1594  007505  72                 	db	114	;'r'
  1595  007506  72                 	db	114	;'r'
  1596  007507  6F                 	db	111	;'o'
  1597  007508  72                 	db	114	;'r'
  1598  007509  20                 	db	32
  1599  00750A  53                 	db	83	;'S'
  1600  00750B  74                 	db	116	;'t'
  1601  00750C  61                 	db	97	;'a'
  1602  00750D  74                 	db	116	;'t'
  1603  00750E  65                 	db	101	;'e'
  1604  00750F  20                 	db	32
  1605  007510  57                 	db	87	;'W'
  1606  007511  61                 	db	97	;'a'
  1607  007512  72                 	db	114	;'r'
  1608  007513  6E                 	db	110	;'n'
  1609  007514  69                 	db	105	;'i'
  1610  007515  6E                 	db	110	;'n'
  1611  007516  67                 	db	103	;'g'
  1612  007517  0D                 	db	13
  1613  007518  0A                 	db	10
  1614  007519  00                 	db	0
  1615  00751A                     STR_203:
  1616  00751A  4C                 	db	76	;'L'
  1617  00751B  49                 	db	73	;'I'
  1618  00751C  53                 	db	83	;'S'
  1619  00751D  54                 	db	84	;'T'
  1620  00751E  45                 	db	69	;'E'
  1621  00751F  4E                 	db	78	;'N'
  1622  007520  20                 	db	32
  1623  007521  2D                 	db	45
  1624  007522  20                 	db	32
  1625  007523  4F                 	db	79	;'O'
  1626  007524  70                 	db	112	;'p'
  1627  007525  65                 	db	101	;'e'
  1628  007526  6E                 	db	110	;'n'
  1629  007527  20                 	db	32
  1630  007528  43                 	db	67	;'C'
  1631  007529  41                 	db	65	;'A'
  1632  00752A  4E                 	db	78	;'N'
  1633  00752B  20                 	db	32
  1634  00752C  69                 	db	105	;'i'
  1635  00752D  6E                 	db	110	;'n'
  1636  00752E  74                 	db	116	;'t'
  1637  00752F  65                 	db	101	;'e'
  1638  007530  72                 	db	114	;'r'
  1639  007531  66                 	db	102	;'f'
  1640  007532  61                 	db	97	;'a'
  1641  007533  63                 	db	99	;'c'
  1642  007534  65                 	db	101	;'e'
  1643  007535  20                 	db	32
  1644  007536  69                 	db	105	;'i'
  1645  007537  6E                 	db	110	;'n'
  1646  007538  20                 	db	32
  1647  007539  6C                 	db	108	;'l'
  1648  00753A  69                 	db	105	;'i'
  1649  00753B  73                 	db	115	;'s'
  1650  00753C  74                 	db	116	;'t'
  1651  00753D  65                 	db	101	;'e'
  1652  00753E  6E                 	db	110	;'n'
  1653  00753F  20                 	db	32
  1654  007540  6F                 	db	111	;'o'
  1655  007541  6E                 	db	110	;'n'
  1656  007542  6C                 	db	108	;'l'
  1657  007543  79                 	db	121	;'y'
  1658  007544  20                 	db	32
  1659  007545  6D                 	db	109	;'m'
  1660  007546  6F                 	db	111	;'o'
  1661  007547  64                 	db	100	;'d'
  1662  007548  65                 	db	101	;'e'
  1663  007549  2E                 	db	46
  1664  00754A  0D                 	db	13
  1665  00754B  0A                 	db	10
  1666  00754C  00                 	db	0
  1667  00754D                     STR_96:
  1668  00754D  2D                 	db	45
  1669  00754E  45                 	db	69	;'E'
  1670  00754F  52                 	db	82	;'R'
  1671  007550  52                 	db	82	;'R'
  1672  007551  4F                 	db	79	;'O'
  1673  007552  52                 	db	82	;'R'
  1674  007553  20                 	db	32
  1675  007554  2D                 	db	45
  1676  007555  20                 	db	32
  1677  007556  4D                 	db	77	;'M'
  1678  007557  61                 	db	97	;'a'
  1679  007558  73                 	db	115	;'s'
  1680  007559  6B                 	db	107	;'k'
  1681  00755A  20                 	db	32
  1682  00755B  6E                 	db	110	;'n'
  1683  00755C  75                 	db	117	;'u'
  1684  00755D  6D                 	db	109	;'m'
  1685  00755E  62                 	db	98	;'b'
  1686  00755F  65                 	db	101	;'e'
  1687  007560  72                 	db	114	;'r'
  1688  007561  20                 	db	32
  1689  007562  63                 	db	99	;'c'
  1690  007563  61                 	db	97	;'a'
  1691  007564  6E                 	db	110	;'n'
  1692  007565  20                 	db	32
  1693  007566  6F                 	db	111	;'o'
  1694  007567  6E                 	db	110	;'n'
  1695  007568  6C                 	db	108	;'l'
  1696  007569  79                 	db	121	;'y'
  1697  00756A  20                 	db	32
  1698  00756B  62                 	db	98	;'b'
  1699  00756C  65                 	db	101	;'e'
  1700  00756D  20                 	db	32
  1701  00756E  73                 	db	115	;'s'
  1702  00756F  65                 	db	101	;'e'
  1703  007570  74                 	db	116	;'t'
  1704  007571  20                 	db	32
  1705  007572  61                 	db	97	;'a'
  1706  007573  73                 	db	115	;'s'
  1707  007574  20                 	db	32
  1708  007575  30                 	db	48	;'0'
  1709  007576  20                 	db	32
  1710  007577  6F                 	db	111	;'o'
  1711  007578  72                 	db	114	;'r'
  1712  007579  20                 	db	32
  1713  00757A  31                 	db	49	;'1'
  1714  00757B  2E                 	db	46
  1715  00757C  0D                 	db	13
  1716  00757D  0A                 	db	10
  1717  00757E  00                 	db	0
  1718  00757F                     STR_204:
  1719  00757F  4C                 	db	76	;'L'
  1720  007580  4F                 	db	79	;'O'
  1721  007581  4F                 	db	79	;'O'
  1722  007582  50                 	db	80	;'P'
  1723  007583  42                 	db	66	;'B'
  1724  007584  41                 	db	65	;'A'
  1725  007585  43                 	db	67	;'C'
  1726  007586  4B                 	db	75	;'K'
  1727  007587  20                 	db	32
  1728  007588  2D                 	db	45
  1729  007589  20                 	db	32
  1730  00758A  4F                 	db	79	;'O'
  1731  00758B  70                 	db	112	;'p'
  1732  00758C  65                 	db	101	;'e'
  1733  00758D  6E                 	db	110	;'n'
  1734  00758E  20                 	db	32
  1735  00758F  43                 	db	67	;'C'
  1736  007590  41                 	db	65	;'A'
  1737  007591  4E                 	db	78	;'N'
  1738  007592  20                 	db	32
  1739  007593  69                 	db	105	;'i'
  1740  007594  6E                 	db	110	;'n'
  1741  007595  74                 	db	116	;'t'
  1742  007596  65                 	db	101	;'e'
  1743  007597  72                 	db	114	;'r'
  1744  007598  66                 	db	102	;'f'
  1745  007599  61                 	db	97	;'a'
  1746  00759A  63                 	db	99	;'c'
  1747  00759B  65                 	db	101	;'e'
  1748  00759C  20                 	db	32
  1749  00759D  69                 	db	105	;'i'
  1750  00759E  6E                 	db	110	;'n'
  1751  00759F  20                 	db	32
  1752  0075A0  6C                 	db	108	;'l'
  1753  0075A1  6F                 	db	111	;'o'
  1754  0075A2  6F                 	db	111	;'o'
  1755  0075A3  70                 	db	112	;'p'
  1756  0075A4  62                 	db	98	;'b'
  1757  0075A5  61                 	db	97	;'a'
  1758  0075A6  63                 	db	99	;'c'
  1759  0075A7  6B                 	db	107	;'k'
  1760  0075A8  20                 	db	32
  1761  0075A9  6D                 	db	109	;'m'
  1762  0075AA  6F                 	db	111	;'o'
  1763  0075AB  64                 	db	100	;'d'
  1764  0075AC  65                 	db	101	;'e'
  1765  0075AD  2E                 	db	46
  1766  0075AE  0D                 	db	13
  1767  0075AF  0A                 	db	10
  1768  0075B0  00                 	db	0
  1769  0075B1                     STR_206:
  1770  0075B1  56                 	db	86	;'V'
  1771  0075B2  45                 	db	69	;'E'
  1772  0075B3  52                 	db	82	;'R'
  1773  0075B4  53                 	db	83	;'S'
  1774  0075B5  49                 	db	73	;'I'
  1775  0075B6  4F                 	db	79	;'O'
  1776  0075B7  4E                 	db	78	;'N'
  1777  0075B8  20                 	db	32
  1778  0075B9  2D                 	db	45
  1779  0075BA  20                 	db	32
  1780  0075BB  44                 	db	68	;'D'
  1781  0075BC  69                 	db	105	;'i'
  1782  0075BD  73                 	db	115	;'s'
  1783  0075BE  70                 	db	112	;'p'
  1784  0075BF  6C                 	db	108	;'l'
  1785  0075C0  61                 	db	97	;'a'
  1786  0075C1  79                 	db	121	;'y'
  1787  0075C2  20                 	db	32
  1788  0075C3  66                 	db	102	;'f'
  1789  0075C4  69                 	db	105	;'i'
  1790  0075C5  72                 	db	114	;'r'
  1791  0075C6  6D                 	db	109	;'m'
  1792  0075C7  77                 	db	119	;'w'
  1793  0075C8  61                 	db	97	;'a'
  1794  0075C9  72                 	db	114	;'r'
  1795  0075CA  65                 	db	101	;'e'
  1796  0075CB  20                 	db	32
  1797  0075CC  76                 	db	118	;'v'
  1798  0075CD  65                 	db	101	;'e'
  1799  0075CE  72                 	db	114	;'r'
  1800  0075CF  73                 	db	115	;'s'
  1801  0075D0  69                 	db	105	;'i'
  1802  0075D1  6F                 	db	111	;'o'
  1803  0075D2  6E                 	db	110	;'n'
  1804  0075D3  20                 	db	32
  1805  0075D4  69                 	db	105	;'i'
  1806  0075D5  6E                 	db	110	;'n'
  1807  0075D6  66                 	db	102	;'f'
  1808  0075D7  6F                 	db	111	;'o'
  1809  0075D8  72                 	db	114	;'r'
  1810  0075D9  6D                 	db	109	;'m'
  1811  0075DA  61                 	db	97	;'a'
  1812  0075DB  74                 	db	116	;'t'
  1813  0075DC  69                 	db	105	;'i'
  1814  0075DD  6F                 	db	111	;'o'
  1815  0075DE  6E                 	db	110	;'n'
  1816  0075DF  2E                 	db	46
  1817  0075E0  0D                 	db	13
  1818  0075E1  0A                 	db	10
  1819  0075E2  00                 	db	0
  1820  0075E3                     STR_226:
  1821  0075E3  20                 	db	32
  1822  0075E4  20                 	db	32
  1823  0075E5  20                 	db	32
  1824  0075E6  20                 	db	32
  1825  0075E7  20                 	db	32
  1826  0075E8  20                 	db	32
  1827  0075E9  20                 	db	32
  1828  0075EA  20                 	db	32
  1829  0075EB  20                 	db	32
  1830  0075EC  20                 	db	32
  1831  0075ED  20                 	db	32
  1832  0075EE  20                 	db	32
  1833  0075EF  20                 	db	32
  1834  0075F0  20                 	db	32
  1835  0075F1  20                 	db	32
  1836  0075F2  20                 	db	32
  1837  0075F3  46                 	db	70	;'F'
  1838  0075F4  6F                 	db	111	;'o'
  1839  0075F5  72                 	db	114	;'r'
  1840  0075F6  6D                 	db	109	;'m'
  1841  0075F7  61                 	db	97	;'a'
  1842  0075F8  74                 	db	116	;'t'
  1843  0075F9  3A                 	db	58	;':'
  1844  0075FA  20                 	db	32
  1845  0075FB  73                 	db	115	;'s'
  1846  0075FC  65                 	db	101	;'e'
  1847  0075FD  74                 	db	116	;'t'
  1848  0075FE  20                 	db	32
  1849  0075FF  72                 	db	114	;'r'
  1850  007600  77                 	db	119	;'w'
  1851  007601  74                 	db	116	;'t'
  1852  007602  69                 	db	105	;'i'
  1853  007603  6D                 	db	109	;'m'
  1854  007604  65                 	db	101	;'e'
  1855  007605  6F                 	db	111	;'o'
  1856  007606  75                 	db	117	;'u'
  1857  007607  74                 	db	116	;'t'
  1858  007608  20                 	db	32
  1859  007609  74                 	db	116	;'t'
  1860  00760A  69                 	db	105	;'i'
  1861  00760B  6D                 	db	109	;'m'
  1862  00760C  65                 	db	101	;'e'
  1863  00760D  6F                 	db	111	;'o'
  1864  00760E  75                 	db	117	;'u'
  1865  00760F  74                 	db	116	;'t'
  1866  007610  2E                 	db	46
  1867  007611  0D                 	db	13
  1868  007612  0A                 	db	10
  1869  007613  00                 	db	0
  1870  007614                     STR_224:
  1871  007614  20                 	db	32
  1872  007615  20                 	db	32
  1873  007616  20                 	db	32
  1874  007617  20                 	db	32
  1875  007618  44                 	db	68	;'D'
  1876  007619  45                 	db	69	;'E'
  1877  00761A  43                 	db	67	;'C'
  1878  00761B  49                 	db	73	;'I'
  1879  00761C  4D                 	db	77	;'M'
  1880  00761D  41                 	db	65	;'A'
  1881  00761E  4C                 	db	76	;'L'
  1882  00761F  20                 	db	32
  1883  007620  2D                 	db	45
  1884  007621  20                 	db	32
  1885  007622  44                 	db	68	;'D'
  1886  007623  69                 	db	105	;'i'
  1887  007624  73                 	db	115	;'s'
  1888  007625  70                 	db	112	;'p'
  1889  007626  6C                 	db	108	;'l'
  1890  007627  61                 	db	97	;'a'
  1891  007628  79                 	db	121	;'y'
  1892  007629  20                 	db	32
  1893  00762A  6E                 	db	110	;'n'
  1894  00762B  75                 	db	117	;'u'
  1895  00762C  6D                 	db	109	;'m'
  1896  00762D  65                 	db	101	;'e'
  1897  00762E  72                 	db	114	;'r'
  1898  00762F  69                 	db	105	;'i'
  1899  007630  63                 	db	99	;'c'
  1900  007631  61                 	db	97	;'a'
  1901  007632  6C                 	db	108	;'l'
  1902  007633  73                 	db	115	;'s'
  1903  007634  20                 	db	32
  1904  007635  69                 	db	105	;'i'
  1905  007636  6E                 	db	110	;'n'
  1906  007637  20                 	db	32
  1907  007638  64                 	db	100	;'d'
  1908  007639  65                 	db	101	;'e'
  1909  00763A  63                 	db	99	;'c'
  1910  00763B  69                 	db	105	;'i'
  1911  00763C  6D                 	db	109	;'m'
  1912  00763D  61                 	db	97	;'a'
  1913  00763E  6C                 	db	108	;'l'
  1914  00763F  2E                 	db	46
  1915  007640  0D                 	db	13
  1916  007641  0A                 	db	10
  1917  007642  00                 	db	0
  1918  007643                     STR_223:
  1919  007643  20                 	db	32
  1920  007644  20                 	db	32
  1921  007645  20                 	db	32
  1922  007646  20                 	db	32
  1923  007647  48                 	db	72	;'H'
  1924  007648  45                 	db	69	;'E'
  1925  007649  58                 	db	88	;'X'
  1926  00764A  20                 	db	32
  1927  00764B  2D                 	db	45
  1928  00764C  20                 	db	32
  1929  00764D  44                 	db	68	;'D'
  1930  00764E  69                 	db	105	;'i'
  1931  00764F  73                 	db	115	;'s'
  1932  007650  70                 	db	112	;'p'
  1933  007651  6C                 	db	108	;'l'
  1934  007652  61                 	db	97	;'a'
  1935  007653  79                 	db	121	;'y'
  1936  007654  20                 	db	32
  1937  007655  6E                 	db	110	;'n'
  1938  007656  75                 	db	117	;'u'
  1939  007657  6D                 	db	109	;'m'
  1940  007658  65                 	db	101	;'e'
  1941  007659  72                 	db	114	;'r'
  1942  00765A  69                 	db	105	;'i'
  1943  00765B  63                 	db	99	;'c'
  1944  00765C  61                 	db	97	;'a'
  1945  00765D  6C                 	db	108	;'l'
  1946  00765E  73                 	db	115	;'s'
  1947  00765F  20                 	db	32
  1948  007660  69                 	db	105	;'i'
  1949  007661  6E                 	db	110	;'n'
  1950  007662  20                 	db	32
  1951  007663  68                 	db	104	;'h'
  1952  007664  65                 	db	101	;'e'
  1953  007665  78                 	db	120	;'x'
  1954  007666  61                 	db	97	;'a'
  1955  007667  64                 	db	100	;'d'
  1956  007668  65                 	db	101	;'e'
  1957  007669  63                 	db	99	;'c'
  1958  00766A  69                 	db	105	;'i'
  1959  00766B  6D                 	db	109	;'m'
  1960  00766C  61                 	db	97	;'a'
  1961  00766D  6C                 	db	108	;'l'
  1962  00766E  2E                 	db	46
  1963  00766F  0D                 	db	13
  1964  007670  0A                 	db	10
  1965  007671  00                 	db	0
  1966  007672                     STR_214:
  1967  007672  46                 	db	70	;'F'
  1968  007673  49                 	db	73	;'I'
  1969  007674  4E                 	db	78	;'N'
  1970  007675  44                 	db	68	;'D'
  1971  007676  20                 	db	32
  1972  007677  2D                 	db	45
  1973  007678  20                 	db	32
  1974  007679  46                 	db	70	;'F'
  1975  00767A  69                 	db	105	;'i'
  1976  00767B  6E                 	db	110	;'n'
  1977  00767C  64                 	db	100	;'d'
  1978  00767D  20                 	db	32
  1979  00767E  61                 	db	97	;'a'
  1980  00767F  76                 	db	118	;'v'
  1981  007680  61                 	db	97	;'a'
  1982  007681  69                 	db	105	;'i'
  1983  007682  6C                 	db	108	;'l'
  1984  007683  61                 	db	97	;'a'
  1985  007684  62                 	db	98	;'b'
  1986  007685  6C                 	db	108	;'l'
  1987  007686  65                 	db	101	;'e'
  1988  007687  20                 	db	32
  1989  007688  43                 	db	67	;'C'
  1990  007689  41                 	db	65	;'A'
  1991  00768A  4E                 	db	78	;'N'
  1992  00768B  34                 	db	52	;'4'
  1993  00768C  56                 	db	86	;'V'
  1994  00768D  53                 	db	83	;'S'
  1995  00768E  43                 	db	67	;'C'
  1996  00768F  50                 	db	80	;'P'
  1997  007690  20                 	db	32
  1998  007691  6E                 	db	110	;'n'
  1999  007692  6F                 	db	111	;'o'
  2000  007693  64                 	db	100	;'d'
  2001  007694  65                 	db	101	;'e'
  2002  007695  73                 	db	115	;'s'
  2003  007696  20                 	db	32
  2004  007697  6F                 	db	111	;'o'
  2005  007698  6E                 	db	110	;'n'
  2006  007699  20                 	db	32
  2007  00769A  62                 	db	98	;'b'
  2008  00769B  75                 	db	117	;'u'
  2009  00769C  73                 	db	115	;'s'
  2010  00769D  2E                 	db	46
  2011  00769E  0D                 	db	13
  2012  00769F  0A                 	db	10
  2013  0076A0  00                 	db	0
  2014  0076A1                     STR_202:
  2015  0076A1  53                 	db	83	;'S'
  2016  0076A2  49                 	db	73	;'I'
  2017  0076A3  4C                 	db	76	;'L'
  2018  0076A4  45                 	db	69	;'E'
  2019  0076A5  4E                 	db	78	;'N'
  2020  0076A6  54                 	db	84	;'T'
  2021  0076A7  20                 	db	32
  2022  0076A8  2D                 	db	45
  2023  0076A9  20                 	db	32
  2024  0076AA  4F                 	db	79	;'O'
  2025  0076AB  70                 	db	112	;'p'
  2026  0076AC  65                 	db	101	;'e'
  2027  0076AD  6E                 	db	110	;'n'
  2028  0076AE  20                 	db	32
  2029  0076AF  43                 	db	67	;'C'
  2030  0076B0  41                 	db	65	;'A'
  2031  0076B1  4E                 	db	78	;'N'
  2032  0076B2  20                 	db	32
  2033  0076B3  69                 	db	105	;'i'
  2034  0076B4  6E                 	db	110	;'n'
  2035  0076B5  74                 	db	116	;'t'
  2036  0076B6  65                 	db	101	;'e'
  2037  0076B7  72                 	db	114	;'r'
  2038  0076B8  66                 	db	102	;'f'
  2039  0076B9  61                 	db	97	;'a'
  2040  0076BA  63                 	db	99	;'c'
  2041  0076BB  65                 	db	101	;'e'
  2042  0076BC  20                 	db	32
  2043  0076BD  69                 	db	105	;'i'
  2044  0076BE  6E                 	db	110	;'n'
  2045  0076BF  20                 	db	32
  2046  0076C0  73                 	db	115	;'s'
  2047  0076C1  69                 	db	105	;'i'
  2048  0076C2  6C                 	db	108	;'l'
  2049  0076C3  65                 	db	101	;'e'
  2050  0076C4  6E                 	db	110	;'n'
  2051  0076C5  74                 	db	116	;'t'
  2052  0076C6  20                 	db	32
  2053  0076C7  6D                 	db	109	;'m'
  2054  0076C8  6F                 	db	111	;'o'
  2055  0076C9  64                 	db	100	;'d'
  2056  0076CA  65                 	db	101	;'e'
  2057  0076CB  2E                 	db	46
  2058  0076CC  0D                 	db	13
  2059  0076CD  0A                 	db	10
  2060  0076CE  00                 	db	0
  2061  0076CF                     STR_207:
  2062  0076CF  49                 	db	73	;'I'
  2063  0076D0  46                 	db	70	;'F'
  2064  0076D1  4D                 	db	77	;'M'
  2065  0076D2  4F                 	db	79	;'O'
  2066  0076D3  44                 	db	68	;'D'
  2067  0076D4  45                 	db	69	;'E'
  2068  0076D5  20                 	db	32
  2069  0076D6  2D                 	db	45
  2070  0076D7  20                 	db	32
  2071  0076D8  44                 	db	68	;'D'
  2072  0076D9  69                 	db	105	;'i'
  2073  0076DA  73                 	db	115	;'s'
  2074  0076DB  70                 	db	112	;'p'
  2075  0076DC  6C                 	db	108	;'l'
  2076  0076DD  61                 	db	97	;'a'
  2077  0076DE  79                 	db	121	;'y'
  2078  0076DF  20                 	db	32
  2079  0076E0  73                 	db	115	;'s'
  2080  0076E1  65                 	db	101	;'e'
  2081  0076E2  6C                 	db	108	;'l'
  2082  0076E3  65                 	db	101	;'e'
  2083  0076E4  63                 	db	99	;'c'
  2084  0076E5  74                 	db	116	;'t'
  2085  0076E6  65                 	db	101	;'e'
  2086  0076E7  64                 	db	100	;'d'
  2087  0076E8  20                 	db	32
  2088  0076E9  69                 	db	105	;'i'
  2089  0076EA  6E                 	db	110	;'n'
  2090  0076EB  74                 	db	116	;'t'
  2091  0076EC  65                 	db	101	;'e'
  2092  0076ED  72                 	db	114	;'r'
  2093  0076EE  66                 	db	102	;'f'
  2094  0076EF  61                 	db	97	;'a'
  2095  0076F0  63                 	db	99	;'c'
  2096  0076F1  65                 	db	101	;'e'
  2097  0076F2  20                 	db	32
  2098  0076F3  6D                 	db	109	;'m'
  2099  0076F4  6F                 	db	111	;'o'
  2100  0076F5  64                 	db	100	;'d'
  2101  0076F6  65                 	db	101	;'e'
  2102  0076F7  2E                 	db	46
  2103  0076F8  0D                 	db	13
  2104  0076F9  0A                 	db	10
  2105  0076FA  00                 	db	0
  2106  0076FB                     STR_201:
  2107  0076FB  4F                 	db	79	;'O'
  2108  0076FC  50                 	db	80	;'P'
  2109  0076FD  45                 	db	69	;'E'
  2110  0076FE  4E                 	db	78	;'N'
  2111  0076FF  20                 	db	32
  2112  007700  2D                 	db	45
  2113  007701  20                 	db	32
  2114  007702  4F                 	db	79	;'O'
  2115  007703  70                 	db	112	;'p'
  2116  007704  65                 	db	101	;'e'
  2117  007705  6E                 	db	110	;'n'
  2118  007706  20                 	db	32
  2119  007707  43                 	db	67	;'C'
  2120  007708  41                 	db	65	;'A'
  2121  007709  4E                 	db	78	;'N'
  2122  00770A  20                 	db	32
  2123  00770B  69                 	db	105	;'i'
  2124  00770C  6E                 	db	110	;'n'
  2125  00770D  74                 	db	116	;'t'
  2126  00770E  65                 	db	101	;'e'
  2127  00770F  72                 	db	114	;'r'
  2128  007710  66                 	db	102	;'f'
  2129  007711  61                 	db	97	;'a'
  2130  007712  63                 	db	99	;'c'
  2131  007713  65                 	db	101	;'e'
  2132  007714  20                 	db	32
  2133  007715  69                 	db	105	;'i'
  2134  007716  6E                 	db	110	;'n'
  2135  007717  20                 	db	32
  2136  007718  6E                 	db	110	;'n'
  2137  007719  6F                 	db	111	;'o'
  2138  00771A  72                 	db	114	;'r'
  2139  00771B  6D                 	db	109	;'m'
  2140  00771C  61                 	db	97	;'a'
  2141  00771D  6C                 	db	108	;'l'
  2142  00771E  20                 	db	32
  2143  00771F  6D                 	db	109	;'m'
  2144  007720  6F                 	db	111	;'o'
  2145  007721  64                 	db	100	;'d'
  2146  007722  65                 	db	101	;'e'
  2147  007723  2E                 	db	46
  2148  007724  0D                 	db	13
  2149  007725  0A                 	db	10
  2150  007726  00                 	db	0
  2151  007727                     STR_108:
  2152  007727  2B                 	db	43
  2153  007728  4F                 	db	79	;'O'
  2154  007729  4B                 	db	75	;'K'
  2155  00772A  20                 	db	32
  2156  00772B  2D                 	db	45
  2157  00772C  20                 	db	32
  2158  00772D  4E                 	db	78	;'N'
  2159  00772E  75                 	db	117	;'u'
  2160  00772F  6D                 	db	109	;'m'
  2161  007730  65                 	db	101	;'e'
  2162  007731  72                 	db	114	;'r'
  2163  007732  69                 	db	105	;'i'
  2164  007733  63                 	db	99	;'c'
  2165  007734  61                 	db	97	;'a'
  2166  007735  6C                 	db	108	;'l'
  2167  007736  20                 	db	32
  2168  007737  6F                 	db	111	;'o'
  2169  007738  75                 	db	117	;'u'
  2170  007739  74                 	db	116	;'t'
  2171  00773A  70                 	db	112	;'p'
  2172  00773B  75                 	db	117	;'u'
  2173  00773C  74                 	db	116	;'t'
  2174  00773D  20                 	db	32
  2175  00773E  6E                 	db	110	;'n'
  2176  00773F  6F                 	db	111	;'o'
  2177  007740  77                 	db	119	;'w'
  2178  007741  20                 	db	32
  2179  007742  69                 	db	105	;'i'
  2180  007743  6E                 	db	110	;'n'
  2181  007744  20                 	db	32
  2182  007745  68                 	db	104	;'h'
  2183  007746  65                 	db	101	;'e'
  2184  007747  78                 	db	120	;'x'
  2185  007748  61                 	db	97	;'a'
  2186  007749  64                 	db	100	;'d'
  2187  00774A  65                 	db	101	;'e'
  2188  00774B  63                 	db	99	;'c'
  2189  00774C  69                 	db	105	;'i'
  2190  00774D  6D                 	db	109	;'m'
  2191  00774E  61                 	db	97	;'a'
  2192  00774F  6C                 	db	108	;'l'
  2193  007750  0D                 	db	13
  2194  007751  0A                 	db	10
  2195  007752  00                 	db	0
  2196  007753                     STR_87:
  2197  007753  2D                 	db	45
  2198  007754  45                 	db	69	;'E'
  2199  007755  52                 	db	82	;'R'
  2200  007756  52                 	db	82	;'R'
  2201  007757  4F                 	db	79	;'O'
  2202  007758  52                 	db	82	;'R'
  2203  007759  20                 	db	32
  2204  00775A  2D                 	db	45
  2205  00775B  20                 	db	32
  2206  00775C  66                 	db	102	;'f'
  2207  00775D  69                 	db	105	;'i'
  2208  00775E  6C                 	db	108	;'l'
  2209  00775F  74                 	db	116	;'t'
  2210  007760  65                 	db	101	;'e'
  2211  007761  72                 	db	114	;'r'
  2212  007762  20                 	db	32
  2213  007763  66                 	db	102	;'f'
  2214  007764  6F                 	db	111	;'o'
  2215  007765  72                 	db	114	;'r'
  2216  007766  20                 	db	32
  2217  007767  70                 	db	112	;'p'
  2218  007768  72                 	db	114	;'r'
  2219  007769  69                 	db	105	;'i'
  2220  00776A  6F                 	db	111	;'o'
  2221  00776B  72                 	db	114	;'r'
  2222  00776C  69                 	db	105	;'i'
  2223  00776D  74                 	db	116	;'t'
  2224  00776E  79                 	db	121	;'y'
  2225  00776F  20                 	db	32
  2226  007770  69                 	db	105	;'i'
  2227  007771  73                 	db	115	;'s'
  2228  007772  20                 	db	32
  2229  007773  6D                 	db	109	;'m'
  2230  007774  69                 	db	105	;'i'
  2231  007775  73                 	db	115	;'s'
  2232  007776  73                 	db	115	;'s'
  2233  007777  69                 	db	105	;'i'
  2234  007778  6E                 	db	110	;'n'
  2235  007779  67                 	db	103	;'g'
  2236  00777A  0D                 	db	13
  2237  00777B  0A                 	db	10
  2238  00777C  00                 	db	0
  2239  00777D                     STR_93:
  2240  00777D  2D                 	db	45
  2241  00777E  45                 	db	69	;'E'
  2242  00777F  52                 	db	82	;'R'
  2243  007780  52                 	db	82	;'R'
  2244  007781  4F                 	db	79	;'O'
  2245  007782  52                 	db	82	;'R'
  2246  007783  20                 	db	32
  2247  007784  2D                 	db	45
  2248  007785  20                 	db	32
  2249  007786  66                 	db	102	;'f'
  2250  007787  69                 	db	105	;'i'
  2251  007788  6C                 	db	108	;'l'
  2252  007789  74                 	db	116	;'t'
  2253  00778A  65                 	db	101	;'e'
  2254  00778B  72                 	db	114	;'r'
  2255  00778C  20                 	db	32
  2256  00778D  66                 	db	102	;'f'
  2257  00778E  6F                 	db	111	;'o'
  2258  00778F  72                 	db	114	;'r'
  2259  007790  20                 	db	32
  2260  007791  6E                 	db	110	;'n'
  2261  007792  69                 	db	105	;'i'
  2262  007793  64                 	db	100	;'d'
  2263  007794  65                 	db	101	;'e'
  2264  007795  20                 	db	32
  2265  007796  69                 	db	105	;'i'
  2266  007797  64                 	db	100	;'d'
  2267  007798  20                 	db	32
  2268  007799  69                 	db	105	;'i'
  2269  00779A  73                 	db	115	;'s'
  2270  00779B  20                 	db	32
  2271  00779C  6D                 	db	109	;'m'
  2272  00779D  69                 	db	105	;'i'
  2273  00779E  73                 	db	115	;'s'
  2274  00779F  73                 	db	115	;'s'
  2275  0077A0  69                 	db	105	;'i'
  2276  0077A1  6E                 	db	110	;'n'
  2277  0077A2  67                 	db	103	;'g'
  2278  0077A3  0D                 	db	13
  2279  0077A4  0A                 	db	10
  2280  0077A5  00                 	db	0
  2281  0077A6                     STR_213:
  2282  0077A6  48                 	db	72	;'H'
  2283  0077A7  45                 	db	69	;'E'
  2284  0077A8  4C                 	db	76	;'L'
  2285  0077A9  50                 	db	80	;'P'
  2286  0077AA  20                 	db	32
  2287  0077AB  2D                 	db	45
  2288  0077AC  20                 	db	32
  2289  0077AD  44                 	db	68	;'D'
  2290  0077AE  69                 	db	105	;'i'
  2291  0077AF  73                 	db	115	;'s'
  2292  0077B0  70                 	db	112	;'p'
  2293  0077B1  6C                 	db	108	;'l'
  2294  0077B2  61                 	db	97	;'a'
  2295  0077B3  79                 	db	121	;'y'
  2296  0077B4  20                 	db	32
  2297  0077B5  74                 	db	116	;'t'
  2298  0077B6  68                 	db	104	;'h'
  2299  0077B7  69                 	db	105	;'i'
  2300  0077B8  73                 	db	115	;'s'
  2301  0077B9  20                 	db	32
  2302  0077BA  68                 	db	104	;'h'
  2303  0077BB  65                 	db	101	;'e'
  2304  0077BC  6C                 	db	108	;'l'
  2305  0077BD  70                 	db	112	;'p'
  2306  0077BE  20                 	db	32
  2307  0077BF  69                 	db	105	;'i'
  2308  0077C0  6E                 	db	110	;'n'
  2309  0077C1  66                 	db	102	;'f'
  2310  0077C2  6F                 	db	111	;'o'
  2311  0077C3  72                 	db	114	;'r'
  2312  0077C4  6D                 	db	109	;'m'
  2313  0077C5  61                 	db	97	;'a'
  2314  0077C6  74                 	db	116	;'t'
  2315  0077C7  69                 	db	105	;'i'
  2316  0077C8  6F                 	db	111	;'o'
  2317  0077C9  6E                 	db	110	;'n'
  2318  0077CA  2E                 	db	46
  2319  0077CB  0D                 	db	13
  2320  0077CC  0A                 	db	10
  2321  0077CD  00                 	db	0
  2322  0077CE                     STR_99:
  2323  0077CE  2D                 	db	45
  2324  0077CF  45                 	db	69	;'E'
  2325  0077D0  52                 	db	82	;'R'
  2326  0077D1  52                 	db	82	;'R'
  2327  0077D2  4F                 	db	79	;'O'
  2328  0077D3  52                 	db	82	;'R'
  2329  0077D4  20                 	db	32
  2330  0077D5  2D                 	db	45
  2331  0077D6  20                 	db	32
  2332  0077D7  6D                 	db	109	;'m'
  2333  0077D8  61                 	db	97	;'a'
  2334  0077D9  73                 	db	115	;'s'
  2335  0077DA  6B                 	db	107	;'k'
  2336  0077DB  20                 	db	32
  2337  0077DC  66                 	db	102	;'f'
  2338  0077DD  6F                 	db	111	;'o'
  2339  0077DE  72                 	db	114	;'r'
  2340  0077DF  20                 	db	32
  2341  0077E0  70                 	db	112	;'p'
  2342  0077E1  72                 	db	114	;'r'
  2343  0077E2  69                 	db	105	;'i'
  2344  0077E3  6F                 	db	111	;'o'
  2345  0077E4  72                 	db	114	;'r'
  2346  0077E5  69                 	db	105	;'i'
  2347  0077E6  74                 	db	116	;'t'
  2348  0077E7  79                 	db	121	;'y'
  2349  0077E8  20                 	db	32
  2350  0077E9  69                 	db	105	;'i'
  2351  0077EA  73                 	db	115	;'s'
  2352  0077EB  20                 	db	32
  2353  0077EC  6D                 	db	109	;'m'
  2354  0077ED  69                 	db	105	;'i'
  2355  0077EE  73                 	db	115	;'s'
  2356  0077EF  73                 	db	115	;'s'
  2357  0077F0  69                 	db	105	;'i'
  2358  0077F1  6E                 	db	110	;'n'
  2359  0077F2  67                 	db	103	;'g'
  2360  0077F3  0D                 	db	13
  2361  0077F4  0A                 	db	10
  2362  0077F5  00                 	db	0
  2363  0077F6                     STR_110:
  2364  0077F6  2B                 	db	43
  2365  0077F7  4F                 	db	79	;'O'
  2366  0077F8  4B                 	db	75	;'K'
  2367  0077F9  20                 	db	32
  2368  0077FA  2D                 	db	45
  2369  0077FB  20                 	db	32
  2370  0077FC  4E                 	db	78	;'N'
  2371  0077FD  75                 	db	117	;'u'
  2372  0077FE  6D                 	db	109	;'m'
  2373  0077FF  65                 	db	101	;'e'
  2374  007800  72                 	db	114	;'r'
  2375  007801  69                 	db	105	;'i'
  2376  007802  63                 	db	99	;'c'
  2377  007803  61                 	db	97	;'a'
  2378  007804  6C                 	db	108	;'l'
  2379  007805  20                 	db	32
  2380  007806  6F                 	db	111	;'o'
  2381  007807  75                 	db	117	;'u'
  2382  007808  74                 	db	116	;'t'
  2383  007809  70                 	db	112	;'p'
  2384  00780A  75                 	db	117	;'u'
  2385  00780B  74                 	db	116	;'t'
  2386  00780C  20                 	db	32
  2387  00780D  6E                 	db	110	;'n'
  2388  00780E  6F                 	db	111	;'o'
  2389  00780F  77                 	db	119	;'w'
  2390  007810  20                 	db	32
  2391  007811  69                 	db	105	;'i'
  2392  007812  6E                 	db	110	;'n'
  2393  007813  20                 	db	32
  2394  007814  64                 	db	100	;'d'
  2395  007815  65                 	db	101	;'e'
  2396  007816  63                 	db	99	;'c'
  2397  007817  69                 	db	105	;'i'
  2398  007818  6D                 	db	109	;'m'
  2399  007819  61                 	db	97	;'a'
  2400  00781A  6C                 	db	108	;'l'
  2401  00781B  0D                 	db	13
  2402  00781C  0A                 	db	10
  2403  00781D  00                 	db	0
  2404  00781E                     STR_85:
  2405  00781E  2D                 	db	45
  2406  00781F  45                 	db	69	;'E'
  2407  007820  52                 	db	82	;'R'
  2408  007821  52                 	db	82	;'R'
  2409  007822  4F                 	db	79	;'O'
  2410  007823  52                 	db	82	;'R'
  2411  007824  20                 	db	32
  2412  007825  2D                 	db	45
  2413  007826  20                 	db	32
  2414  007827  4E                 	db	78	;'N'
  2415  007828  6F                 	db	111	;'o'
  2416  007829  20                 	db	32
  2417  00782A  66                 	db	102	;'f'
  2418  00782B  69                 	db	105	;'i'
  2419  00782C  6C                 	db	108	;'l'
  2420  00782D  74                 	db	116	;'t'
  2421  00782E  65                 	db	101	;'e'
  2422  00782F  72                 	db	114	;'r'
  2423  007830  20                 	db	32
  2424  007831  6E                 	db	110	;'n'
  2425  007832  75                 	db	117	;'u'
  2426  007833  6D                 	db	109	;'m'
  2427  007834  62                 	db	98	;'b'
  2428  007835  65                 	db	101	;'e'
  2429  007836  72                 	db	114	;'r'
  2430  007837  20                 	db	32
  2431  007838  73                 	db	115	;'s'
  2432  007839  70                 	db	112	;'p'
  2433  00783A  65                 	db	101	;'e'
  2434  00783B  63                 	db	99	;'c'
  2435  00783C  69                 	db	105	;'i'
  2436  00783D  66                 	db	102	;'f'
  2437  00783E  69                 	db	105	;'i'
  2438  00783F  65                 	db	101	;'e'
  2439  007840  64                 	db	100	;'d'
  2440  007841  2E                 	db	46
  2441  007842  0D                 	db	13
  2442  007843  0A                 	db	10
  2443  007844  00                 	db	0
  2444  007845                     STR_212:
  2445  007845  45                 	db	69	;'E'
  2446  007846  52                 	db	82	;'R'
  2447  007847  52                 	db	82	;'R'
  2448  007848  20                 	db	32
  2449  007849  2D                 	db	45
  2450  00784A  20                 	db	32
  2451  00784B  44                 	db	68	;'D'
  2452  00784C  69                 	db	105	;'i'
  2453  00784D  73                 	db	115	;'s'
  2454  00784E  70                 	db	112	;'p'
  2455  00784F  6C                 	db	108	;'l'
  2456  007850  61                 	db	97	;'a'
  2457  007851  79                 	db	121	;'y'
  2458  007852  20                 	db	32
  2459  007853  43                 	db	67	;'C'
  2460  007854  41                 	db	65	;'A'
  2461  007855  4E                 	db	78	;'N'
  2462  007856  20                 	db	32
  2463  007857  65                 	db	101	;'e'
  2464  007858  72                 	db	114	;'r'
  2465  007859  72                 	db	114	;'r'
  2466  00785A  6F                 	db	111	;'o'
  2467  00785B  72                 	db	114	;'r'
  2468  00785C  20                 	db	32
  2469  00785D  69                 	db	105	;'i'
  2470  00785E  6E                 	db	110	;'n'
  2471  00785F  66                 	db	102	;'f'
  2472  007860  6F                 	db	111	;'o'
  2473  007861  72                 	db	114	;'r'
  2474  007862  6D                 	db	109	;'m'
  2475  007863  61                 	db	97	;'a'
  2476  007864  74                 	db	116	;'t'
  2477  007865  69                 	db	105	;'i'
  2478  007866  6F                 	db	111	;'o'
  2479  007867  6E                 	db	110	;'n'
  2480  007868  2E                 	db	46
  2481  007869  0D                 	db	13
  2482  00786A  0A                 	db	10
  2483  00786B  00                 	db	0
  2484  00786C                     STR_198:
  2485  00786C  48                 	db	72	;'H'
  2486  00786D  65                 	db	101	;'e'
  2487  00786E  6C                 	db	108	;'l'
  2488  00786F  70                 	db	112	;'p'
  2489  007870  20                 	db	32
  2490  007871  66                 	db	102	;'f'
  2491  007872  6F                 	db	111	;'o'
  2492  007873  72                 	db	114	;'r'
  2493  007874  20                 	db	32
  2494  007875  74                 	db	116	;'t'
  2495  007876  68                 	db	104	;'h'
  2496  007877  65                 	db	101	;'e'
  2497  007878  20                 	db	32
  2498  007879  46                 	db	70	;'F'
  2499  00787A  72                 	db	114	;'r'
  2500  00787B  61                 	db	97	;'a'
  2501  00787C  6E                 	db	110	;'n'
  2502  00787D  6B                 	db	107	;'k'
  2503  00787E  66                 	db	102	;'f'
  2504  00787F  75                 	db	117	;'u'
  2505  007880  72                 	db	114	;'r'
  2506  007881  74                 	db	116	;'t'
  2507  007882  20                 	db	32
  2508  007883  52                 	db	82	;'R'
  2509  007884  53                 	db	83	;'S'
  2510  007885  2D                 	db	45
  2511  007886  32                 	db	50	;'2'
  2512  007887  33                 	db	51	;'3'
  2513  007888  32                 	db	50	;'2'
  2514  007889  20                 	db	32
  2515  00788A  6D                 	db	109	;'m'
  2516  00788B  6F                 	db	111	;'o'
  2517  00788C  64                 	db	100	;'d'
  2518  00788D  75                 	db	117	;'u'
  2519  00788E  6C                 	db	108	;'l'
  2520  00788F  65                 	db	101	;'e'
  2521  007890  0D                 	db	13
  2522  007891  0A                 	db	10
  2523  007892  00                 	db	0
  2524  007893                     STR_105:
  2525  007893  2D                 	db	45
  2526  007894  45                 	db	69	;'E'
  2527  007895  52                 	db	82	;'R'
  2528  007896  52                 	db	82	;'R'
  2529  007897  4F                 	db	79	;'O'
  2530  007898  52                 	db	82	;'R'
  2531  007899  20                 	db	32
  2532  00789A  2D                 	db	45
  2533  00789B  20                 	db	32
  2534  00789C  6D                 	db	109	;'m'
  2535  00789D  61                 	db	97	;'a'
  2536  00789E  73                 	db	115	;'s'
  2537  00789F  6B                 	db	107	;'k'
  2538  0078A0  20                 	db	32
  2539  0078A1  66                 	db	102	;'f'
  2540  0078A2  6F                 	db	111	;'o'
  2541  0078A3  72                 	db	114	;'r'
  2542  0078A4  20                 	db	32
  2543  0078A5  6E                 	db	110	;'n'
  2544  0078A6  69                 	db	105	;'i'
  2545  0078A7  64                 	db	100	;'d'
  2546  0078A8  65                 	db	101	;'e'
  2547  0078A9  20                 	db	32
  2548  0078AA  69                 	db	105	;'i'
  2549  0078AB  64                 	db	100	;'d'
  2550  0078AC  20                 	db	32
  2551  0078AD  69                 	db	105	;'i'
  2552  0078AE  73                 	db	115	;'s'
  2553  0078AF  20                 	db	32
  2554  0078B0  6D                 	db	109	;'m'
  2555  0078B1  69                 	db	105	;'i'
  2556  0078B2  73                 	db	115	;'s'
  2557  0078B3  73                 	db	115	;'s'
  2558  0078B4  69                 	db	105	;'i'
  2559  0078B5  6E                 	db	110	;'n'
  2560  0078B6  67                 	db	103	;'g'
  2561  0078B7  0D                 	db	13
  2562  0078B8  0A                 	db	10
  2563  0078B9  00                 	db	0
  2564  0078BA                     STR_89:
  2565  0078BA  2D                 	db	45
  2566  0078BB  45                 	db	69	;'E'
  2567  0078BC  52                 	db	82	;'R'
  2568  0078BD  52                 	db	82	;'R'
  2569  0078BE  4F                 	db	79	;'O'
  2570  0078BF  52                 	db	82	;'R'
  2571  0078C0  20                 	db	32
  2572  0078C1  2D                 	db	45
  2573  0078C2  20                 	db	32
  2574  0078C3  66                 	db	102	;'f'
  2575  0078C4  69                 	db	105	;'i'
  2576  0078C5  6C                 	db	108	;'l'
  2577  0078C6  74                 	db	116	;'t'
  2578  0078C7  65                 	db	101	;'e'
  2579  0078C8  72                 	db	114	;'r'
  2580  0078C9  20                 	db	32
  2581  0078CA  66                 	db	102	;'f'
  2582  0078CB  6F                 	db	111	;'o'
  2583  0078CC  72                 	db	114	;'r'
  2584  0078CD  20                 	db	32
  2585  0078CE  63                 	db	99	;'c'
  2586  0078CF  6C                 	db	108	;'l'
  2587  0078D0  61                 	db	97	;'a'
  2588  0078D1  73                 	db	115	;'s'
  2589  0078D2  73                 	db	115	;'s'
  2590  0078D3  20                 	db	32
  2591  0078D4  69                 	db	105	;'i'
  2592  0078D5  73                 	db	115	;'s'
  2593  0078D6  20                 	db	32
  2594  0078D7  6D                 	db	109	;'m'
  2595  0078D8  69                 	db	105	;'i'
  2596  0078D9  73                 	db	115	;'s'
  2597  0078DA  73                 	db	115	;'s'
  2598  0078DB  69                 	db	105	;'i'
  2599  0078DC  6E                 	db	110	;'n'
  2600  0078DD  67                 	db	103	;'g'
  2601  0078DE  0D                 	db	13
  2602  0078DF  0A                 	db	10
  2603  0078E0  00                 	db	0
  2604  0078E1                     STR_229:
  2605  0078E1  20                 	db	32
  2606  0078E2  20                 	db	32
  2607  0078E3  20                 	db	32
  2608  0078E4  20                 	db	32
  2609  0078E5  20                 	db	32
  2610  0078E6  20                 	db	32
  2611  0078E7  20                 	db	32
  2612  0078E8  20                 	db	32
  2613  0078E9  20                 	db	32
  2614  0078EA  20                 	db	32
  2615  0078EB  20                 	db	32
  2616  0078EC  4D                 	db	77	;'M'
  2617  0078ED  6F                 	db	111	;'o'
  2618  0078EE  64                 	db	100	;'d'
  2619  0078EF  65                 	db	101	;'e'
  2620  0078F0  73                 	db	115	;'s'
  2621  0078F1  3A                 	db	58	;':'
  2622  0078F2  20                 	db	32
  2623  0078F3  76                 	db	118	;'v'
  2624  0078F4  65                 	db	101	;'e'
  2625  0078F5  72                 	db	114	;'r'
  2626  0078F6  62                 	db	98	;'b'
  2627  0078F7  6F                 	db	111	;'o'
  2628  0078F8  73                 	db	115	;'s'
  2629  0078F9  65                 	db	101	;'e'
  2630  0078FA  7C                 	db	124
  2631  0078FB  76                 	db	118	;'v'
  2632  0078FC  73                 	db	115	;'s'
  2633  0078FD  63                 	db	99	;'c'
  2634  0078FE  70                 	db	112	;'p'
  2635  0078FF  7C                 	db	124
  2636  007900  73                 	db	115	;'s'
  2637  007901  6C                 	db	108	;'l'
  2638  007902  63                 	db	99	;'c'
  2639  007903  61                 	db	97	;'a'
  2640  007904  6E                 	db	110	;'n'
  2641  007905  0D                 	db	13
  2642  007906  0A                 	db	10
  2643  007907  00                 	db	0
  2644  007908                     STR_91:
  2645  007908  2D                 	db	45
  2646  007909  45                 	db	69	;'E'
  2647  00790A  52                 	db	82	;'R'
  2648  00790B  52                 	db	82	;'R'
  2649  00790C  4F                 	db	79	;'O'
  2650  00790D  52                 	db	82	;'R'
  2651  00790E  20                 	db	32
  2652  00790F  2D                 	db	45
  2653  007910  20                 	db	32
  2654  007911  66                 	db	102	;'f'
  2655  007912  69                 	db	105	;'i'
  2656  007913  6C                 	db	108	;'l'
  2657  007914  74                 	db	116	;'t'
  2658  007915  65                 	db	101	;'e'
  2659  007916  72                 	db	114	;'r'
  2660  007917  20                 	db	32
  2661  007918  66                 	db	102	;'f'
  2662  007919  6F                 	db	111	;'o'
  2663  00791A  72                 	db	114	;'r'
  2664  00791B  20                 	db	32
  2665  00791C  74                 	db	116	;'t'
  2666  00791D  79                 	db	121	;'y'
  2667  00791E  70                 	db	112	;'p'
  2668  00791F  65                 	db	101	;'e'
  2669  007920  20                 	db	32
  2670  007921  69                 	db	105	;'i'
  2671  007922  73                 	db	115	;'s'
  2672  007923  20                 	db	32
  2673  007924  6D                 	db	109	;'m'
  2674  007925  69                 	db	105	;'i'
  2675  007926  73                 	db	115	;'s'
  2676  007927  73                 	db	115	;'s'
  2677  007928  69                 	db	105	;'i'
  2678  007929  6E                 	db	110	;'n'
  2679  00792A  67                 	db	103	;'g'
  2680  00792B  0D                 	db	13
  2681  00792C  0A                 	db	10
  2682  00792D  00                 	db	0
  2683  00792E                     STR_97:
  2684  00792E  2D                 	db	45
  2685  00792F  45                 	db	69	;'E'
  2686  007930  52                 	db	82	;'R'
  2687  007931  52                 	db	82	;'R'
  2688  007932  4F                 	db	79	;'O'
  2689  007933  52                 	db	82	;'R'
  2690  007934  20                 	db	32
  2691  007935  2D                 	db	45
  2692  007936  20                 	db	32
  2693  007937  4E                 	db	78	;'N'
  2694  007938  6F                 	db	111	;'o'
  2695  007939  20                 	db	32
  2696  00793A  6D                 	db	109	;'m'
  2697  00793B  61                 	db	97	;'a'
  2698  00793C  73                 	db	115	;'s'
  2699  00793D  6B                 	db	107	;'k'
  2700  00793E  20                 	db	32
  2701  00793F  6E                 	db	110	;'n'
  2702  007940  75                 	db	117	;'u'
  2703  007941  6D                 	db	109	;'m'
  2704  007942  62                 	db	98	;'b'
  2705  007943  65                 	db	101	;'e'
  2706  007944  72                 	db	114	;'r'
  2707  007945  20                 	db	32
  2708  007946  73                 	db	115	;'s'
  2709  007947  70                 	db	112	;'p'
  2710  007948  65                 	db	101	;'e'
  2711  007949  63                 	db	99	;'c'
  2712  00794A  69                 	db	105	;'i'
  2713  00794B  66                 	db	102	;'f'
  2714  00794C  69                 	db	105	;'i'
  2715  00794D  65                 	db	101	;'e'
  2716  00794E  64                 	db	100	;'d'
  2717  00794F  2E                 	db	46
  2718  007950  0D                 	db	13
  2719  007951  0A                 	db	10
  2720  007952  00                 	db	0
  2721  007953                     STR_1:
  2722  007953  0D                 	db	13
  2723  007954  0A                 	db	10
  2724  007955  46                 	db	70	;'F'
  2725  007956  72                 	db	114	;'r'
  2726  007957  61                 	db	97	;'a'
  2727  007958  6E                 	db	110	;'n'
  2728  007959  6B                 	db	107	;'k'
  2729  00795A  66                 	db	102	;'f'
  2730  00795B  75                 	db	117	;'u'
  2731  00795C  72                 	db	114	;'r'
  2732  00795D  74                 	db	116	;'t'
  2733  00795E  20                 	db	32
  2734  00795F  52                 	db	82	;'R'
  2735  007960  53                 	db	83	;'S'
  2736  007961  2D                 	db	45
  2737  007962  32                 	db	50	;'2'
  2738  007963  33                 	db	51	;'3'
  2739  007964  32                 	db	50	;'2'
  2740  007965  20                 	db	32
  2741  007966  43                 	db	67	;'C'
  2742  007967  41                 	db	65	;'A'
  2743  007968  4E                 	db	78	;'N'
  2744  007969  34                 	db	52	;'4'
  2745  00796A  56                 	db	86	;'V'
  2746  00796B  53                 	db	83	;'S'
  2747  00796C  43                 	db	67	;'C'
  2748  00796D  50                 	db	80	;'P'
  2749  00796E  20                 	db	32
  2750  00796F  6D                 	db	109	;'m'
  2751  007970  6F                 	db	111	;'o'
  2752  007971  64                 	db	100	;'d'
  2753  007972  75                 	db	117	;'u'
  2754  007973  6C                 	db	108	;'l'
  2755  007974  65                 	db	101	;'e'
  2756  007975  0D                 	db	13
  2757  007976  0A                 	db	10
  2758  007977  00                 	db	0
  2759  007978                     STR_101:
  2760  007978  2D                 	db	45
  2761  007979  45                 	db	69	;'E'
  2762  00797A  52                 	db	82	;'R'
  2763  00797B  52                 	db	82	;'R'
  2764  00797C  4F                 	db	79	;'O'
  2765  00797D  52                 	db	82	;'R'
  2766  00797E  20                 	db	32
  2767  00797F  2D                 	db	45
  2768  007980  20                 	db	32
  2769  007981  6D                 	db	109	;'m'
  2770  007982  61                 	db	97	;'a'
  2771  007983  73                 	db	115	;'s'
  2772  007984  6B                 	db	107	;'k'
  2773  007985  20                 	db	32
  2774  007986  66                 	db	102	;'f'
  2775  007987  6F                 	db	111	;'o'
  2776  007988  72                 	db	114	;'r'
  2777  007989  20                 	db	32
  2778  00798A  63                 	db	99	;'c'
  2779  00798B  6C                 	db	108	;'l'
  2780  00798C  61                 	db	97	;'a'
  2781  00798D  73                 	db	115	;'s'
  2782  00798E  73                 	db	115	;'s'
  2783  00798F  20                 	db	32
  2784  007990  69                 	db	105	;'i'
  2785  007991  73                 	db	115	;'s'
  2786  007992  20                 	db	32
  2787  007993  6D                 	db	109	;'m'
  2788  007994  69                 	db	105	;'i'
  2789  007995  73                 	db	115	;'s'
  2790  007996  73                 	db	115	;'s'
  2791  007997  69                 	db	105	;'i'
  2792  007998  6E                 	db	110	;'n'
  2793  007999  67                 	db	103	;'g'
  2794  00799A  0D                 	db	13
  2795  00799B  0A                 	db	10
  2796  00799C  00                 	db	0
  2797  00799D                     STR_103:
  2798  00799D  2D                 	db	45
  2799  00799E  45                 	db	69	;'E'
  2800  00799F  52                 	db	82	;'R'
  2801  0079A0  52                 	db	82	;'R'
  2802  0079A1  4F                 	db	79	;'O'
  2803  0079A2  52                 	db	82	;'R'
  2804  0079A3  20                 	db	32
  2805  0079A4  2D                 	db	45
  2806  0079A5  20                 	db	32
  2807  0079A6  6D                 	db	109	;'m'
  2808  0079A7  61                 	db	97	;'a'
  2809  0079A8  73                 	db	115	;'s'
  2810  0079A9  6B                 	db	107	;'k'
  2811  0079AA  20                 	db	32
  2812  0079AB  66                 	db	102	;'f'
  2813  0079AC  6F                 	db	111	;'o'
  2814  0079AD  72                 	db	114	;'r'
  2815  0079AE  20                 	db	32
  2816  0079AF  74                 	db	116	;'t'
  2817  0079B0  79                 	db	121	;'y'
  2818  0079B1  70                 	db	112	;'p'
  2819  0079B2  65                 	db	101	;'e'
  2820  0079B3  20                 	db	32
  2821  0079B4  69                 	db	105	;'i'
  2822  0079B5  73                 	db	115	;'s'
  2823  0079B6  20                 	db	32
  2824  0079B7  6D                 	db	109	;'m'
  2825  0079B8  69                 	db	105	;'i'
  2826  0079B9  73                 	db	115	;'s'
  2827  0079BA  73                 	db	115	;'s'
  2828  0079BB  69                 	db	105	;'i'
  2829  0079BC  6E                 	db	110	;'n'
  2830  0079BD  67                 	db	103	;'g'
  2831  0079BE  0D                 	db	13
  2832  0079BF  0A                 	db	10
  2833  0079C0  00                 	db	0
  2834  0079C1                     STR_75:
  2835  0079C1  2B                 	db	43
  2836  0079C2  4F                 	db	79	;'O'
  2837  0079C3  4B                 	db	75	;'K'
  2838  0079C4  20                 	db	32
  2839  0079C5  2D                 	db	45
  2840  0079C6  20                 	db	32
  2841  0079C7  56                 	db	86	;'V'
  2842  0079C8  61                 	db	97	;'a'
  2843  0079C9  6C                 	db	108	;'l'
  2844  0079CA  75                 	db	117	;'u'
  2845  0079CB  65                 	db	101	;'e'
  2846  0079CC  20                 	db	32
  2847  0079CD  77                 	db	119	;'w'
  2848  0079CE  72                 	db	114	;'r'
  2849  0079CF  69                 	db	105	;'i'
  2850  0079D0  74                 	db	116	;'t'
  2851  0079D1  74                 	db	116	;'t'
  2852  0079D2  65                 	db	101	;'e'
  2853  0079D3  6E                 	db	110	;'n'
  2854  0079D4  20                 	db	32
  2855  0079D5  73                 	db	115	;'s'
  2856  0079D6  75                 	db	117	;'u'
  2857  0079D7  63                 	db	99	;'c'
  2858  0079D8  63                 	db	99	;'c'
  2859  0079D9  65                 	db	101	;'e'
  2860  0079DA  73                 	db	115	;'s'
  2861  0079DB  73                 	db	115	;'s'
  2862  0079DC  66                 	db	102	;'f'
  2863  0079DD  75                 	db	117	;'u'
  2864  0079DE  6C                 	db	108	;'l'
  2865  0079DF  6C                 	db	108	;'l'
  2866  0079E0  79                 	db	121	;'y'
  2867  0079E1  0D                 	db	13
  2868  0079E2  0A                 	db	10
  2869  0079E3  00                 	db	0
  2870  0079E4                     STR_222:
  2871  0079E4  53                 	db	83	;'S'
  2872  0079E5  45                 	db	69	;'E'
  2873  0079E6  54                 	db	84	;'T'
  2874  0079E7  20                 	db	32
  2875  0079E8  2D                 	db	45
  2876  0079E9  20                 	db	32
  2877  0079EA  50                 	db	80	;'P'
  2878  0079EB  65                 	db	101	;'e'
  2879  0079EC  72                 	db	114	;'r'
  2880  0079ED  73                 	db	115	;'s'
  2881  0079EE  69                 	db	105	;'i'
  2882  0079EF  73                 	db	115	;'s'
  2883  0079F0  74                 	db	116	;'t'
  2884  0079F1  65                 	db	101	;'e'
  2885  0079F2  6E                 	db	110	;'n'
  2886  0079F3  74                 	db	116	;'t'
  2887  0079F4  20                 	db	32
  2888  0079F5  66                 	db	102	;'f'
  2889  0079F6  75                 	db	117	;'u'
  2890  0079F7  6E                 	db	110	;'n'
  2891  0079F8  63                 	db	99	;'c'
  2892  0079F9  74                 	db	116	;'t'
  2893  0079FA  69                 	db	105	;'i'
  2894  0079FB  6F                 	db	111	;'o'
  2895  0079FC  6E                 	db	110	;'n'
  2896  0079FD  61                 	db	97	;'a'
  2897  0079FE  6C                 	db	108	;'l'
  2898  0079FF  69                 	db	105	;'i'
  2899  007A00  74                 	db	116	;'t'
  2900  007A01  79                 	db	121	;'y'
  2901  007A02  2E                 	db	46
  2902  007A03  0D                 	db	13
  2903  007A04  0A                 	db	10
  2904  007A05  00                 	db	0
  2905  007A06                     STR_60:
  2906  007A06  2D                 	db	45
  2907  007A07  45                 	db	69	;'E'
  2908  007A08  52                 	db	82	;'R'
  2909  007A09  52                 	db	82	;'R'
  2910  007A0A  4F                 	db	79	;'O'
  2911  007A0B  52                 	db	82	;'R'
  2912  007A0C  20                 	db	32
  2913  007A0D  2D                 	db	45
  2914  007A0E  20                 	db	32
  2915  007A0F  55                 	db	85	;'U'
  2916  007A10  6E                 	db	110	;'n'
  2917  007A11  61                 	db	97	;'a'
  2918  007A12  62                 	db	98	;'b'
  2919  007A13  6C                 	db	108	;'l'
  2920  007A14  65                 	db	101	;'e'
  2921  007A15  20                 	db	32
  2922  007A16  74                 	db	116	;'t'
  2923  007A17  6F                 	db	111	;'o'
  2924  007A18  20                 	db	32
  2925  007A19  72                 	db	114	;'r'
  2926  007A1A  65                 	db	101	;'e'
  2927  007A1B  61                 	db	97	;'a'
  2928  007A1C  64                 	db	100	;'d'
  2929  007A1D  20                 	db	32
  2930  007A1E  72                 	db	114	;'r'
  2931  007A1F  65                 	db	101	;'e'
  2932  007A20  67                 	db	103	;'g'
  2933  007A21  69                 	db	105	;'i'
  2934  007A22  73                 	db	115	;'s'
  2935  007A23  74                 	db	116	;'t'
  2936  007A24  65                 	db	101	;'e'
  2937  007A25  72                 	db	114	;'r'
  2938  007A26  20                 	db	32
  2939  007A27  00                 	db	0
  2940  007A28                     STR_211:
  2941  007A28  53                 	db	83	;'S'
  2942  007A29  54                 	db	84	;'T'
  2943  007A2A  41                 	db	65	;'A'
  2944  007A2B  54                 	db	84	;'T'
  2945  007A2C  20                 	db	32
  2946  007A2D  2D                 	db	45
  2947  007A2E  20                 	db	32
  2948  007A2F  44                 	db	68	;'D'
  2949  007A30  69                 	db	105	;'i'
  2950  007A31  73                 	db	115	;'s'
  2951  007A32  70                 	db	112	;'p'
  2952  007A33  6C                 	db	108	;'l'
  2953  007A34  61                 	db	97	;'a'
  2954  007A35  79                 	db	121	;'y'
  2955  007A36  20                 	db	32
  2956  007A37  43                 	db	67	;'C'
  2957  007A38  41                 	db	65	;'A'
  2958  007A39  4E                 	db	78	;'N'
  2959  007A3A  20                 	db	32
  2960  007A3B  73                 	db	115	;'s'
  2961  007A3C  74                 	db	116	;'t'
  2962  007A3D  61                 	db	97	;'a'
  2963  007A3E  74                 	db	116	;'t'
  2964  007A3F  69                 	db	105	;'i'
  2965  007A40  73                 	db	115	;'s'
  2966  007A41  74                 	db	116	;'t'
  2967  007A42  69                 	db	105	;'i'
  2968  007A43  63                 	db	99	;'c'
  2969  007A44  73                 	db	115	;'s'
  2970  007A45  2E                 	db	46
  2971  007A46  0D                 	db	13
  2972  007A47  0A                 	db	10
  2973  007A48  00                 	db	0
  2974  007A49                     STR_36:
  2975  007A49  2D                 	db	45
  2976  007A4A  45                 	db	69	;'E'
  2977  007A4B  52                 	db	82	;'R'
  2978  007A4C  52                 	db	82	;'R'
  2979  007A4D  4F                 	db	79	;'O'
  2980  007A4E  52                 	db	82	;'R'
  2981  007A4F  20                 	db	32
  2982  007A50  2D                 	db	45
  2983  007A51  20                 	db	32
  2984  007A52  46                 	db	70	;'F'
  2985  007A53  61                 	db	97	;'a'
  2986  007A54  69                 	db	105	;'i'
  2987  007A55  6C                 	db	108	;'l'
  2988  007A56  65                 	db	101	;'e'
  2989  007A57  64                 	db	100	;'d'
  2990  007A58  20                 	db	32
  2991  007A59  74                 	db	116	;'t'
  2992  007A5A  6F                 	db	111	;'o'
  2993  007A5B  20                 	db	32
  2994  007A5C  73                 	db	115	;'s'
  2995  007A5D  65                 	db	101	;'e'
  2996  007A5E  6E                 	db	110	;'n'
  2997  007A5F  64                 	db	100	;'d'
  2998  007A60  20                 	db	32
  2999  007A61  65                 	db	101	;'e'
  3000  007A62  76                 	db	118	;'v'
  3001  007A63  65                 	db	101	;'e'
  3002  007A64  6E                 	db	110	;'n'
  3003  007A65  74                 	db	116	;'t'
  3004  007A66  2E                 	db	46
  3005  007A67  0D                 	db	13
  3006  007A68  0A                 	db	10
  3007  007A69  00                 	db	0
  3008  007A6A                     STR_122:
  3009  007A6A  2D                 	db	45
  3010  007A6B  45                 	db	69	;'E'
  3011  007A6C  52                 	db	82	;'R'
  3012  007A6D  52                 	db	82	;'R'
  3013  007A6E  4F                 	db	79	;'O'
  3014  007A6F  52                 	db	82	;'R'
  3015  007A70  20                 	db	32
  3016  007A71  2D                 	db	45
  3017  007A72  20                 	db	32
  3018  007A73  55                 	db	85	;'U'
  3019  007A74  6E                 	db	110	;'n'
  3020  007A75  6B                 	db	107	;'k'
  3021  007A76  6E                 	db	110	;'n'
  3022  007A77  6F                 	db	111	;'o'
  3023  007A78  77                 	db	119	;'w'
  3024  007A79  6E                 	db	110	;'n'
  3025  007A7A  20                 	db	32
  3026  007A7B  27                 	db	39
  3027  007A7C  53                 	db	83	;'S'
  3028  007A7D  45                 	db	69	;'E'
  3029  007A7E  54                 	db	84	;'T'
  3030  007A7F  27                 	db	39
  3031  007A80  20                 	db	32
  3032  007A81  63                 	db	99	;'c'
  3033  007A82  6F                 	db	111	;'o'
  3034  007A83  6D                 	db	109	;'m'
  3035  007A84  6D                 	db	109	;'m'
  3036  007A85  61                 	db	97	;'a'
  3037  007A86  6E                 	db	110	;'n'
  3038  007A87  64                 	db	100	;'d'
  3039  007A88  0D                 	db	13
  3040  007A89  0A                 	db	10
  3041  007A8A  00                 	db	0
  3042  007A8B                     STR_76:
  3043  007A8B  2D                 	db	45
  3044  007A8C  45                 	db	69	;'E'
  3045  007A8D  52                 	db	82	;'R'
  3046  007A8E  52                 	db	82	;'R'
  3047  007A8F  4F                 	db	79	;'O'
  3048  007A90  52                 	db	82	;'R'
  3049  007A91  20                 	db	32
  3050  007A92  2D                 	db	45
  3051  007A93  20                 	db	32
  3052  007A94  46                 	db	70	;'F'
  3053  007A95  61                 	db	97	;'a'
  3054  007A96  69                 	db	105	;'i'
  3055  007A97  6C                 	db	108	;'l'
  3056  007A98  65                 	db	101	;'e'
  3057  007A99  64                 	db	100	;'d'
  3058  007A9A  20                 	db	32
  3059  007A9B  74                 	db	116	;'t'
  3060  007A9C  6F                 	db	111	;'o'
  3061  007A9D  20                 	db	32
  3062  007A9E  77                 	db	119	;'w'
  3063  007A9F  72                 	db	114	;'r'
  3064  007AA0  69                 	db	105	;'i'
  3065  007AA1  74                 	db	116	;'t'
  3066  007AA2  65                 	db	101	;'e'
  3067  007AA3  20                 	db	32
  3068  007AA4  76                 	db	118	;'v'
  3069  007AA5  61                 	db	97	;'a'
  3070  007AA6  6C                 	db	108	;'l'
  3071  007AA7  75                 	db	117	;'u'
  3072  007AA8  65                 	db	101	;'e'
  3073  007AA9  0D                 	db	13
  3074  007AAA  0A                 	db	10
  3075  007AAB  00                 	db	0
  3076  007AAC                     STR_49:
  3077  007AAC  2D                 	db	45
  3078  007AAD  45                 	db	69	;'E'
  3079  007AAE  52                 	db	82	;'R'
  3080  007AAF  52                 	db	82	;'R'
  3081  007AB0  4F                 	db	79	;'O'
  3082  007AB1  52                 	db	82	;'R'
  3083  007AB2  20                 	db	32
  3084  007AB3  2D                 	db	45
  3085  007AB4  20                 	db	32
  3086  007AB5  4E                 	db	78	;'N'
  3087  007AB6  65                 	db	101	;'e'
  3088  007AB7  65                 	db	101	;'e'
  3089  007AB8  64                 	db	100	;'d'
  3090  007AB9  73                 	db	115	;'s'
  3091  007ABA  20                 	db	32
  3092  007ABB  5B                 	db	91	;'['
  3093  007ABC  70                 	db	112	;'p'
  3094  007ABD  61                 	db	97	;'a'
  3095  007ABE  67                 	db	103	;'g'
  3096  007ABF  65                 	db	101	;'e'
  3097  007AC0  3A                 	db	58	;':'
  3098  007AC1  5D                 	db	93	;']'
  3099  007AC2  72                 	db	114	;'r'
  3100  007AC3  65                 	db	101	;'e'
  3101  007AC4  67                 	db	103	;'g'
  3102  007AC5  69                 	db	105	;'i'
  3103  007AC6  73                 	db	115	;'s'
  3104  007AC7  74                 	db	116	;'t'
  3105  007AC8  65                 	db	101	;'e'
  3106  007AC9  72                 	db	114	;'r'
  3107  007ACA  0D                 	db	13
  3108  007ACB  0A                 	db	10
  3109  007ACC  00                 	db	0
  3110  007ACD                     STR_117:
  3111  007ACD  2B                 	db	43
  3112  007ACE  4F                 	db	79	;'O'
  3113  007ACF  4B                 	db	75	;'K'
  3114  007AD0  20                 	db	32
  3115  007AD1  2D                 	db	45
  3116  007AD2  20                 	db	32
  3117  007AD3  4D                 	db	77	;'M'
  3118  007AD4  6F                 	db	111	;'o'
  3119  007AD5  64                 	db	100	;'d'
  3120  007AD6  65                 	db	101	;'e'
  3121  007AD7  20                 	db	32
  3122  007AD8  69                 	db	105	;'i'
  3123  007AD9  73                 	db	115	;'s'
  3124  007ADA  20                 	db	32
  3125  007ADB  6E                 	db	110	;'n'
  3126  007ADC  6F                 	db	111	;'o'
  3127  007ADD  77                 	db	119	;'w'
  3128  007ADE  20                 	db	32
  3129  007ADF  56                 	db	86	;'V'
  3130  007AE0  53                 	db	83	;'S'
  3131  007AE1  43                 	db	67	;'C'
  3132  007AE2  50                 	db	80	;'P'
  3133  007AE3  20                 	db	32
  3134  007AE4  44                 	db	68	;'D'
  3135  007AE5  72                 	db	114	;'r'
  3136  007AE6  69                 	db	105	;'i'
  3137  007AE7  76                 	db	118	;'v'
  3138  007AE8  65                 	db	101	;'e'
  3139  007AE9  72                 	db	114	;'r'
  3140  007AEA  0D                 	db	13
  3141  007AEB  0A                 	db	10
  3142  007AEC  00                 	db	0
  3143  007AED                     STR_6:
  3144  007AED  57                 	db	87	;'W'
  3145  007AEE  69                 	db	105	;'i'
  3146  007AEF  6C                 	db	108	;'l'
  3147  007AF0  6C                 	db	108	;'l'
  3148  007AF1  20                 	db	32
  3149  007AF2  65                 	db	101	;'e'
  3150  007AF3  6E                 	db	110	;'n'
  3151  007AF4  74                 	db	116	;'t'
  3152  007AF5  65                 	db	101	;'e'
  3153  007AF6  72                 	db	114	;'r'
  3154  007AF7  20                 	db	32
  3155  007AF8  62                 	db	98	;'b'
  3156  007AF9  6F                 	db	111	;'o'
  3157  007AFA  6F                 	db	111	;'o'
  3158  007AFB  74                 	db	116	;'t'
  3159  007AFC  6C                 	db	108	;'l'
  3160  007AFD  6F                 	db	111	;'o'
  3161  007AFE  61                 	db	97	;'a'
  3162  007AFF  64                 	db	100	;'d'
  3163  007B00  65                 	db	101	;'e'
  3164  007B01  72                 	db	114	;'r'
  3165  007B02  20                 	db	32
  3166  007B03  6E                 	db	110	;'n'
  3167  007B04  6F                 	db	111	;'o'
  3168  007B05  77                 	db	119	;'w'
  3169  007B06  2E                 	db	46
  3170  007B07  2E                 	db	46
  3171  007B08  2E                 	db	46
  3172  007B09  0D                 	db	13
  3173  007B0A  0A                 	db	10
  3174  007B0B  00                 	db	0
  3175  007B0C                     STR_205:
  3176  007B0C  43                 	db	67	;'C'
  3177  007B0D  4C                 	db	76	;'L'
  3178  007B0E  4F                 	db	79	;'O'
  3179  007B0F  53                 	db	83	;'S'
  3180  007B10  45                 	db	69	;'E'
  3181  007B11  20                 	db	32
  3182  007B12  2D                 	db	45
  3183  007B13  20                 	db	32
  3184  007B14  43                 	db	67	;'C'
  3185  007B15  6C                 	db	108	;'l'
  3186  007B16  6F                 	db	111	;'o'
  3187  007B17  73                 	db	115	;'s'
  3188  007B18  65                 	db	101	;'e'
  3189  007B19  20                 	db	32
  3190  007B1A  43                 	db	67	;'C'
  3191  007B1B  41                 	db	65	;'A'
  3192  007B1C  4E                 	db	78	;'N'
  3193  007B1D  20                 	db	32
  3194  007B1E  69                 	db	105	;'i'
  3195  007B1F  6E                 	db	110	;'n'
  3196  007B20  74                 	db	116	;'t'
  3197  007B21  65                 	db	101	;'e'
  3198  007B22  72                 	db	114	;'r'
  3199  007B23  66                 	db	102	;'f'
  3200  007B24  61                 	db	97	;'a'
  3201  007B25  63                 	db	99	;'c'
  3202  007B26  65                 	db	101	;'e'
  3203  007B27  2E                 	db	46
  3204  007B28  0D                 	db	13
  3205  007B29  0A                 	db	10
  3206  007B2A  00                 	db	0
  3207  007B2B                     STR_4:
  3208  007B2B  54                 	db	84	;'T'
  3209  007B2C  65                 	db	101	;'e'
  3210  007B2D  6D                 	db	109	;'m'
  3211  007B2E  70                 	db	112	;'p'
  3212  007B2F  6F                 	db	111	;'o'
  3213  007B30  72                 	db	114	;'r'
  3214  007B31  61                 	db	97	;'a'
  3215  007B32  72                 	db	114	;'r'
  3216  007B33  79                 	db	121	;'y'
  3217  007B34  20                 	db	32
  3218  007B35  76                 	db	118	;'v'
  3219  007B36  65                 	db	101	;'e'
  3220  007B37  72                 	db	114	;'r'
  3221  007B38  62                 	db	98	;'b'
  3222  007B39  6F                 	db	111	;'o'
  3223  007B3A  73                 	db	115	;'s'
  3224  007B3B  65                 	db	101	;'e'
  3225  007B3C  20                 	db	32
  3226  007B3D  6D                 	db	109	;'m'
  3227  007B3E  6F                 	db	111	;'o'
  3228  007B3F  64                 	db	100	;'d'
  3229  007B40  65                 	db	101	;'e'
  3230  007B41  20                 	db	32
  3231  007B42  73                 	db	115	;'s'
  3232  007B43  65                 	db	101	;'e'
  3233  007B44  74                 	db	116	;'t'
  3234  007B45  0D                 	db	13
  3235  007B46  0A                 	db	10
  3236  007B47  00                 	db	0
  3237  007B48                     STR_115:
  3238  007B48  2B                 	db	43
  3239  007B49  4F                 	db	79	;'O'
  3240  007B4A  4B                 	db	75	;'K'
  3241  007B4B  20                 	db	32
  3242  007B4C  2D                 	db	45
  3243  007B4D  20                 	db	32
  3244  007B4E  4D                 	db	77	;'M'
  3245  007B4F  6F                 	db	111	;'o'
  3246  007B50  64                 	db	100	;'d'
  3247  007B51  65                 	db	101	;'e'
  3248  007B52  20                 	db	32
  3249  007B53  69                 	db	105	;'i'
  3250  007B54  73                 	db	115	;'s'
  3251  007B55  20                 	db	32
  3252  007B56  6E                 	db	110	;'n'
  3253  007B57  6F                 	db	111	;'o'
  3254  007B58  77                 	db	119	;'w'
  3255  007B59  20                 	db	32
  3256  007B5A  76                 	db	118	;'v'
  3257  007B5B  65                 	db	101	;'e'
  3258  007B5C  72                 	db	114	;'r'
  3259  007B5D  62                 	db	98	;'b'
  3260  007B5E  6F                 	db	111	;'o'
  3261  007B5F  73                 	db	115	;'s'
  3262  007B60  65                 	db	101	;'e'
  3263  007B61  0D                 	db	13
  3264  007B62  0A                 	db	10
  3265  007B63  00                 	db	0
  3266  007B64                     STR_200:
  3267  007B64  42                 	db	66	;'B'
  3268  007B65  4F                 	db	79	;'O'
  3269  007B66  4F                 	db	79	;'O'
  3270  007B67  54                 	db	84	;'T'
  3271  007B68  20                 	db	32
  3272  007B69  2D                 	db	45
  3273  007B6A  20                 	db	32
  3274  007B6B  45                 	db	69	;'E'
  3275  007B6C  6E                 	db	110	;'n'
  3276  007B6D  74                 	db	116	;'t'
  3277  007B6E  65                 	db	101	;'e'
  3278  007B6F  72                 	db	114	;'r'
  3279  007B70  20                 	db	32
  3280  007B71  62                 	db	98	;'b'
  3281  007B72  6F                 	db	111	;'o'
  3282  007B73  6F                 	db	111	;'o'
  3283  007B74  74                 	db	116	;'t'
  3284  007B75  6C                 	db	108	;'l'
  3285  007B76  6F                 	db	111	;'o'
  3286  007B77  61                 	db	97	;'a'
  3287  007B78  64                 	db	100	;'d'
  3288  007B79  65                 	db	101	;'e'
  3289  007B7A  72                 	db	114	;'r'
  3290  007B7B  2E                 	db	46
  3291  007B7C  0D                 	db	13
  3292  007B7D  0A                 	db	10
  3293  007B7E  00                 	db	0
  3294  007B7F                     STR_124:
  3295  007B7F  2D                 	db	45
  3296  007B80  45                 	db	69	;'E'
  3297  007B81  52                 	db	82	;'R'
  3298  007B82  52                 	db	82	;'R'
  3299  007B83  4F                 	db	79	;'O'
  3300  007B84  52                 	db	82	;'R'
  3301  007B85  20                 	db	32
  3302  007B86  2D                 	db	45
  3303  007B87  20                 	db	32
  3304  007B88  55                 	db	85	;'U'
  3305  007B89  6E                 	db	110	;'n'
  3306  007B8A  6B                 	db	107	;'k'
  3307  007B8B  6E                 	db	110	;'n'
  3308  007B8C  6F                 	db	111	;'o'
  3309  007B8D  77                 	db	119	;'w'
  3310  007B8E  6E                 	db	110	;'n'
  3311  007B8F  20                 	db	32
  3312  007B90  63                 	db	99	;'c'
  3313  007B91  6F                 	db	111	;'o'
  3314  007B92  6D                 	db	109	;'m'
  3315  007B93  6D                 	db	109	;'m'
  3316  007B94  61                 	db	97	;'a'
  3317  007B95  6E                 	db	110	;'n'
  3318  007B96  64                 	db	100	;'d'
  3319  007B97  0D                 	db	13
  3320  007B98  0A                 	db	10
  3321  007B99  00                 	db	0
  3322  007B9A                     STR_231:
  3323  007B9A  4E                 	db	78	;'N'
  3324  007B9B  6F                 	db	111	;'o'
  3325  007B9C  64                 	db	100	;'d'
  3326  007B9D  65                 	db	101	;'e'
  3327  007B9E  20                 	db	32
  3328  007B9F  66                 	db	102	;'f'
  3329  007BA0  6F                 	db	111	;'o'
  3330  007BA1  75                 	db	117	;'u'
  3331  007BA2  6E                 	db	110	;'n'
  3332  007BA3  64                 	db	100	;'d'
  3333  007BA4  20                 	db	32
  3334  007BA5  77                 	db	119	;'w'
  3335  007BA6  69                 	db	105	;'i'
  3336  007BA7  74                 	db	116	;'t'
  3337  007BA8  68                 	db	104	;'h'
  3338  007BA9  20                 	db	32
  3339  007BAA  6E                 	db	110	;'n'
  3340  007BAB  6F                 	db	111	;'o'
  3341  007BAC  64                 	db	100	;'d'
  3342  007BAD  65                 	db	101	;'e'
  3343  007BAE  20                 	db	32
  3344  007BAF  69                 	db	105	;'i'
  3345  007BB0  64                 	db	100	;'d'
  3346  007BB1  20                 	db	32
  3347  007BB2  3D                 	db	61	;'='
  3348  007BB3  20                 	db	32
  3349  007BB4  00                 	db	0
  3350  007BB5                     STR_119:
  3351  007BB5  2B                 	db	43
  3352  007BB6  4F                 	db	79	;'O'
  3353  007BB7  4B                 	db	75	;'K'
  3354  007BB8  20                 	db	32
  3355  007BB9  2D                 	db	45
  3356  007BBA  20                 	db	32
  3357  007BBB  4D                 	db	77	;'M'
  3358  007BBC  6F                 	db	111	;'o'
  3359  007BBD  64                 	db	100	;'d'
  3360  007BBE  65                 	db	101	;'e'
  3361  007BBF  20                 	db	32
  3362  007BC0  69                 	db	105	;'i'
  3363  007BC1  73                 	db	115	;'s'
  3364  007BC2  20                 	db	32
  3365  007BC3  6E                 	db	110	;'n'
  3366  007BC4  6F                 	db	111	;'o'
  3367  007BC5  77                 	db	119	;'w'
  3368  007BC6  20                 	db	32
  3369  007BC7  53                 	db	83	;'S'
  3370  007BC8  4C                 	db	76	;'L'
  3371  007BC9  43                 	db	67	;'C'
  3372  007BCA  41                 	db	65	;'A'
  3373  007BCB  4E                 	db	78	;'N'
  3374  007BCC  0D                 	db	13
  3375  007BCD  0A                 	db	10
  3376  007BCE  00                 	db	0
  3377  007BCF                     STR_24:
  3378  007BCF  2B                 	db	43
  3379  007BD0  4F                 	db	79	;'O'
  3380  007BD1  4B                 	db	75	;'K'
  3381  007BD2  20                 	db	32
  3382  007BD3  2D                 	db	45
  3383  007BD4  20                 	db	32
  3384  007BD5  4C                 	db	76	;'L'
  3385  007BD6  69                 	db	105	;'i'
  3386  007BD7  73                 	db	115	;'s'
  3387  007BD8  74                 	db	116	;'t'
  3388  007BD9  65                 	db	101	;'e'
  3389  007BDA  6E                 	db	110	;'n'
  3390  007BDB  20                 	db	32
  3391  007BDC  6F                 	db	111	;'o'
  3392  007BDD  6E                 	db	110	;'n'
  3393  007BDE  6C                 	db	108	;'l'
  3394  007BDF  79                 	db	121	;'y'
  3395  007BE0  20                 	db	32
  3396  007BE1  6D                 	db	109	;'m'
  3397  007BE2  6F                 	db	111	;'o'
  3398  007BE3  64                 	db	100	;'d'
  3399  007BE4  65                 	db	101	;'e'
  3400  007BE5  0D                 	db	13
  3401  007BE6  0A                 	db	10
  3402  007BE7  00                 	db	0
  3403  007BE8                     STR_184:
  3404  007BE8  54                 	db	84	;'T'
  3405  007BE9  72                 	db	114	;'r'
  3406  007BEA  61                 	db	97	;'a'
  3407  007BEB  6E                 	db	110	;'n'
  3408  007BEC  73                 	db	115	;'s'
  3409  007BED  6D                 	db	109	;'m'
  3410  007BEE  69                 	db	105	;'i'
  3411  007BEF  74                 	db	116	;'t'
  3412  007BF0  20                 	db	32
  3413  007BF1  45                 	db	69	;'E'
  3414  007BF2  72                 	db	114	;'r'
  3415  007BF3  72                 	db	114	;'r'
  3416  007BF4  6F                 	db	111	;'o'
  3417  007BF5  72                 	db	114	;'r'
  3418  007BF6  20                 	db	32
  3419  007BF7  43                 	db	67	;'C'
  3420  007BF8  6F                 	db	111	;'o'
  3421  007BF9  75                 	db	117	;'u'
  3422  007BFA  6E                 	db	110	;'n'
  3423  007BFB  74                 	db	116	;'t'
  3424  007BFC  65                 	db	101	;'e'
  3425  007BFD  72                 	db	114	;'r'
  3426  007BFE  3A                 	db	58	;':'
  3427  007BFF  20                 	db	32
  3428  007C00  00                 	db	0
  3429  007C01                     STR_208:
  3430  007C01  54                 	db	84	;'T'
  3431  007C02  58                 	db	88	;'X'
  3432  007C03  20                 	db	32
  3433  007C04  2D                 	db	45
  3434  007C05  20                 	db	32
  3435  007C06  53                 	db	83	;'S'
  3436  007C07  65                 	db	101	;'e'
  3437  007C08  6E                 	db	110	;'n'
  3438  007C09  64                 	db	100	;'d'
  3439  007C0A  20                 	db	32
  3440  007C0B  43                 	db	67	;'C'
  3441  007C0C  41                 	db	65	;'A'
  3442  007C0D  4E                 	db	78	;'N'
  3443  007C0E  20                 	db	32
  3444  007C0F  66                 	db	102	;'f'
  3445  007C10  72                 	db	114	;'r'
  3446  007C11  61                 	db	97	;'a'
  3447  007C12  6D                 	db	109	;'m'
  3448  007C13  65                 	db	101	;'e'
  3449  007C14  20                 	db	32
  3450  007C15  2E                 	db	46
  3451  007C16  0D                 	db	13
  3452  007C17  0A                 	db	10
  3453  007C18  00                 	db	0
  3454  007C19                     STR_218:
  3455  007C19  46                 	db	70	;'F'
  3456  007C1A  49                 	db	73	;'I'
  3457  007C1B  4C                 	db	76	;'L'
  3458  007C1C  54                 	db	84	;'T'
  3459  007C1D  45                 	db	69	;'E'
  3460  007C1E  52                 	db	82	;'R'
  3461  007C1F  20                 	db	32
  3462  007C20  2D                 	db	45
  3463  007C21  20                 	db	32
  3464  007C22  53                 	db	83	;'S'
  3465  007C23  65                 	db	101	;'e'
  3466  007C24  74                 	db	116	;'t'
  3467  007C25  20                 	db	32
  3468  007C26  66                 	db	102	;'f'
  3469  007C27  69                 	db	105	;'i'
  3470  007C28  6C                 	db	108	;'l'
  3471  007C29  74                 	db	116	;'t'
  3472  007C2A  65                 	db	101	;'e'
  3473  007C2B  72                 	db	114	;'r'
  3474  007C2C  20                 	db	32
  3475  007C2D  2E                 	db	46
  3476  007C2E  0D                 	db	13
  3477  007C2F  0A                 	db	10
  3478  007C30  00                 	db	0
  3479  007C31                     STR_47:
  3480  007C31  2D                 	db	45
  3481  007C32  45                 	db	69	;'E'
  3482  007C33  52                 	db	82	;'R'
  3483  007C34  52                 	db	82	;'R'
  3484  007C35  4F                 	db	79	;'O'
  3485  007C36  52                 	db	82	;'R'
  3486  007C37  20                 	db	32
  3487  007C38  2D                 	db	45
  3488  007C39  20                 	db	32
  3489  007C3A  4E                 	db	78	;'N'
  3490  007C3B  65                 	db	101	;'e'
  3491  007C3C  65                 	db	101	;'e'
  3492  007C3D  64                 	db	100	;'d'
  3493  007C3E  73                 	db	115	;'s'
  3494  007C3F  20                 	db	32
  3495  007C40  6E                 	db	110	;'n'
  3496  007C41  6F                 	db	111	;'o'
  3497  007C42  64                 	db	100	;'d'
  3498  007C43  65                 	db	101	;'e'
  3499  007C44  69                 	db	105	;'i'
  3500  007C45  64                 	db	100	;'d'
  3501  007C46  0D                 	db	13
  3502  007C47  0A                 	db	10
  3503  007C48  00                 	db	0
  3504  007C49                     STR_27:
  3505  007C49  2D                 	db	45
  3506  007C4A  45                 	db	69	;'E'
  3507  007C4B  52                 	db	82	;'R'
  3508  007C4C  52                 	db	82	;'R'
  3509  007C4D  4F                 	db	79	;'O'
  3510  007C4E  52                 	db	82	;'R'
  3511  007C4F  20                 	db	32
  3512  007C50  2D                 	db	45
  3513  007C51  20                 	db	32
  3514  007C52  55                 	db	85	;'U'
  3515  007C53  6E                 	db	110	;'n'
  3516  007C54  6B                 	db	107	;'k'
  3517  007C55  6E                 	db	110	;'n'
  3518  007C56  6F                 	db	111	;'o'
  3519  007C57  77                 	db	119	;'w'
  3520  007C58  6E                 	db	110	;'n'
  3521  007C59  20                 	db	32
  3522  007C5A  6D                 	db	109	;'m'
  3523  007C5B  6F                 	db	111	;'o'
  3524  007C5C  64                 	db	100	;'d'
  3525  007C5D  65                 	db	101	;'e'
  3526  007C5E  0D                 	db	13
  3527  007C5F  0A                 	db	10
  3528  007C60  00                 	db	0
  3529  007C61                     STR_74:
  3530  007C61  2D                 	db	45
  3531  007C62  45                 	db	69	;'E'
  3532  007C63  52                 	db	82	;'R'
  3533  007C64  52                 	db	82	;'R'
  3534  007C65  4F                 	db	79	;'O'
  3535  007C66  52                 	db	82	;'R'
  3536  007C67  20                 	db	32
  3537  007C68  2D                 	db	45
  3538  007C69  20                 	db	32
  3539  007C6A  4E                 	db	78	;'N'
  3540  007C6B  65                 	db	101	;'e'
  3541  007C6C  65                 	db	101	;'e'
  3542  007C6D  64                 	db	100	;'d'
  3543  007C6E  20                 	db	32
  3544  007C6F  61                 	db	97	;'a'
  3545  007C70  20                 	db	32
  3546  007C71  76                 	db	118	;'v'
  3547  007C72  61                 	db	97	;'a'
  3548  007C73  6C                 	db	108	;'l'
  3549  007C74  75                 	db	117	;'u'
  3550  007C75  65                 	db	101	;'e'
  3551  007C76  0D                 	db	13
  3552  007C77  0A                 	db	10
  3553  007C78  00                 	db	0
  3554  007C79                     STR_191:
  3555  007C79  52                 	db	82	;'R'
  3556  007C7A  65                 	db	101	;'e'
  3557  007C7B  63                 	db	99	;'c'
  3558  007C7C  65                 	db	101	;'e'
  3559  007C7D  69                 	db	105	;'i'
  3560  007C7E  76                 	db	118	;'v'
  3561  007C7F  65                 	db	101	;'e'
  3562  007C80  20                 	db	32
  3563  007C81  45                 	db	69	;'E'
  3564  007C82  72                 	db	114	;'r'
  3565  007C83  72                 	db	114	;'r'
  3566  007C84  6F                 	db	111	;'o'
  3567  007C85  72                 	db	114	;'r'
  3568  007C86  20                 	db	32
  3569  007C87  43                 	db	67	;'C'
  3570  007C88  6F                 	db	111	;'o'
  3571  007C89  75                 	db	117	;'u'
  3572  007C8A  6E                 	db	110	;'n'
  3573  007C8B  74                 	db	116	;'t'
  3574  007C8C  65                 	db	101	;'e'
  3575  007C8D  72                 	db	114	;'r'
  3576  007C8E  3A                 	db	58	;':'
  3577  007C8F  20                 	db	32
  3578  007C90  00                 	db	0
  3579  007C91                     STR_176:
  3580  007C91  55                 	db	85	;'U'
  3581  007C92  41                 	db	65	;'A'
  3582  007C93  52                 	db	82	;'R'
  3583  007C94  54                 	db	84	;'T'
  3584  007C95  20                 	db	32
  3585  007C96  52                 	db	82	;'R'
  3586  007C97  65                 	db	101	;'e'
  3587  007C98  63                 	db	99	;'c'
  3588  007C99  65                 	db	101	;'e'
  3589  007C9A  69                 	db	105	;'i'
  3590  007C9B  76                 	db	118	;'v'
  3591  007C9C  65                 	db	101	;'e'
  3592  007C9D  20                 	db	32
  3593  007C9E  6F                 	db	111	;'o'
  3594  007C9F  76                 	db	118	;'v'
  3595  007CA0  65                 	db	101	;'e'
  3596  007CA1  72                 	db	114	;'r'
  3597  007CA2  72                 	db	114	;'r'
  3598  007CA3  75                 	db	117	;'u'
  3599  007CA4  6E                 	db	110	;'n'
  3600  007CA5  73                 	db	115	;'s'
  3601  007CA6  3A                 	db	58	;':'
  3602  007CA7  20                 	db	32
  3603  007CA8  00                 	db	0
  3604  007CA9                     STR_172:
  3605  007CA9  43                 	db	67	;'C'
  3606  007CAA  41                 	db	65	;'A'
  3607  007CAB  4E                 	db	78	;'N'
  3608  007CAC  20                 	db	32
  3609  007CAD  54                 	db	84	;'T'
  3610  007CAE  72                 	db	114	;'r'
  3611  007CAF  61                 	db	97	;'a'
  3612  007CB0  6E                 	db	110	;'n'
  3613  007CB1  73                 	db	115	;'s'
  3614  007CB2  6D                 	db	109	;'m'
  3615  007CB3  69                 	db	105	;'i'
  3616  007CB4  74                 	db	116	;'t'
  3617  007CB5  20                 	db	32
  3618  007CB6  6F                 	db	111	;'o'
  3619  007CB7  76                 	db	118	;'v'
  3620  007CB8  65                 	db	101	;'e'
  3621  007CB9  72                 	db	114	;'r'
  3622  007CBA  72                 	db	114	;'r'
  3623  007CBB  75                 	db	117	;'u'
  3624  007CBC  6E                 	db	110	;'n'
  3625  007CBD  73                 	db	115	;'s'
  3626  007CBE  3A                 	db	58	;':'
  3627  007CBF  20                 	db	32
  3628  007CC0  00                 	db	0
  3629  007CC1                     STR_210:
  3630  007CC1  52                 	db	82	;'R'
  3631  007CC2  58                 	db	88	;'X'
  3632  007CC3  20                 	db	32
  3633  007CC4  2D                 	db	45
  3634  007CC5  20                 	db	32
  3635  007CC6  52                 	db	82	;'R'
  3636  007CC7  65                 	db	101	;'e'
  3637  007CC8  61                 	db	97	;'a'
  3638  007CC9  64                 	db	100	;'d'
  3639  007CCA  20                 	db	32
  3640  007CCB  43                 	db	67	;'C'
  3641  007CCC  41                 	db	65	;'A'
  3642  007CCD  4E                 	db	78	;'N'
  3643  007CCE  20                 	db	32
  3644  007CCF  66                 	db	102	;'f'
  3645  007CD0  72                 	db	114	;'r'
  3646  007CD1  61                 	db	97	;'a'
  3647  007CD2  6D                 	db	109	;'m'
  3648  007CD3  65                 	db	101	;'e'
  3649  007CD4  2E                 	db	46
  3650  007CD5  0D                 	db	13
  3651  007CD6  0A                 	db	10
  3652  007CD7  00                 	db	0
  3653  007CD8                     STR_168:
  3654  007CD8  43                 	db	67	;'C'
  3655  007CD9  41                 	db	65	;'A'
  3656  007CDA  4E                 	db	78	;'N'
  3657  007CDB  20                 	db	32
  3658  007CDC  52                 	db	82	;'R'
  3659  007CDD  65                 	db	101	;'e'
  3660  007CDE  63                 	db	99	;'c'
  3661  007CDF  65                 	db	101	;'e'
  3662  007CE0  69                 	db	105	;'i'
  3663  007CE1  76                 	db	118	;'v'
  3664  007CE2  65                 	db	101	;'e'
  3665  007CE3  20                 	db	32
  3666  007CE4  6F                 	db	111	;'o'
  3667  007CE5  76                 	db	118	;'v'
  3668  007CE6  65                 	db	101	;'e'
  3669  007CE7  72                 	db	114	;'r'
  3670  007CE8  72                 	db	114	;'r'
  3671  007CE9  75                 	db	117	;'u'
  3672  007CEA  6E                 	db	110	;'n'
  3673  007CEB  73                 	db	115	;'s'
  3674  007CEC  3A                 	db	58	;':'
  3675  007CED  20                 	db	32
  3676  007CEE  00                 	db	0
  3677  007CEF                     STR_253:
  3678  007CEF  55                 	db	85	;'U'
  3679  007CF0  6E                 	db	110	;'n'
  3680  007CF1  6B                 	db	107	;'k'
  3681  007CF2  6E                 	db	110	;'n'
  3682  007CF3  6F                 	db	111	;'o'
  3683  007CF4  77                 	db	119	;'w'
  3684  007CF5  6E                 	db	110	;'n'
  3685  007CF6  20                 	db	32
  3686  007CF7  28                 	db	40
  3687  007CF8  56                 	db	86	;'V'
  3688  007CF9  65                 	db	101	;'e'
  3689  007CFA  72                 	db	114	;'r'
  3690  007CFB  62                 	db	98	;'b'
  3691  007CFC  6F                 	db	111	;'o'
  3692  007CFD  73                 	db	115	;'s'
  3693  007CFE  65                 	db	101	;'e'
  3694  007CFF  20                 	db	32
  3695  007D00  75                 	db	117	;'u'
  3696  007D01  73                 	db	115	;'s'
  3697  007D02  65                 	db	101	;'e'
  3698  007D03  64                 	db	100	;'d'
  3699  007D04  29                 	db	41
  3700  007D05  00                 	db	0
  3701  007D06                     STR_23:
  3702  007D06  2B                 	db	43
  3703  007D07  4F                 	db	79	;'O'
  3704  007D08  4B                 	db	75	;'K'
  3705  007D09  20                 	db	32
  3706  007D0A  2D                 	db	45
  3707  007D0B  20                 	db	32
  3708  007D0C  4C                 	db	76	;'L'
  3709  007D0D  6F                 	db	111	;'o'
  3710  007D0E  6F                 	db	111	;'o'
  3711  007D0F  70                 	db	112	;'p'
  3712  007D10  62                 	db	98	;'b'
  3713  007D11  61                 	db	97	;'a'
  3714  007D12  63                 	db	99	;'c'
  3715  007D13  6B                 	db	107	;'k'
  3716  007D14  20                 	db	32
  3717  007D15  6D                 	db	109	;'m'
  3718  007D16  6F                 	db	111	;'o'
  3719  007D17  64                 	db	100	;'d'
  3720  007D18  65                 	db	101	;'e'
  3721  007D19  0D                 	db	13
  3722  007D1A  0A                 	db	10
  3723  007D1B  00                 	db	0
  3724  007D1C                     STR_160:
  3725  007D1C  52                 	db	82	;'R'
  3726  007D1D  65                 	db	101	;'e'
  3727  007D1E  63                 	db	99	;'c'
  3728  007D1F  65                 	db	101	;'e'
  3729  007D20  69                 	db	105	;'i'
  3730  007D21  76                 	db	118	;'v'
  3731  007D22  65                 	db	101	;'e'
  3732  007D23  64                 	db	100	;'d'
  3733  007D24  20                 	db	32
  3734  007D25  43                 	db	67	;'C'
  3735  007D26  41                 	db	65	;'A'
  3736  007D27  4E                 	db	78	;'N'
  3737  007D28  20                 	db	32
  3738  007D29  66                 	db	102	;'f'
  3739  007D2A  72                 	db	114	;'r'
  3740  007D2B  61                 	db	97	;'a'
  3741  007D2C  6D                 	db	109	;'m'
  3742  007D2D  65                 	db	101	;'e'
  3743  007D2E  73                 	db	115	;'s'
  3744  007D2F  3A                 	db	58	;':'
  3745  007D30  20                 	db	32
  3746  007D31  00                 	db	0
  3747  007D32                     STR_164:
  3748  007D32  52                 	db	82	;'R'
  3749  007D33  65                 	db	101	;'e'
  3750  007D34  63                 	db	99	;'c'
  3751  007D35  65                 	db	101	;'e'
  3752  007D36  69                 	db	105	;'i'
  3753  007D37  76                 	db	118	;'v'
  3754  007D38  65                 	db	101	;'e'
  3755  007D39  64                 	db	100	;'d'
  3756  007D3A  20                 	db	32
  3757  007D3B  43                 	db	67	;'C'
  3758  007D3C  41                 	db	65	;'A'
  3759  007D3D  4E                 	db	78	;'N'
  3760  007D3E  20                 	db	32
  3761  007D3F  62                 	db	98	;'b'
  3762  007D40  79                 	db	121	;'y'
  3763  007D41  74                 	db	116	;'t'
  3764  007D42  65                 	db	101	;'e'
  3765  007D43  73                 	db	115	;'s'
  3766  007D44  3A                 	db	58	;':'
  3767  007D45  20                 	db	32
  3768  007D46  00                 	db	0
  3769  007D47                     STR_220:
  3770  007D47  4D                 	db	77	;'M'
  3771  007D48  41                 	db	65	;'A'
  3772  007D49  53                 	db	83	;'S'
  3773  007D4A  4B                 	db	75	;'K'
  3774  007D4B  20                 	db	32
  3775  007D4C  2D                 	db	45
  3776  007D4D  20                 	db	32
  3777  007D4E  53                 	db	83	;'S'
  3778  007D4F  65                 	db	101	;'e'
  3779  007D50  74                 	db	116	;'t'
  3780  007D51  20                 	db	32
  3781  007D52  6D                 	db	109	;'m'
  3782  007D53  61                 	db	97	;'a'
  3783  007D54  73                 	db	115	;'s'
  3784  007D55  6B                 	db	107	;'k'
  3785  007D56  20                 	db	32
  3786  007D57  2E                 	db	46
  3787  007D58  0D                 	db	13
  3788  007D59  0A                 	db	10
  3789  007D5A  00                 	db	0
  3790  007D5B                     STR_125:
  3791  007D5B  4A                 	db	74	;'J'
  3792  007D5C  46                 	db	70	;'F'
  3793  007D5D  72                 	db	114	;'r'
  3794  007D5E  61                 	db	97	;'a'
  3795  007D5F  6E                 	db	110	;'n'
  3796  007D60  6B                 	db	107	;'k'
  3797  007D61  66                 	db	102	;'f'
  3798  007D62  75                 	db	117	;'u'
  3799  007D63  72                 	db	114	;'r'
  3800  007D64  74                 	db	116	;'t'
  3801  007D65  20                 	db	32
  3802  007D66  52                 	db	82	;'R'
  3803  007D67  53                 	db	83	;'S'
  3804  007D68  2D                 	db	45
  3805  007D69  32                 	db	50	;'2'
  3806  007D6A  33                 	db	51	;'3'
  3807  007D6B  32                 	db	50	;'2'
  3808  007D6C  0D                 	db	13
  3809  007D6D  0A                 	db	10
  3810  007D6E  00                 	db	0
  3811  007D6F                     STR_25:
  3812  007D6F  2B                 	db	43
  3813  007D70  4F                 	db	79	;'O'
  3814  007D71  4B                 	db	75	;'K'
  3815  007D72  20                 	db	32
  3816  007D73  2D                 	db	45
  3817  007D74  20                 	db	32
  3818  007D75  43                 	db	67	;'C'
  3819  007D76  6C                 	db	108	;'l'
  3820  007D77  6F                 	db	111	;'o'
  3821  007D78  73                 	db	115	;'s'
  3822  007D79  65                 	db	101	;'e'
  3823  007D7A  64                 	db	100	;'d'
  3824  007D7B  20                 	db	32
  3825  007D7C  6D                 	db	109	;'m'
  3826  007D7D  6F                 	db	111	;'o'
  3827  007D7E  64                 	db	100	;'d'
  3828  007D7F  65                 	db	101	;'e'
  3829  007D80  0D                 	db	13
  3830  007D81  0A                 	db	10
  3831  007D82  00                 	db	0
  3832  007D83                     STR_20:
  3833  007D83  2B                 	db	43
  3834  007D84  4F                 	db	79	;'O'
  3835  007D85  4B                 	db	75	;'K'
  3836  007D86  20                 	db	32
  3837  007D87  2D                 	db	45
  3838  007D88  20                 	db	32
  3839  007D89  4E                 	db	78	;'N'
  3840  007D8A  6F                 	db	111	;'o'
  3841  007D8B  72                 	db	114	;'r'
  3842  007D8C  6D                 	db	109	;'m'
  3843  007D8D  61                 	db	97	;'a'
  3844  007D8E  6C                 	db	108	;'l'
  3845  007D8F  20                 	db	32
  3846  007D90  6D                 	db	109	;'m'
  3847  007D91  6F                 	db	111	;'o'
  3848  007D92  64                 	db	100	;'d'
  3849  007D93  65                 	db	101	;'e'
  3850  007D94  0D                 	db	13
  3851  007D95  0A                 	db	10
  3852  007D96  00                 	db	0
  3853  007D97                     STR_21:
  3854  007D97  2B                 	db	43
  3855  007D98  4F                 	db	79	;'O'
  3856  007D99  4B                 	db	75	;'K'
  3857  007D9A  20                 	db	32
  3858  007D9B  2D                 	db	45
  3859  007D9C  20                 	db	32
  3860  007D9D  53                 	db	83	;'S'
  3861  007D9E  69                 	db	105	;'i'
  3862  007D9F  6C                 	db	108	;'l'
  3863  007DA0  65                 	db	101	;'e'
  3864  007DA1  6E                 	db	110	;'n'
  3865  007DA2  74                 	db	116	;'t'
  3866  007DA3  20                 	db	32
  3867  007DA4  6D                 	db	109	;'m'
  3868  007DA5  6F                 	db	111	;'o'
  3869  007DA6  64                 	db	100	;'d'
  3870  007DA7  65                 	db	101	;'e'
  3871  007DA8  0D                 	db	13
  3872  007DA9  0A                 	db	10
  3873  007DAA  00                 	db	0
  3874  007DAB                     STR_78:
  3875  007DAB  49                 	db	73	;'I'
  3876  007DAC  6E                 	db	110	;'n'
  3877  007DAD  66                 	db	102	;'f'
  3878  007DAE  6F                 	db	111	;'o'
  3879  007DAF  20                 	db	32
  3880  007DB0  66                 	db	102	;'f'
  3881  007DB1  6F                 	db	111	;'o'
  3882  007DB2  72                 	db	114	;'r'
  3883  007DB3  20                 	db	32
  3884  007DB4  6E                 	db	110	;'n'
  3885  007DB5  6F                 	db	111	;'o'
  3886  007DB6  64                 	db	100	;'d'
  3887  007DB7  65                 	db	101	;'e'
  3888  007DB8  20                 	db	32
  3889  007DB9  69                 	db	105	;'i'
  3890  007DBA  64                 	db	100	;'d'
  3891  007DBB  20                 	db	32
  3892  007DBC  3D                 	db	61	;'='
  3893  007DBD  20                 	db	32
  3894  007DBE  00                 	db	0
  3895  007DBF                     STR_242:
  3896  007DBF  46                 	db	70	;'F'
  3897  007DC0  69                 	db	105	;'i'
  3898  007DC1  72                 	db	114	;'r'
  3899  007DC2  6D                 	db	109	;'m'
  3900  007DC3  77                 	db	119	;'w'
  3901  007DC4  61                 	db	97	;'a'
  3902  007DC5  72                 	db	114	;'r'
  3903  007DC6  65                 	db	101	;'e'
  3904  007DC7  20                 	db	32
  3905  007DC8  76                 	db	118	;'v'
  3906  007DC9  65                 	db	101	;'e'
  3907  007DCA  72                 	db	114	;'r'
  3908  007DCB  73                 	db	115	;'s'
  3909  007DCC  69                 	db	105	;'i'
  3910  007DCD  6F                 	db	111	;'o'
  3911  007DCE  6E                 	db	110	;'n'
  3912  007DCF  20                 	db	32
  3913  007DD0  3D                 	db	61	;'='
  3914  007DD1  20                 	db	32
  3915  007DD2  00                 	db	0
  3916  007DD3                     STR_22:
  3917  007DD3  2B                 	db	43
  3918  007DD4  4F                 	db	79	;'O'
  3919  007DD5  4B                 	db	75	;'K'
  3920  007DD6  20                 	db	32
  3921  007DD7  2D                 	db	45
  3922  007DD8  20                 	db	32
  3923  007DD9  53                 	db	83	;'S'
  3924  007DDA  6C                 	db	108	;'l'
  3925  007DDB  65                 	db	101	;'e'
  3926  007DDC  65                 	db	101	;'e'
  3927  007DDD  70                 	db	112	;'p'
  3928  007DDE  20                 	db	32
  3929  007DDF  6D                 	db	109	;'m'
  3930  007DE0  6F                 	db	111	;'o'
  3931  007DE1  64                 	db	100	;'d'
  3932  007DE2  65                 	db	101	;'e'
  3933  007DE3  0D                 	db	13
  3934  007DE4  0A                 	db	10
  3935  007DE5  00                 	db	0
  3936  007DE6                     STR_26:
  3937  007DE6  2B                 	db	43
  3938  007DE7  4F                 	db	79	;'O'
  3939  007DE8  4B                 	db	75	;'K'
  3940  007DE9  20                 	db	32
  3941  007DEA  2D                 	db	45
  3942  007DEB  20                 	db	32
  3943  007DEC  42                 	db	66	;'B'
  3944  007DED  69                 	db	105	;'i'
  3945  007DEE  74                 	db	116	;'t'
  3946  007DEF  73                 	db	115	;'s'
  3947  007DF0  20                 	db	32
  3948  007DF1  6D                 	db	109	;'m'
  3949  007DF2  6F                 	db	111	;'o'
  3950  007DF3  64                 	db	100	;'d'
  3951  007DF4  65                 	db	101	;'e'
  3952  007DF5  0D                 	db	13
  3953  007DF6  0A                 	db	10
  3954  007DF7  00                 	db	0
  3955  007DF8                     STR_39:
  3956  007DF8  2B                 	db	43
  3957  007DF9  4F                 	db	79	;'O'
  3958  007DFA  4B                 	db	75	;'K'
  3959  007DFB  20                 	db	32
  3960  007DFC  2D                 	db	45
  3961  007DFD  20                 	db	32
  3962  007DFE  6E                 	db	110	;'n'
  3963  007DFF  6F                 	db	111	;'o'
  3964  007E00  20                 	db	32
  3965  007E01  65                 	db	101	;'e'
  3966  007E02  76                 	db	118	;'v'
  3967  007E03  65                 	db	101	;'e'
  3968  007E04  6E                 	db	110	;'n'
  3969  007E05  74                 	db	116	;'t'
  3970  007E06  73                 	db	115	;'s'
  3971  007E07  0D                 	db	13
  3972  007E08  0A                 	db	10
  3973  007E09  00                 	db	0
  3974  007E0A                     STR_152:
  3975  007E0A  53                 	db	83	;'S'
  3976  007E0B  65                 	db	101	;'e'
  3977  007E0C  6E                 	db	110	;'n'
  3978  007E0D  74                 	db	116	;'t'
  3979  007E0E  20                 	db	32
  3980  007E0F  43                 	db	67	;'C'
  3981  007E10  41                 	db	65	;'A'
  3982  007E11  4E                 	db	78	;'N'
  3983  007E12  20                 	db	32
  3984  007E13  66                 	db	102	;'f'
  3985  007E14  72                 	db	114	;'r'
  3986  007E15  61                 	db	97	;'a'
  3987  007E16  6D                 	db	109	;'m'
  3988  007E17  65                 	db	101	;'e'
  3989  007E18  73                 	db	115	;'s'
  3990  007E19  3A                 	db	58	;':'
  3991  007E1A  20                 	db	32
  3992  007E1B  00                 	db	0
  3993  007E1C                     STR_255:
  3994  007E1C  30                 	db	48	;'0'
  3995  007E1D  31                 	db	49	;'1'
  3996  007E1E  32                 	db	50	;'2'
  3997  007E1F  33                 	db	51	;'3'
  3998  007E20  34                 	db	52	;'4'
  3999  007E21  35                 	db	53	;'5'
  4000  007E22  36                 	db	54	;'6'
  4001  007E23  37                 	db	55	;'7'
  4002  007E24  38                 	db	56	;'8'
  4003  007E25  39                 	db	57	;'9'
  4004  007E26  41                 	db	65	;'A'
  4005  007E27  42                 	db	66	;'B'
  4006  007E28  43                 	db	67	;'C'
  4007  007E29  44                 	db	68	;'D'
  4008  007E2A  45                 	db	69	;'E'
  4009  007E2B  46                 	db	70	;'F'
  4010  007E2C  00                 	db	0
  4011  007E2D                     STR_256:
  4012  007E2D  30                 	db	48	;'0'
  4013  007E2E  31                 	db	49	;'1'
  4014  007E2F  32                 	db	50	;'2'
  4015  007E30  33                 	db	51	;'3'
  4016  007E31  34                 	db	52	;'4'
  4017  007E32  35                 	db	53	;'5'
  4018  007E33  36                 	db	54	;'6'
  4019  007E34  37                 	db	55	;'7'
  4020  007E35  38                 	db	56	;'8'
  4021  007E36  39                 	db	57	;'9'
  4022  007E37  61                 	db	97	;'a'
  4023  007E38  62                 	db	98	;'b'
  4024  007E39  63                 	db	99	;'c'
  4025  007E3A  64                 	db	100	;'d'
  4026  007E3B  65                 	db	101	;'e'
  4027  007E3C  66                 	db	102	;'f'
  4028  007E3D  00                 	db	0
  4029  007E3E                     STR_156:
  4030  007E3E  53                 	db	83	;'S'
  4031  007E3F  65                 	db	101	;'e'
  4032  007E40  6E                 	db	110	;'n'
  4033  007E41  74                 	db	116	;'t'
  4034  007E42  20                 	db	32
  4035  007E43  43                 	db	67	;'C'
  4036  007E44  41                 	db	65	;'A'
  4037  007E45  4E                 	db	78	;'N'
  4038  007E46  20                 	db	32
  4039  007E47  62                 	db	98	;'b'
  4040  007E48  79                 	db	121	;'y'
  4041  007E49  74                 	db	116	;'t'
  4042  007E4A  65                 	db	101	;'e'
  4043  007E4B  73                 	db	115	;'s'
  4044  007E4C  3A                 	db	58	;':'
  4045  007E4D  20                 	db	32
  4046  007E4E  00                 	db	0
  4047  007E4F                     STR_234:
  4048  007E4F  20                 	db	32
  4049  007E50  6E                 	db	110	;'n'
  4050  007E51  6F                 	db	111	;'o'
  4051  007E52  64                 	db	100	;'d'
  4052  007E53  65                 	db	101	;'e'
  4053  007E54  73                 	db	115	;'s'
  4054  007E55  20                 	db	32
  4055  007E56  66                 	db	102	;'f'
  4056  007E57  6F                 	db	111	;'o'
  4057  007E58  75                 	db	117	;'u'
  4058  007E59  6E                 	db	110	;'n'
  4059  007E5A  64                 	db	100	;'d'
  4060  007E5B  0D                 	db	13
  4061  007E5C  0A                 	db	10
  4062  007E5D  00                 	db	0
  4063  007E5E                     STR_51:
  4064  007E5E  56                 	db	86	;'V'
  4065  007E5F  61                 	db	97	;'a'
  4066  007E60  6C                 	db	108	;'l'
  4067  007E61  75                 	db	117	;'u'
  4068  007E62  65                 	db	101	;'e'
  4069  007E63  20                 	db	32
  4070  007E64  66                 	db	102	;'f'
  4071  007E65  6F                 	db	111	;'o'
  4072  007E66  72                 	db	114	;'r'
  4073  007E67  20                 	db	32
  4074  007E68  72                 	db	114	;'r'
  4075  007E69  65                 	db	101	;'e'
  4076  007E6A  67                 	db	103	;'g'
  4077  007E6B  20                 	db	32
  4078  007E6C  00                 	db	0
  4079  007E6D                     STR_240:
  4080  007E6D  4D                 	db	77	;'M'
  4081  007E6E  44                 	db	68	;'D'
  4082  007E6F  46                 	db	70	;'F'
  4083  007E70  20                 	db	32
  4084  007E71  3D                 	db	61	;'='
  4085  007E72  20                 	db	32
  4086  007E73  68                 	db	104	;'h'
  4087  007E74  74                 	db	116	;'t'
  4088  007E75  74                 	db	116	;'t'
  4089  007E76  70                 	db	112	;'p'
  4090  007E77  3A                 	db	58	;':'
  4091  007E78  2F                 	db	47
  4092  007E79  2F                 	db	47
  4093  007E7A  00                 	db	0
  4094  007E7B                     STR_250:
  4095  007E7B  56                 	db	86	;'V'
  4096  007E7C  53                 	db	83	;'S'
  4097  007E7D  43                 	db	67	;'C'
  4098  007E7E  50                 	db	80	;'P'
  4099  007E7F  20                 	db	32
  4100  007E80  44                 	db	68	;'D'
  4101  007E81  72                 	db	114	;'r'
  4102  007E82  69                 	db	105	;'i'
  4103  007E83  76                 	db	118	;'v'
  4104  007E84  65                 	db	101	;'e'
  4105  007E85  72                 	db	114	;'r'
  4106  007E86  00                 	db	0
  4107  007E87                     STR_111:
  4108  007E87  52                 	db	82	;'R'
  4109  007E88  57                 	db	87	;'W'
  4110  007E89  54                 	db	84	;'T'
  4111  007E8A  49                 	db	73	;'I'
  4112  007E8B  4D                 	db	77	;'M'
  4113  007E8C  45                 	db	69	;'E'
  4114  007E8D  4F                 	db	79	;'O'
  4115  007E8E  55                 	db	85	;'U'
  4116  007E8F  54                 	db	84	;'T'
  4117  007E90  20                 	db	32
  4118  007E91  00                 	db	0
  4119  007E92                     STR_150:
  4120  007E92  2C                 	db	44
  4121  007E93  44                 	db	68	;'D'
  4122  007E94  61                 	db	97	;'a'
  4123  007E95  74                 	db	116	;'t'
  4124  007E96  61                 	db	97	;'a'
  4125  007E97  3D                 	db	61	;'='
  4126  007E98  6E                 	db	110	;'n'
  4127  007E99  6F                 	db	111	;'o'
  4128  007E9A  6E                 	db	110	;'n'
  4129  007E9B  65                 	db	101	;'e'
  4130  007E9C  00                 	db	0
  4131  007E9D                     STR_246:
  4132  007E9D  56                 	db	86	;'V'
  4133  007E9E  65                 	db	101	;'e'
  4134  007E9F  72                 	db	114	;'r'
  4135  007EA0  73                 	db	115	;'s'
  4136  007EA1  69                 	db	105	;'i'
  4137  007EA2  6F                 	db	111	;'o'
  4138  007EA3  6E                 	db	110	;'n'
  4139  007EA4  3A                 	db	58	;':'
  4140  007EA5  20                 	db	32
  4141  007EA6  00                 	db	0
  4142  007EA7                     STR_252:
  4143  007EA7  56                 	db	86	;'V'
  4144  007EA8  53                 	db	83	;'S'
  4145  007EA9  43                 	db	67	;'C'
  4146  007EAA  50                 	db	80	;'P'
  4147  007EAB  20                 	db	32
  4148  007EAC  4E                 	db	78	;'N'
  4149  007EAD  6F                 	db	111	;'o'
  4150  007EAE  64                 	db	100	;'d'
  4151  007EAF  65                 	db	101	;'e'
  4152  007EB0  00                 	db	0
  4153  007EB1                     STR_251:
  4154  007EB1  53                 	db	83	;'S'
  4155  007EB2  4C                 	db	76	;'L'
  4156  007EB3  20                 	db	32
  4157  007EB4  44                 	db	68	;'D'
  4158  007EB5  72                 	db	114	;'r'
  4159  007EB6  69                 	db	105	;'i'
  4160  007EB7  76                 	db	118	;'v'
  4161  007EB8  65                 	db	101	;'e'
  4162  007EB9  72                 	db	114	;'r'
  4163  007EBA  00                 	db	0
  4164  007EBB                     STR_112:
  4165  007EBB  53                 	db	83	;'S'
  4166  007EBC  54                 	db	84	;'T'
  4167  007EBD  41                 	db	65	;'A'
  4168  007EBE  52                 	db	82	;'R'
  4169  007EBF  54                 	db	84	;'T'
  4170  007EC0  49                 	db	73	;'I'
  4171  007EC1  46                 	db	70	;'F'
  4172  007EC2  20                 	db	32
  4173  007EC3  00                 	db	0
  4174  007EC4                     STR_140:
  4175  007EC4  2C                 	db	44
  4176  007EC5  6E                 	db	110	;'n'
  4177  007EC6  6F                 	db	111	;'o'
  4178  007EC7  64                 	db	100	;'d'
  4179  007EC8  65                 	db	101	;'e'
  4180  007EC9  69                 	db	105	;'i'
  4181  007ECA  64                 	db	100	;'d'
  4182  007ECB  3D                 	db	61	;'='
  4183  007ECC  00                 	db	0
  4184  007ECD                     STR_13:
  4185  007ECD  4C                 	db	76	;'L'
  4186  007ECE  4F                 	db	79	;'O'
  4187  007ECF  4F                 	db	79	;'O'
  4188  007ED0  50                 	db	80	;'P'
  4189  007ED1  42                 	db	66	;'B'
  4190  007ED2  41                 	db	65	;'A'
  4191  007ED3  43                 	db	67	;'C'
  4192  007ED4  4B                 	db	75	;'K'
  4193  007ED5  00                 	db	0
  4194  007ED6                     STR_126:
  4195  007ED6  56                 	db	86	;'V'
  4196  007ED7  31                 	db	49	;'1'
  4197  007ED8  30                 	db	48	;'0'
  4198  007ED9  31                 	db	49	;'1'
  4199  007EDA  31                 	db	49	;'1'
  4200  007EDB  0D                 	db	13
  4201  007EDC  0A                 	db	10
  4202  007EDD  00                 	db	0
  4203  007EDE                     STR_127:
  4204  007EDE  4E                 	db	78	;'N'
  4205  007EDF  31                 	db	49	;'1'
  4206  007EE0  39                 	db	57	;'9'
  4207  007EE1  37                 	db	55	;'7'
  4208  007EE2  37                 	db	55	;'7'
  4209  007EE3  0D                 	db	13
  4210  007EE4  0A                 	db	10
  4211  007EE5  00                 	db	0
  4212  007EE6                     STR_235:
  4213  007EE6  47                 	db	71	;'G'
  4214  007EE7  55                 	db	85	;'U'
  4215  007EE8  49                 	db	73	;'I'
  4216  007EE9  44                 	db	68	;'D'
  4217  007EEA  20                 	db	32
  4218  007EEB  3D                 	db	61	;'='
  4219  007EEC  20                 	db	32
  4220  007EED  00                 	db	0
  4221  007EEE                     STR_120:
  4222  007EEE  46                 	db	70	;'F'
  4223  007EEF  49                 	db	73	;'I'
  4224  007EF0  4C                 	db	76	;'L'
  4225  007EF1  54                 	db	84	;'T'
  4226  007EF2  45                 	db	69	;'E'
  4227  007EF3  52                 	db	82	;'R'
  4228  007EF4  20                 	db	32
  4229  007EF5  00                 	db	0
  4230  007EF6                     STR_134:
  4231  007EF6  2C                 	db	44
  4232  007EF7  63                 	db	99	;'c'
  4233  007EF8  6C                 	db	108	;'l'
  4234  007EF9  61                 	db	97	;'a'
  4235  007EFA  73                 	db	115	;'s'
  4236  007EFB  73                 	db	115	;'s'
  4237  007EFC  3D                 	db	61	;'='
  4238  007EFD  00                 	db	0
  4239  007EFE                     STR_114:
  4240  007EFE  56                 	db	86	;'V'
  4241  007EFF  45                 	db	69	;'E'
  4242  007F00  52                 	db	82	;'R'
  4243  007F01  42                 	db	66	;'B'
  4244  007F02  4F                 	db	79	;'O'
  4245  007F03  53                 	db	83	;'S'
  4246  007F04  45                 	db	69	;'E'
  4247  007F05  00                 	db	0
  4248  007F06                     STR_109:
  4249  007F06  44                 	db	68	;'D'
  4250  007F07  45                 	db	69	;'E'
  4251  007F08  43                 	db	67	;'C'
  4252  007F09  49                 	db	73	;'I'
  4253  007F0A  4D                 	db	77	;'M'
  4254  007F0B  41                 	db	65	;'A'
  4255  007F0C  4C                 	db	76	;'L'
  4256  007F0D  00                 	db	0
  4257  007F0E                     STR_17:
  4258  007F0E  56                 	db	86	;'V'
  4259  007F0F  45                 	db	69	;'E'
  4260  007F10  52                 	db	82	;'R'
  4261  007F11  53                 	db	83	;'S'
  4262  007F12  49                 	db	73	;'I'
  4263  007F13  4F                 	db	79	;'O'
  4264  007F14  4E                 	db	78	;'N'
  4265  007F15  00                 	db	0
  4266  007F16                     STR_169:
  4267  007F16  30                 	db	48	;'0'
  4268  007F17  78                 	db	120	;'x'
  4269  007F18  25                 	db	37
  4270  007F19  30                 	db	48	;'0'
  4271  007F1A  38                 	db	56	;'8'
  4272  007F1B  6C                 	db	108	;'l'
  4273  007F1C  58                 	db	88	;'X'
  4274  007F1D  00                 	db	0
  4275  007F1E                     STR_249:
  4276  007F1E  56                 	db	86	;'V'
  4277  007F1F  65                 	db	101	;'e'
  4278  007F20  72                 	db	114	;'r'
  4279  007F21  62                 	db	98	;'b'
  4280  007F22  6F                 	db	111	;'o'
  4281  007F23  73                 	db	115	;'s'
  4282  007F24  65                 	db	101	;'e'
  4283  007F25  00                 	db	0
  4284  007F26                     STR_248:
  4285  007F26  4D                 	db	77	;'M'
  4286  007F27  6F                 	db	111	;'o'
  4287  007F28  64                 	db	100	;'d'
  4288  007F29  65                 	db	101	;'e'
  4289  007F2A  3A                 	db	58	;':'
  4290  007F2B  20                 	db	32
  4291  007F2C  00                 	db	0
  4292  007F2D                     STR_146:
  4293  007F2D  2C                 	db	44
  4294  007F2E  44                 	db	68	;'D'
  4295  007F2F  61                 	db	97	;'a'
  4296  007F30  74                 	db	116	;'t'
  4297  007F31  61                 	db	97	;'a'
  4298  007F32  3D                 	db	61	;'='
  4299  007F33  00                 	db	0
  4300  007F34                     STR_137:
  4301  007F34  2C                 	db	44
  4302  007F35  74                 	db	116	;'t'
  4303  007F36  79                 	db	121	;'y'
  4304  007F37  70                 	db	112	;'p'
  4305  007F38  65                 	db	101	;'e'
  4306  007F39  3D                 	db	61	;'='
  4307  007F3A  00                 	db	0
  4308  007F3B                     STR_143:
  4309  007F3B  2C                 	db	44
  4310  007F3C  73                 	db	115	;'s'
  4311  007F3D  69                 	db	105	;'i'
  4312  007F3E  7A                 	db	122	;'z'
  4313  007F3F  65                 	db	101	;'e'
  4314  007F40  3D                 	db	61	;'='
  4315  007F41  00                 	db	0
  4316  007F42                     STR_131:
  4317  007F42  3C                 	db	60	;'<'
  4318  007F43  50                 	db	80	;'P'
  4319  007F44  72                 	db	114	;'r'
  4320  007F45  69                 	db	105	;'i'
  4321  007F46  6F                 	db	111	;'o'
  4322  007F47  3D                 	db	61	;'='
  4323  007F48  00                 	db	0
  4324  007F49                     STR_19:
  4325  007F49  49                 	db	73	;'I'
  4326  007F4A  46                 	db	70	;'F'
  4327  007F4B  4D                 	db	77	;'M'
  4328  007F4C  4F                 	db	79	;'O'
  4329  007F4D  44                 	db	68	;'D'
  4330  007F4E  45                 	db	69	;'E'
  4331  007F4F  00                 	db	0
  4332  007F50                     STR_15:
  4333  007F50  4C                 	db	76	;'L'
  4334  007F51  49                 	db	73	;'I'
  4335  007F52  53                 	db	83	;'S'
  4336  007F53  54                 	db	84	;'T'
  4337  007F54  45                 	db	69	;'E'
  4338  007F55  4E                 	db	78	;'N'
  4339  007F56  00                 	db	0
  4340  007F57                     STR_82:
  4341  007F57  46                 	db	70	;'F'
  4342  007F58  49                 	db	73	;'I'
  4343  007F59  4C                 	db	76	;'L'
  4344  007F5A  54                 	db	84	;'T'
  4345  007F5B  45                 	db	69	;'E'
  4346  007F5C  52                 	db	82	;'R'
  4347  007F5D  00                 	db	0
  4348  007F5E                     STR_9:
  4349  007F5E  53                 	db	83	;'S'
  4350  007F5F  49                 	db	73	;'I'
  4351  007F60  4C                 	db	76	;'L'
  4352  007F61  45                 	db	69	;'E'
  4353  007F62  4E                 	db	78	;'N'
  4354  007F63  54                 	db	84	;'T'
  4355  007F64  00                 	db	0
  4356  007F65                     STR_52:
  4357  007F65  30                 	db	48	;'0'
  4358  007F66  78                 	db	120	;'x'
  4359  007F67  25                 	db	37
  4360  007F68  30                 	db	48	;'0'
  4361  007F69  32                 	db	50	;'2'
  4362  007F6A  58                 	db	88	;'X'
  4363  007F6B  00                 	db	0
  4364  007F6C                     STR_135:
  4365  007F6C  30                 	db	48	;'0'
  4366  007F6D  78                 	db	120	;'x'
  4367  007F6E  25                 	db	37
  4368  007F6F  30                 	db	48	;'0'
  4369  007F70  34                 	db	52	;'4'
  4370  007F71  58                 	db	88	;'X'
  4371  007F72  00                 	db	0
  4372  007F73                     STR_153:
  4373  007F73  30                 	db	48	;'0'
  4374  007F74  78                 	db	120	;'x'
  4375  007F75  25                 	db	37
  4376  007F76  30                 	db	48	;'0'
  4377  007F77  38                 	db	56	;'8'
  4378  007F78  58                 	db	88	;'X'
  4379  007F79  00                 	db	0
  4380  007F7A                     STR_128:
  4381  007F7A  46                 	db	70	;'F'
  4382  007F7B  30                 	db	48	;'0'
  4383  007F7C  30                 	db	48	;'0'
  4384  007F7D  0D                 	db	13
  4385  007F7E  0A                 	db	10
  4386  007F7F  00                 	db	0
  4387  007F80                     STR_8:
  4388  007F80  2B                 	db	43
  4389  007F81  4F                 	db	79	;'O'
  4390  007F82  4B                 	db	75	;'K'
  4391  007F83  0D                 	db	13
  4392  007F84  0A                 	db	10
  4393  007F85  00                 	db	0
  4394  007F86                     STR_113:
  4395  007F86  4D                 	db	77	;'M'
  4396  007F87  4F                 	db	79	;'O'
  4397  007F88  44                 	db	68	;'D'
  4398  007F89  45                 	db	69	;'E'
  4399  007F8A  20                 	db	32
  4400  007F8B  00                 	db	0
  4401  007F8C                     STR_121:
  4402  007F8C  4D                 	db	77	;'M'
  4403  007F8D  41                 	db	65	;'A'
  4404  007F8E  53                 	db	83	;'S'
  4405  007F8F  4B                 	db	75	;'K'
  4406  007F90  20                 	db	32
  4407  007F91  00                 	db	0
  4408  007F92                     STR_11:
  4409  007F92  43                 	db	67	;'C'
  4410  007F93  4C                 	db	76	;'L'
  4411  007F94  4F                 	db	79	;'O'
  4412  007F95  53                 	db	83	;'S'
  4413  007F96  45                 	db	69	;'E'
  4414  007F97  00                 	db	0
  4415  007F98                     STR_118:
  4416  007F98  53                 	db	83	;'S'
  4417  007F99  4C                 	db	76	;'L'
  4418  007F9A  43                 	db	67	;'C'
  4419  007F9B  41                 	db	65	;'A'
  4420  007F9C  4E                 	db	78	;'N'
  4421  007F9D  00                 	db	0
  4422  007F9E                     STR_106:
  4423  007F9E  53                 	db	83	;'S'
  4424  007F9F  45                 	db	69	;'E'
  4425  007FA0  54                 	db	84	;'T'
  4426  007FA1  20                 	db	32
  4427  007FA2  00                 	db	0
  4428  007FA3                     STR_44:
  4429  007FA3  46                 	db	70	;'F'
  4430  007FA4  49                 	db	73	;'I'
  4431  007FA5  4E                 	db	78	;'N'
  4432  007FA6  44                 	db	68	;'D'
  4433  007FA7  00                 	db	0
  4434  007FA8                     STR_45:
  4435  007FA8  52                 	db	82	;'R'
  4436  007FA9  52                 	db	82	;'R'
  4437  007FAA  45                 	db	69	;'E'
  4438  007FAB  47                 	db	71	;'G'
  4439  007FAC  00                 	db	0
  4440  007FAD                     STR_68:
  4441  007FAD  57                 	db	87	;'W'
  4442  007FAE  52                 	db	82	;'R'
  4443  007FAF  45                 	db	69	;'E'
  4444  007FB0  47                 	db	71	;'G'
  4445  007FB1  00                 	db	0
  4446  007FB2                     STR_94:
  4447  007FB2  4D                 	db	77	;'M'
  4448  007FB3  41                 	db	65	;'A'
  4449  007FB4  53                 	db	83	;'S'
  4450  007FB5  4B                 	db	75	;'K'
  4451  007FB6  00                 	db	0
  4452  007FB7                     STR_7:
  4453  007FB7  4F                 	db	79	;'O'
  4454  007FB8  50                 	db	80	;'P'
  4455  007FB9  45                 	db	69	;'E'
  4456  007FBA  4E                 	db	78	;'N'
  4457  007FBB  00                 	db	0
  4458  007FBC                     STR_77:
  4459  007FBC  49                 	db	73	;'I'
  4460  007FBD  4E                 	db	78	;'N'
  4461  007FBE  46                 	db	70	;'F'
  4462  007FBF  4F                 	db	79	;'O'
  4463  007FC0  00                 	db	0
  4464  007FC1                     STR_116:
  4465  007FC1  56                 	db	86	;'V'
  4466  007FC2  53                 	db	83	;'S'
  4467  007FC3  43                 	db	67	;'C'
  4468  007FC4  50                 	db	80	;'P'
  4469  007FC5  00                 	db	0
  4470  007FC6                     STR_42:
  4471  007FC6  48                 	db	72	;'H'
  4472  007FC7  45                 	db	69	;'E'
  4473  007FC8  4C                 	db	76	;'L'
  4474  007FC9  50                 	db	80	;'P'
  4475  007FCA  00                 	db	0
  4476  007FCB                     STR_40:
  4477  007FCB  53                 	db	83	;'S'
  4478  007FCC  54                 	db	84	;'T'
  4479  007FCD  41                 	db	65	;'A'
  4480  007FCE  54                 	db	84	;'T'
  4481  007FCF  00                 	db	0
  4482  007FD0                     STR_5:
  4483  007FD0  42                 	db	66	;'B'
  4484  007FD1  4F                 	db	79	;'O'
  4485  007FD2  4F                 	db	79	;'O'
  4486  007FD3  54                 	db	84	;'T'
  4487  007FD4  00                 	db	0
  4488  007FD5                     STR_151:
  4489  007FD5  3E                 	db	62	;'>'
  4490  007FD6  0D                 	db	13
  4491  007FD7  0A                 	db	10
  4492  007FD8  00                 	db	0
  4493  007FD9                     STR_41:
  4494  007FD9  45                 	db	69	;'E'
  4495  007FDA  52                 	db	82	;'R'
  4496  007FDB  52                 	db	82	;'R'
  4497  007FDC  00                 	db	0
  4498  007FDD                     STR_107:
  4499  007FDD  48                 	db	72	;'H'
  4500  007FDE  45                 	db	69	;'E'
  4501  007FDF  58                 	db	88	;'X'
  4502  007FE0  00                 	db	0
  4503  007FE1                     STR_154:
  4504  007FE1  25                 	db	37
  4505  007FE2  6C                 	db	108	;'l'
  4506  007FE3  75                 	db	117	;'u'
  4507  007FE4  00                 	db	0
  4508  007FE5                     STR_237:
  4509  007FE5  2D                 	db	45
  4510  007FE6  2D                 	db	45
  4511  007FE7  00                 	db	0
  4512  007FE8                     STR_37:
  4513  007FE8  52                 	db	82	;'R'
  4514  007FE9  58                 	db	88	;'X'
  4515  007FEA  00                 	db	0
  4516  007FEB                     STR_28:
  4517  007FEB  54                 	db	84	;'T'
  4518  007FEC  58                 	db	88	;'X'
  4519  007FED  00                 	db	0
  4520  007FEE                     STR_53:
  4521  007FEE  25                 	db	37
  4522  007FEF  64                 	db	100	;'d'
  4523  007FF0  00                 	db	0
  4524  007FF1                     STR_130:
  4525  007FF1  07                 	db	7
  4526  007FF2  00                 	db	0
  4527  007FF3                     STR_129:
  4528  007FF3  0D                 	db	13
  4529  007FF4  00                 	db	0
  4530  007FF5                     STR_29:
  4531  007FF5  2C                 	db	44
  4532  007FF6  00                 	db	0
  4533  007FF7                     STR_244:
  4534  007FF7  2E                 	db	46
  4535  007FF8  00                 	db	0
  4536  007FF9                     STR_236:
  4537  007FF9  30                 	db	48	;'0'
  4538  007FFA  00                 	db	0
  4539  007FFB                     STR_238:
  4540  007FFB  3A                 	db	58	;':'
  4541  007FFC  00                 	db	0
  4542  007FFD                     STR_243:
  4543  007FFD  3F                 	db	63	;'?'
  4544  007FFE  00                 	db	0
  4545  007FFF                     __end_of__stringdata:
  4546                           	opt stack 0
  4547                           
  4548                           ; #config settings
  4549  007FFF  00                 	db	0	; dummy byte at the end
  4550  0000                     tblptru	equ	0xFF8
  4551                           tblptrh	equ	0xFF7
  4552                           tblptrl	equ	0xFF6
  4553                           tablat	equ	0xFF5
  4554                           prodh	equ	0xFF4
  4555                           prodl	equ	0xFF3
  4556                           intcon	equ	0xFF2
  4557                           indf0	equ	0xFEF
  4558                           fsr0h	equ	0xFEA
  4559                           fsr0l	equ	0xFE9
  4560                           wreg	equ	0xFE8
  4561                           indf1	equ	0xFE7
  4562                           postinc1	equ	0xFE6
  4563                           postdec1	equ	0xFE5
  4564                           fsr1h	equ	0xFE2
  4565                           fsr1l	equ	0xFE1
  4566                           indf2	equ	0xFDF
  4567                           postinc2	equ	0xFDE
  4568                           postdec2	equ	0xFDD
  4569                           plusw2	equ	0xFDB
  4570                           fsr2h	equ	0xFDA
  4571                           fsr2l	equ	0xFD9
  4572                           status	equ	0xFD8
  4573                           
  4574                           	psect	nvCOMRAM
  4575  000046                     __pnvCOMRAM:
  4576                           	opt stack 0
  4577  000046                     _caps:
  4578                           	opt stack 0
  4579  000046                     	ds	2
  4580                           tblptru	equ	0xFF8
  4581                           tblptrh	equ	0xFF7
  4582                           tblptrl	equ	0xFF6
  4583                           tablat	equ	0xFF5
  4584                           prodh	equ	0xFF4
  4585                           prodl	equ	0xFF3
  4586                           intcon	equ	0xFF2
  4587                           indf0	equ	0xFEF
  4588                           fsr0h	equ	0xFEA
  4589                           fsr0l	equ	0xFE9
  4590                           wreg	equ	0xFE8
  4591                           indf1	equ	0xFE7
  4592                           postinc1	equ	0xFE6
  4593                           postdec1	equ	0xFE5
  4594                           fsr1h	equ	0xFE2
  4595                           fsr1l	equ	0xFE1
  4596                           indf2	equ	0xFDF
  4597                           postinc2	equ	0xFDE
  4598                           postdec2	equ	0xFDD
  4599                           plusw2	equ	0xFDB
  4600                           fsr2h	equ	0xFDA
  4601                           fsr2l	equ	0xFD9
  4602                           status	equ	0xFD8
  4603                           
  4604                           	psect	cinit
  4605  004D38                     __pcinit:
  4606                           	opt stack 0
  4607  004D38                     start_initialization:
  4608                           	opt stack 0
  4609  004D38                     __initialization:
  4610                           	opt stack 0
  4611                           
  4612                           ; Clear objects allocated to BIGRAM (494 bytes)
  4613  004D38  EE04  F000         	lfsr	0,__pbssBIGRAM
  4614  004D3C  EE11 F0EE          	lfsr	1,494
  4615  004D40                     clear_0:
  4616  004D40  6AEE               	clrf	postinc0,c
  4617  004D42  50E5               	movf	postdec1,w,c
  4618  004D44  50E1               	movf	fsr1l,w,c
  4619  004D46  E1FC               	bnz	clear_0
  4620  004D48  50E2               	movf	fsr1h,w,c
  4621  004D4A  E1FA               	bnz	clear_0
  4622                           
  4623                           ; Clear objects allocated to BANK3 (256 bytes)
  4624  004D4C  EE03  F000         	lfsr	0,__pbssBANK3
  4625  004D50  EE11 F000          	lfsr	1,256
  4626  004D54                     clear_1:
  4627  004D54  6AEE               	clrf	postinc0,c
  4628  004D56  50E5               	movf	postdec1,w,c
  4629  004D58  50E1               	movf	fsr1l,w,c
  4630  004D5A  E1FC               	bnz	clear_1
  4631  004D5C  50E2               	movf	fsr1h,w,c
  4632  004D5E  E1FA               	bnz	clear_1
  4633                           
  4634                           ; Clear objects allocated to BANK2 (128 bytes)
  4635  004D60  EE02  F000         	lfsr	0,__pbssBANK2
  4636  004D64  0E80               	movlw	128
  4637  004D66                     clear_2:
  4638  004D66  6AEE               	clrf	postinc0,c
  4639  004D68  06E8               	decf	wreg,f,c
  4640  004D6A  E1FD               	bnz	clear_2
  4641                           
  4642                           ; Clear objects allocated to BANK1 (178 bytes)
  4643  004D6C  EE01  F000         	lfsr	0,__pbssBANK1
  4644  004D70  0EB2               	movlw	178
  4645  004D72                     clear_3:
  4646  004D72  6AEE               	clrf	postinc0,c
  4647  004D74  06E8               	decf	wreg,f,c
  4648  004D76  E1FD               	bnz	clear_3
  4649                           
  4650                           ; Clear objects allocated to BANK0 (43 bytes)
  4651  004D78  EE00  F0D1         	lfsr	0,__pbssBANK0
  4652  004D7C  0E2B               	movlw	43
  4653  004D7E                     clear_4:
  4654  004D7E  6AEE               	clrf	postinc0,c
  4655  004D80  06E8               	decf	wreg,f,c
  4656  004D82  E1FD               	bnz	clear_4
  4657                           
  4658                           ; Clear objects allocated to COMRAM (29 bytes)
  4659  004D84  EE00  F029         	lfsr	0,__pbssCOMRAM
  4660  004D88  0E1D               	movlw	29
  4661  004D8A                     clear_5:
  4662  004D8A  6AEE               	clrf	postinc0,c
  4663  004D8C  06E8               	decf	wreg,f,c
  4664  004D8E  E1FD               	bnz	clear_5
  4665  004D90                     end_of_initialization:
  4666                           	opt stack 0
  4667  004D90                     __end_of__initialization:
  4668                           	opt stack 0
  4669  004D90  0E00               	movlw	low (__Lmediumconst shr (0+16))
  4670  004D92  6EF8               	movwf	tblptru,c
  4671  004D94  0100               	movlb	0
  4672  004D96  EFA2  F019         	goto	_main	;jump to C main() function
  4673                           tblptru	equ	0xFF8
  4674                           tblptrh	equ	0xFF7
  4675                           tblptrl	equ	0xFF6
  4676                           tablat	equ	0xFF5
  4677                           prodh	equ	0xFF4
  4678                           prodl	equ	0xFF3
  4679                           intcon	equ	0xFF2
  4680                           indf0	equ	0xFEF
  4681                           postinc0	equ	0xFEE
  4682                           fsr0h	equ	0xFEA
  4683                           fsr0l	equ	0xFE9
  4684                           wreg	equ	0xFE8
  4685                           indf1	equ	0xFE7
  4686                           postinc1	equ	0xFE6
  4687                           postdec1	equ	0xFE5
  4688                           fsr1h	equ	0xFE2
  4689                           fsr1l	equ	0xFE1
  4690                           indf2	equ	0xFDF
  4691                           postinc2	equ	0xFDE
  4692                           postdec2	equ	0xFDD
  4693                           plusw2	equ	0xFDB
  4694                           fsr2h	equ	0xFDA
  4695                           fsr2l	equ	0xFD9
  4696                           status	equ	0xFD8
  4697                           
  4698                           	psect	bssCOMRAM
  4699  000029                     __pbssCOMRAM:
  4700                           	opt stack 0
  4701  000029                     _uart_transmitOverruns:
  4702                           	opt stack 0
  4703  000029                     	ds	4
  4704  00002D                     _made_table:
  4705                           	opt stack 0
  4706  00002D                     	ds	2
  4707  00002F                     _status_led_cnt:
  4708                           	opt stack 0
  4709  00002F                     	ds	2
  4710  000031                     strtok@sp:
  4711                           	opt stack 0
  4712  000031                     	ds	2
  4713  000033                     _USART_Status:
  4714                           	opt stack 0
  4715  000033                     	ds	1
  4716  000034                     __ECANRxFilterHitInfo:
  4717                           	opt stack 0
  4718  000034                     	ds	1
  4719  000035                     _ledFunctionality:
  4720                           	opt stack 0
  4721  000035                     	ds	1
  4722  000036                     _canInputFifo:
  4723                           	opt stack 0
  4724  000036                     	ds	8
  4725  00003E                     _serialInputFifo:
  4726                           	opt stack 0
  4727  00003E                     	ds	8
  4728                           tblptru	equ	0xFF8
  4729                           tblptrh	equ	0xFF7
  4730                           tblptrl	equ	0xFF6
  4731                           tablat	equ	0xFF5
  4732                           prodh	equ	0xFF4
  4733                           prodl	equ	0xFF3
  4734                           intcon	equ	0xFF2
  4735                           indf0	equ	0xFEF
  4736                           postinc0	equ	0xFEE
  4737                           fsr0h	equ	0xFEA
  4738                           fsr0l	equ	0xFE9
  4739                           wreg	equ	0xFE8
  4740                           indf1	equ	0xFE7
  4741                           postinc1	equ	0xFE6
  4742                           postdec1	equ	0xFE5
  4743                           fsr1h	equ	0xFE2
  4744                           fsr1l	equ	0xFE1
  4745                           indf2	equ	0xFDF
  4746                           postinc2	equ	0xFDE
  4747                           postdec2	equ	0xFDD
  4748                           plusw2	equ	0xFDB
  4749                           fsr2h	equ	0xFDA
  4750                           fsr2l	equ	0xFD9
  4751                           status	equ	0xFD8
  4752                           
  4753                           	psect	bssBANK0
  4754  0000D1                     __pbssBANK0:
  4755                           	opt stack 0
  4756  0000D1                     _can_receiveOverruns:
  4757                           	opt stack 0
  4758  0000D1                     	ds	4
  4759  0000D5                     _can_transmitOverruns:
  4760                           	opt stack 0
  4761  0000D5                     	ds	4
  4762  0000D9                     _cntRxBytes:
  4763                           	opt stack 0
  4764  0000D9                     	ds	4
  4765  0000DD                     _cntRxFrames:
  4766                           	opt stack 0
  4767  0000DD                     	ds	4
  4768  0000E1                     _cntTxBytes:
  4769                           	opt stack 0
  4770  0000E1                     	ds	4
  4771  0000E5                     _cntTxFrames:
  4772                           	opt stack 0
  4773  0000E5                     	ds	4
  4774  0000E9                     _timekeeper:
  4775                           	opt stack 0
  4776  0000E9                     	ds	4
  4777  0000ED                     _timer:
  4778                           	opt stack 0
  4779  0000ED                     	ds	4
  4780  0000F1                     _uart_receiveOverruns:
  4781                           	opt stack 0
  4782  0000F1                     	ds	4
  4783  0000F5                     _bDLE:
  4784                           	opt stack 0
  4785  0000F5                     	ds	1
  4786  0000F6                     _bInitiated:
  4787                           	opt stack 0
  4788  0000F6                     	ds	1
  4789  0000F7                     _bOpen:
  4790                           	opt stack 0
  4791  0000F7                     	ds	1
  4792  0000F8                     _mode:
  4793                           	opt stack 0
  4794  0000F8                     	ds	1
  4795  0000F9                     _nTimeStamp:
  4796                           	opt stack 0
  4797  0000F9                     	ds	1
  4798  0000FA                     _sequencyno:
  4799                           	opt stack 0
  4800  0000FA                     	ds	1
  4801  0000FB                     _stateVscpDriver:
  4802                           	opt stack 0
  4803  0000FB                     	ds	1
  4804                           tblptru	equ	0xFF8
  4805                           tblptrh	equ	0xFF7
  4806                           tblptrl	equ	0xFF6
  4807                           tablat	equ	0xFF5
  4808                           prodh	equ	0xFF4
  4809                           prodl	equ	0xFF3
  4810                           intcon	equ	0xFF2
  4811                           indf0	equ	0xFEF
  4812                           postinc0	equ	0xFEE
  4813                           fsr0h	equ	0xFEA
  4814                           fsr0l	equ	0xFE9
  4815                           wreg	equ	0xFE8
  4816                           indf1	equ	0xFE7
  4817                           postinc1	equ	0xFE6
  4818                           postdec1	equ	0xFE5
  4819                           fsr1h	equ	0xFE2
  4820                           fsr1l	equ	0xFE1
  4821                           indf2	equ	0xFDF
  4822                           postinc2	equ	0xFDE
  4823                           postdec2	equ	0xFDD
  4824                           plusw2	equ	0xFDB
  4825                           fsr2h	equ	0xFDA
  4826                           fsr2l	equ	0xFD9
  4827                           status	equ	0xFD8
  4828                           
  4829                           	psect	bssBANK1
  4830  000100                     __pbssBANK1:
  4831                           	opt stack 0
  4832  000100                     _bHex:
  4833                           	opt stack 0
  4834  000100                     	ds	1
  4835  000101                     _bSilent:
  4836                           	opt stack 0
  4837  000101                     	ds	1
  4838  000102                     _pos:
  4839                           	opt stack 0
  4840  000102                     	ds	1
  4841  000103                     _rwtimeout:
  4842                           	opt stack 0
  4843  000103                     	ds	1
  4844  000104                     _cmdbuf:
  4845                           	opt stack 0
  4846  000104                     	ds	80
  4847  000154                     _wrkbuf:
  4848                           	opt stack 0
  4849  000154                     	ds	80
  4850  0001A4                     _vscpData:
  4851                           	opt stack 0
  4852  0001A4                     	ds	8
  4853  0001AC                     _vscpClass:
  4854                           	opt stack 0
  4855  0001AC                     	ds	2
  4856  0001AE                     _vscpNodeId:
  4857                           	opt stack 0
  4858  0001AE                     	ds	1
  4859  0001AF                     _vscpPriority:
  4860                           	opt stack 0
  4861  0001AF                     	ds	1
  4862  0001B0                     _vscpSize:
  4863                           	opt stack 0
  4864  0001B0                     	ds	1
  4865  0001B1                     _vscpType:
  4866                           	opt stack 0
  4867  0001B1                     	ds	1
  4868                           tblptru	equ	0xFF8
  4869                           tblptrh	equ	0xFF7
  4870                           tblptrl	equ	0xFF6
  4871                           tablat	equ	0xFF5
  4872                           prodh	equ	0xFF4
  4873                           prodl	equ	0xFF3
  4874                           intcon	equ	0xFF2
  4875                           indf0	equ	0xFEF
  4876                           postinc0	equ	0xFEE
  4877                           fsr0h	equ	0xFEA
  4878                           fsr0l	equ	0xFE9
  4879                           wreg	equ	0xFE8
  4880                           indf1	equ	0xFE7
  4881                           postinc1	equ	0xFE6
  4882                           postdec1	equ	0xFE5
  4883                           fsr1h	equ	0xFE2
  4884                           fsr1l	equ	0xFE1
  4885                           indf2	equ	0xFDF
  4886                           postinc2	equ	0xFDE
  4887                           postdec2	equ	0xFDD
  4888                           plusw2	equ	0xFDB
  4889                           fsr2h	equ	0xFDA
  4890                           fsr2l	equ	0xFD9
  4891                           status	equ	0xFD8
  4892                           
  4893                           	psect	bssBANK2
  4894  000200                     __pbssBANK2:
  4895                           	opt stack 0
  4896  000200                     _inputBuffer:
  4897                           	opt stack 0
  4898  000200                     	ds	128
  4899                           tblptru	equ	0xFF8
  4900                           tblptrh	equ	0xFF7
  4901                           tblptrl	equ	0xFF6
  4902                           tablat	equ	0xFF5
  4903                           prodh	equ	0xFF4
  4904                           prodl	equ	0xFF3
  4905                           intcon	equ	0xFF2
  4906                           indf0	equ	0xFEF
  4907                           postinc0	equ	0xFEE
  4908                           fsr0h	equ	0xFEA
  4909                           fsr0l	equ	0xFE9
  4910                           wreg	equ	0xFE8
  4911                           indf1	equ	0xFE7
  4912                           postinc1	equ	0xFE6
  4913                           postdec1	equ	0xFE5
  4914                           fsr1h	equ	0xFE2
  4915                           fsr1l	equ	0xFE1
  4916                           indf2	equ	0xFDF
  4917                           postinc2	equ	0xFDE
  4918                           postdec2	equ	0xFDD
  4919                           plusw2	equ	0xFDB
  4920                           fsr2h	equ	0xFDA
  4921                           fsr2l	equ	0xFD9
  4922                           status	equ	0xFD8
  4923                           
  4924                           	psect	bssBANK3
  4925  000300                     __pbssBANK3:
  4926                           	opt stack 0
  4927  000300                     _crc8_table:
  4928                           	opt stack 0
  4929  000300                     	ds	256
  4930                           tblptru	equ	0xFF8
  4931                           tblptrh	equ	0xFF7
  4932                           tblptrl	equ	0xFF6
  4933                           tablat	equ	0xFF5
  4934                           prodh	equ	0xFF4
  4935                           prodl	equ	0xFF3
  4936                           intcon	equ	0xFF2
  4937                           indf0	equ	0xFEF
  4938                           postinc0	equ	0xFEE
  4939                           fsr0h	equ	0xFEA
  4940                           fsr0l	equ	0xFE9
  4941                           wreg	equ	0xFE8
  4942                           indf1	equ	0xFE7
  4943                           postinc1	equ	0xFE6
  4944                           postdec1	equ	0xFE5
  4945                           fsr1h	equ	0xFE2
  4946                           fsr1l	equ	0xFE1
  4947                           indf2	equ	0xFDF
  4948                           postinc2	equ	0xFDE
  4949                           postdec2	equ	0xFDD
  4950                           plusw2	equ	0xFDB
  4951                           fsr2h	equ	0xFDA
  4952                           fsr2l	equ	0xFD9
  4953                           status	equ	0xFD8
  4954                           
  4955                           	psect	bssBIGRAM
  4956  000400                     __pbssBIGRAM:
  4957                           	opt stack 0
  4958  000400                     _caninputBuffer:
  4959                           	opt stack 0
  4960  000400                     	ds	494
  4961                           tblptru	equ	0xFF8
  4962                           tblptrh	equ	0xFF7
  4963                           tblptrl	equ	0xFF6
  4964                           tablat	equ	0xFF5
  4965                           prodh	equ	0xFF4
  4966                           prodl	equ	0xFF3
  4967                           intcon	equ	0xFF2
  4968                           indf0	equ	0xFEF
  4969                           postinc0	equ	0xFEE
  4970                           fsr0h	equ	0xFEA
  4971                           fsr0l	equ	0xFE9
  4972                           wreg	equ	0xFE8
  4973                           indf1	equ	0xFE7
  4974                           postinc1	equ	0xFE6
  4975                           postdec1	equ	0xFE5
  4976                           fsr1h	equ	0xFE2
  4977                           fsr1l	equ	0xFE1
  4978                           indf2	equ	0xFDF
  4979                           postinc2	equ	0xFDE
  4980                           postdec2	equ	0xFDD
  4981                           plusw2	equ	0xFDB
  4982                           fsr2h	equ	0xFDA
  4983                           fsr2l	equ	0xFD9
  4984                           status	equ	0xFD8
  4985                           
  4986                           	psect	cstackBANK2
  4987  000280                     __pcstackBANK2:
  4988                           	opt stack 0
  4989  000280                     doModeVerbose@id:
  4990                           	opt stack 0
  4991                           
  4992                           ; 4 bytes @ 0x0
  4993  000280                     	ds	4
  4994  000284                     doModeVerbose@preg:
  4995                           	opt stack 0
  4996                           
  4997                           ; 2 bytes @ 0x4
  4998  000284                     	ds	2
  4999  000286                     doModeVerbose@preg_1195:
  5000                           	opt stack 0
  5001                           
  5002                           ; 2 bytes @ 0x6
  5003  000286                     	ds	2
  5004  000288                     doModeVerbose@filter_class:
  5005                           	opt stack 0
  5006                           
  5007                           ; 2 bytes @ 0x8
  5008  000288                     	ds	2
  5009  00028A                     doModeVerbose@mask_class:
  5010                           	opt stack 0
  5011                           
  5012                           ; 2 bytes @ 0xA
  5013  00028A                     	ds	2
  5014  00028C                     doModeVerbose@nodeid:
  5015                           	opt stack 0
  5016                           
  5017                           ; 1 bytes @ 0xC
  5018  00028C                     	ds	1
  5019  00028D                     doModeVerbose@nodeid_1187:
  5020                           	opt stack 0
  5021                           
  5022                           ; 1 bytes @ 0xD
  5023  00028D                     	ds	1
  5024  00028E                     doModeVerbose@filter_priority:
  5025                           	opt stack 0
  5026                           
  5027                           ; 1 bytes @ 0xE
  5028  00028E                     	ds	1
  5029  00028F                     doModeVerbose@filter_type:
  5030                           	opt stack 0
  5031                           
  5032                           ; 1 bytes @ 0xF
  5033  00028F                     	ds	1
  5034  000290                     doModeVerbose@filter_nodeid:
  5035                           	opt stack 0
  5036                           
  5037                           ; 1 bytes @ 0x10
  5038  000290                     	ds	1
  5039  000291                     doModeVerbose@mask_priority:
  5040                           	opt stack 0
  5041                           
  5042                           ; 1 bytes @ 0x11
  5043  000291                     	ds	1
  5044  000292                     doModeVerbose@mask_type:
  5045                           	opt stack 0
  5046                           
  5047                           ; 1 bytes @ 0x12
  5048  000292                     	ds	1
  5049  000293                     doModeVerbose@mask_nodeid:
  5050                           	opt stack 0
  5051                           
  5052                           ; 1 bytes @ 0x13
  5053  000293                     	ds	1
  5054  000294                     _doModeVerbose$1155:
  5055                           	opt stack 0
  5056                           
  5057                           ; 2 bytes @ 0x14
  5058  000294                     	ds	2
  5059  000296                     _doModeVerbose$1167:
  5060                           	opt stack 0
  5061                           
  5062                           ; 2 bytes @ 0x16
  5063  000296                     	ds	2
  5064  000298                     _doModeVerbose$1172:
  5065                           	opt stack 0
  5066                           
  5067                           ; 2 bytes @ 0x18
  5068  000298                     	ds	2
  5069  00029A                     _doModeVerbose$1178:
  5070                           	opt stack 0
  5071                           
  5072                           ; 2 bytes @ 0x1A
  5073  00029A                     	ds	2
  5074  00029C                     _doModeVerbose$1182:
  5075                           	opt stack 0
  5076                           
  5077                           ; 2 bytes @ 0x1C
  5078  00029C                     	ds	2
  5079  00029E                     _doModeVerbose$1207:
  5080                           	opt stack 0
  5081                           
  5082                           ; 2 bytes @ 0x1E
  5083  00029E                     	ds	2
  5084  0002A0                     doModeVerbose@rv:
  5085                           	opt stack 0
  5086                           
  5087                           ; 1 bytes @ 0x20
  5088  0002A0                     	ds	1
  5089  0002A1                     doModeVerbose@page_1188:
  5090                           	opt stack 0
  5091                           
  5092                           ; 1 bytes @ 0x21
  5093  0002A1                     	ds	1
  5094  0002A2                     doModeVerbose@reg_1189:
  5095                           	opt stack 0
  5096                           
  5097                           ; 1 bytes @ 0x22
  5098  0002A2                     	ds	1
  5099  0002A3                     doModeVerbose@id_1246:
  5100                           	opt stack 0
  5101                           
  5102                           ; 4 bytes @ 0x23
  5103  0002A3                     	ds	4
  5104  0002A7                     doModeVerbose@filterno:
  5105                           	opt stack 0
  5106                           
  5107                           ; 1 bytes @ 0x27
  5108  0002A7                     	ds	1
  5109  0002A8                     doModeVerbose@maskno:
  5110                           	opt stack 0
  5111                           
  5112                           ; 1 bytes @ 0x28
  5113  0002A8                     	ds	1
  5114  0002A9                     doModeVerbose@value_1190:
  5115                           	opt stack 0
  5116                           
  5117                           ; 1 bytes @ 0x29
  5118  0002A9                     	ds	1
  5119  0002AA                     doModeVerbose@i:
  5120                           	opt stack 0
  5121                           
  5122                           ; 1 bytes @ 0x2A
  5123  0002AA                     	ds	1
  5124  0002AB                     doModeVerbose@count:
  5125                           	opt stack 0
  5126                           
  5127                           ; 1 bytes @ 0x2B
  5128  0002AB                     	ds	1
  5129  0002AC                     doModeVerbose@c:
  5130                           	opt stack 0
  5131                           
  5132                           ; 1 bytes @ 0x2C
  5133  0002AC                     	ds	1
  5134  0002AD                     doModeVerbose@page:
  5135                           	opt stack 0
  5136                           
  5137                           ; 1 bytes @ 0x2D
  5138  0002AD                     	ds	1
  5139  0002AE                     doModeVerbose@reg:
  5140                           	opt stack 0
  5141                           
  5142                           ; 1 bytes @ 0x2E
  5143  0002AE                     	ds	1
  5144  0002AF                     doModeVerbose@nodeid_1202:
  5145                           	opt stack 0
  5146                           
  5147                           ; 1 bytes @ 0x2F
  5148  0002AF                     	ds	1
  5149  0002B0                     doModeVerbose@i_1137:
  5150                           	opt stack 0
  5151                           
  5152                           ; 1 bytes @ 0x30
  5153  0002B0                     	ds	1
  5154  0002B1                     doModeVerbose@value:
  5155                           	opt stack 0
  5156                           
  5157                           ; 1 bytes @ 0x31
  5158  0002B1                     	ds	1
  5159  0002B2                     doModeVerbose@p_1143:
  5160                           	opt stack 0
  5161                           
  5162                           ; 2 bytes @ 0x32
  5163  0002B2                     	ds	2
  5164  0002B4                     doModeVerbose@p_1191:
  5165                           	opt stack 0
  5166                           
  5167                           ; 2 bytes @ 0x34
  5168  0002B4                     	ds	2
  5169  0002B6                     doModeVerbose@ifmode:
  5170                           	opt stack 0
  5171                           
  5172                           ; 1 bytes @ 0x36
  5173  0002B6                     	ds	1
  5174  0002B7                     doModeVerbose@p:
  5175                           	opt stack 0
  5176                           
  5177                           ; 2 bytes @ 0x37
  5178  0002B7                     	ds	2
  5179  0002B9                     doModeVerbose@p_1215:
  5180                           	opt stack 0
  5181                           
  5182                           ; 2 bytes @ 0x39
  5183  0002B9                     	ds	2
  5184  0002BB                     doModeVerbose@p_1234:
  5185                           	opt stack 0
  5186                           
  5187                           ; 2 bytes @ 0x3B
  5188  0002BB                     	ds	2
  5189                           tblptru	equ	0xFF8
  5190                           tblptrh	equ	0xFF7
  5191                           tblptrl	equ	0xFF6
  5192                           tablat	equ	0xFF5
  5193                           prodh	equ	0xFF4
  5194                           prodl	equ	0xFF3
  5195                           intcon	equ	0xFF2
  5196                           indf0	equ	0xFEF
  5197                           postinc0	equ	0xFEE
  5198                           fsr0h	equ	0xFEA
  5199                           fsr0l	equ	0xFE9
  5200                           wreg	equ	0xFE8
  5201                           indf1	equ	0xFE7
  5202                           postinc1	equ	0xFE6
  5203                           postdec1	equ	0xFE5
  5204                           fsr1h	equ	0xFE2
  5205                           fsr1l	equ	0xFE1
  5206                           indf2	equ	0xFDF
  5207                           postinc2	equ	0xFDE
  5208                           postdec2	equ	0xFDD
  5209                           plusw2	equ	0xFDB
  5210                           fsr2h	equ	0xFDA
  5211                           fsr2l	equ	0xFD9
  5212                           status	equ	0xFD8
  5213                           
  5214                           	psect	cstackBANK1
  5215  0001B2                     __pcstackBANK1:
  5216                           	opt stack 0
  5217  0001B2                     ??_doModeVerbose:
  5218                           
  5219                           ; 0 bytes @ 0x0
  5220  0001B2                     	ds	20
  5221                           tblptru	equ	0xFF8
  5222                           tblptrh	equ	0xFF7
  5223                           tblptrl	equ	0xFF6
  5224                           tablat	equ	0xFF5
  5225                           prodh	equ	0xFF4
  5226                           prodl	equ	0xFF3
  5227                           intcon	equ	0xFF2
  5228                           indf0	equ	0xFEF
  5229                           postinc0	equ	0xFEE
  5230                           fsr0h	equ	0xFEA
  5231                           fsr0l	equ	0xFE9
  5232                           wreg	equ	0xFE8
  5233                           indf1	equ	0xFE7
  5234                           postinc1	equ	0xFE6
  5235                           postdec1	equ	0xFE5
  5236                           fsr1h	equ	0xFE2
  5237                           fsr1l	equ	0xFE1
  5238                           indf2	equ	0xFDF
  5239                           postinc2	equ	0xFDE
  5240                           postdec2	equ	0xFDD
  5241                           plusw2	equ	0xFDB
  5242                           fsr2h	equ	0xFDA
  5243                           fsr2l	equ	0xFD9
  5244                           status	equ	0xFD8
  5245                           
  5246                           	psect	cstackBANK0
  5247  000060                     __pcstackBANK0:
  5248                           	opt stack 0
  5249  000060                     ?_WriteTimer0:
  5250                           	opt stack 0
  5251  000060                     ?_fifo_init:
  5252                           	opt stack 0
  5253  000060                     ?_OpenUSART:
  5254                           	opt stack 0
  5255  000060                     ?_writeEEPROM:
  5256                           	opt stack 0
  5257  000060                     ?_setFilter:
  5258                           	opt stack 0
  5259  000060                     ?__CANIDToRegs:
  5260                           	opt stack 0
  5261  000060                     ??_isdigit:
  5262  000060                     ?_readEEPROM:
  5263                           	opt stack 0
  5264  000060                     ?_fifo_read:
  5265                           	opt stack 0
  5266  000060                     ?_memset:
  5267                           	opt stack 0
  5268  000060                     ?_strcpy:
  5269                           	opt stack 0
  5270  000060                     ?_strchr:
  5271                           	opt stack 0
  5272  000060                     ?_strlen:
  5273                           	opt stack 0
  5274  000060                     ?_memcpy:
  5275                           	opt stack 0
  5276  000060                     ?_strcat:
  5277                           	opt stack 0
  5278  000060                     ?___lwdiv:
  5279                           	opt stack 0
  5280  000060                     ?___lwmod:
  5281                           	opt stack 0
  5282  000060                     ?___wmul:
  5283                           	opt stack 0
  5284  000060                     ?___lldiv:
  5285                           	opt stack 0
  5286  000060                     ECANSetOperationMode@mode:
  5287                           	opt stack 0
  5288  000060                     nibbleFromChar@c:
  5289                           	opt stack 0
  5290  000060                     OpenTimer0@config:
  5291                           	opt stack 0
  5292  000060                     WriteUSART@data:
  5293                           	opt stack 0
  5294  000060                     toupper@c:
  5295                           	opt stack 0
  5296  000060                     __CANIDToRegs@ptr:
  5297                           	opt stack 0
  5298  000060                     fifo_init@buf:
  5299                           	opt stack 0
  5300  000060                     fifo_read@buf:
  5301                           	opt stack 0
  5302  000060                     writeEEPROM@address:
  5303                           	opt stack 0
  5304  000060                     readEEPROM@address:
  5305                           	opt stack 0
  5306  000060                     _init_crc8$2099:
  5307                           	opt stack 0
  5308  000060                     WriteTimer0@timer0:
  5309                           	opt stack 0
  5310  000060                     OpenUSART@spbrg:
  5311                           	opt stack 0
  5312  000060                     ___lwdiv@dividend:
  5313                           	opt stack 0
  5314  000060                     ___lwmod@dividend:
  5315                           	opt stack 0
  5316  000060                     memcpy@d1:
  5317                           	opt stack 0
  5318  000060                     memset@p1:
  5319                           	opt stack 0
  5320  000060                     strcat@to:
  5321                           	opt stack 0
  5322  000060                     strchr@ptr:
  5323                           	opt stack 0
  5324  000060                     strcpy@to:
  5325                           	opt stack 0
  5326  000060                     strlen@s:
  5327                           	opt stack 0
  5328  000060                     ___wmul@multiplier:
  5329                           	opt stack 0
  5330  000060                     setFilter@val:
  5331                           	opt stack 0
  5332  000060                     ___lldiv@dividend:
  5333                           	opt stack 0
  5334                           
  5335                           ; 4 bytes @ 0x0
  5336  000060                     	ds	1
  5337  000061                     ?_putsUSART:
  5338                           	opt stack 0
  5339  000061                     ??_printBinary:
  5340  000061                     ?_strichr:
  5341                           	opt stack 0
  5342  000061                     _isdigit$2912:
  5343                           	opt stack 0
  5344  000061                     putsUSART@data:
  5345                           	opt stack 0
  5346  000061                     strichr@ptr:
  5347                           	opt stack 0
  5348                           
  5349                           ; 2 bytes @ 0x1
  5350  000061                     	ds	1
  5351  000062                     writeEEPROM@data:
  5352                           	opt stack 0
  5353  000062                     readEEPROM@data:
  5354                           	opt stack 0
  5355  000062                     OpenUSART@config:
  5356                           	opt stack 0
  5357  000062                     isdigit@c:
  5358                           	opt stack 0
  5359  000062                     fifo_init@size:
  5360                           	opt stack 0
  5361  000062                     fifo_read@nbytes:
  5362                           	opt stack 0
  5363  000062                     init_crc8@j:
  5364                           	opt stack 0
  5365  000062                     WriteTimer0@timer:
  5366                           	opt stack 0
  5367  000062                     ___lwdiv@divisor:
  5368                           	opt stack 0
  5369  000062                     ___lwmod@divisor:
  5370                           	opt stack 0
  5371  000062                     memcpy@s1:
  5372                           	opt stack 0
  5373  000062                     memset@c:
  5374                           	opt stack 0
  5375  000062                     strcat@from:
  5376                           	opt stack 0
  5377  000062                     strchr@chr:
  5378                           	opt stack 0
  5379  000062                     strcpy@from:
  5380                           	opt stack 0
  5381  000062                     strlen@cp:
  5382                           	opt stack 0
  5383  000062                     ___wmul@multiplicand:
  5384                           	opt stack 0
  5385  000062                     __CANIDToRegs@val:
  5386                           	opt stack 0
  5387                           
  5388                           ; 4 bytes @ 0x2
  5389  000062                     	ds	1
  5390  000063                     ??_putsUSART:
  5391  000063                     init_app_eeprom@i:
  5392                           	opt stack 0
  5393  000063                     printBinary@value:
  5394                           	opt stack 0
  5395  000063                     strichr@chr:
  5396                           	opt stack 0
  5397                           
  5398                           ; 2 bytes @ 0x3
  5399  000063                     	ds	1
  5400  000064                     ??_fifo_read:
  5401  000064                     ??_strchr:
  5402  000064                     ??_setFilter:
  5403  000064                     ?_hexStringToBytes:
  5404                           	opt stack 0
  5405  000064                     ?_strnicmp:
  5406                           	opt stack 0
  5407  000064                     fifo_init@f:
  5408                           	opt stack 0
  5409  000064                     init_crc8@crc:
  5410                           	opt stack 0
  5411  000064                     ___lwdiv@counter:
  5412                           	opt stack 0
  5413  000064                     ___lwmod@counter:
  5414                           	opt stack 0
  5415  000064                     printBinary@i:
  5416                           	opt stack 0
  5417  000064                     hexStringToBytes@buf:
  5418                           	opt stack 0
  5419  000064                     memcpy@n:
  5420                           	opt stack 0
  5421  000064                     memset@n:
  5422                           	opt stack 0
  5423  000064                     strcat@cp:
  5424                           	opt stack 0
  5425  000064                     strcpy@cp:
  5426                           	opt stack 0
  5427  000064                     strnicmp@s1:
  5428                           	opt stack 0
  5429  000064                     ___wmul@product:
  5430                           	opt stack 0
  5431  000064                     ___lldiv@divisor:
  5432                           	opt stack 0
  5433                           
  5434                           ; 4 bytes @ 0x4
  5435  000064                     	ds	1
  5436  000065                     init_crc8@i:
  5437                           	opt stack 0
  5438  000065                     ___lwdiv@quotient:
  5439                           	opt stack 0
  5440                           
  5441                           ; 2 bytes @ 0x5
  5442  000065                     	ds	1
  5443  000066                     ?_atoi:
  5444                           	opt stack 0
  5445  000066                     ?_strspn:
  5446                           	opt stack 0
  5447  000066                     ?_strcspn:
  5448                           	opt stack 0
  5449  000066                     __CANIDToRegs@type:
  5450                           	opt stack 0
  5451  000066                     hexStringToBytes@size:
  5452                           	opt stack 0
  5453  000066                     atoi@s:
  5454                           	opt stack 0
  5455  000066                     memcpy@d:
  5456                           	opt stack 0
  5457  000066                     memset@p:
  5458                           	opt stack 0
  5459  000066                     strnicmp@s2:
  5460                           	opt stack 0
  5461  000066                     strcspn@s1:
  5462                           	opt stack 0
  5463  000066                     strspn@s1:
  5464                           	opt stack 0
  5465                           
  5466                           ; 2 bytes @ 0x6
  5467  000066                     	ds	1
  5468  000067                     ??__CANIDToRegs:
  5469  000067                     ?_crc8:
  5470                           	opt stack 0
  5471  000067                     ?_utoa:
  5472                           	opt stack 0
  5473  000067                     crc8@crc:
  5474                           	opt stack 0
  5475  000067                     hexStringToBytes@inhex:
  5476                           	opt stack 0
  5477  000067                     utoa@buf:
  5478                           	opt stack 0
  5479                           
  5480                           ; 2 bytes @ 0x7
  5481  000067                     	ds	1
  5482  000068                     ??_atoi:
  5483  000068                     fifo_read@p:
  5484                           	opt stack 0
  5485  000068                     memcpy@s:
  5486                           	opt stack 0
  5487  000068                     strnicmp@len:
  5488                           	opt stack 0
  5489  000068                     strcspn@s2:
  5490                           	opt stack 0
  5491  000068                     strspn@s2:
  5492                           	opt stack 0
  5493  000068                     ___lldiv@quotient:
  5494                           	opt stack 0
  5495                           
  5496                           ; 4 bytes @ 0x8
  5497  000068                     	ds	1
  5498  000069                     ??_hexStringToBytes:
  5499  000069                     __CANIDToRegs@Value:
  5500                           	opt stack 0
  5501  000069                     crc8@m:
  5502                           	opt stack 0
  5503  000069                     utoa@val:
  5504                           	opt stack 0
  5505                           
  5506                           ; 2 bytes @ 0x9
  5507  000069                     	ds	1
  5508  00006A                     ??_crc8:
  5509  00006A                     ??_strnicmp:
  5510  00006A                     ?_ECANSendMessage:
  5511                           	opt stack 0
  5512  00006A                     setFilter@filter:
  5513                           	opt stack 0
  5514  00006A                     atoi@sign:
  5515                           	opt stack 0
  5516  00006A                     fifo_read@i:
  5517                           	opt stack 0
  5518  00006A                     strcspn@i:
  5519                           	opt stack 0
  5520  00006A                     strspn@i:
  5521                           	opt stack 0
  5522  00006A                     ECANSendMessage@id:
  5523                           	opt stack 0
  5524                           
  5525                           ; 4 bytes @ 0xA
  5526  00006A                     	ds	1
  5527  00006B                     setFilter@sidh:
  5528                           	opt stack 0
  5529  00006B                     atoi@a:
  5530                           	opt stack 0
  5531  00006B                     utoa@base:
  5532                           	opt stack 0
  5533                           
  5534                           ; 2 bytes @ 0xB
  5535  00006B                     	ds	1
  5536  00006C                     ?_sendEscapedUartData:
  5537                           	opt stack 0
  5538  00006C                     ?_calcCRC:
  5539                           	opt stack 0
  5540  00006C                     ?_strtok:
  5541                           	opt stack 0
  5542  00006C                     setFilter@sidl:
  5543                           	opt stack 0
  5544  00006C                     fifo_read@f:
  5545                           	opt stack 0
  5546  00006C                     ___lldiv@counter:
  5547                           	opt stack 0
  5548  00006C                     strnicmp@r:
  5549                           	opt stack 0
  5550  00006C                     sendEscapedUartData@pcrc:
  5551                           	opt stack 0
  5552  00006C                     calcCRC@p:
  5553                           	opt stack 0
  5554  00006C                     hexStringToBytes@len:
  5555                           	opt stack 0
  5556  00006C                     strtok@s1:
  5557                           	opt stack 0
  5558                           
  5559                           ; 2 bytes @ 0xC
  5560  00006C                     	ds	1
  5561  00006D                     ?_getCANFrame:
  5562                           	opt stack 0
  5563  00006D                     ?_stristr:
  5564                           	opt stack 0
  5565  00006D                     ?___llmod:
  5566                           	opt stack 0
  5567  00006D                     setFilter@eidh:
  5568                           	opt stack 0
  5569  00006D                     getCANFrame@pdlc:
  5570                           	opt stack 0
  5571  00006D                     utoa@v:
  5572                           	opt stack 0
  5573  00006D                     stristr@s1:
  5574                           	opt stack 0
  5575  00006D                     ___llmod@dividend:
  5576                           	opt stack 0
  5577                           
  5578                           ; 4 bytes @ 0xD
  5579  00006D                     	ds	1
  5580  00006E                     sendEscapedUartData@c:
  5581                           	opt stack 0
  5582  00006E                     calcCRC@len:
  5583                           	opt stack 0
  5584  00006E                     setFilter@eidl:
  5585                           	opt stack 0
  5586  00006E                     ECANSendMessage@data:
  5587                           	opt stack 0
  5588  00006E                     hexStringToBytes@p:
  5589                           	opt stack 0
  5590  00006E                     strtok@s2:
  5591                           	opt stack 0
  5592                           
  5593                           ; 2 bytes @ 0xE
  5594  00006E                     	ds	1
  5595  00006F                     ?_sendVSCPDriverCommandReply:
  5596                           	opt stack 0
  5597  00006F                     sendVSCPDriverErrorFrame@errorcode:
  5598                           	opt stack 0
  5599  00006F                     sendVSCPDriverAck@crc:
  5600                           	opt stack 0
  5601  00006F                     sendVSCPDriverNack@crc:
  5602                           	opt stack 0
  5603  00006F                     sendVSCPDriverCommandReply@cmdCode:
  5604                           	opt stack 0
  5605  00006F                     calcCRC@j:
  5606                           	opt stack 0
  5607  00006F                     utoa@c:
  5608                           	opt stack 0
  5609  00006F                     getCANFrame@pdata:
  5610                           	opt stack 0
  5611  00006F                     stristr@s2:
  5612                           	opt stack 0
  5613                           
  5614                           ; 2 bytes @ 0xF
  5615  00006F                     	ds	1
  5616  000070                     ?_itoa:
  5617                           	opt stack 0
  5618  000070                     sendVSCPDriverErrorFrame@crc:
  5619                           	opt stack 0
  5620  000070                     sendVSCPDriverCommandReply@cmdReplyCode:
  5621                           	opt stack 0
  5622  000070                     calcCRC@crc:
  5623                           	opt stack 0
  5624  000070                     ECANSendMessage@dataLen:
  5625                           	opt stack 0
  5626  000070                     hexStringToBytes@i:
  5627                           	opt stack 0
  5628  000070                     itoa@buf:
  5629                           	opt stack 0
  5630                           
  5631                           ; 2 bytes @ 0x10
  5632  000070                     	ds	1
  5633  000071                     sendVSCPDriverCommandReply@crc:
  5634                           	opt stack 0
  5635  000071                     getCANFrame@pid:
  5636                           	opt stack 0
  5637  000071                     ECANSendMessage@msgFlags:
  5638                           	opt stack 0
  5639  000071                     ___llmod@divisor:
  5640                           	opt stack 0
  5641                           
  5642                           ; 4 bytes @ 0x11
  5643  000071                     	ds	1
  5644  000072                     ??_ECANSendMessage:
  5645  000072                     ?_getVSCPFrame:
  5646                           	opt stack 0
  5647  000072                     getVSCPFrame@pvscpclass:
  5648                           	opt stack 0
  5649  000072                     itoa@val:
  5650                           	opt stack 0
  5651  000072                     receivePrintEventCANAL@data:
  5652                           	opt stack 0
  5653                           
  5654                           ; 8 bytes @ 0x12
  5655  000072                     	ds	1
  5656  000073                     ECANSendMessage@pb:
  5657                           	opt stack 0
  5658                           
  5659                           ; 18 bytes @ 0x13
  5660  000073                     	ds	1
  5661  000074                     getVSCPFrame@pvscptype:
  5662                           	opt stack 0
  5663  000074                     itoa@base:
  5664                           	opt stack 0
  5665                           
  5666                           ; 2 bytes @ 0x14
  5667  000074                     	ds	1
  5668  000075                     ___llmod@counter:
  5669                           	opt stack 0
  5670                           
  5671                           ; 1 bytes @ 0x15
  5672  000075                     	ds	1
  5673  000076                     ?_sprintf:
  5674                           	opt stack 0
  5675  000076                     ?_ultoa:
  5676                           	opt stack 0
  5677  000076                     getVSCPFrame@pNodeId:
  5678                           	opt stack 0
  5679  000076                     sprintf@sp:
  5680                           	opt stack 0
  5681  000076                     ultoa@buf:
  5682                           	opt stack 0
  5683                           
  5684                           ; 2 bytes @ 0x16
  5685  000076                     	ds	2
  5686  000078                     getVSCPFrame@pPriority:
  5687                           	opt stack 0
  5688  000078                     sprintf@f:
  5689                           	opt stack 0
  5690  000078                     ultoa@val:
  5691                           	opt stack 0
  5692  000078                     printFirmwareVersion@wrkbuf:
  5693                           	opt stack 0
  5694                           
  5695                           ; 20 bytes @ 0x18
  5696  000078                     	ds	2
  5697  00007A                     receivePrintEventCANAL@i:
  5698                           	opt stack 0
  5699  00007A                     getVSCPFrame@pSize:
  5700                           	opt stack 0
  5701                           
  5702                           ; 2 bytes @ 0x1A
  5703  00007A                     	ds	1
  5704  00007B                     receivePrintEventCANAL@id:
  5705                           	opt stack 0
  5706                           
  5707                           ; 4 bytes @ 0x1B
  5708  00007B                     	ds	1
  5709  00007C                     getVSCPFrame@pData:
  5710                           	opt stack 0
  5711  00007C                     ultoa@base:
  5712                           	opt stack 0
  5713                           
  5714                           ; 2 bytes @ 0x1C
  5715  00007C                     	ds	2
  5716  00007E                     ??_sprintf:
  5717  00007E                     ??_getVSCPFrame:
  5718  00007E                     ultoa@v:
  5719                           	opt stack 0
  5720                           
  5721                           ; 4 bytes @ 0x1E
  5722  00007E                     	ds	1
  5723  00007F                     receivePrintEventCANAL@dlc:
  5724                           	opt stack 0
  5725                           
  5726                           ; 1 bytes @ 0x1F
  5727  00007F                     	ds	1
  5728  000080                     receivePrintEventCANAL@crc:
  5729                           	opt stack 0
  5730                           
  5731                           ; 1 bytes @ 0x20
  5732  000080                     	ds	1
  5733  000081                     sprintf@idx:
  5734                           	opt stack 0
  5735                           
  5736                           ; 1 bytes @ 0x21
  5737  000081                     	ds	1
  5738  000082                     ultoa@c:
  5739                           	opt stack 0
  5740  000082                     _sprintf$2161:
  5741                           	opt stack 0
  5742  000082                     getVSCPFrame@id:
  5743                           	opt stack 0
  5744                           
  5745                           ; 4 bytes @ 0x22
  5746  000082                     	ds	1
  5747  000083                     ??_receivePrintEventSLCAN:
  5748                           
  5749                           ; 0 bytes @ 0x23
  5750  000083                     	ds	1
  5751  000084                     _sprintf$2162:
  5752                           	opt stack 0
  5753                           
  5754                           ; 2 bytes @ 0x24
  5755  000084                     	ds	1
  5756  000085                     ECANSendMessage@mode:
  5757                           	opt stack 0
  5758                           
  5759                           ; 1 bytes @ 0x25
  5760  000085                     	ds	1
  5761  000086                     ECANSendMessage@buffers:
  5762                           	opt stack 0
  5763  000086                     _sprintf$2168:
  5764                           	opt stack 0
  5765  000086                     receivePrintEventSLCAN@id:
  5766                           	opt stack 0
  5767                           
  5768                           ; 4 bytes @ 0x26
  5769  000086                     	ds	1
  5770  000087                     ECANSendMessage@j:
  5771                           	opt stack 0
  5772                           
  5773                           ; 1 bytes @ 0x27
  5774  000087                     	ds	1
  5775  000088                     ECANSendMessage@tempBSEL0:
  5776                           	opt stack 0
  5777  000088                     sprintf@ap:
  5778                           	opt stack 0
  5779                           
  5780                           ; 1 bytes @ 0x28
  5781  000088                     	ds	1
  5782  000089                     ECANSendMessage@tempPtr:
  5783                           	opt stack 0
  5784  000089                     sprintf@prec:
  5785                           	opt stack 0
  5786                           
  5787                           ; 2 bytes @ 0x29
  5788  000089                     	ds	1
  5789  00008A                     receivePrintEventSLCAN@dlc:
  5790                           	opt stack 0
  5791                           
  5792                           ; 1 bytes @ 0x2A
  5793  00008A                     	ds	1
  5794  00008B                     ECANSendMessage@temp:
  5795                           	opt stack 0
  5796  00008B                     receivePrintEventSLCAN@i:
  5797                           	opt stack 0
  5798  00008B                     sprintf@width:
  5799                           	opt stack 0
  5800                           
  5801                           ; 2 bytes @ 0x2B
  5802  00008B                     	ds	1
  5803  00008C                     ECANSendMessage@i:
  5804                           	opt stack 0
  5805                           
  5806                           ; 1 bytes @ 0x2C
  5807  00008C                     	ds	1
  5808  00008D                     ECANSendMessage@ptr:
  5809                           	opt stack 0
  5810  00008D                     sprintf@_val:
  5811                           	opt stack 0
  5812                           
  5813                           ; 4 bytes @ 0x2D
  5814  00008D                     	ds	2
  5815  00008F                     ?_sendCANFrame:
  5816                           	opt stack 0
  5817  00008F                     sendCANFrame@id:
  5818                           	opt stack 0
  5819                           
  5820                           ; 4 bytes @ 0x2F
  5821  00008F                     	ds	2
  5822  000091                     sprintf@c:
  5823                           	opt stack 0
  5824                           
  5825                           ; 1 bytes @ 0x31
  5826  000091                     	ds	1
  5827  000092                     sprintf@flag:
  5828                           	opt stack 0
  5829                           
  5830                           ; 2 bytes @ 0x32
  5831  000092                     	ds	1
  5832  000093                     sendCANFrame@dlc:
  5833                           	opt stack 0
  5834                           
  5835                           ; 1 bytes @ 0x33
  5836  000093                     	ds	1
  5837  000094                     ??_receivePrintEventVerbose:
  5838  000094                     _printStatistics$1383:
  5839                           	opt stack 0
  5840  000094                     _printErrors$1408:
  5841                           	opt stack 0
  5842  000094                     sendCANFrame@pdata:
  5843                           	opt stack 0
  5844                           
  5845                           ; 2 bytes @ 0x34
  5846  000094                     	ds	2
  5847  000096                     ??_doModeSLCAN:
  5848  000096                     ??_receiveVSCPModeCanalMsg:
  5849  000096                     ?_sendVSCPFrame:
  5850                           	opt stack 0
  5851  000096                     _printStatistics$1389:
  5852                           	opt stack 0
  5853  000096                     _printErrors$1414:
  5854                           	opt stack 0
  5855  000096                     sendVSCPFrame@vscpclass:
  5856                           	opt stack 0
  5857                           
  5858                           ; 2 bytes @ 0x36
  5859  000096                     	ds	2
  5860  000098                     sendVSCPFrame@vscptype:
  5861                           	opt stack 0
  5862  000098                     _printStatistics$1395:
  5863                           	opt stack 0
  5864  000098                     _printErrors$1420:
  5865                           	opt stack 0
  5866                           
  5867                           ; 2 bytes @ 0x38
  5868  000098                     	ds	1
  5869  000099                     sendVSCPFrame@nodeid:
  5870                           	opt stack 0
  5871  000099                     _receivePrintEventVerbose$1300:
  5872                           	opt stack 0
  5873                           
  5874                           ; 2 bytes @ 0x39
  5875  000099                     	ds	1
  5876  00009A                     sendVSCPFrame@priority:
  5877                           	opt stack 0
  5878  00009A                     _printStatistics$1401:
  5879                           	opt stack 0
  5880  00009A                     _printErrors$1426:
  5881                           	opt stack 0
  5882                           
  5883                           ; 2 bytes @ 0x3A
  5884  00009A                     	ds	1
  5885  00009B                     sendVSCPFrame@size:
  5886                           	opt stack 0
  5887  00009B                     _receivePrintEventVerbose$1305:
  5888                           	opt stack 0
  5889                           
  5890                           ; 2 bytes @ 0x3B
  5891  00009B                     	ds	1
  5892  00009C                     _printErrors$1432:
  5893                           	opt stack 0
  5894  00009C                     sendVSCPFrame@pData:
  5895                           	opt stack 0
  5896                           
  5897                           ; 2 bytes @ 0x3C
  5898  00009C                     	ds	1
  5899  00009D                     _receivePrintEventVerbose$1310:
  5900                           	opt stack 0
  5901  00009D                     doModeSLCAN@id:
  5902                           	opt stack 0
  5903                           
  5904                           ; 4 bytes @ 0x3D
  5905  00009D                     	ds	1
  5906  00009E                     ??_sendVSCPFrame:
  5907  00009E                     _printErrors$1441:
  5908                           	opt stack 0
  5909                           
  5910                           ; 2 bytes @ 0x3E
  5911  00009E                     	ds	1
  5912  00009F                     _receivePrintEventVerbose$1315:
  5913                           	opt stack 0
  5914                           
  5915                           ; 2 bytes @ 0x3F
  5916  00009F                     	ds	2
  5917  0000A1                     doModeSLCAN@dlc:
  5918                           	opt stack 0
  5919  0000A1                     _receivePrintEventVerbose$1320:
  5920                           	opt stack 0
  5921                           
  5922                           ; 2 bytes @ 0x41
  5923  0000A1                     	ds	1
  5924  0000A2                     doModeSLCAN@c:
  5925                           	opt stack 0
  5926                           
  5927                           ; 1 bytes @ 0x42
  5928  0000A2                     	ds	1
  5929  0000A3                     doModeSLCAN@rv:
  5930                           	opt stack 0
  5931  0000A3                     _receivePrintEventVerbose$1325:
  5932                           	opt stack 0
  5933                           
  5934                           ; 2 bytes @ 0x43
  5935  0000A3                     	ds	2
  5936  0000A5                     receivePrintEventVerbose@i:
  5937                           	opt stack 0
  5938                           
  5939                           ; 1 bytes @ 0x45
  5940  0000A5                     	ds	5
  5941  0000AA                     receiveVSCPModeCanalMsg@data:
  5942                           	opt stack 0
  5943                           
  5944                           ; 8 bytes @ 0x4A
  5945  0000AA                     	ds	8
  5946  0000B2                     receiveVSCPModeCanalMsg@id:
  5947                           	opt stack 0
  5948  0000B2                     sendVSCPFrame@id:
  5949                           	opt stack 0
  5950                           
  5951                           ; 4 bytes @ 0x52
  5952  0000B2                     	ds	4
  5953  0000B6                     ?_readRegisterExtended:
  5954                           	opt stack 0
  5955  0000B6                     ?_writeRegisterExtended:
  5956                           	opt stack 0
  5957  0000B6                     ?_readRegister:
  5958                           	opt stack 0
  5959  0000B6                     receiveVSCPModeCanalMsg@dlc:
  5960                           	opt stack 0
  5961  0000B6                     readRegister@reg:
  5962                           	opt stack 0
  5963  0000B6                     readRegisterExtended@page:
  5964                           	opt stack 0
  5965  0000B6                     writeRegisterExtended@page:
  5966                           	opt stack 0
  5967                           
  5968                           ; 2 bytes @ 0x56
  5969  0000B6                     	ds	1
  5970  0000B7                     doModeVscp@c:
  5971                           	opt stack 0
  5972  0000B7                     readRegister@timeout:
  5973                           	opt stack 0
  5974                           
  5975                           ; 2 bytes @ 0x57
  5976  0000B7                     	ds	1
  5977  0000B8                     readRegisterExtended@reg:
  5978                           	opt stack 0
  5979  0000B8                     writeRegisterExtended@reg:
  5980                           	opt stack 0
  5981                           
  5982                           ; 1 bytes @ 0x58
  5983  0000B8                     	ds	1
  5984  0000B9                     readRegister@value:
  5985                           	opt stack 0
  5986  0000B9                     readRegisterExtended@timeout:
  5987                           	opt stack 0
  5988  0000B9                     writeRegisterExtended@timeout:
  5989                           	opt stack 0
  5990                           
  5991                           ; 2 bytes @ 0x59
  5992  0000B9                     	ds	1
  5993  0000BA                     ??_readRegister:
  5994                           
  5995                           ; 0 bytes @ 0x5A
  5996  0000BA                     	ds	1
  5997  0000BB                     readRegisterExtended@value:
  5998                           	opt stack 0
  5999  0000BB                     writeRegisterExtended@value:
  6000                           	opt stack 0
  6001                           
  6002                           ; 2 bytes @ 0x5B
  6003  0000BB                     	ds	2
  6004  0000BD                     ??_readRegisterExtended:
  6005  0000BD                     ??_writeRegisterExtended:
  6006                           
  6007                           ; 0 bytes @ 0x5D
  6008  0000BD                     	ds	1
  6009  0000BE                     readRegister@nodeid:
  6010                           	opt stack 0
  6011                           
  6012                           ; 1 bytes @ 0x5E
  6013  0000BE                     	ds	1
  6014  0000BF                     printGUID@nodeid:
  6015                           	opt stack 0
  6016  0000BF                     printMDF@nodeid:
  6017                           	opt stack 0
  6018  0000BF                     printNodeFirmwareVersion@nodeid:
  6019                           	opt stack 0
  6020                           
  6021                           ; 1 bytes @ 0x5F
  6022  0000BF                     	ds	1
  6023  0000C0                     printMDF@value:
  6024                           	opt stack 0
  6025  0000C0                     printGUID@buf:
  6026                           	opt stack 0
  6027  0000C0                     printNodeFirmwareVersion@buf:
  6028                           	opt stack 0
  6029                           
  6030                           ; 3 bytes @ 0x60
  6031  0000C0                     	ds	1
  6032  0000C1                     readRegisterExtended@nodeid:
  6033                           	opt stack 0
  6034  0000C1                     writeRegisterExtended@nodeid:
  6035                           	opt stack 0
  6036  0000C1                     printMDF@p:
  6037                           	opt stack 0
  6038                           
  6039                           ; 2 bytes @ 0x61
  6040  0000C1                     	ds	2
  6041  0000C3                     printGUID@value:
  6042                           	opt stack 0
  6043  0000C3                     printMDF@i:
  6044                           	opt stack 0
  6045  0000C3                     printNodeFirmwareVersion@value:
  6046                           	opt stack 0
  6047                           
  6048                           ; 1 bytes @ 0x63
  6049  0000C3                     	ds	1
  6050  0000C4                     printGUID@i:
  6051                           	opt stack 0
  6052  0000C4                     printNodeFirmwareVersion@i:
  6053                           	opt stack 0
  6054                           
  6055                           ; 1 bytes @ 0x64
  6056  0000C4                     	ds	1
  6057  0000C5                     _findNodes$1485:
  6058                           	opt stack 0
  6059                           
  6060                           ; 2 bytes @ 0x65
  6061  0000C5                     	ds	2
  6062  0000C7                     findNodes@nFound:
  6063                           	opt stack 0
  6064                           
  6065                           ; 1 bytes @ 0x67
  6066  0000C7                     	ds	1
  6067  0000C8                     findNodes@value:
  6068                           	opt stack 0
  6069                           
  6070                           ; 1 bytes @ 0x68
  6071  0000C8                     	ds	1
  6072  0000C9                     findNodes@i:
  6073                           	opt stack 0
  6074                           
  6075                           ; 1 bytes @ 0x69
  6076  0000C9                     	ds	1
  6077  0000CA                     
  6078                           ; 2 bytes @ 0x6A
  6079  0000CA                     	ds	2
  6080  0000CC                     
  6081                           ; 3 bytes @ 0x6C
  6082  0000CC                     	ds	3
  6083  0000CF                     ??_main:
  6084                           
  6085                           ; 0 bytes @ 0x6F
  6086  0000CF                     	ds	1
  6087  0000D0                     main@c:
  6088                           	opt stack 0
  6089                           
  6090                           ; 1 bytes @ 0x70
  6091  0000D0                     	ds	1
  6092                           tblptru	equ	0xFF8
  6093                           tblptrh	equ	0xFF7
  6094                           tblptrl	equ	0xFF6
  6095                           tablat	equ	0xFF5
  6096                           prodh	equ	0xFF4
  6097                           prodl	equ	0xFF3
  6098                           intcon	equ	0xFF2
  6099                           indf0	equ	0xFEF
  6100                           postinc0	equ	0xFEE
  6101                           fsr0h	equ	0xFEA
  6102                           fsr0l	equ	0xFE9
  6103                           wreg	equ	0xFE8
  6104                           indf1	equ	0xFE7
  6105                           postinc1	equ	0xFE6
  6106                           postdec1	equ	0xFE5
  6107                           fsr1h	equ	0xFE2
  6108                           fsr1l	equ	0xFE1
  6109                           indf2	equ	0xFDF
  6110                           postinc2	equ	0xFDE
  6111                           postdec2	equ	0xFDD
  6112                           plusw2	equ	0xFDB
  6113                           fsr2h	equ	0xFDA
  6114                           fsr2l	equ	0xFD9
  6115                           status	equ	0xFD8
  6116                           
  6117                           	psect	cstackCOMRAM
  6118  000001                     __pcstackCOMRAM:
  6119                           	opt stack 0
  6120  000001                     ?__RegsToCANID:
  6121                           	opt stack 0
  6122  000001                     ?i1_WriteTimer0:
  6123                           	opt stack 0
  6124  000001                     ?_fifo_write:
  6125                           	opt stack 0
  6126  000001                     ?_fifo_getFree:
  6127                           	opt stack 0
  6128  000001                     ?__ECANPointBuffer:
  6129                           	opt stack 0
  6130  000001                     fifo_write@buf:
  6131                           	opt stack 0
  6132  000001                     ReadUSART@data:
  6133                           	opt stack 0
  6134  000001                     __RegsToCANID@ptr:
  6135                           	opt stack 0
  6136  000001                     i1WriteTimer0@timer0:
  6137                           	opt stack 0
  6138                           
  6139                           ; 2 bytes @ 0x0
  6140  000001                     	ds	1
  6141  000002                     fifo_write@nbytes:
  6142                           	opt stack 0
  6143                           
  6144                           ; 4 bytes @ 0x1
  6145  000002                     	ds	1
  6146  000003                     ??_fifo_getFree:
  6147  000003                     __RegsToCANID@val:
  6148                           	opt stack 0
  6149  000003                     i1WriteTimer0@timer:
  6150                           	opt stack 0
  6151                           
  6152                           ; 2 bytes @ 0x2
  6153  000003                     	ds	1
  6154  000004                     __RegsToCANID@type:
  6155                           	opt stack 0
  6156  000004                     __ECANPointBuffer@b:
  6157                           	opt stack 0
  6158                           
  6159                           ; 1 bytes @ 0x3
  6160  000004                     	ds	1
  6161  000005                     ??__RegsToCANID:
  6162  000005                     __ECANPointBuffer@pt:
  6163                           	opt stack 0
  6164                           
  6165                           ; 2 bytes @ 0x4
  6166  000005                     	ds	1
  6167  000006                     ??_fifo_write:
  6168                           
  6169                           ; 0 bytes @ 0x5
  6170  000006                     	ds	1
  6171  000007                     __RegsToCANID@Value:
  6172                           	opt stack 0
  6173                           
  6174                           ; 1 bytes @ 0x6
  6175  000007                     	ds	1
  6176  000008                     ?_ECANReceiveMessage:
  6177                           	opt stack 0
  6178  000008                     ECANReceiveMessage@data:
  6179                           	opt stack 0
  6180                           
  6181                           ; 1 bytes @ 0x7
  6182  000008                     	ds	1
  6183  000009                     ECANReceiveMessage@dataLen:
  6184                           	opt stack 0
  6185                           
  6186                           ; 1 bytes @ 0x8
  6187  000009                     	ds	1
  6188  00000A                     ECANReceiveMessage@msgFlags:
  6189                           	opt stack 0
  6190  00000A                     fifo_write@p:
  6191                           	opt stack 0
  6192                           
  6193                           ; 1 bytes @ 0x9
  6194  00000A                     	ds	1
  6195  00000B                     fifo_getFree@f:
  6196                           	opt stack 0
  6197  00000B                     ECANReceiveMessage@savedPtr:
  6198                           	opt stack 0
  6199  00000B                     fifo_write@i:
  6200                           	opt stack 0
  6201                           
  6202                           ; 4 bytes @ 0xA
  6203  00000B                     	ds	2
  6204  00000D                     ECANReceiveMessage@id:
  6205                           	opt stack 0
  6206                           
  6207                           ; 1 bytes @ 0xC
  6208  00000D                     	ds	1
  6209  00000E                     ECANReceiveMessage@i:
  6210                           	opt stack 0
  6211                           
  6212                           ; 1 bytes @ 0xD
  6213  00000E                     	ds	1
  6214  00000F                     ECANReceiveMessage@mode:
  6215                           	opt stack 0
  6216  00000F                     fifo_write@f:
  6217                           	opt stack 0
  6218                           
  6219                           ; 1 bytes @ 0xE
  6220  00000F                     	ds	1
  6221  000010                     ECANReceiveMessage@temp:
  6222                           	opt stack 0
  6223                           
  6224                           ; 1 bytes @ 0xF
  6225  000010                     	ds	1
  6226  000011                     ECANReceiveMessage@ptr:
  6227                           	opt stack 0
  6228                           
  6229                           ; 2 bytes @ 0x10
  6230  000011                     	ds	2
  6231  000013                     ??_Interrupt:
  6232                           
  6233                           ; 0 bytes @ 0x12
  6234  000013                     	ds	7
  6235  00001A                     Interrupt@data:
  6236                           	opt stack 0
  6237                           
  6238                           ; 8 bytes @ 0x19
  6239  00001A                     	ds	8
  6240  000022                     Interrupt@c:
  6241                           	opt stack 0
  6242                           
  6243                           ; 1 bytes @ 0x21
  6244  000022                     	ds	1
  6245  000023                     Interrupt@dlc:
  6246                           	opt stack 0
  6247                           
  6248                           ; 1 bytes @ 0x22
  6249  000023                     	ds	1
  6250  000024                     Interrupt@flags:
  6251                           	opt stack 0
  6252                           
  6253                           ; 1 bytes @ 0x23
  6254  000024                     	ds	1
  6255  000025                     Interrupt@id:
  6256                           	opt stack 0
  6257                           
  6258                           ; 4 bytes @ 0x24
  6259  000025                     	ds	4
  6260                           tblptru	equ	0xFF8
  6261                           tblptrh	equ	0xFF7
  6262                           tblptrl	equ	0xFF6
  6263                           tablat	equ	0xFF5
  6264                           prodh	equ	0xFF4
  6265                           prodl	equ	0xFF3
  6266                           intcon	equ	0xFF2
  6267                           indf0	equ	0xFEF
  6268                           postinc0	equ	0xFEE
  6269                           fsr0h	equ	0xFEA
  6270                           fsr0l	equ	0xFE9
  6271                           wreg	equ	0xFE8
  6272                           indf1	equ	0xFE7
  6273                           postinc1	equ	0xFE6
  6274                           postdec1	equ	0xFE5
  6275                           fsr1h	equ	0xFE2
  6276                           fsr1l	equ	0xFE1
  6277                           indf2	equ	0xFDF
  6278                           postinc2	equ	0xFDE
  6279                           postdec2	equ	0xFDD
  6280                           plusw2	equ	0xFDB
  6281                           fsr2h	equ	0xFDA
  6282                           fsr2l	equ	0xFD9
  6283                           status	equ	0xFD8
  6284                           
  6285 ;;
  6286 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6287 ;;
  6288 ;; *************** function _main *****************
  6289 ;; Defined at:
  6290 ;;		line 234 in file "main.c"
  6291 ;; Parameters:    Size  Location     Type
  6292 ;;  argc            2  106[BANK0 ] int 
  6293 ;;  argv            3  108[BANK0 ] PTR PTR unsigned char 
  6294 ;; Auto vars:     Size  Location     Type
  6295 ;;  c               1  112[BANK0 ] unsigned char 
  6296 ;; Return value:  Size  Location     Type
  6297 ;;                  2  106[BANK0 ] int 
  6298 ;; Registers used:
  6299 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6300 ;; Tracked objects:
  6301 ;;		On entry : 0/0
  6302 ;;		On exit  : F/0
  6303 ;;		Unchanged: 0/0
  6304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6305 ;;      Params:         0       5       0       0       0       0       0
  6306 ;;      Locals:         0       1       0       0       0       0       0
  6307 ;;      Temps:          0       1       0       0       0       0       0
  6308 ;;      Totals:         0       7       0       0       0       0       0
  6309 ;;Total ram usage:        7 bytes
  6310 ;; Hardware stack levels required when called:   11
  6311 ;; This function calls:
  6312 ;;		_fifo_init
  6313 ;;		_init_crc8
  6314 ;;		_readEEPROM
  6315 ;;		_vscp_restoreDefaults
  6316 ;;		_init
  6317 ;;		_putsUSART
  6318 ;;		_printFirmwareVersion
  6319 ;;		_printMode
  6320 ;;		_fifo_read
  6321 ;;		_doModeVerbose
  6322 ;;		_doModeVscp
  6323 ;;		_doModeSLCAN
  6324 ;;		_doModeVscpNode
  6325 ;; This function is called by:
  6326 ;;		Startup code after reset
  6327 ;; This function uses a non-reentrant model
  6328 ;;
  6329                           
  6330                           	psect	text0
  6331  003344                     __ptext0:
  6332                           	opt stack 0
  6333  003344                     _main:
  6334                           	opt stack 20
  6335                           
  6336                           ;main.c: 236: caps.maxVscpFrames = 1;
  6337                           
  6338                           ;incstack = 0
  6339                           ;incstack = 0
  6340  003344  0E01               	movlw	1
  6341  003346  6E46               	movwf	_caps,c
  6342                           
  6343                           ;main.c: 237: caps.maxCanalFrames = 1;
  6344  003348  6E47               	movwf	_caps+1,c
  6345                           
  6346                           ;main.c: 242: fifo_init( &serialInputFifo, inputBuffer, sizeof ( inputBuffer));
  6347  00334A  0E02               	movlw	high _inputBuffer
  6348  00334C  0100               	movlb	0	; () banked
  6349  00334E  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6350  003350  0E00               	movlw	low _inputBuffer
  6351  003352  6F60               	movwf	?_fifo_init& (0+255),b
  6352  003354  6B63               	clrf	(?_fifo_init+3)& (0+255),b
  6353  003356  0E80               	movlw	128
  6354  003358  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6355  00335A  0E3E               	movlw	_serialInputFifo& (0+255)
  6356  00335C  ECCE  F028         	call	_fifo_init
  6357                           
  6358                           ; BSR set to: 0
  6359                           ;main.c: 243: fifo_init( &canInputFifo, caninputBuffer, sizeof ( caninputBuffer));
  6360  003360  0E04               	movlw	high _caninputBuffer
  6361  003362  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6362  003364  0E00               	movlw	low _caninputBuffer
  6363  003366  6F60               	movwf	?_fifo_init& (0+255),b
  6364  003368  0E01               	movlw	1
  6365  00336A  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6366  00336C  0EEE               	movlw	238
  6367  00336E  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6368  003370  0E36               	movlw	_canInputFifo& (0+255)
  6369  003372  ECCE  F028         	call	_fifo_init
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;main.c: 246: init_crc8();
  6373  003376  EC34  F026         	call	_init_crc8	;wreg free
  6374                           
  6375                           ; BSR set to: 0
  6376                           ;main.c: 250: if ( ( 0x55 != readEEPROM(0x01) ) ||
  6377                           ;main.c: 251: ( 0xaa != readEEPROM(0x02) ) ) {
  6378  00337A  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
  6379  00337C  0E01               	movlw	1
  6380  00337E  6F60               	movwf	?_readEEPROM& (0+255),b
  6381  003380  EC69  F02A         	call	_readEEPROM	;wreg free
  6382  003384  0A55               	xorlw	85
  6383  003386  E107               	bnz	l9443
  6384                           
  6385                           ; BSR set to: 0
  6386  003388  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
  6387  00338A  0E02               	movlw	2
  6388  00338C  6F60               	movwf	?_readEEPROM& (0+255),b
  6389  00338E  EC69  F02A         	call	_readEEPROM	;wreg free
  6390  003392  0AAA               	xorlw	170
  6391  003394  A4D8               	btfss	status,2,c
  6392  003396                     l9443:
  6393                           
  6394                           ; BSR set to: 0
  6395                           ;main.c: 252: vscp_restoreDefaults();
  6396  003396  EC7B  F02A         	call	_vscp_restoreDefaults	;wreg free
  6397                           
  6398                           ;main.c: 253: }
  6399                           ;main.c: 256: init();
  6400  00339A  EC26  F028         	call	_init	;wreg free
  6401                           
  6402                           ; BSR set to: 0
  6403                           ;main.c: 260: _delay((unsigned long)((10)*(40000000/4000.0)));
  6404  00339E  0E82               	movlw	130
  6405  0033A0  6FCF               	movwf	??_main& (0+255),b
  6406  0033A2  0EDD               	movlw	221
  6407  0033A4                     u16477:
  6408  0033A4  2EE8               	decfsz	wreg,f,c
  6409  0033A6  D7FE               	goto	u16477
  6410  0033A8  2FCF               	decfsz	??_main& (0+255),f,b
  6411  0033AA  D7FC               	goto	u16477
  6412  0033AC  D000               	nop2	
  6413                           
  6414                           ;main.c: 264: putsUSART((char *) "\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  6415  0033AE  0E79               	movlw	high STR_1
  6416  0033B0  0100               	movlb	0	; () banked
  6417  0033B2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6418  0033B4  0E53               	movlw	low STR_1
  6419  0033B6  6F61               	movwf	?_putsUSART& (0+255),b
  6420  0033B8  EC89  F027         	call	_putsUSART	;wreg free
  6421                           
  6422                           ;main.c: 265: putsUSART((char *) "Copyright (C) 2014-2015 Grodans Paradis AB, Sweden\r\n
      +                          ");
  6423  0033BC  0E74               	movlw	high STR_2
  6424  0033BE  0100               	movlb	0	; () banked
  6425  0033C0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6426  0033C2  0EB1               	movlw	low STR_2
  6427  0033C4  6F61               	movwf	?_putsUSART& (0+255),b
  6428  0033C6  EC89  F027         	call	_putsUSART	;wreg free
  6429                           
  6430                           ;main.c: 266: printFirmwareVersion();
  6431  0033CA  ECC2  F023         	call	_printFirmwareVersion	;wreg free
  6432                           
  6433                           ;main.c: 267: printMode();
  6434  0033CE  EC85  F025         	call	_printMode	;wreg free
  6435                           
  6436                           ;main.c: 271: if (0 && (0 != mode)) {
  6437  0033D2  D025               	goto	l9475
  6438  0033D4                     l403:
  6439                           
  6440                           ; BSR set to: 0
  6441  0033D4  0004               	clrwdt		;# 
  6442                           
  6443                           ;main.c: 282: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6444  0033D6  0100               	movlb	0	; () banked
  6445  0033D8  0E00               	movlw	high main@c
  6446  0033DA  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6447  0033DC  0ED0               	movlw	low main@c
  6448  0033DE  6F60               	movwf	?_fifo_read& (0+255),b
  6449  0033E0  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  6450  0033E2  0E01               	movlw	1
  6451  0033E4  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6452  0033E6  0E3E               	movlw	_serialInputFifo& (0+255)
  6453  0033E8  EC80  F020         	call	_fifo_read
  6454  0033EC  0560               	decf	?_fifo_read& (0+255),w,b
  6455  0033EE  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6456  0033F0  E10C               	bnz	l404
  6457                           
  6458                           ; BSR set to: 0
  6459                           ;main.c: 283: (INTCONbits.GIE = 1);
  6460  0033F2  8EF2               	bsf	intcon,7,c	;volatile
  6461                           
  6462                           ; BSR set to: 0
  6463                           ;main.c: 284: if ('v' == c) {
  6464  0033F4  51D0               	movf	main@c& (0+255),w,b
  6465  0033F6  0A76               	xorlw	118
  6466  0033F8  E108               	bnz	l404
  6467                           
  6468                           ; BSR set to: 0
  6469                           ;main.c: 285: mode = 0;
  6470  0033FA  6BF8               	clrf	_mode& (0+255),b
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;main.c: 286: putsUSART((char *) "Temporary verbose mode set\r\n");
  6474  0033FC  0E7B               	movlw	high STR_4
  6475  0033FE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6476  003400  0E2B               	movlw	low STR_4
  6477  003402  6F61               	movwf	?_putsUSART& (0+255),b
  6478  003404  EC89  F027         	call	_putsUSART	;wreg free
  6479                           
  6480                           ;main.c: 287: break;
  6481  003408  D00A               	goto	l9475
  6482  00340A                     l404:
  6483                           
  6484                           ; BSR set to: 0
  6485                           ;main.c: 288: }
  6486                           ;main.c: 289: }
  6487                           ;main.c: 290: (INTCONbits.GIE = 1);
  6488  00340A  8EF2               	bsf	intcon,7,c	;volatile
  6489                           
  6490                           ; BSR set to: 0
  6491  00340C  0EB8               	movlw	184
  6492  00340E  5DE9               	subwf	_timekeeper& (0+255),w,b	;volatile
  6493  003410  0E0B               	movlw	11
  6494  003412  59EA               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
  6495  003414  0E00               	movlw	0
  6496  003416  59EB               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
  6497  003418  0E00               	movlw	0
  6498  00341A  59EC               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
  6499  00341C  E3DB               	bnc	l403
  6500  00341E                     l9475:
  6501                           
  6502                           ;main.c: 291: }
  6503                           ;main.c: 292: }
  6504                           ;main.c: 294: ledFunctionality = 1;
  6505  00341E  0E01               	movlw	1
  6506  003420  6E35               	movwf	_ledFunctionality,c
  6507  003422                     l407:
  6508  003422  0004               	clrwdt		;# 
  6509                           
  6510                           ;main.c: 302: if (COMSTATbits.TXBO) {
  6511  003424  AA74               	btfss	3956,5,c	;volatile
  6512  003426  D002               	goto	l408
  6513                           
  6514                           ;main.c: 304: ledFunctionality = 6;
  6515  003428  0E06               	movlw	6
  6516  00342A  D009               	goto	L1
  6517  00342C                     l408:
  6518                           
  6519                           ;main.c: 306: else if (COMSTATbits.TXBP || COMSTATbits.RXBP) {
  6520  00342C  B874               	btfsc	3956,4,c	;volatile
  6521  00342E  D002               	goto	l9483
  6522  003430  A674               	btfss	3956,3,c	;volatile
  6523  003432  D002               	goto	l410
  6524  003434                     l9483:
  6525                           
  6526                           ;main.c: 308: ledFunctionality = 5;
  6527  003434  0E05               	movlw	5
  6528  003436  D003               	goto	L1
  6529  003438                     l410:
  6530                           
  6531                           ;main.c: 312: ledFunctionality = 4;
  6532  003438  0E04               	movlw	4
  6533                           
  6534                           ;main.c: 310: else if (COMSTATbits.EWARN) {
  6535  00343A  A074               	btfss	3956,0,c	;volatile
  6536                           
  6537                           ;main.c: 314: else {
  6538                           ;main.c: 316: ledFunctionality = 1;
  6539                           
  6540                           ;main.c: 313: }
  6541  00343C  0E01               	movlw	1
  6542  00343E                     L1:
  6543  00343E  6E35               	movwf	_ledFunctionality,c
  6544                           
  6545                           ;main.c: 317: }
  6546                           ;main.c: 320: if (COMSTATbits.RXBnOVFL) {
  6547  003440  AC74               	btfss	3956,6,c	;volatile
  6548  003442  D007               	goto	l9495
  6549                           
  6550                           ;main.c: 321: can_receiveOverruns++;
  6551  003444  0100               	movlb	0	; () banked
  6552  003446  2BD1               	incf	_can_receiveOverruns& (0+255),f,b
  6553  003448  0E00               	movlw	0
  6554  00344A  23D2               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
  6555  00344C  23D3               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
  6556  00344E  23D4               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
  6557                           
  6558                           ; BSR set to: 0
  6559                           ;main.c: 322: COMSTATbits.RXBnOVFL = 0;
  6560  003450  9C74               	bcf	3956,6,c	;volatile
  6561  003452                     l9495:
  6562                           
  6563                           ;main.c: 323: }
  6564                           ;main.c: 325: if (0 == mode) {
  6565  003452  0100               	movlb	0	; () banked
  6566  003454  67F8               	tstfsz	_mode& (0+255),b
  6567  003456  D003               	goto	l9499
  6568  003458                     l9497:
  6569                           
  6570                           ; BSR set to: 0
  6571                           ;main.c: 326: doModeVerbose();
  6572  003458  EC17  F001         	call	_doModeVerbose	;wreg free
  6573                           
  6574                           ;main.c: 327: }
  6575  00345C  D7E2               	goto	l407
  6576  00345E                     l9499:
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;main.c: 328: else if (1 == mode) {
  6580  00345E  05F8               	decf	_mode& (0+255),w,b
  6581  003460  E103               	bnz	l9503
  6582                           
  6583                           ; BSR set to: 0
  6584                           ;main.c: 329: doModeVscp();
  6585  003462  ECDE  F015         	call	_doModeVscp	;wreg free
  6586                           
  6587                           ;main.c: 330: }
  6588  003466  D7DD               	goto	l407
  6589  003468                     l9503:
  6590                           
  6591                           ; BSR set to: 0
  6592                           ;main.c: 331: else if (2 == mode) {
  6593  003468  51F8               	movf	_mode& (0+255),w,b
  6594  00346A  0A02               	xorlw	2
  6595  00346C  E103               	bnz	l9507
  6596                           
  6597                           ; BSR set to: 0
  6598                           ;main.c: 332: doModeSLCAN();
  6599  00346E  EC88  F00E         	call	_doModeSLCAN	;wreg free
  6600                           
  6601                           ;main.c: 333: }
  6602  003472  D7D7               	goto	l407
  6603  003474                     l9507:
  6604                           
  6605                           ; BSR set to: 0
  6606                           ;main.c: 334: else if (3 == mode) {
  6607  003474  51F8               	movf	_mode& (0+255),w,b
  6608  003476  0A03               	xorlw	3
  6609  003478  E1EF               	bnz	l9497
  6610                           
  6611                           ; BSR set to: 0
  6612                           ;main.c: 335: doModeVscpNode();
  6613  00347A  EC7F  F02A         	call	_doModeVscpNode	;wreg free
  6614                           
  6615                           ;main.c: 336: }
  6616  00347E  D7D1               	goto	l407
  6617  003480                     __end_of_main:
  6618                           	opt stack 0
  6619                           tblptru	equ	0xFF8
  6620                           tblptrh	equ	0xFF7
  6621                           tblptrl	equ	0xFF6
  6622                           tablat	equ	0xFF5
  6623                           prodh	equ	0xFF4
  6624                           prodl	equ	0xFF3
  6625                           intcon	equ	0xFF2
  6626                           indf0	equ	0xFEF
  6627                           postinc0	equ	0xFEE
  6628                           fsr0h	equ	0xFEA
  6629                           fsr0l	equ	0xFE9
  6630                           wreg	equ	0xFE8
  6631                           indf1	equ	0xFE7
  6632                           postinc1	equ	0xFE6
  6633                           postdec1	equ	0xFE5
  6634                           fsr1h	equ	0xFE2
  6635                           fsr1l	equ	0xFE1
  6636                           indf2	equ	0xFDF
  6637                           postinc2	equ	0xFDE
  6638                           postdec2	equ	0xFDD
  6639                           plusw2	equ	0xFDB
  6640                           fsr2h	equ	0xFDA
  6641                           fsr2l	equ	0xFD9
  6642                           status	equ	0xFD8
  6643                           
  6644 ;; *************** function _doModeVscpNode *****************
  6645 ;; Defined at:
  6646 ;;		line 1465 in file "main.c"
  6647 ;; Parameters:    Size  Location     Type
  6648 ;;		None
  6649 ;; Auto vars:     Size  Location     Type
  6650 ;;		None
  6651 ;; Return value:  Size  Location     Type
  6652 ;;		None               void
  6653 ;; Registers used:
  6654 ;;		None
  6655 ;; Tracked objects:
  6656 ;;		On entry : F/0
  6657 ;;		On exit  : F/0
  6658 ;;		Unchanged: F/0
  6659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6660 ;;      Params:         0       0       0       0       0       0       0
  6661 ;;      Locals:         0       0       0       0       0       0       0
  6662 ;;      Temps:          0       0       0       0       0       0       0
  6663 ;;      Totals:         0       0       0       0       0       0       0
  6664 ;;Total ram usage:        0 bytes
  6665 ;; Hardware stack levels used:    1
  6666 ;; Hardware stack levels required when called:    3
  6667 ;; This function calls:
  6668 ;;		Nothing
  6669 ;; This function is called by:
  6670 ;;		_main
  6671 ;; This function uses a non-reentrant model
  6672 ;;
  6673                           
  6674                           	psect	text1
  6675  0054FE                     __ptext1:
  6676                           	opt stack 0
  6677  0054FE                     _doModeVscpNode:
  6678                           	opt stack 27
  6679                           
  6680                           ; BSR set to: 0
  6681                           
  6682                           ; BSR set to: 0
  6683                           ;incstack = 0
  6684                           ;incstack = 0
  6685  0054FE  0012               	return	
  6686  005500                     __end_of_doModeVscpNode:
  6687                           	opt stack 0
  6688                           tblptru	equ	0xFF8
  6689                           tblptrh	equ	0xFF7
  6690                           tblptrl	equ	0xFF6
  6691                           tablat	equ	0xFF5
  6692                           prodh	equ	0xFF4
  6693                           prodl	equ	0xFF3
  6694                           intcon	equ	0xFF2
  6695                           indf0	equ	0xFEF
  6696                           postinc0	equ	0xFEE
  6697                           fsr0h	equ	0xFEA
  6698                           fsr0l	equ	0xFE9
  6699                           wreg	equ	0xFE8
  6700                           indf1	equ	0xFE7
  6701                           postinc1	equ	0xFE6
  6702                           postdec1	equ	0xFE5
  6703                           fsr1h	equ	0xFE2
  6704                           fsr1l	equ	0xFE1
  6705                           indf2	equ	0xFDF
  6706                           postinc2	equ	0xFDE
  6707                           postdec2	equ	0xFDD
  6708                           plusw2	equ	0xFDB
  6709                           fsr2h	equ	0xFDA
  6710                           fsr2l	equ	0xFD9
  6711                           status	equ	0xFD8
  6712                           
  6713 ;; *************** function _doModeSLCAN *****************
  6714 ;; Defined at:
  6715 ;;		line 1263 in file "main.c"
  6716 ;; Parameters:    Size  Location     Type
  6717 ;;		None
  6718 ;; Auto vars:     Size  Location     Type
  6719 ;;  id              4   61[BANK0 ] unsigned long 
  6720 ;;  dlc             1   65[BANK0 ] unsigned char 
  6721 ;;  rv              1   67[BANK0 ] enum E15660
  6722 ;;  c               1   66[BANK0 ] unsigned char 
  6723 ;; Return value:  Size  Location     Type
  6724 ;;		None               void
  6725 ;; Registers used:
  6726 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6727 ;; Tracked objects:
  6728 ;;		On entry : F/0
  6729 ;;		On exit  : E/0
  6730 ;;		Unchanged: 0/0
  6731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6732 ;;      Params:         0       0       0       0       0       0       0
  6733 ;;      Locals:         0       7       0       0       0       0       0
  6734 ;;      Temps:          0       7       0       0       0       0       0
  6735 ;;      Totals:         0      14       0       0       0       0       0
  6736 ;;Total ram usage:       14 bytes
  6737 ;; Hardware stack levels used:    1
  6738 ;; Hardware stack levels required when called:    7
  6739 ;; This function calls:
  6740 ;;		_putsUSART
  6741 ;;		_fifo_read
  6742 ;;		_writeEEPROM
  6743 ;;		_ECANSetOperationMode
  6744 ;;		_memset
  6745 ;;		_receivePrintEventSLCAN
  6746 ;;		_strlen
  6747 ;;		_hexStringToBytes
  6748 ;;		_memcpy
  6749 ;;		_sendCANFrame
  6750 ;; This function is called by:
  6751 ;;		_main
  6752 ;; This function uses a non-reentrant model
  6753 ;;
  6754                           
  6755                           	psect	text2
  6756  001D10                     __ptext2:
  6757                           	opt stack 0
  6758  001D10                     _doModeSLCAN:
  6759                           	opt stack 23
  6760                           
  6761                           ; BSR set to: 0
  6762                           ;main.c: 1264: uint8_t c;
  6763                           ;main.c: 1265: BOOL rv = 0;
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;incstack = 0
  6767                           ;incstack = 0
  6768  001D10  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  6769                           
  6770                           ; BSR set to: 0
  6771                           ;main.c: 1268: receivePrintEventSLCAN();
  6772  001D12  EC88  F017         	call	_receivePrintEventSLCAN	;wreg free
  6773                           
  6774                           ;main.c: 1271: (INTCONbits.GIE = 0);
  6775  001D16  9EF2               	bcf	intcon,7,c	;volatile
  6776                           
  6777                           ;main.c: 1273: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6778  001D18  0100               	movlb	0	; () banked
  6779  001D1A  0E00               	movlw	high doModeSLCAN@c
  6780  001D1C  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6781  001D1E  0EA2               	movlw	low doModeSLCAN@c
  6782  001D20  6F60               	movwf	?_fifo_read& (0+255),b
  6783  001D22  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  6784  001D24  0E01               	movlw	1
  6785  001D26  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6786  001D28  0E3E               	movlw	_serialInputFifo& (0+255)
  6787  001D2A  EC80  F020         	call	_fifo_read
  6788  001D2E  0560               	decf	?_fifo_read& (0+255),w,b
  6789  001D30  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6790  001D32  E001 D19C          	bnz	l10547
  6791                           
  6792                           ; BSR set to: 0
  6793                           ;main.c: 1276: (INTCONbits.GIE = 1);
  6794  001D36  8EF2               	bsf	intcon,7,c	;volatile
  6795                           
  6796                           ; BSR set to: 0
  6797                           ;main.c: 1278: if (0x0d != c) {
  6798  001D38  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  6799  001D3A  0A0D               	xorlw	13
  6800  001D3C  E101 D14E          	bz	l10535
  6801                           
  6802                           ; BSR set to: 0
  6803                           ;main.c: 1279: cmdbuf[ pos ] = c;
  6804  001D40  ECAC  F016         	call	PL18	;call to abstracted procedure
  6805  001D44  C0A2  FFDF         	movff	doModeSLCAN@c,indf2
  6806                           
  6807                           ; BSR set to: 0
  6808                           ;main.c: 1280: pos++;
  6809  001D48  2B02               	incf	_pos& (0+255),f,b
  6810  001D4A  D192               	goto	l688
  6811  001D4C                     l10429:
  6812                           
  6813                           ; BSR set to: 0
  6814                           ;main.c: 1288: if (1 == strlen(cmdbuf)) {
  6815  001D4C  0E01               	movlw	high _cmdbuf
  6816  001D4E  0100               	movlb	0	; () banked
  6817  001D50  6F61               	movwf	(?_strlen+1)& (0+255),b
  6818  001D52  0E04               	movlw	low _cmdbuf
  6819  001D54  6F60               	movwf	?_strlen& (0+255),b
  6820  001D56  ECAE  F028         	call	_strlen	;wreg free
  6821  001D5A  0560               	decf	?_strlen& (0+255),w,b
  6822  001D5C  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6823  001D5E  E001 D168          	bnz	l10537
  6824                           
  6825                           ; BSR set to: 0
  6826                           ;main.c: 1289: putsUSART((char *) "JFrankfurt RS-232\r\n");
  6827  001D62  0E7D               	movlw	high STR_125
  6828  001D64  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6829  001D66  0E5B               	movlw	low STR_125
  6830  001D68  6F61               	movwf	?_putsUSART& (0+255),b
  6831  001D6A  EC89  F027         	call	_putsUSART	;wreg free
  6832  001D6E                     l10433:
  6833                           
  6834                           ;main.c: 1290: rv = 1;
  6835  001D6E  0E01               	movlw	1
  6836  001D70  0100               	movlb	0	; () banked
  6837  001D72  D0DE               	goto	L3
  6838  001D74                     l10435:
  6839                           
  6840                           ; BSR set to: 0
  6841                           ;main.c: 1296: if (1 == strlen(cmdbuf)) {
  6842  001D74  0E01               	movlw	high _cmdbuf
  6843  001D76  0100               	movlb	0	; () banked
  6844  001D78  6F61               	movwf	(?_strlen+1)& (0+255),b
  6845  001D7A  0E04               	movlw	low _cmdbuf
  6846  001D7C  6F60               	movwf	?_strlen& (0+255),b
  6847  001D7E  ECAE  F028         	call	_strlen	;wreg free
  6848  001D82  0560               	decf	?_strlen& (0+255),w,b
  6849  001D84  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6850  001D86  E001 D154          	bnz	l10537
  6851                           
  6852                           ; BSR set to: 0
  6853                           ;main.c: 1297: putsUSART((char *) "V1011\r\n");
  6854  001D8A  0E7E               	movlw	high STR_126
  6855  001D8C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6856  001D8E  0ED6               	movlw	low STR_126
  6857  001D90  6F61               	movwf	?_putsUSART& (0+255),b
  6858  001D92  EC89  F027         	call	_putsUSART	;wreg free
  6859  001D96  D7EB               	goto	l10433
  6860  001D98                     l10441:
  6861                           
  6862                           ; BSR set to: 0
  6863                           ;main.c: 1304: if (1 == strlen(cmdbuf)) {
  6864  001D98  0E01               	movlw	high _cmdbuf
  6865  001D9A  0100               	movlb	0	; () banked
  6866  001D9C  6F61               	movwf	(?_strlen+1)& (0+255),b
  6867  001D9E  0E04               	movlw	low _cmdbuf
  6868  001DA0  6F60               	movwf	?_strlen& (0+255),b
  6869  001DA2  ECAE  F028         	call	_strlen	;wreg free
  6870  001DA6  0560               	decf	?_strlen& (0+255),w,b
  6871  001DA8  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6872  001DAA  E001 D142          	bnz	l10537
  6873                           
  6874                           ; BSR set to: 0
  6875                           ;main.c: 1305: putsUSART((char *) "N1977\r\n");
  6876  001DAE  0E7E               	movlw	high STR_127
  6877  001DB0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6878  001DB2  0EDE               	movlw	low STR_127
  6879  001DB4  6F61               	movwf	?_putsUSART& (0+255),b
  6880  001DB6  EC89  F027         	call	_putsUSART	;wreg free
  6881  001DBA  D7D9               	goto	l10433
  6882  001DBC                     l10447:
  6883                           
  6884                           ; BSR set to: 0
  6885                           ;main.c: 1314: bInitiated = 1;
  6886  001DBC  0E01               	movlw	1
  6887  001DBE  6FF6               	movwf	_bInitiated& (0+255),b
  6888                           
  6889                           ;main.c: 1315: rv = 1;
  6890  001DC0  D0B7               	goto	L3
  6891  001DC2                     l698:
  6892                           
  6893                           ; BSR set to: 0
  6894                           ;main.c: 1320: if (!bOpen) {
  6895  001DC2  67F7               	tstfsz	_bOpen& (0+255),b
  6896  001DC4  D003               	goto	l10451
  6897                           
  6898                           ; BSR set to: 0
  6899                           ;main.c: 1321: bInitiated = 1;
  6900  001DC6  0E01               	movlw	1
  6901  001DC8  6FF6               	movwf	_bInitiated& (0+255),b
  6902                           
  6903                           ;main.c: 1322: rv = 1;
  6904  001DCA  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  6905  001DCC                     l10451:
  6906                           
  6907                           ; BSR set to: 0
  6908                           ;main.c: 1327: if (1 == strlen(cmdbuf)) {
  6909  001DCC  0E01               	movlw	high _cmdbuf
  6910  001DCE  0100               	movlb	0	; () banked
  6911  001DD0  6F61               	movwf	(?_strlen+1)& (0+255),b
  6912  001DD2  0E04               	movlw	low _cmdbuf
  6913  001DD4  6F60               	movwf	?_strlen& (0+255),b
  6914  001DD6  ECAE  F028         	call	_strlen	;wreg free
  6915  001DDA  0560               	decf	?_strlen& (0+255),w,b
  6916  001DDC  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6917  001DDE  E001 D128          	bnz	l10537
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;main.c: 1328: if (!bOpen && bInitiated) {
  6921  001DE2  67F7               	tstfsz	_bOpen& (0+255),b
  6922  001DE4  D126               	goto	l10537
  6923                           
  6924                           ; BSR set to: 0
  6925  001DE6  51F6               	movf	_bInitiated& (0+255),w,b
  6926  001DE8  E101 D123          	bz	l10537
  6927                           
  6928                           ; BSR set to: 0
  6929                           ;main.c: 1329: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  6930  001DEC  0E00               	movlw	0
  6931  001DEE  EC3E  F02A         	call	_ECANSetOperationMode
  6932                           
  6933                           ; BSR set to: 0
  6934                           ;main.c: 1330: bOpen = 1;
  6935  001DF2  0E01               	movlw	1
  6936  001DF4  6FF7               	movwf	_bOpen& (0+255),b
  6937  001DF6  D7BB               	goto	l10433
  6938  001DF8                     l10463:
  6939                           
  6940                           ; BSR set to: 0
  6941                           ;main.c: 1338: if (1 == strlen(cmdbuf)) {
  6942  001DF8  0E01               	movlw	high _cmdbuf
  6943  001DFA  0100               	movlb	0	; () banked
  6944  001DFC  6F61               	movwf	(?_strlen+1)& (0+255),b
  6945  001DFE  0E04               	movlw	low _cmdbuf
  6946  001E00  6F60               	movwf	?_strlen& (0+255),b
  6947  001E02  ECAE  F028         	call	_strlen	;wreg free
  6948  001E06  0560               	decf	?_strlen& (0+255),w,b
  6949  001E08  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6950  001E0A  E001 D112          	bnz	l10537
  6951                           
  6952                           ; BSR set to: 0
  6953                           ;main.c: 1339: if (bOpen) {
  6954  001E0E  51F7               	movf	_bOpen& (0+255),w,b
  6955  001E10  E0AE               	bz	l10433
  6956                           
  6957                           ; BSR set to: 0
  6958                           ;main.c: 1340: ECANSetOperationMode(0x20);
  6959  001E12  0E20               	movlw	32
  6960  001E14  EC3E  F02A         	call	_ECANSetOperationMode
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;main.c: 1341: bOpen = 0;
  6964  001E18  6BF7               	clrf	_bOpen& (0+255),b
  6965  001E1A  D7A9               	goto	l10433
  6966  001E1C                     l10473:
  6967                           
  6968                           ; BSR set to: 0
  6969                           ;main.c: 1354: if (bOpen && (strlen(cmdbuf) >= 10)) {
  6970  001E1C  51F7               	movf	_bOpen& (0+255),w,b
  6971  001E1E  E101 D108          	bz	l10537
  6972                           
  6973                           ; BSR set to: 0
  6974  001E22  0E01               	movlw	high _cmdbuf
  6975  001E24  0100               	movlb	0	; () banked
  6976  001E26  6F61               	movwf	(?_strlen+1)& (0+255),b
  6977  001E28  0E04               	movlw	low _cmdbuf
  6978  001E2A  6F60               	movwf	?_strlen& (0+255),b
  6979  001E2C  ECAE  F028         	call	_strlen	;wreg free
  6980  001E30  0E0A               	movlw	10
  6981  001E32  5D60               	subwf	?_strlen& (0+255),w,b
  6982  001E34  0E00               	movlw	0
  6983  001E36  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  6984  001E38  E201 D0FB          	bnc	l10537
  6985                           
  6986                           ; BSR set to: 0
  6987                           ;main.c: 1356: uint32_t id;
  6988                           ;main.c: 1357: uint8_t dlc;
  6989                           ;main.c: 1359: if (hexStringToBytes(wrkbuf, sizeof ( wrkbuf), cmdbuf) < 5) {
  6990  001E3C  0E01               	movlw	high _wrkbuf
  6991  001E3E  0100               	movlb	0	; () banked
  6992  001E40  6F65               	movwf	(?_hexStringToBytes+1)& (0+255),b
  6993  001E42  0E54               	movlw	low _wrkbuf
  6994  001E44  6F64               	movwf	?_hexStringToBytes& (0+255),b
  6995  001E46  0E50               	movlw	80
  6996  001E48  6F66               	movwf	(?_hexStringToBytes+2)& (0+255),b
  6997  001E4A  0E01               	movlw	high _cmdbuf
  6998  001E4C  6F68               	movwf	(?_hexStringToBytes+4)& (0+255),b
  6999  001E4E  0E04               	movlw	low _cmdbuf
  7000  001E50  6F67               	movwf	(?_hexStringToBytes+3)& (0+255),b
  7001  001E52  ECE1  F022         	call	_hexStringToBytes	;wreg free
  7002  001E56  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7003  001E58  0E05               	movlw	5
  7004  001E5A  5D96               	subwf	??_doModeSLCAN& (0+255),w,b
  7005  001E5C  E201 D0E9          	bnc	l10537
  7006                           
  7007                           ; BSR set to: 0
  7008                           ;main.c: 1361: }
  7009                           ;main.c: 1363: id = (uint32_t) wrkbuf[0] << 24 + (uint32_t) wrkbuf[1] << 16 + (uint32_t)
      +                           wrkbuf[2] << 8 + wrkbuf[3];
  7010  001E60  C157  F096         	movff	_wrkbuf+3,??_doModeSLCAN
  7011  001E64  0E08               	movlw	8
  7012  001E66  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7013  001E68  C156  F097         	movff	_wrkbuf+2,??_doModeSLCAN+1
  7014  001E6C  0E10               	movlw	16
  7015  001E6E  2797               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  7016  001E70  C155  F098         	movff	_wrkbuf+1,??_doModeSLCAN+2
  7017  001E74  0E18               	movlw	24
  7018  001E76  2798               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  7019  001E78  C154  F099         	movff	_wrkbuf,??_doModeSLCAN+3
  7020  001E7C  0100               	movlb	0	; () banked
  7021  001E7E  6B9A               	clrf	(??_doModeSLCAN+4)& (0+255),b
  7022  001E80  6B9B               	clrf	(??_doModeSLCAN+5)& (0+255),b
  7023  001E82  6B9C               	clrf	(??_doModeSLCAN+6)& (0+255),b
  7024  001E84  2B98               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  7025  001E86  D001               	goto	u13070
  7026  001E88                     u13075:
  7027  001E88  D8F4               	call	PL84	;call to abstracted procedure
  7028  001E8A                     u13070:
  7029  001E8A  2F98               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  7030  001E8C  D7FD               	goto	u13075
  7031  001E8E  2B97               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  7032  001E90  D001               	goto	u13080
  7033  001E92                     u13085:
  7034  001E92  D8EF               	call	PL84	;call to abstracted procedure
  7035  001E94                     u13080:
  7036  001E94  2F97               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  7037  001E96  D7FD               	goto	u13085
  7038  001E98  2B96               	incf	??_doModeSLCAN& (0+255),f,b
  7039  001E9A  D001               	goto	u13090
  7040  001E9C                     u13095:
  7041  001E9C  D8EA               	call	PL84	;call to abstracted procedure
  7042  001E9E                     u13090:
  7043  001E9E  2F96               	decfsz	??_doModeSLCAN& (0+255),f,b
  7044  001EA0  D7FD               	goto	u13095
  7045  001EA2  C09C  F0A0         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  7046  001EA6  C09B  F09F         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  7047  001EAA  C09A  F09E         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  7048  001EAE  C099  F09D         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  7049                           
  7050                           ; BSR set to: 0
  7051                           ;main.c: 1364: dlc = vscpData[4];
  7052  001EB2  C1A8  F0A1         	movff	_vscpData+4,doModeSLCAN@dlc
  7053                           
  7054                           ; BSR set to: 0
  7055                           ;main.c: 1367: if (dlc > 8) break;
  7056  001EB6  0E08               	movlw	8
  7057  001EB8  65A1               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  7058  001EBA  D001               	goto	l10489
  7059  001EBC  D0BA               	goto	l10537
  7060  001EBE                     l10489:
  7061                           
  7062                           ; BSR set to: 0
  7063                           ;main.c: 1368: if (strlen(cmdbuf) < (10 + 2 * dlc)) break;
  7064  001EBE  90D8               	bcf	status,0,c
  7065  001EC0  35A1               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  7066  001EC2  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7067  001EC4  6B97               	clrf	(??_doModeSLCAN+1)& (0+255),b
  7068  001EC6  3797               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  7069  001EC8  0E0A               	movlw	10
  7070  001ECA  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7071  001ECC  0E00               	movlw	0
  7072  001ECE  2397               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  7073  001ED0  0E01               	movlw	high _cmdbuf
  7074  001ED2  0100               	movlb	0	; () banked
  7075  001ED4  6F61               	movwf	(?_strlen+1)& (0+255),b
  7076  001ED6  0E04               	movlw	low _cmdbuf
  7077  001ED8  6F60               	movwf	?_strlen& (0+255),b
  7078  001EDA  ECAE  F028         	call	_strlen	;wreg free
  7079  001EDE  5196               	movf	??_doModeSLCAN& (0+255),w,b
  7080  001EE0  5D60               	subwf	?_strlen& (0+255),w,b
  7081  001EE2  5197               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  7082  001EE4  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7083  001EE6  E201 D0A4          	bnc	l10537
  7084                           
  7085                           ; BSR set to: 0
  7086                           ;main.c: 1370: memcpy(vscpData, vscpData + 5, dlc);
  7087  001EEA  0E01               	movlw	high _vscpData
  7088  001EEC  0100               	movlb	0	; () banked
  7089  001EEE  6F61               	movwf	(?_memcpy+1)& (0+255),b
  7090  001EF0  0EA4               	movlw	low _vscpData
  7091  001EF2  6F60               	movwf	?_memcpy& (0+255),b
  7092  001EF4  0EA9               	movlw	low (_vscpData+5)
  7093  001EF6  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7094  001EF8  0E01               	movlw	high (_vscpData+5)
  7095  001EFA  6F97               	movwf	(??_doModeSLCAN+1)& (0+255),b
  7096  001EFC  C096  F062         	movff	??_doModeSLCAN,?_memcpy+2
  7097  001F00  C097  F063         	movff	??_doModeSLCAN+1,?_memcpy+3
  7098  001F04  C0A1  F064         	movff	doModeSLCAN@dlc,?_memcpy+4
  7099  001F08  6B65               	clrf	(?_memcpy+5)& (0+255),b
  7100  001F0A  EC8D  F028         	call	_memcpy	;wreg free
  7101                           
  7102                           ; BSR set to: 0
  7103                           ;main.c: 1372: rv = sendCANFrame(id, dlc, vscpData);
  7104  001F0E  C09D  F08F         	movff	doModeSLCAN@id,?_sendCANFrame
  7105  001F12  C09E  F090         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  7106  001F16  C09F  F091         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  7107  001F1A  C0A0  F092         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  7108  001F1E  C0A1  F093         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  7109  001F22  0E01               	movlw	high _vscpData
  7110  001F24  0100               	movlb	0	; () banked
  7111  001F26  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  7112  001F28  0EA4               	movlw	low _vscpData
  7113  001F2A  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  7114  001F2C  EC4B  F029         	call	_sendCANFrame	;wreg free
  7115  001F30                     L3:
  7116  001F30  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  7117  001F32  D07F               	goto	l10537
  7118  001F34                     l10497:
  7119                           
  7120                           ; BSR set to: 0
  7121                           ;main.c: 1387: if (bOpen && (strlen(cmdbuf) == 1)) {
  7122  001F34  51F7               	movf	_bOpen& (0+255),w,b
  7123  001F36  E07D               	bz	l10537
  7124                           
  7125                           ; BSR set to: 0
  7126  001F38  0E01               	movlw	high _cmdbuf
  7127  001F3A  0100               	movlb	0	; () banked
  7128  001F3C  6F61               	movwf	(?_strlen+1)& (0+255),b
  7129  001F3E  0E04               	movlw	low _cmdbuf
  7130  001F40  6F60               	movwf	?_strlen& (0+255),b
  7131  001F42  ECAE  F028         	call	_strlen	;wreg free
  7132  001F46  0560               	decf	?_strlen& (0+255),w,b
  7133  001F48  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7134  001F4A  E173               	bnz	l10537
  7135                           
  7136                           ; BSR set to: 0
  7137                           ;main.c: 1388: putsUSART((char *) "F00\r\n");
  7138  001F4C  0E7F               	movlw	high STR_128
  7139  001F4E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7140  001F50  0E7A               	movlw	low STR_128
  7141  001F52  6F61               	movwf	?_putsUSART& (0+255),b
  7142  001F54  EC89  F027         	call	_putsUSART	;wreg free
  7143  001F58  D06C               	goto	l10537
  7144  001F5A                     l10507:
  7145                           
  7146                           ; BSR set to: 0
  7147                           ;main.c: 1404: if (2 == strlen(cmdbuf)) {
  7148  001F5A  0E01               	movlw	high _cmdbuf
  7149  001F5C  0100               	movlb	0	; () banked
  7150  001F5E  6F61               	movwf	(?_strlen+1)& (0+255),b
  7151  001F60  0E04               	movlw	low _cmdbuf
  7152  001F62  6F60               	movwf	?_strlen& (0+255),b
  7153  001F64  ECAE  F028         	call	_strlen	;wreg free
  7154  001F68  5160               	movf	?_strlen& (0+255),w,b
  7155  001F6A  0A02               	xorlw	2
  7156  001F6C  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7157  001F6E  E161               	bnz	l10537
  7158                           
  7159                           ; BSR set to: 0
  7160                           ;main.c: 1405: if (!bOpen) {
  7161  001F70  67F7               	tstfsz	_bOpen& (0+255),b
  7162  001F72  D05F               	goto	l10537
  7163                           
  7164                           ; BSR set to: 0
  7165                           ;main.c: 1406: if ('0' == cmdbuf[1]) {
  7166  001F74  0101               	movlb	1	; () banked
  7167  001F76  5105               	movf	(_cmdbuf+1)& (0+255),w,b
  7168  001F78  0A30               	xorlw	48
  7169  001F7A  E10A               	bnz	l10519
  7170                           
  7171                           ; BSR set to: 1
  7172                           ;main.c: 1407: nTimeStamp = 0;
  7173  001F7C  0100               	movlb	0	; () banked
  7174  001F7E  6BF9               	clrf	_nTimeStamp& (0+255),b
  7175                           
  7176                           ; BSR set to: 0
  7177                           ;main.c: 1409: writeEEPROM(0x05, 0);
  7178  001F80  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
  7179  001F82  0E05               	movlw	5
  7180  001F84  6F60               	movwf	?_writeEEPROM& (0+255),b
  7181  001F86  0E00               	movlw	0
  7182  001F88  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
  7183  001F8A  ECFD  F029         	call	_writeEEPROM	;wreg free
  7184  001F8E  D6EF               	goto	l10433
  7185  001F90                     l10519:
  7186                           
  7187                           ; BSR set to: 1
  7188  001F90  5105               	movf	(_cmdbuf+1)& (0+255),w,b
  7189  001F92  0A31               	xorlw	49
  7190  001F94  E10B               	bnz	l723
  7191                           
  7192                           ; BSR set to: 1
  7193                           ;main.c: 1412: nTimeStamp = 1;
  7194  001F96  0E01               	movlw	1
  7195  001F98  0100               	movlb	0	; () banked
  7196  001F9A  6FF9               	movwf	_nTimeStamp& (0+255),b
  7197                           
  7198                           ; BSR set to: 0
  7199                           ;main.c: 1414: writeEEPROM(0x05,
  7200                           ;main.c: 1415: 1);
  7201  001F9C  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
  7202  001F9E  0E05               	movlw	5
  7203  001FA0  6F60               	movwf	?_writeEEPROM& (0+255),b
  7204  001FA2  0E01               	movlw	1
  7205  001FA4  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
  7206  001FA6  ECFD  F029         	call	_writeEEPROM	;wreg free
  7207  001FAA  D6E1               	goto	l10433
  7208  001FAC                     l723:
  7209                           
  7210                           ; BSR set to: 1
  7211                           ;main.c: 1418: rv = 0;
  7212  001FAC  0100               	movlb	0	; () banked
  7213  001FAE  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  7214  001FB0  D040               	goto	l10537
  7215  001FB2                     l10527:
  7216                           
  7217                           ; BSR set to: 0
  7218                           ;main.c: 1426: writeEEPROM(0x01, 0xFF);
  7219  001FB2  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
  7220  001FB4  0E01               	movlw	1
  7221  001FB6  6F60               	movwf	?_writeEEPROM& (0+255),b
  7222  001FB8  0EFF               	movlw	255
  7223  001FBA  6962               	setf	(?_writeEEPROM+2)& (0+255),b
  7224  001FBC  ECFD  F029         	call	_writeEEPROM	;wreg free
  7225  001FC0  00FF               	reset		;# 
  7226                           
  7227                           ;main.c: 1428: break;
  7228  001FC2  D037               	goto	l10537
  7229  001FC4                     l10529:
  7230                           
  7231                           ; BSR set to: 0
  7232                           ;main.c: 1431: {
  7233                           ;main.c: 1433: if (0 == strlen(cmdbuf)) {
  7234  001FC4  0E01               	movlw	high _cmdbuf
  7235  001FC6  0100               	movlb	0	; () banked
  7236  001FC8  6F61               	movwf	(?_strlen+1)& (0+255),b
  7237  001FCA  0E04               	movlw	low _cmdbuf
  7238  001FCC  6F60               	movwf	?_strlen& (0+255),b
  7239  001FCE  ECAE  F028         	call	_strlen	;wreg free
  7240  001FD2  5161               	movf	(?_strlen+1)& (0+255),w,b
  7241  001FD4  1160               	iorwf	?_strlen& (0+255),w,b
  7242  001FD6  E101 D6CA          	bz	l10433
  7243  001FDA  D02B               	goto	l10537
  7244  001FDC                     l10535:
  7245                           
  7246                           ; BSR set to: 0
  7247  001FDC  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  7248                           
  7249                           ; Switch size 1, requested type "space"
  7250                           ; Number of cases is 16, Range of values is 66 to 116
  7251                           ; switch strategies available:
  7252                           ; Name         Instructions Cycles
  7253                           ; simple_byte           49    25 (average)
  7254                           ;	Chosen strategy is simple_byte
  7255  001FDE  0A42               	xorlw	66	; case 66
  7256  001FE0  E0E8               	bz	l10527
  7257  001FE2  0A01               	xorlw	1	; case 67
  7258  001FE4  E101 D708          	bz	l10463
  7259  001FE8  0A05               	xorlw	5	; case 70
  7260  001FEA  E0A4               	bz	l10497
  7261  001FEC  0A0C               	xorlw	12	; case 74
  7262  001FEE  E101 D6AD          	bz	l10429
  7263  001FF2  0A07               	xorlw	7	; case 77
  7264  001FF4  E101 D6BB          	bz	l10433
  7265  001FF8  0A03               	xorlw	3	; case 78
  7266  001FFA  E101 D6CD          	bz	l10441
  7267  001FFE  0A01               	xorlw	1	; case 79
  7268  002000  E101 D6E4          	bz	l10451
  7269  002004  0A1D               	xorlw	29	; case 82
  7270  002006  E015               	bz	l10537
  7271  002008  0A01               	xorlw	1	; case 83
  7272  00200A  E101 D6D7          	bz	l10447
  7273  00200E  0A07               	xorlw	7	; case 84
  7274  002010  E101 D704          	bz	l10473
  7275  002014  0A02               	xorlw	2	; case 86
  7276  002016  E101 D6AD          	bz	l10435
  7277  00201A  0A0C               	xorlw	12	; case 90
  7278  00201C  E09E               	bz	l10507
  7279  00201E  0A37               	xorlw	55	; case 109
  7280  002020  E101 D6A5          	bz	l10433
  7281  002024  0A1F               	xorlw	31	; case 114
  7282  002026  E005               	bz	l10537
  7283  002028  0A01               	xorlw	1	; case 115
  7284  00202A  E101 D6CA          	bz	l698
  7285  00202E  0A07               	xorlw	7	; case 116
  7286  002030  E1C9               	bnz	l10529
  7287  002032                     l10537:
  7288                           
  7289                           ;main.c: 1441: if (rv) {
  7290  002032  0100               	movlb	0	; () banked
  7291  002034  51A3               	movf	doModeSLCAN@rv& (0+255),w,b
  7292  002036  E007               	bz	l10541
  7293                           
  7294                           ; BSR set to: 0
  7295                           ;main.c: 1443: putsUSART((char *) "\r");
  7296  002038  0E7F               	movlw	high STR_129
  7297  00203A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7298  00203C  0EF3               	movlw	low STR_129
  7299  00203E  6F61               	movwf	?_putsUSART& (0+255),b
  7300  002040  EC89  F027         	call	_putsUSART	;wreg free
  7301                           
  7302                           ;main.c: 1444: }
  7303  002044  D006               	goto	l10543
  7304  002046                     l10541:
  7305                           
  7306                           ; BSR set to: 0
  7307                           ;main.c: 1445: else {
  7308                           ;main.c: 1447: putsUSART((char *) "\a");
  7309  002046  0E7F               	movlw	high STR_130
  7310  002048  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7311  00204A  0EF1               	movlw	low STR_130
  7312  00204C  6F61               	movwf	?_putsUSART& (0+255),b
  7313  00204E  EC89  F027         	call	_putsUSART	;wreg free
  7314  002052                     l10543:
  7315                           
  7316                           ;main.c: 1448: }
  7317                           ;main.c: 1451: memset(cmdbuf, 0, sizeof ( cmdbuf));
  7318  002052  0E01               	movlw	high _cmdbuf
  7319  002054  0100               	movlb	0	; () banked
  7320  002056  6F61               	movwf	(?_memset+1)& (0+255),b
  7321  002058  0E04               	movlw	low _cmdbuf
  7322  00205A  6F60               	movwf	?_memset& (0+255),b
  7323  00205C  6B63               	clrf	(?_memset+3)& (0+255),b
  7324  00205E  6B62               	clrf	(?_memset+2)& (0+255),b
  7325  002060  6B65               	clrf	(?_memset+5)& (0+255),b
  7326  002062  0E50               	movlw	80
  7327  002064  6F64               	movwf	(?_memset+4)& (0+255),b
  7328  002066  ECE6  F029         	call	_memset	;wreg free
  7329                           
  7330                           ; BSR set to: 0
  7331                           ;main.c: 1452: pos = 0;
  7332  00206A  0101               	movlb	1	; () banked
  7333  00206C  6B02               	clrf	_pos& (0+255),b
  7334  00206E                     l10547:
  7335                           
  7336                           ;main.c: 1454: }
  7337                           ;main.c: 1457: (INTCONbits.GIE = 1);
  7338  00206E  8EF2               	bsf	intcon,7,c	;volatile
  7339  002070                     l688:
  7340  002070  0012               	return	
  7341  002072                     __end_of_doModeSLCAN:
  7342                           	opt stack 0
  7343  002072                     PL84:
  7344                           	opt stack 23
  7345  002072  90D8               	bcf	status,0,c
  7346  002074  3799               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  7347  002076  379A               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  7348  002078  379B               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  7349  00207A  379C               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  7350  00207C  0012               	return	
  7351  00207E                     __end_ofPL84:
  7352                           	opt stack 0
  7353                           tblptru	equ	0xFF8
  7354                           tblptrh	equ	0xFF7
  7355                           tblptrl	equ	0xFF6
  7356                           tablat	equ	0xFF5
  7357                           prodh	equ	0xFF4
  7358                           prodl	equ	0xFF3
  7359                           intcon	equ	0xFF2
  7360                           indf0	equ	0xFEF
  7361                           postinc0	equ	0xFEE
  7362                           fsr0h	equ	0xFEA
  7363                           fsr0l	equ	0xFE9
  7364                           wreg	equ	0xFE8
  7365                           indf1	equ	0xFE7
  7366                           postinc1	equ	0xFE6
  7367                           postdec1	equ	0xFE5
  7368                           fsr1h	equ	0xFE2
  7369                           fsr1l	equ	0xFE1
  7370                           indf2	equ	0xFDF
  7371                           postinc2	equ	0xFDE
  7372                           postdec2	equ	0xFDD
  7373                           plusw2	equ	0xFDB
  7374                           fsr2h	equ	0xFDA
  7375                           fsr2l	equ	0xFD9
  7376                           status	equ	0xFD8
  7377                           
  7378 ;; *************** function _hexStringToBytes *****************
  7379 ;; Defined at:
  7380 ;;		line 31 in file "hexutils.c"
  7381 ;; Parameters:    Size  Location     Type
  7382 ;;  buf             2    4[BANK0 ] PTR unsigned char 
  7383 ;;		 -> wrkbuf(80), 
  7384 ;;  size            1    6[BANK0 ] unsigned char 
  7385 ;;  inhex           2    7[BANK0 ] PTR unsigned char 
  7386 ;;		 -> cmdbuf(80), 
  7387 ;; Auto vars:     Size  Location     Type
  7388 ;;  i               2   16[BANK0 ] int 
  7389 ;;  p               2   14[BANK0 ] PTR unsigned char 
  7390 ;;		 -> cmdbuf(80), 
  7391 ;;  len             2   12[BANK0 ] int 
  7392 ;; Return value:  Size  Location     Type
  7393 ;;                  1    wreg      unsigned char 
  7394 ;; Registers used:
  7395 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7396 ;; Tracked objects:
  7397 ;;		On entry : F/0
  7398 ;;		On exit  : F/0
  7399 ;;		Unchanged: 0/0
  7400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7401 ;;      Params:         0       5       0       0       0       0       0
  7402 ;;      Locals:         0       6       0       0       0       0       0
  7403 ;;      Temps:          0       3       0       0       0       0       0
  7404 ;;      Totals:         0      14       0       0       0       0       0
  7405 ;;Total ram usage:       14 bytes
  7406 ;; Hardware stack levels used:    1
  7407 ;; Hardware stack levels required when called:    4
  7408 ;; This function calls:
  7409 ;;		_strlen
  7410 ;;		_nibbleFromChar
  7411 ;; This function is called by:
  7412 ;;		_doModeSLCAN
  7413 ;; This function uses a non-reentrant model
  7414 ;;
  7415                           
  7416                           	psect	text3
  7417  0045C2                     __ptext3:
  7418                           	opt stack 0
  7419  0045C2                     _hexStringToBytes:
  7420                           	opt stack 25
  7421                           
  7422                           ; BSR set to: 0
  7423                           ;hexutils.c: 32: uint8_t *p;
  7424                           ;hexutils.c: 33: int len, i;
  7425                           ;hexutils.c: 35: len = strlen(inhex) / 2;
  7426                           
  7427                           ;incstack = 0
  7428                           ;incstack = 0
  7429  0045C2  C067  F060         	movff	hexStringToBytes@inhex,?_strlen
  7430  0045C6  C068  F061         	movff	hexStringToBytes@inhex+1,?_strlen+1
  7431  0045CA  ECAE  F028         	call	_strlen	;wreg free
  7432  0045CE  90D8               	bcf	status,0,c
  7433  0045D0  3161               	rrcf	(?_strlen+1)& (0+255),w,b
  7434  0045D2  6F6D               	movwf	(hexStringToBytes@len+1)& (0+255),b
  7435  0045D4  3160               	rrcf	?_strlen& (0+255),w,b
  7436  0045D6  6F6C               	movwf	hexStringToBytes@len& (0+255),b
  7437                           
  7438                           ; BSR set to: 0
  7439                           ;hexutils.c: 36: if ( len > size ) return 0;
  7440  0045D8  5166               	movf	hexStringToBytes@size& (0+255),w,b
  7441  0045DA  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7442  0045DC  6B6A               	clrf	(??_hexStringToBytes+1)& (0+255),b
  7443  0045DE  516A               	movf	(??_hexStringToBytes+1)& (0+255),w,b
  7444  0045E0  0A80               	xorlw	128
  7445  0045E2  6F6B               	movwf	(??_hexStringToBytes+2)& (0+255),b
  7446  0045E4  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7447  0045E6  5D69               	subwf	??_hexStringToBytes& (0+255),w,b
  7448  0045E8  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7449  0045EA  0A80               	xorlw	128
  7450  0045EC  596B               	subwfb	(??_hexStringToBytes+2)& (0+255),w,b
  7451  0045EE  E202               	bc	l1514
  7452                           
  7453                           ; BSR set to: 0
  7454  0045F0  0E00               	movlw	0
  7455  0045F2  D033               	goto	l1515
  7456  0045F4                     l1514:
  7457                           
  7458                           ; BSR set to: 0
  7459                           ;hexutils.c: 37: for (i=0, p = (uint8_t *)inhex; i<len; i++) {
  7460  0045F4  6B70               	clrf	hexStringToBytes@i& (0+255),b
  7461  0045F6  6B71               	clrf	(hexStringToBytes@i+1)& (0+255),b
  7462  0045F8  C067  F06E         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  7463  0045FC  C068  F06F         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  7464  004600  D022               	goto	l12003
  7465  004602                     l11997:
  7466                           
  7467                           ; BSR set to: 0
  7468                           ;hexutils.c: 38: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p+1));
  7469  004602  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7470  004604  2564               	addwf	hexStringToBytes@buf& (0+255),w,b
  7471  004606  6ED9               	movwf	fsr2l,c
  7472  004608  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7473  00460A  2165               	addwfc	(hexStringToBytes@buf+1)& (0+255),w,b
  7474  00460C  6EDA               	movwf	fsr2h,c
  7475  00460E  EE10 F001          	lfsr	1,1
  7476  004612  516E               	movf	hexStringToBytes@p& (0+255),w,b
  7477  004614  26E1               	addwf	fsr1l,f,c
  7478  004616  516F               	movf	(hexStringToBytes@p+1)& (0+255),w,b
  7479  004618  22E2               	addwfc	fsr1h,f,c
  7480  00461A  50E7               	movf	indf1,w,c
  7481  00461C  ECEE  F028         	call	_nibbleFromChar
  7482  004620  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7483  004622  C06E  FFE1         	movff	hexStringToBytes@p,fsr1l
  7484  004626  C06F  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  7485  00462A  50E7               	movf	indf1,w,c
  7486  00462C  ECEE  F028         	call	_nibbleFromChar
  7487  004630  6F6A               	movwf	(??_hexStringToBytes+1)& (0+255),b
  7488  004632  396A               	swapf	(??_hexStringToBytes+1)& (0+255),w,b
  7489  004634  0BF0               	andlw	240
  7490  004636  1169               	iorwf	??_hexStringToBytes& (0+255),w,b
  7491  004638  6EDF               	movwf	indf2,c
  7492                           
  7493                           ; BSR set to: 0
  7494                           ;hexutils.c: 39: p += 2;
  7495  00463A  0E02               	movlw	2
  7496  00463C  276E               	addwf	hexStringToBytes@p& (0+255),f,b
  7497  00463E  0E00               	movlw	0
  7498  004640  236F               	addwfc	(hexStringToBytes@p+1)& (0+255),f,b
  7499                           
  7500                           ; BSR set to: 0
  7501  004642  4B70               	infsnz	hexStringToBytes@i& (0+255),f,b
  7502  004644  2B71               	incf	(hexStringToBytes@i+1)& (0+255),f,b
  7503  004646                     l12003:
  7504                           
  7505                           ; BSR set to: 0
  7506  004646  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7507  004648  0A80               	xorlw	128
  7508  00464A  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7509  00464C  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7510  00464E  5D70               	subwf	hexStringToBytes@i& (0+255),w,b
  7511  004650  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7512  004652  0A80               	xorlw	128
  7513  004654  5969               	subwfb	??_hexStringToBytes& (0+255),w,b
  7514  004656  E3D5               	bnc	l11997
  7515                           
  7516                           ; BSR set to: 0
  7517                           ;hexutils.c: 40: }
  7518                           ;hexutils.c: 42: return i;
  7519  004658  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7520  00465A                     l1515:
  7521                           
  7522                           ; BSR set to: 0
  7523  00465A  0012               	return	
  7524  00465C                     __end_of_hexStringToBytes:
  7525                           	opt stack 0
  7526                           tblptru	equ	0xFF8
  7527                           tblptrh	equ	0xFF7
  7528                           tblptrl	equ	0xFF6
  7529                           tablat	equ	0xFF5
  7530                           prodh	equ	0xFF4
  7531                           prodl	equ	0xFF3
  7532                           intcon	equ	0xFF2
  7533                           indf0	equ	0xFEF
  7534                           postinc0	equ	0xFEE
  7535                           fsr0h	equ	0xFEA
  7536                           fsr0l	equ	0xFE9
  7537                           wreg	equ	0xFE8
  7538                           indf1	equ	0xFE7
  7539                           postinc1	equ	0xFE6
  7540                           postdec1	equ	0xFE5
  7541                           fsr1h	equ	0xFE2
  7542                           fsr1l	equ	0xFE1
  7543                           indf2	equ	0xFDF
  7544                           postinc2	equ	0xFDE
  7545                           postdec2	equ	0xFDD
  7546                           plusw2	equ	0xFDB
  7547                           fsr2h	equ	0xFDA
  7548                           fsr2l	equ	0xFD9
  7549                           status	equ	0xFD8
  7550                           
  7551 ;; *************** function _nibbleFromChar *****************
  7552 ;; Defined at:
  7553 ;;		line 16 in file "hexutils.c"
  7554 ;; Parameters:    Size  Location     Type
  7555 ;;  c               1    wreg     unsigned char 
  7556 ;; Auto vars:     Size  Location     Type
  7557 ;;  c               1    0[BANK0 ] unsigned char 
  7558 ;; Return value:  Size  Location     Type
  7559 ;;                  1    wreg      unsigned char 
  7560 ;; Registers used:
  7561 ;;		wreg, status,2, status,0
  7562 ;; Tracked objects:
  7563 ;;		On entry : F/0
  7564 ;;		On exit  : F/0
  7565 ;;		Unchanged: 0/0
  7566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7567 ;;      Params:         0       0       0       0       0       0       0
  7568 ;;      Locals:         0       1       0       0       0       0       0
  7569 ;;      Temps:          0       0       0       0       0       0       0
  7570 ;;      Totals:         0       1       0       0       0       0       0
  7571 ;;Total ram usage:        1 bytes
  7572 ;; Hardware stack levels used:    1
  7573 ;; Hardware stack levels required when called:    3
  7574 ;; This function calls:
  7575 ;;		Nothing
  7576 ;; This function is called by:
  7577 ;;		_hexStringToBytes
  7578 ;; This function uses a non-reentrant model
  7579 ;;
  7580                           
  7581                           	psect	text4
  7582  0051DC                     __ptext4:
  7583                           	opt stack 0
  7584  0051DC                     _nibbleFromChar:
  7585                           	opt stack 25
  7586                           
  7587                           ; BSR set to: 0
  7588                           ;incstack = 0
  7589                           ;incstack = 0
  7590                           ;nibbleFromChar@c stored from wreg
  7591  0051DC  CFE8 F060          	movff	wreg,nibbleFromChar@c
  7592                           
  7593                           ; BSR set to: 0
  7594                           ;hexutils.c: 17: if(c >= '0' && c <= '9') return c - '0';
  7595  0051E0  0E2F               	movlw	47
  7596  0051E2  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7597  0051E4  D006               	goto	l12267
  7598                           
  7599                           ; BSR set to: 0
  7600  0051E6  0E3A               	movlw	58
  7601  0051E8  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7602  0051EA  D003               	goto	l12267
  7603                           
  7604                           ; BSR set to: 0
  7605  0051EC  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7606  0051EE  0FD0               	addlw	208
  7607  0051F0  D013               	goto	l1509
  7608  0051F2                     l12267:
  7609                           
  7610                           ; BSR set to: 0
  7611                           ;hexutils.c: 18: if(c >= 'a' && c <= 'f') return c - 'a' + 10;
  7612  0051F2  0E60               	movlw	96
  7613  0051F4  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7614  0051F6  D006               	goto	l12275
  7615                           
  7616                           ; BSR set to: 0
  7617  0051F8  0E67               	movlw	103
  7618  0051FA  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7619  0051FC  D003               	goto	l12275
  7620                           
  7621                           ; BSR set to: 0
  7622  0051FE  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7623  005200  0FA9               	addlw	169
  7624  005202  D00A               	goto	l1509
  7625  005204                     l12275:
  7626                           
  7627                           ; BSR set to: 0
  7628                           ;hexutils.c: 19: if(c >= 'A' && c <= 'F') return c - 'A' + 10;
  7629  005204  0E40               	movlw	64
  7630  005206  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7631  005208  D006               	goto	l12283
  7632                           
  7633                           ; BSR set to: 0
  7634  00520A  0E47               	movlw	71
  7635  00520C  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7636  00520E  D003               	goto	l12283
  7637                           
  7638                           ; BSR set to: 0
  7639  005210  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7640  005212  0FC9               	addlw	201
  7641  005214  D001               	goto	l1509
  7642  005216                     l12283:
  7643                           
  7644                           ; BSR set to: 0
  7645                           ;hexutils.c: 20: return 255;
  7646  005216  0EFF               	movlw	255
  7647  005218                     l1509:
  7648                           
  7649                           ; BSR set to: 0
  7650  005218  0012               	return	
  7651  00521A                     __end_of_nibbleFromChar:
  7652                           	opt stack 0
  7653                           tblptru	equ	0xFF8
  7654                           tblptrh	equ	0xFF7
  7655                           tblptrl	equ	0xFF6
  7656                           tablat	equ	0xFF5
  7657                           prodh	equ	0xFF4
  7658                           prodl	equ	0xFF3
  7659                           intcon	equ	0xFF2
  7660                           indf0	equ	0xFEF
  7661                           postinc0	equ	0xFEE
  7662                           fsr0h	equ	0xFEA
  7663                           fsr0l	equ	0xFE9
  7664                           wreg	equ	0xFE8
  7665                           indf1	equ	0xFE7
  7666                           postinc1	equ	0xFE6
  7667                           postdec1	equ	0xFE5
  7668                           fsr1h	equ	0xFE2
  7669                           fsr1l	equ	0xFE1
  7670                           indf2	equ	0xFDF
  7671                           postinc2	equ	0xFDE
  7672                           postdec2	equ	0xFDD
  7673                           plusw2	equ	0xFDB
  7674                           fsr2h	equ	0xFDA
  7675                           fsr2l	equ	0xFD9
  7676                           status	equ	0xFD8
  7677                           
  7678 ;; *************** function _receivePrintEventSLCAN *****************
  7679 ;; Defined at:
  7680 ;;		line 1901 in file "main.c"
  7681 ;; Parameters:    Size  Location     Type
  7682 ;;		None
  7683 ;; Auto vars:     Size  Location     Type
  7684 ;;  id              4   38[BANK0 ] unsigned long 
  7685 ;;  i               2   43[BANK0 ] int 
  7686 ;;  dlc             1   42[BANK0 ] unsigned char 
  7687 ;; Return value:  Size  Location     Type
  7688 ;;                  1    wreg      enum E15660
  7689 ;; Registers used:
  7690 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7691 ;; Tracked objects:
  7692 ;;		On entry : F/0
  7693 ;;		On exit  : 0/0
  7694 ;;		Unchanged: 0/0
  7695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7696 ;;      Params:         0       0       0       0       0       0       0
  7697 ;;      Locals:         0       7       0       0       0       0       0
  7698 ;;      Temps:          0       3       0       0       0       0       0
  7699 ;;      Totals:         0      10       0       0       0       0       0
  7700 ;;Total ram usage:       10 bytes
  7701 ;; Hardware stack levels used:    1
  7702 ;; Hardware stack levels required when called:    6
  7703 ;; This function calls:
  7704 ;;		_putsUSART
  7705 ;;		_WriteUSART
  7706 ;;		_strlen
  7707 ;;		_getCANFrame
  7708 ;;		_ultoa
  7709 ;;		_itoa
  7710 ;; This function is called by:
  7711 ;;		_doModeSLCAN
  7712 ;; This function uses a non-reentrant model
  7713 ;;
  7714                           
  7715                           	psect	text5
  7716  002F10                     __ptext5:
  7717                           	opt stack 0
  7718  002F10                     _receivePrintEventSLCAN:
  7719                           	opt stack 23
  7720                           
  7721                           ; BSR set to: 0
  7722                           ;main.c: 1902: int i;
  7723                           ;main.c: 1903: uint8_t dlc;
  7724                           ;main.c: 1904: uint32_t id;
  7725                           ;main.c: 1906: if (getCANFrame(&id, &dlc, vscpData)) {
  7726                           
  7727                           ; BSR set to: 0
  7728                           ;incstack = 0
  7729                           ;incstack = 0
  7730  002F10  0E00               	movlw	high receivePrintEventSLCAN@dlc
  7731  002F12  6F6E               	movwf	(?_getCANFrame+1)& (0+255),b
  7732  002F14  0E8A               	movlw	low receivePrintEventSLCAN@dlc
  7733  002F16  6F6D               	movwf	?_getCANFrame& (0+255),b
  7734  002F18  0E01               	movlw	high _vscpData
  7735  002F1A  0100               	movlb	0	; () banked
  7736  002F1C  6F70               	movwf	(?_getCANFrame+3)& (0+255),b
  7737  002F1E  0EA4               	movlw	low _vscpData
  7738  002F20  6F6F               	movwf	(?_getCANFrame+2)& (0+255),b
  7739  002F22  0E86               	movlw	receivePrintEventSLCAN@id& (0+255)
  7740  002F24  ECFB  F025         	call	_getCANFrame
  7741  002F28  0900               	iorlw	0
  7742  002F2A  E101 D0AD          	bz	l978
  7743                           
  7744                           ; BSR set to: 0
  7745                           ;main.c: 1909: cntRxFrames++;
  7746  002F2E  2BDD               	incf	_cntRxFrames& (0+255),f,b
  7747  002F30  0E00               	movlw	0
  7748  002F32  23DE               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  7749  002F34  23DF               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  7750  002F36  23E0               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  7751                           
  7752                           ;main.c: 1910: cntRxBytes += dlc;
  7753  002F38  518A               	movf	receivePrintEventSLCAN@dlc& (0+255),w,b
  7754  002F3A  27D9               	addwf	_cntRxBytes& (0+255),f,b
  7755  002F3C  0E00               	movlw	0
  7756  002F3E  23DA               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  7757  002F40  23DB               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  7758  002F42  23DC               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  7759  002F44                     l951:
  7760                           
  7761                           ; BSR set to: 0
  7762  002F44  A2AC               	btfss	4012,1,c	;volatile
  7763  002F46  D7FE               	goto	l951
  7764                           
  7765                           ; BSR set to: 0
  7766                           ;main.c: 1913: WriteUSART('T');
  7767  002F48  0E54               	movlw	84
  7768  002F4A  EC56  F02A         	call	_WriteUSART
  7769                           
  7770                           ;main.c: 1915: ultoa(wrkbuf, id, 16);
  7771  002F4E  0E01               	movlw	high _wrkbuf
  7772  002F50  0100               	movlb	0	; () banked
  7773  002F52  6F77               	movwf	(?_ultoa+1)& (0+255),b
  7774  002F54  0E54               	movlw	low _wrkbuf
  7775  002F56  6F76               	movwf	?_ultoa& (0+255),b
  7776  002F58  C086  F078         	movff	receivePrintEventSLCAN@id,?_ultoa+2
  7777  002F5C  C087  F079         	movff	receivePrintEventSLCAN@id+1,?_ultoa+3
  7778  002F60  C088  F07A         	movff	receivePrintEventSLCAN@id+2,?_ultoa+4
  7779  002F64  C089  F07B         	movff	receivePrintEventSLCAN@id+3,?_ultoa+5
  7780  002F68  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  7781  002F6A  0E10               	movlw	16
  7782  002F6C  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  7783  002F6E  EC67  F01E         	call	_ultoa	;wreg free
  7784                           
  7785                           ; BSR set to: 0
  7786                           ;main.c: 1917: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  7787  002F72  6B8B               	clrf	receivePrintEventSLCAN@i& (0+255),b
  7788  002F74  6B8C               	clrf	(receivePrintEventSLCAN@i+1)& (0+255),b
  7789  002F76                     l956:
  7790                           
  7791                           ; BSR set to: 0
  7792  002F76  A2AC               	btfss	4012,1,c	;volatile
  7793  002F78  D7FE               	goto	l956
  7794                           
  7795                           ; BSR set to: 0
  7796                           ;main.c: 1919: WriteUSART('0');
  7797  002F7A  0E30               	movlw	48
  7798  002F7C  EC56  F02A         	call	_WriteUSART
  7799                           
  7800                           ; BSR set to: 0
  7801  002F80  D884               	call	PL86	;call to abstracted procedure
  7802  002F82  B4D8               	btfsc	status,2,c
  7803  002F84  5D8B               	subwf	receivePrintEventSLCAN@i& (0+255),w,b
  7804  002F86  E3F7               	bnc	l956
  7805                           
  7806                           ; BSR set to: 0
  7807                           ;main.c: 1920: }
  7808                           ;main.c: 1921: putsUSART(wrkbuf);
  7809  002F88  0E01               	movlw	high _wrkbuf
  7810  002F8A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7811  002F8C  0E54               	movlw	low _wrkbuf
  7812  002F8E  6F61               	movwf	?_putsUSART& (0+255),b
  7813  002F90  EC89  F027         	call	_putsUSART	;wreg free
  7814                           
  7815                           ;main.c: 1924: itoa(wrkbuf, dlc, 16);
  7816  002F94  0E01               	movlw	high _wrkbuf
  7817  002F96  0100               	movlb	0	; () banked
  7818  002F98  6F71               	movwf	(?_itoa+1)& (0+255),b
  7819  002F9A  0E54               	movlw	low _wrkbuf
  7820  002F9C  6F70               	movwf	?_itoa& (0+255),b
  7821  002F9E  C08A  F072         	movff	receivePrintEventSLCAN@dlc,?_itoa+2
  7822  002FA2  6B73               	clrf	(?_itoa+3)& (0+255),b
  7823  002FA4  6B75               	clrf	(?_itoa+5)& (0+255),b
  7824  002FA6  0E10               	movlw	16
  7825  002FA8  6F74               	movwf	(?_itoa+4)& (0+255),b
  7826  002FAA  EC67  F029         	call	_itoa	;wreg free
  7827  002FAE                     l959:
  7828                           
  7829                           ; BSR set to: 0
  7830  002FAE  A2AC               	btfss	4012,1,c	;volatile
  7831  002FB0  D7FE               	goto	l959
  7832                           
  7833                           ; BSR set to: 0
  7834                           ;main.c: 1926: WriteUSART(wrkbuf[0]);
  7835  002FB2  0101               	movlb	1	; () banked
  7836  002FB4  5154               	movf	_wrkbuf& (0+255),w,b
  7837  002FB6  EC56  F02A         	call	_WriteUSART
  7838                           
  7839                           ;main.c: 1929: for (i = 0; i < dlc; i++) {
  7840  002FBA  0100               	movlb	0	; () banked
  7841  002FBC  6B8B               	clrf	receivePrintEventSLCAN@i& (0+255),b
  7842  002FBE  6B8C               	clrf	(receivePrintEventSLCAN@i+1)& (0+255),b
  7843  002FC0  D02D               	goto	l11955
  7844  002FC2                     l11943:
  7845                           
  7846                           ; BSR set to: 0
  7847                           ;main.c: 1930: itoa(wrkbuf, vscpData[i], 16);
  7848  002FC2  0E01               	movlw	high _wrkbuf
  7849  002FC4  0100               	movlb	0	; () banked
  7850  002FC6  6F71               	movwf	(?_itoa+1)& (0+255),b
  7851  002FC8  0E54               	movlw	low _wrkbuf
  7852  002FCA  6F70               	movwf	?_itoa& (0+255),b
  7853  002FCC  0EA4               	movlw	low _vscpData
  7854  002FCE  258B               	addwf	receivePrintEventSLCAN@i& (0+255),w,b
  7855  002FD0  6ED9               	movwf	fsr2l,c
  7856  002FD2  0E01               	movlw	high _vscpData
  7857  002FD4  218C               	addwfc	(receivePrintEventSLCAN@i+1)& (0+255),w,b
  7858  002FD6  6EDA               	movwf	fsr2h,c
  7859  002FD8  50DF               	movf	indf2,w,c
  7860  002FDA  6F72               	movwf	(?_itoa+2)& (0+255),b
  7861  002FDC  6B73               	clrf	(?_itoa+3)& (0+255),b
  7862  002FDE  6B75               	clrf	(?_itoa+5)& (0+255),b
  7863  002FE0  0E10               	movlw	16
  7864  002FE2  6F74               	movwf	(?_itoa+4)& (0+255),b
  7865  002FE4  EC67  F029         	call	_itoa	;wreg free
  7866                           
  7867                           ; BSR set to: 0
  7868                           ;main.c: 1932: if (2 != strlen(wrkbuf)) {
  7869  002FE8  0E01               	movlw	high _wrkbuf
  7870  002FEA  0100               	movlb	0	; () banked
  7871  002FEC  6F61               	movwf	(?_strlen+1)& (0+255),b
  7872  002FEE  0E54               	movlw	low _wrkbuf
  7873  002FF0  6F60               	movwf	?_strlen& (0+255),b
  7874  002FF2  ECAE  F028         	call	_strlen	;wreg free
  7875  002FF6  5160               	movf	?_strlen& (0+255),w,b
  7876  002FF8  0A02               	xorlw	2
  7877  002FFA  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7878  002FFC  E005               	bz	l11951
  7879  002FFE                     l965:
  7880                           
  7881                           ; BSR set to: 0
  7882  002FFE  A2AC               	btfss	4012,1,c	;volatile
  7883  003000  D7FE               	goto	l965
  7884                           
  7885                           ; BSR set to: 0
  7886                           ;main.c: 1934: WriteUSART('0');
  7887  003002  0E30               	movlw	48
  7888  003004  EC56  F02A         	call	_WriteUSART
  7889  003008                     l11951:
  7890                           
  7891                           ;main.c: 1935: }
  7892                           ;main.c: 1937: putsUSART(wrkbuf);
  7893  003008  0E01               	movlw	high _wrkbuf
  7894  00300A  0100               	movlb	0	; () banked
  7895  00300C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7896  00300E  0E54               	movlw	low _wrkbuf
  7897  003010  6F61               	movwf	?_putsUSART& (0+255),b
  7898  003012  EC89  F027         	call	_putsUSART	;wreg free
  7899  003016  0100               	movlb	0	; () banked
  7900  003018  4B8B               	infsnz	receivePrintEventSLCAN@i& (0+255),f,b
  7901  00301A  2B8C               	incf	(receivePrintEventSLCAN@i+1)& (0+255),f,b
  7902  00301C                     l11955:
  7903                           
  7904                           ; BSR set to: 0
  7905  00301C  518A               	movf	receivePrintEventSLCAN@dlc& (0+255),w,b
  7906  00301E  6F83               	movwf	??_receivePrintEventSLCAN& (0+255),b
  7907  003020  6B84               	clrf	(??_receivePrintEventSLCAN+1)& (0+255),b
  7908  003022  518C               	movf	(receivePrintEventSLCAN@i+1)& (0+255),w,b
  7909  003024  0A80               	xorlw	128
  7910  003026  6F85               	movwf	(??_receivePrintEventSLCAN+2)& (0+255),b
  7911  003028  5183               	movf	??_receivePrintEventSLCAN& (0+255),w,b
  7912  00302A  5D8B               	subwf	receivePrintEventSLCAN@i& (0+255),w,b
  7913  00302C  5184               	movf	(??_receivePrintEventSLCAN+1)& (0+255),w,b
  7914  00302E  0A80               	xorlw	128
  7915  003030  5985               	subwfb	(??_receivePrintEventSLCAN+2)& (0+255),w,b
  7916  003032  E3C7               	bnc	l11943
  7917                           
  7918                           ; BSR set to: 0
  7919                           ;main.c: 1938: }
  7920                           ;main.c: 1941: if (nTimeStamp) {
  7921  003034  51F9               	movf	_nTimeStamp& (0+255),w,b
  7922  003036  E023               	bz	l975
  7923                           
  7924                           ; BSR set to: 0
  7925                           ;main.c: 1942: ultoa(wrkbuf, timer, 16);
  7926  003038  0E01               	movlw	high _wrkbuf
  7927  00303A  0100               	movlb	0	; () banked
  7928  00303C  6F77               	movwf	(?_ultoa+1)& (0+255),b
  7929  00303E  0E54               	movlw	low _wrkbuf
  7930  003040  6F76               	movwf	?_ultoa& (0+255),b
  7931  003042  C0ED  F078         	movff	_timer,?_ultoa+2	;volatile
  7932  003046  C0EE  F079         	movff	_timer+1,?_ultoa+3	;volatile
  7933  00304A  C0EF  F07A         	movff	_timer+2,?_ultoa+4	;volatile
  7934  00304E  C0F0  F07B         	movff	_timer+3,?_ultoa+5	;volatile
  7935  003052  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  7936  003054  0E10               	movlw	16
  7937  003056  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  7938  003058  EC67  F01E         	call	_ultoa	;wreg free
  7939                           
  7940                           ; BSR set to: 0
  7941                           ;main.c: 1944: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  7942  00305C  6B8B               	clrf	receivePrintEventSLCAN@i& (0+255),b
  7943  00305E  6B8C               	clrf	(receivePrintEventSLCAN@i+1)& (0+255),b
  7944  003060                     l972:
  7945                           
  7946                           ; BSR set to: 0
  7947  003060  A2AC               	btfss	4012,1,c	;volatile
  7948  003062  D7FE               	goto	l972
  7949                           
  7950                           ; BSR set to: 0
  7951                           ;main.c: 1946: WriteUSART('0');
  7952  003064  0E30               	movlw	48
  7953  003066  EC56  F02A         	call	_WriteUSART
  7954                           
  7955                           ; BSR set to: 0
  7956  00306A  D80F               	call	PL86	;call to abstracted procedure
  7957  00306C  B4D8               	btfsc	status,2,c
  7958  00306E  5D8B               	subwf	receivePrintEventSLCAN@i& (0+255),w,b
  7959  003070  E3F7               	bnc	l972
  7960                           
  7961                           ; BSR set to: 0
  7962                           ;main.c: 1947: }
  7963                           ;main.c: 1948: putsUSART(wrkbuf);
  7964  003072  0E01               	movlw	high _wrkbuf
  7965  003074  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7966  003076  0E54               	movlw	low _wrkbuf
  7967  003078  6F61               	movwf	?_putsUSART& (0+255),b
  7968  00307A  EC89  F027         	call	_putsUSART	;wreg free
  7969  00307E                     l975:
  7970  00307E  A2AC               	btfss	4012,1,c	;volatile
  7971  003080  D7FE               	goto	l975
  7972                           
  7973                           ;main.c: 1952: WriteUSART(0x0d);
  7974  003082  0E0D               	movlw	13
  7975  003084  EC56  F02A         	call	_WriteUSART
  7976  003088                     l978:
  7977  003088  0012               	return	
  7978  00308A                     __end_of_receivePrintEventSLCAN:
  7979                           	opt stack 0
  7980  00308A                     PL86:
  7981                           	opt stack 23
  7982  00308A  0100               	movlb	0	; () banked
  7983  00308C  4B8B               	infsnz	receivePrintEventSLCAN@i& (0+255),f,b
  7984  00308E  2B8C               	incf	(receivePrintEventSLCAN@i+1)& (0+255),f,b
  7985  003090  518C               	movf	(receivePrintEventSLCAN@i+1)& (0+255),w,b
  7986  003092  0A80               	xorlw	128
  7987  003094  0F80               	addlw	-128
  7988  003096  0CB8               	retlw	184
  7989  003098                     __end_ofPL86:
  7990                           	opt stack 0
  7991                           tblptru	equ	0xFF8
  7992                           tblptrh	equ	0xFF7
  7993                           tblptrl	equ	0xFF6
  7994                           tablat	equ	0xFF5
  7995                           prodh	equ	0xFF4
  7996                           prodl	equ	0xFF3
  7997                           intcon	equ	0xFF2
  7998                           indf0	equ	0xFEF
  7999                           postinc0	equ	0xFEE
  8000                           fsr0h	equ	0xFEA
  8001                           fsr0l	equ	0xFE9
  8002                           wreg	equ	0xFE8
  8003                           indf1	equ	0xFE7
  8004                           postinc1	equ	0xFE6
  8005                           postdec1	equ	0xFE5
  8006                           fsr1h	equ	0xFE2
  8007                           fsr1l	equ	0xFE1
  8008                           indf2	equ	0xFDF
  8009                           postinc2	equ	0xFDE
  8010                           postdec2	equ	0xFDD
  8011                           plusw2	equ	0xFDB
  8012                           fsr2h	equ	0xFDA
  8013                           fsr2l	equ	0xFD9
  8014                           status	equ	0xFD8
  8015                           
  8016 ;; *************** function _ultoa *****************
  8017 ;; Defined at:
  8018 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  8019 ;; Parameters:    Size  Location     Type
  8020 ;;  buf             2   22[BANK0 ] PTR unsigned char 
  8021 ;;		 -> wrkbuf(80), 
  8022 ;;  val             4   24[BANK0 ] unsigned long 
  8023 ;;  base            2   28[BANK0 ] int 
  8024 ;; Auto vars:     Size  Location     Type
  8025 ;;  v               4   30[BANK0 ] unsigned long 
  8026 ;;  c               1   34[BANK0 ] unsigned char 
  8027 ;; Return value:  Size  Location     Type
  8028 ;;                  2   22[BANK0 ] PTR unsigned char 
  8029 ;; Registers used:
  8030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8031 ;; Tracked objects:
  8032 ;;		On entry : F/0
  8033 ;;		On exit  : F/0
  8034 ;;		Unchanged: 0/0
  8035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8036 ;;      Params:         0       8       0       0       0       0       0
  8037 ;;      Locals:         0       5       0       0       0       0       0
  8038 ;;      Temps:          0       0       0       0       0       0       0
  8039 ;;      Totals:         0      13       0       0       0       0       0
  8040 ;;Total ram usage:       13 bytes
  8041 ;; Hardware stack levels used:    1
  8042 ;; Hardware stack levels required when called:    4
  8043 ;; This function calls:
  8044 ;;		___lldiv
  8045 ;;		___llmod
  8046 ;; This function is called by:
  8047 ;;		_receivePrintEventSLCAN
  8048 ;; This function uses a non-reentrant model
  8049 ;;
  8050                           
  8051                           	psect	text6
  8052  003CCE                     __ptext6:
  8053                           	opt stack 0
  8054  003CCE                     _ultoa:
  8055                           	opt stack 24
  8056                           
  8057                           ; BSR set to: 0
  8058                           
  8059                           ;incstack = 0
  8060                           ;incstack = 0
  8061  003CCE  C078  F07E         	movff	ultoa@val,ultoa@v
  8062  003CD2  C079  F07F         	movff	ultoa@val+1,ultoa@v+1
  8063  003CD6  C07A  F080         	movff	ultoa@val+2,ultoa@v+2
  8064  003CDA  C07B  F081         	movff	ultoa@val+3,ultoa@v+3
  8065  003CDE                     l12107:
  8066                           
  8067                           ; BSR set to: 0
  8068  003CDE  C07E  F060         	movff	ultoa@v,?___lldiv
  8069  003CE2  C07F  F061         	movff	ultoa@v+1,?___lldiv+1
  8070  003CE6  C080  F062         	movff	ultoa@v+2,?___lldiv+2
  8071  003CEA  C081  F063         	movff	ultoa@v+3,?___lldiv+3
  8072  003CEE  D858               	call	PL78	;call to abstracted procedure
  8073  003CF0  EC4A  F025         	call	___lldiv	;wreg free
  8074  003CF4  C063  F081         	movff	?___lldiv+3,ultoa@v+3
  8075  003CF8  C062  F080         	movff	?___lldiv+2,ultoa@v+2
  8076  003CFC  C061  F07F         	movff	?___lldiv+1,ultoa@v+1
  8077  003D00  C060  F07E         	movff	?___lldiv,ultoa@v
  8078                           
  8079                           ; BSR set to: 0
  8080  003D04  4B76               	infsnz	ultoa@buf& (0+255),f,b
  8081  003D06  2B77               	incf	(ultoa@buf+1)& (0+255),f,b
  8082                           
  8083                           ; BSR set to: 0
  8084  003D08  5181               	movf	(ultoa@v+3)& (0+255),w,b
  8085  003D0A  117E               	iorwf	ultoa@v& (0+255),w,b
  8086  003D0C  117F               	iorwf	(ultoa@v+1)& (0+255),w,b
  8087  003D0E  1180               	iorwf	(ultoa@v+2)& (0+255),w,b
  8088  003D10  E1E6               	bnz	l12107
  8089                           
  8090                           ; BSR set to: 0
  8091  003D12  C076  FFD9         	movff	ultoa@buf,fsr2l
  8092  003D16  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8093  003D1A  6ADF               	clrf	indf2,c
  8094                           
  8095                           ; BSR set to: 0
  8096  003D1C  0776               	decf	ultoa@buf& (0+255),f,b
  8097  003D1E  A0D8               	btfss	status,0,c
  8098  003D20  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8099  003D22                     l12117:
  8100                           
  8101                           ; BSR set to: 0
  8102  003D22  C078  F06D         	movff	ultoa@val,?___llmod
  8103  003D26  C079  F06E         	movff	ultoa@val+1,?___llmod+1
  8104  003D2A  C07A  F06F         	movff	ultoa@val+2,?___llmod+2
  8105  003D2E  C07B  F070         	movff	ultoa@val+3,?___llmod+3
  8106  003D32  C07C  F071         	movff	ultoa@base,?___llmod+4
  8107  003D36  C07D  F072         	movff	ultoa@base+1,?___llmod+5
  8108  003D3A  0E00               	movlw	0
  8109  003D3C  BF72               	btfsc	(?___llmod+5)& (0+255),7,b
  8110  003D3E  0EFF               	movlw	-1
  8111  003D40  6F73               	movwf	(?___llmod+6)& (0+255),b
  8112  003D42  6F74               	movwf	(?___llmod+7)& (0+255),b
  8113  003D44  ECFE  F026         	call	___llmod	;wreg free
  8114  003D48  516D               	movf	?___llmod& (0+255),w,b
  8115  003D4A  6F82               	movwf	ultoa@c& (0+255),b
  8116                           
  8117                           ; BSR set to: 0
  8118  003D4C  C078  F060         	movff	ultoa@val,?___lldiv
  8119  003D50  C079  F061         	movff	ultoa@val+1,?___lldiv+1
  8120  003D54  C07A  F062         	movff	ultoa@val+2,?___lldiv+2
  8121  003D58  C07B  F063         	movff	ultoa@val+3,?___lldiv+3
  8122  003D5C  D821               	call	PL78	;call to abstracted procedure
  8123  003D5E  EC4A  F025         	call	___lldiv	;wreg free
  8124  003D62  C063  F07B         	movff	?___lldiv+3,ultoa@val+3
  8125  003D66  C062  F07A         	movff	?___lldiv+2,ultoa@val+2
  8126  003D6A  C061  F079         	movff	?___lldiv+1,ultoa@val+1
  8127  003D6E  C060  F078         	movff	?___lldiv,ultoa@val
  8128                           
  8129                           ; BSR set to: 0
  8130  003D72  0E09               	movlw	9
  8131  003D74  6582               	cpfsgt	ultoa@c& (0+255),b
  8132  003D76  D002               	goto	l2314
  8133                           
  8134                           ; BSR set to: 0
  8135  003D78  0E07               	movlw	7
  8136  003D7A  2782               	addwf	ultoa@c& (0+255),f,b
  8137  003D7C                     l2314:
  8138                           
  8139                           ; BSR set to: 0
  8140  003D7C  0E30               	movlw	48
  8141  003D7E  2782               	addwf	ultoa@c& (0+255),f,b
  8142                           
  8143                           ; BSR set to: 0
  8144  003D80  C076  FFD9         	movff	ultoa@buf,fsr2l
  8145  003D84  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8146  003D88  C082  FFDF         	movff	ultoa@c,indf2
  8147                           
  8148                           ; BSR set to: 0
  8149  003D8C  0776               	decf	ultoa@buf& (0+255),f,b
  8150  003D8E  A0D8               	btfss	status,0,c
  8151  003D90  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8152                           
  8153                           ; BSR set to: 0
  8154  003D92  517B               	movf	(ultoa@val+3)& (0+255),w,b
  8155  003D94  1178               	iorwf	ultoa@val& (0+255),w,b
  8156  003D96  1179               	iorwf	(ultoa@val+1)& (0+255),w,b
  8157  003D98  117A               	iorwf	(ultoa@val+2)& (0+255),w,b
  8158  003D9A  B4D8               	btfsc	status,2,c
  8159                           
  8160                           ; BSR set to: 0
  8161  003D9C  0012               	return	
  8162  003D9E  D7C1               	goto	l12117
  8163  003DA0                     __end_of_ultoa:
  8164                           	opt stack 0
  8165  003DA0                     PL78:
  8166                           	opt stack 24
  8167  003DA0  C07C  F064         	movff	ultoa@base,?___lldiv+4
  8168  003DA4  C07D  F065         	movff	ultoa@base+1,?___lldiv+5
  8169  003DA8  0E00               	movlw	0
  8170  003DAA  BF65               	btfsc	(?___lldiv+5)& (0+255),7,b
  8171  003DAC  0EFF               	movlw	-1
  8172  003DAE  6F66               	movwf	(?___lldiv+6)& (0+255),b
  8173  003DB0  6F67               	movwf	(?___lldiv+7)& (0+255),b
  8174  003DB2  0012               	return	
  8175  003DB4                     __end_ofPL78:
  8176                           	opt stack 0
  8177                           tblptru	equ	0xFF8
  8178                           tblptrh	equ	0xFF7
  8179                           tblptrl	equ	0xFF6
  8180                           tablat	equ	0xFF5
  8181                           prodh	equ	0xFF4
  8182                           prodl	equ	0xFF3
  8183                           intcon	equ	0xFF2
  8184                           indf0	equ	0xFEF
  8185                           postinc0	equ	0xFEE
  8186                           fsr0h	equ	0xFEA
  8187                           fsr0l	equ	0xFE9
  8188                           wreg	equ	0xFE8
  8189                           indf1	equ	0xFE7
  8190                           postinc1	equ	0xFE6
  8191                           postdec1	equ	0xFE5
  8192                           fsr1h	equ	0xFE2
  8193                           fsr1l	equ	0xFE1
  8194                           indf2	equ	0xFDF
  8195                           postinc2	equ	0xFDE
  8196                           postdec2	equ	0xFDD
  8197                           plusw2	equ	0xFDB
  8198                           fsr2h	equ	0xFDA
  8199                           fsr2l	equ	0xFD9
  8200                           status	equ	0xFD8
  8201                           
  8202 ;; *************** function _doModeVscp *****************
  8203 ;; Defined at:
  8204 ;;		line 1061 in file "main.c"
  8205 ;; Parameters:    Size  Location     Type
  8206 ;;		None
  8207 ;; Auto vars:     Size  Location     Type
  8208 ;;  c               1   87[BANK0 ] unsigned char 
  8209 ;; Return value:  Size  Location     Type
  8210 ;;		None               void
  8211 ;; Registers used:
  8212 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8213 ;; Tracked objects:
  8214 ;;		On entry : F/0
  8215 ;;		On exit  : E/0
  8216 ;;		Unchanged: 0/0
  8217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8218 ;;      Params:         0       0       0       0       0       0       0
  8219 ;;      Locals:         0       1       0       0       0       0       0
  8220 ;;      Temps:          0       0       0       0       0       0       0
  8221 ;;      Totals:         0       1       0       0       0       0       0
  8222 ;;Total ram usage:        1 bytes
  8223 ;; Hardware stack levels used:    1
  8224 ;; Hardware stack levels required when called:    7
  8225 ;; This function calls:
  8226 ;;		_fifo_read
  8227 ;;		_ECANSetOperationMode
  8228 ;;		_receivePrintEventCANAL
  8229 ;;		_calcCRC
  8230 ;;		_sendVSCPDriverErrorFrame
  8231 ;;		_sendVSCPDriverAck
  8232 ;;		_receiveVSCPModeCanalMsg
  8233 ;;		_sendVSCPDriverNack
  8234 ;;		_receiveVSCPModeMultiCanalMsg
  8235 ;;		_sendVSCPDriverCommandReply
  8236 ;; This function is called by:
  8237 ;;		_main
  8238 ;; This function uses a non-reentrant model
  8239 ;;
  8240                           
  8241                           	psect	text7
  8242  002BBC                     __ptext7:
  8243                           	opt stack 0
  8244  002BBC                     _doModeVscp:
  8245                           	opt stack 23
  8246                           
  8247                           ; BSR set to: 0
  8248                           ;main.c: 1062: uint8_t c;
  8249                           ;main.c: 1065: if (!bSilent) {
  8250                           
  8251                           ; BSR set to: 0
  8252                           ;incstack = 0
  8253                           ;incstack = 0
  8254  002BBC  0101               	movlb	1	; () banked
  8255  002BBE  6701               	tstfsz	_bSilent& (0+255),b
  8256  002BC0  D002               	goto	l10265
  8257                           
  8258                           ; BSR set to: 1
  8259                           ;main.c: 1066: receivePrintEventCANAL();
  8260  002BC2  EC03  F019         	call	_receivePrintEventCANAL	;wreg free
  8261  002BC6                     l10265:
  8262                           
  8263                           ;main.c: 1067: }
  8264                           ;main.c: 1070: (INTCONbits.GIE = 0);
  8265  002BC6  9EF2               	bcf	intcon,7,c	;volatile
  8266                           
  8267                           ;main.c: 1072: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  8268  002BC8  0100               	movlb	0	; () banked
  8269  002BCA  0E00               	movlw	high doModeVscp@c
  8270  002BCC  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  8271  002BCE  0EB7               	movlw	low doModeVscp@c
  8272  002BD0  6F60               	movwf	?_fifo_read& (0+255),b
  8273  002BD2  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  8274  002BD4  0E01               	movlw	1
  8275  002BD6  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  8276  002BD8  0E3E               	movlw	_serialInputFifo& (0+255)
  8277  002BDA  EC80  F020         	call	_fifo_read
  8278  002BDE  0560               	decf	?_fifo_read& (0+255),w,b
  8279  002BE0  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  8280  002BE2  E001 D0B7          	bnz	l10409
  8281                           
  8282                           ; BSR set to: 0
  8283                           ;main.c: 1075: (INTCONbits.GIE = 1);
  8284  002BE6  8EF2               	bsf	intcon,7,c	;volatile
  8285                           
  8286                           ;main.c: 1077: if (0 == stateVscpDriver) {
  8287  002BE8  67FB               	tstfsz	_stateVscpDriver& (0+255),b
  8288  002BEA  D00E               	goto	l10285
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;main.c: 1078: if (bDLE) {
  8292  002BEC  51F5               	movf	_bDLE& (0+255),w,b
  8293  002BEE  E009               	bz	l10281
  8294                           
  8295                           ; BSR set to: 0
  8296                           ;main.c: 1079: bDLE = 0;
  8297  002BF0  6BF5               	clrf	_bDLE& (0+255),b
  8298                           
  8299                           ; BSR set to: 0
  8300                           ;main.c: 1082: if (0x02 == c) {
  8301  002BF2  51B7               	movf	doModeVscp@c& (0+255),w,b
  8302  002BF4  0A02               	xorlw	2
  8303  002BF6  E129               	bnz	l10319
  8304                           
  8305                           ; BSR set to: 0
  8306                           ;main.c: 1083: stateVscpDriver = 1;
  8307  002BF8  0E01               	movlw	1
  8308  002BFA  6FFB               	movwf	_stateVscpDriver& (0+255),b
  8309                           
  8310                           ; BSR set to: 0
  8311                           ;main.c: 1084: pos = 0;
  8312  002BFC  0101               	movlb	1	; () banked
  8313  002BFE  6B02               	clrf	_pos& (0+255),b
  8314  002C00  D024               	goto	l10319
  8315  002C02                     l10281:
  8316                           
  8317                           ; BSR set to: 0
  8318                           ;main.c: 1087: bDLE = 1;
  8319  002C02  0E01               	movlw	1
  8320  002C04  6FF5               	movwf	_bDLE& (0+255),b
  8321  002C06  D0A7               	goto	l638
  8322  002C08                     l10285:
  8323                           
  8324                           ; BSR set to: 0
  8325                           ;main.c: 1091: else if (1 == stateVscpDriver) {
  8326  002C08  05FB               	decf	_stateVscpDriver& (0+255),w,b
  8327  002C0A  E11F               	bnz	l10319
  8328                           
  8329                           ; BSR set to: 0
  8330                           ;main.c: 1093: if (bDLE) {
  8331  002C0C  51F5               	movf	_bDLE& (0+255),w,b
  8332  002C0E  E00F               	bz	l10303
  8333                           
  8334                           ; BSR set to: 0
  8335                           ;main.c: 1095: bDLE = 0;
  8336  002C10  6BF5               	clrf	_bDLE& (0+255),b
  8337                           
  8338                           ; BSR set to: 0
  8339                           ;main.c: 1098: if (0x03 == c) {
  8340  002C12  51B7               	movf	doModeVscp@c& (0+255),w,b
  8341  002C14  0A03               	xorlw	3
  8342  002C16  E103               	bnz	l10295
  8343                           
  8344                           ; BSR set to: 0
  8345                           ;main.c: 1099: stateVscpDriver = 2;
  8346  002C18  0E02               	movlw	2
  8347  002C1A  6FFB               	movwf	_stateVscpDriver& (0+255),b
  8348                           
  8349                           ;main.c: 1100: }
  8350  002C1C  D016               	goto	l10319
  8351  002C1E                     l10295:
  8352                           
  8353                           ; BSR set to: 0
  8354                           ;main.c: 1101: else if (0x10 == c) {
  8355  002C1E  51B7               	movf	doModeVscp@c& (0+255),w,b
  8356  002C20  0A10               	xorlw	16
  8357  002C22  E113               	bnz	l10319
  8358                           
  8359                           ; BSR set to: 0
  8360                           ;main.c: 1103: cmdbuf[ pos++ ] = c;
  8361  002C24  D899               	call	PL18	;call to abstracted procedure
  8362  002C26  C0B7  FFDF         	movff	doModeVscp@c,indf2
  8363                           
  8364                           ; BSR set to: 0
  8365  002C2A  2B02               	incf	_pos& (0+255),f,b
  8366  002C2C  D094               	goto	l638
  8367  002C2E                     l10303:
  8368                           
  8369                           ; BSR set to: 0
  8370                           ;main.c: 1108: else {
  8371                           ;main.c: 1109: if (0x10 == c) {
  8372  002C2E  51B7               	movf	doModeVscp@c& (0+255),w,b
  8373  002C30  0A10               	xorlw	16
  8374  002C32  E0E7               	bz	l10281
  8375                           
  8376                           ; BSR set to: 0
  8377                           ;main.c: 1114: cmdbuf[ pos++ ] = c;
  8378  002C34  D891               	call	PL18	;call to abstracted procedure
  8379  002C36  C0B7  FFDF         	movff	doModeVscp@c,indf2
  8380                           
  8381                           ; BSR set to: 0
  8382  002C3A  2B02               	incf	_pos& (0+255),f,b
  8383                           
  8384                           ; BSR set to: 1
  8385                           ;main.c: 1116: if (pos >= 128u) {
  8386  002C3C  0E7F               	movlw	127
  8387  002C3E  6502               	cpfsgt	_pos& (0+255),b
  8388  002C40  D08A               	goto	l638
  8389                           
  8390                           ; BSR set to: 1
  8391                           ;main.c: 1119: pos = 0;
  8392  002C42  6B02               	clrf	_pos& (0+255),b
  8393                           
  8394                           ;main.c: 1120: stateVscpDriver = 0;
  8395  002C44  0100               	movlb	0	; () banked
  8396  002C46  6BFB               	clrf	_stateVscpDriver& (0+255),b
  8397  002C48  D086               	goto	l638
  8398  002C4A                     l10319:
  8399                           
  8400                           ;main.c: 1124: }
  8401                           ;main.c: 1125: }
  8402                           ;main.c: 1126: }
  8403                           ;main.c: 1131: if (2 == stateVscpDriver) {
  8404  002C4A  0100               	movlb	0	; () banked
  8405  002C4C  51FB               	movf	_stateVscpDriver& (0+255),w,b
  8406  002C4E  0A02               	xorlw	2
  8407  002C50  E001 D080          	bnz	l10409
  8408                           
  8409                           ; BSR set to: 0
  8410                           ;main.c: 1134: stateVscpDriver = 0;
  8411  002C54  6BFB               	clrf	_stateVscpDriver& (0+255),b
  8412                           
  8413                           ; BSR set to: 0
  8414                           ;main.c: 1146: if (calcCRC(cmdbuf, pos)) {
  8415  002C56  0E01               	movlw	high _cmdbuf
  8416  002C58  6F6D               	movwf	(?_calcCRC+1)& (0+255),b
  8417  002C5A  0E04               	movlw	low _cmdbuf
  8418  002C5C  6F6C               	movwf	?_calcCRC& (0+255),b
  8419  002C5E  C102  F06E         	movff	_pos,?_calcCRC+2
  8420  002C62  ECCF  F029         	call	_calcCRC	;wreg free
  8421  002C66  0900               	iorlw	0
  8422  002C68  E003               	bz	l10327
  8423                           
  8424                           ; BSR set to: 0
  8425                           ;main.c: 1147: sendVSCPDriverErrorFrame(1);
  8426  002C6A  0E01               	movlw	1
  8427  002C6C  ECE7  F020         	call	_sendVSCPDriverErrorFrame
  8428  002C70                     l10327:
  8429                           
  8430                           ;main.c: 1148: }
  8431                           ;main.c: 1151: if (0 ==
  8432                           ;main.c: 1152: cmdbuf[ 0 ]) {
  8433  002C70  0101               	movlb	1	; () banked
  8434  002C72  6704               	tstfsz	_cmdbuf& (0+255),b
  8435  002C74  D003               	goto	l10331
  8436  002C76                     l10329:
  8437                           
  8438                           ;main.c: 1153: sendVSCPDriverAck();
  8439  002C76  ECF1  F021         	call	_sendVSCPDriverAck	;wreg free
  8440                           
  8441                           ;main.c: 1154: }
  8442  002C7A  D068               	goto	l10405
  8443  002C7C                     l10331:
  8444                           
  8445                           ; BSR set to: 1
  8446                           ;main.c: 1156: else if (1 ==
  8447                           ;main.c: 1157: cmdbuf[ 0 ]) {
  8448  002C7C  0504               	decf	_cmdbuf& (0+255),w,b
  8449  002C7E  E066               	bz	l10405
  8450                           
  8451                           ; BSR set to: 1
  8452                           ;main.c: 1161: else if (2 ==
  8453                           ;main.c: 1162: cmdbuf[ 0 ]) {
  8454  002C80  5104               	movf	_cmdbuf& (0+255),w,b
  8455  002C82  0A02               	xorlw	2
  8456  002C84  E107               	bnz	l10343
  8457                           
  8458                           ; BSR set to: 1
  8459                           ;main.c: 1163: if (receiveVSCPModeCanalMsg()) {
  8460  002C86  ECDA  F01E         	call	_receiveVSCPModeCanalMsg	;wreg free
  8461  002C8A  0900               	iorlw	0
  8462  002C8C  E1F4               	bnz	l10329
  8463  002C8E                     l10341:
  8464                           
  8465                           ;main.c: 1166: else {
  8466                           ;main.c: 1167: sendVSCPDriverNack();
  8467  002C8E  ECA1  F021         	call	_sendVSCPDriverNack	;wreg free
  8468  002C92  D05C               	goto	l10405
  8469  002C94                     l10343:
  8470                           
  8471                           ; BSR set to: 1
  8472                           ;main.c: 1171: else if (6 ==
  8473                           ;main.c: 1172: cmdbuf[ 0 ]) {
  8474  002C94  5104               	movf	_cmdbuf& (0+255),w,b
  8475  002C96  0A06               	xorlw	6
  8476  002C98  E103               	bnz	l10351
  8477                           
  8478                           ; BSR set to: 1
  8479                           ;main.c: 1173: if (receiveVSCPModeMultiCanalMsg()) {
  8480  002C9A  EC80  F02A         	call	_receiveVSCPModeMultiCanalMsg	;wreg free
  8481  002C9E  D7F5               	goto	L4
  8482  002CA0                     l10351:
  8483                           
  8484                           ; BSR set to: 1
  8485                           ;main.c: 1181: else if (6 ==
  8486                           ;main.c: 1182: cmdbuf[ 0 ]) {
  8487  002CA0  5104               	movf	_cmdbuf& (0+255),w,b
  8488  002CA2  0A06               	xorlw	6
  8489  002CA4  E0F4               	bz	l10341
  8490                           
  8491                           ; BSR set to: 1
  8492                           ;main.c: 1186: else if (3 ==
  8493                           ;main.c: 1187: cmdbuf[ 0 ]) {
  8494  002CA6  5104               	movf	_cmdbuf& (0+255),w,b
  8495  002CA8  0A03               	xorlw	3
  8496  002CAA  E0F1               	bz	l10341
  8497                           
  8498                           ; BSR set to: 1
  8499                           ;main.c: 1191: else if (4 ==
  8500                           ;main.c: 1192: cmdbuf[ 0 ]) {
  8501  002CAC  5104               	movf	_cmdbuf& (0+255),w,b
  8502  002CAE  0A04               	xorlw	4
  8503  002CB0  E0EE               	bz	l10341
  8504                           
  8505                           ; BSR set to: 1
  8506                           ;main.c: 1196: else if (8 ==
  8507                           ;main.c: 1197: cmdbuf[ 0 ]) {
  8508  002CB2  5104               	movf	_cmdbuf& (0+255),w,b
  8509  002CB4  0A08               	xorlw	8
  8510  002CB6  E105               	bnz	l10369
  8511                           
  8512                           ; BSR set to: 1
  8513                           ;main.c: 1198: caps.maxVscpFrames = cmdbuf[ 5 ];
  8514  002CB8  C109  F046         	movff	_cmdbuf+5,_caps
  8515                           
  8516                           ;main.c: 1199: caps.maxCanalFrames = cmdbuf[ 5 + 1 ];
  8517  002CBC  C10A  F047         	movff	_cmdbuf+6,_caps+1
  8518  002CC0  D7E6               	goto	l10341
  8519  002CC2                     l10369:
  8520                           
  8521                           ; BSR set to: 1
  8522                           ;main.c: 1203: else if (255 ==
  8523                           ;main.c: 1204: cmdbuf[ 0 ]) {
  8524  002CC2  2904               	incf	_cmdbuf& (0+255),w,b
  8525  002CC4  E140               	bnz	l10403
  8526                           
  8527                           ; BSR set to: 1
  8528                           ;main.c: 1206: if (cmdbuf[ 5 ] ==
  8529                           ;main.c: 1207: 0) {
  8530  002CC6  6709               	tstfsz	(_cmdbuf+5)& (0+255),b
  8531  002CC8  D006               	goto	l10375
  8532                           
  8533                           ; BSR set to: 1
  8534                           ;main.c: 1208: sendVSCPDriverCommandReply(0, 0);
  8535  002CCA  0E00               	movlw	0
  8536  002CCC  0100               	movlb	0	; () banked
  8537  002CCE  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8538  002CD0  EC48  F01F         	call	_sendVSCPDriverCommandReply
  8539                           
  8540                           ;main.c: 1209: }
  8541  002CD4  D03B               	goto	l10405
  8542  002CD6                     l10375:
  8543                           
  8544                           ; BSR set to: 1
  8545                           ;main.c: 1211: else if (cmdbuf[ 5 ] ==
  8546                           ;main.c: 1212: 1) {
  8547  002CD6  0509               	decf	(_cmdbuf+5)& (0+255),w,b
  8548  002CD8  E109               	bnz	l10381
  8549                           
  8550                           ; BSR set to: 1
  8551                           ;main.c: 1213: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  8552  002CDA  0E00               	movlw	0
  8553  002CDC  EC3E  F02A         	call	_ECANSetOperationMode
  8554                           
  8555                           ; BSR set to: 0
  8556                           ;main.c: 1214: sendVSCPDriverCommandReply(0, 1);
  8557  002CE0  0E01               	movlw	1
  8558  002CE2  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8559  002CE4  0E00               	movlw	0
  8560  002CE6  EC48  F01F         	call	_sendVSCPDriverCommandReply
  8561                           
  8562                           ;main.c: 1215: }
  8563  002CEA  D030               	goto	l10405
  8564  002CEC                     l10381:
  8565                           
  8566                           ; BSR set to: 1
  8567                           ;main.c: 1217: else if (cmdbuf[ 5 ] ==
  8568                           ;main.c: 1218: 2) {
  8569  002CEC  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8570  002CEE  0A02               	xorlw	2
  8571  002CF0  E109               	bnz	l10387
  8572                           
  8573                           ; BSR set to: 1
  8574                           ;main.c: 1219: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  8575  002CF2  0E40               	movlw	64
  8576  002CF4  EC3E  F02A         	call	_ECANSetOperationMode
  8577                           
  8578                           ; BSR set to: 0
  8579                           ;main.c: 1220: sendVSCPDriverCommandReply(0, 2);
  8580  002CF8  0E02               	movlw	2
  8581  002CFA  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8582  002CFC  0E00               	movlw	0
  8583  002CFE  EC48  F01F         	call	_sendVSCPDriverCommandReply
  8584                           
  8585                           ;main.c: 1221: }
  8586  002D02  D024               	goto	l10405
  8587  002D04                     l10387:
  8588                           
  8589                           ; BSR set to: 1
  8590                           ;main.c: 1223: else if (cmdbuf[ 5 ] ==
  8591                           ;main.c: 1224: 3) {
  8592  002D04  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8593  002D06  0A03               	xorlw	3
  8594  002D08  E109               	bnz	l10393
  8595                           
  8596                           ; BSR set to: 1
  8597                           ;main.c: 1225: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  8598  002D0A  0E60               	movlw	96
  8599  002D0C  EC3E  F02A         	call	_ECANSetOperationMode
  8600                           
  8601                           ; BSR set to: 0
  8602                           ;main.c: 1226: sendVSCPDriverCommandReply(0, 3);
  8603  002D10  0E03               	movlw	3
  8604  002D12  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8605  002D14  0E00               	movlw	0
  8606  002D16  EC48  F01F         	call	_sendVSCPDriverCommandReply
  8607                           
  8608                           ;main.c: 1227: }
  8609  002D1A  D018               	goto	l10405
  8610  002D1C                     l10393:
  8611                           
  8612                           ; BSR set to: 1
  8613                           ;main.c: 1229: else if (cmdbuf[ 5 ] ==
  8614                           ;main.c: 1230: 4) {
  8615  002D1C  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8616  002D1E  0A04               	xorlw	4
  8617  002D20  E109               	bnz	l10399
  8618                           
  8619                           ; BSR set to: 1
  8620                           ;main.c: 1231: ECANSetOperationMode(0x20);
  8621  002D22  0E20               	movlw	32
  8622  002D24  EC3E  F02A         	call	_ECANSetOperationMode
  8623                           
  8624                           ; BSR set to: 0
  8625                           ;main.c: 1232: sendVSCPDriverCommandReply(0, 4);
  8626  002D28  0E04               	movlw	4
  8627  002D2A  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8628  002D2C  0E00               	movlw	0
  8629  002D2E  EC48  F01F         	call	_sendVSCPDriverCommandReply
  8630                           
  8631                           ;main.c: 1233: }
  8632  002D32  D00C               	goto	l10405
  8633  002D34                     l10399:
  8634                           
  8635                           ; BSR set to: 1
  8636                           ;main.c: 1235: else if (cmdbuf[ 5 ] ==
  8637                           ;main.c: 1236: 5) {
  8638  002D34  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8639  002D36  0A05               	xorlw	5
  8640  002D38  E109               	bnz	l10405
  8641                           
  8642                           ; BSR set to: 1
  8643                           ;main.c: 1237: sendVSCPDriverCommandReply(0, 0);
  8644  002D3A  0E00               	movlw	0
  8645  002D3C  0100               	movlb	0	; () banked
  8646  002D3E  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8647  002D40  EC48  F01F         	call	_sendVSCPDriverCommandReply
  8648  002D44  D003               	goto	l10405
  8649  002D46                     l10403:
  8650                           
  8651                           ; BSR set to: 1
  8652                           ;main.c: 1241: else {
  8653                           ;main.c: 1243: sendVSCPDriverErrorFrame(2);
  8654  002D46  0E02               	movlw	2
  8655  002D48  ECE7  F020         	call	_sendVSCPDriverErrorFrame
  8656  002D4C                     l10405:
  8657                           
  8658                           ;main.c: 1244: }
  8659                           ;main.c: 1247: pos = 0;
  8660  002D4C  0101               	movlb	1	; () banked
  8661  002D4E  6B02               	clrf	_pos& (0+255),b
  8662                           
  8663                           ; BSR set to: 1
  8664                           ;main.c: 1248: stateVscpDriver = 0;
  8665  002D50  0100               	movlb	0	; () banked
  8666  002D52  6BFB               	clrf	_stateVscpDriver& (0+255),b
  8667  002D54                     l10409:
  8668                           
  8669                           ; BSR set to: 0
  8670                           ;main.c: 1250: }
  8671                           ;main.c: 1252: }
  8672                           ;main.c: 1255: (INTCONbits.GIE = 1);
  8673  002D54  8EF2               	bsf	intcon,7,c	;volatile
  8674  002D56                     l638:
  8675  002D56  0012               	return	
  8676  002D58                     __end_of_doModeVscp:
  8677                           	opt stack 0
  8678  002D58                     PL18:
  8679                           	opt stack 20
  8680  002D58  0101               	movlb	1	; () banked
  8681  002D5A  0E04               	movlw	low _cmdbuf
  8682  002D5C  2502               	addwf	_pos& (0+255),w,b
  8683  002D5E  6ED9               	movwf	fsr2l,c
  8684  002D60  6ADA               	clrf	fsr2h,c
  8685  002D62  0E01               	movlw	high _cmdbuf
  8686  002D64  22DA               	addwfc	fsr2h,f,c
  8687  002D66  0012               	return	
  8688  002D68                     __end_ofPL18:
  8689                           	opt stack 0
  8690                           tblptru	equ	0xFF8
  8691                           tblptrh	equ	0xFF7
  8692                           tblptrl	equ	0xFF6
  8693                           tablat	equ	0xFF5
  8694                           prodh	equ	0xFF4
  8695                           prodl	equ	0xFF3
  8696                           intcon	equ	0xFF2
  8697                           indf0	equ	0xFEF
  8698                           postinc0	equ	0xFEE
  8699                           fsr0h	equ	0xFEA
  8700                           fsr0l	equ	0xFE9
  8701                           wreg	equ	0xFE8
  8702                           indf1	equ	0xFE7
  8703                           postinc1	equ	0xFE6
  8704                           postdec1	equ	0xFE5
  8705                           fsr1h	equ	0xFE2
  8706                           fsr1l	equ	0xFE1
  8707                           indf2	equ	0xFDF
  8708                           postinc2	equ	0xFDE
  8709                           postdec2	equ	0xFDD
  8710                           plusw2	equ	0xFDB
  8711                           fsr2h	equ	0xFDA
  8712                           fsr2l	equ	0xFD9
  8713                           status	equ	0xFD8
  8714                           
  8715 ;; *************** function _sendVSCPDriverCommandReply *****************
  8716 ;; Defined at:
  8717 ;;		line 1637 in file "main.c"
  8718 ;; Parameters:    Size  Location     Type
  8719 ;;  cmdReplyCode    1    wreg     unsigned char 
  8720 ;;  cmdCode         1   15[BANK0 ] unsigned char 
  8721 ;; Auto vars:     Size  Location     Type
  8722 ;;  cmdReplyCode    1   16[BANK0 ] unsigned char 
  8723 ;;  crc             1   17[BANK0 ] unsigned char 
  8724 ;; Return value:  Size  Location     Type
  8725 ;;		None               void
  8726 ;; Registers used:
  8727 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8728 ;; Tracked objects:
  8729 ;;		On entry : F/0
  8730 ;;		On exit  : 0/0
  8731 ;;		Unchanged: 0/0
  8732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8733 ;;      Params:         0       1       0       0       0       0       0
  8734 ;;      Locals:         0       2       0       0       0       0       0
  8735 ;;      Temps:          0       0       0       0       0       0       0
  8736 ;;      Totals:         0       3       0       0       0       0       0
  8737 ;;Total ram usage:        3 bytes
  8738 ;; Hardware stack levels used:    1
  8739 ;; Hardware stack levels required when called:    6
  8740 ;; This function calls:
  8741 ;;		_WriteUSART
  8742 ;;		_sendEscapedUartData
  8743 ;;		_crc8
  8744 ;; This function is called by:
  8745 ;;		_doModeVscp
  8746 ;; This function uses a non-reentrant model
  8747 ;;
  8748                           
  8749                           	psect	text8
  8750  003E90                     __ptext8:
  8751                           	opt stack 0
  8752  003E90                     _sendVSCPDriverCommandReply:
  8753                           	opt stack 23
  8754                           
  8755                           ;incstack = 0
  8756                           ;incstack = 0
  8757                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
  8758  003E90  CFE8 F070          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
  8759                           
  8760                           ; BSR set to: 0
  8761                           ;main.c: 1638: uint8_t crc = 0;
  8762  003E94  6B71               	clrf	sendVSCPDriverCommandReply@crc& (0+255),b
  8763  003E96                     l833:
  8764                           
  8765                           ; BSR set to: 0
  8766  003E96  A2AC               	btfss	4012,1,c	;volatile
  8767  003E98  D7FE               	goto	l833
  8768                           
  8769                           ; BSR set to: 0
  8770                           ;main.c: 1642: WriteUSART(0x10);
  8771  003E9A  0E10               	movlw	16
  8772  003E9C  EC56  F02A         	call	_WriteUSART
  8773  003EA0                     l836:
  8774  003EA0  A2AC               	btfss	4012,1,c	;volatile
  8775  003EA2  D7FE               	goto	l836
  8776                           
  8777                           ;main.c: 1644: WriteUSART(0x02);
  8778  003EA4  0E02               	movlw	2
  8779  003EA6  EC56  F02A         	call	_WriteUSART
  8780  003EAA                     l839:
  8781  003EAA  A2AC               	btfss	4012,1,c	;volatile
  8782  003EAC  D7FE               	goto	l839
  8783                           
  8784                           ;main.c: 1648: WriteUSART(254);
  8785  003EAE  0EFE               	movlw	254
  8786  003EB0  EC56  F02A         	call	_WriteUSART
  8787                           
  8788                           ;main.c: 1649: crc8(&crc, 254);
  8789  003EB4  0100               	movlb	0	; () banked
  8790  003EB6  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8791  003EB8  6F68               	movwf	(?_crc8+1)& (0+255),b
  8792  003EBA  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8793  003EBC  6F67               	movwf	?_crc8& (0+255),b
  8794  003EBE  0EFE               	movlw	254
  8795  003EC0  6F69               	movwf	(?_crc8+2)& (0+255),b
  8796  003EC2  EC83  F029         	call	_crc8	;wreg free
  8797  003EC6                     l842:
  8798                           
  8799                           ; BSR set to: 0
  8800  003EC6  A2AC               	btfss	4012,1,c	;volatile
  8801  003EC8  D7FE               	goto	l842
  8802                           
  8803                           ; BSR set to: 0
  8804                           ;main.c: 1653: WriteUSART(0);
  8805  003ECA  0E00               	movlw	0
  8806  003ECC  EC56  F02A         	call	_WriteUSART
  8807                           
  8808                           ;main.c: 1654: crc8(&crc, 0);
  8809  003ED0  D841               	call	PL88	;call to abstracted procedure
  8810  003ED2  EC83  F029         	call	_crc8	;wreg free
  8811                           
  8812                           ; BSR set to: 0
  8813                           ;main.c: 1657: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  8814  003ED6  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8815  003ED8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  8816  003EDA  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8817  003EDC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  8818  003EDE  0101               	movlb	1	; () banked
  8819  003EE0  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  8820  003EE2  ECD2  F024         	call	_sendEscapedUartData
  8821  003EE6                     l845:
  8822                           
  8823                           ; BSR set to: 0
  8824  003EE6  A2AC               	btfss	4012,1,c	;volatile
  8825  003EE8  D7FE               	goto	l845
  8826                           
  8827                           ; BSR set to: 0
  8828                           ;main.c: 1661: WriteUSART(0);
  8829  003EEA  0E00               	movlw	0
  8830  003EEC  EC56  F02A         	call	_WriteUSART
  8831                           
  8832                           ;main.c: 1662: crc8(&crc, 0);
  8833  003EF0  D831               	call	PL88	;call to abstracted procedure
  8834  003EF2  EC83  F029         	call	_crc8	;wreg free
  8835  003EF6                     l848:
  8836                           
  8837                           ; BSR set to: 0
  8838  003EF6  A2AC               	btfss	4012,1,c	;volatile
  8839  003EF8  D7FE               	goto	l848
  8840                           
  8841                           ; BSR set to: 0
  8842                           ;main.c: 1664: WriteUSART(2);
  8843  003EFA  0E02               	movlw	2
  8844  003EFC  EC56  F02A         	call	_WriteUSART
  8845                           
  8846                           ;main.c: 1665: crc8(&crc, 2);
  8847  003F00  0100               	movlb	0	; () banked
  8848  003F02  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8849  003F04  6F68               	movwf	(?_crc8+1)& (0+255),b
  8850  003F06  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8851  003F08  6F67               	movwf	?_crc8& (0+255),b
  8852  003F0A  0E02               	movlw	2
  8853  003F0C  6F69               	movwf	(?_crc8+2)& (0+255),b
  8854  003F0E  EC83  F029         	call	_crc8	;wreg free
  8855  003F12                     l851:
  8856                           
  8857                           ; BSR set to: 0
  8858  003F12  A2AC               	btfss	4012,1,c	;volatile
  8859  003F14  D7FE               	goto	l851
  8860                           
  8861                           ; BSR set to: 0
  8862                           ;main.c: 1669: sendEscapedUartData(cmdReplyCode, &crc);
  8863  003F16  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8864  003F18  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  8865  003F1A  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8866  003F1C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  8867  003F1E  5170               	movf	sendVSCPDriverCommandReply@cmdReplyCode& (0+255),w,b
  8868  003F20  ECD2  F024         	call	_sendEscapedUartData
  8869  003F24                     l854:
  8870                           
  8871                           ; BSR set to: 0
  8872  003F24  A2AC               	btfss	4012,1,c	;volatile
  8873  003F26  D7FE               	goto	l854
  8874                           
  8875                           ; BSR set to: 0
  8876                           ;main.c: 1673: sendEscapedUartData(cmdCode, &crc);
  8877  003F28  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8878  003F2A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  8879  003F2C  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8880  003F2E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  8881  003F30  516F               	movf	sendVSCPDriverCommandReply@cmdCode& (0+255),w,b
  8882  003F32  ECD2  F024         	call	_sendEscapedUartData
  8883                           
  8884                           ;main.c: 1676: sendEscapedUartData(crc, (0));
  8885  003F36  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  8886  003F38  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  8887  003F3A  5171               	movf	sendVSCPDriverCommandReply@crc& (0+255),w,b
  8888  003F3C  ECD2  F024         	call	_sendEscapedUartData
  8889  003F40                     l857:
  8890                           
  8891                           ; BSR set to: 0
  8892  003F40  A2AC               	btfss	4012,1,c	;volatile
  8893  003F42  D7FE               	goto	l857
  8894                           
  8895                           ; BSR set to: 0
  8896                           ;main.c: 1680: WriteUSART(0x10);
  8897  003F44  0E10               	movlw	16
  8898  003F46  EC56  F02A         	call	_WriteUSART
  8899  003F4A                     l860:
  8900  003F4A  A2AC               	btfss	4012,1,c	;volatile
  8901  003F4C  D7FE               	goto	l860
  8902                           
  8903                           ;main.c: 1682: WriteUSART(0x03);
  8904  003F4E  0E03               	movlw	3
  8905  003F50  EF56  F02A         	goto	_WriteUSART
  8906  003F54                     __end_of_sendVSCPDriverCommandReply:
  8907                           	opt stack 0
  8908  003F54                     PL88:
  8909                           	opt stack 23
  8910  003F54  0100               	movlb	0	; () banked
  8911  003F56  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8912  003F58  6F68               	movwf	(?_crc8+1)& (0+255),b
  8913  003F5A  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8914  003F5C  6F67               	movwf	?_crc8& (0+255),b
  8915  003F5E  6B69               	clrf	(?_crc8+2)& (0+255),b
  8916  003F60  0C00               	retlw	0
  8917  003F62                     __end_ofPL88:
  8918                           	opt stack 0
  8919                           tblptru	equ	0xFF8
  8920                           tblptrh	equ	0xFF7
  8921                           tblptrl	equ	0xFF6
  8922                           tablat	equ	0xFF5
  8923                           prodh	equ	0xFF4
  8924                           prodl	equ	0xFF3
  8925                           intcon	equ	0xFF2
  8926                           indf0	equ	0xFEF
  8927                           postinc0	equ	0xFEE
  8928                           fsr0h	equ	0xFEA
  8929                           fsr0l	equ	0xFE9
  8930                           wreg	equ	0xFE8
  8931                           indf1	equ	0xFE7
  8932                           postinc1	equ	0xFE6
  8933                           postdec1	equ	0xFE5
  8934                           fsr1h	equ	0xFE2
  8935                           fsr1l	equ	0xFE1
  8936                           indf2	equ	0xFDF
  8937                           postinc2	equ	0xFDE
  8938                           postdec2	equ	0xFDD
  8939                           plusw2	equ	0xFDB
  8940                           fsr2h	equ	0xFDA
  8941                           fsr2l	equ	0xFD9
  8942                           status	equ	0xFD8
  8943                           
  8944 ;; *************** function _receiveVSCPModeMultiCanalMsg *****************
  8945 ;; Defined at:
  8946 ;;		line 1982 in file "main.c"
  8947 ;; Parameters:    Size  Location     Type
  8948 ;;		None
  8949 ;; Auto vars:     Size  Location     Type
  8950 ;;		None
  8951 ;; Return value:  Size  Location     Type
  8952 ;;                  1    wreg      enum E15660
  8953 ;; Registers used:
  8954 ;;		None
  8955 ;; Tracked objects:
  8956 ;;		On entry : F/1
  8957 ;;		On exit  : F/1
  8958 ;;		Unchanged: F/0
  8959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8960 ;;      Params:         0       0       0       0       0       0       0
  8961 ;;      Locals:         0       0       0       0       0       0       0
  8962 ;;      Temps:          0       0       0       0       0       0       0
  8963 ;;      Totals:         0       0       0       0       0       0       0
  8964 ;;Total ram usage:        0 bytes
  8965 ;; Hardware stack levels used:    1
  8966 ;; Hardware stack levels required when called:    3
  8967 ;; This function calls:
  8968 ;;		Nothing
  8969 ;; This function is called by:
  8970 ;;		_doModeVscp
  8971 ;; This function uses a non-reentrant model
  8972 ;;
  8973                           
  8974                           	psect	text9
  8975  005500                     __ptext9:
  8976                           	opt stack 0
  8977  005500                     _receiveVSCPModeMultiCanalMsg:
  8978                           	opt stack 26
  8979                           
  8980                           ; BSR set to: 1
  8981                           
  8982                           ;incstack = 0
  8983                           ;incstack = 0
  8984  005500  0012               	return	
  8985  005502                     __end_of_receiveVSCPModeMultiCanalMsg:
  8986                           	opt stack 0
  8987                           tblptru	equ	0xFF8
  8988                           tblptrh	equ	0xFF7
  8989                           tblptrl	equ	0xFF6
  8990                           tablat	equ	0xFF5
  8991                           prodh	equ	0xFF4
  8992                           prodl	equ	0xFF3
  8993                           intcon	equ	0xFF2
  8994                           indf0	equ	0xFEF
  8995                           postinc0	equ	0xFEE
  8996                           fsr0h	equ	0xFEA
  8997                           fsr0l	equ	0xFE9
  8998                           wreg	equ	0xFE8
  8999                           indf1	equ	0xFE7
  9000                           postinc1	equ	0xFE6
  9001                           postdec1	equ	0xFE5
  9002                           fsr1h	equ	0xFE2
  9003                           fsr1l	equ	0xFE1
  9004                           indf2	equ	0xFDF
  9005                           postinc2	equ	0xFDE
  9006                           postdec2	equ	0xFDD
  9007                           plusw2	equ	0xFDB
  9008                           fsr2h	equ	0xFDA
  9009                           fsr2l	equ	0xFD9
  9010                           status	equ	0xFD8
  9011                           
  9012 ;; *************** function _sendVSCPDriverNack *****************
  9013 ;; Defined at:
  9014 ;;		line 1592 in file "main.c"
  9015 ;; Parameters:    Size  Location     Type
  9016 ;;		None
  9017 ;; Auto vars:     Size  Location     Type
  9018 ;;  crc             1   15[BANK0 ] unsigned char 
  9019 ;; Return value:  Size  Location     Type
  9020 ;;		None               void
  9021 ;; Registers used:
  9022 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9023 ;; Tracked objects:
  9024 ;;		On entry : E/0
  9025 ;;		On exit  : 0/0
  9026 ;;		Unchanged: 0/0
  9027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9028 ;;      Params:         0       0       0       0       0       0       0
  9029 ;;      Locals:         0       1       0       0       0       0       0
  9030 ;;      Temps:          0       0       0       0       0       0       0
  9031 ;;      Totals:         0       1       0       0       0       0       0
  9032 ;;Total ram usage:        1 bytes
  9033 ;; Hardware stack levels used:    1
  9034 ;; Hardware stack levels required when called:    6
  9035 ;; This function calls:
  9036 ;;		_WriteUSART
  9037 ;;		_sendEscapedUartData
  9038 ;;		_crc8
  9039 ;; This function is called by:
  9040 ;;		_doModeVscp
  9041 ;; This function uses a non-reentrant model
  9042 ;;
  9043                           
  9044                           	psect	text10
  9045  004342                     __ptext10:
  9046                           	opt stack 0
  9047  004342                     _sendVSCPDriverNack:
  9048                           	opt stack 23
  9049                           
  9050                           ;main.c: 1593: uint8_t crc = 0;
  9051                           
  9052                           ; BSR set to: 1
  9053                           ;incstack = 0
  9054                           ;incstack = 0
  9055  004342  0100               	movlb	0	; () banked
  9056  004344  6B6F               	clrf	sendVSCPDriverNack@crc& (0+255),b
  9057  004346                     l806:
  9058  004346  A2AC               	btfss	4012,1,c	;volatile
  9059  004348  D7FE               	goto	l806
  9060                           
  9061                           ;main.c: 1597: WriteUSART(0x10);
  9062  00434A  0E10               	movlw	16
  9063  00434C  EC56  F02A         	call	_WriteUSART
  9064  004350                     l809:
  9065  004350  A2AC               	btfss	4012,1,c	;volatile
  9066  004352  D7FE               	goto	l809
  9067                           
  9068                           ;main.c: 1599: WriteUSART(0x02);
  9069  004354  0E02               	movlw	2
  9070  004356  EC56  F02A         	call	_WriteUSART
  9071  00435A                     l812:
  9072  00435A  A2AC               	btfss	4012,1,c	;volatile
  9073  00435C  D7FE               	goto	l812
  9074                           
  9075                           ;main.c: 1603: WriteUSART(252);
  9076  00435E  0EFC               	movlw	252
  9077  004360  EC56  F02A         	call	_WriteUSART
  9078                           
  9079                           ;main.c: 1604: crc8(&crc, 252);
  9080  004364  0100               	movlb	0	; () banked
  9081  004366  0E00               	movlw	high sendVSCPDriverNack@crc
  9082  004368  6F68               	movwf	(?_crc8+1)& (0+255),b
  9083  00436A  0E6F               	movlw	low sendVSCPDriverNack@crc
  9084  00436C  6F67               	movwf	?_crc8& (0+255),b
  9085  00436E  0EFC               	movlw	252
  9086  004370  6F69               	movwf	(?_crc8+2)& (0+255),b
  9087  004372  EC83  F029         	call	_crc8	;wreg free
  9088  004376                     l815:
  9089  004376  A2AC               	btfss	4012,1,c	;volatile
  9090  004378  D7FE               	goto	l815
  9091                           
  9092                           ;main.c: 1608: WriteUSART(0);
  9093  00437A  0E00               	movlw	0
  9094  00437C  EC56  F02A         	call	_WriteUSART
  9095                           
  9096                           ;main.c: 1609: crc8(&crc, 0);
  9097  004380  D829               	call	PL50	;call to abstracted procedure
  9098  004382  EC83  F029         	call	_crc8	;wreg free
  9099                           
  9100                           ; BSR set to: 0
  9101                           ;main.c: 1612: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9102  004386  0E00               	movlw	high sendVSCPDriverNack@crc
  9103  004388  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9104  00438A  0E6F               	movlw	low sendVSCPDriverNack@crc
  9105  00438C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9106  00438E  0101               	movlb	1	; () banked
  9107  004390  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  9108  004392  ECD2  F024         	call	_sendEscapedUartData
  9109  004396                     l818:
  9110  004396  A2AC               	btfss	4012,1,c	;volatile
  9111  004398  D7FE               	goto	l818
  9112                           
  9113                           ;main.c: 1616: WriteUSART(0);
  9114  00439A  0E00               	movlw	0
  9115  00439C  EC56  F02A         	call	_WriteUSART
  9116                           
  9117                           ;main.c: 1617: crc8(&crc, 0);
  9118  0043A0  D819               	call	PL50	;call to abstracted procedure
  9119  0043A2  EC83  F029         	call	_crc8	;wreg free
  9120  0043A6                     l821:
  9121  0043A6  A2AC               	btfss	4012,1,c	;volatile
  9122  0043A8  D7FE               	goto	l821
  9123                           
  9124                           ;main.c: 1619: WriteUSART(0);
  9125  0043AA  0E00               	movlw	0
  9126  0043AC  EC56  F02A         	call	_WriteUSART
  9127                           
  9128                           ;main.c: 1620: crc8(&crc, 0);
  9129  0043B0  D811               	call	PL50	;call to abstracted procedure
  9130  0043B2  EC83  F029         	call	_crc8	;wreg free
  9131                           
  9132                           ; BSR set to: 0
  9133                           ;main.c: 1623: sendEscapedUartData(crc, (0));
  9134  0043B6  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9135  0043B8  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9136  0043BA  516F               	movf	sendVSCPDriverNack@crc& (0+255),w,b
  9137  0043BC  ECD2  F024         	call	_sendEscapedUartData
  9138  0043C0                     l824:
  9139  0043C0  A2AC               	btfss	4012,1,c	;volatile
  9140  0043C2  D7FE               	goto	l824
  9141                           
  9142                           ;main.c: 1627: WriteUSART(0x10);
  9143  0043C4  0E10               	movlw	16
  9144  0043C6  EC56  F02A         	call	_WriteUSART
  9145  0043CA                     l827:
  9146  0043CA  A2AC               	btfss	4012,1,c	;volatile
  9147  0043CC  D7FE               	goto	l827
  9148                           
  9149                           ;main.c: 1629: WriteUSART(0x03);
  9150  0043CE  0E03               	movlw	3
  9151  0043D0  EF56  F02A         	goto	_WriteUSART
  9152  0043D4                     __end_of_sendVSCPDriverNack:
  9153                           	opt stack 0
  9154  0043D4                     PL50:
  9155                           	opt stack 23
  9156  0043D4  0100               	movlb	0	; () banked
  9157  0043D6  0E00               	movlw	high sendVSCPDriverNack@crc
  9158  0043D8  6F68               	movwf	(?_crc8+1)& (0+255),b
  9159  0043DA  0E6F               	movlw	low sendVSCPDriverNack@crc
  9160  0043DC  6F67               	movwf	?_crc8& (0+255),b
  9161  0043DE  6B69               	clrf	(?_crc8+2)& (0+255),b
  9162  0043E0  0C00               	retlw	0
  9163  0043E2                     __end_ofPL50:
  9164                           	opt stack 0
  9165                           tblptru	equ	0xFF8
  9166                           tblptrh	equ	0xFF7
  9167                           tblptrl	equ	0xFF6
  9168                           tablat	equ	0xFF5
  9169                           prodh	equ	0xFF4
  9170                           prodl	equ	0xFF3
  9171                           intcon	equ	0xFF2
  9172                           indf0	equ	0xFEF
  9173                           postinc0	equ	0xFEE
  9174                           fsr0h	equ	0xFEA
  9175                           fsr0l	equ	0xFE9
  9176                           wreg	equ	0xFE8
  9177                           indf1	equ	0xFE7
  9178                           postinc1	equ	0xFE6
  9179                           postdec1	equ	0xFE5
  9180                           fsr1h	equ	0xFE2
  9181                           fsr1l	equ	0xFE1
  9182                           indf2	equ	0xFDF
  9183                           postinc2	equ	0xFDE
  9184                           postdec2	equ	0xFDD
  9185                           plusw2	equ	0xFDB
  9186                           fsr2h	equ	0xFDA
  9187                           fsr2l	equ	0xFD9
  9188                           status	equ	0xFD8
  9189                           
  9190 ;; *************** function _receiveVSCPModeCanalMsg *****************
  9191 ;; Defined at:
  9192 ;;		line 1963 in file "main.c"
  9193 ;; Parameters:    Size  Location     Type
  9194 ;;		None
  9195 ;; Auto vars:     Size  Location     Type
  9196 ;;  data            8   74[BANK0 ] unsigned char [8]
  9197 ;;  id              4   82[BANK0 ] unsigned long 
  9198 ;;  dlc             1   86[BANK0 ] unsigned char 
  9199 ;; Return value:  Size  Location     Type
  9200 ;;                  1    wreg      enum E15660
  9201 ;; Registers used:
  9202 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9203 ;; Tracked objects:
  9204 ;;		On entry : F/1
  9205 ;;		On exit  : F/0
  9206 ;;		Unchanged: 0/0
  9207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9208 ;;      Params:         0       0       0       0       0       0       0
  9209 ;;      Locals:         0      13       0       0       0       0       0
  9210 ;;      Temps:          0      20       0       0       0       0       0
  9211 ;;      Totals:         0      33       0       0       0       0       0
  9212 ;;Total ram usage:       33 bytes
  9213 ;; Hardware stack levels used:    1
  9214 ;; Hardware stack levels required when called:    6
  9215 ;; This function calls:
  9216 ;;		_memcpy
  9217 ;;		_sendCANFrame
  9218 ;; This function is called by:
  9219 ;;		_doModeVscp
  9220 ;; This function uses a non-reentrant model
  9221 ;;
  9222                           
  9223                           	psect	text11
  9224  003DB4                     __ptext11:
  9225                           	opt stack 0
  9226  003DB4                     _receiveVSCPModeCanalMsg:
  9227                           	opt stack 23
  9228                           
  9229                           ; BSR set to: 1
  9230                           ;main.c: 1964: uint32_t id;
  9231                           ;main.c: 1965: uint8_t dlc;
  9232                           ;main.c: 1966: uint8_t data[8];
  9233                           ;main.c: 1968: id = ((uint32_t) cmdbuf[5] << 26) |
  9234                           ;main.c: 1969: ((uint32_t) cmdbuf[5 + 1] << 16) |
  9235                           ;main.c: 1970: ((uint32_t) cmdbuf[5 + 2] << 8) |
  9236                           ;main.c: 1971: cmdbuf[5 + 3];
  9237                           
  9238                           ;incstack = 0
  9239                           ;incstack = 0
  9240  003DB4  C10B  F096         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
  9241  003DB8  0100               	movlb	0	; () banked
  9242  003DBA  6B97               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9243  003DBC  6B98               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
  9244  003DBE  6B99               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
  9245  003DC0  C098  F099         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
  9246  003DC4  C097  F098         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
  9247  003DC8  C096  F097         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
  9248  003DCC  6B96               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
  9249  003DCE  C10A  F09A         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
  9250  003DD2  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9251  003DD4  6B9C               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
  9252  003DD6  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
  9253  003DD8  C09B  F09D         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
  9254  003DDC  C09A  F09C         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
  9255  003DE0  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9256  003DE2  6B9A               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
  9257  003DE4  C109  F09E         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
  9258  003DE8  6B9F               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
  9259  003DEA  6BA0               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
  9260  003DEC  6BA1               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
  9261  003DEE  0E1A               	movlw	26
  9262  003DF0                     u15195:
  9263  003DF0  90D8               	bcf	status,0,c
  9264  003DF2  379E               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
  9265  003DF4  379F               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
  9266  003DF6  37A0               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
  9267  003DF8  37A1               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
  9268  003DFA  2EE8               	decfsz	wreg,f,c
  9269  003DFC  D7F9               	goto	u15195
  9270  003DFE  519A               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
  9271  003E00  119E               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
  9272  003E02  6FA2               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
  9273  003E04  519B               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
  9274  003E06  119F               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
  9275  003E08  6FA3               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
  9276  003E0A  519C               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
  9277  003E0C  11A0               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
  9278  003E0E  6FA4               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
  9279  003E10  519D               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
  9280  003E12  11A1               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
  9281  003E14  6FA5               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
  9282  003E16  5196               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
  9283  003E18  11A2               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
  9284  003E1A  6FA6               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
  9285  003E1C  5197               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
  9286  003E1E  11A3               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
  9287  003E20  6FA7               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
  9288  003E22  5198               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
  9289  003E24  11A4               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
  9290  003E26  6FA8               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
  9291  003E28  5199               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
  9292  003E2A  11A5               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
  9293  003E2C  6FA9               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
  9294  003E2E  0101               	movlb	1	; () banked
  9295  003E30  510C               	movf	(_cmdbuf+8)& (0+255),w,b
  9296  003E32  0100               	movlb	0	; () banked
  9297  003E34  11A6               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
  9298  003E36  6FB2               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
  9299  003E38  51A7               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
  9300  003E3A  6FB3               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
  9301  003E3C  51A8               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
  9302  003E3E  6FB4               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
  9303  003E40  51A9               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
  9304  003E42  6FB5               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
  9305                           
  9306                           ;main.c: 1972: dlc = cmdbuf[4] - 4;
  9307  003E44  0101               	movlb	1	; () banked
  9308  003E46  5108               	movf	(_cmdbuf+4)& (0+255),w,b
  9309  003E48  0FFC               	addlw	252
  9310  003E4A  0100               	movlb	0	; () banked
  9311  003E4C  6FB6               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9312                           
  9313                           ; BSR set to: 0
  9314                           ;main.c: 1973: memcpy(data, cmdbuf + 5 + 4, dlc);
  9315  003E4E  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9316  003E50  6F61               	movwf	(?_memcpy+1)& (0+255),b
  9317  003E52  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9318  003E54  6F60               	movwf	?_memcpy& (0+255),b
  9319  003E56  0E0D               	movlw	low (_cmdbuf+9)
  9320  003E58  6F96               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
  9321  003E5A  0E01               	movlw	high (_cmdbuf+9)
  9322  003E5C  6F97               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9323  003E5E  C096  F062         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
  9324  003E62  C097  F063         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
  9325  003E66  C0B6  F064         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
  9326  003E6A  6B65               	clrf	(?_memcpy+5)& (0+255),b
  9327  003E6C  EC8D  F028         	call	_memcpy	;wreg free
  9328                           
  9329                           ; BSR set to: 0
  9330                           ;main.c: 1975: return sendCANFrame(id, dlc, data);
  9331  003E70  C0B2  F08F         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
  9332  003E74  C0B3  F090         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
  9333  003E78  C0B4  F091         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
  9334  003E7C  C0B5  F092         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
  9335  003E80  C0B6  F093         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
  9336  003E84  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9337  003E86  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  9338  003E88  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9339  003E8A  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  9340  003E8C  EF4B  F029         	goto	_sendCANFrame	;wreg free
  9341  003E90                     __end_of_receiveVSCPModeCanalMsg:
  9342                           	opt stack 0
  9343                           tblptru	equ	0xFF8
  9344                           tblptrh	equ	0xFF7
  9345                           tblptrl	equ	0xFF6
  9346                           tablat	equ	0xFF5
  9347                           prodh	equ	0xFF4
  9348                           prodl	equ	0xFF3
  9349                           intcon	equ	0xFF2
  9350                           indf0	equ	0xFEF
  9351                           postinc0	equ	0xFEE
  9352                           fsr0h	equ	0xFEA
  9353                           fsr0l	equ	0xFE9
  9354                           wreg	equ	0xFE8
  9355                           indf1	equ	0xFE7
  9356                           postinc1	equ	0xFE6
  9357                           postdec1	equ	0xFE5
  9358                           fsr1h	equ	0xFE2
  9359                           fsr1l	equ	0xFE1
  9360                           indf2	equ	0xFDF
  9361                           postinc2	equ	0xFDE
  9362                           postdec2	equ	0xFDD
  9363                           plusw2	equ	0xFDB
  9364                           fsr2h	equ	0xFDA
  9365                           fsr2l	equ	0xFD9
  9366                           status	equ	0xFD8
  9367                           
  9368 ;; *************** function _memcpy *****************
  9369 ;; Defined at:
  9370 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
  9371 ;; Parameters:    Size  Location     Type
  9372 ;;  d1              2    0[BANK0 ] PTR void 
  9373 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9374 ;;  s1              2    2[BANK0 ] PTR const void 
  9375 ;;		 -> vscpData(8), cmdbuf(80), 
  9376 ;;  n               2    4[BANK0 ] unsigned int 
  9377 ;; Auto vars:     Size  Location     Type
  9378 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  9379 ;;		 -> vscpData(8), cmdbuf(80), 
  9380 ;;  d               2    6[BANK0 ] PTR unsigned char 
  9381 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9382 ;; Return value:  Size  Location     Type
  9383 ;;                  2    0[BANK0 ] PTR void 
  9384 ;; Registers used:
  9385 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9386 ;; Tracked objects:
  9387 ;;		On entry : F/0
  9388 ;;		On exit  : F/0
  9389 ;;		Unchanged: 0/0
  9390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9391 ;;      Params:         0       6       0       0       0       0       0
  9392 ;;      Locals:         0       4       0       0       0       0       0
  9393 ;;      Temps:          0       0       0       0       0       0       0
  9394 ;;      Totals:         0      10       0       0       0       0       0
  9395 ;;Total ram usage:       10 bytes
  9396 ;; Hardware stack levels used:    1
  9397 ;; Hardware stack levels required when called:    3
  9398 ;; This function calls:
  9399 ;;		Nothing
  9400 ;; This function is called by:
  9401 ;;		_doModeSLCAN
  9402 ;;		_receiveVSCPModeCanalMsg
  9403 ;; This function uses a non-reentrant model
  9404 ;;
  9405                           
  9406                           	psect	text12
  9407  00511A                     __ptext12:
  9408                           	opt stack 0
  9409  00511A                     _memcpy:
  9410                           	opt stack 26
  9411                           
  9412                           ; BSR set to: 0
  9413                           
  9414                           ; BSR set to: 0
  9415                           ;incstack = 0
  9416                           ;incstack = 0
  9417  00511A  C062  F068         	movff	memcpy@s1,memcpy@s
  9418  00511E  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
  9419  005122  C060  F066         	movff	memcpy@d1,memcpy@d
  9420  005126  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
  9421  00512A  D00E               	goto	l12017
  9422  00512C                     l12011:
  9423                           
  9424                           ; BSR set to: 0
  9425  00512C  C068  FFD9         	movff	memcpy@s,fsr2l
  9426  005130  C069  FFDA         	movff	memcpy@s+1,fsr2h
  9427  005134  C066  FFE1         	movff	memcpy@d,fsr1l
  9428  005138  C067  FFE2         	movff	memcpy@d+1,fsr1h
  9429  00513C  CFDF FFE7          	movff	indf2,indf1
  9430                           
  9431                           ; BSR set to: 0
  9432  005140  4B68               	infsnz	memcpy@s& (0+255),f,b
  9433  005142  2B69               	incf	(memcpy@s+1)& (0+255),f,b
  9434                           
  9435                           ; BSR set to: 0
  9436  005144  4B66               	infsnz	memcpy@d& (0+255),f,b
  9437  005146  2B67               	incf	(memcpy@d+1)& (0+255),f,b
  9438  005148                     l12017:
  9439                           
  9440                           ; BSR set to: 0
  9441  005148  0764               	decf	memcpy@n& (0+255),f,b
  9442  00514A  A0D8               	btfss	status,0,c
  9443  00514C  0765               	decf	(memcpy@n+1)& (0+255),f,b
  9444  00514E  0100               	movlb	0	; () banked
  9445  005150  2964               	incf	memcpy@n& (0+255),w,b
  9446  005152  B4D8               	btfsc	status,2,c
  9447  005154  2965               	incf	(memcpy@n+1)& (0+255),w,b
  9448  005156  B4D8               	btfsc	status,2,c
  9449                           
  9450                           ; BSR set to: 0
  9451  005158  0012               	return	
  9452  00515A  D7E8               	goto	l12011
  9453  00515C                     __end_of_memcpy:
  9454                           	opt stack 0
  9455                           tblptru	equ	0xFF8
  9456                           tblptrh	equ	0xFF7
  9457                           tblptrl	equ	0xFF6
  9458                           tablat	equ	0xFF5
  9459                           prodh	equ	0xFF4
  9460                           prodl	equ	0xFF3
  9461                           intcon	equ	0xFF2
  9462                           indf0	equ	0xFEF
  9463                           postinc0	equ	0xFEE
  9464                           fsr0h	equ	0xFEA
  9465                           fsr0l	equ	0xFE9
  9466                           wreg	equ	0xFE8
  9467                           indf1	equ	0xFE7
  9468                           postinc1	equ	0xFE6
  9469                           postdec1	equ	0xFE5
  9470                           fsr1h	equ	0xFE2
  9471                           fsr1l	equ	0xFE1
  9472                           indf2	equ	0xFDF
  9473                           postinc2	equ	0xFDE
  9474                           postdec2	equ	0xFDD
  9475                           plusw2	equ	0xFDB
  9476                           fsr2h	equ	0xFDA
  9477                           fsr2l	equ	0xFD9
  9478                           status	equ	0xFD8
  9479                           
  9480 ;; *************** function _sendVSCPDriverAck *****************
  9481 ;; Defined at:
  9482 ;;		line 1548 in file "main.c"
  9483 ;; Parameters:    Size  Location     Type
  9484 ;;		None
  9485 ;; Auto vars:     Size  Location     Type
  9486 ;;  crc             1   15[BANK0 ] unsigned char 
  9487 ;; Return value:  Size  Location     Type
  9488 ;;		None               void
  9489 ;; Registers used:
  9490 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9491 ;; Tracked objects:
  9492 ;;		On entry : E/1
  9493 ;;		On exit  : 0/0
  9494 ;;		Unchanged: 0/0
  9495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9496 ;;      Params:         0       0       0       0       0       0       0
  9497 ;;      Locals:         0       1       0       0       0       0       0
  9498 ;;      Temps:          0       0       0       0       0       0       0
  9499 ;;      Totals:         0       1       0       0       0       0       0
  9500 ;;Total ram usage:        1 bytes
  9501 ;; Hardware stack levels used:    1
  9502 ;; Hardware stack levels required when called:    6
  9503 ;; This function calls:
  9504 ;;		_WriteUSART
  9505 ;;		_sendEscapedUartData
  9506 ;;		_crc8
  9507 ;; This function is called by:
  9508 ;;		_doModeVscp
  9509 ;; This function uses a non-reentrant model
  9510 ;;
  9511                           
  9512                           	psect	text13
  9513  0043E2                     __ptext13:
  9514                           	opt stack 0
  9515  0043E2                     _sendVSCPDriverAck:
  9516                           	opt stack 23
  9517                           
  9518                           ;main.c: 1549: uint8_t crc = 0;
  9519                           
  9520                           ; BSR set to: 0
  9521                           ;incstack = 0
  9522                           ;incstack = 0
  9523  0043E2  0100               	movlb	0	; () banked
  9524  0043E4  6B6F               	clrf	sendVSCPDriverAck@crc& (0+255),b
  9525  0043E6                     l779:
  9526  0043E6  A2AC               	btfss	4012,1,c	;volatile
  9527  0043E8  D7FE               	goto	l779
  9528                           
  9529                           ;main.c: 1553: WriteUSART(0x10);
  9530  0043EA  0E10               	movlw	16
  9531  0043EC  EC56  F02A         	call	_WriteUSART
  9532  0043F0                     l782:
  9533  0043F0  A2AC               	btfss	4012,1,c	;volatile
  9534  0043F2  D7FE               	goto	l782
  9535                           
  9536                           ;main.c: 1555: WriteUSART(0x02);
  9537  0043F4  0E02               	movlw	2
  9538  0043F6  EC56  F02A         	call	_WriteUSART
  9539  0043FA                     l785:
  9540  0043FA  A2AC               	btfss	4012,1,c	;volatile
  9541  0043FC  D7FE               	goto	l785
  9542                           
  9543                           ;main.c: 1559: WriteUSART(251);
  9544  0043FE  0EFB               	movlw	251
  9545  004400  EC56  F02A         	call	_WriteUSART
  9546                           
  9547                           ;main.c: 1560: crc8(&crc, 251);
  9548  004404  0100               	movlb	0	; () banked
  9549  004406  0E00               	movlw	high sendVSCPDriverAck@crc
  9550  004408  6F68               	movwf	(?_crc8+1)& (0+255),b
  9551  00440A  0E6F               	movlw	low sendVSCPDriverAck@crc
  9552  00440C  6F67               	movwf	?_crc8& (0+255),b
  9553  00440E  0EFB               	movlw	251
  9554  004410  6F69               	movwf	(?_crc8+2)& (0+255),b
  9555  004412  EC83  F029         	call	_crc8	;wreg free
  9556  004416                     l788:
  9557  004416  A2AC               	btfss	4012,1,c	;volatile
  9558  004418  D7FE               	goto	l788
  9559                           
  9560                           ;main.c: 1564: WriteUSART(0);
  9561  00441A  0E00               	movlw	0
  9562  00441C  EC56  F02A         	call	_WriteUSART
  9563                           
  9564                           ;main.c: 1565: crc8(&crc, 0);
  9565  004420  D829               	call	PL46	;call to abstracted procedure
  9566  004422  EC83  F029         	call	_crc8	;wreg free
  9567                           
  9568                           ; BSR set to: 0
  9569                           ;main.c: 1568: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9570  004426  0E00               	movlw	high sendVSCPDriverAck@crc
  9571  004428  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9572  00442A  0E6F               	movlw	low sendVSCPDriverAck@crc
  9573  00442C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9574  00442E  0101               	movlb	1	; () banked
  9575  004430  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  9576  004432  ECD2  F024         	call	_sendEscapedUartData
  9577  004436                     l791:
  9578  004436  A2AC               	btfss	4012,1,c	;volatile
  9579  004438  D7FE               	goto	l791
  9580                           
  9581                           ;main.c: 1572: WriteUSART(0);
  9582  00443A  0E00               	movlw	0
  9583  00443C  EC56  F02A         	call	_WriteUSART
  9584                           
  9585                           ;main.c: 1573: crc8(&crc, 0);
  9586  004440  D819               	call	PL46	;call to abstracted procedure
  9587  004442  EC83  F029         	call	_crc8	;wreg free
  9588  004446                     l794:
  9589  004446  A2AC               	btfss	4012,1,c	;volatile
  9590  004448  D7FE               	goto	l794
  9591                           
  9592                           ;main.c: 1575: WriteUSART(0);
  9593  00444A  0E00               	movlw	0
  9594  00444C  EC56  F02A         	call	_WriteUSART
  9595                           
  9596                           ;main.c: 1576: crc8(&crc, 0);
  9597  004450  D811               	call	PL46	;call to abstracted procedure
  9598  004452  EC83  F029         	call	_crc8	;wreg free
  9599                           
  9600                           ; BSR set to: 0
  9601                           ;main.c: 1579: sendEscapedUartData(crc, (0));
  9602  004456  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9603  004458  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9604  00445A  516F               	movf	sendVSCPDriverAck@crc& (0+255),w,b
  9605  00445C  ECD2  F024         	call	_sendEscapedUartData
  9606  004460                     l797:
  9607  004460  A2AC               	btfss	4012,1,c	;volatile
  9608  004462  D7FE               	goto	l797
  9609                           
  9610                           ;main.c: 1583: WriteUSART(0x10);
  9611  004464  0E10               	movlw	16
  9612  004466  EC56  F02A         	call	_WriteUSART
  9613  00446A                     l800:
  9614  00446A  A2AC               	btfss	4012,1,c	;volatile
  9615  00446C  D7FE               	goto	l800
  9616                           
  9617                           ;main.c: 1585: WriteUSART(0x03);
  9618  00446E  0E03               	movlw	3
  9619  004470  EF56  F02A         	goto	_WriteUSART
  9620  004474                     __end_of_sendVSCPDriverAck:
  9621                           	opt stack 0
  9622  004474                     PL46:
  9623                           	opt stack 23
  9624  004474  0100               	movlb	0	; () banked
  9625  004476  0E00               	movlw	high sendVSCPDriverAck@crc
  9626  004478  6F68               	movwf	(?_crc8+1)& (0+255),b
  9627  00447A  0E6F               	movlw	low sendVSCPDriverAck@crc
  9628  00447C  6F67               	movwf	?_crc8& (0+255),b
  9629  00447E  6B69               	clrf	(?_crc8+2)& (0+255),b
  9630  004480  0C00               	retlw	0
  9631  004482                     __end_ofPL46:
  9632                           	opt stack 0
  9633                           tblptru	equ	0xFF8
  9634                           tblptrh	equ	0xFF7
  9635                           tblptrl	equ	0xFF6
  9636                           tablat	equ	0xFF5
  9637                           prodh	equ	0xFF4
  9638                           prodl	equ	0xFF3
  9639                           intcon	equ	0xFF2
  9640                           indf0	equ	0xFEF
  9641                           postinc0	equ	0xFEE
  9642                           fsr0h	equ	0xFEA
  9643                           fsr0l	equ	0xFE9
  9644                           wreg	equ	0xFE8
  9645                           indf1	equ	0xFE7
  9646                           postinc1	equ	0xFE6
  9647                           postdec1	equ	0xFE5
  9648                           fsr1h	equ	0xFE2
  9649                           fsr1l	equ	0xFE1
  9650                           indf2	equ	0xFDF
  9651                           postinc2	equ	0xFDE
  9652                           postdec2	equ	0xFDD
  9653                           plusw2	equ	0xFDB
  9654                           fsr2h	equ	0xFDA
  9655                           fsr2l	equ	0xFD9
  9656                           status	equ	0xFD8
  9657                           
  9658 ;; *************** function _sendVSCPDriverErrorFrame *****************
  9659 ;; Defined at:
  9660 ;;		line 1500 in file "main.c"
  9661 ;; Parameters:    Size  Location     Type
  9662 ;;  errorcode       1    wreg     unsigned char 
  9663 ;; Auto vars:     Size  Location     Type
  9664 ;;  errorcode       1   15[BANK0 ] unsigned char 
  9665 ;;  crc             1   16[BANK0 ] unsigned char 
  9666 ;; Return value:  Size  Location     Type
  9667 ;;		None               void
  9668 ;; Registers used:
  9669 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9670 ;; Tracked objects:
  9671 ;;		On entry : E/0
  9672 ;;		On exit  : 0/0
  9673 ;;		Unchanged: 0/0
  9674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9675 ;;      Params:         0       0       0       0       0       0       0
  9676 ;;      Locals:         0       2       0       0       0       0       0
  9677 ;;      Temps:          0       0       0       0       0       0       0
  9678 ;;      Totals:         0       2       0       0       0       0       0
  9679 ;;Total ram usage:        2 bytes
  9680 ;; Hardware stack levels used:    1
  9681 ;; Hardware stack levels required when called:    6
  9682 ;; This function calls:
  9683 ;;		_WriteUSART
  9684 ;;		_sendEscapedUartData
  9685 ;;		_crc8
  9686 ;; This function is called by:
  9687 ;;		_doModeVscp
  9688 ;; This function uses a non-reentrant model
  9689 ;;
  9690                           
  9691                           	psect	text14
  9692  0041CE                     __ptext14:
  9693                           	opt stack 0
  9694  0041CE                     _sendVSCPDriverErrorFrame:
  9695                           	opt stack 23
  9696                           
  9697                           ;incstack = 0
  9698                           ;incstack = 0
  9699                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
  9700  0041CE  CFE8 F06F          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
  9701                           
  9702                           ;main.c: 1501: uint8_t crc = 0;
  9703  0041D2  0100               	movlb	0	; () banked
  9704  0041D4  6B70               	clrf	sendVSCPDriverErrorFrame@crc& (0+255),b
  9705  0041D6                     l752:
  9706  0041D6  A2AC               	btfss	4012,1,c	;volatile
  9707  0041D8  D7FE               	goto	l752
  9708                           
  9709                           ;main.c: 1505: WriteUSART(0x10);
  9710  0041DA  0E10               	movlw	16
  9711  0041DC  EC56  F02A         	call	_WriteUSART
  9712  0041E0                     l755:
  9713  0041E0  A2AC               	btfss	4012,1,c	;volatile
  9714  0041E2  D7FE               	goto	l755
  9715                           
  9716                           ;main.c: 1507: WriteUSART(0x02);
  9717  0041E4  0E02               	movlw	2
  9718  0041E6  EC56  F02A         	call	_WriteUSART
  9719  0041EA                     l758:
  9720  0041EA  A2AC               	btfss	4012,1,c	;volatile
  9721  0041EC  D7FE               	goto	l758
  9722                           
  9723                           ;main.c: 1511: WriteUSART(253);
  9724  0041EE  0EFD               	movlw	253
  9725  0041F0  EC56  F02A         	call	_WriteUSART
  9726                           
  9727                           ;main.c: 1512: crc8(&crc, 253);
  9728  0041F4  0100               	movlb	0	; () banked
  9729  0041F6  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9730  0041F8  6F68               	movwf	(?_crc8+1)& (0+255),b
  9731  0041FA  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9732  0041FC  6F67               	movwf	?_crc8& (0+255),b
  9733  0041FE  0EFD               	movlw	253
  9734  004200  6F69               	movwf	(?_crc8+2)& (0+255),b
  9735  004202  EC83  F029         	call	_crc8	;wreg free
  9736  004206                     l761:
  9737  004206  A2AC               	btfss	4012,1,c	;volatile
  9738  004208  D7FE               	goto	l761
  9739                           
  9740                           ;main.c: 1516: WriteUSART(0);
  9741  00420A  0E00               	movlw	0
  9742  00420C  EC56  F02A         	call	_WriteUSART
  9743                           
  9744                           ;main.c: 1517: crc8(&crc, 0);
  9745  004210  D836               	call	PL98	;call to abstracted procedure
  9746  004212  EC83  F029         	call	_crc8	;wreg free
  9747                           
  9748                           ; BSR set to: 0
  9749                           ;main.c: 1520: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9750  004216  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9751  004218  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9752  00421A  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9753  00421C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9754  00421E  0101               	movlb	1	; () banked
  9755  004220  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  9756  004222  ECD2  F024         	call	_sendEscapedUartData
  9757  004226                     l764:
  9758  004226  A2AC               	btfss	4012,1,c	;volatile
  9759  004228  D7FE               	goto	l764
  9760                           
  9761                           ;main.c: 1524: WriteUSART(0);
  9762  00422A  0E00               	movlw	0
  9763  00422C  EC56  F02A         	call	_WriteUSART
  9764                           
  9765                           ;main.c: 1525: crc8(&crc, 0);
  9766  004230  D826               	call	PL98	;call to abstracted procedure
  9767  004232  EC83  F029         	call	_crc8	;wreg free
  9768  004236                     l767:
  9769  004236  A2AC               	btfss	4012,1,c	;volatile
  9770  004238  D7FE               	goto	l767
  9771                           
  9772                           ;main.c: 1527: WriteUSART(1);
  9773  00423A  0E01               	movlw	1
  9774  00423C  EC56  F02A         	call	_WriteUSART
  9775                           
  9776                           ;main.c: 1528: crc8(&crc, 1);
  9777  004240  0100               	movlb	0	; () banked
  9778  004242  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9779  004244  6F68               	movwf	(?_crc8+1)& (0+255),b
  9780  004246  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9781  004248  6F67               	movwf	?_crc8& (0+255),b
  9782  00424A  0E01               	movlw	1
  9783  00424C  6F69               	movwf	(?_crc8+2)& (0+255),b
  9784  00424E  EC83  F029         	call	_crc8	;wreg free
  9785                           
  9786                           ; BSR set to: 0
  9787                           ;main.c: 1531: sendEscapedUartData(errorcode, &crc);
  9788  004252  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9789  004254  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9790  004256  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9791  004258  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9792  00425A  516F               	movf	sendVSCPDriverErrorFrame@errorcode& (0+255),w,b
  9793  00425C  ECD2  F024         	call	_sendEscapedUartData
  9794                           
  9795                           ; BSR set to: 0
  9796                           ;main.c: 1534: sendEscapedUartData(crc, (0));
  9797  004260  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9798  004262  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9799  004264  5170               	movf	sendVSCPDriverErrorFrame@crc& (0+255),w,b
  9800  004266  ECD2  F024         	call	_sendEscapedUartData
  9801  00426A                     l770:
  9802  00426A  A2AC               	btfss	4012,1,c	;volatile
  9803  00426C  D7FE               	goto	l770
  9804                           
  9805                           ;main.c: 1538: WriteUSART(0x10);
  9806  00426E  0E10               	movlw	16
  9807  004270  EC56  F02A         	call	_WriteUSART
  9808  004274                     l773:
  9809  004274  A2AC               	btfss	4012,1,c	;volatile
  9810  004276  D7FE               	goto	l773
  9811                           
  9812                           ;main.c: 1540: WriteUSART(0x03);
  9813  004278  0E03               	movlw	3
  9814  00427A  EF56  F02A         	goto	_WriteUSART
  9815  00427E                     __end_of_sendVSCPDriverErrorFrame:
  9816                           	opt stack 0
  9817  00427E                     PL98:
  9818                           	opt stack 23
  9819  00427E  0100               	movlb	0	; () banked
  9820  004280  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9821  004282  6F68               	movwf	(?_crc8+1)& (0+255),b
  9822  004284  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9823  004286  6F67               	movwf	?_crc8& (0+255),b
  9824  004288  6B69               	clrf	(?_crc8+2)& (0+255),b
  9825  00428A  0C00               	retlw	0
  9826  00428C                     __end_ofPL98:
  9827                           	opt stack 0
  9828                           tblptru	equ	0xFF8
  9829                           tblptrh	equ	0xFF7
  9830                           tblptrl	equ	0xFF6
  9831                           tablat	equ	0xFF5
  9832                           prodh	equ	0xFF4
  9833                           prodl	equ	0xFF3
  9834                           intcon	equ	0xFF2
  9835                           indf0	equ	0xFEF
  9836                           postinc0	equ	0xFEE
  9837                           fsr0h	equ	0xFEA
  9838                           fsr0l	equ	0xFE9
  9839                           wreg	equ	0xFE8
  9840                           indf1	equ	0xFE7
  9841                           postinc1	equ	0xFE6
  9842                           postdec1	equ	0xFE5
  9843                           fsr1h	equ	0xFE2
  9844                           fsr1l	equ	0xFE1
  9845                           indf2	equ	0xFDF
  9846                           postinc2	equ	0xFDE
  9847                           postdec2	equ	0xFDD
  9848                           plusw2	equ	0xFDB
  9849                           fsr2h	equ	0xFDA
  9850                           fsr2l	equ	0xFD9
  9851                           status	equ	0xFD8
  9852                           
  9853 ;; *************** function _calcCRC *****************
  9854 ;; Defined at:
  9855 ;;		line 2190 in file "main.c"
  9856 ;; Parameters:    Size  Location     Type
  9857 ;;  p               2   12[BANK0 ] PTR unsigned char 
  9858 ;;		 -> cmdbuf(80), 
  9859 ;;  len             1   14[BANK0 ] unsigned char 
  9860 ;; Auto vars:     Size  Location     Type
  9861 ;;  crc             1   16[BANK0 ] unsigned char 
  9862 ;;  j               1   15[BANK0 ] unsigned char 
  9863 ;; Return value:  Size  Location     Type
  9864 ;;                  1    wreg      unsigned char 
  9865 ;; Registers used:
  9866 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9867 ;; Tracked objects:
  9868 ;;		On entry : F/0
  9869 ;;		On exit  : F/0
  9870 ;;		Unchanged: 0/0
  9871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9872 ;;      Params:         0       3       0       0       0       0       0
  9873 ;;      Locals:         0       2       0       0       0       0       0
  9874 ;;      Temps:          0       0       0       0       0       0       0
  9875 ;;      Totals:         0       5       0       0       0       0       0
  9876 ;;Total ram usage:        5 bytes
  9877 ;; Hardware stack levels used:    1
  9878 ;; Hardware stack levels required when called:    5
  9879 ;; This function calls:
  9880 ;;		_crc8
  9881 ;; This function is called by:
  9882 ;;		_doModeVscp
  9883 ;; This function uses a non-reentrant model
  9884 ;;
  9885                           
  9886                           	psect	text15
  9887  00539E                     __ptext15:
  9888                           	opt stack 0
  9889  00539E                     _calcCRC:
  9890                           	opt stack 24
  9891                           
  9892                           ; BSR set to: 0
  9893                           ;main.c: 2191: uint8_t j;
  9894                           ;main.c: 2192: uint8_t crc = 0;
  9895                           
  9896                           ;incstack = 0
  9897                           ;incstack = 0
  9898  00539E  6B70               	clrf	calcCRC@crc& (0+255),b
  9899                           
  9900                           ;main.c: 2194: for (j = 0; j < len; j++) {
  9901  0053A0  6B6F               	clrf	calcCRC@j& (0+255),b
  9902  0053A2  D00F               	goto	l11777
  9903  0053A4                     l11773:
  9904                           
  9905                           ; BSR set to: 0
  9906                           ;main.c: 2195: crc8(&crc, p[j]);
  9907  0053A4  0E00               	movlw	high calcCRC@crc
  9908  0053A6  6F68               	movwf	(?_crc8+1)& (0+255),b
  9909  0053A8  0E70               	movlw	low calcCRC@crc
  9910  0053AA  6F67               	movwf	?_crc8& (0+255),b
  9911  0053AC  516F               	movf	calcCRC@j& (0+255),w,b
  9912  0053AE  256C               	addwf	calcCRC@p& (0+255),w,b
  9913  0053B0  6ED9               	movwf	fsr2l,c
  9914  0053B2  0E00               	movlw	0
  9915  0053B4  216D               	addwfc	(calcCRC@p+1)& (0+255),w,b
  9916  0053B6  6EDA               	movwf	fsr2h,c
  9917  0053B8  50DF               	movf	indf2,w,c
  9918  0053BA  6F69               	movwf	(?_crc8+2)& (0+255),b
  9919  0053BC  EC83  F029         	call	_crc8	;wreg free
  9920                           
  9921                           ; BSR set to: 0
  9922  0053C0  2B6F               	incf	calcCRC@j& (0+255),f,b
  9923  0053C2                     l11777:
  9924                           
  9925                           ; BSR set to: 0
  9926  0053C2  516E               	movf	calcCRC@len& (0+255),w,b
  9927  0053C4  5D6F               	subwf	calcCRC@j& (0+255),w,b
  9928  0053C6  E3EE               	bnc	l11773
  9929                           
  9930                           ; BSR set to: 0
  9931                           ;main.c: 2196: }
  9932                           ;main.c: 2198: return crc;
  9933  0053C8  5170               	movf	calcCRC@crc& (0+255),w,b
  9934                           
  9935                           ; BSR set to: 0
  9936  0053CA  0012               	return	
  9937  0053CC                     __end_of_calcCRC:
  9938                           	opt stack 0
  9939                           tblptru	equ	0xFF8
  9940                           tblptrh	equ	0xFF7
  9941                           tblptrl	equ	0xFF6
  9942                           tablat	equ	0xFF5
  9943                           prodh	equ	0xFF4
  9944                           prodl	equ	0xFF3
  9945                           intcon	equ	0xFF2
  9946                           indf0	equ	0xFEF
  9947                           postinc0	equ	0xFEE
  9948                           fsr0h	equ	0xFEA
  9949                           fsr0l	equ	0xFE9
  9950                           wreg	equ	0xFE8
  9951                           indf1	equ	0xFE7
  9952                           postinc1	equ	0xFE6
  9953                           postdec1	equ	0xFE5
  9954                           fsr1h	equ	0xFE2
  9955                           fsr1l	equ	0xFE1
  9956                           indf2	equ	0xFDF
  9957                           postinc2	equ	0xFDE
  9958                           postdec2	equ	0xFDD
  9959                           plusw2	equ	0xFDB
  9960                           fsr2h	equ	0xFDA
  9961                           fsr2l	equ	0xFD9
  9962                           status	equ	0xFD8
  9963                           
  9964 ;; *************** function _receivePrintEventCANAL *****************
  9965 ;; Defined at:
  9966 ;;		line 1744 in file "main.c"
  9967 ;; Parameters:    Size  Location     Type
  9968 ;;		None
  9969 ;; Auto vars:     Size  Location     Type
  9970 ;;  crc             1   32[BANK0 ] unsigned char 
  9971 ;;  data            8   18[BANK0 ] unsigned char [8]
  9972 ;;  id              4   27[BANK0 ] unsigned long 
  9973 ;;  dlc             1   31[BANK0 ] unsigned char 
  9974 ;;  i               1   26[BANK0 ] unsigned char 
  9975 ;; Return value:  Size  Location     Type
  9976 ;;                  1    wreg      enum E15660
  9977 ;; Registers used:
  9978 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9979 ;; Tracked objects:
  9980 ;;		On entry : F/1
  9981 ;;		On exit  : 0/0
  9982 ;;		Unchanged: 0/0
  9983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9984 ;;      Params:         0       0       0       0       0       0       0
  9985 ;;      Locals:         0      15       0       0       0       0       0
  9986 ;;      Temps:          0       0       0       0       0       0       0
  9987 ;;      Totals:         0      15       0       0       0       0       0
  9988 ;;Total ram usage:       15 bytes
  9989 ;; Hardware stack levels used:    1
  9990 ;; Hardware stack levels required when called:    6
  9991 ;; This function calls:
  9992 ;;		_WriteUSART
  9993 ;;		_sendEscapedUartData
  9994 ;;		_crc8
  9995 ;;		_getCANFrame
  9996 ;; This function is called by:
  9997 ;;		_doModeVscp
  9998 ;; This function uses a non-reentrant model
  9999 ;;
 10000                           
 10001                           	psect	text16
 10002  003206                     __ptext16:
 10003                           	opt stack 0
 10004  003206                     _receivePrintEventCANAL:
 10005                           	opt stack 23
 10006                           
 10007                           ; BSR set to: 1
 10008                           ;main.c: 1745: uint8_t i;
 10009                           ;main.c: 1746: uint32_t id;
 10010                           ;main.c: 1747: uint8_t dlc;
 10011                           ;main.c: 1748: uint8_t data[8];
 10012                           ;main.c: 1750: if (getCANFrame(&id, &dlc, &data)) {
 10013                           
 10014                           ; BSR set to: 0
 10015                           ;incstack = 0
 10016                           ;incstack = 0
 10017  003206  0100               	movlb	0	; () banked
 10018  003208  0E00               	movlw	high receivePrintEventCANAL@dlc
 10019  00320A  6F6E               	movwf	(?_getCANFrame+1)& (0+255),b
 10020  00320C  0E7F               	movlw	low receivePrintEventCANAL@dlc
 10021  00320E  6F6D               	movwf	?_getCANFrame& (0+255),b
 10022  003210  0E00               	movlw	high receivePrintEventCANAL@data
 10023  003212  6F70               	movwf	(?_getCANFrame+3)& (0+255),b
 10024  003214  0E72               	movlw	low receivePrintEventCANAL@data
 10025  003216  6F6F               	movwf	(?_getCANFrame+2)& (0+255),b
 10026  003218  0E7B               	movlw	receivePrintEventCANAL@id& (0+255)
 10027  00321A  ECFB  F025         	call	_getCANFrame
 10028  00321E  0900               	iorlw	0
 10029  003220  E101 D08F          	bz	l922
 10030                           
 10031                           ; BSR set to: 0
 10032                           ;main.c: 1752: uint8_t crc = 0;
 10033  003224  6B80               	clrf	receivePrintEventCANAL@crc& (0+255),b
 10034                           
 10035                           ; BSR set to: 0
 10036                           ;main.c: 1755: cntRxFrames++;
 10037  003226  2BDD               	incf	_cntRxFrames& (0+255),f,b
 10038  003228  0E00               	movlw	0
 10039  00322A  23DE               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10040  00322C  23DF               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10041  00322E  23E0               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10042                           
 10043                           ;main.c: 1756: cntRxBytes += dlc;
 10044  003230  517F               	movf	receivePrintEventCANAL@dlc& (0+255),w,b
 10045  003232  27D9               	addwf	_cntRxBytes& (0+255),f,b
 10046  003234  0E00               	movlw	0
 10047  003236  23DA               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10048  003238  23DB               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10049  00323A  23DC               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10050  00323C                     l901:
 10051  00323C  A2AC               	btfss	4012,1,c	;volatile
 10052  00323E  D7FE               	goto	l901
 10053                           
 10054                           ;main.c: 1760: WriteUSART(0x10);
 10055  003240  0E10               	movlw	16
 10056  003242  EC56  F02A         	call	_WriteUSART
 10057  003246                     l904:
 10058  003246  A2AC               	btfss	4012,1,c	;volatile
 10059  003248  D7FE               	goto	l904
 10060                           
 10061                           ;main.c: 1762: WriteUSART(0x02);
 10062  00324A  0E02               	movlw	2
 10063  00324C  EC56  F02A         	call	_WriteUSART
 10064  003250                     l907:
 10065  003250  A2AC               	btfss	4012,1,c	;volatile
 10066  003252  D7FE               	goto	l907
 10067                           
 10068                           ;main.c: 1766: WriteUSART(2);
 10069  003254  0E02               	movlw	2
 10070  003256  EC56  F02A         	call	_WriteUSART
 10071                           
 10072                           ;main.c: 1767: crc8(&crc, 2);
 10073  00325A  0100               	movlb	0	; () banked
 10074  00325C  0E00               	movlw	high receivePrintEventCANAL@crc
 10075  00325E  6F68               	movwf	(?_crc8+1)& (0+255),b
 10076  003260  0E80               	movlw	low receivePrintEventCANAL@crc
 10077  003262  6F67               	movwf	?_crc8& (0+255),b
 10078  003264  0E02               	movlw	2
 10079  003266  6F69               	movwf	(?_crc8+2)& (0+255),b
 10080  003268  EC83  F029         	call	_crc8	;wreg free
 10081  00326C                     l910:
 10082  00326C  A2AC               	btfss	4012,1,c	;volatile
 10083  00326E  D7FE               	goto	l910
 10084                           
 10085                           ;main.c: 1771: WriteUSART(0);
 10086  003270  0E00               	movlw	0
 10087  003272  EC56  F02A         	call	_WriteUSART
 10088                           
 10089                           ;main.c: 1772: crc8(&crc, 0);
 10090  003276  0100               	movlb	0	; () banked
 10091  003278  0E00               	movlw	high receivePrintEventCANAL@crc
 10092  00327A  6F68               	movwf	(?_crc8+1)& (0+255),b
 10093  00327C  0E80               	movlw	low receivePrintEventCANAL@crc
 10094  00327E  6F67               	movwf	?_crc8& (0+255),b
 10095  003280  0E00               	movlw	0
 10096  003282  6B69               	clrf	(?_crc8+2)& (0+255),b
 10097  003284  EC83  F029         	call	_crc8	;wreg free
 10098                           
 10099                           ; BSR set to: 0
 10100                           ;main.c: 1775: sendEscapedUartData(sequencyno, &crc);
 10101  003288  0E00               	movlw	high receivePrintEventCANAL@crc
 10102  00328A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10103  00328C  0E80               	movlw	low receivePrintEventCANAL@crc
 10104  00328E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10105  003290  51FA               	movf	_sequencyno& (0+255),w,b
 10106  003292  ECD2  F024         	call	_sendEscapedUartData
 10107                           
 10108                           ; BSR set to: 0
 10109                           ;main.c: 1776: sequencyno++;
 10110  003296  2BFA               	incf	_sequencyno& (0+255),f,b
 10111                           
 10112                           ; BSR set to: 0
 10113                           ;main.c: 1779: sendEscapedUartData(0, &crc);
 10114  003298  0E00               	movlw	high receivePrintEventCANAL@crc
 10115  00329A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10116  00329C  0E80               	movlw	low receivePrintEventCANAL@crc
 10117  00329E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10118  0032A0  0E00               	movlw	0
 10119  0032A2  ECD2  F024         	call	_sendEscapedUartData
 10120                           
 10121                           ; BSR set to: 0
 10122                           ;main.c: 1780: sendEscapedUartData(4 + dlc, &crc);
 10123  0032A6  0E00               	movlw	high receivePrintEventCANAL@crc
 10124  0032A8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10125  0032AA  0E80               	movlw	low receivePrintEventCANAL@crc
 10126  0032AC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10127  0032AE  517F               	movf	receivePrintEventCANAL@dlc& (0+255),w,b
 10128  0032B0  0F04               	addlw	4
 10129  0032B2  ECD2  F024         	call	_sendEscapedUartData
 10130                           
 10131                           ; BSR set to: 0
 10132                           ;main.c: 1786: sendEscapedUartData((id >> 24) & 0xff, &crc);
 10133  0032B6  0E00               	movlw	high receivePrintEventCANAL@crc
 10134  0032B8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10135  0032BA  0E80               	movlw	low receivePrintEventCANAL@crc
 10136  0032BC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10137  0032BE  0100               	movlb	0	; () banked
 10138  0032C0  517E               	movf	(receivePrintEventCANAL@id+3)& (0+255),w,b
 10139  0032C2  ECD2  F024         	call	_sendEscapedUartData
 10140                           
 10141                           ; BSR set to: 0
 10142                           ;main.c: 1787: sendEscapedUartData((id >> 16) & 0xff, &crc);
 10143  0032C6  0E00               	movlw	high receivePrintEventCANAL@crc
 10144  0032C8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10145  0032CA  0E80               	movlw	low receivePrintEventCANAL@crc
 10146  0032CC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10147  0032CE  0100               	movlb	0	; () banked
 10148  0032D0  517D               	movf	(receivePrintEventCANAL@id+2)& (0+255),w,b
 10149  0032D2  ECD2  F024         	call	_sendEscapedUartData
 10150                           
 10151                           ; BSR set to: 0
 10152                           ;main.c: 1788: sendEscapedUartData((id >> 8) & 0xff, &crc);
 10153  0032D6  0E00               	movlw	high receivePrintEventCANAL@crc
 10154  0032D8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10155  0032DA  0E80               	movlw	low receivePrintEventCANAL@crc
 10156  0032DC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10157  0032DE  0100               	movlb	0	; () banked
 10158  0032E0  517C               	movf	(receivePrintEventCANAL@id+1)& (0+255),w,b
 10159  0032E2  ECD2  F024         	call	_sendEscapedUartData
 10160                           
 10161                           ; BSR set to: 0
 10162                           ;main.c: 1789: sendEscapedUartData(id & 0xff, &crc);
 10163  0032E6  0E00               	movlw	high receivePrintEventCANAL@crc
 10164  0032E8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10165  0032EA  0E80               	movlw	low receivePrintEventCANAL@crc
 10166  0032EC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10167  0032EE  517B               	movf	receivePrintEventCANAL@id& (0+255),w,b
 10168  0032F0  ECD2  F024         	call	_sendEscapedUartData
 10169                           
 10170                           ; BSR set to: 0
 10171                           ;main.c: 1792: sendEscapedUartData(dlc, &crc);
 10172  0032F4  0E00               	movlw	high receivePrintEventCANAL@crc
 10173  0032F6  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10174  0032F8  0E80               	movlw	low receivePrintEventCANAL@crc
 10175  0032FA  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10176  0032FC  517F               	movf	receivePrintEventCANAL@dlc& (0+255),w,b
 10177  0032FE  ECD2  F024         	call	_sendEscapedUartData
 10178                           
 10179                           ; BSR set to: 0
 10180                           ;main.c: 1794: for (i = 0; i < dlc; i++) {
 10181  003302  6B7A               	clrf	receivePrintEventCANAL@i& (0+255),b
 10182  003304  D00C               	goto	l11761
 10183  003306                     l11757:
 10184                           
 10185                           ; BSR set to: 0
 10186                           ;main.c: 1795: sendEscapedUartData(data[ i ], &crc);
 10187  003306  0E00               	movlw	high receivePrintEventCANAL@crc
 10188  003308  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10189  00330A  0E80               	movlw	low receivePrintEventCANAL@crc
 10190  00330C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10191  00330E  517A               	movf	receivePrintEventCANAL@i& (0+255),w,b
 10192  003310  0F72               	addlw	low receivePrintEventCANAL@data
 10193  003312  6ED9               	movwf	fsr2l,c
 10194  003314  6ADA               	clrf	fsr2h,c
 10195  003316  50DF               	movf	indf2,w,c
 10196  003318  ECD2  F024         	call	_sendEscapedUartData
 10197                           
 10198                           ; BSR set to: 0
 10199  00331C  2B7A               	incf	receivePrintEventCANAL@i& (0+255),f,b
 10200  00331E                     l11761:
 10201                           
 10202                           ; BSR set to: 0
 10203  00331E  517F               	movf	receivePrintEventCANAL@dlc& (0+255),w,b
 10204  003320  5D7A               	subwf	receivePrintEventCANAL@i& (0+255),w,b
 10205  003322  E3F1               	bnc	l11757
 10206                           
 10207                           ; BSR set to: 0
 10208                           ;main.c: 1796: }
 10209                           ;main.c: 1799: sendEscapedUartData(crc, (0));
 10210  003324  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10211  003326  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10212  003328  5180               	movf	receivePrintEventCANAL@crc& (0+255),w,b
 10213  00332A  ECD2  F024         	call	_sendEscapedUartData
 10214  00332E                     l916:
 10215  00332E  A2AC               	btfss	4012,1,c	;volatile
 10216  003330  D7FE               	goto	l916
 10217                           
 10218                           ;main.c: 1803: WriteUSART(0x10);
 10219  003332  0E10               	movlw	16
 10220  003334  EC56  F02A         	call	_WriteUSART
 10221  003338                     l919:
 10222  003338  A2AC               	btfss	4012,1,c	;volatile
 10223  00333A  D7FE               	goto	l919
 10224                           
 10225                           ;main.c: 1805: WriteUSART(0x03);
 10226  00333C  0E03               	movlw	3
 10227  00333E  EC56  F02A         	call	_WriteUSART
 10228  003342                     l922:
 10229  003342  0012               	return	
 10230  003344                     __end_of_receivePrintEventCANAL:
 10231                           	opt stack 0
 10232                           tblptru	equ	0xFF8
 10233                           tblptrh	equ	0xFF7
 10234                           tblptrl	equ	0xFF6
 10235                           tablat	equ	0xFF5
 10236                           prodh	equ	0xFF4
 10237                           prodl	equ	0xFF3
 10238                           intcon	equ	0xFF2
 10239                           indf0	equ	0xFEF
 10240                           postinc0	equ	0xFEE
 10241                           fsr0h	equ	0xFEA
 10242                           fsr0l	equ	0xFE9
 10243                           wreg	equ	0xFE8
 10244                           indf1	equ	0xFE7
 10245                           postinc1	equ	0xFE6
 10246                           postdec1	equ	0xFE5
 10247                           fsr1h	equ	0xFE2
 10248                           fsr1l	equ	0xFE1
 10249                           indf2	equ	0xFDF
 10250                           postinc2	equ	0xFDE
 10251                           postdec2	equ	0xFDD
 10252                           plusw2	equ	0xFDB
 10253                           fsr2h	equ	0xFDA
 10254                           fsr2l	equ	0xFD9
 10255                           status	equ	0xFD8
 10256                           
 10257 ;; *************** function _sendEscapedUartData *****************
 10258 ;; Defined at:
 10259 ;;		line 1474 in file "main.c"
 10260 ;; Parameters:    Size  Location     Type
 10261 ;;  c               1    wreg     unsigned char 
 10262 ;;  pcrc            2   12[BANK0 ] PTR unsigned char 
 10263 ;;		 -> sendReceiveEventVSCP@crc(1), receivePrintEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNac
      +k@crc(1), 
 10264 ;;		 -> sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 10265 ;; Auto vars:     Size  Location     Type
 10266 ;;  c               1   14[BANK0 ] unsigned char 
 10267 ;; Return value:  Size  Location     Type
 10268 ;;		None               void
 10269 ;; Registers used:
 10270 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10271 ;; Tracked objects:
 10272 ;;		On entry : E/1
 10273 ;;		On exit  : F/0
 10274 ;;		Unchanged: 0/0
 10275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10276 ;;      Params:         0       2       0       0       0       0       0
 10277 ;;      Locals:         0       1       0       0       0       0       0
 10278 ;;      Temps:          0       0       0       0       0       0       0
 10279 ;;      Totals:         0       3       0       0       0       0       0
 10280 ;;Total ram usage:        3 bytes
 10281 ;; Hardware stack levels used:    1
 10282 ;; Hardware stack levels required when called:    5
 10283 ;; This function calls:
 10284 ;;		_WriteUSART
 10285 ;;		_crc8
 10286 ;; This function is called by:
 10287 ;;		_sendVSCPDriverErrorFrame
 10288 ;;		_sendVSCPDriverAck
 10289 ;;		_sendVSCPDriverNack
 10290 ;;		_sendVSCPDriverCommandReply
 10291 ;;		_receivePrintEventCANAL
 10292 ;; This function uses a non-reentrant model
 10293 ;;
 10294                           
 10295                           	psect	text17
 10296  0049A4                     __ptext17:
 10297                           	opt stack 0
 10298  0049A4                     _sendEscapedUartData:
 10299                           	opt stack 23
 10300                           
 10301                           ;incstack = 0
 10302                           ;incstack = 0
 10303                           ;sendEscapedUartData@c stored from wreg
 10304  0049A4  CFE8 F06E          	movff	wreg,sendEscapedUartData@c
 10305                           
 10306                           ;main.c: 1475: if (0x10 == c) {
 10307  0049A8  0100               	movlb	0	; () banked
 10308  0049AA  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 10309  0049AC  0A10               	xorlw	16
 10310  0049AE  E123               	bnz	l745
 10311  0049B0                     l736:
 10312  0049B0  A2AC               	btfss	4012,1,c	;volatile
 10313  0049B2  D7FE               	goto	l736
 10314                           
 10315                           ;main.c: 1478: WriteUSART(0x10);
 10316  0049B4  0E10               	movlw	16
 10317  0049B6  EC56  F02A         	call	_WriteUSART
 10318                           
 10319                           ;main.c: 1479: if ((0) != pcrc) crc8(pcrc, 0x10);
 10320  0049BA  0100               	movlb	0	; () banked
 10321  0049BC  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 10322  0049BE  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 10323  0049C0  E008               	bz	l740
 10324                           
 10325                           ; BSR set to: 0
 10326  0049C2  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 10327  0049C6  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 10328  0049CA  0E10               	movlw	16
 10329  0049CC  6F69               	movwf	(?_crc8+2)& (0+255),b
 10330  0049CE  EC83  F029         	call	_crc8	;wreg free
 10331  0049D2                     l740:
 10332  0049D2  A2AC               	btfss	4012,1,c	;volatile
 10333  0049D4  D7FE               	goto	l740
 10334                           
 10335                           ;main.c: 1482: WriteUSART(0x10);
 10336  0049D6  0E10               	movlw	16
 10337  0049D8  EC56  F02A         	call	_WriteUSART
 10338                           
 10339                           ;main.c: 1483: if ((0) != pcrc) crc8(pcrc, 0x10);
 10340  0049DC  0100               	movlb	0	; () banked
 10341  0049DE  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 10342  0049E0  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 10343  0049E2  E01B               	bz	l749
 10344                           
 10345                           ; BSR set to: 0
 10346  0049E4  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 10347  0049E8  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 10348  0049EC  0E10               	movlw	16
 10349  0049EE  6F69               	movwf	(?_crc8+2)& (0+255),b
 10350  0049F0  EC83  F029         	call	_crc8	;wreg free
 10351  0049F4  D012               	goto	l749
 10352  0049F6                     l745:
 10353  0049F6  A2AC               	btfss	4012,1,c	;volatile
 10354  0049F8  D7FE               	goto	l745
 10355                           
 10356                           ;main.c: 1489: WriteUSART(c);
 10357  0049FA  0100               	movlb	0	; () banked
 10358  0049FC  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 10359  0049FE  EC56  F02A         	call	_WriteUSART
 10360                           
 10361                           ;main.c: 1490: if ((0) != pcrc) crc8(pcrc, c);
 10362  004A02  0100               	movlb	0	; () banked
 10363  004A04  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 10364  004A06  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 10365  004A08  E008               	bz	l749
 10366                           
 10367                           ; BSR set to: 0
 10368  004A0A  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 10369  004A0E  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 10370  004A12  C06E  F069         	movff	sendEscapedUartData@c,?_crc8+2
 10371  004A16  EC83  F029         	call	_crc8	;wreg free
 10372  004A1A                     l749:
 10373                           
 10374                           ; BSR set to: 0
 10375  004A1A  0012               	return	
 10376  004A1C                     __end_of_sendEscapedUartData:
 10377                           	opt stack 0
 10378                           tblptru	equ	0xFF8
 10379                           tblptrh	equ	0xFF7
 10380                           tblptrl	equ	0xFF6
 10381                           tablat	equ	0xFF5
 10382                           prodh	equ	0xFF4
 10383                           prodl	equ	0xFF3
 10384                           intcon	equ	0xFF2
 10385                           indf0	equ	0xFEF
 10386                           postinc0	equ	0xFEE
 10387                           fsr0h	equ	0xFEA
 10388                           fsr0l	equ	0xFE9
 10389                           wreg	equ	0xFE8
 10390                           indf1	equ	0xFE7
 10391                           postinc1	equ	0xFE6
 10392                           postdec1	equ	0xFE5
 10393                           fsr1h	equ	0xFE2
 10394                           fsr1l	equ	0xFE1
 10395                           indf2	equ	0xFDF
 10396                           postinc2	equ	0xFDE
 10397                           postdec2	equ	0xFDD
 10398                           plusw2	equ	0xFDB
 10399                           fsr2h	equ	0xFDA
 10400                           fsr2l	equ	0xFD9
 10401                           status	equ	0xFD8
 10402                           
 10403 ;; *************** function _crc8 *****************
 10404 ;; Defined at:
 10405 ;;		line 47 in file "crc8.c"
 10406 ;; Parameters:    Size  Location     Type
 10407 ;;  crc             2    7[BANK0 ] PTR unsigned char 
 10408 ;;		 -> calcCRC@crc(1), sendReceiveEventVSCP@crc(1), receivePrintEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), 
 10409 ;;		 -> sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 10410 ;;  m               1    9[BANK0 ] unsigned char 
 10411 ;; Auto vars:     Size  Location     Type
 10412 ;;		None
 10413 ;; Return value:  Size  Location     Type
 10414 ;;		None               void
 10415 ;; Registers used:
 10416 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10417 ;; Tracked objects:
 10418 ;;		On entry : F/0
 10419 ;;		On exit  : F/0
 10420 ;;		Unchanged: 0/0
 10421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10422 ;;      Params:         0       3       0       0       0       0       0
 10423 ;;      Locals:         0       0       0       0       0       0       0
 10424 ;;      Temps:          0       2       0       0       0       0       0
 10425 ;;      Totals:         0       5       0       0       0       0       0
 10426 ;;Total ram usage:        5 bytes
 10427 ;; Hardware stack levels used:    1
 10428 ;; Hardware stack levels required when called:    4
 10429 ;; This function calls:
 10430 ;;		_init_crc8
 10431 ;; This function is called by:
 10432 ;;		_sendEscapedUartData
 10433 ;;		_sendVSCPDriverErrorFrame
 10434 ;;		_sendVSCPDriverAck
 10435 ;;		_sendVSCPDriverNack
 10436 ;;		_sendVSCPDriverCommandReply
 10437 ;;		_receivePrintEventCANAL
 10438 ;;		_calcCRC
 10439 ;; This function uses a non-reentrant model
 10440 ;;
 10441                           
 10442                           	psect	text18
 10443  005306                     __ptext18:
 10444                           	opt stack 0
 10445  005306                     _crc8:
 10446                           	opt stack 24
 10447                           
 10448                           ; BSR set to: 0
 10449                           ;crc8.c: 48: if ( !made_table ) {
 10450                           
 10451                           ; BSR set to: 0
 10452                           ;incstack = 0
 10453                           ;incstack = 0
 10454  005306  502E               	movf	_made_table+1,w,c
 10455  005308  102D               	iorwf	_made_table,w,c
 10456  00530A  B4D8               	btfsc	status,2,c
 10457                           
 10458                           ; BSR set to: 0
 10459                           ;crc8.c: 49: init_crc8();
 10460  00530C  EC34  F026         	call	_init_crc8	;wreg free
 10461                           
 10462                           ; BSR set to: 0
 10463                           ;crc8.c: 50: }
 10464                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 10465  005310  C067  FFD9         	movff	crc8@crc,fsr2l
 10466  005314  C068  FFDA         	movff	crc8@crc+1,fsr2h
 10467  005318  50DF               	movf	indf2,w,c
 10468  00531A  1969               	xorwf	crc8@m& (0+255),w,b
 10469  00531C  6F6A               	movwf	??_crc8& (0+255),b
 10470  00531E  6B6B               	clrf	(??_crc8+1)& (0+255),b
 10471  005320  0E00               	movlw	low _crc8_table
 10472  005322  0100               	movlb	0	; () banked
 10473  005324  256A               	addwf	??_crc8& (0+255),w,b
 10474  005326  6ED9               	movwf	fsr2l,c
 10475  005328  0E03               	movlw	high _crc8_table
 10476  00532A  216B               	addwfc	(??_crc8+1)& (0+255),w,b
 10477  00532C  6EDA               	movwf	fsr2h,c
 10478  00532E  C067  FFE1         	movff	crc8@crc,fsr1l
 10479  005332  C068  FFE2         	movff	crc8@crc+1,fsr1h
 10480  005336  CFDF FFE7          	movff	indf2,indf1
 10481                           
 10482                           ; BSR set to: 0
 10483  00533A  0012               	return	
 10484  00533C                     __end_of_crc8:
 10485                           	opt stack 0
 10486                           tblptru	equ	0xFF8
 10487                           tblptrh	equ	0xFF7
 10488                           tblptrl	equ	0xFF6
 10489                           tablat	equ	0xFF5
 10490                           prodh	equ	0xFF4
 10491                           prodl	equ	0xFF3
 10492                           intcon	equ	0xFF2
 10493                           indf0	equ	0xFEF
 10494                           postinc0	equ	0xFEE
 10495                           fsr0h	equ	0xFEA
 10496                           fsr0l	equ	0xFE9
 10497                           wreg	equ	0xFE8
 10498                           indf1	equ	0xFE7
 10499                           postinc1	equ	0xFE6
 10500                           postdec1	equ	0xFE5
 10501                           fsr1h	equ	0xFE2
 10502                           fsr1l	equ	0xFE1
 10503                           indf2	equ	0xFDF
 10504                           postinc2	equ	0xFDE
 10505                           postdec2	equ	0xFDD
 10506                           plusw2	equ	0xFDB
 10507                           fsr2h	equ	0xFDA
 10508                           fsr2l	equ	0xFD9
 10509                           status	equ	0xFD8
 10510                           
 10511 ;; *************** function _init_crc8 *****************
 10512 ;; Defined at:
 10513 ;;		line 25 in file "crc8.c"
 10514 ;; Parameters:    Size  Location     Type
 10515 ;;		None
 10516 ;; Auto vars:     Size  Location     Type
 10517 ;;  i               2    5[BANK0 ] int 
 10518 ;;  j               2    2[BANK0 ] int 
 10519 ;;  crc             1    4[BANK0 ] unsigned char 
 10520 ;; Return value:  Size  Location     Type
 10521 ;;		None               void
 10522 ;; Registers used:
 10523 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10524 ;; Tracked objects:
 10525 ;;		On entry : F/0
 10526 ;;		On exit  : F/0
 10527 ;;		Unchanged: 0/0
 10528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10529 ;;      Params:         0       0       0       0       0       0       0
 10530 ;;      Locals:         0       7       0       0       0       0       0
 10531 ;;      Temps:          0       0       0       0       0       0       0
 10532 ;;      Totals:         0       7       0       0       0       0       0
 10533 ;;Total ram usage:        7 bytes
 10534 ;; Hardware stack levels used:    1
 10535 ;; Hardware stack levels required when called:    3
 10536 ;; This function calls:
 10537 ;;		Nothing
 10538 ;; This function is called by:
 10539 ;;		_main
 10540 ;;		_crc8
 10541 ;; This function uses a non-reentrant model
 10542 ;;
 10543                           
 10544                           	psect	text19
 10545  004C68                     __ptext19:
 10546                           	opt stack 0
 10547  004C68                     _init_crc8:
 10548                           	opt stack 24
 10549                           
 10550                           ; BSR set to: 0
 10551                           ;crc8.c: 26: int i,j;
 10552                           ;crc8.c: 27: unsigned char crc;
 10553                           ;crc8.c: 29: if (!made_table) {
 10554                           
 10555                           ; BSR set to: 0
 10556                           ;incstack = 0
 10557                           ;incstack = 0
 10558  004C68  502E               	movf	_made_table+1,w,c
 10559  004C6A  102D               	iorwf	_made_table,w,c
 10560  004C6C  E131               	bnz	l1499
 10561                           
 10562                           ; BSR set to: 0
 10563                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 10564  004C6E  6B65               	clrf	init_crc8@i& (0+255),b
 10565  004C70  6B66               	clrf	(init_crc8@i+1)& (0+255),b
 10566  004C72                     l1491:
 10567                           
 10568                           ; BSR set to: 0
 10569                           ;crc8.c: 31: crc = i;
 10570  004C72  C065  F064         	movff	init_crc8@i,init_crc8@crc
 10571                           
 10572                           ;crc8.c: 32: for (j=0; j<8; j++) {
 10573  004C76  6B62               	clrf	init_crc8@j& (0+255),b
 10574  004C78  6B63               	clrf	(init_crc8@j+1)& (0+255),b
 10575  004C7A                     l1493:
 10576                           
 10577                           ; BSR set to: 0
 10578                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 10579  004C7A  BF64               	btfsc	init_crc8@crc& (0+255),7,b
 10580  004C7C  D003               	goto	l9531
 10581                           
 10582                           ; BSR set to: 0
 10583  004C7E  6B60               	clrf	_init_crc8$2099& (0+255),b
 10584  004C80  6B61               	clrf	(_init_crc8$2099+1)& (0+255),b
 10585  004C82  D003               	goto	l9533
 10586  004C84                     l9531:
 10587                           
 10588                           ; BSR set to: 0
 10589  004C84  6B61               	clrf	(_init_crc8$2099+1)& (0+255),b
 10590  004C86  0E07               	movlw	7
 10591  004C88  6F60               	movwf	_init_crc8$2099& (0+255),b
 10592  004C8A                     l9533:
 10593                           
 10594                           ; BSR set to: 0
 10595  004C8A  5164               	movf	init_crc8@crc& (0+255),w,b
 10596  004C8C  2564               	addwf	init_crc8@crc& (0+255),w,b
 10597  004C8E  1960               	xorwf	_init_crc8$2099& (0+255),w,b
 10598  004C90  6F64               	movwf	init_crc8@crc& (0+255),b
 10599                           
 10600                           ; BSR set to: 0
 10601  004C92  4B62               	infsnz	init_crc8@j& (0+255),f,b
 10602  004C94  2B63               	incf	(init_crc8@j+1)& (0+255),f,b
 10603                           
 10604                           ; BSR set to: 0
 10605  004C96  5163               	movf	(init_crc8@j+1)& (0+255),w,b
 10606  004C98  0A80               	xorlw	128
 10607  004C9A  0F80               	addlw	-128
 10608  004C9C  0E08               	movlw	8
 10609  004C9E  B4D8               	btfsc	status,2,c
 10610  004CA0  5D62               	subwf	init_crc8@j& (0+255),w,b
 10611  004CA2  E3EB               	bnc	l1493
 10612                           
 10613                           ; BSR set to: 0
 10614                           ;crc8.c: 34: }
 10615                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 10616  004CA4  0E00               	movlw	low _crc8_table
 10617  004CA6  0100               	movlb	0	; () banked
 10618  004CA8  2565               	addwf	init_crc8@i& (0+255),w,b
 10619  004CAA  6ED9               	movwf	fsr2l,c
 10620  004CAC  0E03               	movlw	high _crc8_table
 10621  004CAE  2166               	addwfc	(init_crc8@i+1)& (0+255),w,b
 10622  004CB0  6EDA               	movwf	fsr2h,c
 10623  004CB2  C064  FFDF         	movff	init_crc8@crc,indf2
 10624                           
 10625                           ; BSR set to: 0
 10626  004CB6  4B65               	infsnz	init_crc8@i& (0+255),f,b
 10627  004CB8  2B66               	incf	(init_crc8@i+1)& (0+255),f,b
 10628                           
 10629                           ; BSR set to: 0
 10630  004CBA  5166               	movf	(init_crc8@i+1)& (0+255),w,b
 10631  004CBC  0A80               	xorlw	128
 10632  004CBE  0F7F               	addlw	-129
 10633  004CC0  0E00               	movlw	0
 10634  004CC2  B4D8               	btfsc	status,2,c
 10635  004CC4  5D65               	subwf	init_crc8@i& (0+255),w,b
 10636  004CC6  E3D5               	bnc	l1491
 10637                           
 10638                           ; BSR set to: 0
 10639                           ;crc8.c: 37: }
 10640                           ;crc8.c: 38: made_table=1;
 10641  004CC8  0E00               	movlw	0
 10642  004CCA  6E2E               	movwf	_made_table+1,c
 10643  004CCC  0E01               	movlw	1
 10644  004CCE  6E2D               	movwf	_made_table,c
 10645  004CD0                     l1499:
 10646                           
 10647                           ; BSR set to: 0
 10648  004CD0  0012               	return	
 10649  004CD2                     __end_of_init_crc8:
 10650                           	opt stack 0
 10651                           tblptru	equ	0xFF8
 10652                           tblptrh	equ	0xFF7
 10653                           tblptrl	equ	0xFF6
 10654                           tablat	equ	0xFF5
 10655                           prodh	equ	0xFF4
 10656                           prodl	equ	0xFF3
 10657                           intcon	equ	0xFF2
 10658                           indf0	equ	0xFEF
 10659                           postinc0	equ	0xFEE
 10660                           fsr0h	equ	0xFEA
 10661                           fsr0l	equ	0xFE9
 10662                           wreg	equ	0xFE8
 10663                           indf1	equ	0xFE7
 10664                           postinc1	equ	0xFE6
 10665                           postdec1	equ	0xFE5
 10666                           fsr1h	equ	0xFE2
 10667                           fsr1l	equ	0xFE1
 10668                           indf2	equ	0xFDF
 10669                           postinc2	equ	0xFDE
 10670                           postdec2	equ	0xFDD
 10671                           plusw2	equ	0xFDB
 10672                           fsr2h	equ	0xFDA
 10673                           fsr2l	equ	0xFD9
 10674                           status	equ	0xFD8
 10675                           
 10676 ;; *************** function _doModeVerbose *****************
 10677 ;; Defined at:
 10678 ;;		line 466 in file "main.c"
 10679 ;; Parameters:    Size  Location     Type
 10680 ;;		None
 10681 ;; Auto vars:     Size  Location     Type
 10682 ;;  preg            2    6[BANK2 ] PTR unsigned char 
 10683 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 10684 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 10685 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 10686 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 10687 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 10688 ;;		 -> STR_30(2), NULL(0), STR_29(2), cmdbuf(80), 
 10689 ;;  preg            2    4[BANK2 ] PTR unsigned char 
 10690 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 10691 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 10692 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 10693 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 10694 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 10695 ;;		 -> STR_30(2), NULL(0), STR_29(2), cmdbuf(80), 
 10696 ;;  id              4   35[BANK2 ] unsigned long 
 10697 ;;  p               2   59[BANK2 ] PTR unsigned char 
 10698 ;;		 -> NULL(0), cmdbuf(80), 
 10699 ;;  mask_class      2   10[BANK2 ] unsigned short 
 10700 ;;  maskno          1   40[BANK2 ] unsigned char 
 10701 ;;  mask_nodeid     1   19[BANK2 ] unsigned char 
 10702 ;;  mask_type       1   18[BANK2 ] unsigned char 
 10703 ;;  mask_priorit    1   17[BANK2 ] unsigned char 
 10704 ;;  id              4    0[BANK2 ] unsigned long 
 10705 ;;  p               2   57[BANK2 ] PTR unsigned char 
 10706 ;;		 -> NULL(0), cmdbuf(80), 
 10707 ;;  filter_class    2    8[BANK2 ] unsigned short 
 10708 ;;  filterno        1   39[BANK2 ] unsigned char 
 10709 ;;  filter_nodei    1   16[BANK2 ] unsigned char 
 10710 ;;  filter_type     1   15[BANK2 ] unsigned char 
 10711 ;;  filter_prior    1   14[BANK2 ] unsigned char 
 10712 ;;  nodeid          1   47[BANK2 ] unsigned char 
 10713 ;;  p               2   52[BANK2 ] PTR unsigned char 
 10714 ;;		 -> NULL(0), cmdbuf(80), 
 10715 ;;  value           1   41[BANK2 ] unsigned char 
 10716 ;;  reg             1   34[BANK2 ] unsigned char 
 10717 ;;  page            1   33[BANK2 ] unsigned char 
 10718 ;;  nodeid          1   13[BANK2 ] unsigned char 
 10719 ;;  p               2   50[BANK2 ] PTR unsigned char 
 10720 ;;		 -> NULL(0), cmdbuf(80), 
 10721 ;;  value           1   49[BANK2 ] unsigned char 
 10722 ;;  i               1   48[BANK2 ] unsigned char 
 10723 ;;  reg             1   46[BANK2 ] unsigned char 
 10724 ;;  page            1   45[BANK2 ] unsigned char 
 10725 ;;  count           1   43[BANK2 ] unsigned char 
 10726 ;;  rv              1   32[BANK2 ] enum E15660
 10727 ;;  nodeid          1   12[BANK2 ] unsigned char 
 10728 ;;  p               2   55[BANK2 ] PTR unsigned char 
 10729 ;;		 -> NULL(0), cmdbuf(80), 
 10730 ;;  ifmode          1   54[BANK2 ] enum E16362
 10731 ;;  c               1   44[BANK2 ] unsigned char 
 10732 ;;  i               1   42[BANK2 ] unsigned char 
 10733 ;; Return value:  Size  Location     Type
 10734 ;;		None               void
 10735 ;; Registers used:
 10736 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 10737 ;; Tracked objects:
 10738 ;;		On entry : 0/0
 10739 ;;		On exit  : 0/0
 10740 ;;		Unchanged: 0/0
 10741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10742 ;;      Params:         0       0       0       0       0       0       0
 10743 ;;      Locals:         0       0       0      61       0       0       0
 10744 ;;      Temps:          0       0      20       0       0       0       0
 10745 ;;      Totals:         0       0      20      61       0       0       0
 10746 ;;Total ram usage:       81 bytes
 10747 ;; Hardware stack levels used:    1
 10748 ;; Hardware stack levels required when called:   10
 10749 ;; This function calls:
 10750 ;;		_putsUSART
 10751 ;;		_printFirmwareVersion
 10752 ;;		_fifo_read
 10753 ;;		_writeEEPROM
 10754 ;;		_receivePrintEventVerbose
 10755 ;;		_stristr
 10756 ;;		_ECANSetOperationMode
 10757 ;;		_strtok
 10758 ;;		_atoi
 10759 ;;		_memset
 10760 ;;		_sendVSCPFrame
 10761 ;;		_printStatistics
 10762 ;;		_printErrors
 10763 ;;		_printHelp
 10764 ;;		_findNodes
 10765 ;;		_strcpy
 10766 ;;		_strchr
 10767 ;;		_readRegisterExtended
 10768 ;;		_sprintf
 10769 ;;		_WriteUSART
 10770 ;;		_printBinary
 10771 ;;		_writeRegisterExtended
 10772 ;;		_printNodeFirmwareVersion
 10773 ;;		_printGUID
 10774 ;;		_printMDF
 10775 ;;		_setFilter
 10776 ;;		__CANIDToRegs
 10777 ;; This function is called by:
 10778 ;;		_main
 10779 ;; This function uses a non-reentrant model
 10780 ;;
 10781                           
 10782                           	psect	text20
 10783  00022E                     __ptext20:
 10784                           	opt stack 0
 10785  00022E                     _doModeVerbose:
 10786                           	opt stack 20
 10787                           
 10788                           ;main.c: 467: uint8_t c;
 10789                           ;main.c: 468: uint8_t i;
 10790                           ;main.c: 471: if (!bSilent) {
 10791                           
 10792                           ; BSR set to: 0
 10793                           ;incstack = 0
 10794                           ;incstack = 0
 10795  00022E  0101               	movlb	1	; () banked
 10796  000230  6701               	tstfsz	_bSilent& (0+255),b
 10797  000232  D002               	goto	l9657
 10798                           
 10799                           ; BSR set to: 1
 10800                           ;main.c: 472: receivePrintEventVerbose();
 10801  000234  ECAA  F011         	call	_receivePrintEventVerbose	;wreg free
 10802  000238                     l9657:
 10803                           
 10804                           ;main.c: 473: }
 10805                           ;main.c: 476: (INTCONbits.GIE = 0);
 10806  000238  9EF2               	bcf	intcon,7,c	;volatile
 10807                           
 10808                           ;main.c: 478: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
 10809  00023A  0E02               	movlw	high doModeVerbose@c
 10810  00023C  0100               	movlb	0	; () banked
 10811  00023E  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 10812  000240  0EAC               	movlw	low doModeVerbose@c
 10813  000242  6F60               	movwf	?_fifo_read& (0+255),b
 10814  000244  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 10815  000246  0E01               	movlw	1
 10816  000248  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 10817  00024A  0E3E               	movlw	_serialInputFifo& (0+255)
 10818  00024C  EC80  F020         	call	_fifo_read
 10819  000250  0560               	decf	?_fifo_read& (0+255),w,b
 10820  000252  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 10821  000254  E002 EF3E  F00A    	bnz	l10259
 10822                           
 10823                           ; BSR set to: 0
 10824                           ;main.c: 481: (INTCONbits.GIE = 1);
 10825  00025A  8EF2               	bsf	intcon,7,c	;volatile
 10826                           
 10827                           ; BSR set to: 0
 10828                           ;main.c: 484: cmdbuf[ pos ] = c;
 10829  00025C  ECAC  F016         	call	PL18	;call to abstracted procedure
 10830  000260  C2AC  FFDF         	movff	doModeVerbose@c,indf2
 10831                           
 10832                           ; BSR set to: 2
 10833                           ;main.c: 485: pos++;
 10834  000264  2B02               	incf	_pos& (0+255),f,b
 10835                           
 10836                           ; BSR set to: 1
 10837                           ;main.c: 487: if (pos >= 128u) {
 10838  000266  0E7F               	movlw	127
 10839  000268  6502               	cpfsgt	_pos& (0+255),b
 10840  00026A  D001               	goto	l9671
 10841                           
 10842                           ; BSR set to: 1
 10843                           ;main.c: 491: pos = 0;
 10844  00026C  6B02               	clrf	_pos& (0+255),b
 10845  00026E                     l9671:
 10846                           
 10847                           ; BSR set to: 1
 10848                           ;main.c: 493: }
 10849                           ;main.c: 496: if (0x0d == c) {
 10850  00026E  0102               	movlb	2	; () banked
 10851  000270  51AC               	movf	doModeVerbose@c& (0+255),w,b
 10852  000272  0A0D               	xorlw	13
 10853  000274  E002 EF3E  F00A    	bnz	l10259
 10854                           
 10855                           ; BSR set to: 2
 10856                           ;main.c: 498: cmdbuf[ pos ] = 0;
 10857  00027A  ECAC  F016         	call	PL18	;call to abstracted procedure
 10858  00027E  6ADF               	clrf	indf2,c
 10859                           
 10860                           ; BSR set to: 1
 10861                           ;main.c: 501: if (cmdbuf == stristr(cmdbuf, "BOOT")) {
 10862  000280  0100               	movlb	0	; () banked
 10863  000282  6F6E               	movwf	(?_stristr+1)& (0+255),b
 10864  000284  0E04               	movlw	low _cmdbuf
 10865  000286  6F6D               	movwf	?_stristr& (0+255),b
 10866  000288  0E7F               	movlw	high STR_5
 10867  00028A  6F70               	movwf	(?_stristr+3)& (0+255),b
 10868  00028C  0ED0               	movlw	low STR_5
 10869  00028E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 10870  000290  EC0E  F025         	call	_stristr	;wreg free
 10871  000294  EC40  F00A         	call	PL2	;call to abstracted procedure
 10872  000298  E104               	bnz	u11725
 10873  00029A  0100               	movlb	0	; () banked
 10874  00029C  516D               	movf	?_stristr& (0+255),w,b
 10875  00029E  0101               	movlb	1	; () banked
 10876  0002A0  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 10877  0002A2                     u11725:
 10878  0002A2  E111               	bnz	l9681
 10879                           
 10880                           ; BSR set to: 1
 10881                           ;main.c: 502: putsUSART((char *) "Will enter bootloader now...\r\n");
 10882  0002A4  0E7A               	movlw	high STR_6
 10883  0002A6  0100               	movlb	0	; () banked
 10884  0002A8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 10885  0002AA  0EED               	movlw	low STR_6
 10886  0002AC  6F61               	movwf	?_putsUSART& (0+255),b
 10887  0002AE  EC89  F027         	call	_putsUSART	;wreg free
 10888                           
 10889                           ;main.c: 503: writeEEPROM(0x00, 0xFF);
 10890  0002B2  0100               	movlb	0	; () banked
 10891  0002B4  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 10892  0002B6  6B60               	clrf	?_writeEEPROM& (0+255),b
 10893  0002B8  0EFF               	movlw	255
 10894  0002BA  6962               	setf	(?_writeEEPROM+2)& (0+255),b
 10895  0002BC  ECFD  F029         	call	_writeEEPROM	;wreg free
 10896  0002C0  00FF               	reset		;# 
 10897                           
 10898                           ;main.c: 505: }
 10899  0002C2  EF30  F00A         	goto	l10255
 10900  0002C6                     l9681:
 10901                           
 10902                           ; BSR set to: 1
 10903                           ;main.c: 507: else if (cmdbuf == stristr(cmdbuf, "OPEN")) {
 10904  0002C6  0E01               	movlw	high _cmdbuf
 10905  0002C8  0100               	movlb	0	; () banked
 10906  0002CA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 10907  0002CC  0E04               	movlw	low _cmdbuf
 10908  0002CE  6F6D               	movwf	?_stristr& (0+255),b
 10909  0002D0  0E7F               	movlw	high STR_7
 10910  0002D2  6F70               	movwf	(?_stristr+3)& (0+255),b
 10911  0002D4  0EB7               	movlw	low STR_7
 10912  0002D6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 10913  0002D8  EC0E  F025         	call	_stristr	;wreg free
 10914  0002DC  EC40  F00A         	call	PL2	;call to abstracted procedure
 10915  0002E0  E104               	bnz	u11735
 10916  0002E2  0100               	movlb	0	; () banked
 10917  0002E4  516D               	movf	?_stristr& (0+255),w,b
 10918  0002E6  0101               	movlb	1	; () banked
 10919  0002E8  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 10920  0002EA                     u11735:
 10921  0002EA  E10C               	bnz	l9689
 10922                           
 10923                           ; BSR set to: 1
 10924                           ;main.c: 508: bSilent = 0;
 10925  0002EC  6B01               	clrf	_bSilent& (0+255),b
 10926                           
 10927                           ; BSR set to: 1
 10928                           ;main.c: 509: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 10929  0002EE  0E00               	movlw	0
 10930  0002F0  EC3E  F02A         	call	_ECANSetOperationMode
 10931                           
 10932                           ; BSR set to: 0
 10933                           ;main.c: 510: putsUSART((char *) "+OK\r\n");
 10934  0002F4  0E7F               	movlw	high STR_8
 10935  0002F6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 10936  0002F8  0E80               	movlw	low STR_8
 10937  0002FA  6F61               	movwf	?_putsUSART& (0+255),b
 10938  0002FC  EC89  F027         	call	_putsUSART	;wreg free
 10939                           
 10940                           ;main.c: 511: }
 10941  000300  EF30  F00A         	goto	l10255
 10942  000304                     l9689:
 10943                           
 10944                           ; BSR set to: 1
 10945                           ;main.c: 513: else if (cmdbuf == stristr(cmdbuf, "SILENT")) {
 10946  000304  0E01               	movlw	high _cmdbuf
 10947  000306  0100               	movlb	0	; () banked
 10948  000308  6F6E               	movwf	(?_stristr+1)& (0+255),b
 10949  00030A  0E04               	movlw	low _cmdbuf
 10950  00030C  6F6D               	movwf	?_stristr& (0+255),b
 10951  00030E  0E7F               	movlw	high STR_9
 10952  000310  6F70               	movwf	(?_stristr+3)& (0+255),b
 10953  000312  0E5E               	movlw	low STR_9
 10954  000314  6F6F               	movwf	(?_stristr+2)& (0+255),b
 10955  000316  EC0E  F025         	call	_stristr	;wreg free
 10956  00031A  EC40  F00A         	call	PL2	;call to abstracted procedure
 10957  00031E  E104               	bnz	u11745
 10958  000320  0100               	movlb	0	; () banked
 10959  000322  516D               	movf	?_stristr& (0+255),w,b
 10960  000324  0101               	movlb	1	; () banked
 10961  000326  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 10962  000328                     u11745:
 10963  000328  E10D               	bnz	l9697
 10964                           
 10965                           ; BSR set to: 1
 10966                           ;main.c: 514: bSilent = 1;
 10967  00032A  0E01               	movlw	1
 10968  00032C  6F01               	movwf	_bSilent& (0+255),b
 10969                           
 10970                           ; BSR set to: 1
 10971                           ;main.c: 515: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 10972  00032E  0E00               	movlw	0
 10973  000330  EC3E  F02A         	call	_ECANSetOperationMode
 10974                           
 10975                           ; BSR set to: 0
 10976                           ;main.c: 516: putsUSART((char *) "+OK\r\n");
 10977  000334  0E7F               	movlw	high STR_8
 10978  000336  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 10979  000338  0E80               	movlw	low STR_8
 10980  00033A  6F61               	movwf	?_putsUSART& (0+255),b
 10981  00033C  EC89  F027         	call	_putsUSART	;wreg free
 10982                           
 10983                           ;main.c: 517: }
 10984  000340  EF30  F00A         	goto	l10255
 10985  000344                     l9697:
 10986                           
 10987                           ; BSR set to: 1
 10988                           ;main.c: 519: else if (cmdbuf == stristr(cmdbuf, "CLOSE")) {
 10989  000344  0E01               	movlw	high _cmdbuf
 10990  000346  0100               	movlb	0	; () banked
 10991  000348  6F6E               	movwf	(?_stristr+1)& (0+255),b
 10992  00034A  0E04               	movlw	low _cmdbuf
 10993  00034C  6F6D               	movwf	?_stristr& (0+255),b
 10994  00034E  0E7F               	movlw	high STR_11
 10995  000350  6F70               	movwf	(?_stristr+3)& (0+255),b
 10996  000352  0E92               	movlw	low STR_11
 10997  000354  6F6F               	movwf	(?_stristr+2)& (0+255),b
 10998  000356  EC0E  F025         	call	_stristr	;wreg free
 10999  00035A  EC40  F00A         	call	PL2	;call to abstracted procedure
 11000  00035E  E104               	bnz	u11755
 11001  000360  0100               	movlb	0	; () banked
 11002  000362  516D               	movf	?_stristr& (0+255),w,b
 11003  000364  0101               	movlb	1	; () banked
 11004  000366  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11005  000368                     u11755:
 11006  000368  E10D               	bnz	l9705
 11007                           
 11008                           ; BSR set to: 1
 11009                           ;main.c: 520: bSilent = 1;
 11010  00036A  0E01               	movlw	1
 11011  00036C  6F01               	movwf	_bSilent& (0+255),b
 11012                           
 11013                           ; BSR set to: 1
 11014                           ;main.c: 521: ECANSetOperationMode(0x20);
 11015  00036E  0E20               	movlw	32
 11016  000370  EC3E  F02A         	call	_ECANSetOperationMode
 11017                           
 11018                           ; BSR set to: 0
 11019                           ;main.c: 522: putsUSART((char *) "+OK\r\n");
 11020  000374  0E7F               	movlw	high STR_8
 11021  000376  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11022  000378  0E80               	movlw	low STR_8
 11023  00037A  6F61               	movwf	?_putsUSART& (0+255),b
 11024  00037C  EC89  F027         	call	_putsUSART	;wreg free
 11025                           
 11026                           ;main.c: 523: }
 11027  000380  EF30  F00A         	goto	l10255
 11028  000384                     l9705:
 11029                           
 11030                           ; BSR set to: 1
 11031                           ;main.c: 525: else if (cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 11032  000384  0E01               	movlw	high _cmdbuf
 11033  000386  0100               	movlb	0	; () banked
 11034  000388  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11035  00038A  0E04               	movlw	low _cmdbuf
 11036  00038C  6F6D               	movwf	?_stristr& (0+255),b
 11037  00038E  0E7E               	movlw	high STR_13
 11038  000390  6F70               	movwf	(?_stristr+3)& (0+255),b
 11039  000392  0ECD               	movlw	low STR_13
 11040  000394  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11041  000396  EC0E  F025         	call	_stristr	;wreg free
 11042  00039A  EC40  F00A         	call	PL2	;call to abstracted procedure
 11043  00039E  E104               	bnz	u11765
 11044  0003A0  0100               	movlb	0	; () banked
 11045  0003A2  516D               	movf	?_stristr& (0+255),w,b
 11046  0003A4  0101               	movlb	1	; () banked
 11047  0003A6  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11048  0003A8                     u11765:
 11049  0003A8  E10C               	bnz	l9713
 11050                           
 11051                           ; BSR set to: 1
 11052                           ;main.c: 526: bSilent = 0;
 11053  0003AA  6B01               	clrf	_bSilent& (0+255),b
 11054                           
 11055                           ; BSR set to: 1
 11056                           ;main.c: 527: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 11057  0003AC  0E40               	movlw	64
 11058  0003AE  EC3E  F02A         	call	_ECANSetOperationMode
 11059                           
 11060                           ; BSR set to: 0
 11061                           ;main.c: 528: putsUSART((char *) "+OK\r\n");
 11062  0003B2  0E7F               	movlw	high STR_8
 11063  0003B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11064  0003B6  0E80               	movlw	low STR_8
 11065  0003B8  6F61               	movwf	?_putsUSART& (0+255),b
 11066  0003BA  EC89  F027         	call	_putsUSART	;wreg free
 11067                           
 11068                           ;main.c: 529: }
 11069  0003BE  EF30  F00A         	goto	l10255
 11070  0003C2                     l9713:
 11071                           
 11072                           ; BSR set to: 1
 11073                           ;main.c: 531: else if (cmdbuf == stristr(cmdbuf, "LISTEN")) {
 11074  0003C2  0E01               	movlw	high _cmdbuf
 11075  0003C4  0100               	movlb	0	; () banked
 11076  0003C6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11077  0003C8  0E04               	movlw	low _cmdbuf
 11078  0003CA  6F6D               	movwf	?_stristr& (0+255),b
 11079  0003CC  0E7F               	movlw	high STR_15
 11080  0003CE  6F70               	movwf	(?_stristr+3)& (0+255),b
 11081  0003D0  0E50               	movlw	low STR_15
 11082  0003D2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11083  0003D4  EC0E  F025         	call	_stristr	;wreg free
 11084  0003D8  EC40  F00A         	call	PL2	;call to abstracted procedure
 11085  0003DC  E104               	bnz	u11775
 11086  0003DE  0100               	movlb	0	; () banked
 11087  0003E0  516D               	movf	?_stristr& (0+255),w,b
 11088  0003E2  0101               	movlb	1	; () banked
 11089  0003E4  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11090  0003E6                     u11775:
 11091  0003E6  E10C               	bnz	l9721
 11092                           
 11093                           ; BSR set to: 1
 11094                           ;main.c: 532: bSilent = 0;
 11095  0003E8  6B01               	clrf	_bSilent& (0+255),b
 11096                           
 11097                           ; BSR set to: 1
 11098                           ;main.c: 533: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 11099  0003EA  0E60               	movlw	96
 11100  0003EC  EC3E  F02A         	call	_ECANSetOperationMode
 11101                           
 11102                           ; BSR set to: 0
 11103                           ;main.c: 534: putsUSART((char *) "+OK\r\n");
 11104  0003F0  0E7F               	movlw	high STR_8
 11105  0003F2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11106  0003F4  0E80               	movlw	low STR_8
 11107  0003F6  6F61               	movwf	?_putsUSART& (0+255),b
 11108  0003F8  EC89  F027         	call	_putsUSART	;wreg free
 11109                           
 11110                           ;main.c: 535: }
 11111  0003FC  EF30  F00A         	goto	l10255
 11112  000400                     l9721:
 11113                           
 11114                           ; BSR set to: 1
 11115                           ;main.c: 537: else if (cmdbuf == stristr(cmdbuf, "VERSION")) {
 11116  000400  0E01               	movlw	high _cmdbuf
 11117  000402  0100               	movlb	0	; () banked
 11118  000404  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11119  000406  0E04               	movlw	low _cmdbuf
 11120  000408  6F6D               	movwf	?_stristr& (0+255),b
 11121  00040A  0E7F               	movlw	high STR_17
 11122  00040C  6F70               	movwf	(?_stristr+3)& (0+255),b
 11123  00040E  0E0E               	movlw	low STR_17
 11124  000410  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11125  000412  EC0E  F025         	call	_stristr	;wreg free
 11126  000416  EC40  F00A         	call	PL2	;call to abstracted procedure
 11127  00041A  E104               	bnz	u11785
 11128  00041C  0100               	movlb	0	; () banked
 11129  00041E  516D               	movf	?_stristr& (0+255),w,b
 11130  000420  0101               	movlb	1	; () banked
 11131  000422  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11132  000424                     u11785:
 11133  000424  E10B               	bnz	l9727
 11134                           
 11135                           ; BSR set to: 1
 11136                           ;main.c: 538: printFirmwareVersion();
 11137  000426  ECC2  F023         	call	_printFirmwareVersion	;wreg free
 11138                           
 11139                           ;main.c: 539: putsUSART((char *) "+OK\r\n");
 11140  00042A  0E7F               	movlw	high STR_8
 11141  00042C  0100               	movlb	0	; () banked
 11142  00042E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11143  000430  0E80               	movlw	low STR_8
 11144  000432  6F61               	movwf	?_putsUSART& (0+255),b
 11145  000434  EC89  F027         	call	_putsUSART	;wreg free
 11146                           
 11147                           ;main.c: 540: }
 11148  000438  EF30  F00A         	goto	l10255
 11149  00043C                     l9727:
 11150                           
 11151                           ; BSR set to: 1
 11152                           ;main.c: 541: else if (cmdbuf == stristr(cmdbuf, "IFMODE")) {
 11153  00043C  0E01               	movlw	high _cmdbuf
 11154  00043E  0100               	movlb	0	; () banked
 11155  000440  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11156  000442  0E04               	movlw	low _cmdbuf
 11157  000444  6F6D               	movwf	?_stristr& (0+255),b
 11158  000446  0E7F               	movlw	high STR_19
 11159  000448  6F70               	movwf	(?_stristr+3)& (0+255),b
 11160  00044A  0E49               	movlw	low STR_19
 11161  00044C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11162  00044E  EC0E  F025         	call	_stristr	;wreg free
 11163  000452  EC40  F00A         	call	PL2	;call to abstracted procedure
 11164  000456  E104               	bnz	u11795
 11165  000458  0100               	movlb	0	; () banked
 11166  00045A  516D               	movf	?_stristr& (0+255),w,b
 11167  00045C  0101               	movlb	1	; () banked
 11168  00045E  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11169  000460                     u11795:
 11170  000460  E169               	bnz	l9763
 11171                           
 11172                           ; BSR set to: 1
 11173                           ;main.c: 542: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 11174  000462  506F               	movf	3951,w,c	;volatile
 11175  000464  0BE0               	andlw	224
 11176  000466  0102               	movlb	2	; () banked
 11177  000468  6FB6               	movwf	doModeVerbose@ifmode& (0+255),b
 11178                           
 11179                           ; BSR set to: 2
 11180                           ;main.c: 543: if ((ECAN_OP_MODE_NORMAL == ifmode) & !bSilent) {
 11181  00046A  67B6               	tstfsz	doModeVerbose@ifmode& (0+255),b
 11182  00046C  D00C               	goto	l9737
 11183                           
 11184                           ; BSR set to: 2
 11185  00046E  0101               	movlb	1	; () banked
 11186  000470  6701               	tstfsz	_bSilent& (0+255),b
 11187  000472  D009               	goto	l9737
 11188                           
 11189                           ; BSR set to: 1
 11190                           ;main.c: 544: putsUSART((char *) "+OK - Normal mode\r\n");
 11191  000474  0E7D               	movlw	high STR_20
 11192  000476  0100               	movlb	0	; () banked
 11193  000478  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11194  00047A  0E83               	movlw	low STR_20
 11195  00047C  6F61               	movwf	?_putsUSART& (0+255),b
 11196  00047E  EC89  F027         	call	_putsUSART	;wreg free
 11197                           
 11198                           ;main.c: 545: }
 11199  000482  EF30  F00A         	goto	l10255
 11200  000486                     l9737:
 11201                           
 11202                           ;main.c: 546: else if ((ECAN_OP_MODE_NORMAL == ifmode) & bSilent) {
 11203  000486  0102               	movlb	2	; () banked
 11204  000488  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11205  00048A  0E01               	movlw	1
 11206  00048C  A4D8               	btfss	status,2,c
 11207  00048E  0E00               	movlw	0
 11208  000490  0101               	movlb	1	; () banked
 11209  000492  1501               	andwf	_bSilent& (0+255),w,b
 11210  000494  E009               	bz	l9741
 11211                           
 11212                           ; BSR set to: 1
 11213                           ;main.c: 547: putsUSART((char *) "+OK - Silent mode\r\n");
 11214  000496  0E7D               	movlw	high STR_21
 11215  000498  0100               	movlb	0	; () banked
 11216  00049A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11217  00049C  0E97               	movlw	low STR_21
 11218  00049E  6F61               	movwf	?_putsUSART& (0+255),b
 11219  0004A0  EC89  F027         	call	_putsUSART	;wreg free
 11220                           
 11221                           ;main.c: 548: }
 11222  0004A4  EF30  F00A         	goto	l10255
 11223  0004A8                     l9741:
 11224                           
 11225                           ; BSR set to: 1
 11226                           ;main.c: 549: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 11227  0004A8  0102               	movlb	2	; () banked
 11228  0004AA  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11229  0004AC  0A20               	xorlw	32
 11230  0004AE  E109               	bnz	l9745
 11231                           
 11232                           ; BSR set to: 2
 11233                           ;main.c: 550: putsUSART((char *) "+OK - Sleep mode\r\n");
 11234  0004B0  0E7D               	movlw	high STR_22
 11235  0004B2  0100               	movlb	0	; () banked
 11236  0004B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11237  0004B6  0ED3               	movlw	low STR_22
 11238  0004B8  6F61               	movwf	?_putsUSART& (0+255),b
 11239  0004BA  EC89  F027         	call	_putsUSART	;wreg free
 11240                           
 11241                           ;main.c: 551: }
 11242  0004BE  EF30  F00A         	goto	l10255
 11243  0004C2                     l9745:
 11244                           
 11245                           ; BSR set to: 2
 11246                           ;main.c: 552: else if (ECAN_OP_MODE_LOOP == ifmode) {
 11247  0004C2  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11248  0004C4  0A40               	xorlw	64
 11249  0004C6  E109               	bnz	l9749
 11250                           
 11251                           ; BSR set to: 2
 11252                           ;main.c: 553: putsUSART((char *) "+OK - Loopback mode\r\n");
 11253  0004C8  0E7D               	movlw	high STR_23
 11254  0004CA  0100               	movlb	0	; () banked
 11255  0004CC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11256  0004CE  0E06               	movlw	low STR_23
 11257  0004D0  6F61               	movwf	?_putsUSART& (0+255),b
 11258  0004D2  EC89  F027         	call	_putsUSART	;wreg free
 11259                           
 11260                           ;main.c: 554: }
 11261  0004D6  EF30  F00A         	goto	l10255
 11262  0004DA                     l9749:
 11263                           
 11264                           ; BSR set to: 2
 11265                           ;main.c: 555: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 11266  0004DA  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11267  0004DC  0A60               	xorlw	96
 11268  0004DE  E109               	bnz	l9753
 11269                           
 11270                           ; BSR set to: 2
 11271                           ;main.c: 556: putsUSART((char *) "+OK - Listen only mode\r\n");
 11272  0004E0  0E7B               	movlw	high STR_24
 11273  0004E2  0100               	movlb	0	; () banked
 11274  0004E4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11275  0004E6  0ECF               	movlw	low STR_24
 11276  0004E8  6F61               	movwf	?_putsUSART& (0+255),b
 11277  0004EA  EC89  F027         	call	_putsUSART	;wreg free
 11278                           
 11279                           ;main.c: 557: }
 11280  0004EE  EF30  F00A         	goto	l10255
 11281  0004F2                     l9753:
 11282                           
 11283                           ; BSR set to: 2
 11284                           ;main.c: 558: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 11285  0004F2  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11286  0004F4  0A80               	xorlw	128
 11287  0004F6  E109               	bnz	l9757
 11288                           
 11289                           ; BSR set to: 2
 11290                           ;main.c: 559: putsUSART((char *) "+OK - Closed mode\r\n");
 11291  0004F8  0E7D               	movlw	high STR_25
 11292  0004FA  0100               	movlb	0	; () banked
 11293  0004FC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11294  0004FE  0E6F               	movlw	low STR_25
 11295  000500  6F61               	movwf	?_putsUSART& (0+255),b
 11296  000502  EC89  F027         	call	_putsUSART	;wreg free
 11297                           
 11298                           ;main.c: 560: }
 11299  000506  EF30  F00A         	goto	l10255
 11300  00050A                     l9757:
 11301                           
 11302                           ; BSR set to: 2
 11303                           ;main.c: 561: else if (ECAN_OP_MODE_BITS == ifmode) {
 11304  00050A  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11305  00050C  0AE0               	xorlw	224
 11306  00050E  E109               	bnz	l9761
 11307                           
 11308                           ; BSR set to: 2
 11309                           ;main.c: 562: putsUSART((char *) "+OK - Bits mode\r\n");
 11310  000510  0E7D               	movlw	high STR_26
 11311  000512  0100               	movlb	0	; () banked
 11312  000514  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11313  000516  0EE6               	movlw	low STR_26
 11314  000518  6F61               	movwf	?_putsUSART& (0+255),b
 11315  00051A  EC89  F027         	call	_putsUSART	;wreg free
 11316                           
 11317                           ;main.c: 563: }
 11318  00051E  EF30  F00A         	goto	l10255
 11319  000522                     l9761:
 11320                           
 11321                           ; BSR set to: 2
 11322                           ;main.c: 564: else {
 11323                           ;main.c: 565: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 11324  000522  0E7C               	movlw	high STR_27
 11325  000524  0100               	movlb	0	; () banked
 11326  000526  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11327  000528  0E49               	movlw	low STR_27
 11328  00052A  6F61               	movwf	?_putsUSART& (0+255),b
 11329  00052C  EC89  F027         	call	_putsUSART	;wreg free
 11330  000530  EF30  F00A         	goto	l10255
 11331  000534                     l9763:
 11332                           
 11333                           ; BSR set to: 1
 11334                           ;main.c: 570: else if (cmdbuf == stristr(cmdbuf, "TX")) {
 11335  000534  0E01               	movlw	high _cmdbuf
 11336  000536  0100               	movlb	0	; () banked
 11337  000538  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11338  00053A  0E04               	movlw	low _cmdbuf
 11339  00053C  6F6D               	movwf	?_stristr& (0+255),b
 11340  00053E  0E7F               	movlw	high STR_28
 11341  000540  6F70               	movwf	(?_stristr+3)& (0+255),b
 11342  000542  0EEB               	movlw	low STR_28
 11343  000544  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11344  000546  EC0E  F025         	call	_stristr	;wreg free
 11345  00054A  EC40  F00A         	call	PL2	;call to abstracted procedure
 11346  00054E  E104               	bnz	u11895
 11347  000550  0100               	movlb	0	; () banked
 11348  000552  516D               	movf	?_stristr& (0+255),w,b
 11349  000554  0101               	movlb	1	; () banked
 11350  000556  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11351  000558                     u11895:
 11352  000558  E001 D0D9          	bnz	l9817
 11353                           
 11354                           ; BSR set to: 1
 11355                           ;main.c: 572: char *p = strtok(cmdbuf, ",");
 11356  00055C  ECA3  F00A         	call	PL30	;call to abstracted procedure
 11357  000560  EC79  F023         	call	_strtok	;wreg free
 11358  000564  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 11359  000568  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 11360                           
 11361                           ; BSR set to: 0
 11362                           ;main.c: 575: vscpPriority = 3;
 11363  00056C  0E03               	movlw	3
 11364  00056E  0101               	movlb	1	; () banked
 11365  000570  6FAF               	movwf	_vscpPriority& (0+255),b
 11366                           
 11367                           ; BSR set to: 1
 11368                           ;main.c: 576: if ((0) != p) {
 11369  000572  0102               	movlb	2	; () banked
 11370  000574  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11371  000576  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 11372  000578  E009               	bz	l9773
 11373                           
 11374                           ; BSR set to: 2
 11375                           ;main.c: 577: vscpPriority = atoi(p);
 11376  00057A  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 11377  00057E  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 11378  000582  EC6A  F01C         	call	_atoi	;wreg free
 11379  000586  5166               	movf	?_atoi& (0+255),w,b
 11380  000588  0101               	movlb	1	; () banked
 11381  00058A  6FAF               	movwf	_vscpPriority& (0+255),b
 11382  00058C                     l9773:
 11383                           
 11384                           ;main.c: 578: }
 11385                           ;main.c: 581: vscpClass = 0;
 11386  00058C  0101               	movlb	1	; () banked
 11387  00058E  6BAC               	clrf	_vscpClass& (0+255),b
 11388  000590  6BAD               	clrf	(_vscpClass+1)& (0+255),b
 11389                           
 11390                           ; BSR set to: 1
 11391                           ;main.c: 582: if ((0) != (p = strtok((0), ","))) {
 11392  000592  EC4A  F00A         	call	PL4	;call to abstracted procedure
 11393  000596  EC79  F023         	call	_strtok	;wreg free
 11394  00059A  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 11395  00059E  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 11396  0005A2  0102               	movlb	2	; () banked
 11397  0005A4  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11398  0005A6  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 11399  0005A8  E00A               	bz	l9779
 11400                           
 11401                           ; BSR set to: 2
 11402                           ;main.c: 583: vscpClass = atoi(p);
 11403  0005AA  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 11404  0005AE  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 11405  0005B2  EC6A  F01C         	call	_atoi	;wreg free
 11406  0005B6  C066  F1AC         	movff	?_atoi,_vscpClass
 11407  0005BA  C067  F1AD         	movff	?_atoi+1,_vscpClass+1
 11408  0005BE                     l9779:
 11409                           
 11410                           ;main.c: 584: }
 11411                           ;main.c: 587: vscpType = 0;
 11412  0005BE  0101               	movlb	1	; () banked
 11413  0005C0  6BB1               	clrf	_vscpType& (0+255),b
 11414                           
 11415                           ; BSR set to: 1
 11416                           ;main.c: 588: if ((0) != (p = strtok((0), ","))) {
 11417  0005C2  EC4A  F00A         	call	PL4	;call to abstracted procedure
 11418  0005C6  EC79  F023         	call	_strtok	;wreg free
 11419  0005CA  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 11420  0005CE  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 11421  0005D2  0102               	movlb	2	; () banked
 11422  0005D4  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11423  0005D6  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 11424  0005D8  E009               	bz	l9785
 11425                           
 11426                           ; BSR set to: 2
 11427                           ;main.c: 589: vscpType = atoi(p);
 11428  0005DA  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 11429  0005DE  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 11430  0005E2  EC6A  F01C         	call	_atoi	;wreg free
 11431  0005E6  5166               	movf	?_atoi& (0+255),w,b
 11432  0005E8  0101               	movlb	1	; () banked
 11433  0005EA  6FB1               	movwf	_vscpType& (0+255),b
 11434  0005EC                     l9785:
 11435                           
 11436                           ;main.c: 590: }
 11437                           ;main.c: 593: vscpNodeId = 0;
 11438  0005EC  0101               	movlb	1	; () banked
 11439  0005EE  6BAE               	clrf	_vscpNodeId& (0+255),b
 11440                           
 11441                           ; BSR set to: 1
 11442                           ;main.c: 594: if ((0) != (p = strtok((0), ","))) {
 11443  0005F0  EC4A  F00A         	call	PL4	;call to abstracted procedure
 11444  0005F4  EC79  F023         	call	_strtok	;wreg free
 11445  0005F8  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 11446  0005FC  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 11447  000600  0102               	movlb	2	; () banked
 11448  000602  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11449  000604  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 11450  000606  E009               	bz	l9791
 11451                           
 11452                           ; BSR set to: 2
 11453                           ;main.c: 595: vscpNodeId = atoi(p);
 11454  000608  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 11455  00060C  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 11456  000610  EC6A  F01C         	call	_atoi	;wreg free
 11457  000614  5166               	movf	?_atoi& (0+255),w,b
 11458  000616  0101               	movlb	1	; () banked
 11459  000618  6FAE               	movwf	_vscpNodeId& (0+255),b
 11460  00061A                     l9791:
 11461                           
 11462                           ;main.c: 596: }
 11463                           ;main.c: 599: vscpSize = 0;
 11464  00061A  0101               	movlb	1	; () banked
 11465  00061C  6BB0               	clrf	_vscpSize& (0+255),b
 11466                           
 11467                           ; BSR set to: 1
 11468                           ;main.c: 600: if ((0) != (p = strtok((0), ","))) {
 11469  00061E  EC4A  F00A         	call	PL4	;call to abstracted procedure
 11470  000622  EC79  F023         	call	_strtok	;wreg free
 11471  000626  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 11472  00062A  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 11473  00062E  0102               	movlb	2	; () banked
 11474  000630  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11475  000632  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 11476  000634  E009               	bz	l9797
 11477                           
 11478                           ; BSR set to: 2
 11479                           ;main.c: 601: vscpSize = atoi(p);
 11480  000636  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 11481  00063A  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 11482  00063E  EC6A  F01C         	call	_atoi	;wreg free
 11483  000642  5166               	movf	?_atoi& (0+255),w,b
 11484  000644  0101               	movlb	1	; () banked
 11485  000646  6FB0               	movwf	_vscpSize& (0+255),b
 11486  000648                     l9797:
 11487                           
 11488                           ;main.c: 602: }
 11489                           ;main.c: 604: memset(vscpData, 0, 8);
 11490  000648  0E01               	movlw	high _vscpData
 11491  00064A  0100               	movlb	0	; () banked
 11492  00064C  6F61               	movwf	(?_memset+1)& (0+255),b
 11493  00064E  0EA4               	movlw	low _vscpData
 11494  000650  6F60               	movwf	?_memset& (0+255),b
 11495  000652  6B63               	clrf	(?_memset+3)& (0+255),b
 11496  000654  6B62               	clrf	(?_memset+2)& (0+255),b
 11497  000656  6B65               	clrf	(?_memset+5)& (0+255),b
 11498  000658  0E08               	movlw	8
 11499  00065A  6F64               	movwf	(?_memset+4)& (0+255),b
 11500  00065C  ECE6  F029         	call	_memset	;wreg free
 11501                           
 11502                           ; BSR set to: 0
 11503                           ;main.c: 605: for (i = 0; i < vscpSize; i++) {
 11504  000660  0102               	movlb	2	; () banked
 11505  000662  6BAA               	clrf	doModeVerbose@i& (0+255),b
 11506  000664  D01D               	goto	l9807
 11507  000666                     l9801:
 11508                           
 11509                           ; BSR set to: 2
 11510                           ;main.c: 606: if ((0) != (p = strtok((0), ","))) {
 11511  000666  EC4A  F00A         	call	PL4	;call to abstracted procedure
 11512  00066A  EC79  F023         	call	_strtok	;wreg free
 11513  00066E  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 11514  000672  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 11515  000676  0102               	movlb	2	; () banked
 11516  000678  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11517  00067A  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 11518  00067C  E016               	bz	l9809
 11519                           
 11520                           ; BSR set to: 2
 11521                           ;main.c: 607: vscpData[ i ] = atoi(p);
 11522  00067E  0EA4               	movlw	low _vscpData
 11523  000680  25AA               	addwf	doModeVerbose@i& (0+255),w,b
 11524  000682  6ED9               	movwf	fsr2l,c
 11525  000684  6ADA               	clrf	fsr2h,c
 11526  000686  0101               	movlb	1	; () banked
 11527  000688  0E01               	movlw	high _vscpData
 11528  00068A  22DA               	addwfc	fsr2h,f,c
 11529  00068C  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 11530  000690  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 11531  000694  EC6A  F01C         	call	_atoi	;wreg free
 11532  000698  5166               	movf	?_atoi& (0+255),w,b
 11533  00069A  6EDF               	movwf	indf2,c
 11534                           
 11535                           ; BSR set to: 0
 11536                           
 11537                           ;main.c: 608: } else {
 11538  00069C  0102               	movlb	2	; () banked
 11539  00069E  2BAA               	incf	doModeVerbose@i& (0+255),f,b
 11540  0006A0                     l9807:
 11541                           
 11542                           ; BSR set to: 2
 11543  0006A0  0101               	movlb	1	; () banked
 11544  0006A2  51B0               	movf	_vscpSize& (0+255),w,b
 11545  0006A4  0102               	movlb	2	; () banked
 11546  0006A6  5DAA               	subwf	doModeVerbose@i& (0+255),w,b
 11547  0006A8  E3DE               	bnc	l9801
 11548  0006AA                     l9809:
 11549                           
 11550                           ; BSR set to: 2
 11551                           ;main.c: 610: }
 11552                           ;main.c: 611: }
 11553                           ;main.c: 613: if ( sendVSCPFrame(vscpClass,
 11554                           ;main.c: 614: vscpType,
 11555                           ;main.c: 615: vscpNodeId,
 11556                           ;main.c: 616: vscpPriority,
 11557                           ;main.c: 617: vscpSize,
 11558                           ;main.c: 618: vscpData ) ) {
 11559  0006AA  C1AC  F096         	movff	_vscpClass,?_sendVSCPFrame
 11560  0006AE  C1AD  F097         	movff	_vscpClass+1,?_sendVSCPFrame+1
 11561  0006B2  C1B1  F098         	movff	_vscpType,?_sendVSCPFrame+2
 11562  0006B6  C1AE  F099         	movff	_vscpNodeId,?_sendVSCPFrame+3
 11563  0006BA  C1AF  F09A         	movff	_vscpPriority,?_sendVSCPFrame+4
 11564  0006BE  C1B0  F09B         	movff	_vscpSize,?_sendVSCPFrame+5
 11565  0006C2  0E01               	movlw	high _vscpData
 11566  0006C4  0100               	movlb	0	; () banked
 11567  0006C6  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 11568  0006C8  0EA4               	movlw	low _vscpData
 11569  0006CA  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 11570  0006CC  EC46  F021         	call	_sendVSCPFrame	;wreg free
 11571  0006D0  0900               	iorlw	0
 11572  0006D2  E015               	bz	l9815
 11573                           
 11574                           ; BSR set to: 0
 11575                           ;main.c: 620: cntTxFrames++;
 11576  0006D4  2BE5               	incf	_cntTxFrames& (0+255),f,b
 11577  0006D6  0E00               	movlw	0
 11578  0006D8  23E6               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 11579  0006DA  23E7               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 11580  0006DC  23E8               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 11581                           
 11582                           ;main.c: 621: cntTxBytes += vscpSize;
 11583  0006DE  0101               	movlb	1	; () banked
 11584  0006E0  51B0               	movf	_vscpSize& (0+255),w,b
 11585  0006E2  0100               	movlb	0	; () banked
 11586  0006E4  27E1               	addwf	_cntTxBytes& (0+255),f,b
 11587  0006E6  0E00               	movlw	0
 11588  0006E8  23E2               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 11589  0006EA  23E3               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 11590  0006EC  23E4               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 11591                           
 11592                           ; BSR set to: 0
 11593                           ;main.c: 622: putsUSART((char *) "+OK\r\n");
 11594  0006EE  0E7F               	movlw	high STR_8
 11595  0006F0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11596  0006F2  0E80               	movlw	low STR_8
 11597  0006F4  6F61               	movwf	?_putsUSART& (0+255),b
 11598  0006F6  EC89  F027         	call	_putsUSART	;wreg free
 11599                           
 11600                           ;main.c: 623: }
 11601  0006FA  EF30  F00A         	goto	l10255
 11602  0006FE                     l9815:
 11603                           
 11604                           ; BSR set to: 0
 11605                           ;main.c: 624: else {
 11606                           ;main.c: 625: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 11607  0006FE  0E7A               	movlw	high STR_36
 11608  000700  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11609  000702  0E49               	movlw	low STR_36
 11610  000704  6F61               	movwf	?_putsUSART& (0+255),b
 11611  000706  EC89  F027         	call	_putsUSART	;wreg free
 11612  00070A  EF30  F00A         	goto	l10255
 11613  00070E                     l9817:
 11614                           
 11615                           ; BSR set to: 1
 11616                           ;main.c: 629: else if (cmdbuf == stristr(cmdbuf, "RX")) {
 11617  00070E  0E01               	movlw	high _cmdbuf
 11618  000710  0100               	movlb	0	; () banked
 11619  000712  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11620  000714  0E04               	movlw	low _cmdbuf
 11621  000716  6F6D               	movwf	?_stristr& (0+255),b
 11622  000718  0E7F               	movlw	high STR_37
 11623  00071A  6F70               	movwf	(?_stristr+3)& (0+255),b
 11624  00071C  0EE8               	movlw	low STR_37
 11625  00071E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11626  000720  EC0E  F025         	call	_stristr	;wreg free
 11627  000724  EC40  F00A         	call	PL2	;call to abstracted procedure
 11628  000728  E104               	bnz	u11985
 11629  00072A  0100               	movlb	0	; () banked
 11630  00072C  516D               	movf	?_stristr& (0+255),w,b
 11631  00072E  0101               	movlb	1	; () banked
 11632  000730  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11633  000732                     u11985:
 11634  000732  E116               	bnz	l9825
 11635                           
 11636                           ; BSR set to: 1
 11637                           ;main.c: 630: if (receivePrintEventVerbose()) {
 11638  000734  ECAA  F011         	call	_receivePrintEventVerbose	;wreg free
 11639  000738  0900               	iorlw	0
 11640  00073A  E009               	bz	l9823
 11641                           
 11642                           ;main.c: 631: putsUSART((char *) "+OK\r\n");
 11643  00073C  0E7F               	movlw	high STR_8
 11644  00073E  0100               	movlb	0	; () banked
 11645  000740  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11646  000742  0E80               	movlw	low STR_8
 11647  000744  6F61               	movwf	?_putsUSART& (0+255),b
 11648  000746  EC89  F027         	call	_putsUSART	;wreg free
 11649                           
 11650                           ;main.c: 632: }
 11651  00074A  EF30  F00A         	goto	l10255
 11652  00074E                     l9823:
 11653                           
 11654                           ;main.c: 633: else {
 11655                           ;main.c: 634: putsUSART((char *) "+OK - no events\r\n");
 11656  00074E  0E7D               	movlw	high STR_39
 11657  000750  0100               	movlb	0	; () banked
 11658  000752  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11659  000754  0EF8               	movlw	low STR_39
 11660  000756  6F61               	movwf	?_putsUSART& (0+255),b
 11661  000758  EC89  F027         	call	_putsUSART	;wreg free
 11662  00075C  EF30  F00A         	goto	l10255
 11663  000760                     l9825:
 11664                           
 11665                           ; BSR set to: 1
 11666                           ;main.c: 638: else if (cmdbuf == stristr(cmdbuf, "STAT")) {
 11667  000760  0E01               	movlw	high _cmdbuf
 11668  000762  0100               	movlb	0	; () banked
 11669  000764  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11670  000766  0E04               	movlw	low _cmdbuf
 11671  000768  6F6D               	movwf	?_stristr& (0+255),b
 11672  00076A  0E7F               	movlw	high STR_40
 11673  00076C  6F70               	movwf	(?_stristr+3)& (0+255),b
 11674  00076E  0ECB               	movlw	low STR_40
 11675  000770  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11676  000772  EC0E  F025         	call	_stristr	;wreg free
 11677  000776  EC40  F00A         	call	PL2	;call to abstracted procedure
 11678  00077A  E104               	bnz	u12005
 11679  00077C  0100               	movlb	0	; () banked
 11680  00077E  516D               	movf	?_stristr& (0+255),w,b
 11681  000780  0101               	movlb	1	; () banked
 11682  000782  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11683  000784                     u12005:
 11684  000784  E104               	bnz	l9829
 11685                           
 11686                           ; BSR set to: 1
 11687                           ;main.c: 639: printStatistics();
 11688  000786  ECB4  F016         	call	_printStatistics	;wreg free
 11689                           
 11690                           ;main.c: 640: }
 11691  00078A  EF30  F00A         	goto	l10255
 11692  00078E                     l9829:
 11693                           
 11694                           ; BSR set to: 1
 11695                           ;main.c: 642: else if (cmdbuf == stristr(cmdbuf, "ERR")) {
 11696  00078E  0E01               	movlw	high _cmdbuf
 11697  000790  0100               	movlb	0	; () banked
 11698  000792  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11699  000794  0E04               	movlw	low _cmdbuf
 11700  000796  6F6D               	movwf	?_stristr& (0+255),b
 11701  000798  0E7F               	movlw	high STR_41
 11702  00079A  6F70               	movwf	(?_stristr+3)& (0+255),b
 11703  00079C  0ED9               	movlw	low STR_41
 11704  00079E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11705  0007A0  EC0E  F025         	call	_stristr	;wreg free
 11706  0007A4  EC40  F00A         	call	PL2	;call to abstracted procedure
 11707  0007A8  E104               	bnz	u12015
 11708  0007AA  0100               	movlb	0	; () banked
 11709  0007AC  516D               	movf	?_stristr& (0+255),w,b
 11710  0007AE  0101               	movlb	1	; () banked
 11711  0007B0  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11712  0007B2                     u12015:
 11713  0007B2  E104               	bnz	l9833
 11714                           
 11715                           ; BSR set to: 1
 11716                           ;main.c: 643: printErrors();
 11717  0007B4  EC3F  F010         	call	_printErrors	;wreg free
 11718                           
 11719                           ;main.c: 644: }
 11720  0007B8  EF30  F00A         	goto	l10255
 11721  0007BC                     l9833:
 11722                           
 11723                           ; BSR set to: 1
 11724                           ;main.c: 646: else if (cmdbuf == stristr(cmdbuf, "HELP")) {
 11725  0007BC  0E01               	movlw	high _cmdbuf
 11726  0007BE  0100               	movlb	0	; () banked
 11727  0007C0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11728  0007C2  0E04               	movlw	low _cmdbuf
 11729  0007C4  6F6D               	movwf	?_stristr& (0+255),b
 11730  0007C6  0E7F               	movlw	high STR_42
 11731  0007C8  6F70               	movwf	(?_stristr+3)& (0+255),b
 11732  0007CA  0EC6               	movlw	low STR_42
 11733  0007CC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11734  0007CE  EC0E  F025         	call	_stristr	;wreg free
 11735  0007D2  EC40  F00A         	call	PL2	;call to abstracted procedure
 11736  0007D6  E104               	bnz	u12025
 11737  0007D8  0100               	movlb	0	; () banked
 11738  0007DA  516D               	movf	?_stristr& (0+255),w,b
 11739  0007DC  0101               	movlb	1	; () banked
 11740  0007DE  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11741  0007E0                     u12025:
 11742  0007E0  E10B               	bnz	l9837
 11743                           
 11744                           ; BSR set to: 1
 11745                           ;main.c: 647: printHelp();
 11746  0007E2  ECFE  F014         	call	_printHelp	;wreg free
 11747                           
 11748                           ;main.c: 648: putsUSART((char *) "+OK\r\n");
 11749  0007E6  0E7F               	movlw	high STR_8
 11750  0007E8  0100               	movlb	0	; () banked
 11751  0007EA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11752  0007EC  0E80               	movlw	low STR_8
 11753  0007EE  6F61               	movwf	?_putsUSART& (0+255),b
 11754  0007F0  EC89  F027         	call	_putsUSART	;wreg free
 11755                           
 11756                           ;main.c: 649: }
 11757  0007F4  EF30  F00A         	goto	l10255
 11758  0007F8                     l9837:
 11759                           
 11760                           ; BSR set to: 1
 11761                           ;main.c: 651: else if (cmdbuf == stristr(cmdbuf, "FIND")) {
 11762  0007F8  0E01               	movlw	high _cmdbuf
 11763  0007FA  0100               	movlb	0	; () banked
 11764  0007FC  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11765  0007FE  0E04               	movlw	low _cmdbuf
 11766  000800  6F6D               	movwf	?_stristr& (0+255),b
 11767  000802  0E7F               	movlw	high STR_44
 11768  000804  6F70               	movwf	(?_stristr+3)& (0+255),b
 11769  000806  0EA3               	movlw	low STR_44
 11770  000808  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11771  00080A  EC0E  F025         	call	_stristr	;wreg free
 11772  00080E  EC40  F00A         	call	PL2	;call to abstracted procedure
 11773  000812  E104               	bnz	u12035
 11774  000814  0100               	movlb	0	; () banked
 11775  000816  516D               	movf	?_stristr& (0+255),w,b
 11776  000818  0101               	movlb	1	; () banked
 11777  00081A  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11778  00081C                     u12035:
 11779  00081C  E104               	bnz	l9841
 11780                           
 11781                           ; BSR set to: 1
 11782                           ;main.c: 652: findNodes();
 11783  00081E  ECED  F01D         	call	_findNodes	;wreg free
 11784                           
 11785                           ;main.c: 653: }
 11786  000822  EF30  F00A         	goto	l10255
 11787  000826                     l9841:
 11788                           
 11789                           ; BSR set to: 1
 11790                           ;main.c: 656: else if (cmdbuf == stristr(cmdbuf, "RREG")) {
 11791  000826  0E01               	movlw	high _cmdbuf
 11792  000828  0100               	movlb	0	; () banked
 11793  00082A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11794  00082C  0E04               	movlw	low _cmdbuf
 11795  00082E  6F6D               	movwf	?_stristr& (0+255),b
 11796  000830  0E7F               	movlw	high STR_45
 11797  000832  6F70               	movwf	(?_stristr+3)& (0+255),b
 11798  000834  0EA8               	movlw	low STR_45
 11799  000836  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11800  000838  EC0E  F025         	call	_stristr	;wreg free
 11801  00083C  EC40  F00A         	call	PL2	;call to abstracted procedure
 11802  000840  E104               	bnz	u12045
 11803  000842  0100               	movlb	0	; () banked
 11804  000844  516D               	movf	?_stristr& (0+255),w,b
 11805  000846  0101               	movlb	1	; () banked
 11806  000848  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11807  00084A                     u12045:
 11808  00084A  E001 D1B4          	bnz	l9971
 11809                           
 11810                           ; BSR set to: 1
 11811                           ;main.c: 658: uint8_t i;
 11812                           ;main.c: 659: uint8_t nodeid;
 11813                           ;main.c: 660: uint8_t page = 0;
 11814  00084E  0102               	movlb	2	; () banked
 11815  000850  6BAD               	clrf	doModeVerbose@page& (0+255),b
 11816                           
 11817                           ; BSR set to: 2
 11818                           ;main.c: 661: uint8_t reg;
 11819                           ;main.c: 662: uint8_t value;
 11820                           ;main.c: 663: uint8_t count = 1;
 11821  000852  0E01               	movlw	1
 11822  000854  6FAB               	movwf	doModeVerbose@count& (0+255),b
 11823                           
 11824                           ; BSR set to: 2
 11825                           ;main.c: 665: strcpy(cmdbuf, cmdbuf + 5);
 11826  000856  EC59  F00A         	call	PL8	;call to abstracted procedure
 11827  00085A  ECB7  F029         	call	_strcpy	;wreg free
 11828                           
 11829                           ;main.c: 666: char *p = strtok(cmdbuf, " ");
 11830  00085E  0E01               	movlw	high _cmdbuf
 11831  000860  ECAD  F00A         	call	PL34	;call to abstracted procedure
 11832  000864  EC79  F023         	call	_strtok	;wreg free
 11833  000868  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1143
 11834  00086C  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1143+1
 11835                           
 11836                           ; BSR set to: 0
 11837                           ;main.c: 667: if ((0) != p) {
 11838  000870  0102               	movlb	2	; () banked
 11839  000872  51B3               	movf	(doModeVerbose@p_1143+1)& (0+255),w,b
 11840  000874  11B2               	iorwf	doModeVerbose@p_1143& (0+255),w,b
 11841  000876  E00A               	bz	l9855
 11842                           
 11843                           ; BSR set to: 2
 11844                           ;main.c: 668: nodeid = atoi(p);
 11845  000878  C2B2  F066         	movff	doModeVerbose@p_1143,?_atoi
 11846  00087C  C2B3  F067         	movff	doModeVerbose@p_1143+1,?_atoi+1
 11847  000880  EC6A  F01C         	call	_atoi	;wreg free
 11848  000884  5166               	movf	?_atoi& (0+255),w,b
 11849  000886  0102               	movlb	2	; () banked
 11850  000888  6F8C               	movwf	doModeVerbose@nodeid& (0+255),b
 11851                           
 11852                           ;main.c: 669: } else {
 11853  00088A  D009               	goto	l9859
 11854  00088C                     l9855:
 11855                           
 11856                           ; BSR set to: 2
 11857                           ;main.c: 670: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 11858  00088C  0E7C               	movlw	high STR_47
 11859  00088E  0100               	movlb	0	; () banked
 11860  000890  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11861  000892  0E31               	movlw	low STR_47
 11862  000894  6F61               	movwf	?_putsUSART& (0+255),b
 11863  000896  EC89  F027         	call	_putsUSART	;wreg free
 11864  00089A  EF3F  F00A         	goto	l506
 11865  00089E                     l9859:
 11866                           
 11867                           ; BSR set to: 2
 11868                           ;main.c: 672: }
 11869                           ;main.c: 674: if ((0) != (p = strtok((0), " "))) {
 11870  00089E  EC9B  F00A         	call	PL26	;call to abstracted procedure
 11871  0008A2  EC79  F023         	call	_strtok	;wreg free
 11872  0008A6  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1143
 11873  0008AA  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1143+1
 11874  0008AE  0102               	movlb	2	; () banked
 11875  0008B0  51B3               	movf	(doModeVerbose@p_1143+1)& (0+255),w,b
 11876  0008B2  11B2               	iorwf	doModeVerbose@p_1143& (0+255),w,b
 11877  0008B4  E034               	bz	l9867
 11878                           
 11879                           ; BSR set to: 2
 11880                           ;main.c: 676: char *preg;
 11881                           ;main.c: 677: if (preg = strchr(p, ':')) {
 11882  0008B6  C2B2  F060         	movff	doModeVerbose@p_1143,?_strchr
 11883  0008BA  C2B3  F061         	movff	doModeVerbose@p_1143+1,?_strchr+1
 11884  0008BE  0100               	movlb	0	; () banked
 11885  0008C0  6B63               	clrf	(?_strchr+3)& (0+255),b
 11886  0008C2  0E3A               	movlw	58
 11887  0008C4  6F62               	movwf	(?_strchr+2)& (0+255),b
 11888  0008C6  ECCD  F026         	call	_strchr	;wreg free
 11889  0008CA  C060  F284         	movff	?_strchr,doModeVerbose@preg
 11890  0008CE  C061  F285         	movff	?_strchr+1,doModeVerbose@preg+1
 11891  0008D2  0102               	movlb	2	; () banked
 11892  0008D4  5185               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 11893  0008D6  1184               	iorwf	doModeVerbose@preg& (0+255),w,b
 11894  0008D8  E018               	bz	l9865
 11895                           
 11896                           ; BSR set to: 2
 11897                           ;main.c: 678: page = atoi(p);
 11898  0008DA  C2B2  F066         	movff	doModeVerbose@p_1143,?_atoi
 11899  0008DE  C2B3  F067         	movff	doModeVerbose@p_1143+1,?_atoi+1
 11900  0008E2  EC6A  F01C         	call	_atoi	;wreg free
 11901  0008E6  5166               	movf	?_atoi& (0+255),w,b
 11902  0008E8  0102               	movlb	2	; () banked
 11903  0008EA  6FAD               	movwf	doModeVerbose@page& (0+255),b
 11904                           
 11905                           ;main.c: 679: reg = atoi(preg + 1);
 11906  0008EC  2984               	incf	doModeVerbose@preg& (0+255),w,b
 11907  0008EE  0101               	movlb	1	; () banked
 11908  0008F0  6FB2               	movwf	??_doModeVerbose& (0+255),b
 11909  0008F2  0E00               	movlw	0
 11910  0008F4  0102               	movlb	2	; () banked
 11911  0008F6  2185               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 11912  0008F8  0101               	movlb	1	; () banked
 11913  0008FA  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 11914  0008FC  C1B2  F066         	movff	??_doModeVerbose,?_atoi
 11915  000900  C1B3  F067         	movff	??_doModeVerbose+1,?_atoi+1
 11916  000904  EC6A  F01C         	call	_atoi	;wreg free
 11917  000908  D006               	goto	L5
 11918  00090A                     l9865:
 11919                           
 11920                           ; BSR set to: 2
 11921                           ;main.c: 681: reg = atoi(p);
 11922  00090A  C2B2  F066         	movff	doModeVerbose@p_1143,?_atoi
 11923  00090E  C2B3  F067         	movff	doModeVerbose@p_1143+1,?_atoi+1
 11924  000912  EC6A  F01C         	call	_atoi	;wreg free
 11925  000916                     L5:
 11926  000916  5166               	movf	?_atoi& (0+255),w,b
 11927  000918  0102               	movlb	2	; () banked
 11928  00091A  6FAE               	movwf	doModeVerbose@reg& (0+255),b
 11929  00091C  D009               	goto	l9871
 11930  00091E                     l9867:
 11931                           
 11932                           ; BSR set to: 2
 11933                           ;main.c: 686: else {
 11934                           ;main.c: 687: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 11935  00091E  0E7A               	movlw	high STR_49
 11936  000920  0100               	movlb	0	; () banked
 11937  000922  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11938  000924  0EAC               	movlw	low STR_49
 11939  000926  6F61               	movwf	?_putsUSART& (0+255),b
 11940  000928  EC89  F027         	call	_putsUSART	;wreg free
 11941  00092C  EF3F  F00A         	goto	l506
 11942  000930                     l9871:
 11943                           
 11944                           ; BSR set to: 2
 11945                           ;main.c: 689: }
 11946                           ;main.c: 692: if ((0) != (p = strtok((0), " "))) {
 11947  000930  EC9B  F00A         	call	PL26	;call to abstracted procedure
 11948  000934  EC79  F023         	call	_strtok	;wreg free
 11949  000938  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1143
 11950  00093C  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1143+1
 11951  000940  0102               	movlb	2	; () banked
 11952  000942  51B3               	movf	(doModeVerbose@p_1143+1)& (0+255),w,b
 11953  000944  11B2               	iorwf	doModeVerbose@p_1143& (0+255),w,b
 11954  000946  E00D               	bz	l511
 11955                           
 11956                           ; BSR set to: 2
 11957                           ;main.c: 693: count = atoi(p);
 11958  000948  C2B2  F066         	movff	doModeVerbose@p_1143,?_atoi
 11959  00094C  C2B3  F067         	movff	doModeVerbose@p_1143+1,?_atoi+1
 11960  000950  EC6A  F01C         	call	_atoi	;wreg free
 11961  000954  5166               	movf	?_atoi& (0+255),w,b
 11962  000956  0102               	movlb	2	; () banked
 11963  000958  6FAB               	movwf	doModeVerbose@count& (0+255),b
 11964                           
 11965                           ; BSR set to: 2
 11966                           ;main.c: 694: if (0 == count) count = 1;
 11967  00095A  67AB               	tstfsz	doModeVerbose@count& (0+255),b
 11968  00095C  D002               	goto	l511
 11969                           
 11970                           ; BSR set to: 2
 11971  00095E  0E01               	movlw	1
 11972  000960  6FAB               	movwf	doModeVerbose@count& (0+255),b
 11973  000962                     l511:
 11974                           
 11975                           ; BSR set to: 2
 11976                           ;main.c: 695: }
 11977                           ;main.c: 697: BOOL rv = 1;
 11978  000962  0E01               	movlw	1
 11979  000964  6FA0               	movwf	doModeVerbose@rv& (0+255),b
 11980                           
 11981                           ; BSR set to: 2
 11982                           ;main.c: 698: for (i = 0; i < count; i++) {
 11983  000966  6BB0               	clrf	doModeVerbose@i_1137& (0+255),b
 11984  000968  D10E               	goto	l9963
 11985  00096A                     l9881:
 11986                           
 11987                           ; BSR set to: 2
 11988                           ;main.c: 700: if (readRegisterExtended(nodeid,
 11989                           ;main.c: 701: page,
 11990                           ;main.c: 702: (reg + i) & 0xff,
 11991                           ;main.c: 703: rwtimeout,
 11992                           ;main.c: 704: &value)) {
 11993  00096A  0100               	movlb	0	; () banked
 11994  00096C  C2AD  F0B6         	movff	doModeVerbose@page,?_readRegisterExtended
 11995  000970  6BB7               	clrf	(?_readRegisterExtended+1)& (0+255),b
 11996  000972  0102               	movlb	2	; () banked
 11997  000974  51AE               	movf	doModeVerbose@reg& (0+255),w,b
 11998  000976  25B0               	addwf	doModeVerbose@i_1137& (0+255),w,b
 11999  000978  0100               	movlb	0	; () banked
 12000  00097A  6FB8               	movwf	(?_readRegisterExtended+2)& (0+255),b
 12001  00097C  C103  F0B9         	movff	_rwtimeout,?_readRegisterExtended+3
 12002  000980  6BBA               	clrf	(?_readRegisterExtended+4)& (0+255),b
 12003  000982  0E02               	movlw	high doModeVerbose@value
 12004  000984  6FBC               	movwf	(?_readRegisterExtended+6)& (0+255),b
 12005  000986  0EB1               	movlw	low doModeVerbose@value
 12006  000988  6FBB               	movwf	(?_readRegisterExtended+5)& (0+255),b
 12007  00098A  0102               	movlb	2	; () banked
 12008  00098C  518C               	movf	doModeVerbose@nodeid& (0+255),w,b
 12009  00098E  EC6F  F01D         	call	_readRegisterExtended
 12010  000992  0900               	iorlw	0
 12011  000994  E101 D09D          	bz	l515
 12012                           
 12013                           ;main.c: 705: putsUSART((char *) "Value for reg ");
 12014  000998  0E7E               	movlw	high STR_51
 12015  00099A  0100               	movlb	0	; () banked
 12016  00099C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12017  00099E  0E5E               	movlw	low STR_51
 12018  0009A0  6F61               	movwf	?_putsUSART& (0+255),b
 12019  0009A2  EC89  F027         	call	_putsUSART	;wreg free
 12020                           
 12021                           ;main.c: 706: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 12022  0009A6  0101               	movlb	1	; () banked
 12023  0009A8  6700               	tstfsz	_bHex& (0+255),b
 12024  0009AA  D005               	goto	l9889
 12025                           
 12026                           ; BSR set to: 1
 12027  0009AC  0E7F               	movlw	high STR_53
 12028  0009AE  0102               	movlb	2	; () banked
 12029  0009B0  6F95               	movwf	(_doModeVerbose$1155+1)& (0+255),b
 12030  0009B2  0EEE               	movlw	low STR_53
 12031  0009B4  D004               	goto	L6
 12032  0009B6                     l9889:
 12033                           
 12034                           ; BSR set to: 1
 12035  0009B6  0E7F               	movlw	high STR_52
 12036  0009B8  0102               	movlb	2	; () banked
 12037  0009BA  6F95               	movwf	(_doModeVerbose$1155+1)& (0+255),b
 12038  0009BC  0E65               	movlw	low STR_52
 12039  0009BE                     L6:
 12040  0009BE  6F94               	movwf	_doModeVerbose$1155& (0+255),b
 12041                           
 12042                           ; BSR set to: 2
 12043  0009C0  0E01               	movlw	high _wrkbuf
 12044  0009C2  0100               	movlb	0	; () banked
 12045  0009C4  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12046  0009C6  0E54               	movlw	low _wrkbuf
 12047  0009C8  6F76               	movwf	?_sprintf& (0+255),b
 12048  0009CA  C294  F078         	movff	_doModeVerbose$1155,?_sprintf+2
 12049  0009CE  C295  F079         	movff	_doModeVerbose$1155+1,?_sprintf+3
 12050  0009D2  C2AD  F07A         	movff	doModeVerbose@page,?_sprintf+4
 12051  0009D6  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12052  0009D8  ECE8  F00A         	call	_sprintf	;wreg free
 12053                           
 12054                           ; BSR set to: 0
 12055                           ;main.c: 707: putsUSART(wrkbuf);
 12056  0009DC  0E01               	movlw	high _wrkbuf
 12057  0009DE  0100               	movlb	0	; () banked
 12058  0009E0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12059  0009E2  0E54               	movlw	low _wrkbuf
 12060  0009E4  6F61               	movwf	?_putsUSART& (0+255),b
 12061  0009E6  EC89  F027         	call	_putsUSART	;wreg free
 12062  0009EA                     l520:
 12063  0009EA  A2AC               	btfss	4012,1,c	;volatile
 12064  0009EC  D7FE               	goto	l520
 12065                           
 12066                           ;main.c: 709: WriteUSART(':');
 12067  0009EE  0E3A               	movlw	58
 12068  0009F0  EC56  F02A         	call	_WriteUSART
 12069                           
 12070                           ;main.c: 710: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 12071  0009F4  0101               	movlb	1	; () banked
 12072  0009F6  6700               	tstfsz	_bHex& (0+255),b
 12073  0009F8  D005               	goto	l9901
 12074                           
 12075                           ; BSR set to: 1
 12076  0009FA  0E7F               	movlw	high STR_53
 12077  0009FC  0102               	movlb	2	; () banked
 12078  0009FE  6F97               	movwf	(_doModeVerbose$1167+1)& (0+255),b
 12079  000A00  0EEE               	movlw	low STR_53
 12080  000A02  D004               	goto	L7
 12081  000A04                     l9901:
 12082                           
 12083                           ; BSR set to: 1
 12084  000A04  0E7F               	movlw	high STR_52
 12085  000A06  0102               	movlb	2	; () banked
 12086  000A08  6F97               	movwf	(_doModeVerbose$1167+1)& (0+255),b
 12087  000A0A  0E65               	movlw	low STR_52
 12088  000A0C                     L7:
 12089  000A0C  6F96               	movwf	_doModeVerbose$1167& (0+255),b
 12090                           
 12091                           ; BSR set to: 2
 12092  000A0E  0E01               	movlw	high _wrkbuf
 12093  000A10  0100               	movlb	0	; () banked
 12094  000A12  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12095  000A14  0E54               	movlw	low _wrkbuf
 12096  000A16  6F76               	movwf	?_sprintf& (0+255),b
 12097  000A18  C296  F078         	movff	_doModeVerbose$1167,?_sprintf+2
 12098  000A1C  C297  F079         	movff	_doModeVerbose$1167+1,?_sprintf+3
 12099  000A20  ECB6  F00A         	call	PL38	;call to abstracted procedure
 12100  000A24  ECE8  F00A         	call	_sprintf	;wreg free
 12101                           
 12102                           ; BSR set to: 0
 12103                           ;main.c: 711: putsUSART(wrkbuf);
 12104  000A28  0E01               	movlw	high _wrkbuf
 12105  000A2A  0100               	movlb	0	; () banked
 12106  000A2C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12107  000A2E  0E54               	movlw	low _wrkbuf
 12108  000A30  6F61               	movwf	?_putsUSART& (0+255),b
 12109  000A32  EC89  F027         	call	_putsUSART	;wreg free
 12110                           
 12111                           ;main.c: 712: putsUSART((char *) " = ");
 12112  000A36  0E7E               	movlw	high (STR_235+4)
 12113  000A38  0100               	movlb	0	; () banked
 12114  000A3A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12115  000A3C  0EEA               	movlw	low (STR_235+4)
 12116  000A3E  6F61               	movwf	?_putsUSART& (0+255),b
 12117  000A40  EC89  F027         	call	_putsUSART	;wreg free
 12118                           
 12119                           ;main.c: 713: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", value);
 12120  000A44  0101               	movlb	1	; () banked
 12121  000A46  6700               	tstfsz	_bHex& (0+255),b
 12122  000A48  D005               	goto	l9913
 12123                           
 12124                           ; BSR set to: 1
 12125  000A4A  0E7F               	movlw	high STR_53
 12126  000A4C  0102               	movlb	2	; () banked
 12127  000A4E  6F99               	movwf	(_doModeVerbose$1172+1)& (0+255),b
 12128  000A50  0EEE               	movlw	low STR_53
 12129  000A52  D004               	goto	L8
 12130  000A54                     l9913:
 12131                           
 12132                           ; BSR set to: 1
 12133  000A54  0E7F               	movlw	high STR_52
 12134  000A56  0102               	movlb	2	; () banked
 12135  000A58  6F99               	movwf	(_doModeVerbose$1172+1)& (0+255),b
 12136  000A5A  0E65               	movlw	low STR_52
 12137  000A5C                     L8:
 12138  000A5C  6F98               	movwf	_doModeVerbose$1172& (0+255),b
 12139                           
 12140                           ; BSR set to: 2
 12141  000A5E  0E01               	movlw	high _wrkbuf
 12142  000A60  0100               	movlb	0	; () banked
 12143  000A62  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12144  000A64  0E54               	movlw	low _wrkbuf
 12145  000A66  6F76               	movwf	?_sprintf& (0+255),b
 12146  000A68  C298  F078         	movff	_doModeVerbose$1172,?_sprintf+2
 12147  000A6C  C299  F079         	movff	_doModeVerbose$1172+1,?_sprintf+3
 12148  000A70  C2B1  F07A         	movff	doModeVerbose@value,?_sprintf+4
 12149  000A74  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12150  000A76  ECE8  F00A         	call	_sprintf	;wreg free
 12151                           
 12152                           ; BSR set to: 0
 12153                           ;main.c: 714: putsUSART(wrkbuf);
 12154  000A7A  0E01               	movlw	high _wrkbuf
 12155  000A7C  0100               	movlb	0	; () banked
 12156  000A7E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12157  000A80  0E54               	movlw	low _wrkbuf
 12158  000A82  6F61               	movwf	?_putsUSART& (0+255),b
 12159  000A84  EC89  F027         	call	_putsUSART	;wreg free
 12160  000A88                     l531:
 12161  000A88  A2AC               	btfss	4012,1,c	;volatile
 12162  000A8A  D7FE               	goto	l531
 12163                           
 12164                           ;main.c: 716: WriteUSART(' ');
 12165  000A8C  0E20               	movlw	32
 12166  000A8E  EC56  F02A         	call	_WriteUSART
 12167  000A92                     l534:
 12168  000A92  A2AC               	btfss	4012,1,c	;volatile
 12169  000A94  D7FE               	goto	l534
 12170                           
 12171                           ;main.c: 718: if ((value > 32) && (value < 127)) {
 12172  000A96  0E20               	movlw	32
 12173  000A98  0102               	movlb	2	; () banked
 12174  000A9A  65B1               	cpfsgt	doModeVerbose@value& (0+255),b
 12175  000A9C  D007               	goto	l9927
 12176                           
 12177                           ; BSR set to: 2
 12178  000A9E  0E7F               	movlw	127
 12179  000AA0  61B1               	cpfslt	doModeVerbose@value& (0+255),b
 12180  000AA2  D004               	goto	l9927
 12181                           
 12182                           ; BSR set to: 2
 12183                           ;main.c: 719: WriteUSART(value);
 12184  000AA4  51B1               	movf	doModeVerbose@value& (0+255),w,b
 12185  000AA6  EC56  F02A         	call	_WriteUSART
 12186                           
 12187                           ;main.c: 720: }
 12188  000AAA  D003               	goto	l539
 12189  000AAC                     l9927:
 12190                           
 12191                           ; BSR set to: 2
 12192                           ;main.c: 721: else {
 12193                           ;main.c: 722: WriteUSART('.');
 12194  000AAC  0E2E               	movlw	46
 12195  000AAE  EC56  F02A         	call	_WriteUSART
 12196  000AB2                     l539:
 12197  000AB2  A2AC               	btfss	4012,1,c	;volatile
 12198  000AB4  D7FE               	goto	l539
 12199                           
 12200                           ;main.c: 725: WriteUSART(' ');
 12201  000AB6  0E20               	movlw	32
 12202  000AB8  EC56  F02A         	call	_WriteUSART
 12203                           
 12204                           ;main.c: 726: printBinary(value);
 12205  000ABC  0102               	movlb	2	; () banked
 12206  000ABE  51B1               	movf	doModeVerbose@value& (0+255),w,b
 12207  000AC0  ECDC  F027         	call	_printBinary
 12208                           
 12209                           ; BSR set to: 0
 12210                           ;main.c: 727: putsUSART((char *) "\r\n");
 12211  000AC4  0E74               	movlw	high (STR_189+50)
 12212  000AC6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12213  000AC8  0EAE               	movlw	low (STR_189+50)
 12214  000ACA  6F61               	movwf	?_putsUSART& (0+255),b
 12215  000ACC  EC89  F027         	call	_putsUSART	;wreg free
 12216                           
 12217                           ;main.c: 728: }
 12218  000AD0  D058               	goto	l9961
 12219  000AD2                     l515:
 12220                           
 12221                           ;main.c: 729: else {
 12222                           ;main.c: 730: rv = 0;
 12223  000AD2  0102               	movlb	2	; () banked
 12224  000AD4  6BA0               	clrf	doModeVerbose@rv& (0+255),b
 12225                           
 12226                           ; BSR set to: 2
 12227                           ;main.c: 731: putsUSART((char *) "-ERROR - Unable to read register ");
 12228  000AD6  0E7A               	movlw	high STR_60
 12229  000AD8  0100               	movlb	0	; () banked
 12230  000ADA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12231  000ADC  0E06               	movlw	low STR_60
 12232  000ADE  6F61               	movwf	?_putsUSART& (0+255),b
 12233  000AE0  EC89  F027         	call	_putsUSART	;wreg free
 12234                           
 12235                           ;main.c: 732: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 12236  000AE4  0101               	movlb	1	; () banked
 12237  000AE6  6700               	tstfsz	_bHex& (0+255),b
 12238  000AE8  D005               	goto	l9941
 12239                           
 12240                           ; BSR set to: 1
 12241  000AEA  0E7F               	movlw	high STR_53
 12242  000AEC  0102               	movlb	2	; () banked
 12243  000AEE  6F9B               	movwf	(_doModeVerbose$1178+1)& (0+255),b
 12244  000AF0  0EEE               	movlw	low STR_53
 12245  000AF2  D004               	goto	L9
 12246  000AF4                     l9941:
 12247                           
 12248                           ; BSR set to: 1
 12249  000AF4  0E7F               	movlw	high STR_52
 12250  000AF6  0102               	movlb	2	; () banked
 12251  000AF8  6F9B               	movwf	(_doModeVerbose$1178+1)& (0+255),b
 12252  000AFA  0E65               	movlw	low STR_52
 12253  000AFC                     L9:
 12254  000AFC  6F9A               	movwf	_doModeVerbose$1178& (0+255),b
 12255                           
 12256                           ; BSR set to: 2
 12257  000AFE  0E01               	movlw	high _wrkbuf
 12258  000B00  0100               	movlb	0	; () banked
 12259  000B02  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12260  000B04  0E54               	movlw	low _wrkbuf
 12261  000B06  6F76               	movwf	?_sprintf& (0+255),b
 12262  000B08  C29A  F078         	movff	_doModeVerbose$1178,?_sprintf+2
 12263  000B0C  C29B  F079         	movff	_doModeVerbose$1178+1,?_sprintf+3
 12264  000B10  C2AD  F07A         	movff	doModeVerbose@page,?_sprintf+4
 12265  000B14  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12266  000B16  ECE8  F00A         	call	_sprintf	;wreg free
 12267                           
 12268                           ; BSR set to: 0
 12269                           ;main.c: 733: putsUSART(wrkbuf);
 12270  000B1A  0E01               	movlw	high _wrkbuf
 12271  000B1C  0100               	movlb	0	; () banked
 12272  000B1E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12273  000B20  0E54               	movlw	low _wrkbuf
 12274  000B22  6F61               	movwf	?_putsUSART& (0+255),b
 12275  000B24  EC89  F027         	call	_putsUSART	;wreg free
 12276  000B28                     l547:
 12277  000B28  A2AC               	btfss	4012,1,c	;volatile
 12278  000B2A  D7FE               	goto	l547
 12279                           
 12280                           ;main.c: 735: WriteUSART(':');
 12281  000B2C  0E3A               	movlw	58
 12282  000B2E  EC56  F02A         	call	_WriteUSART
 12283                           
 12284                           ;main.c: 736: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 12285  000B32  0101               	movlb	1	; () banked
 12286  000B34  6700               	tstfsz	_bHex& (0+255),b
 12287  000B36  D005               	goto	l9953
 12288                           
 12289                           ; BSR set to: 1
 12290  000B38  0E7F               	movlw	high STR_53
 12291  000B3A  0102               	movlb	2	; () banked
 12292  000B3C  6F9D               	movwf	(_doModeVerbose$1182+1)& (0+255),b
 12293  000B3E  0EEE               	movlw	low STR_53
 12294  000B40  D004               	goto	L10
 12295  000B42                     l9953:
 12296                           
 12297                           ; BSR set to: 1
 12298  000B42  0E7F               	movlw	high STR_52
 12299  000B44  0102               	movlb	2	; () banked
 12300  000B46  6F9D               	movwf	(_doModeVerbose$1182+1)& (0+255),b
 12301  000B48  0E65               	movlw	low STR_52
 12302  000B4A                     L10:
 12303  000B4A  6F9C               	movwf	_doModeVerbose$1182& (0+255),b
 12304                           
 12305                           ; BSR set to: 2
 12306  000B4C  0E01               	movlw	high _wrkbuf
 12307  000B4E  0100               	movlb	0	; () banked
 12308  000B50  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12309  000B52  0E54               	movlw	low _wrkbuf
 12310  000B54  6F76               	movwf	?_sprintf& (0+255),b
 12311  000B56  C29C  F078         	movff	_doModeVerbose$1182,?_sprintf+2
 12312  000B5A  C29D  F079         	movff	_doModeVerbose$1182+1,?_sprintf+3
 12313  000B5E  ECB6  F00A         	call	PL38	;call to abstracted procedure
 12314  000B62  ECE8  F00A         	call	_sprintf	;wreg free
 12315                           
 12316                           ; BSR set to: 0
 12317                           ;main.c: 737: putsUSART(wrkbuf);
 12318  000B66  0E01               	movlw	high _wrkbuf
 12319  000B68  0100               	movlb	0	; () banked
 12320  000B6A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12321  000B6C  0E54               	movlw	low _wrkbuf
 12322  000B6E  6F61               	movwf	?_putsUSART& (0+255),b
 12323  000B70  EC89  F027         	call	_putsUSART	;wreg free
 12324                           
 12325                           ;main.c: 738: putsUSART((char *) "\r\n");
 12326  000B74  0E74               	movlw	high (STR_189+50)
 12327  000B76  0100               	movlb	0	; () banked
 12328  000B78  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12329  000B7A  0EAE               	movlw	low (STR_189+50)
 12330  000B7C  6F61               	movwf	?_putsUSART& (0+255),b
 12331  000B7E  EC89  F027         	call	_putsUSART	;wreg free
 12332  000B82                     l9961:
 12333  000B82  0102               	movlb	2	; () banked
 12334  000B84  2BB0               	incf	doModeVerbose@i_1137& (0+255),f,b
 12335  000B86                     l9963:
 12336                           
 12337                           ; BSR set to: 2
 12338  000B86  51AB               	movf	doModeVerbose@count& (0+255),w,b
 12339  000B88  5DB0               	subwf	doModeVerbose@i_1137& (0+255),w,b
 12340  000B8A  E201 D6EE          	bnc	l9881
 12341                           
 12342                           ; BSR set to: 2
 12343                           ;main.c: 739: }
 12344                           ;main.c: 740: }
 12345                           ;main.c: 742: if (rv) {
 12346  000B8E  51A0               	movf	doModeVerbose@rv& (0+255),w,b
 12347  000B90  E009               	bz	l9969
 12348                           
 12349                           ; BSR set to: 2
 12350                           ;main.c: 743: putsUSART((char *) "+OK\r\n");
 12351  000B92  0E7F               	movlw	high STR_8
 12352  000B94  0100               	movlb	0	; () banked
 12353  000B96  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12354  000B98  0E80               	movlw	low STR_8
 12355  000B9A  6F61               	movwf	?_putsUSART& (0+255),b
 12356  000B9C  EC89  F027         	call	_putsUSART	;wreg free
 12357                           
 12358                           ;main.c: 744: }
 12359  000BA0  EF30  F00A         	goto	l10255
 12360  000BA4                     l9969:
 12361                           
 12362                           ; BSR set to: 2
 12363                           ;main.c: 745: else {
 12364                           ;main.c: 746: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 12365  000BA4  0E74               	movlw	high STR_67
 12366  000BA6  0100               	movlb	0	; () banked
 12367  000BA8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12368  000BAA  0E46               	movlw	low STR_67
 12369  000BAC  6F61               	movwf	?_putsUSART& (0+255),b
 12370  000BAE  EC89  F027         	call	_putsUSART	;wreg free
 12371  000BB2  EF30  F00A         	goto	l10255
 12372  000BB6                     l9971:
 12373                           
 12374                           ; BSR set to: 1
 12375                           ;main.c: 752: else if (cmdbuf == stristr(cmdbuf, "WREG")) {
 12376  000BB6  0E01               	movlw	high _cmdbuf
 12377  000BB8  0100               	movlb	0	; () banked
 12378  000BBA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12379  000BBC  0E04               	movlw	low _cmdbuf
 12380  000BBE  6F6D               	movwf	?_stristr& (0+255),b
 12381  000BC0  0E7F               	movlw	high STR_68
 12382  000BC2  6F70               	movwf	(?_stristr+3)& (0+255),b
 12383  000BC4  0EAD               	movlw	low STR_68
 12384  000BC6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12385  000BC8  EC0E  F025         	call	_stristr	;wreg free
 12386  000BCC  EC40  F00A         	call	PL2	;call to abstracted procedure
 12387  000BD0  E104               	bnz	u12255
 12388  000BD2  0100               	movlb	0	; () banked
 12389  000BD4  516D               	movf	?_stristr& (0+255),w,b
 12390  000BD6  0101               	movlb	1	; () banked
 12391  000BD8  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12392  000BDA                     u12255:
 12393  000BDA  E001 D0AF          	bnz	l10013
 12394                           
 12395                           ; BSR set to: 1
 12396                           ;main.c: 754: uint8_t nodeid;
 12397                           ;main.c: 755: uint8_t page = 0;
 12398  000BDE  0102               	movlb	2	; () banked
 12399  000BE0  6BA1               	clrf	doModeVerbose@page_1188& (0+255),b
 12400                           
 12401                           ; BSR set to: 2
 12402                           ;main.c: 756: uint8_t reg;
 12403                           ;main.c: 757: uint8_t value;
 12404                           ;main.c: 759: strcpy(cmdbuf, cmdbuf + 5);
 12405  000BE2  EC59  F00A         	call	PL8	;call to abstracted procedure
 12406  000BE6  ECB7  F029         	call	_strcpy	;wreg free
 12407                           
 12408                           ;main.c: 760: char *p = strtok(cmdbuf, " ");
 12409  000BEA  0E01               	movlw	high _cmdbuf
 12410  000BEC  ECAD  F00A         	call	PL34	;call to abstracted procedure
 12411  000BF0  EC79  F023         	call	_strtok	;wreg free
 12412  000BF4  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1191
 12413  000BF8  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1191+1
 12414                           
 12415                           ; BSR set to: 0
 12416                           ;main.c: 761: if ((0) != p) {
 12417  000BFC  0102               	movlb	2	; () banked
 12418  000BFE  51B5               	movf	(doModeVerbose@p_1191+1)& (0+255),w,b
 12419  000C00  11B4               	iorwf	doModeVerbose@p_1191& (0+255),w,b
 12420  000C02  E00A               	bz	l9983
 12421                           
 12422                           ; BSR set to: 2
 12423                           ;main.c: 762: nodeid = atoi(p);
 12424  000C04  C2B4  F066         	movff	doModeVerbose@p_1191,?_atoi
 12425  000C08  C2B5  F067         	movff	doModeVerbose@p_1191+1,?_atoi+1
 12426  000C0C  EC6A  F01C         	call	_atoi	;wreg free
 12427  000C10  5166               	movf	?_atoi& (0+255),w,b
 12428  000C12  0102               	movlb	2	; () banked
 12429  000C14  6F8D               	movwf	doModeVerbose@nodeid_1187& (0+255),b
 12430                           
 12431                           ;main.c: 763: }
 12432  000C16  D009               	goto	l9987
 12433  000C18                     l9983:
 12434                           
 12435                           ; BSR set to: 2
 12436                           ;main.c: 764: else {
 12437                           ;main.c: 765: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 12438  000C18  0E7C               	movlw	high STR_47
 12439  000C1A  0100               	movlb	0	; () banked
 12440  000C1C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12441  000C1E  0E31               	movlw	low STR_47
 12442  000C20  6F61               	movwf	?_putsUSART& (0+255),b
 12443  000C22  EC89  F027         	call	_putsUSART	;wreg free
 12444  000C26  EF3F  F00A         	goto	l506
 12445  000C2A                     l9987:
 12446                           
 12447                           ; BSR set to: 2
 12448                           ;main.c: 767: }
 12449                           ;main.c: 769: if ((0) != (p = strtok((0), " "))) {
 12450  000C2A  EC9B  F00A         	call	PL26	;call to abstracted procedure
 12451  000C2E  EC79  F023         	call	_strtok	;wreg free
 12452  000C32  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1191
 12453  000C36  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1191+1
 12454  000C3A  0102               	movlb	2	; () banked
 12455  000C3C  51B5               	movf	(doModeVerbose@p_1191+1)& (0+255),w,b
 12456  000C3E  11B4               	iorwf	doModeVerbose@p_1191& (0+255),w,b
 12457  000C40  E034               	bz	l9995
 12458                           
 12459                           ; BSR set to: 2
 12460                           ;main.c: 771: char *preg;
 12461                           ;main.c: 772: if (preg = strchr(p, ':')) {
 12462  000C42  C2B4  F060         	movff	doModeVerbose@p_1191,?_strchr
 12463  000C46  C2B5  F061         	movff	doModeVerbose@p_1191+1,?_strchr+1
 12464  000C4A  0100               	movlb	0	; () banked
 12465  000C4C  6B63               	clrf	(?_strchr+3)& (0+255),b
 12466  000C4E  0E3A               	movlw	58
 12467  000C50  6F62               	movwf	(?_strchr+2)& (0+255),b
 12468  000C52  ECCD  F026         	call	_strchr	;wreg free
 12469  000C56  C060  F286         	movff	?_strchr,doModeVerbose@preg_1195
 12470  000C5A  C061  F287         	movff	?_strchr+1,doModeVerbose@preg_1195+1
 12471  000C5E  0102               	movlb	2	; () banked
 12472  000C60  5187               	movf	(doModeVerbose@preg_1195+1)& (0+255),w,b
 12473  000C62  1186               	iorwf	doModeVerbose@preg_1195& (0+255),w,b
 12474  000C64  E018               	bz	l9993
 12475                           
 12476                           ; BSR set to: 2
 12477                           ;main.c: 773: page = atoi(p);
 12478  000C66  C2B4  F066         	movff	doModeVerbose@p_1191,?_atoi
 12479  000C6A  C2B5  F067         	movff	doModeVerbose@p_1191+1,?_atoi+1
 12480  000C6E  EC6A  F01C         	call	_atoi	;wreg free
 12481  000C72  5166               	movf	?_atoi& (0+255),w,b
 12482  000C74  0102               	movlb	2	; () banked
 12483  000C76  6FA1               	movwf	doModeVerbose@page_1188& (0+255),b
 12484                           
 12485                           ;main.c: 774: reg = atoi(preg + 1);
 12486  000C78  2986               	incf	doModeVerbose@preg_1195& (0+255),w,b
 12487  000C7A  0101               	movlb	1	; () banked
 12488  000C7C  6FB2               	movwf	??_doModeVerbose& (0+255),b
 12489  000C7E  0E00               	movlw	0
 12490  000C80  0102               	movlb	2	; () banked
 12491  000C82  2187               	addwfc	(doModeVerbose@preg_1195+1)& (0+255),w,b
 12492  000C84  0101               	movlb	1	; () banked
 12493  000C86  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 12494  000C88  C1B2  F066         	movff	??_doModeVerbose,?_atoi
 12495  000C8C  C1B3  F067         	movff	??_doModeVerbose+1,?_atoi+1
 12496  000C90  EC6A  F01C         	call	_atoi	;wreg free
 12497  000C94  D006               	goto	L11
 12498  000C96                     l9993:
 12499                           
 12500                           ; BSR set to: 2
 12501                           ;main.c: 776: else {
 12502                           ;main.c: 777: reg = atoi(p);
 12503  000C96  C2B4  F066         	movff	doModeVerbose@p_1191,?_atoi
 12504  000C9A  C2B5  F067         	movff	doModeVerbose@p_1191+1,?_atoi+1
 12505  000C9E  EC6A  F01C         	call	_atoi	;wreg free
 12506  000CA2                     L11:
 12507  000CA2  5166               	movf	?_atoi& (0+255),w,b
 12508  000CA4  0102               	movlb	2	; () banked
 12509  000CA6  6FA2               	movwf	doModeVerbose@reg_1189& (0+255),b
 12510  000CA8  D008               	goto	l9999
 12511  000CAA                     l9995:
 12512                           
 12513                           ; BSR set to: 2
 12514                           ;main.c: 781: else {
 12515                           ;main.c: 782: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 12516  000CAA  0E7A               	movlw	high STR_49
 12517  000CAC  0100               	movlb	0	; () banked
 12518  000CAE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12519  000CB0  0EAC               	movlw	low STR_49
 12520  000CB2  6F61               	movwf	?_putsUSART& (0+255),b
 12521  000CB4  EC89  F027         	call	_putsUSART	;wreg free
 12522  000CB8  D3E2               	goto	l506
 12523  000CBA                     l9999:
 12524                           
 12525                           ; BSR set to: 2
 12526                           ;main.c: 784: }
 12527                           ;main.c: 787: if ((0) != (p = strtok((0), " "))) {
 12528  000CBA  EC9B  F00A         	call	PL26	;call to abstracted procedure
 12529  000CBE  EC79  F023         	call	_strtok	;wreg free
 12530  000CC2  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1191
 12531  000CC6  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1191+1
 12532  000CCA  0102               	movlb	2	; () banked
 12533  000CCC  51B5               	movf	(doModeVerbose@p_1191+1)& (0+255),w,b
 12534  000CCE  11B4               	iorwf	doModeVerbose@p_1191& (0+255),w,b
 12535  000CD0  E00A               	bz	l10003
 12536                           
 12537                           ; BSR set to: 2
 12538                           ;main.c: 788: value = atoi(p);
 12539  000CD2  C2B4  F066         	movff	doModeVerbose@p_1191,?_atoi
 12540  000CD6  C2B5  F067         	movff	doModeVerbose@p_1191+1,?_atoi+1
 12541  000CDA  EC6A  F01C         	call	_atoi	;wreg free
 12542  000CDE  5166               	movf	?_atoi& (0+255),w,b
 12543  000CE0  0102               	movlb	2	; () banked
 12544  000CE2  6FA9               	movwf	doModeVerbose@value_1190& (0+255),b
 12545                           
 12546                           ;main.c: 789: }
 12547  000CE4  D008               	goto	l10007
 12548  000CE6                     l10003:
 12549                           
 12550                           ; BSR set to: 2
 12551                           ;main.c: 790: else {
 12552                           ;main.c: 791: putsUSART((char *) "-ERROR - Need a value\r\n");
 12553  000CE6  0E7C               	movlw	high STR_74
 12554  000CE8  0100               	movlb	0	; () banked
 12555  000CEA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12556  000CEC  0E61               	movlw	low STR_74
 12557  000CEE  6F61               	movwf	?_putsUSART& (0+255),b
 12558  000CF0  EC89  F027         	call	_putsUSART	;wreg free
 12559  000CF4  D3C4               	goto	l506
 12560  000CF6                     l10007:
 12561                           
 12562                           ; BSR set to: 2
 12563                           ;main.c: 793: }
 12564                           ;main.c: 795: if (writeRegisterExtended(nodeid,
 12565                           ;main.c: 796: page,
 12566                           ;main.c: 797: reg,
 12567                           ;main.c: 798: rwtimeout,
 12568                           ;main.c: 799: &value)) {
 12569  000CF6  0100               	movlb	0	; () banked
 12570  000CF8  C2A1  F0B6         	movff	doModeVerbose@page_1188,?_writeRegisterExtended
 12571  000CFC  6BB7               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 12572  000CFE  C2A2  F0B8         	movff	doModeVerbose@reg_1189,?_writeRegisterExtended+2
 12573  000D02  C103  F0B9         	movff	_rwtimeout,?_writeRegisterExtended+3
 12574  000D06  6BBA               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 12575  000D08  0E02               	movlw	high doModeVerbose@value_1190
 12576  000D0A  6FBC               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 12577  000D0C  0EA9               	movlw	low doModeVerbose@value_1190
 12578  000D0E  6FBB               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 12579  000D10  0102               	movlb	2	; () banked
 12580  000D12  518D               	movf	doModeVerbose@nodeid_1187& (0+255),w,b
 12581  000D14  ECE7  F01B         	call	_writeRegisterExtended
 12582  000D18  0900               	iorlw	0
 12583  000D1A  E008               	bz	l10011
 12584                           
 12585                           ;main.c: 800: putsUSART((char *) "+OK - Value written successfully\r\n");
 12586  000D1C  0E79               	movlw	high STR_75
 12587  000D1E  0100               	movlb	0	; () banked
 12588  000D20  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12589  000D22  0EC1               	movlw	low STR_75
 12590  000D24  6F61               	movwf	?_putsUSART& (0+255),b
 12591  000D26  EC89  F027         	call	_putsUSART	;wreg free
 12592                           
 12593                           ;main.c: 801: }
 12594  000D2A  D39A               	goto	l10255
 12595  000D2C                     l10011:
 12596                           
 12597                           ;main.c: 802: else {
 12598                           ;main.c: 803: putsUSART((char *) "-ERROR - Failed to write value\r\n");
 12599  000D2C  0E7A               	movlw	high STR_76
 12600  000D2E  0100               	movlb	0	; () banked
 12601  000D30  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12602  000D32  0E8B               	movlw	low STR_76
 12603  000D34  6F61               	movwf	?_putsUSART& (0+255),b
 12604  000D36  EC89  F027         	call	_putsUSART	;wreg free
 12605  000D3A  D392               	goto	l10255
 12606  000D3C                     l10013:
 12607                           
 12608                           ; BSR set to: 1
 12609                           ;main.c: 809: else if (cmdbuf == stristr(cmdbuf, "INFO")) {
 12610  000D3C  0E01               	movlw	high _cmdbuf
 12611  000D3E  0100               	movlb	0	; () banked
 12612  000D40  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12613  000D42  0E04               	movlw	low _cmdbuf
 12614  000D44  6F6D               	movwf	?_stristr& (0+255),b
 12615  000D46  0E7F               	movlw	high STR_77
 12616  000D48  6F70               	movwf	(?_stristr+3)& (0+255),b
 12617  000D4A  0EBC               	movlw	low STR_77
 12618  000D4C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12619  000D4E  EC0E  F025         	call	_stristr	;wreg free
 12620  000D52  DB96               	call	PL2	;call to abstracted procedure
 12621  000D54  E104               	bnz	u12315
 12622  000D56  0100               	movlb	0	; () banked
 12623  000D58  516D               	movf	?_stristr& (0+255),w,b
 12624  000D5A  0101               	movlb	1	; () banked
 12625  000D5C  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12626  000D5E                     u12315:
 12627  000D5E  E157               	bnz	l10039
 12628                           
 12629                           ; BSR set to: 1
 12630                           ;main.c: 810: uint8_t nodeid;
 12631                           ;main.c: 812: strcpy(cmdbuf, cmdbuf + 9);
 12632  000D60  0E01               	movlw	high _cmdbuf
 12633  000D62  0100               	movlb	0	; () banked
 12634  000D64  6F61               	movwf	(?_strcpy+1)& (0+255),b
 12635  000D66  0E04               	movlw	low _cmdbuf
 12636  000D68  6F60               	movwf	?_strcpy& (0+255),b
 12637  000D6A  0E0D               	movlw	low (_cmdbuf+9)
 12638  000D6C  0101               	movlb	1	; () banked
 12639  000D6E  6FB2               	movwf	??_doModeVerbose& (0+255),b
 12640  000D70  0E01               	movlw	high (_cmdbuf+9)
 12641  000D72  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 12642  000D74  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 12643  000D78  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 12644  000D7C  ECB7  F029         	call	_strcpy	;wreg free
 12645                           
 12646                           ;main.c: 813: nodeid = atoi(cmdbuf);
 12647  000D80  0E01               	movlw	high _cmdbuf
 12648  000D82  0100               	movlb	0	; () banked
 12649  000D84  6F67               	movwf	(?_atoi+1)& (0+255),b
 12650  000D86  0E04               	movlw	low _cmdbuf
 12651  000D88  6F66               	movwf	?_atoi& (0+255),b
 12652  000D8A  EC6A  F01C         	call	_atoi	;wreg free
 12653  000D8E  5166               	movf	?_atoi& (0+255),w,b
 12654  000D90  0102               	movlb	2	; () banked
 12655  000D92  6FAF               	movwf	doModeVerbose@nodeid_1202& (0+255),b
 12656                           
 12657                           ; BSR set to: 2
 12658                           ;main.c: 815: putsUSART((char *) "Info for node id = ");
 12659  000D94  0E7D               	movlw	high STR_78
 12660  000D96  0100               	movlb	0	; () banked
 12661  000D98  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12662  000D9A  0EAB               	movlw	low STR_78
 12663  000D9C  6F61               	movwf	?_putsUSART& (0+255),b
 12664  000D9E  EC89  F027         	call	_putsUSART	;wreg free
 12665                           
 12666                           ;main.c: 816: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", nodeid);
 12667  000DA2  0101               	movlb	1	; () banked
 12668  000DA4  6700               	tstfsz	_bHex& (0+255),b
 12669  000DA6  D005               	goto	l10025
 12670                           
 12671                           ; BSR set to: 1
 12672  000DA8  0E7F               	movlw	high STR_53
 12673  000DAA  0102               	movlb	2	; () banked
 12674  000DAC  6F9F               	movwf	(_doModeVerbose$1207+1)& (0+255),b
 12675  000DAE  0EEE               	movlw	low STR_53
 12676  000DB0  D004               	goto	L12
 12677  000DB2                     l10025:
 12678                           
 12679                           ; BSR set to: 1
 12680  000DB2  0E7F               	movlw	high STR_52
 12681  000DB4  0102               	movlb	2	; () banked
 12682  000DB6  6F9F               	movwf	(_doModeVerbose$1207+1)& (0+255),b
 12683  000DB8  0E65               	movlw	low STR_52
 12684  000DBA                     L12:
 12685  000DBA  6F9E               	movwf	_doModeVerbose$1207& (0+255),b
 12686                           
 12687                           ; BSR set to: 2
 12688  000DBC  0E01               	movlw	high _wrkbuf
 12689  000DBE  0100               	movlb	0	; () banked
 12690  000DC0  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12691  000DC2  0E54               	movlw	low _wrkbuf
 12692  000DC4  6F76               	movwf	?_sprintf& (0+255),b
 12693  000DC6  C29E  F078         	movff	_doModeVerbose$1207,?_sprintf+2
 12694  000DCA  C29F  F079         	movff	_doModeVerbose$1207+1,?_sprintf+3
 12695  000DCE  C2AF  F07A         	movff	doModeVerbose@nodeid_1202,?_sprintf+4
 12696  000DD2  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12697  000DD4  ECE8  F00A         	call	_sprintf	;wreg free
 12698                           
 12699                           ; BSR set to: 0
 12700                           ;main.c: 817: putsUSART(wrkbuf);
 12701  000DD8  0E01               	movlw	high _wrkbuf
 12702  000DDA  0100               	movlb	0	; () banked
 12703  000DDC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12704  000DDE  0E54               	movlw	low _wrkbuf
 12705  000DE0  6F61               	movwf	?_putsUSART& (0+255),b
 12706  000DE2  EC89  F027         	call	_putsUSART	;wreg free
 12707                           
 12708                           ;main.c: 818: putsUSART((char *) "\r\n");
 12709  000DE6  0E74               	movlw	high (STR_189+50)
 12710  000DE8  0100               	movlb	0	; () banked
 12711  000DEA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12712  000DEC  0EAE               	movlw	low (STR_189+50)
 12713  000DEE  6F61               	movwf	?_putsUSART& (0+255),b
 12714  000DF0  EC89  F027         	call	_putsUSART	;wreg free
 12715                           
 12716                           ;main.c: 819: printNodeFirmwareVersion(nodeid);
 12717  000DF4  0102               	movlb	2	; () banked
 12718  000DF6  51AF               	movf	doModeVerbose@nodeid_1202& (0+255),w,b
 12719  000DF8  ECB1  F01F         	call	_printNodeFirmwareVersion
 12720                           
 12721                           ;main.c: 820: printGUID(nodeid);
 12722  000DFC  0102               	movlb	2	; () banked
 12723  000DFE  51AF               	movf	doModeVerbose@nodeid_1202& (0+255),w,b
 12724  000E00  ECED  F01C         	call	_printGUID
 12725                           
 12726                           ;main.c: 821: printMDF(nodeid);
 12727  000E04  0102               	movlb	2	; () banked
 12728  000E06  51AF               	movf	doModeVerbose@nodeid_1202& (0+255),w,b
 12729  000E08  EC2E  F023         	call	_printMDF
 12730                           
 12731                           ;main.c: 822: }
 12732  000E0C  D329               	goto	l10255
 12733  000E0E                     l10039:
 12734                           
 12735                           ; BSR set to: 1
 12736                           ;main.c: 826: else if (cmdbuf == stristr(cmdbuf, "FILTER")) {
 12737  000E0E  0E01               	movlw	high _cmdbuf
 12738  000E10  0100               	movlb	0	; () banked
 12739  000E12  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12740  000E14  0E04               	movlw	low _cmdbuf
 12741  000E16  6F6D               	movwf	?_stristr& (0+255),b
 12742  000E18  0E7F               	movlw	high STR_82
 12743  000E1A  6F70               	movwf	(?_stristr+3)& (0+255),b
 12744  000E1C  0E57               	movlw	low STR_82
 12745  000E1E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12746  000E20  EC0E  F025         	call	_stristr	;wreg free
 12747  000E24  DB2D               	call	PL2	;call to abstracted procedure
 12748  000E26  E104               	bnz	u12335
 12749  000E28  0100               	movlb	0	; () banked
 12750  000E2A  516D               	movf	?_stristr& (0+255),w,b
 12751  000E2C  0101               	movlb	1	; () banked
 12752  000E2E  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12753  000E30                     u12335:
 12754  000E30  E001 D0CC          	bnz	l10105
 12755                           
 12756                           ; BSR set to: 1
 12757                           ;main.c: 828: uint8_t filterno;
 12758                           ;main.c: 829: uint8_t filter_priority;
 12759                           ;main.c: 830: uint16_t filter_class;
 12760                           ;main.c: 831: uint8_t filter_type;
 12761                           ;main.c: 832: uint8_t filter_nodeid;
 12762                           ;main.c: 834: strcpy(cmdbuf, cmdbuf + 8);
 12763  000E34  0E01               	movlw	high _cmdbuf
 12764  000E36  DB71               	call	PL12	;call to abstracted procedure
 12765  000E38  ECB7  F029         	call	_strcpy	;wreg free
 12766                           
 12767                           ;main.c: 835: char *p = strtok(cmdbuf, ",");
 12768  000E3C  DB84               	call	PL30	;call to abstracted procedure
 12769  000E3E  EC79  F023         	call	_strtok	;wreg free
 12770  000E42  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1215
 12771  000E46  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1215+1
 12772                           
 12773                           ; BSR set to: 0
 12774                           ;main.c: 836: if ((0) != p) {
 12775  000E4A  0102               	movlb	2	; () banked
 12776  000E4C  51BA               	movf	(doModeVerbose@p_1215+1)& (0+255),w,b
 12777  000E4E  11B9               	iorwf	doModeVerbose@p_1215& (0+255),w,b
 12778  000E50  E014               	bz	l10055
 12779                           
 12780                           ; BSR set to: 2
 12781                           ;main.c: 837: filterno = atoi(p);
 12782  000E52  C2B9  F066         	movff	doModeVerbose@p_1215,?_atoi
 12783  000E56  C2BA  F067         	movff	doModeVerbose@p_1215+1,?_atoi+1
 12784  000E5A  EC6A  F01C         	call	_atoi	;wreg free
 12785  000E5E  5166               	movf	?_atoi& (0+255),w,b
 12786  000E60  0102               	movlb	2	; () banked
 12787  000E62  6FA7               	movwf	doModeVerbose@filterno& (0+255),b
 12788                           
 12789                           ; BSR set to: 2
 12790                           ;main.c: 838: if (filterno > 15) {
 12791  000E64  0E0F               	movlw	15
 12792  000E66  65A7               	cpfsgt	doModeVerbose@filterno& (0+255),b
 12793  000E68  D010               	goto	l10059
 12794                           
 12795                           ; BSR set to: 2
 12796                           ;main.c: 839: putsUSART((char *) "-ERROR - Filter number can only be set to a value betw
      +                          een 0-15.\r\n");
 12797  000E6A  0E72               	movlw	high STR_84
 12798  000E6C  0100               	movlb	0	; () banked
 12799  000E6E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12800  000E70  0E40               	movlw	low STR_84
 12801  000E72  6F61               	movwf	?_putsUSART& (0+255),b
 12802  000E74  EC89  F027         	call	_putsUSART	;wreg free
 12803  000E78  D302               	goto	l506
 12804  000E7A                     l10055:
 12805                           
 12806                           ; BSR set to: 2
 12807                           ;main.c: 843: else {
 12808                           ;main.c: 844: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 12809  000E7A  0E78               	movlw	high STR_85
 12810  000E7C  0100               	movlb	0	; () banked
 12811  000E7E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12812  000E80  0E1E               	movlw	low STR_85
 12813  000E82  6F61               	movwf	?_putsUSART& (0+255),b
 12814  000E84  EC89  F027         	call	_putsUSART	;wreg free
 12815  000E88  D2FA               	goto	l506
 12816  000E8A                     l10059:
 12817                           
 12818                           ; BSR set to: 2
 12819                           ;main.c: 846: }
 12820                           ;main.c: 849: p = strtok((0), ",");
 12821  000E8A  DB04               	call	PL4	;call to abstracted procedure
 12822  000E8C  EC79  F023         	call	_strtok	;wreg free
 12823  000E90  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1215
 12824  000E94  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1215+1
 12825                           
 12826                           ; BSR set to: 0
 12827                           ;main.c: 850: if ((0) != p) {
 12828  000E98  0102               	movlb	2	; () banked
 12829  000E9A  51BA               	movf	(doModeVerbose@p_1215+1)& (0+255),w,b
 12830  000E9C  11B9               	iorwf	doModeVerbose@p_1215& (0+255),w,b
 12831  000E9E  E00A               	bz	l10065
 12832                           
 12833                           ; BSR set to: 2
 12834                           ;main.c: 851: filter_priority = atoi(p);
 12835  000EA0  C2B9  F066         	movff	doModeVerbose@p_1215,?_atoi
 12836  000EA4  C2BA  F067         	movff	doModeVerbose@p_1215+1,?_atoi+1
 12837  000EA8  EC6A  F01C         	call	_atoi	;wreg free
 12838  000EAC  5166               	movf	?_atoi& (0+255),w,b
 12839  000EAE  0102               	movlb	2	; () banked
 12840  000EB0  6F8E               	movwf	doModeVerbose@filter_priority& (0+255),b
 12841                           
 12842                           ;main.c: 852: }
 12843  000EB2  D008               	goto	l10069
 12844  000EB4                     l10065:
 12845                           
 12846                           ; BSR set to: 2
 12847                           ;main.c: 853: else {
 12848                           ;main.c: 854: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 12849  000EB4  0E77               	movlw	high STR_87
 12850  000EB6  0100               	movlb	0	; () banked
 12851  000EB8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12852  000EBA  0E53               	movlw	low STR_87
 12853  000EBC  6F61               	movwf	?_putsUSART& (0+255),b
 12854  000EBE  EC89  F027         	call	_putsUSART	;wreg free
 12855  000EC2  D2DD               	goto	l506
 12856  000EC4                     l10069:
 12857                           
 12858                           ; BSR set to: 2
 12859                           ;main.c: 856: }
 12860                           ;main.c: 859: p = strtok((0), ",");
 12861  000EC4  DAE7               	call	PL4	;call to abstracted procedure
 12862  000EC6  EC79  F023         	call	_strtok	;wreg free
 12863  000ECA  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1215
 12864  000ECE  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1215+1
 12865                           
 12866                           ; BSR set to: 0
 12867                           ;main.c: 860: if ((0) != p) {
 12868  000ED2  0102               	movlb	2	; () banked
 12869  000ED4  51BA               	movf	(doModeVerbose@p_1215+1)& (0+255),w,b
 12870  000ED6  11B9               	iorwf	doModeVerbose@p_1215& (0+255),w,b
 12871  000ED8  E00B               	bz	l10075
 12872                           
 12873                           ; BSR set to: 2
 12874                           ;main.c: 861: filter_class = atoi(p);
 12875  000EDA  C2B9  F066         	movff	doModeVerbose@p_1215,?_atoi
 12876  000EDE  C2BA  F067         	movff	doModeVerbose@p_1215+1,?_atoi+1
 12877  000EE2  EC6A  F01C         	call	_atoi	;wreg free
 12878  000EE6  C066  F288         	movff	?_atoi,doModeVerbose@filter_class
 12879  000EEA  C067  F289         	movff	?_atoi+1,doModeVerbose@filter_class+1
 12880                           
 12881                           ;main.c: 862: }
 12882  000EEE  D008               	goto	l10079
 12883  000EF0                     l10075:
 12884                           
 12885                           ; BSR set to: 2
 12886                           ;main.c: 863: else {
 12887                           ;main.c: 864: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 12888  000EF0  0E78               	movlw	high STR_89
 12889  000EF2  0100               	movlb	0	; () banked
 12890  000EF4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12891  000EF6  0EBA               	movlw	low STR_89
 12892  000EF8  6F61               	movwf	?_putsUSART& (0+255),b
 12893  000EFA  EC89  F027         	call	_putsUSART	;wreg free
 12894  000EFE  D2BF               	goto	l506
 12895  000F00                     l10079:
 12896                           
 12897                           ; BSR set to: 0
 12898                           ;main.c: 866: }
 12899                           ;main.c: 869: p = strtok((0), ",");
 12900  000F00  DAD1               	call	PL6	;call to abstracted procedure
 12901  000F02  EC79  F023         	call	_strtok	;wreg free
 12902  000F06  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1215
 12903  000F0A  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1215+1
 12904                           
 12905                           ; BSR set to: 0
 12906                           ;main.c: 870: if ((0) != p) {
 12907  000F0E  0102               	movlb	2	; () banked
 12908  000F10  51BA               	movf	(doModeVerbose@p_1215+1)& (0+255),w,b
 12909  000F12  11B9               	iorwf	doModeVerbose@p_1215& (0+255),w,b
 12910  000F14  E00A               	bz	l10085
 12911                           
 12912                           ; BSR set to: 2
 12913                           ;main.c: 871: filter_type = atoi(p);
 12914  000F16  C2B9  F066         	movff	doModeVerbose@p_1215,?_atoi
 12915  000F1A  C2BA  F067         	movff	doModeVerbose@p_1215+1,?_atoi+1
 12916  000F1E  EC6A  F01C         	call	_atoi	;wreg free
 12917  000F22  5166               	movf	?_atoi& (0+255),w,b
 12918  000F24  0102               	movlb	2	; () banked
 12919  000F26  6F8F               	movwf	doModeVerbose@filter_type& (0+255),b
 12920                           
 12921                           ;main.c: 872: }
 12922  000F28  D008               	goto	l10089
 12923  000F2A                     l10085:
 12924                           
 12925                           ; BSR set to: 2
 12926                           ;main.c: 873: else {
 12927                           ;main.c: 874: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 12928  000F2A  0E79               	movlw	high STR_91
 12929  000F2C  0100               	movlb	0	; () banked
 12930  000F2E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12931  000F30  0E08               	movlw	low STR_91
 12932  000F32  6F61               	movwf	?_putsUSART& (0+255),b
 12933  000F34  EC89  F027         	call	_putsUSART	;wreg free
 12934  000F38  D2A2               	goto	l506
 12935  000F3A                     l10089:
 12936                           
 12937                           ; BSR set to: 2
 12938                           ;main.c: 876: }
 12939                           ;main.c: 879: p = strtok((0), ",");
 12940  000F3A  DAAC               	call	PL4	;call to abstracted procedure
 12941  000F3C  EC79  F023         	call	_strtok	;wreg free
 12942  000F40  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1215
 12943  000F44  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1215+1
 12944                           
 12945                           ; BSR set to: 0
 12946                           ;main.c: 880: if ((0) != p) {
 12947  000F48  0102               	movlb	2	; () banked
 12948  000F4A  51BA               	movf	(doModeVerbose@p_1215+1)& (0+255),w,b
 12949  000F4C  11B9               	iorwf	doModeVerbose@p_1215& (0+255),w,b
 12950  000F4E  E00A               	bz	l10095
 12951                           
 12952                           ; BSR set to: 2
 12953                           ;main.c: 881: filter_nodeid = atoi(p);
 12954  000F50  C2B9  F066         	movff	doModeVerbose@p_1215,?_atoi
 12955  000F54  C2BA  F067         	movff	doModeVerbose@p_1215+1,?_atoi+1
 12956  000F58  EC6A  F01C         	call	_atoi	;wreg free
 12957  000F5C  5166               	movf	?_atoi& (0+255),w,b
 12958  000F5E  0102               	movlb	2	; () banked
 12959  000F60  6F90               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 12960                           
 12961                           ;main.c: 882: }
 12962  000F62  D008               	goto	l10099
 12963  000F64                     l10095:
 12964                           
 12965                           ; BSR set to: 2
 12966                           ;main.c: 883: else {
 12967                           ;main.c: 884: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 12968  000F64  0E77               	movlw	high STR_93
 12969  000F66  0100               	movlb	0	; () banked
 12970  000F68  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12971  000F6A  0E7D               	movlw	low STR_93
 12972  000F6C  6F61               	movwf	?_putsUSART& (0+255),b
 12973  000F6E  EC89  F027         	call	_putsUSART	;wreg free
 12974  000F72  D285               	goto	l506
 12975  000F74                     l10099:
 12976                           
 12977                           ; BSR set to: 2
 12978                           ;main.c: 886: }
 12979                           ;main.c: 889: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 12980  000F74  0E80               	movlw	128
 12981  000F76  EC3E  F02A         	call	_ECANSetOperationMode
 12982                           
 12983                           ; BSR set to: 0
 12984                           ;main.c: 891: uint32_t id = ((uint32_t) filter_priority << 26) |
 12985                           ;main.c: 892: ((uint32_t) filter_class << 16) |
 12986                           ;main.c: 893: ((uint32_t) filter_type << 8) |
 12987                           ;main.c: 894: filter_nodeid;
 12988  000F7A  C28F  F1B2         	movff	doModeVerbose@filter_type,??_doModeVerbose
 12989  000F7E  DB04               	call	PL44	;call to abstracted procedure
 12990  000F80  5188               	movf	doModeVerbose@filter_class& (0+255),w,b
 12991  000F82  0101               	movlb	1	; () banked
 12992  000F84  6FB6               	movwf	(??_doModeVerbose+4)& (0+255),b
 12993  000F86  0102               	movlb	2	; () banked
 12994  000F88  5189               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 12995  000F8A  DB17               	call	PL58	;call to abstracted procedure
 12996  000F8C  C28E  F1BA         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 12997  000F90  DA9F               	call	PL10	;call to abstracted procedure
 12998  000F92  5190               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 12999  000F94  0101               	movlb	1	; () banked
 13000  000F96  11C2               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 13001  000F98  0102               	movlb	2	; () banked
 13002  000F9A  6F80               	movwf	doModeVerbose@id& (0+255),b
 13003  000F9C  0101               	movlb	1	; () banked
 13004  000F9E  51C3               	movf	(??_doModeVerbose+17)& (0+255),w,b
 13005  000FA0  0102               	movlb	2	; () banked
 13006  000FA2  6F81               	movwf	(doModeVerbose@id+1)& (0+255),b
 13007  000FA4  0101               	movlb	1	; () banked
 13008  000FA6  51C4               	movf	(??_doModeVerbose+18)& (0+255),w,b
 13009  000FA8  0102               	movlb	2	; () banked
 13010  000FAA  6F82               	movwf	(doModeVerbose@id+2)& (0+255),b
 13011  000FAC  0101               	movlb	1	; () banked
 13012  000FAE  51C5               	movf	(??_doModeVerbose+19)& (0+255),w,b
 13013  000FB0  0102               	movlb	2	; () banked
 13014  000FB2  6F83               	movwf	(doModeVerbose@id+3)& (0+255),b
 13015                           
 13016                           ; BSR set to: 2
 13017                           ;main.c: 895: setFilter(filterno, id);
 13018  000FB4  C280  F060         	movff	doModeVerbose@id,?_setFilter
 13019  000FB8  C281  F061         	movff	doModeVerbose@id+1,?_setFilter+1
 13020  000FBC  C282  F062         	movff	doModeVerbose@id+2,?_setFilter+2
 13021  000FC0  C283  F063         	movff	doModeVerbose@id+3,?_setFilter+3
 13022  000FC4  51A7               	movf	doModeVerbose@filterno& (0+255),w,b
 13023  000FC6  EC0F  F014         	call	_setFilter
 13024                           
 13025                           ;main.c: 896: }
 13026  000FCA  D24A               	goto	l10255
 13027  000FCC                     l10105:
 13028                           
 13029                           ; BSR set to: 1
 13030                           ;main.c: 900: else if (cmdbuf == stristr(cmdbuf, "MASK")) {
 13031  000FCC  0E01               	movlw	high _cmdbuf
 13032  000FCE  0100               	movlb	0	; () banked
 13033  000FD0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13034  000FD2  0E04               	movlw	low _cmdbuf
 13035  000FD4  6F6D               	movwf	?_stristr& (0+255),b
 13036  000FD6  0E7F               	movlw	high STR_94
 13037  000FD8  6F70               	movwf	(?_stristr+3)& (0+255),b
 13038  000FDA  0EB2               	movlw	low STR_94
 13039  000FDC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13040  000FDE  EC0E  F025         	call	_stristr	;wreg free
 13041  000FE2  DA4E               	call	PL2	;call to abstracted procedure
 13042  000FE4  E104               	bnz	u12415
 13043  000FE6  0100               	movlb	0	; () banked
 13044  000FE8  516D               	movf	?_stristr& (0+255),w,b
 13045  000FEA  0101               	movlb	1	; () banked
 13046  000FEC  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13047  000FEE                     u12415:
 13048  000FEE  E001 D0D3          	bnz	l10175
 13049                           
 13050                           ; BSR set to: 1
 13051                           ;main.c: 902: uint8_t maskno;
 13052                           ;main.c: 903: uint8_t mask_priority;
 13053                           ;main.c: 904: uint16_t mask_class;
 13054                           ;main.c: 905: uint8_t mask_type;
 13055                           ;main.c: 906: uint8_t mask_nodeid;
 13056                           ;main.c: 908: strcpy(cmdbuf, cmdbuf + 8);
 13057  000FF2  0E01               	movlw	high _cmdbuf
 13058  000FF4  DA92               	call	PL12	;call to abstracted procedure
 13059  000FF6  ECB7  F029         	call	_strcpy	;wreg free
 13060                           
 13061                           ;main.c: 909: char *p = strtok(cmdbuf, ",");
 13062  000FFA  DAA5               	call	PL30	;call to abstracted procedure
 13063  000FFC  EC79  F023         	call	_strtok	;wreg free
 13064  001000  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1234
 13065  001004  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1234+1
 13066                           
 13067                           ; BSR set to: 0
 13068                           ;main.c: 910: if ((0) != p) {
 13069  001008  0102               	movlb	2	; () banked
 13070  00100A  51BC               	movf	(doModeVerbose@p_1234+1)& (0+255),w,b
 13071  00100C  11BB               	iorwf	doModeVerbose@p_1234& (0+255),w,b
 13072  00100E  E014               	bz	l10121
 13073                           
 13074                           ; BSR set to: 2
 13075                           ;main.c: 911: maskno = atoi(p);
 13076  001010  C2BB  F066         	movff	doModeVerbose@p_1234,?_atoi
 13077  001014  C2BC  F067         	movff	doModeVerbose@p_1234+1,?_atoi+1
 13078  001018  EC6A  F01C         	call	_atoi	;wreg free
 13079  00101C  5166               	movf	?_atoi& (0+255),w,b
 13080  00101E  0102               	movlb	2	; () banked
 13081  001020  6FA8               	movwf	doModeVerbose@maskno& (0+255),b
 13082                           
 13083                           ; BSR set to: 2
 13084                           ;main.c: 912: if (maskno > 1) {
 13085  001022  0E01               	movlw	1
 13086  001024  65A8               	cpfsgt	doModeVerbose@maskno& (0+255),b
 13087  001026  D010               	goto	l10125
 13088                           
 13089                           ; BSR set to: 2
 13090                           ;main.c: 913: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 13091  001028  0E75               	movlw	high STR_96
 13092  00102A  0100               	movlb	0	; () banked
 13093  00102C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13094  00102E  0E4D               	movlw	low STR_96
 13095  001030  6F61               	movwf	?_putsUSART& (0+255),b
 13096  001032  EC89  F027         	call	_putsUSART	;wreg free
 13097  001036  D223               	goto	l506
 13098  001038                     l10121:
 13099                           
 13100                           ; BSR set to: 2
 13101                           ;main.c: 917: else {
 13102                           ;main.c: 918: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 13103  001038  0E79               	movlw	high STR_97
 13104  00103A  0100               	movlb	0	; () banked
 13105  00103C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13106  00103E  0E2E               	movlw	low STR_97
 13107  001040  6F61               	movwf	?_putsUSART& (0+255),b
 13108  001042  EC89  F027         	call	_putsUSART	;wreg free
 13109  001046  D21B               	goto	l506
 13110  001048                     l10125:
 13111                           
 13112                           ; BSR set to: 2
 13113                           ;main.c: 920: }
 13114                           ;main.c: 923: p = strtok((0), ",");
 13115  001048  DA25               	call	PL4	;call to abstracted procedure
 13116  00104A  EC79  F023         	call	_strtok	;wreg free
 13117  00104E  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1234
 13118  001052  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1234+1
 13119                           
 13120                           ; BSR set to: 0
 13121                           ;main.c: 924: if ((0) != p) {
 13122  001056  0102               	movlb	2	; () banked
 13123  001058  51BC               	movf	(doModeVerbose@p_1234+1)& (0+255),w,b
 13124  00105A  11BB               	iorwf	doModeVerbose@p_1234& (0+255),w,b
 13125  00105C  E00A               	bz	l10131
 13126                           
 13127                           ; BSR set to: 2
 13128                           ;main.c: 925: mask_priority = atoi(p);
 13129  00105E  C2BB  F066         	movff	doModeVerbose@p_1234,?_atoi
 13130  001062  C2BC  F067         	movff	doModeVerbose@p_1234+1,?_atoi+1
 13131  001066  EC6A  F01C         	call	_atoi	;wreg free
 13132  00106A  5166               	movf	?_atoi& (0+255),w,b
 13133  00106C  0102               	movlb	2	; () banked
 13134  00106E  6F91               	movwf	doModeVerbose@mask_priority& (0+255),b
 13135                           
 13136                           ;main.c: 926: }
 13137  001070  D008               	goto	l10135
 13138  001072                     l10131:
 13139                           
 13140                           ; BSR set to: 2
 13141                           ;main.c: 927: else {
 13142                           ;main.c: 928: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 13143  001072  0E77               	movlw	high STR_99
 13144  001074  0100               	movlb	0	; () banked
 13145  001076  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13146  001078  0ECE               	movlw	low STR_99
 13147  00107A  6F61               	movwf	?_putsUSART& (0+255),b
 13148  00107C  EC89  F027         	call	_putsUSART	;wreg free
 13149  001080  D1FE               	goto	l506
 13150  001082                     l10135:
 13151                           
 13152                           ; BSR set to: 2
 13153                           ;main.c: 930: }
 13154                           ;main.c: 933: p = strtok((0), ",");
 13155  001082  DA08               	call	PL4	;call to abstracted procedure
 13156  001084  EC79  F023         	call	_strtok	;wreg free
 13157  001088  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1234
 13158  00108C  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1234+1
 13159                           
 13160                           ; BSR set to: 0
 13161                           ;main.c: 934: if ((0) != p) {
 13162  001090  0102               	movlb	2	; () banked
 13163  001092  51BC               	movf	(doModeVerbose@p_1234+1)& (0+255),w,b
 13164  001094  11BB               	iorwf	doModeVerbose@p_1234& (0+255),w,b
 13165  001096  E00B               	bz	l10141
 13166                           
 13167                           ; BSR set to: 2
 13168                           ;main.c: 935: mask_class = atoi(p);
 13169  001098  C2BB  F066         	movff	doModeVerbose@p_1234,?_atoi
 13170  00109C  C2BC  F067         	movff	doModeVerbose@p_1234+1,?_atoi+1
 13171  0010A0  EC6A  F01C         	call	_atoi	;wreg free
 13172  0010A4  C066  F28A         	movff	?_atoi,doModeVerbose@mask_class
 13173  0010A8  C067  F28B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 13174                           
 13175                           ;main.c: 936: }
 13176  0010AC  D008               	goto	l10145
 13177  0010AE                     l10141:
 13178                           
 13179                           ; BSR set to: 2
 13180                           ;main.c: 937: else {
 13181                           ;main.c: 938: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 13182  0010AE  0E79               	movlw	high STR_101
 13183  0010B0  0100               	movlb	0	; () banked
 13184  0010B2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13185  0010B4  0E78               	movlw	low STR_101
 13186  0010B6  6F61               	movwf	?_putsUSART& (0+255),b
 13187  0010B8  EC89  F027         	call	_putsUSART	;wreg free
 13188  0010BC  D1E0               	goto	l506
 13189  0010BE                     l10145:
 13190                           
 13191                           ; BSR set to: 0
 13192                           ;main.c: 940: }
 13193                           ;main.c: 943: p = strtok((0), ",");
 13194  0010BE  D9F2               	call	PL6	;call to abstracted procedure
 13195  0010C0  EC79  F023         	call	_strtok	;wreg free
 13196  0010C4  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1234
 13197  0010C8  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1234+1
 13198                           
 13199                           ; BSR set to: 0
 13200                           ;main.c: 944: if ((0) != p) {
 13201  0010CC  0102               	movlb	2	; () banked
 13202  0010CE  51BC               	movf	(doModeVerbose@p_1234+1)& (0+255),w,b
 13203  0010D0  11BB               	iorwf	doModeVerbose@p_1234& (0+255),w,b
 13204  0010D2  E00A               	bz	l10151
 13205                           
 13206                           ; BSR set to: 2
 13207                           ;main.c: 945: mask_type = atoi(p);
 13208  0010D4  C2BB  F066         	movff	doModeVerbose@p_1234,?_atoi
 13209  0010D8  C2BC  F067         	movff	doModeVerbose@p_1234+1,?_atoi+1
 13210  0010DC  EC6A  F01C         	call	_atoi	;wreg free
 13211  0010E0  5166               	movf	?_atoi& (0+255),w,b
 13212  0010E2  0102               	movlb	2	; () banked
 13213  0010E4  6F92               	movwf	doModeVerbose@mask_type& (0+255),b
 13214                           
 13215                           ;main.c: 946: }
 13216  0010E6  D008               	goto	l10155
 13217  0010E8                     l10151:
 13218                           
 13219                           ; BSR set to: 2
 13220                           ;main.c: 947: else {
 13221                           ;main.c: 948: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 13222  0010E8  0E79               	movlw	high STR_103
 13223  0010EA  0100               	movlb	0	; () banked
 13224  0010EC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13225  0010EE  0E9D               	movlw	low STR_103
 13226  0010F0  6F61               	movwf	?_putsUSART& (0+255),b
 13227  0010F2  EC89  F027         	call	_putsUSART	;wreg free
 13228  0010F6  D1C3               	goto	l506
 13229  0010F8                     l10155:
 13230                           
 13231                           ; BSR set to: 2
 13232                           ;main.c: 950: }
 13233                           ;main.c: 953: p = strtok((0), ",");
 13234  0010F8  D9CD               	call	PL4	;call to abstracted procedure
 13235  0010FA  EC79  F023         	call	_strtok	;wreg free
 13236  0010FE  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1234
 13237  001102  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1234+1
 13238                           
 13239                           ; BSR set to: 0
 13240                           ;main.c: 954: if ((0) != p) {
 13241  001106  0102               	movlb	2	; () banked
 13242  001108  51BC               	movf	(doModeVerbose@p_1234+1)& (0+255),w,b
 13243  00110A  11BB               	iorwf	doModeVerbose@p_1234& (0+255),w,b
 13244  00110C  E00A               	bz	l10161
 13245                           
 13246                           ; BSR set to: 2
 13247                           ;main.c: 955: mask_nodeid = atoi(p);
 13248  00110E  C2BB  F066         	movff	doModeVerbose@p_1234,?_atoi
 13249  001112  C2BC  F067         	movff	doModeVerbose@p_1234+1,?_atoi+1
 13250  001116  EC6A  F01C         	call	_atoi	;wreg free
 13251  00111A  5166               	movf	?_atoi& (0+255),w,b
 13252  00111C  0102               	movlb	2	; () banked
 13253  00111E  6F93               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 13254                           
 13255                           ;main.c: 956: }
 13256  001120  D008               	goto	l10165
 13257  001122                     l10161:
 13258                           
 13259                           ; BSR set to: 2
 13260                           ;main.c: 957: else {
 13261                           ;main.c: 958: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 13262  001122  0E78               	movlw	high STR_105
 13263  001124  0100               	movlb	0	; () banked
 13264  001126  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13265  001128  0E93               	movlw	low STR_105
 13266  00112A  6F61               	movwf	?_putsUSART& (0+255),b
 13267  00112C  EC89  F027         	call	_putsUSART	;wreg free
 13268  001130  D1A6               	goto	l506
 13269  001132                     l10165:
 13270                           
 13271                           ; BSR set to: 2
 13272                           ;main.c: 960: }
 13273                           ;main.c: 962: uint32_t id = ((uint32_t) mask_priority << 26) |
 13274                           ;main.c: 963: ((uint32_t) mask_class << 16) |
 13275                           ;main.c: 964: ((uint32_t) mask_type << 8) |
 13276                           ;main.c: 965: mask_nodeid;
 13277  001132  C292  F1B2         	movff	doModeVerbose@mask_type,??_doModeVerbose
 13278  001136  DA28               	call	PL44	;call to abstracted procedure
 13279  001138  518A               	movf	doModeVerbose@mask_class& (0+255),w,b
 13280  00113A  0101               	movlb	1	; () banked
 13281  00113C  6FB6               	movwf	(??_doModeVerbose+4)& (0+255),b
 13282  00113E  0102               	movlb	2	; () banked
 13283  001140  518B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 13284  001142  DA3B               	call	PL58	;call to abstracted procedure
 13285  001144  C291  F1BA         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 13286  001148  D9C3               	call	PL10	;call to abstracted procedure
 13287  00114A  5193               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 13288  00114C  0101               	movlb	1	; () banked
 13289  00114E  11C2               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 13290  001150  0102               	movlb	2	; () banked
 13291  001152  6FA3               	movwf	doModeVerbose@id_1246& (0+255),b
 13292  001154  0101               	movlb	1	; () banked
 13293  001156  51C3               	movf	(??_doModeVerbose+17)& (0+255),w,b
 13294  001158  0102               	movlb	2	; () banked
 13295  00115A  6FA4               	movwf	(doModeVerbose@id_1246+1)& (0+255),b
 13296  00115C  0101               	movlb	1	; () banked
 13297  00115E  51C4               	movf	(??_doModeVerbose+18)& (0+255),w,b
 13298  001160  0102               	movlb	2	; () banked
 13299  001162  6FA5               	movwf	(doModeVerbose@id_1246+2)& (0+255),b
 13300  001164  0101               	movlb	1	; () banked
 13301  001166  51C5               	movf	(??_doModeVerbose+19)& (0+255),w,b
 13302  001168  0102               	movlb	2	; () banked
 13303  00116A  6FA6               	movwf	(doModeVerbose@id_1246+3)& (0+255),b
 13304                           
 13305                           ; BSR set to: 2
 13306                           ;main.c: 968: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 13307  00116C  0E80               	movlw	128
 13308  00116E  EC3E  F02A         	call	_ECANSetOperationMode
 13309                           
 13310                           ; BSR set to: 0
 13311                           ;main.c: 970: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 13312                           ;main.c: 971: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 13313  001172  0102               	movlb	2	; () banked
 13314  001174  51A8               	movf	doModeVerbose@maskno& (0+255),w,b
 13315  001176  E008               	bz	l10173
 13316                           
 13317                           ; BSR set to: 2
 13318  001178  0E0F               	movlw	15	;volatile
 13319  00117A  0100               	movlb	0	; () banked
 13320  00117C  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 13321  00117E  0E18               	movlw	24	;volatile
 13322  001180  DA10               	call	PL54	;call to abstracted procedure
 13323  001182  EC5D  F01B         	call	__CANIDToRegs	;wreg free
 13324  001186  D16C               	goto	l10255
 13325  001188                     l10173:
 13326                           
 13327                           ; BSR set to: 2
 13328  001188  0E0F               	movlw	15	;volatile
 13329  00118A  0100               	movlb	0	; () banked
 13330  00118C  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 13331  00118E  0E1C               	movlw	28	;volatile
 13332  001190  DA08               	call	PL54	;call to abstracted procedure
 13333  001192  EC5D  F01B         	call	__CANIDToRegs	;wreg free
 13334  001196  D164               	goto	l10255
 13335  001198                     l10175:
 13336                           
 13337                           ; BSR set to: 1
 13338                           ;main.c: 979: else if (cmdbuf == stristr(cmdbuf, "SET ")) {
 13339  001198  0E01               	movlw	high _cmdbuf
 13340  00119A  0100               	movlb	0	; () banked
 13341  00119C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13342  00119E  0E04               	movlw	low _cmdbuf
 13343  0011A0  6F6D               	movwf	?_stristr& (0+255),b
 13344  0011A2  0E7F               	movlw	high STR_106
 13345  0011A4  6F70               	movwf	(?_stristr+3)& (0+255),b
 13346  0011A6  0E9E               	movlw	low STR_106
 13347  0011A8  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13348  0011AA  EC0E  F025         	call	_stristr	;wreg free
 13349  0011AE  D968               	call	PL2	;call to abstracted procedure
 13350  0011B0  E104               	bnz	u12505
 13351  0011B2  0100               	movlb	0	; () banked
 13352  0011B4  516D               	movf	?_stristr& (0+255),w,b
 13353  0011B6  0101               	movlb	1	; () banked
 13354  0011B8  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13355  0011BA                     u12505:
 13356  0011BA  E001 D13F          	bnz	l10249
 13357                           
 13358                           ; BSR set to: 1
 13359                           ;main.c: 982: strcpy(cmdbuf, cmdbuf + 4);
 13360  0011BE  0E01               	movlw	high _cmdbuf
 13361  0011C0  0100               	movlb	0	; () banked
 13362  0011C2  6F61               	movwf	(?_strcpy+1)& (0+255),b
 13363  0011C4  0E04               	movlw	low _cmdbuf
 13364  0011C6  6F60               	movwf	?_strcpy& (0+255),b
 13365  0011C8  0E08               	movlw	low (_cmdbuf+4)
 13366  0011CA  0101               	movlb	1	; () banked
 13367  0011CC  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13368  0011CE  0E01               	movlw	high (_cmdbuf+4)
 13369  0011D0  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13370  0011D2  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 13371  0011D6  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 13372  0011DA  ECB7  F029         	call	_strcpy	;wreg free
 13373                           
 13374                           ;main.c: 985: if (cmdbuf == stristr(cmdbuf, "HEX")) {
 13375  0011DE  0E01               	movlw	high _cmdbuf
 13376  0011E0  0100               	movlb	0	; () banked
 13377  0011E2  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13378  0011E4  0E04               	movlw	low _cmdbuf
 13379  0011E6  6F6D               	movwf	?_stristr& (0+255),b
 13380  0011E8  0E7F               	movlw	high STR_107
 13381  0011EA  6F70               	movwf	(?_stristr+3)& (0+255),b
 13382  0011EC  0EDD               	movlw	low STR_107
 13383  0011EE  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13384  0011F0  EC0E  F025         	call	_stristr	;wreg free
 13385  0011F4  D945               	call	PL2	;call to abstracted procedure
 13386  0011F6  E104               	bnz	u12515
 13387  0011F8  0100               	movlb	0	; () banked
 13388  0011FA  516D               	movf	?_stristr& (0+255),w,b
 13389  0011FC  0101               	movlb	1	; () banked
 13390  0011FE  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13391  001200                     u12515:
 13392  001200  E111               	bnz	l10187
 13393                           
 13394                           ; BSR set to: 1
 13395                           ;main.c: 986: bHex = 1;
 13396  001202  0E01               	movlw	1
 13397  001204  6F00               	movwf	_bHex& (0+255),b
 13398                           
 13399                           ; BSR set to: 1
 13400                           ;main.c: 987: writeEEPROM(0x06, 1);
 13401  001206  0100               	movlb	0	; () banked
 13402  001208  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 13403  00120A  0E06               	movlw	6
 13404  00120C  6F60               	movwf	?_writeEEPROM& (0+255),b
 13405  00120E  0E01               	movlw	1
 13406  001210  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 13407  001212  ECFD  F029         	call	_writeEEPROM	;wreg free
 13408                           
 13409                           ; BSR set to: 0
 13410                           ;main.c: 988: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 13411  001216  0E77               	movlw	high STR_108
 13412  001218  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13413  00121A  0E27               	movlw	low STR_108
 13414  00121C  6F61               	movwf	?_putsUSART& (0+255),b
 13415  00121E  EC89  F027         	call	_putsUSART	;wreg free
 13416                           
 13417                           ;main.c: 989: }
 13418  001222  D11E               	goto	l10255
 13419  001224                     l10187:
 13420                           
 13421                           ; BSR set to: 1
 13422                           ;main.c: 991: else if (cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 13423  001224  0E01               	movlw	high _cmdbuf
 13424  001226  0100               	movlb	0	; () banked
 13425  001228  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13426  00122A  0E04               	movlw	low _cmdbuf
 13427  00122C  6F6D               	movwf	?_stristr& (0+255),b
 13428  00122E  0E7F               	movlw	high STR_109
 13429  001230  6F70               	movwf	(?_stristr+3)& (0+255),b
 13430  001232  0E06               	movlw	low STR_109
 13431  001234  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13432  001236  EC0E  F025         	call	_stristr	;wreg free
 13433  00123A  D922               	call	PL2	;call to abstracted procedure
 13434  00123C  E104               	bnz	u12525
 13435  00123E  0100               	movlb	0	; () banked
 13436  001240  516D               	movf	?_stristr& (0+255),w,b
 13437  001242  0101               	movlb	1	; () banked
 13438  001244  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13439  001246                     u12525:
 13440  001246  E110               	bnz	l10195
 13441                           
 13442                           ; BSR set to: 1
 13443                           ;main.c: 992: bHex = 0;
 13444  001248  6B00               	clrf	_bHex& (0+255),b
 13445                           
 13446                           ; BSR set to: 1
 13447                           ;main.c: 993: writeEEPROM(0x06, 0);
 13448  00124A  0100               	movlb	0	; () banked
 13449  00124C  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 13450  00124E  0E06               	movlw	6
 13451  001250  6F60               	movwf	?_writeEEPROM& (0+255),b
 13452  001252  0E00               	movlw	0
 13453  001254  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 13454  001256  ECFD  F029         	call	_writeEEPROM	;wreg free
 13455                           
 13456                           ; BSR set to: 0
 13457                           ;main.c: 994: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 13458  00125A  0E77               	movlw	high STR_110
 13459  00125C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13460  00125E  0EF6               	movlw	low STR_110
 13461  001260  6F61               	movwf	?_putsUSART& (0+255),b
 13462  001262  EC89  F027         	call	_putsUSART	;wreg free
 13463                           
 13464                           ;main.c: 995: }
 13465  001266  D0FC               	goto	l10255
 13466  001268                     l10195:
 13467                           
 13468                           ; BSR set to: 1
 13469                           ;main.c: 996: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 13470  001268  0E01               	movlw	high _cmdbuf
 13471  00126A  0100               	movlb	0	; () banked
 13472  00126C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13473  00126E  0E04               	movlw	low _cmdbuf
 13474  001270  6F6D               	movwf	?_stristr& (0+255),b
 13475  001272  0E7E               	movlw	high STR_111
 13476  001274  6F70               	movwf	(?_stristr+3)& (0+255),b
 13477  001276  0E87               	movlw	low STR_111
 13478  001278  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13479  00127A  EC0E  F025         	call	_stristr	;wreg free
 13480  00127E  516E               	movf	(?_stristr+1)& (0+255),w,b
 13481  001280  116D               	iorwf	?_stristr& (0+255),w,b
 13482  001282  E027               	bz	l10207
 13483                           
 13484                           ; BSR set to: 0
 13485                           ;main.c: 997: strcpy(cmdbuf, cmdbuf + 10);
 13486  001284  0E01               	movlw	high _cmdbuf
 13487  001286  0100               	movlb	0	; () banked
 13488  001288  6F61               	movwf	(?_strcpy+1)& (0+255),b
 13489  00128A  0E04               	movlw	low _cmdbuf
 13490  00128C  6F60               	movwf	?_strcpy& (0+255),b
 13491  00128E  0E0E               	movlw	low (_cmdbuf+10)
 13492  001290  0101               	movlb	1	; () banked
 13493  001292  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13494  001294  0E01               	movlw	high (_cmdbuf+10)
 13495  001296  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13496  001298  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 13497  00129C  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 13498  0012A0  ECB7  F029         	call	_strcpy	;wreg free
 13499                           
 13500                           ;main.c: 998: rwtimeout = atoi(cmdbuf);
 13501  0012A4  0E01               	movlw	high _cmdbuf
 13502  0012A6  0100               	movlb	0	; () banked
 13503  0012A8  6F67               	movwf	(?_atoi+1)& (0+255),b
 13504  0012AA  0E04               	movlw	low _cmdbuf
 13505  0012AC  6F66               	movwf	?_atoi& (0+255),b
 13506  0012AE  EC6A  F01C         	call	_atoi	;wreg free
 13507  0012B2  5166               	movf	?_atoi& (0+255),w,b
 13508  0012B4  0101               	movlb	1	; () banked
 13509  0012B6  6F03               	movwf	_rwtimeout& (0+255),b
 13510                           
 13511                           ; BSR set to: 1
 13512                           ;main.c: 999: if (rwtimeout < 10u) {
 13513  0012B8  0E0A               	movlw	10
 13514  0012BA  6103               	cpfslt	_rwtimeout& (0+255),b
 13515  0012BC  D001               	goto	l10205
 13516                           
 13517                           ; BSR set to: 1
 13518                           ;main.c: 1000: rwtimeout = 10u;
 13519  0012BE  6F03               	movwf	_rwtimeout& (0+255),b
 13520  0012C0                     l10205:
 13521                           
 13522                           ; BSR set to: 1
 13523                           ;main.c: 1001: }
 13524                           ;main.c: 1002: writeEEPROM(0x09, rwtimeout);
 13525  0012C0  0100               	movlb	0	; () banked
 13526  0012C2  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 13527  0012C4  0E09               	movlw	9
 13528  0012C6  6F60               	movwf	?_writeEEPROM& (0+255),b
 13529  0012C8  C103  F062         	movff	_rwtimeout,?_writeEEPROM+2
 13530  0012CC  ECFD  F029         	call	_writeEEPROM	;wreg free
 13531                           
 13532                           ;main.c: 1003: }
 13533  0012D0  D0C7               	goto	l10255
 13534  0012D2                     l10207:
 13535                           
 13536                           ; BSR set to: 0
 13537                           ;main.c: 1004: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 13538  0012D2  0E01               	movlw	high _cmdbuf
 13539  0012D4  0100               	movlb	0	; () banked
 13540  0012D6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13541  0012D8  0E04               	movlw	low _cmdbuf
 13542  0012DA  6F6D               	movwf	?_stristr& (0+255),b
 13543  0012DC  0E7E               	movlw	high STR_112
 13544  0012DE  6F70               	movwf	(?_stristr+3)& (0+255),b
 13545  0012E0  0EBB               	movlw	low STR_112
 13546  0012E2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13547  0012E4  EC0E  F025         	call	_stristr	;wreg free
 13548  0012E8  516E               	movf	(?_stristr+1)& (0+255),w,b
 13549  0012EA  116D               	iorwf	?_stristr& (0+255),w,b
 13550  0012EC  E005               	bz	l10211
 13551                           
 13552                           ; BSR set to: 0
 13553                           ;main.c: 1005: strcpy(cmdbuf, cmdbuf + 8);
 13554  0012EE  0E01               	movlw	high _cmdbuf
 13555  0012F0  D914               	call	PL12	;call to abstracted procedure
 13556  0012F2  ECB7  F029         	call	_strcpy	;wreg free
 13557                           
 13558                           ;main.c: 1006: }
 13559  0012F6  D0B4               	goto	l10255
 13560  0012F8                     l10211:
 13561                           
 13562                           ; BSR set to: 0
 13563                           ;main.c: 1007: else if (0 != stristr(cmdbuf, "MODE ")) {
 13564  0012F8  0E01               	movlw	high _cmdbuf
 13565  0012FA  0100               	movlb	0	; () banked
 13566  0012FC  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13567  0012FE  0E04               	movlw	low _cmdbuf
 13568  001300  6F6D               	movwf	?_stristr& (0+255),b
 13569  001302  0E7F               	movlw	high STR_113
 13570  001304  6F70               	movwf	(?_stristr+3)& (0+255),b
 13571  001306  0E86               	movlw	low STR_113
 13572  001308  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13573  00130A  EC0E  F025         	call	_stristr	;wreg free
 13574  00130E  516E               	movf	(?_stristr+1)& (0+255),w,b
 13575  001310  116D               	iorwf	?_stristr& (0+255),w,b
 13576  001312  E05C               	bz	l10239
 13577                           
 13578                           ; BSR set to: 0
 13579                           ;main.c: 1008: strcpy(cmdbuf, cmdbuf + 5);
 13580  001314  D8CE               	call	PL8	;call to abstracted procedure
 13581  001316  ECB7  F029         	call	_strcpy	;wreg free
 13582                           
 13583                           ;main.c: 1009: if (0 != stristr(cmdbuf, "VERBOSE")) {
 13584  00131A  0E01               	movlw	high _cmdbuf
 13585  00131C  0100               	movlb	0	; () banked
 13586  00131E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13587  001320  0E04               	movlw	low _cmdbuf
 13588  001322  6F6D               	movwf	?_stristr& (0+255),b
 13589  001324  0E7E               	movlw	high STR_114
 13590  001326  6F70               	movwf	(?_stristr+3)& (0+255),b
 13591  001328  0EFE               	movlw	low STR_114
 13592  00132A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13593  00132C  EC0E  F025         	call	_stristr	;wreg free
 13594  001330  516E               	movf	(?_stristr+1)& (0+255),w,b
 13595  001332  116D               	iorwf	?_stristr& (0+255),w,b
 13596  001334  E00F               	bz	l10223
 13597                           
 13598                           ; BSR set to: 0
 13599                           ;main.c: 1010: mode = 0;
 13600  001336  6BF8               	clrf	_mode& (0+255),b
 13601                           
 13602                           ; BSR set to: 0
 13603                           ;main.c: 1011: writeEEPROM(0x03, 0);
 13604  001338  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 13605  00133A  0E03               	movlw	3
 13606  00133C  6F60               	movwf	?_writeEEPROM& (0+255),b
 13607  00133E  0E00               	movlw	0
 13608  001340  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 13609  001342  ECFD  F029         	call	_writeEEPROM	;wreg free
 13610                           
 13611                           ; BSR set to: 0
 13612                           ;main.c: 1012: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 13613  001346  0E7B               	movlw	high STR_115
 13614  001348  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13615  00134A  0E48               	movlw	low STR_115
 13616  00134C  6F61               	movwf	?_putsUSART& (0+255),b
 13617  00134E  EC89  F027         	call	_putsUSART	;wreg free
 13618                           
 13619                           ;main.c: 1013: }
 13620  001352  D086               	goto	l10255
 13621  001354                     l10223:
 13622                           
 13623                           ; BSR set to: 0
 13624                           ;main.c: 1014: else if (0 != stristr(cmdbuf, "VSCP")) {
 13625  001354  0E01               	movlw	high _cmdbuf
 13626  001356  0100               	movlb	0	; () banked
 13627  001358  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13628  00135A  0E04               	movlw	low _cmdbuf
 13629  00135C  6F6D               	movwf	?_stristr& (0+255),b
 13630  00135E  0E7F               	movlw	high STR_116
 13631  001360  6F70               	movwf	(?_stristr+3)& (0+255),b
 13632  001362  0EC1               	movlw	low STR_116
 13633  001364  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13634  001366  EC0E  F025         	call	_stristr	;wreg free
 13635  00136A  516E               	movf	(?_stristr+1)& (0+255),w,b
 13636  00136C  116D               	iorwf	?_stristr& (0+255),w,b
 13637  00136E  E010               	bz	l10231
 13638                           
 13639                           ; BSR set to: 0
 13640                           ;main.c: 1015: mode = 1;
 13641  001370  0E01               	movlw	1
 13642  001372  6FF8               	movwf	_mode& (0+255),b
 13643                           
 13644                           ; BSR set to: 0
 13645                           ;main.c: 1016: writeEEPROM(0x03, 1);
 13646  001374  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 13647  001376  0E03               	movlw	3
 13648  001378  6F60               	movwf	?_writeEEPROM& (0+255),b
 13649  00137A  0E01               	movlw	1
 13650  00137C  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 13651  00137E  ECFD  F029         	call	_writeEEPROM	;wreg free
 13652                           
 13653                           ; BSR set to: 0
 13654                           ;main.c: 1017: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 13655  001382  0E7A               	movlw	high STR_117
 13656  001384  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13657  001386  0ECD               	movlw	low STR_117
 13658  001388  6F61               	movwf	?_putsUSART& (0+255),b
 13659  00138A  EC89  F027         	call	_putsUSART	;wreg free
 13660                           
 13661                           ;main.c: 1018: }
 13662  00138E  D068               	goto	l10255
 13663  001390                     l10231:
 13664                           
 13665                           ; BSR set to: 0
 13666                           ;main.c: 1019: else if (0 != stristr(cmdbuf, "SLCAN")) {
 13667  001390  0E01               	movlw	high _cmdbuf
 13668  001392  0100               	movlb	0	; () banked
 13669  001394  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13670  001396  0E04               	movlw	low _cmdbuf
 13671  001398  6F6D               	movwf	?_stristr& (0+255),b
 13672  00139A  0E7F               	movlw	high STR_118
 13673  00139C  6F70               	movwf	(?_stristr+3)& (0+255),b
 13674  00139E  0E98               	movlw	low STR_118
 13675  0013A0  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13676  0013A2  EC0E  F025         	call	_stristr	;wreg free
 13677  0013A6  516E               	movf	(?_stristr+1)& (0+255),w,b
 13678  0013A8  116D               	iorwf	?_stristr& (0+255),w,b
 13679  0013AA  E05A               	bz	l10255
 13680                           
 13681                           ; BSR set to: 0
 13682                           ;main.c: 1020: mode = 2;
 13683  0013AC  0E02               	movlw	2
 13684  0013AE  6FF8               	movwf	_mode& (0+255),b
 13685                           
 13686                           ; BSR set to: 0
 13687                           ;main.c: 1021: writeEEPROM(0x03, 2);
 13688  0013B0  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 13689  0013B2  0E03               	movlw	3
 13690  0013B4  6F60               	movwf	?_writeEEPROM& (0+255),b
 13691  0013B6  0E02               	movlw	2
 13692  0013B8  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 13693  0013BA  ECFD  F029         	call	_writeEEPROM	;wreg free
 13694                           
 13695                           ; BSR set to: 0
 13696                           ;main.c: 1022: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 13697  0013BE  0E7B               	movlw	high STR_119
 13698  0013C0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13699  0013C2  0EB5               	movlw	low STR_119
 13700  0013C4  6F61               	movwf	?_putsUSART& (0+255),b
 13701  0013C6  EC89  F027         	call	_putsUSART	;wreg free
 13702  0013CA  D04A               	goto	l10255
 13703  0013CC                     l10239:
 13704                           
 13705                           ; BSR set to: 0
 13706                           ;main.c: 1026: else if (0 != stristr(cmdbuf, "FILTER ")) {
 13707  0013CC  0E01               	movlw	high _cmdbuf
 13708  0013CE  0100               	movlb	0	; () banked
 13709  0013D0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13710  0013D2  0E04               	movlw	low _cmdbuf
 13711  0013D4  6F6D               	movwf	?_stristr& (0+255),b
 13712  0013D6  0E7E               	movlw	high STR_120
 13713  0013D8  6F70               	movwf	(?_stristr+3)& (0+255),b
 13714  0013DA  0EEE               	movlw	low STR_120
 13715  0013DC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13716  0013DE  EC0E  F025         	call	_stristr	;wreg free
 13717  0013E2  516E               	movf	(?_stristr+1)& (0+255),w,b
 13718  0013E4  116D               	iorwf	?_stristr& (0+255),w,b
 13719  0013E6  E011               	bz	l10243
 13720                           
 13721                           ; BSR set to: 0
 13722                           ;main.c: 1027: strcpy(cmdbuf, cmdbuf + 7);
 13723  0013E8  0E01               	movlw	high _cmdbuf
 13724  0013EA  0100               	movlb	0	; () banked
 13725  0013EC  6F61               	movwf	(?_strcpy+1)& (0+255),b
 13726  0013EE  0E04               	movlw	low _cmdbuf
 13727  0013F0  6F60               	movwf	?_strcpy& (0+255),b
 13728  0013F2  0E0B               	movlw	low (_cmdbuf+7)
 13729  0013F4  0101               	movlb	1	; () banked
 13730  0013F6  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13731  0013F8  0E01               	movlw	high (_cmdbuf+7)
 13732  0013FA  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13733  0013FC  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 13734  001400  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 13735  001404  ECB7  F029         	call	_strcpy	;wreg free
 13736                           
 13737                           ;main.c: 1028: }
 13738  001408  D02B               	goto	l10255
 13739  00140A                     l10243:
 13740                           
 13741                           ; BSR set to: 0
 13742                           ;main.c: 1030: else if (0 != stristr(cmdbuf, "MASK ")) {
 13743  00140A  0E01               	movlw	high _cmdbuf
 13744  00140C  0100               	movlb	0	; () banked
 13745  00140E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13746  001410  0E04               	movlw	low _cmdbuf
 13747  001412  6F6D               	movwf	?_stristr& (0+255),b
 13748  001414  0E7F               	movlw	high STR_121
 13749  001416  6F70               	movwf	(?_stristr+3)& (0+255),b
 13750  001418  0E8C               	movlw	low STR_121
 13751  00141A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13752  00141C  EC0E  F025         	call	_stristr	;wreg free
 13753  001420  516E               	movf	(?_stristr+1)& (0+255),w,b
 13754  001422  116D               	iorwf	?_stristr& (0+255),w,b
 13755  001424  E004               	bz	l10247
 13756                           
 13757                           ; BSR set to: 0
 13758                           ;main.c: 1031: strcpy(cmdbuf, cmdbuf + 5);
 13759  001426  D845               	call	PL8	;call to abstracted procedure
 13760  001428  ECB7  F029         	call	_strcpy	;wreg free
 13761                           
 13762                           ;main.c: 1032: }
 13763  00142C  D019               	goto	l10255
 13764  00142E                     l10247:
 13765                           
 13766                           ; BSR set to: 0
 13767                           ;main.c: 1033: else {
 13768                           ;main.c: 1034: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 13769  00142E  0E7A               	movlw	high STR_122
 13770  001430  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13771  001432  0E6A               	movlw	low STR_122
 13772  001434  6F61               	movwf	?_putsUSART& (0+255),b
 13773  001436  EC89  F027         	call	_putsUSART	;wreg free
 13774  00143A  D012               	goto	l10255
 13775  00143C                     l10249:
 13776                           
 13777                           ; BSR set to: 1
 13778                           ;main.c: 1038: else {
 13779                           ;main.c: 1039: if ( 0x0d == cmdbuf[ 0 ] ) {
 13780  00143C  5104               	movf	_cmdbuf& (0+255),w,b
 13781  00143E  0A0D               	xorlw	13
 13782  001440  E108               	bnz	l10253
 13783                           
 13784                           ; BSR set to: 1
 13785                           ;main.c: 1040: putsUSART((char *) "+OK\r\n");
 13786  001442  0E7F               	movlw	high STR_8
 13787  001444  0100               	movlb	0	; () banked
 13788  001446  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13789  001448  0E80               	movlw	low STR_8
 13790  00144A  6F61               	movwf	?_putsUSART& (0+255),b
 13791  00144C  EC89  F027         	call	_putsUSART	;wreg free
 13792                           
 13793                           ;main.c: 1041: }
 13794  001450  D007               	goto	l10255
 13795  001452                     l10253:
 13796                           
 13797                           ; BSR set to: 1
 13798                           ;main.c: 1042: else {
 13799                           ;main.c: 1043: putsUSART((char *) "-ERROR - Unknown command\r\n");
 13800  001452  0E7B               	movlw	high STR_124
 13801  001454  0100               	movlb	0	; () banked
 13802  001456  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13803  001458  0E7F               	movlw	low STR_124
 13804  00145A  6F61               	movwf	?_putsUSART& (0+255),b
 13805  00145C  EC89  F027         	call	_putsUSART	;wreg free
 13806  001460                     l10255:
 13807                           
 13808                           ;main.c: 1044: }
 13809                           ;main.c: 1045: }
 13810                           ;main.c: 1047: memset(cmdbuf, 0, sizeof ( cmdbuf));
 13811  001460  0E01               	movlw	high _cmdbuf
 13812  001462  0100               	movlb	0	; () banked
 13813  001464  6F61               	movwf	(?_memset+1)& (0+255),b
 13814  001466  0E04               	movlw	low _cmdbuf
 13815  001468  6F60               	movwf	?_memset& (0+255),b
 13816  00146A  6B63               	clrf	(?_memset+3)& (0+255),b
 13817  00146C  6B62               	clrf	(?_memset+2)& (0+255),b
 13818  00146E  6B65               	clrf	(?_memset+5)& (0+255),b
 13819  001470  0E50               	movlw	80
 13820  001472  6F64               	movwf	(?_memset+4)& (0+255),b
 13821  001474  ECE6  F029         	call	_memset	;wreg free
 13822                           
 13823                           ; BSR set to: 0
 13824                           ;main.c: 1048: pos = 0;
 13825  001478  0101               	movlb	1	; () banked
 13826  00147A  6B02               	clrf	_pos& (0+255),b
 13827  00147C                     l10259:
 13828                           
 13829                           ;main.c: 1049: }
 13830                           ;main.c: 1050: }
 13831                           ;main.c: 1053: (INTCONbits.GIE = 1);
 13832  00147C  8EF2               	bsf	intcon,7,c	;volatile
 13833  00147E                     l506:
 13834  00147E  0012               	return	
 13835  001480                     __end_of_doModeVerbose:
 13836                           	opt stack 0
 13837  001480                     PL2:
 13838                           	opt stack 20
 13839  001480  0E04               	movlw	low _cmdbuf
 13840  001482  0101               	movlb	1	; () banked
 13841  001484  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13842  001486  0E01               	movlw	high _cmdbuf
 13843  001488  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13844  00148A  0100               	movlb	0	; () banked
 13845  00148C  516E               	movf	(?_stristr+1)& (0+255),w,b
 13846  00148E  0101               	movlb	1	; () banked
 13847  001490  19B3               	xorwf	(??_doModeVerbose+1)& (0+255),w,b
 13848  001492  0012               	return	
 13849  001494                     __end_ofPL2:
 13850                           	opt stack 0
 13851  001494                     PL4:
 13852                           	opt stack 20
 13853  001494  0100               	movlb	0	; () banked
 13854  001496  6B6D               	clrf	(?_strtok+1)& (0+255),b
 13855  001498  6B6C               	clrf	?_strtok& (0+255),b
 13856  00149A  0E7F               	movlw	high STR_29
 13857  00149C  6F6F               	movwf	(?_strtok+3)& (0+255),b
 13858  00149E  0EF5               	movlw	low STR_29
 13859  0014A0  6F6E               	movwf	(?_strtok+2)& (0+255),b
 13860  0014A2  0012               	return	
 13861  0014A4                     __end_ofPL4:
 13862                           	opt stack 0
 13863  0014A4                     PL6:
 13864                           	opt stack 20
 13865  0014A4  6B6D               	clrf	(?_strtok+1)& (0+255),b
 13866  0014A6  6B6C               	clrf	?_strtok& (0+255),b
 13867  0014A8  0E7F               	movlw	high STR_29
 13868  0014AA  6F6F               	movwf	(?_strtok+3)& (0+255),b
 13869  0014AC  0EF5               	movlw	low STR_29
 13870  0014AE  6F6E               	movwf	(?_strtok+2)& (0+255),b
 13871  0014B0  0012               	return	
 13872  0014B2                     __end_ofPL6:
 13873                           	opt stack 0
 13874  0014B2                     PL8:
 13875                           	opt stack 20
 13876  0014B2  0E01               	movlw	high _cmdbuf
 13877  0014B4  0100               	movlb	0	; () banked
 13878  0014B6  6F61               	movwf	(?_strcpy+1)& (0+255),b
 13879  0014B8  0E04               	movlw	low _cmdbuf
 13880  0014BA  6F60               	movwf	?_strcpy& (0+255),b
 13881  0014BC  0E09               	movlw	low (_cmdbuf+5)
 13882  0014BE  0101               	movlb	1	; () banked
 13883  0014C0  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13884  0014C2  0E01               	movlw	high (_cmdbuf+5)
 13885  0014C4  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13886  0014C6  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 13887  0014CA  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 13888  0014CE  0012               	return	
 13889  0014D0                     __end_ofPL8:
 13890                           	opt stack 0
 13891  0014D0                     PL10:
 13892                           	opt stack 20
 13893  0014D0  6BBB               	clrf	(??_doModeVerbose+9)& (0+255),b
 13894  0014D2  6BBC               	clrf	(??_doModeVerbose+10)& (0+255),b
 13895  0014D4  6BBD               	clrf	(??_doModeVerbose+11)& (0+255),b
 13896  0014D6  0E1A               	movlw	26
 13897  0014D8                     u12405:
 13898  0014D8  90D8               	bcf	status,0,c
 13899  0014DA  37BA               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 13900  0014DC  37BB               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 13901  0014DE  37BC               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 13902  0014E0  37BD               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 13903  0014E2  2EE8               	decfsz	wreg,f,c
 13904  0014E4  D7F9               	goto	u12405
 13905  0014E6  51B6               	movf	(??_doModeVerbose+4)& (0+255),w,b
 13906  0014E8  11BA               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 13907  0014EA  6FBE               	movwf	(??_doModeVerbose+12)& (0+255),b
 13908  0014EC  51B7               	movf	(??_doModeVerbose+5)& (0+255),w,b
 13909  0014EE  11BB               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 13910  0014F0  6FBF               	movwf	(??_doModeVerbose+13)& (0+255),b
 13911  0014F2  51B8               	movf	(??_doModeVerbose+6)& (0+255),w,b
 13912  0014F4  11BC               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 13913  0014F6  6FC0               	movwf	(??_doModeVerbose+14)& (0+255),b
 13914  0014F8  51B9               	movf	(??_doModeVerbose+7)& (0+255),w,b
 13915  0014FA  11BD               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 13916  0014FC  6FC1               	movwf	(??_doModeVerbose+15)& (0+255),b
 13917  0014FE  51B2               	movf	??_doModeVerbose& (0+255),w,b
 13918  001500  11BE               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 13919  001502  6FC2               	movwf	(??_doModeVerbose+16)& (0+255),b
 13920  001504  51B3               	movf	(??_doModeVerbose+1)& (0+255),w,b
 13921  001506  11BF               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 13922  001508  6FC3               	movwf	(??_doModeVerbose+17)& (0+255),b
 13923  00150A  51B4               	movf	(??_doModeVerbose+2)& (0+255),w,b
 13924  00150C  11C0               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 13925  00150E  6FC4               	movwf	(??_doModeVerbose+18)& (0+255),b
 13926  001510  51B5               	movf	(??_doModeVerbose+3)& (0+255),w,b
 13927  001512  11C1               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 13928  001514  6FC5               	movwf	(??_doModeVerbose+19)& (0+255),b
 13929  001516  0102               	movlb	2	; () banked
 13930  001518  0012               	return	
 13931  00151A                     __end_ofPL10:
 13932                           	opt stack 0
 13933  00151A                     PL12:
 13934                           	opt stack 20
 13935  00151A  0100               	movlb	0	; () banked
 13936  00151C  6F61               	movwf	(?_strcpy+1)& (0+255),b
 13937  00151E  0E04               	movlw	low _cmdbuf
 13938  001520  6F60               	movwf	?_strcpy& (0+255),b
 13939  001522  0E0C               	movlw	low (_cmdbuf+8)
 13940  001524  0101               	movlb	1	; () banked
 13941  001526  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13942  001528  0E01               	movlw	high (_cmdbuf+8)
 13943  00152A  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13944  00152C  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 13945  001530  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 13946  001534  0012               	return	
 13947  001536                     __end_ofPL12:
 13948                           	opt stack 0
 13949  001536                     PL26:
 13950                           	opt stack 20
 13951  001536  0100               	movlb	0	; () banked
 13952  001538  6B6D               	clrf	(?_strtok+1)& (0+255),b
 13953  00153A  6B6C               	clrf	?_strtok& (0+255),b
 13954  00153C  0E7F               	movlw	high (STR_248+5)
 13955  00153E  6F6F               	movwf	(?_strtok+3)& (0+255),b
 13956  001540  0E2B               	movlw	low (STR_248+5)
 13957  001542  6F6E               	movwf	(?_strtok+2)& (0+255),b
 13958  001544  0012               	return	
 13959  001546                     __end_ofPL26:
 13960                           	opt stack 0
 13961  001546                     PL30:
 13962                           	opt stack 20
 13963  001546  0E01               	movlw	high _cmdbuf
 13964  001548  0100               	movlb	0	; () banked
 13965  00154A  6F6D               	movwf	(?_strtok+1)& (0+255),b
 13966  00154C  0E04               	movlw	low _cmdbuf
 13967  00154E  6F6C               	movwf	?_strtok& (0+255),b
 13968  001550  0E7F               	movlw	high STR_29
 13969  001552  6F6F               	movwf	(?_strtok+3)& (0+255),b
 13970  001554  0EF5               	movlw	low STR_29
 13971  001556  6F6E               	movwf	(?_strtok+2)& (0+255),b
 13972  001558  0012               	return	
 13973  00155A                     __end_ofPL30:
 13974                           	opt stack 0
 13975  00155A                     PL34:
 13976                           	opt stack 20
 13977  00155A  0100               	movlb	0	; () banked
 13978  00155C  6F6D               	movwf	(?_strtok+1)& (0+255),b
 13979  00155E  0E04               	movlw	low _cmdbuf
 13980  001560  6F6C               	movwf	?_strtok& (0+255),b
 13981  001562  0E7F               	movlw	high (STR_248+5)
 13982  001564  6F6F               	movwf	(?_strtok+3)& (0+255),b
 13983  001566  0E2B               	movlw	low (STR_248+5)
 13984  001568  6F6E               	movwf	(?_strtok+2)& (0+255),b
 13985  00156A  0012               	return	
 13986  00156C                     __end_ofPL34:
 13987                           	opt stack 0
 13988  00156C                     PL38:
 13989                           	opt stack 20
 13990  00156C  0102               	movlb	2	; () banked
 13991  00156E  51B0               	movf	doModeVerbose@i_1137& (0+255),w,b
 13992  001570  C2AE  F1B2         	movff	doModeVerbose@reg,??_doModeVerbose
 13993  001574  0101               	movlb	1	; () banked
 13994  001576  6BB3               	clrf	(??_doModeVerbose+1)& (0+255),b
 13995  001578  27B2               	addwf	??_doModeVerbose& (0+255),f,b
 13996  00157A  0E00               	movlw	0
 13997  00157C  23B3               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 13998  00157E  51B2               	movf	??_doModeVerbose& (0+255),w,b
 13999  001580  0100               	movlb	0	; () banked
 14000  001582  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 14001  001584  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 14002  001586  0012               	return	
 14003  001588                     __end_ofPL38:
 14004                           	opt stack 0
 14005  001588                     PL44:
 14006                           	opt stack 20
 14007  001588  0101               	movlb	1	; () banked
 14008  00158A  6BB3               	clrf	(??_doModeVerbose+1)& (0+255),b
 14009  00158C  6BB4               	clrf	(??_doModeVerbose+2)& (0+255),b
 14010  00158E  6BB5               	clrf	(??_doModeVerbose+3)& (0+255),b
 14011  001590  C1B4  F1B5         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 14012  001594  C1B3  F1B4         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 14013  001598  C1B2  F1B3         	movff	??_doModeVerbose,??_doModeVerbose+1
 14014  00159C  6BB2               	clrf	??_doModeVerbose& (0+255),b
 14015  00159E  0102               	movlb	2	; () banked
 14016  0015A0  0012               	return	
 14017  0015A2                     __end_ofPL44:
 14018                           	opt stack 0
 14019  0015A2                     PL54:
 14020                           	opt stack 20
 14021  0015A2  6F60               	movwf	?__CANIDToRegs& (0+255),b
 14022  0015A4  C2A3  F062         	movff	doModeVerbose@id_1246,?__CANIDToRegs+2
 14023  0015A8  C2A4  F063         	movff	doModeVerbose@id_1246+1,?__CANIDToRegs+3
 14024  0015AC  C2A5  F064         	movff	doModeVerbose@id_1246+2,?__CANIDToRegs+4
 14025  0015B0  C2A6  F065         	movff	doModeVerbose@id_1246+3,?__CANIDToRegs+5
 14026  0015B4  0E01               	movlw	1
 14027  0015B6  6F66               	movwf	(?__CANIDToRegs+6)& (0+255),b
 14028  0015B8  0C01               	retlw	1
 14029  0015BA                     __end_ofPL54:
 14030                           	opt stack 0
 14031  0015BA                     PL58:
 14032                           	opt stack 20
 14033  0015BA  0101               	movlb	1	; () banked
 14034  0015BC  6FB7               	movwf	(??_doModeVerbose+5)& (0+255),b
 14035  0015BE  6BB8               	clrf	(??_doModeVerbose+6)& (0+255),b
 14036  0015C0  6BB9               	clrf	(??_doModeVerbose+7)& (0+255),b
 14037  0015C2  C1B7  F1B9         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 14038  0015C6  C1B6  F1B8         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 14039  0015CA  6BB7               	clrf	(??_doModeVerbose+5)& (0+255),b
 14040  0015CC  6BB6               	clrf	(??_doModeVerbose+4)& (0+255),b
 14041  0015CE  0012               	return	
 14042  0015D0                     __end_ofPL58:
 14043                           	opt stack 0
 14044                           tblptru	equ	0xFF8
 14045                           tblptrh	equ	0xFF7
 14046                           tblptrl	equ	0xFF6
 14047                           tablat	equ	0xFF5
 14048                           prodh	equ	0xFF4
 14049                           prodl	equ	0xFF3
 14050                           intcon	equ	0xFF2
 14051                           indf0	equ	0xFEF
 14052                           postinc0	equ	0xFEE
 14053                           fsr0h	equ	0xFEA
 14054                           fsr0l	equ	0xFE9
 14055                           wreg	equ	0xFE8
 14056                           indf1	equ	0xFE7
 14057                           postinc1	equ	0xFE6
 14058                           postdec1	equ	0xFE5
 14059                           fsr1h	equ	0xFE2
 14060                           fsr1l	equ	0xFE1
 14061                           indf2	equ	0xFDF
 14062                           postinc2	equ	0xFDE
 14063                           postdec2	equ	0xFDD
 14064                           plusw2	equ	0xFDB
 14065                           fsr2h	equ	0xFDA
 14066                           fsr2l	equ	0xFD9
 14067                           status	equ	0xFD8
 14068                           
 14069 ;; *************** function _setFilter *****************
 14070 ;; Defined at:
 14071 ;;		line 2576 in file "main.c"
 14072 ;; Parameters:    Size  Location     Type
 14073 ;;  filter          1    wreg     unsigned char 
 14074 ;;  val             4    0[BANK0 ] unsigned long 
 14075 ;; Auto vars:     Size  Location     Type
 14076 ;;  filter          1   10[BANK0 ] unsigned char 
 14077 ;;  eidl            1   14[BANK0 ] unsigned char 
 14078 ;;  eidh            1   13[BANK0 ] unsigned char 
 14079 ;;  sidl            1   12[BANK0 ] unsigned char 
 14080 ;;  sidh            1   11[BANK0 ] unsigned char 
 14081 ;; Return value:  Size  Location     Type
 14082 ;;		None               void
 14083 ;; Registers used:
 14084 ;;		wreg, status,2, status,0
 14085 ;; Tracked objects:
 14086 ;;		On entry : F/2
 14087 ;;		On exit  : F/0
 14088 ;;		Unchanged: 0/0
 14089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14090 ;;      Params:         0       4       0       0       0       0       0
 14091 ;;      Locals:         0       5       0       0       0       0       0
 14092 ;;      Temps:          0       6       0       0       0       0       0
 14093 ;;      Totals:         0      15       0       0       0       0       0
 14094 ;;Total ram usage:       15 bytes
 14095 ;; Hardware stack levels used:    1
 14096 ;; Hardware stack levels required when called:    3
 14097 ;; This function calls:
 14098 ;;		Nothing
 14099 ;; This function is called by:
 14100 ;;		_doModeVerbose
 14101 ;; This function uses a non-reentrant model
 14102 ;;
 14103                           
 14104                           	psect	text21
 14105  00281E                     __ptext21:
 14106                           	opt stack 0
 14107  00281E                     _setFilter:
 14108                           	opt stack 26
 14109                           
 14110                           ;incstack = 0
 14111                           ;incstack = 0
 14112                           ;setFilter@filter stored from wreg
 14113  00281E  CFE8 F06A          	movff	wreg,setFilter@filter
 14114                           
 14115                           ; BSR set to: 2
 14116                           ;main.c: 2577: uint8_t sidh = (long) val >> 21L;
 14117  002822  0E15               	movlw	21
 14118  002824  0100               	movlb	0	; () banked
 14119  002826  6F64               	movwf	??_setFilter& (0+255),b
 14120  002828  C060  F065         	movff	setFilter@val,??_setFilter+1
 14121  00282C  C061  F066         	movff	setFilter@val+1,??_setFilter+2
 14122  002830  C062  F067         	movff	setFilter@val+2,??_setFilter+3
 14123  002834  C063  F068         	movff	setFilter@val+3,??_setFilter+4
 14124  002838                     u14885:
 14125  002838  6764               	tstfsz	??_setFilter& (0+255),b
 14126  00283A  D001               	goto	u14886
 14127  00283C  D007               	goto	u14887
 14128  00283E                     u14886:
 14129  00283E  3568               	rlcf	(??_setFilter+4)& (0+255),w,b
 14130  002840  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 14131  002842  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 14132  002844  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 14133  002846  3365               	rrcf	(??_setFilter+1)& (0+255),f,b
 14134  002848  2F64               	decfsz	??_setFilter& (0+255),f,b
 14135  00284A  D7F6               	goto	u14885
 14136  00284C                     u14887:
 14137  00284C  5165               	movf	(??_setFilter+1)& (0+255),w,b
 14138  00284E  6F6B               	movwf	setFilter@sidh& (0+255),b
 14139                           
 14140                           ;main.c: 2578: uint8_t sidl = (((long) val >> 13L) & 0xe0) |
 14141                           ;main.c: 2579: ((long) (val) & 0x03L) |
 14142                           ;main.c: 2580: 0x08;
 14143  002850  C060  F064         	movff	setFilter@val,??_setFilter
 14144  002854  0E03               	movlw	3
 14145  002856  1764               	andwf	??_setFilter& (0+255),f,b
 14146  002858  0E0D               	movlw	13
 14147  00285A  6F65               	movwf	(??_setFilter+1)& (0+255),b
 14148  00285C  C060  F066         	movff	setFilter@val,??_setFilter+2
 14149  002860  C061  F067         	movff	setFilter@val+1,??_setFilter+3
 14150  002864  C062  F068         	movff	setFilter@val+2,??_setFilter+4
 14151  002868  C063  F069         	movff	setFilter@val+3,??_setFilter+5
 14152  00286C                     u14895:
 14153  00286C  6765               	tstfsz	(??_setFilter+1)& (0+255),b
 14154  00286E  D001               	goto	u14896
 14155  002870  D007               	goto	u14897
 14156  002872                     u14896:
 14157  002872  3569               	rlcf	(??_setFilter+5)& (0+255),w,b
 14158  002874  3369               	rrcf	(??_setFilter+5)& (0+255),f,b
 14159  002876  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 14160  002878  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 14161  00287A  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 14162  00287C  2F65               	decfsz	(??_setFilter+1)& (0+255),f,b
 14163  00287E  D7F6               	goto	u14895
 14164  002880                     u14897:
 14165  002880  5166               	movf	(??_setFilter+2)& (0+255),w,b
 14166  002882  0BE0               	andlw	224
 14167  002884  1164               	iorwf	??_setFilter& (0+255),w,b
 14168  002886  0908               	iorlw	8
 14169  002888  6F6C               	movwf	setFilter@sidl& (0+255),b
 14170                           
 14171                           ; BSR set to: 0
 14172                           ;main.c: 2581: uint8_t eidh = (long) val >> 8L;
 14173  00288A  C061  F06D         	movff	setFilter@val+1,setFilter@eidh
 14174                           
 14175                           ; BSR set to: 0
 14176                           ;main.c: 2582: uint8_t eidl = val;
 14177  00288E  C060  F06E         	movff	setFilter@val,setFilter@eidl
 14178                           
 14179                           ;main.c: 2584: switch (filter) {
 14180  002892  D090               	goto	l11691
 14181  002894                     l1159:
 14182                           
 14183                           ; BSR set to: 0
 14184                           ;main.c: 2587: RXF0SIDH = sidh;
 14185  002894  C06B  FF00         	movff	setFilter@sidh,3840	;volatile
 14186                           
 14187                           ;main.c: 2588: RXF0SIDL = sidl;
 14188  002898  C06C  FF01         	movff	setFilter@sidl,3841	;volatile
 14189                           
 14190                           ;main.c: 2589: RXF0EIDH = eidh;
 14191  00289C  C06D  FF02         	movff	setFilter@eidh,3842	;volatile
 14192                           
 14193                           ;main.c: 2590: RXF0EIDL = eidl;
 14194  0028A0  C06E  FF03         	movff	setFilter@eidl,3843	;volatile
 14195                           
 14196                           ;main.c: 2591: break;
 14197  0028A4  D0AA               	goto	l1176
 14198  0028A6                     l1161:
 14199                           
 14200                           ; BSR set to: 0
 14201                           ;main.c: 2594: RXF1SIDH = sidh;
 14202  0028A6  C06B  FF04         	movff	setFilter@sidh,3844	;volatile
 14203                           
 14204                           ;main.c: 2595: RXF1SIDL = sidl;
 14205  0028AA  C06C  FF05         	movff	setFilter@sidl,3845	;volatile
 14206                           
 14207                           ;main.c: 2596: RXF1EIDH = eidh;
 14208  0028AE  C06D  FF06         	movff	setFilter@eidh,3846	;volatile
 14209                           
 14210                           ;main.c: 2597: RXF1EIDL = eidl;
 14211  0028B2  C06E  FF07         	movff	setFilter@eidl,3847	;volatile
 14212                           
 14213                           ;main.c: 2598: break;
 14214  0028B6  D0A1               	goto	l1176
 14215  0028B8                     l1162:
 14216                           
 14217                           ; BSR set to: 0
 14218                           ;main.c: 2601: RXF2SIDH = sidh;
 14219  0028B8  C06B  FF08         	movff	setFilter@sidh,3848	;volatile
 14220                           
 14221                           ;main.c: 2602: RXF2SIDL = sidl;
 14222  0028BC  C06C  FF09         	movff	setFilter@sidl,3849	;volatile
 14223                           
 14224                           ;main.c: 2603: RXF2EIDH = eidh;
 14225  0028C0  C06D  FF0A         	movff	setFilter@eidh,3850	;volatile
 14226                           
 14227                           ;main.c: 2604: RXF2EIDL = eidl;
 14228  0028C4  C06E  FF0B         	movff	setFilter@eidl,3851	;volatile
 14229                           
 14230                           ;main.c: 2605: break;
 14231  0028C8  D098               	goto	l1176
 14232  0028CA                     l1163:
 14233                           
 14234                           ; BSR set to: 0
 14235                           ;main.c: 2608: RXF3SIDH = sidh;
 14236  0028CA  C06B  FF0C         	movff	setFilter@sidh,3852	;volatile
 14237                           
 14238                           ;main.c: 2609: RXF3SIDL = sidl;
 14239  0028CE  C06C  FF0D         	movff	setFilter@sidl,3853	;volatile
 14240                           
 14241                           ;main.c: 2610: RXF3EIDH = eidh;
 14242  0028D2  C06D  FF0E         	movff	setFilter@eidh,3854	;volatile
 14243                           
 14244                           ;main.c: 2611: RXF3EIDL = eidl;
 14245  0028D6  C06E  FF0F         	movff	setFilter@eidl,3855	;volatile
 14246                           
 14247                           ;main.c: 2612: break;
 14248  0028DA  D08F               	goto	l1176
 14249  0028DC                     l1164:
 14250                           
 14251                           ; BSR set to: 0
 14252                           ;main.c: 2615: RXF4SIDH = sidh;
 14253  0028DC  C06B  FF10         	movff	setFilter@sidh,3856	;volatile
 14254                           
 14255                           ;main.c: 2616: RXF4SIDL = sidl;
 14256  0028E0  C06C  FF11         	movff	setFilter@sidl,3857	;volatile
 14257                           
 14258                           ;main.c: 2617: RXF4EIDH = eidh;
 14259  0028E4  C06D  FF12         	movff	setFilter@eidh,3858	;volatile
 14260                           
 14261                           ;main.c: 2618: RXF4EIDL = eidl;
 14262  0028E8  C06E  FF13         	movff	setFilter@eidl,3859	;volatile
 14263                           
 14264                           ;main.c: 2619: break;
 14265  0028EC  D086               	goto	l1176
 14266  0028EE                     l1165:
 14267                           
 14268                           ; BSR set to: 0
 14269                           ;main.c: 2622: RXF5SIDH = sidh;
 14270  0028EE  C06B  FF14         	movff	setFilter@sidh,3860	;volatile
 14271                           
 14272                           ;main.c: 2623: RXF5SIDL = sidl;
 14273  0028F2  C06C  FF15         	movff	setFilter@sidl,3861	;volatile
 14274                           
 14275                           ;main.c: 2624: RXF5EIDH = eidh;
 14276  0028F6  C06D  FF16         	movff	setFilter@eidh,3862	;volatile
 14277                           
 14278                           ;main.c: 2625: RXF5EIDL = eidl;
 14279  0028FA  C06E  FF17         	movff	setFilter@eidl,3863	;volatile
 14280                           
 14281                           ;main.c: 2626: break;
 14282  0028FE  D07D               	goto	l1176
 14283  002900                     l1166:
 14284                           
 14285                           ; BSR set to: 0
 14286                           ;main.c: 2629: RXF6SIDH = sidh;
 14287  002900  C06B  FD60         	movff	setFilter@sidh,3424	;volatile
 14288                           
 14289                           ;main.c: 2630: RXF6SIDL = sidl;
 14290  002904  C06C  FD61         	movff	setFilter@sidl,3425	;volatile
 14291                           
 14292                           ;main.c: 2631: RXF6EIDH = eidh;
 14293  002908  C06D  FD62         	movff	setFilter@eidh,3426	;volatile
 14294                           
 14295                           ;main.c: 2632: RXF6EIDL = eidl;
 14296  00290C  C06E  FD63         	movff	setFilter@eidl,3427	;volatile
 14297                           
 14298                           ;main.c: 2633: break;
 14299  002910  D074               	goto	l1176
 14300  002912                     l1167:
 14301                           
 14302                           ; BSR set to: 0
 14303                           ;main.c: 2636: RXF7SIDH = sidh;
 14304  002912  C06B  FD64         	movff	setFilter@sidh,3428	;volatile
 14305                           
 14306                           ;main.c: 2637: RXF7SIDL = sidl;
 14307  002916  C06C  FD65         	movff	setFilter@sidl,3429	;volatile
 14308                           
 14309                           ;main.c: 2638: RXF7EIDH = eidh;
 14310  00291A  C06D  FD66         	movff	setFilter@eidh,3430	;volatile
 14311                           
 14312                           ;main.c: 2639: RXF7EIDL = eidl;
 14313  00291E  C06E  FD67         	movff	setFilter@eidl,3431	;volatile
 14314                           
 14315                           ;main.c: 2640: break;
 14316  002922  D06B               	goto	l1176
 14317  002924                     l1168:
 14318                           
 14319                           ; BSR set to: 0
 14320                           ;main.c: 2643: RXF8SIDH = sidh;
 14321  002924  C06B  FD68         	movff	setFilter@sidh,3432	;volatile
 14322                           
 14323                           ;main.c: 2644: RXF8SIDL = sidl;
 14324  002928  C06C  FD69         	movff	setFilter@sidl,3433	;volatile
 14325                           
 14326                           ;main.c: 2645: RXF8EIDH = eidh;
 14327  00292C  C06D  FD6A         	movff	setFilter@eidh,3434	;volatile
 14328                           
 14329                           ;main.c: 2646: RXF8EIDL = eidl;
 14330  002930  C06E  FD6B         	movff	setFilter@eidl,3435	;volatile
 14331                           
 14332                           ;main.c: 2647: break;
 14333  002934  D062               	goto	l1176
 14334  002936                     l1169:
 14335                           
 14336                           ; BSR set to: 0
 14337                           ;main.c: 2650: RXF9SIDH = sidh;
 14338  002936  C06B  FD70         	movff	setFilter@sidh,3440	;volatile
 14339                           
 14340                           ;main.c: 2651: RXF9SIDL = sidl;
 14341  00293A  C06C  FD71         	movff	setFilter@sidl,3441	;volatile
 14342                           
 14343                           ;main.c: 2652: RXF9EIDH = eidh;
 14344  00293E  C06D  FD72         	movff	setFilter@eidh,3442	;volatile
 14345                           
 14346                           ;main.c: 2653: RXF9EIDL = eidl;
 14347  002942  C06E  FD73         	movff	setFilter@eidl,3443	;volatile
 14348                           
 14349                           ;main.c: 2654: break;
 14350  002946  D059               	goto	l1176
 14351  002948                     l1170:
 14352                           
 14353                           ; BSR set to: 0
 14354                           ;main.c: 2657: RXF10SIDH = sidh;
 14355  002948  C06B  FD74         	movff	setFilter@sidh,3444	;volatile
 14356                           
 14357                           ;main.c: 2658: RXF10SIDL = sidl;
 14358  00294C  C06C  FD75         	movff	setFilter@sidl,3445	;volatile
 14359                           
 14360                           ;main.c: 2659: RXF10EIDH = eidh;
 14361  002950  C06D  FD76         	movff	setFilter@eidh,3446	;volatile
 14362                           
 14363                           ;main.c: 2660: RXF10EIDL = eidl;
 14364  002954  C06E  FD77         	movff	setFilter@eidl,3447	;volatile
 14365                           
 14366                           ;main.c: 2661: break;
 14367  002958  D050               	goto	l1176
 14368  00295A                     l1171:
 14369                           
 14370                           ; BSR set to: 0
 14371                           ;main.c: 2664: RXF11SIDH = sidh;
 14372  00295A  C06B  FD78         	movff	setFilter@sidh,3448	;volatile
 14373                           
 14374                           ;main.c: 2665: RXF11SIDL = sidl;
 14375  00295E  C06C  FD79         	movff	setFilter@sidl,3449	;volatile
 14376                           
 14377                           ;main.c: 2666: RXF11EIDH = eidh;
 14378  002962  C06D  FD7A         	movff	setFilter@eidh,3450	;volatile
 14379                           
 14380                           ;main.c: 2667: RXF11EIDL = eidl;
 14381  002966  C06E  FD7B         	movff	setFilter@eidl,3451	;volatile
 14382                           
 14383                           ;main.c: 2668: break;
 14384  00296A  D047               	goto	l1176
 14385  00296C                     l1172:
 14386                           
 14387                           ; BSR set to: 0
 14388                           ;main.c: 2671: RXF12SIDH = sidh;
 14389  00296C  C06B  FD80         	movff	setFilter@sidh,3456	;volatile
 14390                           
 14391                           ;main.c: 2672: RXF12SIDL = sidl;
 14392  002970  C06C  FD81         	movff	setFilter@sidl,3457	;volatile
 14393                           
 14394                           ;main.c: 2673: RXF12EIDH = eidh;
 14395  002974  C06D  FD82         	movff	setFilter@eidh,3458	;volatile
 14396                           
 14397                           ;main.c: 2674: RXF12EIDL = eidl;
 14398  002978  C06E  FD83         	movff	setFilter@eidl,3459	;volatile
 14399                           
 14400                           ;main.c: 2675: break;
 14401  00297C  D03E               	goto	l1176
 14402  00297E                     l1173:
 14403                           
 14404                           ; BSR set to: 0
 14405                           ;main.c: 2678: RXF13SIDH = sidh;
 14406  00297E  C06B  FD84         	movff	setFilter@sidh,3460	;volatile
 14407                           
 14408                           ;main.c: 2679: RXF13SIDL = sidl;
 14409  002982  C06C  FD85         	movff	setFilter@sidl,3461	;volatile
 14410                           
 14411                           ;main.c: 2680: RXF13EIDH = eidh;
 14412  002986  C06D  FD86         	movff	setFilter@eidh,3462	;volatile
 14413                           
 14414                           ;main.c: 2681: RXF13EIDL = eidl;
 14415  00298A  C06E  FD87         	movff	setFilter@eidl,3463	;volatile
 14416                           
 14417                           ;main.c: 2682: break;
 14418  00298E  D035               	goto	l1176
 14419  002990                     l1174:
 14420                           
 14421                           ; BSR set to: 0
 14422                           ;main.c: 2685: RXF14SIDH = sidh;
 14423  002990  C06B  FD88         	movff	setFilter@sidh,3464	;volatile
 14424                           
 14425                           ;main.c: 2686: RXF14SIDL = sidl;
 14426  002994  C06C  FD89         	movff	setFilter@sidl,3465	;volatile
 14427                           
 14428                           ;main.c: 2687: RXF14EIDH = eidh;
 14429  002998  C06D  FD8A         	movff	setFilter@eidh,3466	;volatile
 14430                           
 14431                           ;main.c: 2688: RXF14EIDL = eidl;
 14432  00299C  C06E  FD8B         	movff	setFilter@eidl,3467	;volatile
 14433                           
 14434                           ;main.c: 2689: break;
 14435  0029A0  D02C               	goto	l1176
 14436  0029A2                     l1175:
 14437                           
 14438                           ; BSR set to: 0
 14439                           ;main.c: 2692: RXF15SIDH = sidh;
 14440  0029A2  C06B  FD90         	movff	setFilter@sidh,3472	;volatile
 14441                           
 14442                           ;main.c: 2693: RXF15SIDL = sidl;
 14443  0029A6  C06C  FD91         	movff	setFilter@sidl,3473	;volatile
 14444                           
 14445                           ;main.c: 2694: RXF15EIDH = eidh;
 14446  0029AA  C06D  FD92         	movff	setFilter@eidh,3474	;volatile
 14447                           
 14448                           ;main.c: 2695: RXF15EIDL = eidl;
 14449  0029AE  C06E  FD93         	movff	setFilter@eidl,3475	;volatile
 14450                           
 14451                           ;main.c: 2696: break;
 14452  0029B2  D023               	goto	l1176
 14453  0029B4                     l11691:
 14454                           
 14455                           ; BSR set to: 0
 14456  0029B4  516A               	movf	setFilter@filter& (0+255),w,b
 14457                           
 14458                           ; Switch size 1, requested type "space"
 14459                           ; Number of cases is 16, Range of values is 0 to 15
 14460                           ; switch strategies available:
 14461                           ; Name         Instructions Cycles
 14462                           ; simple_byte           49    25 (average)
 14463                           ;	Chosen strategy is simple_byte
 14464  0029B6  E101 D76D          	bz	l1159
 14465  0029BA  0A01               	xorlw	1	; case 1
 14466  0029BC  E101 D773          	bz	l1161
 14467  0029C0  0A03               	xorlw	3	; case 2
 14468  0029C2  E101 D779          	bz	l1162
 14469  0029C6  0A01               	xorlw	1	; case 3
 14470  0029C8  E080               	bz	l1163
 14471  0029CA  0A07               	xorlw	7	; case 4
 14472  0029CC  E087               	bz	l1164
 14473  0029CE  0A01               	xorlw	1	; case 5
 14474  0029D0  E08E               	bz	l1165
 14475  0029D2  0A03               	xorlw	3	; case 6
 14476  0029D4  E095               	bz	l1166
 14477  0029D6  0A01               	xorlw	1	; case 7
 14478  0029D8  E09C               	bz	l1167
 14479  0029DA  0A0F               	xorlw	15	; case 8
 14480  0029DC  E0A3               	bz	l1168
 14481  0029DE  0A01               	xorlw	1	; case 9
 14482  0029E0  E0AA               	bz	l1169
 14483  0029E2  0A03               	xorlw	3	; case 10
 14484  0029E4  E0B1               	bz	l1170
 14485  0029E6  0A01               	xorlw	1	; case 11
 14486  0029E8  E0B8               	bz	l1171
 14487  0029EA  0A07               	xorlw	7	; case 12
 14488  0029EC  E0BF               	bz	l1172
 14489  0029EE  0A01               	xorlw	1	; case 13
 14490  0029F0  E0C6               	bz	l1173
 14491  0029F2  0A03               	xorlw	3	; case 14
 14492  0029F4  E0CD               	bz	l1174
 14493  0029F6  0A01               	xorlw	1	; case 15
 14494  0029F8  E0D4               	bz	l1175
 14495  0029FA                     l1176:
 14496                           
 14497                           ; BSR set to: 0
 14498  0029FA  0012               	return	
 14499  0029FC                     __end_of_setFilter:
 14500                           	opt stack 0
 14501                           tblptru	equ	0xFF8
 14502                           tblptrh	equ	0xFF7
 14503                           tblptrl	equ	0xFF6
 14504                           tablat	equ	0xFF5
 14505                           prodh	equ	0xFF4
 14506                           prodl	equ	0xFF3
 14507                           intcon	equ	0xFF2
 14508                           indf0	equ	0xFEF
 14509                           postinc0	equ	0xFEE
 14510                           fsr0h	equ	0xFEA
 14511                           fsr0l	equ	0xFE9
 14512                           wreg	equ	0xFE8
 14513                           indf1	equ	0xFE7
 14514                           postinc1	equ	0xFE6
 14515                           postdec1	equ	0xFE5
 14516                           fsr1h	equ	0xFE2
 14517                           fsr1l	equ	0xFE1
 14518                           indf2	equ	0xFDF
 14519                           postinc2	equ	0xFDE
 14520                           postdec2	equ	0xFDD
 14521                           plusw2	equ	0xFDB
 14522                           fsr2h	equ	0xFDA
 14523                           fsr2l	equ	0xFD9
 14524                           status	equ	0xFD8
 14525                           
 14526 ;; *************** function _writeRegisterExtended *****************
 14527 ;; Defined at:
 14528 ;;		line 2139 in file "main.c"
 14529 ;; Parameters:    Size  Location     Type
 14530 ;;  nodeid          1    wreg     unsigned char 
 14531 ;;  page            2   86[BANK0 ] unsigned short 
 14532 ;;  reg             1   88[BANK0 ] unsigned char 
 14533 ;;  timeout         2   89[BANK0 ] unsigned short 
 14534 ;;  value           2   91[BANK0 ] PTR unsigned char 
 14535 ;;		 -> doModeVerbose@value_1190(1), 
 14536 ;; Auto vars:     Size  Location     Type
 14537 ;;  nodeid          1   97[BANK0 ] unsigned char 
 14538 ;; Return value:  Size  Location     Type
 14539 ;;                  1    wreg      enum E15660
 14540 ;; Registers used:
 14541 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14542 ;; Tracked objects:
 14543 ;;		On entry : F/2
 14544 ;;		On exit  : E/0
 14545 ;;		Unchanged: 0/0
 14546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14547 ;;      Params:         0       7       0       0       0       0       0
 14548 ;;      Locals:         0       1       0       0       0       0       0
 14549 ;;      Temps:          0       4       0       0       0       0       0
 14550 ;;      Totals:         0      12       0       0       0       0       0
 14551 ;;Total ram usage:       12 bytes
 14552 ;; Hardware stack levels used:    1
 14553 ;; Hardware stack levels required when called:    7
 14554 ;; This function calls:
 14555 ;;		_sendVSCPFrame
 14556 ;;		_getVSCPFrame
 14557 ;; This function is called by:
 14558 ;;		_doModeVerbose
 14559 ;; This function uses a non-reentrant model
 14560 ;;
 14561                           
 14562                           	psect	text22
 14563  0037CE                     __ptext22:
 14564                           	opt stack 0
 14565  0037CE                     _writeRegisterExtended:
 14566                           	opt stack 22
 14567                           
 14568                           ; BSR set to: 0
 14569                           ;incstack = 0
 14570                           ;incstack = 0
 14571                           ;writeRegisterExtended@nodeid stored from wreg
 14572  0037CE  CFE8 F0C1          	movff	wreg,writeRegisterExtended@nodeid
 14573                           
 14574                           ; BSR set to: 2
 14575                           ;main.c: 2140: vscpData[ 0 ] = nodeid;
 14576  0037D2  C0C1  F1A4         	movff	writeRegisterExtended@nodeid,_vscpData
 14577                           
 14578                           ; BSR set to: 2
 14579                           ;main.c: 2141: vscpData[ 1 ] = page >> 8;
 14580  0037D6  0100               	movlb	0	; () banked
 14581  0037D8  51B7               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 14582  0037DA  0101               	movlb	1	; () banked
 14583  0037DC  6FA5               	movwf	(_vscpData+1)& (0+255),b
 14584                           
 14585                           ; BSR set to: 1
 14586                           ;main.c: 2142: vscpData[ 2 ] = page & 0xff;
 14587  0037DE  C0B6  F1A6         	movff	writeRegisterExtended@page,_vscpData+2
 14588                           
 14589                           ; BSR set to: 1
 14590                           ;main.c: 2143: vscpData[ 3 ] = reg;
 14591  0037E2  C0B8  F1A7         	movff	writeRegisterExtended@reg,_vscpData+3
 14592                           
 14593                           ; BSR set to: 1
 14594                           ;main.c: 2144: vscpData[ 4 ] = *value;
 14595  0037E6  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 14596  0037EA  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 14597  0037EE  50DF               	movf	indf2,w,c
 14598  0037F0  6FA8               	movwf	(_vscpData+4)& (0+255),b
 14599                           
 14600                           ; BSR set to: 1
 14601                           ;main.c: 2146: if (sendVSCPFrame(0,
 14602                           ;main.c: 2147: 38,
 14603                           ;main.c: 2148: 0,
 14604                           ;main.c: 2149: 0,
 14605                           ;main.c: 2150: 5,
 14606                           ;main.c: 2151: vscpData)) {
 14607  0037F2  0100               	movlb	0	; () banked
 14608  0037F4  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 14609  0037F6  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 14610  0037F8  0E26               	movlw	38
 14611  0037FA  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 14612  0037FC  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 14613  0037FE  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 14614  003800  0E05               	movlw	5
 14615  003802  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 14616  003804  0E01               	movlw	high _vscpData
 14617  003806  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 14618  003808  0EA4               	movlw	low _vscpData
 14619  00380A  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 14620  00380C  EC46  F021         	call	_sendVSCPFrame	;wreg free
 14621  003810  0900               	iorlw	0
 14622  003812  E05E               	bz	l11591
 14623                           
 14624                           ; BSR set to: 0
 14625                           ;main.c: 2153: timekeeper = 0;
 14626  003814  6BE9               	clrf	_timekeeper& (0+255),b	;volatile
 14627  003816  6BEA               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 14628  003818  6BEB               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 14629  00381A  6BEC               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 14630                           
 14631                           ;main.c: 2154: while (timekeeper < timeout) {
 14632  00381C  D049               	goto	l11589
 14633  00381E                     l1016:
 14634                           
 14635                           ; BSR set to: 0
 14636  00381E  0004               	clrwdt		;# 
 14637                           
 14638                           ;main.c: 2158: if (getVSCPFrame(&vscpClass,
 14639                           ;main.c: 2159: &vscpType,
 14640                           ;main.c: 2160: &vscpNodeId,
 14641                           ;main.c: 2161: &vscpPriority,
 14642                           ;main.c: 2162: &vscpSize,
 14643                           ;main.c: 2163: vscpData)) {
 14644  003820  0E01               	movlw	high _vscpClass
 14645  003822  0100               	movlb	0	; () banked
 14646  003824  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 14647  003826  0EAC               	movlw	low _vscpClass
 14648  003828  6F72               	movwf	?_getVSCPFrame& (0+255),b
 14649  00382A  0E01               	movlw	high _vscpType
 14650  00382C  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 14651  00382E  0EB1               	movlw	low _vscpType
 14652  003830  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 14653  003832  0E01               	movlw	high _vscpNodeId
 14654  003834  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 14655  003836  0EAE               	movlw	low _vscpNodeId
 14656  003838  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 14657  00383A  0E01               	movlw	high _vscpPriority
 14658  00383C  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 14659  00383E  0EAF               	movlw	low _vscpPriority
 14660  003840  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 14661  003842  0E01               	movlw	high _vscpSize
 14662  003844  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 14663  003846  0EB0               	movlw	low _vscpSize
 14664  003848  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 14665  00384A  0E01               	movlw	high _vscpData
 14666  00384C  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 14667  00384E  0EA4               	movlw	low _vscpData
 14668  003850  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 14669  003852  EC4E  F024         	call	_getVSCPFrame	;wreg free
 14670  003856  0900               	iorlw	0
 14671  003858  E02B               	bz	l11589
 14672                           
 14673                           ; BSR set to: 0
 14674                           ;main.c: 2165: if ((nodeid == vscpNodeId) &&
 14675                           ;main.c: 2166: (5 == vscpSize) &&
 14676                           ;main.c: 2167: (0 == vscpData[ 0 ]) &&
 14677                           ;main.c: 2168: ((page >> 8) == vscpData[ 1 ]) &&
 14678                           ;main.c: 2169: ((page & 0xff) == vscpData[ 2 ]) &&
 14679                           ;main.c: 2170: (reg == vscpData[ 3 ]) &&
 14680                           ;main.c: 2171: (*value == vscpData[ 4 ])) {
 14681  00385A  0101               	movlb	1	; () banked
 14682  00385C  51AE               	movf	_vscpNodeId& (0+255),w,b
 14683  00385E  0100               	movlb	0	; () banked
 14684  003860  63C1               	cpfseq	writeRegisterExtended@nodeid& (0+255),b
 14685  003862  D026               	goto	l11589
 14686                           
 14687                           ; BSR set to: 0
 14688  003864  0101               	movlb	1	; () banked
 14689  003866  51B0               	movf	_vscpSize& (0+255),w,b
 14690  003868  0A05               	xorlw	5
 14691  00386A  E122               	bnz	l11589
 14692                           
 14693                           ; BSR set to: 1
 14694  00386C  67A4               	tstfsz	_vscpData& (0+255),b
 14695  00386E  D020               	goto	l11589
 14696                           
 14697                           ; BSR set to: 1
 14698  003870  0100               	movlb	0	; () banked
 14699  003872  51B7               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 14700  003874  0101               	movlb	1	; () banked
 14701  003876  19A5               	xorwf	(_vscpData+1)& (0+255),w,b
 14702  003878  E11B               	bnz	l11589
 14703                           
 14704                           ; BSR set to: 1
 14705  00387A  0100               	movlb	0	; () banked
 14706  00387C  51B6               	movf	writeRegisterExtended@page& (0+255),w,b
 14707  00387E  EE21  F0A6         	lfsr	2,_vscpData+2
 14708  003882  62DF               	cpfseq	indf2,c
 14709  003884  D015               	goto	l11589
 14710                           
 14711                           ; BSR set to: 1
 14712  003886  51B8               	movf	writeRegisterExtended@reg& (0+255),w,b
 14713  003888  0101               	movlb	1	; () banked
 14714  00388A  EE21  F0A7         	lfsr	2,_vscpData+3
 14715  00388E  62DF               	cpfseq	indf2,c
 14716  003890  D00F               	goto	l11589
 14717                           
 14718                           ; BSR set to: 1
 14719  003892  51A8               	movf	(_vscpData+4)& (0+255),w,b
 14720  003894  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 14721  003898  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 14722  00389C  62DF               	cpfseq	indf2,c
 14723  00389E  D008               	goto	l11589
 14724                           
 14725                           ; BSR set to: 1
 14726                           ;main.c: 2172: *value = vscpData[ 1 ];
 14727  0038A0  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 14728  0038A4  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 14729  0038A8  C1A5  FFDF         	movff	_vscpData+1,indf2
 14730                           
 14731                           ; BSR set to: 1
 14732                           ;main.c: 2173: return 1;
 14733  0038AC  0E01               	movlw	1
 14734  0038AE  D011               	goto	l1019
 14735  0038B0                     l11589:
 14736  0038B0  0100               	movlb	0	; () banked
 14737  0038B2  51B9               	movf	writeRegisterExtended@timeout& (0+255),w,b
 14738  0038B4  6FBD               	movwf	??_writeRegisterExtended& (0+255),b
 14739  0038B6  51BA               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 14740  0038B8  6FBE               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 14741  0038BA  6BBF               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 14742  0038BC  6BC0               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 14743  0038BE  51BD               	movf	??_writeRegisterExtended& (0+255),w,b
 14744  0038C0  5DE9               	subwf	_timekeeper& (0+255),w,b	;volatile
 14745  0038C2  51BE               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 14746  0038C4  59EA               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 14747  0038C6  51BF               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 14748  0038C8  59EB               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 14749  0038CA  51C0               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 14750  0038CC  59EC               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 14751  0038CE  E3A7               	bnc	l1016
 14752  0038D0                     l11591:
 14753                           
 14754                           ; BSR set to: 0
 14755                           ;main.c: 2174: }
 14756                           ;main.c: 2176: }
 14757                           ;main.c: 2178: }
 14758                           ;main.c: 2180: }
 14759                           ;main.c: 2182: return 0;
 14760  0038D0  0E00               	movlw	0
 14761  0038D2                     l1019:
 14762  0038D2  0012               	return	
 14763  0038D4                     __end_of_writeRegisterExtended:
 14764                           	opt stack 0
 14765                           tblptru	equ	0xFF8
 14766                           tblptrh	equ	0xFF7
 14767                           tblptrl	equ	0xFF6
 14768                           tablat	equ	0xFF5
 14769                           prodh	equ	0xFF4
 14770                           prodl	equ	0xFF3
 14771                           intcon	equ	0xFF2
 14772                           indf0	equ	0xFEF
 14773                           postinc0	equ	0xFEE
 14774                           fsr0h	equ	0xFEA
 14775                           fsr0l	equ	0xFE9
 14776                           wreg	equ	0xFE8
 14777                           indf1	equ	0xFE7
 14778                           postinc1	equ	0xFE6
 14779                           postdec1	equ	0xFE5
 14780                           fsr1h	equ	0xFE2
 14781                           fsr1l	equ	0xFE1
 14782                           indf2	equ	0xFDF
 14783                           postinc2	equ	0xFDE
 14784                           postdec2	equ	0xFDD
 14785                           plusw2	equ	0xFDB
 14786                           fsr2h	equ	0xFDA
 14787                           fsr2l	equ	0xFD9
 14788                           status	equ	0xFD8
 14789                           
 14790 ;; *************** function _printBinary *****************
 14791 ;; Defined at:
 14792 ;;		line 2226 in file "main.c"
 14793 ;; Parameters:    Size  Location     Type
 14794 ;;  value           1    wreg     unsigned char 
 14795 ;; Auto vars:     Size  Location     Type
 14796 ;;  value           1    3[BANK0 ] unsigned char 
 14797 ;;  i               2    4[BANK0 ] int 
 14798 ;; Return value:  Size  Location     Type
 14799 ;;		None               void
 14800 ;; Registers used:
 14801 ;;		wreg, status,2, status,0, cstack
 14802 ;; Tracked objects:
 14803 ;;		On entry : F/2
 14804 ;;		On exit  : F/0
 14805 ;;		Unchanged: 0/0
 14806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14807 ;;      Params:         0       0       0       0       0       0       0
 14808 ;;      Locals:         0       3       0       0       0       0       0
 14809 ;;      Temps:          0       2       0       0       0       0       0
 14810 ;;      Totals:         0       5       0       0       0       0       0
 14811 ;;Total ram usage:        5 bytes
 14812 ;; Hardware stack levels used:    1
 14813 ;; Hardware stack levels required when called:    4
 14814 ;; This function calls:
 14815 ;;		_WriteUSART
 14816 ;; This function is called by:
 14817 ;;		_doModeVerbose
 14818 ;; This function uses a non-reentrant model
 14819 ;;
 14820                           
 14821                           	psect	text23
 14822  004FB8                     __ptext23:
 14823                           	opt stack 0
 14824  004FB8                     _printBinary:
 14825                           	opt stack 25
 14826                           
 14827                           ;incstack = 0
 14828                           ;incstack = 0
 14829                           ;printBinary@value stored from wreg
 14830  004FB8  CFE8 F063          	movff	wreg,printBinary@value
 14831                           
 14832                           ; BSR set to: 2
 14833                           ;main.c: 2227: int i;
 14834                           ;main.c: 2229: for (i = 7; i >= 0; i--) {
 14835  004FBC  0100               	movlb	0	; () banked
 14836  004FBE  6B65               	clrf	(printBinary@i+1)& (0+255),b
 14837  004FC0  0E07               	movlw	7
 14838  004FC2  6F64               	movwf	printBinary@i& (0+255),b
 14839  004FC4                     l11541:
 14840                           
 14841                           ; BSR set to: 0
 14842                           ;main.c: 2230: if (value & (1 << i)) {
 14843  004FC4  C064  F061         	movff	printBinary@i,??_printBinary
 14844  004FC8  0E01               	movlw	1
 14845  004FCA  6F62               	movwf	(??_printBinary+1)& (0+255),b
 14846  004FCC  2B61               	incf	??_printBinary& (0+255),f,b
 14847  004FCE  D002               	goto	u14644
 14848  004FD0                     u14645:
 14849  004FD0  90D8               	bcf	status,0,c
 14850  004FD2  3762               	rlcf	(??_printBinary+1)& (0+255),f,b
 14851  004FD4                     u14644:
 14852  004FD4  2F61               	decfsz	??_printBinary& (0+255),f,b
 14853  004FD6  D7FC               	goto	u14645
 14854  004FD8  5162               	movf	(??_printBinary+1)& (0+255),w,b
 14855  004FDA  1563               	andwf	printBinary@value& (0+255),w,b
 14856  004FDC  E006               	bz	l1039
 14857  004FDE                     l1035:
 14858  004FDE  A2AC               	btfss	4012,1,c	;volatile
 14859  004FE0  D7FE               	goto	l1035
 14860                           
 14861                           ;main.c: 2232: WriteUSART('1');
 14862  004FE2  0E31               	movlw	49
 14863  004FE4  EC56  F02A         	call	_WriteUSART
 14864                           
 14865                           ;main.c: 2233: } else {
 14866  004FE8  D005               	goto	l11549
 14867  004FEA                     l1039:
 14868  004FEA  A2AC               	btfss	4012,1,c	;volatile
 14869  004FEC  D7FE               	goto	l1039
 14870                           
 14871                           ;main.c: 2235: WriteUSART('0');
 14872  004FEE  0E30               	movlw	48
 14873  004FF0  EC56  F02A         	call	_WriteUSART
 14874  004FF4                     l11549:
 14875  004FF4  0100               	movlb	0	; () banked
 14876  004FF6  0764               	decf	printBinary@i& (0+255),f,b
 14877  004FF8  A0D8               	btfss	status,0,c
 14878  004FFA  0765               	decf	(printBinary@i+1)& (0+255),f,b
 14879                           
 14880                           ; BSR set to: 0
 14881  004FFC  BF65               	btfsc	(printBinary@i+1)& (0+255),7,b
 14882                           
 14883                           ; BSR set to: 0
 14884  004FFE  0012               	return	
 14885  005000  D7E1               	goto	l11541
 14886  005002                     __end_of_printBinary:
 14887                           	opt stack 0
 14888                           tblptru	equ	0xFF8
 14889                           tblptrh	equ	0xFF7
 14890                           tblptrl	equ	0xFF6
 14891                           tablat	equ	0xFF5
 14892                           prodh	equ	0xFF4
 14893                           prodl	equ	0xFF3
 14894                           intcon	equ	0xFF2
 14895                           indf0	equ	0xFEF
 14896                           postinc0	equ	0xFEE
 14897                           fsr0h	equ	0xFEA
 14898                           fsr0l	equ	0xFE9
 14899                           wreg	equ	0xFE8
 14900                           indf1	equ	0xFE7
 14901                           postinc1	equ	0xFE6
 14902                           postdec1	equ	0xFE5
 14903                           fsr1h	equ	0xFE2
 14904                           fsr1l	equ	0xFE1
 14905                           indf2	equ	0xFDF
 14906                           postinc2	equ	0xFDE
 14907                           postdec2	equ	0xFDD
 14908                           plusw2	equ	0xFDB
 14909                           fsr2h	equ	0xFDA
 14910                           fsr2l	equ	0xFD9
 14911                           status	equ	0xFD8
 14912                           
 14913 ;; *************** function _readRegisterExtended *****************
 14914 ;; Defined at:
 14915 ;;		line 2038 in file "main.c"
 14916 ;; Parameters:    Size  Location     Type
 14917 ;;  nodeid          1    wreg     unsigned char 
 14918 ;;  page            2   86[BANK0 ] unsigned short 
 14919 ;;  reg             1   88[BANK0 ] unsigned char 
 14920 ;;  timeout         2   89[BANK0 ] unsigned short 
 14921 ;;  value           2   91[BANK0 ] PTR unsigned char 
 14922 ;;		 -> doModeVerbose@value(1), 
 14923 ;; Auto vars:     Size  Location     Type
 14924 ;;  nodeid          1   97[BANK0 ] unsigned char 
 14925 ;; Return value:  Size  Location     Type
 14926 ;;                  1    wreg      enum E15660
 14927 ;; Registers used:
 14928 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14929 ;; Tracked objects:
 14930 ;;		On entry : F/2
 14931 ;;		On exit  : E/0
 14932 ;;		Unchanged: 0/0
 14933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14934 ;;      Params:         0       7       0       0       0       0       0
 14935 ;;      Locals:         0       1       0       0       0       0       0
 14936 ;;      Temps:          0       4       0       0       0       0       0
 14937 ;;      Totals:         0      12       0       0       0       0       0
 14938 ;;Total ram usage:       12 bytes
 14939 ;; Hardware stack levels used:    1
 14940 ;; Hardware stack levels required when called:    7
 14941 ;; This function calls:
 14942 ;;		_sendVSCPFrame
 14943 ;;		_getVSCPFrame
 14944 ;; This function is called by:
 14945 ;;		_doModeVerbose
 14946 ;; This function uses a non-reentrant model
 14947 ;;
 14948                           
 14949                           	psect	text24
 14950  003ADE                     __ptext24:
 14951                           	opt stack 0
 14952  003ADE                     _readRegisterExtended:
 14953                           	opt stack 22
 14954                           
 14955                           ; BSR set to: 0
 14956                           ;incstack = 0
 14957                           ;incstack = 0
 14958                           ;readRegisterExtended@nodeid stored from wreg
 14959  003ADE  CFE8 F0C1          	movff	wreg,readRegisterExtended@nodeid
 14960                           
 14961                           ; BSR set to: 2
 14962                           ;main.c: 2039: vscpData[ 0 ] = nodeid;
 14963  003AE2  C0C1  F1A4         	movff	readRegisterExtended@nodeid,_vscpData
 14964                           
 14965                           ; BSR set to: 2
 14966                           ;main.c: 2040: vscpData[ 1 ] = page >> 8;
 14967  003AE6  0100               	movlb	0	; () banked
 14968  003AE8  51B7               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 14969  003AEA  0101               	movlb	1	; () banked
 14970  003AEC  6FA5               	movwf	(_vscpData+1)& (0+255),b
 14971                           
 14972                           ; BSR set to: 1
 14973                           ;main.c: 2041: vscpData[ 2 ] = page & 0xff;
 14974  003AEE  C0B6  F1A6         	movff	readRegisterExtended@page,_vscpData+2
 14975                           
 14976                           ; BSR set to: 1
 14977                           ;main.c: 2042: vscpData[ 3 ] = reg;
 14978  003AF2  C0B8  F1A7         	movff	readRegisterExtended@reg,_vscpData+3
 14979                           
 14980                           ; BSR set to: 1
 14981                           ;main.c: 2043: vscpData[ 4 ] = 1;
 14982  003AF6  0E01               	movlw	1
 14983  003AF8  6FA8               	movwf	(_vscpData+4)& (0+255),b
 14984                           
 14985                           ; BSR set to: 1
 14986                           ;main.c: 2045: if (sendVSCPFrame(0,
 14987                           ;main.c: 2046: 37,
 14988                           ;main.c: 2047: 0,
 14989                           ;main.c: 2048: 0,
 14990                           ;main.c: 2049: 5,
 14991                           ;main.c: 2050: vscpData)) {
 14992  003AFA  0100               	movlb	0	; () banked
 14993  003AFC  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 14994  003AFE  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 14995  003B00  0E25               	movlw	37
 14996  003B02  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 14997  003B04  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 14998  003B06  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 14999  003B08  0E05               	movlw	5
 15000  003B0A  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15001  003B0C  0E01               	movlw	high _vscpData
 15002  003B0E  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 15003  003B10  0EA4               	movlw	low _vscpData
 15004  003B12  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15005  003B14  EC46  F021         	call	_sendVSCPFrame	;wreg free
 15006  003B18  0900               	iorlw	0
 15007  003B1A  E05D               	bz	l11181
 15008                           
 15009                           ; BSR set to: 0
 15010                           ;main.c: 2052: timekeeper = 0;
 15011  003B1C  6BE9               	clrf	_timekeeper& (0+255),b	;volatile
 15012  003B1E  6BEA               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 15013  003B20  6BEB               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 15014  003B22  6BEC               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 15015                           
 15016                           ;main.c: 2053: while (timekeeper < timeout) {
 15017  003B24  D048               	goto	l11179
 15018  003B26                     l998:
 15019                           
 15020                           ; BSR set to: 0
 15021  003B26  0004               	clrwdt		;# 
 15022                           
 15023                           ;main.c: 2057: if (getVSCPFrame(&vscpClass,
 15024                           ;main.c: 2058: &vscpType,
 15025                           ;main.c: 2059: &vscpNodeId,
 15026                           ;main.c: 2060: &vscpPriority,
 15027                           ;main.c: 2061: &vscpSize,
 15028                           ;main.c: 2062: vscpData)) {
 15029  003B28  0E01               	movlw	high _vscpClass
 15030  003B2A  0100               	movlb	0	; () banked
 15031  003B2C  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15032  003B2E  0EAC               	movlw	low _vscpClass
 15033  003B30  6F72               	movwf	?_getVSCPFrame& (0+255),b
 15034  003B32  0E01               	movlw	high _vscpType
 15035  003B34  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15036  003B36  0EB1               	movlw	low _vscpType
 15037  003B38  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15038  003B3A  0E01               	movlw	high _vscpNodeId
 15039  003B3C  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 15040  003B3E  0EAE               	movlw	low _vscpNodeId
 15041  003B40  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15042  003B42  0E01               	movlw	high _vscpPriority
 15043  003B44  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 15044  003B46  0EAF               	movlw	low _vscpPriority
 15045  003B48  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 15046  003B4A  0E01               	movlw	high _vscpSize
 15047  003B4C  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 15048  003B4E  0EB0               	movlw	low _vscpSize
 15049  003B50  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 15050  003B52  0E01               	movlw	high _vscpData
 15051  003B54  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 15052  003B56  0EA4               	movlw	low _vscpData
 15053  003B58  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 15054  003B5A  EC4E  F024         	call	_getVSCPFrame	;wreg free
 15055  003B5E  0900               	iorlw	0
 15056  003B60  E02A               	bz	l11179
 15057                           
 15058                           ; BSR set to: 0
 15059                           ;main.c: 2063: if ((nodeid == vscpNodeId) &&
 15060                           ;main.c: 2064: (0 == vscpClass) &&
 15061                           ;main.c: 2065: (39 == vscpType) &&
 15062                           ;main.c: 2066: (5 == vscpSize) &&
 15063                           ;main.c: 2067: (0 == vscpData[ 0 ]) &&
 15064                           ;main.c: 2068: ((page >> 8) == vscpData[ 1 ]) &&
 15065                           ;main.c: 2069: ((page & 0xff) == vscpData[ 2 ]) &&
 15066                           ;main.c: 2070: (reg == vscpData[ 3 ])) {
 15067  003B62  0101               	movlb	1	; () banked
 15068  003B64  51AE               	movf	_vscpNodeId& (0+255),w,b
 15069  003B66  0100               	movlb	0	; () banked
 15070  003B68  63C1               	cpfseq	readRegisterExtended@nodeid& (0+255),b
 15071  003B6A  D025               	goto	l11179
 15072                           
 15073                           ; BSR set to: 0
 15074  003B6C  0101               	movlb	1	; () banked
 15075  003B6E  51AD               	movf	(_vscpClass+1)& (0+255),w,b
 15076  003B70  11AC               	iorwf	_vscpClass& (0+255),w,b
 15077  003B72  E121               	bnz	l11179
 15078                           
 15079                           ; BSR set to: 1
 15080  003B74  51B1               	movf	_vscpType& (0+255),w,b
 15081  003B76  0A27               	xorlw	39
 15082  003B78  E11E               	bnz	l11179
 15083                           
 15084                           ; BSR set to: 1
 15085  003B7A  51B0               	movf	_vscpSize& (0+255),w,b
 15086  003B7C  0A05               	xorlw	5
 15087  003B7E  E11B               	bnz	l11179
 15088                           
 15089                           ; BSR set to: 1
 15090  003B80  67A4               	tstfsz	_vscpData& (0+255),b
 15091  003B82  D019               	goto	l11179
 15092                           
 15093                           ; BSR set to: 1
 15094  003B84  0100               	movlb	0	; () banked
 15095  003B86  51B7               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 15096  003B88  0101               	movlb	1	; () banked
 15097  003B8A  19A5               	xorwf	(_vscpData+1)& (0+255),w,b
 15098  003B8C  E114               	bnz	l11179
 15099                           
 15100                           ; BSR set to: 1
 15101  003B8E  0100               	movlb	0	; () banked
 15102  003B90  51B6               	movf	readRegisterExtended@page& (0+255),w,b
 15103  003B92  EE21  F0A6         	lfsr	2,_vscpData+2
 15104  003B96  62DF               	cpfseq	indf2,c
 15105  003B98  D00E               	goto	l11179
 15106                           
 15107                           ; BSR set to: 1
 15108  003B9A  51B8               	movf	readRegisterExtended@reg& (0+255),w,b
 15109  003B9C  0101               	movlb	1	; () banked
 15110  003B9E  EE21  F0A7         	lfsr	2,_vscpData+3
 15111  003BA2  62DF               	cpfseq	indf2,c
 15112  003BA4  D008               	goto	l11179
 15113                           
 15114                           ; BSR set to: 1
 15115                           ;main.c: 2071: *value = vscpData[ 4 ];
 15116  003BA6  C0BB  FFD9         	movff	readRegisterExtended@value,fsr2l
 15117  003BAA  C0BC  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 15118  003BAE  C1A8  FFDF         	movff	_vscpData+4,indf2
 15119                           
 15120                           ; BSR set to: 1
 15121                           ;main.c: 2072: return 1;
 15122  003BB2  0E01               	movlw	1
 15123  003BB4  D011               	goto	l1001
 15124  003BB6                     l11179:
 15125  003BB6  0100               	movlb	0	; () banked
 15126  003BB8  51B9               	movf	readRegisterExtended@timeout& (0+255),w,b
 15127  003BBA  6FBD               	movwf	??_readRegisterExtended& (0+255),b
 15128  003BBC  51BA               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 15129  003BBE  6FBE               	movwf	(??_readRegisterExtended+1)& (0+255),b
 15130  003BC0  6BBF               	clrf	(??_readRegisterExtended+2)& (0+255),b
 15131  003BC2  6BC0               	clrf	(??_readRegisterExtended+3)& (0+255),b
 15132  003BC4  51BD               	movf	??_readRegisterExtended& (0+255),w,b
 15133  003BC6  5DE9               	subwf	_timekeeper& (0+255),w,b	;volatile
 15134  003BC8  51BE               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 15135  003BCA  59EA               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 15136  003BCC  51BF               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 15137  003BCE  59EB               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 15138  003BD0  51C0               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 15139  003BD2  59EC               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 15140  003BD4  E3A8               	bnc	l998
 15141  003BD6                     l11181:
 15142                           
 15143                           ; BSR set to: 0
 15144                           ;main.c: 2073: }
 15145                           ;main.c: 2074: }
 15146                           ;main.c: 2075: }
 15147                           ;main.c: 2076: }
 15148                           ;main.c: 2078: return 0;
 15149  003BD6  0E00               	movlw	0
 15150  003BD8                     l1001:
 15151  003BD8  0012               	return	
 15152  003BDA                     __end_of_readRegisterExtended:
 15153                           	opt stack 0
 15154                           tblptru	equ	0xFF8
 15155                           tblptrh	equ	0xFF7
 15156                           tblptrl	equ	0xFF6
 15157                           tablat	equ	0xFF5
 15158                           prodh	equ	0xFF4
 15159                           prodl	equ	0xFF3
 15160                           intcon	equ	0xFF2
 15161                           indf0	equ	0xFEF
 15162                           postinc0	equ	0xFEE
 15163                           fsr0h	equ	0xFEA
 15164                           fsr0l	equ	0xFE9
 15165                           wreg	equ	0xFE8
 15166                           indf1	equ	0xFE7
 15167                           postinc1	equ	0xFE6
 15168                           postdec1	equ	0xFE5
 15169                           fsr1h	equ	0xFE2
 15170                           fsr1l	equ	0xFE1
 15171                           indf2	equ	0xFDF
 15172                           postinc2	equ	0xFDE
 15173                           postdec2	equ	0xFDD
 15174                           plusw2	equ	0xFDB
 15175                           fsr2h	equ	0xFDA
 15176                           fsr2l	equ	0xFD9
 15177                           status	equ	0xFD8
 15178                           
 15179 ;; *************** function _strcpy *****************
 15180 ;; Defined at:
 15181 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 15182 ;; Parameters:    Size  Location     Type
 15183 ;;  to              2    0[BANK0 ] PTR unsigned char 
 15184 ;;		 -> cmdbuf(80), 
 15185 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 15186 ;;		 -> cmdbuf(80), 
 15187 ;; Auto vars:     Size  Location     Type
 15188 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 15189 ;;		 -> cmdbuf(80), 
 15190 ;; Return value:  Size  Location     Type
 15191 ;;                  2    0[BANK0 ] PTR unsigned char 
 15192 ;; Registers used:
 15193 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15194 ;; Tracked objects:
 15195 ;;		On entry : F/1
 15196 ;;		On exit  : E/0
 15197 ;;		Unchanged: 0/0
 15198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15199 ;;      Params:         0       4       0       0       0       0       0
 15200 ;;      Locals:         0       2       0       0       0       0       0
 15201 ;;      Temps:          0       0       0       0       0       0       0
 15202 ;;      Totals:         0       6       0       0       0       0       0
 15203 ;;Total ram usage:        6 bytes
 15204 ;; Hardware stack levels used:    1
 15205 ;; Hardware stack levels required when called:    3
 15206 ;; This function calls:
 15207 ;;		Nothing
 15208 ;; This function is called by:
 15209 ;;		_doModeVerbose
 15210 ;; This function uses a non-reentrant model
 15211 ;;
 15212                           
 15213                           	psect	text25
 15214  00536E                     __ptext25:
 15215                           	opt stack 0
 15216  00536E                     _strcpy:
 15217                           	opt stack 26
 15218                           
 15219                           ; BSR set to: 1
 15220                           
 15221                           ;incstack = 0
 15222                           ;incstack = 0
 15223  00536E  C060  F064         	movff	strcpy@to,strcpy@cp
 15224  005372  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 15225  005376  D005               	goto	l11133
 15226  005378                     l11131:
 15227  005378  0100               	movlb	0	; () banked
 15228  00537A  4B64               	infsnz	strcpy@cp& (0+255),f,b
 15229  00537C  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 15230  00537E  4B62               	infsnz	strcpy@from& (0+255),f,b
 15231  005380  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 15232  005382                     l11133:
 15233  005382  C062  FFD9         	movff	strcpy@from,fsr2l
 15234  005386  C063  FFDA         	movff	strcpy@from+1,fsr2h
 15235  00538A  C064  FFE1         	movff	strcpy@cp,fsr1l
 15236  00538E  C065  FFE2         	movff	strcpy@cp+1,fsr1h
 15237  005392  CFDF FFE7          	movff	indf2,indf1
 15238  005396  50E7               	movf	indf1,w,c
 15239  005398  B4D8               	btfsc	status,2,c
 15240  00539A  0012               	return	
 15241  00539C  D7ED               	goto	l11131
 15242  00539E                     __end_of_strcpy:
 15243                           	opt stack 0
 15244                           tblptru	equ	0xFF8
 15245                           tblptrh	equ	0xFF7
 15246                           tblptrl	equ	0xFF6
 15247                           tablat	equ	0xFF5
 15248                           prodh	equ	0xFF4
 15249                           prodl	equ	0xFF3
 15250                           intcon	equ	0xFF2
 15251                           indf0	equ	0xFEF
 15252                           postinc0	equ	0xFEE
 15253                           fsr0h	equ	0xFEA
 15254                           fsr0l	equ	0xFE9
 15255                           wreg	equ	0xFE8
 15256                           indf1	equ	0xFE7
 15257                           postinc1	equ	0xFE6
 15258                           postdec1	equ	0xFE5
 15259                           fsr1h	equ	0xFE2
 15260                           fsr1l	equ	0xFE1
 15261                           indf2	equ	0xFDF
 15262                           postinc2	equ	0xFDE
 15263                           postdec2	equ	0xFDD
 15264                           plusw2	equ	0xFDB
 15265                           fsr2h	equ	0xFDA
 15266                           fsr2l	equ	0xFD9
 15267                           status	equ	0xFD8
 15268                           
 15269 ;; *************** function _findNodes *****************
 15270 ;; Defined at:
 15271 ;;		line 2377 in file "main.c"
 15272 ;; Parameters:    Size  Location     Type
 15273 ;;		None
 15274 ;; Auto vars:     Size  Location     Type
 15275 ;;  i               1  105[BANK0 ] unsigned char 
 15276 ;;  value           1  104[BANK0 ] unsigned char 
 15277 ;;  nFound          1  103[BANK0 ] unsigned char 
 15278 ;; Return value:  Size  Location     Type
 15279 ;;		None               void
 15280 ;; Registers used:
 15281 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15282 ;; Tracked objects:
 15283 ;;		On entry : F/1
 15284 ;;		On exit  : 0/0
 15285 ;;		Unchanged: 0/0
 15286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15287 ;;      Params:         0       0       0       0       0       0       0
 15288 ;;      Locals:         0       5       0       0       0       0       0
 15289 ;;      Temps:          0       0       0       0       0       0       0
 15290 ;;      Totals:         0       5       0       0       0       0       0
 15291 ;;Total ram usage:        5 bytes
 15292 ;; Hardware stack levels used:    1
 15293 ;; Hardware stack levels required when called:    9
 15294 ;; This function calls:
 15295 ;;		_putsUSART
 15296 ;;		_printNodeFirmwareVersion
 15297 ;;		_printGUID
 15298 ;;		_printMDF
 15299 ;;		_itoa
 15300 ;;		_readRegister
 15301 ;; This function is called by:
 15302 ;;		_doModeVerbose
 15303 ;; This function uses a non-reentrant model
 15304 ;;
 15305                           
 15306                           	psect	text26
 15307  003BDA                     __ptext26:
 15308                           	opt stack 0
 15309  003BDA                     _findNodes:
 15310                           	opt stack 20
 15311                           
 15312                           ; BSR set to: 1
 15313                           ;main.c: 2378: uint8_t nFound = 0;
 15314                           
 15315                           ;incstack = 0
 15316                           ;incstack = 0
 15317  003BDA  0100               	movlb	0	; () banked
 15318  003BDC  6BC7               	clrf	findNodes@nFound& (0+255),b
 15319                           
 15320                           ; BSR set to: 0
 15321                           ;main.c: 2379: uint8_t i;
 15322                           ;main.c: 2380: uint8_t value;
 15323                           ;main.c: 2382: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 15324  003BDE  0E71               	movlw	high STR_230
 15325  003BE0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15326  003BE2  0E77               	movlw	low STR_230
 15327  003BE4  6F61               	movwf	?_putsUSART& (0+255),b
 15328  003BE6  EC89  F027         	call	_putsUSART	;wreg free
 15329                           
 15330                           ;main.c: 2384: for (i = 1; i != 0; i++) {
 15331  003BEA  0E01               	movlw	1
 15332  003BEC  0100               	movlb	0	; () banked
 15333  003BEE  6FC9               	movwf	findNodes@i& (0+255),b
 15334  003BF0                     l1100:
 15335                           
 15336                           ; BSR set to: 0
 15337  003BF0  0004               	clrwdt		;# 
 15338                           
 15339                           ;main.c: 2388: if (readRegister(i,
 15340                           ;main.c: 2389: 0xE0,
 15341                           ;main.c: 2390: rwtimeout,
 15342                           ;main.c: 2391: &value)) {
 15343  003BF2  0EE0               	movlw	224
 15344  003BF4  0100               	movlb	0	; () banked
 15345  003BF6  6FB6               	movwf	?_readRegister& (0+255),b
 15346  003BF8  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 15347  003BFC  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 15348  003BFE  0EC8               	movlw	low findNodes@value
 15349  003C00  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 15350  003C02  51C9               	movf	findNodes@i& (0+255),w,b
 15351  003C04  EC19  F020         	call	_readRegister
 15352  003C08  0900               	iorlw	0
 15353  003C0A  E043               	bz	l11119
 15354                           
 15355                           ;main.c: 2392: putsUSART((char *) "Node found with node id = ");
 15356  003C0C  0E7B               	movlw	high STR_231
 15357  003C0E  0100               	movlb	0	; () banked
 15358  003C10  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15359  003C12  0E9A               	movlw	low STR_231
 15360  003C14  6F61               	movwf	?_putsUSART& (0+255),b
 15361  003C16  EC89  F027         	call	_putsUSART	;wreg free
 15362                           
 15363                           ;main.c: 2393: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 15364  003C1A  0101               	movlb	1	; () banked
 15365  003C1C  6700               	tstfsz	_bHex& (0+255),b
 15366  003C1E  D004               	goto	l11101
 15367                           
 15368                           ; BSR set to: 1
 15369  003C20  0100               	movlb	0	; () banked
 15370  003C22  6BC6               	clrf	(_findNodes$1485+1)& (0+255),b
 15371  003C24  0E0A               	movlw	10
 15372  003C26  D003               	goto	L13
 15373  003C28                     l11101:
 15374                           
 15375                           ; BSR set to: 1
 15376  003C28  0100               	movlb	0	; () banked
 15377  003C2A  6BC6               	clrf	(_findNodes$1485+1)& (0+255),b
 15378  003C2C  0E10               	movlw	16
 15379  003C2E                     L13:
 15380  003C2E  6FC5               	movwf	_findNodes$1485& (0+255),b
 15381                           
 15382                           ; BSR set to: 0
 15383  003C30  0E01               	movlw	high _wrkbuf
 15384  003C32  0100               	movlb	0	; () banked
 15385  003C34  6F71               	movwf	(?_itoa+1)& (0+255),b
 15386  003C36  0E54               	movlw	low _wrkbuf
 15387  003C38  6F70               	movwf	?_itoa& (0+255),b
 15388  003C3A  C1AE  F072         	movff	_vscpNodeId,?_itoa+2
 15389  003C3E  6B73               	clrf	(?_itoa+3)& (0+255),b
 15390  003C40  C0C5  F074         	movff	_findNodes$1485,?_itoa+4
 15391  003C44  C0C6  F075         	movff	_findNodes$1485+1,?_itoa+5
 15392  003C48  EC67  F029         	call	_itoa	;wreg free
 15393                           
 15394                           ; BSR set to: 0
 15395                           ;main.c: 2394: putsUSART(wrkbuf);
 15396  003C4C  0E01               	movlw	high _wrkbuf
 15397  003C4E  0100               	movlb	0	; () banked
 15398  003C50  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15399  003C52  0E54               	movlw	low _wrkbuf
 15400  003C54  6F61               	movwf	?_putsUSART& (0+255),b
 15401  003C56  EC89  F027         	call	_putsUSART	;wreg free
 15402                           
 15403                           ;main.c: 2395: putsUSART((char *) "\r\n");
 15404  003C5A  0E74               	movlw	high (STR_189+50)
 15405  003C5C  0100               	movlb	0	; () banked
 15406  003C5E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15407  003C60  0EAE               	movlw	low (STR_189+50)
 15408  003C62  6F61               	movwf	?_putsUSART& (0+255),b
 15409  003C64  EC89  F027         	call	_putsUSART	;wreg free
 15410                           
 15411                           ;main.c: 2396: printNodeFirmwareVersion(i);
 15412  003C68  0100               	movlb	0	; () banked
 15413  003C6A  51C9               	movf	findNodes@i& (0+255),w,b
 15414  003C6C  ECB1  F01F         	call	_printNodeFirmwareVersion
 15415                           
 15416                           ;main.c: 2397: printGUID(i);
 15417  003C70  0100               	movlb	0	; () banked
 15418  003C72  51C9               	movf	findNodes@i& (0+255),w,b
 15419  003C74  ECED  F01C         	call	_printGUID
 15420                           
 15421                           ;main.c: 2398: printMDF(i);
 15422  003C78  0100               	movlb	0	; () banked
 15423  003C7A  51C9               	movf	findNodes@i& (0+255),w,b
 15424  003C7C  EC2E  F023         	call	_printMDF
 15425                           
 15426                           ;main.c: 2399: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 15427  003C80  0E71               	movlw	high STR_230
 15428  003C82  0100               	movlb	0	; () banked
 15429  003C84  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15430  003C86  0E77               	movlw	low STR_230
 15431  003C88  6F61               	movwf	?_putsUSART& (0+255),b
 15432  003C8A  EC89  F027         	call	_putsUSART	;wreg free
 15433                           
 15434                           ;main.c: 2400: nFound++;
 15435  003C8E  0100               	movlb	0	; () banked
 15436  003C90  2BC7               	incf	findNodes@nFound& (0+255),f,b
 15437  003C92                     l11119:
 15438  003C92  0100               	movlb	0	; () banked
 15439  003C94  2BC9               	incf	findNodes@i& (0+255),f,b
 15440                           
 15441                           ; BSR set to: 0
 15442  003C96  67C9               	tstfsz	findNodes@i& (0+255),b
 15443  003C98  D7AB               	goto	l1100
 15444                           
 15445                           ; BSR set to: 0
 15446                           ;main.c: 2401: }
 15447                           ;main.c: 2403: }
 15448                           ;main.c: 2405: itoa(wrkbuf, nFound, 10);
 15449  003C9A  0E01               	movlw	high _wrkbuf
 15450  003C9C  6F71               	movwf	(?_itoa+1)& (0+255),b
 15451  003C9E  0E54               	movlw	low _wrkbuf
 15452  003CA0  6F70               	movwf	?_itoa& (0+255),b
 15453  003CA2  C0C7  F072         	movff	findNodes@nFound,?_itoa+2
 15454  003CA6  6B73               	clrf	(?_itoa+3)& (0+255),b
 15455  003CA8  6B75               	clrf	(?_itoa+5)& (0+255),b
 15456  003CAA  0E0A               	movlw	10
 15457  003CAC  6F74               	movwf	(?_itoa+4)& (0+255),b
 15458  003CAE  EC67  F029         	call	_itoa	;wreg free
 15459                           
 15460                           ; BSR set to: 0
 15461                           ;main.c: 2406: putsUSART(wrkbuf);
 15462  003CB2  0E01               	movlw	high _wrkbuf
 15463  003CB4  0100               	movlb	0	; () banked
 15464  003CB6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15465  003CB8  0E54               	movlw	low _wrkbuf
 15466  003CBA  6F61               	movwf	?_putsUSART& (0+255),b
 15467  003CBC  EC89  F027         	call	_putsUSART	;wreg free
 15468                           
 15469                           ;main.c: 2407: putsUSART((char *) " nodes found\r\n");
 15470  003CC0  0E7E               	movlw	high STR_234
 15471  003CC2  0100               	movlb	0	; () banked
 15472  003CC4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15473  003CC6  0E4F               	movlw	low STR_234
 15474  003CC8  6F61               	movwf	?_putsUSART& (0+255),b
 15475  003CCA  EF89  F027         	goto	_putsUSART	;wreg free
 15476  003CCE                     __end_of_findNodes:
 15477                           	opt stack 0
 15478                           tblptru	equ	0xFF8
 15479                           tblptrh	equ	0xFF7
 15480                           tblptrl	equ	0xFF6
 15481                           tablat	equ	0xFF5
 15482                           prodh	equ	0xFF4
 15483                           prodl	equ	0xFF3
 15484                           intcon	equ	0xFF2
 15485                           indf0	equ	0xFEF
 15486                           postinc0	equ	0xFEE
 15487                           fsr0h	equ	0xFEA
 15488                           fsr0l	equ	0xFE9
 15489                           wreg	equ	0xFE8
 15490                           indf1	equ	0xFE7
 15491                           postinc1	equ	0xFE6
 15492                           postdec1	equ	0xFE5
 15493                           fsr1h	equ	0xFE2
 15494                           fsr1l	equ	0xFE1
 15495                           indf2	equ	0xFDF
 15496                           postinc2	equ	0xFDE
 15497                           postdec2	equ	0xFDD
 15498                           plusw2	equ	0xFDB
 15499                           fsr2h	equ	0xFDA
 15500                           fsr2l	equ	0xFD9
 15501                           status	equ	0xFD8
 15502                           
 15503 ;; *************** function _printMDF *****************
 15504 ;; Defined at:
 15505 ;;		line 2458 in file "main.c"
 15506 ;; Parameters:    Size  Location     Type
 15507 ;;  nodeid          1    wreg     unsigned char 
 15508 ;; Auto vars:     Size  Location     Type
 15509 ;;  nodeid          1   95[BANK0 ] unsigned char 
 15510 ;;  p               2   97[BANK0 ] PTR unsigned char 
 15511 ;;		 -> wrkbuf(80), 
 15512 ;;  i               1   99[BANK0 ] unsigned char 
 15513 ;;  value           1   96[BANK0 ] unsigned char 
 15514 ;; Return value:  Size  Location     Type
 15515 ;;		None               void
 15516 ;; Registers used:
 15517 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15518 ;; Tracked objects:
 15519 ;;		On entry : D/2
 15520 ;;		On exit  : 0/0
 15521 ;;		Unchanged: 0/0
 15522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15523 ;;      Params:         0       0       0       0       0       0       0
 15524 ;;      Locals:         0       5       0       0       0       0       0
 15525 ;;      Temps:          0       0       0       0       0       0       0
 15526 ;;      Totals:         0       5       0       0       0       0       0
 15527 ;;Total ram usage:        5 bytes
 15528 ;; Hardware stack levels used:    1
 15529 ;; Hardware stack levels required when called:    8
 15530 ;; This function calls:
 15531 ;;		_putsUSART
 15532 ;;		_memset
 15533 ;;		_readRegister
 15534 ;; This function is called by:
 15535 ;;		_doModeVerbose
 15536 ;;		_findNodes
 15537 ;; This function uses a non-reentrant model
 15538 ;;
 15539                           
 15540                           	psect	text27
 15541  00465C                     __ptext27:
 15542                           	opt stack 0
 15543  00465C                     _printMDF:
 15544                           	opt stack 21
 15545                           
 15546                           ;incstack = 0
 15547                           ;incstack = 0
 15548                           ;printMDF@nodeid stored from wreg
 15549  00465C  CFE8 F0BF          	movff	wreg,printMDF@nodeid
 15550                           
 15551                           ;main.c: 2459: uint8_t i;
 15552                           ;main.c: 2460: uint8_t value;
 15553                           ;main.c: 2461: char *p = wrkbuf;
 15554  004660  0E01               	movlw	high _wrkbuf
 15555  004662  0100               	movlb	0	; () banked
 15556  004664  6FC2               	movwf	(printMDF@p+1)& (0+255),b
 15557  004666  0E54               	movlw	low _wrkbuf
 15558  004668  6FC1               	movwf	printMDF@p& (0+255),b
 15559                           
 15560                           ; BSR set to: 0
 15561                           ;main.c: 2462: memset(wrkbuf, 0, sizeof (wrkbuf));
 15562  00466A  0E01               	movlw	high _wrkbuf
 15563  00466C  6F61               	movwf	(?_memset+1)& (0+255),b
 15564  00466E  0E54               	movlw	low _wrkbuf
 15565  004670  6F60               	movwf	?_memset& (0+255),b
 15566  004672  6B63               	clrf	(?_memset+3)& (0+255),b
 15567  004674  6B62               	clrf	(?_memset+2)& (0+255),b
 15568  004676  6B65               	clrf	(?_memset+5)& (0+255),b
 15569  004678  0E50               	movlw	80
 15570  00467A  6F64               	movwf	(?_memset+4)& (0+255),b
 15571  00467C  ECE6  F029         	call	_memset	;wreg free
 15572                           
 15573                           ; BSR set to: 0
 15574                           ;main.c: 2463: putsUSART((char *) "MDF = http://");
 15575  004680  0E7E               	movlw	high STR_240
 15576  004682  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15577  004684  0E6D               	movlw	low STR_240
 15578  004686  6F61               	movwf	?_putsUSART& (0+255),b
 15579  004688  EC89  F027         	call	_putsUSART	;wreg free
 15580                           
 15581                           ;main.c: 2465: for (i = 0; i < 32; i++) {
 15582  00468C  0100               	movlb	0	; () banked
 15583  00468E  6BC3               	clrf	printMDF@i& (0+255),b
 15584  004690                     l11667:
 15585                           
 15586                           ; BSR set to: 0
 15587                           ;main.c: 2466: if (readRegister(nodeid,
 15588                           ;main.c: 2467: 0xE0 + i,
 15589                           ;main.c: 2468: rwtimeout,
 15590                           ;main.c: 2469: &value)) {
 15591  004690  51C3               	movf	printMDF@i& (0+255),w,b
 15592  004692  0FE0               	addlw	224
 15593  004694  6FB6               	movwf	?_readRegister& (0+255),b
 15594  004696  0100               	movlb	0	; () banked
 15595  004698  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 15596  00469C  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 15597  00469E  0EC0               	movlw	low printMDF@value
 15598  0046A0  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 15599  0046A2  51BF               	movf	printMDF@nodeid& (0+255),w,b
 15600  0046A4  EC19  F020         	call	_readRegister
 15601  0046A8  0900               	iorlw	0
 15602  0046AA  E00A               	bz	l11673
 15603                           
 15604                           ;main.c: 2470: *p = value;
 15605  0046AC  C0C1  FFD9         	movff	printMDF@p,fsr2l
 15606  0046B0  C0C2  FFDA         	movff	printMDF@p+1,fsr2h
 15607  0046B4  C0C0  FFDF         	movff	printMDF@value,indf2
 15608  0046B8                     l11671:
 15609                           
 15610                           ;main.c: 2471: p++;
 15611  0046B8  0100               	movlb	0	; () banked
 15612  0046BA  4BC1               	infsnz	printMDF@p& (0+255),f,b
 15613  0046BC  2BC2               	incf	(printMDF@p+1)& (0+255),f,b
 15614                           
 15615                           ;main.c: 2473: }
 15616  0046BE  D007               	goto	l11677
 15617  0046C0                     l11673:
 15618                           
 15619                           ;main.c: 2474: else {
 15620                           ;main.c: 2475: *p = '?';
 15621  0046C0  C0C1  FFD9         	movff	printMDF@p,fsr2l
 15622  0046C4  C0C2  FFDA         	movff	printMDF@p+1,fsr2h
 15623  0046C8  0E3F               	movlw	63
 15624  0046CA  6EDF               	movwf	indf2,c
 15625  0046CC  D7F5               	goto	l11671
 15626  0046CE                     l11677:
 15627                           
 15628                           ; BSR set to: 0
 15629  0046CE  2BC3               	incf	printMDF@i& (0+255),f,b
 15630                           
 15631                           ; BSR set to: 0
 15632  0046D0  0E1F               	movlw	31
 15633  0046D2  65C3               	cpfsgt	printMDF@i& (0+255),b
 15634  0046D4  D7DD               	goto	l11667
 15635                           
 15636                           ; BSR set to: 0
 15637                           ;main.c: 2477: }
 15638                           ;main.c: 2478: }
 15639                           ;main.c: 2480: putsUSART(wrkbuf);
 15640  0046D6  0E01               	movlw	high _wrkbuf
 15641  0046D8  0100               	movlb	0	; () banked
 15642  0046DA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15643  0046DC  0E54               	movlw	low _wrkbuf
 15644  0046DE  6F61               	movwf	?_putsUSART& (0+255),b
 15645  0046E0  EC89  F027         	call	_putsUSART	;wreg free
 15646                           
 15647                           ;main.c: 2481: putsUSART((char *) "\r\n");
 15648  0046E4  0E74               	movlw	high (STR_189+50)
 15649  0046E6  0100               	movlb	0	; () banked
 15650  0046E8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15651  0046EA  0EAE               	movlw	low (STR_189+50)
 15652  0046EC  6F61               	movwf	?_putsUSART& (0+255),b
 15653  0046EE  EF89  F027         	goto	_putsUSART	;wreg free
 15654  0046F2                     __end_of_printMDF:
 15655                           	opt stack 0
 15656                           tblptru	equ	0xFF8
 15657                           tblptrh	equ	0xFF7
 15658                           tblptrl	equ	0xFF6
 15659                           tablat	equ	0xFF5
 15660                           prodh	equ	0xFF4
 15661                           prodl	equ	0xFF3
 15662                           intcon	equ	0xFF2
 15663                           indf0	equ	0xFEF
 15664                           postinc0	equ	0xFEE
 15665                           fsr0h	equ	0xFEA
 15666                           fsr0l	equ	0xFE9
 15667                           wreg	equ	0xFE8
 15668                           indf1	equ	0xFE7
 15669                           postinc1	equ	0xFE6
 15670                           postdec1	equ	0xFE5
 15671                           fsr1h	equ	0xFE2
 15672                           fsr1l	equ	0xFE1
 15673                           indf2	equ	0xFDF
 15674                           postinc2	equ	0xFDE
 15675                           postdec2	equ	0xFDD
 15676                           plusw2	equ	0xFDB
 15677                           fsr2h	equ	0xFDA
 15678                           fsr2l	equ	0xFD9
 15679                           status	equ	0xFD8
 15680                           
 15681 ;; *************** function _printGUID *****************
 15682 ;; Defined at:
 15683 ;;		line 2417 in file "main.c"
 15684 ;; Parameters:    Size  Location     Type
 15685 ;;  nodeid          1    wreg     unsigned char 
 15686 ;; Auto vars:     Size  Location     Type
 15687 ;;  nodeid          1   95[BANK0 ] unsigned char 
 15688 ;;  buf             3   96[BANK0 ] unsigned char [3]
 15689 ;;  i               1  100[BANK0 ] unsigned char 
 15690 ;;  value           1   99[BANK0 ] unsigned char 
 15691 ;; Return value:  Size  Location     Type
 15692 ;;		None               void
 15693 ;; Registers used:
 15694 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15695 ;; Tracked objects:
 15696 ;;		On entry : D/2
 15697 ;;		On exit  : 0/0
 15698 ;;		Unchanged: 0/0
 15699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15700 ;;      Params:         0       0       0       0       0       0       0
 15701 ;;      Locals:         0       6       0       0       0       0       0
 15702 ;;      Temps:          0       0       0       0       0       0       0
 15703 ;;      Totals:         0       6       0       0       0       0       0
 15704 ;;Total ram usage:        6 bytes
 15705 ;; Hardware stack levels used:    1
 15706 ;; Hardware stack levels required when called:    8
 15707 ;; This function calls:
 15708 ;;		_putsUSART
 15709 ;;		_memset
 15710 ;;		_strlen
 15711 ;;		_itoa
 15712 ;;		_readRegister
 15713 ;;		_strcat
 15714 ;; This function is called by:
 15715 ;;		_doModeVerbose
 15716 ;;		_findNodes
 15717 ;; This function uses a non-reentrant model
 15718 ;;
 15719                           
 15720                           	psect	text28
 15721  0039DA                     __ptext28:
 15722                           	opt stack 0
 15723  0039DA                     _printGUID:
 15724                           	opt stack 21
 15725                           
 15726                           ;incstack = 0
 15727                           ;incstack = 0
 15728                           ;printGUID@nodeid stored from wreg
 15729  0039DA  CFE8 F0BF          	movff	wreg,printGUID@nodeid
 15730                           
 15731                           ;main.c: 2418: uint8_t i;
 15732                           ;main.c: 2419: uint8_t value;
 15733                           ;main.c: 2420: char buf[3];
 15734                           ;main.c: 2422: memset(wrkbuf, 0, sizeof (wrkbuf));
 15735  0039DE  0E01               	movlw	high _wrkbuf
 15736  0039E0  0100               	movlb	0	; () banked
 15737  0039E2  6F61               	movwf	(?_memset+1)& (0+255),b
 15738  0039E4  0E54               	movlw	low _wrkbuf
 15739  0039E6  6F60               	movwf	?_memset& (0+255),b
 15740  0039E8  6B63               	clrf	(?_memset+3)& (0+255),b
 15741  0039EA  6B62               	clrf	(?_memset+2)& (0+255),b
 15742  0039EC  6B65               	clrf	(?_memset+5)& (0+255),b
 15743  0039EE  0E50               	movlw	80
 15744  0039F0  6F64               	movwf	(?_memset+4)& (0+255),b
 15745  0039F2  ECE6  F029         	call	_memset	;wreg free
 15746                           
 15747                           ; BSR set to: 0
 15748                           ;main.c: 2423: putsUSART((char *) "GUID = ");
 15749  0039F6  0E7E               	movlw	high STR_235
 15750  0039F8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15751  0039FA  0EE6               	movlw	low STR_235
 15752  0039FC  6F61               	movwf	?_putsUSART& (0+255),b
 15753  0039FE  EC89  F027         	call	_putsUSART	;wreg free
 15754                           
 15755                           ;main.c: 2425: for (i = 0; i < 16; i++) {
 15756  003A02  0100               	movlb	0	; () banked
 15757  003A04  6BC4               	clrf	printGUID@i& (0+255),b
 15758  003A06                     l11633:
 15759                           
 15760                           ; BSR set to: 0
 15761                           ;main.c: 2426: if (readRegister(nodeid,
 15762                           ;main.c: 2427: 0xD0 + i,
 15763                           ;main.c: 2428: rwtimeout,
 15764                           ;main.c: 2429: &value)) {
 15765  003A06  51C4               	movf	printGUID@i& (0+255),w,b
 15766  003A08  0FD0               	addlw	208
 15767  003A0A  6FB6               	movwf	?_readRegister& (0+255),b
 15768  003A0C  0100               	movlb	0	; () banked
 15769  003A0E  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 15770  003A12  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 15771  003A14  0EC3               	movlw	low printGUID@value
 15772  003A16  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 15773  003A18  51BF               	movf	printGUID@nodeid& (0+255),w,b
 15774  003A1A  EC19  F020         	call	_readRegister
 15775  003A1E  0900               	iorlw	0
 15776  003A20  E029               	bz	l11643
 15777                           
 15778                           ;main.c: 2430: itoa(buf, value, 16);
 15779  003A22  0100               	movlb	0	; () banked
 15780  003A24  0E00               	movlw	high printGUID@buf
 15781  003A26  6F71               	movwf	(?_itoa+1)& (0+255),b
 15782  003A28  0EC0               	movlw	low printGUID@buf
 15783  003A2A  6F70               	movwf	?_itoa& (0+255),b
 15784  003A2C  C0C3  F072         	movff	printGUID@value,?_itoa+2
 15785  003A30  6B73               	clrf	(?_itoa+3)& (0+255),b
 15786  003A32  6B75               	clrf	(?_itoa+5)& (0+255),b
 15787  003A34  0E10               	movlw	16
 15788  003A36  6F74               	movwf	(?_itoa+4)& (0+255),b
 15789  003A38  EC67  F029         	call	_itoa	;wreg free
 15790                           
 15791                           ; BSR set to: 0
 15792                           ;main.c: 2431: if (1 == strlen(buf)) {
 15793  003A3C  0E00               	movlw	high printGUID@buf
 15794  003A3E  6F61               	movwf	(?_strlen+1)& (0+255),b
 15795  003A40  0EC0               	movlw	low printGUID@buf
 15796  003A42  6F60               	movwf	?_strlen& (0+255),b
 15797  003A44  ECAE  F028         	call	_strlen	;wreg free
 15798  003A48  0560               	decf	?_strlen& (0+255),w,b
 15799  003A4A  1161               	iorwf	(?_strlen+1)& (0+255),w,b
 15800  003A4C  E10F               	bnz	l11641
 15801                           
 15802                           ; BSR set to: 0
 15803                           ;main.c: 2432: strcat(wrkbuf, "0");
 15804  003A4E  0E01               	movlw	high _wrkbuf
 15805  003A50  0100               	movlb	0	; () banked
 15806  003A52  6F61               	movwf	(?_strcat+1)& (0+255),b
 15807  003A54  0E54               	movlw	low _wrkbuf
 15808  003A56  6F60               	movwf	?_strcat& (0+255),b
 15809  003A58  0E7F               	movlw	high STR_236
 15810  003A5A  6F63               	movwf	(?_strcat+3)& (0+255),b
 15811  003A5C  0EF9               	movlw	low STR_236
 15812  003A5E  6F62               	movwf	(?_strcat+2)& (0+255),b
 15813  003A60  EC5D  F027         	call	_strcat	;wreg free
 15814                           
 15815                           ;main.c: 2433: strcat(wrkbuf, buf);
 15816  003A64  D832               	call	PL68	;call to abstracted procedure
 15817  003A66  EC5D  F027         	call	_strcat	;wreg free
 15818                           
 15819                           ;main.c: 2434: } else {
 15820  003A6A  D00F               	goto	l11645
 15821  003A6C                     l11641:
 15822                           
 15823                           ; BSR set to: 0
 15824                           ;main.c: 2435: strcat(wrkbuf, buf);
 15825  003A6C  D82E               	call	PL68	;call to abstracted procedure
 15826  003A6E  EC5D  F027         	call	_strcat	;wreg free
 15827  003A72  D00B               	goto	l11645
 15828  003A74                     l11643:
 15829                           
 15830                           ;main.c: 2439: strcat(wrkbuf, "--");
 15831  003A74  0E01               	movlw	high _wrkbuf
 15832  003A76  0100               	movlb	0	; () banked
 15833  003A78  6F61               	movwf	(?_strcat+1)& (0+255),b
 15834  003A7A  0E54               	movlw	low _wrkbuf
 15835  003A7C  6F60               	movwf	?_strcat& (0+255),b
 15836  003A7E  0E7F               	movlw	high STR_237
 15837  003A80  6F63               	movwf	(?_strcat+3)& (0+255),b
 15838  003A82  0EE5               	movlw	low STR_237
 15839  003A84  6F62               	movwf	(?_strcat+2)& (0+255),b
 15840  003A86  EC5D  F027         	call	_strcat	;wreg free
 15841  003A8A                     l11645:
 15842                           
 15843                           ;main.c: 2440: }
 15844                           ;main.c: 2442: if (i < 15) {
 15845  003A8A  0E0F               	movlw	15
 15846  003A8C  0100               	movlb	0	; () banked
 15847  003A8E  61C4               	cpfslt	printGUID@i& (0+255),b
 15848  003A90  D00A               	goto	l11649
 15849                           
 15850                           ; BSR set to: 0
 15851                           ;main.c: 2443: strcat(wrkbuf, ":");
 15852  003A92  0E01               	movlw	high _wrkbuf
 15853  003A94  6F61               	movwf	(?_strcat+1)& (0+255),b
 15854  003A96  0E54               	movlw	low _wrkbuf
 15855  003A98  6F60               	movwf	?_strcat& (0+255),b
 15856  003A9A  0E7F               	movlw	high STR_238
 15857  003A9C  6F63               	movwf	(?_strcat+3)& (0+255),b
 15858  003A9E  0EFB               	movlw	low STR_238
 15859  003AA0  6F62               	movwf	(?_strcat+2)& (0+255),b
 15860  003AA2  EC5D  F027         	call	_strcat	;wreg free
 15861  003AA6                     l11649:
 15862  003AA6  0100               	movlb	0	; () banked
 15863  003AA8  2BC4               	incf	printGUID@i& (0+255),f,b
 15864                           
 15865                           ; BSR set to: 0
 15866  003AAA  0E0F               	movlw	15
 15867  003AAC  65C4               	cpfsgt	printGUID@i& (0+255),b
 15868  003AAE  D7AB               	goto	l11633
 15869                           
 15870                           ; BSR set to: 0
 15871                           ;main.c: 2444: }
 15872                           ;main.c: 2446: }
 15873                           ;main.c: 2448: putsUSART(wrkbuf);
 15874  003AB0  0E01               	movlw	high _wrkbuf
 15875  003AB2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15876  003AB4  0E54               	movlw	low _wrkbuf
 15877  003AB6  6F61               	movwf	?_putsUSART& (0+255),b
 15878  003AB8  EC89  F027         	call	_putsUSART	;wreg free
 15879                           
 15880                           ;main.c: 2449: putsUSART((char *) "\r\n");
 15881  003ABC  0E74               	movlw	high (STR_189+50)
 15882  003ABE  0100               	movlb	0	; () banked
 15883  003AC0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15884  003AC2  0EAE               	movlw	low (STR_189+50)
 15885  003AC4  6F61               	movwf	?_putsUSART& (0+255),b
 15886  003AC6  EF89  F027         	goto	_putsUSART	;wreg free
 15887  003ACA                     __end_of_printGUID:
 15888                           	opt stack 0
 15889  003ACA                     PL68:
 15890                           	opt stack 21
 15891  003ACA  0E01               	movlw	high _wrkbuf
 15892  003ACC  0100               	movlb	0	; () banked
 15893  003ACE  6F61               	movwf	(?_strcat+1)& (0+255),b
 15894  003AD0  0E54               	movlw	low _wrkbuf
 15895  003AD2  6F60               	movwf	?_strcat& (0+255),b
 15896  003AD4  0E00               	movlw	high printGUID@buf
 15897  003AD6  6F63               	movwf	(?_strcat+3)& (0+255),b
 15898  003AD8  0EC0               	movlw	low printGUID@buf
 15899  003ADA  6F62               	movwf	(?_strcat+2)& (0+255),b
 15900  003ADC  0012               	return	
 15901  003ADE                     __end_ofPL68:
 15902                           	opt stack 0
 15903                           tblptru	equ	0xFF8
 15904                           tblptrh	equ	0xFF7
 15905                           tblptrl	equ	0xFF6
 15906                           tablat	equ	0xFF5
 15907                           prodh	equ	0xFF4
 15908                           prodl	equ	0xFF3
 15909                           intcon	equ	0xFF2
 15910                           indf0	equ	0xFEF
 15911                           postinc0	equ	0xFEE
 15912                           fsr0h	equ	0xFEA
 15913                           fsr0l	equ	0xFE9
 15914                           wreg	equ	0xFE8
 15915                           indf1	equ	0xFE7
 15916                           postinc1	equ	0xFE6
 15917                           postdec1	equ	0xFE5
 15918                           fsr1h	equ	0xFE2
 15919                           fsr1l	equ	0xFE1
 15920                           indf2	equ	0xFDF
 15921                           postinc2	equ	0xFDE
 15922                           postdec2	equ	0xFDD
 15923                           plusw2	equ	0xFDB
 15924                           fsr2h	equ	0xFDA
 15925                           fsr2l	equ	0xFD9
 15926                           status	equ	0xFD8
 15927                           
 15928 ;; *************** function _printNodeFirmwareVersion *****************
 15929 ;; Defined at:
 15930 ;;		line 2489 in file "main.c"
 15931 ;; Parameters:    Size  Location     Type
 15932 ;;  nodeid          1    wreg     unsigned char 
 15933 ;; Auto vars:     Size  Location     Type
 15934 ;;  nodeid          1   95[BANK0 ] unsigned char 
 15935 ;;  buf             3   96[BANK0 ] unsigned char [3]
 15936 ;;  i               1  100[BANK0 ] unsigned char 
 15937 ;;  value           1   99[BANK0 ] unsigned char 
 15938 ;; Return value:  Size  Location     Type
 15939 ;;		None               void
 15940 ;; Registers used:
 15941 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15942 ;; Tracked objects:
 15943 ;;		On entry : D/2
 15944 ;;		On exit  : 0/0
 15945 ;;		Unchanged: 0/0
 15946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15947 ;;      Params:         0       0       0       0       0       0       0
 15948 ;;      Locals:         0       6       0       0       0       0       0
 15949 ;;      Temps:          0       0       0       0       0       0       0
 15950 ;;      Totals:         0       6       0       0       0       0       0
 15951 ;;Total ram usage:        6 bytes
 15952 ;; Hardware stack levels used:    1
 15953 ;; Hardware stack levels required when called:    8
 15954 ;; This function calls:
 15955 ;;		_putsUSART
 15956 ;;		_memset
 15957 ;;		_itoa
 15958 ;;		_readRegister
 15959 ;;		_strcat
 15960 ;; This function is called by:
 15961 ;;		_doModeVerbose
 15962 ;;		_findNodes
 15963 ;; This function uses a non-reentrant model
 15964 ;;
 15965                           
 15966                           	psect	text29
 15967  003F62                     __ptext29:
 15968                           	opt stack 0
 15969  003F62                     _printNodeFirmwareVersion:
 15970                           	opt stack 21
 15971                           
 15972                           ;incstack = 0
 15973                           ;incstack = 0
 15974                           ;printNodeFirmwareVersion@nodeid stored from wreg
 15975  003F62  CFE8 F0BF          	movff	wreg,printNodeFirmwareVersion@nodeid
 15976                           
 15977                           ;main.c: 2490: uint8_t i;
 15978                           ;main.c: 2491: uint8_t value;
 15979                           ;main.c: 2492: char buf[3];
 15980                           ;main.c: 2494: memset(wrkbuf, 0, sizeof (wrkbuf));
 15981  003F66  0E01               	movlw	high _wrkbuf
 15982  003F68  0100               	movlb	0	; () banked
 15983  003F6A  6F61               	movwf	(?_memset+1)& (0+255),b
 15984  003F6C  0E54               	movlw	low _wrkbuf
 15985  003F6E  6F60               	movwf	?_memset& (0+255),b
 15986  003F70  6B63               	clrf	(?_memset+3)& (0+255),b
 15987  003F72  6B62               	clrf	(?_memset+2)& (0+255),b
 15988  003F74  6B65               	clrf	(?_memset+5)& (0+255),b
 15989  003F76  0E50               	movlw	80
 15990  003F78  6F64               	movwf	(?_memset+4)& (0+255),b
 15991  003F7A  ECE6  F029         	call	_memset	;wreg free
 15992                           
 15993                           ; BSR set to: 0
 15994                           ;main.c: 2495: putsUSART((char *) "Firmware version = ");
 15995  003F7E  0E7D               	movlw	high STR_242
 15996  003F80  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15997  003F82  0EBF               	movlw	low STR_242
 15998  003F84  6F61               	movwf	?_putsUSART& (0+255),b
 15999  003F86  EC89  F027         	call	_putsUSART	;wreg free
 16000                           
 16001                           ;main.c: 2497: for (i = 0; i < 3; i++) {
 16002  003F8A  0100               	movlb	0	; () banked
 16003  003F8C  6BC4               	clrf	printNodeFirmwareVersion@i& (0+255),b
 16004  003F8E                     l11605:
 16005                           
 16006                           ; BSR set to: 0
 16007                           ;main.c: 2498: if (readRegister(nodeid,
 16008                           ;main.c: 2499: 0x94 + i,
 16009                           ;main.c: 2500: rwtimeout,
 16010                           ;main.c: 2501: &value)) {
 16011  003F8E  51C4               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 16012  003F90  0F94               	addlw	148
 16013  003F92  6FB6               	movwf	?_readRegister& (0+255),b
 16014  003F94  0100               	movlb	0	; () banked
 16015  003F96  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16016  003F9A  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16017  003F9C  0EC3               	movlw	low printNodeFirmwareVersion@value
 16018  003F9E  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16019  003FA0  51BF               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 16020  003FA2  EC19  F020         	call	_readRegister
 16021  003FA6  0900               	iorlw	0
 16022  003FA8  E019               	bz	l11611
 16023                           
 16024                           ;main.c: 2502: itoa(buf, value, 16);
 16025  003FAA  0100               	movlb	0	; () banked
 16026  003FAC  0E00               	movlw	high printNodeFirmwareVersion@buf
 16027  003FAE  6F71               	movwf	(?_itoa+1)& (0+255),b
 16028  003FB0  0EC0               	movlw	low printNodeFirmwareVersion@buf
 16029  003FB2  6F70               	movwf	?_itoa& (0+255),b
 16030  003FB4  C0C3  F072         	movff	printNodeFirmwareVersion@value,?_itoa+2
 16031  003FB8  6B73               	clrf	(?_itoa+3)& (0+255),b
 16032  003FBA  6B75               	clrf	(?_itoa+5)& (0+255),b
 16033  003FBC  0E10               	movlw	16
 16034  003FBE  6F74               	movwf	(?_itoa+4)& (0+255),b
 16035  003FC0  EC67  F029         	call	_itoa	;wreg free
 16036                           
 16037                           ; BSR set to: 0
 16038                           ;main.c: 2503: strcat(wrkbuf, buf);
 16039  003FC4  0E01               	movlw	high _wrkbuf
 16040  003FC6  0100               	movlb	0	; () banked
 16041  003FC8  6F61               	movwf	(?_strcat+1)& (0+255),b
 16042  003FCA  0E54               	movlw	low _wrkbuf
 16043  003FCC  6F60               	movwf	?_strcat& (0+255),b
 16044  003FCE  0E00               	movlw	high printNodeFirmwareVersion@buf
 16045  003FD0  6F63               	movwf	(?_strcat+3)& (0+255),b
 16046  003FD2  0EC0               	movlw	low printNodeFirmwareVersion@buf
 16047  003FD4  6F62               	movwf	(?_strcat+2)& (0+255),b
 16048  003FD6  EC5D  F027         	call	_strcat	;wreg free
 16049                           
 16050                           ;main.c: 2504: }
 16051  003FDA  D00B               	goto	l11613
 16052  003FDC                     l11611:
 16053                           
 16054                           ;main.c: 2505: else {
 16055                           ;main.c: 2506: strcat(wrkbuf, "?");
 16056  003FDC  0E01               	movlw	high _wrkbuf
 16057  003FDE  0100               	movlb	0	; () banked
 16058  003FE0  6F61               	movwf	(?_strcat+1)& (0+255),b
 16059  003FE2  0E54               	movlw	low _wrkbuf
 16060  003FE4  6F60               	movwf	?_strcat& (0+255),b
 16061  003FE6  0E7F               	movlw	high STR_243
 16062  003FE8  6F63               	movwf	(?_strcat+3)& (0+255),b
 16063  003FEA  0EFD               	movlw	low STR_243
 16064  003FEC  6F62               	movwf	(?_strcat+2)& (0+255),b
 16065  003FEE  EC5D  F027         	call	_strcat	;wreg free
 16066  003FF2                     l11613:
 16067                           
 16068                           ;main.c: 2507: }
 16069                           ;main.c: 2509: if (i < 2) {
 16070  003FF2  0E02               	movlw	2
 16071  003FF4  0100               	movlb	0	; () banked
 16072  003FF6  61C4               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 16073  003FF8  D00A               	goto	l11617
 16074                           
 16075                           ; BSR set to: 0
 16076                           ;main.c: 2510: strcat(wrkbuf, ".");
 16077  003FFA  0E01               	movlw	high _wrkbuf
 16078  003FFC  6F61               	movwf	(?_strcat+1)& (0+255),b
 16079  003FFE  0E54               	movlw	low _wrkbuf
 16080  004000  6F60               	movwf	?_strcat& (0+255),b
 16081  004002  0E7F               	movlw	high STR_244
 16082  004004  6F63               	movwf	(?_strcat+3)& (0+255),b
 16083  004006  0EF7               	movlw	low STR_244
 16084  004008  6F62               	movwf	(?_strcat+2)& (0+255),b
 16085  00400A  EC5D  F027         	call	_strcat	;wreg free
 16086  00400E                     l11617:
 16087  00400E  0100               	movlb	0	; () banked
 16088  004010  2BC4               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 16089                           
 16090                           ; BSR set to: 0
 16091  004012  0E02               	movlw	2
 16092  004014  65C4               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 16093  004016  D7BB               	goto	l11605
 16094                           
 16095                           ; BSR set to: 0
 16096                           ;main.c: 2511: }
 16097                           ;main.c: 2513: }
 16098                           ;main.c: 2515: putsUSART(wrkbuf);
 16099  004018  0E01               	movlw	high _wrkbuf
 16100  00401A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16101  00401C  0E54               	movlw	low _wrkbuf
 16102  00401E  6F61               	movwf	?_putsUSART& (0+255),b
 16103  004020  EC89  F027         	call	_putsUSART	;wreg free
 16104                           
 16105                           ;main.c: 2516: putsUSART((char *) "\r\n");
 16106  004024  0E74               	movlw	high (STR_189+50)
 16107  004026  0100               	movlb	0	; () banked
 16108  004028  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16109  00402A  0EAE               	movlw	low (STR_189+50)
 16110  00402C  6F61               	movwf	?_putsUSART& (0+255),b
 16111  00402E  EF89  F027         	goto	_putsUSART	;wreg free
 16112  004032                     __end_of_printNodeFirmwareVersion:
 16113                           	opt stack 0
 16114                           tblptru	equ	0xFF8
 16115                           tblptrh	equ	0xFF7
 16116                           tblptrl	equ	0xFF6
 16117                           tablat	equ	0xFF5
 16118                           prodh	equ	0xFF4
 16119                           prodl	equ	0xFF3
 16120                           intcon	equ	0xFF2
 16121                           indf0	equ	0xFEF
 16122                           postinc0	equ	0xFEE
 16123                           fsr0h	equ	0xFEA
 16124                           fsr0l	equ	0xFE9
 16125                           wreg	equ	0xFE8
 16126                           indf1	equ	0xFE7
 16127                           postinc1	equ	0xFE6
 16128                           postdec1	equ	0xFE5
 16129                           fsr1h	equ	0xFE2
 16130                           fsr1l	equ	0xFE1
 16131                           indf2	equ	0xFDF
 16132                           postinc2	equ	0xFDE
 16133                           postdec2	equ	0xFDD
 16134                           plusw2	equ	0xFDB
 16135                           fsr2h	equ	0xFDA
 16136                           fsr2l	equ	0xFD9
 16137                           status	equ	0xFD8
 16138                           
 16139 ;; *************** function _strcat *****************
 16140 ;; Defined at:
 16141 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 16142 ;; Parameters:    Size  Location     Type
 16143 ;;  to              2    0[BANK0 ] PTR unsigned char 
 16144 ;;		 -> wrkbuf(80), 
 16145 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 16146 ;;		 -> STR_244(2), STR_243(2), printNodeFirmwareVersion@buf(3), STR_238(2), 
 16147 ;;		 -> STR_237(3), STR_236(2), printGUID@buf(3), 
 16148 ;; Auto vars:     Size  Location     Type
 16149 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 16150 ;;		 -> wrkbuf(80), 
 16151 ;; Return value:  Size  Location     Type
 16152 ;;                  2    0[BANK0 ] PTR unsigned char 
 16153 ;; Registers used:
 16154 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16155 ;; Tracked objects:
 16156 ;;		On entry : F/0
 16157 ;;		On exit  : 0/0
 16158 ;;		Unchanged: 0/0
 16159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16160 ;;      Params:         0       4       0       0       0       0       0
 16161 ;;      Locals:         0       2       0       0       0       0       0
 16162 ;;      Temps:          0       0       0       0       0       0       0
 16163 ;;      Totals:         0       6       0       0       0       0       0
 16164 ;;Total ram usage:        6 bytes
 16165 ;; Hardware stack levels used:    1
 16166 ;; Hardware stack levels required when called:    3
 16167 ;; This function calls:
 16168 ;;		Nothing
 16169 ;; This function is called by:
 16170 ;;		_printGUID
 16171 ;;		_printNodeFirmwareVersion
 16172 ;; This function uses a non-reentrant model
 16173 ;;
 16174                           
 16175                           	psect	text30
 16176  004EBA                     __ptext30:
 16177                           	opt stack 0
 16178  004EBA                     _strcat:
 16179                           	opt stack 25
 16180                           
 16181                           ; BSR set to: 0
 16182                           
 16183                           ;incstack = 0
 16184                           ;incstack = 0
 16185  004EBA  C060  F064         	movff	strcat@to,strcat@cp
 16186  004EBE  C061  F065         	movff	strcat@to+1,strcat@cp+1
 16187  004EC2  D002               	goto	l12179
 16188  004EC4                     l12177:
 16189                           
 16190                           ; BSR set to: 0
 16191  004EC4  4B64               	infsnz	strcat@cp& (0+255),f,b
 16192  004EC6  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 16193  004EC8                     l12179:
 16194                           
 16195                           ; BSR set to: 0
 16196  004EC8  C064  FFD9         	movff	strcat@cp,fsr2l
 16197  004ECC  C065  FFDA         	movff	strcat@cp+1,fsr2h
 16198  004ED0  50DF               	movf	indf2,w,c
 16199  004ED2  E006               	bz	l12183
 16200  004ED4  D7F7               	goto	l12177
 16201  004ED6                     l12181:
 16202  004ED6  0100               	movlb	0	; () banked
 16203  004ED8  4B64               	infsnz	strcat@cp& (0+255),f,b
 16204  004EDA  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 16205  004EDC  4B62               	infsnz	strcat@from& (0+255),f,b
 16206  004EDE  2B63               	incf	(strcat@from+1)& (0+255),f,b
 16207  004EE0                     l12183:
 16208                           
 16209                           ; BSR set to: 0
 16210  004EE0  C062  FFF6         	movff	strcat@from,tblptrl
 16211  004EE4  C063  FFF7         	movff	strcat@from+1,tblptrh
 16212  004EE8  6AF8               	clrf	tblptru,c
 16213  004EEA  C064  FFD9         	movff	strcat@cp,fsr2l
 16214  004EEE  C065  FFDA         	movff	strcat@cp+1,fsr2h
 16215  004EF2  0E05               	movlw	(high __ramtop+-1)
 16216  004EF4  64F7               	cpfsgt	tblptrh,c
 16217  004EF6  D003               	bra	u15827
 16218  004EF8  0008               	tblrd		*
 16219  004EFA  50F5               	movf	tablat,w,c
 16220  004EFC  D005               	bra	u15820
 16221  004EFE                     u15827:
 16222  004EFE  CFF6 FFE9          	movff	tblptrl,fsr0l
 16223  004F02  CFF7 FFEA          	movff	tblptrh,fsr0h
 16224  004F06  50EF               	movf	indf0,w,c
 16225  004F08                     u15820:
 16226  004F08  6EDF               	movwf	indf2,c
 16227  004F0A  50DF               	movf	indf2,w,c
 16228  004F0C  B4D8               	btfsc	status,2,c
 16229  004F0E  0012               	return	
 16230  004F10  D7E2               	goto	l12181
 16231  004F12                     __end_of_strcat:
 16232                           	opt stack 0
 16233                           tblptru	equ	0xFF8
 16234                           tblptrh	equ	0xFF7
 16235                           tblptrl	equ	0xFF6
 16236                           tablat	equ	0xFF5
 16237                           prodh	equ	0xFF4
 16238                           prodl	equ	0xFF3
 16239                           intcon	equ	0xFF2
 16240                           indf0	equ	0xFEF
 16241                           postinc0	equ	0xFEE
 16242                           fsr0h	equ	0xFEA
 16243                           fsr0l	equ	0xFE9
 16244                           wreg	equ	0xFE8
 16245                           indf1	equ	0xFE7
 16246                           postinc1	equ	0xFE6
 16247                           postdec1	equ	0xFE5
 16248                           fsr1h	equ	0xFE2
 16249                           fsr1l	equ	0xFE1
 16250                           indf2	equ	0xFDF
 16251                           postinc2	equ	0xFDE
 16252                           postdec2	equ	0xFDD
 16253                           plusw2	equ	0xFDB
 16254                           fsr2h	equ	0xFDA
 16255                           fsr2l	equ	0xFD9
 16256                           status	equ	0xFD8
 16257                           
 16258 ;; *************** function _readRegister *****************
 16259 ;; Defined at:
 16260 ;;		line 1992 in file "main.c"
 16261 ;; Parameters:    Size  Location     Type
 16262 ;;  nodeid          1    wreg     unsigned char 
 16263 ;;  reg             1   86[BANK0 ] unsigned char 
 16264 ;;  timeout         2   87[BANK0 ] unsigned short 
 16265 ;;  value           1   89[BANK0 ] PTR unsigned char 
 16266 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 16267 ;; Auto vars:     Size  Location     Type
 16268 ;;  nodeid          1   94[BANK0 ] unsigned char 
 16269 ;; Return value:  Size  Location     Type
 16270 ;;                  1    wreg      enum E15660
 16271 ;; Registers used:
 16272 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16273 ;; Tracked objects:
 16274 ;;		On entry : F/0
 16275 ;;		On exit  : E/0
 16276 ;;		Unchanged: 0/0
 16277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16278 ;;      Params:         0       4       0       0       0       0       0
 16279 ;;      Locals:         0       1       0       0       0       0       0
 16280 ;;      Temps:          0       4       0       0       0       0       0
 16281 ;;      Totals:         0       9       0       0       0       0       0
 16282 ;;Total ram usage:        9 bytes
 16283 ;; Hardware stack levels used:    1
 16284 ;; Hardware stack levels required when called:    7
 16285 ;; This function calls:
 16286 ;;		_sendVSCPFrame
 16287 ;;		_getVSCPFrame
 16288 ;; This function is called by:
 16289 ;;		_findNodes
 16290 ;;		_printGUID
 16291 ;;		_printMDF
 16292 ;;		_printNodeFirmwareVersion
 16293 ;; This function uses a non-reentrant model
 16294 ;;
 16295                           
 16296                           	psect	text31
 16297  004032                     __ptext31:
 16298                           	opt stack 0
 16299  004032                     _readRegister:
 16300                           	opt stack 21
 16301                           
 16302                           ;incstack = 0
 16303                           ;incstack = 0
 16304                           ;readRegister@nodeid stored from wreg
 16305  004032  CFE8 F0BE          	movff	wreg,readRegister@nodeid
 16306                           
 16307                           ; BSR set to: 0
 16308                           ;main.c: 1993: vscpData[ 0 ] = nodeid;
 16309  004036  C0BE  F1A4         	movff	readRegister@nodeid,_vscpData
 16310                           
 16311                           ; BSR set to: 0
 16312                           ;main.c: 1994: vscpData[ 1 ] = reg;
 16313  00403A  C0B6  F1A5         	movff	readRegister@reg,_vscpData+1
 16314                           
 16315                           ; BSR set to: 0
 16316                           ;main.c: 1996: if (sendVSCPFrame(0,
 16317                           ;main.c: 1997: 9,
 16318                           ;main.c: 1998: 0,
 16319                           ;main.c: 1999: 0,
 16320                           ;main.c: 2000: 2,
 16321                           ;main.c: 2001: vscpData)) {
 16322  00403E  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 16323  004040  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 16324  004042  0E09               	movlw	9
 16325  004044  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 16326  004046  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 16327  004048  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 16328  00404A  0E02               	movlw	2
 16329  00404C  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 16330  00404E  0E01               	movlw	high _vscpData
 16331  004050  0100               	movlb	0	; () banked
 16332  004052  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 16333  004054  0EA4               	movlw	low _vscpData
 16334  004056  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 16335  004058  EC46  F021         	call	_sendVSCPFrame	;wreg free
 16336  00405C  0900               	iorlw	0
 16337  00405E  E04E               	bz	l12171
 16338                           
 16339                           ; BSR set to: 0
 16340                           ;main.c: 2003: timekeeper = 0;
 16341  004060  6BE9               	clrf	_timekeeper& (0+255),b	;volatile
 16342  004062  6BEA               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 16343  004064  6BEB               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 16344  004066  6BEC               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 16345                           
 16346                           ;main.c: 2004: while (timekeeper < timeout) {
 16347  004068  D039               	goto	l12169
 16348  00406A                     l989:
 16349                           
 16350                           ; BSR set to: 0
 16351  00406A  0004               	clrwdt		;# 
 16352                           
 16353                           ;main.c: 2008: if (getVSCPFrame(&vscpClass,
 16354                           ;main.c: 2009: &vscpType,
 16355                           ;main.c: 2010: &vscpNodeId,
 16356                           ;main.c: 2011: &vscpPriority,
 16357                           ;main.c: 2012: &vscpSize,
 16358                           ;main.c: 2013: vscpData)) {
 16359  00406C  0E01               	movlw	high _vscpClass
 16360  00406E  0100               	movlb	0	; () banked
 16361  004070  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 16362  004072  0EAC               	movlw	low _vscpClass
 16363  004074  6F72               	movwf	?_getVSCPFrame& (0+255),b
 16364  004076  0E01               	movlw	high _vscpType
 16365  004078  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 16366  00407A  0EB1               	movlw	low _vscpType
 16367  00407C  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 16368  00407E  0E01               	movlw	high _vscpNodeId
 16369  004080  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 16370  004082  0EAE               	movlw	low _vscpNodeId
 16371  004084  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 16372  004086  0E01               	movlw	high _vscpPriority
 16373  004088  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 16374  00408A  0EAF               	movlw	low _vscpPriority
 16375  00408C  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 16376  00408E  0E01               	movlw	high _vscpSize
 16377  004090  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 16378  004092  0EB0               	movlw	low _vscpSize
 16379  004094  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 16380  004096  0E01               	movlw	high _vscpData
 16381  004098  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 16382  00409A  0EA4               	movlw	low _vscpData
 16383  00409C  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 16384  00409E  EC4E  F024         	call	_getVSCPFrame	;wreg free
 16385  0040A2  0900               	iorlw	0
 16386  0040A4  E01B               	bz	l12169
 16387                           
 16388                           ; BSR set to: 0
 16389                           ;main.c: 2014: if ((nodeid == vscpNodeId) &&
 16390                           ;main.c: 2015: (0 == vscpClass) &&
 16391                           ;main.c: 2016: (10 == vscpType) &&
 16392                           ;main.c: 2017: (2 == vscpSize) &&
 16393                           ;main.c: 2018: (reg == vscpData[ 0 ])) {
 16394  0040A6  0101               	movlb	1	; () banked
 16395  0040A8  51AE               	movf	_vscpNodeId& (0+255),w,b
 16396  0040AA  0100               	movlb	0	; () banked
 16397  0040AC  63BE               	cpfseq	readRegister@nodeid& (0+255),b
 16398  0040AE  D016               	goto	l12169
 16399                           
 16400                           ; BSR set to: 0
 16401  0040B0  0101               	movlb	1	; () banked
 16402  0040B2  51AD               	movf	(_vscpClass+1)& (0+255),w,b
 16403  0040B4  11AC               	iorwf	_vscpClass& (0+255),w,b
 16404  0040B6  E112               	bnz	l12169
 16405                           
 16406                           ; BSR set to: 1
 16407  0040B8  51B1               	movf	_vscpType& (0+255),w,b
 16408  0040BA  0A0A               	xorlw	10
 16409  0040BC  E10F               	bnz	l12169
 16410                           
 16411                           ; BSR set to: 1
 16412  0040BE  51B0               	movf	_vscpSize& (0+255),w,b
 16413  0040C0  0A02               	xorlw	2
 16414  0040C2  E10C               	bnz	l12169
 16415                           
 16416                           ; BSR set to: 1
 16417  0040C4  51A4               	movf	_vscpData& (0+255),w,b
 16418  0040C6  0100               	movlb	0	; () banked
 16419  0040C8  63B6               	cpfseq	readRegister@reg& (0+255),b
 16420  0040CA  D008               	goto	l12169
 16421                           
 16422                           ; BSR set to: 0
 16423                           ;main.c: 2019: *value = vscpData[ 1 ];
 16424  0040CC  51B9               	movf	readRegister@value& (0+255),w,b
 16425  0040CE  6ED9               	movwf	fsr2l,c
 16426  0040D0  6ADA               	clrf	fsr2h,c
 16427  0040D2  0101               	movlb	1	; () banked
 16428  0040D4  C1A5  FFDF         	movff	_vscpData+1,indf2
 16429                           
 16430                           ; BSR set to: 1
 16431                           ;main.c: 2020: return 1;
 16432  0040D8  0E01               	movlw	1
 16433  0040DA  D011               	goto	l992
 16434  0040DC                     l12169:
 16435  0040DC  0100               	movlb	0	; () banked
 16436  0040DE  51B7               	movf	readRegister@timeout& (0+255),w,b
 16437  0040E0  6FBA               	movwf	??_readRegister& (0+255),b
 16438  0040E2  51B8               	movf	(readRegister@timeout+1)& (0+255),w,b
 16439  0040E4  6FBB               	movwf	(??_readRegister+1)& (0+255),b
 16440  0040E6  6BBC               	clrf	(??_readRegister+2)& (0+255),b
 16441  0040E8  6BBD               	clrf	(??_readRegister+3)& (0+255),b
 16442  0040EA  51BA               	movf	??_readRegister& (0+255),w,b
 16443  0040EC  5DE9               	subwf	_timekeeper& (0+255),w,b	;volatile
 16444  0040EE  51BB               	movf	(??_readRegister+1)& (0+255),w,b
 16445  0040F0  59EA               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 16446  0040F2  51BC               	movf	(??_readRegister+2)& (0+255),w,b
 16447  0040F4  59EB               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 16448  0040F6  51BD               	movf	(??_readRegister+3)& (0+255),w,b
 16449  0040F8  59EC               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 16450  0040FA  E3B7               	bnc	l989
 16451  0040FC                     l12171:
 16452                           
 16453                           ; BSR set to: 0
 16454                           ;main.c: 2021: }
 16455                           ;main.c: 2022: }
 16456                           ;main.c: 2023: }
 16457                           ;main.c: 2024: }
 16458                           ;main.c: 2026: return 0;
 16459  0040FC  0E00               	movlw	0
 16460  0040FE                     l992:
 16461  0040FE  0012               	return	
 16462  004100                     __end_of_readRegister:
 16463                           	opt stack 0
 16464                           tblptru	equ	0xFF8
 16465                           tblptrh	equ	0xFF7
 16466                           tblptrl	equ	0xFF6
 16467                           tablat	equ	0xFF5
 16468                           prodh	equ	0xFF4
 16469                           prodl	equ	0xFF3
 16470                           intcon	equ	0xFF2
 16471                           indf0	equ	0xFEF
 16472                           postinc0	equ	0xFEE
 16473                           fsr0h	equ	0xFEA
 16474                           fsr0l	equ	0xFE9
 16475                           wreg	equ	0xFE8
 16476                           indf1	equ	0xFE7
 16477                           postinc1	equ	0xFE6
 16478                           postdec1	equ	0xFE5
 16479                           fsr1h	equ	0xFE2
 16480                           fsr1l	equ	0xFE1
 16481                           indf2	equ	0xFDF
 16482                           postinc2	equ	0xFDE
 16483                           postdec2	equ	0xFDD
 16484                           plusw2	equ	0xFDB
 16485                           fsr2h	equ	0xFDA
 16486                           fsr2l	equ	0xFD9
 16487                           status	equ	0xFD8
 16488                           
 16489 ;; *************** function _sendVSCPFrame *****************
 16490 ;; Defined at:
 16491 ;;		line 2713 in file "main.c"
 16492 ;; Parameters:    Size  Location     Type
 16493 ;;  vscpclass       2   54[BANK0 ] unsigned short 
 16494 ;;  vscptype        1   56[BANK0 ] unsigned char 
 16495 ;;  nodeid          1   57[BANK0 ] unsigned char 
 16496 ;;  priority        1   58[BANK0 ] unsigned char 
 16497 ;;  size            1   59[BANK0 ] unsigned char 
 16498 ;;  pData           2   60[BANK0 ] PTR unsigned char 
 16499 ;;		 -> vscpData(8), 
 16500 ;; Auto vars:     Size  Location     Type
 16501 ;;  id              4   82[BANK0 ] unsigned long 
 16502 ;; Return value:  Size  Location     Type
 16503 ;;                  1    wreg      unsigned char 
 16504 ;; Registers used:
 16505 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16506 ;; Tracked objects:
 16507 ;;		On entry : F/0
 16508 ;;		On exit  : F/0
 16509 ;;		Unchanged: 0/0
 16510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16511 ;;      Params:         0       8       0       0       0       0       0
 16512 ;;      Locals:         0       4       0       0       0       0       0
 16513 ;;      Temps:          0      20       0       0       0       0       0
 16514 ;;      Totals:         0      32       0       0       0       0       0
 16515 ;;Total ram usage:       32 bytes
 16516 ;; Hardware stack levels used:    1
 16517 ;; Hardware stack levels required when called:    6
 16518 ;; This function calls:
 16519 ;;		_sendCANFrame
 16520 ;; This function is called by:
 16521 ;;		_doModeVerbose
 16522 ;;		_readRegister
 16523 ;;		_readRegisterExtended
 16524 ;;		_writeRegisterExtended
 16525 ;; This function uses a non-reentrant model
 16526 ;;
 16527                           
 16528                           	psect	text32
 16529  00428C                     __ptext32:
 16530                           	opt stack 0
 16531  00428C                     _sendVSCPFrame:
 16532                           	opt stack 21
 16533                           
 16534                           ; BSR set to: 0
 16535                           ;main.c: 2714: uint32_t id = ((uint32_t) priority << 26) |
 16536                           ;main.c: 2715: ((uint32_t) vscpclass << 16) |
 16537                           ;main.c: 2716: ((uint32_t) vscptype << 8) |
 16538                           ;main.c: 2717: nodeid;
 16539                           
 16540                           ;incstack = 0
 16541                           ;incstack = 0
 16542  00428C  C098  F09E         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 16543  004290  6B9F               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 16544  004292  6BA0               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 16545  004294  6BA1               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 16546  004296  C0A0  F0A1         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 16547  00429A  C09F  F0A0         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 16548  00429E  C09E  F09F         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 16549  0042A2  6B9E               	clrf	??_sendVSCPFrame& (0+255),b
 16550  0042A4  5196               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 16551  0042A6  6FA2               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 16552  0042A8  5197               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 16553  0042AA  6FA3               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 16554  0042AC  6BA4               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 16555  0042AE  6BA5               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 16556  0042B0  C0A3  F0A5         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 16557  0042B4  C0A2  F0A4         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 16558  0042B8  6BA3               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 16559  0042BA  6BA2               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 16560  0042BC  C09A  F0A6         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 16561  0042C0  6BA7               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 16562  0042C2  6BA8               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 16563  0042C4  6BA9               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 16564  0042C6  0E1A               	movlw	26
 16565  0042C8                     u13655:
 16566  0042C8  90D8               	bcf	status,0,c
 16567  0042CA  37A6               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 16568  0042CC  37A7               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 16569  0042CE  37A8               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 16570  0042D0  37A9               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 16571  0042D2  2EE8               	decfsz	wreg,f,c
 16572  0042D4  D7F9               	goto	u13655
 16573  0042D6  51A2               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 16574  0042D8  11A6               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 16575  0042DA  6FAA               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 16576  0042DC  51A3               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 16577  0042DE  11A7               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 16578  0042E0  6FAB               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 16579  0042E2  51A4               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 16580  0042E4  11A8               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 16581  0042E6  6FAC               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 16582  0042E8  51A5               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 16583  0042EA  11A9               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 16584  0042EC  6FAD               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 16585  0042EE  519E               	movf	??_sendVSCPFrame& (0+255),w,b
 16586  0042F0  11AA               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 16587  0042F2  6FAE               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 16588  0042F4  519F               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 16589  0042F6  11AB               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 16590  0042F8  6FAF               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 16591  0042FA  51A0               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 16592  0042FC  11AC               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 16593  0042FE  6FB0               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 16594  004300  51A1               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 16595  004302  11AD               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 16596  004304  6FB1               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 16597  004306  5199               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 16598  004308  11AE               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 16599  00430A  6FB2               	movwf	sendVSCPFrame@id& (0+255),b
 16600  00430C  51AF               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 16601  00430E  6FB3               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 16602  004310  51B0               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 16603  004312  6FB4               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 16604  004314  51B1               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 16605  004316  6FB5               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 16606                           
 16607                           ; BSR set to: 0
 16608                           ;main.c: 2719: if (!sendCANFrame(id, size, pData)) {
 16609  004318  C0B2  F08F         	movff	sendVSCPFrame@id,?_sendCANFrame
 16610  00431C  C0B3  F090         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 16611  004320  C0B4  F091         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 16612  004324  C0B5  F092         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 16613  004328  C09B  F093         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 16614  00432C  C09C  F094         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 16615  004330  C09D  F095         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 16616  004334  EC4B  F029         	call	_sendCANFrame	;wreg free
 16617  004338  0900               	iorlw	0
 16618                           
 16619                           ; BSR set to: 0
 16620                           ;main.c: 2721: return 0;
 16621  00433A  0E00               	movlw	0
 16622  00433C  A4D8               	btfss	status,2,c
 16623                           
 16624                           ; BSR set to: 0
 16625                           ;main.c: 2722: }
 16626                           ;main.c: 2724: return 1;
 16627  00433E  0E01               	movlw	1
 16628                           
 16629                           ; BSR set to: 0
 16630  004340  0012               	return	
 16631  004342                     __end_of_sendVSCPFrame:
 16632                           	opt stack 0
 16633                           tblptru	equ	0xFF8
 16634                           tblptrh	equ	0xFF7
 16635                           tblptrl	equ	0xFF6
 16636                           tablat	equ	0xFF5
 16637                           prodh	equ	0xFF4
 16638                           prodl	equ	0xFF3
 16639                           intcon	equ	0xFF2
 16640                           indf0	equ	0xFEF
 16641                           postinc0	equ	0xFEE
 16642                           fsr0h	equ	0xFEA
 16643                           fsr0l	equ	0xFE9
 16644                           wreg	equ	0xFE8
 16645                           indf1	equ	0xFE7
 16646                           postinc1	equ	0xFE6
 16647                           postdec1	equ	0xFE5
 16648                           fsr1h	equ	0xFE2
 16649                           fsr1l	equ	0xFE1
 16650                           indf2	equ	0xFDF
 16651                           postinc2	equ	0xFDE
 16652                           postdec2	equ	0xFDD
 16653                           plusw2	equ	0xFDB
 16654                           fsr2h	equ	0xFDA
 16655                           fsr2l	equ	0xFD9
 16656                           status	equ	0xFD8
 16657                           
 16658 ;; *************** function _sendCANFrame *****************
 16659 ;; Defined at:
 16660 ;;		line 2759 in file "main.c"
 16661 ;; Parameters:    Size  Location     Type
 16662 ;;  id              4   47[BANK0 ] unsigned long 
 16663 ;;  dlc             1   51[BANK0 ] unsigned char 
 16664 ;;  pdata           2   52[BANK0 ] PTR unsigned char 
 16665 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 16666 ;; Auto vars:     Size  Location     Type
 16667 ;;		None
 16668 ;; Return value:  Size  Location     Type
 16669 ;;                  1    wreg      unsigned char 
 16670 ;; Registers used:
 16671 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16672 ;; Tracked objects:
 16673 ;;		On entry : F/0
 16674 ;;		On exit  : F/0
 16675 ;;		Unchanged: 0/0
 16676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16677 ;;      Params:         0       7       0       0       0       0       0
 16678 ;;      Locals:         0       0       0       0       0       0       0
 16679 ;;      Temps:          0       0       0       0       0       0       0
 16680 ;;      Totals:         0       7       0       0       0       0       0
 16681 ;;Total ram usage:        7 bytes
 16682 ;; Hardware stack levels used:    1
 16683 ;; Hardware stack levels required when called:    5
 16684 ;; This function calls:
 16685 ;;		_ECANSendMessage
 16686 ;; This function is called by:
 16687 ;;		_doModeSLCAN
 16688 ;;		_receiveVSCPModeCanalMsg
 16689 ;;		_sendVSCPFrame
 16690 ;; This function uses a non-reentrant model
 16691 ;;
 16692                           
 16693                           	psect	text33
 16694  005296                     __ptext33:
 16695                           	opt stack 0
 16696  005296                     _sendCANFrame:
 16697                           	opt stack 24
 16698                           
 16699                           ; BSR set to: 0
 16700                           ;main.c: 2760: if (!ECANSendMessage(id, pdata, dlc, ECAN_TX_XTD_FRAME)) {
 16701                           
 16702                           ; BSR set to: 0
 16703                           ;incstack = 0
 16704                           ;incstack = 0
 16705  005296  C08F  F06A         	movff	sendCANFrame@id,?_ECANSendMessage
 16706  00529A  C090  F06B         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 16707  00529E  C091  F06C         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 16708  0052A2  C092  F06D         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 16709  0052A6  C094  F06E         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 16710  0052AA  C095  F06F         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 16711  0052AE  C093  F070         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 16712  0052B2  0E20               	movlw	32
 16713  0052B4  6F71               	movwf	(?_ECANSendMessage+7)& (0+255),b
 16714  0052B6  EC4C  F018         	call	_ECANSendMessage	;wreg free
 16715  0052BA  0900               	iorlw	0
 16716  0052BC  E106               	bnz	l12027
 16717                           
 16718                           ; BSR set to: 0
 16719                           ;main.c: 2762: can_transmitOverruns++;
 16720  0052BE  2BD5               	incf	_can_transmitOverruns& (0+255),f,b
 16721  0052C0  0E00               	movlw	0
 16722  0052C2  23D6               	addwfc	(_can_transmitOverruns+1)& (0+255),f,b
 16723  0052C4  23D7               	addwfc	(_can_transmitOverruns+2)& (0+255),f,b
 16724  0052C6  23D8               	addwfc	(_can_transmitOverruns+3)& (0+255),f,b
 16725                           
 16726                           ; BSR set to: 0
 16727                           ;main.c: 2763: return 0;
 16728  0052C8  D001               	goto	l1188
 16729  0052CA                     l12027:
 16730                           
 16731                           ; BSR set to: 0
 16732                           ;main.c: 2764: }
 16733                           ;main.c: 2766: return 1;
 16734  0052CA  0E01               	movlw	1
 16735  0052CC                     l1188:
 16736                           
 16737                           ; BSR set to: 0
 16738  0052CC  0012               	return	
 16739  0052CE                     __end_of_sendCANFrame:
 16740                           	opt stack 0
 16741                           tblptru	equ	0xFF8
 16742                           tblptrh	equ	0xFF7
 16743                           tblptrl	equ	0xFF6
 16744                           tablat	equ	0xFF5
 16745                           prodh	equ	0xFF4
 16746                           prodl	equ	0xFF3
 16747                           intcon	equ	0xFF2
 16748                           indf0	equ	0xFEF
 16749                           postinc0	equ	0xFEE
 16750                           fsr0h	equ	0xFEA
 16751                           fsr0l	equ	0xFE9
 16752                           wreg	equ	0xFE8
 16753                           indf1	equ	0xFE7
 16754                           postinc1	equ	0xFE6
 16755                           postdec1	equ	0xFE5
 16756                           fsr1h	equ	0xFE2
 16757                           fsr1l	equ	0xFE1
 16758                           indf2	equ	0xFDF
 16759                           postinc2	equ	0xFDE
 16760                           postdec2	equ	0xFDD
 16761                           plusw2	equ	0xFDB
 16762                           fsr2h	equ	0xFDA
 16763                           fsr2l	equ	0xFD9
 16764                           status	equ	0xFD8
 16765                           
 16766 ;; *************** function _ECANSendMessage *****************
 16767 ;; Defined at:
 16768 ;;		line 617 in file "ECAN.c"
 16769 ;; Parameters:    Size  Location     Type
 16770 ;;  id              4   10[BANK0 ] unsigned long 
 16771 ;;  data            2   14[BANK0 ] PTR unsigned char 
 16772 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 16773 ;;  dataLen         1   16[BANK0 ] unsigned char 
 16774 ;;  msgFlags        1   17[BANK0 ] enum E16306
 16775 ;; Auto vars:     Size  Location     Type
 16776 ;;  pb             18   19[BANK0 ] PTR unsigned char [9]
 16777 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16778 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16779 ;;		 -> B0CON(1), 
 16780 ;;  ptr             2   45[BANK0 ] PTR unsigned char 
 16781 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16782 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16783 ;;		 -> B0CON(1), 
 16784 ;;  tempPtr         2   41[BANK0 ] PTR unsigned char 
 16785 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16786 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16787 ;;		 -> B0CON(1), 
 16788 ;;  i               1   44[BANK0 ] unsigned char 
 16789 ;;  temp            1   43[BANK0 ] unsigned char 
 16790 ;;  tempBSEL0       1   40[BANK0 ] struct .
 16791 ;;  j               1   39[BANK0 ] unsigned char 
 16792 ;;  buffers         1   38[BANK0 ] unsigned char 
 16793 ;;  mode            1   37[BANK0 ] unsigned char 
 16794 ;; Return value:  Size  Location     Type
 16795 ;;                  1    wreg      enum E15660
 16796 ;; Registers used:
 16797 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16798 ;; Tracked objects:
 16799 ;;		On entry : F/0
 16800 ;;		On exit  : F/0
 16801 ;;		Unchanged: 0/0
 16802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16803 ;;      Params:         0       8       0       0       0       0       0
 16804 ;;      Locals:         0      28       0       0       0       0       0
 16805 ;;      Temps:          0       1       0       0       0       0       0
 16806 ;;      Totals:         0      37       0       0       0       0       0
 16807 ;;Total ram usage:       37 bytes
 16808 ;; Hardware stack levels used:    1
 16809 ;; Hardware stack levels required when called:    4
 16810 ;; This function calls:
 16811 ;;		__CANIDToRegs
 16812 ;; This function is called by:
 16813 ;;		_sendCANFrame
 16814 ;; This function uses a non-reentrant model
 16815 ;;
 16816                           
 16817                           	psect	text34
 16818  003098                     __ptext34:
 16819                           	opt stack 0
 16820  003098                     _ECANSendMessage:
 16821                           	opt stack 24
 16822                           
 16823                           ; BSR set to: 0
 16824                           ;ECAN.c: 619: BYTE mode;
 16825                           ;ECAN.c: 620: BYTE buffers;
 16826                           ;ECAN.c: 628: BYTE i,j;
 16827                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 16828                           ;ECAN.c: 630: BYTE* pb[9];
 16829                           ;ECAN.c: 631: BYTE temp;
 16830                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 16831                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 16832                           
 16833                           ; BSR set to: 0
 16834                           ;incstack = 0
 16835                           ;incstack = 0
 16836  003098  0E0F               	movlw	15	;volatile
 16837  00309A  0100               	movlb	0	; () banked
 16838  00309C  6F74               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 16839  00309E  0E40               	movlw	64	;volatile
 16840  0030A0  6F73               	movwf	ECANSendMessage@pb& (0+255),b
 16841                           
 16842                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 16843  0030A2  0E0F               	movlw	15	;volatile
 16844  0030A4  6F76               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 16845  0030A6  0E30               	movlw	48	;volatile
 16846  0030A8  6F75               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 16847                           
 16848                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 16849  0030AA  0E0F               	movlw	15	;volatile
 16850  0030AC  6F78               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 16851  0030AE  0E20               	movlw	32	;volatile
 16852  0030B0  6F77               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 16853                           
 16854                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 16855  0030B2  0E0E               	movlw	14	;volatile
 16856  0030B4  6F7A               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 16857  0030B6  0E20               	movlw	32	;volatile
 16858  0030B8  6F79               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 16859                           
 16860                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 16861  0030BA  0E0E               	movlw	14	;volatile
 16862  0030BC  6F7C               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 16863  0030BE  0E30               	movlw	48	;volatile
 16864  0030C0  6F7B               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 16865                           
 16866                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 16867  0030C2  0E0E               	movlw	14	;volatile
 16868  0030C4  6F7E               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 16869  0030C6  0E40               	movlw	64	;volatile
 16870  0030C8  6F7D               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 16871                           
 16872                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 16873  0030CA  0E0E               	movlw	14	;volatile
 16874  0030CC  6F80               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 16875  0030CE  0E50               	movlw	80	;volatile
 16876  0030D0  6F7F               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 16877                           
 16878                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 16879  0030D2  0E0E               	movlw	14	;volatile
 16880  0030D4  6F82               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 16881  0030D6  0E60               	movlw	96	;volatile
 16882  0030D8  6F81               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 16883                           
 16884                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 16885  0030DA  0E0E               	movlw	14	;volatile
 16886  0030DC  6F84               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 16887  0030DE  0E70               	movlw	112	;volatile
 16888  0030E0  6F83               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 16889                           
 16890                           ; BSR set to: 0
 16891                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 16892  0030E2  5077               	movf	3959,w,c	;volatile
 16893  0030E4  0BC0               	andlw	192
 16894  0030E6  6F85               	movwf	ECANSendMessage@mode& (0+255),b
 16895                           
 16896                           ; BSR set to: 0
 16897                           ;ECAN.c: 660: if ( mode == 0x00 )
 16898  0030E8  6785               	tstfsz	ECANSendMessage@mode& (0+255),b
 16899  0030EA  D002               	goto	l12193
 16900                           
 16901                           ; BSR set to: 0
 16902                           ;ECAN.c: 661: buffers = 2;
 16903  0030EC  0E02               	movlw	2
 16904  0030EE  D001               	goto	L14
 16905  0030F0                     l12193:
 16906                           
 16907                           ; BSR set to: 0
 16908                           ;ECAN.c: 662: else
 16909                           ;ECAN.c: 663: buffers = 8;
 16910  0030F0  0E08               	movlw	8
 16911  0030F2                     L14:
 16912  0030F2  6F86               	movwf	ECANSendMessage@buffers& (0+255),b
 16913                           
 16914                           ; BSR set to: 0
 16915                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 16916  0030F4  010D               	movlb	13	; () banked
 16917  0030F6  90D8               	bcf	status,0,c
 16918  0030F8  31F8               	rrcf	248,w,b	;volatile
 16919  0030FA  0100               	movlb	0	; () banked
 16920  0030FC  6F88               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 16921                           
 16922                           ; BSR set to: 0
 16923                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 16924  0030FE  6B8C               	clrf	ECANSendMessage@i& (0+255),b
 16925  003100  D07D               	goto	l12253
 16926  003102                     l12199:
 16927                           
 16928                           ; BSR set to: 0
 16929                           ;ECAN.c: 688: {
 16930                           ;ECAN.c: 693: ptr = pb[i];
 16931  003102  518C               	movf	ECANSendMessage@i& (0+255),w,b
 16932  003104  0D02               	mullw	2
 16933  003106  50F3               	movf	prodl,w,c
 16934  003108  0F73               	addlw	low ECANSendMessage@pb
 16935  00310A  6ED9               	movwf	fsr2l,c
 16936  00310C  6ADA               	clrf	fsr2h,c
 16937  00310E  CFDE F08D          	movff	postinc2,ECANSendMessage@ptr
 16938  003112  CFDD F08E          	movff	postdec2,ECANSendMessage@ptr+1
 16939                           
 16940                           ; BSR set to: 0
 16941                           ;ECAN.c: 694: tempPtr = ptr;
 16942  003116  C08D  F089         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 16943  00311A  C08E  F08A         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 16944                           
 16945                           ; BSR set to: 0
 16946                           ;ECAN.c: 702: if ( i > 2 )
 16947  00311E  0E02               	movlw	2
 16948  003120  658C               	cpfsgt	ECANSendMessage@i& (0+255),b
 16949  003122  D004               	goto	l12211
 16950                           
 16951                           ; BSR set to: 0
 16952                           ;ECAN.c: 703: {
 16953                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 16954  003124  90D8               	bcf	status,0,c
 16955  003126  3388               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 16956                           
 16957                           ; BSR set to: 0
 16958                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 16959  003128  A188               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 16960  00312A  D067               	goto	l12251
 16961  00312C                     l12211:
 16962                           
 16963                           ; BSR set to: 0
 16964                           ;ECAN.c: 714: }
 16965                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 16966  00312C  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16967  003130  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16968  003134  50DF               	movf	indf2,w,c
 16969  003136  6F72               	movwf	??_ECANSendMessage& (0+255),b
 16970  003138  B772               	btfsc	??_ECANSendMessage& (0+255),3,b
 16971  00313A  D05F               	goto	l12251
 16972                           
 16973                           ; BSR set to: 0
 16974                           ;ECAN.c: 721: {
 16975                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 16976  00313C  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16977  003140  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16978  003144  0EFC               	movlw	252
 16979  003146  16DF               	andwf	indf2,f,c
 16980                           
 16981                           ; BSR set to: 0
 16982                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 16983  003148  C071  F072         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 16984  00314C  0E03               	movlw	3
 16985  00314E  1772               	andwf	??_ECANSendMessage& (0+255),f,b
 16986  003150  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16987  003154  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16988  003158  5172               	movf	??_ECANSendMessage& (0+255),w,b
 16989  00315A  12DF               	iorwf	indf2,f,c
 16990                           
 16991                           ; BSR set to: 0
 16992                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 16993  00315C  AD71               	btfss	ECANSendMessage@msgFlags& (0+255),6,b
 16994  00315E  D004               	goto	l1354
 16995                           
 16996                           ; BSR set to: 0
 16997                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 16998  003160  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 16999  003162  0940               	iorlw	64
 17000  003164  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 17001  003166  D002               	goto	l12221
 17002  003168                     l1354:
 17003                           
 17004                           ; BSR set to: 0
 17005                           ;ECAN.c: 729: else
 17006                           ;ECAN.c: 730: temp = dataLen;
 17007  003168  C070  F08B         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 17008  00316C                     l12221:
 17009                           
 17010                           ; BSR set to: 0
 17011                           ;ECAN.c: 732: *(ptr+5) = temp;
 17012  00316C  EE20 F005          	lfsr	2,5
 17013  003170  518D               	movf	ECANSendMessage@ptr& (0+255),w,b
 17014  003172  26D9               	addwf	fsr2l,f,c
 17015  003174  518E               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 17016  003176  22DA               	addwfc	fsr2h,f,c
 17017  003178  C08B  FFDF         	movff	ECANSendMessage@temp,indf2
 17018                           
 17019                           ; BSR set to: 0
 17020                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 17021  00317C  AB71               	btfss	ECANSendMessage@msgFlags& (0+255),5,b
 17022  00317E  D003               	goto	l1356
 17023                           
 17024                           ; BSR set to: 0
 17025                           ;ECAN.c: 736: temp = 1;
 17026  003180  0E01               	movlw	1
 17027  003182  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 17028  003184  D001               	goto	l12227
 17029  003186                     l1356:
 17030                           
 17031                           ; BSR set to: 0
 17032                           ;ECAN.c: 738: else
 17033                           ;ECAN.c: 739: temp = 0;
 17034  003186  6B8B               	clrf	ECANSendMessage@temp& (0+255),b
 17035  003188                     l12227:
 17036                           
 17037                           ; BSR set to: 0
 17038                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 17039  003188  298D               	incf	ECANSendMessage@ptr& (0+255),w,b
 17040  00318A  6F60               	movwf	?__CANIDToRegs& (0+255),b
 17041  00318C  0E00               	movlw	0
 17042  00318E  218E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 17043  003190  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 17044  003192  C06A  F062         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 17045  003196  C06B  F063         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 17046  00319A  C06C  F064         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 17047  00319E  C06D  F065         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 17048  0031A2  C08B  F066         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 17049  0031A6  EC5D  F01B         	call	__CANIDToRegs	;wreg free
 17050                           
 17051                           ; BSR set to: 0
 17052                           ;ECAN.c: 745: ptr += 6;
 17053  0031AA  0E06               	movlw	6
 17054  0031AC  278D               	addwf	ECANSendMessage@ptr& (0+255),f,b
 17055  0031AE  0E00               	movlw	0
 17056  0031B0  238E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 17057                           
 17058                           ; BSR set to: 0
 17059                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 17060  0031B2  6B87               	clrf	ECANSendMessage@j& (0+255),b
 17061  0031B4  D00F               	goto	l12241
 17062  0031B6                     l12233:
 17063                           
 17064                           ; BSR set to: 0
 17065                           ;ECAN.c: 748: *ptr++ = *data++;
 17066  0031B6  C06E  FFD9         	movff	ECANSendMessage@data,fsr2l
 17067  0031BA  C06F  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 17068  0031BE  C08D  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 17069  0031C2  C08E  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 17070  0031C6  CFDF FFE7          	movff	indf2,indf1
 17071                           
 17072                           ; BSR set to: 0
 17073  0031CA  4B6E               	infsnz	ECANSendMessage@data& (0+255),f,b
 17074  0031CC  2B6F               	incf	(ECANSendMessage@data+1)& (0+255),f,b
 17075                           
 17076                           ; BSR set to: 0
 17077  0031CE  4B8D               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 17078  0031D0  2B8E               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 17079                           
 17080                           ; BSR set to: 0
 17081  0031D2  2B87               	incf	ECANSendMessage@j& (0+255),f,b
 17082  0031D4                     l12241:
 17083                           
 17084                           ; BSR set to: 0
 17085  0031D4  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 17086  0031D6  5D87               	subwf	ECANSendMessage@j& (0+255),w,b
 17087  0031D8  E3EE               	bnc	l12233
 17088                           
 17089                           ; BSR set to: 0
 17090                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 17091  0031DA  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 17092  0031DE  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 17093  0031E2  50DF               	movf	indf2,w,c
 17094  0031E4  6F72               	movwf	??_ECANSendMessage& (0+255),b
 17095  0031E6  B572               	btfsc	??_ECANSendMessage& (0+255),2,b
 17096  0031E8  D006               	goto	l12247
 17097                           
 17098                           ; BSR set to: 0
 17099                           ;ECAN.c: 753: *tempPtr |= 0x08;
 17100  0031EA  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 17101  0031EE  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 17102  0031F2  0E00               	movlw	0
 17103  0031F4  86DB               	bsf	plusw2,3,c
 17104  0031F6                     l12247:
 17105                           
 17106                           ; BSR set to: 0
 17107                           ;ECAN.c: 755: return TRUE;
 17108  0031F6  0E01               	movlw	1
 17109  0031F8  D005               	goto	l1362
 17110  0031FA                     l12251:
 17111                           
 17112                           ; BSR set to: 0
 17113  0031FA  2B8C               	incf	ECANSendMessage@i& (0+255),f,b
 17114  0031FC                     l12253:
 17115                           
 17116                           ; BSR set to: 0
 17117  0031FC  5186               	movf	ECANSendMessage@buffers& (0+255),w,b
 17118  0031FE  5D8C               	subwf	ECANSendMessage@i& (0+255),w,b
 17119  003200  E380               	bnc	l12199
 17120                           
 17121                           ; BSR set to: 0
 17122                           ;ECAN.c: 756: }
 17123                           ;ECAN.c: 757: }
 17124                           ;ECAN.c: 760: return FALSE;
 17125  003202  0E00               	movlw	0
 17126  003204                     l1362:
 17127                           
 17128                           ; BSR set to: 0
 17129  003204  0012               	return	
 17130  003206                     __end_of_ECANSendMessage:
 17131                           	opt stack 0
 17132                           tblptru	equ	0xFF8
 17133                           tblptrh	equ	0xFF7
 17134                           tblptrl	equ	0xFF6
 17135                           tablat	equ	0xFF5
 17136                           prodh	equ	0xFF4
 17137                           prodl	equ	0xFF3
 17138                           intcon	equ	0xFF2
 17139                           indf0	equ	0xFEF
 17140                           postinc0	equ	0xFEE
 17141                           fsr0h	equ	0xFEA
 17142                           fsr0l	equ	0xFE9
 17143                           wreg	equ	0xFE8
 17144                           indf1	equ	0xFE7
 17145                           postinc1	equ	0xFE6
 17146                           postdec1	equ	0xFE5
 17147                           fsr1h	equ	0xFE2
 17148                           fsr1l	equ	0xFE1
 17149                           indf2	equ	0xFDF
 17150                           postinc2	equ	0xFDE
 17151                           postdec2	equ	0xFDD
 17152                           plusw2	equ	0xFDB
 17153                           fsr2h	equ	0xFDA
 17154                           fsr2l	equ	0xFD9
 17155                           status	equ	0xFD8
 17156                           
 17157 ;; *************** function __CANIDToRegs *****************
 17158 ;; Defined at:
 17159 ;;		line 1099 in file "ECAN.c"
 17160 ;; Parameters:    Size  Location     Type
 17161 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 17162 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17163 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17164 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 17165 ;;  val             4    2[BANK0 ] unsigned long 
 17166 ;;  type            1    6[BANK0 ] unsigned char 
 17167 ;; Auto vars:     Size  Location     Type
 17168 ;;  Value           1    9[BANK0 ] PTR struct _CAN_MESSAGE_
 17169 ;;		 -> _CANIDToRegs@val(4), 
 17170 ;; Return value:  Size  Location     Type
 17171 ;;		None               void
 17172 ;; Registers used:
 17173 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17174 ;; Tracked objects:
 17175 ;;		On entry : F/0
 17176 ;;		On exit  : F/0
 17177 ;;		Unchanged: 0/0
 17178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17179 ;;      Params:         0       7       0       0       0       0       0
 17180 ;;      Locals:         0       1       0       0       0       0       0
 17181 ;;      Temps:          0       2       0       0       0       0       0
 17182 ;;      Totals:         0      10       0       0       0       0       0
 17183 ;;Total ram usage:       10 bytes
 17184 ;; Hardware stack levels used:    1
 17185 ;; Hardware stack levels required when called:    3
 17186 ;; This function calls:
 17187 ;;		Nothing
 17188 ;; This function is called by:
 17189 ;;		_doModeVerbose
 17190 ;;		_ECANSendMessage
 17191 ;; This function uses a non-reentrant model
 17192 ;;
 17193                           
 17194                           	psect	text35
 17195  0036BA                     __ptext35:
 17196                           	opt stack 0
 17197  0036BA                     __CANIDToRegs:
 17198                           	opt stack 24
 17199                           
 17200                           ; BSR set to: 0
 17201                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 17202                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 17203                           
 17204                           ; BSR set to: 0
 17205                           ;incstack = 0
 17206                           ;incstack = 0
 17207  0036BA  0E62               	movlw	low __CANIDToRegs@val
 17208  0036BC  6F69               	movwf	__CANIDToRegs@Value& (0+255),b
 17209                           
 17210                           ; BSR set to: 0
 17211                           ;ECAN.c: 1104: if ( type == 0 )
 17212  0036BE  6766               	tstfsz	__CANIDToRegs@type& (0+255),b
 17213  0036C0  D022               	goto	l11703
 17214                           
 17215                           ; BSR set to: 0
 17216                           ;ECAN.c: 1105: {
 17217                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 17218  0036C2  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 17219  0036C4  6ED9               	movwf	fsr2l,c
 17220  0036C6  6ADA               	clrf	fsr2h,c
 17221  0036C8  50DF               	movf	indf2,w,c
 17222  0036CA  6F67               	movwf	??__CANIDToRegs& (0+255),b
 17223  0036CC  90D8               	bcf	status,0,c
 17224  0036CE  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 17225  0036D0  90D8               	bcf	status,0,c
 17226  0036D2  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 17227  0036D4  90D8               	bcf	status,0,c
 17228  0036D6  3167               	rrcf	??__CANIDToRegs& (0+255),w,b
 17229                           
 17230                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 17231  0036D8  D862               	call	PL56	;call to abstracted procedure
 17232  0036DA  2AD9               	incf	fsr2l,f,c
 17233  0036DC  6ADA               	clrf	fsr2h,c
 17234  0036DE  D872               	call	PL106	;call to abstracted procedure
 17235  0036E0                     u14915:
 17236  0036E0  90D8               	bcf	status,0,c
 17237  0036E2  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 17238  0036E4  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 17239  0036E6  D7FC               	goto	u14915
 17240  0036E8  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17241                           
 17242                           ; BSR set to: 0
 17243                           ;ECAN.c: 1109: ptr++;
 17244                           
 17245                           ; BSR set to: 0
 17246                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 17247  0036EC  D846               	call	PL28	;call to abstracted procedure
 17248  0036EE  D86A               	call	PL106	;call to abstracted procedure
 17249  0036F0                     u14925:
 17250  0036F0  90D8               	bcf	status,0,c
 17251  0036F2  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 17252  0036F4  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 17253  0036F6  D7FC               	goto	u14925
 17254  0036F8  5167               	movf	??__CANIDToRegs& (0+255),w,b
 17255  0036FA  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17256  0036FE  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 17257  003702  6EDF               	movwf	indf2,c
 17258                           
 17259                           ;ECAN.c: 1111: }
 17260  003704  D039               	goto	l1416
 17261  003706                     l11703:
 17262                           
 17263                           ; BSR set to: 0
 17264                           ;ECAN.c: 1112: else
 17265                           ;ECAN.c: 1113: {
 17266                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 17267  003706  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 17268  003708  D842               	call	PL48	;call to abstracted procedure
 17269  00370A  0E05               	movlw	5
 17270  00370C  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 17271  00370E                     u14935:
 17272  00370E  90D8               	bcf	status,0,c
 17273  003710  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 17274  003712  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 17275  003714  D7FC               	goto	u14935
 17276  003716  5167               	movf	??__CANIDToRegs& (0+255),w,b
 17277                           
 17278                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 17279  003718  D842               	call	PL56	;call to abstracted procedure
 17280  00371A  0E03               	movlw	3
 17281  00371C  D849               	call	PL70	;call to abstracted procedure
 17282  00371E  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 17283  003720  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17284                           
 17285                           ; BSR set to: 0
 17286                           ;ECAN.c: 1117: ptr++;
 17287                           
 17288                           ; BSR set to: 0
 17289                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 17290  003724  D82A               	call	PL28	;call to abstracted procedure
 17291  003726  0E02               	movlw	2
 17292  003728  D843               	call	PL70	;call to abstracted procedure
 17293  00372A  3567               	rlcf	??__CANIDToRegs& (0+255),w,b
 17294  00372C  0BE0               	andlw	224
 17295  00372E  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17296  003732  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 17297  003736  6EDF               	movwf	indf2,c
 17298                           
 17299                           ; BSR set to: 0
 17300                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 17301  003738  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17302  00373C  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 17303  003740  0E00               	movlw	0
 17304  003742  86DB               	bsf	plusw2,3,c
 17305                           
 17306                           ; BSR set to: 0
 17307                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 17308  003744  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 17309  003746  D823               	call	PL48	;call to abstracted procedure
 17310  003748  0E03               	movlw	3
 17311  00374A  1767               	andwf	??__CANIDToRegs& (0+255),f,b
 17312  00374C  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17313                           
 17314                           ;ECAN.c: 1122: ptr++;
 17315                           
 17316                           ; BSR set to: 0
 17317                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 17318  003750  D814               	call	PL28	;call to abstracted procedure
 17319  003752  2AD9               	incf	fsr2l,f,c
 17320  003754  6ADA               	clrf	fsr2h,c
 17321  003756  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 17322  00375A  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 17323  00375E  CFDF FFE7          	movff	indf2,indf1
 17324                           
 17325                           ; BSR set to: 0
 17326                           ;ECAN.c: 1124: ptr++;
 17327  003762  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 17328  003764  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 17329                           
 17330                           ; BSR set to: 0
 17331                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 17332  003766  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 17333  003768  6ED9               	movwf	fsr2l,c
 17334  00376A  6ADA               	clrf	fsr2h,c
 17335  00376C  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 17336  003770  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 17337  003774  CFDF FFE7          	movff	indf2,indf1
 17338  003778                     l1416:
 17339                           
 17340                           ; BSR set to: 0
 17341  003778  0012               	return	
 17342  00377A                     __end_of__CANIDToRegs:
 17343                           	opt stack 0
 17344  00377A                     PL28:
 17345                           	opt stack 24
 17346  00377A  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 17347  00377E  5167               	movf	??__CANIDToRegs& (0+255),w,b
 17348  003780  12DF               	iorwf	indf2,f,c
 17349  003782  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 17350  003784  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 17351  003786  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 17352  003788  6ED9               	movwf	fsr2l,c
 17353  00378A  6ADA               	clrf	fsr2h,c
 17354  00378C  0012               	return	
 17355  00378E                     __end_ofPL28:
 17356                           	opt stack 0
 17357  00378E                     PL48:
 17358                           	opt stack 24
 17359  00378E  6ED9               	movwf	fsr2l,c
 17360  003790  6ADA               	clrf	fsr2h,c
 17361  003792  0E02               	movlw	2
 17362  003794  26D9               	addwf	fsr2l,f,c
 17363  003796  6ADA               	clrf	fsr2h,c
 17364  003798  50DF               	movf	indf2,w,c
 17365  00379A  6F67               	movwf	??__CANIDToRegs& (0+255),b
 17366  00379C  0012               	return	
 17367  00379E                     __end_ofPL48:
 17368                           	opt stack 0
 17369  00379E                     PL56:
 17370                           	opt stack 24
 17371  00379E  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17372  0037A2  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 17373  0037A6  6EDF               	movwf	indf2,c
 17374  0037A8  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 17375  0037AA  6ED9               	movwf	fsr2l,c
 17376  0037AC  6ADA               	clrf	fsr2h,c
 17377  0037AE  0012               	return	
 17378  0037B0                     __end_ofPL56:
 17379                           	opt stack 0
 17380  0037B0                     PL70:
 17381                           	opt stack 24
 17382  0037B0  26D9               	addwf	fsr2l,f,c
 17383  0037B2  6ADA               	clrf	fsr2h,c
 17384  0037B4  50DF               	movf	indf2,w,c
 17385  0037B6  6F67               	movwf	??__CANIDToRegs& (0+255),b
 17386  0037B8  90D8               	bcf	status,0,c
 17387  0037BA  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 17388  0037BC  90D8               	bcf	status,0,c
 17389  0037BE  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 17390  0037C0  90D8               	bcf	status,0,c
 17391  0037C2  0012               	return	
 17392  0037C4                     __end_ofPL70:
 17393                           	opt stack 0
 17394  0037C4                     PL106:
 17395                           	opt stack 24
 17396  0037C4  50DF               	movf	indf2,w,c
 17397  0037C6  6F67               	movwf	??__CANIDToRegs& (0+255),b
 17398  0037C8  0E05               	movlw	5
 17399  0037CA  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 17400  0037CC  0C05               	retlw	5
 17401  0037CE                     __end_ofPL106:
 17402                           	opt stack 0
 17403                           tblptru	equ	0xFF8
 17404                           tblptrh	equ	0xFF7
 17405                           tblptrl	equ	0xFF6
 17406                           tablat	equ	0xFF5
 17407                           prodh	equ	0xFF4
 17408                           prodl	equ	0xFF3
 17409                           intcon	equ	0xFF2
 17410                           indf0	equ	0xFEF
 17411                           postinc0	equ	0xFEE
 17412                           fsr0h	equ	0xFEA
 17413                           fsr0l	equ	0xFE9
 17414                           wreg	equ	0xFE8
 17415                           indf1	equ	0xFE7
 17416                           postinc1	equ	0xFE6
 17417                           postdec1	equ	0xFE5
 17418                           fsr1h	equ	0xFE2
 17419                           fsr1l	equ	0xFE1
 17420                           indf2	equ	0xFDF
 17421                           postinc2	equ	0xFDE
 17422                           postdec2	equ	0xFDD
 17423                           plusw2	equ	0xFDB
 17424                           fsr2h	equ	0xFDA
 17425                           fsr2l	equ	0xFD9
 17426                           status	equ	0xFD8
 17427                           
 17428 ;; *************** function _memset *****************
 17429 ;; Defined at:
 17430 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 17431 ;; Parameters:    Size  Location     Type
 17432 ;;  p1              2    0[BANK0 ] PTR void 
 17433 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 17434 ;;  c               2    2[BANK0 ] int 
 17435 ;;  n               2    4[BANK0 ] unsigned int 
 17436 ;; Auto vars:     Size  Location     Type
 17437 ;;  p               2    6[BANK0 ] PTR unsigned char 
 17438 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 17439 ;; Return value:  Size  Location     Type
 17440 ;;                  2    0[BANK0 ] PTR void 
 17441 ;; Registers used:
 17442 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17443 ;; Tracked objects:
 17444 ;;		On entry : F/0
 17445 ;;		On exit  : F/0
 17446 ;;		Unchanged: 0/0
 17447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17448 ;;      Params:         0       6       0       0       0       0       0
 17449 ;;      Locals:         0       2       0       0       0       0       0
 17450 ;;      Temps:          0       0       0       0       0       0       0
 17451 ;;      Totals:         0       8       0       0       0       0       0
 17452 ;;Total ram usage:        8 bytes
 17453 ;; Hardware stack levels used:    1
 17454 ;; Hardware stack levels required when called:    3
 17455 ;; This function calls:
 17456 ;;		Nothing
 17457 ;; This function is called by:
 17458 ;;		_doModeVerbose
 17459 ;;		_doModeSLCAN
 17460 ;;		_printGUID
 17461 ;;		_printMDF
 17462 ;;		_printNodeFirmwareVersion
 17463 ;; This function uses a non-reentrant model
 17464 ;;
 17465                           
 17466                           	psect	text36
 17467  0053CC                     __ptext36:
 17468                           	opt stack 0
 17469  0053CC                     _memset:
 17470                           	opt stack 26
 17471                           
 17472                           ; BSR set to: 0
 17473                           
 17474                           ; BSR set to: 0
 17475                           ;incstack = 0
 17476                           ;incstack = 0
 17477  0053CC  C060  F066         	movff	memset@p1,memset@p
 17478  0053D0  C061  F067         	movff	memset@p1+1,memset@p+1
 17479  0053D4  D008               	goto	l10905
 17480  0053D6                     l10901:
 17481                           
 17482                           ; BSR set to: 0
 17483  0053D6  C066  FFD9         	movff	memset@p,fsr2l
 17484  0053DA  C067  FFDA         	movff	memset@p+1,fsr2h
 17485  0053DE  C062  FFDF         	movff	memset@c,indf2
 17486                           
 17487                           ; BSR set to: 0
 17488  0053E2  4B66               	infsnz	memset@p& (0+255),f,b
 17489  0053E4  2B67               	incf	(memset@p+1)& (0+255),f,b
 17490  0053E6                     l10905:
 17491                           
 17492                           ; BSR set to: 0
 17493  0053E6  0764               	decf	memset@n& (0+255),f,b
 17494  0053E8  A0D8               	btfss	status,0,c
 17495  0053EA  0765               	decf	(memset@n+1)& (0+255),f,b
 17496  0053EC  0100               	movlb	0	; () banked
 17497  0053EE  2964               	incf	memset@n& (0+255),w,b
 17498  0053F0  B4D8               	btfsc	status,2,c
 17499  0053F2  2965               	incf	(memset@n+1)& (0+255),w,b
 17500  0053F4  B4D8               	btfsc	status,2,c
 17501                           
 17502                           ; BSR set to: 0
 17503  0053F6  0012               	return	
 17504  0053F8  D7EE               	goto	l10901
 17505  0053FA                     __end_of_memset:
 17506                           	opt stack 0
 17507                           tblptru	equ	0xFF8
 17508                           tblptrh	equ	0xFF7
 17509                           tblptrl	equ	0xFF6
 17510                           tablat	equ	0xFF5
 17511                           prodh	equ	0xFF4
 17512                           prodl	equ	0xFF3
 17513                           intcon	equ	0xFF2
 17514                           indf0	equ	0xFEF
 17515                           postinc0	equ	0xFEE
 17516                           fsr0h	equ	0xFEA
 17517                           fsr0l	equ	0xFE9
 17518                           wreg	equ	0xFE8
 17519                           indf1	equ	0xFE7
 17520                           postinc1	equ	0xFE6
 17521                           postdec1	equ	0xFE5
 17522                           fsr1h	equ	0xFE2
 17523                           fsr1l	equ	0xFE1
 17524                           indf2	equ	0xFDF
 17525                           postinc2	equ	0xFDE
 17526                           postdec2	equ	0xFDD
 17527                           plusw2	equ	0xFDB
 17528                           fsr2h	equ	0xFDA
 17529                           fsr2l	equ	0xFD9
 17530                           status	equ	0xFD8
 17531                           
 17532 ;; *************** function _printHelp *****************
 17533 ;; Defined at:
 17534 ;;		line 2336 in file "main.c"
 17535 ;; Parameters:    Size  Location     Type
 17536 ;;		None
 17537 ;; Auto vars:     Size  Location     Type
 17538 ;;		None
 17539 ;; Return value:  Size  Location     Type
 17540 ;;		None               void
 17541 ;; Registers used:
 17542 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17543 ;; Tracked objects:
 17544 ;;		On entry : F/1
 17545 ;;		On exit  : 0/0
 17546 ;;		Unchanged: 0/0
 17547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17548 ;;      Params:         0       0       0       0       0       0       0
 17549 ;;      Locals:         0       0       0       0       0       0       0
 17550 ;;      Temps:          0       0       0       0       0       0       0
 17551 ;;      Totals:         0       0       0       0       0       0       0
 17552 ;;Total ram usage:        0 bytes
 17553 ;; Hardware stack levels used:    1
 17554 ;; Hardware stack levels required when called:    5
 17555 ;; This function calls:
 17556 ;;		_putsUSART
 17557 ;; This function is called by:
 17558 ;;		_doModeVerbose
 17559 ;; This function uses a non-reentrant model
 17560 ;;
 17561                           
 17562                           	psect	text37
 17563  0029FC                     __ptext37:
 17564                           	opt stack 0
 17565  0029FC                     _printHelp:
 17566                           	opt stack 24
 17567                           
 17568                           ; BSR set to: 1
 17569                           ;main.c: 2337: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 17570                           
 17571                           ; BSR set to: 0
 17572                           ;incstack = 0
 17573                           ;incstack = 0
 17574  0029FC  0E78               	movlw	high STR_198
 17575  0029FE  0100               	movlb	0	; () banked
 17576  002A00  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17577  002A02  0E6C               	movlw	low STR_198
 17578  002A04  6F61               	movwf	?_putsUSART& (0+255),b
 17579  002A06  EC89  F027         	call	_putsUSART	;wreg free
 17580                           
 17581                           ;main.c: 2338: putsUSART((char *) "------------------------------------\r\n");
 17582  002A0A  0E71               	movlw	high (STR_230+28)
 17583  002A0C  0100               	movlb	0	; () banked
 17584  002A0E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17585  002A10  0E93               	movlw	low (STR_230+28)
 17586  002A12  6F61               	movwf	?_putsUSART& (0+255),b
 17587  002A14  EC89  F027         	call	_putsUSART	;wreg free
 17588                           
 17589                           ;main.c: 2339: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 17590  002A18  0E7B               	movlw	high STR_200
 17591  002A1A  0100               	movlb	0	; () banked
 17592  002A1C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17593  002A1E  0E64               	movlw	low STR_200
 17594  002A20  6F61               	movwf	?_putsUSART& (0+255),b
 17595  002A22  EC89  F027         	call	_putsUSART	;wreg free
 17596                           
 17597                           ;main.c: 2340: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 17598  002A26  0E76               	movlw	high STR_201
 17599  002A28  0100               	movlb	0	; () banked
 17600  002A2A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17601  002A2C  0EFB               	movlw	low STR_201
 17602  002A2E  6F61               	movwf	?_putsUSART& (0+255),b
 17603  002A30  EC89  F027         	call	_putsUSART	;wreg free
 17604                           
 17605                           ;main.c: 2341: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 17606  002A34  0E76               	movlw	high STR_202
 17607  002A36  0100               	movlb	0	; () banked
 17608  002A38  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17609  002A3A  0EA1               	movlw	low STR_202
 17610  002A3C  6F61               	movwf	?_putsUSART& (0+255),b
 17611  002A3E  EC89  F027         	call	_putsUSART	;wreg free
 17612                           
 17613                           ;main.c: 2342: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 17614  002A42  0E75               	movlw	high STR_203
 17615  002A44  0100               	movlb	0	; () banked
 17616  002A46  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17617  002A48  0E1A               	movlw	low STR_203
 17618  002A4A  6F61               	movwf	?_putsUSART& (0+255),b
 17619  002A4C  EC89  F027         	call	_putsUSART	;wreg free
 17620                           
 17621                           ;main.c: 2343: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 17622  002A50  0E75               	movlw	high STR_204
 17623  002A52  0100               	movlb	0	; () banked
 17624  002A54  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17625  002A56  0E7F               	movlw	low STR_204
 17626  002A58  6F61               	movwf	?_putsUSART& (0+255),b
 17627  002A5A  EC89  F027         	call	_putsUSART	;wreg free
 17628                           
 17629                           ;main.c: 2344: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 17630  002A5E  0E7B               	movlw	high STR_205
 17631  002A60  0100               	movlb	0	; () banked
 17632  002A62  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17633  002A64  0E0C               	movlw	low STR_205
 17634  002A66  6F61               	movwf	?_putsUSART& (0+255),b
 17635  002A68  EC89  F027         	call	_putsUSART	;wreg free
 17636                           
 17637                           ;main.c: 2345: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 17638  002A6C  0E75               	movlw	high STR_206
 17639  002A6E  0100               	movlb	0	; () banked
 17640  002A70  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17641  002A72  0EB1               	movlw	low STR_206
 17642  002A74  6F61               	movwf	?_putsUSART& (0+255),b
 17643  002A76  EC89  F027         	call	_putsUSART	;wreg free
 17644                           
 17645                           ;main.c: 2346: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 17646  002A7A  0E76               	movlw	high STR_207
 17647  002A7C  0100               	movlb	0	; () banked
 17648  002A7E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17649  002A80  0ECF               	movlw	low STR_207
 17650  002A82  6F61               	movwf	?_putsUSART& (0+255),b
 17651  002A84  EC89  F027         	call	_putsUSART	;wreg free
 17652                           
 17653                           ;main.c: 2347: putsUSART((char *) "TX - Send CAN frame .\r\n");
 17654  002A88  0E7C               	movlw	high STR_208
 17655  002A8A  0100               	movlb	0	; () banked
 17656  002A8C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17657  002A8E  0E01               	movlw	low STR_208
 17658  002A90  6F61               	movwf	?_putsUSART& (0+255),b
 17659  002A92  EC89  F027         	call	_putsUSART	;wreg free
 17660                           
 17661                           ;main.c: 2348: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 17662  002A96  0E73               	movlw	high STR_209
 17663  002A98  0100               	movlb	0	; () banked
 17664  002A9A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17665  002A9C  0E33               	movlw	low STR_209
 17666  002A9E  6F61               	movwf	?_putsUSART& (0+255),b
 17667  002AA0  EC89  F027         	call	_putsUSART	;wreg free
 17668                           
 17669                           ;main.c: 2349: putsUSART((char *) "RX - Read CAN frame.\r\n");
 17670  002AA4  0E7C               	movlw	high STR_210
 17671  002AA6  0100               	movlb	0	; () banked
 17672  002AA8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17673  002AAA  0EC1               	movlw	low STR_210
 17674  002AAC  6F61               	movwf	?_putsUSART& (0+255),b
 17675  002AAE  EC89  F027         	call	_putsUSART	;wreg free
 17676                           
 17677                           ;main.c: 2350: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 17678  002AB2  0E7A               	movlw	high STR_211
 17679  002AB4  0100               	movlb	0	; () banked
 17680  002AB6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17681  002AB8  0E28               	movlw	low STR_211
 17682  002ABA  6F61               	movwf	?_putsUSART& (0+255),b
 17683  002ABC  EC89  F027         	call	_putsUSART	;wreg free
 17684                           
 17685                           ;main.c: 2351: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 17686  002AC0  0E78               	movlw	high STR_212
 17687  002AC2  0100               	movlb	0	; () banked
 17688  002AC4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17689  002AC6  0E45               	movlw	low STR_212
 17690  002AC8  6F61               	movwf	?_putsUSART& (0+255),b
 17691  002ACA  EC89  F027         	call	_putsUSART	;wreg free
 17692                           
 17693                           ;main.c: 2352: putsUSART((char *) "HELP - Display this help information.\r\n");
 17694  002ACE  0E77               	movlw	high STR_213
 17695  002AD0  0100               	movlb	0	; () banked
 17696  002AD2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17697  002AD4  0EA6               	movlw	low STR_213
 17698  002AD6  6F61               	movwf	?_putsUSART& (0+255),b
 17699  002AD8  EC89  F027         	call	_putsUSART	;wreg free
 17700                           
 17701                           ;main.c: 2353: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 17702  002ADC  0E76               	movlw	high STR_214
 17703  002ADE  0100               	movlb	0	; () banked
 17704  002AE0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17705  002AE2  0E72               	movlw	low STR_214
 17706  002AE4  6F61               	movwf	?_putsUSART& (0+255),b
 17707  002AE6  EC89  F027         	call	_putsUSART	;wreg free
 17708                           
 17709                           ;main.c: 2354: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg [page:]
      +                          reg [count]).\r\n");
 17710  002AEA  0E71               	movlw	high STR_215
 17711  002AEC  0100               	movlb	0	; () banked
 17712  002AEE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17713  002AF0  0E32               	movlw	low STR_215
 17714  002AF2  6F61               	movwf	?_putsUSART& (0+255),b
 17715  002AF4  EC89  F027         	call	_putsUSART	;wreg free
 17716                           
 17717                           ;main.c: 2355: putsUSART((char *) "WREG - Write register of node (Format: wreg [page:]re
      +                          g content).\r\n");
 17718  002AF8  0E71               	movlw	high STR_216
 17719  002AFA  0100               	movlb	0	; () banked
 17720  002AFC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17721  002AFE  0EFD               	movlw	low STR_216
 17722  002B00  6F61               	movwf	?_putsUSART& (0+255),b
 17723  002B02  EC89  F027         	call	_putsUSART	;wreg free
 17724                           
 17725                           ;main.c: 2356: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 17726  002B06  0E70               	movlw	high STR_217
 17727  002B08  0100               	movlb	0	; () banked
 17728  002B0A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17729  002B0C  0E9E               	movlw	low STR_217
 17730  002B0E  6F61               	movwf	?_putsUSART& (0+255),b
 17731  002B10  EC89  F027         	call	_putsUSART	;wreg free
 17732                           
 17733                           ;main.c: 2357: putsUSART((char *) "FILTER - Set filter .\r\n");
 17734  002B14  0E7C               	movlw	high STR_218
 17735  002B16  0100               	movlb	0	; () banked
 17736  002B18  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17737  002B1A  0E19               	movlw	low STR_218
 17738  002B1C  6F61               	movwf	?_putsUSART& (0+255),b
 17739  002B1E  EC89  F027         	call	_putsUSART	;wreg free
 17740                           
 17741                           ;main.c: 2358: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 17742  002B22  0E70               	movlw	high STR_219
 17743  002B24  0100               	movlb	0	; () banked
 17744  002B26  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17745  002B28  0E50               	movlw	low STR_219
 17746  002B2A  6F61               	movwf	?_putsUSART& (0+255),b
 17747  002B2C  EC89  F027         	call	_putsUSART	;wreg free
 17748                           
 17749                           ;main.c: 2359: putsUSART((char *) "MASK - Set mask .\r\n");
 17750  002B30  0E7D               	movlw	high STR_220
 17751  002B32  0100               	movlb	0	; () banked
 17752  002B34  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17753  002B36  0E47               	movlw	low STR_220
 17754  002B38  6F61               	movwf	?_putsUSART& (0+255),b
 17755  002B3A  EC89  F027         	call	_putsUSART	;wreg free
 17756                           
 17757                           ;main.c: 2360: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 17758  002B3E  0E70               	movlw	high STR_221
 17759  002B40  0100               	movlb	0	; () banked
 17760  002B42  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17761  002B44  0EEB               	movlw	low STR_221
 17762  002B46  6F61               	movwf	?_putsUSART& (0+255),b
 17763  002B48  EC89  F027         	call	_putsUSART	;wreg free
 17764                           
 17765                           ;main.c: 2361: putsUSART((char *) "SET - Persistent functionality.\r\n");
 17766  002B4C  0E79               	movlw	high STR_222
 17767  002B4E  0100               	movlb	0	; () banked
 17768  002B50  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17769  002B52  0EE4               	movlw	low STR_222
 17770  002B54  6F61               	movwf	?_putsUSART& (0+255),b
 17771  002B56  EC89  F027         	call	_putsUSART	;wreg free
 17772                           
 17773                           ;main.c: 2362: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 17774  002B5A  0E76               	movlw	high STR_223
 17775  002B5C  0100               	movlb	0	; () banked
 17776  002B5E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17777  002B60  0E43               	movlw	low STR_223
 17778  002B62  6F61               	movwf	?_putsUSART& (0+255),b
 17779  002B64  EC89  F027         	call	_putsUSART	;wreg free
 17780                           
 17781                           ;main.c: 2363: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 17782  002B68  0E76               	movlw	high STR_224
 17783  002B6A  0100               	movlb	0	; () banked
 17784  002B6C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17785  002B6E  0E14               	movlw	low STR_224
 17786  002B70  6F61               	movwf	?_putsUSART& (0+255),b
 17787  002B72  EC89  F027         	call	_putsUSART	;wreg free
 17788                           
 17789                           ;main.c: 2364: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=10 ms .\r\n");
 17790  002B76  0E71               	movlw	high STR_225
 17791  002B78  0100               	movlb	0	; () banked
 17792  002B7A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17793  002B7C  0EBA               	movlw	low STR_225
 17794  002B7E  6F61               	movwf	?_putsUSART& (0+255),b
 17795  002B80  EC89  F027         	call	_putsUSART	;wreg free
 17796                           
 17797                           ;main.c: 2365: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 17798  002B84  0E75               	movlw	high STR_226
 17799  002B86  0100               	movlb	0	; () banked
 17800  002B88  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17801  002B8A  0EE3               	movlw	low STR_226
 17802  002B8C  6F61               	movwf	?_putsUSART& (0+255),b
 17803  002B8E  EC89  F027         	call	_putsUSART	;wreg free
 17804                           
 17805                           ;main.c: 2366: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 17806  002B92  0E73               	movlw	high STR_227
 17807  002B94  0100               	movlb	0	; () banked
 17808  002B96  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17809  002B98  0EA2               	movlw	low STR_227
 17810  002B9A  6F61               	movwf	?_putsUSART& (0+255),b
 17811  002B9C  EC89  F027         	call	_putsUSART	;wreg free
 17812                           
 17813                           ;main.c: 2367: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 17814  002BA0  0E72               	movlw	high STR_228
 17815  002BA2  0100               	movlb	0	; () banked
 17816  002BA4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17817  002BA6  0E82               	movlw	low STR_228
 17818  002BA8  6F61               	movwf	?_putsUSART& (0+255),b
 17819  002BAA  EC89  F027         	call	_putsUSART	;wreg free
 17820                           
 17821                           ;main.c: 2368: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 17822  002BAE  0E78               	movlw	high STR_229
 17823  002BB0  0100               	movlb	0	; () banked
 17824  002BB2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17825  002BB4  0EE1               	movlw	low STR_229
 17826  002BB6  6F61               	movwf	?_putsUSART& (0+255),b
 17827  002BB8  EF89  F027         	goto	_putsUSART	;wreg free
 17828  002BBC                     __end_of_printHelp:
 17829                           	opt stack 0
 17830                           tblptru	equ	0xFF8
 17831                           tblptrh	equ	0xFF7
 17832                           tblptrl	equ	0xFF6
 17833                           tablat	equ	0xFF5
 17834                           prodh	equ	0xFF4
 17835                           prodl	equ	0xFF3
 17836                           intcon	equ	0xFF2
 17837                           indf0	equ	0xFEF
 17838                           postinc0	equ	0xFEE
 17839                           fsr0h	equ	0xFEA
 17840                           fsr0l	equ	0xFE9
 17841                           wreg	equ	0xFE8
 17842                           indf1	equ	0xFE7
 17843                           postinc1	equ	0xFE6
 17844                           postdec1	equ	0xFE5
 17845                           fsr1h	equ	0xFE2
 17846                           fsr1l	equ	0xFE1
 17847                           indf2	equ	0xFDF
 17848                           postinc2	equ	0xFDE
 17849                           postdec2	equ	0xFDD
 17850                           plusw2	equ	0xFDB
 17851                           fsr2h	equ	0xFDA
 17852                           fsr2l	equ	0xFD9
 17853                           status	equ	0xFD8
 17854                           
 17855 ;; *************** function _printErrors *****************
 17856 ;; Defined at:
 17857 ;;		line 2272 in file "main.c"
 17858 ;; Parameters:    Size  Location     Type
 17859 ;;		None
 17860 ;; Auto vars:     Size  Location     Type
 17861 ;;		None
 17862 ;; Return value:  Size  Location     Type
 17863 ;;		None               void
 17864 ;; Registers used:
 17865 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17866 ;; Tracked objects:
 17867 ;;		On entry : F/1
 17868 ;;		On exit  : 0/0
 17869 ;;		Unchanged: 0/0
 17870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17871 ;;      Params:         0       0       0       0       0       0       0
 17872 ;;      Locals:         0      12       0       0       0       0       0
 17873 ;;      Temps:          0       0       0       0       0       0       0
 17874 ;;      Totals:         0      12       0       0       0       0       0
 17875 ;;Total ram usage:       12 bytes
 17876 ;; Hardware stack levels used:    1
 17877 ;; Hardware stack levels required when called:    5
 17878 ;; This function calls:
 17879 ;;		_putsUSART
 17880 ;;		_sprintf
 17881 ;; This function is called by:
 17882 ;;		_doModeVerbose
 17883 ;; This function uses a non-reentrant model
 17884 ;;
 17885                           
 17886                           	psect	text38
 17887  00207E                     __ptext38:
 17888                           	opt stack 0
 17889  00207E                     _printErrors:
 17890                           	opt stack 24
 17891                           
 17892                           ; BSR set to: 1
 17893                           ;main.c: 2273: putsUSART((char *) "CAN Receive overruns: ");
 17894                           
 17895                           ;incstack = 0
 17896                           ;incstack = 0
 17897  00207E  0E7C               	movlw	high STR_168
 17898  002080  0100               	movlb	0	; () banked
 17899  002082  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17900  002084  0ED8               	movlw	low STR_168
 17901  002086  6F61               	movwf	?_putsUSART& (0+255),b
 17902  002088  EC89  F027         	call	_putsUSART	;wreg free
 17903                           
 17904                           ;main.c: 2274: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns);
 17905  00208C  0101               	movlb	1	; () banked
 17906  00208E  6700               	tstfsz	_bHex& (0+255),b
 17907  002090  D005               	goto	l10981
 17908                           
 17909                           ; BSR set to: 1
 17910  002092  0E7F               	movlw	high STR_154
 17911  002094  0100               	movlb	0	; () banked
 17912  002096  6F95               	movwf	(_printErrors$1408+1)& (0+255),b
 17913  002098  0EE1               	movlw	low STR_154
 17914  00209A  D004               	goto	L15
 17915  00209C                     l10981:
 17916                           
 17917                           ; BSR set to: 1
 17918  00209C  0E7F               	movlw	high STR_169
 17919  00209E  0100               	movlb	0	; () banked
 17920  0020A0  6F95               	movwf	(_printErrors$1408+1)& (0+255),b
 17921  0020A2  0E16               	movlw	low STR_169
 17922  0020A4                     L15:
 17923  0020A4  6F94               	movwf	_printErrors$1408& (0+255),b
 17924                           
 17925                           ; BSR set to: 0
 17926  0020A6  0E01               	movlw	high _wrkbuf
 17927  0020A8  0100               	movlb	0	; () banked
 17928  0020AA  6F77               	movwf	(?_sprintf+1)& (0+255),b
 17929  0020AC  0E54               	movlw	low _wrkbuf
 17930  0020AE  6F76               	movwf	?_sprintf& (0+255),b
 17931  0020B0  C094  F078         	movff	_printErrors$1408,?_sprintf+2
 17932  0020B4  C095  F079         	movff	_printErrors$1408+1,?_sprintf+3
 17933  0020B8  C0D1  F07A         	movff	_can_receiveOverruns,?_sprintf+4
 17934  0020BC  C0D2  F07B         	movff	_can_receiveOverruns+1,?_sprintf+5
 17935  0020C0  C0D3  F07C         	movff	_can_receiveOverruns+2,?_sprintf+6
 17936  0020C4  C0D4  F07D         	movff	_can_receiveOverruns+3,?_sprintf+7
 17937  0020C8  ECE8  F00A         	call	_sprintf	;wreg free
 17938                           
 17939                           ; BSR set to: 0
 17940                           ;main.c: 2275: putsUSART(wrkbuf);
 17941  0020CC  0E01               	movlw	high _wrkbuf
 17942  0020CE  0100               	movlb	0	; () banked
 17943  0020D0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17944  0020D2  0E54               	movlw	low _wrkbuf
 17945  0020D4  6F61               	movwf	?_putsUSART& (0+255),b
 17946  0020D6  EC89  F027         	call	_putsUSART	;wreg free
 17947                           
 17948                           ;main.c: 2276: putsUSART((char *) "\r\n");
 17949  0020DA  0E74               	movlw	high (STR_189+50)
 17950  0020DC  0100               	movlb	0	; () banked
 17951  0020DE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17952  0020E0  0EAE               	movlw	low (STR_189+50)
 17953  0020E2  6F61               	movwf	?_putsUSART& (0+255),b
 17954  0020E4  EC89  F027         	call	_putsUSART	;wreg free
 17955                           
 17956                           ;main.c: 2278: putsUSART((char *) "CAN Transmit overruns: ");
 17957  0020E8  0E7C               	movlw	high STR_172
 17958  0020EA  0100               	movlb	0	; () banked
 17959  0020EC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17960  0020EE  0EA9               	movlw	low STR_172
 17961  0020F0  6F61               	movwf	?_putsUSART& (0+255),b
 17962  0020F2  EC89  F027         	call	_putsUSART	;wreg free
 17963                           
 17964                           ;main.c: 2279: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns);
 17965  0020F6  0101               	movlb	1	; () banked
 17966  0020F8  6700               	tstfsz	_bHex& (0+255),b
 17967  0020FA  D005               	goto	l10995
 17968                           
 17969                           ; BSR set to: 1
 17970  0020FC  0E7F               	movlw	high STR_154
 17971  0020FE  0100               	movlb	0	; () banked
 17972  002100  6F97               	movwf	(_printErrors$1414+1)& (0+255),b
 17973  002102  0EE1               	movlw	low STR_154
 17974  002104  D004               	goto	L16
 17975  002106                     l10995:
 17976                           
 17977                           ; BSR set to: 1
 17978  002106  0E7F               	movlw	high STR_169
 17979  002108  0100               	movlb	0	; () banked
 17980  00210A  6F97               	movwf	(_printErrors$1414+1)& (0+255),b
 17981  00210C  0E16               	movlw	low STR_169
 17982  00210E                     L16:
 17983  00210E  6F96               	movwf	_printErrors$1414& (0+255),b
 17984                           
 17985                           ; BSR set to: 0
 17986  002110  0E01               	movlw	high _wrkbuf
 17987  002112  0100               	movlb	0	; () banked
 17988  002114  6F77               	movwf	(?_sprintf+1)& (0+255),b
 17989  002116  0E54               	movlw	low _wrkbuf
 17990  002118  6F76               	movwf	?_sprintf& (0+255),b
 17991  00211A  C096  F078         	movff	_printErrors$1414,?_sprintf+2
 17992  00211E  C097  F079         	movff	_printErrors$1414+1,?_sprintf+3
 17993  002122  C0D5  F07A         	movff	_can_transmitOverruns,?_sprintf+4
 17994  002126  C0D6  F07B         	movff	_can_transmitOverruns+1,?_sprintf+5
 17995  00212A  C0D7  F07C         	movff	_can_transmitOverruns+2,?_sprintf+6
 17996  00212E  C0D8  F07D         	movff	_can_transmitOverruns+3,?_sprintf+7
 17997  002132  ECE8  F00A         	call	_sprintf	;wreg free
 17998                           
 17999                           ; BSR set to: 0
 18000                           ;main.c: 2280: putsUSART(wrkbuf);
 18001  002136  0E01               	movlw	high _wrkbuf
 18002  002138  0100               	movlb	0	; () banked
 18003  00213A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18004  00213C  0E54               	movlw	low _wrkbuf
 18005  00213E  6F61               	movwf	?_putsUSART& (0+255),b
 18006  002140  EC89  F027         	call	_putsUSART	;wreg free
 18007                           
 18008                           ;main.c: 2281: putsUSART((char *) "\r\n");
 18009  002144  0E74               	movlw	high (STR_189+50)
 18010  002146  0100               	movlb	0	; () banked
 18011  002148  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18012  00214A  0EAE               	movlw	low (STR_189+50)
 18013  00214C  6F61               	movwf	?_putsUSART& (0+255),b
 18014  00214E  EC89  F027         	call	_putsUSART	;wreg free
 18015                           
 18016                           ;main.c: 2283: putsUSART((char *) "UART Receive overruns: ");
 18017  002152  0E7C               	movlw	high STR_176
 18018  002154  0100               	movlb	0	; () banked
 18019  002156  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18020  002158  0E91               	movlw	low STR_176
 18021  00215A  6F61               	movwf	?_putsUSART& (0+255),b
 18022  00215C  EC89  F027         	call	_putsUSART	;wreg free
 18023                           
 18024                           ;main.c: 2284: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns);
 18025  002160  0101               	movlb	1	; () banked
 18026  002162  6700               	tstfsz	_bHex& (0+255),b
 18027  002164  D005               	goto	l11009
 18028                           
 18029                           ; BSR set to: 1
 18030  002166  0E7F               	movlw	high STR_154
 18031  002168  0100               	movlb	0	; () banked
 18032  00216A  6F99               	movwf	(_printErrors$1420+1)& (0+255),b
 18033  00216C  0EE1               	movlw	low STR_154
 18034  00216E  D004               	goto	L17
 18035  002170                     l11009:
 18036                           
 18037                           ; BSR set to: 1
 18038  002170  0E7F               	movlw	high STR_169
 18039  002172  0100               	movlb	0	; () banked
 18040  002174  6F99               	movwf	(_printErrors$1420+1)& (0+255),b
 18041  002176  0E16               	movlw	low STR_169
 18042  002178                     L17:
 18043  002178  6F98               	movwf	_printErrors$1420& (0+255),b
 18044                           
 18045                           ; BSR set to: 0
 18046  00217A  0E01               	movlw	high _wrkbuf
 18047  00217C  0100               	movlb	0	; () banked
 18048  00217E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18049  002180  0E54               	movlw	low _wrkbuf
 18050  002182  6F76               	movwf	?_sprintf& (0+255),b
 18051  002184  C098  F078         	movff	_printErrors$1420,?_sprintf+2
 18052  002188  C099  F079         	movff	_printErrors$1420+1,?_sprintf+3
 18053  00218C  C0F1  F07A         	movff	_uart_receiveOverruns,?_sprintf+4
 18054  002190  C0F2  F07B         	movff	_uart_receiveOverruns+1,?_sprintf+5
 18055  002194  C0F3  F07C         	movff	_uart_receiveOverruns+2,?_sprintf+6
 18056  002198  C0F4  F07D         	movff	_uart_receiveOverruns+3,?_sprintf+7
 18057  00219C  ECE8  F00A         	call	_sprintf	;wreg free
 18058                           
 18059                           ; BSR set to: 0
 18060                           ;main.c: 2285: putsUSART(wrkbuf);
 18061  0021A0  0E01               	movlw	high _wrkbuf
 18062  0021A2  0100               	movlb	0	; () banked
 18063  0021A4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18064  0021A6  0E54               	movlw	low _wrkbuf
 18065  0021A8  6F61               	movwf	?_putsUSART& (0+255),b
 18066  0021AA  EC89  F027         	call	_putsUSART	;wreg free
 18067                           
 18068                           ;main.c: 2286: putsUSART((char *) "\r\n");
 18069  0021AE  0E74               	movlw	high (STR_189+50)
 18070  0021B0  0100               	movlb	0	; () banked
 18071  0021B2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18072  0021B4  0EAE               	movlw	low (STR_189+50)
 18073  0021B6  6F61               	movwf	?_putsUSART& (0+255),b
 18074  0021B8  EC89  F027         	call	_putsUSART	;wreg free
 18075                           
 18076                           ;main.c: 2288: putsUSART((char *) "UART Receive overruns: ");
 18077  0021BC  0E7C               	movlw	high STR_176
 18078  0021BE  0100               	movlb	0	; () banked
 18079  0021C0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18080  0021C2  0E91               	movlw	low STR_176
 18081  0021C4  6F61               	movwf	?_putsUSART& (0+255),b
 18082  0021C6  EC89  F027         	call	_putsUSART	;wreg free
 18083                           
 18084                           ;main.c: 2289: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns);
 18085  0021CA  0101               	movlb	1	; () banked
 18086  0021CC  6700               	tstfsz	_bHex& (0+255),b
 18087  0021CE  D005               	goto	l11023
 18088                           
 18089                           ; BSR set to: 1
 18090  0021D0  0E7F               	movlw	high STR_154
 18091  0021D2  0100               	movlb	0	; () banked
 18092  0021D4  6F9B               	movwf	(_printErrors$1426+1)& (0+255),b
 18093  0021D6  0EE1               	movlw	low STR_154
 18094  0021D8  D004               	goto	L18
 18095  0021DA                     l11023:
 18096                           
 18097                           ; BSR set to: 1
 18098  0021DA  0E7F               	movlw	high STR_169
 18099  0021DC  0100               	movlb	0	; () banked
 18100  0021DE  6F9B               	movwf	(_printErrors$1426+1)& (0+255),b
 18101  0021E0  0E16               	movlw	low STR_169
 18102  0021E2                     L18:
 18103  0021E2  6F9A               	movwf	_printErrors$1426& (0+255),b
 18104                           
 18105                           ; BSR set to: 0
 18106  0021E4  0E01               	movlw	high _wrkbuf
 18107  0021E6  0100               	movlb	0	; () banked
 18108  0021E8  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18109  0021EA  0E54               	movlw	low _wrkbuf
 18110  0021EC  6F76               	movwf	?_sprintf& (0+255),b
 18111  0021EE  C09A  F078         	movff	_printErrors$1426,?_sprintf+2
 18112  0021F2  C09B  F079         	movff	_printErrors$1426+1,?_sprintf+3
 18113  0021F6  C029  F07A         	movff	_uart_transmitOverruns,?_sprintf+4
 18114  0021FA  C02A  F07B         	movff	_uart_transmitOverruns+1,?_sprintf+5
 18115  0021FE  C02B  F07C         	movff	_uart_transmitOverruns+2,?_sprintf+6
 18116  002202  C02C  F07D         	movff	_uart_transmitOverruns+3,?_sprintf+7
 18117  002206  ECE8  F00A         	call	_sprintf	;wreg free
 18118                           
 18119                           ; BSR set to: 0
 18120                           ;main.c: 2290: putsUSART(wrkbuf);
 18121  00220A  0E01               	movlw	high _wrkbuf
 18122  00220C  0100               	movlb	0	; () banked
 18123  00220E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18124  002210  0E54               	movlw	low _wrkbuf
 18125  002212  6F61               	movwf	?_putsUSART& (0+255),b
 18126  002214  EC89  F027         	call	_putsUSART	;wreg free
 18127                           
 18128                           ;main.c: 2291: putsUSART((char *) "\r\n");
 18129  002218  0E74               	movlw	high (STR_189+50)
 18130  00221A  0100               	movlb	0	; () banked
 18131  00221C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18132  00221E  0EAE               	movlw	low (STR_189+50)
 18133  002220  6F61               	movwf	?_putsUSART& (0+255),b
 18134  002222  EC89  F027         	call	_putsUSART	;wreg free
 18135                           
 18136                           ;main.c: 2293: putsUSART((char *) "Transmit Error Counter: ");
 18137  002226  0E7B               	movlw	high STR_184
 18138  002228  0100               	movlb	0	; () banked
 18139  00222A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18140  00222C  0EE8               	movlw	low STR_184
 18141  00222E  6F61               	movwf	?_putsUSART& (0+255),b
 18142  002230  EC89  F027         	call	_putsUSART	;wreg free
 18143                           
 18144                           ;main.c: 2294: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT);
 18145  002234  0101               	movlb	1	; () banked
 18146  002236  6700               	tstfsz	_bHex& (0+255),b
 18147  002238  D005               	goto	l11037
 18148                           
 18149                           ; BSR set to: 1
 18150  00223A  0E7F               	movlw	high STR_53
 18151  00223C  0100               	movlb	0	; () banked
 18152  00223E  6F9D               	movwf	(_printErrors$1432+1)& (0+255),b
 18153  002240  0EEE               	movlw	low STR_53
 18154  002242  D004               	goto	L19
 18155  002244                     l11037:
 18156                           
 18157                           ; BSR set to: 1
 18158  002244  0E7F               	movlw	high STR_52
 18159  002246  0100               	movlb	0	; () banked
 18160  002248  6F9D               	movwf	(_printErrors$1432+1)& (0+255),b
 18161  00224A  0E65               	movlw	low STR_52
 18162  00224C                     L19:
 18163  00224C  6F9C               	movwf	_printErrors$1432& (0+255),b
 18164                           
 18165                           ; BSR set to: 0
 18166  00224E  0E01               	movlw	high _wrkbuf
 18167  002250  0100               	movlb	0	; () banked
 18168  002252  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18169  002254  0E54               	movlw	low _wrkbuf
 18170  002256  6F76               	movwf	?_sprintf& (0+255),b
 18171  002258  C09C  F078         	movff	_printErrors$1432,?_sprintf+2
 18172  00225C  C09D  F079         	movff	_printErrors$1432+1,?_sprintf+3
 18173  002260  CF76 F07A          	movff	3958,?_sprintf+4	;volatile
 18174  002264  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 18175  002266  ECE8  F00A         	call	_sprintf	;wreg free
 18176                           
 18177                           ; BSR set to: 0
 18178                           ;main.c: 2295: putsUSART(wrkbuf);
 18179  00226A  0E01               	movlw	high _wrkbuf
 18180  00226C  0100               	movlb	0	; () banked
 18181  00226E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18182  002270  0E54               	movlw	low _wrkbuf
 18183  002272  6F61               	movwf	?_putsUSART& (0+255),b
 18184  002274  EC89  F027         	call	_putsUSART	;wreg free
 18185                           
 18186                           ;main.c: 2296: putsUSART((char *) "\r\n");
 18187  002278  0E74               	movlw	high (STR_189+50)
 18188  00227A  0100               	movlb	0	; () banked
 18189  00227C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18190  00227E  0EAE               	movlw	low (STR_189+50)
 18191  002280  6F61               	movwf	?_putsUSART& (0+255),b
 18192  002282  EC89  F027         	call	_putsUSART	;wreg free
 18193                           
 18194                           ;main.c: 2298: if (COMSTATbits.TXWARN) {
 18195  002286  A474               	btfss	3956,2,c	;volatile
 18196  002288  D007               	goto	l11049
 18197                           
 18198                           ;main.c: 2299: putsUSART((char *) "Transmitter in Error State Warning (128 > TERRCNT ? 9
      +                          6)\r\n");
 18199  00228A  0E72               	movlw	high STR_188
 18200  00228C  0100               	movlb	0	; () banked
 18201  00228E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18202  002290  0EC0               	movlw	low STR_188
 18203  002292  6F61               	movwf	?_putsUSART& (0+255),b
 18204  002294  EC89  F027         	call	_putsUSART	;wreg free
 18205  002298                     l11049:
 18206                           
 18207                           ;main.c: 2300: }
 18208                           ;main.c: 2302: if (COMSTATbits.TXBO) {
 18209  002298  AA74               	btfss	3956,5,c	;volatile
 18210  00229A  D007               	goto	l11053
 18211                           
 18212                           ;main.c: 2303: putsUSART((char *) "Transmitter in Error State Bus OFF (TERRCNT ? 256)\r\
      +                          n");
 18213  00229C  0E74               	movlw	high STR_189
 18214  00229E  0100               	movlb	0	; () banked
 18215  0022A0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18216  0022A2  0E7C               	movlw	low STR_189
 18217  0022A4  6F61               	movwf	?_putsUSART& (0+255),b
 18218  0022A6  EC89  F027         	call	_putsUSART	;wreg free
 18219  0022AA                     l11053:
 18220                           
 18221                           ;main.c: 2304: }
 18222                           ;main.c: 2306: if (COMSTATbits.TXBP) {
 18223  0022AA  A874               	btfss	3956,4,c	;volatile
 18224  0022AC  D007               	goto	l1086
 18225                           
 18226                           ;main.c: 2307: putsUSART((char *) "Transmitter in Error State Bus Passive (TERRCNT ? 128
      +                          )\r\n");
 18227  0022AE  0E72               	movlw	high STR_190
 18228  0022B0  0100               	movlb	0	; () banked
 18229  0022B2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18230  0022B4  0EFA               	movlw	low STR_190
 18231  0022B6  6F61               	movwf	?_putsUSART& (0+255),b
 18232  0022B8  EC89  F027         	call	_putsUSART	;wreg free
 18233  0022BC                     l1086:
 18234                           
 18235                           ;main.c: 2308: }
 18236                           ;main.c: 2311: putsUSART((char *) "Receive Error Counter: ");
 18237  0022BC  0E7C               	movlw	high STR_191
 18238  0022BE  0100               	movlb	0	; () banked
 18239  0022C0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18240  0022C2  0E79               	movlw	low STR_191
 18241  0022C4  6F61               	movwf	?_putsUSART& (0+255),b
 18242  0022C6  EC89  F027         	call	_putsUSART	;wreg free
 18243                           
 18244                           ;main.c: 2312: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT);
 18245  0022CA  0101               	movlb	1	; () banked
 18246  0022CC  6700               	tstfsz	_bHex& (0+255),b
 18247  0022CE  D005               	goto	l11061
 18248                           
 18249                           ; BSR set to: 1
 18250  0022D0  0E7F               	movlw	high STR_53
 18251  0022D2  0100               	movlb	0	; () banked
 18252  0022D4  6F9F               	movwf	(_printErrors$1441+1)& (0+255),b
 18253  0022D6  0EEE               	movlw	low STR_53
 18254  0022D8  D004               	goto	L20
 18255  0022DA                     l11061:
 18256                           
 18257                           ; BSR set to: 1
 18258  0022DA  0E7F               	movlw	high STR_52
 18259  0022DC  0100               	movlb	0	; () banked
 18260  0022DE  6F9F               	movwf	(_printErrors$1441+1)& (0+255),b
 18261  0022E0  0E65               	movlw	low STR_52
 18262  0022E2                     L20:
 18263  0022E2  6F9E               	movwf	_printErrors$1441& (0+255),b
 18264                           
 18265                           ; BSR set to: 0
 18266  0022E4  0E01               	movlw	high _wrkbuf
 18267  0022E6  0100               	movlb	0	; () banked
 18268  0022E8  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18269  0022EA  0E54               	movlw	low _wrkbuf
 18270  0022EC  6F76               	movwf	?_sprintf& (0+255),b
 18271  0022EE  C09E  F078         	movff	_printErrors$1441,?_sprintf+2
 18272  0022F2  C09F  F079         	movff	_printErrors$1441+1,?_sprintf+3
 18273  0022F6  CF75 F07A          	movff	3957,?_sprintf+4	;volatile
 18274  0022FA  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 18275  0022FC  ECE8  F00A         	call	_sprintf	;wreg free
 18276                           
 18277                           ; BSR set to: 0
 18278                           ;main.c: 2313: putsUSART(wrkbuf);
 18279  002300  0E01               	movlw	high _wrkbuf
 18280  002302  0100               	movlb	0	; () banked
 18281  002304  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18282  002306  0E54               	movlw	low _wrkbuf
 18283  002308  6F61               	movwf	?_putsUSART& (0+255),b
 18284  00230A  EC89  F027         	call	_putsUSART	;wreg free
 18285                           
 18286                           ;main.c: 2314: putsUSART((char *) "\r\n");
 18287  00230E  0E74               	movlw	high (STR_189+50)
 18288  002310  0100               	movlb	0	; () banked
 18289  002312  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18290  002314  0EAE               	movlw	low (STR_189+50)
 18291  002316  6F61               	movwf	?_putsUSART& (0+255),b
 18292  002318  EC89  F027         	call	_putsUSART	;wreg free
 18293                           
 18294                           ;main.c: 2316: if (COMSTATbits.RXWARN) {
 18295  00231C  A274               	btfss	3956,1,c	;volatile
 18296  00231E  D007               	goto	l11073
 18297                           
 18298                           ;main.c: 2317: putsUSART((char *) "Receiver in Error State Warning (128 > RERRCNT ? 96)\
      +                          r\n");
 18299  002320  0E73               	movlw	high STR_195
 18300  002322  0100               	movlb	0	; () banked
 18301  002324  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18302  002326  0E6B               	movlw	low STR_195
 18303  002328  6F61               	movwf	?_putsUSART& (0+255),b
 18304  00232A  EC89  F027         	call	_putsUSART	;wreg free
 18305  00232E                     l11073:
 18306                           
 18307                           ;main.c: 2318: }
 18308                           ;main.c: 2320: if (COMSTATbits.RXBP) {
 18309  00232E  A674               	btfss	3956,3,c	;volatile
 18310  002330  D007               	goto	l11077
 18311                           
 18312                           ;main.c: 2321: putsUSART((char *) "Receiver in Error State Bus Passive (RERRCNT ? 128)\r
      +                          \n");
 18313  002332  0E74               	movlw	high STR_196
 18314  002334  0100               	movlb	0	; () banked
 18315  002336  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18316  002338  0E10               	movlw	low STR_196
 18317  00233A  6F61               	movwf	?_putsUSART& (0+255),b
 18318  00233C  EC89  F027         	call	_putsUSART	;wreg free
 18319  002340                     l11077:
 18320                           
 18321                           ;main.c: 2322: }
 18322                           ;main.c: 2324: if (COMSTATbits.EWARN) {
 18323  002340  A074               	btfss	3956,0,c	;volatile
 18324  002342  D007               	goto	l1094
 18325                           
 18326                           ;main.c: 2325: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 18327  002344  0E74               	movlw	high STR_197
 18328  002346  0100               	movlb	0	; () banked
 18329  002348  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18330  00234A  0EE6               	movlw	low STR_197
 18331  00234C  6F61               	movwf	?_putsUSART& (0+255),b
 18332  00234E  EC89  F027         	call	_putsUSART	;wreg free
 18333  002352                     l1094:
 18334  002352  0012               	return	
 18335  002354                     __end_of_printErrors:
 18336                           	opt stack 0
 18337                           tblptru	equ	0xFF8
 18338                           tblptrh	equ	0xFF7
 18339                           tblptrl	equ	0xFF6
 18340                           tablat	equ	0xFF5
 18341                           prodh	equ	0xFF4
 18342                           prodl	equ	0xFF3
 18343                           intcon	equ	0xFF2
 18344                           indf0	equ	0xFEF
 18345                           postinc0	equ	0xFEE
 18346                           fsr0h	equ	0xFEA
 18347                           fsr0l	equ	0xFE9
 18348                           wreg	equ	0xFE8
 18349                           indf1	equ	0xFE7
 18350                           postinc1	equ	0xFE6
 18351                           postdec1	equ	0xFE5
 18352                           fsr1h	equ	0xFE2
 18353                           fsr1l	equ	0xFE1
 18354                           indf2	equ	0xFDF
 18355                           postinc2	equ	0xFDE
 18356                           postdec2	equ	0xFDD
 18357                           plusw2	equ	0xFDB
 18358                           fsr2h	equ	0xFDA
 18359                           fsr2l	equ	0xFD9
 18360                           status	equ	0xFD8
 18361                           
 18362 ;; *************** function _printStatistics *****************
 18363 ;; Defined at:
 18364 ;;		line 2245 in file "main.c"
 18365 ;; Parameters:    Size  Location     Type
 18366 ;;		None
 18367 ;; Auto vars:     Size  Location     Type
 18368 ;;		None
 18369 ;; Return value:  Size  Location     Type
 18370 ;;		None               void
 18371 ;; Registers used:
 18372 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18373 ;; Tracked objects:
 18374 ;;		On entry : F/1
 18375 ;;		On exit  : 0/0
 18376 ;;		Unchanged: 0/0
 18377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18378 ;;      Params:         0       0       0       0       0       0       0
 18379 ;;      Locals:         0       8       0       0       0       0       0
 18380 ;;      Temps:          0       0       0       0       0       0       0
 18381 ;;      Totals:         0       8       0       0       0       0       0
 18382 ;;Total ram usage:        8 bytes
 18383 ;; Hardware stack levels used:    1
 18384 ;; Hardware stack levels required when called:    5
 18385 ;; This function calls:
 18386 ;;		_putsUSART
 18387 ;;		_sprintf
 18388 ;; This function is called by:
 18389 ;;		_doModeVerbose
 18390 ;; This function uses a non-reentrant model
 18391 ;;
 18392                           
 18393                           	psect	text39
 18394  002D68                     __ptext39:
 18395                           	opt stack 0
 18396  002D68                     _printStatistics:
 18397                           	opt stack 24
 18398                           
 18399                           ; BSR set to: 1
 18400                           ;main.c: 2246: putsUSART((char *) "Sent CAN frames: ");
 18401                           
 18402                           ;incstack = 0
 18403                           ;incstack = 0
 18404  002D68  0E7E               	movlw	high STR_152
 18405  002D6A  0100               	movlb	0	; () banked
 18406  002D6C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18407  002D6E  0E0A               	movlw	low STR_152
 18408  002D70  6F61               	movwf	?_putsUSART& (0+255),b
 18409  002D72  EC89  F027         	call	_putsUSART	;wreg free
 18410                           
 18411                           ;main.c: 2247: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames);
 18412  002D76  0101               	movlb	1	; () banked
 18413  002D78  6700               	tstfsz	_bHex& (0+255),b
 18414  002D7A  D005               	goto	l10925
 18415                           
 18416                           ; BSR set to: 1
 18417  002D7C  0E7F               	movlw	high STR_154
 18418  002D7E  0100               	movlb	0	; () banked
 18419  002D80  6F95               	movwf	(_printStatistics$1383+1)& (0+255),b
 18420  002D82  0EE1               	movlw	low STR_154
 18421  002D84  D004               	goto	L21
 18422  002D86                     l10925:
 18423                           
 18424                           ; BSR set to: 1
 18425  002D86  0E7F               	movlw	high STR_153
 18426  002D88  0100               	movlb	0	; () banked
 18427  002D8A  6F95               	movwf	(_printStatistics$1383+1)& (0+255),b
 18428  002D8C  0E73               	movlw	low STR_153
 18429  002D8E                     L21:
 18430  002D8E  6F94               	movwf	_printStatistics$1383& (0+255),b
 18431                           
 18432                           ; BSR set to: 0
 18433  002D90  0E01               	movlw	high _wrkbuf
 18434  002D92  0100               	movlb	0	; () banked
 18435  002D94  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18436  002D96  0E54               	movlw	low _wrkbuf
 18437  002D98  6F76               	movwf	?_sprintf& (0+255),b
 18438  002D9A  C094  F078         	movff	_printStatistics$1383,?_sprintf+2
 18439  002D9E  C095  F079         	movff	_printStatistics$1383+1,?_sprintf+3
 18440  002DA2  C0E5  F07A         	movff	_cntTxFrames,?_sprintf+4
 18441  002DA6  C0E6  F07B         	movff	_cntTxFrames+1,?_sprintf+5
 18442  002DAA  C0E7  F07C         	movff	_cntTxFrames+2,?_sprintf+6
 18443  002DAE  C0E8  F07D         	movff	_cntTxFrames+3,?_sprintf+7
 18444  002DB2  ECE8  F00A         	call	_sprintf	;wreg free
 18445                           
 18446                           ; BSR set to: 0
 18447                           ;main.c: 2248: putsUSART(wrkbuf);
 18448  002DB6  0E01               	movlw	high _wrkbuf
 18449  002DB8  0100               	movlb	0	; () banked
 18450  002DBA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18451  002DBC  0E54               	movlw	low _wrkbuf
 18452  002DBE  6F61               	movwf	?_putsUSART& (0+255),b
 18453  002DC0  EC89  F027         	call	_putsUSART	;wreg free
 18454                           
 18455                           ;main.c: 2249: putsUSART((char *) "\r\n");
 18456  002DC4  0E74               	movlw	high (STR_189+50)
 18457  002DC6  0100               	movlb	0	; () banked
 18458  002DC8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18459  002DCA  0EAE               	movlw	low (STR_189+50)
 18460  002DCC  6F61               	movwf	?_putsUSART& (0+255),b
 18461  002DCE  EC89  F027         	call	_putsUSART	;wreg free
 18462                           
 18463                           ;main.c: 2251: putsUSART((char *) "Sent CAN bytes: ");
 18464  002DD2  0E7E               	movlw	high STR_156
 18465  002DD4  0100               	movlb	0	; () banked
 18466  002DD6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18467  002DD8  0E3E               	movlw	low STR_156
 18468  002DDA  6F61               	movwf	?_putsUSART& (0+255),b
 18469  002DDC  EC89  F027         	call	_putsUSART	;wreg free
 18470                           
 18471                           ;main.c: 2252: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes);
 18472  002DE0  0101               	movlb	1	; () banked
 18473  002DE2  6700               	tstfsz	_bHex& (0+255),b
 18474  002DE4  D005               	goto	l10939
 18475                           
 18476                           ; BSR set to: 1
 18477  002DE6  0E7F               	movlw	high STR_154
 18478  002DE8  0100               	movlb	0	; () banked
 18479  002DEA  6F97               	movwf	(_printStatistics$1389+1)& (0+255),b
 18480  002DEC  0EE1               	movlw	low STR_154
 18481  002DEE  D004               	goto	L22
 18482  002DF0                     l10939:
 18483                           
 18484                           ; BSR set to: 1
 18485  002DF0  0E7F               	movlw	high STR_153
 18486  002DF2  0100               	movlb	0	; () banked
 18487  002DF4  6F97               	movwf	(_printStatistics$1389+1)& (0+255),b
 18488  002DF6  0E73               	movlw	low STR_153
 18489  002DF8                     L22:
 18490  002DF8  6F96               	movwf	_printStatistics$1389& (0+255),b
 18491                           
 18492                           ; BSR set to: 0
 18493  002DFA  0E01               	movlw	high _wrkbuf
 18494  002DFC  0100               	movlb	0	; () banked
 18495  002DFE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18496  002E00  0E54               	movlw	low _wrkbuf
 18497  002E02  6F76               	movwf	?_sprintf& (0+255),b
 18498  002E04  C096  F078         	movff	_printStatistics$1389,?_sprintf+2
 18499  002E08  C097  F079         	movff	_printStatistics$1389+1,?_sprintf+3
 18500  002E0C  C0E1  F07A         	movff	_cntTxBytes,?_sprintf+4
 18501  002E10  C0E2  F07B         	movff	_cntTxBytes+1,?_sprintf+5
 18502  002E14  C0E3  F07C         	movff	_cntTxBytes+2,?_sprintf+6
 18503  002E18  C0E4  F07D         	movff	_cntTxBytes+3,?_sprintf+7
 18504  002E1C  ECE8  F00A         	call	_sprintf	;wreg free
 18505                           
 18506                           ; BSR set to: 0
 18507                           ;main.c: 2253: putsUSART(wrkbuf);
 18508  002E20  0E01               	movlw	high _wrkbuf
 18509  002E22  0100               	movlb	0	; () banked
 18510  002E24  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18511  002E26  0E54               	movlw	low _wrkbuf
 18512  002E28  6F61               	movwf	?_putsUSART& (0+255),b
 18513  002E2A  EC89  F027         	call	_putsUSART	;wreg free
 18514                           
 18515                           ;main.c: 2254: putsUSART((char *) "\r\n");
 18516  002E2E  0E74               	movlw	high (STR_189+50)
 18517  002E30  0100               	movlb	0	; () banked
 18518  002E32  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18519  002E34  0EAE               	movlw	low (STR_189+50)
 18520  002E36  6F61               	movwf	?_putsUSART& (0+255),b
 18521  002E38  EC89  F027         	call	_putsUSART	;wreg free
 18522                           
 18523                           ;main.c: 2256: putsUSART((char *) "Received CAN frames: ");
 18524  002E3C  0E7D               	movlw	high STR_160
 18525  002E3E  0100               	movlb	0	; () banked
 18526  002E40  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18527  002E42  0E1C               	movlw	low STR_160
 18528  002E44  6F61               	movwf	?_putsUSART& (0+255),b
 18529  002E46  EC89  F027         	call	_putsUSART	;wreg free
 18530                           
 18531                           ;main.c: 2257: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames);
 18532  002E4A  0101               	movlb	1	; () banked
 18533  002E4C  6700               	tstfsz	_bHex& (0+255),b
 18534  002E4E  D005               	goto	l10953
 18535                           
 18536                           ; BSR set to: 1
 18537  002E50  0E7F               	movlw	high STR_154
 18538  002E52  0100               	movlb	0	; () banked
 18539  002E54  6F99               	movwf	(_printStatistics$1395+1)& (0+255),b
 18540  002E56  0EE1               	movlw	low STR_154
 18541  002E58  D004               	goto	L23
 18542  002E5A                     l10953:
 18543                           
 18544                           ; BSR set to: 1
 18545  002E5A  0E7F               	movlw	high STR_153
 18546  002E5C  0100               	movlb	0	; () banked
 18547  002E5E  6F99               	movwf	(_printStatistics$1395+1)& (0+255),b
 18548  002E60  0E73               	movlw	low STR_153
 18549  002E62                     L23:
 18550  002E62  6F98               	movwf	_printStatistics$1395& (0+255),b
 18551                           
 18552                           ; BSR set to: 0
 18553  002E64  0E01               	movlw	high _wrkbuf
 18554  002E66  0100               	movlb	0	; () banked
 18555  002E68  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18556  002E6A  0E54               	movlw	low _wrkbuf
 18557  002E6C  6F76               	movwf	?_sprintf& (0+255),b
 18558  002E6E  C098  F078         	movff	_printStatistics$1395,?_sprintf+2
 18559  002E72  C099  F079         	movff	_printStatistics$1395+1,?_sprintf+3
 18560  002E76  C0DD  F07A         	movff	_cntRxFrames,?_sprintf+4
 18561  002E7A  C0DE  F07B         	movff	_cntRxFrames+1,?_sprintf+5
 18562  002E7E  C0DF  F07C         	movff	_cntRxFrames+2,?_sprintf+6
 18563  002E82  C0E0  F07D         	movff	_cntRxFrames+3,?_sprintf+7
 18564  002E86  ECE8  F00A         	call	_sprintf	;wreg free
 18565                           
 18566                           ; BSR set to: 0
 18567                           ;main.c: 2258: putsUSART(wrkbuf);
 18568  002E8A  0E01               	movlw	high _wrkbuf
 18569  002E8C  0100               	movlb	0	; () banked
 18570  002E8E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18571  002E90  0E54               	movlw	low _wrkbuf
 18572  002E92  6F61               	movwf	?_putsUSART& (0+255),b
 18573  002E94  EC89  F027         	call	_putsUSART	;wreg free
 18574                           
 18575                           ;main.c: 2259: putsUSART((char *) "\r\n");
 18576  002E98  0E74               	movlw	high (STR_189+50)
 18577  002E9A  0100               	movlb	0	; () banked
 18578  002E9C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18579  002E9E  0EAE               	movlw	low (STR_189+50)
 18580  002EA0  6F61               	movwf	?_putsUSART& (0+255),b
 18581  002EA2  EC89  F027         	call	_putsUSART	;wreg free
 18582                           
 18583                           ;main.c: 2261: putsUSART((char *) "Received CAN bytes: ");
 18584  002EA6  0E7D               	movlw	high STR_164
 18585  002EA8  0100               	movlb	0	; () banked
 18586  002EAA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18587  002EAC  0E32               	movlw	low STR_164
 18588  002EAE  6F61               	movwf	?_putsUSART& (0+255),b
 18589  002EB0  EC89  F027         	call	_putsUSART	;wreg free
 18590                           
 18591                           ;main.c: 2262: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes);
 18592  002EB4  0101               	movlb	1	; () banked
 18593  002EB6  6700               	tstfsz	_bHex& (0+255),b
 18594  002EB8  D005               	goto	l10967
 18595                           
 18596                           ; BSR set to: 1
 18597  002EBA  0E7F               	movlw	high STR_154
 18598  002EBC  0100               	movlb	0	; () banked
 18599  002EBE  6F9B               	movwf	(_printStatistics$1401+1)& (0+255),b
 18600  002EC0  0EE1               	movlw	low STR_154
 18601  002EC2  D004               	goto	L24
 18602  002EC4                     l10967:
 18603                           
 18604                           ; BSR set to: 1
 18605  002EC4  0E7F               	movlw	high STR_153
 18606  002EC6  0100               	movlb	0	; () banked
 18607  002EC8  6F9B               	movwf	(_printStatistics$1401+1)& (0+255),b
 18608  002ECA  0E73               	movlw	low STR_153
 18609  002ECC                     L24:
 18610  002ECC  6F9A               	movwf	_printStatistics$1401& (0+255),b
 18611                           
 18612                           ; BSR set to: 0
 18613  002ECE  0E01               	movlw	high _wrkbuf
 18614  002ED0  0100               	movlb	0	; () banked
 18615  002ED2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18616  002ED4  0E54               	movlw	low _wrkbuf
 18617  002ED6  6F76               	movwf	?_sprintf& (0+255),b
 18618  002ED8  C09A  F078         	movff	_printStatistics$1401,?_sprintf+2
 18619  002EDC  C09B  F079         	movff	_printStatistics$1401+1,?_sprintf+3
 18620  002EE0  C0D9  F07A         	movff	_cntRxBytes,?_sprintf+4
 18621  002EE4  C0DA  F07B         	movff	_cntRxBytes+1,?_sprintf+5
 18622  002EE8  C0DB  F07C         	movff	_cntRxBytes+2,?_sprintf+6
 18623  002EEC  C0DC  F07D         	movff	_cntRxBytes+3,?_sprintf+7
 18624  002EF0  ECE8  F00A         	call	_sprintf	;wreg free
 18625                           
 18626                           ; BSR set to: 0
 18627                           ;main.c: 2263: putsUSART(wrkbuf);
 18628  002EF4  0E01               	movlw	high _wrkbuf
 18629  002EF6  0100               	movlb	0	; () banked
 18630  002EF8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18631  002EFA  0E54               	movlw	low _wrkbuf
 18632  002EFC  6F61               	movwf	?_putsUSART& (0+255),b
 18633  002EFE  EC89  F027         	call	_putsUSART	;wreg free
 18634                           
 18635                           ;main.c: 2264: putsUSART((char *) "\r\n");
 18636  002F02  0E74               	movlw	high (STR_189+50)
 18637  002F04  0100               	movlb	0	; () banked
 18638  002F06  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18639  002F08  0EAE               	movlw	low (STR_189+50)
 18640  002F0A  6F61               	movwf	?_putsUSART& (0+255),b
 18641  002F0C  EF89  F027         	goto	_putsUSART	;wreg free
 18642  002F10                     __end_of_printStatistics:
 18643                           	opt stack 0
 18644                           tblptru	equ	0xFF8
 18645                           tblptrh	equ	0xFF7
 18646                           tblptrl	equ	0xFF6
 18647                           tablat	equ	0xFF5
 18648                           prodh	equ	0xFF4
 18649                           prodl	equ	0xFF3
 18650                           intcon	equ	0xFF2
 18651                           indf0	equ	0xFEF
 18652                           postinc0	equ	0xFEE
 18653                           fsr0h	equ	0xFEA
 18654                           fsr0l	equ	0xFE9
 18655                           wreg	equ	0xFE8
 18656                           indf1	equ	0xFE7
 18657                           postinc1	equ	0xFE6
 18658                           postdec1	equ	0xFE5
 18659                           fsr1h	equ	0xFE2
 18660                           fsr1l	equ	0xFE1
 18661                           indf2	equ	0xFDF
 18662                           postinc2	equ	0xFDE
 18663                           postdec2	equ	0xFDD
 18664                           plusw2	equ	0xFDB
 18665                           fsr2h	equ	0xFDA
 18666                           fsr2l	equ	0xFD9
 18667                           status	equ	0xFD8
 18668                           
 18669 ;; *************** function _atoi *****************
 18670 ;; Defined at:
 18671 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 18672 ;; Parameters:    Size  Location     Type
 18673 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 18674 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 18675 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 18676 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 18677 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 18678 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 18679 ;;		 -> STR_30(2), NULL(0), STR_29(2), cmdbuf(80), 
 18680 ;; Auto vars:     Size  Location     Type
 18681 ;;  a               2   11[BANK0 ] int 
 18682 ;;  sign            1   10[BANK0 ] unsigned char 
 18683 ;; Return value:  Size  Location     Type
 18684 ;;                  2    6[BANK0 ] int 
 18685 ;; Registers used:
 18686 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18687 ;; Tracked objects:
 18688 ;;		On entry : C/2
 18689 ;;		On exit  : F/0
 18690 ;;		Unchanged: 0/0
 18691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18692 ;;      Params:         0       2       0       0       0       0       0
 18693 ;;      Locals:         0       3       0       0       0       0       0
 18694 ;;      Temps:          0       2       0       0       0       0       0
 18695 ;;      Totals:         0       7       0       0       0       0       0
 18696 ;;Total ram usage:        7 bytes
 18697 ;; Hardware stack levels used:    1
 18698 ;; Hardware stack levels required when called:    4
 18699 ;; This function calls:
 18700 ;;		_isdigit
 18701 ;;		___wmul
 18702 ;; This function is called by:
 18703 ;;		_doModeVerbose
 18704 ;; This function uses a non-reentrant model
 18705 ;;
 18706                           
 18707                           	psect	text40
 18708  0038D4                     __ptext40:
 18709                           	opt stack 0
 18710  0038D4                     _atoi:
 18711                           	opt stack 25
 18712                           
 18713                           ;incstack = 0
 18714                           ;incstack = 0
 18715  0038D4  D003               	goto	l10877
 18716  0038D6                     l10875:
 18717  0038D6  0100               	movlb	0	; () banked
 18718  0038D8  4B66               	infsnz	atoi@s& (0+255),f,b
 18719  0038DA  2B67               	incf	(atoi@s+1)& (0+255),f,b
 18720  0038DC                     l10877:
 18721  0038DC  0100               	movlb	0	; () banked
 18722  0038DE  D876               	call	PL22	;call to abstracted procedure
 18723  0038E0  64EA               	cpfsgt	fsr0h,c
 18724  0038E2  D003               	bra	u13527
 18725  0038E4  6EEA               	movwf	fsr0h,c
 18726  0038E6  50EF               	movf	indf0,w,c
 18727  0038E8  D003               	bra	u13520
 18728  0038EA                     u13527:
 18729  0038EA  6EF7               	movwf	tblptrh,c
 18730  0038EC  0008               	tblrd		*
 18731  0038EE  50F5               	movf	tablat,w,c
 18732  0038F0                     u13520:
 18733  0038F0  0A20               	xorlw	32
 18734  0038F2  E0F1               	bz	l10875
 18735  0038F4  0100               	movlb	0	; () banked
 18736  0038F6  D86A               	call	PL22	;call to abstracted procedure
 18737  0038F8  64EA               	cpfsgt	fsr0h,c
 18738  0038FA  D003               	bra	u13547
 18739  0038FC  6EEA               	movwf	fsr0h,c
 18740  0038FE  50EF               	movf	indf0,w,c
 18741  003900  D003               	bra	u13540
 18742  003902                     u13547:
 18743  003902  6EF7               	movwf	tblptrh,c
 18744  003904  0008               	tblrd		*
 18745  003906  50F5               	movf	tablat,w,c
 18746  003908                     u13540:
 18747  003908  0A09               	xorlw	9
 18748  00390A  E0E5               	bz	l10875
 18749  00390C  0100               	movlb	0	; () banked
 18750  00390E  6B6B               	clrf	atoi@a& (0+255),b
 18751  003910  6B6C               	clrf	(atoi@a+1)& (0+255),b
 18752  003912  6B6A               	clrf	atoi@sign& (0+255),b
 18753                           
 18754                           ; BSR set to: 0
 18755  003914  D85B               	call	PL22	;call to abstracted procedure
 18756  003916  64EA               	cpfsgt	fsr0h,c
 18757  003918  D003               	bra	u13567
 18758  00391A  6EEA               	movwf	fsr0h,c
 18759  00391C  50EF               	movf	indf0,w,c
 18760  00391E  D003               	bra	u13560
 18761  003920                     u13567:
 18762  003920  6EF7               	movwf	tblptrh,c
 18763  003922  0008               	tblrd		*
 18764  003924  50F5               	movf	tablat,w,c
 18765  003926                     u13560:
 18766  003926  0A2D               	xorlw	45
 18767  003928  E103               	bnz	l10885
 18768  00392A  0100               	movlb	0	; () banked
 18769  00392C  2B6A               	incf	atoi@sign& (0+255),f,b
 18770  00392E  D00D               	goto	L25
 18771  003930                     l10885:
 18772  003930  0100               	movlb	0	; () banked
 18773  003932  D84C               	call	PL22	;call to abstracted procedure
 18774  003934  64EA               	cpfsgt	fsr0h,c
 18775  003936  D003               	bra	u13587
 18776  003938  6EEA               	movwf	fsr0h,c
 18777  00393A  50EF               	movf	indf0,w,c
 18778  00393C  D003               	bra	u13580
 18779  00393E                     u13587:
 18780  00393E  6EF7               	movwf	tblptrh,c
 18781  003940  0008               	tblrd		*
 18782  003942  50F5               	movf	tablat,w,c
 18783  003944                     u13580:
 18784  003944  0A2B               	xorlw	43
 18785  003946  E121               	bnz	l10893
 18786  003948                     l10887:
 18787  003948  0100               	movlb	0	; () banked
 18788  00394A                     L25:
 18789  00394A  4B66               	infsnz	atoi@s& (0+255),f,b
 18790  00394C  2B67               	incf	(atoi@s+1)& (0+255),f,b
 18791  00394E  D01D               	goto	l10893
 18792  003950                     l10889:
 18793                           
 18794                           ; BSR set to: 0
 18795  003950  C06B  F060         	movff	atoi@a,?___wmul
 18796  003954  C06C  F061         	movff	atoi@a+1,?___wmul+1
 18797  003958  6B63               	clrf	(?___wmul+3)& (0+255),b
 18798  00395A  0E0A               	movlw	10
 18799  00395C  6F62               	movwf	(?___wmul+2)& (0+255),b
 18800  00395E  EC9E  F029         	call	___wmul	;wreg free
 18801  003962  D834               	call	PL22	;call to abstracted procedure
 18802  003964  64EA               	cpfsgt	fsr0h,c
 18803  003966  D003               	bra	u13607
 18804  003968  6EEA               	movwf	fsr0h,c
 18805  00396A  50EF               	movf	indf0,w,c
 18806  00396C  D003               	bra	u13600
 18807  00396E                     u13607:
 18808  00396E  6EF7               	movwf	tblptrh,c
 18809  003970  0008               	tblrd		*
 18810  003972  50F5               	movf	tablat,w,c
 18811  003974                     u13600:
 18812  003974  0100               	movlb	0	; () banked
 18813  003976  2760               	addwf	?___wmul& (0+255),f,b
 18814  003978  0E00               	movlw	0
 18815  00397A  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 18816  00397C  0ED0               	movlw	208
 18817  00397E  2560               	addwf	?___wmul& (0+255),w,b
 18818  003980  6F6B               	movwf	atoi@a& (0+255),b
 18819  003982  0EFF               	movlw	255
 18820  003984  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 18821  003986  6F6C               	movwf	(atoi@a+1)& (0+255),b
 18822  003988  D7DF               	goto	l10887
 18823  00398A                     l10893:
 18824  00398A  0100               	movlb	0	; () banked
 18825  00398C  D81F               	call	PL22	;call to abstracted procedure
 18826  00398E  64EA               	cpfsgt	fsr0h,c
 18827  003990  D003               	bra	u13617
 18828  003992  6EEA               	movwf	fsr0h,c
 18829  003994  50EF               	movf	indf0,w,c
 18830  003996  D003               	bra	u13610
 18831  003998                     u13617:
 18832  003998  6EF7               	movwf	tblptrh,c
 18833  00399A  0008               	tblrd		*
 18834  00399C  50F5               	movf	tablat,w,c
 18835  00399E                     u13610:
 18836  00399E  EC10  F02A         	call	_isdigit
 18837  0039A2  E2D6               	bc	l10889
 18838                           
 18839                           ; BSR set to: 0
 18840  0039A4  516A               	movf	atoi@sign& (0+255),w,b
 18841  0039A6  E00D               	bz	l1939
 18842                           
 18843                           ; BSR set to: 0
 18844  0039A8  C06B  F068         	movff	atoi@a,??_atoi
 18845  0039AC  C06C  F069         	movff	atoi@a+1,??_atoi+1
 18846  0039B0  1F68               	comf	??_atoi& (0+255),f,b
 18847  0039B2  1F69               	comf	(??_atoi+1)& (0+255),f,b
 18848  0039B4  4B68               	infsnz	??_atoi& (0+255),f,b
 18849  0039B6  2B69               	incf	(??_atoi+1)& (0+255),f,b
 18850  0039B8  C068  F066         	movff	??_atoi,?_atoi
 18851  0039BC  C069  F067         	movff	??_atoi+1,?_atoi+1
 18852  0039C0  D004               	goto	l1940
 18853  0039C2                     l1939:
 18854                           
 18855                           ; BSR set to: 0
 18856  0039C2  C06B  F066         	movff	atoi@a,?_atoi
 18857  0039C6  C06C  F067         	movff	atoi@a+1,?_atoi+1
 18858  0039CA                     l1940:
 18859                           
 18860                           ; BSR set to: 0
 18861  0039CA  0012               	return	
 18862  0039CC                     __end_of_atoi:
 18863                           	opt stack 0
 18864  0039CC                     PL22:
 18865                           	opt stack 25
 18866  0039CC  5166               	movf	atoi@s& (0+255),w,b
 18867  0039CE  6EF6               	movwf	tblptrl,c
 18868  0039D0  6EE9               	movwf	fsr0l,c
 18869  0039D2  0E05               	movlw	(high __ramtop+-1)
 18870  0039D4  6EEA               	movwf	fsr0h,c
 18871  0039D6  5167               	movf	(atoi@s+1)& (0+255),w,b
 18872  0039D8  0012               	return	
 18873  0039DA                     __end_ofPL22:
 18874                           	opt stack 0
 18875                           tblptru	equ	0xFF8
 18876                           tblptrh	equ	0xFF7
 18877                           tblptrl	equ	0xFF6
 18878                           tablat	equ	0xFF5
 18879                           prodh	equ	0xFF4
 18880                           prodl	equ	0xFF3
 18881                           intcon	equ	0xFF2
 18882                           indf0	equ	0xFEF
 18883                           postinc0	equ	0xFEE
 18884                           fsr0h	equ	0xFEA
 18885                           fsr0l	equ	0xFE9
 18886                           wreg	equ	0xFE8
 18887                           indf1	equ	0xFE7
 18888                           postinc1	equ	0xFE6
 18889                           postdec1	equ	0xFE5
 18890                           fsr1h	equ	0xFE2
 18891                           fsr1l	equ	0xFE1
 18892                           indf2	equ	0xFDF
 18893                           postinc2	equ	0xFDE
 18894                           postdec2	equ	0xFDD
 18895                           plusw2	equ	0xFDB
 18896                           fsr2h	equ	0xFDA
 18897                           fsr2l	equ	0xFD9
 18898                           status	equ	0xFD8
 18899                           
 18900 ;; *************** function _strtok *****************
 18901 ;; Defined at:
 18902 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 18903 ;; Parameters:    Size  Location     Type
 18904 ;;  s1              2   12[BANK0 ] PTR unsigned char 
 18905 ;;		 -> NULL(0), cmdbuf(80), 
 18906 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
 18907 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 18908 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 18909 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 18910 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 18911 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 18912 ;;		 -> STR_30(2), STR_29(2), 
 18913 ;; Auto vars:     Size  Location     Type
 18914 ;;		None
 18915 ;; Return value:  Size  Location     Type
 18916 ;;                  2   12[BANK0 ] PTR unsigned char 
 18917 ;; Registers used:
 18918 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18919 ;; Tracked objects:
 18920 ;;		On entry : F/0
 18921 ;;		On exit  : F/0
 18922 ;;		Unchanged: 0/0
 18923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18924 ;;      Params:         0       4       0       0       0       0       0
 18925 ;;      Locals:         0       0       0       0       0       0       0
 18926 ;;      Temps:          0       0       0       0       0       0       0
 18927 ;;      Totals:         0       4       0       0       0       0       0
 18928 ;;Total ram usage:        4 bytes
 18929 ;; Hardware stack levels used:    1
 18930 ;; Hardware stack levels required when called:    5
 18931 ;; This function calls:
 18932 ;;		_strspn
 18933 ;;		_strcspn
 18934 ;; This function is called by:
 18935 ;;		_doModeVerbose
 18936 ;; This function uses a non-reentrant model
 18937 ;;
 18938                           
 18939                           	psect	text41
 18940  0046F2                     __ptext41:
 18941                           	opt stack 0
 18942  0046F2                     _strtok:
 18943                           	opt stack 24
 18944                           
 18945                           ; BSR set to: 0
 18946                           
 18947                           ; BSR set to: 0
 18948                           ;incstack = 0
 18949                           ;incstack = 0
 18950  0046F2  516D               	movf	(strtok@s1+1)& (0+255),w,b
 18951  0046F4  116C               	iorwf	strtok@s1& (0+255),w,b
 18952  0046F6  E104               	bnz	l10855
 18953                           
 18954                           ; BSR set to: 0
 18955  0046F8  C031  F06C         	movff	strtok@sp,strtok@s1
 18956  0046FC  C032  F06D         	movff	strtok@sp+1,strtok@s1+1
 18957  004700                     l10855:
 18958                           
 18959                           ; BSR set to: 0
 18960  004700  516D               	movf	(strtok@s1+1)& (0+255),w,b
 18961  004702  116C               	iorwf	strtok@s1& (0+255),w,b
 18962  004704  E016               	bz	L26
 18963                           
 18964                           ; BSR set to: 0
 18965                           
 18966                           ; BSR set to: 0
 18967  004706  C06C  F066         	movff	strtok@s1,?_strspn
 18968  00470A  C06D  F067         	movff	strtok@s1+1,?_strspn+1
 18969  00470E  C06E  F068         	movff	strtok@s2,?_strspn+2
 18970  004712  C06F  F069         	movff	strtok@s2+1,?_strspn+3
 18971  004716  EC6B  F028         	call	_strspn	;wreg free
 18972  00471A  5166               	movf	?_strspn& (0+255),w,b
 18973  00471C  276C               	addwf	strtok@s1& (0+255),f,b
 18974  00471E  5167               	movf	(?_strspn+1)& (0+255),w,b
 18975  004720  236D               	addwfc	(strtok@s1+1)& (0+255),f,b
 18976                           
 18977                           ; BSR set to: 0
 18978  004722  C06C  FFD9         	movff	strtok@s1,fsr2l
 18979  004726  C06D  FFDA         	movff	strtok@s1+1,fsr2h
 18980  00472A  50DF               	movf	indf2,w,c
 18981  00472C  E105               	bnz	l10865
 18982                           
 18983                           ; BSR set to: 0
 18984  00472E  6A31               	clrf	strtok@sp,c
 18985  004730  6A32               	clrf	strtok@sp+1,c
 18986  004732                     L26:
 18987  004732  6B6C               	clrf	?_strtok& (0+255),b
 18988  004734  6B6D               	clrf	(?_strtok+1)& (0+255),b
 18989  004736  D025               	goto	l2432
 18990  004738                     l10865:
 18991                           
 18992                           ; BSR set to: 0
 18993  004738  C06C  F066         	movff	strtok@s1,?_strcspn
 18994  00473C  C06D  F067         	movff	strtok@s1+1,?_strcspn+1
 18995  004740  C06E  F068         	movff	strtok@s2,?_strcspn+2
 18996  004744  C06F  F069         	movff	strtok@s2+1,?_strcspn+3
 18997  004748  EC49  F028         	call	_strcspn	;wreg free
 18998  00474C  5166               	movf	?_strcspn& (0+255),w,b
 18999  00474E  256C               	addwf	strtok@s1& (0+255),w,b
 19000  004750  6E31               	movwf	strtok@sp,c
 19001  004752  5167               	movf	(?_strcspn+1)& (0+255),w,b
 19002  004754  216D               	addwfc	(strtok@s1+1)& (0+255),w,b
 19003  004756  6E32               	movwf	strtok@sp+1,c
 19004                           
 19005                           ; BSR set to: 0
 19006  004758  C031  FFD9         	movff	strtok@sp,fsr2l
 19007  00475C  C032  FFDA         	movff	strtok@sp+1,fsr2h
 19008  004760  50DF               	movf	indf2,w,c
 19009  004762  E009               	bz	l2434
 19010                           
 19011                           ; BSR set to: 0
 19012  004764  C031  FFD9         	movff	strtok@sp,fsr2l
 19013  004768  C032  FFDA         	movff	strtok@sp+1,fsr2h
 19014  00476C  0E00               	movlw	0
 19015  00476E  6EDF               	movwf	indf2,c
 19016                           
 19017                           ; BSR set to: 0
 19018  004770  4A31               	infsnz	strtok@sp,f,c
 19019  004772  2A32               	incf	strtok@sp+1,f,c
 19020  004774  D002               	goto	l2435
 19021  004776                     l2434:
 19022                           
 19023                           ; BSR set to: 0
 19024  004776  6A31               	clrf	strtok@sp,c
 19025  004778  6A32               	clrf	strtok@sp+1,c
 19026  00477A                     l2435:
 19027                           
 19028                           ; BSR set to: 0
 19029  00477A  C06C  F06C         	movff	strtok@s1,?_strtok
 19030  00477E  C06D  F06D         	movff	strtok@s1+1,?_strtok+1
 19031  004782                     l2432:
 19032                           
 19033                           ; BSR set to: 0
 19034  004782  0012               	return	
 19035  004784                     __end_of_strtok:
 19036                           	opt stack 0
 19037                           tblptru	equ	0xFF8
 19038                           tblptrh	equ	0xFF7
 19039                           tblptrl	equ	0xFF6
 19040                           tablat	equ	0xFF5
 19041                           prodh	equ	0xFF4
 19042                           prodl	equ	0xFF3
 19043                           intcon	equ	0xFF2
 19044                           indf0	equ	0xFEF
 19045                           postinc0	equ	0xFEE
 19046                           fsr0h	equ	0xFEA
 19047                           fsr0l	equ	0xFE9
 19048                           wreg	equ	0xFE8
 19049                           indf1	equ	0xFE7
 19050                           postinc1	equ	0xFE6
 19051                           postdec1	equ	0xFE5
 19052                           fsr1h	equ	0xFE2
 19053                           fsr1l	equ	0xFE1
 19054                           indf2	equ	0xFDF
 19055                           postinc2	equ	0xFDE
 19056                           postdec2	equ	0xFDD
 19057                           plusw2	equ	0xFDB
 19058                           fsr2h	equ	0xFDA
 19059                           fsr2l	equ	0xFD9
 19060                           status	equ	0xFD8
 19061                           
 19062 ;; *************** function _strcspn *****************
 19063 ;; Defined at:
 19064 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 19065 ;; Parameters:    Size  Location     Type
 19066 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19067 ;;		 -> NULL(0), cmdbuf(80), 
 19068 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19069 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 19070 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 19071 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 19072 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 19073 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 19074 ;;		 -> STR_30(2), STR_29(2), 
 19075 ;; Auto vars:     Size  Location     Type
 19076 ;;  i               2   10[BANK0 ] unsigned int 
 19077 ;; Return value:  Size  Location     Type
 19078 ;;                  2    6[BANK0 ] unsigned int 
 19079 ;; Registers used:
 19080 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19081 ;; Tracked objects:
 19082 ;;		On entry : F/0
 19083 ;;		On exit  : F/0
 19084 ;;		Unchanged: 0/0
 19085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19086 ;;      Params:         0       4       0       0       0       0       0
 19087 ;;      Locals:         0       2       0       0       0       0       0
 19088 ;;      Temps:          0       0       0       0       0       0       0
 19089 ;;      Totals:         0       6       0       0       0       0       0
 19090 ;;Total ram usage:        6 bytes
 19091 ;; Hardware stack levels used:    1
 19092 ;; Hardware stack levels required when called:    4
 19093 ;; This function calls:
 19094 ;;		_strchr
 19095 ;; This function is called by:
 19096 ;;		_strtok
 19097 ;; This function uses a non-reentrant model
 19098 ;;
 19099                           
 19100                           	psect	text42
 19101  005092                     __ptext42:
 19102                           	opt stack 0
 19103  005092                     _strcspn:
 19104                           	opt stack 24
 19105                           
 19106                           ; BSR set to: 0
 19107                           
 19108                           ; BSR set to: 0
 19109                           ;incstack = 0
 19110                           ;incstack = 0
 19111  005092  6B6A               	clrf	strcspn@i& (0+255),b
 19112  005094  6B6B               	clrf	(strcspn@i+1)& (0+255),b
 19113  005096  D004               	goto	l12451
 19114  005098                     l12449:
 19115                           
 19116                           ; BSR set to: 0
 19117  005098  4B66               	infsnz	strcspn@s1& (0+255),f,b
 19118  00509A  2B67               	incf	(strcspn@s1+1)& (0+255),f,b
 19119  00509C  4B6A               	infsnz	strcspn@i& (0+255),f,b
 19120  00509E  2B6B               	incf	(strcspn@i+1)& (0+255),f,b
 19121  0050A0                     l12451:
 19122                           
 19123                           ; BSR set to: 0
 19124  0050A0  C066  FFD9         	movff	strcspn@s1,fsr2l
 19125  0050A4  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 19126  0050A8  50DF               	movf	indf2,w,c
 19127  0050AA  E010               	bz	l2459
 19128                           
 19129                           ; BSR set to: 0
 19130  0050AC  C068  F060         	movff	strcspn@s2,?_strchr
 19131  0050B0  C069  F061         	movff	strcspn@s2+1,?_strchr+1
 19132  0050B4  C066  FFD9         	movff	strcspn@s1,fsr2l
 19133  0050B8  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 19134  0050BC  50DF               	movf	indf2,w,c
 19135  0050BE  6F62               	movwf	(?_strchr+2)& (0+255),b
 19136  0050C0  6B63               	clrf	(?_strchr+3)& (0+255),b
 19137  0050C2  ECCD  F026         	call	_strchr	;wreg free
 19138  0050C6  5161               	movf	(?_strchr+1)& (0+255),w,b
 19139  0050C8  1160               	iorwf	?_strchr& (0+255),w,b
 19140  0050CA  E0E6               	bz	l12449
 19141  0050CC                     l2459:
 19142                           
 19143                           ; BSR set to: 0
 19144  0050CC  C06A  F066         	movff	strcspn@i,?_strcspn
 19145  0050D0  C06B  F067         	movff	strcspn@i+1,?_strcspn+1
 19146                           
 19147                           ; BSR set to: 0
 19148  0050D4  0012               	return	
 19149  0050D6                     __end_of_strcspn:
 19150                           	opt stack 0
 19151                           tblptru	equ	0xFF8
 19152                           tblptrh	equ	0xFF7
 19153                           tblptrl	equ	0xFF6
 19154                           tablat	equ	0xFF5
 19155                           prodh	equ	0xFF4
 19156                           prodl	equ	0xFF3
 19157                           intcon	equ	0xFF2
 19158                           indf0	equ	0xFEF
 19159                           postinc0	equ	0xFEE
 19160                           fsr0h	equ	0xFEA
 19161                           fsr0l	equ	0xFE9
 19162                           wreg	equ	0xFE8
 19163                           indf1	equ	0xFE7
 19164                           postinc1	equ	0xFE6
 19165                           postdec1	equ	0xFE5
 19166                           fsr1h	equ	0xFE2
 19167                           fsr1l	equ	0xFE1
 19168                           indf2	equ	0xFDF
 19169                           postinc2	equ	0xFDE
 19170                           postdec2	equ	0xFDD
 19171                           plusw2	equ	0xFDB
 19172                           fsr2h	equ	0xFDA
 19173                           fsr2l	equ	0xFD9
 19174                           status	equ	0xFD8
 19175                           
 19176 ;; *************** function _strspn *****************
 19177 ;; Defined at:
 19178 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 19179 ;; Parameters:    Size  Location     Type
 19180 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19181 ;;		 -> NULL(0), cmdbuf(80), 
 19182 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19183 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 19184 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 19185 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 19186 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 19187 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 19188 ;;		 -> STR_30(2), STR_29(2), 
 19189 ;; Auto vars:     Size  Location     Type
 19190 ;;  i               2   10[BANK0 ] unsigned int 
 19191 ;; Return value:  Size  Location     Type
 19192 ;;                  2    6[BANK0 ] unsigned int 
 19193 ;; Registers used:
 19194 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19195 ;; Tracked objects:
 19196 ;;		On entry : F/0
 19197 ;;		On exit  : F/0
 19198 ;;		Unchanged: 0/0
 19199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19200 ;;      Params:         0       4       0       0       0       0       0
 19201 ;;      Locals:         0       2       0       0       0       0       0
 19202 ;;      Temps:          0       0       0       0       0       0       0
 19203 ;;      Totals:         0       6       0       0       0       0       0
 19204 ;;Total ram usage:        6 bytes
 19205 ;; Hardware stack levels used:    1
 19206 ;; Hardware stack levels required when called:    4
 19207 ;; This function calls:
 19208 ;;		_strchr
 19209 ;; This function is called by:
 19210 ;;		_strtok
 19211 ;; This function uses a non-reentrant model
 19212 ;;
 19213                           
 19214                           	psect	text43
 19215  0050D6                     __ptext43:
 19216                           	opt stack 0
 19217  0050D6                     _strspn:
 19218                           	opt stack 24
 19219                           
 19220                           ; BSR set to: 0
 19221                           
 19222                           ; BSR set to: 0
 19223                           ;incstack = 0
 19224                           ;incstack = 0
 19225  0050D6  6B6A               	clrf	strspn@i& (0+255),b
 19226  0050D8  6B6B               	clrf	(strspn@i+1)& (0+255),b
 19227  0050DA  D004               	goto	l12443
 19228  0050DC                     l12441:
 19229                           
 19230                           ; BSR set to: 0
 19231  0050DC  4B66               	infsnz	strspn@s1& (0+255),f,b
 19232  0050DE  2B67               	incf	(strspn@s1+1)& (0+255),f,b
 19233  0050E0  4B6A               	infsnz	strspn@i& (0+255),f,b
 19234  0050E2  2B6B               	incf	(strspn@i+1)& (0+255),f,b
 19235  0050E4                     l12443:
 19236                           
 19237                           ; BSR set to: 0
 19238  0050E4  C066  FFD9         	movff	strspn@s1,fsr2l
 19239  0050E8  C067  FFDA         	movff	strspn@s1+1,fsr2h
 19240  0050EC  50DF               	movf	indf2,w,c
 19241  0050EE  E010               	bz	l2478
 19242                           
 19243                           ; BSR set to: 0
 19244  0050F0  C068  F060         	movff	strspn@s2,?_strchr
 19245  0050F4  C069  F061         	movff	strspn@s2+1,?_strchr+1
 19246  0050F8  C066  FFD9         	movff	strspn@s1,fsr2l
 19247  0050FC  C067  FFDA         	movff	strspn@s1+1,fsr2h
 19248  005100  50DF               	movf	indf2,w,c
 19249  005102  6F62               	movwf	(?_strchr+2)& (0+255),b
 19250  005104  6B63               	clrf	(?_strchr+3)& (0+255),b
 19251  005106  ECCD  F026         	call	_strchr	;wreg free
 19252  00510A  5161               	movf	(?_strchr+1)& (0+255),w,b
 19253  00510C  1160               	iorwf	?_strchr& (0+255),w,b
 19254  00510E  E1E6               	bnz	l12441
 19255  005110                     l2478:
 19256                           
 19257                           ; BSR set to: 0
 19258  005110  C06A  F066         	movff	strspn@i,?_strspn
 19259  005114  C06B  F067         	movff	strspn@i+1,?_strspn+1
 19260                           
 19261                           ; BSR set to: 0
 19262  005118  0012               	return	
 19263  00511A                     __end_of_strspn:
 19264                           	opt stack 0
 19265                           tblptru	equ	0xFF8
 19266                           tblptrh	equ	0xFF7
 19267                           tblptrl	equ	0xFF6
 19268                           tablat	equ	0xFF5
 19269                           prodh	equ	0xFF4
 19270                           prodl	equ	0xFF3
 19271                           intcon	equ	0xFF2
 19272                           indf0	equ	0xFEF
 19273                           postinc0	equ	0xFEE
 19274                           fsr0h	equ	0xFEA
 19275                           fsr0l	equ	0xFE9
 19276                           wreg	equ	0xFE8
 19277                           indf1	equ	0xFE7
 19278                           postinc1	equ	0xFE6
 19279                           postdec1	equ	0xFE5
 19280                           fsr1h	equ	0xFE2
 19281                           fsr1l	equ	0xFE1
 19282                           indf2	equ	0xFDF
 19283                           postinc2	equ	0xFDE
 19284                           postdec2	equ	0xFDD
 19285                           plusw2	equ	0xFDB
 19286                           fsr2h	equ	0xFDA
 19287                           fsr2l	equ	0xFD9
 19288                           status	equ	0xFD8
 19289                           
 19290 ;; *************** function _strchr *****************
 19291 ;; Defined at:
 19292 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 19293 ;; Parameters:    Size  Location     Type
 19294 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 19295 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 19296 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 19297 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 19298 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 19299 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 19300 ;;		 -> STR_30(2), NULL(0), STR_29(2), cmdbuf(80), 
 19301 ;;  chr             2    2[BANK0 ] int 
 19302 ;; Auto vars:     Size  Location     Type
 19303 ;;		None
 19304 ;; Return value:  Size  Location     Type
 19305 ;;                  2    0[BANK0 ] PTR unsigned char 
 19306 ;; Registers used:
 19307 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 19308 ;; Tracked objects:
 19309 ;;		On entry : F/0
 19310 ;;		On exit  : F/0
 19311 ;;		Unchanged: 0/0
 19312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19313 ;;      Params:         0       4       0       0       0       0       0
 19314 ;;      Locals:         0       0       0       0       0       0       0
 19315 ;;      Temps:          0       2       0       0       0       0       0
 19316 ;;      Totals:         0       6       0       0       0       0       0
 19317 ;;Total ram usage:        6 bytes
 19318 ;; Hardware stack levels used:    1
 19319 ;; Hardware stack levels required when called:    3
 19320 ;; This function calls:
 19321 ;;		Nothing
 19322 ;; This function is called by:
 19323 ;;		_doModeVerbose
 19324 ;;		_strcspn
 19325 ;;		_strspn
 19326 ;; This function uses a non-reentrant model
 19327 ;;
 19328                           
 19329                           	psect	text44
 19330  004D9A                     __ptext44:
 19331                           	opt stack 0
 19332  004D9A                     _strchr:
 19333                           	opt stack 26
 19334  004D9A                     l2380:
 19335                           
 19336                           ; BSR set to: 0
 19337  004D9A  0100               	movlb	0	; () banked
 19338  004D9C  5160               	movf	strchr@ptr& (0+255),w,b
 19339  004D9E  6EF6               	movwf	tblptrl,c
 19340  004DA0  6EE9               	movwf	fsr0l,c
 19341  004DA2  0E05               	movlw	(high __ramtop+-1)
 19342  004DA4  6EEA               	movwf	fsr0h,c
 19343  004DA6  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 19344  004DA8  64EA               	cpfsgt	fsr0h,c
 19345  004DAA  D003               	bra	u13877
 19346  004DAC  6EEA               	movwf	fsr0h,c
 19347  004DAE  50EF               	movf	indf0,w,c
 19348  004DB0  D003               	bra	u13870
 19349  004DB2                     u13877:
 19350  004DB2  6EF7               	movwf	tblptrh,c
 19351  004DB4  0008               	tblrd		*
 19352  004DB6  50F5               	movf	tablat,w,c
 19353  004DB8                     u13870:
 19354  004DB8  0100               	movlb	0	; () banked
 19355  004DBA  1962               	xorwf	strchr@chr& (0+255),w,b
 19356  004DBC  E105               	bnz	l11139
 19357                           
 19358                           ; BSR set to: 0
 19359  004DBE  C060  F060         	movff	strchr@ptr,?_strchr
 19360  004DC2  C061  F061         	movff	strchr@ptr+1,?_strchr+1
 19361  004DC6  D019               	goto	l2382
 19362  004DC8                     l11139:
 19363                           
 19364                           ; BSR set to: 0
 19365  004DC8  5160               	movf	strchr@ptr& (0+255),w,b
 19366  004DCA  6F64               	movwf	??_strchr& (0+255),b
 19367  004DCC  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 19368  004DCE  6F65               	movwf	(??_strchr+1)& (0+255),b
 19369  004DD0  4B60               	infsnz	strchr@ptr& (0+255),f,b
 19370  004DD2  2B61               	incf	(strchr@ptr+1)& (0+255),f,b
 19371  004DD4  5164               	movf	??_strchr& (0+255),w,b
 19372  004DD6  6EF6               	movwf	tblptrl,c
 19373  004DD8  6EE9               	movwf	fsr0l,c
 19374  004DDA  0E05               	movlw	(high __ramtop+-1)
 19375  004DDC  6EEA               	movwf	fsr0h,c
 19376  004DDE  5165               	movf	(??_strchr+1)& (0+255),w,b
 19377  004DE0  64EA               	cpfsgt	fsr0h,c
 19378  004DE2  D003               	bra	u13897
 19379  004DE4  6EEA               	movwf	fsr0h,c
 19380  004DE6  50EF               	movf	indf0,w,c
 19381  004DE8  D003               	bra	u13890
 19382  004DEA                     u13897:
 19383  004DEA  6EF7               	movwf	tblptrh,c
 19384  004DEC  0008               	tblrd		*
 19385  004DEE  50F5               	movf	tablat,w,c
 19386  004DF0                     u13890:
 19387  004DF0  0900               	iorlw	0
 19388  004DF2  E1D3               	bnz	l2380
 19389  004DF4  0100               	movlb	0	; () banked
 19390  004DF6  6B60               	clrf	?_strchr& (0+255),b
 19391  004DF8  6B61               	clrf	(?_strchr+1)& (0+255),b
 19392  004DFA                     l2382:
 19393                           
 19394                           ; BSR set to: 0
 19395  004DFA  0012               	return	
 19396  004DFC                     __end_of_strchr:
 19397                           	opt stack 0
 19398                           tblptru	equ	0xFF8
 19399                           tblptrh	equ	0xFF7
 19400                           tblptrl	equ	0xFF6
 19401                           tablat	equ	0xFF5
 19402                           prodh	equ	0xFF4
 19403                           prodl	equ	0xFF3
 19404                           intcon	equ	0xFF2
 19405                           indf0	equ	0xFEF
 19406                           postinc0	equ	0xFEE
 19407                           fsr0h	equ	0xFEA
 19408                           fsr0l	equ	0xFE9
 19409                           wreg	equ	0xFE8
 19410                           indf1	equ	0xFE7
 19411                           postinc1	equ	0xFE6
 19412                           postdec1	equ	0xFE5
 19413                           fsr1h	equ	0xFE2
 19414                           fsr1l	equ	0xFE1
 19415                           indf2	equ	0xFDF
 19416                           postinc2	equ	0xFDE
 19417                           postdec2	equ	0xFDD
 19418                           plusw2	equ	0xFDB
 19419                           fsr2h	equ	0xFDA
 19420                           fsr2l	equ	0xFD9
 19421                           status	equ	0xFD8
 19422                           
 19423 ;; *************** function _stristr *****************
 19424 ;; Defined at:
 19425 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 19426 ;; Parameters:    Size  Location     Type
 19427 ;;  s1              2   13[BANK0 ] PTR const unsigned char 
 19428 ;;		 -> NULL(0), cmdbuf(80), 
 19429 ;;  s2              2   15[BANK0 ] PTR const unsigned char 
 19430 ;;		 -> STR_121(6), STR_120(8), STR_118(6), STR_116(5), 
 19431 ;;		 -> STR_114(8), STR_113(6), STR_112(9), STR_111(11), 
 19432 ;;		 -> STR_109(8), STR_107(4), STR_106(5), STR_94(5), 
 19433 ;;		 -> STR_82(7), STR_77(5), STR_68(5), STR_45(5), 
 19434 ;;		 -> STR_44(5), STR_42(5), STR_41(4), STR_40(5), 
 19435 ;;		 -> STR_37(3), STR_28(3), STR_19(7), STR_17(8), 
 19436 ;;		 -> STR_15(7), STR_13(9), STR_11(6), STR_9(7), 
 19437 ;;		 -> STR_7(5), STR_5(5), 
 19438 ;; Auto vars:     Size  Location     Type
 19439 ;;		None
 19440 ;; Return value:  Size  Location     Type
 19441 ;;                  2   13[BANK0 ] PTR unsigned char 
 19442 ;; Registers used:
 19443 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19444 ;; Tracked objects:
 19445 ;;		On entry : F/0
 19446 ;;		On exit  : F/0
 19447 ;;		Unchanged: 0/0
 19448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19449 ;;      Params:         0       4       0       0       0       0       0
 19450 ;;      Locals:         0       0       0       0       0       0       0
 19451 ;;      Temps:          0       0       0       0       0       0       0
 19452 ;;      Totals:         0       4       0       0       0       0       0
 19453 ;;Total ram usage:        4 bytes
 19454 ;; Hardware stack levels used:    1
 19455 ;; Hardware stack levels required when called:    5
 19456 ;; This function calls:
 19457 ;;		_strlen
 19458 ;;		_strnicmp
 19459 ;;		_strichr
 19460 ;; This function is called by:
 19461 ;;		_doModeVerbose
 19462 ;; This function uses a non-reentrant model
 19463 ;;
 19464                           
 19465                           	psect	text45
 19466  004A1C                     __ptext45:
 19467                           	opt stack 0
 19468  004A1C                     _stristr:
 19469                           	opt stack 24
 19470                           
 19471                           ; BSR set to: 0
 19472                           
 19473                           ; BSR set to: 0
 19474                           ;incstack = 0
 19475                           ;incstack = 0
 19476  004A1C  D02F               	goto	l10843
 19477  004A1E                     l10837:
 19478                           
 19479                           ; BSR set to: 0
 19480  004A1E  C06D  F064         	movff	stristr@s1,?_strnicmp
 19481  004A22  C06E  F065         	movff	stristr@s1+1,?_strnicmp+1
 19482  004A26  C06F  F066         	movff	stristr@s2,?_strnicmp+2
 19483  004A2A  C070  F067         	movff	stristr@s2+1,?_strnicmp+3
 19484  004A2E  C06F  F060         	movff	stristr@s2,?_strlen
 19485  004A32  C070  F061         	movff	stristr@s2+1,?_strlen+1
 19486  004A36  ECAE  F028         	call	_strlen	;wreg free
 19487  004A3A  C060  F068         	movff	?_strlen,?_strnicmp+4
 19488  004A3E  C061  F069         	movff	?_strlen+1,?_strnicmp+5
 19489  004A42  EC69  F026         	call	_strnicmp	;wreg free
 19490  004A46  5165               	movf	(?_strnicmp+1)& (0+255),w,b
 19491  004A48  1164               	iorwf	?_strnicmp& (0+255),w,b
 19492  004A4A  E105               	bnz	l10841
 19493                           
 19494                           ; BSR set to: 0
 19495  004A4C  C06D  F06D         	movff	stristr@s1,?_stristr
 19496  004A50  C06E  F06E         	movff	stristr@s1+1,?_stristr+1
 19497  004A54  D01E               	goto	l2401
 19498  004A56                     l10841:
 19499                           
 19500                           ; BSR set to: 0
 19501  004A56  296D               	incf	stristr@s1& (0+255),w,b
 19502  004A58  6F61               	movwf	?_strichr& (0+255),b
 19503  004A5A  0E00               	movlw	0
 19504  004A5C  216E               	addwfc	(stristr@s1+1)& (0+255),w,b
 19505  004A5E  6F62               	movwf	(?_strichr+1)& (0+255),b
 19506  004A60  C06F  FFF6         	movff	stristr@s2,tblptrl
 19507  004A64  C070  FFF7         	movff	stristr@s2+1,tblptrh
 19508  004A68  0008               	tblrd		*
 19509  004A6A  50F5               	movf	tablat,w,c
 19510  004A6C  6F63               	movwf	(?_strichr+2)& (0+255),b
 19511  004A6E  6B64               	clrf	(?_strichr+3)& (0+255),b
 19512  004A70  EC0D  F029         	call	_strichr	;wreg free
 19513  004A74  C061  F06D         	movff	?_strichr,stristr@s1
 19514  004A78  C062  F06E         	movff	?_strichr+1,stristr@s1+1
 19515  004A7C                     l10843:
 19516                           
 19517                           ; BSR set to: 0
 19518  004A7C  516E               	movf	(stristr@s1+1)& (0+255),w,b
 19519  004A7E  116D               	iorwf	stristr@s1& (0+255),w,b
 19520  004A80  E006               	bz	l2404
 19521                           
 19522                           ; BSR set to: 0
 19523  004A82  C06D  FFD9         	movff	stristr@s1,fsr2l
 19524  004A86  C06E  FFDA         	movff	stristr@s1+1,fsr2h
 19525  004A8A  50DF               	movf	indf2,w,c
 19526  004A8C  E1C8               	bnz	l10837
 19527  004A8E                     l2404:
 19528                           
 19529                           ; BSR set to: 0
 19530  004A8E  6B6D               	clrf	?_stristr& (0+255),b
 19531  004A90  6B6E               	clrf	(?_stristr+1)& (0+255),b
 19532  004A92                     l2401:
 19533                           
 19534                           ; BSR set to: 0
 19535  004A92  0012               	return	
 19536  004A94                     __end_of_stristr:
 19537                           	opt stack 0
 19538                           tblptru	equ	0xFF8
 19539                           tblptrh	equ	0xFF7
 19540                           tblptrl	equ	0xFF6
 19541                           tablat	equ	0xFF5
 19542                           prodh	equ	0xFF4
 19543                           prodl	equ	0xFF3
 19544                           intcon	equ	0xFF2
 19545                           indf0	equ	0xFEF
 19546                           postinc0	equ	0xFEE
 19547                           fsr0h	equ	0xFEA
 19548                           fsr0l	equ	0xFE9
 19549                           wreg	equ	0xFE8
 19550                           indf1	equ	0xFE7
 19551                           postinc1	equ	0xFE6
 19552                           postdec1	equ	0xFE5
 19553                           fsr1h	equ	0xFE2
 19554                           fsr1l	equ	0xFE1
 19555                           indf2	equ	0xFDF
 19556                           postinc2	equ	0xFDE
 19557                           postdec2	equ	0xFDD
 19558                           plusw2	equ	0xFDB
 19559                           fsr2h	equ	0xFDA
 19560                           fsr2l	equ	0xFD9
 19561                           status	equ	0xFD8
 19562                           
 19563 ;; *************** function _strichr *****************
 19564 ;; Defined at:
 19565 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 19566 ;; Parameters:    Size  Location     Type
 19567 ;;  ptr             2    1[BANK0 ] PTR const unsigned char 
 19568 ;;		 -> NULL(0), cmdbuf(80), 
 19569 ;;  chr             2    3[BANK0 ] int 
 19570 ;; Auto vars:     Size  Location     Type
 19571 ;;		None
 19572 ;; Return value:  Size  Location     Type
 19573 ;;                  2    1[BANK0 ] PTR unsigned char 
 19574 ;; Registers used:
 19575 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19576 ;; Tracked objects:
 19577 ;;		On entry : F/0
 19578 ;;		On exit  : F/0
 19579 ;;		Unchanged: 0/0
 19580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19581 ;;      Params:         0       4       0       0       0       0       0
 19582 ;;      Locals:         0       0       0       0       0       0       0
 19583 ;;      Temps:          0       0       0       0       0       0       0
 19584 ;;      Totals:         0       4       0       0       0       0       0
 19585 ;;Total ram usage:        4 bytes
 19586 ;; Hardware stack levels used:    1
 19587 ;; Hardware stack levels required when called:    4
 19588 ;; This function calls:
 19589 ;;		_toupper
 19590 ;; This function is called by:
 19591 ;;		_stristr
 19592 ;; This function uses a non-reentrant model
 19593 ;;
 19594                           
 19595                           	psect	text46
 19596  00521A                     __ptext46:
 19597                           	opt stack 0
 19598  00521A                     _strichr:
 19599                           	opt stack 24
 19600                           
 19601                           ; BSR set to: 0
 19602                           
 19603                           ; BSR set to: 0
 19604                           ;incstack = 0
 19605                           ;incstack = 0
 19606  00521A  5163               	movf	strichr@chr& (0+255),w,b
 19607  00521C  EC4B  F02A         	call	_toupper
 19608  005220  6F63               	movwf	strichr@chr& (0+255),b
 19609  005222  6B64               	clrf	(strichr@chr+1)& (0+255),b
 19610  005224  D010               	goto	l12427
 19611  005226                     l12421:
 19612                           
 19613                           ; BSR set to: 0
 19614  005226  C061  FFD9         	movff	strichr@ptr,fsr2l
 19615  00522A  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 19616  00522E  50DF               	movf	indf2,w,c
 19617  005230  EC4B  F02A         	call	_toupper
 19618  005234  1963               	xorwf	strichr@chr& (0+255),w,b
 19619  005236  E105               	bnz	l12425
 19620                           
 19621                           ; BSR set to: 0
 19622  005238  C061  F061         	movff	strichr@ptr,?_strichr
 19623  00523C  C062  F062         	movff	strichr@ptr+1,?_strichr+1
 19624  005240  D00A               	goto	l2468
 19625  005242                     l12425:
 19626                           
 19627                           ; BSR set to: 0
 19628  005242  4B61               	infsnz	strichr@ptr& (0+255),f,b
 19629  005244  2B62               	incf	(strichr@ptr+1)& (0+255),f,b
 19630  005246                     l12427:
 19631                           
 19632                           ; BSR set to: 0
 19633  005246  C061  FFD9         	movff	strichr@ptr,fsr2l
 19634  00524A  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 19635  00524E  50DF               	movf	indf2,w,c
 19636  005250  E1EA               	bnz	l12421
 19637                           
 19638                           ; BSR set to: 0
 19639  005252  6B61               	clrf	?_strichr& (0+255),b
 19640  005254  6B62               	clrf	(?_strichr+1)& (0+255),b
 19641  005256                     l2468:
 19642                           
 19643                           ; BSR set to: 0
 19644  005256  0012               	return	
 19645  005258                     __end_of_strichr:
 19646                           	opt stack 0
 19647                           tblptru	equ	0xFF8
 19648                           tblptrh	equ	0xFF7
 19649                           tblptrl	equ	0xFF6
 19650                           tablat	equ	0xFF5
 19651                           prodh	equ	0xFF4
 19652                           prodl	equ	0xFF3
 19653                           intcon	equ	0xFF2
 19654                           indf0	equ	0xFEF
 19655                           postinc0	equ	0xFEE
 19656                           fsr0h	equ	0xFEA
 19657                           fsr0l	equ	0xFE9
 19658                           wreg	equ	0xFE8
 19659                           indf1	equ	0xFE7
 19660                           postinc1	equ	0xFE6
 19661                           postdec1	equ	0xFE5
 19662                           fsr1h	equ	0xFE2
 19663                           fsr1l	equ	0xFE1
 19664                           indf2	equ	0xFDF
 19665                           postinc2	equ	0xFDE
 19666                           postdec2	equ	0xFDD
 19667                           plusw2	equ	0xFDB
 19668                           fsr2h	equ	0xFDA
 19669                           fsr2l	equ	0xFD9
 19670                           status	equ	0xFD8
 19671                           
 19672 ;; *************** function _strnicmp *****************
 19673 ;; Defined at:
 19674 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 19675 ;; Parameters:    Size  Location     Type
 19676 ;;  s1              2    4[BANK0 ] PTR const unsigned char 
 19677 ;;		 -> NULL(0), cmdbuf(80), 
 19678 ;;  s2              2    6[BANK0 ] PTR const unsigned char 
 19679 ;;		 -> STR_121(6), STR_120(8), STR_118(6), STR_116(5), 
 19680 ;;		 -> STR_114(8), STR_113(6), STR_112(9), STR_111(11), 
 19681 ;;		 -> STR_109(8), STR_107(4), STR_106(5), STR_94(5), 
 19682 ;;		 -> STR_82(7), STR_77(5), STR_68(5), STR_45(5), 
 19683 ;;		 -> STR_44(5), STR_42(5), STR_41(4), STR_40(5), 
 19684 ;;		 -> STR_37(3), STR_28(3), STR_19(7), STR_17(8), 
 19685 ;;		 -> STR_15(7), STR_13(9), STR_11(6), STR_9(7), 
 19686 ;;		 -> STR_7(5), STR_5(5), 
 19687 ;;  len             2    8[BANK0 ] unsigned int 
 19688 ;; Auto vars:     Size  Location     Type
 19689 ;;  r               1   12[BANK0 ] char 
 19690 ;; Return value:  Size  Location     Type
 19691 ;;                  2    4[BANK0 ] int 
 19692 ;; Registers used:
 19693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19694 ;; Tracked objects:
 19695 ;;		On entry : F/0
 19696 ;;		On exit  : F/0
 19697 ;;		Unchanged: 0/0
 19698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19699 ;;      Params:         0       6       0       0       0       0       0
 19700 ;;      Locals:         0       1       0       0       0       0       0
 19701 ;;      Temps:          0       2       0       0       0       0       0
 19702 ;;      Totals:         0       9       0       0       0       0       0
 19703 ;;Total ram usage:        9 bytes
 19704 ;; Hardware stack levels used:    1
 19705 ;; Hardware stack levels required when called:    4
 19706 ;; This function calls:
 19707 ;;		_toupper
 19708 ;; This function is called by:
 19709 ;;		_stristr
 19710 ;; This function uses a non-reentrant model
 19711 ;;
 19712                           
 19713                           	psect	text47
 19714  004CD2                     __ptext47:
 19715                           	opt stack 0
 19716  004CD2                     _strnicmp:
 19717                           	opt stack 24
 19718                           
 19719                           ; BSR set to: 0
 19720                           
 19721                           ; BSR set to: 0
 19722                           ;incstack = 0
 19723                           ;incstack = 0
 19724  004CD2  D027               	goto	l12417
 19725  004CD4                     l12407:
 19726                           
 19727                           ; BSR set to: 0
 19728  004CD4  C066  FFF6         	movff	strnicmp@s2,tblptrl
 19729  004CD8  C067  FFF7         	movff	strnicmp@s2+1,tblptrh
 19730  004CDC  0008               	tblrd		*
 19731  004CDE  50F5               	movf	tablat,w,c
 19732  004CE0  EC4B  F02A         	call	_toupper
 19733  004CE4  6F6A               	movwf	??_strnicmp& (0+255),b
 19734  004CE6  C064  FFD9         	movff	strnicmp@s1,fsr2l
 19735  004CEA  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 19736  004CEE  50DF               	movf	indf2,w,c
 19737  004CF0  EC4B  F02A         	call	_toupper
 19738  004CF4  6F6B               	movwf	(??_strnicmp+1)& (0+255),b
 19739  004CF6  516A               	movf	??_strnicmp& (0+255),w,b
 19740  004CF8  5D6B               	subwf	(??_strnicmp+1)& (0+255),w,b
 19741  004CFA  6F6C               	movwf	strnicmp@r& (0+255),b
 19742  004CFC  0100               	movlb	0	; () banked
 19743  004CFE  676C               	tstfsz	strnicmp@r& (0+255),b
 19744  004D00  D006               	goto	l12411
 19745                           
 19746                           ; BSR set to: 0
 19747  004D02  C064  FFD9         	movff	strnicmp@s1,fsr2l
 19748  004D06  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 19749  004D0A  50DF               	movf	indf2,w,c
 19750  004D0C  E106               	bnz	l12415
 19751  004D0E                     l12411:
 19752                           
 19753                           ; BSR set to: 0
 19754  004D0E  516C               	movf	strnicmp@r& (0+255),w,b
 19755  004D10  6F64               	movwf	?_strnicmp& (0+255),b
 19756  004D12  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 19757  004D14  BF64               	btfsc	?_strnicmp& (0+255),7,b
 19758  004D16  0765               	decf	(?_strnicmp+1)& (0+255),f,b
 19759  004D18  D00E               	goto	l2420
 19760  004D1A                     l12415:
 19761                           
 19762                           ; BSR set to: 0
 19763  004D1A  4B64               	infsnz	strnicmp@s1& (0+255),f,b
 19764  004D1C  2B65               	incf	(strnicmp@s1+1)& (0+255),f,b
 19765  004D1E  4B66               	infsnz	strnicmp@s2& (0+255),f,b
 19766  004D20  2B67               	incf	(strnicmp@s2+1)& (0+255),f,b
 19767  004D22                     l12417:
 19768                           
 19769                           ; BSR set to: 0
 19770  004D22  0768               	decf	strnicmp@len& (0+255),f,b
 19771  004D24  A0D8               	btfss	status,0,c
 19772  004D26  0769               	decf	(strnicmp@len+1)& (0+255),f,b
 19773  004D28  0100               	movlb	0	; () banked
 19774  004D2A  2968               	incf	strnicmp@len& (0+255),w,b
 19775  004D2C  B4D8               	btfsc	status,2,c
 19776  004D2E  2969               	incf	(strnicmp@len+1)& (0+255),w,b
 19777  004D30  E1D1               	bnz	l12407
 19778                           
 19779                           ; BSR set to: 0
 19780  004D32  6B64               	clrf	?_strnicmp& (0+255),b
 19781  004D34  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 19782  004D36                     l2420:
 19783                           
 19784                           ; BSR set to: 0
 19785  004D36  0012               	return	
 19786  004D38                     __end_of_strnicmp:
 19787                           	opt stack 0
 19788                           tblptru	equ	0xFF8
 19789                           tblptrh	equ	0xFF7
 19790                           tblptrl	equ	0xFF6
 19791                           tablat	equ	0xFF5
 19792                           prodh	equ	0xFF4
 19793                           prodl	equ	0xFF3
 19794                           intcon	equ	0xFF2
 19795                           indf0	equ	0xFEF
 19796                           postinc0	equ	0xFEE
 19797                           fsr0h	equ	0xFEA
 19798                           fsr0l	equ	0xFE9
 19799                           wreg	equ	0xFE8
 19800                           indf1	equ	0xFE7
 19801                           postinc1	equ	0xFE6
 19802                           postdec1	equ	0xFE5
 19803                           fsr1h	equ	0xFE2
 19804                           fsr1l	equ	0xFE1
 19805                           indf2	equ	0xFDF
 19806                           postinc2	equ	0xFDE
 19807                           postdec2	equ	0xFDD
 19808                           plusw2	equ	0xFDB
 19809                           fsr2h	equ	0xFDA
 19810                           fsr2l	equ	0xFD9
 19811                           status	equ	0xFD8
 19812                           
 19813 ;; *************** function _toupper *****************
 19814 ;; Defined at:
 19815 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 19816 ;; Parameters:    Size  Location     Type
 19817 ;;  c               1    wreg     unsigned char 
 19818 ;; Auto vars:     Size  Location     Type
 19819 ;;  c               1    0[BANK0 ] unsigned char 
 19820 ;; Return value:  Size  Location     Type
 19821 ;;                  1    wreg      unsigned char 
 19822 ;; Registers used:
 19823 ;;		wreg, status,2, status,0
 19824 ;; Tracked objects:
 19825 ;;		On entry : F/0
 19826 ;;		On exit  : F/0
 19827 ;;		Unchanged: 0/0
 19828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19829 ;;      Params:         0       0       0       0       0       0       0
 19830 ;;      Locals:         0       1       0       0       0       0       0
 19831 ;;      Temps:          0       0       0       0       0       0       0
 19832 ;;      Totals:         0       1       0       0       0       0       0
 19833 ;;Total ram usage:        1 bytes
 19834 ;; Hardware stack levels used:    1
 19835 ;; Hardware stack levels required when called:    3
 19836 ;; This function calls:
 19837 ;;		Nothing
 19838 ;; This function is called by:
 19839 ;;		_strnicmp
 19840 ;;		_strichr
 19841 ;; This function uses a non-reentrant model
 19842 ;;
 19843                           
 19844                           	psect	text48
 19845  005496                     __ptext48:
 19846                           	opt stack 0
 19847  005496                     _toupper:
 19848                           	opt stack 24
 19849                           
 19850                           ; BSR set to: 0
 19851                           ;incstack = 0
 19852                           ;incstack = 0
 19853                           ;toupper@c stored from wreg
 19854  005496  CFE8 F060          	movff	wreg,toupper@c
 19855                           
 19856                           ; BSR set to: 0
 19857  00549A  0E7B               	movlw	123
 19858  00549C  6160               	cpfslt	toupper@c& (0+255),b
 19859  00549E  D004               	goto	l12435
 19860                           
 19861                           ; BSR set to: 0
 19862  0054A0  0E60               	movlw	96
 19863  0054A2  6560               	cpfsgt	toupper@c& (0+255),b
 19864  0054A4  D001               	goto	l12435
 19865                           
 19866                           ; BSR set to: 0
 19867  0054A6  9B60               	bcf	toupper@c& (0+255),5,b
 19868  0054A8                     l12435:
 19869                           
 19870                           ; BSR set to: 0
 19871  0054A8  5160               	movf	toupper@c& (0+255),w,b
 19872                           
 19873                           ; BSR set to: 0
 19874  0054AA  0012               	return	
 19875  0054AC                     __end_of_toupper:
 19876                           	opt stack 0
 19877                           tblptru	equ	0xFF8
 19878                           tblptrh	equ	0xFF7
 19879                           tblptrl	equ	0xFF6
 19880                           tablat	equ	0xFF5
 19881                           prodh	equ	0xFF4
 19882                           prodl	equ	0xFF3
 19883                           intcon	equ	0xFF2
 19884                           indf0	equ	0xFEF
 19885                           postinc0	equ	0xFEE
 19886                           fsr0h	equ	0xFEA
 19887                           fsr0l	equ	0xFE9
 19888                           wreg	equ	0xFE8
 19889                           indf1	equ	0xFE7
 19890                           postinc1	equ	0xFE6
 19891                           postdec1	equ	0xFE5
 19892                           fsr1h	equ	0xFE2
 19893                           fsr1l	equ	0xFE1
 19894                           indf2	equ	0xFDF
 19895                           postinc2	equ	0xFDE
 19896                           postdec2	equ	0xFDD
 19897                           plusw2	equ	0xFDB
 19898                           fsr2h	equ	0xFDA
 19899                           fsr2l	equ	0xFD9
 19900                           status	equ	0xFD8
 19901                           
 19902 ;; *************** function _strlen *****************
 19903 ;; Defined at:
 19904 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 19905 ;; Parameters:    Size  Location     Type
 19906 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 19907 ;;		 -> printGUID@buf(3), STR_121(6), STR_120(8), STR_118(6), 
 19908 ;;		 -> STR_116(5), STR_114(8), STR_113(6), STR_112(9), 
 19909 ;;		 -> STR_111(11), STR_109(8), STR_107(4), STR_106(5), 
 19910 ;;		 -> STR_94(5), STR_82(7), STR_77(5), STR_68(5), 
 19911 ;;		 -> wrkbuf(80), STR_45(5), STR_44(5), STR_42(5), 
 19912 ;;		 -> STR_41(4), STR_40(5), STR_37(3), STR_28(3), 
 19913 ;;		 -> STR_19(7), STR_17(8), STR_15(7), STR_13(9), 
 19914 ;;		 -> STR_11(6), STR_9(7), STR_7(5), STR_5(5), 
 19915 ;;		 -> cmdbuf(80), 
 19916 ;; Auto vars:     Size  Location     Type
 19917 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
 19918 ;;		 -> printGUID@buf(3), STR_121(6), STR_120(8), STR_118(6), 
 19919 ;;		 -> STR_116(5), STR_114(8), STR_113(6), STR_112(9), 
 19920 ;;		 -> STR_111(11), STR_109(8), STR_107(4), STR_106(5), 
 19921 ;;		 -> STR_94(5), STR_82(7), STR_77(5), STR_68(5), 
 19922 ;;		 -> wrkbuf(80), STR_45(5), STR_44(5), STR_42(5), 
 19923 ;;		 -> STR_41(4), STR_40(5), STR_37(3), STR_28(3), 
 19924 ;;		 -> STR_19(7), STR_17(8), STR_15(7), STR_13(9), 
 19925 ;;		 -> STR_11(6), STR_9(7), STR_7(5), STR_5(5), 
 19926 ;;		 -> cmdbuf(80), 
 19927 ;; Return value:  Size  Location     Type
 19928 ;;                  2    0[BANK0 ] unsigned int 
 19929 ;; Registers used:
 19930 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 19931 ;; Tracked objects:
 19932 ;;		On entry : F/0
 19933 ;;		On exit  : F/0
 19934 ;;		Unchanged: 0/0
 19935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19936 ;;      Params:         0       2       0       0       0       0       0
 19937 ;;      Locals:         0       2       0       0       0       0       0
 19938 ;;      Temps:          0       0       0       0       0       0       0
 19939 ;;      Totals:         0       4       0       0       0       0       0
 19940 ;;Total ram usage:        4 bytes
 19941 ;; Hardware stack levels used:    1
 19942 ;; Hardware stack levels required when called:    3
 19943 ;; This function calls:
 19944 ;;		Nothing
 19945 ;; This function is called by:
 19946 ;;		_doModeSLCAN
 19947 ;;		_receivePrintEventSLCAN
 19948 ;;		_printGUID
 19949 ;;		_hexStringToBytes
 19950 ;;		_stristr
 19951 ;; This function uses a non-reentrant model
 19952 ;;
 19953                           
 19954                           	psect	text49
 19955  00515C                     __ptext49:
 19956                           	opt stack 0
 19957  00515C                     _strlen:
 19958                           	opt stack 25
 19959                           
 19960                           ; BSR set to: 0
 19961                           
 19962                           ; BSR set to: 0
 19963                           ;incstack = 0
 19964                           ;incstack = 0
 19965  00515C  C060  F062         	movff	strlen@s,strlen@cp
 19966  005160  C061  F063         	movff	strlen@s+1,strlen@cp+1
 19967  005164  D003               	goto	l11983
 19968  005166                     l11981:
 19969  005166  0100               	movlb	0	; () banked
 19970  005168  4B62               	infsnz	strlen@cp& (0+255),f,b
 19971  00516A  2B63               	incf	(strlen@cp+1)& (0+255),f,b
 19972  00516C                     l11983:
 19973                           
 19974                           ; BSR set to: 0
 19975  00516C  5162               	movf	strlen@cp& (0+255),w,b
 19976  00516E  6EF6               	movwf	tblptrl,c
 19977  005170  6EE9               	movwf	fsr0l,c
 19978  005172  0E05               	movlw	(high __ramtop+-1)
 19979  005174  6EEA               	movwf	fsr0h,c
 19980  005176  5163               	movf	(strlen@cp+1)& (0+255),w,b
 19981  005178  64EA               	cpfsgt	fsr0h,c
 19982  00517A  D003               	bra	u15507
 19983  00517C  6EEA               	movwf	fsr0h,c
 19984  00517E  50EF               	movf	indf0,w,c
 19985  005180  D003               	bra	u15500
 19986  005182                     u15507:
 19987  005182  6EF7               	movwf	tblptrh,c
 19988  005184  0008               	tblrd		*
 19989  005186  50F5               	movf	tablat,w,c
 19990  005188                     u15500:
 19991  005188  0900               	iorlw	0
 19992  00518A  E1ED               	bnz	l11981
 19993  00518C  0100               	movlb	0	; () banked
 19994  00518E  5160               	movf	strlen@s& (0+255),w,b
 19995  005190  5D62               	subwf	strlen@cp& (0+255),w,b
 19996  005192  6F60               	movwf	?_strlen& (0+255),b
 19997  005194  5161               	movf	(strlen@s+1)& (0+255),w,b
 19998  005196  5963               	subwfb	(strlen@cp+1)& (0+255),w,b
 19999  005198  6F61               	movwf	(?_strlen+1)& (0+255),b
 20000                           
 20001                           ; BSR set to: 0
 20002  00519A  0012               	return	
 20003  00519C                     __end_of_strlen:
 20004                           	opt stack 0
 20005                           tblptru	equ	0xFF8
 20006                           tblptrh	equ	0xFF7
 20007                           tblptrl	equ	0xFF6
 20008                           tablat	equ	0xFF5
 20009                           prodh	equ	0xFF4
 20010                           prodl	equ	0xFF3
 20011                           intcon	equ	0xFF2
 20012                           indf0	equ	0xFEF
 20013                           postinc0	equ	0xFEE
 20014                           fsr0h	equ	0xFEA
 20015                           fsr0l	equ	0xFE9
 20016                           wreg	equ	0xFE8
 20017                           indf1	equ	0xFE7
 20018                           postinc1	equ	0xFE6
 20019                           postdec1	equ	0xFE5
 20020                           fsr1h	equ	0xFE2
 20021                           fsr1l	equ	0xFE1
 20022                           indf2	equ	0xFDF
 20023                           postinc2	equ	0xFDE
 20024                           postdec2	equ	0xFDD
 20025                           plusw2	equ	0xFDB
 20026                           fsr2h	equ	0xFDA
 20027                           fsr2l	equ	0xFD9
 20028                           status	equ	0xFD8
 20029                           
 20030 ;; *************** function _receivePrintEventVerbose *****************
 20031 ;; Defined at:
 20032 ;;		line 1690 in file "main.c"
 20033 ;; Parameters:    Size  Location     Type
 20034 ;;		None
 20035 ;; Auto vars:     Size  Location     Type
 20036 ;;  i               1   69[BANK0 ] unsigned char 
 20037 ;; Return value:  Size  Location     Type
 20038 ;;                  1    wreg      enum E15660
 20039 ;; Registers used:
 20040 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20041 ;; Tracked objects:
 20042 ;;		On entry : F/1
 20043 ;;		On exit  : 0/0
 20044 ;;		Unchanged: 0/0
 20045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20046 ;;      Params:         0       0       0       0       0       0       0
 20047 ;;      Locals:         0      13       0       0       0       0       0
 20048 ;;      Temps:          0       5       0       0       0       0       0
 20049 ;;      Totals:         0      18       0       0       0       0       0
 20050 ;;Total ram usage:       18 bytes
 20051 ;; Hardware stack levels used:    1
 20052 ;; Hardware stack levels required when called:    6
 20053 ;; This function calls:
 20054 ;;		_putsUSART
 20055 ;;		_sprintf
 20056 ;;		_getVSCPFrame
 20057 ;; This function is called by:
 20058 ;;		_doModeVerbose
 20059 ;; This function uses a non-reentrant model
 20060 ;;
 20061                           
 20062                           	psect	text50
 20063  002354                     __ptext50:
 20064                           	opt stack 0
 20065  002354                     _receivePrintEventVerbose:
 20066                           	opt stack 23
 20067                           
 20068                           ; BSR set to: 1
 20069                           ;main.c: 1691: uint8_t i;
 20070                           ;main.c: 1693: if (getVSCPFrame(&vscpClass,
 20071                           ;main.c: 1694: &vscpType,
 20072                           ;main.c: 1695: &vscpNodeId,
 20073                           ;main.c: 1696: &vscpPriority,
 20074                           ;main.c: 1697: &vscpSize,
 20075                           ;main.c: 1698: vscpData)) {
 20076                           
 20077                           ; BSR set to: 0
 20078                           ;incstack = 0
 20079                           ;incstack = 0
 20080  002354  0E01               	movlw	high _vscpClass
 20081  002356  0100               	movlb	0	; () banked
 20082  002358  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 20083  00235A  0EAC               	movlw	low _vscpClass
 20084  00235C  6F72               	movwf	?_getVSCPFrame& (0+255),b
 20085  00235E  0E01               	movlw	high _vscpType
 20086  002360  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 20087  002362  0EB1               	movlw	low _vscpType
 20088  002364  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 20089  002366  0E01               	movlw	high _vscpNodeId
 20090  002368  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 20091  00236A  0EAE               	movlw	low _vscpNodeId
 20092  00236C  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 20093  00236E  0E01               	movlw	high _vscpPriority
 20094  002370  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 20095  002372  0EAF               	movlw	low _vscpPriority
 20096  002374  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 20097  002376  0E01               	movlw	high _vscpSize
 20098  002378  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 20099  00237A  0EB0               	movlw	low _vscpSize
 20100  00237C  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 20101  00237E  0E01               	movlw	high _vscpData
 20102  002380  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 20103  002382  0EA4               	movlw	low _vscpData
 20104  002384  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 20105  002386  EC4E  F024         	call	_getVSCPFrame	;wreg free
 20106  00238A  0900               	iorlw	0
 20107  00238C  E101 D141          	bz	l10831
 20108                           
 20109                           ; BSR set to: 0
 20110                           ;main.c: 1701: cntRxFrames++;
 20111  002390  2BDD               	incf	_cntRxFrames& (0+255),f,b
 20112  002392  0E00               	movlw	0
 20113  002394  23DE               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 20114  002396  23DF               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 20115  002398  23E0               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 20116                           
 20117                           ;main.c: 1702: cntRxBytes += vscpSize;
 20118  00239A  0101               	movlb	1	; () banked
 20119  00239C  51B0               	movf	_vscpSize& (0+255),w,b
 20120  00239E  0100               	movlb	0	; () banked
 20121  0023A0  27D9               	addwf	_cntRxBytes& (0+255),f,b
 20122  0023A2  0E00               	movlw	0
 20123  0023A4  23DA               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 20124  0023A6  23DB               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 20125  0023A8  23DC               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 20126                           
 20127                           ; BSR set to: 0
 20128                           ;main.c: 1704: putsUSART((char *) "<Prio=");
 20129  0023AA  0E7F               	movlw	high STR_131
 20130  0023AC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20131  0023AE  0E42               	movlw	low STR_131
 20132  0023B0  6F61               	movwf	?_putsUSART& (0+255),b
 20133  0023B2  EC89  F027         	call	_putsUSART	;wreg free
 20134                           
 20135                           ;main.c: 1705: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority);
 20136  0023B6  0101               	movlb	1	; () banked
 20137  0023B8  6700               	tstfsz	_bHex& (0+255),b
 20138  0023BA  D005               	goto	l10749
 20139                           
 20140                           ; BSR set to: 1
 20141  0023BC  0E7F               	movlw	high STR_53
 20142  0023BE  0100               	movlb	0	; () banked
 20143  0023C0  6F9A               	movwf	(_receivePrintEventVerbose$1300+1)& (0+255),b
 20144  0023C2  0EEE               	movlw	low STR_53
 20145  0023C4  D004               	goto	L27
 20146  0023C6                     l10749:
 20147                           
 20148                           ; BSR set to: 1
 20149  0023C6  0E7F               	movlw	high STR_52
 20150  0023C8  0100               	movlb	0	; () banked
 20151  0023CA  6F9A               	movwf	(_receivePrintEventVerbose$1300+1)& (0+255),b
 20152  0023CC  0E65               	movlw	low STR_52
 20153  0023CE                     L27:
 20154  0023CE  6F99               	movwf	_receivePrintEventVerbose$1300& (0+255),b
 20155                           
 20156                           ; BSR set to: 0
 20157  0023D0  0E01               	movlw	high _wrkbuf
 20158  0023D2  0100               	movlb	0	; () banked
 20159  0023D4  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20160  0023D6  0E54               	movlw	low _wrkbuf
 20161  0023D8  6F76               	movwf	?_sprintf& (0+255),b
 20162  0023DA  C099  F078         	movff	_receivePrintEventVerbose$1300,?_sprintf+2
 20163  0023DE  C09A  F079         	movff	_receivePrintEventVerbose$1300+1,?_sprintf+3
 20164  0023E2  C1AF  F07A         	movff	_vscpPriority,?_sprintf+4
 20165  0023E6  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 20166  0023E8  ECE8  F00A         	call	_sprintf	;wreg free
 20167                           
 20168                           ; BSR set to: 0
 20169                           ;main.c: 1706: putsUSART(wrkbuf);
 20170  0023EC  0E01               	movlw	high _wrkbuf
 20171  0023EE  0100               	movlb	0	; () banked
 20172  0023F0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20173  0023F2  0E54               	movlw	low _wrkbuf
 20174  0023F4  6F61               	movwf	?_putsUSART& (0+255),b
 20175  0023F6  EC89  F027         	call	_putsUSART	;wreg free
 20176                           
 20177                           ;main.c: 1707: putsUSART((char *) ",class=");
 20178  0023FA  0E7E               	movlw	high STR_134
 20179  0023FC  0100               	movlb	0	; () banked
 20180  0023FE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20181  002400  0EF6               	movlw	low STR_134
 20182  002402  6F61               	movwf	?_putsUSART& (0+255),b
 20183  002404  EC89  F027         	call	_putsUSART	;wreg free
 20184                           
 20185                           ;main.c: 1708: sprintf(wrkbuf, bHex ? "0x%04X" : "%d", vscpClass);
 20186  002408  0101               	movlb	1	; () banked
 20187  00240A  6700               	tstfsz	_bHex& (0+255),b
 20188  00240C  D005               	goto	l10761
 20189                           
 20190                           ; BSR set to: 1
 20191  00240E  0E7F               	movlw	high STR_53
 20192  002410  0100               	movlb	0	; () banked
 20193  002412  6F9C               	movwf	(_receivePrintEventVerbose$1305+1)& (0+255),b
 20194  002414  0EEE               	movlw	low STR_53
 20195  002416  D004               	goto	L28
 20196  002418                     l10761:
 20197                           
 20198                           ; BSR set to: 1
 20199  002418  0E7F               	movlw	high STR_135
 20200  00241A  0100               	movlb	0	; () banked
 20201  00241C  6F9C               	movwf	(_receivePrintEventVerbose$1305+1)& (0+255),b
 20202  00241E  0E6C               	movlw	low STR_135
 20203  002420                     L28:
 20204  002420  6F9B               	movwf	_receivePrintEventVerbose$1305& (0+255),b
 20205                           
 20206                           ; BSR set to: 0
 20207  002422  0E01               	movlw	high _wrkbuf
 20208  002424  0100               	movlb	0	; () banked
 20209  002426  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20210  002428  0E54               	movlw	low _wrkbuf
 20211  00242A  6F76               	movwf	?_sprintf& (0+255),b
 20212  00242C  C09B  F078         	movff	_receivePrintEventVerbose$1305,?_sprintf+2
 20213  002430  C09C  F079         	movff	_receivePrintEventVerbose$1305+1,?_sprintf+3
 20214  002434  C1AC  F07A         	movff	_vscpClass,?_sprintf+4
 20215  002438  C1AD  F07B         	movff	_vscpClass+1,?_sprintf+5
 20216  00243C  ECE8  F00A         	call	_sprintf	;wreg free
 20217                           
 20218                           ; BSR set to: 0
 20219                           ;main.c: 1709: putsUSART(wrkbuf);
 20220  002440  0E01               	movlw	high _wrkbuf
 20221  002442  0100               	movlb	0	; () banked
 20222  002444  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20223  002446  0E54               	movlw	low _wrkbuf
 20224  002448  6F61               	movwf	?_putsUSART& (0+255),b
 20225  00244A  EC89  F027         	call	_putsUSART	;wreg free
 20226                           
 20227                           ;main.c: 1710: putsUSART((char *) ",type=");
 20228  00244E  0E7F               	movlw	high STR_137
 20229  002450  0100               	movlb	0	; () banked
 20230  002452  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20231  002454  0E34               	movlw	low STR_137
 20232  002456  6F61               	movwf	?_putsUSART& (0+255),b
 20233  002458  EC89  F027         	call	_putsUSART	;wreg free
 20234                           
 20235                           ;main.c: 1711: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpType);
 20236  00245C  0101               	movlb	1	; () banked
 20237  00245E  6700               	tstfsz	_bHex& (0+255),b
 20238  002460  D005               	goto	l10773
 20239                           
 20240                           ; BSR set to: 1
 20241  002462  0E7F               	movlw	high STR_53
 20242  002464  0100               	movlb	0	; () banked
 20243  002466  6F9E               	movwf	(_receivePrintEventVerbose$1310+1)& (0+255),b
 20244  002468  0EEE               	movlw	low STR_53
 20245  00246A  D004               	goto	L29
 20246  00246C                     l10773:
 20247                           
 20248                           ; BSR set to: 1
 20249  00246C  0E7F               	movlw	high STR_52
 20250  00246E  0100               	movlb	0	; () banked
 20251  002470  6F9E               	movwf	(_receivePrintEventVerbose$1310+1)& (0+255),b
 20252  002472  0E65               	movlw	low STR_52
 20253  002474                     L29:
 20254  002474  6F9D               	movwf	_receivePrintEventVerbose$1310& (0+255),b
 20255                           
 20256                           ; BSR set to: 0
 20257  002476  0E01               	movlw	high _wrkbuf
 20258  002478  0100               	movlb	0	; () banked
 20259  00247A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20260  00247C  0E54               	movlw	low _wrkbuf
 20261  00247E  6F76               	movwf	?_sprintf& (0+255),b
 20262  002480  C09D  F078         	movff	_receivePrintEventVerbose$1310,?_sprintf+2
 20263  002484  C09E  F079         	movff	_receivePrintEventVerbose$1310+1,?_sprintf+3
 20264  002488  C1B1  F07A         	movff	_vscpType,?_sprintf+4
 20265  00248C  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 20266  00248E  ECE8  F00A         	call	_sprintf	;wreg free
 20267                           
 20268                           ; BSR set to: 0
 20269                           ;main.c: 1712: putsUSART(wrkbuf);
 20270  002492  0E01               	movlw	high _wrkbuf
 20271  002494  0100               	movlb	0	; () banked
 20272  002496  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20273  002498  0E54               	movlw	low _wrkbuf
 20274  00249A  6F61               	movwf	?_putsUSART& (0+255),b
 20275  00249C  EC89  F027         	call	_putsUSART	;wreg free
 20276                           
 20277                           ;main.c: 1713: putsUSART((char *) ",nodeid=");
 20278  0024A0  0E7E               	movlw	high STR_140
 20279  0024A2  0100               	movlb	0	; () banked
 20280  0024A4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20281  0024A6  0EC4               	movlw	low STR_140
 20282  0024A8  6F61               	movwf	?_putsUSART& (0+255),b
 20283  0024AA  EC89  F027         	call	_putsUSART	;wreg free
 20284                           
 20285                           ;main.c: 1714: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId);
 20286  0024AE  0101               	movlb	1	; () banked
 20287  0024B0  6700               	tstfsz	_bHex& (0+255),b
 20288  0024B2  D005               	goto	l10785
 20289                           
 20290                           ; BSR set to: 1
 20291  0024B4  0E7F               	movlw	high STR_53
 20292  0024B6  0100               	movlb	0	; () banked
 20293  0024B8  6FA0               	movwf	(_receivePrintEventVerbose$1315+1)& (0+255),b
 20294  0024BA  0EEE               	movlw	low STR_53
 20295  0024BC  D004               	goto	L30
 20296  0024BE                     l10785:
 20297                           
 20298                           ; BSR set to: 1
 20299  0024BE  0E7F               	movlw	high STR_52
 20300  0024C0  0100               	movlb	0	; () banked
 20301  0024C2  6FA0               	movwf	(_receivePrintEventVerbose$1315+1)& (0+255),b
 20302  0024C4  0E65               	movlw	low STR_52
 20303  0024C6                     L30:
 20304  0024C6  6F9F               	movwf	_receivePrintEventVerbose$1315& (0+255),b
 20305                           
 20306                           ; BSR set to: 0
 20307  0024C8  0E01               	movlw	high _wrkbuf
 20308  0024CA  0100               	movlb	0	; () banked
 20309  0024CC  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20310  0024CE  0E54               	movlw	low _wrkbuf
 20311  0024D0  6F76               	movwf	?_sprintf& (0+255),b
 20312  0024D2  C09F  F078         	movff	_receivePrintEventVerbose$1315,?_sprintf+2
 20313  0024D6  C0A0  F079         	movff	_receivePrintEventVerbose$1315+1,?_sprintf+3
 20314  0024DA  C1AE  F07A         	movff	_vscpNodeId,?_sprintf+4
 20315  0024DE  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 20316  0024E0  ECE8  F00A         	call	_sprintf	;wreg free
 20317                           
 20318                           ; BSR set to: 0
 20319                           ;main.c: 1715: putsUSART(wrkbuf);
 20320  0024E4  0E01               	movlw	high _wrkbuf
 20321  0024E6  0100               	movlb	0	; () banked
 20322  0024E8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20323  0024EA  0E54               	movlw	low _wrkbuf
 20324  0024EC  6F61               	movwf	?_putsUSART& (0+255),b
 20325  0024EE  EC89  F027         	call	_putsUSART	;wreg free
 20326                           
 20327                           ;main.c: 1716: putsUSART((char *) ",size=");
 20328  0024F2  0E7F               	movlw	high STR_143
 20329  0024F4  0100               	movlb	0	; () banked
 20330  0024F6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20331  0024F8  0E3B               	movlw	low STR_143
 20332  0024FA  6F61               	movwf	?_putsUSART& (0+255),b
 20333  0024FC  EC89  F027         	call	_putsUSART	;wreg free
 20334                           
 20335                           ;main.c: 1717: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpSize);
 20336  002500  0101               	movlb	1	; () banked
 20337  002502  6700               	tstfsz	_bHex& (0+255),b
 20338  002504  D005               	goto	l10797
 20339                           
 20340                           ; BSR set to: 1
 20341  002506  0E7F               	movlw	high STR_53
 20342  002508  0100               	movlb	0	; () banked
 20343  00250A  6FA2               	movwf	(_receivePrintEventVerbose$1320+1)& (0+255),b
 20344  00250C  0EEE               	movlw	low STR_53
 20345  00250E  D004               	goto	L31
 20346  002510                     l10797:
 20347                           
 20348                           ; BSR set to: 1
 20349  002510  0E7F               	movlw	high STR_52
 20350  002512  0100               	movlb	0	; () banked
 20351  002514  6FA2               	movwf	(_receivePrintEventVerbose$1320+1)& (0+255),b
 20352  002516  0E65               	movlw	low STR_52
 20353  002518                     L31:
 20354  002518  6FA1               	movwf	_receivePrintEventVerbose$1320& (0+255),b
 20355                           
 20356                           ; BSR set to: 0
 20357  00251A  0E01               	movlw	high _wrkbuf
 20358  00251C  0100               	movlb	0	; () banked
 20359  00251E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20360  002520  0E54               	movlw	low _wrkbuf
 20361  002522  6F76               	movwf	?_sprintf& (0+255),b
 20362  002524  C0A1  F078         	movff	_receivePrintEventVerbose$1320,?_sprintf+2
 20363  002528  C0A2  F079         	movff	_receivePrintEventVerbose$1320+1,?_sprintf+3
 20364  00252C  C1B0  F07A         	movff	_vscpSize,?_sprintf+4
 20365  002530  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 20366  002532  ECE8  F00A         	call	_sprintf	;wreg free
 20367                           
 20368                           ; BSR set to: 0
 20369                           ;main.c: 1718: putsUSART(wrkbuf);
 20370  002536  0E01               	movlw	high _wrkbuf
 20371  002538  0100               	movlb	0	; () banked
 20372  00253A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20373  00253C  0E54               	movlw	low _wrkbuf
 20374  00253E  6F61               	movwf	?_putsUSART& (0+255),b
 20375  002540  EC89  F027         	call	_putsUSART	;wreg free
 20376                           
 20377                           ;main.c: 1719: if (vscpSize > 0) {
 20378  002544  0101               	movlb	1	; () banked
 20379  002546  51B0               	movf	_vscpSize& (0+255),w,b
 20380  002548  E054               	bz	l10825
 20381                           
 20382                           ; BSR set to: 1
 20383                           ;main.c: 1720: putsUSART((char *) ",Data=");
 20384  00254A  0E7F               	movlw	high STR_146
 20385  00254C  0100               	movlb	0	; () banked
 20386  00254E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20387  002550  0E2D               	movlw	low STR_146
 20388  002552  6F61               	movwf	?_putsUSART& (0+255),b
 20389  002554  EC89  F027         	call	_putsUSART	;wreg free
 20390                           
 20391                           ;main.c: 1721: for (i = 0; i < vscpSize; i++) {
 20392  002558  0100               	movlb	0	; () banked
 20393  00255A  6BA5               	clrf	receivePrintEventVerbose@i& (0+255),b
 20394  00255C  D044               	goto	l10823
 20395  00255E                     l889:
 20396                           
 20397                           ; BSR set to: 0
 20398                           ;main.c: 1723: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i]);
 20399  00255E  0101               	movlb	1	; () banked
 20400  002560  6700               	tstfsz	_bHex& (0+255),b
 20401  002562  D005               	goto	l10811
 20402                           
 20403                           ; BSR set to: 1
 20404  002564  0E7F               	movlw	high STR_53
 20405  002566  0100               	movlb	0	; () banked
 20406  002568  6FA4               	movwf	(_receivePrintEventVerbose$1325+1)& (0+255),b
 20407  00256A  0EEE               	movlw	low STR_53
 20408  00256C  D004               	goto	L32
 20409  00256E                     l10811:
 20410                           
 20411                           ; BSR set to: 1
 20412  00256E  0E7F               	movlw	high STR_52
 20413  002570  0100               	movlb	0	; () banked
 20414  002572  6FA4               	movwf	(_receivePrintEventVerbose$1325+1)& (0+255),b
 20415  002574  0E65               	movlw	low STR_52
 20416  002576                     L32:
 20417  002576  6FA3               	movwf	_receivePrintEventVerbose$1325& (0+255),b
 20418                           
 20419                           ; BSR set to: 0
 20420  002578  0E01               	movlw	high _wrkbuf
 20421  00257A  0100               	movlb	0	; () banked
 20422  00257C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20423  00257E  0E54               	movlw	low _wrkbuf
 20424  002580  6F76               	movwf	?_sprintf& (0+255),b
 20425  002582  C0A3  F078         	movff	_receivePrintEventVerbose$1325,?_sprintf+2
 20426  002586  C0A4  F079         	movff	_receivePrintEventVerbose$1325+1,?_sprintf+3
 20427  00258A  0EA4               	movlw	low _vscpData
 20428  00258C  25A5               	addwf	receivePrintEventVerbose@i& (0+255),w,b
 20429  00258E  6ED9               	movwf	fsr2l,c
 20430  002590  6ADA               	clrf	fsr2h,c
 20431  002592  0E01               	movlw	high _vscpData
 20432  002594  22DA               	addwfc	fsr2h,f,c
 20433  002596  50DF               	movf	indf2,w,c
 20434  002598  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 20435  00259A  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 20436  00259C  ECE8  F00A         	call	_sprintf	;wreg free
 20437                           
 20438                           ; BSR set to: 0
 20439                           ;main.c: 1724: putsUSART(wrkbuf);
 20440  0025A0  0E01               	movlw	high _wrkbuf
 20441  0025A2  0100               	movlb	0	; () banked
 20442  0025A4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20443  0025A6  0E54               	movlw	low _wrkbuf
 20444  0025A8  6F61               	movwf	?_putsUSART& (0+255),b
 20445  0025AA  EC89  F027         	call	_putsUSART	;wreg free
 20446                           
 20447                           ;main.c: 1725: if (i < (vscpSize - 1)) {
 20448  0025AE  0EFF               	movlw	255
 20449  0025B0  0101               	movlb	1	; () banked
 20450  0025B2  25B0               	addwf	_vscpSize& (0+255),w,b
 20451  0025B4  0100               	movlb	0	; () banked
 20452  0025B6  6F94               	movwf	??_receivePrintEventVerbose& (0+255),b
 20453  0025B8  6B95               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 20454  0025BA  0EFF               	movlw	255
 20455  0025BC  2395               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 20456  0025BE  51A5               	movf	receivePrintEventVerbose@i& (0+255),w,b
 20457  0025C0  6F96               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 20458  0025C2  6B97               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 20459  0025C4  5197               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 20460  0025C6  0A80               	xorlw	128
 20461  0025C8  6F98               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 20462  0025CA  5194               	movf	??_receivePrintEventVerbose& (0+255),w,b
 20463  0025CC  5D96               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 20464  0025CE  5195               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 20465  0025D0  0A80               	xorlw	128
 20466  0025D2  5998               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 20467  0025D4  E206               	bc	l10821
 20468                           
 20469                           ; BSR set to: 0
 20470                           ;main.c: 1726: putsUSART((char *) ",");
 20471  0025D6  0E7F               	movlw	high STR_29
 20472  0025D8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20473  0025DA  0EF5               	movlw	low STR_29
 20474  0025DC  6F61               	movwf	?_putsUSART& (0+255),b
 20475  0025DE  EC89  F027         	call	_putsUSART	;wreg free
 20476  0025E2                     l10821:
 20477  0025E2  0100               	movlb	0	; () banked
 20478  0025E4  2BA5               	incf	receivePrintEventVerbose@i& (0+255),f,b
 20479  0025E6                     l10823:
 20480                           
 20481                           ; BSR set to: 0
 20482  0025E6  0101               	movlb	1	; () banked
 20483  0025E8  51B0               	movf	_vscpSize& (0+255),w,b
 20484  0025EA  0100               	movlb	0	; () banked
 20485  0025EC  5DA5               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 20486  0025EE  E208               	bc	l896
 20487  0025F0  D7B6               	goto	l889
 20488  0025F2                     l10825:
 20489                           
 20490                           ; BSR set to: 1
 20491                           ;main.c: 1730: putsUSART((char *) ",Data=none");
 20492  0025F2  0E7E               	movlw	high STR_150
 20493  0025F4  0100               	movlb	0	; () banked
 20494  0025F6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20495  0025F8  0E92               	movlw	low STR_150
 20496  0025FA  6F61               	movwf	?_putsUSART& (0+255),b
 20497  0025FC  EC89  F027         	call	_putsUSART	;wreg free
 20498  002600                     l896:
 20499                           
 20500                           ;main.c: 1731: }
 20501                           ;main.c: 1732: putsUSART((char *) ">\r\n");
 20502  002600  0E7F               	movlw	high STR_151
 20503  002602  0100               	movlb	0	; () banked
 20504  002604  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20505  002606  0ED5               	movlw	low STR_151
 20506  002608  6F61               	movwf	?_putsUSART& (0+255),b
 20507  00260A  EC89  F027         	call	_putsUSART	;wreg free
 20508                           
 20509                           ;main.c: 1733: return 1;
 20510  00260E  0E01               	movlw	1
 20511  002610  D001               	goto	l897
 20512  002612                     l10831:
 20513                           
 20514                           ; BSR set to: 0
 20515                           ;main.c: 1734: }
 20516                           ;main.c: 1736: return 0;
 20517  002612  0E00               	movlw	0
 20518  002614                     l897:
 20519  002614  0012               	return	
 20520  002616                     __end_of_receivePrintEventVerbose:
 20521                           	opt stack 0
 20522                           tblptru	equ	0xFF8
 20523                           tblptrh	equ	0xFF7
 20524                           tblptrl	equ	0xFF6
 20525                           tablat	equ	0xFF5
 20526                           prodh	equ	0xFF4
 20527                           prodl	equ	0xFF3
 20528                           intcon	equ	0xFF2
 20529                           indf0	equ	0xFEF
 20530                           postinc0	equ	0xFEE
 20531                           fsr0h	equ	0xFEA
 20532                           fsr0l	equ	0xFE9
 20533                           wreg	equ	0xFE8
 20534                           indf1	equ	0xFE7
 20535                           postinc1	equ	0xFE6
 20536                           postdec1	equ	0xFE5
 20537                           fsr1h	equ	0xFE2
 20538                           fsr1l	equ	0xFE1
 20539                           indf2	equ	0xFDF
 20540                           postinc2	equ	0xFDE
 20541                           postdec2	equ	0xFDD
 20542                           plusw2	equ	0xFDB
 20543                           fsr2h	equ	0xFDA
 20544                           fsr2l	equ	0xFD9
 20545                           status	equ	0xFD8
 20546                           
 20547 ;; *************** function _getVSCPFrame *****************
 20548 ;; Defined at:
 20549 ;;		line 2738 in file "main.c"
 20550 ;; Parameters:    Size  Location     Type
 20551 ;;  pvscpclass      2   18[BANK0 ] PTR unsigned short 
 20552 ;;		 -> vscpClass(2), 
 20553 ;;  pvscptype       2   20[BANK0 ] PTR unsigned char 
 20554 ;;		 -> vscpType(1), 
 20555 ;;  pNodeId         2   22[BANK0 ] PTR unsigned char 
 20556 ;;		 -> vscpNodeId(1), 
 20557 ;;  pPriority       2   24[BANK0 ] PTR unsigned char 
 20558 ;;		 -> vscpPriority(1), 
 20559 ;;  pSize           2   26[BANK0 ] PTR unsigned char 
 20560 ;;		 -> vscpSize(1), 
 20561 ;;  pData           2   28[BANK0 ] PTR unsigned char 
 20562 ;;		 -> vscpData(8), 
 20563 ;; Auto vars:     Size  Location     Type
 20564 ;;  id              4   34[BANK0 ] unsigned long 
 20565 ;; Return value:  Size  Location     Type
 20566 ;;                  1    wreg      unsigned char 
 20567 ;; Registers used:
 20568 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 20569 ;; Tracked objects:
 20570 ;;		On entry : F/0
 20571 ;;		On exit  : F/0
 20572 ;;		Unchanged: 0/0
 20573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20574 ;;      Params:         0      12       0       0       0       0       0
 20575 ;;      Locals:         0       4       0       0       0       0       0
 20576 ;;      Temps:          0       4       0       0       0       0       0
 20577 ;;      Totals:         0      20       0       0       0       0       0
 20578 ;;Total ram usage:       20 bytes
 20579 ;; Hardware stack levels used:    1
 20580 ;; Hardware stack levels required when called:    5
 20581 ;; This function calls:
 20582 ;;		_getCANFrame
 20583 ;; This function is called by:
 20584 ;;		_receivePrintEventVerbose
 20585 ;;		_readRegister
 20586 ;;		_readRegisterExtended
 20587 ;;		_writeRegisterExtended
 20588 ;; This function uses a non-reentrant model
 20589 ;;
 20590                           
 20591                           	psect	text51
 20592  00489C                     __ptext51:
 20593                           	opt stack 0
 20594  00489C                     _getVSCPFrame:
 20595                           	opt stack 22
 20596                           
 20597                           ; BSR set to: 0
 20598                           ;main.c: 2739: uint32_t id;
 20599                           ;main.c: 2741: if (!getCANFrame(&id, pSize, pData)) {
 20600                           
 20601                           ;incstack = 0
 20602                           ;incstack = 0
 20603  00489C  C07A  F06D         	movff	getVSCPFrame@pSize,?_getCANFrame
 20604  0048A0  C07B  F06E         	movff	getVSCPFrame@pSize+1,?_getCANFrame+1
 20605  0048A4  C07C  F06F         	movff	getVSCPFrame@pData,?_getCANFrame+2
 20606  0048A8  C07D  F070         	movff	getVSCPFrame@pData+1,?_getCANFrame+3
 20607  0048AC  0E82               	movlw	getVSCPFrame@id& (0+255)
 20608  0048AE  ECFB  F025         	call	_getCANFrame
 20609  0048B2  0900               	iorlw	0
 20610  0048B4  E102               	bnz	l12065
 20611                           
 20612                           ; BSR set to: 0
 20613                           ;main.c: 2742: return 0;
 20614  0048B6  0E00               	movlw	0
 20615  0048B8  D033               	goto	l1184
 20616  0048BA                     l12065:
 20617                           
 20618                           ; BSR set to: 0
 20619                           ;main.c: 2743: }
 20620                           ;main.c: 2745: *pNodeId = id & 0x0ff;
 20621  0048BA  C076  FFD9         	movff	getVSCPFrame@pNodeId,fsr2l
 20622  0048BE  C077  FFDA         	movff	getVSCPFrame@pNodeId+1,fsr2h
 20623  0048C2  C082  FFDF         	movff	getVSCPFrame@id,indf2
 20624                           
 20625                           ;main.c: 2746: *pvscptype = (id >> 8) & 0xff;
 20626  0048C6  C074  FFD9         	movff	getVSCPFrame@pvscptype,fsr2l
 20627  0048CA  C075  FFDA         	movff	getVSCPFrame@pvscptype+1,fsr2h
 20628  0048CE  C083  FFDF         	movff	getVSCPFrame@id+1,indf2
 20629                           
 20630                           ; BSR set to: 0
 20631                           ;main.c: 2747: *pvscpclass = (id >> 16) & 0x1ff;
 20632  0048D2  0100               	movlb	0	; () banked
 20633  0048D4  5184               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 20634  0048D6  6F7E               	movwf	??_getVSCPFrame& (0+255),b
 20635  0048D8  0E01               	movlw	1
 20636  0048DA  1585               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 20637  0048DC  6F7F               	movwf	(??_getVSCPFrame+1)& (0+255),b
 20638  0048DE  C072  FFD9         	movff	getVSCPFrame@pvscpclass,fsr2l
 20639  0048E2  C073  FFDA         	movff	getVSCPFrame@pvscpclass+1,fsr2h
 20640  0048E6  C07E  FFDE         	movff	??_getVSCPFrame,postinc2
 20641  0048EA  C07F  FFDD         	movff	??_getVSCPFrame+1,postdec2
 20642                           
 20643                           ; BSR set to: 0
 20644                           ;main.c: 2748: *pPriority = (uint16_t) (0x07 & (id >> 26));
 20645  0048EE  C082  F07E         	movff	getVSCPFrame@id,??_getVSCPFrame
 20646  0048F2  C083  F07F         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 20647  0048F6  C084  F080         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 20648  0048FA  C085  F081         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 20649  0048FE  0E1B               	movlw	27
 20650  004900  D005               	goto	u15650
 20651  004902                     u15655:
 20652  004902  90D8               	bcf	status,0,c
 20653  004904  3381               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 20654  004906  3380               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 20655  004908  337F               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 20656  00490A  337E               	rrcf	??_getVSCPFrame& (0+255),f,b
 20657  00490C                     u15650:
 20658  00490C  2EE8               	decfsz	wreg,f,c
 20659  00490E  D7F9               	goto	u15655
 20660  004910  517E               	movf	??_getVSCPFrame& (0+255),w,b
 20661  004912  0B07               	andlw	7
 20662  004914  C078  FFD9         	movff	getVSCPFrame@pPriority,fsr2l
 20663  004918  C079  FFDA         	movff	getVSCPFrame@pPriority+1,fsr2h
 20664  00491C  6EDF               	movwf	indf2,c
 20665                           
 20666                           ; BSR set to: 0
 20667                           ;main.c: 2750: return 1;
 20668  00491E  0E01               	movlw	1
 20669  004920                     l1184:
 20670                           
 20671                           ; BSR set to: 0
 20672  004920  0012               	return	
 20673  004922                     __end_of_getVSCPFrame:
 20674                           	opt stack 0
 20675                           tblptru	equ	0xFF8
 20676                           tblptrh	equ	0xFF7
 20677                           tblptrl	equ	0xFF6
 20678                           tablat	equ	0xFF5
 20679                           prodh	equ	0xFF4
 20680                           prodl	equ	0xFF3
 20681                           intcon	equ	0xFF2
 20682                           indf0	equ	0xFEF
 20683                           postinc0	equ	0xFEE
 20684                           fsr0h	equ	0xFEA
 20685                           fsr0l	equ	0xFE9
 20686                           wreg	equ	0xFE8
 20687                           indf1	equ	0xFE7
 20688                           postinc1	equ	0xFE6
 20689                           postdec1	equ	0xFE5
 20690                           fsr1h	equ	0xFE2
 20691                           fsr1l	equ	0xFE1
 20692                           indf2	equ	0xFDF
 20693                           postinc2	equ	0xFDE
 20694                           postdec2	equ	0xFDD
 20695                           plusw2	equ	0xFDB
 20696                           fsr2h	equ	0xFDA
 20697                           fsr2l	equ	0xFD9
 20698                           status	equ	0xFD8
 20699                           
 20700 ;; *************** function _getCANFrame *****************
 20701 ;; Defined at:
 20702 ;;		line 2774 in file "main.c"
 20703 ;; Parameters:    Size  Location     Type
 20704 ;;  pid             1    wreg     PTR unsigned long 
 20705 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@id(4), 
 20706 ;;  pdlc            2   13[BANK0 ] PTR unsigned char 
 20707 ;;		 -> receivePrintEventSLCAN@dlc(1), receivePrintEventCANAL@dlc(1), vscpSize(1), 
 20708 ;;  pdata           2   15[BANK0 ] PTR unsigned char 
 20709 ;;		 -> receivePrintEventCANAL@data(8), vscpData(8), 
 20710 ;; Auto vars:     Size  Location     Type
 20711 ;;  pid             1   17[BANK0 ] PTR unsigned long 
 20712 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@id(4), 
 20713 ;; Return value:  Size  Location     Type
 20714 ;;                  1    wreg      unsigned char 
 20715 ;; Registers used:
 20716 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 20717 ;; Tracked objects:
 20718 ;;		On entry : F/0
 20719 ;;		On exit  : F/0
 20720 ;;		Unchanged: 0/0
 20721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20722 ;;      Params:         0       4       0       0       0       0       0
 20723 ;;      Locals:         0       1       0       0       0       0       0
 20724 ;;      Temps:          0       0       0       0       0       0       0
 20725 ;;      Totals:         0       5       0       0       0       0       0
 20726 ;;Total ram usage:        5 bytes
 20727 ;; Hardware stack levels used:    1
 20728 ;; Hardware stack levels required when called:    4
 20729 ;; This function calls:
 20730 ;;		_fifo_read
 20731 ;; This function is called by:
 20732 ;;		_receivePrintEventCANAL
 20733 ;;		_receivePrintEventSLCAN
 20734 ;;		_getVSCPFrame
 20735 ;; This function uses a non-reentrant model
 20736 ;;
 20737                           
 20738                           	psect	text52
 20739  004BF6                     __ptext52:
 20740                           	opt stack 0
 20741  004BF6                     _getCANFrame:
 20742                           	opt stack 24
 20743                           
 20744                           ; BSR set to: 0
 20745                           ;incstack = 0
 20746                           ;incstack = 0
 20747                           ;getCANFrame@pid stored from wreg
 20748  004BF6  CFE8 F071          	movff	wreg,getCANFrame@pid
 20749                           
 20750                           ; BSR set to: 0
 20751                           ;main.c: 2795: (INTCONbits.GIE = 0);
 20752  004BFA  9EF2               	bcf	intcon,7,c	;volatile
 20753                           
 20754                           ; BSR set to: 0
 20755                           ;main.c: 2798: if ( 4 != fifo_read( &canInputFifo, (uint8_t *)pid, 4 ) ) {
 20756  004BFC  C071  F060         	movff	getCANFrame@pid,?_fifo_read
 20757  004C00  6B61               	clrf	(?_fifo_read+1)& (0+255),b
 20758  004C02  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 20759  004C04  0E04               	movlw	4
 20760  004C06  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 20761  004C08  0E36               	movlw	_canInputFifo& (0+255)
 20762  004C0A  EC80  F020         	call	_fifo_read
 20763  004C0E  5160               	movf	?_fifo_read& (0+255),w,b
 20764  004C10  0A04               	xorlw	4
 20765  004C12  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 20766  004C14  E003               	bz	l12085
 20767  004C16                     l12079:
 20768                           
 20769                           ; BSR set to: 0
 20770                           ;main.c: 2799: (INTCONbits.GIE = 1);
 20771  004C16  8EF2               	bsf	intcon,7,c	;volatile
 20772                           
 20773                           ; BSR set to: 0
 20774                           ;main.c: 2800: return 0;
 20775  004C18  0E00               	movlw	0
 20776  004C1A  D025               	goto	l1192
 20777  004C1C                     l12085:
 20778                           
 20779                           ; BSR set to: 0
 20780                           ;main.c: 2801: }
 20781                           ;main.c: 2804: if ( 1 != fifo_read( &canInputFifo, pdlc, 1 ) ) {
 20782  004C1C  C06D  F060         	movff	getCANFrame@pdlc,?_fifo_read
 20783  004C20  C06E  F061         	movff	getCANFrame@pdlc+1,?_fifo_read+1
 20784  004C24  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 20785  004C26  0E01               	movlw	1
 20786  004C28  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 20787  004C2A  0E36               	movlw	_canInputFifo& (0+255)
 20788  004C2C  EC80  F020         	call	_fifo_read
 20789  004C30  0560               	decf	?_fifo_read& (0+255),w,b
 20790  004C32  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 20791  004C34  E1F0               	bnz	l12079
 20792                           
 20793                           ; BSR set to: 0
 20794                           ;main.c: 2807: }
 20795                           ;main.c: 2810: if ( *pdlc != fifo_read( &canInputFifo, pdata, *pdlc ) ) {
 20796  004C36  C06F  F060         	movff	getCANFrame@pdata,?_fifo_read
 20797  004C3A  C070  F061         	movff	getCANFrame@pdata+1,?_fifo_read+1
 20798  004C3E  C06D  FFD9         	movff	getCANFrame@pdlc,fsr2l
 20799  004C42  C06E  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 20800  004C46  50DF               	movf	indf2,w,c
 20801  004C48  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 20802  004C4A  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 20803  004C4C  0E36               	movlw	_canInputFifo& (0+255)
 20804  004C4E  EC80  F020         	call	_fifo_read
 20805  004C52  C06D  FFD9         	movff	getCANFrame@pdlc,fsr2l
 20806  004C56  C06E  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 20807  004C5A  50DF               	movf	indf2,w,c
 20808  004C5C  1960               	xorwf	?_fifo_read& (0+255),w,b
 20809  004C5E  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 20810  004C60  E1DA               	bnz	l12079
 20811                           
 20812                           ; BSR set to: 0
 20813                           ;main.c: 2813: }
 20814                           ;main.c: 2815: (INTCONbits.GIE = 1);
 20815  004C62  8EF2               	bsf	intcon,7,c	;volatile
 20816                           
 20817                           ; BSR set to: 0
 20818                           ;main.c: 2817: return 1;
 20819  004C64  0E01               	movlw	1
 20820  004C66                     l1192:
 20821                           
 20822                           ; BSR set to: 0
 20823  004C66  0012               	return	
 20824  004C68                     __end_of_getCANFrame:
 20825                           	opt stack 0
 20826                           tblptru	equ	0xFF8
 20827                           tblptrh	equ	0xFF7
 20828                           tblptrl	equ	0xFF6
 20829                           tablat	equ	0xFF5
 20830                           prodh	equ	0xFF4
 20831                           prodl	equ	0xFF3
 20832                           intcon	equ	0xFF2
 20833                           indf0	equ	0xFEF
 20834                           postinc0	equ	0xFEE
 20835                           fsr0h	equ	0xFEA
 20836                           fsr0l	equ	0xFE9
 20837                           wreg	equ	0xFE8
 20838                           indf1	equ	0xFE7
 20839                           postinc1	equ	0xFE6
 20840                           postdec1	equ	0xFE5
 20841                           fsr1h	equ	0xFE2
 20842                           fsr1l	equ	0xFE1
 20843                           indf2	equ	0xFDF
 20844                           postinc2	equ	0xFDE
 20845                           postdec2	equ	0xFDD
 20846                           plusw2	equ	0xFDB
 20847                           fsr2h	equ	0xFDA
 20848                           fsr2l	equ	0xFD9
 20849                           status	equ	0xFD8
 20850                           
 20851 ;; *************** function _fifo_read *****************
 20852 ;; Defined at:
 20853 ;;		line 29 in file "fifo.c"
 20854 ;; Parameters:    Size  Location     Type
 20855 ;;  f               1    wreg     PTR struct .
 20856 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 20857 ;;  buf             2    0[BANK0 ] PTR void 
 20858 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@dlc(1), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@data(8), 
 20859 ;;		 -> receivePrintEventCANAL@dlc(1), receivePrintEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), 
 20860 ;;		 -> vscpData(8), vscpSize(1), doModeVerbose@c(1), main@c(1), 
 20861 ;;  nbytes          2    2[BANK0 ] unsigned short 
 20862 ;; Auto vars:     Size  Location     Type
 20863 ;;  f               1   12[BANK0 ] PTR struct .
 20864 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 20865 ;;  i               2   10[BANK0 ] unsigned short 
 20866 ;;  p               2    8[BANK0 ] PTR unsigned char 
 20867 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@dlc(1), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@data(8), 
 20868 ;;		 -> receivePrintEventCANAL@dlc(1), receivePrintEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), 
 20869 ;;		 -> vscpData(8), vscpSize(1), doModeVerbose@c(1), main@c(1), 
 20870 ;; Return value:  Size  Location     Type
 20871 ;;                  2    0[BANK0 ] unsigned short 
 20872 ;; Registers used:
 20873 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 20874 ;; Tracked objects:
 20875 ;;		On entry : F/0
 20876 ;;		On exit  : F/0
 20877 ;;		Unchanged: 0/0
 20878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20879 ;;      Params:         0       4       0       0       0       0       0
 20880 ;;      Locals:         0       5       0       0       0       0       0
 20881 ;;      Temps:          0       4       0       0       0       0       0
 20882 ;;      Totals:         0      13       0       0       0       0       0
 20883 ;;Total ram usage:       13 bytes
 20884 ;; Hardware stack levels used:    1
 20885 ;; Hardware stack levels required when called:    3
 20886 ;; This function calls:
 20887 ;;		Nothing
 20888 ;; This function is called by:
 20889 ;;		_main
 20890 ;;		_doModeVerbose
 20891 ;;		_doModeVscp
 20892 ;;		_doModeSLCAN
 20893 ;;		_getCANFrame
 20894 ;; This function uses a non-reentrant model
 20895 ;;
 20896                           
 20897                           	psect	text53
 20898  004100                     __ptext53:
 20899                           	opt stack 0
 20900  004100                     _fifo_read:
 20901                           	opt stack 24
 20902                           
 20903                           ; BSR set to: 0
 20904                           ;incstack = 0
 20905                           ;incstack = 0
 20906                           ;fifo_read@f stored from wreg
 20907  004100  CFE8 F06C          	movff	wreg,fifo_read@f
 20908                           
 20909                           ; BSR set to: 0
 20910                           ;fifo.c: 30: uint16_t i;
 20911                           ;fifo.c: 31: uint8_t *p;
 20912                           ;fifo.c: 32: p = buf;
 20913  004104  C060  F068         	movff	fifo_read@buf,fifo_read@p
 20914  004108  C061  F069         	movff	fifo_read@buf+1,fifo_read@p+1
 20915                           
 20916                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 20917  00410C  6B6A               	clrf	fifo_read@i& (0+255),b
 20918  00410E  6B6B               	clrf	(fifo_read@i+1)& (0+255),b
 20919  004110  D03E               	goto	l9651
 20920  004112                     l9637:
 20921                           
 20922                           ; BSR set to: 0
 20923                           ;fifo.c: 36: if (f->tail != f->head) {
 20924  004112  516C               	movf	fifo_read@f& (0+255),w,b
 20925  004114  6ED9               	movwf	fsr2l,c
 20926  004116  6ADA               	clrf	fsr2h,c
 20927  004118  0E02               	movlw	2
 20928  00411A  D843               	call	PL32	;call to abstracted procedure
 20929  00411C  B4D8               	btfsc	status,2,c
 20930  00411E  18E7               	xorwf	indf1,w,c
 20931  004120  E02F               	bz	l1442
 20932                           
 20933                           ; BSR set to: 0
 20934                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 20935  004122  D84E               	call	PL100	;call to abstracted procedure
 20936  004124  CFDE F064          	movff	postinc2,??_fifo_read
 20937  004128  CFDD F065          	movff	postdec2,??_fifo_read+1
 20938  00412C  516C               	movf	fifo_read@f& (0+255),w,b
 20939  00412E  6ED9               	movwf	fsr2l,c
 20940  004130  6ADA               	clrf	fsr2h,c
 20941  004132  CFDE F066          	movff	postinc2,??_fifo_read+2
 20942  004136  CFDD F067          	movff	postdec2,??_fifo_read+3
 20943  00413A  5164               	movf	??_fifo_read& (0+255),w,b
 20944  00413C  2566               	addwf	(??_fifo_read+2)& (0+255),w,b
 20945  00413E  6ED9               	movwf	fsr2l,c
 20946  004140  5165               	movf	(??_fifo_read+1)& (0+255),w,b
 20947  004142  2167               	addwfc	(??_fifo_read+3)& (0+255),w,b
 20948  004144  6EDA               	movwf	fsr2h,c
 20949  004146  C068  FFE1         	movff	fifo_read@p,fsr1l
 20950  00414A  C069  FFE2         	movff	fifo_read@p+1,fsr1h
 20951  00414E  CFDF FFE7          	movff	indf2,indf1
 20952                           
 20953                           ; BSR set to: 0
 20954  004152  4B68               	infsnz	fifo_read@p& (0+255),f,b
 20955  004154  2B69               	incf	(fifo_read@p+1)& (0+255),f,b
 20956                           
 20957                           ; BSR set to: 0
 20958                           ;fifo.c: 38: f->tail++;
 20959  004156  516C               	movf	fifo_read@f& (0+255),w,b
 20960  004158  6ED9               	movwf	fsr2l,c
 20961  00415A  6ADA               	clrf	fsr2h,c
 20962  00415C  0E04               	movlw	4
 20963  00415E  26D9               	addwf	fsr2l,f,c
 20964  004160  6ADA               	clrf	fsr2h,c
 20965  004162  2ADE               	incf	postinc2,f,c
 20966  004164  0E00               	movlw	0
 20967  004166  22DD               	addwfc	postdec2,f,c
 20968                           
 20969                           ; BSR set to: 0
 20970                           ;fifo.c: 39: if (f->tail == f->size) {
 20971  004168  516C               	movf	fifo_read@f& (0+255),w,b
 20972  00416A  6ED9               	movwf	fsr2l,c
 20973  00416C  6ADA               	clrf	fsr2h,c
 20974  00416E  0E06               	movlw	6
 20975  004170  D818               	call	PL32	;call to abstracted procedure
 20976  004172  B4D8               	btfsc	status,2,c
 20977  004174  18E7               	xorwf	indf1,w,c
 20978  004176  E109               	bnz	l9649
 20979                           
 20980                           ; BSR set to: 0
 20981                           ;fifo.c: 40: f->tail = 0;
 20982  004178  D823               	call	PL100	;call to abstracted procedure
 20983  00417A  6ADE               	clrf	postinc2,c
 20984  00417C  6ADD               	clrf	postdec2,c
 20985  00417E  D005               	goto	l9649
 20986  004180                     l1442:
 20987                           
 20988                           ; BSR set to: 0
 20989                           ;fifo.c: 43: else {
 20990                           ;fifo.c: 44: return i;
 20991  004180  C06A  F060         	movff	fifo_read@i,?_fifo_read
 20992  004184  C06B  F061         	movff	fifo_read@i+1,?_fifo_read+1
 20993  004188  D00B               	goto	l1445
 20994  00418A                     l9649:
 20995                           
 20996                           ; BSR set to: 0
 20997  00418A  4B6A               	infsnz	fifo_read@i& (0+255),f,b
 20998  00418C  2B6B               	incf	(fifo_read@i+1)& (0+255),f,b
 20999  00418E                     l9651:
 21000                           
 21001                           ; BSR set to: 0
 21002  00418E  5162               	movf	fifo_read@nbytes& (0+255),w,b
 21003  004190  5D6A               	subwf	fifo_read@i& (0+255),w,b
 21004  004192  5163               	movf	(fifo_read@nbytes+1)& (0+255),w,b
 21005  004194  596B               	subwfb	(fifo_read@i+1)& (0+255),w,b
 21006  004196  E3BD               	bnc	l9637
 21007                           
 21008                           ; BSR set to: 0
 21009                           ;fifo.c: 45: }
 21010                           ;fifo.c: 47: }
 21011                           ;fifo.c: 49: return nbytes;
 21012  004198  C062  F060         	movff	fifo_read@nbytes,?_fifo_read
 21013  00419C  C063  F061         	movff	fifo_read@nbytes+1,?_fifo_read+1
 21014  0041A0                     l1445:
 21015                           
 21016                           ; BSR set to: 0
 21017  0041A0  0012               	return	
 21018  0041A2                     __end_of_fifo_read:
 21019                           	opt stack 0
 21020  0041A2                     PL32:
 21021                           	opt stack 24
 21022  0041A2  26D9               	addwf	fsr2l,f,c
 21023  0041A4  6ADA               	clrf	fsr2h,c
 21024  0041A6  516C               	movf	fifo_read@f& (0+255),w,b
 21025  0041A8  6EE1               	movwf	fsr1l,c
 21026  0041AA  6AE2               	clrf	fsr1h,c
 21027  0041AC  0E04               	movlw	4
 21028  0041AE  26E1               	addwf	fsr1l,f,c
 21029  0041B0  6AE2               	clrf	fsr1h,c
 21030  0041B2  52E6               	movf	postinc1,f,c
 21031  0041B4  52DE               	movf	postinc2,f,c
 21032  0041B6  50DD               	movf	postdec2,w,c
 21033  0041B8  18E5               	xorwf	postdec1,w,c
 21034  0041BA  CFDF FFE8          	movff	indf2,wreg
 21035  0041BE  0012               	return	
 21036  0041C0                     __end_ofPL32:
 21037                           	opt stack 0
 21038  0041C0                     PL100:
 21039                           	opt stack 24
 21040  0041C0  516C               	movf	fifo_read@f& (0+255),w,b
 21041  0041C2  6ED9               	movwf	fsr2l,c
 21042  0041C4  6ADA               	clrf	fsr2h,c
 21043  0041C6  0E04               	movlw	4
 21044  0041C8  26D9               	addwf	fsr2l,f,c
 21045  0041CA  6ADA               	clrf	fsr2h,c
 21046  0041CC  0012               	return	
 21047  0041CE                     __end_ofPL100:
 21048                           	opt stack 0
 21049                           tblptru	equ	0xFF8
 21050                           tblptrh	equ	0xFF7
 21051                           tblptrl	equ	0xFF6
 21052                           tablat	equ	0xFF5
 21053                           prodh	equ	0xFF4
 21054                           prodl	equ	0xFF3
 21055                           intcon	equ	0xFF2
 21056                           indf0	equ	0xFEF
 21057                           postinc0	equ	0xFEE
 21058                           fsr0h	equ	0xFEA
 21059                           fsr0l	equ	0xFE9
 21060                           wreg	equ	0xFE8
 21061                           indf1	equ	0xFE7
 21062                           postinc1	equ	0xFE6
 21063                           postdec1	equ	0xFE5
 21064                           fsr1h	equ	0xFE2
 21065                           fsr1l	equ	0xFE1
 21066                           indf2	equ	0xFDF
 21067                           postinc2	equ	0xFDE
 21068                           postdec2	equ	0xFDD
 21069                           plusw2	equ	0xFDB
 21070                           fsr2h	equ	0xFDA
 21071                           fsr2l	equ	0xFD9
 21072                           status	equ	0xFD8
 21073                           
 21074 ;; *************** function _sprintf *****************
 21075 ;; Defined at:
 21076 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 21077 ;; Parameters:    Size  Location     Type
 21078 ;;  sp              2   22[BANK0 ] PTR unsigned char 
 21079 ;;		 -> wrkbuf(80), 
 21080 ;;  f               2   24[BANK0 ] PTR const unsigned char 
 21081 ;;		 -> STR_193(3), STR_192(7), STR_186(3), STR_185(7), 
 21082 ;;		 -> STR_182(4), STR_181(8), STR_178(4), STR_177(8), 
 21083 ;;		 -> STR_174(4), STR_173(8), STR_170(4), STR_169(8), 
 21084 ;;		 -> STR_166(4), STR_165(7), STR_162(4), STR_161(7), 
 21085 ;;		 -> STR_158(4), STR_157(7), STR_154(4), STR_153(7), 
 21086 ;;		 -> STR_148(3), STR_147(7), STR_145(3), STR_144(7), 
 21087 ;;		 -> STR_142(3), STR_141(7), STR_139(3), STR_138(7), 
 21088 ;;		 -> STR_136(3), STR_135(7), STR_133(3), STR_132(7), 
 21089 ;;		 -> STR_80(3), STR_79(7), STR_64(3), STR_63(7), 
 21090 ;;		 -> STR_62(3), STR_61(7), STR_58(3), STR_57(7), 
 21091 ;;		 -> STR_55(3), STR_54(7), STR_53(3), STR_52(7), 
 21092 ;; Auto vars:     Size  Location     Type
 21093 ;;  idx             1   33[BANK0 ] unsigned char 
 21094 ;;  _val            4   45[BANK0 ] struct .
 21095 ;;  flag            2   50[BANK0 ] unsigned short 
 21096 ;;  width           2   43[BANK0 ] int 
 21097 ;;  prec            2   41[BANK0 ] int 
 21098 ;;  c               1   49[BANK0 ] char 
 21099 ;;  ap              1   40[BANK0 ] PTR void [1]
 21100 ;;		 -> ?_sprintf(2), 
 21101 ;; Return value:  Size  Location     Type
 21102 ;;                  2   22[BANK0 ] int 
 21103 ;; Registers used:
 21104 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21105 ;; Tracked objects:
 21106 ;;		On entry : F/0
 21107 ;;		On exit  : F/0
 21108 ;;		Unchanged: 0/0
 21109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21110 ;;      Params:         0       8       0       0       0       0       0
 21111 ;;      Locals:         0      19       0       0       0       0       0
 21112 ;;      Temps:          0       3       0       0       0       0       0
 21113 ;;      Totals:         0      30       0       0       0       0       0
 21114 ;;Total ram usage:       30 bytes
 21115 ;; Hardware stack levels used:    1
 21116 ;; Hardware stack levels required when called:    4
 21117 ;; This function calls:
 21118 ;;		_isdigit
 21119 ;;		___lldiv
 21120 ;;		___llmod
 21121 ;;		___wmul
 21122 ;; This function is called by:
 21123 ;;		_doModeVerbose
 21124 ;;		_receivePrintEventVerbose
 21125 ;;		_printStatistics
 21126 ;;		_printErrors
 21127 ;; This function uses a non-reentrant model
 21128 ;;
 21129                           
 21130                           	psect	text54
 21131  0015D0                     __ptext54:
 21132                           	opt stack 0
 21133  0015D0                     _sprintf:
 21134                           	opt stack 25
 21135                           
 21136                           ; BSR set to: 0
 21137                           ;doprnt.c: 494: va_list ap;
 21138                           ;doprnt.c: 499: signed char c;
 21139                           ;doprnt.c: 501: int width;
 21140                           ;doprnt.c: 504: int prec;
 21141                           ;doprnt.c: 508: unsigned short flag;
 21142                           ;doprnt.c: 527: union {
 21143                           ;doprnt.c: 528: unsigned long _val;
 21144                           ;doprnt.c: 529: struct {
 21145                           ;doprnt.c: 530: const char * _cp;
 21146                           ;doprnt.c: 531: unsigned _len;
 21147                           ;doprnt.c: 532: } _str;
 21148                           ;doprnt.c: 533: } _val;
 21149                           ;doprnt.c: 542: *ap = __va_start();
 21150                           
 21151                           ; BSR set to: 0
 21152                           ;incstack = 0
 21153                           ;incstack = 0
 21154  0015D0  0E7A               	movlw	low (?_sprintf+4)
 21155  0015D2  6F88               	movwf	sprintf@ap& (0+255),b
 21156                           
 21157                           ;doprnt.c: 545: while(c = *f++) {
 21158  0015D4  D32C               	goto	l11521
 21159  0015D6                     l11187:
 21160                           
 21161                           ; BSR set to: 0
 21162                           ;doprnt.c: 547: if(c != '%')
 21163  0015D6  5191               	movf	sprintf@c& (0+255),w,b
 21164  0015D8  0A25               	xorlw	37
 21165  0015DA  E009               	bz	l1550
 21166                           
 21167                           ; BSR set to: 0
 21168                           ;doprnt.c: 549: {
 21169                           ;doprnt.c: 550: ((*sp++ = (c)));
 21170  0015DC  C076  FFD9         	movff	sprintf@sp,fsr2l
 21171  0015E0  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 21172  0015E4  C091  FFDF         	movff	sprintf@c,indf2
 21173                           
 21174                           ; BSR set to: 0
 21175  0015E8  4B76               	infsnz	sprintf@sp& (0+255),f,b
 21176  0015EA  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 21177                           
 21178                           ;doprnt.c: 551: continue;
 21179  0015EC  D320               	goto	l11521
 21180  0015EE                     l1550:
 21181                           
 21182                           ; BSR set to: 0
 21183                           ;doprnt.c: 552: }
 21184                           ;doprnt.c: 555: width = 0;
 21185  0015EE  6B8B               	clrf	sprintf@width& (0+255),b
 21186  0015F0  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 21187                           
 21188                           ;doprnt.c: 557: flag = 0;
 21189  0015F2  6B92               	clrf	sprintf@flag& (0+255),b
 21190  0015F4  6B93               	clrf	(sprintf@flag+1)& (0+255),b
 21191  0015F6  D009               	goto	l11203
 21192  0015F8                     l11193:
 21193                           
 21194                           ; BSR set to: 0
 21195                           ;doprnt.c: 563: flag |= 0x08;
 21196  0015F8  8792               	bsf	sprintf@flag& (0+255),3,b
 21197  0015FA  D005               	goto	L33
 21198  0015FC                     l11195:
 21199                           
 21200                           ; BSR set to: 0
 21201                           ;doprnt.c: 570: flag |= 0x01;
 21202  0015FC  8192               	bsf	sprintf@flag& (0+255),0,b
 21203  0015FE  D003               	goto	L33
 21204  001600                     l11197:
 21205                           
 21206                           ; BSR set to: 0
 21207                           ;doprnt.c: 583: flag |= 0x800;
 21208  001600  8793               	bsf	(sprintf@flag+1)& (0+255),3,b
 21209  001602  D001               	goto	L33
 21210  001604                     l11199:
 21211                           
 21212                           ; BSR set to: 0
 21213                           ;doprnt.c: 589: flag |= 0x04;
 21214  001604  8592               	bsf	sprintf@flag& (0+255),2,b
 21215  001606                     L33:
 21216                           
 21217                           ;doprnt.c: 590: f++;
 21218  001606  4B78               	infsnz	sprintf@f& (0+255),f,b
 21219  001608  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 21220  00160A                     l11203:
 21221                           
 21222                           ; BSR set to: 0
 21223  00160A  C078  FFF6         	movff	sprintf@f,tblptrl
 21224  00160E  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21225  001612  0008               	tblrd		*
 21226  001614  50F5               	movf	tablat,w,c
 21227                           
 21228                           ; Switch size 1, requested type "space"
 21229                           ; Number of cases is 4, Range of values is 32 to 48
 21230                           ; switch strategies available:
 21231                           ; Name         Instructions Cycles
 21232                           ; simple_byte           13     7 (average)
 21233                           ;	Chosen strategy is simple_byte
 21234  001616  0A20               	xorlw	32	; case 32
 21235  001618  E0F1               	bz	l11195
 21236  00161A  0A03               	xorlw	3	; case 35
 21237  00161C  E0F1               	bz	l11197
 21238  00161E  0A0E               	xorlw	14	; case 45
 21239  001620  E0EB               	bz	l11193
 21240  001622  0A1D               	xorlw	29	; case 48
 21241  001624  E0EF               	bz	l11199
 21242                           
 21243                           ; BSR set to: 0
 21244                           ;doprnt.c: 602: if(flag & 0x08)
 21245  001626  B792               	btfsc	sprintf@flag& (0+255),3,b
 21246                           
 21247                           ; BSR set to: 0
 21248                           ;doprnt.c: 603: flag &= ~0x04;
 21249  001628  9592               	bcf	sprintf@flag& (0+255),2,b
 21250                           
 21251                           ; BSR set to: 0
 21252                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 21253  00162A  C078  FFF6         	movff	sprintf@f,tblptrl
 21254  00162E  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21255  001632  0008               	tblrd		*
 21256  001634  50F5               	movf	tablat,w,c
 21257  001636  EC10  F02A         	call	_isdigit
 21258  00163A  E325               	bnc	l11219
 21259                           
 21260                           ; BSR set to: 0
 21261                           ;doprnt.c: 607: width = 0;
 21262  00163C  6B8B               	clrf	sprintf@width& (0+255),b
 21263  00163E  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 21264  001640                     l11211:
 21265                           
 21266                           ; BSR set to: 0
 21267                           ;doprnt.c: 609: width *= 10;
 21268  001640  C08B  F060         	movff	sprintf@width,?___wmul
 21269  001644  C08C  F061         	movff	sprintf@width+1,?___wmul+1
 21270  001648  6B63               	clrf	(?___wmul+3)& (0+255),b
 21271  00164A  0E0A               	movlw	10
 21272  00164C  6F62               	movwf	(?___wmul+2)& (0+255),b
 21273  00164E  EC9E  F029         	call	___wmul	;wreg free
 21274  001652  C060  F08B         	movff	?___wmul,sprintf@width
 21275  001656  C061  F08C         	movff	?___wmul+1,sprintf@width+1
 21276                           
 21277                           ; BSR set to: 0
 21278                           ;doprnt.c: 610: width += *f++ - '0';
 21279  00165A  C078  FFF6         	movff	sprintf@f,tblptrl
 21280  00165E  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21281  001662  0008               	tblrd		*
 21282  001664  CFF5 F07E          	movff	tablat,??_sprintf
 21283  001668  0ED0               	movlw	208
 21284  00166A  257E               	addwf	??_sprintf& (0+255),w,b
 21285  00166C  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 21286  00166E  6B80               	clrf	(??_sprintf+2)& (0+255),b
 21287  001670  0EFF               	movlw	255
 21288  001672  2380               	addwfc	(??_sprintf+2)& (0+255),f,b
 21289  001674  517F               	movf	(??_sprintf+1)& (0+255),w,b
 21290  001676  278B               	addwf	sprintf@width& (0+255),f,b
 21291  001678  5180               	movf	(??_sprintf+2)& (0+255),w,b
 21292  00167A  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 21293                           
 21294                           ; BSR set to: 0
 21295                           
 21296                           ; BSR set to: 0
 21297                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 21298  00167C  DB36               	call	PL82	;call to abstracted procedure
 21299  00167E  EC10  F02A         	call	_isdigit
 21300  001682  E314               	bnc	l11227
 21301  001684  D7DD               	goto	l11211
 21302  001686                     l11219:
 21303                           
 21304                           ; BSR set to: 0
 21305  001686  C078  FFF6         	movff	sprintf@f,tblptrl
 21306  00168A  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21307  00168E  0008               	tblrd		*
 21308  001690  50F5               	movf	tablat,w,c
 21309  001692  0A2A               	xorlw	42
 21310  001694  E10B               	bnz	l11227
 21311                           
 21312                           ; BSR set to: 0
 21313                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 21314  001696  5188               	movf	sprintf@ap& (0+255),w,b
 21315  001698  6ED9               	movwf	fsr2l,c
 21316  00169A  6ADA               	clrf	fsr2h,c
 21317  00169C  CFDE F08B          	movff	postinc2,sprintf@width
 21318  0016A0  CFDD F08C          	movff	postdec2,sprintf@width+1
 21319                           
 21320                           ; BSR set to: 0
 21321  0016A4  0E02               	movlw	2
 21322  0016A6  2788               	addwf	sprintf@ap& (0+255),f,b
 21323                           
 21324                           ; BSR set to: 0
 21325                           ;doprnt.c: 615: f++;
 21326  0016A8  4B78               	infsnz	sprintf@f& (0+255),f,b
 21327  0016AA  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 21328  0016AC                     l11227:
 21329                           
 21330                           ; BSR set to: 0
 21331                           ;doprnt.c: 617: }
 21332                           ;doprnt.c: 620: if(*f == '.') {
 21333  0016AC  C078  FFF6         	movff	sprintf@f,tblptrl
 21334  0016B0  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21335  0016B4  0008               	tblrd		*
 21336  0016B6  50F5               	movf	tablat,w,c
 21337  0016B8  0A2E               	xorlw	46
 21338  0016BA  E137               	bnz	l1566
 21339                           
 21340                           ; BSR set to: 0
 21341                           ;doprnt.c: 621: flag |= 0x4000;
 21342  0016BC  8D93               	bsf	(sprintf@flag+1)& (0+255),6,b
 21343                           
 21344                           ;doprnt.c: 622: f++;
 21345                           
 21346                           ; BSR set to: 0
 21347                           ;doprnt.c: 624: if(*f == '*') {
 21348  0016BE  DB15               	call	PL82	;call to abstracted procedure
 21349  0016C0  0A2A               	xorlw	42
 21350  0016C2  E10C               	bnz	l1567
 21351                           
 21352                           ; BSR set to: 0
 21353                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 21354  0016C4  5188               	movf	sprintf@ap& (0+255),w,b
 21355  0016C6  6ED9               	movwf	fsr2l,c
 21356  0016C8  6ADA               	clrf	fsr2h,c
 21357  0016CA  CFDE F089          	movff	postinc2,sprintf@prec
 21358  0016CE  CFDD F08A          	movff	postdec2,sprintf@prec+1
 21359                           
 21360                           ; BSR set to: 0
 21361  0016D2  0E02               	movlw	2
 21362  0016D4  2788               	addwf	sprintf@ap& (0+255),f,b
 21363                           
 21364                           ; BSR set to: 0
 21365                           ;doprnt.c: 626: f++;
 21366  0016D6  4B78               	infsnz	sprintf@f& (0+255),f,b
 21367  0016D8  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 21368                           
 21369                           ;doprnt.c: 627: } else
 21370  0016DA  D088               	goto	l11297
 21371  0016DC                     l1567:
 21372                           
 21373                           ; BSR set to: 0
 21374                           ;doprnt.c: 629: {
 21375                           ;doprnt.c: 630: prec = 0;
 21376  0016DC  6B89               	clrf	sprintf@prec& (0+255),b
 21377  0016DE  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 21378                           
 21379                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 21380  0016E0  D01A               	goto	l11243
 21381  0016E2                     l11239:
 21382                           
 21383                           ; BSR set to: 0
 21384                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 21385  0016E2  C089  F060         	movff	sprintf@prec,?___wmul
 21386  0016E6  C08A  F061         	movff	sprintf@prec+1,?___wmul+1
 21387  0016EA  6B63               	clrf	(?___wmul+3)& (0+255),b
 21388  0016EC  0E0A               	movlw	10
 21389  0016EE  6F62               	movwf	(?___wmul+2)& (0+255),b
 21390  0016F0  EC9E  F029         	call	___wmul	;wreg free
 21391  0016F4  C078  FFF6         	movff	sprintf@f,tblptrl
 21392  0016F8  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21393  0016FC  0008               	tblrd		*
 21394  0016FE  50F5               	movf	tablat,w,c
 21395  001700  2760               	addwf	?___wmul& (0+255),f,b
 21396  001702  0E00               	movlw	0
 21397  001704  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 21398  001706  0ED0               	movlw	208
 21399  001708  2560               	addwf	?___wmul& (0+255),w,b
 21400  00170A  6F89               	movwf	sprintf@prec& (0+255),b
 21401  00170C  0EFF               	movlw	255
 21402  00170E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 21403  001710  6F8A               	movwf	(sprintf@prec+1)& (0+255),b
 21404                           
 21405                           ; BSR set to: 0
 21406  001712  4B78               	infsnz	sprintf@f& (0+255),f,b
 21407  001714  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 21408  001716                     l11243:
 21409                           
 21410                           ; BSR set to: 0
 21411  001716  C078  FFF6         	movff	sprintf@f,tblptrl
 21412  00171A  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21413  00171E  0008               	tblrd		*
 21414  001720  50F5               	movf	tablat,w,c
 21415  001722  EC10  F02A         	call	_isdigit
 21416  001726  E362               	bnc	l11297
 21417  001728  D7DC               	goto	l11239
 21418  00172A                     l1566:
 21419                           
 21420                           ; BSR set to: 0
 21421                           ;doprnt.c: 635: prec = 0;
 21422  00172A  6B89               	clrf	sprintf@prec& (0+255),b
 21423  00172C  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 21424  00172E  D05E               	goto	l11297
 21425  001730                     l11245:
 21426                           
 21427                           ; BSR set to: 0
 21428                           ;doprnt.c: 652: flag |= 0x10;
 21429  001730  8992               	bsf	sprintf@flag& (0+255),4,b
 21430                           
 21431                           ;doprnt.c: 653: goto loop;
 21432  001732  D05C               	goto	l11297
 21433  001734                     l11247:
 21434                           
 21435                           ; BSR set to: 0
 21436                           ;doprnt.c: 700: flag |= 0x40;
 21437  001734  8D92               	bsf	sprintf@flag& (0+255),6,b
 21438                           
 21439                           ;doprnt.c: 702: break;
 21440  001736  D06F               	goto	l11299
 21441  001738                     l11249:
 21442                           
 21443                           ; BSR set to: 0
 21444                           ;doprnt.c: 723: flag |= 0x20;
 21445  001738  8B92               	bsf	sprintf@flag& (0+255),5,b
 21446  00173A                     l1583:
 21447                           
 21448                           ; BSR set to: 0
 21449                           ;doprnt.c: 730: flag |= 0x80;
 21450  00173A  8F92               	bsf	sprintf@flag& (0+255),7,b
 21451                           
 21452                           ;doprnt.c: 732: break;
 21453  00173C  D06C               	goto	l11299
 21454  00173E                     l11251:
 21455                           
 21456                           ; BSR set to: 0
 21457                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 21458  00173E  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 21459  001740  1189               	iorwf	sprintf@prec& (0+255),w,b
 21460  001742  E009               	bz	l11257
 21461                           
 21462                           ; BSR set to: 0
 21463  001744  518E               	movf	(sprintf@_val+1)& (0+255),w,b
 21464  001746  5D89               	subwf	sprintf@prec& (0+255),w,b
 21465  001748  518F               	movf	(sprintf@_val+2)& (0+255),w,b
 21466  00174A  598A               	subwfb	(sprintf@prec+1)& (0+255),w,b
 21467  00174C  E204               	bc	l11257
 21468                           
 21469                           ; BSR set to: 0
 21470                           ;doprnt.c: 763: _val._str._len = prec;
 21471  00174E  C089  F08E         	movff	sprintf@prec,sprintf@_val+1
 21472  001752  C08A  F08F         	movff	sprintf@prec+1,sprintf@_val+2
 21473  001756                     l11257:
 21474                           
 21475                           ; BSR set to: 0
 21476                           ;doprnt.c: 766: if(width > _val._str._len)
 21477  001756  518B               	movf	sprintf@width& (0+255),w,b
 21478  001758  5D8E               	subwf	(sprintf@_val+1)& (0+255),w,b
 21479  00175A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 21480  00175C  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 21481  00175E  E207               	bc	l1586
 21482                           
 21483                           ; BSR set to: 0
 21484                           ;doprnt.c: 767: width -= _val._str._len;
 21485  001760  EE20  F08E         	lfsr	2,sprintf@_val+1
 21486  001764  50DE               	movf	postinc2,w,c
 21487  001766  5F8B               	subwf	sprintf@width& (0+255),f,b
 21488  001768  50DD               	movf	postdec2,w,c
 21489  00176A  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 21490  00176C  D002               	goto	l1587
 21491  00176E                     l1586:
 21492                           
 21493                           ; BSR set to: 0
 21494                           ;doprnt.c: 768: else
 21495                           ;doprnt.c: 769: width = 0;
 21496  00176E  6B8B               	clrf	sprintf@width& (0+255),b
 21497  001770  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 21498  001772                     l1587:
 21499                           
 21500                           ; BSR set to: 0
 21501                           ;doprnt.c: 771: if(!(flag & 0x08))
 21502  001772  A792               	btfss	sprintf@flag& (0+255),3,b
 21503  001774  D004               	goto	l11267
 21504  001776  D015               	goto	l11275
 21505  001778                     l11263:
 21506                           
 21507                           ; BSR set to: 0
 21508                           ;doprnt.c: 774: ((*sp++ = (' ')));
 21509  001778  DAB1               	call	PL62	;call to abstracted procedure
 21510                           
 21511                           ; BSR set to: 0
 21512  00177A  4B76               	infsnz	sprintf@sp& (0+255),f,b
 21513  00177C  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 21514  00177E                     l11267:
 21515                           
 21516                           ; BSR set to: 0
 21517  00177E  078B               	decf	sprintf@width& (0+255),f,b
 21518  001780  DAC2               	call	PL108	;call to abstracted procedure
 21519  001782  B4D8               	btfsc	status,2,c
 21520  001784  298C               	incf	(sprintf@width+1)& (0+255),w,b
 21521  001786  E00D               	bz	l11275
 21522  001788  D7F7               	goto	l11263
 21523  00178A                     l11269:
 21524                           
 21525                           ; BSR set to: 0
 21526                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 21527  00178A  518D               	movf	sprintf@_val& (0+255),w,b
 21528  00178C  6ED9               	movwf	fsr2l,c
 21529  00178E  6ADA               	clrf	fsr2h,c
 21530  001790  C076  FFE1         	movff	sprintf@sp,fsr1l
 21531  001794  C077  FFE2         	movff	sprintf@sp+1,fsr1h
 21532  001798  CFDF FFE7          	movff	indf2,indf1
 21533                           
 21534                           ; BSR set to: 0
 21535  00179C  2B8D               	incf	sprintf@_val& (0+255),f,b
 21536                           
 21537                           ; BSR set to: 0
 21538  00179E  4B76               	infsnz	sprintf@sp& (0+255),f,b
 21539  0017A0  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 21540  0017A2                     l11275:
 21541                           
 21542                           ; BSR set to: 0
 21543  0017A2  078E               	decf	(sprintf@_val+1)& (0+255),f,b
 21544  0017A4  A0D8               	btfss	status,0,c
 21545  0017A6  078F               	decf	(sprintf@_val+2)& (0+255),f,b
 21546  0017A8  0100               	movlb	0	; () banked
 21547  0017AA  298E               	incf	(sprintf@_val+1)& (0+255),w,b
 21548  0017AC  B4D8               	btfsc	status,2,c
 21549  0017AE  298F               	incf	(sprintf@_val+2)& (0+255),w,b
 21550  0017B0  E1EC               	bnz	l11269
 21551                           
 21552                           ; BSR set to: 0
 21553                           ;doprnt.c: 779: if(flag & 0x08)
 21554  0017B2  B792               	btfsc	sprintf@flag& (0+255),3,b
 21555  0017B4  D004               	goto	l11283
 21556  0017B6  D23B               	goto	l11521
 21557  0017B8                     l11279:
 21558                           
 21559                           ; BSR set to: 0
 21560                           ;doprnt.c: 781: ((*sp++ = (' ')));
 21561  0017B8  DA91               	call	PL62	;call to abstracted procedure
 21562                           
 21563                           ; BSR set to: 0
 21564  0017BA  4B76               	infsnz	sprintf@sp& (0+255),f,b
 21565  0017BC  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 21566  0017BE                     l11283:
 21567                           
 21568                           ; BSR set to: 0
 21569  0017BE  078B               	decf	sprintf@width& (0+255),f,b
 21570  0017C0  DAA2               	call	PL108	;call to abstracted procedure
 21571  0017C2  B4D8               	btfsc	status,2,c
 21572  0017C4  298C               	incf	(sprintf@width+1)& (0+255),w,b
 21573  0017C6  E101 D232          	bz	l11521
 21574  0017CA  D7F6               	goto	l11279
 21575  0017CC                     l11285:
 21576                           
 21577                           ; BSR set to: 0
 21578                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 21579  0017CC  5188               	movf	sprintf@ap& (0+255),w,b
 21580  0017CE  6ED9               	movwf	fsr2l,c
 21581  0017D0  6ADA               	clrf	fsr2h,c
 21582  0017D2  50DF               	movf	indf2,w,c
 21583  0017D4  6F91               	movwf	sprintf@c& (0+255),b
 21584                           
 21585                           ; BSR set to: 0
 21586  0017D6  0E02               	movlw	2
 21587  0017D8  2788               	addwf	sprintf@ap& (0+255),f,b
 21588  0017DA                     l11289:
 21589                           
 21590                           ; BSR set to: 0
 21591                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 21592  0017DA  0E91               	movlw	low sprintf@c
 21593  0017DC  6F8D               	movwf	sprintf@_val& (0+255),b
 21594                           
 21595                           ; BSR set to: 0
 21596                           ;doprnt.c: 815: _val._str._len = 1;
 21597  0017DE  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 21598  0017E0  0E01               	movlw	1
 21599  0017E2  6F8E               	movwf	(sprintf@_val+1)& (0+255),b
 21600                           
 21601                           ;doprnt.c: 816: goto dostring;
 21602  0017E4  D7AC               	goto	l11251
 21603  0017E6                     l11293:
 21604                           
 21605                           ; BSR set to: 0
 21606                           ;doprnt.c: 827: flag |= 0xC0;
 21607  0017E6  0EC0               	movlw	192
 21608  0017E8  1392               	iorwf	sprintf@flag& (0+255),f,b
 21609                           
 21610                           ;doprnt.c: 828: break;
 21611  0017EA  D015               	goto	l11299
 21612  0017EC                     l11297:
 21613                           
 21614                           ; BSR set to: 0
 21615  0017EC  DA6C               	call	PL60	;call to abstracted procedure
 21616  0017EE  5191               	movf	sprintf@c& (0+255),w,b
 21617                           
 21618                           ; Switch size 1, requested type "space"
 21619                           ; Number of cases is 9, Range of values is 0 to 120
 21620                           ; switch strategies available:
 21621                           ; Name         Instructions Cycles
 21622                           ; simple_byte           28    15 (average)
 21623                           ;	Chosen strategy is simple_byte
 21624  0017F0  E101 D220          	bz	l11523
 21625  0017F4  0A58               	xorlw	88	; case 88
 21626  0017F6  E0A0               	bz	l11249
 21627  0017F8  0A3B               	xorlw	59	; case 99
 21628  0017FA  E0E8               	bz	l11285
 21629  0017FC  0A07               	xorlw	7	; case 100
 21630  0017FE  E00B               	bz	l11299
 21631  001800  0A0D               	xorlw	13	; case 105
 21632  001802  E009               	bz	l11299
 21633  001804  0A05               	xorlw	5	; case 108
 21634  001806  E094               	bz	l11245
 21635  001808  0A03               	xorlw	3	; case 111
 21636  00180A  E094               	bz	l11247
 21637  00180C  0A1A               	xorlw	26	; case 117
 21638  00180E  E0EB               	bz	l11293
 21639  001810  0A0D               	xorlw	13	; case 120
 21640  001812  E093               	bz	l1583
 21641  001814  D7E2               	goto	l11289
 21642  001816                     l11299:
 21643                           
 21644                           ; BSR set to: 0
 21645                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 21646  001816  5192               	movf	sprintf@flag& (0+255),w,b
 21647  001818  0BC0               	andlw	192
 21648  00181A  E120               	bnz	l1602
 21649                           
 21650                           ; BSR set to: 0
 21651                           ;doprnt.c: 1260: {
 21652                           ;doprnt.c: 1262: if(flag & 0x10)
 21653  00181C  A992               	btfss	sprintf@flag& (0+255),4,b
 21654  00181E  D003               	goto	l11307
 21655                           
 21656                           ; BSR set to: 0
 21657                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 21658  001820  5188               	movf	sprintf@ap& (0+255),w,b
 21659                           
 21660                           ; BSR set to: 0
 21661  001822  DA46               	call	PL52	;call to abstracted procedure
 21662  001824  D00D               	goto	L34
 21663  001826                     l11307:
 21664                           
 21665                           ; BSR set to: 0
 21666                           ;doprnt.c: 1264: else
 21667                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 21668  001826  5188               	movf	sprintf@ap& (0+255),w,b
 21669  001828  6ED9               	movwf	fsr2l,c
 21670  00182A  6ADA               	clrf	fsr2h,c
 21671  00182C  CFDE F08D          	movff	postinc2,sprintf@_val
 21672  001830  CFDD F08E          	movff	postdec2,sprintf@_val+1
 21673  001834  0E00               	movlw	0
 21674  001836  BF8E               	btfsc	(sprintf@_val+1)& (0+255),7,b
 21675  001838  0EFF               	movlw	-1
 21676  00183A  6F8F               	movwf	(sprintf@_val+2)& (0+255),b
 21677  00183C  6F90               	movwf	(sprintf@_val+3)& (0+255),b
 21678                           
 21679                           ; BSR set to: 0
 21680  00183E  0E02               	movlw	2
 21681  001840                     L34:
 21682  001840  2788               	addwf	sprintf@ap& (0+255),f,b
 21683                           
 21684                           ; BSR set to: 0
 21685                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 21686  001842  AF90               	btfss	(sprintf@_val+3)& (0+255),7,b
 21687  001844  D01F               	goto	l11325
 21688                           
 21689                           ; BSR set to: 0
 21690                           ;doprnt.c: 1269: flag |= 0x03;
 21691  001846  0E03               	movlw	3
 21692  001848  1392               	iorwf	sprintf@flag& (0+255),f,b
 21693                           
 21694                           ; BSR set to: 0
 21695                           ;doprnt.c: 1270: _val._val = -_val._val;
 21696  00184A  1F90               	comf	(sprintf@_val+3)& (0+255),f,b
 21697  00184C  1F8F               	comf	(sprintf@_val+2)& (0+255),f,b
 21698  00184E  1F8E               	comf	(sprintf@_val+1)& (0+255),f,b
 21699  001850  6D8D               	negf	sprintf@_val& (0+255),b
 21700  001852  0E00               	movlw	0
 21701  001854  238E               	addwfc	(sprintf@_val+1)& (0+255),f,b
 21702  001856  238F               	addwfc	(sprintf@_val+2)& (0+255),f,b
 21703  001858  2390               	addwfc	(sprintf@_val+3)& (0+255),f,b
 21704  00185A  D014               	goto	l11325
 21705  00185C                     l1602:
 21706                           
 21707                           ; BSR set to: 0
 21708                           ;doprnt.c: 1275: else
 21709                           ;doprnt.c: 1280: {
 21710                           ;doprnt.c: 1288: if(flag & 0x10)
 21711  00185C  A992               	btfss	sprintf@flag& (0+255),4,b
 21712  00185E  D003               	goto	l11321
 21713                           
 21714                           ; BSR set to: 0
 21715                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 21716  001860  5188               	movf	sprintf@ap& (0+255),w,b
 21717                           
 21718                           ; BSR set to: 0
 21719  001862  DA26               	call	PL52	;call to abstracted procedure
 21720  001864  D00E               	goto	L35
 21721  001866                     l11321:
 21722                           
 21723                           ; BSR set to: 0
 21724                           ;doprnt.c: 1290: else
 21725                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 21726  001866  5188               	movf	sprintf@ap& (0+255),w,b
 21727  001868  6ED9               	movwf	fsr2l,c
 21728  00186A  6ADA               	clrf	fsr2h,c
 21729  00186C  CFDE F07E          	movff	postinc2,??_sprintf
 21730  001870  CFDD F07F          	movff	postdec2,??_sprintf+1
 21731  001874  C07E  F08D         	movff	??_sprintf,sprintf@_val
 21732  001878  C07F  F08E         	movff	??_sprintf+1,sprintf@_val+1
 21733  00187C  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 21734  00187E  6B90               	clrf	(sprintf@_val+3)& (0+255),b
 21735                           
 21736                           ; BSR set to: 0
 21737  001880  0E02               	movlw	2
 21738  001882                     L35:
 21739  001882  2788               	addwf	sprintf@ap& (0+255),f,b
 21740  001884                     l11325:
 21741                           
 21742                           ; BSR set to: 0
 21743                           ;doprnt.c: 1294: }
 21744                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 21745  001884  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 21746  001886  1189               	iorwf	sprintf@prec& (0+255),w,b
 21747  001888  E15C               	bnz	l11375
 21748                           
 21749                           ; BSR set to: 0
 21750  00188A  5190               	movf	(sprintf@_val+3)& (0+255),w,b
 21751  00188C  118D               	iorwf	sprintf@_val& (0+255),w,b
 21752  00188E  118E               	iorwf	(sprintf@_val+1)& (0+255),w,b
 21753  001890  118F               	iorwf	(sprintf@_val+2)& (0+255),w,b
 21754  001892  E157               	bnz	l11375
 21755                           
 21756                           ; BSR set to: 0
 21757                           ;doprnt.c: 1298: prec++;
 21758  001894  4B89               	infsnz	sprintf@prec& (0+255),f,b
 21759  001896  2B8A               	incf	(sprintf@prec+1)& (0+255),f,b
 21760  001898  D054               	goto	l11375
 21761  00189A                     l11331:
 21762                           
 21763                           ; BSR set to: 0
 21764                           ;doprnt.c: 1309: case 0xC0:
 21765                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 21766  00189A  0E01               	movlw	1
 21767  00189C  6F91               	movwf	sprintf@c& (0+255),b
 21768  00189E                     l11333:
 21769                           
 21770                           ; BSR set to: 0
 21771  00189E  5191               	movf	sprintf@c& (0+255),w,b
 21772  0018A0  0A0A               	xorlw	10
 21773  0018A2  E058               	bz	l11377
 21774                           
 21775                           ; BSR set to: 0
 21776                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 21777  0018A4  5191               	movf	sprintf@c& (0+255),w,b
 21778  0018A6  0D04               	mullw	4
 21779  0018A8  0E08               	movlw	low _dpowers
 21780  0018AA  24F3               	addwf	prodl,w,c
 21781  0018AC  6EF6               	movwf	tblptrl,c
 21782  0018AE  0E70               	movlw	high _dpowers
 21783  0018B0  20F4               	addwfc	prodh,w,c
 21784  0018B2  6EF7               	movwf	tblptrh,c
 21785  0018B4  0009               	tblrd		*+
 21786  0018B6  50F5               	movf	tablat,w,c
 21787  0018B8  5D8D               	subwf	sprintf@_val& (0+255),w,b
 21788  0018BA  0009               	tblrd		*+
 21789  0018BC  50F5               	movf	tablat,w,c
 21790  0018BE  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 21791  0018C0  0009               	tblrd		*+
 21792  0018C2  50F5               	movf	tablat,w,c
 21793  0018C4  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 21794  0018C6  0009               	tblrd		*+
 21795  0018C8  50F5               	movf	tablat,w,c
 21796  0018CA  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 21797  0018CC  E343               	bnc	l11377
 21798                           
 21799                           ; BSR set to: 0
 21800  0018CE  2B91               	incf	sprintf@c& (0+255),f,b
 21801  0018D0  D7E6               	goto	l11333
 21802  0018D2                     l11345:
 21803                           
 21804                           ; BSR set to: 0
 21805                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 21806  0018D2  0E01               	movlw	1
 21807  0018D4  6F91               	movwf	sprintf@c& (0+255),b
 21808  0018D6                     l11347:
 21809                           
 21810                           ; BSR set to: 0
 21811  0018D6  5191               	movf	sprintf@c& (0+255),w,b
 21812  0018D8  0A08               	xorlw	8
 21813  0018DA  E03C               	bz	l11377
 21814                           
 21815                           ; BSR set to: 0
 21816                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 21817  0018DC  5191               	movf	sprintf@c& (0+255),w,b
 21818  0018DE  0D04               	mullw	4
 21819  0018E0  0E30               	movlw	low _hexpowers
 21820  0018E2  24F3               	addwf	prodl,w,c
 21821  0018E4  6EF6               	movwf	tblptrl,c
 21822  0018E6  0E70               	movlw	high _hexpowers
 21823  0018E8  20F4               	addwfc	prodh,w,c
 21824  0018EA  6EF7               	movwf	tblptrh,c
 21825  0018EC  0009               	tblrd		*+
 21826  0018EE  50F5               	movf	tablat,w,c
 21827  0018F0  5D8D               	subwf	sprintf@_val& (0+255),w,b
 21828  0018F2  0009               	tblrd		*+
 21829  0018F4  50F5               	movf	tablat,w,c
 21830  0018F6  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 21831  0018F8  0009               	tblrd		*+
 21832  0018FA  50F5               	movf	tablat,w,c
 21833  0018FC  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 21834  0018FE  0009               	tblrd		*+
 21835  001900  50F5               	movf	tablat,w,c
 21836  001902  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 21837  001904  E327               	bnc	l11377
 21838                           
 21839                           ; BSR set to: 0
 21840  001906  2B91               	incf	sprintf@c& (0+255),f,b
 21841  001908  D7E6               	goto	l11347
 21842  00190A                     l11359:
 21843                           
 21844                           ; BSR set to: 0
 21845                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 21846  00190A  0E01               	movlw	1
 21847  00190C  6F91               	movwf	sprintf@c& (0+255),b
 21848  00190E                     l11361:
 21849                           
 21850                           ; BSR set to: 0
 21851  00190E  5191               	movf	sprintf@c& (0+255),w,b
 21852  001910  0A0C               	xorlw	12
 21853  001912  E020               	bz	l11377
 21854                           
 21855                           ; BSR set to: 0
 21856                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 21857  001914  5191               	movf	sprintf@c& (0+255),w,b
 21858  001916  0D04               	mullw	4
 21859  001918  0ED8               	movlw	low _octpowers
 21860  00191A  24F3               	addwf	prodl,w,c
 21861  00191C  6EF6               	movwf	tblptrl,c
 21862  00191E  0E6F               	movlw	high _octpowers
 21863  001920  20F4               	addwfc	prodh,w,c
 21864  001922  6EF7               	movwf	tblptrh,c
 21865  001924  0009               	tblrd		*+
 21866  001926  50F5               	movf	tablat,w,c
 21867  001928  5D8D               	subwf	sprintf@_val& (0+255),w,b
 21868  00192A  0009               	tblrd		*+
 21869  00192C  50F5               	movf	tablat,w,c
 21870  00192E  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 21871  001930  0009               	tblrd		*+
 21872  001932  50F5               	movf	tablat,w,c
 21873  001934  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 21874  001936  0009               	tblrd		*+
 21875  001938  50F5               	movf	tablat,w,c
 21876  00193A  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 21877  00193C  E30B               	bnc	l11377
 21878                           
 21879                           ; BSR set to: 0
 21880  00193E  2B91               	incf	sprintf@c& (0+255),f,b
 21881  001940  D7E6               	goto	l11361
 21882  001942                     l11375:
 21883                           
 21884                           ; BSR set to: 0
 21885  001942  5192               	movf	sprintf@flag& (0+255),w,b
 21886  001944  0BC0               	andlw	192
 21887                           
 21888                           ; Switch size 1, requested type "space"
 21889                           ; Number of cases is 4, Range of values is 0 to 192
 21890                           ; switch strategies available:
 21891                           ; Name         Instructions Cycles
 21892                           ; simple_byte           13     7 (average)
 21893                           ;	Chosen strategy is simple_byte
 21894  001946  E0A9               	bz	l11331
 21895  001948  0A40               	xorlw	64	; case 64
 21896  00194A  E0DF               	bz	l11359
 21897  00194C  0AC0               	xorlw	192	; case 128
 21898  00194E  E0C1               	bz	l11345
 21899  001950  0A40               	xorlw	64	; case 192
 21900  001952  E0A3               	bz	l11331
 21901  001954                     l11377:
 21902                           
 21903                           ; BSR set to: 0
 21904                           ;doprnt.c: 1346: if(c < prec)
 21905  001954  0E80               	movlw	128
 21906  001956  BF91               	btfsc	sprintf@c& (0+255),7,b
 21907  001958  0E7F               	movlw	127
 21908  00195A  6F7E               	movwf	??_sprintf& (0+255),b
 21909  00195C  5189               	movf	sprintf@prec& (0+255),w,b
 21910  00195E  5D91               	subwf	sprintf@c& (0+255),w,b
 21911  001960  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 21912  001962  0A80               	xorlw	128
 21913  001964  597E               	subwfb	??_sprintf& (0+255),w,b
 21914  001966  E203               	bc	l11381
 21915                           
 21916                           ; BSR set to: 0
 21917                           ;doprnt.c: 1347: c = prec;
 21918  001968  C089  F091         	movff	sprintf@prec,sprintf@c
 21919  00196C  D00F               	goto	l11385
 21920  00196E                     l11381:
 21921                           
 21922                           ; BSR set to: 0
 21923                           ;doprnt.c: 1348: else if(prec < c)
 21924  00196E  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 21925  001970  0A80               	xorlw	128
 21926  001972  6F7E               	movwf	??_sprintf& (0+255),b
 21927  001974  5191               	movf	sprintf@c& (0+255),w,b
 21928  001976  5D89               	subwf	sprintf@prec& (0+255),w,b
 21929  001978  0E80               	movlw	128
 21930  00197A  BF91               	btfsc	sprintf@c& (0+255),7,b
 21931  00197C  0E7F               	movlw	127
 21932  00197E  597E               	subwfb	??_sprintf& (0+255),w,b
 21933  001980  E205               	bc	l11385
 21934                           
 21935                           ; BSR set to: 0
 21936                           ;doprnt.c: 1349: prec = c;
 21937  001982  5191               	movf	sprintf@c& (0+255),w,b
 21938  001984  6F89               	movwf	sprintf@prec& (0+255),b
 21939  001986  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 21940  001988  BF89               	btfsc	sprintf@prec& (0+255),7,b
 21941  00198A  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 21942  00198C                     l11385:
 21943                           
 21944                           ; BSR set to: 0
 21945                           ;doprnt.c: 1352: if(width && flag & 0x03)
 21946  00198C  518C               	movf	(sprintf@width+1)& (0+255),w,b
 21947  00198E  118B               	iorwf	sprintf@width& (0+255),w,b
 21948  001990  E006               	bz	l11391
 21949                           
 21950                           ; BSR set to: 0
 21951  001992  5192               	movf	sprintf@flag& (0+255),w,b
 21952  001994  0B03               	andlw	3
 21953  001996  E003               	bz	l11391
 21954                           
 21955                           ; BSR set to: 0
 21956                           ;doprnt.c: 1353: width--;
 21957  001998  078B               	decf	sprintf@width& (0+255),f,b
 21958  00199A  A0D8               	btfss	status,0,c
 21959  00199C  078C               	decf	(sprintf@width+1)& (0+255),f,b
 21960  00199E                     l11391:
 21961                           
 21962                           ; BSR set to: 0
 21963                           ;doprnt.c: 1355: if(flag & 0x4000) {
 21964  00199E  AD93               	btfss	(sprintf@flag+1)& (0+255),6,b
 21965  0019A0  D010               	goto	l11397
 21966                           
 21967                           ; BSR set to: 0
 21968                           ;doprnt.c: 1356: if(width > prec)
 21969  0019A2  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 21970  0019A4  0A80               	xorlw	128
 21971  0019A6  6F7E               	movwf	??_sprintf& (0+255),b
 21972  0019A8  518B               	movf	sprintf@width& (0+255),w,b
 21973  0019AA  5D89               	subwf	sprintf@prec& (0+255),w,b
 21974  0019AC  518C               	movf	(sprintf@width+1)& (0+255),w,b
 21975  0019AE  0A80               	xorlw	128
 21976  0019B0  597E               	subwfb	??_sprintf& (0+255),w,b
 21977  0019B2  E205               	bc	l1630
 21978                           
 21979                           ; BSR set to: 0
 21980                           ;doprnt.c: 1357: width -= prec;
 21981  0019B4  5189               	movf	sprintf@prec& (0+255),w,b
 21982  0019B6  5F8B               	subwf	sprintf@width& (0+255),f,b
 21983  0019B8  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 21984  0019BA  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 21985  0019BC  D002               	goto	l11397
 21986  0019BE                     l1630:
 21987                           
 21988                           ; BSR set to: 0
 21989                           ;doprnt.c: 1358: else
 21990                           ;doprnt.c: 1359: width = 0;
 21991  0019BE  6B8B               	clrf	sprintf@width& (0+255),b
 21992  0019C0  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 21993  0019C2                     l11397:
 21994                           
 21995                           ; BSR set to: 0
 21996                           ;doprnt.c: 1360: }
 21997                           ;doprnt.c: 1364: if((flag & (
 21998                           ;doprnt.c: 1366: 0x04|
 21999                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 22000  0019C2  0EC4               	movlw	196
 22001  0019C4  D94D               	call	PL20	;call to abstracted procedure
 22002  0019C6  0E40               	movlw	64
 22003  0019C8  B4D8               	btfsc	status,2,c
 22004  0019CA  197E               	xorwf	??_sprintf& (0+255),w,b
 22005  0019CC  E107               	bnz	l11403
 22006                           
 22007                           ; BSR set to: 0
 22008                           ;doprnt.c: 1369: if(width)
 22009  0019CE  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22010  0019D0  118B               	iorwf	sprintf@width& (0+255),w,b
 22011  0019D2  E018               	bz	l11409
 22012                           
 22013                           ; BSR set to: 0
 22014                           ;doprnt.c: 1370: width--;
 22015  0019D4  078B               	decf	sprintf@width& (0+255),f,b
 22016  0019D6  A0D8               	btfss	status,0,c
 22017  0019D8  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22018  0019DA  D014               	goto	l11409
 22019  0019DC                     l11403:
 22020                           
 22021                           ; BSR set to: 0
 22022                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22023  0019DC  0EC0               	movlw	192
 22024  0019DE  D940               	call	PL20	;call to abstracted procedure
 22025  0019E0  0E80               	movlw	128
 22026  0019E2  B4D8               	btfsc	status,2,c
 22027  0019E4  197E               	xorwf	??_sprintf& (0+255),w,b
 22028  0019E6  E10E               	bnz	l11409
 22029                           
 22030                           ; BSR set to: 0
 22031                           ;doprnt.c: 1379: if(width > 2)
 22032  0019E8  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22033  0019EA  0A80               	xorlw	128
 22034  0019EC  0F80               	addlw	-128
 22035  0019EE  0E03               	movlw	3
 22036  0019F0  B4D8               	btfsc	status,2,c
 22037  0019F2  5D8B               	subwf	sprintf@width& (0+255),w,b
 22038  0019F4  E305               	bnc	l1636
 22039                           
 22040                           ; BSR set to: 0
 22041                           ;doprnt.c: 1380: width -= 2;
 22042  0019F6  0EFE               	movlw	254
 22043  0019F8  278B               	addwf	sprintf@width& (0+255),f,b
 22044  0019FA  0EFF               	movlw	255
 22045  0019FC  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22046  0019FE  D002               	goto	l11409
 22047  001A00                     l1636:
 22048                           
 22049                           ; BSR set to: 0
 22050                           ;doprnt.c: 1381: else
 22051                           ;doprnt.c: 1382: width = 0;
 22052  001A00  6B8B               	clrf	sprintf@width& (0+255),b
 22053  001A02  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22054  001A04                     l11409:
 22055                           
 22056                           ; BSR set to: 0
 22057                           ;doprnt.c: 1383: }
 22058                           ;doprnt.c: 1388: if(width > c)
 22059  001A04  0E80               	movlw	128
 22060  001A06  BF91               	btfsc	sprintf@c& (0+255),7,b
 22061  001A08  0E7F               	movlw	127
 22062  001A0A  6F7E               	movwf	??_sprintf& (0+255),b
 22063  001A0C  518B               	movf	sprintf@width& (0+255),w,b
 22064  001A0E  5D91               	subwf	sprintf@c& (0+255),w,b
 22065  001A10  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22066  001A12  0A80               	xorlw	128
 22067  001A14  597E               	subwfb	??_sprintf& (0+255),w,b
 22068  001A16  E207               	bc	l1638
 22069                           
 22070                           ; BSR set to: 0
 22071                           ;doprnt.c: 1389: width -= c;
 22072  001A18  5191               	movf	sprintf@c& (0+255),w,b
 22073  001A1A  5F8B               	subwf	sprintf@width& (0+255),f,b
 22074  001A1C  0E00               	movlw	0
 22075  001A1E  BF91               	btfsc	sprintf@c& (0+255),7,b
 22076  001A20  0EFF               	movlw	255
 22077  001A22  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22078  001A24  D002               	goto	l1639
 22079  001A26                     l1638:
 22080                           
 22081                           ; BSR set to: 0
 22082                           ;doprnt.c: 1390: else
 22083                           ;doprnt.c: 1391: width = 0;
 22084  001A26  6B8B               	clrf	sprintf@width& (0+255),b
 22085  001A28  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22086  001A2A                     l1639:
 22087                           
 22088                           ; BSR set to: 0
 22089                           ;doprnt.c: 1394: if(flag & 0x04) {
 22090  001A2A  A592               	btfss	sprintf@flag& (0+255),2,b
 22091  001A2C  D03C               	goto	l11447
 22092                           
 22093                           ; BSR set to: 0
 22094                           ;doprnt.c: 1399: if(flag & 0x03)
 22095  001A2E  5192               	movf	sprintf@flag& (0+255),w,b
 22096  001A30  0B03               	andlw	3
 22097  001A32  E009               	bz	l1641
 22098                           
 22099                           ; BSR set to: 0
 22100                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 22101  001A34  C076  FFD9         	movff	sprintf@sp,fsr2l
 22102  001A38  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22103  001A3C  0E2D               	movlw	45
 22104  001A3E  6EDF               	movwf	indf2,c
 22105  001A40                     l11417:
 22106                           
 22107                           ; BSR set to: 0
 22108  001A40  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22109  001A42  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22110  001A44  D022               	goto	l11439
 22111  001A46                     l1641:
 22112                           
 22113                           ; BSR set to: 0
 22114                           ;doprnt.c: 1403: else
 22115                           ;doprnt.c: 1406: if(flag & 0x01)
 22116  001A46  A192               	btfss	sprintf@flag& (0+255),0,b
 22117  001A48  D006               	goto	l11423
 22118                           
 22119                           ; BSR set to: 0
 22120                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 22121  001A4A  C076  FFD9         	movff	sprintf@sp,fsr2l
 22122  001A4E  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22123  001A52  0E20               	movlw	32
 22124  001A54  D7F4               	goto	L36
 22125  001A56                     l11423:
 22126                           
 22127                           ; BSR set to: 0
 22128                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22129  001A56  0EC0               	movlw	192
 22130  001A58  D903               	call	PL20	;call to abstracted procedure
 22131  001A5A  0E80               	movlw	128
 22132  001A5C  B4D8               	btfsc	status,2,c
 22133  001A5E  197E               	xorwf	??_sprintf& (0+255),w,b
 22134  001A60  E114               	bnz	l11439
 22135                           
 22136                           ; BSR set to: 0
 22137                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 22138  001A62  C076  FFD9         	movff	sprintf@sp,fsr2l
 22139  001A66  D94A               	call	PL90	;call to abstracted procedure
 22140                           
 22141                           ; BSR set to: 0
 22142  001A68  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22143  001A6A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22144                           
 22145                           ; BSR set to: 0
 22146                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 22147  001A6C  BB92               	btfsc	sprintf@flag& (0+255),5,b
 22148  001A6E  D003               	goto	l11433
 22149                           
 22150                           ; BSR set to: 0
 22151  001A70  6B83               	clrf	(_sprintf$2161+1)& (0+255),b
 22152  001A72  0E78               	movlw	120
 22153  001A74  D002               	goto	L37
 22154  001A76                     l11433:
 22155                           
 22156                           ; BSR set to: 0
 22157  001A76  6B83               	clrf	(_sprintf$2161+1)& (0+255),b
 22158  001A78  0E58               	movlw	88
 22159  001A7A                     L37:
 22160  001A7A  6F82               	movwf	_sprintf$2161& (0+255),b
 22161                           
 22162                           ; BSR set to: 0
 22163  001A7C  C076  FFD9         	movff	sprintf@sp,fsr2l
 22164  001A80  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22165  001A84  C082  FFDF         	movff	_sprintf$2161,indf2
 22166  001A88  D7DB               	goto	l11417
 22167  001A8A                     l11439:
 22168                           
 22169                           ; BSR set to: 0
 22170                           ;doprnt.c: 1419: }
 22171                           ;doprnt.c: 1422: if(width)
 22172  001A8A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22173  001A8C  118B               	iorwf	sprintf@width& (0+255),w,b
 22174  001A8E  E101 D0B9          	bz	l11511
 22175                           
 22176                           ; BSR set to: 0
 22177                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 22178  001A92  C076  FFD9         	movff	sprintf@sp,fsr2l
 22179  001A96  D932               	call	PL90	;call to abstracted procedure
 22180                           
 22181                           ; BSR set to: 0
 22182  001A98  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22183  001A9A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22184                           
 22185                           ; BSR set to: 0
 22186                           ;doprnt.c: 1425: while(--width);
 22187  001A9C  078B               	decf	sprintf@width& (0+255),f,b
 22188  001A9E  A0D8               	btfss	status,0,c
 22189  001AA0  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22190  001AA2  0100               	movlb	0	; () banked
 22191  001AA4  D7F2               	goto	l11439
 22192  001AA6                     l11447:
 22193                           
 22194                           ; BSR set to: 0
 22195                           ;doprnt.c: 1429: {
 22196                           ;doprnt.c: 1431: if(width
 22197                           ;doprnt.c: 1433: && !(flag & 0x08)
 22198                           ;doprnt.c: 1435: )
 22199  001AA6  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22200  001AA8  118B               	iorwf	sprintf@width& (0+255),w,b
 22201  001AAA  A4D8               	btfss	status,2,c
 22202                           
 22203                           ; BSR set to: 0
 22204  001AAC  B792               	btfsc	sprintf@flag& (0+255),3,b
 22205  001AAE  D004               	goto	l11457
 22206  001AB0                     l11451:
 22207                           
 22208                           ; BSR set to: 0
 22209                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 22210  001AB0  C076  FFD9         	movff	sprintf@sp,fsr2l
 22211                           
 22212                           ; BSR set to: 0
 22213                           
 22214                           ; BSR set to: 0
 22215                           ;doprnt.c: 1438: while(--width);
 22216  001AB4  D8F0               	call	PL42	;call to abstracted procedure
 22217  001AB6  E1FC               	bnz	l11451
 22218  001AB8                     l11457:
 22219                           
 22220                           ; BSR set to: 0
 22221                           ;doprnt.c: 1445: if(flag & 0x03)
 22222  001AB8  5192               	movf	sprintf@flag& (0+255),w,b
 22223  001ABA  0B03               	andlw	3
 22224  001ABC  E009               	bz	l1657
 22225                           
 22226                           ; BSR set to: 0
 22227                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 22228  001ABE  C076  FFD9         	movff	sprintf@sp,fsr2l
 22229  001AC2  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22230  001AC6  0E2D               	movlw	45
 22231  001AC8  6EDF               	movwf	indf2,c
 22232                           
 22233                           ; BSR set to: 0
 22234  001ACA  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22235  001ACC  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22236  001ACE  D008               	goto	l11467
 22237  001AD0                     l1657:
 22238                           
 22239                           ; BSR set to: 0
 22240                           ;doprnt.c: 1450: else if(flag & 0x01)
 22241  001AD0  A192               	btfss	sprintf@flag& (0+255),0,b
 22242  001AD2  D006               	goto	l11467
 22243                           
 22244                           ; BSR set to: 0
 22245                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 22246  001AD4  C076  FFD9         	movff	sprintf@sp,fsr2l
 22247  001AD8  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22248  001ADC  0E20               	movlw	32
 22249  001ADE  D7F4               	goto	L38
 22250  001AE0                     l11467:
 22251                           
 22252                           ; BSR set to: 0
 22253                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 22254  001AE0  0EC0               	movlw	192
 22255  001AE2  D8BE               	call	PL20	;call to abstracted procedure
 22256  001AE4  0E40               	movlw	64
 22257  001AE6  B4D8               	btfsc	status,2,c
 22258  001AE8  197E               	xorwf	??_sprintf& (0+255),w,b
 22259  001AEA  E106               	bnz	l11473
 22260                           
 22261                           ; BSR set to: 0
 22262                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 22263  001AEC  C076  FFD9         	movff	sprintf@sp,fsr2l
 22264  001AF0  D905               	call	PL90	;call to abstracted procedure
 22265  001AF2                     l11471:
 22266                           
 22267                           ; BSR set to: 0
 22268  001AF2  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22269  001AF4  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22270  001AF6  D086               	goto	l11511
 22271  001AF8                     l11473:
 22272                           
 22273                           ; BSR set to: 0
 22274                           ;doprnt.c: 1457: else
 22275                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22276  001AF8  0EC0               	movlw	192
 22277  001AFA  D8B2               	call	PL20	;call to abstracted procedure
 22278  001AFC  0E80               	movlw	128
 22279  001AFE  B4D8               	btfsc	status,2,c
 22280  001B00  197E               	xorwf	??_sprintf& (0+255),w,b
 22281  001B02  E001 D07F          	bnz	l11511
 22282                           
 22283                           ; BSR set to: 0
 22284                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 22285  001B06  C076  FFD9         	movff	sprintf@sp,fsr2l
 22286  001B0A  D8F8               	call	PL90	;call to abstracted procedure
 22287                           
 22288                           ; BSR set to: 0
 22289  001B0C  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22290  001B0E  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22291                           
 22292                           ; BSR set to: 0
 22293                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 22294  001B10  BB92               	btfsc	sprintf@flag& (0+255),5,b
 22295  001B12  D003               	goto	l11483
 22296                           
 22297                           ; BSR set to: 0
 22298  001B14  6B85               	clrf	(_sprintf$2162+1)& (0+255),b
 22299  001B16  0E78               	movlw	120
 22300  001B18  D002               	goto	L39
 22301  001B1A                     l11483:
 22302                           
 22303                           ; BSR set to: 0
 22304  001B1A  6B85               	clrf	(_sprintf$2162+1)& (0+255),b
 22305  001B1C  0E58               	movlw	88
 22306  001B1E                     L39:
 22307  001B1E  6F84               	movwf	_sprintf$2162& (0+255),b
 22308                           
 22309                           ; BSR set to: 0
 22310  001B20  C076  FFD9         	movff	sprintf@sp,fsr2l
 22311  001B24  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22312  001B28  C084  FFDF         	movff	_sprintf$2162,indf2
 22313  001B2C  D7E2               	goto	l11471
 22314  001B2E                     l11489:
 22315                           
 22316                           ; BSR set to: 0
 22317                           ;doprnt.c: 1493: case 0xC0:
 22318                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 22319  001B2E  C089  F07E         	movff	sprintf@prec,??_sprintf
 22320  001B32  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 22321  001B36  90D8               	bcf	status,0,c
 22322  001B38  377E               	rlcf	??_sprintf& (0+255),f,b
 22323  001B3A  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 22324  001B3C  90D8               	bcf	status,0,c
 22325  001B3E  377E               	rlcf	??_sprintf& (0+255),f,b
 22326  001B40  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 22327  001B42  0E08               	movlw	low _dpowers
 22328  001B44  257E               	addwf	??_sprintf& (0+255),w,b
 22329  001B46  6EF6               	movwf	tblptrl,c
 22330  001B48  0E70               	movlw	high _dpowers
 22331  001B4A  D87B               	call	PL14	;call to abstracted procedure
 22332  001B4C  C08D  F060         	movff	sprintf@_val,?___lldiv
 22333  001B50  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 22334  001B54  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 22335  001B58  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 22336  001B5C  EC4A  F025         	call	___lldiv	;wreg free
 22337  001B60  C063  F070         	movff	?___lldiv+3,?___llmod+3
 22338  001B64  C062  F06F         	movff	?___lldiv+2,?___llmod+2
 22339  001B68  C061  F06E         	movff	?___lldiv+1,?___llmod+1
 22340  001B6C  C060  F06D         	movff	?___lldiv,?___llmod
 22341  001B70  0E0A               	movlw	10
 22342  001B72  6F71               	movwf	(?___llmod+4)& (0+255),b
 22343  001B74  0E00               	movlw	0
 22344  001B76  6B72               	clrf	(?___llmod+5)& (0+255),b
 22345  001B78  6B73               	clrf	(?___llmod+6)& (0+255),b
 22346  001B7A  6B74               	clrf	(?___llmod+7)& (0+255),b
 22347  001B7C  ECFE  F026         	call	___llmod	;wreg free
 22348  001B80  516D               	movf	?___llmod& (0+255),w,b
 22349  001B82  D02D               	goto	L40
 22350  001B84                     l11491:
 22351                           
 22352                           ; BSR set to: 0
 22353                           ;doprnt.c: 1506: {
 22354                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 22355  001B84  D875               	call	PL24	;call to abstracted procedure
 22356  001B86  0E30               	movlw	low _hexpowers
 22357  001B88  257E               	addwf	??_sprintf& (0+255),w,b
 22358  001B8A  6EF6               	movwf	tblptrl,c
 22359  001B8C  0E70               	movlw	high _hexpowers
 22360  001B8E  D859               	call	PL14	;call to abstracted procedure
 22361  001B90  EC4A  F025         	call	___lldiv	;wreg free
 22362  001B94  5160               	movf	?___lldiv& (0+255),w,b
 22363  001B96  0B0F               	andlw	15
 22364  001B98  6F81               	movwf	sprintf@idx& (0+255),b
 22365                           
 22366                           ; BSR set to: 0
 22367                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 22368  001B9A  BB92               	btfsc	sprintf@flag& (0+255),5,b
 22369  001B9C  D004               	goto	l11497
 22370                           
 22371                           ; BSR set to: 0
 22372  001B9E  0E7E               	movlw	high STR_256
 22373  001BA0  6F87               	movwf	(_sprintf$2168+1)& (0+255),b
 22374  001BA2  0E2D               	movlw	low STR_256
 22375  001BA4  D003               	goto	L41
 22376  001BA6                     l11497:
 22377                           
 22378                           ; BSR set to: 0
 22379  001BA6  0E7E               	movlw	high STR_255
 22380  001BA8  6F87               	movwf	(_sprintf$2168+1)& (0+255),b
 22381  001BAA  0E1C               	movlw	low STR_255
 22382  001BAC                     L41:
 22383  001BAC  6F86               	movwf	_sprintf$2168& (0+255),b
 22384                           
 22385                           ; BSR set to: 0
 22386  001BAE  5181               	movf	sprintf@idx& (0+255),w,b
 22387  001BB0  2586               	addwf	_sprintf$2168& (0+255),w,b
 22388  001BB2  6F7E               	movwf	??_sprintf& (0+255),b
 22389  001BB4  0E00               	movlw	0
 22390  001BB6  2187               	addwfc	(_sprintf$2168+1)& (0+255),w,b
 22391  001BB8  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 22392  001BBA  C07E  FFF6         	movff	??_sprintf,tblptrl
 22393  001BBE  C07F  FFF7         	movff	??_sprintf+1,tblptrh
 22394  001BC2  0008               	tblrd		*
 22395  001BC4  CFF5 F091          	movff	tablat,sprintf@c
 22396                           
 22397                           ;doprnt.c: 1515: }
 22398                           ;doprnt.c: 1517: break;
 22399  001BC8  D016               	goto	l11507
 22400  001BCA                     l11501:
 22401                           
 22402                           ; BSR set to: 0
 22403                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 22404  001BCA  D852               	call	PL24	;call to abstracted procedure
 22405  001BCC  0ED8               	movlw	low _octpowers
 22406  001BCE  257E               	addwf	??_sprintf& (0+255),w,b
 22407  001BD0  6EF6               	movwf	tblptrl,c
 22408  001BD2  0E6F               	movlw	high _octpowers
 22409  001BD4  D836               	call	PL14	;call to abstracted procedure
 22410  001BD6  EC4A  F025         	call	___lldiv	;wreg free
 22411  001BDA  5160               	movf	?___lldiv& (0+255),w,b
 22412  001BDC  0B07               	andlw	7
 22413  001BDE                     L40:
 22414  001BDE  0F30               	addlw	48
 22415  001BE0  6F91               	movwf	sprintf@c& (0+255),b
 22416                           
 22417                           ;doprnt.c: 1527: break;
 22418  001BE2  D009               	goto	l11507
 22419  001BE4                     l11505:
 22420                           
 22421                           ; BSR set to: 0
 22422  001BE4  5192               	movf	sprintf@flag& (0+255),w,b
 22423  001BE6  0BC0               	andlw	192
 22424                           
 22425                           ; Switch size 1, requested type "space"
 22426                           ; Number of cases is 4, Range of values is 0 to 192
 22427                           ; switch strategies available:
 22428                           ; Name         Instructions Cycles
 22429                           ; simple_byte           13     7 (average)
 22430                           ;	Chosen strategy is simple_byte
 22431  001BE8  E0A2               	bz	l11489
 22432  001BEA  0A40               	xorlw	64	; case 64
 22433  001BEC  E0EE               	bz	l11501
 22434  001BEE  0AC0               	xorlw	192	; case 128
 22435  001BF0  E0C9               	bz	l11491
 22436  001BF2  0A40               	xorlw	64	; case 192
 22437  001BF4  E09C               	bz	l11489
 22438  001BF6                     l11507:
 22439                           
 22440                           ; BSR set to: 0
 22441                           ;doprnt.c: 1531: ((*sp++ = (c)));
 22442  001BF6  C076  FFD9         	movff	sprintf@sp,fsr2l
 22443  001BFA  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22444  001BFE  C091  FFDF         	movff	sprintf@c,indf2
 22445  001C02  D777               	goto	l11471
 22446  001C04                     l11511:
 22447                           
 22448                           ; BSR set to: 0
 22449  001C04  0789               	decf	sprintf@prec& (0+255),f,b
 22450  001C06  A0D8               	btfss	status,0,c
 22451  001C08  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 22452  001C0A  0100               	movlb	0	; () banked
 22453  001C0C  2989               	incf	sprintf@prec& (0+255),w,b
 22454  001C0E  B4D8               	btfsc	status,2,c
 22455  001C10  298A               	incf	(sprintf@prec+1)& (0+255),w,b
 22456  001C12  E1E8               	bnz	l11505
 22457                           
 22458                           ; BSR set to: 0
 22459                           ;doprnt.c: 1532: }
 22460                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 22461  001C14  A792               	btfss	sprintf@flag& (0+255),3,b
 22462  001C16  D00B               	goto	l11521
 22463                           
 22464                           ; BSR set to: 0
 22465  001C18  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22466  001C1A  0A80               	xorlw	128
 22467  001C1C  0F80               	addlw	-128
 22468  001C1E  0E01               	movlw	1
 22469  001C20  B4D8               	btfsc	status,2,c
 22470  001C22  5D8B               	subwf	sprintf@width& (0+255),w,b
 22471  001C24  E304               	bnc	l11521
 22472  001C26                     l11515:
 22473                           
 22474                           ; BSR set to: 0
 22475                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 22476  001C26  C076  FFD9         	movff	sprintf@sp,fsr2l
 22477                           
 22478                           ; BSR set to: 0
 22479                           
 22480                           ; BSR set to: 0
 22481                           ;doprnt.c: 1538: while(--width);
 22482  001C2A  D835               	call	PL42	;call to abstracted procedure
 22483  001C2C  E1FC               	bnz	l11515
 22484  001C2E                     l11521:
 22485                           
 22486                           ; BSR set to: 0
 22487  001C2E  D84B               	call	PL60	;call to abstracted procedure
 22488  001C30  6791               	tstfsz	sprintf@c& (0+255),b
 22489  001C32  D4D1               	goto	l11187
 22490  001C34                     l11523:
 22491                           
 22492                           ; BSR set to: 0
 22493                           ;doprnt.c: 1545: *sp = 0;
 22494  001C34  C076  FFD9         	movff	sprintf@sp,fsr2l
 22495  001C38  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22496  001C3C  0E00               	movlw	0
 22497  001C3E  6EDF               	movwf	indf2,c
 22498                           
 22499                           ; BSR set to: 0
 22500  001C40  0C00               	retlw	0
 22501  001C42                     __end_of_sprintf:
 22502                           	opt stack 0
 22503  001C42                     PL14:
 22504                           	opt stack 25
 22505  001C42  217F               	addwfc	(??_sprintf+1)& (0+255),w,b
 22506  001C44  6EF7               	movwf	tblptrh,c
 22507  001C46  0009               	tblrd		*+
 22508  001C48  CFF5 F064          	movff	tablat,?___lldiv+4
 22509  001C4C  0009               	tblrd		*+
 22510  001C4E  CFF5 F065          	movff	tablat,?___lldiv+5
 22511  001C52  0009               	tblrd		*+
 22512  001C54  CFF5 F066          	movff	tablat,?___lldiv+6
 22513  001C58  000A               	tblrd		*-
 22514  001C5A  CFF5 F067          	movff	tablat,?___lldiv+7
 22515  001C5E  0012               	return	
 22516  001C60                     __end_ofPL14:
 22517                           	opt stack 0
 22518  001C60                     PL20:
 22519                           	opt stack 25
 22520  001C60  1592               	andwf	sprintf@flag& (0+255),w,b
 22521  001C62  6F7E               	movwf	??_sprintf& (0+255),b
 22522  001C64  0E08               	movlw	8
 22523  001C66  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
 22524  001C68  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 22525  001C6A  517F               	movf	(??_sprintf+1)& (0+255),w,b
 22526  001C6C  0A08               	xorlw	8
 22527  001C6E  0012               	return	
 22528  001C70                     __end_ofPL20:
 22529                           	opt stack 0
 22530  001C70                     PL24:
 22531                           	opt stack 25
 22532  001C70  C08D  F060         	movff	sprintf@_val,?___lldiv
 22533  001C74  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 22534  001C78  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 22535  001C7C  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 22536  001C80  C089  F07E         	movff	sprintf@prec,??_sprintf
 22537  001C84  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 22538  001C88  90D8               	bcf	status,0,c
 22539  001C8A  377E               	rlcf	??_sprintf& (0+255),f,b
 22540  001C8C  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 22541  001C8E  90D8               	bcf	status,0,c
 22542  001C90  377E               	rlcf	??_sprintf& (0+255),f,b
 22543  001C92  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 22544  001C94  0012               	return	
 22545  001C96                     __end_ofPL24:
 22546                           	opt stack 0
 22547  001C96                     PL42:
 22548                           	opt stack 25
 22549  001C96  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22550  001C9A  0E20               	movlw	32
 22551  001C9C  6EDF               	movwf	indf2,c
 22552  001C9E  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22553  001CA0  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22554  001CA2  078B               	decf	sprintf@width& (0+255),f,b
 22555  001CA4  A0D8               	btfss	status,0,c
 22556  001CA6  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22557  001CA8  0100               	movlb	0	; () banked
 22558  001CAA  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22559  001CAC  118B               	iorwf	sprintf@width& (0+255),w,b
 22560  001CAE  0012               	return	
 22561  001CB0                     __end_ofPL42:
 22562                           	opt stack 0
 22563  001CB0                     PL52:
 22564                           	opt stack 25
 22565  001CB0  6ED9               	movwf	fsr2l,c
 22566  001CB2  6ADA               	clrf	fsr2h,c
 22567  001CB4  CFDE F08D          	movff	postinc2,sprintf@_val
 22568  001CB8  CFDE F08E          	movff	postinc2,sprintf@_val+1
 22569  001CBC  CFDE F08F          	movff	postinc2,sprintf@_val+2
 22570  001CC0  CFDE F090          	movff	postinc2,sprintf@_val+3
 22571  001CC4  0C04               	retlw	4
 22572  001CC6                     __end_ofPL52:
 22573                           	opt stack 0
 22574  001CC6                     PL60:
 22575                           	opt stack 25
 22576  001CC6  C078  FFF6         	movff	sprintf@f,tblptrl
 22577  001CCA  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22578  001CCE  4B78               	infsnz	sprintf@f& (0+255),f,b
 22579  001CD0  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22580  001CD2  0008               	tblrd		*
 22581  001CD4  CFF5 F091          	movff	tablat,sprintf@c
 22582  001CD8  0100               	movlb	0	; () banked
 22583  001CDA  0012               	return	
 22584  001CDC                     __end_ofPL60:
 22585                           	opt stack 0
 22586  001CDC                     PL62:
 22587                           	opt stack 25
 22588  001CDC  C076  FFD9         	movff	sprintf@sp,fsr2l
 22589  001CE0  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22590  001CE4  0E20               	movlw	32
 22591  001CE6  6EDF               	movwf	indf2,c
 22592  001CE8  0C20               	retlw	32
 22593  001CEA                     __end_ofPL62:
 22594                           	opt stack 0
 22595  001CEA                     PL82:
 22596                           	opt stack 25
 22597  001CEA  4B78               	infsnz	sprintf@f& (0+255),f,b
 22598  001CEC  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22599  001CEE  C078  FFF6         	movff	sprintf@f,tblptrl
 22600  001CF2  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22601  001CF6  0008               	tblrd		*
 22602  001CF8  50F5               	movf	tablat,w,c
 22603  001CFA  0012               	return	
 22604  001CFC                     __end_ofPL82:
 22605                           	opt stack 0
 22606  001CFC                     PL90:
 22607                           	opt stack 25
 22608  001CFC  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22609  001D00  0E30               	movlw	48
 22610  001D02  6EDF               	movwf	indf2,c
 22611  001D04  0C30               	retlw	48
 22612  001D06                     __end_ofPL90:
 22613                           	opt stack 0
 22614  001D06                     PL108:
 22615                           	opt stack 25
 22616  001D06  A0D8               	btfss	status,0,c
 22617  001D08  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22618  001D0A  0100               	movlb	0	; () banked
 22619  001D0C  298B               	incf	sprintf@width& (0+255),w,b
 22620  001D0E  0012               	return	
 22621  001D10                     __end_ofPL108:
 22622                           	opt stack 0
 22623                           tblptru	equ	0xFF8
 22624                           tblptrh	equ	0xFF7
 22625                           tblptrl	equ	0xFF6
 22626                           tablat	equ	0xFF5
 22627                           prodh	equ	0xFF4
 22628                           prodl	equ	0xFF3
 22629                           intcon	equ	0xFF2
 22630                           indf0	equ	0xFEF
 22631                           postinc0	equ	0xFEE
 22632                           fsr0h	equ	0xFEA
 22633                           fsr0l	equ	0xFE9
 22634                           wreg	equ	0xFE8
 22635                           indf1	equ	0xFE7
 22636                           postinc1	equ	0xFE6
 22637                           postdec1	equ	0xFE5
 22638                           fsr1h	equ	0xFE2
 22639                           fsr1l	equ	0xFE1
 22640                           indf2	equ	0xFDF
 22641                           postinc2	equ	0xFDE
 22642                           postdec2	equ	0xFDD
 22643                           plusw2	equ	0xFDB
 22644                           fsr2h	equ	0xFDA
 22645                           fsr2l	equ	0xFD9
 22646                           status	equ	0xFD8
 22647                           
 22648 ;; *************** function ___wmul *****************
 22649 ;; Defined at:
 22650 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 22651 ;; Parameters:    Size  Location     Type
 22652 ;;  multiplier      2    0[BANK0 ] unsigned int 
 22653 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 22654 ;; Auto vars:     Size  Location     Type
 22655 ;;  product         2    4[BANK0 ] unsigned int 
 22656 ;; Return value:  Size  Location     Type
 22657 ;;                  2    0[BANK0 ] unsigned int 
 22658 ;; Registers used:
 22659 ;;		wreg, status,2, status,0, prodl, prodh
 22660 ;; Tracked objects:
 22661 ;;		On entry : F/0
 22662 ;;		On exit  : F/0
 22663 ;;		Unchanged: 0/0
 22664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22665 ;;      Params:         0       4       0       0       0       0       0
 22666 ;;      Locals:         0       2       0       0       0       0       0
 22667 ;;      Temps:          0       0       0       0       0       0       0
 22668 ;;      Totals:         0       6       0       0       0       0       0
 22669 ;;Total ram usage:        6 bytes
 22670 ;; Hardware stack levels used:    1
 22671 ;; Hardware stack levels required when called:    3
 22672 ;; This function calls:
 22673 ;;		Nothing
 22674 ;; This function is called by:
 22675 ;;		_sprintf
 22676 ;;		_atoi
 22677 ;; This function uses a non-reentrant model
 22678 ;;
 22679                           
 22680                           	psect	text55
 22681  00533C                     __ptext55:
 22682                           	opt stack 0
 22683  00533C                     ___wmul:
 22684                           	opt stack 25
 22685                           
 22686                           ; BSR set to: 0
 22687                           
 22688                           ; BSR set to: 0
 22689                           ;incstack = 0
 22690                           ;incstack = 0
 22691  00533C  5160               	movf	___wmul@multiplier& (0+255),w,b
 22692  00533E  0362               	mulwf	___wmul@multiplicand& (0+255),b
 22693  005340  CFF3 F064          	movff	prodl,___wmul@product
 22694  005344  CFF4 F065          	movff	prodh,___wmul@product+1
 22695  005348  5160               	movf	___wmul@multiplier& (0+255),w,b
 22696  00534A  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 22697  00534C  D808               	call	PL92	;call to abstracted procedure
 22698  00534E  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 22699  005350  0362               	mulwf	___wmul@multiplicand& (0+255),b
 22700  005352  D805               	call	PL92	;call to abstracted procedure
 22701                           
 22702                           ; BSR set to: 0
 22703  005354  C064  F060         	movff	___wmul@product,?___wmul
 22704  005358  C065  F061         	movff	___wmul@product+1,?___wmul+1
 22705                           
 22706                           ; BSR set to: 0
 22707  00535C  0012               	return	
 22708  00535E                     __end_of___wmul:
 22709                           	opt stack 0
 22710  00535E                     PL92:
 22711                           	opt stack 25
 22712  00535E  CFF3 FFF4          	movff	prodl,prodh
 22713  005362  6AF3               	clrf	prodl,c
 22714  005364  50F3               	movf	prodl,w,c
 22715  005366  2764               	addwf	___wmul@product& (0+255),f,b
 22716  005368  50F4               	movf	prodh,w,c
 22717  00536A  2365               	addwfc	(___wmul@product+1)& (0+255),f,b
 22718  00536C  0012               	return	
 22719  00536E                     __end_ofPL92:
 22720                           	opt stack 0
 22721                           tblptru	equ	0xFF8
 22722                           tblptrh	equ	0xFF7
 22723                           tblptrl	equ	0xFF6
 22724                           tablat	equ	0xFF5
 22725                           prodh	equ	0xFF4
 22726                           prodl	equ	0xFF3
 22727                           intcon	equ	0xFF2
 22728                           indf0	equ	0xFEF
 22729                           postinc0	equ	0xFEE
 22730                           fsr0h	equ	0xFEA
 22731                           fsr0l	equ	0xFE9
 22732                           wreg	equ	0xFE8
 22733                           indf1	equ	0xFE7
 22734                           postinc1	equ	0xFE6
 22735                           postdec1	equ	0xFE5
 22736                           fsr1h	equ	0xFE2
 22737                           fsr1l	equ	0xFE1
 22738                           indf2	equ	0xFDF
 22739                           postinc2	equ	0xFDE
 22740                           postdec2	equ	0xFDD
 22741                           plusw2	equ	0xFDB
 22742                           fsr2h	equ	0xFDA
 22743                           fsr2l	equ	0xFD9
 22744                           status	equ	0xFD8
 22745                           
 22746 ;; *************** function ___llmod *****************
 22747 ;; Defined at:
 22748 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 22749 ;; Parameters:    Size  Location     Type
 22750 ;;  dividend        4   13[BANK0 ] unsigned long 
 22751 ;;  divisor         4   17[BANK0 ] unsigned long 
 22752 ;; Auto vars:     Size  Location     Type
 22753 ;;  counter         1   21[BANK0 ] unsigned char 
 22754 ;; Return value:  Size  Location     Type
 22755 ;;                  4   13[BANK0 ] unsigned long 
 22756 ;; Registers used:
 22757 ;;		wreg, status,2, status,0
 22758 ;; Tracked objects:
 22759 ;;		On entry : F/0
 22760 ;;		On exit  : F/0
 22761 ;;		Unchanged: 0/0
 22762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22763 ;;      Params:         0       8       0       0       0       0       0
 22764 ;;      Locals:         0       1       0       0       0       0       0
 22765 ;;      Temps:          0       0       0       0       0       0       0
 22766 ;;      Totals:         0       9       0       0       0       0       0
 22767 ;;Total ram usage:        9 bytes
 22768 ;; Hardware stack levels used:    1
 22769 ;; Hardware stack levels required when called:    3
 22770 ;; This function calls:
 22771 ;;		Nothing
 22772 ;; This function is called by:
 22773 ;;		_sprintf
 22774 ;;		_ultoa
 22775 ;; This function uses a non-reentrant model
 22776 ;;
 22777                           
 22778                           	psect	text56
 22779  004DFC                     __ptext56:
 22780                           	opt stack 0
 22781  004DFC                     ___llmod:
 22782                           	opt stack 24
 22783                           
 22784                           ; BSR set to: 0
 22785                           
 22786                           ; BSR set to: 0
 22787                           ;incstack = 0
 22788                           ;incstack = 0
 22789  004DFC  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 22790  004DFE  1171               	iorwf	___llmod@divisor& (0+255),w,b
 22791  004E00  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 22792  004E02  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 22793  004E04  E023               	bz	l2256
 22794                           
 22795                           ; BSR set to: 0
 22796  004E06  0E01               	movlw	1
 22797  004E08  6F75               	movwf	___llmod@counter& (0+255),b
 22798  004E0A  D006               	goto	l12357
 22799  004E0C                     l12355:
 22800                           
 22801                           ; BSR set to: 0
 22802  004E0C  90D8               	bcf	status,0,c
 22803  004E0E  3771               	rlcf	___llmod@divisor& (0+255),f,b
 22804  004E10  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 22805  004E12  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 22806  004E14  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 22807  004E16  2B75               	incf	___llmod@counter& (0+255),f,b
 22808  004E18                     l12357:
 22809                           
 22810                           ; BSR set to: 0
 22811  004E18  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
 22812  004E1A  D7F8               	goto	l12355
 22813  004E1C                     l12359:
 22814                           
 22815                           ; BSR set to: 0
 22816  004E1C  5171               	movf	___llmod@divisor& (0+255),w,b
 22817  004E1E  5D6D               	subwf	___llmod@dividend& (0+255),w,b
 22818  004E20  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 22819  004E22  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 22820  004E24  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 22821  004E26  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 22822  004E28  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 22823  004E2A  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 22824  004E2C  E308               	bnc	l12363
 22825                           
 22826                           ; BSR set to: 0
 22827  004E2E  5171               	movf	___llmod@divisor& (0+255),w,b
 22828  004E30  5F6D               	subwf	___llmod@dividend& (0+255),f,b
 22829  004E32  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 22830  004E34  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 22831  004E36  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 22832  004E38  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 22833  004E3A  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 22834  004E3C  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 22835  004E3E                     l12363:
 22836                           
 22837                           ; BSR set to: 0
 22838  004E3E  90D8               	bcf	status,0,c
 22839  004E40  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 22840  004E42  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 22841  004E44  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 22842  004E46  3371               	rrcf	___llmod@divisor& (0+255),f,b
 22843                           
 22844                           ; BSR set to: 0
 22845  004E48  2F75               	decfsz	___llmod@counter& (0+255),f,b
 22846  004E4A  D7E8               	goto	l12359
 22847  004E4C                     l2256:
 22848                           
 22849                           ; BSR set to: 0
 22850  004E4C  C06D  F06D         	movff	___llmod@dividend,?___llmod
 22851  004E50  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
 22852  004E54  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
 22853  004E58  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
 22854                           
 22855                           ; BSR set to: 0
 22856  004E5C  0012               	return	
 22857  004E5E                     __end_of___llmod:
 22858                           	opt stack 0
 22859                           tblptru	equ	0xFF8
 22860                           tblptrh	equ	0xFF7
 22861                           tblptrl	equ	0xFF6
 22862                           tablat	equ	0xFF5
 22863                           prodh	equ	0xFF4
 22864                           prodl	equ	0xFF3
 22865                           intcon	equ	0xFF2
 22866                           indf0	equ	0xFEF
 22867                           postinc0	equ	0xFEE
 22868                           fsr0h	equ	0xFEA
 22869                           fsr0l	equ	0xFE9
 22870                           wreg	equ	0xFE8
 22871                           indf1	equ	0xFE7
 22872                           postinc1	equ	0xFE6
 22873                           postdec1	equ	0xFE5
 22874                           fsr1h	equ	0xFE2
 22875                           fsr1l	equ	0xFE1
 22876                           indf2	equ	0xFDF
 22877                           postinc2	equ	0xFDE
 22878                           postdec2	equ	0xFDD
 22879                           plusw2	equ	0xFDB
 22880                           fsr2h	equ	0xFDA
 22881                           fsr2l	equ	0xFD9
 22882                           status	equ	0xFD8
 22883                           
 22884 ;; *************** function ___lldiv *****************
 22885 ;; Defined at:
 22886 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 22887 ;; Parameters:    Size  Location     Type
 22888 ;;  dividend        4    0[BANK0 ] unsigned long 
 22889 ;;  divisor         4    4[BANK0 ] unsigned long 
 22890 ;; Auto vars:     Size  Location     Type
 22891 ;;  quotient        4    8[BANK0 ] unsigned long 
 22892 ;;  counter         1   12[BANK0 ] unsigned char 
 22893 ;; Return value:  Size  Location     Type
 22894 ;;                  4    0[BANK0 ] unsigned long 
 22895 ;; Registers used:
 22896 ;;		wreg, status,2, status,0
 22897 ;; Tracked objects:
 22898 ;;		On entry : F/0
 22899 ;;		On exit  : F/0
 22900 ;;		Unchanged: 0/0
 22901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22902 ;;      Params:         0       8       0       0       0       0       0
 22903 ;;      Locals:         0       5       0       0       0       0       0
 22904 ;;      Temps:          0       0       0       0       0       0       0
 22905 ;;      Totals:         0      13       0       0       0       0       0
 22906 ;;Total ram usage:       13 bytes
 22907 ;; Hardware stack levels used:    1
 22908 ;; Hardware stack levels required when called:    3
 22909 ;; This function calls:
 22910 ;;		Nothing
 22911 ;; This function is called by:
 22912 ;;		_sprintf
 22913 ;;		_ultoa
 22914 ;; This function uses a non-reentrant model
 22915 ;;
 22916                           
 22917                           	psect	text57
 22918  004A94                     __ptext57:
 22919                           	opt stack 0
 22920  004A94                     ___lldiv:
 22921                           	opt stack 24
 22922                           
 22923                           ; BSR set to: 0
 22924                           
 22925                           ; BSR set to: 0
 22926                           ;incstack = 0
 22927                           ;incstack = 0
 22928  004A94  6B68               	clrf	___lldiv@quotient& (0+255),b
 22929  004A96  6B69               	clrf	(___lldiv@quotient+1)& (0+255),b
 22930  004A98  6B6A               	clrf	(___lldiv@quotient+2)& (0+255),b
 22931  004A9A  6B6B               	clrf	(___lldiv@quotient+3)& (0+255),b
 22932                           
 22933                           ; BSR set to: 0
 22934  004A9C  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 22935  004A9E  1164               	iorwf	___lldiv@divisor& (0+255),w,b
 22936  004AA0  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 22937  004AA2  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 22938  004AA4  E029               	bz	l2246
 22939                           
 22940                           ; BSR set to: 0
 22941  004AA6  0E01               	movlw	1
 22942  004AA8  6F6C               	movwf	___lldiv@counter& (0+255),b
 22943  004AAA  D006               	goto	l12337
 22944  004AAC                     l12335:
 22945                           
 22946                           ; BSR set to: 0
 22947  004AAC  90D8               	bcf	status,0,c
 22948  004AAE  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 22949  004AB0  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 22950  004AB2  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 22951  004AB4  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 22952  004AB6  2B6C               	incf	___lldiv@counter& (0+255),f,b
 22953  004AB8                     l12337:
 22954                           
 22955                           ; BSR set to: 0
 22956  004AB8  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 22957  004ABA  D7F8               	goto	l12335
 22958  004ABC                     l12339:
 22959                           
 22960                           ; BSR set to: 0
 22961  004ABC  90D8               	bcf	status,0,c
 22962  004ABE  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 22963  004AC0  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 22964  004AC2  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 22965  004AC4  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 22966                           
 22967                           ; BSR set to: 0
 22968  004AC6  5164               	movf	___lldiv@divisor& (0+255),w,b
 22969  004AC8  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 22970  004ACA  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 22971  004ACC  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 22972  004ACE  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 22973  004AD0  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 22974  004AD2  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 22975  004AD4  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 22976  004AD6  E309               	bnc	l12347
 22977                           
 22978                           ; BSR set to: 0
 22979  004AD8  5164               	movf	___lldiv@divisor& (0+255),w,b
 22980  004ADA  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 22981  004ADC  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 22982  004ADE  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 22983  004AE0  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 22984  004AE2  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 22985  004AE4  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 22986  004AE6  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 22987                           
 22988                           ; BSR set to: 0
 22989  004AE8  8168               	bsf	___lldiv@quotient& (0+255),0,b
 22990  004AEA                     l12347:
 22991                           
 22992                           ; BSR set to: 0
 22993  004AEA  90D8               	bcf	status,0,c
 22994  004AEC  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 22995  004AEE  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 22996  004AF0  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 22997  004AF2  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 22998                           
 22999                           ; BSR set to: 0
 23000  004AF4  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 23001  004AF6  D7E2               	goto	l12339
 23002  004AF8                     l2246:
 23003                           
 23004                           ; BSR set to: 0
 23005  004AF8  C068  F060         	movff	___lldiv@quotient,?___lldiv
 23006  004AFC  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 23007  004B00  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 23008  004B04  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 23009                           
 23010                           ; BSR set to: 0
 23011  004B08  0012               	return	
 23012  004B0A                     __end_of___lldiv:
 23013                           	opt stack 0
 23014                           tblptru	equ	0xFF8
 23015                           tblptrh	equ	0xFF7
 23016                           tblptrl	equ	0xFF6
 23017                           tablat	equ	0xFF5
 23018                           prodh	equ	0xFF4
 23019                           prodl	equ	0xFF3
 23020                           intcon	equ	0xFF2
 23021                           indf0	equ	0xFEF
 23022                           postinc0	equ	0xFEE
 23023                           fsr0h	equ	0xFEA
 23024                           fsr0l	equ	0xFE9
 23025                           wreg	equ	0xFE8
 23026                           indf1	equ	0xFE7
 23027                           postinc1	equ	0xFE6
 23028                           postdec1	equ	0xFE5
 23029                           fsr1h	equ	0xFE2
 23030                           fsr1l	equ	0xFE1
 23031                           indf2	equ	0xFDF
 23032                           postinc2	equ	0xFDE
 23033                           postdec2	equ	0xFDD
 23034                           plusw2	equ	0xFDB
 23035                           fsr2h	equ	0xFDA
 23036                           fsr2l	equ	0xFD9
 23037                           status	equ	0xFD8
 23038                           
 23039 ;; *************** function _isdigit *****************
 23040 ;; Defined at:
 23041 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 23042 ;; Parameters:    Size  Location     Type
 23043 ;;  c               1    wreg     unsigned char 
 23044 ;; Auto vars:     Size  Location     Type
 23045 ;;  c               1    2[BANK0 ] unsigned char 
 23046 ;; Return value:  Size  Location     Type
 23047 ;;		None               void
 23048 ;; Registers used:
 23049 ;;		wreg, status,2, status,0
 23050 ;; Tracked objects:
 23051 ;;		On entry : 0/0
 23052 ;;		On exit  : F/0
 23053 ;;		Unchanged: 0/0
 23054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23055 ;;      Params:         0       0       0       0       0       0       0
 23056 ;;      Locals:         0       2       0       0       0       0       0
 23057 ;;      Temps:          0       1       0       0       0       0       0
 23058 ;;      Totals:         0       3       0       0       0       0       0
 23059 ;;Total ram usage:        3 bytes
 23060 ;; Hardware stack levels used:    1
 23061 ;; Hardware stack levels required when called:    3
 23062 ;; This function calls:
 23063 ;;		Nothing
 23064 ;; This function is called by:
 23065 ;;		_sprintf
 23066 ;;		_atoi
 23067 ;; This function uses a non-reentrant model
 23068 ;;
 23069                           
 23070                           	psect	text58
 23071  005420                     __ptext58:
 23072                           	opt stack 0
 23073  005420                     _isdigit:
 23074                           	opt stack 25
 23075                           
 23076                           ; BSR set to: 0
 23077                           ;incstack = 0
 23078                           ;incstack = 0
 23079                           ;isdigit@c stored from wreg
 23080  005420  CFE8 F062          	movff	wreg,isdigit@c
 23081  005424  0100               	movlb	0	; () banked
 23082  005426  6B61               	clrf	_isdigit$2912& (0+255),b
 23083                           
 23084                           ; BSR set to: 0
 23085  005428  0E3A               	movlw	58
 23086  00542A  6162               	cpfslt	isdigit@c& (0+255),b
 23087  00542C  D005               	goto	l12295
 23088                           
 23089                           ; BSR set to: 0
 23090  00542E  0E2F               	movlw	47
 23091  005430  6562               	cpfsgt	isdigit@c& (0+255),b
 23092  005432  D002               	goto	l12295
 23093                           
 23094                           ; BSR set to: 0
 23095  005434  0E01               	movlw	1
 23096  005436  6F61               	movwf	_isdigit$2912& (0+255),b
 23097  005438                     l12295:
 23098                           
 23099                           ; BSR set to: 0
 23100  005438  C061  F060         	movff	_isdigit$2912,??_isdigit
 23101  00543C  3160               	rrcf	??_isdigit& (0+255),w,b
 23102                           
 23103                           ; BSR set to: 0
 23104  00543E  0012               	return	
 23105  005440                     __end_of_isdigit:
 23106                           	opt stack 0
 23107                           tblptru	equ	0xFF8
 23108                           tblptrh	equ	0xFF7
 23109                           tblptrl	equ	0xFF6
 23110                           tablat	equ	0xFF5
 23111                           prodh	equ	0xFF4
 23112                           prodl	equ	0xFF3
 23113                           intcon	equ	0xFF2
 23114                           indf0	equ	0xFEF
 23115                           postinc0	equ	0xFEE
 23116                           fsr0h	equ	0xFEA
 23117                           fsr0l	equ	0xFE9
 23118                           wreg	equ	0xFE8
 23119                           indf1	equ	0xFE7
 23120                           postinc1	equ	0xFE6
 23121                           postdec1	equ	0xFE5
 23122                           fsr1h	equ	0xFE2
 23123                           fsr1l	equ	0xFE1
 23124                           indf2	equ	0xFDF
 23125                           postinc2	equ	0xFDE
 23126                           postdec2	equ	0xFDD
 23127                           plusw2	equ	0xFDB
 23128                           fsr2h	equ	0xFDA
 23129                           fsr2l	equ	0xFD9
 23130                           status	equ	0xFD8
 23131                           
 23132 ;; *************** function _printFirmwareVersion *****************
 23133 ;; Defined at:
 23134 ;;		line 2534 in file "main.c"
 23135 ;; Parameters:    Size  Location     Type
 23136 ;;		None
 23137 ;; Auto vars:     Size  Location     Type
 23138 ;;  wrkbuf         20   24[BANK0 ] unsigned char [20]
 23139 ;; Return value:  Size  Location     Type
 23140 ;;		None               void
 23141 ;; Registers used:
 23142 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 23143 ;; Tracked objects:
 23144 ;;		On entry : 0/0
 23145 ;;		On exit  : 0/0
 23146 ;;		Unchanged: 0/0
 23147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23148 ;;      Params:         0       0       0       0       0       0       0
 23149 ;;      Locals:         0      20       0       0       0       0       0
 23150 ;;      Temps:          0       0       0       0       0       0       0
 23151 ;;      Totals:         0      20       0       0       0       0       0
 23152 ;;Total ram usage:       20 bytes
 23153 ;; Hardware stack levels used:    1
 23154 ;; Hardware stack levels required when called:    6
 23155 ;; This function calls:
 23156 ;;		_putsUSART
 23157 ;;		_WriteUSART
 23158 ;;		_itoa
 23159 ;; This function is called by:
 23160 ;;		_main
 23161 ;;		_doModeVerbose
 23162 ;; This function uses a non-reentrant model
 23163 ;;
 23164                           
 23165                           	psect	text59
 23166  004784                     __ptext59:
 23167                           	opt stack 0
 23168  004784                     _printFirmwareVersion:
 23169                           	opt stack 23
 23170                           
 23171                           ;main.c: 2535: char wrkbuf[20];
 23172                           ;main.c: 2536: putsUSART((char *) "Version: ");
 23173                           
 23174                           ; BSR set to: 0
 23175                           ;incstack = 0
 23176                           ;incstack = 0
 23177  004784  0E7E               	movlw	high STR_246
 23178  004786  0100               	movlb	0	; () banked
 23179  004788  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23180  00478A  0E9D               	movlw	low STR_246
 23181  00478C  6F61               	movwf	?_putsUSART& (0+255),b
 23182  00478E  EC89  F027         	call	_putsUSART	;wreg free
 23183                           
 23184                           ;main.c: 2537: itoa(wrkbuf, 1, 10);
 23185  004792  D838               	call	PL64	;call to abstracted procedure
 23186  004794  0E01               	movlw	1
 23187  004796  6F72               	movwf	(?_itoa+2)& (0+255),b
 23188  004798  6B75               	clrf	(?_itoa+5)& (0+255),b
 23189  00479A  0E0A               	movlw	10
 23190  00479C  6F74               	movwf	(?_itoa+4)& (0+255),b
 23191  00479E  EC67  F029         	call	_itoa	;wreg free
 23192                           
 23193                           ; BSR set to: 0
 23194                           ;main.c: 2538: putsUSART(wrkbuf);
 23195  0047A2  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23196  0047A4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23197  0047A6  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23198  0047A8  6F61               	movwf	?_putsUSART& (0+255),b
 23199  0047AA  EC89  F027         	call	_putsUSART	;wreg free
 23200  0047AE                     l1138:
 23201  0047AE  A2AC               	btfss	4012,1,c	;volatile
 23202  0047B0  D7FE               	goto	l1138
 23203                           
 23204                           ;main.c: 2540: WriteUSART('.');
 23205  0047B2  0E2E               	movlw	46
 23206  0047B4  EC56  F02A         	call	_WriteUSART
 23207                           
 23208                           ;main.c: 2541: itoa(wrkbuf, 0, 10);
 23209  0047B8  D825               	call	PL64	;call to abstracted procedure
 23210  0047BA  6B72               	clrf	(?_itoa+2)& (0+255),b
 23211  0047BC  6B75               	clrf	(?_itoa+5)& (0+255),b
 23212  0047BE  0E0A               	movlw	10
 23213  0047C0  6F74               	movwf	(?_itoa+4)& (0+255),b
 23214  0047C2  EC67  F029         	call	_itoa	;wreg free
 23215                           
 23216                           ; BSR set to: 0
 23217                           ;main.c: 2542: putsUSART(wrkbuf);
 23218  0047C6  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23219  0047C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23220  0047CA  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23221  0047CC  6F61               	movwf	?_putsUSART& (0+255),b
 23222  0047CE  EC89  F027         	call	_putsUSART	;wreg free
 23223  0047D2                     l1141:
 23224  0047D2  A2AC               	btfss	4012,1,c	;volatile
 23225  0047D4  D7FE               	goto	l1141
 23226                           
 23227                           ;main.c: 2544: WriteUSART('.');
 23228  0047D6  0E2E               	movlw	46
 23229  0047D8  EC56  F02A         	call	_WriteUSART
 23230                           
 23231                           ;main.c: 2545: itoa(wrkbuf, 0, 10);
 23232  0047DC  D813               	call	PL64	;call to abstracted procedure
 23233  0047DE  6B72               	clrf	(?_itoa+2)& (0+255),b
 23234  0047E0  6B75               	clrf	(?_itoa+5)& (0+255),b
 23235  0047E2  0E0A               	movlw	10
 23236  0047E4  6F74               	movwf	(?_itoa+4)& (0+255),b
 23237  0047E6  EC67  F029         	call	_itoa	;wreg free
 23238                           
 23239                           ; BSR set to: 0
 23240                           ;main.c: 2546: putsUSART(wrkbuf);
 23241  0047EA  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23242  0047EC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23243  0047EE  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23244  0047F0  6F61               	movwf	?_putsUSART& (0+255),b
 23245  0047F2  EC89  F027         	call	_putsUSART	;wreg free
 23246                           
 23247                           ;main.c: 2547: putsUSART((char *) "\r\n");
 23248  0047F6  0E74               	movlw	high (STR_189+50)
 23249  0047F8  0100               	movlb	0	; () banked
 23250  0047FA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23251  0047FC  0EAE               	movlw	low (STR_189+50)
 23252  0047FE  6F61               	movwf	?_putsUSART& (0+255),b
 23253  004800  EF89  F027         	goto	_putsUSART	;wreg free
 23254  004804                     __end_of_printFirmwareVersion:
 23255                           	opt stack 0
 23256  004804                     PL64:
 23257                           	opt stack 23
 23258  004804  0100               	movlb	0	; () banked
 23259  004806  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23260  004808  6F71               	movwf	(?_itoa+1)& (0+255),b
 23261  00480A  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23262  00480C  6F70               	movwf	?_itoa& (0+255),b
 23263  00480E  6B73               	clrf	(?_itoa+3)& (0+255),b
 23264  004810  0012               	return	
 23265  004812                     __end_ofPL64:
 23266                           	opt stack 0
 23267                           tblptru	equ	0xFF8
 23268                           tblptrh	equ	0xFF7
 23269                           tblptrl	equ	0xFF6
 23270                           tablat	equ	0xFF5
 23271                           prodh	equ	0xFF4
 23272                           prodl	equ	0xFF3
 23273                           intcon	equ	0xFF2
 23274                           indf0	equ	0xFEF
 23275                           postinc0	equ	0xFEE
 23276                           fsr0h	equ	0xFEA
 23277                           fsr0l	equ	0xFE9
 23278                           wreg	equ	0xFE8
 23279                           indf1	equ	0xFE7
 23280                           postinc1	equ	0xFE6
 23281                           postdec1	equ	0xFE5
 23282                           fsr1h	equ	0xFE2
 23283                           fsr1l	equ	0xFE1
 23284                           indf2	equ	0xFDF
 23285                           postinc2	equ	0xFDE
 23286                           postdec2	equ	0xFDD
 23287                           plusw2	equ	0xFDB
 23288                           fsr2h	equ	0xFDA
 23289                           fsr2l	equ	0xFD9
 23290                           status	equ	0xFD8
 23291                           
 23292 ;; *************** function _itoa *****************
 23293 ;; Defined at:
 23294 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 23295 ;; Parameters:    Size  Location     Type
 23296 ;;  buf             2   16[BANK0 ] PTR unsigned char 
 23297 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 23298 ;;  val             2   18[BANK0 ] int 
 23299 ;;  base            2   20[BANK0 ] int 
 23300 ;; Auto vars:     Size  Location     Type
 23301 ;;  cp              2    0        PTR unsigned char 
 23302 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 23303 ;; Return value:  Size  Location     Type
 23304 ;;                  2   16[BANK0 ] PTR unsigned char 
 23305 ;; Registers used:
 23306 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23307 ;; Tracked objects:
 23308 ;;		On entry : F/0
 23309 ;;		On exit  : F/0
 23310 ;;		Unchanged: 0/0
 23311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23312 ;;      Params:         0       6       0       0       0       0       0
 23313 ;;      Locals:         0       2       0       0       0       0       0
 23314 ;;      Temps:          0       0       0       0       0       0       0
 23315 ;;      Totals:         0       8       0       0       0       0       0
 23316 ;;Total ram usage:        8 bytes
 23317 ;; Hardware stack levels used:    1
 23318 ;; Hardware stack levels required when called:    5
 23319 ;; This function calls:
 23320 ;;		_utoa
 23321 ;; This function is called by:
 23322 ;;		_receivePrintEventSLCAN
 23323 ;;		_findNodes
 23324 ;;		_printGUID
 23325 ;;		_printNodeFirmwareVersion
 23326 ;;		_printFirmwareVersion
 23327 ;; This function uses a non-reentrant model
 23328 ;;
 23329                           
 23330                           	psect	text60
 23331  0052CE                     __ptext60:
 23332                           	opt stack 0
 23333  0052CE                     _itoa:
 23334                           	opt stack 23
 23335                           
 23336                           ; BSR set to: 0
 23337                           
 23338                           ;incstack = 0
 23339                           ;incstack = 0
 23340  0052CE  AF73               	btfss	(itoa@val+1)& (0+255),7,b
 23341  0052D0  D00C               	goto	l12139
 23342                           
 23343                           ; BSR set to: 0
 23344  0052D2  C070  FFD9         	movff	itoa@buf,fsr2l
 23345  0052D6  C071  FFDA         	movff	itoa@buf+1,fsr2h
 23346  0052DA  0E2D               	movlw	45
 23347  0052DC  6EDF               	movwf	indf2,c
 23348                           
 23349                           ; BSR set to: 0
 23350  0052DE  4B70               	infsnz	itoa@buf& (0+255),f,b
 23351  0052E0  2B71               	incf	(itoa@buf+1)& (0+255),f,b
 23352                           
 23353                           ; BSR set to: 0
 23354  0052E2  6D72               	negf	itoa@val& (0+255),b
 23355  0052E4  1F73               	comf	(itoa@val+1)& (0+255),f,b
 23356  0052E6  B0D8               	btfsc	status,0,c
 23357  0052E8  2B73               	incf	(itoa@val+1)& (0+255),f,b
 23358  0052EA                     l12139:
 23359                           
 23360                           ; BSR set to: 0
 23361  0052EA  C070  F067         	movff	itoa@buf,?_utoa
 23362  0052EE  C071  F068         	movff	itoa@buf+1,?_utoa+1
 23363  0052F2  C072  F069         	movff	itoa@val,?_utoa+2
 23364  0052F6  C073  F06A         	movff	itoa@val+1,?_utoa+3
 23365  0052FA  C074  F06B         	movff	itoa@base,?_utoa+4
 23366  0052FE  C075  F06C         	movff	itoa@base+1,?_utoa+5
 23367  005302  EF41  F022         	goto	_utoa	;wreg free
 23368  005306                     __end_of_itoa:
 23369                           	opt stack 0
 23370                           tblptru	equ	0xFF8
 23371                           tblptrh	equ	0xFF7
 23372                           tblptrl	equ	0xFF6
 23373                           tablat	equ	0xFF5
 23374                           prodh	equ	0xFF4
 23375                           prodl	equ	0xFF3
 23376                           intcon	equ	0xFF2
 23377                           indf0	equ	0xFEF
 23378                           postinc0	equ	0xFEE
 23379                           fsr0h	equ	0xFEA
 23380                           fsr0l	equ	0xFE9
 23381                           wreg	equ	0xFE8
 23382                           indf1	equ	0xFE7
 23383                           postinc1	equ	0xFE6
 23384                           postdec1	equ	0xFE5
 23385                           fsr1h	equ	0xFE2
 23386                           fsr1l	equ	0xFE1
 23387                           indf2	equ	0xFDF
 23388                           postinc2	equ	0xFDE
 23389                           postdec2	equ	0xFDD
 23390                           plusw2	equ	0xFDB
 23391                           fsr2h	equ	0xFDA
 23392                           fsr2l	equ	0xFD9
 23393                           status	equ	0xFD8
 23394                           
 23395 ;; *************** function _utoa *****************
 23396 ;; Defined at:
 23397 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 23398 ;; Parameters:    Size  Location     Type
 23399 ;;  buf             2    7[BANK0 ] PTR unsigned char 
 23400 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 23401 ;;  val             2    9[BANK0 ] unsigned int 
 23402 ;;  base            2   11[BANK0 ] int 
 23403 ;; Auto vars:     Size  Location     Type
 23404 ;;  v               2   13[BANK0 ] unsigned int 
 23405 ;;  c               1   15[BANK0 ] unsigned char 
 23406 ;; Return value:  Size  Location     Type
 23407 ;;                  2    7[BANK0 ] PTR unsigned char 
 23408 ;; Registers used:
 23409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23410 ;; Tracked objects:
 23411 ;;		On entry : F/0
 23412 ;;		On exit  : F/0
 23413 ;;		Unchanged: 0/0
 23414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23415 ;;      Params:         0       6       0       0       0       0       0
 23416 ;;      Locals:         0       3       0       0       0       0       0
 23417 ;;      Temps:          0       0       0       0       0       0       0
 23418 ;;      Totals:         0       9       0       0       0       0       0
 23419 ;;Total ram usage:        9 bytes
 23420 ;; Hardware stack levels used:    1
 23421 ;; Hardware stack levels required when called:    4
 23422 ;; This function calls:
 23423 ;;		___lwdiv
 23424 ;;		___lwmod
 23425 ;; This function is called by:
 23426 ;;		_itoa
 23427 ;; This function uses a non-reentrant model
 23428 ;;
 23429                           
 23430                           	psect	text61
 23431  004482                     __ptext61:
 23432                           	opt stack 0
 23433  004482                     _utoa:
 23434                           	opt stack 23
 23435                           
 23436                           ; BSR set to: 0
 23437                           
 23438                           ; BSR set to: 0
 23439                           ;incstack = 0
 23440                           ;incstack = 0
 23441  004482  C069  F06D         	movff	utoa@val,utoa@v
 23442  004486  C06A  F06E         	movff	utoa@val+1,utoa@v+1
 23443  00448A                     l12301:
 23444                           
 23445                           ; BSR set to: 0
 23446  00448A  C06D  F060         	movff	utoa@v,?___lwdiv
 23447  00448E  C06E  F061         	movff	utoa@v+1,?___lwdiv+1
 23448  004492  C06B  F062         	movff	utoa@base,?___lwdiv+2
 23449  004496  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 23450  00449A  EC01  F028         	call	___lwdiv	;wreg free
 23451  00449E  C060  F06D         	movff	?___lwdiv,utoa@v
 23452  0044A2  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
 23453                           
 23454                           ; BSR set to: 0
 23455  0044A6  4B67               	infsnz	utoa@buf& (0+255),f,b
 23456  0044A8  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 23457                           
 23458                           ; BSR set to: 0
 23459  0044AA  516E               	movf	(utoa@v+1)& (0+255),w,b
 23460  0044AC  116D               	iorwf	utoa@v& (0+255),w,b
 23461  0044AE  E1ED               	bnz	l12301
 23462                           
 23463                           ; BSR set to: 0
 23464  0044B0  C067  FFD9         	movff	utoa@buf,fsr2l
 23465  0044B4  C068  FFDA         	movff	utoa@buf+1,fsr2h
 23466  0044B8  0E00               	movlw	0
 23467  0044BA  6ADF               	clrf	indf2,c
 23468                           
 23469                           ; BSR set to: 0
 23470  0044BC  0767               	decf	utoa@buf& (0+255),f,b
 23471  0044BE  A0D8               	btfss	status,0,c
 23472  0044C0  0768               	decf	(utoa@buf+1)& (0+255),f,b
 23473  0044C2                     l12311:
 23474                           
 23475                           ; BSR set to: 0
 23476  0044C2  C069  F060         	movff	utoa@val,?___lwmod
 23477  0044C6  C06A  F061         	movff	utoa@val+1,?___lwmod+1
 23478  0044CA  C06B  F062         	movff	utoa@base,?___lwmod+2
 23479  0044CE  C06C  F063         	movff	utoa@base+1,?___lwmod+3
 23480  0044D2  EC2C  F029         	call	___lwmod	;wreg free
 23481  0044D6  5160               	movf	?___lwmod& (0+255),w,b
 23482  0044D8  6F6F               	movwf	utoa@c& (0+255),b
 23483                           
 23484                           ; BSR set to: 0
 23485  0044DA  C069  F060         	movff	utoa@val,?___lwdiv
 23486  0044DE  C06A  F061         	movff	utoa@val+1,?___lwdiv+1
 23487  0044E2  C06B  F062         	movff	utoa@base,?___lwdiv+2
 23488  0044E6  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 23489  0044EA  EC01  F028         	call	___lwdiv	;wreg free
 23490  0044EE  C060  F069         	movff	?___lwdiv,utoa@val
 23491  0044F2  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
 23492                           
 23493                           ; BSR set to: 0
 23494  0044F6  0E09               	movlw	9
 23495  0044F8  656F               	cpfsgt	utoa@c& (0+255),b
 23496  0044FA  D002               	goto	l2215
 23497                           
 23498                           ; BSR set to: 0
 23499  0044FC  0E07               	movlw	7
 23500  0044FE  276F               	addwf	utoa@c& (0+255),f,b
 23501  004500                     l2215:
 23502                           
 23503                           ; BSR set to: 0
 23504  004500  0E30               	movlw	48
 23505  004502  276F               	addwf	utoa@c& (0+255),f,b
 23506                           
 23507                           ; BSR set to: 0
 23508  004504  C067  FFD9         	movff	utoa@buf,fsr2l
 23509  004508  C068  FFDA         	movff	utoa@buf+1,fsr2h
 23510  00450C  C06F  FFDF         	movff	utoa@c,indf2
 23511                           
 23512                           ; BSR set to: 0
 23513  004510  0767               	decf	utoa@buf& (0+255),f,b
 23514  004512  A0D8               	btfss	status,0,c
 23515  004514  0768               	decf	(utoa@buf+1)& (0+255),f,b
 23516                           
 23517                           ; BSR set to: 0
 23518  004516  516A               	movf	(utoa@val+1)& (0+255),w,b
 23519  004518  1169               	iorwf	utoa@val& (0+255),w,b
 23520  00451A  E1D3               	bnz	l12311
 23521                           
 23522                           ; BSR set to: 0
 23523                           ;	Return value of _utoa is never used
 23524  00451C  4B67               	infsnz	utoa@buf& (0+255),f,b
 23525  00451E  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 23526                           
 23527                           ; BSR set to: 0
 23528  004520  0012               	return	
 23529  004522                     __end_of_utoa:
 23530                           	opt stack 0
 23531                           tblptru	equ	0xFF8
 23532                           tblptrh	equ	0xFF7
 23533                           tblptrl	equ	0xFF6
 23534                           tablat	equ	0xFF5
 23535                           prodh	equ	0xFF4
 23536                           prodl	equ	0xFF3
 23537                           intcon	equ	0xFF2
 23538                           indf0	equ	0xFEF
 23539                           postinc0	equ	0xFEE
 23540                           fsr0h	equ	0xFEA
 23541                           fsr0l	equ	0xFE9
 23542                           wreg	equ	0xFE8
 23543                           indf1	equ	0xFE7
 23544                           postinc1	equ	0xFE6
 23545                           postdec1	equ	0xFE5
 23546                           fsr1h	equ	0xFE2
 23547                           fsr1l	equ	0xFE1
 23548                           indf2	equ	0xFDF
 23549                           postinc2	equ	0xFDE
 23550                           postdec2	equ	0xFDD
 23551                           plusw2	equ	0xFDB
 23552                           fsr2h	equ	0xFDA
 23553                           fsr2l	equ	0xFD9
 23554                           status	equ	0xFD8
 23555                           
 23556 ;; *************** function ___lwmod *****************
 23557 ;; Defined at:
 23558 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 23559 ;; Parameters:    Size  Location     Type
 23560 ;;  dividend        2    0[BANK0 ] unsigned int 
 23561 ;;  divisor         2    2[BANK0 ] unsigned int 
 23562 ;; Auto vars:     Size  Location     Type
 23563 ;;  counter         1    4[BANK0 ] unsigned char 
 23564 ;; Return value:  Size  Location     Type
 23565 ;;                  2    0[BANK0 ] unsigned int 
 23566 ;; Registers used:
 23567 ;;		wreg, status,2, status,0
 23568 ;; Tracked objects:
 23569 ;;		On entry : F/0
 23570 ;;		On exit  : F/0
 23571 ;;		Unchanged: 0/0
 23572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23573 ;;      Params:         0       4       0       0       0       0       0
 23574 ;;      Locals:         0       1       0       0       0       0       0
 23575 ;;      Temps:          0       0       0       0       0       0       0
 23576 ;;      Totals:         0       5       0       0       0       0       0
 23577 ;;Total ram usage:        5 bytes
 23578 ;; Hardware stack levels used:    1
 23579 ;; Hardware stack levels required when called:    3
 23580 ;; This function calls:
 23581 ;;		Nothing
 23582 ;; This function is called by:
 23583 ;;		_utoa
 23584 ;; This function uses a non-reentrant model
 23585 ;;
 23586                           
 23587                           	psect	text62
 23588  005258                     __ptext62:
 23589                           	opt stack 0
 23590  005258                     ___lwmod:
 23591                           	opt stack 23
 23592                           
 23593                           ; BSR set to: 0
 23594                           
 23595                           ; BSR set to: 0
 23596                           ;incstack = 0
 23597                           ;incstack = 0
 23598  005258  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 23599  00525A  1162               	iorwf	___lwmod@divisor& (0+255),w,b
 23600  00525C  E017               	bz	l2339
 23601                           
 23602                           ; BSR set to: 0
 23603  00525E  0E01               	movlw	1
 23604  005260  6F64               	movwf	___lwmod@counter& (0+255),b
 23605  005262  D004               	goto	l12395
 23606  005264                     l12393:
 23607                           
 23608                           ; BSR set to: 0
 23609  005264  90D8               	bcf	status,0,c
 23610  005266  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 23611  005268  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 23612  00526A  2B64               	incf	___lwmod@counter& (0+255),f,b
 23613  00526C                     l12395:
 23614                           
 23615                           ; BSR set to: 0
 23616  00526C  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 23617  00526E  D7FA               	goto	l12393
 23618  005270                     l12397:
 23619                           
 23620                           ; BSR set to: 0
 23621  005270  5162               	movf	___lwmod@divisor& (0+255),w,b
 23622  005272  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 23623  005274  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 23624  005276  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 23625  005278  E304               	bnc	l12401
 23626                           
 23627                           ; BSR set to: 0
 23628  00527A  5162               	movf	___lwmod@divisor& (0+255),w,b
 23629  00527C  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 23630  00527E  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 23631  005280  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 23632  005282                     l12401:
 23633                           
 23634                           ; BSR set to: 0
 23635  005282  90D8               	bcf	status,0,c
 23636  005284  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 23637  005286  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 23638                           
 23639                           ; BSR set to: 0
 23640  005288  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 23641  00528A  D7F2               	goto	l12397
 23642  00528C                     l2339:
 23643                           
 23644                           ; BSR set to: 0
 23645  00528C  C060  F060         	movff	___lwmod@dividend,?___lwmod
 23646  005290  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 23647                           
 23648                           ; BSR set to: 0
 23649  005294  0012               	return	
 23650  005296                     __end_of___lwmod:
 23651                           	opt stack 0
 23652                           tblptru	equ	0xFF8
 23653                           tblptrh	equ	0xFF7
 23654                           tblptrl	equ	0xFF6
 23655                           tablat	equ	0xFF5
 23656                           prodh	equ	0xFF4
 23657                           prodl	equ	0xFF3
 23658                           intcon	equ	0xFF2
 23659                           indf0	equ	0xFEF
 23660                           postinc0	equ	0xFEE
 23661                           fsr0h	equ	0xFEA
 23662                           fsr0l	equ	0xFE9
 23663                           wreg	equ	0xFE8
 23664                           indf1	equ	0xFE7
 23665                           postinc1	equ	0xFE6
 23666                           postdec1	equ	0xFE5
 23667                           fsr1h	equ	0xFE2
 23668                           fsr1l	equ	0xFE1
 23669                           indf2	equ	0xFDF
 23670                           postinc2	equ	0xFDE
 23671                           postdec2	equ	0xFDD
 23672                           plusw2	equ	0xFDB
 23673                           fsr2h	equ	0xFDA
 23674                           fsr2l	equ	0xFD9
 23675                           status	equ	0xFD8
 23676                           
 23677 ;; *************** function ___lwdiv *****************
 23678 ;; Defined at:
 23679 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 23680 ;; Parameters:    Size  Location     Type
 23681 ;;  dividend        2    0[BANK0 ] unsigned int 
 23682 ;;  divisor         2    2[BANK0 ] unsigned int 
 23683 ;; Auto vars:     Size  Location     Type
 23684 ;;  quotient        2    5[BANK0 ] unsigned int 
 23685 ;;  counter         1    4[BANK0 ] unsigned char 
 23686 ;; Return value:  Size  Location     Type
 23687 ;;                  2    0[BANK0 ] unsigned int 
 23688 ;; Registers used:
 23689 ;;		wreg, status,2, status,0
 23690 ;; Tracked objects:
 23691 ;;		On entry : F/0
 23692 ;;		On exit  : F/0
 23693 ;;		Unchanged: 0/0
 23694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23695 ;;      Params:         0       4       0       0       0       0       0
 23696 ;;      Locals:         0       3       0       0       0       0       0
 23697 ;;      Temps:          0       0       0       0       0       0       0
 23698 ;;      Totals:         0       7       0       0       0       0       0
 23699 ;;Total ram usage:        7 bytes
 23700 ;; Hardware stack levels used:    1
 23701 ;; Hardware stack levels required when called:    3
 23702 ;; This function calls:
 23703 ;;		Nothing
 23704 ;; This function is called by:
 23705 ;;		_utoa
 23706 ;; This function uses a non-reentrant model
 23707 ;;
 23708                           
 23709                           	psect	text63
 23710  005002                     __ptext63:
 23711                           	opt stack 0
 23712  005002                     ___lwdiv:
 23713                           	opt stack 23
 23714                           
 23715                           ; BSR set to: 0
 23716                           
 23717                           ; BSR set to: 0
 23718                           ;incstack = 0
 23719                           ;incstack = 0
 23720  005002  6B65               	clrf	___lwdiv@quotient& (0+255),b
 23721  005004  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
 23722                           
 23723                           ; BSR set to: 0
 23724  005006  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 23725  005008  1162               	iorwf	___lwdiv@divisor& (0+255),w,b
 23726  00500A  E01B               	bz	l2329
 23727                           
 23728                           ; BSR set to: 0
 23729  00500C  0E01               	movlw	1
 23730  00500E  6F64               	movwf	___lwdiv@counter& (0+255),b
 23731  005010  D004               	goto	l12375
 23732  005012                     l12373:
 23733                           
 23734                           ; BSR set to: 0
 23735  005012  90D8               	bcf	status,0,c
 23736  005014  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 23737  005016  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 23738  005018  2B64               	incf	___lwdiv@counter& (0+255),f,b
 23739  00501A                     l12375:
 23740                           
 23741                           ; BSR set to: 0
 23742  00501A  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 23743  00501C  D7FA               	goto	l12373
 23744  00501E                     l12377:
 23745                           
 23746                           ; BSR set to: 0
 23747  00501E  90D8               	bcf	status,0,c
 23748  005020  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 23749  005022  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 23750                           
 23751                           ; BSR set to: 0
 23752  005024  5162               	movf	___lwdiv@divisor& (0+255),w,b
 23753  005026  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 23754  005028  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 23755  00502A  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 23756  00502C  E305               	bnc	l12385
 23757                           
 23758                           ; BSR set to: 0
 23759  00502E  5162               	movf	___lwdiv@divisor& (0+255),w,b
 23760  005030  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 23761  005032  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 23762  005034  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 23763                           
 23764                           ; BSR set to: 0
 23765  005036  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 23766  005038                     l12385:
 23767                           
 23768                           ; BSR set to: 0
 23769  005038  90D8               	bcf	status,0,c
 23770  00503A  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 23771  00503C  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 23772                           
 23773                           ; BSR set to: 0
 23774  00503E  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 23775  005040  D7EE               	goto	l12377
 23776  005042                     l2329:
 23777                           
 23778                           ; BSR set to: 0
 23779  005042  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 23780  005046  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 23781                           
 23782                           ; BSR set to: 0
 23783  00504A  0012               	return	
 23784  00504C                     __end_of___lwdiv:
 23785                           	opt stack 0
 23786                           tblptru	equ	0xFF8
 23787                           tblptrh	equ	0xFF7
 23788                           tblptrl	equ	0xFF6
 23789                           tablat	equ	0xFF5
 23790                           prodh	equ	0xFF4
 23791                           prodl	equ	0xFF3
 23792                           intcon	equ	0xFF2
 23793                           indf0	equ	0xFEF
 23794                           postinc0	equ	0xFEE
 23795                           fsr0h	equ	0xFEA
 23796                           fsr0l	equ	0xFE9
 23797                           wreg	equ	0xFE8
 23798                           indf1	equ	0xFE7
 23799                           postinc1	equ	0xFE6
 23800                           postdec1	equ	0xFE5
 23801                           fsr1h	equ	0xFE2
 23802                           fsr1l	equ	0xFE1
 23803                           indf2	equ	0xFDF
 23804                           postinc2	equ	0xFDE
 23805                           postdec2	equ	0xFDD
 23806                           plusw2	equ	0xFDB
 23807                           fsr2h	equ	0xFDA
 23808                           fsr2l	equ	0xFD9
 23809                           status	equ	0xFD8
 23810                           
 23811 ;; *************** function _printMode *****************
 23812 ;; Defined at:
 23813 ;;		line 2555 in file "main.c"
 23814 ;; Parameters:    Size  Location     Type
 23815 ;;		None
 23816 ;; Auto vars:     Size  Location     Type
 23817 ;;		None
 23818 ;; Return value:  Size  Location     Type
 23819 ;;		None               void
 23820 ;; Registers used:
 23821 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23822 ;; Tracked objects:
 23823 ;;		On entry : 0/0
 23824 ;;		On exit  : 0/0
 23825 ;;		Unchanged: 0/0
 23826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23827 ;;      Params:         0       0       0       0       0       0       0
 23828 ;;      Locals:         0       0       0       0       0       0       0
 23829 ;;      Temps:          0       0       0       0       0       0       0
 23830 ;;      Totals:         0       0       0       0       0       0       0
 23831 ;;Total ram usage:        0 bytes
 23832 ;; Hardware stack levels used:    1
 23833 ;; Hardware stack levels required when called:    5
 23834 ;; This function calls:
 23835 ;;		_putsUSART
 23836 ;; This function is called by:
 23837 ;;		_main
 23838 ;; This function uses a non-reentrant model
 23839 ;;
 23840                           
 23841                           	psect	text64
 23842  004B0A                     __ptext64:
 23843                           	opt stack 0
 23844  004B0A                     _printMode:
 23845                           	opt stack 25
 23846                           
 23847                           ;main.c: 2556: putsUSART((char *) "Mode: ");
 23848                           
 23849                           ; BSR set to: 0
 23850                           ;incstack = 0
 23851                           ;incstack = 0
 23852  004B0A  0E7F               	movlw	high STR_248
 23853  004B0C  0100               	movlb	0	; () banked
 23854  004B0E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23855  004B10  0E26               	movlw	low STR_248
 23856  004B12  6F61               	movwf	?_putsUSART& (0+255),b
 23857  004B14  EC89  F027         	call	_putsUSART	;wreg free
 23858                           
 23859                           ;main.c: 2557: if (0 == mode) {
 23860  004B18  0100               	movlb	0	; () banked
 23861  004B1A  67F8               	tstfsz	_mode& (0+255),b
 23862  004B1C  D007               	goto	l9621
 23863                           
 23864                           ; BSR set to: 0
 23865                           ;main.c: 2558: putsUSART((char *) "Verbose");
 23866  004B1E  0E7F               	movlw	high STR_249
 23867  004B20  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23868  004B22  0E1E               	movlw	low STR_249
 23869  004B24  6F61               	movwf	?_putsUSART& (0+255),b
 23870  004B26  EC89  F027         	call	_putsUSART	;wreg free
 23871                           
 23872                           ;main.c: 2559: } else if (1 == mode) {
 23873  004B2A  D023               	goto	l1148
 23874  004B2C                     l9621:
 23875                           
 23876                           ; BSR set to: 0
 23877  004B2C  05F8               	decf	_mode& (0+255),w,b
 23878  004B2E  E107               	bnz	l9625
 23879                           
 23880                           ; BSR set to: 0
 23881                           ;main.c: 2560: putsUSART((char *) "VSCP Driver");
 23882  004B30  0E7E               	movlw	high STR_250
 23883  004B32  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23884  004B34  0E7B               	movlw	low STR_250
 23885  004B36  6F61               	movwf	?_putsUSART& (0+255),b
 23886  004B38  EC89  F027         	call	_putsUSART	;wreg free
 23887                           
 23888                           ;main.c: 2561: } else if (2 == mode) {
 23889  004B3C  D01A               	goto	l1148
 23890  004B3E                     l9625:
 23891                           
 23892                           ; BSR set to: 0
 23893  004B3E  51F8               	movf	_mode& (0+255),w,b
 23894  004B40  0A02               	xorlw	2
 23895  004B42  E107               	bnz	l9629
 23896                           
 23897                           ; BSR set to: 0
 23898                           ;main.c: 2562: putsUSART((char *) "SL Driver");
 23899  004B44  0E7E               	movlw	high STR_251
 23900  004B46  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23901  004B48  0EB1               	movlw	low STR_251
 23902  004B4A  6F61               	movwf	?_putsUSART& (0+255),b
 23903  004B4C  EC89  F027         	call	_putsUSART	;wreg free
 23904                           
 23905                           ;main.c: 2563: } else if (3 == mode) {
 23906  004B50  D010               	goto	l1148
 23907  004B52                     l9629:
 23908                           
 23909                           ; BSR set to: 0
 23910  004B52  51F8               	movf	_mode& (0+255),w,b
 23911  004B54  0A03               	xorlw	3
 23912  004B56  E107               	bnz	l9633
 23913                           
 23914                           ; BSR set to: 0
 23915                           ;main.c: 2564: putsUSART((char *) "VSCP Node");
 23916  004B58  0E7E               	movlw	high STR_252
 23917  004B5A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23918  004B5C  0EA7               	movlw	low STR_252
 23919  004B5E  6F61               	movwf	?_putsUSART& (0+255),b
 23920  004B60  EC89  F027         	call	_putsUSART	;wreg free
 23921                           
 23922                           ;main.c: 2565: } else {
 23923  004B64  D006               	goto	l1148
 23924  004B66                     l9633:
 23925                           
 23926                           ; BSR set to: 0
 23927                           ;main.c: 2566: putsUSART((char *) "Unknown (Verbose used)");
 23928  004B66  0E7C               	movlw	high STR_253
 23929  004B68  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23930  004B6A  0EEF               	movlw	low STR_253
 23931  004B6C  6F61               	movwf	?_putsUSART& (0+255),b
 23932  004B6E  EC89  F027         	call	_putsUSART	;wreg free
 23933  004B72                     l1148:
 23934                           
 23935                           ;main.c: 2567: }
 23936                           ;main.c: 2568: putsUSART((char *) "\r\n");
 23937  004B72  0E74               	movlw	high (STR_189+50)
 23938  004B74  0100               	movlb	0	; () banked
 23939  004B76  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23940  004B78  0EAE               	movlw	low (STR_189+50)
 23941  004B7A  6F61               	movwf	?_putsUSART& (0+255),b
 23942  004B7C  EF89  F027         	goto	_putsUSART	;wreg free
 23943  004B80                     __end_of_printMode:
 23944                           	opt stack 0
 23945                           tblptru	equ	0xFF8
 23946                           tblptrh	equ	0xFF7
 23947                           tblptrl	equ	0xFF6
 23948                           tablat	equ	0xFF5
 23949                           prodh	equ	0xFF4
 23950                           prodl	equ	0xFF3
 23951                           intcon	equ	0xFF2
 23952                           indf0	equ	0xFEF
 23953                           postinc0	equ	0xFEE
 23954                           fsr0h	equ	0xFEA
 23955                           fsr0l	equ	0xFE9
 23956                           wreg	equ	0xFE8
 23957                           indf1	equ	0xFE7
 23958                           postinc1	equ	0xFE6
 23959                           postdec1	equ	0xFE5
 23960                           fsr1h	equ	0xFE2
 23961                           fsr1l	equ	0xFE1
 23962                           indf2	equ	0xFDF
 23963                           postinc2	equ	0xFDE
 23964                           postdec2	equ	0xFDD
 23965                           plusw2	equ	0xFDB
 23966                           fsr2h	equ	0xFDA
 23967                           fsr2l	equ	0xFD9
 23968                           status	equ	0xFD8
 23969                           
 23970 ;; *************** function _putsUSART *****************
 23971 ;; Defined at:
 23972 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 23973 ;; Parameters:    Size  Location     Type
 23974 ;;  data            2    1[BANK0 ] PTR unsigned char 
 23975 ;;		 -> STR_254(3), STR_253(23), STR_252(10), STR_251(10), 
 23976 ;;		 -> STR_250(12), STR_249(8), STR_248(7), STR_247(3), 
 23977 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_246(10), STR_245(3), STR_242(20), 
 23978 ;;		 -> STR_241(3), STR_240(14), STR_239(3), STR_235(8), 
 23979 ;;		 -> STR_234(15), STR_233(67), STR_232(3), STR_231(27), 
 23980 ;;		 -> STR_230(67), STR_229(39), STR_228(62), STR_227(55), 
 23981 ;;		 -> STR_226(49), STR_225(67), STR_224(47), STR_223(47), 
 23982 ;;		 -> STR_222(34), STR_221(71), STR_220(20), STR_219(78), 
 23983 ;;		 -> STR_218(24), STR_217(77), STR_216(67), STR_215(69), 
 23984 ;;		 -> STR_214(47), STR_213(40), STR_212(39), STR_211(33), 
 23985 ;;		 -> STR_210(23), STR_209(56), STR_208(24), STR_207(44), 
 23986 ;;		 -> STR_206(50), STR_205(31), STR_204(50), STR_203(51), 
 23987 ;;		 -> STR_202(46), STR_201(44), STR_200(27), STR_199(39), 
 23988 ;;		 -> STR_198(39), STR_197(52), STR_196(54), STR_195(55), 
 23989 ;;		 -> STR_194(3), STR_191(24), STR_190(57), STR_189(53), 
 23990 ;;		 -> STR_188(58), STR_187(3), STR_184(25), STR_183(3), 
 23991 ;;		 -> STR_180(24), STR_179(3), STR_176(24), STR_175(3), 
 23992 ;;		 -> STR_172(24), STR_171(3), STR_168(23), STR_167(3), 
 23993 ;;		 -> STR_164(21), STR_163(3), STR_160(22), STR_159(3), 
 23994 ;;		 -> STR_156(17), STR_155(3), STR_152(18), STR_151(4), 
 23995 ;;		 -> STR_150(11), STR_149(2), STR_146(7), STR_143(7), 
 23996 ;;		 -> STR_140(9), STR_137(7), STR_134(8), STR_131(7), 
 23997 ;;		 -> STR_130(2), STR_129(2), STR_128(6), STR_127(8), 
 23998 ;;		 -> STR_126(8), STR_125(20), STR_124(27), STR_123(6), 
 23999 ;;		 -> STR_122(33), STR_119(26), STR_117(32), STR_115(28), 
 24000 ;;		 -> STR_110(40), STR_108(44), STR_105(39), STR_103(36), 
 24001 ;;		 -> STR_101(37), STR_99(40), STR_97(37), STR_96(50), 
 24002 ;;		 -> STR_93(41), STR_91(38), STR_89(39), STR_87(42), 
 24003 ;;		 -> STR_85(39), STR_84(66), STR_81(3), STR_78(20), 
 24004 ;;		 -> STR_76(33), STR_75(35), STR_74(24), STR_72(33), 
 24005 ;;		 -> STR_70(24), STR_67(54), STR_66(6), STR_65(3), 
 24006 ;;		 -> STR_60(34), STR_59(3), STR_56(4), wrkbuf(80), 
 24007 ;;		 -> STR_51(15), STR_49(33), STR_47(24), STR_43(6), 
 24008 ;;		 -> STR_39(18), STR_38(6), STR_36(33), STR_35(6), 
 24009 ;;		 -> STR_27(24), STR_26(18), STR_25(20), STR_24(25), 
 24010 ;;		 -> STR_23(22), STR_22(19), STR_21(20), STR_20(20), 
 24011 ;;		 -> STR_18(6), STR_16(6), STR_14(6), STR_12(6), 
 24012 ;;		 -> STR_10(6), STR_8(6), STR_6(31), STR_4(29), 
 24013 ;;		 -> STR_3(55), STR_2(53), STR_1(37), 
 24014 ;; Auto vars:     Size  Location     Type
 24015 ;;		None
 24016 ;; Return value:  Size  Location     Type
 24017 ;;		None               void
 24018 ;; Registers used:
 24019 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24020 ;; Tracked objects:
 24021 ;;		On entry : F/0
 24022 ;;		On exit  : 0/0
 24023 ;;		Unchanged: 0/0
 24024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24025 ;;      Params:         0       2       0       0       0       0       0
 24026 ;;      Locals:         0       0       0       0       0       0       0
 24027 ;;      Temps:          0       2       0       0       0       0       0
 24028 ;;      Totals:         0       4       0       0       0       0       0
 24029 ;;Total ram usage:        4 bytes
 24030 ;; Hardware stack levels used:    1
 24031 ;; Hardware stack levels required when called:    4
 24032 ;; This function calls:
 24033 ;;		_WriteUSART
 24034 ;; This function is called by:
 24035 ;;		_main
 24036 ;;		_doModeVerbose
 24037 ;;		_doModeSLCAN
 24038 ;;		_receivePrintEventVerbose
 24039 ;;		_receivePrintEventSLCAN
 24040 ;;		_printStatistics
 24041 ;;		_printErrors
 24042 ;;		_printHelp
 24043 ;;		_findNodes
 24044 ;;		_printGUID
 24045 ;;		_printMDF
 24046 ;;		_printNodeFirmwareVersion
 24047 ;;		_printFirmwareVersion
 24048 ;;		_printMode
 24049 ;; This function uses a non-reentrant model
 24050 ;;
 24051                           
 24052                           	psect	text65
 24053  004F12                     __ptext65:
 24054                           	opt stack 0
 24055  004F12                     _putsUSART:
 24056                           	opt stack 24
 24057  004F12                     l1747:
 24058  004F12  A2AC               	btfss	4012,1,c	;volatile
 24059  004F14  D7FE               	goto	l1747
 24060  004F16  0100               	movlb	0	; () banked
 24061  004F18  5161               	movf	putsUSART@data& (0+255),w,b
 24062  004F1A  6EF6               	movwf	tblptrl,c
 24063  004F1C  6EE9               	movwf	fsr0l,c
 24064  004F1E  0E05               	movlw	(high __ramtop+-1)
 24065  004F20  6EEA               	movwf	fsr0h,c
 24066  004F22  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 24067  004F24  64EA               	cpfsgt	fsr0h,c
 24068  004F26  D003               	bra	u11567
 24069  004F28  6EEA               	movwf	fsr0h,c
 24070  004F2A  50EF               	movf	indf0,w,c
 24071  004F2C  D003               	bra	u11560
 24072  004F2E                     u11567:
 24073  004F2E  6EF7               	movwf	tblptrh,c
 24074  004F30  0008               	tblrd		*
 24075  004F32  50F5               	movf	tablat,w,c
 24076  004F34                     u11560:
 24077  004F34  EC56  F02A         	call	_WriteUSART
 24078  004F38  0100               	movlb	0	; () banked
 24079  004F3A  5161               	movf	putsUSART@data& (0+255),w,b
 24080  004F3C  6F63               	movwf	??_putsUSART& (0+255),b
 24081  004F3E  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 24082  004F40  6F64               	movwf	(??_putsUSART+1)& (0+255),b
 24083  004F42  4B61               	infsnz	putsUSART@data& (0+255),f,b
 24084  004F44  2B62               	incf	(putsUSART@data+1)& (0+255),f,b
 24085  004F46  5163               	movf	??_putsUSART& (0+255),w,b
 24086  004F48  6EF6               	movwf	tblptrl,c
 24087  004F4A  6EE9               	movwf	fsr0l,c
 24088  004F4C  0E05               	movlw	(high __ramtop+-1)
 24089  004F4E  6EEA               	movwf	fsr0h,c
 24090  004F50  5164               	movf	(??_putsUSART+1)& (0+255),w,b
 24091  004F52  64EA               	cpfsgt	fsr0h,c
 24092  004F54  D003               	bra	u11577
 24093  004F56  6EEA               	movwf	fsr0h,c
 24094  004F58  50EF               	movf	indf0,w,c
 24095  004F5A  D003               	bra	u11570
 24096  004F5C                     u11577:
 24097  004F5C  6EF7               	movwf	tblptrh,c
 24098  004F5E  0008               	tblrd		*
 24099  004F60  50F5               	movf	tablat,w,c
 24100  004F62                     u11570:
 24101  004F62  0900               	iorlw	0
 24102  004F64  B4D8               	btfsc	status,2,c
 24103  004F66  0012               	return	
 24104  004F68  D7D4               	goto	l1747
 24105  004F6A                     __end_of_putsUSART:
 24106                           	opt stack 0
 24107                           tblptru	equ	0xFF8
 24108                           tblptrh	equ	0xFF7
 24109                           tblptrl	equ	0xFF6
 24110                           tablat	equ	0xFF5
 24111                           prodh	equ	0xFF4
 24112                           prodl	equ	0xFF3
 24113                           intcon	equ	0xFF2
 24114                           indf0	equ	0xFEF
 24115                           postinc0	equ	0xFEE
 24116                           fsr0h	equ	0xFEA
 24117                           fsr0l	equ	0xFE9
 24118                           wreg	equ	0xFE8
 24119                           indf1	equ	0xFE7
 24120                           postinc1	equ	0xFE6
 24121                           postdec1	equ	0xFE5
 24122                           fsr1h	equ	0xFE2
 24123                           fsr1l	equ	0xFE1
 24124                           indf2	equ	0xFDF
 24125                           postinc2	equ	0xFDE
 24126                           postdec2	equ	0xFDD
 24127                           plusw2	equ	0xFDB
 24128                           fsr2h	equ	0xFDA
 24129                           fsr2l	equ	0xFD9
 24130                           status	equ	0xFD8
 24131                           
 24132 ;; *************** function _WriteUSART *****************
 24133 ;; Defined at:
 24134 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 24135 ;; Parameters:    Size  Location     Type
 24136 ;;  data            1    wreg     unsigned char 
 24137 ;; Auto vars:     Size  Location     Type
 24138 ;;  data            1    0[BANK0 ] unsigned char 
 24139 ;; Return value:  Size  Location     Type
 24140 ;;		None               void
 24141 ;; Registers used:
 24142 ;;		wreg
 24143 ;; Tracked objects:
 24144 ;;		On entry : 0/0
 24145 ;;		On exit  : 0/0
 24146 ;;		Unchanged: 0/0
 24147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24148 ;;      Params:         0       0       0       0       0       0       0
 24149 ;;      Locals:         0       1       0       0       0       0       0
 24150 ;;      Temps:          0       0       0       0       0       0       0
 24151 ;;      Totals:         0       1       0       0       0       0       0
 24152 ;;Total ram usage:        1 bytes
 24153 ;; Hardware stack levels used:    1
 24154 ;; Hardware stack levels required when called:    3
 24155 ;; This function calls:
 24156 ;;		Nothing
 24157 ;; This function is called by:
 24158 ;;		_doModeVerbose
 24159 ;;		_sendEscapedUartData
 24160 ;;		_sendVSCPDriverErrorFrame
 24161 ;;		_sendVSCPDriverAck
 24162 ;;		_sendVSCPDriverNack
 24163 ;;		_sendVSCPDriverCommandReply
 24164 ;;		_receivePrintEventCANAL
 24165 ;;		_receivePrintEventSLCAN
 24166 ;;		_printBinary
 24167 ;;		_printFirmwareVersion
 24168 ;;		_putsUSART
 24169 ;; This function uses a non-reentrant model
 24170 ;;
 24171                           
 24172                           	psect	text66
 24173  0054AC                     __ptext66:
 24174                           	opt stack 0
 24175  0054AC                     _WriteUSART:
 24176                           	opt stack 25
 24177                           
 24178                           ;incstack = 0
 24179                           ;incstack = 0
 24180                           ;WriteUSART@data stored from wreg
 24181  0054AC  CFE8 F060          	movff	wreg,WriteUSART@data
 24182  0054B0  ACAC               	btfss	4012,6,c	;volatile
 24183  0054B2  D003               	goto	l11533
 24184  0054B4  90AC               	bcf	4012,0,c	;volatile
 24185  0054B6  B233               	btfsc	_USART_Status,1,c
 24186  0054B8  80AC               	bsf	4012,0,c	;volatile
 24187  0054BA                     l11533:
 24188  0054BA  C060  FFAD         	movff	WriteUSART@data,4013	;volatile
 24189  0054BE  0012               	return	
 24190  0054C0                     __end_of_WriteUSART:
 24191                           	opt stack 0
 24192                           tblptru	equ	0xFF8
 24193                           tblptrh	equ	0xFF7
 24194                           tblptrl	equ	0xFF6
 24195                           tablat	equ	0xFF5
 24196                           prodh	equ	0xFF4
 24197                           prodl	equ	0xFF3
 24198                           intcon	equ	0xFF2
 24199                           indf0	equ	0xFEF
 24200                           postinc0	equ	0xFEE
 24201                           fsr0h	equ	0xFEA
 24202                           fsr0l	equ	0xFE9
 24203                           wreg	equ	0xFE8
 24204                           indf1	equ	0xFE7
 24205                           postinc1	equ	0xFE6
 24206                           postdec1	equ	0xFE5
 24207                           fsr1h	equ	0xFE2
 24208                           fsr1l	equ	0xFE1
 24209                           indf2	equ	0xFDF
 24210                           postinc2	equ	0xFDE
 24211                           postdec2	equ	0xFDD
 24212                           plusw2	equ	0xFDB
 24213                           fsr2h	equ	0xFDA
 24214                           fsr2l	equ	0xFD9
 24215                           status	equ	0xFD8
 24216                           
 24217 ;; *************** function _init *****************
 24218 ;; Defined at:
 24219 ;;		line 353 in file "main.c"
 24220 ;; Parameters:    Size  Location     Type
 24221 ;;		None
 24222 ;; Auto vars:     Size  Location     Type
 24223 ;;		None
 24224 ;; Return value:  Size  Location     Type
 24225 ;;		None               void
 24226 ;; Registers used:
 24227 ;;		wreg, status,2, status,0, cstack
 24228 ;; Tracked objects:
 24229 ;;		On entry : E/0
 24230 ;;		On exit  : F/0
 24231 ;;		Unchanged: 0/0
 24232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24233 ;;      Params:         0       0       0       0       0       0       0
 24234 ;;      Locals:         0       0       0       0       0       0       0
 24235 ;;      Temps:          0       0       0       0       0       0       0
 24236 ;;      Totals:         0       0       0       0       0       0       0
 24237 ;;Total ram usage:        0 bytes
 24238 ;; Hardware stack levels used:    1
 24239 ;; Hardware stack levels required when called:    5
 24240 ;; This function calls:
 24241 ;;		_WriteTimer0
 24242 ;;		_init_app_ram
 24243 ;;		_OpenUSART
 24244 ;;		_OpenTimer0
 24245 ;;		_ECANInitialize
 24246 ;; This function is called by:
 24247 ;;		_main
 24248 ;; This function uses a non-reentrant model
 24249 ;;
 24250                           
 24251                           	psect	text67
 24252  00504C                     __ptext67:
 24253                           	opt stack 0
 24254  00504C                     _init:
 24255                           	opt stack 25
 24256                           
 24257                           ;main.c: 355: init_app_ram();
 24258                           
 24259                           ;incstack = 0
 24260                           ;incstack = 0
 24261  00504C  ECB5  F027         	call	_init_app_ram	;wreg free
 24262                           
 24263                           ; BSR set to: 1
 24264                           ;main.c: 358: OSCCONbits.IRCF0 = 1;
 24265  005050  88D3               	bsf	4051,4,c	;volatile
 24266                           
 24267                           ; BSR set to: 1
 24268                           ;main.c: 359: OSCCONbits.IRCF1 = 1;
 24269  005052  8AD3               	bsf	4051,5,c	;volatile
 24270                           
 24271                           ; BSR set to: 1
 24272                           ;main.c: 360: OSCCONbits.IRCF2 = 1;
 24273  005054  8CD3               	bsf	4051,6,c	;volatile
 24274                           
 24275                           ; BSR set to: 1
 24276                           ;main.c: 361: OSCTUNEbits.PLLEN = 1;
 24277  005056  8C9B               	bsf	3995,6,c	;volatile
 24278                           
 24279                           ; BSR set to: 1
 24280                           ;main.c: 363: TRISBbits.RB2 = 0;
 24281  005058  9493               	bcf	3987,2,c	;volatile
 24282                           
 24283                           ; BSR set to: 1
 24284                           ;main.c: 364: TRISBbits.RB3 = 1;
 24285  00505A  8693               	bsf	3987,3,c	;volatile
 24286                           
 24287                           ; BSR set to: 1
 24288                           ;main.c: 366: TRISCbits.RC1 = 0;
 24289  00505C  9294               	bcf	3988,1,c	;volatile
 24290                           
 24291                           ; BSR set to: 1
 24292                           ;main.c: 367: TRISCbits.RC6 = 0;
 24293  00505E  9C94               	bcf	3988,6,c	;volatile
 24294                           
 24295                           ; BSR set to: 1
 24296                           ;main.c: 368: TRISCbits.RC7 = 1;
 24297  005060  8E94               	bsf	3988,7,c	;volatile
 24298                           
 24299                           ;main.c: 372: OpenUSART( 0b01111111 &
 24300                           ;main.c: 373: 0b11111111 &
 24301                           ;main.c: 374: 0b11111110 &
 24302                           ;main.c: 375: 0b11111101 &
 24303                           ;main.c: 376: 0b11111111,
 24304                           ;main.c: 377: 21);
 24305  005062  0100               	movlb	0	; () banked
 24306  005064  6B61               	clrf	(?_OpenUSART+1)& (0+255),b
 24307  005066  0E15               	movlw	21
 24308  005068  6F60               	movwf	?_OpenUSART& (0+255),b
 24309  00506A  0E7C               	movlw	124
 24310  00506C  EC2F  F027         	call	_OpenUSART
 24311                           
 24312                           ; BSR set to: 0
 24313                           ;main.c: 379: RCIF = 0;
 24314  005070  9A9E               	bcf	3998,5,c	;volatile
 24315                           
 24316                           ; BSR set to: 0
 24317                           ;main.c: 380: RCIP = 0;
 24318  005072  9A9F               	bcf	3999,5,c	;volatile
 24319                           
 24320                           ; BSR set to: 0
 24321                           ;main.c: 381: RCIE = 1;
 24322  005074  8A9D               	bsf	3997,5,c	;volatile
 24323                           
 24324                           ; BSR set to: 0
 24325                           ;main.c: 382: PEIE = 1;
 24326  005076  8CF2               	bsf	intcon,6,c	;volatile
 24327                           
 24328                           ; BSR set to: 0
 24329                           ;main.c: 385: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 24330  005078  0E92               	movlw	146
 24331  00507A  EC20  F02A         	call	_OpenTimer0
 24332                           
 24333                           ; BSR set to: 0
 24334                           ;main.c: 386: WriteTimer0(0xfb1d);
 24335  00507E  0EFB               	movlw	251
 24336  005080  6F61               	movwf	(?_WriteTimer0+1)& (0+255),b
 24337  005082  0E1D               	movlw	29
 24338  005084  6F60               	movwf	?_WriteTimer0& (0+255),b
 24339  005086  EC60  F02A         	call	_WriteTimer0	;wreg free
 24340                           
 24341                           ;main.c: 389: ECANInitialize();
 24342  00508A  EC91  F024         	call	_ECANInitialize	;wreg free
 24343                           
 24344                           ; BSR set to: 0
 24345                           ;main.c: 412: (INTCONbits.GIE = 1);
 24346  00508E  8EF2               	bsf	intcon,7,c	;volatile
 24347                           
 24348                           ; BSR set to: 0
 24349  005090  0012               	return	
 24350  005092                     __end_of_init:
 24351                           	opt stack 0
 24352                           tblptru	equ	0xFF8
 24353                           tblptrh	equ	0xFF7
 24354                           tblptrl	equ	0xFF6
 24355                           tablat	equ	0xFF5
 24356                           prodh	equ	0xFF4
 24357                           prodl	equ	0xFF3
 24358                           intcon	equ	0xFF2
 24359                           indf0	equ	0xFEF
 24360                           postinc0	equ	0xFEE
 24361                           fsr0h	equ	0xFEA
 24362                           fsr0l	equ	0xFE9
 24363                           wreg	equ	0xFE8
 24364                           indf1	equ	0xFE7
 24365                           postinc1	equ	0xFE6
 24366                           postdec1	equ	0xFE5
 24367                           fsr1h	equ	0xFE2
 24368                           fsr1l	equ	0xFE1
 24369                           indf2	equ	0xFDF
 24370                           postinc2	equ	0xFDE
 24371                           postdec2	equ	0xFDD
 24372                           plusw2	equ	0xFDB
 24373                           fsr2h	equ	0xFDA
 24374                           fsr2l	equ	0xFD9
 24375                           status	equ	0xFD8
 24376                           
 24377 ;; *************** function _ECANInitialize *****************
 24378 ;; Defined at:
 24379 ;;		line 168 in file "ECAN.c"
 24380 ;; Parameters:    Size  Location     Type
 24381 ;;		None
 24382 ;; Auto vars:     Size  Location     Type
 24383 ;;		None
 24384 ;; Return value:  Size  Location     Type
 24385 ;;		None               void
 24386 ;; Registers used:
 24387 ;;		wreg, status,2, status,0, cstack
 24388 ;; Tracked objects:
 24389 ;;		On entry : F/0
 24390 ;;		On exit  : F/0
 24391 ;;		Unchanged: 0/0
 24392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24393 ;;      Params:         0       0       0       0       0       0       0
 24394 ;;      Locals:         0       0       0       0       0       0       0
 24395 ;;      Temps:          0       0       0       0       0       0       0
 24396 ;;      Totals:         0       0       0       0       0       0       0
 24397 ;;Total ram usage:        0 bytes
 24398 ;; Hardware stack levels used:    1
 24399 ;; Hardware stack levels required when called:    4
 24400 ;; This function calls:
 24401 ;;		_ECANSetOperationMode
 24402 ;; This function is called by:
 24403 ;;		_init
 24404 ;; This function uses a non-reentrant model
 24405 ;;
 24406                           
 24407                           	psect	text68
 24408  004922                     __ptext68:
 24409                           	opt stack 0
 24410  004922                     _ECANInitialize:
 24411                           	opt stack 25
 24412                           
 24413                           ; BSR set to: 0
 24414                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 24415                           
 24416                           ; BSR set to: 0
 24417                           ;incstack = 0
 24418                           ;incstack = 0
 24419  004922  0E80               	movlw	128
 24420  004924  EC3E  F02A         	call	_ECANSetOperationMode
 24421                           
 24422                           ; BSR set to: 0
 24423                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 24424  004928  0E09               	movlw	9
 24425  00492A  6E70               	movwf	3952,c	;volatile
 24426                           
 24427                           ; BSR set to: 0
 24428                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 24429  00492C  0EFC               	movlw	252
 24430  00492E  6E71               	movwf	3953,c	;volatile
 24431                           
 24432                           ; BSR set to: 0
 24433                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 24434                           ;ECAN.c: 181: (0 << 6) |
 24435                           ;ECAN.c: 182: (2-1);
 24436  004930  0E01               	movlw	1
 24437  004932  6E72               	movwf	3954,c	;volatile
 24438                           
 24439                           ; BSR set to: 0
 24440                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 24441  004934  0E20               	movlw	32
 24442  004936  6E73               	movwf	3955,c	;volatile
 24443                           
 24444                           ; BSR set to: 0
 24445                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 24446  004938  8E77               	bsf	3959,7,c	;volatile
 24447                           
 24448                           ; BSR set to: 0
 24449                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 24450  00493A  9C77               	bcf	3959,6,c	;volatile
 24451                           
 24452                           ; BSR set to: 0
 24453                           ;ECAN.c: 205: RXB0CON = 0;
 24454  00493C  6A60               	clrf	3936,c	;volatile
 24455                           
 24456                           ; BSR set to: 0
 24457                           ;ECAN.c: 211: RXB1CON = 0;
 24458  00493E  010F               	movlb	15	; () banked
 24459  004940  6B50               	clrf	80,b	;volatile
 24460                           
 24461                           ; BSR set to: 15
 24462                           ;ECAN.c: 221: B0CON = 0;
 24463  004942  010E               	movlb	14	; () banked
 24464  004944  6B20               	clrf	32,b	;volatile
 24465                           
 24466                           ; BSR set to: 14
 24467                           ;ECAN.c: 231: B1CON = 0;
 24468  004946  6B30               	clrf	48,b	;volatile
 24469                           
 24470                           ; BSR set to: 14
 24471                           ;ECAN.c: 241: B2CON = 0;
 24472  004948  6B40               	clrf	64,b	;volatile
 24473                           
 24474                           ; BSR set to: 14
 24475                           ;ECAN.c: 254: B3CON = 0 << 2;
 24476  00494A  6B50               	clrf	80,b	;volatile
 24477                           
 24478                           ; BSR set to: 14
 24479                           ;ECAN.c: 264: B4CON = 0 << 2;
 24480  00494C  6B60               	clrf	96,b	;volatile
 24481                           
 24482                           ; BSR set to: 14
 24483                           ;ECAN.c: 274: B5CON = 0 << 2;
 24484  00494E  6B70               	clrf	112,b	;volatile
 24485                           
 24486                           ; BSR set to: 14
 24487                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 24488  004950  0EE0               	movlw	224
 24489  004952  010D               	movlb	13	; () banked
 24490  004954  6FF8               	movwf	248,b	;volatile
 24491                           
 24492                           ; BSR set to: 13
 24493                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 24494  004956  010F               	movlb	15	; () banked
 24495  004958  6B00               	clrf	0,b	;volatile
 24496                           
 24497                           ; BSR set to: 15
 24498  00495A  0E08               	movlw	8
 24499  00495C  6F01               	movwf	1,b	;volatile
 24500                           
 24501                           ; BSR set to: 15
 24502  00495E  6B02               	clrf	2,b	;volatile
 24503                           
 24504                           ; BSR set to: 15
 24505  004960  6B03               	clrf	3,b	;volatile
 24506                           
 24507                           ; BSR set to: 15
 24508                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 24509  004962  0E01               	movlw	1
 24510  004964  010D               	movlb	13	; () banked
 24511  004966  6FD4               	movwf	212,b	;volatile
 24512                           
 24513                           ; BSR set to: 13
 24514                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 24515  004968  6BD5               	clrf	213,b	;volatile
 24516                           
 24517                           ; BSR set to: 13
 24518                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 24519  00496A  6BE0               	clrf	224,b	;volatile
 24520                           
 24521                           ; BSR set to: 13
 24522                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 24523  00496C  0E11               	movlw	17
 24524  00496E  6FE1               	movwf	225,b	;volatile
 24525                           
 24526                           ; BSR set to: 13
 24527                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 24528  004970  6FE2               	movwf	226,b	;volatile
 24529                           
 24530                           ; BSR set to: 13
 24531                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 24532  004972  6BE3               	clrf	227,b	;volatile
 24533                           
 24534                           ; BSR set to: 13
 24535                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 24536  004974  6BE4               	clrf	228,b	;volatile
 24537                           
 24538                           ; BSR set to: 13
 24539                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 24540  004976  6BE5               	clrf	229,b	;volatile
 24541                           
 24542                           ; BSR set to: 13
 24543                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 24544  004978  6BE6               	clrf	230,b	;volatile
 24545                           
 24546                           ; BSR set to: 13
 24547                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 24548  00497A  6BE7               	clrf	231,b	;volatile
 24549                           
 24550                           ; BSR set to: 13
 24551                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 24552  00497C  0E54               	movlw	84
 24553  00497E  6FF0               	movwf	240,b	;volatile
 24554                           
 24555                           ; BSR set to: 13
 24556                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 24557  004980  0E05               	movlw	5
 24558  004982  6FF1               	movwf	241,b	;volatile
 24559                           
 24560                           ; BSR set to: 13
 24561                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 24562  004984  6BF2               	clrf	242,b	;volatile
 24563                           
 24564                           ; BSR set to: 13
 24565                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 24566  004986  6BF2               	clrf	242,b	;volatile
 24567                           
 24568                           ; BSR set to: 13
 24569                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 24570  004988  010F               	movlb	15	; () banked
 24571  00498A  6B18               	clrf	24,b	;volatile
 24572                           
 24573                           ; BSR set to: 15
 24574  00498C  6B19               	clrf	25,b	;volatile
 24575                           
 24576                           ; BSR set to: 15
 24577  00498E  6B1A               	clrf	26,b	;volatile
 24578                           
 24579                           ; BSR set to: 15
 24580  004990  6B1B               	clrf	27,b	;volatile
 24581                           
 24582                           ; BSR set to: 15
 24583                           ;ECAN.c: 482: RXM0EXIDM = 1;
 24584  004992  8719               	bsf	25,3,b	;volatile
 24585                           
 24586                           ; BSR set to: 15
 24587                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 24588  004994  6B1C               	clrf	28,b	;volatile
 24589                           
 24590                           ; BSR set to: 15
 24591  004996  6B1D               	clrf	29,b	;volatile
 24592                           
 24593                           ; BSR set to: 15
 24594  004998  6B1E               	clrf	30,b	;volatile
 24595                           
 24596                           ; BSR set to: 15
 24597  00499A  6B1F               	clrf	31,b	;volatile
 24598                           
 24599                           ; BSR set to: 15
 24600                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 24601  00499C  871D               	bsf	29,3,b	;volatile
 24602                           
 24603                           ; BSR set to: 15
 24604                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 24605  00499E  0E20               	movlw	32
 24606  0049A0  EF3E  F02A         	goto	_ECANSetOperationMode
 24607  0049A4                     __end_of_ECANInitialize:
 24608                           	opt stack 0
 24609                           tblptru	equ	0xFF8
 24610                           tblptrh	equ	0xFF7
 24611                           tblptrl	equ	0xFF6
 24612                           tablat	equ	0xFF5
 24613                           prodh	equ	0xFF4
 24614                           prodl	equ	0xFF3
 24615                           intcon	equ	0xFF2
 24616                           indf0	equ	0xFEF
 24617                           postinc0	equ	0xFEE
 24618                           fsr0h	equ	0xFEA
 24619                           fsr0l	equ	0xFE9
 24620                           wreg	equ	0xFE8
 24621                           indf1	equ	0xFE7
 24622                           postinc1	equ	0xFE6
 24623                           postdec1	equ	0xFE5
 24624                           fsr1h	equ	0xFE2
 24625                           fsr1l	equ	0xFE1
 24626                           indf2	equ	0xFDF
 24627                           postinc2	equ	0xFDE
 24628                           postdec2	equ	0xFDD
 24629                           plusw2	equ	0xFDB
 24630                           fsr2h	equ	0xFDA
 24631                           fsr2l	equ	0xFD9
 24632                           status	equ	0xFD8
 24633                           
 24634 ;; *************** function _ECANSetOperationMode *****************
 24635 ;; Defined at:
 24636 ;;		line 1012 in file "ECAN.c"
 24637 ;; Parameters:    Size  Location     Type
 24638 ;;  mode            1    wreg     enum E16337
 24639 ;; Auto vars:     Size  Location     Type
 24640 ;;  mode            1    0[BANK0 ] enum E16337
 24641 ;; Return value:  Size  Location     Type
 24642 ;;		None               void
 24643 ;; Registers used:
 24644 ;;		wreg, status,2, status,0
 24645 ;; Tracked objects:
 24646 ;;		On entry : 0/0
 24647 ;;		On exit  : F/0
 24648 ;;		Unchanged: 0/0
 24649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24650 ;;      Params:         0       0       0       0       0       0       0
 24651 ;;      Locals:         0       1       0       0       0       0       0
 24652 ;;      Temps:          0       0       0       0       0       0       0
 24653 ;;      Totals:         0       1       0       0       0       0       0
 24654 ;;Total ram usage:        1 bytes
 24655 ;; Hardware stack levels used:    1
 24656 ;; Hardware stack levels required when called:    3
 24657 ;; This function calls:
 24658 ;;		Nothing
 24659 ;; This function is called by:
 24660 ;;		_doModeVerbose
 24661 ;;		_doModeVscp
 24662 ;;		_doModeSLCAN
 24663 ;;		_ECANInitialize
 24664 ;; This function uses a non-reentrant model
 24665 ;;
 24666                           
 24667                           	psect	text69
 24668  00547C                     __ptext69:
 24669                           	opt stack 0
 24670  00547C                     _ECANSetOperationMode:
 24671                           	opt stack 26
 24672                           
 24673                           ; BSR set to: 0
 24674                           ;incstack = 0
 24675                           ;incstack = 0
 24676                           ;ECANSetOperationMode@mode stored from wreg
 24677  00547C  CFE8 F060          	movff	wreg,ECANSetOperationMode@mode
 24678                           
 24679                           ;ECAN.c: 1013: CANCON &= 0x1F;
 24680  005480  0E1F               	movlw	31
 24681  005482  166F               	andwf	3951,f,c	;volatile
 24682                           
 24683                           ;ECAN.c: 1014: CANCON |= mode;
 24684  005484  0100               	movlb	0	; () banked
 24685  005486  5160               	movf	ECANSetOperationMode@mode& (0+255),w,b
 24686  005488  126F               	iorwf	3951,f,c	;volatile
 24687  00548A                     l10849:
 24688                           
 24689                           ; BSR set to: 0
 24690  00548A  506F               	movf	3951,w,c	;volatile
 24691  00548C  0BE0               	andlw	224
 24692  00548E  1960               	xorwf	ECANSetOperationMode@mode& (0+255),w,b
 24693  005490  B4D8               	btfsc	status,2,c
 24694                           
 24695                           ; BSR set to: 0
 24696  005492  0012               	return	
 24697  005494  D7FA               	goto	l10849
 24698  005496                     __end_of_ECANSetOperationMode:
 24699                           	opt stack 0
 24700                           tblptru	equ	0xFF8
 24701                           tblptrh	equ	0xFF7
 24702                           tblptrl	equ	0xFF6
 24703                           tablat	equ	0xFF5
 24704                           prodh	equ	0xFF4
 24705                           prodl	equ	0xFF3
 24706                           intcon	equ	0xFF2
 24707                           indf0	equ	0xFEF
 24708                           postinc0	equ	0xFEE
 24709                           fsr0h	equ	0xFEA
 24710                           fsr0l	equ	0xFE9
 24711                           wreg	equ	0xFE8
 24712                           indf1	equ	0xFE7
 24713                           postinc1	equ	0xFE6
 24714                           postdec1	equ	0xFE5
 24715                           fsr1h	equ	0xFE2
 24716                           fsr1l	equ	0xFE1
 24717                           indf2	equ	0xFDF
 24718                           postinc2	equ	0xFDE
 24719                           postdec2	equ	0xFDD
 24720                           plusw2	equ	0xFDB
 24721                           fsr2h	equ	0xFDA
 24722                           fsr2l	equ	0xFD9
 24723                           status	equ	0xFD8
 24724                           
 24725 ;; *************** function _OpenTimer0 *****************
 24726 ;; Defined at:
 24727 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 24728 ;; Parameters:    Size  Location     Type
 24729 ;;  config          1    wreg     unsigned char 
 24730 ;; Auto vars:     Size  Location     Type
 24731 ;;  config          1    0[BANK0 ] unsigned char 
 24732 ;; Return value:  Size  Location     Type
 24733 ;;		None               void
 24734 ;; Registers used:
 24735 ;;		wreg, status,2, status,0
 24736 ;; Tracked objects:
 24737 ;;		On entry : F/0
 24738 ;;		On exit  : F/0
 24739 ;;		Unchanged: 0/0
 24740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24741 ;;      Params:         0       0       0       0       0       0       0
 24742 ;;      Locals:         0       1       0       0       0       0       0
 24743 ;;      Temps:          0       0       0       0       0       0       0
 24744 ;;      Totals:         0       1       0       0       0       0       0
 24745 ;;Total ram usage:        1 bytes
 24746 ;; Hardware stack levels used:    1
 24747 ;; Hardware stack levels required when called:    3
 24748 ;; This function calls:
 24749 ;;		Nothing
 24750 ;; This function is called by:
 24751 ;;		_init
 24752 ;; This function uses a non-reentrant model
 24753 ;;
 24754                           
 24755                           	psect	text70
 24756  005440                     __ptext70:
 24757                           	opt stack 0
 24758  005440                     _OpenTimer0:
 24759                           	opt stack 26
 24760                           
 24761                           ; BSR set to: 0
 24762                           ;incstack = 0
 24763                           ;incstack = 0
 24764                           ;OpenTimer0@config stored from wreg
 24765  005440  CFE8 F060          	movff	wreg,OpenTimer0@config
 24766                           
 24767                           ; BSR set to: 0
 24768  005444  5160               	movf	OpenTimer0@config& (0+255),w,b
 24769  005446  0B7F               	andlw	127
 24770  005448  6ED5               	movwf	4053,c	;volatile
 24771                           
 24772                           ; BSR set to: 0
 24773  00544A  6AD7               	clrf	4055,c	;volatile
 24774                           
 24775                           ; BSR set to: 0
 24776  00544C  6AD6               	clrf	4054,c	;volatile
 24777                           
 24778                           ; BSR set to: 0
 24779  00544E  94F2               	bcf	intcon,2,c	;volatile
 24780                           
 24781                           ; BSR set to: 0
 24782  005450  AF60               	btfss	OpenTimer0@config& (0+255),7,b
 24783  005452  D002               	goto	l1697
 24784                           
 24785                           ; BSR set to: 0
 24786  005454  8AF2               	bsf	intcon,5,c	;volatile
 24787  005456  D001               	goto	l1698
 24788  005458                     l1697:
 24789                           
 24790                           ; BSR set to: 0
 24791  005458  9AF2               	bcf	intcon,5,c	;volatile
 24792  00545A                     l1698:
 24793                           
 24794                           ; BSR set to: 0
 24795  00545A  8ED5               	bsf	4053,7,c	;volatile
 24796                           
 24797                           ; BSR set to: 0
 24798  00545C  0012               	return	
 24799  00545E                     __end_of_OpenTimer0:
 24800                           	opt stack 0
 24801                           tblptru	equ	0xFF8
 24802                           tblptrh	equ	0xFF7
 24803                           tblptrl	equ	0xFF6
 24804                           tablat	equ	0xFF5
 24805                           prodh	equ	0xFF4
 24806                           prodl	equ	0xFF3
 24807                           intcon	equ	0xFF2
 24808                           indf0	equ	0xFEF
 24809                           postinc0	equ	0xFEE
 24810                           fsr0h	equ	0xFEA
 24811                           fsr0l	equ	0xFE9
 24812                           wreg	equ	0xFE8
 24813                           indf1	equ	0xFE7
 24814                           postinc1	equ	0xFE6
 24815                           postdec1	equ	0xFE5
 24816                           fsr1h	equ	0xFE2
 24817                           fsr1l	equ	0xFE1
 24818                           indf2	equ	0xFDF
 24819                           postinc2	equ	0xFDE
 24820                           postdec2	equ	0xFDD
 24821                           plusw2	equ	0xFDB
 24822                           fsr2h	equ	0xFDA
 24823                           fsr2l	equ	0xFD9
 24824                           status	equ	0xFD8
 24825                           
 24826 ;; *************** function _OpenUSART *****************
 24827 ;; Defined at:
 24828 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 24829 ;; Parameters:    Size  Location     Type
 24830 ;;  config          1    wreg     unsigned char 
 24831 ;;  spbrg           2    0[BANK0 ] unsigned int 
 24832 ;; Auto vars:     Size  Location     Type
 24833 ;;  config          1    2[BANK0 ] unsigned char 
 24834 ;; Return value:  Size  Location     Type
 24835 ;;		None               void
 24836 ;; Registers used:
 24837 ;;		wreg, status,2
 24838 ;; Tracked objects:
 24839 ;;		On entry : F/0
 24840 ;;		On exit  : F/0
 24841 ;;		Unchanged: 0/0
 24842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24843 ;;      Params:         0       2       0       0       0       0       0
 24844 ;;      Locals:         0       1       0       0       0       0       0
 24845 ;;      Temps:          0       0       0       0       0       0       0
 24846 ;;      Totals:         0       3       0       0       0       0       0
 24847 ;;Total ram usage:        3 bytes
 24848 ;; Hardware stack levels used:    1
 24849 ;; Hardware stack levels required when called:    3
 24850 ;; This function calls:
 24851 ;;		Nothing
 24852 ;; This function is called by:
 24853 ;;		_init
 24854 ;; This function uses a non-reentrant model
 24855 ;;
 24856                           
 24857                           	psect	text71
 24858  004E5E                     __ptext71:
 24859                           	opt stack 0
 24860  004E5E                     _OpenUSART:
 24861                           	opt stack 26
 24862                           
 24863                           ; BSR set to: 0
 24864                           ;incstack = 0
 24865                           ;incstack = 0
 24866                           ;OpenUSART@config stored from wreg
 24867  004E5E  CFE8 F062          	movff	wreg,OpenUSART@config
 24868                           
 24869                           ; BSR set to: 0
 24870  004E62  6AAC               	clrf	4012,c	;volatile
 24871  004E64  6AAB               	clrf	4011,c	;volatile
 24872                           
 24873                           ; BSR set to: 0
 24874  004E66  B162               	btfsc	OpenUSART@config& (0+255),0,b
 24875                           
 24876                           ; BSR set to: 0
 24877  004E68  88AC               	bsf	4012,4,c	;volatile
 24878                           
 24879                           ; BSR set to: 0
 24880  004E6A  A362               	btfss	OpenUSART@config& (0+255),1,b
 24881  004E6C  D002               	goto	l10563
 24882                           
 24883                           ; BSR set to: 0
 24884  004E6E  8CAC               	bsf	4012,6,c	;volatile
 24885  004E70  8CAB               	bsf	4011,6,c	;volatile
 24886  004E72                     l10563:
 24887                           
 24888                           ; BSR set to: 0
 24889  004E72  B562               	btfsc	OpenUSART@config& (0+255),2,b
 24890                           
 24891                           ; BSR set to: 0
 24892  004E74  8EAC               	bsf	4012,7,c	;volatile
 24893                           
 24894                           ; BSR set to: 0
 24895  004E76  A762               	btfss	OpenUSART@config& (0+255),3,b
 24896  004E78  D002               	goto	l1730
 24897                           
 24898                           ; BSR set to: 0
 24899  004E7A  88AB               	bsf	4011,4,c	;volatile
 24900  004E7C  D001               	goto	l10571
 24901  004E7E                     l1730:
 24902                           
 24903                           ; BSR set to: 0
 24904  004E7E  8AAB               	bsf	4011,5,c	;volatile
 24905  004E80                     l10571:
 24906                           
 24907                           ; BSR set to: 0
 24908  004E80  B962               	btfsc	OpenUSART@config& (0+255),4,b
 24909                           
 24910                           ; BSR set to: 0
 24911  004E82  84AC               	bsf	4012,2,c	;volatile
 24912                           
 24913                           ; BSR set to: 0
 24914  004E84  989E               	bcf	3998,4,c	;volatile
 24915                           
 24916                           ; BSR set to: 0
 24917  004E86  BB62               	btfsc	OpenUSART@config& (0+255),5,b
 24918                           
 24919                           ; BSR set to: 0
 24920  004E88  86AB               	bsf	4011,3,c	;volatile
 24921                           
 24922                           ; BSR set to: 0
 24923  004E8A  AD62               	btfss	OpenUSART@config& (0+255),6,b
 24924  004E8C  D002               	goto	l1734
 24925                           
 24926                           ; BSR set to: 0
 24927  004E8E  8A9D               	bsf	3997,5,c	;volatile
 24928  004E90  D001               	goto	l1735
 24929  004E92                     l1734:
 24930                           
 24931                           ; BSR set to: 0
 24932  004E92  9A9D               	bcf	3997,5,c	;volatile
 24933  004E94                     l1735:
 24934                           
 24935                           ; BSR set to: 0
 24936  004E94  9A9E               	bcf	3998,5,c	;volatile
 24937                           
 24938                           ; BSR set to: 0
 24939  004E96  AF62               	btfss	OpenUSART@config& (0+255),7,b
 24940  004E98  D002               	goto	l1736
 24941                           
 24942                           ; BSR set to: 0
 24943  004E9A  889D               	bsf	3997,4,c	;volatile
 24944  004E9C  D001               	goto	l1737
 24945  004E9E                     l1736:
 24946                           
 24947                           ; BSR set to: 0
 24948  004E9E  989D               	bcf	3997,4,c	;volatile
 24949  004EA0                     l1737:
 24950                           
 24951                           ; BSR set to: 0
 24952  004EA0  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 24953                           
 24954                           ; BSR set to: 0
 24955  004EA4  5161               	movf	(OpenUSART@spbrg+1)& (0+255),w,b
 24956  004EA6  6EB0               	movwf	4016,c	;volatile
 24957                           
 24958                           ; BSR set to: 0
 24959  004EA8  8AAC               	bsf	4012,5,c	;volatile
 24960                           
 24961                           ; BSR set to: 0
 24962  004EAA  8EAB               	bsf	4011,7,c	;volatile
 24963                           
 24964                           ; BSR set to: 0
 24965  004EAC  9C94               	bcf	3988,6,c	;volatile
 24966                           
 24967                           ; BSR set to: 0
 24968  004EAE  8E94               	bsf	3988,7,c	;volatile
 24969                           
 24970                           ; BSR set to: 0
 24971  004EB0  B8AC               	btfsc	4012,4,c	;volatile
 24972                           
 24973                           ; BSR set to: 0
 24974  004EB2  BEAC               	btfsc	4012,7,c	;volatile
 24975  004EB4  D001               	goto	l1739
 24976                           
 24977                           ; BSR set to: 0
 24978  004EB6  8C94               	bsf	3988,6,c	;volatile
 24979  004EB8                     l1739:
 24980                           
 24981                           ; BSR set to: 0
 24982  004EB8  0012               	return	
 24983  004EBA                     __end_of_OpenUSART:
 24984                           	opt stack 0
 24985                           tblptru	equ	0xFF8
 24986                           tblptrh	equ	0xFF7
 24987                           tblptrl	equ	0xFF6
 24988                           tablat	equ	0xFF5
 24989                           prodh	equ	0xFF4
 24990                           prodl	equ	0xFF3
 24991                           intcon	equ	0xFF2
 24992                           indf0	equ	0xFEF
 24993                           postinc0	equ	0xFEE
 24994                           fsr0h	equ	0xFEA
 24995                           fsr0l	equ	0xFE9
 24996                           wreg	equ	0xFE8
 24997                           indf1	equ	0xFE7
 24998                           postinc1	equ	0xFE6
 24999                           postdec1	equ	0xFE5
 25000                           fsr1h	equ	0xFE2
 25001                           fsr1l	equ	0xFE1
 25002                           indf2	equ	0xFDF
 25003                           postinc2	equ	0xFDE
 25004                           postdec2	equ	0xFDD
 25005                           plusw2	equ	0xFDB
 25006                           fsr2h	equ	0xFDA
 25007                           fsr2l	equ	0xFD9
 25008                           status	equ	0xFD8
 25009                           
 25010 ;; *************** function _WriteTimer0 *****************
 25011 ;; Defined at:
 25012 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 25013 ;; Parameters:    Size  Location     Type
 25014 ;;  timer0          2    0[BANK0 ] unsigned int 
 25015 ;; Auto vars:     Size  Location     Type
 25016 ;;  timer           2    2[BANK0 ] struct Timers
 25017 ;; Return value:  Size  Location     Type
 25018 ;;		None               void
 25019 ;; Registers used:
 25020 ;;		None
 25021 ;; Tracked objects:
 25022 ;;		On entry : F/0
 25023 ;;		On exit  : F/0
 25024 ;;		Unchanged: F/0
 25025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25026 ;;      Params:         0       2       0       0       0       0       0
 25027 ;;      Locals:         0       2       0       0       0       0       0
 25028 ;;      Temps:          0       0       0       0       0       0       0
 25029 ;;      Totals:         0       4       0       0       0       0       0
 25030 ;;Total ram usage:        4 bytes
 25031 ;; Hardware stack levels used:    1
 25032 ;; Hardware stack levels required when called:    3
 25033 ;; This function calls:
 25034 ;;		Nothing
 25035 ;; This function is called by:
 25036 ;;		_init
 25037 ;; This function uses a non-reentrant model
 25038 ;;
 25039                           
 25040                           	psect	text72
 25041  0054C0                     __ptext72:
 25042                           	opt stack 0
 25043  0054C0                     _WriteTimer0:
 25044                           	opt stack 26
 25045                           
 25046                           ; BSR set to: 0
 25047                           
 25048                           ; BSR set to: 0
 25049                           ;incstack = 0
 25050                           ;incstack = 0
 25051  0054C0  C060  F062         	movff	WriteTimer0@timer0,WriteTimer0@timer
 25052  0054C4  C061  F063         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 25053  0054C8  C063  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 25054  0054CC  C062  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 25055                           
 25056                           ; BSR set to: 0
 25057  0054D0  0012               	return	
 25058  0054D2                     __end_of_WriteTimer0:
 25059                           	opt stack 0
 25060                           tblptru	equ	0xFF8
 25061                           tblptrh	equ	0xFF7
 25062                           tblptrl	equ	0xFF6
 25063                           tablat	equ	0xFF5
 25064                           prodh	equ	0xFF4
 25065                           prodl	equ	0xFF3
 25066                           intcon	equ	0xFF2
 25067                           indf0	equ	0xFEF
 25068                           postinc0	equ	0xFEE
 25069                           fsr0h	equ	0xFEA
 25070                           fsr0l	equ	0xFE9
 25071                           wreg	equ	0xFE8
 25072                           indf1	equ	0xFE7
 25073                           postinc1	equ	0xFE6
 25074                           postdec1	equ	0xFE5
 25075                           fsr1h	equ	0xFE2
 25076                           fsr1l	equ	0xFE1
 25077                           indf2	equ	0xFDF
 25078                           postinc2	equ	0xFDE
 25079                           postdec2	equ	0xFDD
 25080                           plusw2	equ	0xFDB
 25081                           fsr2h	equ	0xFDA
 25082                           fsr2l	equ	0xFD9
 25083                           status	equ	0xFD8
 25084                           
 25085 ;; *************** function _vscp_restoreDefaults *****************
 25086 ;; Defined at:
 25087 ;;		line 2524 in file "main.c"
 25088 ;; Parameters:    Size  Location     Type
 25089 ;;		None
 25090 ;; Auto vars:     Size  Location     Type
 25091 ;;		None
 25092 ;; Return value:  Size  Location     Type
 25093 ;;		None               void
 25094 ;; Registers used:
 25095 ;;		wreg, status,2, status,0, cstack
 25096 ;; Tracked objects:
 25097 ;;		On entry : F/0
 25098 ;;		On exit  : F/1
 25099 ;;		Unchanged: 0/0
 25100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25101 ;;      Params:         0       0       0       0       0       0       0
 25102 ;;      Locals:         0       0       0       0       0       0       0
 25103 ;;      Temps:          0       0       0       0       0       0       0
 25104 ;;      Totals:         0       0       0       0       0       0       0
 25105 ;;Total ram usage:        0 bytes
 25106 ;; Hardware stack levels used:    1
 25107 ;; Hardware stack levels required when called:    5
 25108 ;; This function calls:
 25109 ;;		_init_app_ram
 25110 ;;		_init_app_eeprom
 25111 ;; This function is called by:
 25112 ;;		_main
 25113 ;; This function uses a non-reentrant model
 25114 ;;
 25115                           
 25116                           	psect	text73
 25117  0054F6                     __ptext73:
 25118                           	opt stack 0
 25119  0054F6                     _vscp_restoreDefaults:
 25120                           	opt stack 25
 25121                           
 25122                           ; BSR set to: 0
 25123                           ;main.c: 2525: init_app_eeprom();
 25124                           
 25125                           ; BSR set to: 0
 25126                           ;incstack = 0
 25127                           ;incstack = 0
 25128  0054F6  EC09  F024         	call	_init_app_eeprom	;wreg free
 25129                           
 25130                           ; BSR set to: 0
 25131                           ;main.c: 2526: init_app_ram();
 25132  0054FA  EFB5  F027         	goto	_init_app_ram	;wreg free
 25133  0054FE                     __end_of_vscp_restoreDefaults:
 25134                           	opt stack 0
 25135                           tblptru	equ	0xFF8
 25136                           tblptrh	equ	0xFF7
 25137                           tblptrl	equ	0xFF6
 25138                           tablat	equ	0xFF5
 25139                           prodh	equ	0xFF4
 25140                           prodl	equ	0xFF3
 25141                           intcon	equ	0xFF2
 25142                           indf0	equ	0xFEF
 25143                           postinc0	equ	0xFEE
 25144                           fsr0h	equ	0xFEA
 25145                           fsr0l	equ	0xFE9
 25146                           wreg	equ	0xFE8
 25147                           indf1	equ	0xFE7
 25148                           postinc1	equ	0xFE6
 25149                           postdec1	equ	0xFE5
 25150                           fsr1h	equ	0xFE2
 25151                           fsr1l	equ	0xFE1
 25152                           indf2	equ	0xFDF
 25153                           postinc2	equ	0xFDE
 25154                           postdec2	equ	0xFDD
 25155                           plusw2	equ	0xFDB
 25156                           fsr2h	equ	0xFDA
 25157                           fsr2l	equ	0xFD9
 25158                           status	equ	0xFD8
 25159                           
 25160 ;; *************** function _init_app_eeprom *****************
 25161 ;; Defined at:
 25162 ;;		line 439 in file "main.c"
 25163 ;; Parameters:    Size  Location     Type
 25164 ;;		None
 25165 ;; Auto vars:     Size  Location     Type
 25166 ;;  i               1    3[BANK0 ] unsigned char 
 25167 ;; Return value:  Size  Location     Type
 25168 ;;		None               void
 25169 ;; Registers used:
 25170 ;;		wreg, status,2, status,0, cstack
 25171 ;; Tracked objects:
 25172 ;;		On entry : F/0
 25173 ;;		On exit  : F/0
 25174 ;;		Unchanged: 0/0
 25175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25176 ;;      Params:         0       0       0       0       0       0       0
 25177 ;;      Locals:         0       1       0       0       0       0       0
 25178 ;;      Temps:          0       0       0       0       0       0       0
 25179 ;;      Totals:         0       1       0       0       0       0       0
 25180 ;;Total ram usage:        1 bytes
 25181 ;; Hardware stack levels used:    1
 25182 ;; Hardware stack levels required when called:    4
 25183 ;; This function calls:
 25184 ;;		_writeEEPROM
 25185 ;; This function is called by:
 25186 ;;		_vscp_restoreDefaults
 25187 ;; This function uses a non-reentrant model
 25188 ;;
 25189                           
 25190                           	psect	text74
 25191  004812                     __ptext74:
 25192                           	opt stack 0
 25193  004812                     _init_app_eeprom:
 25194                           	opt stack 25
 25195                           
 25196                           ; BSR set to: 0
 25197                           ;main.c: 440: uint8_t i;
 25198                           ;main.c: 442: writeEEPROM(0x01, 0x55);
 25199                           
 25200                           ; BSR set to: 1
 25201                           ;incstack = 0
 25202                           ;incstack = 0
 25203  004812  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25204  004814  0E01               	movlw	1
 25205  004816  6F60               	movwf	?_writeEEPROM& (0+255),b
 25206  004818  0E55               	movlw	85
 25207  00481A  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 25208  00481C  ECFD  F029         	call	_writeEEPROM	;wreg free
 25209                           
 25210                           ;main.c: 443: writeEEPROM(0x02, 0xAA);
 25211  004820  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25212  004822  0E02               	movlw	2
 25213  004824  6F60               	movwf	?_writeEEPROM& (0+255),b
 25214  004826  0EAA               	movlw	170
 25215  004828  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 25216  00482A  ECFD  F029         	call	_writeEEPROM	;wreg free
 25217                           
 25218                           ;main.c: 444: writeEEPROM(0x03, 0);
 25219  00482E  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25220  004830  0E03               	movlw	3
 25221  004832  6F60               	movwf	?_writeEEPROM& (0+255),b
 25222  004834  0E00               	movlw	0
 25223  004836  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 25224  004838  ECFD  F029         	call	_writeEEPROM	;wreg free
 25225                           
 25226                           ;main.c: 445: writeEEPROM(0x05, 0);
 25227  00483C  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25228  00483E  0E05               	movlw	5
 25229  004840  6F60               	movwf	?_writeEEPROM& (0+255),b
 25230  004842  0E00               	movlw	0
 25231  004844  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 25232  004846  ECFD  F029         	call	_writeEEPROM	;wreg free
 25233                           
 25234                           ;main.c: 446: writeEEPROM(0x06, 0);
 25235  00484A  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25236  00484C  0E06               	movlw	6
 25237  00484E  6F60               	movwf	?_writeEEPROM& (0+255),b
 25238  004850  0E00               	movlw	0
 25239  004852  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 25240  004854  ECFD  F029         	call	_writeEEPROM	;wreg free
 25241                           
 25242                           ;main.c: 447: writeEEPROM(0x09, 10u);
 25243  004858  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25244  00485A  0E09               	movlw	9
 25245  00485C  6F60               	movwf	?_writeEEPROM& (0+255),b
 25246  00485E  0E0A               	movlw	10
 25247  004860  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 25248  004862  ECFD  F029         	call	_writeEEPROM	;wreg free
 25249                           
 25250                           ; BSR set to: 0
 25251                           ;main.c: 450: for (i = 0x20; i < (0x5C + 4); i++) {
 25252  004866  0E20               	movlw	32
 25253  004868  6F63               	movwf	init_app_eeprom@i& (0+255),b
 25254  00486A                     l10713:
 25255                           
 25256                           ; BSR set to: 0
 25257                           ;main.c: 451: writeEEPROM(0x01, 0xFF);
 25258  00486A  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25259  00486C  0E01               	movlw	1
 25260  00486E  6F60               	movwf	?_writeEEPROM& (0+255),b
 25261  004870  0EFF               	movlw	255
 25262  004872  6962               	setf	(?_writeEEPROM+2)& (0+255),b
 25263  004874  ECFD  F029         	call	_writeEEPROM	;wreg free
 25264                           
 25265                           ; BSR set to: 0
 25266  004878  2B63               	incf	init_app_eeprom@i& (0+255),f,b
 25267                           
 25268                           ; BSR set to: 0
 25269  00487A  0E5F               	movlw	95
 25270  00487C  6563               	cpfsgt	init_app_eeprom@i& (0+255),b
 25271  00487E  D7F5               	goto	l10713
 25272                           
 25273                           ; BSR set to: 0
 25274                           ;main.c: 452: }
 25275                           ;main.c: 455: for (i = 0x60; i < (0x64 + 4); i++) {
 25276  004880  0E60               	movlw	96
 25277  004882  6F63               	movwf	init_app_eeprom@i& (0+255),b
 25278  004884                     l10725:
 25279                           
 25280                           ; BSR set to: 0
 25281                           ;main.c: 456: writeEEPROM(0x01, 0xFF);
 25282  004884  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25283  004886  0E01               	movlw	1
 25284  004888  6F60               	movwf	?_writeEEPROM& (0+255),b
 25285  00488A  0EFF               	movlw	255
 25286  00488C  6962               	setf	(?_writeEEPROM+2)& (0+255),b
 25287  00488E  ECFD  F029         	call	_writeEEPROM	;wreg free
 25288                           
 25289                           ; BSR set to: 0
 25290  004892  2B63               	incf	init_app_eeprom@i& (0+255),f,b
 25291                           
 25292                           ; BSR set to: 0
 25293  004894  0E67               	movlw	103
 25294  004896  6563               	cpfsgt	init_app_eeprom@i& (0+255),b
 25295  004898  D7F5               	goto	l10725
 25296                           
 25297                           ; BSR set to: 0
 25298  00489A  0C67               	retlw	103
 25299  00489C                     __end_of_init_app_eeprom:
 25300                           	opt stack 0
 25301                           tblptru	equ	0xFF8
 25302                           tblptrh	equ	0xFF7
 25303                           tblptrl	equ	0xFF6
 25304                           tablat	equ	0xFF5
 25305                           prodh	equ	0xFF4
 25306                           prodl	equ	0xFF3
 25307                           intcon	equ	0xFF2
 25308                           indf0	equ	0xFEF
 25309                           postinc0	equ	0xFEE
 25310                           fsr0h	equ	0xFEA
 25311                           fsr0l	equ	0xFE9
 25312                           wreg	equ	0xFE8
 25313                           indf1	equ	0xFE7
 25314                           postinc1	equ	0xFE6
 25315                           postdec1	equ	0xFE5
 25316                           fsr1h	equ	0xFE2
 25317                           fsr1l	equ	0xFE1
 25318                           indf2	equ	0xFDF
 25319                           postinc2	equ	0xFDE
 25320                           postdec2	equ	0xFDD
 25321                           plusw2	equ	0xFDB
 25322                           fsr2h	equ	0xFDA
 25323                           fsr2l	equ	0xFD9
 25324                           status	equ	0xFD8
 25325                           
 25326 ;; *************** function _writeEEPROM *****************
 25327 ;; Defined at:
 25328 ;;		line 23 in file "eeprom.c"
 25329 ;; Parameters:    Size  Location     Type
 25330 ;;  address         2    0[BANK0 ] unsigned short 
 25331 ;;  data            1    2[BANK0 ] unsigned char 
 25332 ;; Auto vars:     Size  Location     Type
 25333 ;;		None
 25334 ;; Return value:  Size  Location     Type
 25335 ;;		None               void
 25336 ;; Registers used:
 25337 ;;		wreg, status,2
 25338 ;; Tracked objects:
 25339 ;;		On entry : F/0
 25340 ;;		On exit  : F/0
 25341 ;;		Unchanged: F/0
 25342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25343 ;;      Params:         0       3       0       0       0       0       0
 25344 ;;      Locals:         0       0       0       0       0       0       0
 25345 ;;      Temps:          0       0       0       0       0       0       0
 25346 ;;      Totals:         0       3       0       0       0       0       0
 25347 ;;Total ram usage:        3 bytes
 25348 ;; Hardware stack levels used:    1
 25349 ;; Hardware stack levels required when called:    3
 25350 ;; This function calls:
 25351 ;;		Nothing
 25352 ;; This function is called by:
 25353 ;;		_init_app_eeprom
 25354 ;;		_doModeVerbose
 25355 ;;		_doModeSLCAN
 25356 ;; This function uses a non-reentrant model
 25357 ;;
 25358                           
 25359                           	psect	text75
 25360  0053FA                     __ptext75:
 25361                           	opt stack 0
 25362  0053FA                     _writeEEPROM:
 25363                           	opt stack 26
 25364                           
 25365                           ; BSR set to: 0
 25366                           ;eeprom.c: 29: EEADR = address & 0xff;
 25367                           
 25368                           ; BSR set to: 0
 25369                           ;incstack = 0
 25370                           ;incstack = 0
 25371  0053FA  C060  FFA9         	movff	writeEEPROM@address,4009	;volatile
 25372                           
 25373                           ;eeprom.c: 30: EEDATA = data;
 25374  0053FE  C062  FFA8         	movff	writeEEPROM@data,4008	;volatile
 25375                           
 25376                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 25377  005402  9EA6               	bcf	4006,7,c	;volatile
 25378                           
 25379                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 25380  005404  9CA6               	bcf	4006,6,c	;volatile
 25381                           
 25382                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 25383  005406  84A6               	bsf	4006,2,c	;volatile
 25384                           
 25385                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 25386  005408  9EF2               	bcf	intcon,7,c	;volatile
 25387                           
 25388                           ; BSR set to: 0
 25389                           ;eeprom.c: 37: EECON2 = 0x55;
 25390  00540A  0E55               	movlw	85
 25391  00540C  6EA7               	movwf	4007,c	;volatile
 25392                           
 25393                           ;eeprom.c: 38: EECON2 = 0xaa;
 25394  00540E  0EAA               	movlw	170
 25395  005410  6EA7               	movwf	4007,c	;volatile
 25396                           
 25397                           ; BSR set to: 0
 25398                           ;eeprom.c: 39: EECON1bits.WR = 1;
 25399  005412  82A6               	bsf	4006,1,c	;volatile
 25400                           
 25401                           ; BSR set to: 0
 25402                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 25403  005414  8EF2               	bsf	intcon,7,c	;volatile
 25404  005416                     l1477:
 25405                           
 25406                           ; BSR set to: 0
 25407  005416  A8A1               	btfss	4001,4,c	;volatile
 25408  005418  D7FE               	goto	l1477
 25409                           
 25410                           ; BSR set to: 0
 25411                           ;eeprom.c: 43: PIR2bits.EEIF = 0;
 25412  00541A  98A1               	bcf	4001,4,c	;volatile
 25413                           
 25414                           ;eeprom.c: 44: EECON1bits.WREN = 0;
 25415  00541C  94A6               	bcf	4006,2,c	;volatile
 25416                           
 25417                           ; BSR set to: 0
 25418  00541E  0012               	return	
 25419  005420                     __end_of_writeEEPROM:
 25420                           	opt stack 0
 25421                           tblptru	equ	0xFF8
 25422                           tblptrh	equ	0xFF7
 25423                           tblptrl	equ	0xFF6
 25424                           tablat	equ	0xFF5
 25425                           prodh	equ	0xFF4
 25426                           prodl	equ	0xFF3
 25427                           intcon	equ	0xFF2
 25428                           indf0	equ	0xFEF
 25429                           postinc0	equ	0xFEE
 25430                           fsr0h	equ	0xFEA
 25431                           fsr0l	equ	0xFE9
 25432                           wreg	equ	0xFE8
 25433                           indf1	equ	0xFE7
 25434                           postinc1	equ	0xFE6
 25435                           postdec1	equ	0xFE5
 25436                           fsr1h	equ	0xFE2
 25437                           fsr1l	equ	0xFE1
 25438                           indf2	equ	0xFDF
 25439                           postinc2	equ	0xFDE
 25440                           postdec2	equ	0xFDD
 25441                           plusw2	equ	0xFDB
 25442                           fsr2h	equ	0xFDA
 25443                           fsr2l	equ	0xFD9
 25444                           status	equ	0xFD8
 25445                           
 25446 ;; *************** function _init_app_ram *****************
 25447 ;; Defined at:
 25448 ;;		line 421 in file "main.c"
 25449 ;; Parameters:    Size  Location     Type
 25450 ;;		None
 25451 ;; Auto vars:     Size  Location     Type
 25452 ;;		None
 25453 ;; Return value:  Size  Location     Type
 25454 ;;		None               void
 25455 ;; Registers used:
 25456 ;;		wreg, status,2, cstack
 25457 ;; Tracked objects:
 25458 ;;		On entry : E/0
 25459 ;;		On exit  : F/1
 25460 ;;		Unchanged: 0/0
 25461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25462 ;;      Params:         0       0       0       0       0       0       0
 25463 ;;      Locals:         0       0       0       0       0       0       0
 25464 ;;      Temps:          0       0       0       0       0       0       0
 25465 ;;      Totals:         0       0       0       0       0       0       0
 25466 ;;Total ram usage:        0 bytes
 25467 ;; Hardware stack levels used:    1
 25468 ;; Hardware stack levels required when called:    4
 25469 ;; This function calls:
 25470 ;;		_readEEPROM
 25471 ;; This function is called by:
 25472 ;;		_init
 25473 ;;		_vscp_restoreDefaults
 25474 ;; This function uses a non-reentrant model
 25475 ;;
 25476                           
 25477                           	psect	text76
 25478  004F6A                     __ptext76:
 25479                           	opt stack 0
 25480  004F6A                     _init_app_ram:
 25481                           	opt stack 25
 25482                           
 25483                           ;main.c: 423: can_receiveOverruns = 0;
 25484                           
 25485                           ; BSR set to: 0
 25486                           ;incstack = 0
 25487                           ;incstack = 0
 25488  004F6A  0100               	movlb	0	; () banked
 25489  004F6C  6BD1               	clrf	_can_receiveOverruns& (0+255),b
 25490  004F6E  6BD2               	clrf	(_can_receiveOverruns+1)& (0+255),b
 25491  004F70  6BD3               	clrf	(_can_receiveOverruns+2)& (0+255),b
 25492  004F72  6BD4               	clrf	(_can_receiveOverruns+3)& (0+255),b
 25493                           
 25494                           ;main.c: 424: can_transmitOverruns = 0;
 25495  004F74  6BD5               	clrf	_can_transmitOverruns& (0+255),b
 25496  004F76  6BD6               	clrf	(_can_transmitOverruns+1)& (0+255),b
 25497  004F78  6BD7               	clrf	(_can_transmitOverruns+2)& (0+255),b
 25498  004F7A  6BD8               	clrf	(_can_transmitOverruns+3)& (0+255),b
 25499                           
 25500                           ;main.c: 425: uart_receiveOverruns = 0;
 25501  004F7C  6BF1               	clrf	_uart_receiveOverruns& (0+255),b
 25502  004F7E  6BF2               	clrf	(_uart_receiveOverruns+1)& (0+255),b
 25503  004F80  6BF3               	clrf	(_uart_receiveOverruns+2)& (0+255),b
 25504  004F82  6BF4               	clrf	(_uart_receiveOverruns+3)& (0+255),b
 25505                           
 25506                           ;main.c: 426: uart_transmitOverruns = 0;
 25507  004F84  6A29               	clrf	_uart_transmitOverruns,c
 25508  004F86  6A2A               	clrf	_uart_transmitOverruns+1,c
 25509  004F88  6A2B               	clrf	_uart_transmitOverruns+2,c
 25510  004F8A  6A2C               	clrf	_uart_transmitOverruns+3,c
 25511                           
 25512                           ; BSR set to: 0
 25513                           ;main.c: 428: bHex = readEEPROM(0x06);
 25514  004F8C  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
 25515  004F8E  0E06               	movlw	6
 25516  004F90  6F60               	movwf	?_readEEPROM& (0+255),b
 25517  004F92  EC69  F02A         	call	_readEEPROM	;wreg free
 25518  004F96  0101               	movlb	1	; () banked
 25519  004F98  6F00               	movwf	_bHex& (0+255),b
 25520                           
 25521                           ;main.c: 429: mode = readEEPROM(0x03);
 25522  004F9A  0100               	movlb	0	; () banked
 25523  004F9C  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
 25524  004F9E  0E03               	movlw	3
 25525  004FA0  6F60               	movwf	?_readEEPROM& (0+255),b
 25526  004FA2  EC69  F02A         	call	_readEEPROM	;wreg free
 25527  004FA6  6FF8               	movwf	_mode& (0+255),b
 25528                           
 25529                           ;main.c: 431: rwtimeout = readEEPROM(0x09);
 25530  004FA8  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
 25531  004FAA  0E09               	movlw	9
 25532  004FAC  6F60               	movwf	?_readEEPROM& (0+255),b
 25533  004FAE  EC69  F02A         	call	_readEEPROM	;wreg free
 25534  004FB2  0101               	movlb	1	; () banked
 25535  004FB4  6F03               	movwf	_rwtimeout& (0+255),b
 25536                           
 25537                           ; BSR set to: 1
 25538  004FB6  0012               	return	
 25539  004FB8                     __end_of_init_app_ram:
 25540                           	opt stack 0
 25541                           tblptru	equ	0xFF8
 25542                           tblptrh	equ	0xFF7
 25543                           tblptrl	equ	0xFF6
 25544                           tablat	equ	0xFF5
 25545                           prodh	equ	0xFF4
 25546                           prodl	equ	0xFF3
 25547                           intcon	equ	0xFF2
 25548                           indf0	equ	0xFEF
 25549                           postinc0	equ	0xFEE
 25550                           fsr0h	equ	0xFEA
 25551                           fsr0l	equ	0xFE9
 25552                           wreg	equ	0xFE8
 25553                           indf1	equ	0xFE7
 25554                           postinc1	equ	0xFE6
 25555                           postdec1	equ	0xFE5
 25556                           fsr1h	equ	0xFE2
 25557                           fsr1l	equ	0xFE1
 25558                           indf2	equ	0xFDF
 25559                           postinc2	equ	0xFDE
 25560                           postdec2	equ	0xFDD
 25561                           plusw2	equ	0xFDB
 25562                           fsr2h	equ	0xFDA
 25563                           fsr2l	equ	0xFD9
 25564                           status	equ	0xFD8
 25565                           
 25566 ;; *************** function _readEEPROM *****************
 25567 ;; Defined at:
 25568 ;;		line 87 in file "eeprom.c"
 25569 ;; Parameters:    Size  Location     Type
 25570 ;;  address         2    0[BANK0 ] unsigned short 
 25571 ;; Auto vars:     Size  Location     Type
 25572 ;;  data            1    2[BANK0 ] unsigned char 
 25573 ;; Return value:  Size  Location     Type
 25574 ;;                  1    wreg      unsigned char 
 25575 ;; Registers used:
 25576 ;;		wreg, status,2
 25577 ;; Tracked objects:
 25578 ;;		On entry : F/0
 25579 ;;		On exit  : F/0
 25580 ;;		Unchanged: 0/0
 25581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25582 ;;      Params:         0       2       0       0       0       0       0
 25583 ;;      Locals:         0       1       0       0       0       0       0
 25584 ;;      Temps:          0       0       0       0       0       0       0
 25585 ;;      Totals:         0       3       0       0       0       0       0
 25586 ;;Total ram usage:        3 bytes
 25587 ;; Hardware stack levels used:    1
 25588 ;; Hardware stack levels required when called:    3
 25589 ;; This function calls:
 25590 ;;		Nothing
 25591 ;; This function is called by:
 25592 ;;		_main
 25593 ;;		_init_app_ram
 25594 ;; This function uses a non-reentrant model
 25595 ;;
 25596                           
 25597                           	psect	text77
 25598  0054D2                     __ptext77:
 25599                           	opt stack 0
 25600  0054D2                     _readEEPROM:
 25601                           	opt stack 25
 25602                           
 25603                           ; BSR set to: 0
 25604                           ;eeprom.c: 88: uint8_t data;
 25605                           ;eeprom.c: 93: EEADR = address & 0xff;
 25606                           
 25607                           ; BSR set to: 1
 25608                           ;incstack = 0
 25609                           ;incstack = 0
 25610  0054D2  C060  FFA9         	movff	readEEPROM@address,4009	;volatile
 25611                           
 25612                           ;eeprom.c: 94: EECON1bits.EEPGD= 0;
 25613  0054D6  9EA6               	bcf	4006,7,c	;volatile
 25614                           
 25615                           ;eeprom.c: 95: EECON1bits.CFGS = 0;
 25616  0054D8  9CA6               	bcf	4006,6,c	;volatile
 25617                           
 25618                           ;eeprom.c: 96: EECON1bits.RD = 1;
 25619  0054DA  80A6               	bsf	4006,0,c	;volatile
 25620                           
 25621                           ;eeprom.c: 97: data = EEDATA;
 25622  0054DC  CFA8 F062          	movff	4008,readEEPROM@data	;volatile
 25623                           
 25624                           ; BSR set to: 0
 25625                           ;eeprom.c: 99: return data;
 25626  0054E0  5162               	movf	readEEPROM@data& (0+255),w,b
 25627                           
 25628                           ; BSR set to: 0
 25629  0054E2  0012               	return	
 25630  0054E4                     __end_of_readEEPROM:
 25631                           	opt stack 0
 25632                           tblptru	equ	0xFF8
 25633                           tblptrh	equ	0xFF7
 25634                           tblptrl	equ	0xFF6
 25635                           tablat	equ	0xFF5
 25636                           prodh	equ	0xFF4
 25637                           prodl	equ	0xFF3
 25638                           intcon	equ	0xFF2
 25639                           indf0	equ	0xFEF
 25640                           postinc0	equ	0xFEE
 25641                           fsr0h	equ	0xFEA
 25642                           fsr0l	equ	0xFE9
 25643                           wreg	equ	0xFE8
 25644                           indf1	equ	0xFE7
 25645                           postinc1	equ	0xFE6
 25646                           postdec1	equ	0xFE5
 25647                           fsr1h	equ	0xFE2
 25648                           fsr1l	equ	0xFE1
 25649                           indf2	equ	0xFDF
 25650                           postinc2	equ	0xFDE
 25651                           postdec2	equ	0xFDD
 25652                           plusw2	equ	0xFDB
 25653                           fsr2h	equ	0xFDA
 25654                           fsr2l	equ	0xFD9
 25655                           status	equ	0xFD8
 25656                           
 25657 ;; *************** function _fifo_init *****************
 25658 ;; Defined at:
 25659 ;;		line 14 in file "fifo.c"
 25660 ;; Parameters:    Size  Location     Type
 25661 ;;  f               1    wreg     PTR struct .
 25662 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 25663 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 25664 ;;		 -> caninputBuffer(494), inputBuffer(128), 
 25665 ;;  size            2    2[BANK0 ] unsigned short 
 25666 ;; Auto vars:     Size  Location     Type
 25667 ;;  f               1    4[BANK0 ] PTR struct .
 25668 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 25669 ;; Return value:  Size  Location     Type
 25670 ;;		None               void
 25671 ;; Registers used:
 25672 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 25673 ;; Tracked objects:
 25674 ;;		On entry : F/0
 25675 ;;		On exit  : F/0
 25676 ;;		Unchanged: 0/0
 25677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25678 ;;      Params:         0       4       0       0       0       0       0
 25679 ;;      Locals:         0       1       0       0       0       0       0
 25680 ;;      Temps:          0       0       0       0       0       0       0
 25681 ;;      Totals:         0       5       0       0       0       0       0
 25682 ;;Total ram usage:        5 bytes
 25683 ;; Hardware stack levels used:    1
 25684 ;; Hardware stack levels required when called:    3
 25685 ;; This function calls:
 25686 ;;		Nothing
 25687 ;; This function is called by:
 25688 ;;		_main
 25689 ;; This function uses a non-reentrant model
 25690 ;;
 25691                           
 25692                           	psect	text78
 25693  00519C                     __ptext78:
 25694                           	opt stack 0
 25695  00519C                     _fifo_init:
 25696                           	opt stack 27
 25697                           
 25698                           ; BSR set to: 0
 25699                           ;incstack = 0
 25700                           ;incstack = 0
 25701                           ;fifo_init@f stored from wreg
 25702  00519C  CFE8 F064          	movff	wreg,fifo_init@f
 25703                           
 25704                           ; BSR set to: 0
 25705                           ;fifo.c: 15: f->head = 0;
 25706  0051A0  5164               	movf	fifo_init@f& (0+255),w,b
 25707  0051A2  6ED9               	movwf	fsr2l,c
 25708  0051A4  6ADA               	clrf	fsr2h,c
 25709  0051A6  0E02               	movlw	2
 25710                           
 25711                           ;fifo.c: 16: f->tail = 0;
 25712  0051A8  D811               	call	PL96	;call to abstracted procedure
 25713  0051AA  0E04               	movlw	4
 25714                           
 25715                           ;fifo.c: 17: f->size = size;
 25716  0051AC  D80F               	call	PL96	;call to abstracted procedure
 25717  0051AE  0E06               	movlw	6
 25718  0051B0  26D9               	addwf	fsr2l,f,c
 25719  0051B2  6ADA               	clrf	fsr2h,c
 25720  0051B4  C062  FFDE         	movff	fifo_init@size,postinc2
 25721  0051B8  C063  FFDD         	movff	fifo_init@size+1,postdec2
 25722                           
 25723                           ; BSR set to: 0
 25724                           ;fifo.c: 18: f->buf = buf;
 25725  0051BC  5164               	movf	fifo_init@f& (0+255),w,b
 25726  0051BE  6ED9               	movwf	fsr2l,c
 25727  0051C0  6ADA               	clrf	fsr2h,c
 25728  0051C2  C060  FFDE         	movff	fifo_init@buf,postinc2
 25729  0051C6  C061  FFDD         	movff	fifo_init@buf+1,postdec2
 25730                           
 25731                           ; BSR set to: 0
 25732  0051CA  0012               	return	
 25733  0051CC                     __end_of_fifo_init:
 25734                           	opt stack 0
 25735  0051CC                     PL96:
 25736                           	opt stack 27
 25737  0051CC  26D9               	addwf	fsr2l,f,c
 25738  0051CE  6ADA               	clrf	fsr2h,c
 25739  0051D0  6ADE               	clrf	postinc2,c
 25740  0051D2  6ADD               	clrf	postdec2,c
 25741  0051D4  5164               	movf	fifo_init@f& (0+255),w,b
 25742  0051D6  6ED9               	movwf	fsr2l,c
 25743  0051D8  6ADA               	clrf	fsr2h,c
 25744  0051DA  0012               	return	
 25745  0051DC                     __end_ofPL96:
 25746                           	opt stack 0
 25747                           tblptru	equ	0xFF8
 25748                           tblptrh	equ	0xFF7
 25749                           tblptrl	equ	0xFF6
 25750                           tablat	equ	0xFF5
 25751                           prodh	equ	0xFF4
 25752                           prodl	equ	0xFF3
 25753                           intcon	equ	0xFF2
 25754                           indf0	equ	0xFEF
 25755                           postinc0	equ	0xFEE
 25756                           fsr0h	equ	0xFEA
 25757                           fsr0l	equ	0xFE9
 25758                           wreg	equ	0xFE8
 25759                           indf1	equ	0xFE7
 25760                           postinc1	equ	0xFE6
 25761                           postdec1	equ	0xFE5
 25762                           fsr1h	equ	0xFE2
 25763                           fsr1l	equ	0xFE1
 25764                           indf2	equ	0xFDF
 25765                           postinc2	equ	0xFDE
 25766                           postdec2	equ	0xFDD
 25767                           plusw2	equ	0xFDB
 25768                           fsr2h	equ	0xFDA
 25769                           fsr2l	equ	0xFD9
 25770                           status	equ	0xFD8
 25771                           
 25772 ;; *************** function _Interrupt *****************
 25773 ;; Defined at:
 25774 ;;		line 135 in file "main.c"
 25775 ;; Parameters:    Size  Location     Type
 25776 ;;		None
 25777 ;; Auto vars:     Size  Location     Type
 25778 ;;  data            8   25[COMRAM] unsigned char [8]
 25779 ;;  id              4   36[COMRAM] unsigned long 
 25780 ;;  flags           1   35[COMRAM] enum E16349
 25781 ;;  dlc             1   34[COMRAM] unsigned char 
 25782 ;;  c               1   33[COMRAM] unsigned char 
 25783 ;; Return value:  Size  Location     Type
 25784 ;;		None               void
 25785 ;; Registers used:
 25786 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 25787 ;; Tracked objects:
 25788 ;;		On entry : 0/0
 25789 ;;		On exit  : 0/0
 25790 ;;		Unchanged: 0/0
 25791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25792 ;;      Params:         0       0       0       0       0       0       0
 25793 ;;      Locals:        15       0       0       0       0       0       0
 25794 ;;      Temps:          7       0       0       0       0       0       0
 25795 ;;      Totals:        22       0       0       0       0       0       0
 25796 ;;Total ram usage:       22 bytes
 25797 ;; Hardware stack levels used:    1
 25798 ;; Hardware stack levels required when called:    2
 25799 ;; This function calls:
 25800 ;;		_ReadUSART
 25801 ;;		_fifo_write
 25802 ;;		_ECANReceiveMessage
 25803 ;;		_fifo_getFree
 25804 ;;		i1_WriteTimer0
 25805 ;; This function is called by:
 25806 ;;		Interrupt level 1
 25807 ;; This function uses a non-reentrant model
 25808 ;;
 25809                           
 25810                           	psect	intcodelo
 25811  000018                     __pintcodelo:
 25812                           	opt stack 0
 25813  000018                     _Interrupt:
 25814                           	opt stack 20
 25815                           
 25816                           ; BSR set to: 0
 25817                           ;incstack = 0
 25818  000018  CFD8 F013          	movff	status,??_Interrupt
 25819  00001C  CFE8 F014          	movff	wreg,??_Interrupt+1
 25820  000020  CFE0 F015          	movff	bsr,??_Interrupt+2
 25821  000024  CFE1 F016          	movff	fsr1l,??_Interrupt+3
 25822  000028  CFE2 F017          	movff	fsr1h,??_Interrupt+4
 25823  00002C  CFD9 F018          	movff	fsr2l,??_Interrupt+5
 25824  000030  CFDA F019          	movff	fsr2h,??_Interrupt+6
 25825  000034                     
 25826                           ;main.c: 136: uint8_t c;
 25827                           ;main.c: 139: if (1 == PIR1bits.RCIF) {
 25828  000034  AA9E               	btfss	3998,5,c	;volatile
 25829  000036  D001               	goto	i1u1627_21
 25830  000038  D001               	goto	i1u1627_20
 25831  00003A                     i1u1627_21:
 25832  00003A  D021               	goto	i1l375
 25833  00003C                     i1u1627_20:
 25834  00003C                     
 25835                           ;main.c: 141: c = ReadUSART();
 25836  00003C  EC2F  F02A         	call	_ReadUSART	;wreg free
 25837  000040  6E22               	movwf	Interrupt@c,c
 25838  000042                     
 25839                           ;main.c: 143: if (1 != fifo_write(&serialInputFifo, &c, 1)) {
 25840  000042  0E22               	movlw	low Interrupt@c
 25841  000044  6E01               	movwf	?_fifo_write,c
 25842  000046  0E01               	movlw	1
 25843  000048  6E02               	movwf	?_fifo_write+1,c
 25844  00004A  0E00               	movlw	0
 25845  00004C  6E03               	movwf	?_fifo_write+2,c
 25846  00004E  0E00               	movlw	0
 25847  000050  6E04               	movwf	?_fifo_write+3,c
 25848  000052  0E00               	movlw	0
 25849  000054  6E05               	movwf	?_fifo_write+4,c
 25850  000056  0E3E               	movlw	_serialInputFifo& (0+255)
 25851  000058  ECCF  F01A         	call	_fifo_write
 25852  00005C  0401               	decf	?_fifo_write,w,c
 25853  00005E  1002               	iorwf	?_fifo_write+1,w,c
 25854  000060  B4D8               	btfsc	status,2,c
 25855  000062  D001               	goto	i1u1628_21
 25856  000064  D001               	goto	i1u1628_20
 25857  000066                     i1u1628_21:
 25858  000066  D009               	goto	i1l12471
 25859  000068                     i1u1628_20:
 25860  000068                     
 25861                           ;main.c: 145: uart_receiveOverruns++;
 25862  000068  0E01               	movlw	1
 25863  00006A  0100               	movlb	0	; () banked
 25864  00006C  27F1               	addwf	_uart_receiveOverruns& (0+255),f,b
 25865  00006E  0E00               	movlw	0
 25866  000070  23F2               	addwfc	(_uart_receiveOverruns+1)& (0+255),f,b
 25867  000072  0E00               	movlw	0
 25868  000074  23F3               	addwfc	(_uart_receiveOverruns+2)& (0+255),f,b
 25869  000076  0E00               	movlw	0
 25870  000078  23F4               	addwfc	(_uart_receiveOverruns+3)& (0+255),f,b
 25871  00007A                     i1l12471:
 25872                           
 25873                           ;main.c: 146: }
 25874                           ;main.c: 149: PIR1bits.RCIF = 0;
 25875  00007A  9A9E               	bcf	3998,5,c	;volatile
 25876                           
 25877                           ;main.c: 150: }
 25878  00007C  D07D               	goto	i1l377
 25879  00007E                     i1l375:
 25880                           
 25881                           ;main.c: 152: else if (1 == INTCONbits.TMR0IF) {
 25882  00007E  A4F2               	btfss	intcon,2,c	;volatile
 25883  000080  D001               	goto	i1u1629_21
 25884  000082  D001               	goto	i1u1629_20
 25885  000084                     i1u1629_21:
 25886  000084  D079               	goto	i1l377
 25887  000086                     i1u1629_20:
 25888  000086                     
 25889                           ;main.c: 154: WriteTimer0(0xfb1d);
 25890  000086  0EFB               	movlw	251
 25891  000088  6E02               	movwf	?i1_WriteTimer0+1,c
 25892  00008A  0E1D               	movlw	29
 25893  00008C  6E01               	movwf	?i1_WriteTimer0,c
 25894  00008E  EC72  F02A         	call	i1_WriteTimer0	;wreg free
 25895  000092                     
 25896                           ;main.c: 156: timer++;
 25897  000092  0E01               	movlw	1
 25898  000094  0100               	movlb	0	; () banked
 25899  000096  27ED               	addwf	_timer& (0+255),f,b	;volatile
 25900  000098  0E00               	movlw	0
 25901  00009A  23EE               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 25902  00009C  0E00               	movlw	0
 25903  00009E  23EF               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 25904  0000A0  0E00               	movlw	0
 25905  0000A2  23F0               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 25906  0000A4                     
 25907                           ; BSR set to: 0
 25908                           ;main.c: 157: timekeeper++;
 25909  0000A4  0E01               	movlw	1
 25910  0000A6  27E9               	addwf	_timekeeper& (0+255),f,b	;volatile
 25911  0000A8  0E00               	movlw	0
 25912  0000AA  23EA               	addwfc	(_timekeeper+1)& (0+255),f,b	;volatile
 25913  0000AC  0E00               	movlw	0
 25914  0000AE  23EB               	addwfc	(_timekeeper+2)& (0+255),f,b	;volatile
 25915  0000B0  0E00               	movlw	0
 25916  0000B2  23EC               	addwfc	(_timekeeper+3)& (0+255),f,b	;volatile
 25917  0000B4                     
 25918                           ; BSR set to: 0
 25919                           ;main.c: 160: status_led_cnt++;
 25920  0000B4  4A2F               	infsnz	_status_led_cnt,f,c	;volatile
 25921  0000B6  2A30               	incf	_status_led_cnt+1,f,c	;volatile
 25922  0000B8                     
 25923                           ; BSR set to: 0
 25924                           ;main.c: 161: if ((2 == ledFunctionality) &&
 25925                           ;main.c: 162: (status_led_cnt > 1000)) {
 25926  0000B8  5035               	movf	_ledFunctionality,w,c
 25927  0000BA  0A02               	xorlw	2
 25928  0000BC  A4D8               	btfss	status,2,c
 25929  0000BE  D001               	goto	i1u1630_21
 25930  0000C0  D001               	goto	i1u1630_20
 25931  0000C2                     i1u1630_21:
 25932  0000C2  D00C               	goto	i1l12487
 25933  0000C4                     i1u1630_20:
 25934  0000C4                     
 25935                           ; BSR set to: 0
 25936  0000C4  0EE9               	movlw	233
 25937  0000C6  5C2F               	subwf	_status_led_cnt,w,c	;volatile
 25938  0000C8  0E03               	movlw	3
 25939  0000CA  5830               	subwfb	_status_led_cnt+1,w,c	;volatile
 25940  0000CC  A0D8               	btfss	status,0,c
 25941  0000CE  D001               	goto	i1u1631_21
 25942  0000D0  D001               	goto	i1u1631_20
 25943  0000D2                     i1u1631_21:
 25944  0000D2  D004               	goto	i1l12487
 25945  0000D4                     i1u1631_20:
 25946  0000D4                     i1l12485:
 25947                           
 25948                           ; BSR set to: 0
 25949                           ;main.c: 163: LATC1 = ~LATC1;
 25950  0000D4  728B               	btg	3979,1,c	;volatile
 25951                           
 25952                           ;main.c: 164: status_led_cnt = 0;
 25953  0000D6  6A2F               	clrf	_status_led_cnt,c	;volatile
 25954  0000D8  6A30               	clrf	_status_led_cnt+1,c	;volatile
 25955                           
 25956                           ;main.c: 165: }
 25957  0000DA  D04D               	goto	i1l380
 25958  0000DC                     i1l12487:
 25959                           
 25960                           ; BSR set to: 0
 25961                           ;main.c: 166: else if ((3 == ledFunctionality) &&
 25962                           ;main.c: 167: (status_led_cnt > 400)) {
 25963  0000DC  5035               	movf	_ledFunctionality,w,c
 25964  0000DE  0A03               	xorlw	3
 25965  0000E0  A4D8               	btfss	status,2,c
 25966  0000E2  D001               	goto	i1u1632_21
 25967  0000E4  D001               	goto	i1u1632_20
 25968  0000E6                     i1u1632_21:
 25969  0000E6  D009               	goto	i1l12493
 25970  0000E8                     i1u1632_20:
 25971  0000E8                     
 25972                           ; BSR set to: 0
 25973  0000E8  0E91               	movlw	145
 25974  0000EA  5C2F               	subwf	_status_led_cnt,w,c	;volatile
 25975  0000EC  0E01               	movlw	1
 25976  0000EE  5830               	subwfb	_status_led_cnt+1,w,c	;volatile
 25977  0000F0  A0D8               	btfss	status,0,c
 25978  0000F2  D001               	goto	i1u1633_21
 25979  0000F4  D001               	goto	i1u1633_20
 25980  0000F6                     i1u1633_21:
 25981  0000F6  D001               	goto	i1l12493
 25982  0000F8                     i1u1633_20:
 25983  0000F8  D7ED               	goto	i1l12485
 25984  0000FA                     i1l12493:
 25985                           
 25986                           ; BSR set to: 0
 25987                           ;main.c: 171: else if ((4 == ledFunctionality) &&
 25988                           ;main.c: 172: (status_led_cnt > 100)) {
 25989  0000FA  5035               	movf	_ledFunctionality,w,c
 25990  0000FC  0A04               	xorlw	4
 25991  0000FE  A4D8               	btfss	status,2,c
 25992  000100  D001               	goto	i1u1634_21
 25993  000102  D001               	goto	i1u1634_20
 25994  000104                     i1u1634_21:
 25995  000104  D009               	goto	i1l12499
 25996  000106                     i1u1634_20:
 25997  000106                     
 25998                           ; BSR set to: 0
 25999  000106  0E65               	movlw	101
 26000  000108  5C2F               	subwf	_status_led_cnt,w,c	;volatile
 26001  00010A  0E00               	movlw	0
 26002  00010C  5830               	subwfb	_status_led_cnt+1,w,c	;volatile
 26003  00010E  A0D8               	btfss	status,0,c
 26004  000110  D001               	goto	i1u1635_21
 26005  000112  D001               	goto	i1u1635_20
 26006  000114                     i1u1635_21:
 26007  000114  D001               	goto	i1l12499
 26008  000116                     i1u1635_20:
 26009  000116  D7DE               	goto	i1l12485
 26010  000118                     i1l12499:
 26011                           
 26012                           ; BSR set to: 0
 26013                           ;main.c: 176: else if ((5 == ledFunctionality) &&
 26014                           ;main.c: 177: (status_led_cnt > 70)) {
 26015  000118  5035               	movf	_ledFunctionality,w,c
 26016  00011A  0A05               	xorlw	5
 26017  00011C  A4D8               	btfss	status,2,c
 26018  00011E  D001               	goto	i1u1636_21
 26019  000120  D001               	goto	i1u1636_20
 26020  000122                     i1u1636_21:
 26021  000122  D009               	goto	i1l12505
 26022  000124                     i1u1636_20:
 26023  000124                     
 26024                           ; BSR set to: 0
 26025  000124  0E47               	movlw	71
 26026  000126  5C2F               	subwf	_status_led_cnt,w,c	;volatile
 26027  000128  0E00               	movlw	0
 26028  00012A  5830               	subwfb	_status_led_cnt+1,w,c	;volatile
 26029  00012C  A0D8               	btfss	status,0,c
 26030  00012E  D001               	goto	i1u1637_21
 26031  000130  D001               	goto	i1u1637_20
 26032  000132                     i1u1637_21:
 26033  000132  D001               	goto	i1l12505
 26034  000134                     i1u1637_20:
 26035  000134  D7CF               	goto	i1l12485
 26036  000136                     i1l12505:
 26037                           
 26038                           ; BSR set to: 0
 26039                           ;main.c: 181: else if ((6 == ledFunctionality) &&
 26040                           ;main.c: 182: (status_led_cnt > 40)) {
 26041  000136  5035               	movf	_ledFunctionality,w,c
 26042  000138  0A06               	xorlw	6
 26043  00013A  A4D8               	btfss	status,2,c
 26044  00013C  D001               	goto	i1u1638_21
 26045  00013E  D001               	goto	i1u1638_20
 26046  000140                     i1u1638_21:
 26047  000140  D009               	goto	i1l12511
 26048  000142                     i1u1638_20:
 26049  000142                     
 26050                           ; BSR set to: 0
 26051  000142  0E29               	movlw	41
 26052  000144  5C2F               	subwf	_status_led_cnt,w,c	;volatile
 26053  000146  0E00               	movlw	0
 26054  000148  5830               	subwfb	_status_led_cnt+1,w,c	;volatile
 26055  00014A  A0D8               	btfss	status,0,c
 26056  00014C  D001               	goto	i1u1639_21
 26057  00014E  D001               	goto	i1u1639_20
 26058  000150                     i1u1639_21:
 26059  000150  D001               	goto	i1l12511
 26060  000152                     i1u1639_20:
 26061  000152  D7C0               	goto	i1l12485
 26062  000154                     i1l12511:
 26063                           
 26064                           ; BSR set to: 0
 26065                           ;main.c: 186: else if (1 == ledFunctionality) {
 26066  000154  0435               	decf	_ledFunctionality,w,c
 26067  000156  A4D8               	btfss	status,2,c
 26068  000158  D001               	goto	i1u1640_21
 26069  00015A  D001               	goto	i1u1640_20
 26070  00015C                     i1u1640_21:
 26071  00015C  D004               	goto	i1l389
 26072  00015E                     i1u1640_20:
 26073  00015E                     
 26074                           ; BSR set to: 0
 26075                           ;main.c: 187: LATC1 = 1;
 26076  00015E  828B               	bsf	3979,1,c	;volatile
 26077                           
 26078                           ;main.c: 188: status_led_cnt = 0;
 26079  000160  6A2F               	clrf	_status_led_cnt,c	;volatile
 26080  000162  6A30               	clrf	_status_led_cnt+1,c	;volatile
 26081                           
 26082                           ;main.c: 189: }
 26083  000164  D008               	goto	i1l380
 26084  000166                     i1l389:
 26085                           
 26086                           ; BSR set to: 0
 26087                           ;main.c: 190: else if (0 == ledFunctionality) {
 26088  000166  6635               	tstfsz	_ledFunctionality,c
 26089  000168  D001               	goto	i1u1641_21
 26090  00016A  D001               	goto	i1u1641_20
 26091  00016C                     i1u1641_21:
 26092  00016C  D004               	goto	i1l386
 26093  00016E                     i1u1641_20:
 26094  00016E                     
 26095                           ; BSR set to: 0
 26096                           ;main.c: 191: LATC1 = 0;
 26097  00016E  928B               	bcf	3979,1,c	;volatile
 26098                           
 26099                           ;main.c: 192: status_led_cnt = 0;
 26100  000170  6A2F               	clrf	_status_led_cnt,c	;volatile
 26101  000172  6A30               	clrf	_status_led_cnt+1,c	;volatile
 26102  000174  D000               	goto	i1l380
 26103  000176                     i1l386:
 26104  000176                     i1l380:
 26105                           
 26106                           ; BSR set to: 0
 26107                           ;main.c: 193: }
 26108                           ;main.c: 195: INTCONbits.TMR0IF = 0;
 26109  000176  94F2               	bcf	intcon,2,c	;volatile
 26110  000178                     i1l377:
 26111                           
 26112                           ;main.c: 196: }
 26113                           ;main.c: 199: if ( 1 == PIR3bits.RXBNIF ) {
 26114  000178  A2A4               	btfss	4004,1,c	;volatile
 26115  00017A  D001               	goto	i1u1642_21
 26116  00017C  D001               	goto	i1u1642_20
 26117  00017E                     i1u1642_21:
 26118  00017E  D046               	goto	i1l395
 26119  000180                     i1u1642_20:
 26120  000180                     
 26121                           ;main.c: 201: uint32_t id;
 26122                           ;main.c: 202: uint8_t dlc;
 26123                           ;main.c: 203: uint8_t data[8];
 26124                           ;main.c: 204: ECAN_RX_MSG_FLAGS flags;
 26125                           ;main.c: 206: if ( ECANReceiveMessage((unsigned long *)&id,
 26126                           ;main.c: 207: (BYTE*)&data,
 26127                           ;main.c: 208: (BYTE*)&dlc,
 26128                           ;main.c: 209: &flags) ) {
 26129  000180  0E1A               	movlw	low Interrupt@data
 26130  000182  6E08               	movwf	?_ECANReceiveMessage,c
 26131  000184  0E23               	movlw	low Interrupt@dlc
 26132  000186  6E09               	movwf	?_ECANReceiveMessage+1,c
 26133  000188  0E24               	movlw	low Interrupt@flags
 26134  00018A  6E0A               	movwf	?_ECANReceiveMessage+2,c
 26135  00018C  0E25               	movlw	Interrupt@id& (0+255)
 26136  00018E  EC0B  F013         	call	_ECANReceiveMessage
 26137  000192  0900               	iorlw	0
 26138  000194  B4D8               	btfsc	status,2,c
 26139  000196  D001               	goto	i1u1643_21
 26140  000198  D001               	goto	i1u1643_20
 26141  00019A                     i1u1643_21:
 26142  00019A  D037               	goto	i1l12527
 26143  00019C                     i1u1643_20:
 26144  00019C                     
 26145                           ;main.c: 212: if ( !(flags & ECAN_RX_RTR_FRAME) &&
 26146                           ;main.c: 213: (flags & ECAN_RX_XTD_FRAME) &&
 26147                           ;main.c: 214: (fifo_getFree( &canInputFifo ) >= 13 ) ) {
 26148  00019C  BC24               	btfsc	Interrupt@flags,6,c
 26149  00019E  D001               	goto	i1u1644_21
 26150  0001A0  D001               	goto	i1u1644_20
 26151  0001A2                     i1u1644_21:
 26152  0001A2  D033               	goto	i1l12527
 26153  0001A4                     i1u1644_20:
 26154  0001A4  AA24               	btfss	Interrupt@flags,5,c
 26155  0001A6  D001               	goto	i1u1645_21
 26156  0001A8  D001               	goto	i1u1645_20
 26157  0001AA                     i1u1645_21:
 26158  0001AA  D02F               	goto	i1l12527
 26159  0001AC                     i1u1645_20:
 26160  0001AC  0E36               	movlw	_canInputFifo& (0+255)
 26161  0001AE  EC91  F022         	call	_fifo_getFree
 26162  0001B2  0E0D               	movlw	13
 26163  0001B4  5C01               	subwf	?_fifo_getFree,w,c
 26164  0001B6  0E00               	movlw	0
 26165  0001B8  5802               	subwfb	?_fifo_getFree+1,w,c
 26166  0001BA  A0D8               	btfss	status,0,c
 26167  0001BC  D001               	goto	i1u1646_21
 26168  0001BE  D001               	goto	i1u1646_20
 26169  0001C0                     i1u1646_21:
 26170  0001C0  D024               	goto	i1l12527
 26171  0001C2                     i1u1646_20:
 26172  0001C2                     
 26173                           ;main.c: 216: fifo_write( &canInputFifo, (uint8_t *)&id, 4 );
 26174  0001C2  0E25               	movlw	low Interrupt@id
 26175  0001C4  6E01               	movwf	?_fifo_write,c
 26176  0001C6  0E04               	movlw	4
 26177  0001C8  6E02               	movwf	?_fifo_write+1,c
 26178  0001CA  0E00               	movlw	0
 26179  0001CC  6E03               	movwf	?_fifo_write+2,c
 26180  0001CE  0E00               	movlw	0
 26181  0001D0  6E04               	movwf	?_fifo_write+3,c
 26182  0001D2  0E00               	movlw	0
 26183  0001D4  6E05               	movwf	?_fifo_write+4,c
 26184  0001D6  0E36               	movlw	_canInputFifo& (0+255)
 26185  0001D8  ECCF  F01A         	call	_fifo_write
 26186                           
 26187                           ;main.c: 217: fifo_write( &canInputFifo, &dlc, 1 );
 26188  0001DC  0E23               	movlw	low Interrupt@dlc
 26189  0001DE  6E01               	movwf	?_fifo_write,c
 26190  0001E0  0E01               	movlw	1
 26191  0001E2  6E02               	movwf	?_fifo_write+1,c
 26192  0001E4  0E00               	movlw	0
 26193  0001E6  6E03               	movwf	?_fifo_write+2,c
 26194  0001E8  0E00               	movlw	0
 26195  0001EA  6E04               	movwf	?_fifo_write+3,c
 26196  0001EC  0E00               	movlw	0
 26197  0001EE  6E05               	movwf	?_fifo_write+4,c
 26198  0001F0  0E36               	movlw	_canInputFifo& (0+255)
 26199  0001F2  ECCF  F01A         	call	_fifo_write
 26200                           
 26201                           ;main.c: 218: fifo_write( &canInputFifo, (uint8_t *)&data, dlc );
 26202  0001F6  0E1A               	movlw	low Interrupt@data
 26203  0001F8  6E01               	movwf	?_fifo_write,c
 26204  0001FA  5023               	movf	Interrupt@dlc,w,c
 26205  0001FC  6E02               	movwf	?_fifo_write+1,c
 26206  0001FE  6A03               	clrf	?_fifo_write+2,c
 26207  000200  6A04               	clrf	?_fifo_write+3,c
 26208  000202  6A05               	clrf	?_fifo_write+4,c
 26209  000204  0E36               	movlw	_canInputFifo& (0+255)
 26210  000206  ECCF  F01A         	call	_fifo_write
 26211  00020A                     i1l12527:
 26212                           
 26213                           ;main.c: 220: }
 26214                           ;main.c: 222: }
 26215                           ;main.c: 224: PIR3bits.RXBNIF = 0;
 26216  00020A  92A4               	bcf	4004,1,c	;volatile
 26217  00020C                     i1l395:
 26218  00020C  C019  FFDA         	movff	??_Interrupt+6,fsr2h
 26219  000210  C018  FFD9         	movff	??_Interrupt+5,fsr2l
 26220  000214  C017  FFE2         	movff	??_Interrupt+4,fsr1h
 26221  000218  C016  FFE1         	movff	??_Interrupt+3,fsr1l
 26222  00021C  C015  FFE0         	movff	??_Interrupt+2,bsr
 26223  000220  C014  FFE8         	movff	??_Interrupt+1,wreg
 26224  000224  C013  FFD8         	movff	??_Interrupt,status
 26225  000228  0010               	retfie	
 26226  00022A                     __end_of_Interrupt:
 26227                           	opt stack 0
 26228                           tblptru	equ	0xFF8
 26229                           tblptrh	equ	0xFF7
 26230                           tblptrl	equ	0xFF6
 26231                           tablat	equ	0xFF5
 26232                           prodh	equ	0xFF4
 26233                           prodl	equ	0xFF3
 26234                           intcon	equ	0xFF2
 26235                           indf0	equ	0xFEF
 26236                           postinc0	equ	0xFEE
 26237                           fsr0h	equ	0xFEA
 26238                           fsr0l	equ	0xFE9
 26239                           wreg	equ	0xFE8
 26240                           indf1	equ	0xFE7
 26241                           postinc1	equ	0xFE6
 26242                           postdec1	equ	0xFE5
 26243                           fsr1h	equ	0xFE2
 26244                           fsr1l	equ	0xFE1
 26245                           bsr	equ	0xFE0
 26246                           indf2	equ	0xFDF
 26247                           postinc2	equ	0xFDE
 26248                           postdec2	equ	0xFDD
 26249                           plusw2	equ	0xFDB
 26250                           fsr2h	equ	0xFDA
 26251                           fsr2l	equ	0xFD9
 26252                           status	equ	0xFD8
 26253                           
 26254 ;; *************** function i1_WriteTimer0 *****************
 26255 ;; Defined at:
 26256 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 26257 ;; Parameters:    Size  Location     Type
 26258 ;;  timer0          2    0[COMRAM] unsigned int 
 26259 ;; Auto vars:     Size  Location     Type
 26260 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 26261 ;; Return value:  Size  Location     Type
 26262 ;;		None               void
 26263 ;; Registers used:
 26264 ;;		None
 26265 ;; Tracked objects:
 26266 ;;		On entry : 0/0
 26267 ;;		On exit  : 0/0
 26268 ;;		Unchanged: 0/0
 26269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26270 ;;      Params:         2       0       0       0       0       0       0
 26271 ;;      Locals:         2       0       0       0       0       0       0
 26272 ;;      Temps:          0       0       0       0       0       0       0
 26273 ;;      Totals:         4       0       0       0       0       0       0
 26274 ;;Total ram usage:        4 bytes
 26275 ;; Hardware stack levels used:    1
 26276 ;; This function calls:
 26277 ;;		Nothing
 26278 ;; This function is called by:
 26279 ;;		_Interrupt
 26280 ;; This function uses a non-reentrant model
 26281 ;;
 26282                           
 26283                           	psect	text80
 26284  0054E4                     __ptext80:
 26285                           	opt stack 0
 26286  0054E4                     i1_WriteTimer0:
 26287                           	opt stack 21
 26288                           
 26289                           ;incstack = 0
 26290                           ;incstack = 0
 26291  0054E4  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 26292  0054E8  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 26293  0054EC  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 26294  0054F0  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 26295  0054F4  0012               	return	
 26296  0054F6                     __end_ofi1_WriteTimer0:
 26297                           	opt stack 0
 26298                           tblptru	equ	0xFF8
 26299                           tblptrh	equ	0xFF7
 26300                           tblptrl	equ	0xFF6
 26301                           tablat	equ	0xFF5
 26302                           prodh	equ	0xFF4
 26303                           prodl	equ	0xFF3
 26304                           intcon	equ	0xFF2
 26305                           indf0	equ	0xFEF
 26306                           postinc0	equ	0xFEE
 26307                           fsr0h	equ	0xFEA
 26308                           fsr0l	equ	0xFE9
 26309                           wreg	equ	0xFE8
 26310                           indf1	equ	0xFE7
 26311                           postinc1	equ	0xFE6
 26312                           postdec1	equ	0xFE5
 26313                           fsr1h	equ	0xFE2
 26314                           fsr1l	equ	0xFE1
 26315                           bsr	equ	0xFE0
 26316                           indf2	equ	0xFDF
 26317                           postinc2	equ	0xFDE
 26318                           postdec2	equ	0xFDD
 26319                           plusw2	equ	0xFDB
 26320                           fsr2h	equ	0xFDA
 26321                           fsr2l	equ	0xFD9
 26322                           status	equ	0xFD8
 26323                           
 26324 ;; *************** function _fifo_getFree *****************
 26325 ;; Defined at:
 26326 ;;		line 96 in file "fifo.c"
 26327 ;; Parameters:    Size  Location     Type
 26328 ;;  f               1    wreg     PTR struct .
 26329 ;;		 -> canInputFifo(8), 
 26330 ;; Auto vars:     Size  Location     Type
 26331 ;;  f               1   10[COMRAM] PTR struct .
 26332 ;;		 -> canInputFifo(8), 
 26333 ;; Return value:  Size  Location     Type
 26334 ;;                  2    0[COMRAM] unsigned short 
 26335 ;; Registers used:
 26336 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 26337 ;; Tracked objects:
 26338 ;;		On entry : 0/0
 26339 ;;		On exit  : 0/0
 26340 ;;		Unchanged: 0/0
 26341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26342 ;;      Params:         2       0       0       0       0       0       0
 26343 ;;      Locals:         1       0       0       0       0       0       0
 26344 ;;      Temps:          8       0       0       0       0       0       0
 26345 ;;      Totals:        11       0       0       0       0       0       0
 26346 ;;Total ram usage:       11 bytes
 26347 ;; Hardware stack levels used:    1
 26348 ;; This function calls:
 26349 ;;		Nothing
 26350 ;; This function is called by:
 26351 ;;		_Interrupt
 26352 ;; This function uses a non-reentrant model
 26353 ;;
 26354                           
 26355                           	psect	text81
 26356  004522                     __ptext81:
 26357                           	opt stack 0
 26358  004522                     _fifo_getFree:
 26359                           	opt stack 21
 26360                           
 26361                           ;incstack = 0
 26362                           ;incstack = 0
 26363                           ;fifo_getFree@f stored from wreg
 26364  004522  CFE8 F00B          	movff	wreg,fifo_getFree@f
 26365                           
 26366                           ;fifo.c: 97: if (f->head < f->tail) {
 26367  004526  D83F               	call	PL66	;call to abstracted procedure
 26368  004528  500B               	movf	fifo_getFree@f,w,c
 26369  00452A  6EE1               	movwf	fsr1l,c
 26370  00452C  6AE2               	clrf	fsr1h,c
 26371  00452E  0E02               	movlw	2
 26372  004530  26E1               	addwf	fsr1l,f,c
 26373  004532  6AE2               	clrf	fsr1h,c
 26374  004534  52E6               	movf	postinc1,f,c
 26375  004536  52DE               	movf	postinc2,f,c
 26376  004538  50DD               	movf	postdec2,w,c
 26377  00453A  5CE5               	subwf	postdec1,w,c
 26378  00453C  E102               	bnz	i1u593_25
 26379  00453E  50DF               	movf	indf2,w,c
 26380  004540  5CE7               	subwf	indf1,w,c
 26381  004542                     i1u593_25:
 26382  004542  E210               	bc	i1l6115
 26383                           
 26384                           ;fifo.c: 98: return (f->tail - f->head);
 26385  004544  D837               	call	PL104	;call to abstracted procedure
 26386  004546  CFDE F003          	movff	postinc2,??_fifo_getFree
 26387  00454A  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 26388  00454E  D82B               	call	PL66	;call to abstracted procedure
 26389  004550  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 26390  004554  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 26391  004558  5003               	movf	??_fifo_getFree,w,c
 26392  00455A  5C05               	subwf	??_fifo_getFree+2,w,c
 26393  00455C  6E01               	movwf	?_fifo_getFree,c
 26394  00455E  5004               	movf	??_fifo_getFree+1,w,c
 26395  004560  5806               	subwfb	??_fifo_getFree+3,w,c
 26396  004562  D01F               	goto	L42
 26397  004564                     i1l6115:
 26398                           
 26399                           ;fifo.c: 100: else {
 26400                           ;fifo.c: 101: return (f->size + (f->tail - f->head));
 26401  004564  D820               	call	PL66	;call to abstracted procedure
 26402  004566  CFDE F003          	movff	postinc2,??_fifo_getFree
 26403  00456A  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 26404  00456E  D822               	call	PL104	;call to abstracted procedure
 26405  004570  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 26406  004574  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 26407  004578  500B               	movf	fifo_getFree@f,w,c
 26408  00457A  6ED9               	movwf	fsr2l,c
 26409  00457C  6ADA               	clrf	fsr2h,c
 26410  00457E  0E06               	movlw	6
 26411  004580  26D9               	addwf	fsr2l,f,c
 26412  004582  6ADA               	clrf	fsr2h,c
 26413  004584  CFDE F007          	movff	postinc2,??_fifo_getFree+4
 26414  004588  CFDD F008          	movff	postdec2,??_fifo_getFree+5
 26415  00458C  5005               	movf	??_fifo_getFree+2,w,c
 26416  00458E  5C07               	subwf	??_fifo_getFree+4,w,c
 26417  004590  6E09               	movwf	(??_fifo_getFree+6)& (0+255),c
 26418  004592  5006               	movf	??_fifo_getFree+3,w,c
 26419  004594  5808               	subwfb	??_fifo_getFree+5,w,c
 26420  004596  6E0A               	movwf	(??_fifo_getFree+7)& (0+255),c
 26421  004598  5003               	movf	??_fifo_getFree,w,c
 26422  00459A  2409               	addwf	??_fifo_getFree+6,w,c
 26423  00459C  6E01               	movwf	?_fifo_getFree,c
 26424  00459E  5004               	movf	??_fifo_getFree+1,w,c
 26425  0045A0  200A               	addwfc	??_fifo_getFree+7,w,c
 26426  0045A2                     L42:
 26427  0045A2  6E02               	movwf	?_fifo_getFree+1,c
 26428  0045A4  0012               	return	
 26429  0045A6                     __end_of_fifo_getFree:
 26430                           	opt stack 0
 26431  0045A6                     PL66:
 26432                           	opt stack 21
 26433  0045A6  500B               	movf	fifo_getFree@f,w,c
 26434  0045A8  6ED9               	movwf	fsr2l,c
 26435  0045AA  6ADA               	clrf	fsr2h,c
 26436  0045AC  0E04               	movlw	4
 26437  0045AE  26D9               	addwf	fsr2l,f,c
 26438  0045B0  6ADA               	clrf	fsr2h,c
 26439  0045B2  0012               	return	
 26440  0045B4                     __end_ofPL66:
 26441                           	opt stack 0
 26442  0045B4                     PL104:
 26443                           	opt stack 21
 26444  0045B4  500B               	movf	fifo_getFree@f,w,c
 26445  0045B6  6ED9               	movwf	fsr2l,c
 26446  0045B8  6ADA               	clrf	fsr2h,c
 26447  0045BA  0E02               	movlw	2
 26448  0045BC  26D9               	addwf	fsr2l,f,c
 26449  0045BE  6ADA               	clrf	fsr2h,c
 26450  0045C0  0012               	return	
 26451  0045C2                     __end_ofPL104:
 26452                           	opt stack 0
 26453                           tblptru	equ	0xFF8
 26454                           tblptrh	equ	0xFF7
 26455                           tblptrl	equ	0xFF6
 26456                           tablat	equ	0xFF5
 26457                           prodh	equ	0xFF4
 26458                           prodl	equ	0xFF3
 26459                           intcon	equ	0xFF2
 26460                           indf0	equ	0xFEF
 26461                           postinc0	equ	0xFEE
 26462                           fsr0h	equ	0xFEA
 26463                           fsr0l	equ	0xFE9
 26464                           wreg	equ	0xFE8
 26465                           indf1	equ	0xFE7
 26466                           postinc1	equ	0xFE6
 26467                           postdec1	equ	0xFE5
 26468                           fsr1h	equ	0xFE2
 26469                           fsr1l	equ	0xFE1
 26470                           bsr	equ	0xFE0
 26471                           indf2	equ	0xFDF
 26472                           postinc2	equ	0xFDE
 26473                           postdec2	equ	0xFDD
 26474                           plusw2	equ	0xFDB
 26475                           fsr2h	equ	0xFDA
 26476                           fsr2l	equ	0xFD9
 26477                           status	equ	0xFD8
 26478                           
 26479 ;; *************** function _ECANReceiveMessage *****************
 26480 ;; Defined at:
 26481 ;;		line 803 in file "ECAN.c"
 26482 ;; Parameters:    Size  Location     Type
 26483 ;;  id              1    wreg     PTR unsigned long 
 26484 ;;		 -> Interrupt@id(4), 
 26485 ;;  data            1    7[COMRAM] PTR unsigned char 
 26486 ;;		 -> Interrupt@data(8), 
 26487 ;;  dataLen         1    8[COMRAM] PTR unsigned char 
 26488 ;;		 -> Interrupt@dlc(1), 
 26489 ;;  msgFlags        1    9[COMRAM] PTR enum E16324
 26490 ;;		 -> Interrupt@flags(1), 
 26491 ;; Auto vars:     Size  Location     Type
 26492 ;;  id              1   12[COMRAM] PTR unsigned long 
 26493 ;;		 -> Interrupt@id(4), 
 26494 ;;  ptr             2   16[COMRAM] PTR unsigned char 
 26495 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 26496 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 26497 ;;  savedPtr        2   10[COMRAM] PTR unsigned char 
 26498 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 26499 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 26500 ;;  temp            1   15[COMRAM] struct .
 26501 ;;  mode            1   14[COMRAM] unsigned char 
 26502 ;;  i               1   13[COMRAM] unsigned char 
 26503 ;; Return value:  Size  Location     Type
 26504 ;;                  1    wreg      enum E15660
 26505 ;; Registers used:
 26506 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26507 ;; Tracked objects:
 26508 ;;		On entry : 0/0
 26509 ;;		On exit  : 0/0
 26510 ;;		Unchanged: 0/0
 26511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26512 ;;      Params:         3       0       0       0       0       0       0
 26513 ;;      Locals:         8       0       0       0       0       0       0
 26514 ;;      Temps:          0       0       0       0       0       0       0
 26515 ;;      Totals:        11       0       0       0       0       0       0
 26516 ;;Total ram usage:       11 bytes
 26517 ;; Hardware stack levels used:    1
 26518 ;; Hardware stack levels required when called:    1
 26519 ;; This function calls:
 26520 ;;		__ECANPointBuffer
 26521 ;;		__RegsToCANID
 26522 ;; This function is called by:
 26523 ;;		_Interrupt
 26524 ;; This function uses a non-reentrant model
 26525 ;;
 26526                           
 26527                           	psect	text82
 26528  002616                     __ptext82:
 26529                           	opt stack 0
 26530  002616                     _ECANReceiveMessage:
 26531                           	opt stack 20
 26532                           
 26533                           ;incstack = 0
 26534                           ;incstack = 0
 26535                           ;ECANReceiveMessage@id stored from wreg
 26536  002616  CFE8 F00D          	movff	wreg,ECANReceiveMessage@id
 26537                           
 26538                           ;ECAN.c: 805: BYTE mode;
 26539                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 26540                           ;ECAN.c: 809: char i;
 26541                           ;ECAN.c: 810: BYTE_VAL temp;
 26542                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 26543  00261A  6A34               	clrf	__ECANRxFilterHitInfo,c
 26544                           
 26545                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 26546  00261C  5077               	movf	3959,w,c	;volatile
 26547  00261E  0BC0               	andlw	192
 26548  002620  6E0F               	movwf	ECANReceiveMessage@mode,c
 26549                           
 26550                           ;ECAN.c: 816: if ( mode == 0x00 )
 26551  002622  660F               	tstfsz	ECANReceiveMessage@mode,c
 26552  002624  D032               	goto	i1l9233
 26553                           
 26554                           ;ECAN.c: 822: {
 26555                           ;ECAN.c: 824: if ( RXB0FUL )
 26556  002626  AE60               	btfss	3936,7,c	;volatile
 26557  002628  D012               	goto	i1l1367
 26558                           
 26559                           ;ECAN.c: 825: {
 26560                           ;ECAN.c: 827: RXB0IF = 0;
 26561  00262A  90A4               	bcf	4004,0,c	;volatile
 26562                           
 26563                           ;ECAN.c: 830: if ( RXB0OVFL )
 26564  00262C  AE74               	btfss	3956,7,c	;volatile
 26565  00262E  D006               	goto	i1l9209
 26566                           
 26567                           ;ECAN.c: 831: {
 26568                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 26569  002630  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 26570  002632  6ED9               	movwf	fsr2l,c
 26571  002634  6ADA               	clrf	fsr2h,c
 26572  002636  0E00               	movlw	0
 26573  002638  86DB               	bsf	plusw2,3,c
 26574                           
 26575                           ;ECAN.c: 833: RXB0OVFL = 0;
 26576  00263A  9E74               	bcf	3956,7,c	;volatile
 26577  00263C                     i1l9209:
 26578                           
 26579                           ;ECAN.c: 834: }
 26580                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 26581  00263C  A060               	btfss	3936,0,c	;volatile
 26582  00263E  D002               	bra	i1u1091_25
 26583  002640  8034               	bsf	__ECANRxFilterHitInfo,0,c
 26584  002642  D001               	bra	i1u1091_27
 26585  002644                     i1u1091_25:
 26586  002644  9034               	bcf	__ECANRxFilterHitInfo,0,c
 26587  002646                     i1u1091_27:
 26588                           
 26589                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 26590  002646  0E0F               	movlw	15	;volatile
 26591  002648  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 26592  00264A  0E60               	movlw	96	;volatile
 26593  00264C  D01A               	goto	L43
 26594  00264E                     i1l1367:
 26595                           
 26596                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 26597  00264E  010F               	movlb	15	; () banked
 26598  002650  AF50               	btfss	80,7,b	;volatile
 26599  002652  D019               	goto	i1l9227
 26600                           
 26601                           ; BSR set to: 15
 26602                           ;ECAN.c: 842: {
 26603                           ;ECAN.c: 844: RXB1IF = 0;
 26604  002654  92A4               	bcf	4004,1,c	;volatile
 26605                           
 26606                           ;ECAN.c: 847: if ( RXB1OVFL )
 26607  002656  AC74               	btfss	3956,6,c	;volatile
 26608  002658  D006               	goto	i1l9219
 26609                           
 26610                           ; BSR set to: 15
 26611                           ;ECAN.c: 848: {
 26612                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 26613  00265A  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 26614  00265C  6ED9               	movwf	fsr2l,c
 26615  00265E  6ADA               	clrf	fsr2h,c
 26616  002660  0E00               	movlw	0
 26617  002662  86DB               	bsf	plusw2,3,c
 26618                           
 26619                           ; BSR set to: 15
 26620                           ;ECAN.c: 850: RXB1OVFL = 0;
 26621  002664  9C74               	bcf	3956,6,c	;volatile
 26622  002666                     i1l9219:
 26623                           
 26624                           ; BSR set to: 15
 26625                           ;ECAN.c: 851: }
 26626                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 26627  002666  5150               	movf	80,w,b	;volatile
 26628  002668  0B07               	andlw	7
 26629  00266A  6E34               	movwf	__ECANRxFilterHitInfo,c
 26630                           
 26631                           ; BSR set to: 15
 26632                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 26633  00266C  0E02               	movlw	2
 26634  00266E  6034               	cpfslt	__ECANRxFilterHitInfo,c
 26635  002670  D005               	goto	i1l9225
 26636                           
 26637                           ; BSR set to: 15
 26638                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 26639  002672  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 26640  002674  6ED9               	movwf	fsr2l,c
 26641  002676  6ADA               	clrf	fsr2h,c
 26642  002678  0E00               	movlw	0
 26643  00267A  8EDB               	bsf	plusw2,7,c
 26644  00267C                     i1l9225:
 26645                           
 26646                           ; BSR set to: 15
 26647                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 26648  00267C  0E0F               	movlw	15	;volatile
 26649  00267E  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 26650  002680  0E50               	movlw	80	;volatile
 26651  002682                     L43:
 26652  002682  6E11               	movwf	ECANReceiveMessage@ptr,c
 26653                           
 26654                           ;ECAN.c: 860: }
 26655  002684  D065               	goto	i1l9287
 26656  002686                     i1l9227:
 26657                           
 26658                           ;ECAN.c: 861: else
 26659                           ;ECAN.c: 862: return FALSE;
 26660  002686  0E00               	movlw	0
 26661  002688  D0C2               	goto	i1l1374
 26662  00268A                     i1l9233:
 26663                           
 26664                           ;ECAN.c: 869: else if ( mode == 0x40 )
 26665  00268A  500F               	movf	ECANReceiveMessage@mode,w,c
 26666  00268C  0A40               	xorlw	64
 26667  00268E  E146               	bnz	i1l1377
 26668                           
 26669                           ;ECAN.c: 875: {
 26670                           ;ECAN.c: 876: if ( RXB0FUL )
 26671  002690  AE60               	btfss	3936,7,c	;volatile
 26672  002692  D004               	goto	i1l1378
 26673                           
 26674                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 26675  002694  0E0F               	movlw	15	;volatile
 26676  002696  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 26677  002698  0E60               	movlw	96	;volatile
 26678  00269A  D03E               	goto	L50
 26679  00269C                     i1l1378:
 26680                           
 26681                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 26682  00269C  010F               	movlb	15	; () banked
 26683  00269E  AF50               	btfss	80,7,b	;volatile
 26684  0026A0  D004               	goto	i1l1380
 26685                           
 26686                           ; BSR set to: 15
 26687                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 26688  0026A2  0E0F               	movlw	15	;volatile
 26689  0026A4  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 26690  0026A6  0E50               	movlw	80	;volatile
 26691  0026A8  D037               	goto	L50
 26692  0026AA                     i1l1380:
 26693                           
 26694                           ; BSR set to: 15
 26695                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 26696  0026AA  010D               	movlb	13
 26697  0026AC  B5F8               	btfsc	248,2,b	;volatile
 26698  0026AE  D007               	goto	i1l1382
 26699  0026B0  010E               	movlb	14
 26700  0026B2  AF20               	btfss	32,7,b	;volatile
 26701  0026B4  D004               	goto	i1l1382
 26702                           
 26703                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 26704  0026B6  0E0E               	movlw	14	;volatile
 26705  0026B8  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 26706  0026BA  0E20               	movlw	32	;volatile
 26707  0026BC  D02D               	goto	L50
 26708  0026BE                     i1l1382:
 26709                           
 26710                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 26711  0026BE  010D               	movlb	13
 26712  0026C0  B7F8               	btfsc	248,3,b	;volatile
 26713  0026C2  D007               	goto	i1l1384
 26714  0026C4  010E               	movlb	14
 26715  0026C6  AF30               	btfss	48,7,b	;volatile
 26716  0026C8  D004               	goto	i1l1384
 26717                           
 26718                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 26719  0026CA  0E0E               	movlw	14	;volatile
 26720  0026CC  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 26721  0026CE  0E30               	movlw	48	;volatile
 26722  0026D0  D023               	goto	L50
 26723  0026D2                     i1l1384:
 26724                           
 26725                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 26726  0026D2  010D               	movlb	13
 26727  0026D4  B9F8               	btfsc	248,4,b	;volatile
 26728  0026D6  D007               	goto	i1l1386
 26729  0026D8  010E               	movlb	14
 26730  0026DA  AF40               	btfss	64,7,b	;volatile
 26731  0026DC  D004               	goto	i1l1386
 26732                           
 26733                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 26734  0026DE  0E0E               	movlw	14	;volatile
 26735  0026E0  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 26736  0026E2  0E40               	movlw	64	;volatile
 26737  0026E4  D019               	goto	L50
 26738  0026E6                     i1l1386:
 26739                           
 26740                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 26741  0026E6  010D               	movlb	13
 26742  0026E8  BBF8               	btfsc	248,5,b	;volatile
 26743  0026EA  D005               	goto	i1l1388
 26744  0026EC  010E               	movlb	14
 26745  0026EE  AF50               	btfss	80,7,b	;volatile
 26746  0026F0  D002               	goto	i1l1388
 26747                           
 26748                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 26749  0026F2  0E0E               	movlw	14	;volatile
 26750  0026F4  D7D7               	goto	L51
 26751  0026F6                     i1l1388:
 26752                           
 26753                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 26754  0026F6  010D               	movlb	13
 26755  0026F8  BDF8               	btfsc	248,6,b	;volatile
 26756  0026FA  D005               	goto	i1l1390
 26757  0026FC  010E               	movlb	14
 26758  0026FE  AF60               	btfss	96,7,b	;volatile
 26759  002700  D002               	goto	i1l1390
 26760                           
 26761                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 26762  002702  0E0E               	movlw	14	;volatile
 26763  002704  D7C8               	goto	L52
 26764  002706                     i1l1390:
 26765                           
 26766                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 26767  002706  010D               	movlb	13
 26768  002708  BFF8               	btfsc	248,7,b	;volatile
 26769  00270A  D7BD               	goto	i1l9227
 26770  00270C  010E               	movlb	14
 26771  00270E  AF70               	btfss	112,7,b	;volatile
 26772  002710  D7BA               	goto	i1l9227
 26773                           
 26774                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 26775  002712  0E0E               	movlw	14	;volatile
 26776  002714  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 26777  002716  0E70               	movlw	112	;volatile
 26778  002718                     L50:
 26779  002718  6E11               	movwf	ECANReceiveMessage@ptr,c
 26780  00271A  D00A               	goto	i1l9277
 26781  00271C                     i1l1377:
 26782                           
 26783                           ;ECAN.c: 910: else
 26784                           ;ECAN.c: 915: {
 26785                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 26786  00271C  AE74               	btfss	3956,7,c	;volatile
 26787  00271E  D7B3               	goto	i1l9227
 26788                           
 26789                           ;ECAN.c: 917: {
 26790                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 26791  002720  506F               	movf	3951,w,c	;volatile
 26792  002722  0B07               	andlw	7
 26793  002724  ECC0  F025         	call	__ECANPointBuffer
 26794  002728  C001  F011         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 26795  00272C  C002  F012         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 26796  002730                     i1l9277:
 26797                           
 26798                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 26799  002730  C011  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 26800  002734  C012  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 26801  002738  50DF               	movf	indf2,w,c
 26802  00273A  0B1F               	andlw	31
 26803  00273C  6E34               	movwf	__ECANRxFilterHitInfo,c
 26804                           
 26805                           ;ECAN.c: 932: RXB1IF = 0;
 26806  00273E  92A4               	bcf	4004,1,c	;volatile
 26807                           
 26808                           ;ECAN.c: 934: if ( RXB1OVFL )
 26809  002740  AC74               	btfss	3956,6,c	;volatile
 26810  002742  D006               	goto	i1l9287
 26811                           
 26812                           ;ECAN.c: 935: {
 26813                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 26814  002744  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 26815  002746  6ED9               	movwf	fsr2l,c
 26816  002748  6ADA               	clrf	fsr2h,c
 26817  00274A  0E00               	movlw	0
 26818  00274C  86DB               	bsf	plusw2,3,c
 26819                           
 26820                           ;ECAN.c: 937: RXB1OVFL = 0;
 26821  00274E  9C74               	bcf	3956,6,c	;volatile
 26822  002750                     i1l9287:
 26823                           
 26824                           ;ECAN.c: 942: savedPtr = ptr;
 26825  002750  C011  F00B         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 26826  002754  C012  F00C         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 26827                           
 26828                           ;ECAN.c: 943: *msgFlags = 0;
 26829  002758  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 26830  00275A  6ED9               	movwf	fsr2l,c
 26831  00275C  6ADA               	clrf	fsr2h,c
 26832  00275E  6ADF               	clrf	indf2,c
 26833                           
 26834                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 26835  002760  EE20 F005          	lfsr	2,5
 26836  002764  D855               	call	PL102	;call to abstracted procedure
 26837                           
 26838                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 26839  002766  5009               	movf	ECANReceiveMessage@dataLen,w,c
 26840  002768  6ED9               	movwf	fsr2l,c
 26841  00276A  6ADA               	clrf	fsr2h,c
 26842  00276C  5010               	movf	ECANReceiveMessage@temp,w,c
 26843  00276E  0B0F               	andlw	15
 26844  002770  6EDF               	movwf	indf2,c
 26845                           
 26846                           ;ECAN.c: 950: if ( temp.bits.b6 )
 26847  002772  AC10               	btfss	ECANReceiveMessage@temp,6,c
 26848  002774  D005               	goto	i1l1398
 26849                           
 26850                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 26851  002776  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 26852  002778  6ED9               	movwf	fsr2l,c
 26853  00277A  6ADA               	clrf	fsr2h,c
 26854  00277C  0E00               	movlw	0
 26855  00277E  8CDB               	bsf	plusw2,6,c
 26856  002780                     i1l1398:
 26857                           
 26858                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 26859  002780  EE20 F002          	lfsr	2,2
 26860  002784  D845               	call	PL102	;call to abstracted procedure
 26861                           
 26862                           ;ECAN.c: 955: if ( temp.bits.b3 )
 26863  002786  A610               	btfss	ECANReceiveMessage@temp,3,c
 26864  002788  D008               	goto	i1l1399
 26865                           
 26866                           ;ECAN.c: 956: {
 26867                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 26868  00278A  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 26869  00278C  6ED9               	movwf	fsr2l,c
 26870  00278E  6ADA               	clrf	fsr2h,c
 26871  002790  0E00               	movlw	0
 26872  002792  8ADB               	bsf	plusw2,5,c
 26873                           
 26874                           ;ECAN.c: 958: temp.Val = 1;
 26875  002794  0E01               	movlw	1
 26876  002796  6E10               	movwf	ECANReceiveMessage@temp,c
 26877                           
 26878                           ;ECAN.c: 959: }
 26879  002798  D001               	goto	i1l9305
 26880  00279A                     i1l1399:
 26881                           
 26882                           ;ECAN.c: 960: else
 26883                           ;ECAN.c: 961: temp.Val = 0;
 26884  00279A  6A10               	clrf	ECANReceiveMessage@temp,c
 26885  00279C                     i1l9305:
 26886                           
 26887                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 26888  00279C  2811               	incf	ECANReceiveMessage@ptr,w,c
 26889  00279E  6E01               	movwf	?__RegsToCANID,c
 26890  0027A0  0E00               	movlw	0
 26891  0027A2  2012               	addwfc	ECANReceiveMessage@ptr+1,w,c
 26892  0027A4  6E02               	movwf	?__RegsToCANID+1,c
 26893  0027A6  C00D  F003         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 26894  0027AA  C010  F004         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 26895  0027AE  EC40  F01A         	call	__RegsToCANID	;wreg free
 26896                           
 26897                           ;ECAN.c: 966: ptr += 6;
 26898  0027B2  0E06               	movlw	6
 26899  0027B4  2611               	addwf	ECANReceiveMessage@ptr,f,c
 26900  0027B6  0E00               	movlw	0
 26901  0027B8  2212               	addwfc	ECANReceiveMessage@ptr+1,f,c
 26902                           
 26903                           ;ECAN.c: 967: temp.Val = *dataLen;
 26904  0027BA  5009               	movf	ECANReceiveMessage@dataLen,w,c
 26905  0027BC  6ED9               	movwf	fsr2l,c
 26906  0027BE  6ADA               	clrf	fsr2h,c
 26907  0027C0  50DF               	movf	indf2,w,c
 26908  0027C2  6E10               	movwf	ECANReceiveMessage@temp,c
 26909                           
 26910                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 26911  0027C4  6A0E               	clrf	ECANReceiveMessage@i,c
 26912  0027C6  D00D               	goto	i1l9321
 26913  0027C8                     i1l9313:
 26914                           
 26915                           ;ECAN.c: 969: *data++ = *ptr++;
 26916  0027C8  C011  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 26917  0027CC  C012  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 26918  0027D0  5008               	movf	ECANReceiveMessage@data,w,c
 26919  0027D2  6EE1               	movwf	fsr1l,c
 26920  0027D4  6AE2               	clrf	fsr1h,c
 26921  0027D6  CFDF FFE7          	movff	indf2,indf1
 26922  0027DA  4A11               	infsnz	ECANReceiveMessage@ptr,f,c
 26923  0027DC  2A12               	incf	ECANReceiveMessage@ptr+1,f,c
 26924  0027DE  2A08               	incf	ECANReceiveMessage@data,f,c
 26925  0027E0  2A0E               	incf	ECANReceiveMessage@i,f,c
 26926  0027E2                     i1l9321:
 26927  0027E2  5010               	movf	ECANReceiveMessage@temp,w,c
 26928  0027E4  5C0E               	subwf	ECANReceiveMessage@i,w,c
 26929  0027E6  E3F0               	bnc	i1l9313
 26930                           
 26931                           ;ECAN.c: 972: if ( IRXIF )
 26932  0027E8  AEA4               	btfss	4004,7,c	;volatile
 26933  0027EA  D006               	goto	i1l9327
 26934                           
 26935                           ;ECAN.c: 973: {
 26936                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 26937  0027EC  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 26938  0027EE  6ED9               	movwf	fsr2l,c
 26939  0027F0  6ADA               	clrf	fsr2h,c
 26940  0027F2  0E00               	movlw	0
 26941  0027F4  88DB               	bsf	plusw2,4,c
 26942                           
 26943                           ;ECAN.c: 975: IRXIF = 0;
 26944  0027F6  9EA4               	bcf	4004,7,c	;volatile
 26945  0027F8                     i1l9327:
 26946                           
 26947                           ;ECAN.c: 976: }
 26948                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 26949  0027F8  C00B  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 26950  0027FC  C00C  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 26951  002800  0E7F               	movlw	127
 26952  002802  16DF               	andwf	indf2,f,c
 26953                           
 26954                           ;ECAN.c: 983: if ( mode == 0x80 )
 26955  002804  500F               	movf	ECANReceiveMessage@mode,w,c
 26956  002806  0A80               	xorlw	128
 26957  002808  B4D8               	btfsc	status,2,c
 26958                           
 26959                           ;ECAN.c: 984: FIFOEMPTY = 0;
 26960  00280A  9E74               	bcf	3956,7,c	;volatile
 26961                           
 26962                           ;ECAN.c: 990: return TRUE;
 26963  00280C  0E01               	movlw	1
 26964  00280E                     i1l1374:
 26965  00280E  0012               	return	
 26966  002810                     __end_of_ECANReceiveMessage:
 26967                           	opt stack 0
 26968  002810                     PL102:
 26969                           	opt stack 20
 26970  002810  5011               	movf	ECANReceiveMessage@ptr,w,c
 26971  002812  26D9               	addwf	fsr2l,f,c
 26972  002814  5012               	movf	ECANReceiveMessage@ptr+1,w,c
 26973  002816  22DA               	addwfc	fsr2h,f,c
 26974  002818  50DF               	movf	indf2,w,c
 26975  00281A  6E10               	movwf	ECANReceiveMessage@temp,c
 26976  00281C  0012               	return	
 26977  00281E                     __end_ofPL102:
 26978                           	opt stack 0
 26979                           tblptru	equ	0xFF8
 26980                           tblptrh	equ	0xFF7
 26981                           tblptrl	equ	0xFF6
 26982                           tablat	equ	0xFF5
 26983                           prodh	equ	0xFF4
 26984                           prodl	equ	0xFF3
 26985                           intcon	equ	0xFF2
 26986                           indf0	equ	0xFEF
 26987                           postinc0	equ	0xFEE
 26988                           fsr0h	equ	0xFEA
 26989                           fsr0l	equ	0xFE9
 26990                           wreg	equ	0xFE8
 26991                           indf1	equ	0xFE7
 26992                           postinc1	equ	0xFE6
 26993                           postdec1	equ	0xFE5
 26994                           fsr1h	equ	0xFE2
 26995                           fsr1l	equ	0xFE1
 26996                           bsr	equ	0xFE0
 26997                           indf2	equ	0xFDF
 26998                           postinc2	equ	0xFDE
 26999                           postdec2	equ	0xFDD
 27000                           plusw2	equ	0xFDB
 27001                           fsr2h	equ	0xFDA
 27002                           fsr2l	equ	0xFD9
 27003                           status	equ	0xFD8
 27004                           
 27005 ;; *************** function __RegsToCANID *****************
 27006 ;; Defined at:
 27007 ;;		line 1156 in file "ECAN.c"
 27008 ;; Parameters:    Size  Location     Type
 27009 ;;  ptr             2    0[COMRAM] PTR unsigned char 
 27010 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27011 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27012 ;;  val             1    2[COMRAM] PTR unsigned long 
 27013 ;;		 -> Interrupt@id(4), 
 27014 ;;  type            1    3[COMRAM] unsigned char 
 27015 ;; Auto vars:     Size  Location     Type
 27016 ;;  Value           1    6[COMRAM] PTR struct _CAN_MESSAGE_
 27017 ;;		 -> Interrupt@id(4), 
 27018 ;; Return value:  Size  Location     Type
 27019 ;;		None               void
 27020 ;; Registers used:
 27021 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27022 ;; Tracked objects:
 27023 ;;		On entry : 0/0
 27024 ;;		On exit  : 0/0
 27025 ;;		Unchanged: 0/0
 27026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27027 ;;      Params:         4       0       0       0       0       0       0
 27028 ;;      Locals:         1       0       0       0       0       0       0
 27029 ;;      Temps:          2       0       0       0       0       0       0
 27030 ;;      Totals:         7       0       0       0       0       0       0
 27031 ;;Total ram usage:        7 bytes
 27032 ;; Hardware stack levels used:    1
 27033 ;; This function calls:
 27034 ;;		Nothing
 27035 ;; This function is called by:
 27036 ;;		_ECANReceiveMessage
 27037 ;; This function uses a non-reentrant model
 27038 ;;
 27039                           
 27040                           	psect	text83
 27041  003480                     __ptext83:
 27042                           	opt stack 0
 27043  003480                     __RegsToCANID:
 27044                           	opt stack 20
 27045                           
 27046                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 27047                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 27048                           
 27049                           ;incstack = 0
 27050                           ;incstack = 0
 27051  003480  C003  F007         	movff	__RegsToCANID@val,__RegsToCANID@Value
 27052                           
 27053                           ;ECAN.c: 1161: if ( type == 0 )
 27054  003484  6604               	tstfsz	__RegsToCANID@type,c
 27055  003486  D02B               	goto	i1l8977
 27056                           
 27057                           ;ECAN.c: 1162: {
 27058                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 27059  003488  5007               	movf	__RegsToCANID@Value,w,c
 27060  00348A  6ED9               	movwf	fsr2l,c
 27061  00348C  D86C               	call	PL74	;call to abstracted procedure
 27062  00348E  3605               	rlcf	??__RegsToCANID,f,c
 27063  003490  90D8               	bcf	status,0,c
 27064  003492  3605               	rlcf	??__RegsToCANID,f,c
 27065  003494  90D8               	bcf	status,0,c
 27066  003496  3405               	rlcf	??__RegsToCANID,w,c
 27067  003498  6EDF               	movwf	indf2,c
 27068                           
 27069                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 27070  00349A  5007               	movf	__RegsToCANID@Value,w,c
 27071  00349C  6ED9               	movwf	fsr2l,c
 27072  00349E  6ADA               	clrf	fsr2h,c
 27073  0034A0  2AD9               	incf	fsr2l,f,c
 27074  0034A2  6ADA               	clrf	fsr2h,c
 27075  0034A4  D873               	call	PL80	;call to abstracted procedure
 27076  0034A6                     i1u1051_25:
 27077  0034A6  90D8               	bcf	status,0,c
 27078  0034A8  3205               	rrcf	??__RegsToCANID,f,c
 27079  0034AA  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 27080  0034AC  D7FC               	goto	i1u1051_25
 27081  0034AE  5005               	movf	??__RegsToCANID,w,c
 27082                           
 27083                           ;ECAN.c: 1166: ptr++;
 27084                           
 27085                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 27086  0034B0  D863               	call	PL76	;call to abstracted procedure
 27087  0034B2  0E05               	movlw	5
 27088  0034B4  6E06               	movwf	(??__RegsToCANID+1)& (0+255),c
 27089  0034B6                     i1u1052_25:
 27090  0034B6  90D8               	bcf	status,0,c
 27091  0034B8  3205               	rrcf	??__RegsToCANID,f,c
 27092  0034BA  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 27093  0034BC  D7FC               	goto	i1u1052_25
 27094  0034BE  5007               	movf	__RegsToCANID@Value,w,c
 27095  0034C0  6ED9               	movwf	fsr2l,c
 27096  0034C2  6ADA               	clrf	fsr2h,c
 27097  0034C4  5005               	movf	??__RegsToCANID,w,c
 27098  0034C6  12DF               	iorwf	indf2,f,c
 27099                           
 27100                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 27101  0034C8  D83D               	call	PL36	;call to abstracted procedure
 27102  0034CA  6ADF               	clrf	indf2,c
 27103                           
 27104                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 27105  0034CC  5007               	movf	__RegsToCANID@Value,w,c
 27106  0034CE  6ED9               	movwf	fsr2l,c
 27107  0034D0  6ADA               	clrf	fsr2h,c
 27108  0034D2  0E03               	movlw	3
 27109  0034D4  26D9               	addwf	fsr2l,f,c
 27110  0034D6  6ADA               	clrf	fsr2h,c
 27111  0034D8  0E00               	movlw	0
 27112  0034DA  6EDF               	movwf	indf2,c
 27113                           
 27114                           ;ECAN.c: 1170: }
 27115  0034DC  D032               	goto	i1l1421
 27116  0034DE                     i1l8977:
 27117                           
 27118                           ;ECAN.c: 1171: else
 27119                           ;ECAN.c: 1172: {
 27120                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 27121  0034DE  D832               	call	PL36	;call to abstracted procedure
 27122  0034E0  D855               	call	PL80	;call to abstracted procedure
 27123  0034E2                     i1u1053_25:
 27124  0034E2  90D8               	bcf	status,0,c
 27125  0034E4  3605               	rlcf	??__RegsToCANID,f,c
 27126  0034E6  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 27127  0034E8  D7FC               	goto	i1u1053_25
 27128  0034EA  5005               	movf	??__RegsToCANID,w,c
 27129  0034EC  6EDF               	movwf	indf2,c
 27130                           
 27131                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 27132  0034EE  5007               	movf	__RegsToCANID@Value,w,c
 27133  0034F0  6ED9               	movwf	fsr2l,c
 27134  0034F2  6ADA               	clrf	fsr2h,c
 27135  0034F4  0E03               	movlw	3
 27136  0034F6  26D9               	addwf	fsr2l,f,c
 27137  0034F8  D836               	call	PL74	;call to abstracted procedure
 27138  0034FA  3205               	rrcf	??__RegsToCANID,f,c
 27139  0034FC  90D8               	bcf	status,0,c
 27140  0034FE  3205               	rrcf	??__RegsToCANID,f,c
 27141  003500  90D8               	bcf	status,0,c
 27142  003502  3005               	rrcf	??__RegsToCANID,w,c
 27143                           
 27144                           ;ECAN.c: 1176: ptr++;
 27145                           
 27146                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 27147  003504  D839               	call	PL76	;call to abstracted procedure
 27148  003506  0E03               	movlw	3
 27149  003508  1605               	andwf	??__RegsToCANID,f,c
 27150  00350A  D81C               	call	PL36	;call to abstracted procedure
 27151  00350C  5005               	movf	??__RegsToCANID,w,c
 27152  00350E  12DF               	iorwf	indf2,f,c
 27153                           
 27154                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 27155  003510  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 27156  003514  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 27157  003518  50DF               	movf	indf2,w,c
 27158  00351A  6E05               	movwf	??__RegsToCANID& (0+255),c
 27159  00351C  90D8               	bcf	status,0,c
 27160  00351E  3205               	rrcf	??__RegsToCANID,f,c
 27161  003520  90D8               	bcf	status,0,c
 27162  003522  3205               	rrcf	??__RegsToCANID,f,c
 27163  003524  90D8               	bcf	status,0,c
 27164  003526  3205               	rrcf	??__RegsToCANID,f,c
 27165  003528  0E1C               	movlw	28
 27166  00352A  1605               	andwf	??__RegsToCANID,f,c
 27167  00352C  D80B               	call	PL36	;call to abstracted procedure
 27168  00352E  5005               	movf	??__RegsToCANID,w,c
 27169  003530  12DF               	iorwf	indf2,f,c
 27170                           
 27171                           ;ECAN.c: 1180: ptr++;
 27172                           
 27173                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 27174  003532  D80F               	call	PL72	;call to abstracted procedure
 27175  003534  2AE1               	incf	fsr1l,f,c
 27176  003536  6AE2               	clrf	fsr1h,c
 27177  003538  CFDF FFE7          	movff	indf2,indf1
 27178                           
 27179                           ;ECAN.c: 1182: ptr++;
 27180                           
 27181                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 27182  00353C  D80A               	call	PL72	;call to abstracted procedure
 27183  00353E  CFDF FFE7          	movff	indf2,indf1
 27184  003542                     i1l1421:
 27185  003542  0012               	return	
 27186  003544                     __end_of__RegsToCANID:
 27187                           	opt stack 0
 27188  003544                     PL36:
 27189                           	opt stack 20
 27190  003544  5007               	movf	__RegsToCANID@Value,w,c
 27191  003546  6ED9               	movwf	fsr2l,c
 27192  003548  6ADA               	clrf	fsr2h,c
 27193  00354A  0E02               	movlw	2
 27194  00354C  26D9               	addwf	fsr2l,f,c
 27195  00354E  6ADA               	clrf	fsr2h,c
 27196  003550  0012               	return	
 27197  003552                     __end_ofPL36:
 27198                           	opt stack 0
 27199  003552                     PL72:
 27200                           	opt stack 20
 27201  003552  4A01               	infsnz	__RegsToCANID@ptr,f,c
 27202  003554  2A02               	incf	__RegsToCANID@ptr+1,f,c
 27203  003556  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 27204  00355A  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 27205  00355E  5007               	movf	__RegsToCANID@Value,w,c
 27206  003560  6EE1               	movwf	fsr1l,c
 27207  003562  6AE2               	clrf	fsr1h,c
 27208  003564  0012               	return	
 27209  003566                     __end_ofPL72:
 27210                           	opt stack 0
 27211  003566                     PL74:
 27212                           	opt stack 20
 27213  003566  6ADA               	clrf	fsr2h,c
 27214  003568  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 27215  00356C  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 27216  003570  50E7               	movf	indf1,w,c
 27217  003572  6E05               	movwf	??__RegsToCANID& (0+255),c
 27218  003574  90D8               	bcf	status,0,c
 27219  003576  0012               	return	
 27220  003578                     __end_ofPL74:
 27221                           	opt stack 0
 27222  003578                     PL76:
 27223                           	opt stack 20
 27224  003578  6EDF               	movwf	indf2,c
 27225  00357A  4A01               	infsnz	__RegsToCANID@ptr,f,c
 27226  00357C  2A02               	incf	__RegsToCANID@ptr+1,f,c
 27227  00357E  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 27228  003582  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 27229  003586  50DF               	movf	indf2,w,c
 27230  003588  6E05               	movwf	??__RegsToCANID& (0+255),c
 27231  00358A  0012               	return	
 27232  00358C                     __end_ofPL76:
 27233                           	opt stack 0
 27234  00358C                     PL80:
 27235                           	opt stack 20
 27236  00358C  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 27237  003590  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 27238  003594  50E7               	movf	indf1,w,c
 27239  003596  6E05               	movwf	??__RegsToCANID& (0+255),c
 27240  003598  0E05               	movlw	5
 27241  00359A  6E06               	movwf	(??__RegsToCANID+1)& (0+255),c
 27242  00359C  0C05               	retlw	5
 27243  00359E                     __end_ofPL80:
 27244                           	opt stack 0
 27245                           tblptru	equ	0xFF8
 27246                           tblptrh	equ	0xFF7
 27247                           tblptrl	equ	0xFF6
 27248                           tablat	equ	0xFF5
 27249                           prodh	equ	0xFF4
 27250                           prodl	equ	0xFF3
 27251                           intcon	equ	0xFF2
 27252                           indf0	equ	0xFEF
 27253                           postinc0	equ	0xFEE
 27254                           fsr0h	equ	0xFEA
 27255                           fsr0l	equ	0xFE9
 27256                           wreg	equ	0xFE8
 27257                           indf1	equ	0xFE7
 27258                           postinc1	equ	0xFE6
 27259                           postdec1	equ	0xFE5
 27260                           fsr1h	equ	0xFE2
 27261                           fsr1l	equ	0xFE1
 27262                           bsr	equ	0xFE0
 27263                           indf2	equ	0xFDF
 27264                           postinc2	equ	0xFDE
 27265                           postdec2	equ	0xFDD
 27266                           plusw2	equ	0xFDB
 27267                           fsr2h	equ	0xFDA
 27268                           fsr2l	equ	0xFD9
 27269                           status	equ	0xFD8
 27270                           
 27271 ;; *************** function __ECANPointBuffer *****************
 27272 ;; Defined at:
 27273 ;;		line 1207 in file "ECAN.c"
 27274 ;; Parameters:    Size  Location     Type
 27275 ;;  b               1    wreg     unsigned char 
 27276 ;; Auto vars:     Size  Location     Type
 27277 ;;  b               1    3[COMRAM] unsigned char 
 27278 ;;  pt              2    4[COMRAM] PTR unsigned char 
 27279 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27280 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27281 ;; Return value:  Size  Location     Type
 27282 ;;                  2    0[COMRAM] PTR unsigned char 
 27283 ;; Registers used:
 27284 ;;		wreg, status,2, status,0
 27285 ;; Tracked objects:
 27286 ;;		On entry : 0/0
 27287 ;;		On exit  : 0/0
 27288 ;;		Unchanged: 0/0
 27289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27290 ;;      Params:         3       0       0       0       0       0       0
 27291 ;;      Locals:         3       0       0       0       0       0       0
 27292 ;;      Temps:          0       0       0       0       0       0       0
 27293 ;;      Totals:         6       0       0       0       0       0       0
 27294 ;;Total ram usage:        6 bytes
 27295 ;; Hardware stack levels used:    1
 27296 ;; This function calls:
 27297 ;;		Nothing
 27298 ;; This function is called by:
 27299 ;;		_ECANReceiveMessage
 27300 ;; This function uses a non-reentrant model
 27301 ;;
 27302                           
 27303                           	psect	text84
 27304  004B80                     __ptext84:
 27305                           	opt stack 0
 27306  004B80                     __ECANPointBuffer:
 27307                           	opt stack 20
 27308                           
 27309                           ;incstack = 0
 27310                           ;incstack = 0
 27311                           ;__ECANPointBuffer@b stored from wreg
 27312  004B80  CFE8 F004          	movff	wreg,__ECANPointBuffer@b
 27313                           
 27314                           ;ECAN.c: 1208: BYTE* pt;
 27315                           ;ECAN.c: 1210: switch(b)
 27316  004B84  D024               	goto	i1l8963
 27317  004B86                     i1l8945:
 27318                           
 27319                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 27320  004B86  0E0F               	movlw	15	;volatile
 27321  004B88  6E06               	movwf	__ECANPointBuffer@pt+1,c
 27322  004B8A  0E60               	movlw	96	;volatile
 27323  004B8C  D01E               	goto	L59
 27324  004B8E                     i1l8947:
 27325                           
 27326                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 27327  004B8E  010F               	movlb	15	; () banked
 27328  004B90  0E0F               	movlw	15	;volatile
 27329  004B92  6E06               	movwf	__ECANPointBuffer@pt+1,c
 27330  004B94  0E50               	movlw	80	;volatile
 27331  004B96  D019               	goto	L59
 27332  004B98                     i1l8949:
 27333                           
 27334                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 27335  004B98  010E               	movlb	14	; () banked
 27336  004B9A  0E0E               	movlw	14	;volatile
 27337  004B9C  6E06               	movwf	__ECANPointBuffer@pt+1,c
 27338  004B9E  0E20               	movlw	32	;volatile
 27339  004BA0  D014               	goto	L59
 27340  004BA2                     i1l8951:
 27341                           
 27342                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 27343  004BA2  010E               	movlb	14	; () banked
 27344  004BA4  0E0E               	movlw	14	;volatile
 27345  004BA6  6E06               	movwf	__ECANPointBuffer@pt+1,c
 27346  004BA8  0E30               	movlw	48	;volatile
 27347  004BAA  D00F               	goto	L59
 27348  004BAC                     i1l8953:
 27349                           
 27350                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 27351  004BAC  010E               	movlb	14	; () banked
 27352  004BAE  0E0E               	movlw	14	;volatile
 27353  004BB0  6E06               	movwf	__ECANPointBuffer@pt+1,c
 27354  004BB2  0E40               	movlw	64	;volatile
 27355  004BB4  D00A               	goto	L59
 27356  004BB6                     i1l8955:
 27357                           
 27358                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 27359  004BB6  010E               	movlb	14	; () banked
 27360  004BB8  0E0E               	movlw	14	;volatile
 27361  004BBA  D7EB               	goto	L60
 27362  004BBC                     i1l8957:
 27363                           
 27364                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 27365  004BBC  010E               	movlb	14	; () banked
 27366  004BBE  0E0E               	movlw	14	;volatile
 27367  004BC0  D7E3               	goto	L61
 27368  004BC2                     i1l8959:
 27369                           
 27370                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 27371  004BC2  010E               	movlb	14	; () banked
 27372  004BC4  0E0E               	movlw	14	;volatile
 27373  004BC6  6E06               	movwf	__ECANPointBuffer@pt+1,c
 27374  004BC8  0E70               	movlw	112	;volatile
 27375  004BCA                     L59:
 27376  004BCA  6E05               	movwf	__ECANPointBuffer@pt,c
 27377                           
 27378                           ;ECAN.c: 1235: break;
 27379  004BCC  D00F               	goto	i1l1426
 27380  004BCE                     i1l8963:
 27381  004BCE  5004               	movf	__ECANPointBuffer@b,w,c
 27382                           
 27383                           ; Switch size 1, requested type "space"
 27384                           ; Number of cases is 7, Range of values is 0 to 6
 27385                           ; switch strategies available:
 27386                           ; Name         Instructions Cycles
 27387                           ; simple_byte           22    12 (average)
 27388                           ;	Chosen strategy is simple_byte
 27389  004BD0  E0DA               	bz	i1l8945
 27390  004BD2  0A01               	xorlw	1	; case 1
 27391  004BD4  E0DC               	bz	i1l8947
 27392  004BD6  0A03               	xorlw	3	; case 2
 27393  004BD8  E0DF               	bz	i1l8949
 27394  004BDA  0A01               	xorlw	1	; case 3
 27395  004BDC  E0E2               	bz	i1l8951
 27396  004BDE  0A07               	xorlw	7	; case 4
 27397  004BE0  E0E5               	bz	i1l8953
 27398  004BE2  0A01               	xorlw	1	; case 5
 27399  004BE4  E0E8               	bz	i1l8955
 27400  004BE6  0A03               	xorlw	3	; case 6
 27401  004BE8  E0E9               	bz	i1l8957
 27402  004BEA  D7EB               	goto	i1l8959
 27403  004BEC                     i1l1426:
 27404                           
 27405                           ;ECAN.c: 1237: return (pt);
 27406  004BEC  C005  F001         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 27407  004BF0  C006  F002         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 27408  004BF4  0012               	return	
 27409  004BF6                     __end_of__ECANPointBuffer:
 27410                           	opt stack 0
 27411                           tblptru	equ	0xFF8
 27412                           tblptrh	equ	0xFF7
 27413                           tblptrl	equ	0xFF6
 27414                           tablat	equ	0xFF5
 27415                           prodh	equ	0xFF4
 27416                           prodl	equ	0xFF3
 27417                           intcon	equ	0xFF2
 27418                           indf0	equ	0xFEF
 27419                           postinc0	equ	0xFEE
 27420                           fsr0h	equ	0xFEA
 27421                           fsr0l	equ	0xFE9
 27422                           wreg	equ	0xFE8
 27423                           indf1	equ	0xFE7
 27424                           postinc1	equ	0xFE6
 27425                           postdec1	equ	0xFE5
 27426                           fsr1h	equ	0xFE2
 27427                           fsr1l	equ	0xFE1
 27428                           bsr	equ	0xFE0
 27429                           indf2	equ	0xFDF
 27430                           postinc2	equ	0xFDE
 27431                           postdec2	equ	0xFDD
 27432                           plusw2	equ	0xFDB
 27433                           fsr2h	equ	0xFDA
 27434                           fsr2l	equ	0xFD9
 27435                           status	equ	0xFD8
 27436                           
 27437 ;; *************** function _fifo_write *****************
 27438 ;; Defined at:
 27439 ;;		line 61 in file "fifo.c"
 27440 ;; Parameters:    Size  Location     Type
 27441 ;;  f               1    wreg     PTR struct .
 27442 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 27443 ;;  buf             1    0[COMRAM] PTR const void 
 27444 ;;		 -> Interrupt@dlc(1), Interrupt@data(8), Interrupt@id(4), Interrupt@c(1), 
 27445 ;;  nbytes          4    1[COMRAM] unsigned long 
 27446 ;; Auto vars:     Size  Location     Type
 27447 ;;  f               1   14[COMRAM] PTR struct .
 27448 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 27449 ;;  i               4   10[COMRAM] unsigned long 
 27450 ;;  p               1    9[COMRAM] PTR const unsigned char 
 27451 ;;		 -> Interrupt@dlc(1), Interrupt@data(8), Interrupt@id(4), Interrupt@c(1), 
 27452 ;; Return value:  Size  Location     Type
 27453 ;;                  2    0[COMRAM] unsigned short 
 27454 ;; Registers used:
 27455 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27456 ;; Tracked objects:
 27457 ;;		On entry : 0/0
 27458 ;;		On exit  : 0/0
 27459 ;;		Unchanged: 0/0
 27460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27461 ;;      Params:         5       0       0       0       0       0       0
 27462 ;;      Locals:         6       0       0       0       0       0       0
 27463 ;;      Temps:          4       0       0       0       0       0       0
 27464 ;;      Totals:        15       0       0       0       0       0       0
 27465 ;;Total ram usage:       15 bytes
 27466 ;; Hardware stack levels used:    1
 27467 ;; This function calls:
 27468 ;;		Nothing
 27469 ;; This function is called by:
 27470 ;;		_Interrupt
 27471 ;; This function uses a non-reentrant model
 27472 ;;
 27473                           
 27474                           	psect	text85
 27475  00359E                     __ptext85:
 27476                           	opt stack 0
 27477  00359E                     _fifo_write:
 27478                           	opt stack 21
 27479                           
 27480                           ;incstack = 0
 27481                           ;incstack = 0
 27482                           ;fifo_write@f stored from wreg
 27483  00359E  CFE8 F00F          	movff	wreg,fifo_write@f
 27484                           
 27485                           ;fifo.c: 62: uint32_t i;
 27486                           ;fifo.c: 63: const uint8_t *p;
 27487                           ;fifo.c: 64: p = buf;
 27488  0035A2  C001  F00A         	movff	fifo_write@buf,fifo_write@p
 27489                           
 27490                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 27491  0035A6  6A0B               	clrf	fifo_write@i,c
 27492  0035A8  6A0C               	clrf	fifo_write@i+1,c
 27493  0035AA  6A0D               	clrf	fifo_write@i+2,c
 27494  0035AC  6A0E               	clrf	fifo_write@i+3,c
 27495  0035AE  D052               	goto	i1l6103
 27496  0035B0                     i1l6083:
 27497                           
 27498                           ;fifo.c: 69: if ((f->head + 1 == f->tail) ||
 27499                           ;fifo.c: 70: ((f->head + 1 == f->size) && (f->tail == 0))) {
 27500  0035B0  500F               	movf	fifo_write@f,w,c
 27501  0035B2  6ED9               	movwf	fsr2l,c
 27502  0035B4  6ADA               	clrf	fsr2h,c
 27503  0035B6  0E04               	movlw	4
 27504  0035B8  D85B               	call	PL16	;call to abstracted procedure
 27505  0035BA  E102               	bnz	i1u588_25
 27506  0035BC  5006               	movf	??_fifo_write,w,c
 27507  0035BE  1808               	xorwf	??_fifo_write+2,w,c
 27508  0035C0                     i1u588_25:
 27509  0035C0  E012               	bz	i1l1453
 27510  0035C2  500F               	movf	fifo_write@f,w,c
 27511  0035C4  6ED9               	movwf	fsr2l,c
 27512  0035C6  6ADA               	clrf	fsr2h,c
 27513  0035C8  0E06               	movlw	6
 27514  0035CA  D852               	call	PL16	;call to abstracted procedure
 27515  0035CC  E102               	bnz	i1u589_25
 27516  0035CE  5006               	movf	??_fifo_write,w,c
 27517  0035D0  1808               	xorwf	??_fifo_write+2,w,c
 27518  0035D2                     i1u589_25:
 27519  0035D2  E10E               	bnz	i1l6091
 27520  0035D4  500F               	movf	fifo_write@f,w,c
 27521  0035D6  6ED9               	movwf	fsr2l,c
 27522  0035D8  6ADA               	clrf	fsr2h,c
 27523  0035DA  0E04               	movlw	4
 27524  0035DC  26D9               	addwf	fsr2l,f,c
 27525  0035DE  6ADA               	clrf	fsr2h,c
 27526  0035E0  50DE               	movf	postinc2,w,c
 27527  0035E2  10DD               	iorwf	postdec2,w,c
 27528  0035E4  E105               	bnz	i1l6091
 27529  0035E6                     i1l1453:
 27530                           
 27531                           ;fifo.c: 71: return i;
 27532  0035E6  C00B  F001         	movff	fifo_write@i,?_fifo_write
 27533  0035EA  C00C  F002         	movff	fifo_write@i+1,?_fifo_write+1
 27534  0035EE  D03F               	goto	i1l1454
 27535  0035F0                     i1l6091:
 27536                           
 27537                           ;fifo.c: 73: else {
 27538                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 27539  0035F0  500A               	movf	fifo_write@p,w,c
 27540  0035F2  6ED9               	movwf	fsr2l,c
 27541  0035F4  D85A               	call	PL94	;call to abstracted procedure
 27542  0035F6  CFE6 F006          	movff	postinc1,??_fifo_write
 27543  0035FA  CFE5 F007          	movff	postdec1,??_fifo_write+1
 27544  0035FE  500F               	movf	fifo_write@f,w,c
 27545  003600  6EE1               	movwf	fsr1l,c
 27546  003602  6AE2               	clrf	fsr1h,c
 27547  003604  CFE6 F008          	movff	postinc1,??_fifo_write+2
 27548  003608  CFE5 F009          	movff	postdec1,??_fifo_write+3
 27549  00360C  5006               	movf	??_fifo_write,w,c
 27550  00360E  2408               	addwf	??_fifo_write+2,w,c
 27551  003610  6EE1               	movwf	fsr1l,c
 27552  003612  5007               	movf	??_fifo_write+1,w,c
 27553  003614  2009               	addwfc	??_fifo_write+3,w,c
 27554  003616  6EE2               	movwf	fsr1h,c
 27555  003618  CFDF FFE7          	movff	indf2,indf1
 27556  00361C  2A0A               	incf	fifo_write@p,f,c
 27557                           
 27558                           ;fifo.c: 75: f->head++;
 27559  00361E  D83E               	call	PL40	;call to abstracted procedure
 27560  003620  2ADE               	incf	postinc2,f,c
 27561  003622  0E00               	movlw	0
 27562  003624  22DD               	addwfc	postdec2,f,c
 27563                           
 27564                           ;fifo.c: 76: if (f->head == f->size) {
 27565  003626  500F               	movf	fifo_write@f,w,c
 27566  003628  6ED9               	movwf	fsr2l,c
 27567  00362A  6ADA               	clrf	fsr2h,c
 27568  00362C  0E06               	movlw	6
 27569  00362E  26D9               	addwf	fsr2l,f,c
 27570  003630  D83C               	call	PL94	;call to abstracted procedure
 27571  003632  52E6               	movf	postinc1,f,c
 27572  003634  52DE               	movf	postinc2,f,c
 27573  003636  50DD               	movf	postdec2,w,c
 27574  003638  18E5               	xorwf	postdec1,w,c
 27575  00363A  CFDF FFE8          	movff	indf2,wreg
 27576  00363E  B4D8               	btfsc	status,2,c
 27577  003640  18E7               	xorwf	indf1,w,c
 27578  003642  E103               	bnz	i1l6101
 27579                           
 27580                           ;fifo.c: 77: f->head = 0;
 27581  003644  D82B               	call	PL40	;call to abstracted procedure
 27582  003646  6ADE               	clrf	postinc2,c
 27583  003648  6ADD               	clrf	postdec2,c
 27584  00364A                     i1l6101:
 27585  00364A  2A0B               	incf	fifo_write@i,f,c
 27586  00364C  0E00               	movlw	0
 27587  00364E  220C               	addwfc	fifo_write@i+1,f,c
 27588  003650  220D               	addwfc	fifo_write@i+2,f,c
 27589  003652  220E               	addwfc	fifo_write@i+3,f,c
 27590  003654                     i1l6103:
 27591  003654  5002               	movf	fifo_write@nbytes,w,c
 27592  003656  5C0B               	subwf	fifo_write@i,w,c
 27593  003658  5003               	movf	fifo_write@nbytes+1,w,c
 27594  00365A  580C               	subwfb	fifo_write@i+1,w,c
 27595  00365C  5004               	movf	fifo_write@nbytes+2,w,c
 27596  00365E  580D               	subwfb	fifo_write@i+2,w,c
 27597  003660  5005               	movf	fifo_write@nbytes+3,w,c
 27598  003662  580E               	subwfb	fifo_write@i+3,w,c
 27599  003664  E3A5               	bnc	i1l6083
 27600                           
 27601                           ;fifo.c: 78: }
 27602                           ;fifo.c: 79: }
 27603                           ;fifo.c: 81: }
 27604                           ;fifo.c: 83: return nbytes;
 27605  003666  C002  F001         	movff	fifo_write@nbytes,?_fifo_write
 27606  00366A  C003  F002         	movff	fifo_write@nbytes+1,?_fifo_write+1
 27607  00366E                     i1l1454:
 27608  00366E  0012               	return	
 27609  003670                     __end_of_fifo_write:
 27610                           	opt stack 0
 27611  003670                     PL16:
 27612                           	opt stack 21
 27613  003670  26D9               	addwf	fsr2l,f,c
 27614  003672  6ADA               	clrf	fsr2h,c
 27615  003674  CFDE F006          	movff	postinc2,??_fifo_write
 27616  003678  CFDD F007          	movff	postdec2,??_fifo_write+1
 27617  00367C  500F               	movf	fifo_write@f,w,c
 27618  00367E  6ED9               	movwf	fsr2l,c
 27619  003680  6ADA               	clrf	fsr2h,c
 27620  003682  0E02               	movlw	2
 27621  003684  26D9               	addwf	fsr2l,f,c
 27622  003686  6ADA               	clrf	fsr2h,c
 27623  003688  CFDE F008          	movff	postinc2,??_fifo_write+2
 27624  00368C  CFDD F009          	movff	postdec2,??_fifo_write+3
 27625  003690  2A08               	incf	??_fifo_write+2,f,c
 27626  003692  0E00               	movlw	0
 27627  003694  2209               	addwfc	??_fifo_write+3,f,c
 27628  003696  5007               	movf	??_fifo_write+1,w,c
 27629  003698  1809               	xorwf	??_fifo_write+3,w,c
 27630  00369A  0012               	return	
 27631  00369C                     __end_ofPL16:
 27632                           	opt stack 0
 27633  00369C                     PL40:
 27634                           	opt stack 21
 27635  00369C  500F               	movf	fifo_write@f,w,c
 27636  00369E  6ED9               	movwf	fsr2l,c
 27637  0036A0  6ADA               	clrf	fsr2h,c
 27638  0036A2  0E02               	movlw	2
 27639  0036A4  26D9               	addwf	fsr2l,f,c
 27640  0036A6  6ADA               	clrf	fsr2h,c
 27641  0036A8  0012               	return	
 27642  0036AA                     __end_ofPL40:
 27643                           	opt stack 0
 27644  0036AA                     PL94:
 27645                           	opt stack 21
 27646  0036AA  6ADA               	clrf	fsr2h,c
 27647  0036AC  500F               	movf	fifo_write@f,w,c
 27648  0036AE  6EE1               	movwf	fsr1l,c
 27649  0036B0  6AE2               	clrf	fsr1h,c
 27650  0036B2  0E02               	movlw	2
 27651  0036B4  26E1               	addwf	fsr1l,f,c
 27652  0036B6  6AE2               	clrf	fsr1h,c
 27653  0036B8  0012               	return	
 27654  0036BA                     __end_ofPL94:
 27655                           	opt stack 0
 27656                           tblptru	equ	0xFF8
 27657                           tblptrh	equ	0xFF7
 27658                           tblptrl	equ	0xFF6
 27659                           tablat	equ	0xFF5
 27660                           prodh	equ	0xFF4
 27661                           prodl	equ	0xFF3
 27662                           intcon	equ	0xFF2
 27663                           indf0	equ	0xFEF
 27664                           postinc0	equ	0xFEE
 27665                           fsr0h	equ	0xFEA
 27666                           fsr0l	equ	0xFE9
 27667                           wreg	equ	0xFE8
 27668                           indf1	equ	0xFE7
 27669                           postinc1	equ	0xFE6
 27670                           postdec1	equ	0xFE5
 27671                           fsr1h	equ	0xFE2
 27672                           fsr1l	equ	0xFE1
 27673                           bsr	equ	0xFE0
 27674                           indf2	equ	0xFDF
 27675                           postinc2	equ	0xFDE
 27676                           postdec2	equ	0xFDD
 27677                           plusw2	equ	0xFDB
 27678                           fsr2h	equ	0xFDA
 27679                           fsr2l	equ	0xFD9
 27680                           status	equ	0xFD8
 27681                           
 27682 ;; *************** function _ReadUSART *****************
 27683 ;; Defined at:
 27684 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 27685 ;; Parameters:    Size  Location     Type
 27686 ;;		None
 27687 ;; Auto vars:     Size  Location     Type
 27688 ;;  data            1    0[COMRAM] unsigned char 
 27689 ;; Return value:  Size  Location     Type
 27690 ;;                  1    wreg      unsigned char 
 27691 ;; Registers used:
 27692 ;;		wreg, status,2, status,0
 27693 ;; Tracked objects:
 27694 ;;		On entry : 0/0
 27695 ;;		On exit  : 0/0
 27696 ;;		Unchanged: 0/0
 27697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27698 ;;      Params:         0       0       0       0       0       0       0
 27699 ;;      Locals:         1       0       0       0       0       0       0
 27700 ;;      Temps:          0       0       0       0       0       0       0
 27701 ;;      Totals:         1       0       0       0       0       0       0
 27702 ;;Total ram usage:        1 bytes
 27703 ;; Hardware stack levels used:    1
 27704 ;; This function calls:
 27705 ;;		Nothing
 27706 ;; This function is called by:
 27707 ;;		_Interrupt
 27708 ;; This function uses a non-reentrant model
 27709 ;;
 27710                           
 27711                           	psect	text86
 27712  00545E                     __ptext86:
 27713                           	opt stack 0
 27714  00545E                     _ReadUSART:
 27715                           	opt stack 21
 27716                           
 27717                           ;incstack = 0
 27718                           ;incstack = 0
 27719  00545E  0EF2               	movlw	242
 27720  005460  1633               	andwf	_USART_Status,f,c
 27721  005462  ACAB               	btfss	4011,6,c	;volatile
 27722  005464  D003               	goto	i1l1760
 27723  005466  9033               	bcf	_USART_Status,0,c
 27724  005468  B0AB               	btfsc	4011,0,c	;volatile
 27725  00546A  8033               	bsf	_USART_Status,0,c
 27726  00546C                     i1l1760:
 27727  00546C  B4AB               	btfsc	4011,2,c	;volatile
 27728  00546E  8433               	bsf	_USART_Status,2,c
 27729  005470  B2AB               	btfsc	4011,1,c	;volatile
 27730  005472  8633               	bsf	_USART_Status,3,c
 27731  005474  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 27732  005478  5001               	movf	ReadUSART@data,w,c
 27733  00547A  0012               	return	
 27734  00547C                     __end_of_ReadUSART:
 27735                           	opt stack 0
 27736                           tblptru	equ	0xFF8
 27737                           tblptrh	equ	0xFF7
 27738                           tblptrl	equ	0xFF6
 27739                           tablat	equ	0xFF5
 27740                           prodh	equ	0xFF4
 27741                           prodl	equ	0xFF3
 27742                           intcon	equ	0xFF2
 27743                           indf0	equ	0xFEF
 27744                           postinc0	equ	0xFEE
 27745                           fsr0h	equ	0xFEA
 27746                           fsr0l	equ	0xFE9
 27747                           wreg	equ	0xFE8
 27748                           indf1	equ	0xFE7
 27749                           postinc1	equ	0xFE6
 27750                           postdec1	equ	0xFE5
 27751                           fsr1h	equ	0xFE2
 27752                           fsr1l	equ	0xFE1
 27753                           bsr	equ	0xFE0
 27754                           indf2	equ	0xFDF
 27755                           postinc2	equ	0xFDE
 27756                           postdec2	equ	0xFDD
 27757                           plusw2	equ	0xFDB
 27758                           fsr2h	equ	0xFDA
 27759                           fsr2l	equ	0xFD9
 27760                           status	equ	0xFD8
 27761                           tblptru	equ	0xFF8
 27762                           tblptrh	equ	0xFF7
 27763                           tblptrl	equ	0xFF6
 27764                           tablat	equ	0xFF5
 27765                           prodh	equ	0xFF4
 27766                           prodl	equ	0xFF3
 27767                           intcon	equ	0xFF2
 27768                           indf0	equ	0xFEF
 27769                           postinc0	equ	0xFEE
 27770                           fsr0h	equ	0xFEA
 27771                           fsr0l	equ	0xFE9
 27772                           wreg	equ	0xFE8
 27773                           indf1	equ	0xFE7
 27774                           postinc1	equ	0xFE6
 27775                           postdec1	equ	0xFE5
 27776                           fsr1h	equ	0xFE2
 27777                           fsr1l	equ	0xFE1
 27778                           bsr	equ	0xFE0
 27779                           indf2	equ	0xFDF
 27780                           postinc2	equ	0xFDE
 27781                           postdec2	equ	0xFDD
 27782                           plusw2	equ	0xFDB
 27783                           fsr2h	equ	0xFDA
 27784                           fsr2l	equ	0xFD9
 27785                           status	equ	0xFD8
 27786                           
 27787                           	psect	rparam
 27788  0000                     tblptru	equ	0xFF8
 27789                           tblptrh	equ	0xFF7
 27790                           tblptrl	equ	0xFF6
 27791                           tablat	equ	0xFF5
 27792                           prodh	equ	0xFF4
 27793                           prodl	equ	0xFF3
 27794                           intcon	equ	0xFF2
 27795                           indf0	equ	0xFEF
 27796                           postinc0	equ	0xFEE
 27797                           fsr0h	equ	0xFEA
 27798                           fsr0l	equ	0xFE9
 27799                           wreg	equ	0xFE8
 27800                           indf1	equ	0xFE7
 27801                           postinc1	equ	0xFE6
 27802                           postdec1	equ	0xFE5
 27803                           fsr1h	equ	0xFE2
 27804                           fsr1l	equ	0xFE1
 27805                           bsr	equ	0xFE0
 27806                           indf2	equ	0xFDF
 27807                           postinc2	equ	0xFDE
 27808                           postdec2	equ	0xFDD
 27809                           plusw2	equ	0xFDB
 27810                           fsr2h	equ	0xFDA
 27811                           fsr2l	equ	0xFD9
 27812                           status	equ	0xFD8
 27813                           tblptru	equ	0xFF8
 27814                           tblptrh	equ	0xFF7
 27815                           tblptrl	equ	0xFF6
 27816                           tablat	equ	0xFF5
 27817                           prodh	equ	0xFF4
 27818                           prodl	equ	0xFF3
 27819                           intcon	equ	0xFF2
 27820                           indf0	equ	0xFEF
 27821                           postinc0	equ	0xFEE
 27822                           fsr0h	equ	0xFEA
 27823                           fsr0l	equ	0xFE9
 27824                           wreg	equ	0xFE8
 27825                           indf1	equ	0xFE7
 27826                           postinc1	equ	0xFE6
 27827                           postdec1	equ	0xFE5
 27828                           fsr1h	equ	0xFE2
 27829                           fsr1l	equ	0xFE1
 27830                           bsr	equ	0xFE0
 27831                           indf2	equ	0xFDF
 27832                           postinc2	equ	0xFDE
 27833                           postdec2	equ	0xFDD
 27834                           plusw2	equ	0xFDB
 27835                           fsr2h	equ	0xFDA
 27836                           fsr2l	equ	0xFD9
 27837                           status	equ	0xFD8


Data Sizes:
    Strings     4015
    Constant    120
    Data        0
    BSS         1128
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     40      71
    BANK0           160    113     156
    BANK1           256     20     198
    BANK2           256     61     189
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?___llmod	unsigned long  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), 
		 -> STR_116(CODE[5]), STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), 
		 -> STR_111(CODE[11]), STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), 
		 -> STR_94(CODE[5]), STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_45(CODE[5]), STR_44(CODE[5]), STR_42(CODE[5]), 
		 -> STR_41(CODE[4]), STR_40(CODE[5]), STR_37(CODE[3]), STR_28(CODE[3]), 
		 -> STR_19(CODE[7]), STR_17(CODE[8]), STR_15(CODE[7]), STR_13(CODE[9]), 
		 -> STR_11(CODE[6]), STR_9(CODE[7]), STR_7(CODE[5]), STR_5(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_read	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?_fifo_getFree	unsigned short  size(2) Largest target is 0

    ?_fifo_write	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_29(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_29(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_29(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), STR_116(CODE[5]), 
		 -> STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), STR_111(CODE[11]), 
		 -> STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), STR_94(CODE[5]), 
		 -> STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), STR_45(CODE[5]), 
		 -> STR_44(CODE[5]), STR_42(CODE[5]), STR_41(CODE[4]), STR_40(CODE[5]), 
		 -> STR_37(CODE[3]), STR_28(CODE[3]), STR_19(CODE[7]), STR_17(CODE[8]), 
		 -> STR_15(CODE[7]), STR_13(CODE[9]), STR_11(CODE[6]), STR_9(CODE[7]), 
		 -> STR_7(CODE[5]), STR_5(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), 
		 -> STR_116(CODE[5]), STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), 
		 -> STR_111(CODE[11]), STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), 
		 -> STR_94(CODE[5]), STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_45(CODE[5]), STR_44(CODE[5]), STR_42(CODE[5]), 
		 -> STR_41(CODE[4]), STR_40(CODE[5]), STR_37(CODE[3]), STR_28(CODE[3]), 
		 -> STR_19(CODE[7]), STR_17(CODE[8]), STR_15(CODE[7]), STR_13(CODE[9]), 
		 -> STR_11(CODE[6]), STR_9(CODE[7]), STR_7(CODE[5]), STR_5(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), 
		 -> STR_116(CODE[5]), STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), 
		 -> STR_111(CODE[11]), STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), 
		 -> STR_94(CODE[5]), STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_45(CODE[5]), STR_44(CODE[5]), STR_42(CODE[5]), 
		 -> STR_41(CODE[4]), STR_40(CODE[5]), STR_37(CODE[3]), STR_28(CODE[3]), 
		 -> STR_19(CODE[7]), STR_17(CODE[8]), STR_15(CODE[7]), STR_13(CODE[9]), 
		 -> STR_11(CODE[6]), STR_9(CODE[7]), STR_7(CODE[5]), STR_5(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), STR_116(CODE[5]), 
		 -> STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), STR_111(CODE[11]), 
		 -> STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), STR_94(CODE[5]), 
		 -> STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), STR_45(CODE[5]), 
		 -> STR_44(CODE[5]), STR_42(CODE[5]), STR_41(CODE[4]), STR_40(CODE[5]), 
		 -> STR_37(CODE[3]), STR_28(CODE[3]), STR_19(CODE[7]), STR_17(CODE[8]), 
		 -> STR_15(CODE[7]), STR_13(CODE[9]), STR_11(CODE[6]), STR_9(CODE[7]), 
		 -> STR_7(CODE[5]), STR_5(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_244(CODE[2]), STR_243(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_238(CODE[2]), 
		 -> STR_237(CODE[3]), STR_236(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_254(CODE[3]), STR_253(CODE[23]), STR_252(CODE[10]), STR_251(CODE[10]), 
		 -> STR_250(CODE[12]), STR_249(CODE[8]), STR_248(CODE[7]), STR_247(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_246(CODE[10]), STR_245(CODE[3]), STR_242(CODE[20]), 
		 -> STR_241(CODE[3]), STR_240(CODE[14]), STR_239(CODE[3]), STR_235(CODE[8]), 
		 -> STR_234(CODE[15]), STR_233(CODE[67]), STR_232(CODE[3]), STR_231(CODE[27]), 
		 -> STR_230(CODE[67]), STR_229(CODE[39]), STR_228(CODE[62]), STR_227(CODE[55]), 
		 -> STR_226(CODE[49]), STR_225(CODE[67]), STR_224(CODE[47]), STR_223(CODE[47]), 
		 -> STR_222(CODE[34]), STR_221(CODE[71]), STR_220(CODE[20]), STR_219(CODE[78]), 
		 -> STR_218(CODE[24]), STR_217(CODE[77]), STR_216(CODE[67]), STR_215(CODE[69]), 
		 -> STR_214(CODE[47]), STR_213(CODE[40]), STR_212(CODE[39]), STR_211(CODE[33]), 
		 -> STR_210(CODE[23]), STR_209(CODE[56]), STR_208(CODE[24]), STR_207(CODE[44]), 
		 -> STR_206(CODE[50]), STR_205(CODE[31]), STR_204(CODE[50]), STR_203(CODE[51]), 
		 -> STR_202(CODE[46]), STR_201(CODE[44]), STR_200(CODE[27]), STR_199(CODE[39]), 
		 -> STR_198(CODE[39]), STR_197(CODE[52]), STR_196(CODE[54]), STR_195(CODE[55]), 
		 -> STR_194(CODE[3]), STR_191(CODE[24]), STR_190(CODE[57]), STR_189(CODE[53]), 
		 -> STR_188(CODE[58]), STR_187(CODE[3]), STR_184(CODE[25]), STR_183(CODE[3]), 
		 -> STR_180(CODE[24]), STR_179(CODE[3]), STR_176(CODE[24]), STR_175(CODE[3]), 
		 -> STR_172(CODE[24]), STR_171(CODE[3]), STR_168(CODE[23]), STR_167(CODE[3]), 
		 -> STR_164(CODE[21]), STR_163(CODE[3]), STR_160(CODE[22]), STR_159(CODE[3]), 
		 -> STR_156(CODE[17]), STR_155(CODE[3]), STR_152(CODE[18]), STR_151(CODE[4]), 
		 -> STR_150(CODE[11]), STR_149(CODE[2]), STR_146(CODE[7]), STR_143(CODE[7]), 
		 -> STR_140(CODE[9]), STR_137(CODE[7]), STR_134(CODE[8]), STR_131(CODE[7]), 
		 -> STR_130(CODE[2]), STR_129(CODE[2]), STR_128(CODE[6]), STR_127(CODE[8]), 
		 -> STR_126(CODE[8]), STR_125(CODE[20]), STR_124(CODE[27]), STR_123(CODE[6]), 
		 -> STR_122(CODE[33]), STR_119(CODE[26]), STR_117(CODE[32]), STR_115(CODE[28]), 
		 -> STR_110(CODE[40]), STR_108(CODE[44]), STR_105(CODE[39]), STR_103(CODE[36]), 
		 -> STR_101(CODE[37]), STR_99(CODE[40]), STR_97(CODE[37]), STR_96(CODE[50]), 
		 -> STR_93(CODE[41]), STR_91(CODE[38]), STR_89(CODE[39]), STR_87(CODE[42]), 
		 -> STR_85(CODE[39]), STR_84(CODE[66]), STR_81(CODE[3]), STR_78(CODE[20]), 
		 -> STR_76(CODE[33]), STR_75(CODE[35]), STR_74(CODE[24]), STR_72(CODE[33]), 
		 -> STR_70(CODE[24]), STR_67(CODE[54]), STR_66(CODE[6]), STR_65(CODE[3]), 
		 -> STR_60(CODE[34]), STR_59(CODE[3]), STR_56(CODE[4]), wrkbuf(BANK1[80]), 
		 -> STR_51(CODE[15]), STR_49(CODE[33]), STR_47(CODE[24]), STR_43(CODE[6]), 
		 -> STR_39(CODE[18]), STR_38(CODE[6]), STR_36(CODE[33]), STR_35(CODE[6]), 
		 -> STR_27(CODE[24]), STR_26(CODE[18]), STR_25(CODE[20]), STR_24(CODE[25]), 
		 -> STR_23(CODE[22]), STR_22(CODE[19]), STR_21(CODE[20]), STR_20(CODE[20]), 
		 -> STR_18(CODE[6]), STR_16(CODE[6]), STR_14(CODE[6]), STR_12(CODE[6]), 
		 -> STR_10(CODE[6]), STR_8(CODE[6]), STR_6(CODE[31]), STR_4(CODE[29]), 
		 -> STR_3(CODE[55]), STR_2(CODE[53]), STR_1(CODE[37]), 

    sprintf$2168	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_256(CODE[17]), STR_255(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_193(CODE[3]), STR_192(CODE[7]), STR_186(CODE[3]), STR_185(CODE[7]), 
		 -> STR_182(CODE[4]), STR_181(CODE[8]), STR_178(CODE[4]), STR_177(CODE[8]), 
		 -> STR_174(CODE[4]), STR_173(CODE[8]), STR_170(CODE[4]), STR_169(CODE[8]), 
		 -> STR_166(CODE[4]), STR_165(CODE[7]), STR_162(CODE[4]), STR_161(CODE[7]), 
		 -> STR_158(CODE[4]), STR_157(CODE[7]), STR_154(CODE[4]), STR_153(CODE[7]), 
		 -> STR_148(CODE[3]), STR_147(CODE[7]), STR_145(CODE[3]), STR_144(CODE[7]), 
		 -> STR_142(CODE[3]), STR_141(CODE[7]), STR_139(CODE[3]), STR_138(CODE[7]), 
		 -> STR_136(CODE[3]), STR_135(CODE[7]), STR_133(CODE[3]), STR_132(CODE[7]), 
		 -> STR_80(CODE[3]), STR_79(CODE[7]), STR_64(CODE[3]), STR_63(CODE[7]), 
		 -> STR_62(CODE[3]), STR_61(CODE[7]), STR_58(CODE[3]), STR_57(CODE[7]), 
		 -> STR_55(CODE[3]), STR_54(CODE[7]), STR_53(CODE[3]), STR_52(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2148$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(BANK0[1]), sendReceiveEventVSCP@crc(COMRAM[1]), receivePrintEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), 
		 -> sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_getFree@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_write@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    fifo_write@buf	PTR const void  size(1) Largest target is 8
		 -> Interrupt@dlc(COMRAM[1]), Interrupt@data(COMRAM[8]), Interrupt@id(COMRAM[4]), Interrupt@c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(1) Largest target is 8
		 -> Interrupt@dlc(COMRAM[1]), Interrupt@data(COMRAM[8]), Interrupt@id(COMRAM[4]), Interrupt@c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_read@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    fifo_read@buf	PTR void  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receivePrintEventSLCAN@dlc(BANK0[1]), receivePrintEventSLCAN@id(BANK0[4]), receivePrintEventCANAL@data(BANK0[8]), 
		 -> receivePrintEventCANAL@dlc(BANK0[1]), receivePrintEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), 
		 -> vscpData(BANK1[8]), vscpSize(BANK1[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receivePrintEventSLCAN@dlc(BANK0[1]), receivePrintEventSLCAN@id(BANK0[4]), receivePrintEventCANAL@data(BANK0[8]), 
		 -> receivePrintEventCANAL@dlc(BANK0[1]), receivePrintEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), 
		 -> vscpData(BANK1[8]), vscpSize(BANK1[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_init@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(BANK0[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 8
		 -> Interrupt@data(COMRAM[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> Interrupt@dlc(COMRAM[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> Interrupt@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receivePrintEventCANAL@data(BANK0[8]), vscpData(BANK1[8]), 

    getCANFrame@pdlc	PTR unsigned char  size(2) Largest target is 1
		 -> receivePrintEventSLCAN@dlc(BANK0[1]), receivePrintEventCANAL@dlc(BANK0[1]), vscpSize(BANK1[1]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receivePrintEventSLCAN@id(BANK0[4]), receivePrintEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(2) Largest target is 1
		 -> vscpPriority(BANK1[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(2) Largest target is 2
		 -> vscpClass(BANK1[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(2) Largest target is 1
		 -> vscpType(BANK1[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(2) Largest target is 1
		 -> vscpNodeId(BANK1[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(2) Largest target is 1
		 -> vscpSize(BANK1[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1441	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_193(CODE[3]), STR_192(CODE[7]), 

    printErrors$1432	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_186(CODE[3]), STR_185(CODE[7]), 

    printErrors$1426	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_182(CODE[4]), STR_181(CODE[8]), 

    printErrors$1420	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_178(CODE[4]), STR_177(CODE[8]), 

    printErrors$1414	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_174(CODE[4]), STR_173(CODE[8]), 

    printErrors$1408	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_170(CODE[4]), STR_169(CODE[8]), 

    printStatistics$1401	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_166(CODE[4]), STR_165(CODE[7]), 

    printStatistics$1395	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_162(CODE[4]), STR_161(CODE[7]), 

    printStatistics$1389	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_158(CODE[4]), STR_157(CODE[7]), 

    printStatistics$1383	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_154(CODE[4]), STR_153(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1190(BANK2[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value(BANK2[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1325	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_148(CODE[3]), STR_147(CODE[7]), 

    receivePrintEventVerbose$1320	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_145(CODE[3]), STR_144(CODE[7]), 

    receivePrintEventVerbose$1315	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_142(CODE[3]), STR_141(CODE[7]), 

    receivePrintEventVerbose$1310	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_139(CODE[3]), STR_138(CODE[7]), 

    receivePrintEventVerbose$1305	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_136(CODE[3]), STR_135(CODE[7]), 

    receivePrintEventVerbose$1300	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_133(CODE[3]), STR_132(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendReceiveEventVSCP@crc(COMRAM[1]), receivePrintEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), 
		 -> sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    doModeVerbose@p_1234	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1215	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1207	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_80(CODE[3]), STR_79(CODE[7]), 

    doModeVerbose@preg_1195	PTR unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1191	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1182	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_64(CODE[3]), STR_63(CODE[7]), 

    doModeVerbose$1178	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_62(CODE[3]), STR_61(CODE[7]), 

    doModeVerbose$1172	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_58(CODE[3]), STR_57(CODE[7]), 

    doModeVerbose$1167	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_55(CODE[3]), STR_54(CODE[7]), 

    doModeVerbose$1155	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_53(CODE[3]), STR_52(CODE[7]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1143	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    canInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    S21$buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    serialInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID

Critical Paths under _main in BANK0

    _doModeSLCAN->_sendCANFrame
    _hexStringToBytes->_strlen
    _receivePrintEventSLCAN->_ultoa
    _ultoa->___llmod
    _doModeVscp->_receiveVSCPModeCanalMsg
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _calcCRC->_crc8
    _receivePrintEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _crc8->_init_crc8
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _printBinary->_WriteUSART
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _strichr->_toupper
    _strnicmp->_strlen
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_writeEEPROM
    _init_app_ram->_readEEPROM

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5   99712
                                            106 BANK0      7     2      5
                          _fifo_init
                          _init_crc8
                         _readEEPROM
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0    7534
                                             54 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
                        _writeEEPROM
               _ECANSetOperationMode
                             _memset
             _receivePrintEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5     765
                                              4 BANK0     14     9      5
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     279
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventSLCAN                              10    10      0    3319
                                             35 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8     910
                                             22 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           1     1      0   12090
                                             87 BANK0      1     1      0
                          _fifo_read
               _ECANSetOperationMode
             _receivePrintEventCANAL
                            _calcCRC
           _sendVSCPDriverErrorFrame
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
                 _sendVSCPDriverNack
       _receiveVSCPModeMultiCanalMsg
         _sendVSCPDriverCommandReply
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    1517
                                             15 BANK0      3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeMultiCanalMsg                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1393
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    2323
                                             54 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     174
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1393
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1455
                                             15 BANK0      2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     631
                                             12 BANK0      5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventCANAL                              15    15      0    2647
                                             18 BANK0     15    15      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     737
                                             12 BANK0      3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     427
                                              7 BANK0      5     2      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     334
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       81    81      0   76457
                                              0 BANK1     20    20      0
                                              0 BANK2     61    61      0
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
                        _writeEEPROM
           _receivePrintEventVerbose
                            _stristr
               _ECANSetOperationMode
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                         _WriteUSART
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           15    11      4    2182
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    3519
                                             86 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     161
                                              1 BANK0      5     5      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    3457
                                             86 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     109
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            5     5      0   19230
                                            101 BANK0      5     5      0
                          _putsUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    3832
                                             95 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    5359
                                             95 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    5164
                                             95 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     143
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    3333
                                             86 BANK0      9     5      4
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    2199
                                             54 BANK0     32    24      8
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    1979
                                             47 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    1886
                                             10 BANK0     37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     693
                                              0 BANK0     10     3      7
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     137
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0      93
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    5402
                                             52 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    5328
                                             52 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     665
                                              6 BANK0      7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4     799
                                             12 BANK0      4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     257
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     257
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     124
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4     898
                                             13 BANK0      4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     257
                                              1 BANK0      4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     260
                                              4 BANK0      9     3      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0      96
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     130
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            18    18      0    6449
                                             52 BANK0     18    18      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        20     8     12     948
                                             18 BANK0     20     8     12
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          5     1      4     601
                                             13 BANK0      5     1      4
                          _fifo_read
 ---------------------------------------------------------------------------------
 (4) _fifo_read                                           13     9      4     446
                                              0 BANK0     13     9      4
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    5087
                                             22 BANK0     30    22      8
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     232
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     232
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     241
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    1480
                                             24 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1146
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6     913
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     232
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     241
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0      93
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2      93
                                              1 BANK0      4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     603
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      62
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     310
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     104
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _vscp_restoreDefaults                                 0     0      0     263
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (2) _init_app_eeprom                                      1     1      0     198
                                              3 BANK0      1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      62
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _init_app_ram                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            5     1      4     186
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                           22    22      0    2489
                                             18 COMRAM    22    22      0
                          _ReadUSART
                         _fifo_write
                 _ECANReceiveMessage
                       _fifo_getFree
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     269
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _fifo_getFree                                       11     9      2     154
                                              0 COMRAM    11     9      2
 ---------------------------------------------------------------------------------
 (10) _ECANReceiveMessage                                 11     8      3    1180
                                              7 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (11) __RegsToCANID                                        7     3      4     489
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (11) __ECANPointBuffer                                    6     3      3      52
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         15    10      5     378
                                              0 COMRAM    15    10      5
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_init
   _init_crc8
   _readEEPROM
   _vscp_restoreDefaults
     _init_app_ram
       _readEEPROM
     _init_app_eeprom
       _writeEEPROM
   _init
     _WriteTimer0
     _init_app_ram
       _readEEPROM
     _OpenUSART
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _doModeVerbose
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _writeEEPROM
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _ECANSetOperationMode
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _strcpy
     _strchr
     _readRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _sprintf
       _isdigit
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
     _WriteUSART
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _setFilter
     __CANIDToRegs
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _receivePrintEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeMultiCanalMsg
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _writeEEPROM
     _ECANSetOperationMode
     _memset
     _receivePrintEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _fifo_read
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   _ECANReceiveMessage
     __ECANPointBuffer
     __RegsToCANID
   _fifo_getFree
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     1EE      16       32.2%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     3D      BD       9       73.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     14      C6       7       77.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     71      9C       5       97.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     28      47       1       74.7%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       E       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     366       3        0.0%
DATA                 0      0     562      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Tue Feb 24 23:06:19 2015

        ??_receiveVSCPModeMultiCanalMsg 0060                   __end_of_doModeVerbose 1480  
                          printBinary@i 0064                             fifo_write@f 000F  
                           fifo_write@i 000B                             fifo_write@p 000A  
                        ??_fifo_getFree 0003                   __end_of_sendVSCPFrame 4342  
            doModeVerbose@filter_nodeid 0290                                      PL2 1480  
                                    PL4 1494                                      PL6 14A4  
                                    PL8 14B2                                      bsr 000FE0  
                   ___wmul@multiplicand 0062                             __CFG_BORV$3 000000  
                __end_of_doModeVscpNode 5500                                     PL10 14D0  
                                   PL20 1C60                                     PL12 151A  
                                   PL30 1546                                     PL22 39CC  
                                   PL14 1C42                                     PL40 369C  
                                   PL32 41A2                                     PL24 1C70  
                                   PL16 3670                                     PL50 43D4  
                                   PL42 1C96                                     PL34 155A  
                                   PL26 1536                                     PL18 2D58  
                                   PL60 1CC6                                     PL52 1CB0  
                                   PL44 1588                                     PL36 3544  
                                   PL28 377A                                     PL70 37B0  
                                   PL62 1CDC                                     PL54 15A2  
                                   PL46 4474                                     PL38 156C  
                                   PL80 358C                                     PL72 3552  
                                   PL64 4804                                     PL56 379E  
                                   PL48 378E                                     PL90 1CFC  
                                   PL82 1CEA                                     PL74 3566  
                                   PL66 45A6                                     PL58 15BA  
                                   PL92 535E                                     PL84 2072  
                                   PL76 3578                                     PL68 3ACA  
                                   PL94 36AA                                     PL86 308A  
                                   PL78 3DA0                                     PL96 51CC  
                                   PL88 3F54                                     PL98 427E  
               sendEscapedUartData@pcrc 006C                 receivePrintEventCANAL@i 007A  
                                   l410 3438                                     l403 33D4  
                                   l404 340A                                     l511 0962  
                                   l407 3422                                     l520 09EA  
                                   l408 342C                                     l506 147E  
                                   l531 0A88                                     l515 0AD2  
                                   l534 0A92                                     l800 446A  
                                   l547 0B28                                     l539 0AB2  
                                   l723 1FAC                                     l740 49D2  
                                   l812 435A                                     l901 323C  
                                   l821 43A6                                     l910 326C  
                                   l806 4346                                     l638 2D56  
                                   l815 4376                                     l736 49B0  
                                   l904 3246                                     l752 41D6  
                                   l824 43C0                                     l745 49F6  
                                   l761 4206                                     l809 4350  
                                   l833 3E96                                     l922 3342  
                                   l770 426A                                     l818 4396  
                                   l842 3EC6                                     l907 3250  
                                   l755 41E0                                     l827 43CA  
                                   l851 3F12                                     l916 332E  
                                   l764 4226                                     l860 3F4A  
                                   l836 3EA0                                     l749 4A1A  
                                   l773 4274                                     l845 3EE6  
                                   l758 41EA                                     l782 43F0  
                                   l854 3F24                                     l919 3338  
                                   l767 4236                                     l791 4436  
                                   l839 3EAA                                     l951 2F44  
                                   l848 3EF6                                     l688 2070  
                                   l785 43FA                                     l857 3F40  
                                   l794 4446                                     l698 1DC2  
                                   l779 43E6                                     l788 4416  
                                   l972 3060                                     l956 2F76  
                                   l797 4460                                     l965 2FFE  
                                   l975 307E                                     l959 2FAE  
                                   l896 2600                                     l992 40FE  
                                   l897 2614                                     l889 255E  
                                   l978 3088                                     l989 406A  
                                   l998 3B26                            __CFG_CPB$OFF 000000  
                        getVSCPFrame@id 0082                           fifo_write@buf 0001  
                 ?_vscp_restoreDefaults 0001                    __size_of_WriteTimer0 0012  
                                   _pos 0102          __size_of_writeRegisterExtended 0106  
                                   wreg 000FE8           __end_of_writeRegisterExtended 38D4  
                                  PL100 41C0                                    PL102 2810  
                                  PL104 45B4                                    PL106 37C4  
                                  PL108 1D06                            __CFG_LVP$OFF 000000  
               receivePrintEventSLCAN@i 008B                receivePrintEventCANAL@id 007B  
                          __CFG_WDT$OFF 000000                                    l1001 3BD8  
                                  l1100 3BF0                                    l1016 381E  
                                  l1035 4FDE                                    l1019 38D2  
                                  l1141 47D2                                    l1039 4FEA  
                                  l1161 28A6                                    l1138 47AE  
                                  l1170 2948                                    l1162 28B8  
                                  l1171 295A                                    l1163 28CA  
                                  l1148 4B72                                    l1172 296C  
                                  l1164 28DC                                    l1173 297E  
                                  l1165 28EE                                    l1094 2352  
                                  l1086 22BC                                    l1174 2990  
                                  l1166 2900                                    l2215 4500  
                                  l1175 29A2                                    l1167 2912  
                                  l1159 2894                                    l1192 4C66  
                                  l1184 4920                                    l1416 3778  
                                  l1168 2924                                    l1176 29FA  
                                  l2401 4A92                                    l1169 2936  
                                  l1602 185C                                    l1442 4180  
                                  l1362 3204                                    l1354 3168  
                                  l2314 3D7C                                    l1514 45F4  
                                  l1515 465A                                    l2420 4D36  
                                  l2404 4A8E                                    l1356 3186  
                                  l1188 52CC                                    l1445 41A0  
                                  l1509 5218                                    l2246 4AF8  
                                  l1630 19BE                                    l1550 15EE  
                                  l2256 4E4C                                    l2432 4782  
                                  l2329 5042                                    l1641 1A46  
                                  l1730 4E7E                                    l2434 4776  
                                  l2339 528C                                    l2435 477A  
                                  l1491 4C72                                    l1636 1A00  
                                  l2380 4D9A                                    l1477 5416  
                                  l1493 4C7A                                    l1734 4E92  
                                  l1638 1A26                                    l1566 172A  
                                  l2382 4DFA                                    l1735 4E94  
                                  l1639 1A2A                                    l1583 173A  
                                  l1567 16DC                                    l1736 4E9E  
                                  l1737 4EA0                                    l1657 1AD0  
                                  l1586 176E                                    l1739 4EB8  
                                  l1747 4F12                                    l1587 1772  
                                  l2459 50CC                                    l1499 4CD0  
                                  l2468 5256                                    l1940 39CA  
                                  l2478 5110                                    l1697 5458  
                                  l1698 545A                                    l1939 39C2  
                                  l9503 3468                                    l9531 4C84  
                                  l9507 3474                                    l9443 3396  
                                  l9621 4B2C                                    l9533 4C8A  
                                  l9633 4B66                                    l9625 4B3E  
                                  l9801 0666                                    l9721 0400  
                                  l9713 03C2                                    l9705 0384  
                                  l9651 418E                                    l9483 3434  
                                  l9475 341E                                    l9629 4B52  
                                  l9637 4112                                    l9901 0A04  
                                  l9741 04A8                                    l9823 074E  
                                  l9815 06FE                                    l9807 06A0  
                                  l9727 043C                                    l9671 026E  
                                  l9495 3452                                    l9649 418A  
                                  l9913 0A54                                    l9841 0826  
                                  l9833 07BC                                    l9825 0760  
                                  l9809 06AA                                    l9817 070E  
                                  l9761 0522                                    l9753 04F2  
                                  l9745 04C2                                    l9737 0486  
                                  l9681 02C6                                    l9657 0238  
                                  l9497 3458                                    l9763 0534  
                                  l9499 345E                                    l9941 0AF4  
                                  l9837 07F8                                    l9829 078E  
                                  l9773 058C                                    l9757 050A  
                                  l9749 04DA                                    l9927 0AAC  
                                  l9871 0930                                    l9855 088C  
                                  l9791 061A                                    STR_1 7953  
                                  STR_2 74B1                                    l9953 0B42  
                                  l9961 0B82                                    l9881 096A  
                                  l9865 090A                                    l9785 05EC  
                                  l9697 0344                                    l9689 0304  
                                  STR_3 73D9                                    STR_4 7B2B  
                                  l9963 0B86                                    l9867 091E  
                                  l9859 089E                                    l9971 0BB6  
                                  l9779 05BE                                    STR_5 7FD0  
                                  STR_6 7AED                                    l9797 0648  
                                  STR_7 7FB7                                    STR_8 7F80  
                                  l9983 0C18                                    STR_9 7F5E  
                                  l9993 0C96                                    l9969 0BA4  
                                  l9889 09B6                                    l9995 0CAA  
                                  l9987 0C2A                                    l9999 0CBA  
                                  _PEIE 007F96                          sendCANFrame@id 008F  
                                  _RCIE 007CED                                    _RCIF 007CF5  
                                  _RCIP 007CFD                        ??_ECANInitialize 0061  
                                  _bDLE 00F5                            __CFG_PWRT$ON 000000  
            __end_of_sendVSCPDriverNack 43D4                                    _bHex 0100  
          doModeVerbose@filter_priority 028E                                    _crc8 5306  
                                  _caps 0046                                    _atoi 38D4  
                                  _main 3344                                    _init 504C  
                                  _mode 00F8                                    _itoa 52CE  
                                  fsr0h 000FEA                                    fsr1h 000FE2  
                                  indf0 000FEF                                    fsr0l 000FE9  
                                  fsr2h 000FDA                                    indf1 000FE7  
                                  fsr1l 000FE1                                    indf2 000FDF  
                                  fsr2l 000FD9                                    _utoa 4482  
                   i1WriteTimer0@timer0 0001                                    prodh 000FF4  
                                  prodl 000FF3                                    start 022A  
                          _sprintf$2161 0082                            _sprintf$2162 0084  
                          _sprintf$2168 0086                             _writeEEPROM 53FA  
             ECANReceiveMessage@dataLen 0009                      doModeVerbose@count 02AB  
                 getVSCPFrame@pPriority 0078                          _caninputBuffer 0400  
                    doModeVerbose@value 02B1                    __end_of_getVSCPFrame 4922  
                      __RegsToCANID@val 0003                        __RegsToCANID@ptr 0001  
                  __size_of_getCANFrame 0072                ?_receiveVSCPModeCanalMsg 0001  
              receivePrintEventSLCAN@id 0086                         ?_doModeVscpNode 0001  
                                 l10011 0D2C                                   l10003 0CE6  
                                 l10013 0D3C                                   l10007 0CF6  
                                 l10121 1038                                   l10105 0FCC  
                                 l10025 0DB2                                   l10211 12F8  
                                 l10131 1072                                   l11101 3C28  
                                 l10205 12C0                                   l10141 10AE  
                                 l10125 1048                                   l11023 21DA  
                                 l10231 1390                                   l10223 1354  
                                 l10207 12D2                                   l10151 10E8  
                                 l10135 1082                                   l10055 0E7A  
                                 l10039 0E0E                                   l10303 2C2E  
                                 l11009 2170                                   l10161 1122  
                                 l10145 10BE                                   l10065 0EB4  
                                 l11211 1640                                   l11203 160A  
                                 l11131 5378                                   l10243 140A  
                                 l10155 10F8                                   l10075 0EF0  
                                 l10059 0E8A                                   l12011 512C  
                                 l10403 2D46                                   l10331 2C7C  
                                 l12003 4646                                   l11061 22DA  
                                 l11053 22AA                                   l11037 2244  
                                 l11133 5382                                   l10253 1452  
                                 l10173 1188                                   l10165 1132  
                                 l10085 0F2A                                   l10069 0EC4  
                                 l10341 2C8E                                   l10405 2D4C  
                                 l11119 3C92                                   l10247 142E  
                                 l10239 13CC                                   l10175 1198  
                                 l10095 0F64                                   l10079 0F00  
                                 l10255 1460                                   l10351 2CA0  
                                 l10343 2C94                                   l10327 2C70  
                                 l10319 2C4A                                   _B0CON 000E20  
                                 l11321 1866                                   l11073 232E  
                                 l11049 2298                                   l10249 143C  
                                 l10089 0F3A                                   l12017 5148  
                                 l10329 2C76                                   l10281 2C02  
                                 l10409 2D54                                   l10265 2BC6  
                                 l10441 1D98                                   l10433 1D6E  
                                 l11403 19DC                                   l11331 189A  
                                 l11307 1826                                   l11251 173E  
                                 l11243 1716                                   l11227 16AC  
                                 l11219 1686                                   l11139 4DC8  
                                 l12211 312C                                   l12027 52CA  
                                 l10195 1268                                   l10187 1224  
                                 l10099 0F74                                   l10259 147C  
                                 l12107 3CDE                                   l10507 1F5A  
                                 l10451 1DCC                                   l10435 1D74  
                                 l12301 448A                                   l11501 1BCA  
                                 l11333 189E                                   l11325 1884  
                                 l11245 1730                                   l11077 2340  
                                 l12221 316C                                   l11181 3BD6  
                                 l10381 2CEC                                   l10285 2C08  
                                 l12117 3D22                                   l10541 2046  
                                 l10429 1D4C                                   l12311 44C2  
                                 l11511 1C04                                   l11423 1A56  
                                 l11263 1778                                   l11247 1734  
                                 l11239 16E2                                   l10375 2CD6  
                                 l10295 2C1E                                   l10543 2052  
                                 l10527 1FB2                                   l10519 1F90  
                                 l10463 1DF8                                   l10447 1DBC  
                                 l10535 1FDC                                   _B1CON 000E30  
                                 l10713 486A                                   l12401 5282  
                                 l11505 1BE4                                   l11433 1A76  
                                 l11417 1A40                                   l11409 1A04  
                                 l11361 190E                                   l11345 18D2  
                                 l11257 1756                                   l11249 1738  
                                 l11193 15F8                                   l11521 1C2E  
                                 l12065 48BA                                   l12233 31B6  
                                 l12241 31D4                                   l10393 2D1C  
                                 l10369 2CC2                                   l10529 1FC4  
                                 l10473 1E1C                                   l10537 2032  
                                 l10571 4E80                                   l10563 4E72  
                                 l12139 52EA                                   l11515 1C26  
                                 l11507 1BF6                                   l11451 1AB0  
                                 l11347 18D6                                   l11523 1C34  
                                 l11283 17BE                                   l11267 177E  
                                 l11275 17A2                                   l11195 15FC  
                                 l11187 15D6                                   l10811 256E  
                                 l12411 4D0E                                   l12227 3188  
                                 l12251 31FA                                   l12171 40FC  
                                 l11611 3FDC                                   l11179 3BB6  
                                 l10387 2D04                                   l10547 206E  
                                 l10725 4884                                   l11533 54BA  
                                 l11381 196E                                   l11293 17E6  
                                 l11285 17CC                                   l11269 178A  
                                 l11197 1600                                   l12085 4C1C  
                                 l10821 25E2                                   l12421 5226  
                                 l10901 53D6                                   l12253 31FC  
                                 l12181 4ED6                                   l11613 3FF2  
                                 l11605 3F8E                                   l11541 4FC4  
                                 l12335 4AAC                                   l11471 1AF2  
                                 l11439 1A8A                                   l11447 1AA6  
                                 l11391 199E                                   l11359 190A  
                                 l11375 1942                                   l11279 17B8  
                                 l11199 1604                                   l12079 4C16  
                                 l10823 25E6                                   l10831 2612  
                                 l12415 4D1A                                   l12407 4CD4  
                                 l11703 3706                                   l12247 31F6  
                                 l12183 4EE0                                   l10399 2D34  
                                 _B2CON 000E40                                   l12337 4AB8  
                                 l11473 1AF8                                   l11457 1AB8  
                                 l11385 198C                                   l11377 1954  
                                 l11289 17DA                                   l11297 17EC  
                                 l10825 25F2                                   l10761 2418  
                                 l12417 4D22                                   l12425 5242  
                                 l10841 4A56                                   l12441 50DC  
                                 l10905 53E6                                   l12193 30F0  
                                 l12169 40DC                                   l12177 4EC4  
                                 l11617 400E                                   l11641 3A6C  
                                 l11633 3A06                                   l10497 1F34  
                                 l10489 1EBE                                   l12347 4AEA  
                                 l12339 4ABC                                   l12363 4E3E  
                                 l12355 4E0C                                   l11491 1B84  
                                 l11483 1B1A                                   l11467 1AE0  
                                 l11299 1816                                   l12435 54A8  
                                 l12427 5246                                   l10843 4A7C  
                                 l12443 50E4                                   l12451 50A0  
                                 l12179 4EC8                                   l11643 3A74  
                                 l12283 5216                                   l12275 5204  
                                 l12267 51F2                                   l12373 5012  
                                 l12357 4E18                                   l11397 19C2  
                                 l10773 246C                                   l10749 23C6  
                                 l10837 4A1E                                   l10925 2D86  
                                 l11645 3A8A                                   l11549 4FF4  
                                 l12375 501A                                   l12295 5438  
                                 l12359 4E1C                                   l10855 4700  
                                 l12199 3102                                   l11671 46B8  
                                 l11591 38D0                                   _B3CON 000E50  
                                 l10849 548A                                   l12385 5038  
                                 l12377 501E                                   l12393 5264  
                                 l11497 1BA6                                   l11489 1B2E  
                                 l10785 24BE                                   l12449 5098  
                                 l10865 4738                                   l10953 2E5A  
                                 l11649 3AA6                                   l11673 46C0  
                                 l11761 331E                                   l12395 526C  
                                 l10875 38D6                                   l10939 2DF0  
                                 l11667 4690                                   l11691 29B4  
                                 l12397 5270                                   l10797 2510  
                                 l10893 398A                                   l10885 3930  
                                 l10877 38DC                                   l10981 209C  
                                 l11677 46CE                                   l11589 38B0  
                                 l11757 3306                                   l11773 53A4  
                                 l10887 3948                                   l10967 2EC4  
                                 l11951 3008                                   l11943 2FC2  
                                 _B4CON 000E60                                   l10889 3950  
                                 l11777 53C2                                   l10995 2106  
                                 l11955 301C                                   l11981 5166  
                                 l11983 516C                                   _B5CON 000E70  
                                 l11997 4602                                   ?_crc8 0067  
                  __size_of_doModeSLCAN 0362                      writeEEPROM@address 0060  
                                 ?_atoi 0066                                   ?_main 00CA  
                                 ?_init 0001                                   ?_itoa 0070  
                         i1_WriteTimer0 54E4                                   _EEADR 000FA9  
                                 STR_10 7F80                                   STR_11 7F92  
                                 STR_12 7F80                                   STR_20 7D83  
                                 STR_13 7ECD                                   STR_21 7D97  
                                 STR_14 7F80                                   STR_30 7FF5  
                                 STR_22 7DD3                                   STR_31 7FF5  
                                 STR_15 7F50                                   STR_23 7D06  
                                 STR_16 7F80                                   STR_32 7FF5  
                                 STR_40 7FCB                                   STR_24 7BCF  
                                 STR_33 7FF5                                   STR_41 7FD9  
                                 STR_17 7F0E                                   STR_25 7D6F  
                                 STR_18 7F80                                   STR_50 7F2B  
                                 STR_34 7FF5                                   STR_42 7FC6  
                                 STR_26 7DE6                                   STR_43 7F80  
                                 STR_35 7F80                                   STR_19 7F49  
                                 STR_51 7E5E                                   STR_27 7C49  
                                 STR_28 7FEB                                   STR_44 7FA3  
                                 STR_52 7F65                                   STR_36 7A49  
                                 STR_60 7A06                                   STR_61 7F65  
                                 STR_29 7FF5                                   STR_53 7FEE  
                                 STR_37 7FE8                                   STR_45 7FA8  
                                 STR_38 7F80                                   STR_70 7C31  
                                 STR_46 7F2B                                   STR_54 7F65  
                                 STR_62 7FEE                                   STR_71 7F2B  
                                 STR_63 7F65                                   STR_55 7FEE  
                                 STR_39 7DF8                                   STR_47 7C31  
                                 STR_72 7AAC                                   STR_48 7F2B  
                                 STR_56 7EEA                                   STR_80 7FEE  
                                 STR_64 7FEE                                   STR_81 74AE  
                                 STR_65 74AE                                   STR_73 7F2B  
                                 STR_57 7F65                                   STR_49 7AAC  
                                 STR_66 7F80                                   STR_90 7FF5  
                                 STR_58 7FEE                                   STR_82 7F57  
                                 STR_74 7C61                                   STR_59 74AE  
                                 STR_83 7FF5                                   STR_75 79C1  
                                 STR_91 7908                                   STR_67 7446  
                                 STR_92 7FF5                                   STR_68 7FAD  
                                 STR_76 7A8B                                   STR_84 7240  
                                 STR_69 7F2B                                   STR_77 7FBC  
                                 STR_85 781E                                   STR_93 777D  
                                 STR_86 7FF5                                   STR_94 7FB2  
                                 STR_78 7DAB                                   STR_95 7FF5  
                                 STR_79 7F65                                   STR_87 7753  
                                 STR_88 7FF5                                   STR_96 754D  
                                 STR_97 792E                                   STR_89 78BA  
                                 STR_98 7FF5                                   STR_99 77CE  
          __end_of_printFirmwareVersion 4804                                   _BSEL0 000DF8  
                       __end_of___lldiv 4B0A                                   ?_utoa 0067  
                                 u12005 0784                         __end_of_calcCRC 53CC  
                                 u12015 07B2                                   _T0CON 000FD5  
                                 u12025 07E0                                   u12035 081C  
                                 u12045 084A                         __end_of___llmod 4E5E  
                                 u12315 0D5E                                   u12405 14D8  
                                 u13070 1E8A                                   u12415 0FEE  
                                 u12335 0E30                                   u12255 0BDA  
                                 u11560 4F34                                   u13080 1E94  
                                 u12505 11BA                                   u11570 4F62  
                                 u13090 1E9E                                   u12515 1200  
                                 u13075 1E88                                   u12525 1246  
                                 u11725 02A2                                   u13085 1E92  
                                 u11567 4F2E                                   u11735 02EA  
                                 u13095 1E9C                                   _LATC1 007C59  
                                 u13600 3974                                   u13520 38F0  
                                 u11577 4F5C                                   u11745 0328  
                                 u13610 399E                                   u11755 0368  
                                 u13540 3908                                   u11765 03A8  
                                 u13607 396E                                   u13527 38EA  
                                 u11775 03E6                                   u13560 3926  
                                 u13617 3998                                   u11785 0424  
                                 u13547 3902                                   u11795 0460  
                                 u15500 5188                                   u13580 3944  
                                 u13567 3920                                   u13655 42C8  
                                 u11895 0558                                   u11985 0732  
                                 u15507 5182                                   u13587 393E  
                                 u15195 3DF0                                   u14644 4FD4  
                                 u14645 4FD0                                   u13870 4DB8  
                                 u15650 490C                                   u13890 4DF0  
                                 u14915 36E0                                   u15820 4F08  
                                 u13877 4DB2                                   u14925 36F0  
                                 u15655 4902                                   u14935 370E  
                                 u13897 4DEA                                   u15827 4EFE  
                                 u14885 2838                                   u16477 33A4  
                                 u14886 283E                                   u14895 286C  
                                 u14887 284C                                   u14896 2872  
                                 u14897 2880                         __end_of___lwdiv 504C  
                          _vscpPriority 01AF                         __end_of___lwmod 5296  
                                 i1l380 0176                                   i1l375 007E  
                                 i1l377 0178                                   i1l386 0176  
                                 i1l395 020C                                   i1l389 0166  
                       sendCANFrame@dlc 0093                                   _MSEL0 000DF0  
                                 _MSEL1 000DF1                                   _MSEL2 000DF2  
                                 _RCREG 000FAE                                   _IRXIF 007D27  
                                 _RCSTA 000FAB                        printBinary@value 0063  
                                 _TMR0H 000FD7                                   _TMR0L 000FD6  
                                 _SPBRG 000FAF                writeRegisterExtended@reg 00B8  
                                 _TXREG 000FAD                                   _TXSTA 000FAC  
                        __CFG_EBTR0$OFF 000000                          __CFG_EBTR1$OFF 000000  
                        __CFG_EBTR2$OFF 000000                          __CFG_EBTR3$OFF 000000  
                                 _bOpen 00F7                 readRegisterExtended@reg 00B8  
                         __CFG_WRTD$OFF 000000                          __CFG_EBTRB$OFF 000000  
                      _hexStringToBytes 45C2                                   crc8@m 0069  
                       __end_of_dpowers 7030                         __end_of_isdigit 5440  
                                 _timer 00ED                                   atoi@a 006B  
                                 atoi@s 0066                                   main@c 00D0  
                                 _ultoa 3CCE                              Interrupt@c 0022  
            ??_printNodeFirmwareVersion 00BF                        _printErrors$1420 0098  
                      _printErrors$1414 0096                        _printErrors$1432 009C  
                      _printErrors$1408 0094                        _printErrors$1441 009E  
                      _printErrors$1426 009A                                   tablat 000FF5  
           __end_of_sendEscapedUartData 4A1C                                   plusw2 000FDB  
                                 utoa@c 006F                                   utoa@v 006D  
                                 status 000FD8                 ?_receivePrintEventCANAL 0001  
                       __end_of_sprintf 1C42                         __end_of_strichr 5258  
                       __end_of_strcspn 50D6                         __end_of_toupper 54AC  
                       __end_of_stristr 4A94                            __end_ofPL100 41CE  
                          __end_ofPL102 281E                            __end_ofPL104 45C2  
                          __end_ofPL106 37CE                            __end_ofPL108 1D10  
               ?_receivePrintEventSLCAN 0001       __size_of_receivePrintEventVerbose 02C2  
                   doModeVerbose@i_1137 02B0               ?_receivePrintEventVerbose 0001  
                   doModeVerbose@p_1215 02B9                     doModeVerbose@p_1143 02B2  
                   doModeVerbose@p_1234 02BB                     doModeVerbose@p_1191 02B4  
                        WriteUSART@data 0060                    _ECANSetOperationMode 547C  
                          _canInputFifo 0036                         __initialization 4D38  
                doModeVerbose@page_1188 02A1                            __end_of_crc8 533C  
                          __end_of_atoi 39CC                            __end_of_main 3480  
                          __end_of_init 5092                            __end_of_itoa 5306  
                          __end_of_utoa 4522                     doModeVerbose@ifmode 02B6  
                   doModeVerbose@maskno 02A8                     doModeVerbose@nodeid 028C  
                         doModeSLCAN@id 009D                          __CFG_OSC$HSPLL 000000  
                         doModeSLCAN@rv 00A3                       ??_ECANSendMessage 0072  
                        ?i1_WriteTimer0 0001              writeRegisterExtended@value 00BB  
                                ??_crc8 006A                   getVSCPFrame@pvscptype 0074  
                                ??_atoi 0068                  ??_vscp_restoreDefaults 0064  
                                ??_main 00CF                       readRegister@value 00B9  
                                ??_init 0064                                  ??_itoa 0076  
                                ??_utoa 006D                  doModeVerbose@mask_type 0292  
                         __activetblptr 000002                         _stateVscpDriver 00FB  
                     __RegsToCANID@type 0004                    _can_transmitOverruns 00D5  
            ECANReceiveMessage@msgFlags 000A                           ?_readRegister 00B6  
             __size_of__ECANPointBuffer 0076                                  _B0TXEN 006FC2  
                                _B1TXEN 006FC3                                  _B2TXEN 006FC4  
                doModeVerbose@preg_1195 0286                                  _B3TXEN 006FC5  
                                _B4TXEN 006FC6                                  _B5TXEN 006FC7  
           readRegisterExtended@timeout 00B9              ECANReceiveMessage@savedPtr 000B  
                                _CANCON 000F6F                        ___llmod@dividend 006D  
                                STR_100 7FF5                                  STR_101 7978  
                                STR_102 7FF5                                  STR_110 77F6  
                                STR_111 7E87                                  STR_103 799D  
                                STR_104 7FF5                                  STR_120 7EEE  
                                STR_112 7EBB                                  STR_200 7B64  
                                STR_121 7F8C                                  STR_113 7F86  
                                STR_105 7893                                  STR_201 76FB  
                                STR_130 7FF1                                  STR_106 7F9E  
                                STR_114 7EFE                                  STR_210 7CC1  
                                STR_122 7A6A                                  STR_202 76A1  
                                STR_123 7F80                                  STR_107 7FDD  
                                STR_131 7F42                                  STR_115 7B48  
                                STR_211 7A28                                  STR_203 751A  
                                STR_132 7F65                                  STR_116 7FC1  
                                STR_140 7EC4                                  STR_220 7D47  
                                STR_124 7B7F                                  STR_212 7845  
                                STR_108 7727                                  STR_204 757F  
                                STR_141 7F65                                  STR_133 7FEE  
                                STR_109 7F06                                  STR_125 7D5B  
                                STR_205 7B0C                                  STR_117 7ACD  
                                STR_213 77A6                                  STR_221 70EB  
                                STR_142 7FEE                                  STR_118 7F98  
                                STR_134 7EF6                                  STR_126 7ED6  
                                STR_150 7E92                                  STR_222 79E4  
                                STR_214 7672                                  STR_206 75B1  
                                STR_230 7177                                  STR_151 7FD5  
                                STR_135 7F6C                                  STR_143 7F3B  
                                STR_127 7EDE                                  STR_119 7BB5  
                                STR_231 7B9A                                  STR_207 76CF  
                                STR_223 7643                                  STR_215 7132  
                                STR_232 74AE                                  STR_144 7F65  
                                STR_136 7FEE                                  STR_128 7F7A  
                                STR_240 7E6D                                  STR_152 7E0A  
                                STR_160 7D1C                                  STR_208 7C01  
                                STR_224 7614                                  STR_216 71FD  
                                STR_241 74AE                                  STR_233 7177  
                                STR_161 7F73                                  STR_145 7FEE  
                                STR_129 7FF3                                  STR_153 7F73  
                                STR_137 7F34                                  STR_209 7333  
                                STR_225 71BA                                  STR_217 709E  
                                STR_138 7F65                                  STR_170 7FE1  
                                STR_162 7FE1                                  STR_154 7FE1  
                                STR_146 7F2D                                  STR_250 7E7B  
                                STR_234 7E4F                                  STR_242 7DBF  
                                STR_218 7C19                                  STR_226 75E3  
                                STR_171 74AE                                  STR_163 74AE  
                                STR_155 74AE                                  STR_147 7F65  
                                STR_139 7FEE                                  STR_243 7FFD  
                                STR_235 7EE6                                  STR_251 7EB1  
                                STR_227 73A2                                  STR_219 7050  
                                STR_180 7C91                                  STR_148 7FEE  
                                STR_236 7FF9                                  STR_244 7FF7  
                                STR_252 7EA7                                  STR_156 7E3E  
                                STR_164 7D32                                  STR_172 7CA9  
                                STR_228 7282                                  STR_245 74AE  
                                STR_149 7FF5                                  STR_165 7F73  
                                STR_157 7F73                                  STR_181 7F16  
                                STR_173 7F16                                  STR_237 7FE5  
                                STR_253 7CEF                                  STR_229 78E1  
                                _EEDATA 000FA8                                  STR_254 74AE  
                                STR_182 7FE1                                  STR_174 7FE1  
                                STR_166 7FE1                                  STR_158 7FE1  
                                STR_238 7FFB                                  STR_246 7E9D  
                                STR_190 72FA                                  STR_247 74AE  
                                STR_239 74AE                                  STR_183 74AE  
                                STR_175 74AE                                  STR_167 74AE  
                                STR_159 74AE                                  STR_255 7E1C  
                                STR_191 7C79                                  STR_192 7F65  
                                STR_248 7F26                                  STR_256 7E2D  
                                STR_168 7CD8                                  STR_176 7C91  
                                STR_184 7BE8                                  STR_185 7F65  
                                STR_177 7F16                                  STR_193 7FEE  
                                STR_249 7F1E                                  STR_169 7F16  
                                STR_194 74AE                                  STR_186 7FEE  
                                STR_178 7FE1                                  STR_187 74AE  
                                STR_179 74AE                                  STR_195 736B  
                                STR_196 7410                                  STR_188 72C0  
                                STR_197 74E6                                  STR_189 747C  
                                STR_198 786C                                  STR_199 7193  
                                _EECON2 000FA7            __end_of_readRegisterExtended 3BDA  
                                _CIOCON 000F73                                  ?_ultoa 0076  
          ??_sendVSCPDriverCommandReply 0070                    __end_of_fifo_getFree 45A6  
                                i1l1421 3542                           ?_init_app_ram 0001  
                                i1l1426 4BEC                                  i1l1380 26AA  
                                _MDSEL0 007BBE                                  i1l1453 35E6  
                                _MDSEL1 007BBF                                  i1l1454 366E  
                                i1l1390 2706                                  i1l1382 26BE  
                                i1l1374 280E                                  i1l1367 264E  
                                i1l1384 26D2                                  i1l1377 271C  
                                i1l1386 26E6                                  i1l1378 269C  
                                i1l1388 26F6                                  i1l1398 2780  
                                i1l1399 279A                                  i1l1760 546C  
                                i1l6101 364A                                  i1l6103 3654  
                                i1l6115 4564                                  i1l6091 35F0  
                                i1l6083 35B0                              _OpenTimer0 5440  
        __end_of_receivePrintEventCANAL 3344                                  i1l9313 27C8  
                                i1l9321 27E2                                  i1l9305 279C  
                                i1l9225 267C                                  i1l9209 263C  
                                i1l9233 268A                                  i1l9219 2666  
                                i1l9227 2686                                  i1l9327 27F8  
                                i1l9277 2730                                  i1l9287 2750  
                                i1l8951 4BA2                                  i1l8953 4BAC  
                                i1l8945 4B86                                  i1l8955 4BB6  
                                i1l8947 4B8E                                  i1l8963 4BCE  
                                i1l8957 4BBC                                  i1l8949 4B98  
                                i1l8959 4BC2                                  i1l8977 34DE  
                       _init_app_eeprom 4812                      __size_of_ReadUSART 001E  
                                _RXB0IF 007D20                                  _RXB1IF 007D21  
                                _SPBRGH 000FB0                  ECANReceiveMessage@data 0008  
        __end_of_receivePrintEventSLCAN 308A                  ECANReceiveMessage@mode 000F  
                ECANReceiveMessage@temp 0010                       getVSCPFrame@pData 007C  
            ??_sendVSCPDriverErrorFrame 006F                       getVSCPFrame@pSize 007A  
                    _doModeVerbose$1207 029E                      _doModeVerbose$1155 0294  
                    _doModeVerbose$1172 0298                      _doModeVerbose$1182 029C  
                    _doModeVerbose$1167 0296                      _doModeVerbose$1178 029A  
                 ?_ECANSetOperationMode 0001                      __CANIDToRegs@Value 0069  
                    __size_of_Interrupt 0212                readRegisterExtended@page 00B6  
                    __size_of_OpenUSART 005C                        fifo_write@nbytes 0002  
                        getCANFrame@pid 0071                                  ___wmul 533C  
                            _bInitiated 00F6                          __CFG_STVREN$ON 000000  
                             ??___lldiv 0068                               ??_calcCRC 006F  
                                _cmdbuf 0104                               ??___llmod 0075  
                      OpenTimer0@config 0060                               ??___lwdiv 0064  
                             ??___lwmod 0064           _receivePrintEventVerbose$1300 0099  
         _receivePrintEventVerbose$1310 009D           _receivePrintEventVerbose$1320 00A1  
         _receivePrintEventVerbose$1305 009B           _receivePrintEventVerbose$1315 009F  
         _receivePrintEventVerbose$1325 00A3                                  _memcpy 511A  
                                _memset 53CC                                  clear_0 4D40  
                                clear_1 4D54                                  clear_2 4D66  
                                clear_3 4D72                                  clear_4 4D7E  
                                clear_5 4D8A                           ?_sendCANFrame 008F  
                                _strcat 4EBA                                  _strchr 4D9A  
                                _strcpy 536E                                  _strlen 515C  
                                _wrkbuf 0154                                  _strtok 46F2  
                                _strspn 50D6                             Interrupt@id 0025  
   __size_of_sendVSCPDriverCommandReply 00C4                               ??_isdigit 0060  
                      __end_of_printMDF 46F2                            __mediumconst 6FD8  
                        ??_readRegister 00BA                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                          ?_printBinary 0001                 __size_of_nibbleFromChar 003E  
                                ultoa@c 0082                                  ultoa@v 007E  
                          ?_printErrors 0001                               ??_sprintf 007E  
                             ??_strichr 0065                               ??_strcspn 006A  
                             ??_toupper 0060                          ??_init_app_ram 0063  
                             ??_stristr 0071              doModeVerbose@mask_priority 0291  
                      __end_of_strnicmp 4D38                              __accesstop 0060  
               __end_of__initialization 4D90                    _printFirmwareVersion 4784  
                       writeEEPROM@data 0062                   __size_of_getVSCPFrame 0086  
                  doModeVerbose@id_1246 02A3                              _WriteUSART 54AC  
                        __pcstackCOMRAM 0001                __size_of_printStatistics 01A8  
                  _printStatistics$1401 009A                    _printStatistics$1383 0094  
                  _printStatistics$1395 0098                    _printStatistics$1389 0096  
                 _uart_transmitOverruns 0029                         ??i1_WriteTimer0 0003  
                         __end_of_ultoa 3DA0                              __end_ofPL2 1494  
                            __end_ofPL4 14A4                              __end_ofPL6 14B2  
                            __end_ofPL8 14D0                          ??_sendCANFrame 0096  
                     __end_of_ReadUSART 547C                           ?__RegsToCANID 0001  
           __size_of_ECANReceiveMessage 01FA                      sendVSCPFrame@pData 009C  
                       readRegister@reg 00B6                    sendVSCPDriverAck@crc 006F  
                    __size_of_findNodes 00F4                          doModeSLCAN@dlc 00A1  
                    __size_of_fifo_init 0030                      __size_of_fifo_read 00A2  
                getVSCPFrame@pvscpclass 0072                 __end_of_init_app_eeprom 489C  
                     __end_of_Interrupt 022A                           ReadUSART@data 0001  
                    readRegister@nodeid 00BE                          _status_led_cnt 002F  
                    __RegsToCANID@Value 0007                              _crc8_table 0300  
                     __end_of_OpenUSART 4EBA                 doModeVerbose@mask_class 028A  
             printNodeFirmwareVersion@i 00C4                         setFilter@filter 006A  
                          sprintf@width 008B        __end_of_printNodeFirmwareVersion 4032  
                            _doModeVscp 2BBC                                 ??_ultoa 007E  
                          _getVSCPFrame 489C                              __pbssBANK0 00D1  
                            __pbssBANK1 0100                              __pbssBANK2 0200  
                            __pbssBANK3 0300                             ?_OpenTimer0 0001  
                            calcCRC@crc 0070                              calcCRC@len 006E  
                            __pnvCOMRAM 0046                   ?_printFirmwareVersion 0001  
                ??_ECANSetOperationMode 0060                      __size_of_init_crc8 006A  
                         setFilter@eidh 006D                           setFilter@eidl 006E  
                         setFilter@sidh 006B                           setFilter@sidl 006C  
                          ?_writeEEPROM 0060                        ??_doModeVscpNode 0060  
                            _nTimeStamp 00F9                __end_of_hexStringToBytes 465C  
              ECANSetOperationMode@mode 0060                                 ?___wmul 0060  
                    __size_of_setFilter 01DE                                 _B0RXFUL 007107  
                               _B1RXFUL 007187                    __ECANRxFilterHitInfo 0034  
                               _B2RXFUL 007207                                 _B3RXFUL 007287  
                               _B4RXFUL 007307                      _sendVSCPDriverNack 4342  
                               _B5RXFUL 007387                        WriteTimer0@timer 0062  
                         putsUSART@data 0061                    _readRegisterExtended 3ADE  
                               ?_memcpy 0060                                 _ECANCON 000F77  
                               ?_memset 0060                           ??_WriteTimer0 0062  
                        ??__RegsToCANID 0005                   sendVSCPFrame@priority 009A  
                               _BRGCON1 000F70                                 _BRGCON2 000F71  
                               _BRGCON3 000F72                                 ?_strcat 0060  
                               ?_strchr 0060                                 ?_strcpy 0060  
                               ?_strlen 0060                                 ?_strtok 006C  
                               ?_strspn 0066                              _cntRxBytes 00D9  
                            _cntTxBytes 00E1                      __size_of_printGUID 00F0  
                               i1l12501 0124                                 i1l12511 0154  
                   ?_sendVSCPDriverNack 0001                                 i1l12521 01A4  
                               i1l12513 015E                                 i1l12505 0136  
                               i1l12523 01AC                                 i1l12515 016E  
                               i1l12507 0142                                 i1l12525 01C2  
                               i1l12517 0180                                 i1l12519 019C  
                               i1l12527 020A                                 i1l12471 007A  
                               i1l12463 0034                                 i1l12481 00B8  
                               i1l12473 0086                                 i1l12465 003C  
                               i1l12483 00C4                                 i1l12475 0092  
                               i1l12467 0042                                 i1l12493 00FA  
                               i1l12485 00D4                                 i1l12477 00A4  
                               i1l12469 0068                                 i1l12495 0106  
                               i1l12487 00DC                                 i1l12479 00B4  
                               i1l12489 00E8                                 i1l12499 0118  
                            _fifo_write 359E                      __size_of_printHelp 01C0  
                    __size_of_printMode 0076                   sendVSCPFrame@vscptype 0098  
                 __size_of_fifo_getFree 0084                 doModeVerbose@value_1190 02A9  
                     sendCANFrame@pdata 0094                              _made_table 002D  
                               _RXB0CON 000F60                                 _RXB1CON 000F50  
                               _RXB0FUL 007B07                        __ECANPointBuffer 4B80  
                               _TXB0CON 000F40                                 _TXB1CON 000F30  
                               _TXB2CON 000F20                      __size_of_putsUSART 0058  
    __end_of_sendVSCPDriverCommandReply 3F54              _sendVSCPDriverCommandReply 3E90  
                               _RXFCON0 000DD4                                 _RXFCON1 000DD5  
                 _writeRegisterExtended 37CE        __size_of_receiveVSCPModeCanalMsg 00DC  
                __size_of_doModeVerbose 1252                    sendEscapedUartData@c 006E  
                __size_of_sendVSCPFrame 00B6        __end_of_sendVSCPDriverErrorFrame 427E  
                            _readEEPROM 54D2                    ??_sendVSCPDriverNack 006F  
            printFirmwareVersion@wrkbuf 0078                         _ECANSendMessage 3098  
                               __Hparam 0000                       __end_of_findNodes 3CCE  
                               __Lparam 0000                       __end_of_fifo_init 51CC  
                     __end_of_fifo_read 41A2                           ??_getCANFrame 0071  
                           ?_WriteUSART 0001              receiveVSCPModeCanalMsg@dlc 00B6  
                  __end_of_readRegister 4100                               ?_printMDF 0001  
                               _bSilent 0101               receiveVSCPModeCanalMsg@id 00B2  
                         ??_doModeSLCAN 0096                                 ___lldiv 4A94  
                       __size_of___wmul 0022                                 _calcCRC 539E  
                       getCANFrame@pdlc 006D                                 ___llmod 4DFC  
                               ___lwdiv 5002                               _FIFOEMPTY 007BA7  
                               ___lwmod 5258                   ?_readRegisterExtended 00B6  
           printNodeFirmwareVersion@buf 00C0                    __end_of_init_app_ram 4FB8  
                          _fifo_getFree 4522                            init_crc8@crc 0064  
                               __pcinit 4D38                         __size_of_memcpy 0042  
                       __size_of_memset 002E                                 __ramtop 0600  
                   __size_of_OpenTimer0 001E                               ?_strnicmp 0064  
                               __ptext0 3344                                 __ptext1 54FE  
                               __ptext2 1D10                                 __ptext3 45C2  
                               __ptext4 51DC                                 __ptext5 2F10  
                               __ptext6 3CCE                                 __ptext7 2BBC  
                               __ptext8 3E90                                 __ptext9 5500  
                               crc8@crc 0067           printNodeFirmwareVersion@value 00C3  
                     ??_printStatistics 0094                               _T0CONbits 000FD5  
                       __size_of_strcat 0058                         __size_of_strchr 0062  
                       __size_of_strcpy 0030                         __size_of_strlen 0040  
                     __end_of_hexpowers 7050                         __size_of_strtok 0092  
                       __size_of_strspn 0044                                 _dpowers 7008  
                     __end_of_init_crc8 4CD2                                 _isdigit 5420  
        printNodeFirmwareVersion@nodeid 00BF                     __end_of_WriteTimer0 54D2  
                        _nibbleFromChar 51DC                        ?_init_app_eeprom 0001  
                               _sprintf 15D0                       __end_of_setFilter 29FC  
                               _strichr 521A                          doModeVerbose@c 02AC  
                        doModeVerbose@i 02AA                          doModeVerbose@p 02B7  
                               _strcspn 5092                                 _toupper 5496  
                           ?_doModeVscp 0001                                 _stristr 4A1C  
                  __size_of_printBinary 004A                    end_of_initialization 4D90  
                          Interrupt@dlc 0023                       __end_of_octpowers 7008  
                  __size_of_printErrors 02D6                                 memcpy@d 0066  
                               memcpy@n 0064                                 memcpy@s 0068  
                ??_printFirmwareVersion 0078                                 itoa@buf 0070  
                             i1u1051_25 34A6                               i1u1052_25 34B6  
                               memset@c 0062                               i1u1053_25 34E2  
                               itoa@val 0072                                 memset@n 0064  
                               memset@p 0066                           __Lmediumconst 6FD8  
                             i1u1091_25 2644                               i1u1091_27 2646  
                  __end_of_sendCANFrame 52CE                               i1u1630_20 00C4  
                             i1u1630_21 00C2                               i1u1631_20 00D4  
                             i1u1631_21 00D2                               i1u1640_20 015E  
                             i1u1632_20 00E8                               i1u1640_21 015C  
                             i1u1632_21 00E6                               i1u1641_20 016E  
                             i1u1633_20 00F8                               i1u1641_21 016C  
                             i1u1633_21 00F6                               i1u1642_20 0180  
                             i1u1634_20 0106                               i1u1642_21 017E  
                             i1u1634_21 0104                               i1u1643_20 019C  
                             i1u1635_20 0116                               i1u1627_20 003C  
                             i1u1643_21 019A                               i1u1635_21 0114  
                             i1u1627_21 003A                               i1u1644_20 01A4  
                             i1u1636_20 0124                               i1u1628_20 0068  
                             i1u1644_21 01A2                               i1u1636_21 0122  
                             i1u1628_21 0066                               i1u1645_20 01AC  
                             i1u1637_20 0134                               i1u1629_20 0086  
                             i1u1645_21 01AA                               i1u1637_21 0132  
                             i1u1629_21 0084                               i1u1646_20 01C2  
                             i1u1638_20 0142                               i1u1646_21 01C0  
                             i1u1638_21 0140                               i1u1639_20 0152  
                             i1u1639_21 0150                     _can_receiveOverruns 00D1  
                     __end_of_printGUID 3ACA                         ___lldiv@divisor 0064  
                     __end_of_printHelp 2BBC                         ___lldiv@counter 006C  
                     __end_of_printMode 4B80                       ECANSendMessage@id 006A  
                     ECANSendMessage@pb 0073            __size_of_sendEscapedUartData 0078  
                             _RXF10EIDH 000D76                               _RXF10EIDL 000D77  
                             _RXF11EIDH 000D7A                               _RXF11EIDL 000D7B  
                            ??_printMDF 00BF                               _RXF12EIDH 000D82  
                             _RCSTAbits 000FAB                               _RXF12EIDL 000D83  
                             _RXF13EIDH 000D86                               _RXF13EIDL 000D87  
                             _RXF14EIDH 000D8A                               _RXF14EIDL 000D8B  
                             _RXF15EIDH 000D92                               _RXF15EIDL 000D93  
                             _RXF10SIDH 000D74                               _RXF10SIDL 000D75  
                             _RXF11SIDH 000D78                               _RXF11SIDL 000D79  
                             _RXF12SIDH 000D80                               _RXF12SIDL 000D81  
                               postdec1 000FE5                                 postdec2 000FDD  
                             _RXF13SIDH 000D84                               _RXF13SIDL 000D85  
                             _RXF14SIDH 000D88                               _RXF14SIDL 000D89  
               __size_of_ECANInitialize 0082                               _RXF15SIDH 000D90  
                             _RXF15SIDL 000D91                                 postinc0 000FEE  
                               postinc1 000FE6                                 postinc2 000FDE  
                     __end_of_putsUSART 4F6A                      __ECANPointBuffer@b 0004  
                         _doModeVerbose 022E                                 utoa@buf 0067  
     __size_of_printNodeFirmwareVersion 00D0                                 utoa@val 0069  
             ?_printNodeFirmwareVersion 0001                           _sendVSCPFrame 428C  
                               strlen@s 0060                              _sequencyno 00FA  
                            _timekeeper 00E9                               _RXM0EXIDM 0078CB  
                               strspn@i 006A                              ??_strnicmp 006A  
                   __end_of_getCANFrame 4C68                              findNodes@i 00C9  
                __end_of_nibbleFromChar 521A                     __end_of_doModeSLCAN 2072  
                           ?_fifo_write 0001                              fifo_init@f 0064  
         __size_of_vscp_restoreDefaults 0008                              fifo_read@f 006C  
                            fifo_read@i 006A                              fifo_read@p 0068  
                             _TRISBbits 000F93                               _TRISCbits 000F94  
                ?_writeRegisterExtended 00B6       sendVSCPDriverCommandReply@cmdCode 006F  
                   __size_of_WriteUSART 0014                       readEEPROM@address 0060  
               __end_of_ECANSendMessage 3206                    _uart_receiveOverruns 00F1  
              _receivePrintEventVerbose 2354                              _vscpNodeId 01AE  
                         ?__CANIDToRegs 0060                    __end_of__RegsToCANID 3544  
                           ?_readEEPROM 0060                               _TXSTAbits 000FAC  
                    i1WriteTimer0@timer 0003                       doModeVerbose@page 02AD  
                     doModeVerbose@preg 0284                          _init_crc8$2099 0060  
                ??_readRegisterExtended 00BD                          ?_doModeVerbose 0001  
                        ?_sendVSCPFrame 0096                    __size_of_writeEEPROM 0026  
                        __end_of___wmul 535E                     __size_of_doModeVscp 019C  
                           _WriteTimer0 54C0                          __end_of_memcpy 515C  
                        __end_of_memset 53FA       __size_of_sendVSCPDriverErrorFrame 00B0  
             ?_sendVSCPDriverErrorFrame 0001                         ?_nibbleFromChar 0001  
                        __end_of_strcat 4F12                          __end_of_strchr 4DFC  
                        __end_of_strcpy 539E                          __end_of_strlen 519C  
              doModeVerbose@filter_type 028F                          __end_of_strtok 4784  
                        __end_of_strspn 511A                             __end_ofPL10 151A  
                           __end_ofPL20 1C70                             __end_ofPL12 1536  
                           __end_ofPL30 155A                             __end_ofPL22 39DA  
                           __end_ofPL14 1C60                             __end_ofPL40 36AA  
                           __end_ofPL32 41C0                             __end_ofPL24 1C96  
                           __end_ofPL16 369C                             __end_ofPL50 43E2  
                           __end_ofPL42 1CB0                             __end_ofPL34 156C  
                           __end_ofPL26 1546                             __end_ofPL18 2D68  
                           __end_ofPL60 1CDC                             __end_ofPL52 1CC6  
                           __end_ofPL44 15A2                             __end_ofPL36 3552  
                           __end_ofPL28 378E                             __end_ofPL70 37C4  
                           __end_ofPL62 1CEA                             __end_ofPL54 15BA  
                           __end_ofPL46 4482                             __end_ofPL38 1588  
                           __end_ofPL80 359E                             __end_ofPL72 3566  
                           __end_ofPL64 4812                             __end_ofPL56 37B0  
                           __end_ofPL48 379E                             __end_ofPL90 1D06  
                           __end_ofPL82 1CFC                             __end_ofPL74 3578  
                           __end_ofPL66 45B4                             __end_ofPL58 15D0  
                           __end_ofPL92 536E                             __end_ofPL84 207E  
                           __end_ofPL76 358C                             __end_ofPL68 3ADE  
                           __end_ofPL94 36BA                             __end_ofPL86 3098  
                           __end_ofPL78 3DB4                             __end_ofPL96 51DC  
                           __end_ofPL88 3F62                             __end_ofPL98 428C  
                   start_initialization 4D38                               _ReadUSART 545E  
                       findNodes@nFound 00C7                   doModeVerbose@reg_1189 02A2  
                 doModeVerbose@filterno 02A7                 _receiveVSCPModeCanalMsg 3DB4  
                   __CFG_BOREN$BOACTIVE 000000                            doModeSLCAN@c 00A2  
                          ??_OpenTimer0 0060  sendVSCPDriverCommandReply@cmdReplyCode 0070  
                             _Interrupt 0018                          ??__CANIDToRegs 0067  
            readRegisterExtended@nodeid 00C1                               _OpenUSART 4E5E  
                   sendVSCPFrame@nodeid 0099                         ___llmod@divisor 0071  
                 __size_of_readRegister 00CE                         ___llmod@counter 0075  
                 ECANReceiveMessage@ptr 0011                     __size_of_fifo_write 00D2  
                 __size_of_init_app_ram 004E                          _findNodes$1485 00C5  
              __end_of__ECANPointBuffer 4BF6                       __CANIDToRegs@type 0066  
                            init_crc8@i 0065                              init_crc8@j 0062  
                           _getCANFrame 4BF6                                ??___wmul 0064  
                     ?_hexStringToBytes 0064                             _doModeSLCAN 1D10  
            __end_of_ECANReceiveMessage 2810                                ??_memcpy 0066  
                   readRegister@timeout 00B7                                ??_memset 0066  
                 sendVSCPDriverNack@crc 006F                doModeVerbose@mask_nodeid 0293  
                 __end_ofi1_WriteTimer0 54F6                      ??_hexStringToBytes 0069  
                              ??_strcat 0064                                ??_strchr 0064  
                              ??_strcpy 0064                                ??_strlen 0062  
                    __end_of_OpenTimer0 545E                                ??_strtok 0070  
                              ??_strspn 006A                     __size_of_readEEPROM 0012  
                           __pbssBIGRAM 0400                             __pbssCOMRAM 0029  
                            ?_ReadUSART 0001                ??_receivePrintEventCANAL 0072  
                         __pcstackBANK0 0060                           __pcstackBANK1 01B2  
                         __pcstackBANK2 0280                     __end_of__stringdata 7FFF  
              ??_receivePrintEventSLCAN 0083                            _readRegister 4032  
                          _isdigit$2912 0061                   __size_of_sendCANFrame 0038  
           ?_sendVSCPDriverCommandReply 006F             sendVSCPDriverErrorFrame@crc 0070  
                      ?_ECANSendMessage 006A                       sendVSCPFrame@size 009B  
                          _init_app_ram 4F6A                              ?_Interrupt 0001  
                            ?_OpenUSART 0060                             sprintf@_val 008D  
                           sprintf@flag 0092                             sprintf@prec 0089  
                      _ledFunctionality 0035                doModeVerbose@nodeid_1202 02AF  
              doModeVerbose@nodeid_1187 028D                            setFilter@val 0060  
                      ___lwdiv@dividend 0060                         ??_doModeVerbose 01B2  
         __size_of_ECANSetOperationMode 001A                         _printStatistics 2D68  
                          ??_WriteUSART 0060                         ??_sendVSCPFrame 009E  
                        _ECANInitialize 4922                       _sendVSCPDriverAck 43E2  
                         __pmediumconst 6FD8               receivePrintEventCANAL@dlc 007F  
             receivePrintEventCANAL@crc 0080                                ?___lldiv 0060  
                              ?_calcCRC 006C                                ?___llmod 006D  
                             _findNodes 3BDA                                ?___lwdiv 0060  
                              ?___lwmod 0060                               _fifo_init 519C  
                             _fifo_read 4100                      ?_sendVSCPDriverAck 0001  
                     __size_of_printMDF 0096                             __pintcodelo 0018  
                          _sendCANFrame 5296                       WriteTimer0@timer0 0060  
                           _COMSTATbits 000F74                                ?_isdigit 0001  
             ??_receiveVSCPModeCanalMsg 0096                     ??_sendVSCPDriverAck 006F  
                     __size_of_strnicmp 0066                         printGUID@nodeid 00BF  
                   _sendEscapedUartData 49A4                               _hexpowers 7030  
                      ___lwdiv@quotient 0065                               _init_crc8 4C68  
                 __size_of__RegsToCANID 00C4               doModeVerbose@filter_class 0288  
                              ?_sprintf 0076                                ?_strichr 0061  
                           _cntRxFrames 00DD                            ??_doModeVscp 00B7  
                              ?_strcspn 0066                                ?_toupper 0001  
                              ?_stristr 006D                      __end_of_WriteUSART 54C0  
                        __size_of_ultoa 00D2                             _cntTxFrames 00E5  
                        ___wmul@product 0064                  sendVSCPFrame@vscpclass 0096  
                             _setFilter 281E                             strnicmp@len 0068  
                             _octpowers 6FD8                                _PIE1bits 000F9D  
           __size_of_sendVSCPDriverNack 0092                  __end_of_ECANInitialize 49A4  
             __end_of_sendVSCPDriverAck 4474                                i1u593_25 4542  
                              _PIR1bits 000F9E                                _PIR2bits 000FA1  
                              i1u588_25 35C0                                i1u589_25 35D2  
                              _PIR3bits 000FA4                        ECANSendMessage@i 008C  
                      ECANSendMessage@j 0087                    ?_sendEscapedUartData 006C  
                              _RXF0EIDH 000F02                                _RXF0EIDL 000F03  
                              _RXB0OVFL 007BA7                                _RXF1EIDH 000F06  
                              _RXF1EIDL 000F07                                _RXB1OVFL 007BA6  
                              _RXF2EIDH 000F0A                                _RXF2EIDL 000F0B  
                              _RXF3EIDH 000F0E                                _RXF3EIDL 000F0F  
                              _RXF4EIDH 000F12                                _RXF4EIDL 000F13  
                              _RXF5EIDH 000F16                                _RXF5EIDL 000F17  
                              _RXF6EIDH 000D62                                _RXF6EIDL 000D63  
                     hexStringToBytes@i 0070                                _RXF7EIDH 000D66  
                              _RXF0SIDH 000F00                       hexStringToBytes@p 006E  
                              _RXF7EIDL 000D67                                _RXF0SIDL 000F01  
                             _printGUID 39DA                                _RXF8EIDH 000D6A  
                              _RXF1SIDH 000F04                                _RXF8EIDL 000D6B  
                              _RXF1SIDL 000F05                                _RXF9EIDH 000D72  
                              _RXF2SIDH 000F08                                _RXF9EIDL 000D73  
                              _RXF2SIDL 000F09                                _RXF3SIDH 000F0C  
                              _RXF3SIDL 000F0D                              printGUID@i 00C4  
                              _RXF4SIDH 000F10                                _RXF4SIDL 000F11  
                              _RXF5SIDH 000F14                                _RXF5SIDL 000F15  
                              _RXF6SIDH 000D60                                _RXF6SIDL 000D61  
                              _RXM0EIDH 000F1A                                _RXF7SIDH 000D64  
                              _RXM0EIDL 000F1B                                _RXF7SIDL 000D65  
                              _RXM1EIDH 000F1E                                _RXF8SIDH 000D68  
                              _RXM1EIDL 000F1F                                _RXF8SIDL 000D69  
                              _RXF9SIDH 000D70                                _RXF9SIDL 000D71  
                              _RXFBCON0 000DE0                                _RXFBCON1 000DE1  
                              _RXFBCON2 000DE2                                _RXFBCON3 000DE3  
                              _RXFBCON4 000DE4                                _RXFBCON5 000DE5  
                              _RXFBCON6 000DE6                                _RXFBCON7 000DE7  
                            ?_findNodes 0001                               _printHelp 29FC  
                              _RXM0SIDH 000F18                                _RXM0SIDL 000F19  
                              _RXM1SIDH 000F1C                                _RXM1SIDL 000F1D  
                             _printMode 4B0A                              ?_fifo_init 0060  
                            ?_fifo_read 0060                                _RXERRCNT 000F75  
                    __end_of_doModeVscp 2D58                                _TXERRCNT 000F76  
                  __end_of__CANIDToRegs 377A                               _putsUSART 4F12  
                           __stringdata 7050                       ___wmul@multiplier 0060  
             receivePrintEventSLCAN@dlc 008A                            __RegsToCANID 3480  
                             _vscpClass 01AC                 ??_writeRegisterExtended 00BD  
                          ??_fifo_write 0006                 __size_of_doModeVscpNode 0002  
            ??_receivePrintEventVerbose 0094                             ??_ReadUSART 0001  
                   getVSCPFrame@pNodeId 0076                           ??_printBinary 0061  
       __size_of_receivePrintEventCANAL 013E                        doModeVerbose@reg 02AE  
                         ??_printErrors 0094                              ?_init_crc8 0001  
       __size_of_receivePrintEventSLCAN 017A                               _rwtimeout 0103  
             writeRegisterExtended@page 00B6                          Interrupt@flags 0024  
  __end_of_receiveVSCPModeMultiCanalMsg 5502   __size_of_receiveVSCPModeMultiCanalMsg 0002  
          _receiveVSCPModeMultiCanalMsg 5500                             ??_Interrupt 0013  
               __end_of_printStatistics 2F10                             ??_OpenUSART 0062  
          writeRegisterExtended@timeout 00B9                            ??_readEEPROM 0062  
              __size_of_init_app_eeprom 008A                              ?_setFilter 0060  
                       OpenUSART@config 0062                          findNodes@value 00C8  
          __end_of_vscp_restoreDefaults 54FE                              _EECON1bits 000FA6  
         __size_of_printFirmwareVersion 0080         __end_of_receiveVSCPModeCanalMsg 3E90  
                       ?_ECANInitialize 0001                                __Hrparam 0000  
                  ECANReceiveMessage@id 000D                   ??_sendEscapedUartData 006E  
                              __Lrparam 0000                        __CANIDToRegs@val 0062  
                    __end_of_fifo_write 3670                        __CANIDToRegs@ptr 0060  
           receiveVSCPModeCanalMsg@data 00AA                              ?_printGUID 0001  
                           doModeVscp@c 00B7                              ?_printHelp 0001  
                            ?_printMode 0001                         nibbleFromChar@c 0060  
                      ??_nibbleFromChar 0060                        __size_of___lldiv 0076  
                      __size_of_calcCRC 002E                        __size_of___llmod 0062  
                      __size_of___lwdiv 004A                        __size_of___lwmod 003E  
                          ?_WriteTimer0 0060                        getCANFrame@pdata 006F  
                            ?_putsUSART 0061                         fifo_read@nbytes 0062  
                            sprintf@idx 0081                      __end_of_readEEPROM 54E4  
                 hexStringToBytes@inhex 0067                                calcCRC@j 006F  
                              calcCRC@p 006C                              strcat@from 0062  
                      __size_of_isdigit 0020                         ___lwdiv@divisor 0062  
                       ___lwdiv@counter 0064                                __ptext10 4342  
                              __ptext11 3DB4                                __ptext20 022E  
                              __ptext12 511A                                __ptext21 281E  
                              __ptext13 43E2                                __ptext30 4EBA  
                              __ptext22 37CE                                __ptext14 41CE  
                              __ptext31 4032                                __ptext23 4FB8  
                              __ptext15 539E                                __ptext40 38D4  
                              __ptext32 428C                                __ptext24 3ADE  
                              __ptext16 3206                                __ptext41 46F2  
                              __ptext33 5296                                __ptext25 536E  
                              __ptext17 49A4                                __ptext50 2354  
                              __ptext42 5092                                __ptext34 3098  
                              __ptext26 3BDA                                __ptext18 5306  
                              __ptext51 489C                                __ptext43 50D6  
                              __ptext35 36BA                                __ptext27 465C  
                              __ptext19 4C68                                __ptext60 52CE  
                              __ptext52 4BF6                                __ptext44 4D9A  
                              __ptext36 53CC                                __ptext28 39DA  
                              __ptext61 4482                                __ptext53 4100  
                              __ptext45 4A1C                                __ptext37 29FC  
                              __ptext29 3F62                                __ptext70 5440  
                              __ptext62 5258                                __ptext54 15D0  
                              __ptext46 521A                                __ptext38 207E  
                              __ptext71 4E5E                                __ptext63 5002  
                              __ptext55 533C                                __ptext47 4CD2  
                              __ptext39 2D68                                __ptext80 54E4  
                              __ptext72 54C0                                __ptext64 4B0A  
                              __ptext56 4DFC                                __ptext48 5496  
                              __ptext81 4522                                __ptext73 54F6  
                              __ptext65 4F12                                __ptext57 4A94  
                              __ptext49 515C                                __ptext82 2616  
                              __ptext74 4812                                __ptext66 54AC  
                              __ptext58 5420                                __ptext83 3480  
                              __ptext75 53FA                                __ptext67 504C  
                              __ptext59 4784                                __ptext84 4B80  
                              __ptext76 4F6A                                __ptext68 4922  
                              __ptext85 359E                                __ptext77 54D2  
                              __ptext69 547C                                __ptext86 545E  
                              __ptext78 519C                          printMDF@nodeid 00BF  
                         ?_getVSCPFrame 0072                              strichr@chr 0063  
                      __size_of_sprintf 0672                              strichr@ptr 0061  
                      __size_of_strichr 003E                        __size_of_strcspn 0044  
                      __size_of_toupper 0016                        __size_of_stristr 0078  
                            strcpy@from 0062                          printGUID@value 00C3  
                   __end_of_printBinary 5002                           __size_of_crc8 0036  
                         __size_of_atoi 00F8                           __size_of_main 013C  
                         __size_of_init 0046                           __size_of_itoa 0038  
         ?_receiveVSCPModeMultiCanalMsg 0001                     __end_of_printErrors 2354  
                         __size_of_utoa 00A0                              strnicmp@s1 0064  
                            strnicmp@s2 0066                             _inputBuffer 0200  
            __size_of_sendVSCPDriverAck 0092                  _receivePrintEventCANAL 3206  
                         ??_writeEEPROM 0063                _printNodeFirmwareVersion 3F62  
                   ECANSendMessage@data 006E                ECANSendMessage@tempBSEL0 0088  
                              _printMDF 465C                               printMDF@i 00C3  
                _receivePrintEventSLCAN 2F10                               printMDF@p 00C1  
                          ?_getCANFrame 006D                     ECANSendMessage@mode 0085  
                   ECANSendMessage@temp 008B                       ?__ECANPointBuffer 0001  
                              atoi@sign 006A                             ??_findNodes 00C5  
                          ?_doModeSLCAN 0001                             ??_fifo_init 0064  
                           ??_fifo_read 0064                                _vscpData 01A4  
         __size_of_readRegisterExtended 00FC                                main@argc 00CA  
                              main@argv 00CC                                _vscpSize 01B0  
                    ??__ECANPointBuffer 0004                                _vscpType 01B1  
                           _RXB0FILHIT0 007B00       sendVSCPDriverErrorFrame@errorcode 006F  
                       doModeVerbose@id 0280                         doModeVerbose@rv 02A0  
                              _strnicmp 4CD2                        init_app_eeprom@i 0063  
           writeRegisterExtended@nodeid 00C1                           Interrupt@data 001A  
                       _serialInputFifo 003E                             _RXB1CONbits 000F50  
                           _OSCTUNEbits 000F9B                              _INTCONbits 000FF2  
                        OpenUSART@spbrg 0060                     ECANReceiveMessage@i 000E  
                              memcpy@d1 0060                                memcpy@s1 0062  
             receivePrintEventVerbose@i 00A5                                itoa@base 0074  
                              isdigit@c 0062                      _ECANReceiveMessage 2616  
                              memset@p1 0060                             ??_init_crc8 0060  
                             ultoa@base 007C                          ??_getVSCPFrame 007E  
             __size_of_hexStringToBytes 009A                         sendVSCPFrame@id 00B2  
                              intlevel1 0000                               sprintf@ap 0088  
                             sprintf@sp 0076                    hexStringToBytes@size 0066  
                             strchr@chr 0062                        ?_printStatistics 0001  
                      ___lwmod@dividend 0060                               strchr@ptr 0060  
                   ?_ECANReceiveMessage 0008                        ___lldiv@dividend 0060  
                           ??_setFilter 0064                           printMDF@value 00C0  
                         fifo_getFree@f 000B                               strcspn@s1 0066  
                             strcspn@s2 0068                 ECANSendMessage@msgFlags 0071  
                            _OSCCONbits 000FD3                               strnicmp@r 006C  
                             stristr@s1 006D                               stristr@s2 006F  
                    ECANSendMessage@ptr 008D                       ??_init_app_eeprom 0063  
            receivePrintEventCANAL@data 0072                   __size_of__CANIDToRegs 00C0  
                           ??_printGUID 00BF                          readEEPROM@data 0062  
                           ??_printHelp 0065                             ??_printMode 0065  
              _sendVSCPDriverErrorFrame 41CE                           ?_fifo_getFree 0001  
                ECANSendMessage@dataLen 0070                     __end_of_writeEEPROM 5420  
                   __ECANPointBuffer@pt 0005                    ??_ECANReceiveMessage 000B  
                           ??_putsUSART 0063                                utoa@base 006B  
                              ultoa@buf 0076                                ultoa@val 0078  
                         fifo_init@size 0062                                sprintf@c 0091  
                              sprintf@f 0078                     hexStringToBytes@buf 0064  
                              strcat@cp 0064                     hexStringToBytes@len 006C  
                        _doModeVscpNode 54FE                                strcat@to 0060  
      __end_of_receivePrintEventVerbose 2616                  ECANSendMessage@buffers 0086  
                      ___lldiv@quotient 0068                         ___lwmod@divisor 0062  
          __end_of_ECANSetOperationMode 5496                    _vscp_restoreDefaults 54F6  
                          printGUID@buf 00C0                                strcpy@cp 0064  
                              strlen@cp 0062                                strcpy@to 0060  
                       ___lwmod@counter 0064                                strcspn@i 006A  
                              toupper@c 0060                             _printBinary 4FB8  
                              strtok@s1 006C                                strtok@s2 006E  
                              strspn@s1 0066                                strspn@s2 0068  
                            _RXM1EXIDEN 0078EB                                strtok@sp 0031  
                ECANSendMessage@tempPtr 0089                             _printErrors 207E  
                          fifo_init@buf 0060                            fifo_read@buf 0060  
         sendVSCPDriverCommandReply@crc 0071                            __CANIDToRegs 36BA  
                __size_ofi1_WriteTimer0 0012                            _USART_Status 0033  
             readRegisterExtended@value 00BB                __size_of_ECANSendMessage 016E  
