

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Tue Oct 06 17:16:33 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    13                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1
   102                           	psect	text86,global,reloc=2,class=CODE,delta=1
   103                           	psect	text87,global,reloc=2,class=CODE,delta=1
   104                           	psect	text88,global,reloc=2,class=CODE,delta=1
   105                           	psect	text89,global,reloc=2,class=CODE,delta=1
   106                           	psect	text90,global,reloc=2,class=CODE,delta=1
   107                           	psect	text91,global,reloc=2,class=CODE,delta=1
   108                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   109                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   110                           	psect	pa_nodes,global,class=CODE,delta=1
   111  0000                     tblptru	equ	0xFF8
   112                           tblptrh	equ	0xFF7
   113                           tblptrl	equ	0xFF6
   114                           tablat	equ	0xFF5
   115                           prodh	equ	0xFF4
   116                           prodl	equ	0xFF3
   117                           intcon	equ	0xFF2
   118                           indf0	equ	0xFEF
   119                           fsr0h	equ	0xFEA
   120                           fsr0l	equ	0xFE9
   121                           wreg	equ	0xFE8
   122                           indf1	equ	0xFE7
   123                           postinc1	equ	0xFE6
   124                           postdec1	equ	0xFE5
   125                           fsr1h	equ	0xFE2
   126                           fsr1l	equ	0xFE1
   127                           indf2	equ	0xFDF
   128                           postinc2	equ	0xFDE
   129                           postdec2	equ	0xFDD
   130                           plusw2	equ	0xFDB
   131                           fsr2h	equ	0xFDA
   132                           fsr2l	equ	0xFD9
   133                           status	equ	0xFD8
   134                           
   135                           	psect	mediumconst
   136  006F54                     __pmediumconst:
   137                           	opt stack 0
   138  006F54                     _octpowers:
   139                           	opt stack 0
   140  006F54  0001               	dw	1
   141  006F56  0000               	dw	0
   142  006F58  0008               	dw	8
   143  006F5A  0000               	dw	0
   144  006F5C  0040               	dw	64
   145  006F5E  0000               	dw	0
   146  006F60  0200               	dw	512
   147  006F62  0000               	dw	0
   148  006F64  1000               	dw	4096
   149  006F66  0000               	dw	0
   150  006F68  8000               	dw	32768
   151  006F6A  0000               	dw	0
   152  006F6C  0000               	dw	0
   153  006F6E  0004               	dw	4
   154  006F70  0000               	dw	0
   155  006F72  0020               	dw	32
   156  006F74  0000               	dw	0
   157  006F76  0100               	dw	256
   158  006F78  0000               	dw	0
   159  006F7A  0800               	dw	2048
   160  006F7C  0000               	dw	0
   161  006F7E  4000               	dw	16384
   162  006F80  0000               	dw	0
   163  006F82  0000               	dw	0
   164  006F84                     __end_of_octpowers:
   165                           	opt stack 0
   166  006F84                     _dpowers:
   167                           	opt stack 0
   168  006F84  0001               	dw	1
   169  006F86  0000               	dw	0
   170  006F88  000A               	dw	10
   171  006F8A  0000               	dw	0
   172  006F8C  0064               	dw	100
   173  006F8E  0000               	dw	0
   174  006F90  03E8               	dw	1000
   175  006F92  0000               	dw	0
   176  006F94  2710               	dw	10000
   177  006F96  0000               	dw	0
   178  006F98  86A0               	dw	34464
   179  006F9A  0001               	dw	1
   180  006F9C  4240               	dw	16960
   181  006F9E  000F               	dw	15
   182  006FA0  9680               	dw	38528
   183  006FA2  0098               	dw	152
   184  006FA4  E100               	dw	57600
   185  006FA6  05F5               	dw	1525
   186  006FA8  CA00               	dw	51712
   187  006FAA  3B9A               	dw	15258
   188  006FAC                     __end_of_dpowers:
   189                           	opt stack 0
   190  006FAC                     _hexpowers:
   191                           	opt stack 0
   192  006FAC  0001               	dw	1
   193  006FAE  0000               	dw	0
   194  006FB0  0010               	dw	16
   195  006FB2  0000               	dw	0
   196  006FB4  0100               	dw	256
   197  006FB6  0000               	dw	0
   198  006FB8  1000               	dw	4096
   199  006FBA  0000               	dw	0
   200  006FBC  0000               	dw	0
   201  006FBE  0001               	dw	1
   202  006FC0  0000               	dw	0
   203  006FC2  0010               	dw	16
   204  006FC4  0000               	dw	0
   205  006FC6  0100               	dw	256
   206  006FC8  0000               	dw	0
   207  006FCA  1000               	dw	4096
   208  006FCC                     __end_of_hexpowers:
   209                           	opt stack 0
   210  0000                     _BRGCON1	set	3952
   211  0000                     _BRGCON2	set	3953
   212  0000                     _BRGCON3	set	3954
   213  0000                     _BSEL0	set	3576
   214  0000                     _CANCON	set	3951
   215  0000                     _CIOCON	set	3955
   216  0000                     _COMSTATbits	set	3956
   217  0000                     _ECANCON	set	3959
   218  0000                     _EEADR	set	4009
   219  0000                     _EECON1bits	set	4006
   220  0000                     _EECON2	set	4007
   221  0000                     _EEDATA	set	4008
   222  0000                     _INTCONbits	set	4082
   223  0000                     _MSEL0	set	3568
   224  0000                     _MSEL1	set	3569
   225  0000                     _MSEL2	set	3570
   226  0000                     _OSCCONbits	set	4051
   227  0000                     _OSCTUNEbits	set	3995
   228  0000                     _PIE1bits	set	3997
   229  0000                     _PIR1bits	set	3998
   230  0000                     _RCREG	set	4014
   231  0000                     _RCSTA	set	4011
   232  0000                     _RCSTAbits	set	4011
   233  0000                     _RXB1CONbits	set	3920
   234  0000                     _RXERRCNT	set	3957
   235  0000                     _RXF0EIDH	set	3842
   236  0000                     _RXF0EIDL	set	3843
   237  0000                     _RXF0SIDH	set	3840
   238  0000                     _RXF0SIDL	set	3841
   239  0000                     _RXF10EIDH	set	3446
   240  0000                     _RXF10EIDL	set	3447
   241  0000                     _RXF10SIDH	set	3444
   242  0000                     _RXF10SIDL	set	3445
   243  0000                     _RXF11EIDH	set	3450
   244  0000                     _RXF11EIDL	set	3451
   245  0000                     _RXF11SIDH	set	3448
   246  0000                     _RXF11SIDL	set	3449
   247  0000                     _RXF12EIDH	set	3458
   248  0000                     _RXF12EIDL	set	3459
   249  0000                     _RXF12SIDH	set	3456
   250  0000                     _RXF12SIDL	set	3457
   251  0000                     _RXF13EIDH	set	3462
   252  0000                     _RXF13EIDL	set	3463
   253  0000                     _RXF13SIDH	set	3460
   254  0000                     _RXF13SIDL	set	3461
   255  0000                     _RXF14EIDH	set	3466
   256  0000                     _RXF14EIDL	set	3467
   257  0000                     _RXF14SIDH	set	3464
   258  0000                     _RXF14SIDL	set	3465
   259  0000                     _RXF15EIDH	set	3474
   260  0000                     _RXF15EIDL	set	3475
   261  0000                     _RXF15SIDH	set	3472
   262  0000                     _RXF15SIDL	set	3473
   263  0000                     _RXF1EIDH	set	3846
   264  0000                     _RXF1EIDL	set	3847
   265  0000                     _RXF1SIDH	set	3844
   266  0000                     _RXF1SIDL	set	3845
   267  0000                     _RXF2EIDH	set	3850
   268  0000                     _RXF2EIDL	set	3851
   269  0000                     _RXF2SIDH	set	3848
   270  0000                     _RXF2SIDL	set	3849
   271  0000                     _RXF3EIDH	set	3854
   272  0000                     _RXF3EIDL	set	3855
   273  0000                     _RXF3SIDH	set	3852
   274  0000                     _RXF3SIDL	set	3853
   275  0000                     _RXF4EIDH	set	3858
   276  0000                     _RXF4EIDL	set	3859
   277  0000                     _RXF4SIDH	set	3856
   278  0000                     _RXF4SIDL	set	3857
   279  0000                     _RXF5EIDH	set	3862
   280  0000                     _RXF5EIDL	set	3863
   281  0000                     _RXF5SIDH	set	3860
   282  0000                     _RXF5SIDL	set	3861
   283  0000                     _RXF6EIDH	set	3426
   284  0000                     _RXF6EIDL	set	3427
   285  0000                     _RXF6SIDH	set	3424
   286  0000                     _RXF6SIDL	set	3425
   287  0000                     _RXF7EIDH	set	3430
   288  0000                     _RXF7EIDL	set	3431
   289  0000                     _RXF7SIDH	set	3428
   290  0000                     _RXF7SIDL	set	3429
   291  0000                     _RXF8EIDH	set	3434
   292  0000                     _RXF8EIDL	set	3435
   293  0000                     _RXF8SIDH	set	3432
   294  0000                     _RXF8SIDL	set	3433
   295  0000                     _RXF9EIDH	set	3442
   296  0000                     _RXF9EIDL	set	3443
   297  0000                     _RXF9SIDH	set	3440
   298  0000                     _RXF9SIDL	set	3441
   299  0000                     _RXFBCON0	set	3552
   300  0000                     _RXFBCON1	set	3553
   301  0000                     _RXFBCON2	set	3554
   302  0000                     _RXFBCON3	set	3555
   303  0000                     _RXFBCON4	set	3556
   304  0000                     _RXFBCON5	set	3557
   305  0000                     _RXFBCON6	set	3558
   306  0000                     _RXFBCON7	set	3559
   307  0000                     _RXFCON0	set	3540
   308  0000                     _RXFCON1	set	3541
   309  0000                     _RXM0EIDH	set	3866
   310  0000                     _RXM0EIDL	set	3867
   311  0000                     _RXM0SIDL	set	3865
   312  0000                     _RXM1EIDH	set	3870
   313  0000                     _RXM1EIDL	set	3871
   314  0000                     _RXM1SIDL	set	3869
   315  0000                     _SPBRG	set	4015
   316  0000                     _SPBRGH	set	4016
   317  0000                     _T0CON	set	4053
   318  0000                     _T0CONbits	set	4053
   319  0000                     _T1CON	set	4045
   320  0000                     _T1CONbits	set	4045
   321  0000                     _TMR0H	set	4055
   322  0000                     _TMR0L	set	4054
   323  0000                     _TMR1H	set	4047
   324  0000                     _TMR1L	set	4046
   325  0000                     _TRISBbits	set	3987
   326  0000                     _TRISCbits	set	3988
   327  0000                     _TXERRCNT	set	3958
   328  0000                     _TXREG	set	4013
   329  0000                     _TXSTA	set	4012
   330  0000                     _TXSTAbits	set	4012
   331  0000                     _B0RXFUL	set	28935
   332  0000                     _B0TXEN	set	28610
   333  0000                     _B1RXFUL	set	29063
   334  0000                     _B1TXEN	set	28611
   335  0000                     _B2RXFUL	set	29191
   336  0000                     _B2TXEN	set	28612
   337  0000                     _B3RXFUL	set	29319
   338  0000                     _B3TXEN	set	28613
   339  0000                     _B4RXFUL	set	29447
   340  0000                     _B4TXEN	set	28614
   341  0000                     _B5RXFUL	set	29575
   342  0000                     _B5TXEN	set	28615
   343  0000                     _ERRIE	set	32029
   344  0000                     _FIFOEMPTY	set	31655
   345  0000                     _IRXIF	set	32039
   346  0000                     _LATC1	set	31833
   347  0000                     _MDSEL0	set	31678
   348  0000                     _MDSEL1	set	31679
   349  0000                     _PEIE	set	32662
   350  0000                     _RCIE	set	31981
   351  0000                     _RCIF	set	31989
   352  0000                     _RCIP	set	31997
   353  0000                     _RXB0FILHIT0	set	31488
   354  0000                     _RXB0FUL	set	31495
   355  0000                     _RXB0IF	set	32032
   356  0000                     _RXB0OVFL	set	31655
   357  0000                     _RXB1IF	set	32033
   358  0000                     _RXB1OVFL	set	31654
   359  0000                     _RXBnIE	set	32025
   360  0000                     _RXBnIF	set	32033
   361  0000                     _RXM0EXIDM	set	30923
   362  0000                     _RXM1EXIDEN	set	30955
   363  0000                     _B0CON	set	3616
   364  0000                     _B1CON	set	3632
   365  0000                     _B2CON	set	3648
   366  0000                     _B3CON	set	3664
   367  0000                     _B4CON	set	3680
   368  0000                     _B5CON	set	3696
   369  0000                     _RXB0CON	set	3936
   370  0000                     _RXB1CON	set	3920
   371  0000                     _RXM0SIDH	set	3864
   372  0000                     _RXM1SIDH	set	3868
   373  0000                     _TXB0CON	set	3904
   374  0000                     _TXB1CON	set	3888
   375  0000                     _TXB2CON	set	3872
   376  006FCC                     __stringdata:
   377                           	opt stack 0
   378  006FCC                     STR_250:
   379  006FCC  20                 	db	32
   380  006FCD  20                 	db	32
   381  006FCE  20                 	db	32
   382  006FCF  20                 	db	32
   383  006FD0  20                 	db	32
   384  006FD1  20                 	db	32
   385  006FD2  20                 	db	32
   386  006FD3  20                 	db	32
   387  006FD4  20                 	db	32
   388  006FD5  46                 	db	70	;'F'
   389  006FD6  6F                 	db	111	;'o'
   390  006FD7  72                 	db	114	;'r'
   391  006FD8  6D                 	db	109	;'m'
   392  006FD9  61                 	db	97	;'a'
   393  006FDA  74                 	db	116	;'t'
   394  006FDB  3A                 	db	58	;':'
   395  006FDC  20                 	db	32
   396  006FDD  66                 	db	102	;'f'
   397  006FDE  69                 	db	105	;'i'
   398  006FDF  6C                 	db	108	;'l'
   399  006FE0  74                 	db	116	;'t'
   400  006FE1  65                 	db	101	;'e'
   401  006FE2  72                 	db	114	;'r'
   402  006FE3  20                 	db	32
   403  006FE4  66                 	db	102	;'f'
   404  006FE5  69                 	db	105	;'i'
   405  006FE6  6C                 	db	108	;'l'
   406  006FE7  74                 	db	116	;'t'
   407  006FE8  65                 	db	101	;'e'
   408  006FE9  72                 	db	114	;'r'
   409  006FEA  6E                 	db	110	;'n'
   410  006FEB  6F                 	db	111	;'o'
   411  006FEC  2C                 	db	44
   412  006FED  70                 	db	112	;'p'
   413  006FEE  72                 	db	114	;'r'
   414  006FEF  69                 	db	105	;'i'
   415  006FF0  6F                 	db	111	;'o'
   416  006FF1  2C                 	db	44
   417  006FF2  63                 	db	99	;'c'
   418  006FF3  6C                 	db	108	;'l'
   419  006FF4  61                 	db	97	;'a'
   420  006FF5  73                 	db	115	;'s'
   421  006FF6  73                 	db	115	;'s'
   422  006FF7  2C                 	db	44
   423  006FF8  74                 	db	116	;'t'
   424  006FF9  79                 	db	121	;'y'
   425  006FFA  70                 	db	112	;'p'
   426  006FFB  65                 	db	101	;'e'
   427  006FFC  2C                 	db	44
   428  006FFD  6E                 	db	110	;'n'
   429  006FFE  6F                 	db	111	;'o'
   430  006FFF  64                 	db	100	;'d'
   431  007000  65                 	db	101	;'e'
   432  007001  69                 	db	105	;'i'
   433  007002  64                 	db	100	;'d'
   434  007003  20                 	db	32
   435  007004  20                 	db	32
   436  007005  28                 	db	40
   437  007006  66                 	db	102	;'f'
   438  007007  69                 	db	105	;'i'
   439  007008  6C                 	db	108	;'l'
   440  007009  74                 	db	116	;'t'
   441  00700A  65                 	db	101	;'e'
   442  00700B  72                 	db	114	;'r'
   443  00700C  6E                 	db	110	;'n'
   444  00700D  6F                 	db	111	;'o'
   445  00700E  20                 	db	32
   446  00700F  3D                 	db	61	;'='
   447  007010  20                 	db	32
   448  007011  30                 	db	48	;'0'
   449  007012  2D                 	db	45
   450  007013  31                 	db	49	;'1'
   451  007014  35                 	db	53	;'5'
   452  007015  29                 	db	41
   453  007016  2E                 	db	46
   454  007017  0D                 	db	13
   455  007018  0A                 	db	10
   456  007019  00                 	db	0
   457  00701A                     STR_248:
   458  00701A  49                 	db	73	;'I'
   459  00701B  4E                 	db	78	;'N'
   460  00701C  46                 	db	70	;'F'
   461  00701D  4F                 	db	79	;'O'
   462  00701E  20                 	db	32
   463  00701F  2D                 	db	45
   464  007020  20                 	db	32
   465  007021  47                 	db	71	;'G'
   466  007022  65                 	db	101	;'e'
   467  007023  74                 	db	116	;'t'
   468  007024  20                 	db	32
   469  007025  69                 	db	105	;'i'
   470  007026  6E                 	db	110	;'n'
   471  007027  66                 	db	102	;'f'
   472  007028  6F                 	db	111	;'o'
   473  007029  20                 	db	32
   474  00702A  61                 	db	97	;'a'
   475  00702B  62                 	db	98	;'b'
   476  00702C  6F                 	db	111	;'o'
   477  00702D  75                 	db	117	;'u'
   478  00702E  74                 	db	116	;'t'
   479  00702F  20                 	db	32
   480  007030  61                 	db	97	;'a'
   481  007031  6E                 	db	110	;'n'
   482  007032  20                 	db	32
   483  007033  65                 	db	101	;'e'
   484  007034  78                 	db	120	;'x'
   485  007035  69                 	db	105	;'i'
   486  007036  73                 	db	115	;'s'
   487  007037  74                 	db	116	;'t'
   488  007038  65                 	db	101	;'e'
   489  007039  6E                 	db	110	;'n'
   490  00703A  74                 	db	116	;'t'
   491  00703B  20                 	db	32
   492  00703C  6E                 	db	110	;'n'
   493  00703D  6F                 	db	111	;'o'
   494  00703E  64                 	db	100	;'d'
   495  00703F  65                 	db	101	;'e'
   496  007040  20                 	db	32
   497  007041  6F                 	db	111	;'o'
   498  007042  6E                 	db	110	;'n'
   499  007043  20                 	db	32
   500  007044  74                 	db	116	;'t'
   501  007045  68                 	db	104	;'h'
   502  007046  65                 	db	101	;'e'
   503  007047  20                 	db	32
   504  007048  62                 	db	98	;'b'
   505  007049  75                 	db	117	;'u'
   506  00704A  73                 	db	115	;'s'
   507  00704B  20                 	db	32
   508  00704C  28                 	db	40
   509  00704D  46                 	db	70	;'F'
   510  00704E  6F                 	db	111	;'o'
   511  00704F  72                 	db	114	;'r'
   512  007050  6D                 	db	109	;'m'
   513  007051  61                 	db	97	;'a'
   514  007052  74                 	db	116	;'t'
   515  007053  3A                 	db	58	;':'
   516  007054  20                 	db	32
   517  007055  69                 	db	105	;'i'
   518  007056  6E                 	db	110	;'n'
   519  007057  66                 	db	102	;'f'
   520  007058  6F                 	db	111	;'o'
   521  007059  20                 	db	32
   522  00705A  6E                 	db	110	;'n'
   523  00705B  69                 	db	105	;'i'
   524  00705C  63                 	db	99	;'c'
   525  00705D  6B                 	db	107	;'k'
   526  00705E  6E                 	db	110	;'n'
   527  00705F  61                 	db	97	;'a'
   528  007060  6D                 	db	109	;'m'
   529  007061  65                 	db	101	;'e'
   530  007062  29                 	db	41
   531  007063  2E                 	db	46
   532  007064  0D                 	db	13
   533  007065  0A                 	db	10
   534  007066  00                 	db	0
   535  007067                     STR_246:
   536  007067  52                 	db	82	;'R'
   537  007068  52                 	db	82	;'R'
   538  007069  45                 	db	69	;'E'
   539  00706A  47                 	db	71	;'G'
   540  00706B  20                 	db	32
   541  00706C  2D                 	db	45
   542  00706D  20                 	db	32
   543  00706E  52                 	db	82	;'R'
   544  00706F  65                 	db	101	;'e'
   545  007070  61                 	db	97	;'a'
   546  007071  64                 	db	100	;'d'
   547  007072  20                 	db	32
   548  007073  72                 	db	114	;'r'
   549  007074  65                 	db	101	;'e'
   550  007075  67                 	db	103	;'g'
   551  007076  69                 	db	105	;'i'
   552  007077  73                 	db	115	;'s'
   553  007078  74                 	db	116	;'t'
   554  007079  65                 	db	101	;'e'
   555  00707A  72                 	db	114	;'r'
   556  00707B  28                 	db	40
   557  00707C  73                 	db	115	;'s'
   558  00707D  29                 	db	41
   559  00707E  20                 	db	32
   560  00707F  6F                 	db	111	;'o'
   561  007080  66                 	db	102	;'f'
   562  007081  20                 	db	32
   563  007082  6E                 	db	110	;'n'
   564  007083  6F                 	db	111	;'o'
   565  007084  64                 	db	100	;'d'
   566  007085  65                 	db	101	;'e'
   567  007086  20                 	db	32
   568  007087  28                 	db	40
   569  007088  46                 	db	70	;'F'
   570  007089  6F                 	db	111	;'o'
   571  00708A  72                 	db	114	;'r'
   572  00708B  6D                 	db	109	;'m'
   573  00708C  61                 	db	97	;'a'
   574  00708D  74                 	db	116	;'t'
   575  00708E  3A                 	db	58	;':'
   576  00708F  20                 	db	32
   577  007090  72                 	db	114	;'r'
   578  007091  72                 	db	114	;'r'
   579  007092  65                 	db	101	;'e'
   580  007093  67                 	db	103	;'g'
   581  007094  20                 	db	32
   582  007095  6E                 	db	110	;'n'
   583  007096  6F                 	db	111	;'o'
   584  007097  64                 	db	100	;'d'
   585  007098  65                 	db	101	;'e'
   586  007099  69                 	db	105	;'i'
   587  00709A  64                 	db	100	;'d'
   588  00709B  20                 	db	32
   589  00709C  5B                 	db	91	;'['
   590  00709D  70                 	db	112	;'p'
   591  00709E  61                 	db	97	;'a'
   592  00709F  67                 	db	103	;'g'
   593  0070A0  65                 	db	101	;'e'
   594  0070A1  3A                 	db	58	;':'
   595  0070A2  5D                 	db	93	;']'
   596  0070A3  72                 	db	114	;'r'
   597  0070A4  65                 	db	101	;'e'
   598  0070A5  67                 	db	103	;'g'
   599  0070A6  20                 	db	32
   600  0070A7  5B                 	db	91	;'['
   601  0070A8  63                 	db	99	;'c'
   602  0070A9  6F                 	db	111	;'o'
   603  0070AA  75                 	db	117	;'u'
   604  0070AB  6E                 	db	110	;'n'
   605  0070AC  74                 	db	116	;'t'
   606  0070AD  5D                 	db	93	;']'
   607  0070AE  29                 	db	41
   608  0070AF  2E                 	db	46
   609  0070B0  0D                 	db	13
   610  0070B1  0A                 	db	10
   611  0070B2  00                 	db	0
   612  0070B3                     STR_247:
   613  0070B3  57                 	db	87	;'W'
   614  0070B4  52                 	db	82	;'R'
   615  0070B5  45                 	db	69	;'E'
   616  0070B6  47                 	db	71	;'G'
   617  0070B7  20                 	db	32
   618  0070B8  2D                 	db	45
   619  0070B9  20                 	db	32
   620  0070BA  57                 	db	87	;'W'
   621  0070BB  72                 	db	114	;'r'
   622  0070BC  69                 	db	105	;'i'
   623  0070BD  74                 	db	116	;'t'
   624  0070BE  65                 	db	101	;'e'
   625  0070BF  20                 	db	32
   626  0070C0  72                 	db	114	;'r'
   627  0070C1  65                 	db	101	;'e'
   628  0070C2  67                 	db	103	;'g'
   629  0070C3  69                 	db	105	;'i'
   630  0070C4  73                 	db	115	;'s'
   631  0070C5  74                 	db	116	;'t'
   632  0070C6  65                 	db	101	;'e'
   633  0070C7  72                 	db	114	;'r'
   634  0070C8  20                 	db	32
   635  0070C9  6F                 	db	111	;'o'
   636  0070CA  66                 	db	102	;'f'
   637  0070CB  20                 	db	32
   638  0070CC  6E                 	db	110	;'n'
   639  0070CD  6F                 	db	111	;'o'
   640  0070CE  64                 	db	100	;'d'
   641  0070CF  65                 	db	101	;'e'
   642  0070D0  20                 	db	32
   643  0070D1  28                 	db	40
   644  0070D2  46                 	db	70	;'F'
   645  0070D3  6F                 	db	111	;'o'
   646  0070D4  72                 	db	114	;'r'
   647  0070D5  6D                 	db	109	;'m'
   648  0070D6  61                 	db	97	;'a'
   649  0070D7  74                 	db	116	;'t'
   650  0070D8  3A                 	db	58	;':'
   651  0070D9  20                 	db	32
   652  0070DA  77                 	db	119	;'w'
   653  0070DB  72                 	db	114	;'r'
   654  0070DC  65                 	db	101	;'e'
   655  0070DD  67                 	db	103	;'g'
   656  0070DE  20                 	db	32
   657  0070DF  6E                 	db	110	;'n'
   658  0070E0  6F                 	db	111	;'o'
   659  0070E1  64                 	db	100	;'d'
   660  0070E2  65                 	db	101	;'e'
   661  0070E3  69                 	db	105	;'i'
   662  0070E4  64                 	db	100	;'d'
   663  0070E5  20                 	db	32
   664  0070E6  5B                 	db	91	;'['
   665  0070E7  70                 	db	112	;'p'
   666  0070E8  61                 	db	97	;'a'
   667  0070E9  67                 	db	103	;'g'
   668  0070EA  65                 	db	101	;'e'
   669  0070EB  3A                 	db	58	;':'
   670  0070EC  5D                 	db	93	;']'
   671  0070ED  72                 	db	114	;'r'
   672  0070EE  65                 	db	101	;'e'
   673  0070EF  67                 	db	103	;'g'
   674  0070F0  20                 	db	32
   675  0070F1  63                 	db	99	;'c'
   676  0070F2  6F                 	db	111	;'o'
   677  0070F3  6E                 	db	110	;'n'
   678  0070F4  74                 	db	116	;'t'
   679  0070F5  65                 	db	101	;'e'
   680  0070F6  6E                 	db	110	;'n'
   681  0070F7  74                 	db	116	;'t'
   682  0070F8  29                 	db	41
   683  0070F9  2E                 	db	46
   684  0070FA  0D                 	db	13
   685  0070FB  0A                 	db	10
   686  0070FC  00                 	db	0
   687  0070FD                     STR_252:
   688  0070FD  20                 	db	32
   689  0070FE  20                 	db	32
   690  0070FF  20                 	db	32
   691  007100  20                 	db	32
   692  007101  20                 	db	32
   693  007102  20                 	db	32
   694  007103  20                 	db	32
   695  007104  46                 	db	70	;'F'
   696  007105  6F                 	db	111	;'o'
   697  007106  72                 	db	114	;'r'
   698  007107  6D                 	db	109	;'m'
   699  007108  61                 	db	97	;'a'
   700  007109  74                 	db	116	;'t'
   701  00710A  3A                 	db	58	;':'
   702  00710B  20                 	db	32
   703  00710C  6D                 	db	109	;'m'
   704  00710D  61                 	db	97	;'a'
   705  00710E  73                 	db	115	;'s'
   706  00710F  6B                 	db	107	;'k'
   707  007110  20                 	db	32
   708  007111  6D                 	db	109	;'m'
   709  007112  61                 	db	97	;'a'
   710  007113  73                 	db	115	;'s'
   711  007114  6B                 	db	107	;'k'
   712  007115  6E                 	db	110	;'n'
   713  007116  6F                 	db	111	;'o'
   714  007117  2C                 	db	44
   715  007118  70                 	db	112	;'p'
   716  007119  72                 	db	114	;'r'
   717  00711A  69                 	db	105	;'i'
   718  00711B  6F                 	db	111	;'o'
   719  00711C  2C                 	db	44
   720  00711D  63                 	db	99	;'c'
   721  00711E  6C                 	db	108	;'l'
   722  00711F  61                 	db	97	;'a'
   723  007120  73                 	db	115	;'s'
   724  007121  73                 	db	115	;'s'
   725  007122  2C                 	db	44
   726  007123  74                 	db	116	;'t'
   727  007124  79                 	db	121	;'y'
   728  007125  70                 	db	112	;'p'
   729  007126  65                 	db	101	;'e'
   730  007127  2C                 	db	44
   731  007128  6E                 	db	110	;'n'
   732  007129  6F                 	db	111	;'o'
   733  00712A  64                 	db	100	;'d'
   734  00712B  65                 	db	101	;'e'
   735  00712C  69                 	db	105	;'i'
   736  00712D  64                 	db	100	;'d'
   737  00712E  20                 	db	32
   738  00712F  28                 	db	40
   739  007130  6D                 	db	109	;'m'
   740  007131  61                 	db	97	;'a'
   741  007132  73                 	db	115	;'s'
   742  007133  6B                 	db	107	;'k'
   743  007134  6E                 	db	110	;'n'
   744  007135  6F                 	db	111	;'o'
   745  007136  20                 	db	32
   746  007137  3D                 	db	61	;'='
   747  007138  20                 	db	32
   748  007139  30                 	db	48	;'0'
   749  00713A  20                 	db	32
   750  00713B  6F                 	db	111	;'o'
   751  00713C  72                 	db	114	;'r'
   752  00713D  20                 	db	32
   753  00713E  31                 	db	49	;'1'
   754  00713F  29                 	db	41
   755  007140  2E                 	db	46
   756  007141  0D                 	db	13
   757  007142  0A                 	db	10
   758  007143  00                 	db	0
   759  007144                     STR_261:
   760  007144  2D                 	db	45
   761  007145  2D                 	db	45
   762  007146  2D                 	db	45
   763  007147  2D                 	db	45
   764  007148  2D                 	db	45
   765  007149  2D                 	db	45
   766  00714A  2D                 	db	45
   767  00714B  2D                 	db	45
   768  00714C  2D                 	db	45
   769  00714D  2D                 	db	45
   770  00714E  2D                 	db	45
   771  00714F  2D                 	db	45
   772  007150  2D                 	db	45
   773  007151  2D                 	db	45
   774  007152  2D                 	db	45
   775  007153  2D                 	db	45
   776  007154  2D                 	db	45
   777  007155  2D                 	db	45
   778  007156  2D                 	db	45
   779  007157  2D                 	db	45
   780  007158  2D                 	db	45
   781  007159  2D                 	db	45
   782  00715A  2D                 	db	45
   783  00715B  2D                 	db	45
   784  00715C  2D                 	db	45
   785  00715D  2D                 	db	45
   786  00715E  2D                 	db	45
   787  00715F  2D                 	db	45
   788  007160  2D                 	db	45
   789  007161  2D                 	db	45
   790  007162  2D                 	db	45
   791  007163  2D                 	db	45
   792  007164  2D                 	db	45
   793  007165  2D                 	db	45
   794  007166  2D                 	db	45
   795  007167  2D                 	db	45
   796  007168  2D                 	db	45
   797  007169  2D                 	db	45
   798  00716A  2D                 	db	45
   799  00716B  2D                 	db	45
   800  00716C  2D                 	db	45
   801  00716D  2D                 	db	45
   802  00716E  2D                 	db	45
   803  00716F  2D                 	db	45
   804  007170  2D                 	db	45
   805  007171  2D                 	db	45
   806  007172  2D                 	db	45
   807  007173  2D                 	db	45
   808  007174  2D                 	db	45
   809  007175  2D                 	db	45
   810  007176  2D                 	db	45
   811  007177  2D                 	db	45
   812  007178  2D                 	db	45
   813  007179  2D                 	db	45
   814  00717A  2D                 	db	45
   815  00717B  2D                 	db	45
   816  00717C  2D                 	db	45
   817  00717D  2D                 	db	45
   818  00717E  2D                 	db	45
   819  00717F  2D                 	db	45
   820  007180  2D                 	db	45
   821  007181  2D                 	db	45
   822  007182  2D                 	db	45
   823  007183  2D                 	db	45
   824  007184  0D                 	db	13
   825  007185  0A                 	db	10
   826  007186  00                 	db	0
   827  007187                     STR_256:
   828  007187  20                 	db	32
   829  007188  20                 	db	32
   830  007189  20                 	db	32
   831  00718A  20                 	db	32
   832  00718B  52                 	db	82	;'R'
   833  00718C  57                 	db	87	;'W'
   834  00718D  54                 	db	84	;'T'
   835  00718E  49                 	db	73	;'I'
   836  00718F  4D                 	db	77	;'M'
   837  007190  45                 	db	69	;'E'
   838  007191  4F                 	db	79	;'O'
   839  007192  55                 	db	85	;'U'
   840  007193  54                 	db	84	;'T'
   841  007194  20                 	db	32
   842  007195  2D                 	db	45
   843  007196  20                 	db	32
   844  007197  53                 	db	83	;'S'
   845  007198  65                 	db	101	;'e'
   846  007199  74                 	db	116	;'t'
   847  00719A  20                 	db	32
   848  00719B  72                 	db	114	;'r'
   849  00719C  65                 	db	101	;'e'
   850  00719D  67                 	db	103	;'g'
   851  00719E  69                 	db	105	;'i'
   852  00719F  73                 	db	115	;'s'
   853  0071A0  74                 	db	116	;'t'
   854  0071A1  65                 	db	101	;'e'
   855  0071A2  72                 	db	114	;'r'
   856  0071A3  20                 	db	32
   857  0071A4  72                 	db	114	;'r'
   858  0071A5  65                 	db	101	;'e'
   859  0071A6  61                 	db	97	;'a'
   860  0071A7  64                 	db	100	;'d'
   861  0071A8  2F                 	db	47
   862  0071A9  77                 	db	119	;'w'
   863  0071AA  72                 	db	114	;'r'
   864  0071AB  69                 	db	105	;'i'
   865  0071AC  74                 	db	116	;'t'
   866  0071AD  65                 	db	101	;'e'
   867  0071AE  20                 	db	32
   868  0071AF  74                 	db	116	;'t'
   869  0071B0  69                 	db	105	;'i'
   870  0071B1  6D                 	db	109	;'m'
   871  0071B2  65                 	db	101	;'e'
   872  0071B3  6F                 	db	111	;'o'
   873  0071B4  75                 	db	117	;'u'
   874  0071B5  74                 	db	116	;'t'
   875  0071B6  2E                 	db	46
   876  0071B7  20                 	db	32
   877  0071B8  44                 	db	68	;'D'
   878  0071B9  65                 	db	101	;'e'
   879  0071BA  66                 	db	102	;'f'
   880  0071BB  61                 	db	97	;'a'
   881  0071BC  75                 	db	117	;'u'
   882  0071BD  6C                 	db	108	;'l'
   883  0071BE  74                 	db	116	;'t'
   884  0071BF  3D                 	db	61	;'='
   885  0071C0  32                 	db	50	;'2'
   886  0071C1  30                 	db	48	;'0'
   887  0071C2  20                 	db	32
   888  0071C3  6D                 	db	109	;'m'
   889  0071C4  73                 	db	115	;'s'
   890  0071C5  20                 	db	32
   891  0071C6  2E                 	db	46
   892  0071C7  0D                 	db	13
   893  0071C8  0A                 	db	10
   894  0071C9  00                 	db	0
   895  0071CA                     STR_103:
   896  0071CA  2D                 	db	45
   897  0071CB  45                 	db	69	;'E'
   898  0071CC  52                 	db	82	;'R'
   899  0071CD  52                 	db	82	;'R'
   900  0071CE  4F                 	db	79	;'O'
   901  0071CF  52                 	db	82	;'R'
   902  0071D0  20                 	db	32
   903  0071D1  2D                 	db	45
   904  0071D2  20                 	db	32
   905  0071D3  46                 	db	70	;'F'
   906  0071D4  69                 	db	105	;'i'
   907  0071D5  6C                 	db	108	;'l'
   908  0071D6  74                 	db	116	;'t'
   909  0071D7  65                 	db	101	;'e'
   910  0071D8  72                 	db	114	;'r'
   911  0071D9  20                 	db	32
   912  0071DA  6E                 	db	110	;'n'
   913  0071DB  75                 	db	117	;'u'
   914  0071DC  6D                 	db	109	;'m'
   915  0071DD  62                 	db	98	;'b'
   916  0071DE  65                 	db	101	;'e'
   917  0071DF  72                 	db	114	;'r'
   918  0071E0  20                 	db	32
   919  0071E1  63                 	db	99	;'c'
   920  0071E2  61                 	db	97	;'a'
   921  0071E3  6E                 	db	110	;'n'
   922  0071E4  20                 	db	32
   923  0071E5  6F                 	db	111	;'o'
   924  0071E6  6E                 	db	110	;'n'
   925  0071E7  6C                 	db	108	;'l'
   926  0071E8  79                 	db	121	;'y'
   927  0071E9  20                 	db	32
   928  0071EA  62                 	db	98	;'b'
   929  0071EB  65                 	db	101	;'e'
   930  0071EC  20                 	db	32
   931  0071ED  73                 	db	115	;'s'
   932  0071EE  65                 	db	101	;'e'
   933  0071EF  74                 	db	116	;'t'
   934  0071F0  20                 	db	32
   935  0071F1  74                 	db	116	;'t'
   936  0071F2  6F                 	db	111	;'o'
   937  0071F3  20                 	db	32
   938  0071F4  61                 	db	97	;'a'
   939  0071F5  20                 	db	32
   940  0071F6  76                 	db	118	;'v'
   941  0071F7  61                 	db	97	;'a'
   942  0071F8  6C                 	db	108	;'l'
   943  0071F9  75                 	db	117	;'u'
   944  0071FA  65                 	db	101	;'e'
   945  0071FB  20                 	db	32
   946  0071FC  62                 	db	98	;'b'
   947  0071FD  65                 	db	101	;'e'
   948  0071FE  74                 	db	116	;'t'
   949  0071FF  77                 	db	119	;'w'
   950  007200  65                 	db	101	;'e'
   951  007201  65                 	db	101	;'e'
   952  007202  6E                 	db	110	;'n'
   953  007203  20                 	db	32
   954  007204  30                 	db	48	;'0'
   955  007205  2D                 	db	45
   956  007206  31                 	db	49	;'1'
   957  007207  35                 	db	53	;'5'
   958  007208  2E                 	db	46
   959  007209  0D                 	db	13
   960  00720A  0A                 	db	10
   961  00720B  00                 	db	0
   962  00720C                     STR_259:
   963  00720C  20                 	db	32
   964  00720D  20                 	db	32
   965  00720E  20                 	db	32
   966  00720F  20                 	db	32
   967  007210  4D                 	db	77	;'M'
   968  007211  4F                 	db	79	;'O'
   969  007212  44                 	db	68	;'D'
   970  007213  45                 	db	69	;'E'
   971  007214  20                 	db	32
   972  007215  2D                 	db	45
   973  007216  20                 	db	32
   974  007217  53                 	db	83	;'S'
   975  007218  65                 	db	101	;'e'
   976  007219  74                 	db	116	;'t'
   977  00721A  20                 	db	32
   978  00721B  61                 	db	97	;'a'
   979  00721C  64                 	db	100	;'d'
   980  00721D  61                 	db	97	;'a'
   981  00721E  70                 	db	112	;'p'
   982  00721F  74                 	db	116	;'t'
   983  007220  65                 	db	101	;'e'
   984  007221  72                 	db	114	;'r'
   985  007222  20                 	db	32
   986  007223  6D                 	db	109	;'m'
   987  007224  6F                 	db	111	;'o'
   988  007225  64                 	db	100	;'d'
   989  007226  65                 	db	101	;'e'
   990  007227  20                 	db	32
   991  007228  74                 	db	116	;'t'
   992  007229  68                 	db	104	;'h'
   993  00722A  61                 	db	97	;'a'
   994  00722B  74                 	db	116	;'t'
   995  00722C  20                 	db	32
   996  00722D  73                 	db	115	;'s'
   997  00722E  68                 	db	104	;'h'
   998  00722F  6F                 	db	111	;'o'
   999  007230  75                 	db	117	;'u'
  1000  007231  6C                 	db	108	;'l'
  1001  007232  64                 	db	100	;'d'
  1002  007233  20                 	db	32
  1003  007234  62                 	db	98	;'b'
  1004  007235  65                 	db	101	;'e'
  1005  007236  20                 	db	32
  1006  007237  75                 	db	117	;'u'
  1007  007238  73                 	db	115	;'s'
  1008  007239  65                 	db	101	;'e'
  1009  00723A  64                 	db	100	;'d'
  1010  00723B  20                 	db	32
  1011  00723C  6F                 	db	111	;'o'
  1012  00723D  6E                 	db	110	;'n'
  1013  00723E  20                 	db	32
  1014  00723F  73                 	db	115	;'s'
  1015  007240  74                 	db	116	;'t'
  1016  007241  61                 	db	97	;'a'
  1017  007242  72                 	db	114	;'r'
  1018  007243  74                 	db	116	;'t'
  1019  007244  75                 	db	117	;'u'
  1020  007245  70                 	db	112	;'p'
  1021  007246  2E                 	db	46
  1022  007247  0D                 	db	13
  1023  007248  0A                 	db	10
  1024  007249  00                 	db	0
  1025  00724A                     STR_219:
  1026  00724A  54                 	db	84	;'T'
  1027  00724B  72                 	db	114	;'r'
  1028  00724C  61                 	db	97	;'a'
  1029  00724D  6E                 	db	110	;'n'
  1030  00724E  73                 	db	115	;'s'
  1031  00724F  6D                 	db	109	;'m'
  1032  007250  69                 	db	105	;'i'
  1033  007251  74                 	db	116	;'t'
  1034  007252  74                 	db	116	;'t'
  1035  007253  65                 	db	101	;'e'
  1036  007254  72                 	db	114	;'r'
  1037  007255  20                 	db	32
  1038  007256  69                 	db	105	;'i'
  1039  007257  6E                 	db	110	;'n'
  1040  007258  20                 	db	32
  1041  007259  45                 	db	69	;'E'
  1042  00725A  72                 	db	114	;'r'
  1043  00725B  72                 	db	114	;'r'
  1044  00725C  6F                 	db	111	;'o'
  1045  00725D  72                 	db	114	;'r'
  1046  00725E  20                 	db	32
  1047  00725F  53                 	db	83	;'S'
  1048  007260  74                 	db	116	;'t'
  1049  007261  61                 	db	97	;'a'
  1050  007262  74                 	db	116	;'t'
  1051  007263  65                 	db	101	;'e'
  1052  007264  20                 	db	32
  1053  007265  57                 	db	87	;'W'
  1054  007266  61                 	db	97	;'a'
  1055  007267  72                 	db	114	;'r'
  1056  007268  6E                 	db	110	;'n'
  1057  007269  69                 	db	105	;'i'
  1058  00726A  6E                 	db	110	;'n'
  1059  00726B  67                 	db	103	;'g'
  1060  00726C  20                 	db	32
  1061  00726D  28                 	db	40
  1062  00726E  31                 	db	49	;'1'
  1063  00726F  32                 	db	50	;'2'
  1064  007270  38                 	db	56	;'8'
  1065  007271  20                 	db	32
  1066  007272  3E                 	db	62	;'>'
  1067  007273  20                 	db	32
  1068  007274  54                 	db	84	;'T'
  1069  007275  45                 	db	69	;'E'
  1070  007276  52                 	db	82	;'R'
  1071  007277  52                 	db	82	;'R'
  1072  007278  43                 	db	67	;'C'
  1073  007279  4E                 	db	78	;'N'
  1074  00727A  54                 	db	84	;'T'
  1075  00727B  20                 	db	32
  1076  00727C  3F                 	db	63	;'?'
  1077  00727D  20                 	db	32
  1078  00727E  39                 	db	57	;'9'
  1079  00727F  36                 	db	54	;'6'
  1080  007280  29                 	db	41
  1081  007281  0D                 	db	13
  1082  007282  0A                 	db	10
  1083  007283  00                 	db	0
  1084  007284                     STR_2:
  1085  007284  43                 	db	67	;'C'
  1086  007285  6F                 	db	111	;'o'
  1087  007286  70                 	db	112	;'p'
  1088  007287  79                 	db	121	;'y'
  1089  007288  72                 	db	114	;'r'
  1090  007289  69                 	db	105	;'i'
  1091  00728A  67                 	db	103	;'g'
  1092  00728B  68                 	db	104	;'h'
  1093  00728C  74                 	db	116	;'t'
  1094  00728D  20                 	db	32
  1095  00728E  28                 	db	40
  1096  00728F  43                 	db	67	;'C'
  1097  007290  29                 	db	41
  1098  007291  20                 	db	32
  1099  007292  32                 	db	50	;'2'
  1100  007293  30                 	db	48	;'0'
  1101  007294  31                 	db	49	;'1'
  1102  007295  34                 	db	52	;'4'
  1103  007296  2D                 	db	45
  1104  007297  32                 	db	50	;'2'
  1105  007298  30                 	db	48	;'0'
  1106  007299  31                 	db	49	;'1'
  1107  00729A  35                 	db	53	;'5'
  1108  00729B  20                 	db	32
  1109  00729C  50                 	db	80	;'P'
  1110  00729D  61                 	db	97	;'a'
  1111  00729E  72                 	db	114	;'r'
  1112  00729F  61                 	db	97	;'a'
  1113  0072A0  64                 	db	100	;'d'
  1114  0072A1  69                 	db	105	;'i'
  1115  0072A2  73                 	db	115	;'s'
  1116  0072A3  65                 	db	101	;'e'
  1117  0072A4  20                 	db	32
  1118  0072A5  6F                 	db	111	;'o'
  1119  0072A6  66                 	db	102	;'f'
  1120  0072A7  20                 	db	32
  1121  0072A8  74                 	db	116	;'t'
  1122  0072A9  68                 	db	104	;'h'
  1123  0072AA  65                 	db	101	;'e'
  1124  0072AB  20                 	db	32
  1125  0072AC  46                 	db	70	;'F'
  1126  0072AD  72                 	db	114	;'r'
  1127  0072AE  6F                 	db	111	;'o'
  1128  0072AF  67                 	db	103	;'g'
  1129  0072B0  20                 	db	32
  1130  0072B1  41                 	db	65	;'A'
  1131  0072B2  42                 	db	66	;'B'
  1132  0072B3  2C                 	db	44
  1133  0072B4  20                 	db	32
  1134  0072B5  53                 	db	83	;'S'
  1135  0072B6  77                 	db	119	;'w'
  1136  0072B7  65                 	db	101	;'e'
  1137  0072B8  64                 	db	100	;'d'
  1138  0072B9  65                 	db	101	;'e'
  1139  0072BA  6E                 	db	110	;'n'
  1140  0072BB  0D                 	db	13
  1141  0072BC  0A                 	db	10
  1142  0072BD  00                 	db	0
  1143  0072BE                     STR_221:
  1144  0072BE  54                 	db	84	;'T'
  1145  0072BF  72                 	db	114	;'r'
  1146  0072C0  61                 	db	97	;'a'
  1147  0072C1  6E                 	db	110	;'n'
  1148  0072C2  73                 	db	115	;'s'
  1149  0072C3  6D                 	db	109	;'m'
  1150  0072C4  69                 	db	105	;'i'
  1151  0072C5  74                 	db	116	;'t'
  1152  0072C6  74                 	db	116	;'t'
  1153  0072C7  65                 	db	101	;'e'
  1154  0072C8  72                 	db	114	;'r'
  1155  0072C9  20                 	db	32
  1156  0072CA  69                 	db	105	;'i'
  1157  0072CB  6E                 	db	110	;'n'
  1158  0072CC  20                 	db	32
  1159  0072CD  45                 	db	69	;'E'
  1160  0072CE  72                 	db	114	;'r'
  1161  0072CF  72                 	db	114	;'r'
  1162  0072D0  6F                 	db	111	;'o'
  1163  0072D1  72                 	db	114	;'r'
  1164  0072D2  20                 	db	32
  1165  0072D3  53                 	db	83	;'S'
  1166  0072D4  74                 	db	116	;'t'
  1167  0072D5  61                 	db	97	;'a'
  1168  0072D6  74                 	db	116	;'t'
  1169  0072D7  65                 	db	101	;'e'
  1170  0072D8  20                 	db	32
  1171  0072D9  42                 	db	66	;'B'
  1172  0072DA  75                 	db	117	;'u'
  1173  0072DB  73                 	db	115	;'s'
  1174  0072DC  20                 	db	32
  1175  0072DD  50                 	db	80	;'P'
  1176  0072DE  61                 	db	97	;'a'
  1177  0072DF  73                 	db	115	;'s'
  1178  0072E0  73                 	db	115	;'s'
  1179  0072E1  69                 	db	105	;'i'
  1180  0072E2  76                 	db	118	;'v'
  1181  0072E3  65                 	db	101	;'e'
  1182  0072E4  20                 	db	32
  1183  0072E5  28                 	db	40
  1184  0072E6  54                 	db	84	;'T'
  1185  0072E7  45                 	db	69	;'E'
  1186  0072E8  52                 	db	82	;'R'
  1187  0072E9  52                 	db	82	;'R'
  1188  0072EA  43                 	db	67	;'C'
  1189  0072EB  4E                 	db	78	;'N'
  1190  0072EC  54                 	db	84	;'T'
  1191  0072ED  20                 	db	32
  1192  0072EE  3F                 	db	63	;'?'
  1193  0072EF  20                 	db	32
  1194  0072F0  31                 	db	49	;'1'
  1195  0072F1  32                 	db	50	;'2'
  1196  0072F2  38                 	db	56	;'8'
  1197  0072F3  29                 	db	41
  1198  0072F4  0D                 	db	13
  1199  0072F5  0A                 	db	10
  1200  0072F6  00                 	db	0
  1201  0072F7                     STR_240:
  1202  0072F7  20                 	db	32
  1203  0072F8  20                 	db	32
  1204  0072F9  20                 	db	32
  1205  0072FA  20                 	db	32
  1206  0072FB  20                 	db	32
  1207  0072FC  46                 	db	70	;'F'
  1208  0072FD  6F                 	db	111	;'o'
  1209  0072FE  72                 	db	114	;'r'
  1210  0072FF  6D                 	db	109	;'m'
  1211  007300  61                 	db	97	;'a'
  1212  007301  74                 	db	116	;'t'
  1213  007302  3A                 	db	58	;':'
  1214  007303  20                 	db	32
  1215  007304  70                 	db	112	;'p'
  1216  007305  72                 	db	114	;'r'
  1217  007306  69                 	db	105	;'i'
  1218  007307  6F                 	db	111	;'o'
  1219  007308  72                 	db	114	;'r'
  1220  007309  69                 	db	105	;'i'
  1221  00730A  74                 	db	116	;'t'
  1222  00730B  79                 	db	121	;'y'
  1223  00730C  2C                 	db	44
  1224  00730D  63                 	db	99	;'c'
  1225  00730E  6C                 	db	108	;'l'
  1226  00730F  61                 	db	97	;'a'
  1227  007310  73                 	db	115	;'s'
  1228  007311  73                 	db	115	;'s'
  1229  007312  2C                 	db	44
  1230  007313  74                 	db	116	;'t'
  1231  007314  79                 	db	121	;'y'
  1232  007315  70                 	db	112	;'p'
  1233  007316  65                 	db	101	;'e'
  1234  007317  2C                 	db	44
  1235  007318  6E                 	db	110	;'n'
  1236  007319  6F                 	db	111	;'o'
  1237  00731A  64                 	db	100	;'d'
  1238  00731B  65                 	db	101	;'e'
  1239  00731C  69                 	db	105	;'i'
  1240  00731D  64                 	db	100	;'d'
  1241  00731E  2C                 	db	44
  1242  00731F  63                 	db	99	;'c'
  1243  007320  6F                 	db	111	;'o'
  1244  007321  75                 	db	117	;'u'
  1245  007322  6E                 	db	110	;'n'
  1246  007323  74                 	db	116	;'t'
  1247  007324  2C                 	db	44
  1248  007325  64                 	db	100	;'d'
  1249  007326  61                 	db	97	;'a'
  1250  007327  74                 	db	116	;'t'
  1251  007328  61                 	db	97	;'a'
  1252  007329  2C                 	db	44
  1253  00732A  2C                 	db	44
  1254  00732B  2C                 	db	44
  1255  00732C  0D                 	db	13
  1256  00732D  0A                 	db	10
  1257  00732E  00                 	db	0
  1258  00732F                     STR_226:
  1259  00732F  52                 	db	82	;'R'
  1260  007330  65                 	db	101	;'e'
  1261  007331  63                 	db	99	;'c'
  1262  007332  65                 	db	101	;'e'
  1263  007333  69                 	db	105	;'i'
  1264  007334  76                 	db	118	;'v'
  1265  007335  65                 	db	101	;'e'
  1266  007336  72                 	db	114	;'r'
  1267  007337  20                 	db	32
  1268  007338  69                 	db	105	;'i'
  1269  007339  6E                 	db	110	;'n'
  1270  00733A  20                 	db	32
  1271  00733B  45                 	db	69	;'E'
  1272  00733C  72                 	db	114	;'r'
  1273  00733D  72                 	db	114	;'r'
  1274  00733E  6F                 	db	111	;'o'
  1275  00733F  72                 	db	114	;'r'
  1276  007340  20                 	db	32
  1277  007341  53                 	db	83	;'S'
  1278  007342  74                 	db	116	;'t'
  1279  007343  61                 	db	97	;'a'
  1280  007344  74                 	db	116	;'t'
  1281  007345  65                 	db	101	;'e'
  1282  007346  20                 	db	32
  1283  007347  57                 	db	87	;'W'
  1284  007348  61                 	db	97	;'a'
  1285  007349  72                 	db	114	;'r'
  1286  00734A  6E                 	db	110	;'n'
  1287  00734B  69                 	db	105	;'i'
  1288  00734C  6E                 	db	110	;'n'
  1289  00734D  67                 	db	103	;'g'
  1290  00734E  20                 	db	32
  1291  00734F  28                 	db	40
  1292  007350  31                 	db	49	;'1'
  1293  007351  32                 	db	50	;'2'
  1294  007352  38                 	db	56	;'8'
  1295  007353  20                 	db	32
  1296  007354  3E                 	db	62	;'>'
  1297  007355  20                 	db	32
  1298  007356  52                 	db	82	;'R'
  1299  007357  45                 	db	69	;'E'
  1300  007358  52                 	db	82	;'R'
  1301  007359  52                 	db	82	;'R'
  1302  00735A  43                 	db	67	;'C'
  1303  00735B  4E                 	db	78	;'N'
  1304  00735C  54                 	db	84	;'T'
  1305  00735D  20                 	db	32
  1306  00735E  3F                 	db	63	;'?'
  1307  00735F  20                 	db	32
  1308  007360  39                 	db	57	;'9'
  1309  007361  36                 	db	54	;'6'
  1310  007362  29                 	db	41
  1311  007363  0D                 	db	13
  1312  007364  0A                 	db	10
  1313  007365  00                 	db	0
  1314  007366                     STR_258:
  1315  007366  20                 	db	32
  1316  007367  20                 	db	32
  1317  007368  20                 	db	32
  1318  007369  20                 	db	32
  1319  00736A  53                 	db	83	;'S'
  1320  00736B  54                 	db	84	;'T'
  1321  00736C  41                 	db	65	;'A'
  1322  00736D  52                 	db	82	;'R'
  1323  00736E  54                 	db	84	;'T'
  1324  00736F  49                 	db	73	;'I'
  1325  007370  46                 	db	70	;'F'
  1326  007371  20                 	db	32
  1327  007372  2D                 	db	45
  1328  007373  20                 	db	32
  1329  007374  53                 	db	83	;'S'
  1330  007375  65                 	db	101	;'e'
  1331  007376  74                 	db	116	;'t'
  1332  007377  20                 	db	32
  1333  007378  69                 	db	105	;'i'
  1334  007379  6E                 	db	110	;'n'
  1335  00737A  74                 	db	116	;'t'
  1336  00737B  65                 	db	101	;'e'
  1337  00737C  72                 	db	114	;'r'
  1338  00737D  66                 	db	102	;'f'
  1339  00737E  61                 	db	97	;'a'
  1340  00737F  63                 	db	99	;'c'
  1341  007380  65                 	db	101	;'e'
  1342  007381  20                 	db	32
  1343  007382  73                 	db	115	;'s'
  1344  007383  74                 	db	116	;'t'
  1345  007384  61                 	db	97	;'a'
  1346  007385  74                 	db	116	;'t'
  1347  007386  65                 	db	101	;'e'
  1348  007387  20                 	db	32
  1349  007388  74                 	db	116	;'t'
  1350  007389  6F                 	db	111	;'o'
  1351  00738A  20                 	db	32
  1352  00738B  75                 	db	117	;'u'
  1353  00738C  73                 	db	115	;'s'
  1354  00738D  65                 	db	101	;'e'
  1355  00738E  20                 	db	32
  1356  00738F  6F                 	db	111	;'o'
  1357  007390  6E                 	db	110	;'n'
  1358  007391  20                 	db	32
  1359  007392  73                 	db	115	;'s'
  1360  007393  74                 	db	116	;'t'
  1361  007394  61                 	db	97	;'a'
  1362  007395  72                 	db	114	;'r'
  1363  007396  74                 	db	116	;'t'
  1364  007397  75                 	db	117	;'u'
  1365  007398  70                 	db	112	;'p'
  1366  007399  2E                 	db	46
  1367  00739A  0D                 	db	13
  1368  00739B  0A                 	db	10
  1369  00739C  00                 	db	0
  1370  00739D                     STR_4:
  1371  00739D  50                 	db	80	;'P'
  1372  00739E  72                 	db	114	;'r'
  1373  00739F  65                 	db	101	;'e'
  1374  0073A0  73                 	db	115	;'s'
  1375  0073A1  73                 	db	115	;'s'
  1376  0073A2  20                 	db	32
  1377  0073A3  27                 	db	39
  1378  0073A4  76                 	db	118	;'v'
  1379  0073A5  27                 	db	39
  1380  0073A6  20                 	db	32
  1381  0073A7  77                 	db	119	;'w'
  1382  0073A8  69                 	db	105	;'i'
  1383  0073A9  74                 	db	116	;'t'
  1384  0073AA  68                 	db	104	;'h'
  1385  0073AB  69                 	db	105	;'i'
  1386  0073AC  6E                 	db	110	;'n'
  1387  0073AD  20                 	db	32
  1388  0073AE  74                 	db	116	;'t'
  1389  0073AF  68                 	db	104	;'h'
  1390  0073B0  72                 	db	114	;'r'
  1391  0073B1  65                 	db	101	;'e'
  1392  0073B2  65                 	db	101	;'e'
  1393  0073B3  20                 	db	32
  1394  0073B4  73                 	db	115	;'s'
  1395  0073B5  65                 	db	101	;'e'
  1396  0073B6  63                 	db	99	;'c'
  1397  0073B7  6F                 	db	111	;'o'
  1398  0073B8  6E                 	db	110	;'n'
  1399  0073B9  64                 	db	100	;'d'
  1400  0073BA  73                 	db	115	;'s'
  1401  0073BB  20                 	db	32
  1402  0073BC  74                 	db	116	;'t'
  1403  0073BD  6F                 	db	111	;'o'
  1404  0073BE  20                 	db	32
  1405  0073BF  65                 	db	101	;'e'
  1406  0073C0  6E                 	db	110	;'n'
  1407  0073C1  74                 	db	116	;'t'
  1408  0073C2  65                 	db	101	;'e'
  1409  0073C3  72                 	db	114	;'r'
  1410  0073C4  20                 	db	32
  1411  0073C5  76                 	db	118	;'v'
  1412  0073C6  65                 	db	101	;'e'
  1413  0073C7  72                 	db	114	;'r'
  1414  0073C8  62                 	db	98	;'b'
  1415  0073C9  6F                 	db	111	;'o'
  1416  0073CA  73                 	db	115	;'s'
  1417  0073CB  65                 	db	101	;'e'
  1418  0073CC  20                 	db	32
  1419  0073CD  6D                 	db	109	;'m'
  1420  0073CE  6F                 	db	111	;'o'
  1421  0073CF  64                 	db	100	;'d'
  1422  0073D0  65                 	db	101	;'e'
  1423  0073D1  0D                 	db	13
  1424  0073D2  0A                 	db	10
  1425  0073D3  00                 	db	0
  1426  0073D4                     STR_227:
  1427  0073D4  52                 	db	82	;'R'
  1428  0073D5  65                 	db	101	;'e'
  1429  0073D6  63                 	db	99	;'c'
  1430  0073D7  65                 	db	101	;'e'
  1431  0073D8  69                 	db	105	;'i'
  1432  0073D9  76                 	db	118	;'v'
  1433  0073DA  65                 	db	101	;'e'
  1434  0073DB  72                 	db	114	;'r'
  1435  0073DC  20                 	db	32
  1436  0073DD  69                 	db	105	;'i'
  1437  0073DE  6E                 	db	110	;'n'
  1438  0073DF  20                 	db	32
  1439  0073E0  45                 	db	69	;'E'
  1440  0073E1  72                 	db	114	;'r'
  1441  0073E2  72                 	db	114	;'r'
  1442  0073E3  6F                 	db	111	;'o'
  1443  0073E4  72                 	db	114	;'r'
  1444  0073E5  20                 	db	32
  1445  0073E6  53                 	db	83	;'S'
  1446  0073E7  74                 	db	116	;'t'
  1447  0073E8  61                 	db	97	;'a'
  1448  0073E9  74                 	db	116	;'t'
  1449  0073EA  65                 	db	101	;'e'
  1450  0073EB  20                 	db	32
  1451  0073EC  42                 	db	66	;'B'
  1452  0073ED  75                 	db	117	;'u'
  1453  0073EE  73                 	db	115	;'s'
  1454  0073EF  20                 	db	32
  1455  0073F0  50                 	db	80	;'P'
  1456  0073F1  61                 	db	97	;'a'
  1457  0073F2  73                 	db	115	;'s'
  1458  0073F3  73                 	db	115	;'s'
  1459  0073F4  69                 	db	105	;'i'
  1460  0073F5  76                 	db	118	;'v'
  1461  0073F6  65                 	db	101	;'e'
  1462  0073F7  20                 	db	32
  1463  0073F8  28                 	db	40
  1464  0073F9  52                 	db	82	;'R'
  1465  0073FA  45                 	db	69	;'E'
  1466  0073FB  52                 	db	82	;'R'
  1467  0073FC  52                 	db	82	;'R'
  1468  0073FD  43                 	db	67	;'C'
  1469  0073FE  4E                 	db	78	;'N'
  1470  0073FF  54                 	db	84	;'T'
  1471  007400  20                 	db	32
  1472  007401  3F                 	db	63	;'?'
  1473  007402  20                 	db	32
  1474  007403  31                 	db	49	;'1'
  1475  007404  32                 	db	50	;'2'
  1476  007405  38                 	db	56	;'8'
  1477  007406  29                 	db	41
  1478  007407  0D                 	db	13
  1479  007408  0A                 	db	10
  1480  007409  00                 	db	0
  1481  00740A                     STR_79:
  1482  00740A  2D                 	db	45
  1483  00740B  45                 	db	69	;'E'
  1484  00740C  52                 	db	82	;'R'
  1485  00740D  52                 	db	82	;'R'
  1486  00740E  4F                 	db	79	;'O'
  1487  00740F  52                 	db	82	;'R'
  1488  007410  20                 	db	32
  1489  007411  2D                 	db	45
  1490  007412  20                 	db	32
  1491  007413  4F                 	db	79	;'O'
  1492  007414  6E                 	db	110	;'n'
  1493  007415  65                 	db	101	;'e'
  1494  007416  20                 	db	32
  1495  007417  6F                 	db	111	;'o'
  1496  007418  72                 	db	114	;'r'
  1497  007419  20                 	db	32
  1498  00741A  6D                 	db	109	;'m'
  1499  00741B  6F                 	db	111	;'o'
  1500  00741C  72                 	db	114	;'r'
  1501  00741D  65                 	db	101	;'e'
  1502  00741E  20                 	db	32
  1503  00741F  72                 	db	114	;'r'
  1504  007420  65                 	db	101	;'e'
  1505  007421  67                 	db	103	;'g'
  1506  007422  69                 	db	105	;'i'
  1507  007423  73                 	db	115	;'s'
  1508  007424  74                 	db	116	;'t'
  1509  007425  65                 	db	101	;'e'
  1510  007426  72                 	db	114	;'r'
  1511  007427  28                 	db	40
  1512  007428  73                 	db	115	;'s'
  1513  007429  29                 	db	41
  1514  00742A  20                 	db	32
  1515  00742B  63                 	db	99	;'c'
  1516  00742C  6F                 	db	111	;'o'
  1517  00742D  75                 	db	117	;'u'
  1518  00742E  6C                 	db	108	;'l'
  1519  00742F  64                 	db	100	;'d'
  1520  007430  20                 	db	32
  1521  007431  6E                 	db	110	;'n'
  1522  007432  6F                 	db	111	;'o'
  1523  007433  74                 	db	116	;'t'
  1524  007434  20                 	db	32
  1525  007435  62                 	db	98	;'b'
  1526  007436  65                 	db	101	;'e'
  1527  007437  20                 	db	32
  1528  007438  72                 	db	114	;'r'
  1529  007439  65                 	db	101	;'e'
  1530  00743A  61                 	db	97	;'a'
  1531  00743B  64                 	db	100	;'d'
  1532  00743C  2E                 	db	46
  1533  00743D  0D                 	db	13
  1534  00743E  0A                 	db	10
  1535  00743F  00                 	db	0
  1536  007440                     STR_220:
  1537  007440  54                 	db	84	;'T'
  1538  007441  72                 	db	114	;'r'
  1539  007442  61                 	db	97	;'a'
  1540  007443  6E                 	db	110	;'n'
  1541  007444  73                 	db	115	;'s'
  1542  007445  6D                 	db	109	;'m'
  1543  007446  69                 	db	105	;'i'
  1544  007447  74                 	db	116	;'t'
  1545  007448  74                 	db	116	;'t'
  1546  007449  65                 	db	101	;'e'
  1547  00744A  72                 	db	114	;'r'
  1548  00744B  20                 	db	32
  1549  00744C  69                 	db	105	;'i'
  1550  00744D  6E                 	db	110	;'n'
  1551  00744E  20                 	db	32
  1552  00744F  45                 	db	69	;'E'
  1553  007450  72                 	db	114	;'r'
  1554  007451  72                 	db	114	;'r'
  1555  007452  6F                 	db	111	;'o'
  1556  007453  72                 	db	114	;'r'
  1557  007454  20                 	db	32
  1558  007455  53                 	db	83	;'S'
  1559  007456  74                 	db	116	;'t'
  1560  007457  61                 	db	97	;'a'
  1561  007458  74                 	db	116	;'t'
  1562  007459  65                 	db	101	;'e'
  1563  00745A  20                 	db	32
  1564  00745B  42                 	db	66	;'B'
  1565  00745C  75                 	db	117	;'u'
  1566  00745D  73                 	db	115	;'s'
  1567  00745E  20                 	db	32
  1568  00745F  4F                 	db	79	;'O'
  1569  007460  46                 	db	70	;'F'
  1570  007461  46                 	db	70	;'F'
  1571  007462  20                 	db	32
  1572  007463  28                 	db	40
  1573  007464  54                 	db	84	;'T'
  1574  007465  45                 	db	69	;'E'
  1575  007466  52                 	db	82	;'R'
  1576  007467  52                 	db	82	;'R'
  1577  007468  43                 	db	67	;'C'
  1578  007469  4E                 	db	78	;'N'
  1579  00746A  54                 	db	84	;'T'
  1580  00746B  20                 	db	32
  1581  00746C  3F                 	db	63	;'?'
  1582  00746D  20                 	db	32
  1583  00746E  32                 	db	50	;'2'
  1584  00746F  35                 	db	53	;'5'
  1585  007470  36                 	db	54	;'6'
  1586  007471  29                 	db	41
  1587  007472  0D                 	db	13
  1588  007473  0A                 	db	10
  1589  007474  00                 	db	0
  1590  007475                     STR_228:
  1591  007475  54                 	db	84	;'T'
  1592  007476  72                 	db	114	;'r'
  1593  007477  61                 	db	97	;'a'
  1594  007478  6E                 	db	110	;'n'
  1595  007479  73                 	db	115	;'s'
  1596  00747A  6D                 	db	109	;'m'
  1597  00747B  69                 	db	105	;'i'
  1598  00747C  74                 	db	116	;'t'
  1599  00747D  74                 	db	116	;'t'
  1600  00747E  65                 	db	101	;'e'
  1601  00747F  72                 	db	114	;'r'
  1602  007480  20                 	db	32
  1603  007481  6F                 	db	111	;'o'
  1604  007482  72                 	db	114	;'r'
  1605  007483  20                 	db	32
  1606  007484  52                 	db	82	;'R'
  1607  007485  65                 	db	101	;'e'
  1608  007486  63                 	db	99	;'c'
  1609  007487  65                 	db	101	;'e'
  1610  007488  69                 	db	105	;'i'
  1611  007489  76                 	db	118	;'v'
  1612  00748A  65                 	db	101	;'e'
  1613  00748B  72                 	db	114	;'r'
  1614  00748C  20                 	db	32
  1615  00748D  69                 	db	105	;'i'
  1616  00748E  73                 	db	115	;'s'
  1617  00748F  20                 	db	32
  1618  007490  69                 	db	105	;'i'
  1619  007491  6E                 	db	110	;'n'
  1620  007492  20                 	db	32
  1621  007493  45                 	db	69	;'E'
  1622  007494  72                 	db	114	;'r'
  1623  007495  72                 	db	114	;'r'
  1624  007496  6F                 	db	111	;'o'
  1625  007497  72                 	db	114	;'r'
  1626  007498  20                 	db	32
  1627  007499  53                 	db	83	;'S'
  1628  00749A  74                 	db	116	;'t'
  1629  00749B  61                 	db	97	;'a'
  1630  00749C  74                 	db	116	;'t'
  1631  00749D  65                 	db	101	;'e'
  1632  00749E  20                 	db	32
  1633  00749F  57                 	db	87	;'W'
  1634  0074A0  61                 	db	97	;'a'
  1635  0074A1  72                 	db	114	;'r'
  1636  0074A2  6E                 	db	110	;'n'
  1637  0074A3  69                 	db	105	;'i'
  1638  0074A4  6E                 	db	110	;'n'
  1639  0074A5  67                 	db	103	;'g'
  1640  0074A6  0D                 	db	13
  1641  0074A7  0A                 	db	10
  1642  0074A8  00                 	db	0
  1643  0074A9                     STR_234:
  1644  0074A9  4C                 	db	76	;'L'
  1645  0074AA  49                 	db	73	;'I'
  1646  0074AB  53                 	db	83	;'S'
  1647  0074AC  54                 	db	84	;'T'
  1648  0074AD  45                 	db	69	;'E'
  1649  0074AE  4E                 	db	78	;'N'
  1650  0074AF  20                 	db	32
  1651  0074B0  2D                 	db	45
  1652  0074B1  20                 	db	32
  1653  0074B2  4F                 	db	79	;'O'
  1654  0074B3  70                 	db	112	;'p'
  1655  0074B4  65                 	db	101	;'e'
  1656  0074B5  6E                 	db	110	;'n'
  1657  0074B6  20                 	db	32
  1658  0074B7  43                 	db	67	;'C'
  1659  0074B8  41                 	db	65	;'A'
  1660  0074B9  4E                 	db	78	;'N'
  1661  0074BA  20                 	db	32
  1662  0074BB  69                 	db	105	;'i'
  1663  0074BC  6E                 	db	110	;'n'
  1664  0074BD  74                 	db	116	;'t'
  1665  0074BE  65                 	db	101	;'e'
  1666  0074BF  72                 	db	114	;'r'
  1667  0074C0  66                 	db	102	;'f'
  1668  0074C1  61                 	db	97	;'a'
  1669  0074C2  63                 	db	99	;'c'
  1670  0074C3  65                 	db	101	;'e'
  1671  0074C4  20                 	db	32
  1672  0074C5  69                 	db	105	;'i'
  1673  0074C6  6E                 	db	110	;'n'
  1674  0074C7  20                 	db	32
  1675  0074C8  6C                 	db	108	;'l'
  1676  0074C9  69                 	db	105	;'i'
  1677  0074CA  73                 	db	115	;'s'
  1678  0074CB  74                 	db	116	;'t'
  1679  0074CC  65                 	db	101	;'e'
  1680  0074CD  6E                 	db	110	;'n'
  1681  0074CE  20                 	db	32
  1682  0074CF  6F                 	db	111	;'o'
  1683  0074D0  6E                 	db	110	;'n'
  1684  0074D1  6C                 	db	108	;'l'
  1685  0074D2  79                 	db	121	;'y'
  1686  0074D3  20                 	db	32
  1687  0074D4  6D                 	db	109	;'m'
  1688  0074D5  6F                 	db	111	;'o'
  1689  0074D6  64                 	db	100	;'d'
  1690  0074D7  65                 	db	101	;'e'
  1691  0074D8  2E                 	db	46
  1692  0074D9  0D                 	db	13
  1693  0074DA  0A                 	db	10
  1694  0074DB  00                 	db	0
  1695  0074DC                     STR_116:
  1696  0074DC  2D                 	db	45
  1697  0074DD  45                 	db	69	;'E'
  1698  0074DE  52                 	db	82	;'R'
  1699  0074DF  52                 	db	82	;'R'
  1700  0074E0  4F                 	db	79	;'O'
  1701  0074E1  52                 	db	82	;'R'
  1702  0074E2  20                 	db	32
  1703  0074E3  2D                 	db	45
  1704  0074E4  20                 	db	32
  1705  0074E5  4D                 	db	77	;'M'
  1706  0074E6  61                 	db	97	;'a'
  1707  0074E7  73                 	db	115	;'s'
  1708  0074E8  6B                 	db	107	;'k'
  1709  0074E9  20                 	db	32
  1710  0074EA  6E                 	db	110	;'n'
  1711  0074EB  75                 	db	117	;'u'
  1712  0074EC  6D                 	db	109	;'m'
  1713  0074ED  62                 	db	98	;'b'
  1714  0074EE  65                 	db	101	;'e'
  1715  0074EF  72                 	db	114	;'r'
  1716  0074F0  20                 	db	32
  1717  0074F1  63                 	db	99	;'c'
  1718  0074F2  61                 	db	97	;'a'
  1719  0074F3  6E                 	db	110	;'n'
  1720  0074F4  20                 	db	32
  1721  0074F5  6F                 	db	111	;'o'
  1722  0074F6  6E                 	db	110	;'n'
  1723  0074F7  6C                 	db	108	;'l'
  1724  0074F8  79                 	db	121	;'y'
  1725  0074F9  20                 	db	32
  1726  0074FA  62                 	db	98	;'b'
  1727  0074FB  65                 	db	101	;'e'
  1728  0074FC  20                 	db	32
  1729  0074FD  73                 	db	115	;'s'
  1730  0074FE  65                 	db	101	;'e'
  1731  0074FF  74                 	db	116	;'t'
  1732  007500  20                 	db	32
  1733  007501  61                 	db	97	;'a'
  1734  007502  73                 	db	115	;'s'
  1735  007503  20                 	db	32
  1736  007504  30                 	db	48	;'0'
  1737  007505  20                 	db	32
  1738  007506  6F                 	db	111	;'o'
  1739  007507  72                 	db	114	;'r'
  1740  007508  20                 	db	32
  1741  007509  31                 	db	49	;'1'
  1742  00750A  2E                 	db	46
  1743  00750B  0D                 	db	13
  1744  00750C  0A                 	db	10
  1745  00750D  00                 	db	0
  1746  00750E                     STR_235:
  1747  00750E  4C                 	db	76	;'L'
  1748  00750F  4F                 	db	79	;'O'
  1749  007510  4F                 	db	79	;'O'
  1750  007511  50                 	db	80	;'P'
  1751  007512  42                 	db	66	;'B'
  1752  007513  41                 	db	65	;'A'
  1753  007514  43                 	db	67	;'C'
  1754  007515  4B                 	db	75	;'K'
  1755  007516  20                 	db	32
  1756  007517  2D                 	db	45
  1757  007518  20                 	db	32
  1758  007519  4F                 	db	79	;'O'
  1759  00751A  70                 	db	112	;'p'
  1760  00751B  65                 	db	101	;'e'
  1761  00751C  6E                 	db	110	;'n'
  1762  00751D  20                 	db	32
  1763  00751E  43                 	db	67	;'C'
  1764  00751F  41                 	db	65	;'A'
  1765  007520  4E                 	db	78	;'N'
  1766  007521  20                 	db	32
  1767  007522  69                 	db	105	;'i'
  1768  007523  6E                 	db	110	;'n'
  1769  007524  74                 	db	116	;'t'
  1770  007525  65                 	db	101	;'e'
  1771  007526  72                 	db	114	;'r'
  1772  007527  66                 	db	102	;'f'
  1773  007528  61                 	db	97	;'a'
  1774  007529  63                 	db	99	;'c'
  1775  00752A  65                 	db	101	;'e'
  1776  00752B  20                 	db	32
  1777  00752C  69                 	db	105	;'i'
  1778  00752D  6E                 	db	110	;'n'
  1779  00752E  20                 	db	32
  1780  00752F  6C                 	db	108	;'l'
  1781  007530  6F                 	db	111	;'o'
  1782  007531  6F                 	db	111	;'o'
  1783  007532  70                 	db	112	;'p'
  1784  007533  62                 	db	98	;'b'
  1785  007534  61                 	db	97	;'a'
  1786  007535  63                 	db	99	;'c'
  1787  007536  6B                 	db	107	;'k'
  1788  007537  20                 	db	32
  1789  007538  6D                 	db	109	;'m'
  1790  007539  6F                 	db	111	;'o'
  1791  00753A  64                 	db	100	;'d'
  1792  00753B  65                 	db	101	;'e'
  1793  00753C  2E                 	db	46
  1794  00753D  0D                 	db	13
  1795  00753E  0A                 	db	10
  1796  00753F  00                 	db	0
  1797  007540                     STR_237:
  1798  007540  56                 	db	86	;'V'
  1799  007541  45                 	db	69	;'E'
  1800  007542  52                 	db	82	;'R'
  1801  007543  53                 	db	83	;'S'
  1802  007544  49                 	db	73	;'I'
  1803  007545  4F                 	db	79	;'O'
  1804  007546  4E                 	db	78	;'N'
  1805  007547  20                 	db	32
  1806  007548  2D                 	db	45
  1807  007549  20                 	db	32
  1808  00754A  44                 	db	68	;'D'
  1809  00754B  69                 	db	105	;'i'
  1810  00754C  73                 	db	115	;'s'
  1811  00754D  70                 	db	112	;'p'
  1812  00754E  6C                 	db	108	;'l'
  1813  00754F  61                 	db	97	;'a'
  1814  007550  79                 	db	121	;'y'
  1815  007551  20                 	db	32
  1816  007552  66                 	db	102	;'f'
  1817  007553  69                 	db	105	;'i'
  1818  007554  72                 	db	114	;'r'
  1819  007555  6D                 	db	109	;'m'
  1820  007556  77                 	db	119	;'w'
  1821  007557  61                 	db	97	;'a'
  1822  007558  72                 	db	114	;'r'
  1823  007559  65                 	db	101	;'e'
  1824  00755A  20                 	db	32
  1825  00755B  76                 	db	118	;'v'
  1826  00755C  65                 	db	101	;'e'
  1827  00755D  72                 	db	114	;'r'
  1828  00755E  73                 	db	115	;'s'
  1829  00755F  69                 	db	105	;'i'
  1830  007560  6F                 	db	111	;'o'
  1831  007561  6E                 	db	110	;'n'
  1832  007562  20                 	db	32
  1833  007563  69                 	db	105	;'i'
  1834  007564  6E                 	db	110	;'n'
  1835  007565  66                 	db	102	;'f'
  1836  007566  6F                 	db	111	;'o'
  1837  007567  72                 	db	114	;'r'
  1838  007568  6D                 	db	109	;'m'
  1839  007569  61                 	db	97	;'a'
  1840  00756A  74                 	db	116	;'t'
  1841  00756B  69                 	db	105	;'i'
  1842  00756C  6F                 	db	111	;'o'
  1843  00756D  6E                 	db	110	;'n'
  1844  00756E  2E                 	db	46
  1845  00756F  0D                 	db	13
  1846  007570  0A                 	db	10
  1847  007571  00                 	db	0
  1848  007572                     STR_257:
  1849  007572  20                 	db	32
  1850  007573  20                 	db	32
  1851  007574  20                 	db	32
  1852  007575  20                 	db	32
  1853  007576  20                 	db	32
  1854  007577  20                 	db	32
  1855  007578  20                 	db	32
  1856  007579  20                 	db	32
  1857  00757A  20                 	db	32
  1858  00757B  20                 	db	32
  1859  00757C  20                 	db	32
  1860  00757D  20                 	db	32
  1861  00757E  20                 	db	32
  1862  00757F  20                 	db	32
  1863  007580  20                 	db	32
  1864  007581  20                 	db	32
  1865  007582  46                 	db	70	;'F'
  1866  007583  6F                 	db	111	;'o'
  1867  007584  72                 	db	114	;'r'
  1868  007585  6D                 	db	109	;'m'
  1869  007586  61                 	db	97	;'a'
  1870  007587  74                 	db	116	;'t'
  1871  007588  3A                 	db	58	;':'
  1872  007589  20                 	db	32
  1873  00758A  73                 	db	115	;'s'
  1874  00758B  65                 	db	101	;'e'
  1875  00758C  74                 	db	116	;'t'
  1876  00758D  20                 	db	32
  1877  00758E  72                 	db	114	;'r'
  1878  00758F  77                 	db	119	;'w'
  1879  007590  74                 	db	116	;'t'
  1880  007591  69                 	db	105	;'i'
  1881  007592  6D                 	db	109	;'m'
  1882  007593  65                 	db	101	;'e'
  1883  007594  6F                 	db	111	;'o'
  1884  007595  75                 	db	117	;'u'
  1885  007596  74                 	db	116	;'t'
  1886  007597  20                 	db	32
  1887  007598  74                 	db	116	;'t'
  1888  007599  69                 	db	105	;'i'
  1889  00759A  6D                 	db	109	;'m'
  1890  00759B  65                 	db	101	;'e'
  1891  00759C  6F                 	db	111	;'o'
  1892  00759D  75                 	db	117	;'u'
  1893  00759E  74                 	db	116	;'t'
  1894  00759F  2E                 	db	46
  1895  0075A0  0D                 	db	13
  1896  0075A1  0A                 	db	10
  1897  0075A2  00                 	db	0
  1898  0075A3                     STR_255:
  1899  0075A3  20                 	db	32
  1900  0075A4  20                 	db	32
  1901  0075A5  20                 	db	32
  1902  0075A6  20                 	db	32
  1903  0075A7  44                 	db	68	;'D'
  1904  0075A8  45                 	db	69	;'E'
  1905  0075A9  43                 	db	67	;'C'
  1906  0075AA  49                 	db	73	;'I'
  1907  0075AB  4D                 	db	77	;'M'
  1908  0075AC  41                 	db	65	;'A'
  1909  0075AD  4C                 	db	76	;'L'
  1910  0075AE  20                 	db	32
  1911  0075AF  2D                 	db	45
  1912  0075B0  20                 	db	32
  1913  0075B1  44                 	db	68	;'D'
  1914  0075B2  69                 	db	105	;'i'
  1915  0075B3  73                 	db	115	;'s'
  1916  0075B4  70                 	db	112	;'p'
  1917  0075B5  6C                 	db	108	;'l'
  1918  0075B6  61                 	db	97	;'a'
  1919  0075B7  79                 	db	121	;'y'
  1920  0075B8  20                 	db	32
  1921  0075B9  6E                 	db	110	;'n'
  1922  0075BA  75                 	db	117	;'u'
  1923  0075BB  6D                 	db	109	;'m'
  1924  0075BC  65                 	db	101	;'e'
  1925  0075BD  72                 	db	114	;'r'
  1926  0075BE  69                 	db	105	;'i'
  1927  0075BF  63                 	db	99	;'c'
  1928  0075C0  61                 	db	97	;'a'
  1929  0075C1  6C                 	db	108	;'l'
  1930  0075C2  73                 	db	115	;'s'
  1931  0075C3  20                 	db	32
  1932  0075C4  69                 	db	105	;'i'
  1933  0075C5  6E                 	db	110	;'n'
  1934  0075C6  20                 	db	32
  1935  0075C7  64                 	db	100	;'d'
  1936  0075C8  65                 	db	101	;'e'
  1937  0075C9  63                 	db	99	;'c'
  1938  0075CA  69                 	db	105	;'i'
  1939  0075CB  6D                 	db	109	;'m'
  1940  0075CC  61                 	db	97	;'a'
  1941  0075CD  6C                 	db	108	;'l'
  1942  0075CE  2E                 	db	46
  1943  0075CF  0D                 	db	13
  1944  0075D0  0A                 	db	10
  1945  0075D1  00                 	db	0
  1946  0075D2                     STR_254:
  1947  0075D2  20                 	db	32
  1948  0075D3  20                 	db	32
  1949  0075D4  20                 	db	32
  1950  0075D5  20                 	db	32
  1951  0075D6  48                 	db	72	;'H'
  1952  0075D7  45                 	db	69	;'E'
  1953  0075D8  58                 	db	88	;'X'
  1954  0075D9  20                 	db	32
  1955  0075DA  2D                 	db	45
  1956  0075DB  20                 	db	32
  1957  0075DC  44                 	db	68	;'D'
  1958  0075DD  69                 	db	105	;'i'
  1959  0075DE  73                 	db	115	;'s'
  1960  0075DF  70                 	db	112	;'p'
  1961  0075E0  6C                 	db	108	;'l'
  1962  0075E1  61                 	db	97	;'a'
  1963  0075E2  79                 	db	121	;'y'
  1964  0075E3  20                 	db	32
  1965  0075E4  6E                 	db	110	;'n'
  1966  0075E5  75                 	db	117	;'u'
  1967  0075E6  6D                 	db	109	;'m'
  1968  0075E7  65                 	db	101	;'e'
  1969  0075E8  72                 	db	114	;'r'
  1970  0075E9  69                 	db	105	;'i'
  1971  0075EA  63                 	db	99	;'c'
  1972  0075EB  61                 	db	97	;'a'
  1973  0075EC  6C                 	db	108	;'l'
  1974  0075ED  73                 	db	115	;'s'
  1975  0075EE  20                 	db	32
  1976  0075EF  69                 	db	105	;'i'
  1977  0075F0  6E                 	db	110	;'n'
  1978  0075F1  20                 	db	32
  1979  0075F2  68                 	db	104	;'h'
  1980  0075F3  65                 	db	101	;'e'
  1981  0075F4  78                 	db	120	;'x'
  1982  0075F5  61                 	db	97	;'a'
  1983  0075F6  64                 	db	100	;'d'
  1984  0075F7  65                 	db	101	;'e'
  1985  0075F8  63                 	db	99	;'c'
  1986  0075F9  69                 	db	105	;'i'
  1987  0075FA  6D                 	db	109	;'m'
  1988  0075FB  61                 	db	97	;'a'
  1989  0075FC  6C                 	db	108	;'l'
  1990  0075FD  2E                 	db	46
  1991  0075FE  0D                 	db	13
  1992  0075FF  0A                 	db	10
  1993  007600  00                 	db	0
  1994  007601                     STR_245:
  1995  007601  46                 	db	70	;'F'
  1996  007602  49                 	db	73	;'I'
  1997  007603  4E                 	db	78	;'N'
  1998  007604  44                 	db	68	;'D'
  1999  007605  20                 	db	32
  2000  007606  2D                 	db	45
  2001  007607  20                 	db	32
  2002  007608  46                 	db	70	;'F'
  2003  007609  69                 	db	105	;'i'
  2004  00760A  6E                 	db	110	;'n'
  2005  00760B  64                 	db	100	;'d'
  2006  00760C  20                 	db	32
  2007  00760D  61                 	db	97	;'a'
  2008  00760E  76                 	db	118	;'v'
  2009  00760F  61                 	db	97	;'a'
  2010  007610  69                 	db	105	;'i'
  2011  007611  6C                 	db	108	;'l'
  2012  007612  61                 	db	97	;'a'
  2013  007613  62                 	db	98	;'b'
  2014  007614  6C                 	db	108	;'l'
  2015  007615  65                 	db	101	;'e'
  2016  007616  20                 	db	32
  2017  007617  43                 	db	67	;'C'
  2018  007618  41                 	db	65	;'A'
  2019  007619  4E                 	db	78	;'N'
  2020  00761A  34                 	db	52	;'4'
  2021  00761B  56                 	db	86	;'V'
  2022  00761C  53                 	db	83	;'S'
  2023  00761D  43                 	db	67	;'C'
  2024  00761E  50                 	db	80	;'P'
  2025  00761F  20                 	db	32
  2026  007620  6E                 	db	110	;'n'
  2027  007621  6F                 	db	111	;'o'
  2028  007622  64                 	db	100	;'d'
  2029  007623  65                 	db	101	;'e'
  2030  007624  73                 	db	115	;'s'
  2031  007625  20                 	db	32
  2032  007626  6F                 	db	111	;'o'
  2033  007627  6E                 	db	110	;'n'
  2034  007628  20                 	db	32
  2035  007629  62                 	db	98	;'b'
  2036  00762A  75                 	db	117	;'u'
  2037  00762B  73                 	db	115	;'s'
  2038  00762C  2E                 	db	46
  2039  00762D  0D                 	db	13
  2040  00762E  0A                 	db	10
  2041  00762F  00                 	db	0
  2042  007630                     STR_233:
  2043  007630  53                 	db	83	;'S'
  2044  007631  49                 	db	73	;'I'
  2045  007632  4C                 	db	76	;'L'
  2046  007633  45                 	db	69	;'E'
  2047  007634  4E                 	db	78	;'N'
  2048  007635  54                 	db	84	;'T'
  2049  007636  20                 	db	32
  2050  007637  2D                 	db	45
  2051  007638  20                 	db	32
  2052  007639  4F                 	db	79	;'O'
  2053  00763A  70                 	db	112	;'p'
  2054  00763B  65                 	db	101	;'e'
  2055  00763C  6E                 	db	110	;'n'
  2056  00763D  20                 	db	32
  2057  00763E  43                 	db	67	;'C'
  2058  00763F  41                 	db	65	;'A'
  2059  007640  4E                 	db	78	;'N'
  2060  007641  20                 	db	32
  2061  007642  69                 	db	105	;'i'
  2062  007643  6E                 	db	110	;'n'
  2063  007644  74                 	db	116	;'t'
  2064  007645  65                 	db	101	;'e'
  2065  007646  72                 	db	114	;'r'
  2066  007647  66                 	db	102	;'f'
  2067  007648  61                 	db	97	;'a'
  2068  007649  63                 	db	99	;'c'
  2069  00764A  65                 	db	101	;'e'
  2070  00764B  20                 	db	32
  2071  00764C  69                 	db	105	;'i'
  2072  00764D  6E                 	db	110	;'n'
  2073  00764E  20                 	db	32
  2074  00764F  73                 	db	115	;'s'
  2075  007650  69                 	db	105	;'i'
  2076  007651  6C                 	db	108	;'l'
  2077  007652  65                 	db	101	;'e'
  2078  007653  6E                 	db	110	;'n'
  2079  007654  74                 	db	116	;'t'
  2080  007655  20                 	db	32
  2081  007656  6D                 	db	109	;'m'
  2082  007657  6F                 	db	111	;'o'
  2083  007658  64                 	db	100	;'d'
  2084  007659  65                 	db	101	;'e'
  2085  00765A  2E                 	db	46
  2086  00765B  0D                 	db	13
  2087  00765C  0A                 	db	10
  2088  00765D  00                 	db	0
  2089  00765E                     STR_238:
  2090  00765E  49                 	db	73	;'I'
  2091  00765F  46                 	db	70	;'F'
  2092  007660  4D                 	db	77	;'M'
  2093  007661  4F                 	db	79	;'O'
  2094  007662  44                 	db	68	;'D'
  2095  007663  45                 	db	69	;'E'
  2096  007664  20                 	db	32
  2097  007665  2D                 	db	45
  2098  007666  20                 	db	32
  2099  007667  44                 	db	68	;'D'
  2100  007668  69                 	db	105	;'i'
  2101  007669  73                 	db	115	;'s'
  2102  00766A  70                 	db	112	;'p'
  2103  00766B  6C                 	db	108	;'l'
  2104  00766C  61                 	db	97	;'a'
  2105  00766D  79                 	db	121	;'y'
  2106  00766E  20                 	db	32
  2107  00766F  73                 	db	115	;'s'
  2108  007670  65                 	db	101	;'e'
  2109  007671  6C                 	db	108	;'l'
  2110  007672  65                 	db	101	;'e'
  2111  007673  63                 	db	99	;'c'
  2112  007674  74                 	db	116	;'t'
  2113  007675  65                 	db	101	;'e'
  2114  007676  64                 	db	100	;'d'
  2115  007677  20                 	db	32
  2116  007678  69                 	db	105	;'i'
  2117  007679  6E                 	db	110	;'n'
  2118  00767A  74                 	db	116	;'t'
  2119  00767B  65                 	db	101	;'e'
  2120  00767C  72                 	db	114	;'r'
  2121  00767D  66                 	db	102	;'f'
  2122  00767E  61                 	db	97	;'a'
  2123  00767F  63                 	db	99	;'c'
  2124  007680  65                 	db	101	;'e'
  2125  007681  20                 	db	32
  2126  007682  6D                 	db	109	;'m'
  2127  007683  6F                 	db	111	;'o'
  2128  007684  64                 	db	100	;'d'
  2129  007685  65                 	db	101	;'e'
  2130  007686  2E                 	db	46
  2131  007687  0D                 	db	13
  2132  007688  0A                 	db	10
  2133  007689  00                 	db	0
  2134  00768A                     STR_232:
  2135  00768A  4F                 	db	79	;'O'
  2136  00768B  50                 	db	80	;'P'
  2137  00768C  45                 	db	69	;'E'
  2138  00768D  4E                 	db	78	;'N'
  2139  00768E  20                 	db	32
  2140  00768F  2D                 	db	45
  2141  007690  20                 	db	32
  2142  007691  4F                 	db	79	;'O'
  2143  007692  70                 	db	112	;'p'
  2144  007693  65                 	db	101	;'e'
  2145  007694  6E                 	db	110	;'n'
  2146  007695  20                 	db	32
  2147  007696  43                 	db	67	;'C'
  2148  007697  41                 	db	65	;'A'
  2149  007698  4E                 	db	78	;'N'
  2150  007699  20                 	db	32
  2151  00769A  69                 	db	105	;'i'
  2152  00769B  6E                 	db	110	;'n'
  2153  00769C  74                 	db	116	;'t'
  2154  00769D  65                 	db	101	;'e'
  2155  00769E  72                 	db	114	;'r'
  2156  00769F  66                 	db	102	;'f'
  2157  0076A0  61                 	db	97	;'a'
  2158  0076A1  63                 	db	99	;'c'
  2159  0076A2  65                 	db	101	;'e'
  2160  0076A3  20                 	db	32
  2161  0076A4  69                 	db	105	;'i'
  2162  0076A5  6E                 	db	110	;'n'
  2163  0076A6  20                 	db	32
  2164  0076A7  6E                 	db	110	;'n'
  2165  0076A8  6F                 	db	111	;'o'
  2166  0076A9  72                 	db	114	;'r'
  2167  0076AA  6D                 	db	109	;'m'
  2168  0076AB  61                 	db	97	;'a'
  2169  0076AC  6C                 	db	108	;'l'
  2170  0076AD  20                 	db	32
  2171  0076AE  6D                 	db	109	;'m'
  2172  0076AF  6F                 	db	111	;'o'
  2173  0076B0  64                 	db	100	;'d'
  2174  0076B1  65                 	db	101	;'e'
  2175  0076B2  2E                 	db	46
  2176  0076B3  0D                 	db	13
  2177  0076B4  0A                 	db	10
  2178  0076B5  00                 	db	0
  2179  0076B6                     STR_129:
  2180  0076B6  2B                 	db	43
  2181  0076B7  4F                 	db	79	;'O'
  2182  0076B8  4B                 	db	75	;'K'
  2183  0076B9  20                 	db	32
  2184  0076BA  2D                 	db	45
  2185  0076BB  20                 	db	32
  2186  0076BC  4E                 	db	78	;'N'
  2187  0076BD  75                 	db	117	;'u'
  2188  0076BE  6D                 	db	109	;'m'
  2189  0076BF  65                 	db	101	;'e'
  2190  0076C0  72                 	db	114	;'r'
  2191  0076C1  69                 	db	105	;'i'
  2192  0076C2  63                 	db	99	;'c'
  2193  0076C3  61                 	db	97	;'a'
  2194  0076C4  6C                 	db	108	;'l'
  2195  0076C5  20                 	db	32
  2196  0076C6  6F                 	db	111	;'o'
  2197  0076C7  75                 	db	117	;'u'
  2198  0076C8  74                 	db	116	;'t'
  2199  0076C9  70                 	db	112	;'p'
  2200  0076CA  75                 	db	117	;'u'
  2201  0076CB  74                 	db	116	;'t'
  2202  0076CC  20                 	db	32
  2203  0076CD  6E                 	db	110	;'n'
  2204  0076CE  6F                 	db	111	;'o'
  2205  0076CF  77                 	db	119	;'w'
  2206  0076D0  20                 	db	32
  2207  0076D1  69                 	db	105	;'i'
  2208  0076D2  6E                 	db	110	;'n'
  2209  0076D3  20                 	db	32
  2210  0076D4  68                 	db	104	;'h'
  2211  0076D5  65                 	db	101	;'e'
  2212  0076D6  78                 	db	120	;'x'
  2213  0076D7  61                 	db	97	;'a'
  2214  0076D8  64                 	db	100	;'d'
  2215  0076D9  65                 	db	101	;'e'
  2216  0076DA  63                 	db	99	;'c'
  2217  0076DB  69                 	db	105	;'i'
  2218  0076DC  6D                 	db	109	;'m'
  2219  0076DD  61                 	db	97	;'a'
  2220  0076DE  6C                 	db	108	;'l'
  2221  0076DF  0D                 	db	13
  2222  0076E0  0A                 	db	10
  2223  0076E1  00                 	db	0
  2224  0076E2                     STR_106:
  2225  0076E2  2D                 	db	45
  2226  0076E3  45                 	db	69	;'E'
  2227  0076E4  52                 	db	82	;'R'
  2228  0076E5  52                 	db	82	;'R'
  2229  0076E6  4F                 	db	79	;'O'
  2230  0076E7  52                 	db	82	;'R'
  2231  0076E8  20                 	db	32
  2232  0076E9  2D                 	db	45
  2233  0076EA  20                 	db	32
  2234  0076EB  66                 	db	102	;'f'
  2235  0076EC  69                 	db	105	;'i'
  2236  0076ED  6C                 	db	108	;'l'
  2237  0076EE  74                 	db	116	;'t'
  2238  0076EF  65                 	db	101	;'e'
  2239  0076F0  72                 	db	114	;'r'
  2240  0076F1  20                 	db	32
  2241  0076F2  66                 	db	102	;'f'
  2242  0076F3  6F                 	db	111	;'o'
  2243  0076F4  72                 	db	114	;'r'
  2244  0076F5  20                 	db	32
  2245  0076F6  70                 	db	112	;'p'
  2246  0076F7  72                 	db	114	;'r'
  2247  0076F8  69                 	db	105	;'i'
  2248  0076F9  6F                 	db	111	;'o'
  2249  0076FA  72                 	db	114	;'r'
  2250  0076FB  69                 	db	105	;'i'
  2251  0076FC  74                 	db	116	;'t'
  2252  0076FD  79                 	db	121	;'y'
  2253  0076FE  20                 	db	32
  2254  0076FF  69                 	db	105	;'i'
  2255  007700  73                 	db	115	;'s'
  2256  007701  20                 	db	32
  2257  007702  6D                 	db	109	;'m'
  2258  007703  69                 	db	105	;'i'
  2259  007704  73                 	db	115	;'s'
  2260  007705  73                 	db	115	;'s'
  2261  007706  69                 	db	105	;'i'
  2262  007707  6E                 	db	110	;'n'
  2263  007708  67                 	db	103	;'g'
  2264  007709  0D                 	db	13
  2265  00770A  0A                 	db	10
  2266  00770B  00                 	db	0
  2267  00770C                     STR_112:
  2268  00770C  2D                 	db	45
  2269  00770D  45                 	db	69	;'E'
  2270  00770E  52                 	db	82	;'R'
  2271  00770F  52                 	db	82	;'R'
  2272  007710  4F                 	db	79	;'O'
  2273  007711  52                 	db	82	;'R'
  2274  007712  20                 	db	32
  2275  007713  2D                 	db	45
  2276  007714  20                 	db	32
  2277  007715  66                 	db	102	;'f'
  2278  007716  69                 	db	105	;'i'
  2279  007717  6C                 	db	108	;'l'
  2280  007718  74                 	db	116	;'t'
  2281  007719  65                 	db	101	;'e'
  2282  00771A  72                 	db	114	;'r'
  2283  00771B  20                 	db	32
  2284  00771C  66                 	db	102	;'f'
  2285  00771D  6F                 	db	111	;'o'
  2286  00771E  72                 	db	114	;'r'
  2287  00771F  20                 	db	32
  2288  007720  6E                 	db	110	;'n'
  2289  007721  69                 	db	105	;'i'
  2290  007722  64                 	db	100	;'d'
  2291  007723  65                 	db	101	;'e'
  2292  007724  20                 	db	32
  2293  007725  69                 	db	105	;'i'
  2294  007726  64                 	db	100	;'d'
  2295  007727  20                 	db	32
  2296  007728  69                 	db	105	;'i'
  2297  007729  73                 	db	115	;'s'
  2298  00772A  20                 	db	32
  2299  00772B  6D                 	db	109	;'m'
  2300  00772C  69                 	db	105	;'i'
  2301  00772D  73                 	db	115	;'s'
  2302  00772E  73                 	db	115	;'s'
  2303  00772F  69                 	db	105	;'i'
  2304  007730  6E                 	db	110	;'n'
  2305  007731  67                 	db	103	;'g'
  2306  007732  0D                 	db	13
  2307  007733  0A                 	db	10
  2308  007734  00                 	db	0
  2309  007735                     STR_244:
  2310  007735  48                 	db	72	;'H'
  2311  007736  45                 	db	69	;'E'
  2312  007737  4C                 	db	76	;'L'
  2313  007738  50                 	db	80	;'P'
  2314  007739  20                 	db	32
  2315  00773A  2D                 	db	45
  2316  00773B  20                 	db	32
  2317  00773C  44                 	db	68	;'D'
  2318  00773D  69                 	db	105	;'i'
  2319  00773E  73                 	db	115	;'s'
  2320  00773F  70                 	db	112	;'p'
  2321  007740  6C                 	db	108	;'l'
  2322  007741  61                 	db	97	;'a'
  2323  007742  79                 	db	121	;'y'
  2324  007743  20                 	db	32
  2325  007744  74                 	db	116	;'t'
  2326  007745  68                 	db	104	;'h'
  2327  007746  69                 	db	105	;'i'
  2328  007747  73                 	db	115	;'s'
  2329  007748  20                 	db	32
  2330  007749  68                 	db	104	;'h'
  2331  00774A  65                 	db	101	;'e'
  2332  00774B  6C                 	db	108	;'l'
  2333  00774C  70                 	db	112	;'p'
  2334  00774D  20                 	db	32
  2335  00774E  69                 	db	105	;'i'
  2336  00774F  6E                 	db	110	;'n'
  2337  007750  66                 	db	102	;'f'
  2338  007751  6F                 	db	111	;'o'
  2339  007752  72                 	db	114	;'r'
  2340  007753  6D                 	db	109	;'m'
  2341  007754  61                 	db	97	;'a'
  2342  007755  74                 	db	116	;'t'
  2343  007756  69                 	db	105	;'i'
  2344  007757  6F                 	db	111	;'o'
  2345  007758  6E                 	db	110	;'n'
  2346  007759  2E                 	db	46
  2347  00775A  0D                 	db	13
  2348  00775B  0A                 	db	10
  2349  00775C  00                 	db	0
  2350  00775D                     STR_119:
  2351  00775D  2D                 	db	45
  2352  00775E  45                 	db	69	;'E'
  2353  00775F  52                 	db	82	;'R'
  2354  007760  52                 	db	82	;'R'
  2355  007761  4F                 	db	79	;'O'
  2356  007762  52                 	db	82	;'R'
  2357  007763  20                 	db	32
  2358  007764  2D                 	db	45
  2359  007765  20                 	db	32
  2360  007766  6D                 	db	109	;'m'
  2361  007767  61                 	db	97	;'a'
  2362  007768  73                 	db	115	;'s'
  2363  007769  6B                 	db	107	;'k'
  2364  00776A  20                 	db	32
  2365  00776B  66                 	db	102	;'f'
  2366  00776C  6F                 	db	111	;'o'
  2367  00776D  72                 	db	114	;'r'
  2368  00776E  20                 	db	32
  2369  00776F  70                 	db	112	;'p'
  2370  007770  72                 	db	114	;'r'
  2371  007771  69                 	db	105	;'i'
  2372  007772  6F                 	db	111	;'o'
  2373  007773  72                 	db	114	;'r'
  2374  007774  69                 	db	105	;'i'
  2375  007775  74                 	db	116	;'t'
  2376  007776  79                 	db	121	;'y'
  2377  007777  20                 	db	32
  2378  007778  69                 	db	105	;'i'
  2379  007779  73                 	db	115	;'s'
  2380  00777A  20                 	db	32
  2381  00777B  6D                 	db	109	;'m'
  2382  00777C  69                 	db	105	;'i'
  2383  00777D  73                 	db	115	;'s'
  2384  00777E  73                 	db	115	;'s'
  2385  00777F  69                 	db	105	;'i'
  2386  007780  6E                 	db	110	;'n'
  2387  007781  67                 	db	103	;'g'
  2388  007782  0D                 	db	13
  2389  007783  0A                 	db	10
  2390  007784  00                 	db	0
  2391  007785                     STR_131:
  2392  007785  2B                 	db	43
  2393  007786  4F                 	db	79	;'O'
  2394  007787  4B                 	db	75	;'K'
  2395  007788  20                 	db	32
  2396  007789  2D                 	db	45
  2397  00778A  20                 	db	32
  2398  00778B  4E                 	db	78	;'N'
  2399  00778C  75                 	db	117	;'u'
  2400  00778D  6D                 	db	109	;'m'
  2401  00778E  65                 	db	101	;'e'
  2402  00778F  72                 	db	114	;'r'
  2403  007790  69                 	db	105	;'i'
  2404  007791  63                 	db	99	;'c'
  2405  007792  61                 	db	97	;'a'
  2406  007793  6C                 	db	108	;'l'
  2407  007794  20                 	db	32
  2408  007795  6F                 	db	111	;'o'
  2409  007796  75                 	db	117	;'u'
  2410  007797  74                 	db	116	;'t'
  2411  007798  70                 	db	112	;'p'
  2412  007799  75                 	db	117	;'u'
  2413  00779A  74                 	db	116	;'t'
  2414  00779B  20                 	db	32
  2415  00779C  6E                 	db	110	;'n'
  2416  00779D  6F                 	db	111	;'o'
  2417  00779E  77                 	db	119	;'w'
  2418  00779F  20                 	db	32
  2419  0077A0  69                 	db	105	;'i'
  2420  0077A1  6E                 	db	110	;'n'
  2421  0077A2  20                 	db	32
  2422  0077A3  64                 	db	100	;'d'
  2423  0077A4  65                 	db	101	;'e'
  2424  0077A5  63                 	db	99	;'c'
  2425  0077A6  69                 	db	105	;'i'
  2426  0077A7  6D                 	db	109	;'m'
  2427  0077A8  61                 	db	97	;'a'
  2428  0077A9  6C                 	db	108	;'l'
  2429  0077AA  0D                 	db	13
  2430  0077AB  0A                 	db	10
  2431  0077AC  00                 	db	0
  2432  0077AD                     STR_104:
  2433  0077AD  2D                 	db	45
  2434  0077AE  45                 	db	69	;'E'
  2435  0077AF  52                 	db	82	;'R'
  2436  0077B0  52                 	db	82	;'R'
  2437  0077B1  4F                 	db	79	;'O'
  2438  0077B2  52                 	db	82	;'R'
  2439  0077B3  20                 	db	32
  2440  0077B4  2D                 	db	45
  2441  0077B5  20                 	db	32
  2442  0077B6  4E                 	db	78	;'N'
  2443  0077B7  6F                 	db	111	;'o'
  2444  0077B8  20                 	db	32
  2445  0077B9  66                 	db	102	;'f'
  2446  0077BA  69                 	db	105	;'i'
  2447  0077BB  6C                 	db	108	;'l'
  2448  0077BC  74                 	db	116	;'t'
  2449  0077BD  65                 	db	101	;'e'
  2450  0077BE  72                 	db	114	;'r'
  2451  0077BF  20                 	db	32
  2452  0077C0  6E                 	db	110	;'n'
  2453  0077C1  75                 	db	117	;'u'
  2454  0077C2  6D                 	db	109	;'m'
  2455  0077C3  62                 	db	98	;'b'
  2456  0077C4  65                 	db	101	;'e'
  2457  0077C5  72                 	db	114	;'r'
  2458  0077C6  20                 	db	32
  2459  0077C7  73                 	db	115	;'s'
  2460  0077C8  70                 	db	112	;'p'
  2461  0077C9  65                 	db	101	;'e'
  2462  0077CA  63                 	db	99	;'c'
  2463  0077CB  69                 	db	105	;'i'
  2464  0077CC  66                 	db	102	;'f'
  2465  0077CD  69                 	db	105	;'i'
  2466  0077CE  65                 	db	101	;'e'
  2467  0077CF  64                 	db	100	;'d'
  2468  0077D0  2E                 	db	46
  2469  0077D1  0D                 	db	13
  2470  0077D2  0A                 	db	10
  2471  0077D3  00                 	db	0
  2472  0077D4                     STR_243:
  2473  0077D4  45                 	db	69	;'E'
  2474  0077D5  52                 	db	82	;'R'
  2475  0077D6  52                 	db	82	;'R'
  2476  0077D7  20                 	db	32
  2477  0077D8  2D                 	db	45
  2478  0077D9  20                 	db	32
  2479  0077DA  44                 	db	68	;'D'
  2480  0077DB  69                 	db	105	;'i'
  2481  0077DC  73                 	db	115	;'s'
  2482  0077DD  70                 	db	112	;'p'
  2483  0077DE  6C                 	db	108	;'l'
  2484  0077DF  61                 	db	97	;'a'
  2485  0077E0  79                 	db	121	;'y'
  2486  0077E1  20                 	db	32
  2487  0077E2  43                 	db	67	;'C'
  2488  0077E3  41                 	db	65	;'A'
  2489  0077E4  4E                 	db	78	;'N'
  2490  0077E5  20                 	db	32
  2491  0077E6  65                 	db	101	;'e'
  2492  0077E7  72                 	db	114	;'r'
  2493  0077E8  72                 	db	114	;'r'
  2494  0077E9  6F                 	db	111	;'o'
  2495  0077EA  72                 	db	114	;'r'
  2496  0077EB  20                 	db	32
  2497  0077EC  69                 	db	105	;'i'
  2498  0077ED  6E                 	db	110	;'n'
  2499  0077EE  66                 	db	102	;'f'
  2500  0077EF  6F                 	db	111	;'o'
  2501  0077F0  72                 	db	114	;'r'
  2502  0077F1  6D                 	db	109	;'m'
  2503  0077F2  61                 	db	97	;'a'
  2504  0077F3  74                 	db	116	;'t'
  2505  0077F4  69                 	db	105	;'i'
  2506  0077F5  6F                 	db	111	;'o'
  2507  0077F6  6E                 	db	110	;'n'
  2508  0077F7  2E                 	db	46
  2509  0077F8  0D                 	db	13
  2510  0077F9  0A                 	db	10
  2511  0077FA  00                 	db	0
  2512  0077FB                     STR_229:
  2513  0077FB  48                 	db	72	;'H'
  2514  0077FC  65                 	db	101	;'e'
  2515  0077FD  6C                 	db	108	;'l'
  2516  0077FE  70                 	db	112	;'p'
  2517  0077FF  20                 	db	32
  2518  007800  66                 	db	102	;'f'
  2519  007801  6F                 	db	111	;'o'
  2520  007802  72                 	db	114	;'r'
  2521  007803  20                 	db	32
  2522  007804  74                 	db	116	;'t'
  2523  007805  68                 	db	104	;'h'
  2524  007806  65                 	db	101	;'e'
  2525  007807  20                 	db	32
  2526  007808  46                 	db	70	;'F'
  2527  007809  72                 	db	114	;'r'
  2528  00780A  61                 	db	97	;'a'
  2529  00780B  6E                 	db	110	;'n'
  2530  00780C  6B                 	db	107	;'k'
  2531  00780D  66                 	db	102	;'f'
  2532  00780E  75                 	db	117	;'u'
  2533  00780F  72                 	db	114	;'r'
  2534  007810  74                 	db	116	;'t'
  2535  007811  20                 	db	32
  2536  007812  52                 	db	82	;'R'
  2537  007813  53                 	db	83	;'S'
  2538  007814  2D                 	db	45
  2539  007815  32                 	db	50	;'2'
  2540  007816  33                 	db	51	;'3'
  2541  007817  32                 	db	50	;'2'
  2542  007818  20                 	db	32
  2543  007819  6D                 	db	109	;'m'
  2544  00781A  6F                 	db	111	;'o'
  2545  00781B  64                 	db	100	;'d'
  2546  00781C  75                 	db	117	;'u'
  2547  00781D  6C                 	db	108	;'l'
  2548  00781E  65                 	db	101	;'e'
  2549  00781F  0D                 	db	13
  2550  007820  0A                 	db	10
  2551  007821  00                 	db	0
  2552  007822                     STR_125:
  2553  007822  2D                 	db	45
  2554  007823  45                 	db	69	;'E'
  2555  007824  52                 	db	82	;'R'
  2556  007825  52                 	db	82	;'R'
  2557  007826  4F                 	db	79	;'O'
  2558  007827  52                 	db	82	;'R'
  2559  007828  20                 	db	32
  2560  007829  2D                 	db	45
  2561  00782A  20                 	db	32
  2562  00782B  6D                 	db	109	;'m'
  2563  00782C  61                 	db	97	;'a'
  2564  00782D  73                 	db	115	;'s'
  2565  00782E  6B                 	db	107	;'k'
  2566  00782F  20                 	db	32
  2567  007830  66                 	db	102	;'f'
  2568  007831  6F                 	db	111	;'o'
  2569  007832  72                 	db	114	;'r'
  2570  007833  20                 	db	32
  2571  007834  6E                 	db	110	;'n'
  2572  007835  69                 	db	105	;'i'
  2573  007836  64                 	db	100	;'d'
  2574  007837  65                 	db	101	;'e'
  2575  007838  20                 	db	32
  2576  007839  69                 	db	105	;'i'
  2577  00783A  64                 	db	100	;'d'
  2578  00783B  20                 	db	32
  2579  00783C  69                 	db	105	;'i'
  2580  00783D  73                 	db	115	;'s'
  2581  00783E  20                 	db	32
  2582  00783F  6D                 	db	109	;'m'
  2583  007840  69                 	db	105	;'i'
  2584  007841  73                 	db	115	;'s'
  2585  007842  73                 	db	115	;'s'
  2586  007843  69                 	db	105	;'i'
  2587  007844  6E                 	db	110	;'n'
  2588  007845  67                 	db	103	;'g'
  2589  007846  0D                 	db	13
  2590  007847  0A                 	db	10
  2591  007848  00                 	db	0
  2592  007849                     STR_108:
  2593  007849  2D                 	db	45
  2594  00784A  45                 	db	69	;'E'
  2595  00784B  52                 	db	82	;'R'
  2596  00784C  52                 	db	82	;'R'
  2597  00784D  4F                 	db	79	;'O'
  2598  00784E  52                 	db	82	;'R'
  2599  00784F  20                 	db	32
  2600  007850  2D                 	db	45
  2601  007851  20                 	db	32
  2602  007852  66                 	db	102	;'f'
  2603  007853  69                 	db	105	;'i'
  2604  007854  6C                 	db	108	;'l'
  2605  007855  74                 	db	116	;'t'
  2606  007856  65                 	db	101	;'e'
  2607  007857  72                 	db	114	;'r'
  2608  007858  20                 	db	32
  2609  007859  66                 	db	102	;'f'
  2610  00785A  6F                 	db	111	;'o'
  2611  00785B  72                 	db	114	;'r'
  2612  00785C  20                 	db	32
  2613  00785D  63                 	db	99	;'c'
  2614  00785E  6C                 	db	108	;'l'
  2615  00785F  61                 	db	97	;'a'
  2616  007860  73                 	db	115	;'s'
  2617  007861  73                 	db	115	;'s'
  2618  007862  20                 	db	32
  2619  007863  69                 	db	105	;'i'
  2620  007864  73                 	db	115	;'s'
  2621  007865  20                 	db	32
  2622  007866  6D                 	db	109	;'m'
  2623  007867  69                 	db	105	;'i'
  2624  007868  73                 	db	115	;'s'
  2625  007869  73                 	db	115	;'s'
  2626  00786A  69                 	db	105	;'i'
  2627  00786B  6E                 	db	110	;'n'
  2628  00786C  67                 	db	103	;'g'
  2629  00786D  0D                 	db	13
  2630  00786E  0A                 	db	10
  2631  00786F  00                 	db	0
  2632  007870                     STR_260:
  2633  007870  20                 	db	32
  2634  007871  20                 	db	32
  2635  007872  20                 	db	32
  2636  007873  20                 	db	32
  2637  007874  20                 	db	32
  2638  007875  20                 	db	32
  2639  007876  20                 	db	32
  2640  007877  20                 	db	32
  2641  007878  20                 	db	32
  2642  007879  20                 	db	32
  2643  00787A  20                 	db	32
  2644  00787B  4D                 	db	77	;'M'
  2645  00787C  6F                 	db	111	;'o'
  2646  00787D  64                 	db	100	;'d'
  2647  00787E  65                 	db	101	;'e'
  2648  00787F  73                 	db	115	;'s'
  2649  007880  3A                 	db	58	;':'
  2650  007881  20                 	db	32
  2651  007882  76                 	db	118	;'v'
  2652  007883  65                 	db	101	;'e'
  2653  007884  72                 	db	114	;'r'
  2654  007885  62                 	db	98	;'b'
  2655  007886  6F                 	db	111	;'o'
  2656  007887  73                 	db	115	;'s'
  2657  007888  65                 	db	101	;'e'
  2658  007889  7C                 	db	124
  2659  00788A  76                 	db	118	;'v'
  2660  00788B  73                 	db	115	;'s'
  2661  00788C  63                 	db	99	;'c'
  2662  00788D  70                 	db	112	;'p'
  2663  00788E  7C                 	db	124
  2664  00788F  73                 	db	115	;'s'
  2665  007890  6C                 	db	108	;'l'
  2666  007891  63                 	db	99	;'c'
  2667  007892  61                 	db	97	;'a'
  2668  007893  6E                 	db	110	;'n'
  2669  007894  0D                 	db	13
  2670  007895  0A                 	db	10
  2671  007896  00                 	db	0
  2672  007897                     STR_110:
  2673  007897  2D                 	db	45
  2674  007898  45                 	db	69	;'E'
  2675  007899  52                 	db	82	;'R'
  2676  00789A  52                 	db	82	;'R'
  2677  00789B  4F                 	db	79	;'O'
  2678  00789C  52                 	db	82	;'R'
  2679  00789D  20                 	db	32
  2680  00789E  2D                 	db	45
  2681  00789F  20                 	db	32
  2682  0078A0  66                 	db	102	;'f'
  2683  0078A1  69                 	db	105	;'i'
  2684  0078A2  6C                 	db	108	;'l'
  2685  0078A3  74                 	db	116	;'t'
  2686  0078A4  65                 	db	101	;'e'
  2687  0078A5  72                 	db	114	;'r'
  2688  0078A6  20                 	db	32
  2689  0078A7  66                 	db	102	;'f'
  2690  0078A8  6F                 	db	111	;'o'
  2691  0078A9  72                 	db	114	;'r'
  2692  0078AA  20                 	db	32
  2693  0078AB  74                 	db	116	;'t'
  2694  0078AC  79                 	db	121	;'y'
  2695  0078AD  70                 	db	112	;'p'
  2696  0078AE  65                 	db	101	;'e'
  2697  0078AF  20                 	db	32
  2698  0078B0  69                 	db	105	;'i'
  2699  0078B1  73                 	db	115	;'s'
  2700  0078B2  20                 	db	32
  2701  0078B3  6D                 	db	109	;'m'
  2702  0078B4  69                 	db	105	;'i'
  2703  0078B5  73                 	db	115	;'s'
  2704  0078B6  73                 	db	115	;'s'
  2705  0078B7  69                 	db	105	;'i'
  2706  0078B8  6E                 	db	110	;'n'
  2707  0078B9  67                 	db	103	;'g'
  2708  0078BA  0D                 	db	13
  2709  0078BB  0A                 	db	10
  2710  0078BC  00                 	db	0
  2711  0078BD                     STR_87:
  2712  0078BD  2B                 	db	43
  2713  0078BE  4F                 	db	79	;'O'
  2714  0078BF  4B                 	db	75	;'K'
  2715  0078C0  20                 	db	32
  2716  0078C1  2D                 	db	45
  2717  0078C2  20                 	db	32
  2718  0078C3  56                 	db	86	;'V'
  2719  0078C4  61                 	db	97	;'a'
  2720  0078C5  6C                 	db	108	;'l'
  2721  0078C6  75                 	db	117	;'u'
  2722  0078C7  65                 	db	101	;'e'
  2723  0078C8  20                 	db	32
  2724  0078C9  77                 	db	119	;'w'
  2725  0078CA  72                 	db	114	;'r'
  2726  0078CB  69                 	db	105	;'i'
  2727  0078CC  74                 	db	116	;'t'
  2728  0078CD  74                 	db	116	;'t'
  2729  0078CE  65                 	db	101	;'e'
  2730  0078CF  6E                 	db	110	;'n'
  2731  0078D0  20                 	db	32
  2732  0078D1  73                 	db	115	;'s'
  2733  0078D2  75                 	db	117	;'u'
  2734  0078D3  63                 	db	99	;'c'
  2735  0078D4  63                 	db	99	;'c'
  2736  0078D5  65                 	db	101	;'e'
  2737  0078D6  73                 	db	115	;'s'
  2738  0078D7  73                 	db	115	;'s'
  2739  0078D8  66                 	db	102	;'f'
  2740  0078D9  75                 	db	117	;'u'
  2741  0078DA  6C                 	db	108	;'l'
  2742  0078DB  6C                 	db	108	;'l'
  2743  0078DC  79                 	db	121	;'y'
  2744  0078DD  20                 	db	32
  2745  0078DE  66                 	db	102	;'f'
  2746  0078DF  6F                 	db	111	;'o'
  2747  0078E0  72                 	db	114	;'r'
  2748  0078E1  20                 	db	32
  2749  0078E2  00                 	db	0
  2750  0078E3                     STR_117:
  2751  0078E3  2D                 	db	45
  2752  0078E4  45                 	db	69	;'E'
  2753  0078E5  52                 	db	82	;'R'
  2754  0078E6  52                 	db	82	;'R'
  2755  0078E7  4F                 	db	79	;'O'
  2756  0078E8  52                 	db	82	;'R'
  2757  0078E9  20                 	db	32
  2758  0078EA  2D                 	db	45
  2759  0078EB  20                 	db	32
  2760  0078EC  4E                 	db	78	;'N'
  2761  0078ED  6F                 	db	111	;'o'
  2762  0078EE  20                 	db	32
  2763  0078EF  6D                 	db	109	;'m'
  2764  0078F0  61                 	db	97	;'a'
  2765  0078F1  73                 	db	115	;'s'
  2766  0078F2  6B                 	db	107	;'k'
  2767  0078F3  20                 	db	32
  2768  0078F4  6E                 	db	110	;'n'
  2769  0078F5  75                 	db	117	;'u'
  2770  0078F6  6D                 	db	109	;'m'
  2771  0078F7  62                 	db	98	;'b'
  2772  0078F8  65                 	db	101	;'e'
  2773  0078F9  72                 	db	114	;'r'
  2774  0078FA  20                 	db	32
  2775  0078FB  73                 	db	115	;'s'
  2776  0078FC  70                 	db	112	;'p'
  2777  0078FD  65                 	db	101	;'e'
  2778  0078FE  63                 	db	99	;'c'
  2779  0078FF  69                 	db	105	;'i'
  2780  007900  66                 	db	102	;'f'
  2781  007901  69                 	db	105	;'i'
  2782  007902  65                 	db	101	;'e'
  2783  007903  64                 	db	100	;'d'
  2784  007904  2E                 	db	46
  2785  007905  0D                 	db	13
  2786  007906  0A                 	db	10
  2787  007907  00                 	db	0
  2788  007908                     STR_1:
  2789  007908  0D                 	db	13
  2790  007909  0A                 	db	10
  2791  00790A  46                 	db	70	;'F'
  2792  00790B  72                 	db	114	;'r'
  2793  00790C  61                 	db	97	;'a'
  2794  00790D  6E                 	db	110	;'n'
  2795  00790E  6B                 	db	107	;'k'
  2796  00790F  66                 	db	102	;'f'
  2797  007910  75                 	db	117	;'u'
  2798  007911  72                 	db	114	;'r'
  2799  007912  74                 	db	116	;'t'
  2800  007913  20                 	db	32
  2801  007914  52                 	db	82	;'R'
  2802  007915  53                 	db	83	;'S'
  2803  007916  2D                 	db	45
  2804  007917  32                 	db	50	;'2'
  2805  007918  33                 	db	51	;'3'
  2806  007919  32                 	db	50	;'2'
  2807  00791A  20                 	db	32
  2808  00791B  43                 	db	67	;'C'
  2809  00791C  41                 	db	65	;'A'
  2810  00791D  4E                 	db	78	;'N'
  2811  00791E  34                 	db	52	;'4'
  2812  00791F  56                 	db	86	;'V'
  2813  007920  53                 	db	83	;'S'
  2814  007921  43                 	db	67	;'C'
  2815  007922  50                 	db	80	;'P'
  2816  007923  20                 	db	32
  2817  007924  6D                 	db	109	;'m'
  2818  007925  6F                 	db	111	;'o'
  2819  007926  64                 	db	100	;'d'
  2820  007927  75                 	db	117	;'u'
  2821  007928  6C                 	db	108	;'l'
  2822  007929  65                 	db	101	;'e'
  2823  00792A  0D                 	db	13
  2824  00792B  0A                 	db	10
  2825  00792C  00                 	db	0
  2826  00792D                     STR_121:
  2827  00792D  2D                 	db	45
  2828  00792E  45                 	db	69	;'E'
  2829  00792F  52                 	db	82	;'R'
  2830  007930  52                 	db	82	;'R'
  2831  007931  4F                 	db	79	;'O'
  2832  007932  52                 	db	82	;'R'
  2833  007933  20                 	db	32
  2834  007934  2D                 	db	45
  2835  007935  20                 	db	32
  2836  007936  6D                 	db	109	;'m'
  2837  007937  61                 	db	97	;'a'
  2838  007938  73                 	db	115	;'s'
  2839  007939  6B                 	db	107	;'k'
  2840  00793A  20                 	db	32
  2841  00793B  66                 	db	102	;'f'
  2842  00793C  6F                 	db	111	;'o'
  2843  00793D  72                 	db	114	;'r'
  2844  00793E  20                 	db	32
  2845  00793F  63                 	db	99	;'c'
  2846  007940  6C                 	db	108	;'l'
  2847  007941  61                 	db	97	;'a'
  2848  007942  73                 	db	115	;'s'
  2849  007943  73                 	db	115	;'s'
  2850  007944  20                 	db	32
  2851  007945  69                 	db	105	;'i'
  2852  007946  73                 	db	115	;'s'
  2853  007947  20                 	db	32
  2854  007948  6D                 	db	109	;'m'
  2855  007949  69                 	db	105	;'i'
  2856  00794A  73                 	db	115	;'s'
  2857  00794B  73                 	db	115	;'s'
  2858  00794C  69                 	db	105	;'i'
  2859  00794D  6E                 	db	110	;'n'
  2860  00794E  67                 	db	103	;'g'
  2861  00794F  0D                 	db	13
  2862  007950  0A                 	db	10
  2863  007951  00                 	db	0
  2864  007952                     STR_123:
  2865  007952  2D                 	db	45
  2866  007953  45                 	db	69	;'E'
  2867  007954  52                 	db	82	;'R'
  2868  007955  52                 	db	82	;'R'
  2869  007956  4F                 	db	79	;'O'
  2870  007957  52                 	db	82	;'R'
  2871  007958  20                 	db	32
  2872  007959  2D                 	db	45
  2873  00795A  20                 	db	32
  2874  00795B  6D                 	db	109	;'m'
  2875  00795C  61                 	db	97	;'a'
  2876  00795D  73                 	db	115	;'s'
  2877  00795E  6B                 	db	107	;'k'
  2878  00795F  20                 	db	32
  2879  007960  66                 	db	102	;'f'
  2880  007961  6F                 	db	111	;'o'
  2881  007962  72                 	db	114	;'r'
  2882  007963  20                 	db	32
  2883  007964  74                 	db	116	;'t'
  2884  007965  79                 	db	121	;'y'
  2885  007966  70                 	db	112	;'p'
  2886  007967  65                 	db	101	;'e'
  2887  007968  20                 	db	32
  2888  007969  69                 	db	105	;'i'
  2889  00796A  73                 	db	115	;'s'
  2890  00796B  20                 	db	32
  2891  00796C  6D                 	db	109	;'m'
  2892  00796D  69                 	db	105	;'i'
  2893  00796E  73                 	db	115	;'s'
  2894  00796F  73                 	db	115	;'s'
  2895  007970  69                 	db	105	;'i'
  2896  007971  6E                 	db	110	;'n'
  2897  007972  67                 	db	103	;'g'
  2898  007973  0D                 	db	13
  2899  007974  0A                 	db	10
  2900  007975  00                 	db	0
  2901  007976                     STR_91:
  2902  007976  2D                 	db	45
  2903  007977  45                 	db	69	;'E'
  2904  007978  52                 	db	82	;'R'
  2905  007979  52                 	db	82	;'R'
  2906  00797A  4F                 	db	79	;'O'
  2907  00797B  52                 	db	82	;'R'
  2908  00797C  20                 	db	32
  2909  00797D  2D                 	db	45
  2910  00797E  20                 	db	32
  2911  00797F  46                 	db	70	;'F'
  2912  007980  61                 	db	97	;'a'
  2913  007981  69                 	db	105	;'i'
  2914  007982  6C                 	db	108	;'l'
  2915  007983  65                 	db	101	;'e'
  2916  007984  64                 	db	100	;'d'
  2917  007985  20                 	db	32
  2918  007986  74                 	db	116	;'t'
  2919  007987  6F                 	db	111	;'o'
  2920  007988  20                 	db	32
  2921  007989  77                 	db	119	;'w'
  2922  00798A  72                 	db	114	;'r'
  2923  00798B  69                 	db	105	;'i'
  2924  00798C  74                 	db	116	;'t'
  2925  00798D  65                 	db	101	;'e'
  2926  00798E  20                 	db	32
  2927  00798F  76                 	db	118	;'v'
  2928  007990  61                 	db	97	;'a'
  2929  007991  6C                 	db	108	;'l'
  2930  007992  75                 	db	117	;'u'
  2931  007993  65                 	db	101	;'e'
  2932  007994  20                 	db	32
  2933  007995  66                 	db	102	;'f'
  2934  007996  6F                 	db	111	;'o'
  2935  007997  72                 	db	114	;'r'
  2936  007998  20                 	db	32
  2937  007999  00                 	db	0
  2938  00799A                     STR_3:
  2939  00799A  68                 	db	104	;'h'
  2940  00799B  74                 	db	116	;'t'
  2941  00799C  74                 	db	116	;'t'
  2942  00799D  70                 	db	112	;'p'
  2943  00799E  3A                 	db	58	;':'
  2944  00799F  2F                 	db	47
  2945  0079A0  2F                 	db	47
  2946  0079A1  77                 	db	119	;'w'
  2947  0079A2  77                 	db	119	;'w'
  2948  0079A3  77                 	db	119	;'w'
  2949  0079A4  2E                 	db	46
  2950  0079A5  70                 	db	112	;'p'
  2951  0079A6  61                 	db	97	;'a'
  2952  0079A7  72                 	db	114	;'r'
  2953  0079A8  61                 	db	97	;'a'
  2954  0079A9  64                 	db	100	;'d'
  2955  0079AA  69                 	db	105	;'i'
  2956  0079AB  73                 	db	115	;'s'
  2957  0079AC  65                 	db	101	;'e'
  2958  0079AD  6F                 	db	111	;'o'
  2959  0079AE  66                 	db	102	;'f'
  2960  0079AF  74                 	db	116	;'t'
  2961  0079B0  68                 	db	104	;'h'
  2962  0079B1  65                 	db	101	;'e'
  2963  0079B2  66                 	db	102	;'f'
  2964  0079B3  72                 	db	114	;'r'
  2965  0079B4  6F                 	db	111	;'o'
  2966  0079B5  67                 	db	103	;'g'
  2967  0079B6  2E                 	db	46
  2968  0079B7  63                 	db	99	;'c'
  2969  0079B8  6F                 	db	111	;'o'
  2970  0079B9  6D                 	db	109	;'m'
  2971  0079BA  0D                 	db	13
  2972  0079BB  0A                 	db	10
  2973  0079BC  00                 	db	0
  2974  0079BD                     STR_253:
  2975  0079BD  53                 	db	83	;'S'
  2976  0079BE  45                 	db	69	;'E'
  2977  0079BF  54                 	db	84	;'T'
  2978  0079C0  20                 	db	32
  2979  0079C1  2D                 	db	45
  2980  0079C2  20                 	db	32
  2981  0079C3  50                 	db	80	;'P'
  2982  0079C4  65                 	db	101	;'e'
  2983  0079C5  72                 	db	114	;'r'
  2984  0079C6  73                 	db	115	;'s'
  2985  0079C7  69                 	db	105	;'i'
  2986  0079C8  73                 	db	115	;'s'
  2987  0079C9  74                 	db	116	;'t'
  2988  0079CA  65                 	db	101	;'e'
  2989  0079CB  6E                 	db	110	;'n'
  2990  0079CC  74                 	db	116	;'t'
  2991  0079CD  20                 	db	32
  2992  0079CE  66                 	db	102	;'f'
  2993  0079CF  75                 	db	117	;'u'
  2994  0079D0  6E                 	db	110	;'n'
  2995  0079D1  63                 	db	99	;'c'
  2996  0079D2  74                 	db	116	;'t'
  2997  0079D3  69                 	db	105	;'i'
  2998  0079D4  6F                 	db	111	;'o'
  2999  0079D5  6E                 	db	110	;'n'
  3000  0079D6  61                 	db	97	;'a'
  3001  0079D7  6C                 	db	108	;'l'
  3002  0079D8  69                 	db	105	;'i'
  3003  0079D9  74                 	db	116	;'t'
  3004  0079DA  79                 	db	121	;'y'
  3005  0079DB  2E                 	db	46
  3006  0079DC  0D                 	db	13
  3007  0079DD  0A                 	db	10
  3008  0079DE  00                 	db	0
  3009  0079DF                     STR_242:
  3010  0079DF  53                 	db	83	;'S'
  3011  0079E0  54                 	db	84	;'T'
  3012  0079E1  41                 	db	65	;'A'
  3013  0079E2  54                 	db	84	;'T'
  3014  0079E3  20                 	db	32
  3015  0079E4  2D                 	db	45
  3016  0079E5  20                 	db	32
  3017  0079E6  44                 	db	68	;'D'
  3018  0079E7  69                 	db	105	;'i'
  3019  0079E8  73                 	db	115	;'s'
  3020  0079E9  70                 	db	112	;'p'
  3021  0079EA  6C                 	db	108	;'l'
  3022  0079EB  61                 	db	97	;'a'
  3023  0079EC  79                 	db	121	;'y'
  3024  0079ED  20                 	db	32
  3025  0079EE  43                 	db	67	;'C'
  3026  0079EF  41                 	db	65	;'A'
  3027  0079F0  4E                 	db	78	;'N'
  3028  0079F1  20                 	db	32
  3029  0079F2  73                 	db	115	;'s'
  3030  0079F3  74                 	db	116	;'t'
  3031  0079F4  61                 	db	97	;'a'
  3032  0079F5  74                 	db	116	;'t'
  3033  0079F6  69                 	db	105	;'i'
  3034  0079F7  73                 	db	115	;'s'
  3035  0079F8  74                 	db	116	;'t'
  3036  0079F9  69                 	db	105	;'i'
  3037  0079FA  63                 	db	99	;'c'
  3038  0079FB  73                 	db	115	;'s'
  3039  0079FC  2E                 	db	46
  3040  0079FD  0D                 	db	13
  3041  0079FE  0A                 	db	10
  3042  0079FF  00                 	db	0
  3043  007A00                     STR_37:
  3044  007A00  2D                 	db	45
  3045  007A01  45                 	db	69	;'E'
  3046  007A02  52                 	db	82	;'R'
  3047  007A03  52                 	db	82	;'R'
  3048  007A04  4F                 	db	79	;'O'
  3049  007A05  52                 	db	82	;'R'
  3050  007A06  20                 	db	32
  3051  007A07  2D                 	db	45
  3052  007A08  20                 	db	32
  3053  007A09  46                 	db	70	;'F'
  3054  007A0A  61                 	db	97	;'a'
  3055  007A0B  69                 	db	105	;'i'
  3056  007A0C  6C                 	db	108	;'l'
  3057  007A0D  65                 	db	101	;'e'
  3058  007A0E  64                 	db	100	;'d'
  3059  007A0F  20                 	db	32
  3060  007A10  74                 	db	116	;'t'
  3061  007A11  6F                 	db	111	;'o'
  3062  007A12  20                 	db	32
  3063  007A13  73                 	db	115	;'s'
  3064  007A14  65                 	db	101	;'e'
  3065  007A15  6E                 	db	110	;'n'
  3066  007A16  64                 	db	100	;'d'
  3067  007A17  20                 	db	32
  3068  007A18  65                 	db	101	;'e'
  3069  007A19  76                 	db	118	;'v'
  3070  007A1A  65                 	db	101	;'e'
  3071  007A1B  6E                 	db	110	;'n'
  3072  007A1C  74                 	db	116	;'t'
  3073  007A1D  2E                 	db	46
  3074  007A1E  0D                 	db	13
  3075  007A1F  0A                 	db	10
  3076  007A20  00                 	db	0
  3077  007A21                     STR_153:
  3078  007A21  2D                 	db	45
  3079  007A22  45                 	db	69	;'E'
  3080  007A23  52                 	db	82	;'R'
  3081  007A24  52                 	db	82	;'R'
  3082  007A25  4F                 	db	79	;'O'
  3083  007A26  52                 	db	82	;'R'
  3084  007A27  20                 	db	32
  3085  007A28  2D                 	db	45
  3086  007A29  20                 	db	32
  3087  007A2A  55                 	db	85	;'U'
  3088  007A2B  6E                 	db	110	;'n'
  3089  007A2C  6B                 	db	107	;'k'
  3090  007A2D  6E                 	db	110	;'n'
  3091  007A2E  6F                 	db	111	;'o'
  3092  007A2F  77                 	db	119	;'w'
  3093  007A30  6E                 	db	110	;'n'
  3094  007A31  20                 	db	32
  3095  007A32  27                 	db	39
  3096  007A33  53                 	db	83	;'S'
  3097  007A34  45                 	db	69	;'E'
  3098  007A35  54                 	db	84	;'T'
  3099  007A36  27                 	db	39
  3100  007A37  20                 	db	32
  3101  007A38  63                 	db	99	;'c'
  3102  007A39  6F                 	db	111	;'o'
  3103  007A3A  6D                 	db	109	;'m'
  3104  007A3B  6D                 	db	109	;'m'
  3105  007A3C  61                 	db	97	;'a'
  3106  007A3D  6E                 	db	110	;'n'
  3107  007A3E  64                 	db	100	;'d'
  3108  007A3F  0D                 	db	13
  3109  007A40  0A                 	db	10
  3110  007A41  00                 	db	0
  3111  007A42                     STR_53:
  3112  007A42  2D                 	db	45
  3113  007A43  45                 	db	69	;'E'
  3114  007A44  52                 	db	82	;'R'
  3115  007A45  52                 	db	82	;'R'
  3116  007A46  4F                 	db	79	;'O'
  3117  007A47  52                 	db	82	;'R'
  3118  007A48  20                 	db	32
  3119  007A49  2D                 	db	45
  3120  007A4A  20                 	db	32
  3121  007A4B  4E                 	db	78	;'N'
  3122  007A4C  65                 	db	101	;'e'
  3123  007A4D  65                 	db	101	;'e'
  3124  007A4E  64                 	db	100	;'d'
  3125  007A4F  73                 	db	115	;'s'
  3126  007A50  20                 	db	32
  3127  007A51  5B                 	db	91	;'['
  3128  007A52  70                 	db	112	;'p'
  3129  007A53  61                 	db	97	;'a'
  3130  007A54  67                 	db	103	;'g'
  3131  007A55  65                 	db	101	;'e'
  3132  007A56  3A                 	db	58	;':'
  3133  007A57  5D                 	db	93	;']'
  3134  007A58  72                 	db	114	;'r'
  3135  007A59  65                 	db	101	;'e'
  3136  007A5A  67                 	db	103	;'g'
  3137  007A5B  69                 	db	105	;'i'
  3138  007A5C  73                 	db	115	;'s'
  3139  007A5D  74                 	db	116	;'t'
  3140  007A5E  65                 	db	101	;'e'
  3141  007A5F  72                 	db	114	;'r'
  3142  007A60  0D                 	db	13
  3143  007A61  0A                 	db	10
  3144  007A62  00                 	db	0
  3145  007A63                     STR_144:
  3146  007A63  2B                 	db	43
  3147  007A64  4F                 	db	79	;'O'
  3148  007A65  4B                 	db	75	;'K'
  3149  007A66  20                 	db	32
  3150  007A67  2D                 	db	45
  3151  007A68  20                 	db	32
  3152  007A69  4D                 	db	77	;'M'
  3153  007A6A  6F                 	db	111	;'o'
  3154  007A6B  64                 	db	100	;'d'
  3155  007A6C  65                 	db	101	;'e'
  3156  007A6D  20                 	db	32
  3157  007A6E  69                 	db	105	;'i'
  3158  007A6F  73                 	db	115	;'s'
  3159  007A70  20                 	db	32
  3160  007A71  6E                 	db	110	;'n'
  3161  007A72  6F                 	db	111	;'o'
  3162  007A73  77                 	db	119	;'w'
  3163  007A74  20                 	db	32
  3164  007A75  56                 	db	86	;'V'
  3165  007A76  53                 	db	83	;'S'
  3166  007A77  43                 	db	67	;'C'
  3167  007A78  50                 	db	80	;'P'
  3168  007A79  20                 	db	32
  3169  007A7A  44                 	db	68	;'D'
  3170  007A7B  72                 	db	114	;'r'
  3171  007A7C  69                 	db	105	;'i'
  3172  007A7D  76                 	db	118	;'v'
  3173  007A7E  65                 	db	101	;'e'
  3174  007A7F  72                 	db	114	;'r'
  3175  007A80  0D                 	db	13
  3176  007A81  0A                 	db	10
  3177  007A82  00                 	db	0
  3178  007A83                     STR_7:
  3179  007A83  57                 	db	87	;'W'
  3180  007A84  69                 	db	105	;'i'
  3181  007A85  6C                 	db	108	;'l'
  3182  007A86  6C                 	db	108	;'l'
  3183  007A87  20                 	db	32
  3184  007A88  65                 	db	101	;'e'
  3185  007A89  6E                 	db	110	;'n'
  3186  007A8A  74                 	db	116	;'t'
  3187  007A8B  65                 	db	101	;'e'
  3188  007A8C  72                 	db	114	;'r'
  3189  007A8D  20                 	db	32
  3190  007A8E  62                 	db	98	;'b'
  3191  007A8F  6F                 	db	111	;'o'
  3192  007A90  6F                 	db	111	;'o'
  3193  007A91  74                 	db	116	;'t'
  3194  007A92  6C                 	db	108	;'l'
  3195  007A93  6F                 	db	111	;'o'
  3196  007A94  61                 	db	97	;'a'
  3197  007A95  64                 	db	100	;'d'
  3198  007A96  65                 	db	101	;'e'
  3199  007A97  72                 	db	114	;'r'
  3200  007A98  20                 	db	32
  3201  007A99  6E                 	db	110	;'n'
  3202  007A9A  6F                 	db	111	;'o'
  3203  007A9B  77                 	db	119	;'w'
  3204  007A9C  2E                 	db	46
  3205  007A9D  2E                 	db	46
  3206  007A9E  2E                 	db	46
  3207  007A9F  0D                 	db	13
  3208  007AA0  0A                 	db	10
  3209  007AA1  00                 	db	0
  3210  007AA2                     STR_236:
  3211  007AA2  43                 	db	67	;'C'
  3212  007AA3  4C                 	db	76	;'L'
  3213  007AA4  4F                 	db	79	;'O'
  3214  007AA5  53                 	db	83	;'S'
  3215  007AA6  45                 	db	69	;'E'
  3216  007AA7  20                 	db	32
  3217  007AA8  2D                 	db	45
  3218  007AA9  20                 	db	32
  3219  007AAA  43                 	db	67	;'C'
  3220  007AAB  6C                 	db	108	;'l'
  3221  007AAC  6F                 	db	111	;'o'
  3222  007AAD  73                 	db	115	;'s'
  3223  007AAE  65                 	db	101	;'e'
  3224  007AAF  20                 	db	32
  3225  007AB0  43                 	db	67	;'C'
  3226  007AB1  41                 	db	65	;'A'
  3227  007AB2  4E                 	db	78	;'N'
  3228  007AB3  20                 	db	32
  3229  007AB4  69                 	db	105	;'i'
  3230  007AB5  6E                 	db	110	;'n'
  3231  007AB6  74                 	db	116	;'t'
  3232  007AB7  65                 	db	101	;'e'
  3233  007AB8  72                 	db	114	;'r'
  3234  007AB9  66                 	db	102	;'f'
  3235  007ABA  61                 	db	97	;'a'
  3236  007ABB  63                 	db	99	;'c'
  3237  007ABC  65                 	db	101	;'e'
  3238  007ABD  2E                 	db	46
  3239  007ABE  0D                 	db	13
  3240  007ABF  0A                 	db	10
  3241  007AC0  00                 	db	0
  3242  007AC1                     STR_5:
  3243  007AC1  54                 	db	84	;'T'
  3244  007AC2  65                 	db	101	;'e'
  3245  007AC3  6D                 	db	109	;'m'
  3246  007AC4  70                 	db	112	;'p'
  3247  007AC5  6F                 	db	111	;'o'
  3248  007AC6  72                 	db	114	;'r'
  3249  007AC7  61                 	db	97	;'a'
  3250  007AC8  72                 	db	114	;'r'
  3251  007AC9  79                 	db	121	;'y'
  3252  007ACA  20                 	db	32
  3253  007ACB  76                 	db	118	;'v'
  3254  007ACC  65                 	db	101	;'e'
  3255  007ACD  72                 	db	114	;'r'
  3256  007ACE  62                 	db	98	;'b'
  3257  007ACF  6F                 	db	111	;'o'
  3258  007AD0  73                 	db	115	;'s'
  3259  007AD1  65                 	db	101	;'e'
  3260  007AD2  20                 	db	32
  3261  007AD3  6D                 	db	109	;'m'
  3262  007AD4  6F                 	db	111	;'o'
  3263  007AD5  64                 	db	100	;'d'
  3264  007AD6  65                 	db	101	;'e'
  3265  007AD7  20                 	db	32
  3266  007AD8  73                 	db	115	;'s'
  3267  007AD9  65                 	db	101	;'e'
  3268  007ADA  74                 	db	116	;'t'
  3269  007ADB  0D                 	db	13
  3270  007ADC  0A                 	db	10
  3271  007ADD  00                 	db	0
  3272  007ADE                     STR_142:
  3273  007ADE  2B                 	db	43
  3274  007ADF  4F                 	db	79	;'O'
  3275  007AE0  4B                 	db	75	;'K'
  3276  007AE1  20                 	db	32
  3277  007AE2  2D                 	db	45
  3278  007AE3  20                 	db	32
  3279  007AE4  4D                 	db	77	;'M'
  3280  007AE5  6F                 	db	111	;'o'
  3281  007AE6  64                 	db	100	;'d'
  3282  007AE7  65                 	db	101	;'e'
  3283  007AE8  20                 	db	32
  3284  007AE9  69                 	db	105	;'i'
  3285  007AEA  73                 	db	115	;'s'
  3286  007AEB  20                 	db	32
  3287  007AEC  6E                 	db	110	;'n'
  3288  007AED  6F                 	db	111	;'o'
  3289  007AEE  77                 	db	119	;'w'
  3290  007AEF  20                 	db	32
  3291  007AF0  76                 	db	118	;'v'
  3292  007AF1  65                 	db	101	;'e'
  3293  007AF2  72                 	db	114	;'r'
  3294  007AF3  62                 	db	98	;'b'
  3295  007AF4  6F                 	db	111	;'o'
  3296  007AF5  73                 	db	115	;'s'
  3297  007AF6  65                 	db	101	;'e'
  3298  007AF7  0D                 	db	13
  3299  007AF8  0A                 	db	10
  3300  007AF9  00                 	db	0
  3301  007AFA                     STR_231:
  3302  007AFA  42                 	db	66	;'B'
  3303  007AFB  4F                 	db	79	;'O'
  3304  007AFC  4F                 	db	79	;'O'
  3305  007AFD  54                 	db	84	;'T'
  3306  007AFE  20                 	db	32
  3307  007AFF  2D                 	db	45
  3308  007B00  20                 	db	32
  3309  007B01  45                 	db	69	;'E'
  3310  007B02  6E                 	db	110	;'n'
  3311  007B03  74                 	db	116	;'t'
  3312  007B04  65                 	db	101	;'e'
  3313  007B05  72                 	db	114	;'r'
  3314  007B06  20                 	db	32
  3315  007B07  62                 	db	98	;'b'
  3316  007B08  6F                 	db	111	;'o'
  3317  007B09  6F                 	db	111	;'o'
  3318  007B0A  74                 	db	116	;'t'
  3319  007B0B  6C                 	db	108	;'l'
  3320  007B0C  6F                 	db	111	;'o'
  3321  007B0D  61                 	db	97	;'a'
  3322  007B0E  64                 	db	100	;'d'
  3323  007B0F  65                 	db	101	;'e'
  3324  007B10  72                 	db	114	;'r'
  3325  007B11  2E                 	db	46
  3326  007B12  0D                 	db	13
  3327  007B13  0A                 	db	10
  3328  007B14  00                 	db	0
  3329  007B15                     STR_155:
  3330  007B15  2D                 	db	45
  3331  007B16  45                 	db	69	;'E'
  3332  007B17  52                 	db	82	;'R'
  3333  007B18  52                 	db	82	;'R'
  3334  007B19  4F                 	db	79	;'O'
  3335  007B1A  52                 	db	82	;'R'
  3336  007B1B  20                 	db	32
  3337  007B1C  2D                 	db	45
  3338  007B1D  20                 	db	32
  3339  007B1E  55                 	db	85	;'U'
  3340  007B1F  6E                 	db	110	;'n'
  3341  007B20  6B                 	db	107	;'k'
  3342  007B21  6E                 	db	110	;'n'
  3343  007B22  6F                 	db	111	;'o'
  3344  007B23  77                 	db	119	;'w'
  3345  007B24  6E                 	db	110	;'n'
  3346  007B25  20                 	db	32
  3347  007B26  63                 	db	99	;'c'
  3348  007B27  6F                 	db	111	;'o'
  3349  007B28  6D                 	db	109	;'m'
  3350  007B29  6D                 	db	109	;'m'
  3351  007B2A  61                 	db	97	;'a'
  3352  007B2B  6E                 	db	110	;'n'
  3353  007B2C  64                 	db	100	;'d'
  3354  007B2D  0D                 	db	13
  3355  007B2E  0A                 	db	10
  3356  007B2F  00                 	db	0
  3357  007B30                     STR_262:
  3358  007B30  4E                 	db	78	;'N'
  3359  007B31  6F                 	db	111	;'o'
  3360  007B32  64                 	db	100	;'d'
  3361  007B33  65                 	db	101	;'e'
  3362  007B34  20                 	db	32
  3363  007B35  66                 	db	102	;'f'
  3364  007B36  6F                 	db	111	;'o'
  3365  007B37  75                 	db	117	;'u'
  3366  007B38  6E                 	db	110	;'n'
  3367  007B39  64                 	db	100	;'d'
  3368  007B3A  20                 	db	32
  3369  007B3B  77                 	db	119	;'w'
  3370  007B3C  69                 	db	105	;'i'
  3371  007B3D  74                 	db	116	;'t'
  3372  007B3E  68                 	db	104	;'h'
  3373  007B3F  20                 	db	32
  3374  007B40  6E                 	db	110	;'n'
  3375  007B41  6F                 	db	111	;'o'
  3376  007B42  64                 	db	100	;'d'
  3377  007B43  65                 	db	101	;'e'
  3378  007B44  20                 	db	32
  3379  007B45  69                 	db	105	;'i'
  3380  007B46  64                 	db	100	;'d'
  3381  007B47  20                 	db	32
  3382  007B48  3D                 	db	61	;'='
  3383  007B49  20                 	db	32
  3384  007B4A  00                 	db	0
  3385  007B4B                     STR_146:
  3386  007B4B  2B                 	db	43
  3387  007B4C  4F                 	db	79	;'O'
  3388  007B4D  4B                 	db	75	;'K'
  3389  007B4E  20                 	db	32
  3390  007B4F  2D                 	db	45
  3391  007B50  20                 	db	32
  3392  007B51  4D                 	db	77	;'M'
  3393  007B52  6F                 	db	111	;'o'
  3394  007B53  64                 	db	100	;'d'
  3395  007B54  65                 	db	101	;'e'
  3396  007B55  20                 	db	32
  3397  007B56  69                 	db	105	;'i'
  3398  007B57  73                 	db	115	;'s'
  3399  007B58  20                 	db	32
  3400  007B59  6E                 	db	110	;'n'
  3401  007B5A  6F                 	db	111	;'o'
  3402  007B5B  77                 	db	119	;'w'
  3403  007B5C  20                 	db	32
  3404  007B5D  53                 	db	83	;'S'
  3405  007B5E  4C                 	db	76	;'L'
  3406  007B5F  43                 	db	67	;'C'
  3407  007B60  41                 	db	65	;'A'
  3408  007B61  4E                 	db	78	;'N'
  3409  007B62  0D                 	db	13
  3410  007B63  0A                 	db	10
  3411  007B64  00                 	db	0
  3412  007B65                     STR_25:
  3413  007B65  2B                 	db	43
  3414  007B66  4F                 	db	79	;'O'
  3415  007B67  4B                 	db	75	;'K'
  3416  007B68  20                 	db	32
  3417  007B69  2D                 	db	45
  3418  007B6A  20                 	db	32
  3419  007B6B  4C                 	db	76	;'L'
  3420  007B6C  69                 	db	105	;'i'
  3421  007B6D  73                 	db	115	;'s'
  3422  007B6E  74                 	db	116	;'t'
  3423  007B6F  65                 	db	101	;'e'
  3424  007B70  6E                 	db	110	;'n'
  3425  007B71  20                 	db	32
  3426  007B72  6F                 	db	111	;'o'
  3427  007B73  6E                 	db	110	;'n'
  3428  007B74  6C                 	db	108	;'l'
  3429  007B75  79                 	db	121	;'y'
  3430  007B76  20                 	db	32
  3431  007B77  6D                 	db	109	;'m'
  3432  007B78  6F                 	db	111	;'o'
  3433  007B79  64                 	db	100	;'d'
  3434  007B7A  65                 	db	101	;'e'
  3435  007B7B  0D                 	db	13
  3436  007B7C  0A                 	db	10
  3437  007B7D  00                 	db	0
  3438  007B7E                     STR_215:
  3439  007B7E  54                 	db	84	;'T'
  3440  007B7F  72                 	db	114	;'r'
  3441  007B80  61                 	db	97	;'a'
  3442  007B81  6E                 	db	110	;'n'
  3443  007B82  73                 	db	115	;'s'
  3444  007B83  6D                 	db	109	;'m'
  3445  007B84  69                 	db	105	;'i'
  3446  007B85  74                 	db	116	;'t'
  3447  007B86  20                 	db	32
  3448  007B87  45                 	db	69	;'E'
  3449  007B88  72                 	db	114	;'r'
  3450  007B89  72                 	db	114	;'r'
  3451  007B8A  6F                 	db	111	;'o'
  3452  007B8B  72                 	db	114	;'r'
  3453  007B8C  20                 	db	32
  3454  007B8D  43                 	db	67	;'C'
  3455  007B8E  6F                 	db	111	;'o'
  3456  007B8F  75                 	db	117	;'u'
  3457  007B90  6E                 	db	110	;'n'
  3458  007B91  74                 	db	116	;'t'
  3459  007B92  65                 	db	101	;'e'
  3460  007B93  72                 	db	114	;'r'
  3461  007B94  3A                 	db	58	;':'
  3462  007B95  20                 	db	32
  3463  007B96  00                 	db	0
  3464  007B97                     STR_72:
  3465  007B97  55                 	db	85	;'U'
  3466  007B98  6E                 	db	110	;'n'
  3467  007B99  61                 	db	97	;'a'
  3468  007B9A  62                 	db	98	;'b'
  3469  007B9B  6C                 	db	108	;'l'
  3470  007B9C  65                 	db	101	;'e'
  3471  007B9D  20                 	db	32
  3472  007B9E  74                 	db	116	;'t'
  3473  007B9F  6F                 	db	111	;'o'
  3474  007BA0  20                 	db	32
  3475  007BA1  72                 	db	114	;'r'
  3476  007BA2  65                 	db	101	;'e'
  3477  007BA3  61                 	db	97	;'a'
  3478  007BA4  64                 	db	100	;'d'
  3479  007BA5  20                 	db	32
  3480  007BA6  72                 	db	114	;'r'
  3481  007BA7  65                 	db	101	;'e'
  3482  007BA8  67                 	db	103	;'g'
  3483  007BA9  69                 	db	105	;'i'
  3484  007BAA  73                 	db	115	;'s'
  3485  007BAB  74                 	db	116	;'t'
  3486  007BAC  65                 	db	101	;'e'
  3487  007BAD  72                 	db	114	;'r'
  3488  007BAE  20                 	db	32
  3489  007BAF  00                 	db	0
  3490  007BB0                     STR_239:
  3491  007BB0  54                 	db	84	;'T'
  3492  007BB1  58                 	db	88	;'X'
  3493  007BB2  20                 	db	32
  3494  007BB3  2D                 	db	45
  3495  007BB4  20                 	db	32
  3496  007BB5  53                 	db	83	;'S'
  3497  007BB6  65                 	db	101	;'e'
  3498  007BB7  6E                 	db	110	;'n'
  3499  007BB8  64                 	db	100	;'d'
  3500  007BB9  20                 	db	32
  3501  007BBA  43                 	db	67	;'C'
  3502  007BBB  41                 	db	65	;'A'
  3503  007BBC  4E                 	db	78	;'N'
  3504  007BBD  20                 	db	32
  3505  007BBE  66                 	db	102	;'f'
  3506  007BBF  72                 	db	114	;'r'
  3507  007BC0  61                 	db	97	;'a'
  3508  007BC1  6D                 	db	109	;'m'
  3509  007BC2  65                 	db	101	;'e'
  3510  007BC3  20                 	db	32
  3511  007BC4  2E                 	db	46
  3512  007BC5  0D                 	db	13
  3513  007BC6  0A                 	db	10
  3514  007BC7  00                 	db	0
  3515  007BC8                     STR_249:
  3516  007BC8  46                 	db	70	;'F'
  3517  007BC9  49                 	db	73	;'I'
  3518  007BCA  4C                 	db	76	;'L'
  3519  007BCB  54                 	db	84	;'T'
  3520  007BCC  45                 	db	69	;'E'
  3521  007BCD  52                 	db	82	;'R'
  3522  007BCE  20                 	db	32
  3523  007BCF  2D                 	db	45
  3524  007BD0  20                 	db	32
  3525  007BD1  53                 	db	83	;'S'
  3526  007BD2  65                 	db	101	;'e'
  3527  007BD3  74                 	db	116	;'t'
  3528  007BD4  20                 	db	32
  3529  007BD5  66                 	db	102	;'f'
  3530  007BD6  69                 	db	105	;'i'
  3531  007BD7  6C                 	db	108	;'l'
  3532  007BD8  74                 	db	116	;'t'
  3533  007BD9  65                 	db	101	;'e'
  3534  007BDA  72                 	db	114	;'r'
  3535  007BDB  20                 	db	32
  3536  007BDC  2E                 	db	46
  3537  007BDD  0D                 	db	13
  3538  007BDE  0A                 	db	10
  3539  007BDF  00                 	db	0
  3540  007BE0                     STR_51:
  3541  007BE0  2D                 	db	45
  3542  007BE1  45                 	db	69	;'E'
  3543  007BE2  52                 	db	82	;'R'
  3544  007BE3  52                 	db	82	;'R'
  3545  007BE4  4F                 	db	79	;'O'
  3546  007BE5  52                 	db	82	;'R'
  3547  007BE6  20                 	db	32
  3548  007BE7  2D                 	db	45
  3549  007BE8  20                 	db	32
  3550  007BE9  4E                 	db	78	;'N'
  3551  007BEA  65                 	db	101	;'e'
  3552  007BEB  65                 	db	101	;'e'
  3553  007BEC  64                 	db	100	;'d'
  3554  007BED  73                 	db	115	;'s'
  3555  007BEE  20                 	db	32
  3556  007BEF  6E                 	db	110	;'n'
  3557  007BF0  6F                 	db	111	;'o'
  3558  007BF1  64                 	db	100	;'d'
  3559  007BF2  65                 	db	101	;'e'
  3560  007BF3  69                 	db	105	;'i'
  3561  007BF4  64                 	db	100	;'d'
  3562  007BF5  0D                 	db	13
  3563  007BF6  0A                 	db	10
  3564  007BF7  00                 	db	0
  3565  007BF8                     STR_28:
  3566  007BF8  2D                 	db	45
  3567  007BF9  45                 	db	69	;'E'
  3568  007BFA  52                 	db	82	;'R'
  3569  007BFB  52                 	db	82	;'R'
  3570  007BFC  4F                 	db	79	;'O'
  3571  007BFD  52                 	db	82	;'R'
  3572  007BFE  20                 	db	32
  3573  007BFF  2D                 	db	45
  3574  007C00  20                 	db	32
  3575  007C01  55                 	db	85	;'U'
  3576  007C02  6E                 	db	110	;'n'
  3577  007C03  6B                 	db	107	;'k'
  3578  007C04  6E                 	db	110	;'n'
  3579  007C05  6F                 	db	111	;'o'
  3580  007C06  77                 	db	119	;'w'
  3581  007C07  6E                 	db	110	;'n'
  3582  007C08  20                 	db	32
  3583  007C09  6D                 	db	109	;'m'
  3584  007C0A  6F                 	db	111	;'o'
  3585  007C0B  64                 	db	100	;'d'
  3586  007C0C  65                 	db	101	;'e'
  3587  007C0D  0D                 	db	13
  3588  007C0E  0A                 	db	10
  3589  007C0F  00                 	db	0
  3590  007C10                     STR_86:
  3591  007C10  2D                 	db	45
  3592  007C11  45                 	db	69	;'E'
  3593  007C12  52                 	db	82	;'R'
  3594  007C13  52                 	db	82	;'R'
  3595  007C14  4F                 	db	79	;'O'
  3596  007C15  52                 	db	82	;'R'
  3597  007C16  20                 	db	32
  3598  007C17  2D                 	db	45
  3599  007C18  20                 	db	32
  3600  007C19  4E                 	db	78	;'N'
  3601  007C1A  65                 	db	101	;'e'
  3602  007C1B  65                 	db	101	;'e'
  3603  007C1C  64                 	db	100	;'d'
  3604  007C1D  20                 	db	32
  3605  007C1E  61                 	db	97	;'a'
  3606  007C1F  20                 	db	32
  3607  007C20  76                 	db	118	;'v'
  3608  007C21  61                 	db	97	;'a'
  3609  007C22  6C                 	db	108	;'l'
  3610  007C23  75                 	db	117	;'u'
  3611  007C24  65                 	db	101	;'e'
  3612  007C25  0D                 	db	13
  3613  007C26  0A                 	db	10
  3614  007C27  00                 	db	0
  3615  007C28                     STR_222:
  3616  007C28  52                 	db	82	;'R'
  3617  007C29  65                 	db	101	;'e'
  3618  007C2A  63                 	db	99	;'c'
  3619  007C2B  65                 	db	101	;'e'
  3620  007C2C  69                 	db	105	;'i'
  3621  007C2D  76                 	db	118	;'v'
  3622  007C2E  65                 	db	101	;'e'
  3623  007C2F  20                 	db	32
  3624  007C30  45                 	db	69	;'E'
  3625  007C31  72                 	db	114	;'r'
  3626  007C32  72                 	db	114	;'r'
  3627  007C33  6F                 	db	111	;'o'
  3628  007C34  72                 	db	114	;'r'
  3629  007C35  20                 	db	32
  3630  007C36  43                 	db	67	;'C'
  3631  007C37  6F                 	db	111	;'o'
  3632  007C38  75                 	db	117	;'u'
  3633  007C39  6E                 	db	110	;'n'
  3634  007C3A  74                 	db	116	;'t'
  3635  007C3B  65                 	db	101	;'e'
  3636  007C3C  72                 	db	114	;'r'
  3637  007C3D  3A                 	db	58	;':'
  3638  007C3E  20                 	db	32
  3639  007C3F  00                 	db	0
  3640  007C40                     STR_207:
  3641  007C40  55                 	db	85	;'U'
  3642  007C41  41                 	db	65	;'A'
  3643  007C42  52                 	db	82	;'R'
  3644  007C43  54                 	db	84	;'T'
  3645  007C44  20                 	db	32
  3646  007C45  52                 	db	82	;'R'
  3647  007C46  65                 	db	101	;'e'
  3648  007C47  63                 	db	99	;'c'
  3649  007C48  65                 	db	101	;'e'
  3650  007C49  69                 	db	105	;'i'
  3651  007C4A  76                 	db	118	;'v'
  3652  007C4B  65                 	db	101	;'e'
  3653  007C4C  20                 	db	32
  3654  007C4D  6F                 	db	111	;'o'
  3655  007C4E  76                 	db	118	;'v'
  3656  007C4F  65                 	db	101	;'e'
  3657  007C50  72                 	db	114	;'r'
  3658  007C51  72                 	db	114	;'r'
  3659  007C52  75                 	db	117	;'u'
  3660  007C53  6E                 	db	110	;'n'
  3661  007C54  73                 	db	115	;'s'
  3662  007C55  3A                 	db	58	;':'
  3663  007C56  20                 	db	32
  3664  007C57  00                 	db	0
  3665  007C58                     STR_203:
  3666  007C58  43                 	db	67	;'C'
  3667  007C59  41                 	db	65	;'A'
  3668  007C5A  4E                 	db	78	;'N'
  3669  007C5B  20                 	db	32
  3670  007C5C  54                 	db	84	;'T'
  3671  007C5D  72                 	db	114	;'r'
  3672  007C5E  61                 	db	97	;'a'
  3673  007C5F  6E                 	db	110	;'n'
  3674  007C60  73                 	db	115	;'s'
  3675  007C61  6D                 	db	109	;'m'
  3676  007C62  69                 	db	105	;'i'
  3677  007C63  74                 	db	116	;'t'
  3678  007C64  20                 	db	32
  3679  007C65  6F                 	db	111	;'o'
  3680  007C66  76                 	db	118	;'v'
  3681  007C67  65                 	db	101	;'e'
  3682  007C68  72                 	db	114	;'r'
  3683  007C69  72                 	db	114	;'r'
  3684  007C6A  75                 	db	117	;'u'
  3685  007C6B  6E                 	db	110	;'n'
  3686  007C6C  73                 	db	115	;'s'
  3687  007C6D  3A                 	db	58	;':'
  3688  007C6E  20                 	db	32
  3689  007C6F  00                 	db	0
  3690  007C70                     STR_241:
  3691  007C70  52                 	db	82	;'R'
  3692  007C71  58                 	db	88	;'X'
  3693  007C72  20                 	db	32
  3694  007C73  2D                 	db	45
  3695  007C74  20                 	db	32
  3696  007C75  52                 	db	82	;'R'
  3697  007C76  65                 	db	101	;'e'
  3698  007C77  61                 	db	97	;'a'
  3699  007C78  64                 	db	100	;'d'
  3700  007C79  20                 	db	32
  3701  007C7A  43                 	db	67	;'C'
  3702  007C7B  41                 	db	65	;'A'
  3703  007C7C  4E                 	db	78	;'N'
  3704  007C7D  20                 	db	32
  3705  007C7E  66                 	db	102	;'f'
  3706  007C7F  72                 	db	114	;'r'
  3707  007C80  61                 	db	97	;'a'
  3708  007C81  6D                 	db	109	;'m'
  3709  007C82  65                 	db	101	;'e'
  3710  007C83  2E                 	db	46
  3711  007C84  0D                 	db	13
  3712  007C85  0A                 	db	10
  3713  007C86  00                 	db	0
  3714  007C87                     STR_199:
  3715  007C87  43                 	db	67	;'C'
  3716  007C88  41                 	db	65	;'A'
  3717  007C89  4E                 	db	78	;'N'
  3718  007C8A  20                 	db	32
  3719  007C8B  52                 	db	82	;'R'
  3720  007C8C  65                 	db	101	;'e'
  3721  007C8D  63                 	db	99	;'c'
  3722  007C8E  65                 	db	101	;'e'
  3723  007C8F  69                 	db	105	;'i'
  3724  007C90  76                 	db	118	;'v'
  3725  007C91  65                 	db	101	;'e'
  3726  007C92  20                 	db	32
  3727  007C93  6F                 	db	111	;'o'
  3728  007C94  76                 	db	118	;'v'
  3729  007C95  65                 	db	101	;'e'
  3730  007C96  72                 	db	114	;'r'
  3731  007C97  72                 	db	114	;'r'
  3732  007C98  75                 	db	117	;'u'
  3733  007C99  6E                 	db	110	;'n'
  3734  007C9A  73                 	db	115	;'s'
  3735  007C9B  3A                 	db	58	;':'
  3736  007C9C  20                 	db	32
  3737  007C9D  00                 	db	0
  3738  007C9E                     STR_284:
  3739  007C9E  55                 	db	85	;'U'
  3740  007C9F  6E                 	db	110	;'n'
  3741  007CA0  6B                 	db	107	;'k'
  3742  007CA1  6E                 	db	110	;'n'
  3743  007CA2  6F                 	db	111	;'o'
  3744  007CA3  77                 	db	119	;'w'
  3745  007CA4  6E                 	db	110	;'n'
  3746  007CA5  20                 	db	32
  3747  007CA6  28                 	db	40
  3748  007CA7  56                 	db	86	;'V'
  3749  007CA8  65                 	db	101	;'e'
  3750  007CA9  72                 	db	114	;'r'
  3751  007CAA  62                 	db	98	;'b'
  3752  007CAB  6F                 	db	111	;'o'
  3753  007CAC  73                 	db	115	;'s'
  3754  007CAD  65                 	db	101	;'e'
  3755  007CAE  20                 	db	32
  3756  007CAF  75                 	db	117	;'u'
  3757  007CB0  73                 	db	115	;'s'
  3758  007CB1  65                 	db	101	;'e'
  3759  007CB2  64                 	db	100	;'d'
  3760  007CB3  29                 	db	41
  3761  007CB4  00                 	db	0
  3762  007CB5                     STR_24:
  3763  007CB5  2B                 	db	43
  3764  007CB6  4F                 	db	79	;'O'
  3765  007CB7  4B                 	db	75	;'K'
  3766  007CB8  20                 	db	32
  3767  007CB9  2D                 	db	45
  3768  007CBA  20                 	db	32
  3769  007CBB  4C                 	db	76	;'L'
  3770  007CBC  6F                 	db	111	;'o'
  3771  007CBD  6F                 	db	111	;'o'
  3772  007CBE  70                 	db	112	;'p'
  3773  007CBF  62                 	db	98	;'b'
  3774  007CC0  61                 	db	97	;'a'
  3775  007CC1  63                 	db	99	;'c'
  3776  007CC2  6B                 	db	107	;'k'
  3777  007CC3  20                 	db	32
  3778  007CC4  6D                 	db	109	;'m'
  3779  007CC5  6F                 	db	111	;'o'
  3780  007CC6  64                 	db	100	;'d'
  3781  007CC7  65                 	db	101	;'e'
  3782  007CC8  0D                 	db	13
  3783  007CC9  0A                 	db	10
  3784  007CCA  00                 	db	0
  3785  007CCB                     STR_191:
  3786  007CCB  52                 	db	82	;'R'
  3787  007CCC  65                 	db	101	;'e'
  3788  007CCD  63                 	db	99	;'c'
  3789  007CCE  65                 	db	101	;'e'
  3790  007CCF  69                 	db	105	;'i'
  3791  007CD0  76                 	db	118	;'v'
  3792  007CD1  65                 	db	101	;'e'
  3793  007CD2  64                 	db	100	;'d'
  3794  007CD3  20                 	db	32
  3795  007CD4  43                 	db	67	;'C'
  3796  007CD5  41                 	db	65	;'A'
  3797  007CD6  4E                 	db	78	;'N'
  3798  007CD7  20                 	db	32
  3799  007CD8  66                 	db	102	;'f'
  3800  007CD9  72                 	db	114	;'r'
  3801  007CDA  61                 	db	97	;'a'
  3802  007CDB  6D                 	db	109	;'m'
  3803  007CDC  65                 	db	101	;'e'
  3804  007CDD  73                 	db	115	;'s'
  3805  007CDE  3A                 	db	58	;':'
  3806  007CDF  20                 	db	32
  3807  007CE0  00                 	db	0
  3808  007CE1                     STR_195:
  3809  007CE1  52                 	db	82	;'R'
  3810  007CE2  65                 	db	101	;'e'
  3811  007CE3  63                 	db	99	;'c'
  3812  007CE4  65                 	db	101	;'e'
  3813  007CE5  69                 	db	105	;'i'
  3814  007CE6  76                 	db	118	;'v'
  3815  007CE7  65                 	db	101	;'e'
  3816  007CE8  64                 	db	100	;'d'
  3817  007CE9  20                 	db	32
  3818  007CEA  43                 	db	67	;'C'
  3819  007CEB  41                 	db	65	;'A'
  3820  007CEC  4E                 	db	78	;'N'
  3821  007CED  20                 	db	32
  3822  007CEE  62                 	db	98	;'b'
  3823  007CEF  79                 	db	121	;'y'
  3824  007CF0  74                 	db	116	;'t'
  3825  007CF1  65                 	db	101	;'e'
  3826  007CF2  73                 	db	115	;'s'
  3827  007CF3  3A                 	db	58	;':'
  3828  007CF4  20                 	db	32
  3829  007CF5  00                 	db	0
  3830  007CF6                     STR_251:
  3831  007CF6  4D                 	db	77	;'M'
  3832  007CF7  41                 	db	65	;'A'
  3833  007CF8  53                 	db	83	;'S'
  3834  007CF9  4B                 	db	75	;'K'
  3835  007CFA  20                 	db	32
  3836  007CFB  2D                 	db	45
  3837  007CFC  20                 	db	32
  3838  007CFD  53                 	db	83	;'S'
  3839  007CFE  65                 	db	101	;'e'
  3840  007CFF  74                 	db	116	;'t'
  3841  007D00  20                 	db	32
  3842  007D01  6D                 	db	109	;'m'
  3843  007D02  61                 	db	97	;'a'
  3844  007D03  73                 	db	115	;'s'
  3845  007D04  6B                 	db	107	;'k'
  3846  007D05  20                 	db	32
  3847  007D06  2E                 	db	46
  3848  007D07  0D                 	db	13
  3849  007D08  0A                 	db	10
  3850  007D09  00                 	db	0
  3851  007D0A                     STR_156:
  3852  007D0A  4A                 	db	74	;'J'
  3853  007D0B  46                 	db	70	;'F'
  3854  007D0C  72                 	db	114	;'r'
  3855  007D0D  61                 	db	97	;'a'
  3856  007D0E  6E                 	db	110	;'n'
  3857  007D0F  6B                 	db	107	;'k'
  3858  007D10  66                 	db	102	;'f'
  3859  007D11  75                 	db	117	;'u'
  3860  007D12  72                 	db	114	;'r'
  3861  007D13  74                 	db	116	;'t'
  3862  007D14  20                 	db	32
  3863  007D15  52                 	db	82	;'R'
  3864  007D16  53                 	db	83	;'S'
  3865  007D17  2D                 	db	45
  3866  007D18  32                 	db	50	;'2'
  3867  007D19  33                 	db	51	;'3'
  3868  007D1A  32                 	db	50	;'2'
  3869  007D1B  0D                 	db	13
  3870  007D1C  0A                 	db	10
  3871  007D1D  00                 	db	0
  3872  007D1E                     STR_26:
  3873  007D1E  2B                 	db	43
  3874  007D1F  4F                 	db	79	;'O'
  3875  007D20  4B                 	db	75	;'K'
  3876  007D21  20                 	db	32
  3877  007D22  2D                 	db	45
  3878  007D23  20                 	db	32
  3879  007D24  43                 	db	67	;'C'
  3880  007D25  6C                 	db	108	;'l'
  3881  007D26  6F                 	db	111	;'o'
  3882  007D27  73                 	db	115	;'s'
  3883  007D28  65                 	db	101	;'e'
  3884  007D29  64                 	db	100	;'d'
  3885  007D2A  20                 	db	32
  3886  007D2B  6D                 	db	109	;'m'
  3887  007D2C  6F                 	db	111	;'o'
  3888  007D2D  64                 	db	100	;'d'
  3889  007D2E  65                 	db	101	;'e'
  3890  007D2F  0D                 	db	13
  3891  007D30  0A                 	db	10
  3892  007D31  00                 	db	0
  3893  007D32                     STR_21:
  3894  007D32  2B                 	db	43
  3895  007D33  4F                 	db	79	;'O'
  3896  007D34  4B                 	db	75	;'K'
  3897  007D35  20                 	db	32
  3898  007D36  2D                 	db	45
  3899  007D37  20                 	db	32
  3900  007D38  4E                 	db	78	;'N'
  3901  007D39  6F                 	db	111	;'o'
  3902  007D3A  72                 	db	114	;'r'
  3903  007D3B  6D                 	db	109	;'m'
  3904  007D3C  61                 	db	97	;'a'
  3905  007D3D  6C                 	db	108	;'l'
  3906  007D3E  20                 	db	32
  3907  007D3F  6D                 	db	109	;'m'
  3908  007D40  6F                 	db	111	;'o'
  3909  007D41  64                 	db	100	;'d'
  3910  007D42  65                 	db	101	;'e'
  3911  007D43  0D                 	db	13
  3912  007D44  0A                 	db	10
  3913  007D45  00                 	db	0
  3914  007D46                     STR_22:
  3915  007D46  2B                 	db	43
  3916  007D47  4F                 	db	79	;'O'
  3917  007D48  4B                 	db	75	;'K'
  3918  007D49  20                 	db	32
  3919  007D4A  2D                 	db	45
  3920  007D4B  20                 	db	32
  3921  007D4C  53                 	db	83	;'S'
  3922  007D4D  69                 	db	105	;'i'
  3923  007D4E  6C                 	db	108	;'l'
  3924  007D4F  65                 	db	101	;'e'
  3925  007D50  6E                 	db	110	;'n'
  3926  007D51  74                 	db	116	;'t'
  3927  007D52  20                 	db	32
  3928  007D53  6D                 	db	109	;'m'
  3929  007D54  6F                 	db	111	;'o'
  3930  007D55  64                 	db	100	;'d'
  3931  007D56  65                 	db	101	;'e'
  3932  007D57  0D                 	db	13
  3933  007D58  0A                 	db	10
  3934  007D59  00                 	db	0
  3935  007D5A                     STR_96:
  3936  007D5A  49                 	db	73	;'I'
  3937  007D5B  6E                 	db	110	;'n'
  3938  007D5C  66                 	db	102	;'f'
  3939  007D5D  6F                 	db	111	;'o'
  3940  007D5E  20                 	db	32
  3941  007D5F  66                 	db	102	;'f'
  3942  007D60  6F                 	db	111	;'o'
  3943  007D61  72                 	db	114	;'r'
  3944  007D62  20                 	db	32
  3945  007D63  6E                 	db	110	;'n'
  3946  007D64  6F                 	db	111	;'o'
  3947  007D65  64                 	db	100	;'d'
  3948  007D66  65                 	db	101	;'e'
  3949  007D67  20                 	db	32
  3950  007D68  69                 	db	105	;'i'
  3951  007D69  64                 	db	100	;'d'
  3952  007D6A  20                 	db	32
  3953  007D6B  3D                 	db	61	;'='
  3954  007D6C  20                 	db	32
  3955  007D6D  00                 	db	0
  3956  007D6E                     STR_273:
  3957  007D6E  46                 	db	70	;'F'
  3958  007D6F  69                 	db	105	;'i'
  3959  007D70  72                 	db	114	;'r'
  3960  007D71  6D                 	db	109	;'m'
  3961  007D72  77                 	db	119	;'w'
  3962  007D73  61                 	db	97	;'a'
  3963  007D74  72                 	db	114	;'r'
  3964  007D75  65                 	db	101	;'e'
  3965  007D76  20                 	db	32
  3966  007D77  76                 	db	118	;'v'
  3967  007D78  65                 	db	101	;'e'
  3968  007D79  72                 	db	114	;'r'
  3969  007D7A  73                 	db	115	;'s'
  3970  007D7B  69                 	db	105	;'i'
  3971  007D7C  6F                 	db	111	;'o'
  3972  007D7D  6E                 	db	110	;'n'
  3973  007D7E  20                 	db	32
  3974  007D7F  3D                 	db	61	;'='
  3975  007D80  20                 	db	32
  3976  007D81  00                 	db	0
  3977  007D82                     STR_23:
  3978  007D82  2B                 	db	43
  3979  007D83  4F                 	db	79	;'O'
  3980  007D84  4B                 	db	75	;'K'
  3981  007D85  20                 	db	32
  3982  007D86  2D                 	db	45
  3983  007D87  20                 	db	32
  3984  007D88  53                 	db	83	;'S'
  3985  007D89  6C                 	db	108	;'l'
  3986  007D8A  65                 	db	101	;'e'
  3987  007D8B  65                 	db	101	;'e'
  3988  007D8C  70                 	db	112	;'p'
  3989  007D8D  20                 	db	32
  3990  007D8E  6D                 	db	109	;'m'
  3991  007D8F  6F                 	db	111	;'o'
  3992  007D90  64                 	db	100	;'d'
  3993  007D91  65                 	db	101	;'e'
  3994  007D92  0D                 	db	13
  3995  007D93  0A                 	db	10
  3996  007D94  00                 	db	0
  3997  007D95                     STR_27:
  3998  007D95  2B                 	db	43
  3999  007D96  4F                 	db	79	;'O'
  4000  007D97  4B                 	db	75	;'K'
  4001  007D98  20                 	db	32
  4002  007D99  2D                 	db	45
  4003  007D9A  20                 	db	32
  4004  007D9B  42                 	db	66	;'B'
  4005  007D9C  69                 	db	105	;'i'
  4006  007D9D  74                 	db	116	;'t'
  4007  007D9E  73                 	db	115	;'s'
  4008  007D9F  20                 	db	32
  4009  007DA0  6D                 	db	109	;'m'
  4010  007DA1  6F                 	db	111	;'o'
  4011  007DA2  64                 	db	100	;'d'
  4012  007DA3  65                 	db	101	;'e'
  4013  007DA4  0D                 	db	13
  4014  007DA5  0A                 	db	10
  4015  007DA6  00                 	db	0
  4016  007DA7                     STR_40:
  4017  007DA7  2B                 	db	43
  4018  007DA8  4F                 	db	79	;'O'
  4019  007DA9  4B                 	db	75	;'K'
  4020  007DAA  20                 	db	32
  4021  007DAB  2D                 	db	45
  4022  007DAC  20                 	db	32
  4023  007DAD  6E                 	db	110	;'n'
  4024  007DAE  6F                 	db	111	;'o'
  4025  007DAF  20                 	db	32
  4026  007DB0  65                 	db	101	;'e'
  4027  007DB1  76                 	db	118	;'v'
  4028  007DB2  65                 	db	101	;'e'
  4029  007DB3  6E                 	db	110	;'n'
  4030  007DB4  74                 	db	116	;'t'
  4031  007DB5  73                 	db	115	;'s'
  4032  007DB6  0D                 	db	13
  4033  007DB7  0A                 	db	10
  4034  007DB8  00                 	db	0
  4035  007DB9                     STR_183:
  4036  007DB9  53                 	db	83	;'S'
  4037  007DBA  65                 	db	101	;'e'
  4038  007DBB  6E                 	db	110	;'n'
  4039  007DBC  74                 	db	116	;'t'
  4040  007DBD  20                 	db	32
  4041  007DBE  43                 	db	67	;'C'
  4042  007DBF  41                 	db	65	;'A'
  4043  007DC0  4E                 	db	78	;'N'
  4044  007DC1  20                 	db	32
  4045  007DC2  66                 	db	102	;'f'
  4046  007DC3  72                 	db	114	;'r'
  4047  007DC4  61                 	db	97	;'a'
  4048  007DC5  6D                 	db	109	;'m'
  4049  007DC6  65                 	db	101	;'e'
  4050  007DC7  73                 	db	115	;'s'
  4051  007DC8  3A                 	db	58	;':'
  4052  007DC9  20                 	db	32
  4053  007DCA  00                 	db	0
  4054  007DCB                     STR_286:
  4055  007DCB  30                 	db	48	;'0'
  4056  007DCC  31                 	db	49	;'1'
  4057  007DCD  32                 	db	50	;'2'
  4058  007DCE  33                 	db	51	;'3'
  4059  007DCF  34                 	db	52	;'4'
  4060  007DD0  35                 	db	53	;'5'
  4061  007DD1  36                 	db	54	;'6'
  4062  007DD2  37                 	db	55	;'7'
  4063  007DD3  38                 	db	56	;'8'
  4064  007DD4  39                 	db	57	;'9'
  4065  007DD5  41                 	db	65	;'A'
  4066  007DD6  42                 	db	66	;'B'
  4067  007DD7  43                 	db	67	;'C'
  4068  007DD8  44                 	db	68	;'D'
  4069  007DD9  45                 	db	69	;'E'
  4070  007DDA  46                 	db	70	;'F'
  4071  007DDB  00                 	db	0
  4072  007DDC                     STR_287:
  4073  007DDC  30                 	db	48	;'0'
  4074  007DDD  31                 	db	49	;'1'
  4075  007DDE  32                 	db	50	;'2'
  4076  007DDF  33                 	db	51	;'3'
  4077  007DE0  34                 	db	52	;'4'
  4078  007DE1  35                 	db	53	;'5'
  4079  007DE2  36                 	db	54	;'6'
  4080  007DE3  37                 	db	55	;'7'
  4081  007DE4  38                 	db	56	;'8'
  4082  007DE5  39                 	db	57	;'9'
  4083  007DE6  61                 	db	97	;'a'
  4084  007DE7  62                 	db	98	;'b'
  4085  007DE8  63                 	db	99	;'c'
  4086  007DE9  64                 	db	100	;'d'
  4087  007DEA  65                 	db	101	;'e'
  4088  007DEB  66                 	db	102	;'f'
  4089  007DEC  00                 	db	0
  4090  007DED                     STR_187:
  4091  007DED  53                 	db	83	;'S'
  4092  007DEE  65                 	db	101	;'e'
  4093  007DEF  6E                 	db	110	;'n'
  4094  007DF0  74                 	db	116	;'t'
  4095  007DF1  20                 	db	32
  4096  007DF2  43                 	db	67	;'C'
  4097  007DF3  41                 	db	65	;'A'
  4098  007DF4  4E                 	db	78	;'N'
  4099  007DF5  20                 	db	32
  4100  007DF6  62                 	db	98	;'b'
  4101  007DF7  79                 	db	121	;'y'
  4102  007DF8  74                 	db	116	;'t'
  4103  007DF9  65                 	db	101	;'e'
  4104  007DFA  73                 	db	115	;'s'
  4105  007DFB  3A                 	db	58	;':'
  4106  007DFC  20                 	db	32
  4107  007DFD  00                 	db	0
  4108  007DFE                     STR_69:
  4109  007DFE  2D                 	db	45
  4110  007DFF  45                 	db	69	;'E'
  4111  007E00  52                 	db	82	;'R'
  4112  007E01  52                 	db	82	;'R'
  4113  007E02  4F                 	db	79	;'O'
  4114  007E03  52                 	db	82	;'R'
  4115  007E04  20                 	db	32
  4116  007E05  2D                 	db	45
  4117  007E06  20                 	db	32
  4118  007E07  6E                 	db	110	;'n'
  4119  007E08  6F                 	db	111	;'o'
  4120  007E09  64                 	db	100	;'d'
  4121  007E0A  65                 	db	101	;'e'
  4122  007E0B  69                 	db	105	;'i'
  4123  007E0C  64                 	db	100	;'d'
  4124  007E0D  3D                 	db	61	;'='
  4125  007E0E  00                 	db	0
  4126  007E0F                     STR_265:
  4127  007E0F  20                 	db	32
  4128  007E10  6E                 	db	110	;'n'
  4129  007E11  6F                 	db	111	;'o'
  4130  007E12  64                 	db	100	;'d'
  4131  007E13  65                 	db	101	;'e'
  4132  007E14  73                 	db	115	;'s'
  4133  007E15  20                 	db	32
  4134  007E16  66                 	db	102	;'f'
  4135  007E17  6F                 	db	111	;'o'
  4136  007E18  75                 	db	117	;'u'
  4137  007E19  6E                 	db	110	;'n'
  4138  007E1A  64                 	db	100	;'d'
  4139  007E1B  0D                 	db	13
  4140  007E1C  0A                 	db	10
  4141  007E1D  00                 	db	0
  4142  007E1E                     STR_58:
  4143  007E1E  56                 	db	86	;'V'
  4144  007E1F  61                 	db	97	;'a'
  4145  007E20  6C                 	db	108	;'l'
  4146  007E21  75                 	db	117	;'u'
  4147  007E22  65                 	db	101	;'e'
  4148  007E23  20                 	db	32
  4149  007E24  66                 	db	102	;'f'
  4150  007E25  6F                 	db	111	;'o'
  4151  007E26  72                 	db	114	;'r'
  4152  007E27  20                 	db	32
  4153  007E28  72                 	db	114	;'r'
  4154  007E29  65                 	db	101	;'e'
  4155  007E2A  67                 	db	103	;'g'
  4156  007E2B  20                 	db	32
  4157  007E2C  00                 	db	0
  4158  007E2D                     STR_271:
  4159  007E2D  4D                 	db	77	;'M'
  4160  007E2E  44                 	db	68	;'D'
  4161  007E2F  46                 	db	70	;'F'
  4162  007E30  20                 	db	32
  4163  007E31  3D                 	db	61	;'='
  4164  007E32  20                 	db	32
  4165  007E33  68                 	db	104	;'h'
  4166  007E34  74                 	db	116	;'t'
  4167  007E35  74                 	db	116	;'t'
  4168  007E36  70                 	db	112	;'p'
  4169  007E37  3A                 	db	58	;':'
  4170  007E38  2F                 	db	47
  4171  007E39  2F                 	db	47
  4172  007E3A  00                 	db	0
  4173  007E3B                     STR_55:
  4174  007E3B  2B                 	db	43
  4175  007E3C  4F                 	db	79	;'O'
  4176  007E3D  4B                 	db	75	;'K'
  4177  007E3E  20                 	db	32
  4178  007E3F  2D                 	db	45
  4179  007E40  20                 	db	32
  4180  007E41  6E                 	db	110	;'n'
  4181  007E42  6F                 	db	111	;'o'
  4182  007E43  64                 	db	100	;'d'
  4183  007E44  65                 	db	101	;'e'
  4184  007E45  69                 	db	105	;'i'
  4185  007E46  64                 	db	100	;'d'
  4186  007E47  3D                 	db	61	;'='
  4187  007E48  00                 	db	0
  4188  007E49                     STR_281:
  4189  007E49  56                 	db	86	;'V'
  4190  007E4A  53                 	db	83	;'S'
  4191  007E4B  43                 	db	67	;'C'
  4192  007E4C  50                 	db	80	;'P'
  4193  007E4D  20                 	db	32
  4194  007E4E  44                 	db	68	;'D'
  4195  007E4F  72                 	db	114	;'r'
  4196  007E50  69                 	db	105	;'i'
  4197  007E51  76                 	db	118	;'v'
  4198  007E52  65                 	db	101	;'e'
  4199  007E53  72                 	db	114	;'r'
  4200  007E54  00                 	db	0
  4201  007E55                     STR_132:
  4202  007E55  52                 	db	82	;'R'
  4203  007E56  57                 	db	87	;'W'
  4204  007E57  54                 	db	84	;'T'
  4205  007E58  49                 	db	73	;'I'
  4206  007E59  4D                 	db	77	;'M'
  4207  007E5A  45                 	db	69	;'E'
  4208  007E5B  4F                 	db	79	;'O'
  4209  007E5C  55                 	db	85	;'U'
  4210  007E5D  54                 	db	84	;'T'
  4211  007E5E  20                 	db	32
  4212  007E5F  00                 	db	0
  4213  007E60                     STR_181:
  4214  007E60  2C                 	db	44
  4215  007E61  44                 	db	68	;'D'
  4216  007E62  61                 	db	97	;'a'
  4217  007E63  74                 	db	116	;'t'
  4218  007E64  61                 	db	97	;'a'
  4219  007E65  3D                 	db	61	;'='
  4220  007E66  6E                 	db	110	;'n'
  4221  007E67  6F                 	db	111	;'o'
  4222  007E68  6E                 	db	110	;'n'
  4223  007E69  65                 	db	101	;'e'
  4224  007E6A  00                 	db	0
  4225  007E6B                     STR_56:
  4226  007E6B  30                 	db	48	;'0'
  4227  007E6C  78                 	db	120	;'x'
  4228  007E6D  25                 	db	37
  4229  007E6E  30                 	db	48	;'0'
  4230  007E6F  32                 	db	50	;'2'
  4231  007E70  58                 	db	88	;'X'
  4232  007E71  20                 	db	32
  4233  007E72  2D                 	db	45
  4234  007E73  20                 	db	32
  4235  007E74  00                 	db	0
  4236  007E75                     STR_277:
  4237  007E75  56                 	db	86	;'V'
  4238  007E76  65                 	db	101	;'e'
  4239  007E77  72                 	db	114	;'r'
  4240  007E78  73                 	db	115	;'s'
  4241  007E79  69                 	db	105	;'i'
  4242  007E7A  6F                 	db	111	;'o'
  4243  007E7B  6E                 	db	110	;'n'
  4244  007E7C  3A                 	db	58	;':'
  4245  007E7D  20                 	db	32
  4246  007E7E  00                 	db	0
  4247  007E7F                     STR_283:
  4248  007E7F  56                 	db	86	;'V'
  4249  007E80  53                 	db	83	;'S'
  4250  007E81  43                 	db	67	;'C'
  4251  007E82  50                 	db	80	;'P'
  4252  007E83  20                 	db	32
  4253  007E84  4E                 	db	78	;'N'
  4254  007E85  6F                 	db	111	;'o'
  4255  007E86  64                 	db	100	;'d'
  4256  007E87  65                 	db	101	;'e'
  4257  007E88  00                 	db	0
  4258  007E89                     STR_282:
  4259  007E89  53                 	db	83	;'S'
  4260  007E8A  4C                 	db	76	;'L'
  4261  007E8B  20                 	db	32
  4262  007E8C  44                 	db	68	;'D'
  4263  007E8D  72                 	db	114	;'r'
  4264  007E8E  69                 	db	105	;'i'
  4265  007E8F  76                 	db	118	;'v'
  4266  007E90  65                 	db	101	;'e'
  4267  007E91  72                 	db	114	;'r'
  4268  007E92  00                 	db	0
  4269  007E93                     STR_134:
  4270  007E93  53                 	db	83	;'S'
  4271  007E94  54                 	db	84	;'T'
  4272  007E95  41                 	db	65	;'A'
  4273  007E96  52                 	db	82	;'R'
  4274  007E97  54                 	db	84	;'T'
  4275  007E98  49                 	db	73	;'I'
  4276  007E99  46                 	db	70	;'F'
  4277  007E9A  20                 	db	32
  4278  007E9B  00                 	db	0
  4279  007E9C                     STR_171:
  4280  007E9C  2C                 	db	44
  4281  007E9D  6E                 	db	110	;'n'
  4282  007E9E  6F                 	db	111	;'o'
  4283  007E9F  64                 	db	100	;'d'
  4284  007EA0  65                 	db	101	;'e'
  4285  007EA1  69                 	db	105	;'i'
  4286  007EA2  64                 	db	100	;'d'
  4287  007EA3  3D                 	db	61	;'='
  4288  007EA4  00                 	db	0
  4289  007EA5                     STR_14:
  4290  007EA5  4C                 	db	76	;'L'
  4291  007EA6  4F                 	db	79	;'O'
  4292  007EA7  4F                 	db	79	;'O'
  4293  007EA8  50                 	db	80	;'P'
  4294  007EA9  42                 	db	66	;'B'
  4295  007EAA  41                 	db	65	;'A'
  4296  007EAB  43                 	db	67	;'C'
  4297  007EAC  4B                 	db	75	;'K'
  4298  007EAD  00                 	db	0
  4299  007EAE                     STR_151:
  4300  007EAE  44                 	db	68	;'D'
  4301  007EAF  45                 	db	69	;'E'
  4302  007EB0  46                 	db	70	;'F'
  4303  007EB1  41                 	db	65	;'A'
  4304  007EB2  55                 	db	85	;'U'
  4305  007EB3  4C                 	db	76	;'L'
  4306  007EB4  54                 	db	84	;'T'
  4307  007EB5  53                 	db	83	;'S'
  4308  007EB6  00                 	db	0
  4309  007EB7                     STR_157:
  4310  007EB7  56                 	db	86	;'V'
  4311  007EB8  31                 	db	49	;'1'
  4312  007EB9  30                 	db	48	;'0'
  4313  007EBA  31                 	db	49	;'1'
  4314  007EBB  31                 	db	49	;'1'
  4315  007EBC  0D                 	db	13
  4316  007EBD  0A                 	db	10
  4317  007EBE  00                 	db	0
  4318  007EBF                     STR_158:
  4319  007EBF  4E                 	db	78	;'N'
  4320  007EC0  31                 	db	49	;'1'
  4321  007EC1  39                 	db	57	;'9'
  4322  007EC2  37                 	db	55	;'7'
  4323  007EC3  37                 	db	55	;'7'
  4324  007EC4  0D                 	db	13
  4325  007EC5  0A                 	db	10
  4326  007EC6  00                 	db	0
  4327  007EC7                     STR_89:
  4328  007EC7  30                 	db	48	;'0'
  4329  007EC8  78                 	db	120	;'x'
  4330  007EC9  25                 	db	37
  4331  007ECA  30                 	db	48	;'0'
  4332  007ECB  32                 	db	50	;'2'
  4333  007ECC  58                 	db	88	;'X'
  4334  007ECD  0A                 	db	10
  4335  007ECE  00                 	db	0
  4336  007ECF                     STR_266:
  4337  007ECF  47                 	db	71	;'G'
  4338  007ED0  55                 	db	85	;'U'
  4339  007ED1  49                 	db	73	;'I'
  4340  007ED2  44                 	db	68	;'D'
  4341  007ED3  20                 	db	32
  4342  007ED4  3D                 	db	61	;'='
  4343  007ED5  20                 	db	32
  4344  007ED6  00                 	db	0
  4345  007ED7                     STR_147:
  4346  007ED7  46                 	db	70	;'F'
  4347  007ED8  49                 	db	73	;'I'
  4348  007ED9  4C                 	db	76	;'L'
  4349  007EDA  54                 	db	84	;'T'
  4350  007EDB  45                 	db	69	;'E'
  4351  007EDC  52                 	db	82	;'R'
  4352  007EDD  20                 	db	32
  4353  007EDE  00                 	db	0
  4354  007EDF                     STR_165:
  4355  007EDF  2C                 	db	44
  4356  007EE0  63                 	db	99	;'c'
  4357  007EE1  6C                 	db	108	;'l'
  4358  007EE2  61                 	db	97	;'a'
  4359  007EE3  73                 	db	115	;'s'
  4360  007EE4  73                 	db	115	;'s'
  4361  007EE5  3D                 	db	61	;'='
  4362  007EE6  00                 	db	0
  4363  007EE7                     STR_141:
  4364  007EE7  56                 	db	86	;'V'
  4365  007EE8  45                 	db	69	;'E'
  4366  007EE9  52                 	db	82	;'R'
  4367  007EEA  42                 	db	66	;'B'
  4368  007EEB  4F                 	db	79	;'O'
  4369  007EEC  53                 	db	83	;'S'
  4370  007EED  45                 	db	69	;'E'
  4371  007EEE  00                 	db	0
  4372  007EEF                     STR_130:
  4373  007EEF  44                 	db	68	;'D'
  4374  007EF0  45                 	db	69	;'E'
  4375  007EF1  43                 	db	67	;'C'
  4376  007EF2  49                 	db	73	;'I'
  4377  007EF3  4D                 	db	77	;'M'
  4378  007EF4  41                 	db	65	;'A'
  4379  007EF5  4C                 	db	76	;'L'
  4380  007EF6  00                 	db	0
  4381  007EF7                     STR_18:
  4382  007EF7  56                 	db	86	;'V'
  4383  007EF8  45                 	db	69	;'E'
  4384  007EF9  52                 	db	82	;'R'
  4385  007EFA  53                 	db	83	;'S'
  4386  007EFB  49                 	db	73	;'I'
  4387  007EFC  4F                 	db	79	;'O'
  4388  007EFD  4E                 	db	78	;'N'
  4389  007EFE  00                 	db	0
  4390  007EFF                     STR_200:
  4391  007EFF  30                 	db	48	;'0'
  4392  007F00  78                 	db	120	;'x'
  4393  007F01  25                 	db	37
  4394  007F02  30                 	db	48	;'0'
  4395  007F03  38                 	db	56	;'8'
  4396  007F04  6C                 	db	108	;'l'
  4397  007F05  58                 	db	88	;'X'
  4398  007F06  00                 	db	0
  4399  007F07                     STR_280:
  4400  007F07  56                 	db	86	;'V'
  4401  007F08  65                 	db	101	;'e'
  4402  007F09  72                 	db	114	;'r'
  4403  007F0A  62                 	db	98	;'b'
  4404  007F0B  6F                 	db	111	;'o'
  4405  007F0C  73                 	db	115	;'s'
  4406  007F0D  65                 	db	101	;'e'
  4407  007F0E  00                 	db	0
  4408  007F0F                     STR_279:
  4409  007F0F  4D                 	db	77	;'M'
  4410  007F10  6F                 	db	111	;'o'
  4411  007F11  64                 	db	100	;'d'
  4412  007F12  65                 	db	101	;'e'
  4413  007F13  3A                 	db	58	;':'
  4414  007F14  20                 	db	32
  4415  007F15  00                 	db	0
  4416  007F16                     STR_177:
  4417  007F16  2C                 	db	44
  4418  007F17  44                 	db	68	;'D'
  4419  007F18  61                 	db	97	;'a'
  4420  007F19  74                 	db	116	;'t'
  4421  007F1A  61                 	db	97	;'a'
  4422  007F1B  3D                 	db	61	;'='
  4423  007F1C  00                 	db	0
  4424  007F1D                     STR_168:
  4425  007F1D  2C                 	db	44
  4426  007F1E  74                 	db	116	;'t'
  4427  007F1F  79                 	db	121	;'y'
  4428  007F20  70                 	db	112	;'p'
  4429  007F21  65                 	db	101	;'e'
  4430  007F22  3D                 	db	61	;'='
  4431  007F23  00                 	db	0
  4432  007F24                     STR_174:
  4433  007F24  2C                 	db	44
  4434  007F25  73                 	db	115	;'s'
  4435  007F26  69                 	db	105	;'i'
  4436  007F27  7A                 	db	122	;'z'
  4437  007F28  65                 	db	101	;'e'
  4438  007F29  3D                 	db	61	;'='
  4439  007F2A  00                 	db	0
  4440  007F2B                     STR_162:
  4441  007F2B  3C                 	db	60	;'<'
  4442  007F2C  50                 	db	80	;'P'
  4443  007F2D  72                 	db	114	;'r'
  4444  007F2E  69                 	db	105	;'i'
  4445  007F2F  6F                 	db	111	;'o'
  4446  007F30  3D                 	db	61	;'='
  4447  007F31  00                 	db	0
  4448  007F32                     STR_20:
  4449  007F32  49                 	db	73	;'I'
  4450  007F33  46                 	db	70	;'F'
  4451  007F34  4D                 	db	77	;'M'
  4452  007F35  4F                 	db	79	;'O'
  4453  007F36  44                 	db	68	;'D'
  4454  007F37  45                 	db	69	;'E'
  4455  007F38  00                 	db	0
  4456  007F39                     STR_16:
  4457  007F39  4C                 	db	76	;'L'
  4458  007F3A  49                 	db	73	;'I'
  4459  007F3B  53                 	db	83	;'S'
  4460  007F3C  54                 	db	84	;'T'
  4461  007F3D  45                 	db	69	;'E'
  4462  007F3E  4E                 	db	78	;'N'
  4463  007F3F  00                 	db	0
  4464  007F40                     STR_101:
  4465  007F40  46                 	db	70	;'F'
  4466  007F41  49                 	db	73	;'I'
  4467  007F42  4C                 	db	76	;'L'
  4468  007F43  54                 	db	84	;'T'
  4469  007F44  45                 	db	69	;'E'
  4470  007F45  52                 	db	82	;'R'
  4471  007F46  00                 	db	0
  4472  007F47                     STR_10:
  4473  007F47  53                 	db	83	;'S'
  4474  007F48  49                 	db	73	;'I'
  4475  007F49  4C                 	db	76	;'L'
  4476  007F4A  45                 	db	69	;'E'
  4477  007F4B  4E                 	db	78	;'N'
  4478  007F4C  54                 	db	84	;'T'
  4479  007F4D  00                 	db	0
  4480  007F4E                     STR_59:
  4481  007F4E  30                 	db	48	;'0'
  4482  007F4F  78                 	db	120	;'x'
  4483  007F50  25                 	db	37
  4484  007F51  30                 	db	48	;'0'
  4485  007F52  32                 	db	50	;'2'
  4486  007F53  58                 	db	88	;'X'
  4487  007F54  00                 	db	0
  4488  007F55                     STR_166:
  4489  007F55  30                 	db	48	;'0'
  4490  007F56  78                 	db	120	;'x'
  4491  007F57  25                 	db	37
  4492  007F58  30                 	db	48	;'0'
  4493  007F59  34                 	db	52	;'4'
  4494  007F5A  58                 	db	88	;'X'
  4495  007F5B  00                 	db	0
  4496  007F5C                     STR_184:
  4497  007F5C  30                 	db	48	;'0'
  4498  007F5D  78                 	db	120	;'x'
  4499  007F5E  25                 	db	37
  4500  007F5F  30                 	db	48	;'0'
  4501  007F60  38                 	db	56	;'8'
  4502  007F61  58                 	db	88	;'X'
  4503  007F62  00                 	db	0
  4504  007F63                     STR_159:
  4505  007F63  46                 	db	70	;'F'
  4506  007F64  30                 	db	48	;'0'
  4507  007F65  30                 	db	48	;'0'
  4508  007F66  0D                 	db	13
  4509  007F67  0A                 	db	10
  4510  007F68  00                 	db	0
  4511  007F69                     STR_9:
  4512  007F69  2B                 	db	43
  4513  007F6A  4F                 	db	79	;'O'
  4514  007F6B  4B                 	db	75	;'K'
  4515  007F6C  0D                 	db	13
  4516  007F6D  0A                 	db	10
  4517  007F6E  00                 	db	0
  4518  007F6F                     STR_57:
  4519  007F6F  25                 	db	37
  4520  007F70  64                 	db	100	;'d'
  4521  007F71  20                 	db	32
  4522  007F72  2D                 	db	45
  4523  007F73  20                 	db	32
  4524  007F74  00                 	db	0
  4525  007F75                     STR_140:
  4526  007F75  4D                 	db	77	;'M'
  4527  007F76  4F                 	db	79	;'O'
  4528  007F77  44                 	db	68	;'D'
  4529  007F78  45                 	db	69	;'E'
  4530  007F79  20                 	db	32
  4531  007F7A  00                 	db	0
  4532  007F7B                     STR_148:
  4533  007F7B  4D                 	db	77	;'M'
  4534  007F7C  41                 	db	65	;'A'
  4535  007F7D  53                 	db	83	;'S'
  4536  007F7E  4B                 	db	75	;'K'
  4537  007F7F  20                 	db	32
  4538  007F80  00                 	db	0
  4539  007F81                     STR_149:
  4540  007F81  45                 	db	69	;'E'
  4541  007F82  43                 	db	67	;'C'
  4542  007F83  48                 	db	72	;'H'
  4543  007F84  4F                 	db	79	;'O'
  4544  007F85  20                 	db	32
  4545  007F86  00                 	db	0
  4546  007F87                     STR_12:
  4547  007F87  43                 	db	67	;'C'
  4548  007F88  4C                 	db	76	;'L'
  4549  007F89  4F                 	db	79	;'O'
  4550  007F8A  53                 	db	83	;'S'
  4551  007F8B  45                 	db	69	;'E'
  4552  007F8C  00                 	db	0
  4553  007F8D                     STR_145:
  4554  007F8D  53                 	db	83	;'S'
  4555  007F8E  4C                 	db	76	;'L'
  4556  007F8F  43                 	db	67	;'C'
  4557  007F90  41                 	db	65	;'A'
  4558  007F91  4E                 	db	78	;'N'
  4559  007F92  00                 	db	0
  4560  007F93                     STR_127:
  4561  007F93  53                 	db	83	;'S'
  4562  007F94  45                 	db	69	;'E'
  4563  007F95  54                 	db	84	;'T'
  4564  007F96  20                 	db	32
  4565  007F97  00                 	db	0
  4566  007F98                     STR_47:
  4567  007F98  46                 	db	70	;'F'
  4568  007F99  49                 	db	73	;'I'
  4569  007F9A  4E                 	db	78	;'N'
  4570  007F9B  44                 	db	68	;'D'
  4571  007F9C  00                 	db	0
  4572  007F9D                     STR_49:
  4573  007F9D  52                 	db	82	;'R'
  4574  007F9E  52                 	db	82	;'R'
  4575  007F9F  45                 	db	69	;'E'
  4576  007FA0  47                 	db	71	;'G'
  4577  007FA1  00                 	db	0
  4578  007FA2                     STR_80:
  4579  007FA2  57                 	db	87	;'W'
  4580  007FA3  52                 	db	82	;'R'
  4581  007FA4  45                 	db	69	;'E'
  4582  007FA5  47                 	db	71	;'G'
  4583  007FA6  00                 	db	0
  4584  007FA7                     STR_114:
  4585  007FA7  4D                 	db	77	;'M'
  4586  007FA8  41                 	db	65	;'A'
  4587  007FA9  53                 	db	83	;'S'
  4588  007FAA  4B                 	db	75	;'K'
  4589  007FAB  00                 	db	0
  4590  007FAC                     STR_8:
  4591  007FAC  4F                 	db	79	;'O'
  4592  007FAD  50                 	db	80	;'P'
  4593  007FAE  45                 	db	69	;'E'
  4594  007FAF  4E                 	db	78	;'N'
  4595  007FB0  00                 	db	0
  4596  007FB1                     STR_95:
  4597  007FB1  49                 	db	73	;'I'
  4598  007FB2  4E                 	db	78	;'N'
  4599  007FB3  46                 	db	70	;'F'
  4600  007FB4  4F                 	db	79	;'O'
  4601  007FB5  00                 	db	0
  4602  007FB6                     STR_143:
  4603  007FB6  56                 	db	86	;'V'
  4604  007FB7  53                 	db	83	;'S'
  4605  007FB8  43                 	db	67	;'C'
  4606  007FB9  50                 	db	80	;'P'
  4607  007FBA  00                 	db	0
  4608  007FBB                     STR_45:
  4609  007FBB  48                 	db	72	;'H'
  4610  007FBC  45                 	db	69	;'E'
  4611  007FBD  4C                 	db	76	;'L'
  4612  007FBE  50                 	db	80	;'P'
  4613  007FBF  00                 	db	0
  4614  007FC0                     STR_41:
  4615  007FC0  53                 	db	83	;'S'
  4616  007FC1  54                 	db	84	;'T'
  4617  007FC2  41                 	db	65	;'A'
  4618  007FC3  54                 	db	84	;'T'
  4619  007FC4  00                 	db	0
  4620  007FC5                     STR_6:
  4621  007FC5  42                 	db	66	;'B'
  4622  007FC6  4F                 	db	79	;'O'
  4623  007FC7  4F                 	db	79	;'O'
  4624  007FC8  54                 	db	84	;'T'
  4625  007FC9  00                 	db	0
  4626  007FCA                     STR_67:
  4627  007FCA  27                 	db	39
  4628  007FCB  20                 	db	32
  4629  007FCC  09                 	db	9
  4630  007FCD  00                 	db	0
  4631  007FCE                     STR_182:
  4632  007FCE  3E                 	db	62	;'>'
  4633  007FCF  0D                 	db	13
  4634  007FD0  0A                 	db	10
  4635  007FD1  00                 	db	0
  4636  007FD2                     STR_90:
  4637  007FD2  25                 	db	37
  4638  007FD3  64                 	db	100	;'d'
  4639  007FD4  0A                 	db	10
  4640  007FD5  00                 	db	0
  4641  007FD6                     STR_43:
  4642  007FD6  45                 	db	69	;'E'
  4643  007FD7  52                 	db	82	;'R'
  4644  007FD8  52                 	db	82	;'R'
  4645  007FD9  00                 	db	0
  4646  007FDA                     STR_128:
  4647  007FDA  48                 	db	72	;'H'
  4648  007FDB  45                 	db	69	;'E'
  4649  007FDC  58                 	db	88	;'X'
  4650  007FDD  00                 	db	0
  4651  007FDE                     STR_185:
  4652  007FDE  25                 	db	37
  4653  007FDF  6C                 	db	108	;'l'
  4654  007FE0  75                 	db	117	;'u'
  4655  007FE1  00                 	db	0
  4656  007FE2                     STR_66:
  4657  007FE2  09                 	db	9
  4658  007FE3  27                 	db	39
  4659  007FE4  00                 	db	0
  4660  007FE5                     STR_268:
  4661  007FE5  2D                 	db	45
  4662  007FE6  2D                 	db	45
  4663  007FE7  00                 	db	0
  4664  007FE8                     STR_38:
  4665  007FE8  52                 	db	82	;'R'
  4666  007FE9  58                 	db	88	;'X'
  4667  007FEA  00                 	db	0
  4668  007FEB                     STR_29:
  4669  007FEB  54                 	db	84	;'T'
  4670  007FEC  58                 	db	88	;'X'
  4671  007FED  00                 	db	0
  4672  007FEE                     STR_60:
  4673  007FEE  25                 	db	37
  4674  007FEF  64                 	db	100	;'d'
  4675  007FF0  00                 	db	0
  4676  007FF1                     STR_161:
  4677  007FF1  07                 	db	7
  4678  007FF2  00                 	db	0
  4679  007FF3                     STR_160:
  4680  007FF3  0D                 	db	13
  4681  007FF4  00                 	db	0
  4682  007FF5                     STR_30:
  4683  007FF5  2C                 	db	44
  4684  007FF6  00                 	db	0
  4685  007FF7                     STR_275:
  4686  007FF7  2E                 	db	46
  4687  007FF8  00                 	db	0
  4688  007FF9                     STR_267:
  4689  007FF9  30                 	db	48	;'0'
  4690  007FFA  00                 	db	0
  4691  007FFB                     STR_269:
  4692  007FFB  3A                 	db	58	;':'
  4693  007FFC  00                 	db	0
  4694  007FFD                     STR_152:
  4695  007FFD  3F                 	db	63	;'?'
  4696  007FFE  00                 	db	0
  4697  007FFF                     __end_of__stringdata:
  4698                           	opt stack 0
  4699                           
  4700                           ; #config settings
  4701  007FFF  00                 	db	0	; dummy byte at the end
  4702  0000                     tblptru	equ	0xFF8
  4703                           tblptrh	equ	0xFF7
  4704                           tblptrl	equ	0xFF6
  4705                           tablat	equ	0xFF5
  4706                           prodh	equ	0xFF4
  4707                           prodl	equ	0xFF3
  4708                           intcon	equ	0xFF2
  4709                           indf0	equ	0xFEF
  4710                           fsr0h	equ	0xFEA
  4711                           fsr0l	equ	0xFE9
  4712                           wreg	equ	0xFE8
  4713                           indf1	equ	0xFE7
  4714                           postinc1	equ	0xFE6
  4715                           postdec1	equ	0xFE5
  4716                           fsr1h	equ	0xFE2
  4717                           fsr1l	equ	0xFE1
  4718                           indf2	equ	0xFDF
  4719                           postinc2	equ	0xFDE
  4720                           postdec2	equ	0xFDD
  4721                           plusw2	equ	0xFDB
  4722                           fsr2h	equ	0xFDA
  4723                           fsr2l	equ	0xFD9
  4724                           status	equ	0xFD8
  4725                           
  4726                           	psect	nvBANK1
  4727  0001ED                     __pnvBANK1:
  4728                           	opt stack 0
  4729  0001ED                     _caps:
  4730                           	opt stack 0
  4731  0001ED                     	ds	2
  4732                           tblptru	equ	0xFF8
  4733                           tblptrh	equ	0xFF7
  4734                           tblptrl	equ	0xFF6
  4735                           tablat	equ	0xFF5
  4736                           prodh	equ	0xFF4
  4737                           prodl	equ	0xFF3
  4738                           intcon	equ	0xFF2
  4739                           indf0	equ	0xFEF
  4740                           fsr0h	equ	0xFEA
  4741                           fsr0l	equ	0xFE9
  4742                           wreg	equ	0xFE8
  4743                           indf1	equ	0xFE7
  4744                           postinc1	equ	0xFE6
  4745                           postdec1	equ	0xFE5
  4746                           fsr1h	equ	0xFE2
  4747                           fsr1l	equ	0xFE1
  4748                           indf2	equ	0xFDF
  4749                           postinc2	equ	0xFDE
  4750                           postdec2	equ	0xFDD
  4751                           plusw2	equ	0xFDB
  4752                           fsr2h	equ	0xFDA
  4753                           fsr2l	equ	0xFD9
  4754                           status	equ	0xFD8
  4755                           
  4756                           	psect	cinit
  4757  005932                     __pcinit:
  4758                           	opt stack 0
  4759  005932                     start_initialization:
  4760                           	opt stack 0
  4761  005932                     __initialization:
  4762                           	opt stack 0
  4763                           
  4764                           ; Clear objects allocated to BIGRAM (494 bytes)
  4765  005932  EE04  F000         	lfsr	0,__pbssBIGRAM
  4766  005936  EE11 F0EE          	lfsr	1,494
  4767  00593A                     clear_0:
  4768  00593A  6AEE               	clrf	postinc0,c
  4769  00593C  50E5               	movf	postdec1,w,c
  4770  00593E  50E1               	movf	fsr1l,w,c
  4771  005940  E1FC               	bnz	clear_0
  4772  005942  50E2               	movf	fsr1h,w,c
  4773  005944  E1FA               	bnz	clear_0
  4774                           
  4775                           ; Clear objects allocated to BANK3 (256 bytes)
  4776  005946  EE03  F000         	lfsr	0,__pbssBANK3
  4777  00594A  EE11 F000          	lfsr	1,256
  4778  00594E                     clear_1:
  4779  00594E  6AEE               	clrf	postinc0,c
  4780  005950  50E5               	movf	postdec1,w,c
  4781  005952  50E1               	movf	fsr1l,w,c
  4782  005954  E1FC               	bnz	clear_1
  4783  005956  50E2               	movf	fsr1h,w,c
  4784  005958  E1FA               	bnz	clear_1
  4785                           
  4786                           ; Clear objects allocated to BANK2 (128 bytes)
  4787  00595A  EE02  F000         	lfsr	0,__pbssBANK2
  4788  00595E  0E80               	movlw	128
  4789  005960                     clear_2:
  4790  005960  6AEE               	clrf	postinc0,c
  4791  005962  06E8               	decf	wreg,f,c
  4792  005964  E1FD               	bnz	clear_2
  4793                           
  4794                           ; Clear objects allocated to BANK1 (237 bytes)
  4795  005966  EE01  F000         	lfsr	0,__pbssBANK1
  4796  00596A  0EED               	movlw	237
  4797  00596C                     clear_3:
  4798  00596C  6AEE               	clrf	postinc0,c
  4799  00596E  06E8               	decf	wreg,f,c
  4800  005970  E1FD               	bnz	clear_3
  4801                           
  4802                           ; Clear objects allocated to COMRAM (29 bytes)
  4803  005972  EE00  F022         	lfsr	0,__pbssCOMRAM
  4804  005976  0E1D               	movlw	29
  4805  005978                     clear_4:
  4806  005978  6AEE               	clrf	postinc0,c
  4807  00597A  06E8               	decf	wreg,f,c
  4808  00597C  E1FD               	bnz	clear_4
  4809  00597E                     end_of_initialization:
  4810                           	opt stack 0
  4811  00597E                     __end_of__initialization:
  4812                           	opt stack 0
  4813  00597E  0E00               	movlw	low (__Lmediumconst shr (0+16))
  4814  005980  6EF8               	movwf	tblptru,c
  4815  005982  0100               	movlb	0
  4816  005984  EF49  F016         	goto	_main	;jump to C main() function
  4817                           tblptru	equ	0xFF8
  4818                           tblptrh	equ	0xFF7
  4819                           tblptrl	equ	0xFF6
  4820                           tablat	equ	0xFF5
  4821                           prodh	equ	0xFF4
  4822                           prodl	equ	0xFF3
  4823                           intcon	equ	0xFF2
  4824                           indf0	equ	0xFEF
  4825                           postinc0	equ	0xFEE
  4826                           fsr0h	equ	0xFEA
  4827                           fsr0l	equ	0xFE9
  4828                           wreg	equ	0xFE8
  4829                           indf1	equ	0xFE7
  4830                           postinc1	equ	0xFE6
  4831                           postdec1	equ	0xFE5
  4832                           fsr1h	equ	0xFE2
  4833                           fsr1l	equ	0xFE1
  4834                           indf2	equ	0xFDF
  4835                           postinc2	equ	0xFDE
  4836                           postdec2	equ	0xFDD
  4837                           plusw2	equ	0xFDB
  4838                           fsr2h	equ	0xFDA
  4839                           fsr2l	equ	0xFD9
  4840                           status	equ	0xFD8
  4841                           
  4842                           	psect	bssCOMRAM
  4843  000022                     __pbssCOMRAM:
  4844                           	opt stack 0
  4845  000022                     _made_table:
  4846                           	opt stack 0
  4847  000022                     	ds	2
  4848  000024                     _status_led_cnt:
  4849                           	opt stack 0
  4850  000024                     	ds	2
  4851  000026                     strtok@sp:
  4852                           	opt stack 0
  4853  000026                     	ds	2
  4854  000028                     _USART_Status:
  4855                           	opt stack 0
  4856  000028                     	ds	1
  4857  000029                     __ECANRxFilterHitInfo:
  4858                           	opt stack 0
  4859  000029                     	ds	1
  4860  00002A                     _bDLE:
  4861                           	opt stack 0
  4862  00002A                     	ds	1
  4863  00002B                     _bHex:
  4864                           	opt stack 0
  4865  00002B                     	ds	1
  4866  00002C                     _bInitiated:
  4867                           	opt stack 0
  4868  00002C                     	ds	1
  4869  00002D                     _bLocalEcho:
  4870                           	opt stack 0
  4871  00002D                     	ds	1
  4872  00002E                     _bOpen:
  4873                           	opt stack 0
  4874  00002E                     	ds	1
  4875  00002F                     _bSilent:
  4876                           	opt stack 0
  4877  00002F                     	ds	1
  4878  000030                     _fifo_canrxcount:
  4879                           	opt stack 0
  4880  000030                     	ds	1
  4881  000031                     _ledFunctionality:
  4882                           	opt stack 0
  4883  000031                     	ds	1
  4884  000032                     _nTimeStamp:
  4885                           	opt stack 0
  4886  000032                     	ds	1
  4887  000033                     _pos:
  4888                           	opt stack 0
  4889  000033                     	ds	1
  4890  000034                     _rwtimeout:
  4891                           	opt stack 0
  4892  000034                     	ds	1
  4893  000035                     _sequencyno:
  4894                           	opt stack 0
  4895  000035                     	ds	1
  4896  000036                     _stateVscpDriver:
  4897                           	opt stack 0
  4898  000036                     	ds	1
  4899  000037                     _vscpClass:
  4900                           	opt stack 0
  4901  000037                     	ds	2
  4902  000039                     _dlc:
  4903                           	opt stack 0
  4904  000039                     	ds	1
  4905  00003A                     _flags:
  4906                           	opt stack 0
  4907  00003A                     	ds	1
  4908  00003B                     _vscpNodeId:
  4909                           	opt stack 0
  4910  00003B                     	ds	1
  4911  00003C                     _vscpPriority:
  4912                           	opt stack 0
  4913  00003C                     	ds	1
  4914  00003D                     _vscpSize:
  4915                           	opt stack 0
  4916  00003D                     	ds	1
  4917  00003E                     _vscpType:
  4918                           	opt stack 0
  4919  00003E                     	ds	1
  4920                           tblptru	equ	0xFF8
  4921                           tblptrh	equ	0xFF7
  4922                           tblptrl	equ	0xFF6
  4923                           tablat	equ	0xFF5
  4924                           prodh	equ	0xFF4
  4925                           prodl	equ	0xFF3
  4926                           intcon	equ	0xFF2
  4927                           indf0	equ	0xFEF
  4928                           postinc0	equ	0xFEE
  4929                           fsr0h	equ	0xFEA
  4930                           fsr0l	equ	0xFE9
  4931                           wreg	equ	0xFE8
  4932                           indf1	equ	0xFE7
  4933                           postinc1	equ	0xFE6
  4934                           postdec1	equ	0xFE5
  4935                           fsr1h	equ	0xFE2
  4936                           fsr1l	equ	0xFE1
  4937                           indf2	equ	0xFDF
  4938                           postinc2	equ	0xFDE
  4939                           postdec2	equ	0xFDD
  4940                           plusw2	equ	0xFDB
  4941                           fsr2h	equ	0xFDA
  4942                           fsr2l	equ	0xFD9
  4943                           status	equ	0xFD8
  4944                           
  4945                           	psect	bssBANK1
  4946  000100                     __pbssBANK1:
  4947                           	opt stack 0
  4948  000100                     _can_receiveOverruns:
  4949                           	opt stack 0
  4950  000100                     	ds	4
  4951  000104                     _can_transmitOverruns:
  4952                           	opt stack 0
  4953  000104                     	ds	4
  4954  000108                     _cntRxBytes:
  4955                           	opt stack 0
  4956  000108                     	ds	4
  4957  00010C                     _cntRxFrames:
  4958                           	opt stack 0
  4959  00010C                     	ds	4
  4960  000110                     _cntTxBytes:
  4961                           	opt stack 0
  4962  000110                     	ds	4
  4963  000114                     _cntTxFrames:
  4964                           	opt stack 0
  4965  000114                     	ds	4
  4966  000118                     _timekeeper:
  4967                           	opt stack 0
  4968  000118                     	ds	4
  4969  00011C                     _timer:
  4970                           	opt stack 0
  4971  00011C                     	ds	4
  4972  000120                     _uart_receiveOverruns:
  4973                           	opt stack 0
  4974  000120                     	ds	4
  4975  000124                     _uart_transmitOverruns:
  4976                           	opt stack 0
  4977  000124                     	ds	4
  4978  000128                     _mode:
  4979                           	opt stack 0
  4980  000128                     	ds	1
  4981  000129                     _cmdbuf:
  4982                           	opt stack 0
  4983  000129                     	ds	80
  4984  000179                     _wrkbuf:
  4985                           	opt stack 0
  4986  000179                     	ds	80
  4987  0001C9                     _canInputFifo:
  4988                           	opt stack 0
  4989  0001C9                     	ds	8
  4990  0001D1                     _data:
  4991                           	opt stack 0
  4992  0001D1                     	ds	8
  4993  0001D9                     _serialInputFifo:
  4994                           	opt stack 0
  4995  0001D9                     	ds	8
  4996  0001E1                     _vscpData:
  4997                           	opt stack 0
  4998  0001E1                     	ds	8
  4999  0001E9                     _id:
  5000                           	opt stack 0
  5001  0001E9                     	ds	4
  5002                           tblptru	equ	0xFF8
  5003                           tblptrh	equ	0xFF7
  5004                           tblptrl	equ	0xFF6
  5005                           tablat	equ	0xFF5
  5006                           prodh	equ	0xFF4
  5007                           prodl	equ	0xFF3
  5008                           intcon	equ	0xFF2
  5009                           indf0	equ	0xFEF
  5010                           postinc0	equ	0xFEE
  5011                           fsr0h	equ	0xFEA
  5012                           fsr0l	equ	0xFE9
  5013                           wreg	equ	0xFE8
  5014                           indf1	equ	0xFE7
  5015                           postinc1	equ	0xFE6
  5016                           postdec1	equ	0xFE5
  5017                           fsr1h	equ	0xFE2
  5018                           fsr1l	equ	0xFE1
  5019                           indf2	equ	0xFDF
  5020                           postinc2	equ	0xFDE
  5021                           postdec2	equ	0xFDD
  5022                           plusw2	equ	0xFDB
  5023                           fsr2h	equ	0xFDA
  5024                           fsr2l	equ	0xFD9
  5025                           status	equ	0xFD8
  5026                           
  5027                           	psect	bssBANK2
  5028  000200                     __pbssBANK2:
  5029                           	opt stack 0
  5030  000200                     _serial_inputBuffer:
  5031                           	opt stack 0
  5032  000200                     	ds	128
  5033                           tblptru	equ	0xFF8
  5034                           tblptrh	equ	0xFF7
  5035                           tblptrl	equ	0xFF6
  5036                           tablat	equ	0xFF5
  5037                           prodh	equ	0xFF4
  5038                           prodl	equ	0xFF3
  5039                           intcon	equ	0xFF2
  5040                           indf0	equ	0xFEF
  5041                           postinc0	equ	0xFEE
  5042                           fsr0h	equ	0xFEA
  5043                           fsr0l	equ	0xFE9
  5044                           wreg	equ	0xFE8
  5045                           indf1	equ	0xFE7
  5046                           postinc1	equ	0xFE6
  5047                           postdec1	equ	0xFE5
  5048                           fsr1h	equ	0xFE2
  5049                           fsr1l	equ	0xFE1
  5050                           indf2	equ	0xFDF
  5051                           postinc2	equ	0xFDE
  5052                           postdec2	equ	0xFDD
  5053                           plusw2	equ	0xFDB
  5054                           fsr2h	equ	0xFDA
  5055                           fsr2l	equ	0xFD9
  5056                           status	equ	0xFD8
  5057                           
  5058                           	psect	bssBANK3
  5059  000300                     __pbssBANK3:
  5060                           	opt stack 0
  5061  000300                     _crc8_table:
  5062                           	opt stack 0
  5063  000300                     	ds	256
  5064                           tblptru	equ	0xFF8
  5065                           tblptrh	equ	0xFF7
  5066                           tblptrl	equ	0xFF6
  5067                           tablat	equ	0xFF5
  5068                           prodh	equ	0xFF4
  5069                           prodl	equ	0xFF3
  5070                           intcon	equ	0xFF2
  5071                           indf0	equ	0xFEF
  5072                           postinc0	equ	0xFEE
  5073                           fsr0h	equ	0xFEA
  5074                           fsr0l	equ	0xFE9
  5075                           wreg	equ	0xFE8
  5076                           indf1	equ	0xFE7
  5077                           postinc1	equ	0xFE6
  5078                           postdec1	equ	0xFE5
  5079                           fsr1h	equ	0xFE2
  5080                           fsr1l	equ	0xFE1
  5081                           indf2	equ	0xFDF
  5082                           postinc2	equ	0xFDE
  5083                           postdec2	equ	0xFDD
  5084                           plusw2	equ	0xFDB
  5085                           fsr2h	equ	0xFDA
  5086                           fsr2l	equ	0xFD9
  5087                           status	equ	0xFD8
  5088                           
  5089                           	psect	bssBIGRAM
  5090  000400                     __pbssBIGRAM:
  5091                           	opt stack 0
  5092  000400                     _can_inputBuffer:
  5093                           	opt stack 0
  5094  000400                     	ds	494
  5095                           tblptru	equ	0xFF8
  5096                           tblptrh	equ	0xFF7
  5097                           tblptrl	equ	0xFF6
  5098                           tablat	equ	0xFF5
  5099                           prodh	equ	0xFF4
  5100                           prodl	equ	0xFF3
  5101                           intcon	equ	0xFF2
  5102                           indf0	equ	0xFEF
  5103                           postinc0	equ	0xFEE
  5104                           fsr0h	equ	0xFEA
  5105                           fsr0l	equ	0xFE9
  5106                           wreg	equ	0xFE8
  5107                           indf1	equ	0xFE7
  5108                           postinc1	equ	0xFE6
  5109                           postdec1	equ	0xFE5
  5110                           fsr1h	equ	0xFE2
  5111                           fsr1l	equ	0xFE1
  5112                           indf2	equ	0xFDF
  5113                           postinc2	equ	0xFDE
  5114                           postdec2	equ	0xFDD
  5115                           plusw2	equ	0xFDB
  5116                           fsr2h	equ	0xFDA
  5117                           fsr2l	equ	0xFD9
  5118                           status	equ	0xFD8
  5119                           
  5120                           	psect	cstackBANK2
  5121  000280                     __pcstackBANK2:
  5122                           	opt stack 0
  5123  000280                     doModeVerbose@id:
  5124                           	opt stack 0
  5125                           
  5126                           ; 4 bytes @ 0x0
  5127  000280                     	ds	4
  5128  000284                     doModeVerbose@preg:
  5129                           	opt stack 0
  5130                           
  5131                           ; 2 bytes @ 0x4
  5132  000284                     	ds	2
  5133  000286                     doModeVerbose@preg_1255:
  5134                           	opt stack 0
  5135                           
  5136                           ; 2 bytes @ 0x6
  5137  000286                     	ds	2
  5138  000288                     doModeVerbose@filter_class:
  5139                           	opt stack 0
  5140                           
  5141                           ; 2 bytes @ 0x8
  5142  000288                     	ds	2
  5143  00028A                     doModeVerbose@mask_class:
  5144                           	opt stack 0
  5145                           
  5146                           ; 2 bytes @ 0xA
  5147  00028A                     	ds	2
  5148  00028C                     doModeVerbose@filter_priority:
  5149                           	opt stack 0
  5150                           
  5151                           ; 1 bytes @ 0xC
  5152  00028C                     	ds	1
  5153  00028D                     doModeVerbose@filter_type:
  5154                           	opt stack 0
  5155                           
  5156                           ; 1 bytes @ 0xD
  5157  00028D                     	ds	1
  5158  00028E                     doModeVerbose@filter_nodeid:
  5159                           	opt stack 0
  5160                           
  5161                           ; 1 bytes @ 0xE
  5162  00028E                     	ds	1
  5163  00028F                     doModeVerbose@mask_priority:
  5164                           	opt stack 0
  5165                           
  5166                           ; 1 bytes @ 0xF
  5167  00028F                     	ds	1
  5168  000290                     doModeVerbose@mask_type:
  5169                           	opt stack 0
  5170                           
  5171                           ; 1 bytes @ 0x10
  5172  000290                     	ds	1
  5173  000291                     doModeVerbose@mask_nodeid:
  5174                           	opt stack 0
  5175                           
  5176                           ; 1 bytes @ 0x11
  5177  000291                     	ds	1
  5178  000292                     _doModeVerbose$1211:
  5179                           	opt stack 0
  5180                           
  5181                           ; 2 bytes @ 0x12
  5182  000292                     	ds	2
  5183  000294                     _doModeVerbose$1216:
  5184                           	opt stack 0
  5185                           
  5186                           ; 2 bytes @ 0x14
  5187  000294                     	ds	2
  5188  000296                     _doModeVerbose$1220:
  5189                           	opt stack 0
  5190                           
  5191                           ; 2 bytes @ 0x16
  5192  000296                     	ds	2
  5193  000298                     _doModeVerbose$1225:
  5194                           	opt stack 0
  5195                           
  5196                           ; 2 bytes @ 0x18
  5197  000298                     	ds	2
  5198  00029A                     _doModeVerbose$1233:
  5199                           	opt stack 0
  5200                           
  5201                           ; 2 bytes @ 0x1A
  5202  00029A                     	ds	2
  5203  00029C                     _doModeVerbose$1238:
  5204                           	opt stack 0
  5205                           
  5206                           ; 2 bytes @ 0x1C
  5207  00029C                     	ds	2
  5208  00029E                     _doModeVerbose$1242:
  5209                           	opt stack 0
  5210                           
  5211                           ; 2 bytes @ 0x1E
  5212  00029E                     	ds	2
  5213  0002A0                     _doModeVerbose$1264:
  5214                           	opt stack 0
  5215                           
  5216                           ; 2 bytes @ 0x20
  5217  0002A0                     	ds	2
  5218  0002A2                     _doModeVerbose$1270:
  5219                           	opt stack 0
  5220                           
  5221                           ; 2 bytes @ 0x22
  5222  0002A2                     	ds	2
  5223  0002A4                     _doModeVerbose$1277:
  5224                           	opt stack 0
  5225                           
  5226                           ; 2 bytes @ 0x24
  5227  0002A4                     	ds	2
  5228  0002A6                     doModeVerbose@rv:
  5229                           	opt stack 0
  5230                           
  5231                           ; 1 bytes @ 0x26
  5232  0002A6                     	ds	1
  5233  0002A7                     doModeVerbose@page_1248:
  5234                           	opt stack 0
  5235                           
  5236                           ; 1 bytes @ 0x27
  5237  0002A7                     	ds	1
  5238  0002A8                     doModeVerbose@reg_1249:
  5239                           	opt stack 0
  5240                           
  5241                           ; 1 bytes @ 0x28
  5242  0002A8                     	ds	1
  5243  0002A9                     doModeVerbose@id_1318:
  5244                           	opt stack 0
  5245                           
  5246                           ; 4 bytes @ 0x29
  5247  0002A9                     	ds	4
  5248  0002AD                     doModeVerbose@filterno:
  5249                           	opt stack 0
  5250                           
  5251                           ; 1 bytes @ 0x2D
  5252  0002AD                     	ds	1
  5253  0002AE                     doModeVerbose@maskno:
  5254                           	opt stack 0
  5255                           
  5256                           ; 1 bytes @ 0x2E
  5257  0002AE                     	ds	1
  5258  0002AF                     doModeVerbose@i:
  5259                           	opt stack 0
  5260                           
  5261                           ; 1 bytes @ 0x2F
  5262  0002AF                     	ds	1
  5263  0002B0                     doModeVerbose@value_1250:
  5264                           	opt stack 0
  5265                           
  5266                           ; 1 bytes @ 0x30
  5267  0002B0                     	ds	1
  5268  0002B1                     doModeVerbose@count:
  5269                           	opt stack 0
  5270                           
  5271                           ; 1 bytes @ 0x31
  5272  0002B1                     	ds	1
  5273  0002B2                     doModeVerbose@nodeid:
  5274                           	opt stack 0
  5275                           
  5276                           ; 1 bytes @ 0x32
  5277  0002B2                     	ds	1
  5278  0002B3                     doModeVerbose@nodeid_1247:
  5279                           	opt stack 0
  5280                           
  5281                           ; 1 bytes @ 0x33
  5282  0002B3                     	ds	1
  5283  0002B4                     doModeVerbose@page:
  5284                           	opt stack 0
  5285                           
  5286                           ; 1 bytes @ 0x34
  5287  0002B4                     	ds	1
  5288  0002B5                     doModeVerbose@reg:
  5289                           	opt stack 0
  5290                           
  5291                           ; 1 bytes @ 0x35
  5292  0002B5                     	ds	1
  5293  0002B6                     doModeVerbose@nodeid_1272:
  5294                           	opt stack 0
  5295                           
  5296                           ; 1 bytes @ 0x36
  5297  0002B6                     	ds	1
  5298  0002B7                     doModeVerbose@i_1193:
  5299                           	opt stack 0
  5300                           
  5301                           ; 1 bytes @ 0x37
  5302  0002B7                     	ds	1
  5303  0002B8                     doModeVerbose@c:
  5304                           	opt stack 0
  5305                           
  5306                           ; 1 bytes @ 0x38
  5307  0002B8                     	ds	1
  5308  0002B9                     doModeVerbose@value:
  5309                           	opt stack 0
  5310                           
  5311                           ; 1 bytes @ 0x39
  5312  0002B9                     	ds	1
  5313  0002BA                     doModeVerbose@p_1199:
  5314                           	opt stack 0
  5315                           
  5316                           ; 2 bytes @ 0x3A
  5317  0002BA                     	ds	2
  5318  0002BC                     doModeVerbose@p_1251:
  5319                           	opt stack 0
  5320                           
  5321                           ; 2 bytes @ 0x3C
  5322  0002BC                     	ds	2
  5323  0002BE                     doModeVerbose@ifmode:
  5324                           	opt stack 0
  5325                           
  5326                           ; 1 bytes @ 0x3E
  5327  0002BE                     	ds	1
  5328  0002BF                     doModeVerbose@p:
  5329                           	opt stack 0
  5330                           
  5331                           ; 2 bytes @ 0x3F
  5332  0002BF                     	ds	2
  5333  0002C1                     doModeVerbose@p_1286:
  5334                           	opt stack 0
  5335                           
  5336                           ; 2 bytes @ 0x41
  5337  0002C1                     	ds	2
  5338  0002C3                     doModeVerbose@p_1306:
  5339                           	opt stack 0
  5340                           
  5341                           ; 2 bytes @ 0x43
  5342  0002C3                     	ds	2
  5343                           tblptru	equ	0xFF8
  5344                           tblptrh	equ	0xFF7
  5345                           tblptrl	equ	0xFF6
  5346                           tablat	equ	0xFF5
  5347                           prodh	equ	0xFF4
  5348                           prodl	equ	0xFF3
  5349                           intcon	equ	0xFF2
  5350                           indf0	equ	0xFEF
  5351                           postinc0	equ	0xFEE
  5352                           fsr0h	equ	0xFEA
  5353                           fsr0l	equ	0xFE9
  5354                           wreg	equ	0xFE8
  5355                           indf1	equ	0xFE7
  5356                           postinc1	equ	0xFE6
  5357                           postdec1	equ	0xFE5
  5358                           fsr1h	equ	0xFE2
  5359                           fsr1l	equ	0xFE1
  5360                           indf2	equ	0xFDF
  5361                           postinc2	equ	0xFDE
  5362                           postdec2	equ	0xFDD
  5363                           plusw2	equ	0xFDB
  5364                           fsr2h	equ	0xFDA
  5365                           fsr2l	equ	0xFD9
  5366                           status	equ	0xFD8
  5367                           
  5368                           	psect	cstackBANK0
  5369  000060                     __pcstackBANK0:
  5370                           	opt stack 0
  5371  000060                     ?_WriteTimer0:
  5372                           	opt stack 0
  5373  000060                     ?_fifo_init:
  5374                           	opt stack 0
  5375  000060                     ?_OpenUSART:
  5376                           	opt stack 0
  5377  000060                     ?_WriteTimer1:
  5378                           	opt stack 0
  5379  000060                     ?_Write_b_eep:
  5380                           	opt stack 0
  5381  000060                     ??_isdigit:
  5382  000060                     ?_Read_b_eep:
  5383                           	opt stack 0
  5384  000060                     ?_fifo_read:
  5385                           	opt stack 0
  5386  000060                     ?_memset:
  5387                           	opt stack 0
  5388  000060                     ?_strcpy:
  5389                           	opt stack 0
  5390  000060                     ?_strchr:
  5391                           	opt stack 0
  5392  000060                     ?_strlen:
  5393                           	opt stack 0
  5394  000060                     ?_memcpy:
  5395                           	opt stack 0
  5396  000060                     ?_strcat:
  5397                           	opt stack 0
  5398  000060                     ?___lwdiv:
  5399                           	opt stack 0
  5400  000060                     ?___lwmod:
  5401                           	opt stack 0
  5402  000060                     ?___wmul:
  5403                           	opt stack 0
  5404  000060                     ?___lldiv:
  5405                           	opt stack 0
  5406  000060                     ECANSetOperationMode@mode:
  5407                           	opt stack 0
  5408  000060                     nibbleFromChar@c:
  5409                           	opt stack 0
  5410  000060                     OpenTimer0@config:
  5411                           	opt stack 0
  5412  000060                     OpenTimer1@config:
  5413                           	opt stack 0
  5414  000060                     WriteUSART@data:
  5415                           	opt stack 0
  5416  000060                     toupper@c:
  5417                           	opt stack 0
  5418  000060                     fifo_init@f:
  5419                           	opt stack 0
  5420  000060                     fifo_read@f:
  5421                           	opt stack 0
  5422  000060                     _init_crc8$2067:
  5423                           	opt stack 0
  5424  000060                     Read_b_eep@badd:
  5425                           	opt stack 0
  5426  000060                     Write_b_eep@badd:
  5427                           	opt stack 0
  5428  000060                     WriteTimer0@timer0:
  5429                           	opt stack 0
  5430  000060                     WriteTimer1@timer1:
  5431                           	opt stack 0
  5432  000060                     OpenUSART@spbrg:
  5433                           	opt stack 0
  5434  000060                     ___lwdiv@dividend:
  5435                           	opt stack 0
  5436  000060                     ___lwmod@dividend:
  5437                           	opt stack 0
  5438  000060                     memcpy@d1:
  5439                           	opt stack 0
  5440  000060                     memset@p1:
  5441                           	opt stack 0
  5442  000060                     strcat@to:
  5443                           	opt stack 0
  5444  000060                     strchr@ptr:
  5445                           	opt stack 0
  5446  000060                     strcpy@to:
  5447                           	opt stack 0
  5448  000060                     strlen@s:
  5449                           	opt stack 0
  5450  000060                     ___wmul@multiplier:
  5451                           	opt stack 0
  5452  000060                     ___lldiv@dividend:
  5453                           	opt stack 0
  5454                           
  5455                           ; 4 bytes @ 0x0
  5456  000060                     	ds	1
  5457  000061                     ?_putsUSART:
  5458                           	opt stack 0
  5459  000061                     ??_printBinary:
  5460  000061                     ?_strichr:
  5461                           	opt stack 0
  5462  000061                     _isdigit$3096:
  5463                           	opt stack 0
  5464  000061                     putsUSART@data:
  5465                           	opt stack 0
  5466  000061                     strichr@ptr:
  5467                           	opt stack 0
  5468                           
  5469                           ; 2 bytes @ 0x1
  5470  000061                     	ds	1
  5471  000062                     ?_setFilter:
  5472                           	opt stack 0
  5473  000062                     ?__CANIDToRegs:
  5474                           	opt stack 0
  5475  000062                     Write_b_eep@bdat:
  5476                           	opt stack 0
  5477  000062                     OpenUSART@config:
  5478                           	opt stack 0
  5479  000062                     isdigit@c:
  5480                           	opt stack 0
  5481  000062                     __CANIDToRegs@ptr:
  5482                           	opt stack 0
  5483  000062                     fifo_init@buf:
  5484                           	opt stack 0
  5485  000062                     fifo_read@buf:
  5486                           	opt stack 0
  5487  000062                     init_crc8@j:
  5488                           	opt stack 0
  5489  000062                     WriteTimer0@timer:
  5490                           	opt stack 0
  5491  000062                     WriteTimer1@timer:
  5492                           	opt stack 0
  5493  000062                     ___lwdiv@divisor:
  5494                           	opt stack 0
  5495  000062                     ___lwmod@divisor:
  5496                           	opt stack 0
  5497  000062                     memcpy@s1:
  5498                           	opt stack 0
  5499  000062                     memset@c:
  5500                           	opt stack 0
  5501  000062                     strcat@from:
  5502                           	opt stack 0
  5503  000062                     strchr@chr:
  5504                           	opt stack 0
  5505  000062                     strcpy@from:
  5506                           	opt stack 0
  5507  000062                     strlen@cp:
  5508                           	opt stack 0
  5509  000062                     ___wmul@multiplicand:
  5510                           	opt stack 0
  5511  000062                     setFilter@val:
  5512                           	opt stack 0
  5513                           
  5514                           ; 4 bytes @ 0x2
  5515  000062                     	ds	1
  5516  000063                     ??_putsUSART:
  5517  000063                     printBinary@value:
  5518                           	opt stack 0
  5519  000063                     Write_b_eep@GIE_BIT_VAL:
  5520                           	opt stack 0
  5521  000063                     strichr@chr:
  5522                           	opt stack 0
  5523                           
  5524                           ; 2 bytes @ 0x3
  5525  000063                     	ds	1
  5526  000064                     ??_strchr:
  5527  000064                     ?_hexStringToBytes:
  5528                           	opt stack 0
  5529  000064                     ?_strnicmp:
  5530                           	opt stack 0
  5531  000064                     init_app_eeprom@i:
  5532                           	opt stack 0
  5533  000064                     init_crc8@crc:
  5534                           	opt stack 0
  5535  000064                     ___lwdiv@counter:
  5536                           	opt stack 0
  5537  000064                     ___lwmod@counter:
  5538                           	opt stack 0
  5539  000064                     printBinary@i:
  5540                           	opt stack 0
  5541  000064                     fifo_init@size:
  5542                           	opt stack 0
  5543  000064                     fifo_read@nbytes:
  5544                           	opt stack 0
  5545  000064                     hexStringToBytes@buf:
  5546                           	opt stack 0
  5547  000064                     memcpy@n:
  5548                           	opt stack 0
  5549  000064                     memset@n:
  5550                           	opt stack 0
  5551  000064                     strcat@cp:
  5552                           	opt stack 0
  5553  000064                     strcpy@cp:
  5554                           	opt stack 0
  5555  000064                     strnicmp@s1:
  5556                           	opt stack 0
  5557  000064                     ___wmul@product:
  5558                           	opt stack 0
  5559  000064                     __CANIDToRegs@val:
  5560                           	opt stack 0
  5561  000064                     ___lldiv@divisor:
  5562                           	opt stack 0
  5563                           
  5564                           ; 4 bytes @ 0x4
  5565  000064                     	ds	1
  5566  000065                     init_crc8@i:
  5567                           	opt stack 0
  5568  000065                     ___lwdiv@quotient:
  5569                           	opt stack 0
  5570                           
  5571                           ; 2 bytes @ 0x5
  5572  000065                     	ds	1
  5573  000066                     ??_fifo_read:
  5574  000066                     ??_setFilter:
  5575  000066                     ?_atoi:
  5576                           	opt stack 0
  5577  000066                     ?_strspn:
  5578                           	opt stack 0
  5579  000066                     ?_strcspn:
  5580                           	opt stack 0
  5581  000066                     hexStringToBytes@size:
  5582                           	opt stack 0
  5583  000066                     atoi@s:
  5584                           	opt stack 0
  5585  000066                     memcpy@d:
  5586                           	opt stack 0
  5587  000066                     memset@p:
  5588                           	opt stack 0
  5589  000066                     strnicmp@s2:
  5590                           	opt stack 0
  5591  000066                     strcspn@s1:
  5592                           	opt stack 0
  5593  000066                     strspn@s1:
  5594                           	opt stack 0
  5595                           
  5596                           ; 2 bytes @ 0x6
  5597  000066                     	ds	1
  5598  000067                     ?_crc8:
  5599                           	opt stack 0
  5600  000067                     ?_utoa:
  5601                           	opt stack 0
  5602  000067                     crc8@crc:
  5603                           	opt stack 0
  5604  000067                     hexStringToBytes@inhex:
  5605                           	opt stack 0
  5606  000067                     utoa@buf:
  5607                           	opt stack 0
  5608                           
  5609                           ; 2 bytes @ 0x7
  5610  000067                     	ds	1
  5611  000068                     ??_atoi:
  5612  000068                     __CANIDToRegs@type:
  5613                           	opt stack 0
  5614  000068                     memcpy@s:
  5615                           	opt stack 0
  5616  000068                     strnicmp@len:
  5617                           	opt stack 0
  5618  000068                     strcspn@s2:
  5619                           	opt stack 0
  5620  000068                     strspn@s2:
  5621                           	opt stack 0
  5622  000068                     ___lldiv@quotient:
  5623                           	opt stack 0
  5624                           
  5625                           ; 4 bytes @ 0x8
  5626  000068                     	ds	1
  5627  000069                     ??__CANIDToRegs:
  5628  000069                     ??_hexStringToBytes:
  5629  000069                     crc8@m:
  5630                           	opt stack 0
  5631  000069                     utoa@val:
  5632                           	opt stack 0
  5633                           
  5634                           ; 2 bytes @ 0x9
  5635  000069                     	ds	1
  5636  00006A                     ??_crc8:
  5637  00006A                     ??_strnicmp:
  5638  00006A                     atoi@sign:
  5639                           	opt stack 0
  5640  00006A                     fifo_read@p:
  5641                           	opt stack 0
  5642  00006A                     strcspn@i:
  5643                           	opt stack 0
  5644  00006A                     strspn@i:
  5645                           	opt stack 0
  5646                           
  5647                           ; 2 bytes @ 0xA
  5648  00006A                     	ds	1
  5649  00006B                     __CANIDToRegs@Value:
  5650                           	opt stack 0
  5651  00006B                     atoi@a:
  5652                           	opt stack 0
  5653  00006B                     utoa@base:
  5654                           	opt stack 0
  5655                           
  5656                           ; 2 bytes @ 0xB
  5657  00006B                     	ds	1
  5658  00006C                     ?_sendEscapedUartData:
  5659                           	opt stack 0
  5660  00006C                     ?_calcCRC:
  5661                           	opt stack 0
  5662  00006C                     ?_ECANSendMessage:
  5663                           	opt stack 0
  5664  00006C                     ?_strtok:
  5665                           	opt stack 0
  5666  00006C                     setFilter@filter:
  5667                           	opt stack 0
  5668  00006C                     ___lldiv@counter:
  5669                           	opt stack 0
  5670  00006C                     strnicmp@r:
  5671                           	opt stack 0
  5672  00006C                     sendEscapedUartData@pcrc:
  5673                           	opt stack 0
  5674  00006C                     calcCRC@p:
  5675                           	opt stack 0
  5676  00006C                     fifo_read@i:
  5677                           	opt stack 0
  5678  00006C                     hexStringToBytes@len:
  5679                           	opt stack 0
  5680  00006C                     strtok@s1:
  5681                           	opt stack 0
  5682  00006C                     ECANSendMessage@id:
  5683                           	opt stack 0
  5684                           
  5685                           ; 4 bytes @ 0xC
  5686  00006C                     	ds	1
  5687  00006D                     ?_stristr:
  5688                           	opt stack 0
  5689  00006D                     ?___llmod:
  5690                           	opt stack 0
  5691  00006D                     setFilter@sidh:
  5692                           	opt stack 0
  5693  00006D                     utoa@v:
  5694                           	opt stack 0
  5695  00006D                     stristr@s1:
  5696                           	opt stack 0
  5697  00006D                     ___llmod@dividend:
  5698                           	opt stack 0
  5699                           
  5700                           ; 4 bytes @ 0xD
  5701  00006D                     	ds	1
  5702  00006E                     ?_getCANFrame:
  5703                           	opt stack 0
  5704  00006E                     sendEscapedUartData@c:
  5705                           	opt stack 0
  5706  00006E                     calcCRC@len:
  5707                           	opt stack 0
  5708  00006E                     setFilter@sidl:
  5709                           	opt stack 0
  5710  00006E                     getCANFrame@pdlc:
  5711                           	opt stack 0
  5712  00006E                     hexStringToBytes@p:
  5713                           	opt stack 0
  5714  00006E                     strtok@s2:
  5715                           	opt stack 0
  5716                           
  5717                           ; 2 bytes @ 0xE
  5718  00006E                     	ds	1
  5719  00006F                     ?_sendVSCPDriverCommandReply:
  5720                           	opt stack 0
  5721  00006F                     sendVSCPDriverErrorFrame@errorcode:
  5722                           	opt stack 0
  5723  00006F                     sendVSCPDriverAck@crc:
  5724                           	opt stack 0
  5725  00006F                     sendVSCPDriverNack@crc:
  5726                           	opt stack 0
  5727  00006F                     sendVSCPDriverCommandReply@cmdCode:
  5728                           	opt stack 0
  5729  00006F                     sendVSCPModeCapabilities@crc:
  5730                           	opt stack 0
  5731  00006F                     calcCRC@j:
  5732                           	opt stack 0
  5733  00006F                     setFilter@eidh:
  5734                           	opt stack 0
  5735  00006F                     utoa@c:
  5736                           	opt stack 0
  5737  00006F                     stristr@s2:
  5738                           	opt stack 0
  5739                           
  5740                           ; 2 bytes @ 0xF
  5741  00006F                     	ds	1
  5742  000070                     ?_itoa:
  5743                           	opt stack 0
  5744  000070                     sendVSCPDriverErrorFrame@crc:
  5745                           	opt stack 0
  5746  000070                     sendVSCPDriverCommandReply@cmdReplyCode:
  5747                           	opt stack 0
  5748  000070                     calcCRC@crc:
  5749                           	opt stack 0
  5750  000070                     setFilter@eidl:
  5751                           	opt stack 0
  5752  000070                     getCANFrame@pdata:
  5753                           	opt stack 0
  5754  000070                     ECANSendMessage@data:
  5755                           	opt stack 0
  5756  000070                     hexStringToBytes@i:
  5757                           	opt stack 0
  5758  000070                     itoa@buf:
  5759                           	opt stack 0
  5760                           
  5761                           ; 2 bytes @ 0x10
  5762  000070                     	ds	1
  5763  000071                     ??_init_app_ram:
  5764  000071                     sendVSCPDriverCommandReply@crc:
  5765                           	opt stack 0
  5766  000071                     ___llmod@divisor:
  5767                           	opt stack 0
  5768                           
  5769                           ; 4 bytes @ 0x11
  5770  000071                     	ds	1
  5771  000072                     getCANFrame@pid:
  5772                           	opt stack 0
  5773  000072                     ECANSendMessage@dataLen:
  5774                           	opt stack 0
  5775  000072                     itoa@val:
  5776                           	opt stack 0
  5777                           
  5778                           ; 2 bytes @ 0x12
  5779  000072                     	ds	1
  5780  000073                     ?_getVSCPFrame:
  5781                           	opt stack 0
  5782  000073                     getVSCPFrame@pvscptype:
  5783                           	opt stack 0
  5784  000073                     ECANSendMessage@msgFlags:
  5785                           	opt stack 0
  5786  000073                     receiveSendEventCANAL@data:
  5787                           	opt stack 0
  5788  000073                     receiveSendMultiEventCANAL@data:
  5789                           	opt stack 0
  5790                           
  5791                           ; 8 bytes @ 0x13
  5792  000073                     	ds	1
  5793  000074                     ??_ECANSendMessage:
  5794  000074                     getVSCPFrame@pNodeId:
  5795                           	opt stack 0
  5796  000074                     itoa@base:
  5797                           	opt stack 0
  5798                           
  5799                           ; 2 bytes @ 0x14
  5800  000074                     	ds	1
  5801  000075                     getVSCPFrame@pPriority:
  5802                           	opt stack 0
  5803  000075                     ___llmod@counter:
  5804                           	opt stack 0
  5805  000075                     ECANSendMessage@pb:
  5806                           	opt stack 0
  5807                           
  5808                           ; 18 bytes @ 0x15
  5809  000075                     	ds	1
  5810  000076                     ?_sprintf:
  5811                           	opt stack 0
  5812  000076                     ?_ultoa:
  5813                           	opt stack 0
  5814  000076                     getVSCPFrame@pSize:
  5815                           	opt stack 0
  5816  000076                     sprintf@sp:
  5817                           	opt stack 0
  5818  000076                     ultoa@buf:
  5819                           	opt stack 0
  5820                           
  5821                           ; 2 bytes @ 0x16
  5822  000076                     	ds	1
  5823  000077                     getVSCPFrame@pData:
  5824                           	opt stack 0
  5825                           
  5826                           ; 2 bytes @ 0x17
  5827  000077                     	ds	1
  5828  000078                     sprintf@f:
  5829                           	opt stack 0
  5830  000078                     ultoa@val:
  5831                           	opt stack 0
  5832  000078                     printFirmwareVersion@wrkbuf:
  5833                           	opt stack 0
  5834                           
  5835                           ; 20 bytes @ 0x18
  5836  000078                     	ds	1
  5837  000079                     ??_getVSCPFrame:
  5838  000079                     init_app_ram@i:
  5839                           	opt stack 0
  5840                           
  5841                           ; 1 bytes @ 0x19
  5842  000079                     	ds	2
  5843  00007B                     receiveSendEventCANAL@i:
  5844                           	opt stack 0
  5845  00007B                     receiveSendMultiEventCANAL@msgcount:
  5846                           	opt stack 0
  5847                           
  5848                           ; 1 bytes @ 0x1B
  5849  00007B                     	ds	1
  5850  00007C                     receiveSendMultiEventCANAL@i:
  5851                           	opt stack 0
  5852  00007C                     ultoa@base:
  5853                           	opt stack 0
  5854  00007C                     receiveSendEventCANAL@id:
  5855                           	opt stack 0
  5856                           
  5857                           ; 4 bytes @ 0x1C
  5858  00007C                     	ds	1
  5859  00007D                     getVSCPFrame@pvscpclass:
  5860                           	opt stack 0
  5861  00007D                     receiveSendMultiEventCANAL@id:
  5862                           	opt stack 0
  5863                           
  5864                           ; 4 bytes @ 0x1D
  5865  00007D                     	ds	1
  5866  00007E                     ??_sprintf:
  5867  00007E                     getVSCPFrame@id:
  5868                           	opt stack 0
  5869  00007E                     ultoa@v:
  5870                           	opt stack 0
  5871                           
  5872                           ; 4 bytes @ 0x1E
  5873  00007E                     	ds	2
  5874  000080                     receiveSendEventCANAL@dlc:
  5875                           	opt stack 0
  5876                           
  5877                           ; 1 bytes @ 0x20
  5878  000080                     	ds	1
  5879  000081                     receiveSendEventCANAL@crc:
  5880                           	opt stack 0
  5881  000081                     receiveSendMultiEventCANAL@dlc:
  5882                           	opt stack 0
  5883  000081                     sprintf@idx:
  5884                           	opt stack 0
  5885                           
  5886                           ; 1 bytes @ 0x21
  5887  000081                     	ds	1
  5888  000082                     receiveSendMultiEventCANAL@crc:
  5889                           	opt stack 0
  5890  000082                     ultoa@c:
  5891                           	opt stack 0
  5892  000082                     _sprintf$2129:
  5893                           	opt stack 0
  5894                           
  5895                           ; 2 bytes @ 0x22
  5896  000082                     	ds	1
  5897  000083                     ??_receiveSendEventSLCAN:
  5898  000083                     receiveSendMultiEventCANAL@pos:
  5899                           	opt stack 0
  5900                           
  5901                           ; 1 bytes @ 0x23
  5902  000083                     	ds	1
  5903  000084                     _sprintf$2130:
  5904                           	opt stack 0
  5905                           
  5906                           ; 2 bytes @ 0x24
  5907  000084                     	ds	2
  5908  000086                     _sprintf$2136:
  5909                           	opt stack 0
  5910  000086                     receiveSendEventSLCAN@id:
  5911                           	opt stack 0
  5912                           
  5913                           ; 4 bytes @ 0x26
  5914  000086                     	ds	1
  5915  000087                     ECANSendMessage@mode:
  5916                           	opt stack 0
  5917                           
  5918                           ; 1 bytes @ 0x27
  5919  000087                     	ds	1
  5920  000088                     ECANSendMessage@buffers:
  5921                           	opt stack 0
  5922  000088                     sprintf@ap:
  5923                           	opt stack 0
  5924                           
  5925                           ; 1 bytes @ 0x28
  5926  000088                     	ds	1
  5927  000089                     ECANSendMessage@j:
  5928                           	opt stack 0
  5929  000089                     sprintf@prec:
  5930                           	opt stack 0
  5931                           
  5932                           ; 2 bytes @ 0x29
  5933  000089                     	ds	1
  5934  00008A                     receiveSendEventSLCAN@dlc:
  5935                           	opt stack 0
  5936  00008A                     ECANSendMessage@tempBSEL0:
  5937                           	opt stack 0
  5938                           
  5939                           ; 1 bytes @ 0x2A
  5940  00008A                     	ds	1
  5941  00008B                     receiveSendEventSLCAN@i:
  5942                           	opt stack 0
  5943  00008B                     ECANSendMessage@tempPtr:
  5944                           	opt stack 0
  5945  00008B                     sprintf@width:
  5946                           	opt stack 0
  5947                           
  5948                           ; 2 bytes @ 0x2B
  5949  00008B                     	ds	2
  5950  00008D                     ECANSendMessage@temp:
  5951                           	opt stack 0
  5952  00008D                     sprintf@_val:
  5953                           	opt stack 0
  5954                           
  5955                           ; 4 bytes @ 0x2D
  5956  00008D                     	ds	1
  5957  00008E                     ECANSendMessage@i:
  5958                           	opt stack 0
  5959                           
  5960                           ; 1 bytes @ 0x2E
  5961  00008E                     	ds	1
  5962  00008F                     ECANSendMessage@ptr:
  5963                           	opt stack 0
  5964                           
  5965                           ; 2 bytes @ 0x2F
  5966  00008F                     	ds	2
  5967  000091                     ?_sendCANFrame:
  5968                           	opt stack 0
  5969  000091                     sprintf@c:
  5970                           	opt stack 0
  5971  000091                     sendCANFrame@id:
  5972                           	opt stack 0
  5973                           
  5974                           ; 4 bytes @ 0x31
  5975  000091                     	ds	1
  5976  000092                     sprintf@flag:
  5977                           	opt stack 0
  5978                           
  5979                           ; 2 bytes @ 0x32
  5980  000092                     	ds	2
  5981  000094                     ??_receivePrintEventVerbose:
  5982  000094                     _printStatistics$1476:
  5983                           	opt stack 0
  5984  000094                     _printErrors$1501:
  5985                           	opt stack 0
  5986                           
  5987                           ; 2 bytes @ 0x34
  5988  000094                     	ds	1
  5989  000095                     sendCANFrame@dlc:
  5990                           	opt stack 0
  5991                           
  5992                           ; 1 bytes @ 0x35
  5993  000095                     	ds	1
  5994  000096                     _printStatistics$1482:
  5995                           	opt stack 0
  5996  000096                     _printErrors$1507:
  5997                           	opt stack 0
  5998  000096                     sendCANFrame@pdata:
  5999                           	opt stack 0
  6000                           
  6001                           ; 2 bytes @ 0x36
  6002  000096                     	ds	2
  6003  000098                     ??_doModeSLCAN:
  6004  000098                     ??_receiveVSCPModeCanalMsg:
  6005  000098                     ?_sendVSCPFrame:
  6006                           	opt stack 0
  6007  000098                     _printStatistics$1488:
  6008                           	opt stack 0
  6009  000098                     _printErrors$1513:
  6010                           	opt stack 0
  6011  000098                     sendVSCPFrame@vscpclass:
  6012                           	opt stack 0
  6013                           
  6014                           ; 2 bytes @ 0x38
  6015  000098                     	ds	1
  6016  000099                     _receivePrintEventVerbose$1383:
  6017                           	opt stack 0
  6018                           
  6019                           ; 2 bytes @ 0x39
  6020  000099                     	ds	1
  6021  00009A                     sendVSCPFrame@vscptype:
  6022                           	opt stack 0
  6023  00009A                     _printStatistics$1494:
  6024                           	opt stack 0
  6025  00009A                     _printErrors$1519:
  6026                           	opt stack 0
  6027                           
  6028                           ; 2 bytes @ 0x3A
  6029  00009A                     	ds	1
  6030  00009B                     sendVSCPFrame@nodeid:
  6031                           	opt stack 0
  6032  00009B                     _receivePrintEventVerbose$1388:
  6033                           	opt stack 0
  6034                           
  6035                           ; 2 bytes @ 0x3B
  6036  00009B                     	ds	1
  6037  00009C                     sendVSCPFrame@priority:
  6038                           	opt stack 0
  6039  00009C                     _printErrors$1525:
  6040                           	opt stack 0
  6041                           
  6042                           ; 2 bytes @ 0x3C
  6043  00009C                     	ds	1
  6044  00009D                     sendVSCPFrame@size:
  6045                           	opt stack 0
  6046  00009D                     _receivePrintEventVerbose$1393:
  6047                           	opt stack 0
  6048                           
  6049                           ; 2 bytes @ 0x3D
  6050  00009D                     	ds	1
  6051  00009E                     _printErrors$1534:
  6052                           	opt stack 0
  6053  00009E                     sendVSCPFrame@pData:
  6054                           	opt stack 0
  6055                           
  6056                           ; 2 bytes @ 0x3E
  6057  00009E                     	ds	1
  6058  00009F                     _receivePrintEventVerbose$1398:
  6059                           	opt stack 0
  6060  00009F                     doModeSLCAN@id:
  6061                           	opt stack 0
  6062                           
  6063                           ; 4 bytes @ 0x3F
  6064  00009F                     	ds	1
  6065  0000A0                     ??_sendVSCPFrame:
  6066                           
  6067                           ; 0 bytes @ 0x40
  6068  0000A0                     	ds	1
  6069  0000A1                     _receivePrintEventVerbose$1403:
  6070                           	opt stack 0
  6071                           
  6072                           ; 2 bytes @ 0x41
  6073  0000A1                     	ds	2
  6074  0000A3                     doModeSLCAN@dlc:
  6075                           	opt stack 0
  6076  0000A3                     _receivePrintEventVerbose$1408:
  6077                           	opt stack 0
  6078                           
  6079                           ; 2 bytes @ 0x43
  6080  0000A3                     	ds	1
  6081  0000A4                     doModeSLCAN@c:
  6082                           	opt stack 0
  6083                           
  6084                           ; 1 bytes @ 0x44
  6085  0000A4                     	ds	1
  6086  0000A5                     doModeSLCAN@rv:
  6087                           	opt stack 0
  6088  0000A5                     receivePrintEventVerbose@i:
  6089                           	opt stack 0
  6090                           
  6091                           ; 1 bytes @ 0x45
  6092  0000A5                     	ds	7
  6093  0000AC                     receiveVSCPModeCanalMsg@data:
  6094                           	opt stack 0
  6095                           
  6096                           ; 8 bytes @ 0x4C
  6097  0000AC                     	ds	8
  6098  0000B4                     receiveVSCPModeCanalMsg@id:
  6099                           	opt stack 0
  6100  0000B4                     sendVSCPFrame@id:
  6101                           	opt stack 0
  6102                           
  6103                           ; 4 bytes @ 0x54
  6104  0000B4                     	ds	4
  6105  0000B8                     ?_readRegisterExtended:
  6106                           	opt stack 0
  6107  0000B8                     ?_writeRegisterExtended:
  6108                           	opt stack 0
  6109  0000B8                     ?_readRegister:
  6110                           	opt stack 0
  6111  0000B8                     receiveVSCPModeCanalMsg@dlc:
  6112                           	opt stack 0
  6113  0000B8                     readRegister@reg:
  6114                           	opt stack 0
  6115  0000B8                     readRegisterExtended@page:
  6116                           	opt stack 0
  6117  0000B8                     writeRegisterExtended@page:
  6118                           	opt stack 0
  6119                           
  6120                           ; 2 bytes @ 0x58
  6121  0000B8                     	ds	1
  6122  0000B9                     doModeVscp@c:
  6123                           	opt stack 0
  6124  0000B9                     readRegister@timeout:
  6125                           	opt stack 0
  6126                           
  6127                           ; 2 bytes @ 0x59
  6128  0000B9                     	ds	1
  6129  0000BA                     readRegisterExtended@reg:
  6130                           	opt stack 0
  6131  0000BA                     writeRegisterExtended@reg:
  6132                           	opt stack 0
  6133                           
  6134                           ; 1 bytes @ 0x5A
  6135  0000BA                     	ds	1
  6136  0000BB                     readRegister@value:
  6137                           	opt stack 0
  6138  0000BB                     readRegisterExtended@timeout:
  6139                           	opt stack 0
  6140  0000BB                     writeRegisterExtended@timeout:
  6141                           	opt stack 0
  6142                           
  6143                           ; 2 bytes @ 0x5B
  6144  0000BB                     	ds	1
  6145  0000BC                     ??_readRegister:
  6146                           
  6147                           ; 0 bytes @ 0x5C
  6148  0000BC                     	ds	1
  6149  0000BD                     readRegisterExtended@value:
  6150                           	opt stack 0
  6151  0000BD                     writeRegisterExtended@value:
  6152                           	opt stack 0
  6153                           
  6154                           ; 2 bytes @ 0x5D
  6155  0000BD                     	ds	2
  6156  0000BF                     ??_readRegisterExtended:
  6157  0000BF                     ??_writeRegisterExtended:
  6158                           
  6159                           ; 0 bytes @ 0x5F
  6160  0000BF                     	ds	1
  6161  0000C0                     readRegister@nodeid:
  6162                           	opt stack 0
  6163                           
  6164                           ; 1 bytes @ 0x60
  6165  0000C0                     	ds	1
  6166  0000C1                     printGUID@nodeid:
  6167                           	opt stack 0
  6168  0000C1                     printMDF@nodeid:
  6169                           	opt stack 0
  6170  0000C1                     printNodeFirmwareVersion@nodeid:
  6171                           	opt stack 0
  6172                           
  6173                           ; 1 bytes @ 0x61
  6174  0000C1                     	ds	1
  6175  0000C2                     printMDF@value:
  6176                           	opt stack 0
  6177  0000C2                     printGUID@buf:
  6178                           	opt stack 0
  6179  0000C2                     printNodeFirmwareVersion@buf:
  6180                           	opt stack 0
  6181                           
  6182                           ; 3 bytes @ 0x62
  6183  0000C2                     	ds	1
  6184  0000C3                     readRegisterExtended@nodeid:
  6185                           	opt stack 0
  6186  0000C3                     writeRegisterExtended@nodeid:
  6187                           	opt stack 0
  6188  0000C3                     printMDF@p:
  6189                           	opt stack 0
  6190                           
  6191                           ; 2 bytes @ 0x63
  6192  0000C3                     	ds	2
  6193  0000C5                     printGUID@value:
  6194                           	opt stack 0
  6195  0000C5                     printMDF@i:
  6196                           	opt stack 0
  6197  0000C5                     printNodeFirmwareVersion@value:
  6198                           	opt stack 0
  6199                           
  6200                           ; 1 bytes @ 0x65
  6201  0000C5                     	ds	1
  6202  0000C6                     printGUID@i:
  6203                           	opt stack 0
  6204  0000C6                     printNodeFirmwareVersion@i:
  6205                           	opt stack 0
  6206                           
  6207                           ; 1 bytes @ 0x66
  6208  0000C6                     	ds	1
  6209  0000C7                     _findNodes$1578:
  6210                           	opt stack 0
  6211                           
  6212                           ; 2 bytes @ 0x67
  6213  0000C7                     	ds	2
  6214  0000C9                     findNodes@nFound:
  6215                           	opt stack 0
  6216                           
  6217                           ; 1 bytes @ 0x69
  6218  0000C9                     	ds	1
  6219  0000CA                     findNodes@value:
  6220                           	opt stack 0
  6221                           
  6222                           ; 1 bytes @ 0x6A
  6223  0000CA                     	ds	1
  6224  0000CB                     findNodes@i:
  6225                           	opt stack 0
  6226                           
  6227                           ; 1 bytes @ 0x6B
  6228  0000CB                     	ds	1
  6229  0000CC                     ??_doModeVerbose:
  6230                           
  6231                           ; 0 bytes @ 0x6C
  6232  0000CC                     	ds	20
  6233  0000E0                     
  6234                           ; 2 bytes @ 0x80
  6235  0000E0                     	ds	2
  6236  0000E2                     
  6237                           ; 3 bytes @ 0x82
  6238  0000E2                     	ds	3
  6239  0000E5                     ??_main:
  6240                           
  6241                           ; 0 bytes @ 0x85
  6242  0000E5                     	ds	1
  6243  0000E6                     main@c:
  6244                           	opt stack 0
  6245                           
  6246                           ; 1 bytes @ 0x86
  6247  0000E6                     	ds	1
  6248                           tblptru	equ	0xFF8
  6249                           tblptrh	equ	0xFF7
  6250                           tblptrl	equ	0xFF6
  6251                           tablat	equ	0xFF5
  6252                           prodh	equ	0xFF4
  6253                           prodl	equ	0xFF3
  6254                           intcon	equ	0xFF2
  6255                           indf0	equ	0xFEF
  6256                           postinc0	equ	0xFEE
  6257                           fsr0h	equ	0xFEA
  6258                           fsr0l	equ	0xFE9
  6259                           wreg	equ	0xFE8
  6260                           indf1	equ	0xFE7
  6261                           postinc1	equ	0xFE6
  6262                           postdec1	equ	0xFE5
  6263                           fsr1h	equ	0xFE2
  6264                           fsr1l	equ	0xFE1
  6265                           indf2	equ	0xFDF
  6266                           postinc2	equ	0xFDE
  6267                           postdec2	equ	0xFDD
  6268                           plusw2	equ	0xFDB
  6269                           fsr2h	equ	0xFDA
  6270                           fsr2l	equ	0xFD9
  6271                           status	equ	0xFD8
  6272                           
  6273                           	psect	cstackCOMRAM
  6274  000001                     __pcstackCOMRAM:
  6275                           	opt stack 0
  6276  000001                     ?__RegsToCANID:
  6277                           	opt stack 0
  6278  000001                     ?i1_WriteTimer0:
  6279                           	opt stack 0
  6280  000001                     ?_fifo_write:
  6281                           	opt stack 0
  6282  000001                     ?_fifo_getFree:
  6283                           	opt stack 0
  6284  000001                     ?__ECANPointBuffer:
  6285                           	opt stack 0
  6286  000001                     ReadUSART@data:
  6287                           	opt stack 0
  6288  000001                     __RegsToCANID@ptr:
  6289                           	opt stack 0
  6290  000001                     fifo_write@f:
  6291                           	opt stack 0
  6292  000001                     fifo_getFree@f:
  6293                           	opt stack 0
  6294  000001                     i1WriteTimer0@timer0:
  6295                           	opt stack 0
  6296                           
  6297                           ; 2 bytes @ 0x0
  6298  000001                     	ds	2
  6299  000003                     ??_fifo_getFree:
  6300  000003                     __RegsToCANID@val:
  6301                           	opt stack 0
  6302  000003                     fifo_write@buf:
  6303                           	opt stack 0
  6304  000003                     i1WriteTimer0@timer:
  6305                           	opt stack 0
  6306                           
  6307                           ; 2 bytes @ 0x2
  6308  000003                     	ds	1
  6309  000004                     __ECANPointBuffer@b:
  6310                           	opt stack 0
  6311                           
  6312                           ; 1 bytes @ 0x3
  6313  000004                     	ds	1
  6314  000005                     __RegsToCANID@type:
  6315                           	opt stack 0
  6316  000005                     __ECANPointBuffer@pt:
  6317                           	opt stack 0
  6318  000005                     fifo_write@nbytes:
  6319                           	opt stack 0
  6320                           
  6321                           ; 4 bytes @ 0x4
  6322  000005                     	ds	1
  6323  000006                     ??__RegsToCANID:
  6324                           
  6325                           ; 0 bytes @ 0x5
  6326  000006                     	ds	2
  6327  000008                     __RegsToCANID@Value:
  6328                           	opt stack 0
  6329                           
  6330                           ; 2 bytes @ 0x7
  6331  000008                     	ds	1
  6332  000009                     ??_fifo_write:
  6333                           
  6334                           ; 0 bytes @ 0x8
  6335  000009                     	ds	1
  6336  00000A                     ?_ECANReceiveMessage:
  6337                           	opt stack 0
  6338  00000A                     ECANReceiveMessage@id:
  6339                           	opt stack 0
  6340                           
  6341                           ; 2 bytes @ 0x9
  6342  00000A                     	ds	2
  6343  00000C                     ECANReceiveMessage@data:
  6344                           	opt stack 0
  6345                           
  6346                           ; 2 bytes @ 0xB
  6347  00000C                     	ds	1
  6348  00000D                     fifo_write@p:
  6349                           	opt stack 0
  6350                           
  6351                           ; 2 bytes @ 0xC
  6352  00000D                     	ds	1
  6353  00000E                     ECANReceiveMessage@dataLen:
  6354                           	opt stack 0
  6355                           
  6356                           ; 1 bytes @ 0xD
  6357  00000E                     	ds	1
  6358  00000F                     ECANReceiveMessage@msgFlags:
  6359                           	opt stack 0
  6360  00000F                     fifo_write@i:
  6361                           	opt stack 0
  6362                           
  6363                           ; 4 bytes @ 0xE
  6364  00000F                     	ds	1
  6365  000010                     ECANReceiveMessage@savedPtr:
  6366                           	opt stack 0
  6367                           
  6368                           ; 2 bytes @ 0xF
  6369  000010                     	ds	2
  6370  000012                     ECANReceiveMessage@i:
  6371                           	opt stack 0
  6372                           
  6373                           ; 1 bytes @ 0x11
  6374  000012                     	ds	1
  6375  000013                     ECANReceiveMessage@mode:
  6376                           	opt stack 0
  6377                           
  6378                           ; 1 bytes @ 0x12
  6379  000013                     	ds	1
  6380  000014                     ECANReceiveMessage@temp:
  6381                           	opt stack 0
  6382                           
  6383                           ; 1 bytes @ 0x13
  6384  000014                     	ds	1
  6385  000015                     ECANReceiveMessage@ptr:
  6386                           	opt stack 0
  6387                           
  6388                           ; 2 bytes @ 0x14
  6389  000015                     	ds	2
  6390  000017                     ??_Interrupt:
  6391                           
  6392                           ; 0 bytes @ 0x16
  6393  000017                     	ds	9
  6394  000020                     Interrupt@c:
  6395                           	opt stack 0
  6396                           
  6397                           ; 1 bytes @ 0x1F
  6398  000020                     	ds	1
  6399  000021                     Interrupt@fail:
  6400                           	opt stack 0
  6401                           
  6402                           ; 1 bytes @ 0x20
  6403  000021                     	ds	1
  6404  000022                     tblptru	equ	0xFF8
  6405                           tblptrh	equ	0xFF7
  6406                           tblptrl	equ	0xFF6
  6407                           tablat	equ	0xFF5
  6408                           prodh	equ	0xFF4
  6409                           prodl	equ	0xFF3
  6410                           intcon	equ	0xFF2
  6411                           indf0	equ	0xFEF
  6412                           postinc0	equ	0xFEE
  6413                           fsr0h	equ	0xFEA
  6414                           fsr0l	equ	0xFE9
  6415                           wreg	equ	0xFE8
  6416                           indf1	equ	0xFE7
  6417                           postinc1	equ	0xFE6
  6418                           postdec1	equ	0xFE5
  6419                           fsr1h	equ	0xFE2
  6420                           fsr1l	equ	0xFE1
  6421                           indf2	equ	0xFDF
  6422                           postinc2	equ	0xFDE
  6423                           postdec2	equ	0xFDD
  6424                           plusw2	equ	0xFDB
  6425                           fsr2h	equ	0xFDA
  6426                           fsr2l	equ	0xFD9
  6427                           status	equ	0xFD8
  6428                           
  6429                           ; 0 bytes @ 0x21
  6430 ;;
  6431 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6432 ;;
  6433 ;; *************** function _main *****************
  6434 ;; Defined at:
  6435 ;;		line 271 in file "main.c"
  6436 ;; Parameters:    Size  Location     Type
  6437 ;;  argc            2  128[BANK0 ] int 
  6438 ;;  argv            3  130[BANK0 ] PTR PTR unsigned char 
  6439 ;; Auto vars:     Size  Location     Type
  6440 ;;  c               1  134[BANK0 ] unsigned char 
  6441 ;; Return value:  Size  Location     Type
  6442 ;;                  2  128[BANK0 ] int 
  6443 ;; Registers used:
  6444 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6445 ;; Tracked objects:
  6446 ;;		On entry : 0/0
  6447 ;;		On exit  : F/1
  6448 ;;		Unchanged: 0/0
  6449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6450 ;;      Params:         0       5       0       0       0       0       0
  6451 ;;      Locals:         0       1       0       0       0       0       0
  6452 ;;      Temps:          0       1       0       0       0       0       0
  6453 ;;      Totals:         0       7       0       0       0       0       0
  6454 ;;Total ram usage:        7 bytes
  6455 ;; Hardware stack levels required when called:   11
  6456 ;; This function calls:
  6457 ;;		_fifo_init
  6458 ;;		_init_crc8
  6459 ;;		_Read_b_eep
  6460 ;;		_vscp_restoreDefaults
  6461 ;;		_init
  6462 ;;		_putsUSART
  6463 ;;		_printFirmwareVersion
  6464 ;;		_printMode
  6465 ;;		_fifo_read
  6466 ;;		_ECANSetOperationMode
  6467 ;;		_doModeVerbose
  6468 ;;		_doModeVscp
  6469 ;;		_doModeSLCAN
  6470 ;;		_doModeVscpNode
  6471 ;; This function is called by:
  6472 ;;		Startup code after reset
  6473 ;; This function uses a non-reentrant model
  6474 ;;
  6475                           
  6476                           	psect	text0
  6477  002C92                     __ptext0:
  6478                           	opt stack 0
  6479  002C92                     _main:
  6480                           	opt stack 20
  6481                           
  6482                           ;main.c: 273: caps.maxVscpFrames = 1;
  6483                           
  6484                           ;incstack = 0
  6485                           ;incstack = 0
  6486  002C92  0E01               	movlw	1
  6487  002C94  0101               	movlb	1	; () banked
  6488  002C96  6FED               	movwf	_caps& (0+255),b
  6489                           
  6490                           ;main.c: 274: caps.maxCanalFrames = 1;
  6491  002C98  6FEE               	movwf	(_caps+1)& (0+255),b
  6492                           
  6493                           ; BSR set to: 1
  6494                           ;main.c: 279: fifo_init( &serialInputFifo, serial_inputBuffer, sizeof ( serial_inputBuff
      +                          er));
  6495  002C9A  0E01               	movlw	high _serialInputFifo
  6496  002C9C  0100               	movlb	0	; () banked
  6497  002C9E  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6498  002CA0  0ED9               	movlw	low _serialInputFifo
  6499  002CA2  6F60               	movwf	?_fifo_init& (0+255),b
  6500  002CA4  0E02               	movlw	high _serial_inputBuffer
  6501  002CA6  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6502  002CA8  0E00               	movlw	low _serial_inputBuffer
  6503  002CAA  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6504  002CAC  6B65               	clrf	(?_fifo_init+5)& (0+255),b
  6505  002CAE  0E80               	movlw	128
  6506  002CB0  6F64               	movwf	(?_fifo_init+4)& (0+255),b
  6507  002CB2  EC93  F02D         	call	_fifo_init	;wreg free
  6508                           
  6509                           ; BSR set to: 0
  6510                           ;main.c: 280: fifo_init( &canInputFifo, can_inputBuffer, sizeof ( can_inputBuffer ) );
  6511  002CB6  0E01               	movlw	high _canInputFifo
  6512  002CB8  0100               	movlb	0	; () banked
  6513  002CBA  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6514  002CBC  0EC9               	movlw	low _canInputFifo
  6515  002CBE  6F60               	movwf	?_fifo_init& (0+255),b
  6516  002CC0  0E04               	movlw	high _can_inputBuffer
  6517  002CC2  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6518  002CC4  0E00               	movlw	low _can_inputBuffer
  6519  002CC6  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6520  002CC8  0E01               	movlw	1
  6521  002CCA  6F65               	movwf	(?_fifo_init+5)& (0+255),b
  6522  002CCC  0EEE               	movlw	238
  6523  002CCE  6F64               	movwf	(?_fifo_init+4)& (0+255),b
  6524  002CD0  EC93  F02D         	call	_fifo_init	;wreg free
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;main.c: 283: init_crc8();
  6528  002CD4  ECED  F02A         	call	_init_crc8	;wreg free
  6529                           
  6530                           ; BSR set to: 0
  6531                           ;main.c: 287: if ( ( 0x55 != Read_b_eep(0x01) ) ||
  6532                           ;main.c: 288: ( 0xaa != Read_b_eep(0x02) ) ) {
  6533  002CD8  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
  6534  002CDA  0E01               	movlw	1
  6535  002CDC  6F60               	movwf	?_Read_b_eep& (0+255),b
  6536  002CDE  EC49  F02F         	call	_Read_b_eep	;wreg free
  6537  002CE2  0A55               	xorlw	85
  6538  002CE4  E108               	bnz	l13894
  6539  002CE6  0100               	movlb	0	; () banked
  6540  002CE8  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
  6541  002CEA  0E02               	movlw	2
  6542  002CEC  6F60               	movwf	?_Read_b_eep& (0+255),b
  6543  002CEE  EC49  F02F         	call	_Read_b_eep	;wreg free
  6544  002CF2  0AAA               	xorlw	170
  6545  002CF4  A4D8               	btfss	status,2,c
  6546  002CF6                     l13894:
  6547                           
  6548                           ;main.c: 289: vscp_restoreDefaults();
  6549  002CF6  EC64  F02F         	call	_vscp_restoreDefaults	;wreg free
  6550                           
  6551                           ;main.c: 290: }
  6552                           ;main.c: 293: init();
  6553  002CFA  EC6D  F02C         	call	_init	;wreg free
  6554                           
  6555                           ; BSR set to: 0
  6556                           ;main.c: 297: _delay((unsigned long)((10)*(40000000/4000.0)));
  6557  002CFE  0E82               	movlw	130
  6558  002D00  6FE5               	movwf	??_main& (0+255),b
  6559  002D02  0EDD               	movlw	221
  6560  002D04                     u23307:
  6561  002D04  2EE8               	decfsz	wreg,f,c
  6562  002D06  D7FE               	goto	u23307
  6563  002D08  2FE5               	decfsz	??_main& (0+255),f,b
  6564  002D0A  D7FC               	goto	u23307
  6565  002D0C  D000               	nop2	
  6566                           
  6567                           ;main.c: 301: putsUSART((char*) "\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  6568  002D0E  0E79               	movlw	high STR_1
  6569  002D10  0100               	movlb	0	; () banked
  6570  002D12  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6571  002D14  0E08               	movlw	low STR_1
  6572  002D16  6F61               	movwf	?_putsUSART& (0+255),b
  6573  002D18  EC41  F02C         	call	_putsUSART	;wreg free
  6574                           
  6575                           ;main.c: 302: putsUSART((char*) "Copyright (C) 2014-2015 Paradise of the Frog AB, Sweden
      +                          \r\n");
  6576  002D1C  0E72               	movlw	high STR_2
  6577  002D1E  0100               	movlb	0	; () banked
  6578  002D20  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6579  002D22  0E84               	movlw	low STR_2
  6580  002D24  6F61               	movwf	?_putsUSART& (0+255),b
  6581  002D26  EC41  F02C         	call	_putsUSART	;wreg free
  6582                           
  6583                           ;main.c: 303: putsUSART((char*) "http://www.paradiseofthefrog.com\r\n");
  6584  002D2A  0E79               	movlw	high STR_3
  6585  002D2C  0100               	movlb	0	; () banked
  6586  002D2E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6587  002D30  0E9A               	movlw	low STR_3
  6588  002D32  6F61               	movwf	?_putsUSART& (0+255),b
  6589  002D34  EC41  F02C         	call	_putsUSART	;wreg free
  6590                           
  6591                           ;main.c: 304: printFirmwareVersion();
  6592  002D38  EC2E  F029         	call	_printFirmwareVersion	;wreg free
  6593                           
  6594                           ;main.c: 305: printMode();
  6595  002D3C  ECBB  F029         	call	_printMode	;wreg free
  6596                           
  6597                           ;main.c: 309: if ( 0 != mode ) {
  6598  002D40  0101               	movlb	1	; () banked
  6599  002D42  5128               	movf	_mode& (0+255),w,b
  6600  002D44  E03B               	bz	l13928
  6601                           
  6602                           ; BSR set to: 1
  6603                           ;main.c: 311: uint8_t c;
  6604                           ;main.c: 313: putsUSART((char *) "Press 'v' within three seconds to enter verbose mode\r
      +                          \n");
  6605  002D46  0E73               	movlw	high STR_4
  6606  002D48  0100               	movlb	0	; () banked
  6607  002D4A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6608  002D4C  0E9D               	movlw	low STR_4
  6609  002D4E  6F61               	movwf	?_putsUSART& (0+255),b
  6610  002D50  EC41  F02C         	call	_putsUSART	;wreg free
  6611                           
  6612                           ;main.c: 315: timekeeper = 0;
  6613  002D54  0101               	movlb	1	; () banked
  6614  002D56  6B18               	clrf	_timekeeper& (0+255),b	;volatile
  6615  002D58  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
  6616  002D5A  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
  6617  002D5C  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
  6618                           
  6619                           ; BSR set to: 1
  6620                           ;main.c: 316: ledFunctionality = 6;
  6621  002D5E  0E06               	movlw	6
  6622  002D60  6E31               	movwf	_ledFunctionality,c
  6623                           
  6624                           ;main.c: 317: while (timekeeper < 3000) {
  6625  002D62  D022               	goto	l13926
  6626  002D64                     l443:
  6627                           
  6628                           ; BSR set to: 1
  6629  002D64  0004               	clrwdt		;# 
  6630                           
  6631                           ;main.c: 319: (INTCONbits.GIE = 0);
  6632  002D66  9EF2               	bcf	intcon,7,c	;volatile
  6633                           
  6634                           ;main.c: 320: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6635  002D68  0E01               	movlw	high _serialInputFifo
  6636  002D6A  0100               	movlb	0	; () banked
  6637  002D6C  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6638  002D6E  0ED9               	movlw	low _serialInputFifo
  6639  002D70  6F60               	movwf	?_fifo_read& (0+255),b
  6640  002D72  0E00               	movlw	high main@c
  6641  002D74  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  6642  002D76  0EE6               	movlw	low main@c
  6643  002D78  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6644  002D7A  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  6645  002D7C  0E01               	movlw	1
  6646  002D7E  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  6647  002D80  EC07  F024         	call	_fifo_read	;wreg free
  6648  002D84  0560               	decf	?_fifo_read& (0+255),w,b
  6649  002D86  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6650  002D88  E10E               	bnz	l444
  6651                           
  6652                           ; BSR set to: 0
  6653                           ;main.c: 321: (INTCONbits.GIE = 1);
  6654  002D8A  8EF2               	bsf	intcon,7,c	;volatile
  6655                           
  6656                           ; BSR set to: 0
  6657                           ;main.c: 322: if ('v' == c) {
  6658  002D8C  51E6               	movf	main@c& (0+255),w,b
  6659  002D8E  0A76               	xorlw	118
  6660  002D90  E10A               	bnz	l444
  6661                           
  6662                           ; BSR set to: 0
  6663                           ;main.c: 323: mode = 0;
  6664  002D92  0101               	movlb	1	; () banked
  6665  002D94  6B28               	clrf	_mode& (0+255),b
  6666                           
  6667                           ; BSR set to: 1
  6668                           ;main.c: 324: putsUSART((char *) "Temporary verbose mode set\r\n");
  6669  002D96  0E7A               	movlw	high STR_5
  6670  002D98  0100               	movlb	0	; () banked
  6671  002D9A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6672  002D9C  0EC1               	movlw	low STR_5
  6673  002D9E  6F61               	movwf	?_putsUSART& (0+255),b
  6674  002DA0  EC41  F02C         	call	_putsUSART	;wreg free
  6675                           
  6676                           ;main.c: 325: break;
  6677  002DA4  D00B               	goto	l13928
  6678  002DA6                     l444:
  6679                           
  6680                           ; BSR set to: 0
  6681                           ;main.c: 326: }
  6682                           ;main.c: 327: }
  6683                           ;main.c: 328: (INTCONbits.GIE = 1);
  6684  002DA6  8EF2               	bsf	intcon,7,c	;volatile
  6685  002DA8                     l13926:
  6686  002DA8  0EB8               	movlw	184
  6687  002DAA  0101               	movlb	1	; () banked
  6688  002DAC  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
  6689  002DAE  0E0B               	movlw	11
  6690  002DB0  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
  6691  002DB2  0E00               	movlw	0
  6692  002DB4  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
  6693  002DB6  0E00               	movlw	0
  6694  002DB8  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
  6695  002DBA  E3D4               	bnc	l443
  6696  002DBC                     l13928:
  6697                           
  6698                           ;main.c: 329: }
  6699                           ;main.c: 330: }
  6700                           ;main.c: 332: ledFunctionality = 1;
  6701  002DBC  0E01               	movlw	1
  6702  002DBE  6E31               	movwf	_ledFunctionality,c
  6703                           
  6704                           ;main.c: 337: switch ( Read_b_eep(0x07) ) {
  6705  002DC0  D019               	goto	l13944
  6706  002DC2                     l448:
  6707                           
  6708                           ;main.c: 340: bSilent = 0;
  6709  002DC2  6A2F               	clrf	_bSilent,c
  6710                           
  6711                           ;main.c: 341: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
  6712  002DC4  0E00               	movlw	0
  6713  002DC6  EC1E  F02F         	call	_ECANSetOperationMode
  6714                           
  6715                           ;main.c: 342: break;
  6716  002DCA  D023               	goto	l454
  6717  002DCC                     l13932:
  6718                           
  6719                           ;main.c: 345: bSilent = 1;
  6720  002DCC  0E01               	movlw	1
  6721  002DCE  6E2F               	movwf	_bSilent,c
  6722                           
  6723                           ;main.c: 346: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
  6724  002DD0  0E00               	movlw	0
  6725  002DD2  EC1E  F02F         	call	_ECANSetOperationMode
  6726                           
  6727                           ;main.c: 347: break;
  6728  002DD6  D01D               	goto	l454
  6729  002DD8                     l451:
  6730                           
  6731                           ;main.c: 350: bSilent = 0;
  6732  002DD8  6A2F               	clrf	_bSilent,c
  6733                           
  6734                           ;main.c: 351: ECANSetOperationMode( ECAN_OP_MODE_LISTEN );
  6735  002DDA  0E60               	movlw	96
  6736  002DDC  EC1E  F02F         	call	_ECANSetOperationMode
  6737                           
  6738                           ;main.c: 352: break;
  6739  002DE0  D018               	goto	l454
  6740  002DE2                     l452:
  6741                           
  6742                           ;main.c: 355: bSilent = 0;
  6743  002DE2  6A2F               	clrf	_bSilent,c
  6744                           
  6745                           ;main.c: 356: ECANSetOperationMode( ECAN_OP_MODE_LOOP );
  6746  002DE4  0E40               	movlw	64
  6747  002DE6  EC1E  F02F         	call	_ECANSetOperationMode
  6748                           
  6749                           ;main.c: 357: break;
  6750  002DEA  D013               	goto	l454
  6751  002DEC                     l13940:
  6752                           
  6753                           ;main.c: 360: ECANSetOperationMode( 0x20 );
  6754  002DEC  0E20               	movlw	32
  6755  002DEE  EC1E  F02F         	call	_ECANSetOperationMode
  6756                           
  6757                           ;main.c: 361: break;
  6758  002DF2  D00F               	goto	l454
  6759  002DF4                     l13944:
  6760  002DF4  0100               	movlb	0	; () banked
  6761  002DF6  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
  6762  002DF8  0E07               	movlw	7
  6763  002DFA  6F60               	movwf	?_Read_b_eep& (0+255),b
  6764  002DFC  EC49  F02F         	call	_Read_b_eep	;wreg free
  6765                           
  6766                           ; Switch size 1, requested type "space"
  6767                           ; Number of cases is 4, Range of values is 1 to 4
  6768                           ; switch strategies available:
  6769                           ; Name         Instructions Cycles
  6770                           ; simple_byte           13     7 (average)
  6771                           ;	Chosen strategy is simple_byte
  6772  002E00  0A01               	xorlw	1	; case 1
  6773  002E02  E0DF               	bz	l448
  6774  002E04  0A03               	xorlw	3	; case 2
  6775  002E06  E0E2               	bz	l13932
  6776  002E08  0A01               	xorlw	1	; case 3
  6777  002E0A  E0E6               	bz	l451
  6778  002E0C  0A07               	xorlw	7	; case 4
  6779  002E0E  E0E9               	bz	l452
  6780  002E10  D7ED               	goto	l13940
  6781  002E12                     l454:
  6782  002E12  0004               	clrwdt		;# 
  6783                           
  6784                           ;main.c: 374: if (COMSTATbits.TXBO) {
  6785  002E14  AA74               	btfss	3956,5,c	;volatile
  6786  002E16  D002               	goto	l455
  6787                           
  6788                           ;main.c: 376: ledFunctionality = 6;
  6789  002E18  0E06               	movlw	6
  6790  002E1A  D009               	goto	L1
  6791  002E1C                     l455:
  6792                           
  6793                           ;main.c: 378: else if (COMSTATbits.TXBP || COMSTATbits.RXBP) {
  6794  002E1C  B874               	btfsc	3956,4,c	;volatile
  6795  002E1E  D002               	goto	l13950
  6796  002E20  A674               	btfss	3956,3,c	;volatile
  6797  002E22  D002               	goto	l457
  6798  002E24                     l13950:
  6799                           
  6800                           ;main.c: 380: ledFunctionality = 5;
  6801  002E24  0E05               	movlw	5
  6802  002E26  D003               	goto	L1
  6803  002E28                     l457:
  6804                           
  6805                           ;main.c: 384: ledFunctionality = 4;
  6806  002E28  0E04               	movlw	4
  6807                           
  6808                           ;main.c: 382: else if (COMSTATbits.EWARN) {
  6809  002E2A  A074               	btfss	3956,0,c	;volatile
  6810                           
  6811                           ;main.c: 386: else {
  6812                           ;main.c: 388: ledFunctionality = 1;
  6813                           
  6814                           ;main.c: 385: }
  6815  002E2C  0E01               	movlw	1
  6816  002E2E                     L1:
  6817  002E2E  6E31               	movwf	_ledFunctionality,c
  6818                           
  6819                           ;main.c: 389: }
  6820                           ;main.c: 392: if (COMSTATbits.RXBnOVFL) {
  6821  002E30  AC74               	btfss	3956,6,c	;volatile
  6822  002E32  D007               	goto	l13962
  6823                           
  6824                           ;main.c: 393: can_receiveOverruns++;
  6825  002E34  0101               	movlb	1	; () banked
  6826  002E36  2B00               	incf	_can_receiveOverruns& (0+255),f,b
  6827  002E38  0E00               	movlw	0
  6828  002E3A  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
  6829  002E3C  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
  6830  002E3E  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
  6831                           
  6832                           ; BSR set to: 1
  6833                           ;main.c: 394: COMSTATbits.RXBnOVFL = 0;
  6834  002E40  9C74               	bcf	3956,6,c	;volatile
  6835  002E42                     l13962:
  6836                           
  6837                           ;main.c: 395: }
  6838                           ;main.c: 399: if ( RCSTAbits.OERR ) {
  6839  002E42  A2AB               	btfss	4011,1,c	;volatile
  6840  002E44  D002               	goto	l464
  6841                           
  6842                           ;main.c: 400: RCSTAbits.CREN = 0;
  6843  002E46  98AB               	bcf	4011,4,c	;volatile
  6844                           
  6845                           ;main.c: 401: RCSTAbits.CREN = 1;
  6846  002E48  88AB               	bsf	4011,4,c	;volatile
  6847  002E4A                     l464:
  6848                           
  6849                           ;main.c: 402: }
  6850                           ;main.c: 404: if (0 == mode) {
  6851  002E4A  0101               	movlb	1	; () banked
  6852  002E4C  6728               	tstfsz	_mode& (0+255),b
  6853  002E4E  D003               	goto	l13968
  6854                           
  6855                           ; BSR set to: 1
  6856                           ;main.c: 405: doModeVerbose();
  6857  002E50  EC7F  F001         	call	_doModeVerbose	;wreg free
  6858                           
  6859                           ;main.c: 406: }
  6860  002E54  D7DE               	goto	l454
  6861  002E56                     l13968:
  6862                           
  6863                           ; BSR set to: 1
  6864                           ;main.c: 407: else if (1 == mode) {
  6865  002E56  0528               	decf	_mode& (0+255),w,b
  6866  002E58  E103               	bnz	l13972
  6867  002E5A                     l13970:
  6868                           
  6869                           ; BSR set to: 1
  6870                           ;main.c: 408: doModeVscp();
  6871  002E5A  EC15  F019         	call	_doModeVscp	;wreg free
  6872                           
  6873                           ;main.c: 409: }
  6874  002E5E  D7D9               	goto	l454
  6875  002E60                     l13972:
  6876                           
  6877                           ; BSR set to: 1
  6878                           ;main.c: 410: else if (2 == mode) {
  6879  002E60  5128               	movf	_mode& (0+255),w,b
  6880  002E62  0A02               	xorlw	2
  6881  002E64  E103               	bnz	l13976
  6882                           
  6883                           ; BSR set to: 1
  6884                           ;main.c: 411: doModeSLCAN();
  6885  002E66  ECA8  F010         	call	_doModeSLCAN	;wreg free
  6886                           
  6887                           ;main.c: 412: }
  6888  002E6A  D7D3               	goto	l454
  6889  002E6C                     l13976:
  6890                           
  6891                           ; BSR set to: 1
  6892                           ;main.c: 413: else if (3 == mode) {
  6893  002E6C  5128               	movf	_mode& (0+255),w,b
  6894  002E6E  0A03               	xorlw	3
  6895  002E70  E1F4               	bnz	l13970
  6896                           
  6897                           ; BSR set to: 1
  6898                           ;main.c: 414: doModeVscpNode();
  6899  002E72  EC6B  F02F         	call	_doModeVscpNode	;wreg free
  6900                           
  6901                           ;main.c: 415: }
  6902  002E76  D7CD               	goto	l454
  6903  002E78                     __end_of_main:
  6904                           	opt stack 0
  6905                           tblptru	equ	0xFF8
  6906                           tblptrh	equ	0xFF7
  6907                           tblptrl	equ	0xFF6
  6908                           tablat	equ	0xFF5
  6909                           prodh	equ	0xFF4
  6910                           prodl	equ	0xFF3
  6911                           intcon	equ	0xFF2
  6912                           indf0	equ	0xFEF
  6913                           postinc0	equ	0xFEE
  6914                           fsr0h	equ	0xFEA
  6915                           fsr0l	equ	0xFE9
  6916                           wreg	equ	0xFE8
  6917                           indf1	equ	0xFE7
  6918                           postinc1	equ	0xFE6
  6919                           postdec1	equ	0xFE5
  6920                           fsr1h	equ	0xFE2
  6921                           fsr1l	equ	0xFE1
  6922                           indf2	equ	0xFDF
  6923                           postinc2	equ	0xFDE
  6924                           postdec2	equ	0xFDD
  6925                           plusw2	equ	0xFDB
  6926                           fsr2h	equ	0xFDA
  6927                           fsr2l	equ	0xFD9
  6928                           status	equ	0xFD8
  6929                           
  6930 ;; *************** function _doModeVscpNode *****************
  6931 ;; Defined at:
  6932 ;;		line 1696 in file "main.c"
  6933 ;; Parameters:    Size  Location     Type
  6934 ;;		None
  6935 ;; Auto vars:     Size  Location     Type
  6936 ;;		None
  6937 ;; Return value:  Size  Location     Type
  6938 ;;		None               void
  6939 ;; Registers used:
  6940 ;;		None
  6941 ;; Tracked objects:
  6942 ;;		On entry : F/1
  6943 ;;		On exit  : F/1
  6944 ;;		Unchanged: F/0
  6945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6946 ;;      Params:         0       0       0       0       0       0       0
  6947 ;;      Locals:         0       0       0       0       0       0       0
  6948 ;;      Temps:          0       0       0       0       0       0       0
  6949 ;;      Totals:         0       0       0       0       0       0       0
  6950 ;;Total ram usage:        0 bytes
  6951 ;; Hardware stack levels used:    1
  6952 ;; Hardware stack levels required when called:    3
  6953 ;; This function calls:
  6954 ;;		Nothing
  6955 ;; This function is called by:
  6956 ;;		_main
  6957 ;; This function uses a non-reentrant model
  6958 ;;
  6959                           
  6960                           	psect	text1
  6961  005ED6                     __ptext1:
  6962                           	opt stack 0
  6963  005ED6                     _doModeVscpNode:
  6964                           	opt stack 27
  6965                           
  6966                           ; BSR set to: 1
  6967                           
  6968                           ; BSR set to: 1
  6969                           ;incstack = 0
  6970                           ;incstack = 0
  6971  005ED6  0012               	return	
  6972  005ED8                     __end_of_doModeVscpNode:
  6973                           	opt stack 0
  6974                           tblptru	equ	0xFF8
  6975                           tblptrh	equ	0xFF7
  6976                           tblptrl	equ	0xFF6
  6977                           tablat	equ	0xFF5
  6978                           prodh	equ	0xFF4
  6979                           prodl	equ	0xFF3
  6980                           intcon	equ	0xFF2
  6981                           indf0	equ	0xFEF
  6982                           postinc0	equ	0xFEE
  6983                           fsr0h	equ	0xFEA
  6984                           fsr0l	equ	0xFE9
  6985                           wreg	equ	0xFE8
  6986                           indf1	equ	0xFE7
  6987                           postinc1	equ	0xFE6
  6988                           postdec1	equ	0xFE5
  6989                           fsr1h	equ	0xFE2
  6990                           fsr1l	equ	0xFE1
  6991                           indf2	equ	0xFDF
  6992                           postinc2	equ	0xFDE
  6993                           postdec2	equ	0xFDD
  6994                           plusw2	equ	0xFDB
  6995                           fsr2h	equ	0xFDA
  6996                           fsr2l	equ	0xFD9
  6997                           status	equ	0xFD8
  6998                           
  6999 ;; *************** function _doModeSLCAN *****************
  7000 ;; Defined at:
  7001 ;;		line 1478 in file "main.c"
  7002 ;; Parameters:    Size  Location     Type
  7003 ;;		None
  7004 ;; Auto vars:     Size  Location     Type
  7005 ;;  id              4   63[BANK0 ] unsigned long 
  7006 ;;  dlc             1   67[BANK0 ] unsigned char 
  7007 ;;  rv              1   69[BANK0 ] enum E15660
  7008 ;;  c               1   68[BANK0 ] unsigned char 
  7009 ;; Return value:  Size  Location     Type
  7010 ;;		None               void
  7011 ;; Registers used:
  7012 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7013 ;; Tracked objects:
  7014 ;;		On entry : F/1
  7015 ;;		On exit  : F/0
  7016 ;;		Unchanged: 0/0
  7017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7018 ;;      Params:         0       0       0       0       0       0       0
  7019 ;;      Locals:         0       7       0       0       0       0       0
  7020 ;;      Temps:          0       7       0       0       0       0       0
  7021 ;;      Totals:         0      14       0       0       0       0       0
  7022 ;;Total ram usage:       14 bytes
  7023 ;; Hardware stack levels used:    1
  7024 ;; Hardware stack levels required when called:    7
  7025 ;; This function calls:
  7026 ;;		_putsUSART
  7027 ;;		_fifo_read
  7028 ;;		_ECANSetOperationMode
  7029 ;;		_Busy_eep
  7030 ;;		_Write_b_eep
  7031 ;;		_memset
  7032 ;;		_receiveSendEventSLCAN
  7033 ;;		_strlen
  7034 ;;		_hexStringToBytes
  7035 ;;		_memcpy
  7036 ;;		_sendCANFrame
  7037 ;; This function is called by:
  7038 ;;		_main
  7039 ;; This function uses a non-reentrant model
  7040 ;;
  7041                           
  7042                           	psect	text2
  7043  002150                     __ptext2:
  7044                           	opt stack 0
  7045  002150                     _doModeSLCAN:
  7046                           	opt stack 23
  7047                           
  7048                           ; BSR set to: 1
  7049                           ;main.c: 1479: uint8_t c;
  7050                           ;main.c: 1480: BOOL rv = 0;
  7051                           
  7052                           ; BSR set to: 1
  7053                           ;incstack = 0
  7054                           ;incstack = 0
  7055  002150  0100               	movlb	0	; () banked
  7056  002152  6BA5               	clrf	doModeSLCAN@rv& (0+255),b
  7057                           
  7058                           ; BSR set to: 0
  7059                           ;main.c: 1483: receiveSendEventSLCAN();
  7060  002154  ECA2  F01B         	call	_receiveSendEventSLCAN	;wreg free
  7061                           
  7062                           ;main.c: 1486: (INTCONbits.GIE = 0);
  7063  002158  9EF2               	bcf	intcon,7,c	;volatile
  7064                           
  7065                           ;main.c: 1488: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  7066  00215A  0E01               	movlw	high _serialInputFifo
  7067  00215C  0100               	movlb	0	; () banked
  7068  00215E  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  7069  002160  0ED9               	movlw	low _serialInputFifo
  7070  002162  6F60               	movwf	?_fifo_read& (0+255),b
  7071  002164  0E00               	movlw	high doModeSLCAN@c
  7072  002166  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  7073  002168  0EA4               	movlw	low doModeSLCAN@c
  7074  00216A  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  7075  00216C  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  7076  00216E  0E01               	movlw	1
  7077  002170  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  7078  002172  EC07  F024         	call	_fifo_read	;wreg free
  7079  002176  0560               	decf	?_fifo_read& (0+255),w,b
  7080  002178  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  7081  00217A  E001 D1CE          	bnz	l15118
  7082                           
  7083                           ; BSR set to: 0
  7084                           ;main.c: 1491: (INTCONbits.GIE = 1);
  7085  00217E  8EF2               	bsf	intcon,7,c	;volatile
  7086                           
  7087                           ; BSR set to: 0
  7088                           ;main.c: 1493: if (0x0d != c) {
  7089  002180  51A4               	movf	doModeSLCAN@c& (0+255),w,b
  7090  002182  0A0D               	xorlw	13
  7091  002184  E101 D17D          	bz	l15106
  7092                           
  7093                           ; BSR set to: 0
  7094                           ;main.c: 1494: cmdbuf[ pos ] = c;
  7095  002188  0E29               	movlw	low _cmdbuf
  7096  00218A  2433               	addwf	_pos,w,c
  7097  00218C  6ED9               	movwf	fsr2l,c
  7098  00218E  6ADA               	clrf	fsr2h,c
  7099  002190  0E01               	movlw	high _cmdbuf
  7100  002192  22DA               	addwfc	fsr2h,f,c
  7101  002194  0100               	movlb	0	; () banked
  7102  002196  C0A4  FFDF         	movff	doModeSLCAN@c,indf2
  7103                           
  7104                           ; BSR set to: 0
  7105                           ;main.c: 1495: pos++;
  7106  00219A  2A33               	incf	_pos,f,c
  7107  00219C  D1BF               	goto	l778
  7108  00219E                     l14978:
  7109                           
  7110                           ; BSR set to: 0
  7111                           ;main.c: 1503: if (1 == strlen(cmdbuf)) {
  7112  00219E  0E01               	movlw	high _cmdbuf
  7113  0021A0  0100               	movlb	0	; () banked
  7114  0021A2  6F61               	movwf	(?_strlen+1)& (0+255),b
  7115  0021A4  0E29               	movlw	low _cmdbuf
  7116  0021A6  6F60               	movwf	?_strlen& (0+255),b
  7117  0021A8  EC73  F02D         	call	_strlen	;wreg free
  7118  0021AC  0560               	decf	?_strlen& (0+255),w,b
  7119  0021AE  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7120  0021B0  E001 D196          	bnz	l15108
  7121                           
  7122                           ; BSR set to: 0
  7123                           ;main.c: 1504: putsUSART((char *) "JFrankfurt RS-232\r\n");
  7124  0021B4  0E7D               	movlw	high STR_156
  7125  0021B6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7126  0021B8  0E0A               	movlw	low STR_156
  7127  0021BA  6F61               	movwf	?_putsUSART& (0+255),b
  7128  0021BC  EC41  F02C         	call	_putsUSART	;wreg free
  7129  0021C0                     l14982:
  7130                           
  7131                           ;main.c: 1505: rv = 1;
  7132  0021C0  0E01               	movlw	1
  7133  0021C2  D114               	goto	L4
  7134  0021C4                     l14984:
  7135                           
  7136                           ; BSR set to: 0
  7137                           ;main.c: 1511: if (1 == strlen(cmdbuf)) {
  7138  0021C4  0E01               	movlw	high _cmdbuf
  7139  0021C6  0100               	movlb	0	; () banked
  7140  0021C8  6F61               	movwf	(?_strlen+1)& (0+255),b
  7141  0021CA  0E29               	movlw	low _cmdbuf
  7142  0021CC  6F60               	movwf	?_strlen& (0+255),b
  7143  0021CE  EC73  F02D         	call	_strlen	;wreg free
  7144  0021D2  0560               	decf	?_strlen& (0+255),w,b
  7145  0021D4  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7146  0021D6  E001 D183          	bnz	l15108
  7147                           
  7148                           ; BSR set to: 0
  7149                           ;main.c: 1512: putsUSART((char *) "V1011\r\n");
  7150  0021DA  0E7E               	movlw	high STR_157
  7151  0021DC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7152  0021DE  0EB7               	movlw	low STR_157
  7153  0021E0  6F61               	movwf	?_putsUSART& (0+255),b
  7154  0021E2  EC41  F02C         	call	_putsUSART	;wreg free
  7155  0021E6  D7EC               	goto	l14982
  7156  0021E8                     l14990:
  7157                           
  7158                           ; BSR set to: 0
  7159                           ;main.c: 1519: if (1 == strlen(cmdbuf)) {
  7160  0021E8  0E01               	movlw	high _cmdbuf
  7161  0021EA  0100               	movlb	0	; () banked
  7162  0021EC  6F61               	movwf	(?_strlen+1)& (0+255),b
  7163  0021EE  0E29               	movlw	low _cmdbuf
  7164  0021F0  6F60               	movwf	?_strlen& (0+255),b
  7165  0021F2  EC73  F02D         	call	_strlen	;wreg free
  7166  0021F6  0560               	decf	?_strlen& (0+255),w,b
  7167  0021F8  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7168  0021FA  E001 D171          	bnz	l15108
  7169                           
  7170                           ; BSR set to: 0
  7171                           ;main.c: 1520: putsUSART((char *) "N1977\r\n");
  7172  0021FE  0E7E               	movlw	high STR_158
  7173  002200  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7174  002202  0EBF               	movlw	low STR_158
  7175  002204  6F61               	movwf	?_putsUSART& (0+255),b
  7176  002206  EC41  F02C         	call	_putsUSART	;wreg free
  7177  00220A  D7DA               	goto	l14982
  7178  00220C                     l14996:
  7179                           
  7180                           ; BSR set to: 0
  7181                           ;main.c: 1529: bInitiated = 1;
  7182  00220C  0E01               	movlw	1
  7183  00220E  6E2C               	movwf	_bInitiated,c
  7184                           
  7185                           ;main.c: 1530: rv = 1;
  7186  002210  D0B8               	goto	L3
  7187  002212                     l788:
  7188                           
  7189                           ; BSR set to: 0
  7190                           ;main.c: 1535: if (!bOpen) {
  7191  002212  662E               	tstfsz	_bOpen,c
  7192  002214  D003               	goto	l15000
  7193                           
  7194                           ; BSR set to: 0
  7195                           ;main.c: 1536: bInitiated = 1;
  7196  002216  0E01               	movlw	1
  7197  002218  6E2C               	movwf	_bInitiated,c
  7198                           
  7199                           ;main.c: 1537: rv = 1;
  7200  00221A  6FA5               	movwf	doModeSLCAN@rv& (0+255),b
  7201  00221C                     l15000:
  7202                           
  7203                           ; BSR set to: 0
  7204                           ;main.c: 1542: if (1 == strlen(cmdbuf)) {
  7205  00221C  0E01               	movlw	high _cmdbuf
  7206  00221E  0100               	movlb	0	; () banked
  7207  002220  6F61               	movwf	(?_strlen+1)& (0+255),b
  7208  002222  0E29               	movlw	low _cmdbuf
  7209  002224  6F60               	movwf	?_strlen& (0+255),b
  7210  002226  EC73  F02D         	call	_strlen	;wreg free
  7211  00222A  0560               	decf	?_strlen& (0+255),w,b
  7212  00222C  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7213  00222E  E001 D157          	bnz	l15108
  7214                           
  7215                           ; BSR set to: 0
  7216                           ;main.c: 1543: if (!bOpen && bInitiated) {
  7217  002232  662E               	tstfsz	_bOpen,c
  7218  002234  D155               	goto	l15108
  7219                           
  7220                           ; BSR set to: 0
  7221  002236  502C               	movf	_bInitiated,w,c
  7222  002238  E101 D152          	bz	l15108
  7223                           
  7224                           ; BSR set to: 0
  7225                           ;main.c: 1544: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  7226  00223C  0E00               	movlw	0
  7227  00223E  EC1E  F02F         	call	_ECANSetOperationMode
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;main.c: 1545: bOpen = 1;
  7231  002242  0E01               	movlw	1
  7232  002244  6E2E               	movwf	_bOpen,c
  7233  002246  D7BC               	goto	l14982
  7234  002248                     l15012:
  7235                           
  7236                           ; BSR set to: 0
  7237                           ;main.c: 1553: if (1 == strlen(cmdbuf)) {
  7238  002248  0E01               	movlw	high _cmdbuf
  7239  00224A  0100               	movlb	0	; () banked
  7240  00224C  6F61               	movwf	(?_strlen+1)& (0+255),b
  7241  00224E  0E29               	movlw	low _cmdbuf
  7242  002250  6F60               	movwf	?_strlen& (0+255),b
  7243  002252  EC73  F02D         	call	_strlen	;wreg free
  7244  002256  0560               	decf	?_strlen& (0+255),w,b
  7245  002258  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7246  00225A  E001 D141          	bnz	l15108
  7247                           
  7248                           ; BSR set to: 0
  7249                           ;main.c: 1554: if (bOpen) {
  7250  00225E  502E               	movf	_bOpen,w,c
  7251  002260  E0AF               	bz	l14982
  7252                           
  7253                           ; BSR set to: 0
  7254                           ;main.c: 1555: ECANSetOperationMode(0x20);
  7255  002262  0E20               	movlw	32
  7256  002264  EC1E  F02F         	call	_ECANSetOperationMode
  7257                           
  7258                           ; BSR set to: 0
  7259                           ;main.c: 1556: bOpen = 0;
  7260  002268  6A2E               	clrf	_bOpen,c
  7261  00226A  D7AA               	goto	l14982
  7262  00226C                     l15022:
  7263                           
  7264                           ; BSR set to: 0
  7265                           ;main.c: 1569: if (bOpen && (strlen(cmdbuf) >= 10)) {
  7266  00226C  502E               	movf	_bOpen,w,c
  7267  00226E  E101 D137          	bz	l15108
  7268                           
  7269                           ; BSR set to: 0
  7270  002272  0E01               	movlw	high _cmdbuf
  7271  002274  0100               	movlb	0	; () banked
  7272  002276  6F61               	movwf	(?_strlen+1)& (0+255),b
  7273  002278  0E29               	movlw	low _cmdbuf
  7274  00227A  6F60               	movwf	?_strlen& (0+255),b
  7275  00227C  EC73  F02D         	call	_strlen	;wreg free
  7276  002280  0E0A               	movlw	10
  7277  002282  5D60               	subwf	?_strlen& (0+255),w,b
  7278  002284  0E00               	movlw	0
  7279  002286  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7280  002288  E201 D12A          	bnc	l15108
  7281                           
  7282                           ; BSR set to: 0
  7283                           ;main.c: 1571: uint32_t id;
  7284                           ;main.c: 1572: uint8_t dlc;
  7285                           ;main.c: 1574: if (hexStringToBytes(wrkbuf, sizeof ( wrkbuf), cmdbuf) < 5) {
  7286  00228C  0E01               	movlw	high _wrkbuf
  7287  00228E  0100               	movlb	0	; () banked
  7288  002290  6F65               	movwf	(?_hexStringToBytes+1)& (0+255),b
  7289  002292  0E79               	movlw	low _wrkbuf
  7290  002294  6F64               	movwf	?_hexStringToBytes& (0+255),b
  7291  002296  0E50               	movlw	80
  7292  002298  6F66               	movwf	(?_hexStringToBytes+2)& (0+255),b
  7293  00229A  0E01               	movlw	high _cmdbuf
  7294  00229C  6F68               	movwf	(?_hexStringToBytes+4)& (0+255),b
  7295  00229E  0E29               	movlw	low _cmdbuf
  7296  0022A0  6F67               	movwf	(?_hexStringToBytes+3)& (0+255),b
  7297  0022A2  EC4E  F028         	call	_hexStringToBytes	;wreg free
  7298  0022A6  6F98               	movwf	??_doModeSLCAN& (0+255),b
  7299  0022A8  0E05               	movlw	5
  7300  0022AA  5D98               	subwf	??_doModeSLCAN& (0+255),w,b
  7301  0022AC  E201 D118          	bnc	l15108
  7302                           
  7303                           ; BSR set to: 0
  7304                           ;main.c: 1576: }
  7305                           ;main.c: 1578: id = (uint32_t) wrkbuf[0] << 24 + (uint32_t) wrkbuf[1] << 16 + (uint32_t)
      +                           wrkbuf[2] << 8 + wrkbuf[3];
  7306  0022B0  C17C  F098         	movff	_wrkbuf+3,??_doModeSLCAN
  7307  0022B4  0E08               	movlw	8
  7308  0022B6  2798               	addwf	??_doModeSLCAN& (0+255),f,b
  7309  0022B8  C17B  F099         	movff	_wrkbuf+2,??_doModeSLCAN+1
  7310  0022BC  0E10               	movlw	16
  7311  0022BE  2799               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  7312  0022C0  C17A  F09A         	movff	_wrkbuf+1,??_doModeSLCAN+2
  7313  0022C4  0E18               	movlw	24
  7314  0022C6  279A               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  7315  0022C8  C179  F09B         	movff	_wrkbuf,??_doModeSLCAN+3
  7316  0022CC  0100               	movlb	0	; () banked
  7317  0022CE  6B9C               	clrf	(??_doModeSLCAN+4)& (0+255),b
  7318  0022D0  6B9D               	clrf	(??_doModeSLCAN+5)& (0+255),b
  7319  0022D2  6B9E               	clrf	(??_doModeSLCAN+6)& (0+255),b
  7320  0022D4  2B9A               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  7321  0022D6  D001               	goto	u20140
  7322  0022D8                     u20145:
  7323  0022D8  D922               	call	PL86	;call to abstracted procedure
  7324  0022DA                     u20140:
  7325  0022DA  2F9A               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  7326  0022DC  D7FD               	goto	u20145
  7327  0022DE  2B99               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  7328  0022E0  D001               	goto	u20150
  7329  0022E2                     u20155:
  7330  0022E2  D91D               	call	PL86	;call to abstracted procedure
  7331  0022E4                     u20150:
  7332  0022E4  2F99               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  7333  0022E6  D7FD               	goto	u20155
  7334  0022E8  2B98               	incf	??_doModeSLCAN& (0+255),f,b
  7335  0022EA  D001               	goto	u20160
  7336  0022EC                     u20165:
  7337  0022EC  D918               	call	PL86	;call to abstracted procedure
  7338  0022EE                     u20160:
  7339  0022EE  2F98               	decfsz	??_doModeSLCAN& (0+255),f,b
  7340  0022F0  D7FD               	goto	u20165
  7341  0022F2  C09E  F0A2         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  7342  0022F6  C09D  F0A1         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  7343  0022FA  C09C  F0A0         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  7344  0022FE  C09B  F09F         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  7345                           
  7346                           ; BSR set to: 0
  7347                           ;main.c: 1579: dlc = vscpData[4];
  7348  002302  C1E5  F0A3         	movff	_vscpData+4,doModeSLCAN@dlc
  7349                           
  7350                           ; BSR set to: 0
  7351                           ;main.c: 1582: if (dlc > 8) break;
  7352  002306  0E08               	movlw	8
  7353  002308  65A3               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  7354  00230A  D001               	goto	l15038
  7355  00230C  D0E9               	goto	l15108
  7356  00230E                     l15038:
  7357                           
  7358                           ; BSR set to: 0
  7359                           ;main.c: 1583: if (strlen(cmdbuf) < (10 + 2 * dlc)) break;
  7360  00230E  90D8               	bcf	status,0,c
  7361  002310  35A3               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  7362  002312  6F98               	movwf	??_doModeSLCAN& (0+255),b
  7363  002314  6B99               	clrf	(??_doModeSLCAN+1)& (0+255),b
  7364  002316  3799               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  7365  002318  0E0A               	movlw	10
  7366  00231A  2798               	addwf	??_doModeSLCAN& (0+255),f,b
  7367  00231C  0E00               	movlw	0
  7368  00231E  2399               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  7369  002320  0E01               	movlw	high _cmdbuf
  7370  002322  0100               	movlb	0	; () banked
  7371  002324  6F61               	movwf	(?_strlen+1)& (0+255),b
  7372  002326  0E29               	movlw	low _cmdbuf
  7373  002328  6F60               	movwf	?_strlen& (0+255),b
  7374  00232A  EC73  F02D         	call	_strlen	;wreg free
  7375  00232E  5198               	movf	??_doModeSLCAN& (0+255),w,b
  7376  002330  5D60               	subwf	?_strlen& (0+255),w,b
  7377  002332  5199               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  7378  002334  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7379  002336  E201 D0D3          	bnc	l15108
  7380                           
  7381                           ; BSR set to: 0
  7382                           ;main.c: 1585: memcpy(vscpData, vscpData + 5, dlc);
  7383  00233A  0E01               	movlw	high _vscpData
  7384  00233C  0100               	movlb	0	; () banked
  7385  00233E  6F61               	movwf	(?_memcpy+1)& (0+255),b
  7386  002340  0EE1               	movlw	low _vscpData
  7387  002342  6F60               	movwf	?_memcpy& (0+255),b
  7388  002344  0EE6               	movlw	low (_vscpData+5)
  7389  002346  6F98               	movwf	??_doModeSLCAN& (0+255),b
  7390  002348  0E01               	movlw	high (_vscpData+5)
  7391  00234A  6F99               	movwf	(??_doModeSLCAN+1)& (0+255),b
  7392  00234C  C098  F062         	movff	??_doModeSLCAN,?_memcpy+2
  7393  002350  C099  F063         	movff	??_doModeSLCAN+1,?_memcpy+3
  7394  002354  C0A3  F064         	movff	doModeSLCAN@dlc,?_memcpy+4
  7395  002358  6B65               	clrf	(?_memcpy+5)& (0+255),b
  7396  00235A  EC52  F02D         	call	_memcpy	;wreg free
  7397                           
  7398                           ; BSR set to: 0
  7399                           ;main.c: 1587: rv = sendCANFrame(id, dlc, vscpData);
  7400  00235E  C09F  F091         	movff	doModeSLCAN@id,?_sendCANFrame
  7401  002362  C0A0  F092         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  7402  002366  C0A1  F093         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  7403  00236A  C0A2  F094         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  7404  00236E  C0A3  F095         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  7405  002372  0E01               	movlw	high _vscpData
  7406  002374  0100               	movlb	0	; () banked
  7407  002376  6F97               	movwf	(?_sendCANFrame+6)& (0+255),b
  7408  002378  0EE1               	movlw	low _vscpData
  7409  00237A  6F96               	movwf	(?_sendCANFrame+5)& (0+255),b
  7410  00237C  EC10  F02E         	call	_sendCANFrame	;wreg free
  7411  002380  D035               	goto	L4
  7412  002382                     L3:
  7413  002382  6FA5               	movwf	doModeSLCAN@rv& (0+255),b
  7414  002384  D0AD               	goto	l15108
  7415  002386                     l15046:
  7416                           
  7417                           ; BSR set to: 0
  7418                           ;main.c: 1602: if (bOpen && (strlen(cmdbuf) == 1)) {
  7419  002386  502E               	movf	_bOpen,w,c
  7420  002388  E101 D0AA          	bz	l15108
  7421                           
  7422                           ; BSR set to: 0
  7423  00238C  0E01               	movlw	high _cmdbuf
  7424  00238E  0100               	movlb	0	; () banked
  7425  002390  6F61               	movwf	(?_strlen+1)& (0+255),b
  7426  002392  0E29               	movlw	low _cmdbuf
  7427  002394  6F60               	movwf	?_strlen& (0+255),b
  7428  002396  EC73  F02D         	call	_strlen	;wreg free
  7429  00239A  0560               	decf	?_strlen& (0+255),w,b
  7430  00239C  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7431  00239E  E001 D09F          	bnz	l15108
  7432                           
  7433                           ; BSR set to: 0
  7434                           ;main.c: 1603: putsUSART((char *) "F00\r\n");
  7435  0023A2  0E7F               	movlw	high STR_159
  7436  0023A4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7437  0023A6  0E63               	movlw	low STR_159
  7438  0023A8  6F61               	movwf	?_putsUSART& (0+255),b
  7439  0023AA  EC41  F02C         	call	_putsUSART	;wreg free
  7440  0023AE  D098               	goto	l15108
  7441  0023B0                     l15056:
  7442                           
  7443                           ; BSR set to: 0
  7444                           ;main.c: 1619: if (2 == strlen(cmdbuf)) {
  7445  0023B0  0E01               	movlw	high _cmdbuf
  7446  0023B2  0100               	movlb	0	; () banked
  7447  0023B4  6F61               	movwf	(?_strlen+1)& (0+255),b
  7448  0023B6  0E29               	movlw	low _cmdbuf
  7449  0023B8  6F60               	movwf	?_strlen& (0+255),b
  7450  0023BA  EC73  F02D         	call	_strlen	;wreg free
  7451  0023BE  5160               	movf	?_strlen& (0+255),w,b
  7452  0023C0  0A02               	xorlw	2
  7453  0023C2  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7454  0023C4  E001 D08C          	bnz	l15108
  7455                           
  7456                           ; BSR set to: 0
  7457                           ;main.c: 1620: if (!bOpen) {
  7458  0023C8  662E               	tstfsz	_bOpen,c
  7459  0023CA  D08A               	goto	l15108
  7460                           
  7461                           ; BSR set to: 0
  7462                           ;main.c: 1621: if ('0' == cmdbuf[1]) {
  7463  0023CC  0101               	movlb	1	; () banked
  7464  0023CE  512A               	movf	(_cmdbuf+1)& (0+255),w,b
  7465  0023D0  0A30               	xorlw	48
  7466  0023D2  E10E               	bnz	l15068
  7467                           
  7468                           ; BSR set to: 1
  7469                           ;main.c: 1622: nTimeStamp = 0;
  7470  0023D4  6A32               	clrf	_nTimeStamp,c
  7471                           
  7472                           ; BSR set to: 1
  7473                           ;main.c: 1624: (Busy_eep(), Write_b_eep(0x05,0));
  7474  0023D6  EC68  F02F         	call	_Busy_eep	;wreg free
  7475  0023DA  0100               	movlb	0	; () banked
  7476  0023DC  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7477  0023DE  0E05               	movlw	5
  7478  0023E0  6F60               	movwf	?_Write_b_eep& (0+255),b
  7479  0023E2  0E00               	movlw	0
  7480  0023E4  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
  7481  0023E6  EC64  F02E         	call	_Write_b_eep	;wreg free
  7482  0023EA  D6EA               	goto	l14982
  7483  0023EC                     L4:
  7484  0023EC  0100               	movlb	0	; () banked
  7485  0023EE  D7C9               	goto	L3
  7486  0023F0                     l15068:
  7487                           
  7488                           ; BSR set to: 1
  7489  0023F0  512A               	movf	(_cmdbuf+1)& (0+255),w,b
  7490  0023F2  0A31               	xorlw	49
  7491  0023F4  E10D               	bnz	l813
  7492                           
  7493                           ; BSR set to: 1
  7494                           ;main.c: 1627: nTimeStamp = 1;
  7495  0023F6  0E01               	movlw	1
  7496  0023F8  6E32               	movwf	_nTimeStamp,c
  7497                           
  7498                           ; BSR set to: 1
  7499                           ;main.c: 1629: (Busy_eep(), Write_b_eep(0x05,1));
  7500  0023FA  EC68  F02F         	call	_Busy_eep	;wreg free
  7501  0023FE  0100               	movlb	0	; () banked
  7502  002400  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7503  002402  0E05               	movlw	5
  7504  002404  6F60               	movwf	?_Write_b_eep& (0+255),b
  7505  002406  0E01               	movlw	1
  7506  002408  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
  7507  00240A  EC64  F02E         	call	_Write_b_eep	;wreg free
  7508  00240E  D6D8               	goto	l14982
  7509  002410                     l813:
  7510                           
  7511                           ; BSR set to: 1
  7512                           ;main.c: 1633: rv = 0;
  7513  002410  0100               	movlb	0	; () banked
  7514  002412  6BA5               	clrf	doModeSLCAN@rv& (0+255),b
  7515  002414  D065               	goto	l15108
  7516  002416                     l15076:
  7517                           
  7518                           ; BSR set to: 0
  7519                           ;main.c: 1641: (Busy_eep(), Write_b_eep(0x01,0xFF));
  7520  002416  EC68  F02F         	call	_Busy_eep	;wreg free
  7521  00241A  0100               	movlb	0	; () banked
  7522  00241C  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7523  00241E  0E01               	movlw	1
  7524  002420  6F60               	movwf	?_Write_b_eep& (0+255),b
  7525  002422  0EFF               	movlw	255
  7526  002424  6962               	setf	(?_Write_b_eep+2)& (0+255),b
  7527  002426  EC64  F02E         	call	_Write_b_eep	;wreg free
  7528  00242A  00FF               	reset		;# 
  7529                           
  7530                           ;main.c: 1643: break;
  7531  00242C  D059               	goto	l15108
  7532  00242E                     l15080:
  7533                           
  7534                           ; BSR set to: 0
  7535                           ;main.c: 1647: if ( 'v' == cmdbuf[1] &&
  7536                           ;main.c: 1648: 's' == cmdbuf[2] &&
  7537                           ;main.c: 1649: 'c' == cmdbuf[3] &&
  7538                           ;main.c: 1650: 'p' == cmdbuf[4] ) {
  7539  00242E  0101               	movlb	1	; () banked
  7540  002430  512A               	movf	(_cmdbuf+1)& (0+255),w,b
  7541  002432  0A76               	xorlw	118
  7542  002434  E10C               	bnz	l15090
  7543                           
  7544                           ; BSR set to: 1
  7545  002436  512B               	movf	(_cmdbuf+2)& (0+255),w,b
  7546  002438  0A73               	xorlw	115
  7547  00243A  E109               	bnz	l15090
  7548                           
  7549                           ; BSR set to: 1
  7550  00243C  512C               	movf	(_cmdbuf+3)& (0+255),w,b
  7551  00243E  0A63               	xorlw	99
  7552  002440  E106               	bnz	l15090
  7553                           
  7554                           ; BSR set to: 1
  7555  002442  512D               	movf	(_cmdbuf+4)& (0+255),w,b
  7556  002444  0A70               	xorlw	112
  7557  002446  E103               	bnz	l15090
  7558                           
  7559                           ; BSR set to: 1
  7560                           ;main.c: 1651: mode = 1;
  7561  002448  0E01               	movlw	1
  7562  00244A  6F28               	movwf	_mode& (0+255),b
  7563                           
  7564                           ;main.c: 1652: }
  7565  00244C  D049               	goto	l15108
  7566  00244E                     l15090:
  7567                           
  7568                           ; BSR set to: 1
  7569                           ;main.c: 1653: else if ( 'v' == cmdbuf[1] &&
  7570                           ;main.c: 1654: 'e' == cmdbuf[2] &&
  7571                           ;main.c: 1655: 'r' == cmdbuf[3] &&
  7572                           ;main.c: 1656: 'b' == cmdbuf[4] ) {
  7573  00244E  512A               	movf	(_cmdbuf+1)& (0+255),w,b
  7574  002450  0A76               	xorlw	118
  7575  002452  E146               	bnz	l15108
  7576                           
  7577                           ; BSR set to: 1
  7578  002454  512B               	movf	(_cmdbuf+2)& (0+255),w,b
  7579  002456  0A65               	xorlw	101
  7580  002458  E143               	bnz	l15108
  7581                           
  7582                           ; BSR set to: 1
  7583  00245A  512C               	movf	(_cmdbuf+3)& (0+255),w,b
  7584  00245C  0A72               	xorlw	114
  7585  00245E  E140               	bnz	l15108
  7586                           
  7587                           ; BSR set to: 1
  7588  002460  512D               	movf	(_cmdbuf+4)& (0+255),w,b
  7589  002462  0A62               	xorlw	98
  7590  002464  E13D               	bnz	l15108
  7591                           
  7592                           ; BSR set to: 1
  7593                           ;main.c: 1657: mode = 0;
  7594  002466  6B28               	clrf	_mode& (0+255),b
  7595  002468  D03B               	goto	l15108
  7596  00246A                     l15100:
  7597                           
  7598                           ; BSR set to: 0
  7599                           ;main.c: 1662: {
  7600                           ;main.c: 1664: if (0 == strlen(cmdbuf)) {
  7601  00246A  0E01               	movlw	high _cmdbuf
  7602  00246C  0100               	movlb	0	; () banked
  7603  00246E  6F61               	movwf	(?_strlen+1)& (0+255),b
  7604  002470  0E29               	movlw	low _cmdbuf
  7605  002472  6F60               	movwf	?_strlen& (0+255),b
  7606  002474  EC73  F02D         	call	_strlen	;wreg free
  7607  002478  5161               	movf	(?_strlen+1)& (0+255),w,b
  7608  00247A  1160               	iorwf	?_strlen& (0+255),w,b
  7609  00247C  E101 D6A0          	bz	l14982
  7610  002480  D02F               	goto	l15108
  7611  002482                     l15106:
  7612                           
  7613                           ; BSR set to: 0
  7614  002482  51A4               	movf	doModeSLCAN@c& (0+255),w,b
  7615                           
  7616                           ; Switch size 1, requested type "space"
  7617                           ; Number of cases is 17, Range of values is 64 to 116
  7618                           ; switch strategies available:
  7619                           ; Name         Instructions Cycles
  7620                           ; simple_byte           52    27 (average)
  7621                           ;	Chosen strategy is simple_byte
  7622  002484  0A40               	xorlw	64	; case 64
  7623  002486  E0D3               	bz	l15080
  7624  002488  0A02               	xorlw	2	; case 66
  7625  00248A  E0C5               	bz	l15076
  7626  00248C  0A01               	xorlw	1	; case 67
  7627  00248E  E101 D6DB          	bz	l15012
  7628  002492  0A05               	xorlw	5	; case 70
  7629  002494  E101 D777          	bz	l15046
  7630  002498  0A0C               	xorlw	12	; case 74
  7631  00249A  E101 D680          	bz	l14978
  7632  00249E  0A07               	xorlw	7	; case 77
  7633  0024A0  E101 D68E          	bz	l14982
  7634  0024A4  0A03               	xorlw	3	; case 78
  7635  0024A6  E101 D69F          	bz	l14990
  7636  0024AA  0A01               	xorlw	1	; case 79
  7637  0024AC  E101 D6B6          	bz	l15000
  7638  0024B0  0A1D               	xorlw	29	; case 82
  7639  0024B2  E016               	bz	l15108
  7640  0024B4  0A01               	xorlw	1	; case 83
  7641  0024B6  E101 D6A9          	bz	l14996
  7642  0024BA  0A07               	xorlw	7	; case 84
  7643  0024BC  E101 D6D6          	bz	l15022
  7644  0024C0  0A02               	xorlw	2	; case 86
  7645  0024C2  E101 D67F          	bz	l14984
  7646  0024C6  0A0C               	xorlw	12	; case 90
  7647  0024C8  E101 D772          	bz	l15056
  7648  0024CC  0A37               	xorlw	55	; case 109
  7649  0024CE  E101 D677          	bz	l14982
  7650  0024D2  0A1F               	xorlw	31	; case 114
  7651  0024D4  E005               	bz	l15108
  7652  0024D6  0A01               	xorlw	1	; case 115
  7653  0024D8  E101 D69B          	bz	l788
  7654  0024DC  0A07               	xorlw	7	; case 116
  7655  0024DE  E1C5               	bnz	l15100
  7656  0024E0                     l15108:
  7657                           
  7658                           ;main.c: 1672: if (rv) {
  7659  0024E0  0100               	movlb	0	; () banked
  7660  0024E2  51A5               	movf	doModeSLCAN@rv& (0+255),w,b
  7661  0024E4  E007               	bz	l15112
  7662                           
  7663                           ; BSR set to: 0
  7664                           ;main.c: 1674: putsUSART((char *) "\r");
  7665  0024E6  0E7F               	movlw	high STR_160
  7666  0024E8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7667  0024EA  0EF3               	movlw	low STR_160
  7668  0024EC  6F61               	movwf	?_putsUSART& (0+255),b
  7669  0024EE  EC41  F02C         	call	_putsUSART	;wreg free
  7670                           
  7671                           ;main.c: 1675: }
  7672  0024F2  D006               	goto	l15114
  7673  0024F4                     l15112:
  7674                           
  7675                           ; BSR set to: 0
  7676                           ;main.c: 1676: else {
  7677                           ;main.c: 1678: putsUSART((char *) "\a");
  7678  0024F4  0E7F               	movlw	high STR_161
  7679  0024F6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7680  0024F8  0EF1               	movlw	low STR_161
  7681  0024FA  6F61               	movwf	?_putsUSART& (0+255),b
  7682  0024FC  EC41  F02C         	call	_putsUSART	;wreg free
  7683  002500                     l15114:
  7684                           
  7685                           ;main.c: 1679: }
  7686                           ;main.c: 1682: memset( cmdbuf, 0, sizeof( cmdbuf ) );
  7687  002500  0E01               	movlw	high _cmdbuf
  7688  002502  0100               	movlb	0	; () banked
  7689  002504  6F61               	movwf	(?_memset+1)& (0+255),b
  7690  002506  0E29               	movlw	low _cmdbuf
  7691  002508  6F60               	movwf	?_memset& (0+255),b
  7692  00250A  6B63               	clrf	(?_memset+3)& (0+255),b
  7693  00250C  6B62               	clrf	(?_memset+2)& (0+255),b
  7694  00250E  6B65               	clrf	(?_memset+5)& (0+255),b
  7695  002510  0E50               	movlw	80
  7696  002512  6F64               	movwf	(?_memset+4)& (0+255),b
  7697  002514  ECC5  F02E         	call	_memset	;wreg free
  7698                           
  7699                           ; BSR set to: 0
  7700                           ;main.c: 1683: pos = 0;
  7701  002518  6A33               	clrf	_pos,c
  7702  00251A                     l15118:
  7703                           
  7704                           ; BSR set to: 0
  7705                           ;main.c: 1685: }
  7706                           ;main.c: 1688: (INTCONbits.GIE = 1);
  7707  00251A  8EF2               	bsf	intcon,7,c	;volatile
  7708  00251C                     l778:
  7709                           
  7710                           ; BSR set to: 0
  7711  00251C  0012               	return	
  7712  00251E                     __end_of_doModeSLCAN:
  7713                           	opt stack 0
  7714  00251E                     PL86:
  7715                           	opt stack 23
  7716  00251E  90D8               	bcf	status,0,c
  7717  002520  379B               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  7718  002522  379C               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  7719  002524  379D               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  7720  002526  379E               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  7721  002528  0012               	return	
  7722  00252A                     __end_ofPL86:
  7723                           	opt stack 0
  7724                           tblptru	equ	0xFF8
  7725                           tblptrh	equ	0xFF7
  7726                           tblptrl	equ	0xFF6
  7727                           tablat	equ	0xFF5
  7728                           prodh	equ	0xFF4
  7729                           prodl	equ	0xFF3
  7730                           intcon	equ	0xFF2
  7731                           indf0	equ	0xFEF
  7732                           postinc0	equ	0xFEE
  7733                           fsr0h	equ	0xFEA
  7734                           fsr0l	equ	0xFE9
  7735                           wreg	equ	0xFE8
  7736                           indf1	equ	0xFE7
  7737                           postinc1	equ	0xFE6
  7738                           postdec1	equ	0xFE5
  7739                           fsr1h	equ	0xFE2
  7740                           fsr1l	equ	0xFE1
  7741                           indf2	equ	0xFDF
  7742                           postinc2	equ	0xFDE
  7743                           postdec2	equ	0xFDD
  7744                           plusw2	equ	0xFDB
  7745                           fsr2h	equ	0xFDA
  7746                           fsr2l	equ	0xFD9
  7747                           status	equ	0xFD8
  7748                           
  7749 ;; *************** function _hexStringToBytes *****************
  7750 ;; Defined at:
  7751 ;;		line 35 in file "hexutils.c"
  7752 ;; Parameters:    Size  Location     Type
  7753 ;;  buf             2    4[BANK0 ] PTR unsigned char 
  7754 ;;		 -> wrkbuf(80), 
  7755 ;;  size            1    6[BANK0 ] unsigned char 
  7756 ;;  inhex           2    7[BANK0 ] PTR unsigned char 
  7757 ;;		 -> cmdbuf(80), 
  7758 ;; Auto vars:     Size  Location     Type
  7759 ;;  i               2   16[BANK0 ] int 
  7760 ;;  p               2   14[BANK0 ] PTR unsigned char 
  7761 ;;		 -> cmdbuf(80), 
  7762 ;;  len             2   12[BANK0 ] int 
  7763 ;; Return value:  Size  Location     Type
  7764 ;;                  1    wreg      unsigned char 
  7765 ;; Registers used:
  7766 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7767 ;; Tracked objects:
  7768 ;;		On entry : F/0
  7769 ;;		On exit  : F/0
  7770 ;;		Unchanged: 0/0
  7771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7772 ;;      Params:         0       5       0       0       0       0       0
  7773 ;;      Locals:         0       6       0       0       0       0       0
  7774 ;;      Temps:          0       3       0       0       0       0       0
  7775 ;;      Totals:         0      14       0       0       0       0       0
  7776 ;;Total ram usage:       14 bytes
  7777 ;; Hardware stack levels used:    1
  7778 ;; Hardware stack levels required when called:    4
  7779 ;; This function calls:
  7780 ;;		_strlen
  7781 ;;		_nibbleFromChar
  7782 ;; This function is called by:
  7783 ;;		_doModeSLCAN
  7784 ;; This function uses a non-reentrant model
  7785 ;;
  7786                           
  7787                           	psect	text3
  7788  00509C                     __ptext3:
  7789                           	opt stack 0
  7790  00509C                     _hexStringToBytes:
  7791                           	opt stack 25
  7792                           
  7793                           ; BSR set to: 0
  7794                           ;hexutils.c: 36: uint8_t *p;
  7795                           ;hexutils.c: 37: int len, i;
  7796                           ;hexutils.c: 39: len = strlen(inhex) / 2;
  7797                           
  7798                           ; BSR set to: 0
  7799                           ;incstack = 0
  7800                           ;incstack = 0
  7801  00509C  C067  F060         	movff	hexStringToBytes@inhex,?_strlen
  7802  0050A0  C068  F061         	movff	hexStringToBytes@inhex+1,?_strlen+1
  7803  0050A4  EC73  F02D         	call	_strlen	;wreg free
  7804  0050A8  90D8               	bcf	status,0,c
  7805  0050AA  3161               	rrcf	(?_strlen+1)& (0+255),w,b
  7806  0050AC  6F6D               	movwf	(hexStringToBytes@len+1)& (0+255),b
  7807  0050AE  3160               	rrcf	?_strlen& (0+255),w,b
  7808  0050B0  6F6C               	movwf	hexStringToBytes@len& (0+255),b
  7809                           
  7810                           ; BSR set to: 0
  7811                           ;hexutils.c: 40: if (len > size) return 0;
  7812  0050B2  5166               	movf	hexStringToBytes@size& (0+255),w,b
  7813  0050B4  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7814  0050B6  6B6A               	clrf	(??_hexStringToBytes+1)& (0+255),b
  7815  0050B8  516A               	movf	(??_hexStringToBytes+1)& (0+255),w,b
  7816  0050BA  0A80               	xorlw	128
  7817  0050BC  6F6B               	movwf	(??_hexStringToBytes+2)& (0+255),b
  7818  0050BE  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7819  0050C0  5D69               	subwf	??_hexStringToBytes& (0+255),w,b
  7820  0050C2  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7821  0050C4  0A80               	xorlw	128
  7822  0050C6  596B               	subwfb	(??_hexStringToBytes+2)& (0+255),w,b
  7823  0050C8  E202               	bc	l1646
  7824                           
  7825                           ; BSR set to: 0
  7826  0050CA  0E00               	movlw	0
  7827  0050CC  D033               	goto	l1647
  7828  0050CE                     l1646:
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;hexutils.c: 41: for (i = 0, p = (uint8_t *) inhex; i < len; i++) {
  7832  0050CE  6B70               	clrf	hexStringToBytes@i& (0+255),b
  7833  0050D0  6B71               	clrf	(hexStringToBytes@i+1)& (0+255),b
  7834  0050D2  C067  F06E         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  7835  0050D6  C068  F06F         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  7836  0050DA  D022               	goto	l16680
  7837  0050DC                     l16674:
  7838                           
  7839                           ; BSR set to: 0
  7840                           ;hexutils.c: 42: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p + 1));
  7841  0050DC  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7842  0050DE  2564               	addwf	hexStringToBytes@buf& (0+255),w,b
  7843  0050E0  6ED9               	movwf	fsr2l,c
  7844  0050E2  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7845  0050E4  2165               	addwfc	(hexStringToBytes@buf+1)& (0+255),w,b
  7846  0050E6  6EDA               	movwf	fsr2h,c
  7847  0050E8  EE10 F001          	lfsr	1,1
  7848  0050EC  516E               	movf	hexStringToBytes@p& (0+255),w,b
  7849  0050EE  26E1               	addwf	fsr1l,f,c
  7850  0050F0  516F               	movf	(hexStringToBytes@p+1)& (0+255),w,b
  7851  0050F2  22E2               	addwfc	fsr1h,f,c
  7852  0050F4  50E7               	movf	indf1,w,c
  7853  0050F6  ECB3  F02D         	call	_nibbleFromChar
  7854  0050FA  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7855  0050FC  C06E  FFE1         	movff	hexStringToBytes@p,fsr1l
  7856  005100  C06F  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  7857  005104  50E7               	movf	indf1,w,c
  7858  005106  ECB3  F02D         	call	_nibbleFromChar
  7859  00510A  6F6A               	movwf	(??_hexStringToBytes+1)& (0+255),b
  7860  00510C  396A               	swapf	(??_hexStringToBytes+1)& (0+255),w,b
  7861  00510E  0BF0               	andlw	240
  7862  005110  1169               	iorwf	??_hexStringToBytes& (0+255),w,b
  7863  005112  6EDF               	movwf	indf2,c
  7864                           
  7865                           ; BSR set to: 0
  7866                           ;hexutils.c: 43: p += 2;
  7867  005114  0E02               	movlw	2
  7868  005116  276E               	addwf	hexStringToBytes@p& (0+255),f,b
  7869  005118  0E00               	movlw	0
  7870  00511A  236F               	addwfc	(hexStringToBytes@p+1)& (0+255),f,b
  7871                           
  7872                           ; BSR set to: 0
  7873  00511C  4B70               	infsnz	hexStringToBytes@i& (0+255),f,b
  7874  00511E  2B71               	incf	(hexStringToBytes@i+1)& (0+255),f,b
  7875  005120                     l16680:
  7876                           
  7877                           ; BSR set to: 0
  7878  005120  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7879  005122  0A80               	xorlw	128
  7880  005124  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7881  005126  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7882  005128  5D70               	subwf	hexStringToBytes@i& (0+255),w,b
  7883  00512A  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7884  00512C  0A80               	xorlw	128
  7885  00512E  5969               	subwfb	??_hexStringToBytes& (0+255),w,b
  7886  005130  E3D5               	bnc	l16674
  7887                           
  7888                           ; BSR set to: 0
  7889                           ;hexutils.c: 44: }
  7890                           ;hexutils.c: 46: return i;
  7891  005132  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7892  005134                     l1647:
  7893                           
  7894                           ; BSR set to: 0
  7895  005134  0012               	return	
  7896  005136                     __end_of_hexStringToBytes:
  7897                           	opt stack 0
  7898                           tblptru	equ	0xFF8
  7899                           tblptrh	equ	0xFF7
  7900                           tblptrl	equ	0xFF6
  7901                           tablat	equ	0xFF5
  7902                           prodh	equ	0xFF4
  7903                           prodl	equ	0xFF3
  7904                           intcon	equ	0xFF2
  7905                           indf0	equ	0xFEF
  7906                           postinc0	equ	0xFEE
  7907                           fsr0h	equ	0xFEA
  7908                           fsr0l	equ	0xFE9
  7909                           wreg	equ	0xFE8
  7910                           indf1	equ	0xFE7
  7911                           postinc1	equ	0xFE6
  7912                           postdec1	equ	0xFE5
  7913                           fsr1h	equ	0xFE2
  7914                           fsr1l	equ	0xFE1
  7915                           indf2	equ	0xFDF
  7916                           postinc2	equ	0xFDE
  7917                           postdec2	equ	0xFDD
  7918                           plusw2	equ	0xFDB
  7919                           fsr2h	equ	0xFDA
  7920                           fsr2l	equ	0xFD9
  7921                           status	equ	0xFD8
  7922                           
  7923 ;; *************** function _nibbleFromChar *****************
  7924 ;; Defined at:
  7925 ;;		line 20 in file "hexutils.c"
  7926 ;; Parameters:    Size  Location     Type
  7927 ;;  c               1    wreg     unsigned char 
  7928 ;; Auto vars:     Size  Location     Type
  7929 ;;  c               1    0[BANK0 ] unsigned char 
  7930 ;; Return value:  Size  Location     Type
  7931 ;;                  1    wreg      unsigned char 
  7932 ;; Registers used:
  7933 ;;		wreg, status,2, status,0
  7934 ;; Tracked objects:
  7935 ;;		On entry : F/0
  7936 ;;		On exit  : F/0
  7937 ;;		Unchanged: 0/0
  7938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7939 ;;      Params:         0       0       0       0       0       0       0
  7940 ;;      Locals:         0       1       0       0       0       0       0
  7941 ;;      Temps:          0       0       0       0       0       0       0
  7942 ;;      Totals:         0       1       0       0       0       0       0
  7943 ;;Total ram usage:        1 bytes
  7944 ;; Hardware stack levels used:    1
  7945 ;; Hardware stack levels required when called:    3
  7946 ;; This function calls:
  7947 ;;		Nothing
  7948 ;; This function is called by:
  7949 ;;		_hexStringToBytes
  7950 ;; This function uses a non-reentrant model
  7951 ;;
  7952                           
  7953                           	psect	text4
  7954  005B66                     __ptext4:
  7955                           	opt stack 0
  7956  005B66                     _nibbleFromChar:
  7957                           	opt stack 25
  7958                           
  7959                           ; BSR set to: 0
  7960                           ;incstack = 0
  7961                           ;incstack = 0
  7962                           ;nibbleFromChar@c stored from wreg
  7963  005B66  CFE8 F060          	movff	wreg,nibbleFromChar@c
  7964                           
  7965                           ; BSR set to: 0
  7966                           ;hexutils.c: 21: if (c >= '0' && c <= '9') return c - '0';
  7967  005B6A  0E2F               	movlw	47
  7968  005B6C  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7969  005B6E  D006               	goto	l16874
  7970                           
  7971                           ; BSR set to: 0
  7972  005B70  0E3A               	movlw	58
  7973  005B72  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7974  005B74  D003               	goto	l16874
  7975                           
  7976                           ; BSR set to: 0
  7977  005B76  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7978  005B78  0FD0               	addlw	208
  7979  005B7A  D013               	goto	l1641
  7980  005B7C                     l16874:
  7981                           
  7982                           ; BSR set to: 0
  7983                           ;hexutils.c: 22: if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  7984  005B7C  0E60               	movlw	96
  7985  005B7E  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7986  005B80  D006               	goto	l16882
  7987                           
  7988                           ; BSR set to: 0
  7989  005B82  0E67               	movlw	103
  7990  005B84  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7991  005B86  D003               	goto	l16882
  7992                           
  7993                           ; BSR set to: 0
  7994  005B88  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7995  005B8A  0FA9               	addlw	169
  7996  005B8C  D00A               	goto	l1641
  7997  005B8E                     l16882:
  7998                           
  7999                           ; BSR set to: 0
  8000                           ;hexutils.c: 23: if (c >= 'A' && c <= 'F') return c - 'A' + 10;
  8001  005B8E  0E40               	movlw	64
  8002  005B90  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  8003  005B92  D006               	goto	l16890
  8004                           
  8005                           ; BSR set to: 0
  8006  005B94  0E47               	movlw	71
  8007  005B96  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  8008  005B98  D003               	goto	l16890
  8009                           
  8010                           ; BSR set to: 0
  8011  005B9A  5160               	movf	nibbleFromChar@c& (0+255),w,b
  8012  005B9C  0FC9               	addlw	201
  8013  005B9E  D001               	goto	l1641
  8014  005BA0                     l16890:
  8015                           
  8016                           ; BSR set to: 0
  8017                           ;hexutils.c: 24: return 255;
  8018  005BA0  0EFF               	movlw	255
  8019  005BA2                     l1641:
  8020                           
  8021                           ; BSR set to: 0
  8022  005BA2  0012               	return	
  8023  005BA4                     __end_of_nibbleFromChar:
  8024                           	opt stack 0
  8025                           tblptru	equ	0xFF8
  8026                           tblptrh	equ	0xFF7
  8027                           tblptrl	equ	0xFF6
  8028                           tablat	equ	0xFF5
  8029                           prodh	equ	0xFF4
  8030                           prodl	equ	0xFF3
  8031                           intcon	equ	0xFF2
  8032                           indf0	equ	0xFEF
  8033                           postinc0	equ	0xFEE
  8034                           fsr0h	equ	0xFEA
  8035                           fsr0l	equ	0xFE9
  8036                           wreg	equ	0xFE8
  8037                           indf1	equ	0xFE7
  8038                           postinc1	equ	0xFE6
  8039                           postdec1	equ	0xFE5
  8040                           fsr1h	equ	0xFE2
  8041                           fsr1l	equ	0xFE1
  8042                           indf2	equ	0xFDF
  8043                           postinc2	equ	0xFDE
  8044                           postdec2	equ	0xFDD
  8045                           plusw2	equ	0xFDB
  8046                           fsr2h	equ	0xFDA
  8047                           fsr2l	equ	0xFD9
  8048                           status	equ	0xFD8
  8049                           
  8050 ;; *************** function _receiveSendEventSLCAN *****************
  8051 ;; Defined at:
  8052 ;;		line 2285 in file "main.c"
  8053 ;; Parameters:    Size  Location     Type
  8054 ;;		None
  8055 ;; Auto vars:     Size  Location     Type
  8056 ;;  id              4   38[BANK0 ] unsigned long 
  8057 ;;  i               2   43[BANK0 ] int 
  8058 ;;  dlc             1   42[BANK0 ] unsigned char 
  8059 ;; Return value:  Size  Location     Type
  8060 ;;                  1    wreg      enum E15660
  8061 ;; Registers used:
  8062 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8063 ;; Tracked objects:
  8064 ;;		On entry : F/0
  8065 ;;		On exit  : 0/0
  8066 ;;		Unchanged: 0/0
  8067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8068 ;;      Params:         0       0       0       0       0       0       0
  8069 ;;      Locals:         0       7       0       0       0       0       0
  8070 ;;      Temps:          0       3       0       0       0       0       0
  8071 ;;      Totals:         0      10       0       0       0       0       0
  8072 ;;Total ram usage:       10 bytes
  8073 ;; Hardware stack levels used:    1
  8074 ;; Hardware stack levels required when called:    6
  8075 ;; This function calls:
  8076 ;;		_putsUSART
  8077 ;;		_WriteUSART
  8078 ;;		_strlen
  8079 ;;		_getCANFrame
  8080 ;;		_ultoa
  8081 ;;		_itoa
  8082 ;; This function is called by:
  8083 ;;		_doModeSLCAN
  8084 ;; This function uses a non-reentrant model
  8085 ;;
  8086                           
  8087                           	psect	text5
  8088  003744                     __ptext5:
  8089                           	opt stack 0
  8090  003744                     _receiveSendEventSLCAN:
  8091                           	opt stack 23
  8092                           
  8093                           ; BSR set to: 0
  8094                           ;main.c: 2286: int i;
  8095                           ;main.c: 2287: uint8_t dlc;
  8096                           ;main.c: 2288: uint32_t id;
  8097                           ;main.c: 2290: if (getCANFrame(&id, &dlc, vscpData)) {
  8098                           
  8099                           ; BSR set to: 0
  8100                           ;incstack = 0
  8101                           ;incstack = 0
  8102  003744  0E00               	movlw	high receiveSendEventSLCAN@dlc
  8103  003746  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
  8104  003748  0E8A               	movlw	low receiveSendEventSLCAN@dlc
  8105  00374A  6F6E               	movwf	?_getCANFrame& (0+255),b
  8106  00374C  0E01               	movlw	high _vscpData
  8107  00374E  0100               	movlb	0	; () banked
  8108  003750  6F71               	movwf	(?_getCANFrame+3)& (0+255),b
  8109  003752  0EE1               	movlw	low _vscpData
  8110  003754  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
  8111  003756  0E86               	movlw	receiveSendEventSLCAN@id& (0+255)
  8112  003758  ECB6  F026         	call	_getCANFrame
  8113  00375C  0900               	iorlw	0
  8114  00375E  E101 D0B0          	bz	l1124
  8115                           
  8116                           ; BSR set to: 0
  8117                           ;main.c: 2293: cntRxFrames++;
  8118  003762  0101               	movlb	1	; () banked
  8119  003764  2B0C               	incf	_cntRxFrames& (0+255),f,b
  8120  003766  0E00               	movlw	0
  8121  003768  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  8122  00376A  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  8123  00376C  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  8124                           
  8125                           ;main.c: 2294: cntRxBytes += dlc;
  8126  00376E  0100               	movlb	0	; () banked
  8127  003770  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8128  003772  0101               	movlb	1	; () banked
  8129  003774  2708               	addwf	_cntRxBytes& (0+255),f,b
  8130  003776  0E00               	movlw	0
  8131  003778  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  8132  00377A  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  8133  00377C  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  8134  00377E                     l1097:
  8135  00377E  A2AC               	btfss	4012,1,c	;volatile
  8136  003780  D7FE               	goto	l1097
  8137                           
  8138                           ;main.c: 2297: WriteUSART('T');
  8139  003782  0E54               	movlw	84
  8140  003784  EC36  F02F         	call	_WriteUSART
  8141                           
  8142                           ;main.c: 2299: ultoa(wrkbuf, id, 16);
  8143  003788  0E01               	movlw	high _wrkbuf
  8144  00378A  0100               	movlb	0	; () banked
  8145  00378C  6F77               	movwf	(?_ultoa+1)& (0+255),b
  8146  00378E  0E79               	movlw	low _wrkbuf
  8147  003790  6F76               	movwf	?_ultoa& (0+255),b
  8148  003792  C086  F078         	movff	receiveSendEventSLCAN@id,?_ultoa+2
  8149  003796  C087  F079         	movff	receiveSendEventSLCAN@id+1,?_ultoa+3
  8150  00379A  C088  F07A         	movff	receiveSendEventSLCAN@id+2,?_ultoa+4
  8151  00379E  C089  F07B         	movff	receiveSendEventSLCAN@id+3,?_ultoa+5
  8152  0037A2  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  8153  0037A4  0E10               	movlw	16
  8154  0037A6  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  8155  0037A8  EC2B  F023         	call	_ultoa	;wreg free
  8156                           
  8157                           ; BSR set to: 0
  8158                           ;main.c: 2301: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8159  0037AC  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8160  0037AE  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8161  0037B0                     l1102:
  8162                           
  8163                           ; BSR set to: 0
  8164  0037B0  A2AC               	btfss	4012,1,c	;volatile
  8165  0037B2  D7FE               	goto	l1102
  8166                           
  8167                           ; BSR set to: 0
  8168                           ;main.c: 2303: WriteUSART('0');
  8169  0037B4  0E30               	movlw	48
  8170  0037B6  EC36  F02F         	call	_WriteUSART
  8171                           
  8172                           ; BSR set to: 0
  8173  0037BA  D884               	call	PL96	;call to abstracted procedure
  8174  0037BC  B4D8               	btfsc	status,2,c
  8175  0037BE  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8176  0037C0  E3F7               	bnc	l1102
  8177                           
  8178                           ; BSR set to: 0
  8179                           ;main.c: 2304: }
  8180                           ;main.c: 2305: putsUSART(wrkbuf);
  8181  0037C2  0E01               	movlw	high _wrkbuf
  8182  0037C4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8183  0037C6  0E79               	movlw	low _wrkbuf
  8184  0037C8  6F61               	movwf	?_putsUSART& (0+255),b
  8185  0037CA  EC41  F02C         	call	_putsUSART	;wreg free
  8186                           
  8187                           ;main.c: 2308: itoa(wrkbuf, dlc, 16);
  8188  0037CE  0E01               	movlw	high _wrkbuf
  8189  0037D0  0100               	movlb	0	; () banked
  8190  0037D2  6F71               	movwf	(?_itoa+1)& (0+255),b
  8191  0037D4  0E79               	movlw	low _wrkbuf
  8192  0037D6  6F70               	movwf	?_itoa& (0+255),b
  8193  0037D8  C08A  F072         	movff	receiveSendEventSLCAN@dlc,?_itoa+2
  8194  0037DC  6B73               	clrf	(?_itoa+3)& (0+255),b
  8195  0037DE  6B75               	clrf	(?_itoa+5)& (0+255),b
  8196  0037E0  0E10               	movlw	16
  8197  0037E2  6F74               	movwf	(?_itoa+4)& (0+255),b
  8198  0037E4  EC2D  F02E         	call	_itoa	;wreg free
  8199  0037E8                     l1105:
  8200                           
  8201                           ; BSR set to: 0
  8202  0037E8  A2AC               	btfss	4012,1,c	;volatile
  8203  0037EA  D7FE               	goto	l1105
  8204                           
  8205                           ; BSR set to: 0
  8206                           ;main.c: 2310: WriteUSART(wrkbuf[0]);
  8207  0037EC  0101               	movlb	1	; () banked
  8208  0037EE  5179               	movf	_wrkbuf& (0+255),w,b
  8209  0037F0  EC36  F02F         	call	_WriteUSART
  8210                           
  8211                           ;main.c: 2313: for (i = 0; i < dlc; i++) {
  8212  0037F4  0100               	movlb	0	; () banked
  8213  0037F6  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8214  0037F8  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8215  0037FA  D02D               	goto	l16642
  8216  0037FC                     l16630:
  8217                           
  8218                           ; BSR set to: 0
  8219                           ;main.c: 2314: itoa(wrkbuf, vscpData[i], 16);
  8220  0037FC  0E01               	movlw	high _wrkbuf
  8221  0037FE  0100               	movlb	0	; () banked
  8222  003800  6F71               	movwf	(?_itoa+1)& (0+255),b
  8223  003802  0E79               	movlw	low _wrkbuf
  8224  003804  6F70               	movwf	?_itoa& (0+255),b
  8225  003806  0EE1               	movlw	low _vscpData
  8226  003808  258B               	addwf	receiveSendEventSLCAN@i& (0+255),w,b
  8227  00380A  6ED9               	movwf	fsr2l,c
  8228  00380C  0E01               	movlw	high _vscpData
  8229  00380E  218C               	addwfc	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8230  003810  6EDA               	movwf	fsr2h,c
  8231  003812  50DF               	movf	indf2,w,c
  8232  003814  6F72               	movwf	(?_itoa+2)& (0+255),b
  8233  003816  6B73               	clrf	(?_itoa+3)& (0+255),b
  8234  003818  6B75               	clrf	(?_itoa+5)& (0+255),b
  8235  00381A  0E10               	movlw	16
  8236  00381C  6F74               	movwf	(?_itoa+4)& (0+255),b
  8237  00381E  EC2D  F02E         	call	_itoa	;wreg free
  8238                           
  8239                           ; BSR set to: 0
  8240                           ;main.c: 2316: if (2 != strlen(wrkbuf)) {
  8241  003822  0E01               	movlw	high _wrkbuf
  8242  003824  0100               	movlb	0	; () banked
  8243  003826  6F61               	movwf	(?_strlen+1)& (0+255),b
  8244  003828  0E79               	movlw	low _wrkbuf
  8245  00382A  6F60               	movwf	?_strlen& (0+255),b
  8246  00382C  EC73  F02D         	call	_strlen	;wreg free
  8247  003830  5160               	movf	?_strlen& (0+255),w,b
  8248  003832  0A02               	xorlw	2
  8249  003834  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  8250  003836  E005               	bz	l16638
  8251  003838                     l1111:
  8252                           
  8253                           ; BSR set to: 0
  8254  003838  A2AC               	btfss	4012,1,c	;volatile
  8255  00383A  D7FE               	goto	l1111
  8256                           
  8257                           ; BSR set to: 0
  8258                           ;main.c: 2318: WriteUSART('0');
  8259  00383C  0E30               	movlw	48
  8260  00383E  EC36  F02F         	call	_WriteUSART
  8261  003842                     l16638:
  8262                           
  8263                           ;main.c: 2319: }
  8264                           ;main.c: 2321: putsUSART(wrkbuf);
  8265  003842  0E01               	movlw	high _wrkbuf
  8266  003844  0100               	movlb	0	; () banked
  8267  003846  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8268  003848  0E79               	movlw	low _wrkbuf
  8269  00384A  6F61               	movwf	?_putsUSART& (0+255),b
  8270  00384C  EC41  F02C         	call	_putsUSART	;wreg free
  8271  003850  0100               	movlb	0	; () banked
  8272  003852  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8273  003854  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8274  003856                     l16642:
  8275                           
  8276                           ; BSR set to: 0
  8277  003856  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8278  003858  6F83               	movwf	??_receiveSendEventSLCAN& (0+255),b
  8279  00385A  6B84               	clrf	(??_receiveSendEventSLCAN+1)& (0+255),b
  8280  00385C  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8281  00385E  0A80               	xorlw	128
  8282  003860  6F85               	movwf	(??_receiveSendEventSLCAN+2)& (0+255),b
  8283  003862  5183               	movf	??_receiveSendEventSLCAN& (0+255),w,b
  8284  003864  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8285  003866  5184               	movf	(??_receiveSendEventSLCAN+1)& (0+255),w,b
  8286  003868  0A80               	xorlw	128
  8287  00386A  5985               	subwfb	(??_receiveSendEventSLCAN+2)& (0+255),w,b
  8288  00386C  E3C7               	bnc	l16630
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;main.c: 2322: }
  8292                           ;main.c: 2325: if (nTimeStamp) {
  8293  00386E  5032               	movf	_nTimeStamp,w,c
  8294  003870  E023               	bz	l1121
  8295                           
  8296                           ; BSR set to: 0
  8297                           ;main.c: 2326: ultoa(wrkbuf, timer, 16);
  8298  003872  0E01               	movlw	high _wrkbuf
  8299  003874  0100               	movlb	0	; () banked
  8300  003876  6F77               	movwf	(?_ultoa+1)& (0+255),b
  8301  003878  0E79               	movlw	low _wrkbuf
  8302  00387A  6F76               	movwf	?_ultoa& (0+255),b
  8303  00387C  C11C  F078         	movff	_timer,?_ultoa+2	;volatile
  8304  003880  C11D  F079         	movff	_timer+1,?_ultoa+3	;volatile
  8305  003884  C11E  F07A         	movff	_timer+2,?_ultoa+4	;volatile
  8306  003888  C11F  F07B         	movff	_timer+3,?_ultoa+5	;volatile
  8307  00388C  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  8308  00388E  0E10               	movlw	16
  8309  003890  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  8310  003892  EC2B  F023         	call	_ultoa	;wreg free
  8311                           
  8312                           ; BSR set to: 0
  8313                           ;main.c: 2328: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8314  003896  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8315  003898  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8316  00389A                     l1118:
  8317                           
  8318                           ; BSR set to: 0
  8319  00389A  A2AC               	btfss	4012,1,c	;volatile
  8320  00389C  D7FE               	goto	l1118
  8321                           
  8322                           ; BSR set to: 0
  8323                           ;main.c: 2330: WriteUSART('0');
  8324  00389E  0E30               	movlw	48
  8325  0038A0  EC36  F02F         	call	_WriteUSART
  8326                           
  8327                           ; BSR set to: 0
  8328  0038A4  D80F               	call	PL96	;call to abstracted procedure
  8329  0038A6  B4D8               	btfsc	status,2,c
  8330  0038A8  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8331  0038AA  E3F7               	bnc	l1118
  8332                           
  8333                           ; BSR set to: 0
  8334                           ;main.c: 2331: }
  8335                           ;main.c: 2332: putsUSART(wrkbuf);
  8336  0038AC  0E01               	movlw	high _wrkbuf
  8337  0038AE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8338  0038B0  0E79               	movlw	low _wrkbuf
  8339  0038B2  6F61               	movwf	?_putsUSART& (0+255),b
  8340  0038B4  EC41  F02C         	call	_putsUSART	;wreg free
  8341  0038B8                     l1121:
  8342  0038B8  A2AC               	btfss	4012,1,c	;volatile
  8343  0038BA  D7FE               	goto	l1121
  8344                           
  8345                           ;main.c: 2336: WriteUSART(0x0d);
  8346  0038BC  0E0D               	movlw	13
  8347  0038BE  EC36  F02F         	call	_WriteUSART
  8348  0038C2                     l1124:
  8349  0038C2  0012               	return	
  8350  0038C4                     __end_of_receiveSendEventSLCAN:
  8351                           	opt stack 0
  8352  0038C4                     PL96:
  8353                           	opt stack 23
  8354  0038C4  0100               	movlb	0	; () banked
  8355  0038C6  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8356  0038C8  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8357  0038CA  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8358  0038CC  0A80               	xorlw	128
  8359  0038CE  0F80               	addlw	-128
  8360  0038D0  0CB8               	retlw	184
  8361  0038D2                     __end_ofPL96:
  8362                           	opt stack 0
  8363                           tblptru	equ	0xFF8
  8364                           tblptrh	equ	0xFF7
  8365                           tblptrl	equ	0xFF6
  8366                           tablat	equ	0xFF5
  8367                           prodh	equ	0xFF4
  8368                           prodl	equ	0xFF3
  8369                           intcon	equ	0xFF2
  8370                           indf0	equ	0xFEF
  8371                           postinc0	equ	0xFEE
  8372                           fsr0h	equ	0xFEA
  8373                           fsr0l	equ	0xFE9
  8374                           wreg	equ	0xFE8
  8375                           indf1	equ	0xFE7
  8376                           postinc1	equ	0xFE6
  8377                           postdec1	equ	0xFE5
  8378                           fsr1h	equ	0xFE2
  8379                           fsr1l	equ	0xFE1
  8380                           indf2	equ	0xFDF
  8381                           postinc2	equ	0xFDE
  8382                           postdec2	equ	0xFDD
  8383                           plusw2	equ	0xFDB
  8384                           fsr2h	equ	0xFDA
  8385                           fsr2l	equ	0xFD9
  8386                           status	equ	0xFD8
  8387                           
  8388 ;; *************** function _ultoa *****************
  8389 ;; Defined at:
  8390 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  8391 ;; Parameters:    Size  Location     Type
  8392 ;;  buf             2   22[BANK0 ] PTR unsigned char 
  8393 ;;		 -> wrkbuf(80), 
  8394 ;;  val             4   24[BANK0 ] unsigned long 
  8395 ;;  base            2   28[BANK0 ] int 
  8396 ;; Auto vars:     Size  Location     Type
  8397 ;;  v               4   30[BANK0 ] unsigned long 
  8398 ;;  c               1   34[BANK0 ] unsigned char 
  8399 ;; Return value:  Size  Location     Type
  8400 ;;                  2   22[BANK0 ] PTR unsigned char 
  8401 ;; Registers used:
  8402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8403 ;; Tracked objects:
  8404 ;;		On entry : F/0
  8405 ;;		On exit  : F/0
  8406 ;;		Unchanged: 0/0
  8407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8408 ;;      Params:         0       8       0       0       0       0       0
  8409 ;;      Locals:         0       5       0       0       0       0       0
  8410 ;;      Temps:          0       0       0       0       0       0       0
  8411 ;;      Totals:         0      13       0       0       0       0       0
  8412 ;;Total ram usage:       13 bytes
  8413 ;; Hardware stack levels used:    1
  8414 ;; Hardware stack levels required when called:    4
  8415 ;; This function calls:
  8416 ;;		___lldiv
  8417 ;;		___llmod
  8418 ;; This function is called by:
  8419 ;;		_receiveSendEventSLCAN
  8420 ;; This function uses a non-reentrant model
  8421 ;;
  8422                           
  8423                           	psect	text6
  8424  004656                     __ptext6:
  8425                           	opt stack 0
  8426  004656                     _ultoa:
  8427                           	opt stack 24
  8428                           
  8429                           ; BSR set to: 0
  8430                           
  8431                           ;incstack = 0
  8432                           ;incstack = 0
  8433  004656  C078  F07E         	movff	ultoa@val,ultoa@v
  8434  00465A  C079  F07F         	movff	ultoa@val+1,ultoa@v+1
  8435  00465E  C07A  F080         	movff	ultoa@val+2,ultoa@v+2
  8436  004662  C07B  F081         	movff	ultoa@val+3,ultoa@v+3
  8437  004666                     l16724:
  8438                           
  8439                           ; BSR set to: 0
  8440  004666  C07E  F060         	movff	ultoa@v,?___lldiv
  8441  00466A  C07F  F061         	movff	ultoa@v+1,?___lldiv+1
  8442  00466E  C080  F062         	movff	ultoa@v+2,?___lldiv+2
  8443  004672  C081  F063         	movff	ultoa@v+3,?___lldiv+3
  8444  004676  D858               	call	PL74	;call to abstracted procedure
  8445  004678  EC77  F02A         	call	___lldiv	;wreg free
  8446  00467C  C063  F081         	movff	?___lldiv+3,ultoa@v+3
  8447  004680  C062  F080         	movff	?___lldiv+2,ultoa@v+2
  8448  004684  C061  F07F         	movff	?___lldiv+1,ultoa@v+1
  8449  004688  C060  F07E         	movff	?___lldiv,ultoa@v
  8450                           
  8451                           ; BSR set to: 0
  8452  00468C  4B76               	infsnz	ultoa@buf& (0+255),f,b
  8453  00468E  2B77               	incf	(ultoa@buf+1)& (0+255),f,b
  8454                           
  8455                           ; BSR set to: 0
  8456  004690  5181               	movf	(ultoa@v+3)& (0+255),w,b
  8457  004692  117E               	iorwf	ultoa@v& (0+255),w,b
  8458  004694  117F               	iorwf	(ultoa@v+1)& (0+255),w,b
  8459  004696  1180               	iorwf	(ultoa@v+2)& (0+255),w,b
  8460  004698  E1E6               	bnz	l16724
  8461                           
  8462                           ; BSR set to: 0
  8463  00469A  C076  FFD9         	movff	ultoa@buf,fsr2l
  8464  00469E  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8465  0046A2  6ADF               	clrf	indf2,c
  8466                           
  8467                           ; BSR set to: 0
  8468  0046A4  0776               	decf	ultoa@buf& (0+255),f,b
  8469  0046A6  A0D8               	btfss	status,0,c
  8470  0046A8  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8471  0046AA                     l16734:
  8472                           
  8473                           ; BSR set to: 0
  8474  0046AA  C078  F06D         	movff	ultoa@val,?___llmod
  8475  0046AE  C079  F06E         	movff	ultoa@val+1,?___llmod+1
  8476  0046B2  C07A  F06F         	movff	ultoa@val+2,?___llmod+2
  8477  0046B6  C07B  F070         	movff	ultoa@val+3,?___llmod+3
  8478  0046BA  C07C  F071         	movff	ultoa@base,?___llmod+4
  8479  0046BE  C07D  F072         	movff	ultoa@base+1,?___llmod+5
  8480  0046C2  0E00               	movlw	0
  8481  0046C4  BF72               	btfsc	(?___llmod+5)& (0+255),7,b
  8482  0046C6  0EFF               	movlw	-1
  8483  0046C8  6F73               	movwf	(?___llmod+6)& (0+255),b
  8484  0046CA  6F74               	movwf	(?___llmod+7)& (0+255),b
  8485  0046CC  EC86  F02B         	call	___llmod	;wreg free
  8486  0046D0  516D               	movf	?___llmod& (0+255),w,b
  8487  0046D2  6F82               	movwf	ultoa@c& (0+255),b
  8488                           
  8489                           ; BSR set to: 0
  8490  0046D4  C078  F060         	movff	ultoa@val,?___lldiv
  8491  0046D8  C079  F061         	movff	ultoa@val+1,?___lldiv+1
  8492  0046DC  C07A  F062         	movff	ultoa@val+2,?___lldiv+2
  8493  0046E0  C07B  F063         	movff	ultoa@val+3,?___lldiv+3
  8494  0046E4  D821               	call	PL74	;call to abstracted procedure
  8495  0046E6  EC77  F02A         	call	___lldiv	;wreg free
  8496  0046EA  C063  F07B         	movff	?___lldiv+3,ultoa@val+3
  8497  0046EE  C062  F07A         	movff	?___lldiv+2,ultoa@val+2
  8498  0046F2  C061  F079         	movff	?___lldiv+1,ultoa@val+1
  8499  0046F6  C060  F078         	movff	?___lldiv,ultoa@val
  8500                           
  8501                           ; BSR set to: 0
  8502  0046FA  0E09               	movlw	9
  8503  0046FC  6582               	cpfsgt	ultoa@c& (0+255),b
  8504  0046FE  D002               	goto	l2501
  8505                           
  8506                           ; BSR set to: 0
  8507  004700  0E07               	movlw	7
  8508  004702  2782               	addwf	ultoa@c& (0+255),f,b
  8509  004704                     l2501:
  8510                           
  8511                           ; BSR set to: 0
  8512  004704  0E30               	movlw	48
  8513  004706  2782               	addwf	ultoa@c& (0+255),f,b
  8514                           
  8515                           ; BSR set to: 0
  8516  004708  C076  FFD9         	movff	ultoa@buf,fsr2l
  8517  00470C  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8518  004710  C082  FFDF         	movff	ultoa@c,indf2
  8519                           
  8520                           ; BSR set to: 0
  8521  004714  0776               	decf	ultoa@buf& (0+255),f,b
  8522  004716  A0D8               	btfss	status,0,c
  8523  004718  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8524                           
  8525                           ; BSR set to: 0
  8526  00471A  517B               	movf	(ultoa@val+3)& (0+255),w,b
  8527  00471C  1178               	iorwf	ultoa@val& (0+255),w,b
  8528  00471E  1179               	iorwf	(ultoa@val+1)& (0+255),w,b
  8529  004720  117A               	iorwf	(ultoa@val+2)& (0+255),w,b
  8530  004722  B4D8               	btfsc	status,2,c
  8531                           
  8532                           ; BSR set to: 0
  8533  004724  0012               	return	
  8534  004726  D7C1               	goto	l16734
  8535  004728                     __end_of_ultoa:
  8536                           	opt stack 0
  8537  004728                     PL74:
  8538                           	opt stack 24
  8539  004728  C07C  F064         	movff	ultoa@base,?___lldiv+4
  8540  00472C  C07D  F065         	movff	ultoa@base+1,?___lldiv+5
  8541  004730  0E00               	movlw	0
  8542  004732  BF65               	btfsc	(?___lldiv+5)& (0+255),7,b
  8543  004734  0EFF               	movlw	-1
  8544  004736  6F66               	movwf	(?___lldiv+6)& (0+255),b
  8545  004738  6F67               	movwf	(?___lldiv+7)& (0+255),b
  8546  00473A  0012               	return	
  8547  00473C                     __end_ofPL74:
  8548                           	opt stack 0
  8549                           tblptru	equ	0xFF8
  8550                           tblptrh	equ	0xFF7
  8551                           tblptrl	equ	0xFF6
  8552                           tablat	equ	0xFF5
  8553                           prodh	equ	0xFF4
  8554                           prodl	equ	0xFF3
  8555                           intcon	equ	0xFF2
  8556                           indf0	equ	0xFEF
  8557                           postinc0	equ	0xFEE
  8558                           fsr0h	equ	0xFEA
  8559                           fsr0l	equ	0xFE9
  8560                           wreg	equ	0xFE8
  8561                           indf1	equ	0xFE7
  8562                           postinc1	equ	0xFE6
  8563                           postdec1	equ	0xFE5
  8564                           fsr1h	equ	0xFE2
  8565                           fsr1l	equ	0xFE1
  8566                           indf2	equ	0xFDF
  8567                           postinc2	equ	0xFDE
  8568                           postdec2	equ	0xFDD
  8569                           plusw2	equ	0xFDB
  8570                           fsr2h	equ	0xFDA
  8571                           fsr2l	equ	0xFD9
  8572                           status	equ	0xFD8
  8573                           
  8574 ;; *************** function _doModeVscp *****************
  8575 ;; Defined at:
  8576 ;;		line 1249 in file "main.c"
  8577 ;; Parameters:    Size  Location     Type
  8578 ;;		None
  8579 ;; Auto vars:     Size  Location     Type
  8580 ;;  c               1   89[BANK0 ] unsigned char 
  8581 ;; Return value:  Size  Location     Type
  8582 ;;		None               void
  8583 ;; Registers used:
  8584 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8585 ;; Tracked objects:
  8586 ;;		On entry : 0/1
  8587 ;;		On exit  : 0/0
  8588 ;;		Unchanged: 0/0
  8589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8590 ;;      Params:         0       0       0       0       0       0       0
  8591 ;;      Locals:         0       1       0       0       0       0       0
  8592 ;;      Temps:          0       0       0       0       0       0       0
  8593 ;;      Totals:         0       1       0       0       0       0       0
  8594 ;;Total ram usage:        1 bytes
  8595 ;; Hardware stack levels used:    1
  8596 ;; Hardware stack levels required when called:    7
  8597 ;; This function calls:
  8598 ;;		_fifo_read
  8599 ;;		_ECANSetOperationMode
  8600 ;;		_receiveSendMultiEventCANAL
  8601 ;;		_receiveSendEventCANAL
  8602 ;;		_calcCRC
  8603 ;;		_sendVSCPDriverNack
  8604 ;;		_sendVSCPDriverAck
  8605 ;;		_receiveVSCPModeCanalMsg
  8606 ;;		_receiveVSCPModeMultiCanalMsg
  8607 ;;		_sendVSCPModeCapabilities
  8608 ;;		_sendVSCPDriverCommandReply
  8609 ;;		_sendVSCPDriverErrorFrame
  8610 ;; This function is called by:
  8611 ;;		_main
  8612 ;; This function uses a non-reentrant model
  8613 ;;
  8614                           
  8615                           	psect	text7
  8616  00322A                     __ptext7:
  8617                           	opt stack 0
  8618  00322A                     _doModeVscp:
  8619                           	opt stack 23
  8620                           
  8621                           ;main.c: 1250: uint8_t c;
  8622                           ;main.c: 1253: if ( caps.maxCanalFrames > 1 ) {
  8623                           
  8624                           ; BSR set to: 0
  8625                           ;incstack = 0
  8626                           ;incstack = 0
  8627  00322A  0101               	movlb	1	; () banked
  8628  00322C  EE21  F0EE         	lfsr	2,_caps+1
  8629  003230  0E01               	movlw	1
  8630  003232  64DF               	cpfsgt	indf2,c
  8631  003234  D003               	goto	l14808
  8632                           
  8633                           ; BSR set to: 1
  8634                           ;main.c: 1256: receiveSendMultiEventCANAL();
  8635  003236  EC69  F01C         	call	_receiveSendMultiEventCANAL	;wreg free
  8636                           
  8637                           ;main.c: 1257: }
  8638  00323A  D002               	goto	l14810
  8639  00323C                     l14808:
  8640                           
  8641                           ; BSR set to: 1
  8642                           ;main.c: 1258: else {
  8643                           ;main.c: 1261: receiveSendEventCANAL();
  8644  00323C  ECE4  F01D         	call	_receiveSendEventCANAL	;wreg free
  8645  003240                     l14810:
  8646                           
  8647                           ;main.c: 1262: }
  8648                           ;main.c: 1265: (INTCONbits.GIE = 0);
  8649  003240  9EF2               	bcf	intcon,7,c	;volatile
  8650                           
  8651                           ;main.c: 1267: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  8652  003242  0E01               	movlw	high _serialInputFifo
  8653  003244  0100               	movlb	0	; () banked
  8654  003246  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  8655  003248  0ED9               	movlw	low _serialInputFifo
  8656  00324A  6F60               	movwf	?_fifo_read& (0+255),b
  8657  00324C  0E00               	movlw	high doModeVscp@c
  8658  00324E  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  8659  003250  0EB9               	movlw	low doModeVscp@c
  8660  003252  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  8661  003254  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  8662  003256  0E01               	movlw	1
  8663  003258  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  8664  00325A  EC07  F024         	call	_fifo_read	;wreg free
  8665  00325E  0560               	decf	?_fifo_read& (0+255),w,b
  8666  003260  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  8667  003262  E001 D0BF          	bnz	l14958
  8668                           
  8669                           ; BSR set to: 0
  8670                           ;main.c: 1270: (INTCONbits.GIE = 1);
  8671  003266  8EF2               	bsf	intcon,7,c	;volatile
  8672                           
  8673                           ; BSR set to: 0
  8674                           ;main.c: 1273: if ( pos >= sizeof( cmdbuf ) ) {
  8675  003268  0E4F               	movlw	79
  8676  00326A  6433               	cpfsgt	_pos,c
  8677  00326C  D003               	goto	l722
  8678                           
  8679                           ; BSR set to: 0
  8680                           ;main.c: 1275: pos = 0;
  8681  00326E  6A33               	clrf	_pos,c
  8682                           
  8683                           ;main.c: 1276: bDLE = 0;
  8684  003270  6A2A               	clrf	_bDLE,c
  8685                           
  8686                           ;main.c: 1277: stateVscpDriver = 0;
  8687  003272  6A36               	clrf	_stateVscpDriver,c
  8688  003274                     l722:
  8689                           
  8690                           ; BSR set to: 0
  8691                           ;main.c: 1278: }
  8692                           ;main.c: 1280: if ( 0 == stateVscpDriver ) {
  8693  003274  6636               	tstfsz	_stateVscpDriver,c
  8694  003276  D00D               	goto	l14832
  8695                           
  8696                           ; BSR set to: 0
  8697                           ;main.c: 1282: if ( bDLE ) {
  8698  003278  502A               	movf	_bDLE,w,c
  8699  00327A  E008               	bz	l14828
  8700                           
  8701                           ; BSR set to: 0
  8702                           ;main.c: 1284: bDLE = 0;
  8703  00327C  6A2A               	clrf	_bDLE,c
  8704                           
  8705                           ; BSR set to: 0
  8706                           ;main.c: 1287: if ( 0x02 == c ) {
  8707  00327E  51B9               	movf	doModeVscp@c& (0+255),w,b
  8708  003280  0A02               	xorlw	2
  8709  003282  E12A               	bnz	l14868
  8710                           
  8711                           ; BSR set to: 0
  8712                           ;main.c: 1288: stateVscpDriver = 1;
  8713  003284  0E01               	movlw	1
  8714  003286  6E36               	movwf	_stateVscpDriver,c
  8715                           
  8716                           ; BSR set to: 0
  8717                           ;main.c: 1289: pos = 0;
  8718  003288  6A33               	clrf	_pos,c
  8719  00328A  D026               	goto	l14868
  8720  00328C                     l14828:
  8721                           
  8722                           ; BSR set to: 0
  8723                           ;main.c: 1292: else {
  8724                           ;main.c: 1293: bDLE = 1;
  8725  00328C  0E01               	movlw	1
  8726  00328E  6E2A               	movwf	_bDLE,c
  8727  003290  D0AA               	goto	l727
  8728  003292                     l14832:
  8729                           
  8730                           ; BSR set to: 0
  8731                           ;main.c: 1297: else if ( 1 == stateVscpDriver ) {
  8732  003292  0436               	decf	_stateVscpDriver,w,c
  8733  003294  E121               	bnz	l14868
  8734                           
  8735                           ; BSR set to: 0
  8736                           ;main.c: 1300: if ( bDLE ) {
  8737  003296  502A               	movf	_bDLE,w,c
  8738  003298  E01B               	bz	l14852
  8739                           
  8740                           ; BSR set to: 0
  8741                           ;main.c: 1303: bDLE = 0;
  8742  00329A  6A2A               	clrf	_bDLE,c
  8743                           
  8744                           ; BSR set to: 0
  8745                           ;main.c: 1306: if ( 0x03 == c ) {
  8746  00329C  51B9               	movf	doModeVscp@c& (0+255),w,b
  8747  00329E  0A03               	xorlw	3
  8748  0032A0  E103               	bnz	l14842
  8749                           
  8750                           ; BSR set to: 0
  8751                           ;main.c: 1307: stateVscpDriver = 2;
  8752  0032A2  0E02               	movlw	2
  8753  0032A4  6E36               	movwf	_stateVscpDriver,c
  8754                           
  8755                           ;main.c: 1308: }
  8756  0032A6  D018               	goto	l14868
  8757  0032A8                     l14842:
  8758                           
  8759                           ; BSR set to: 0
  8760                           ;main.c: 1310: else if (0x10 == c) {
  8761  0032A8  51B9               	movf	doModeVscp@c& (0+255),w,b
  8762  0032AA  0A10               	xorlw	16
  8763  0032AC  E115               	bnz	l14868
  8764  0032AE                     u19770:
  8765                           
  8766                           ; BSR set to: 0
  8767                           ;main.c: 1312: cmdbuf[ pos++ ] = c;
  8768  0032AE  0E29               	movlw	low _cmdbuf
  8769  0032B0  2433               	addwf	_pos,w,c
  8770  0032B2  6ED9               	movwf	fsr2l,c
  8771  0032B4  6ADA               	clrf	fsr2h,c
  8772  0032B6  0E01               	movlw	high _cmdbuf
  8773  0032B8  22DA               	addwfc	fsr2h,f,c
  8774  0032BA  0100               	movlb	0	; () banked
  8775  0032BC  C0B9  FFDF         	movff	doModeVscp@c,indf2
  8776                           
  8777                           ; BSR set to: 0
  8778  0032C0  2A33               	incf	_pos,f,c
  8779                           
  8780                           ; BSR set to: 0
  8781                           ;main.c: 1313: if ( pos >= sizeof( cmdbuf ) ) {
  8782  0032C2  0E4F               	movlw	79
  8783  0032C4  6433               	cpfsgt	_pos,c
  8784  0032C6  D08F               	goto	l727
  8785                           
  8786                           ; BSR set to: 0
  8787                           ;main.c: 1316: bDLE = 0;
  8788  0032C8  6A2A               	clrf	_bDLE,c
  8789                           
  8790                           ;main.c: 1317: pos = 0;
  8791  0032CA  6A33               	clrf	_pos,c
  8792                           
  8793                           ;main.c: 1318: stateVscpDriver = 0;
  8794  0032CC  6A36               	clrf	_stateVscpDriver,c
  8795  0032CE  D08B               	goto	l727
  8796  0032D0                     l14852:
  8797                           
  8798                           ; BSR set to: 0
  8799                           ;main.c: 1323: else {
  8800                           ;main.c: 1324: if (0x10 == c) {
  8801  0032D0  51B9               	movf	doModeVscp@c& (0+255),w,b
  8802  0032D2  0A10               	xorlw	16
  8803  0032D4  E0DB               	bz	l14828
  8804  0032D6  D7EB               	goto	u19770
  8805  0032D8                     l14868:
  8806                           
  8807                           ; BSR set to: 0
  8808                           ;main.c: 1340: }
  8809                           ;main.c: 1341: }
  8810                           ;main.c: 1342: }
  8811                           ;main.c: 1344: if (2 == stateVscpDriver) {
  8812  0032D8  5036               	movf	_stateVscpDriver,w,c
  8813  0032DA  0A02               	xorlw	2
  8814  0032DC  E001 D082          	bnz	l14958
  8815                           
  8816                           ; BSR set to: 0
  8817                           ;main.c: 1347: stateVscpDriver = 0;
  8818  0032E0  6A36               	clrf	_stateVscpDriver,c
  8819                           
  8820                           ; BSR set to: 0
  8821                           ;main.c: 1359: if (calcCRC(cmdbuf, pos)) {
  8822  0032E2  0E01               	movlw	high _cmdbuf
  8823  0032E4  0100               	movlb	0	; () banked
  8824  0032E6  6F6D               	movwf	(?_calcCRC+1)& (0+255),b
  8825  0032E8  0E29               	movlw	low _cmdbuf
  8826  0032EA  6F6C               	movwf	?_calcCRC& (0+255),b
  8827  0032EC  C033  F06E         	movff	_pos,?_calcCRC+2
  8828  0032F0  EC97  F02E         	call	_calcCRC	;wreg free
  8829  0032F4  0900               	iorlw	0
  8830  0032F6  E003               	bz	l740
  8831                           
  8832                           ; BSR set to: 0
  8833                           ;main.c: 1360: sendVSCPDriverNack();
  8834  0032F8  ECAE  F027         	call	_sendVSCPDriverNack	;wreg free
  8835  0032FC  D074               	goto	l727
  8836  0032FE                     l740:
  8837                           
  8838                           ; BSR set to: 0
  8839                           ;main.c: 1362: }
  8840                           ;main.c: 1365: if (0 ==
  8841                           ;main.c: 1366: cmdbuf[ 0 ]) {
  8842  0032FE  0101               	movlb	1	; () banked
  8843  003300  6729               	tstfsz	_cmdbuf& (0+255),b
  8844  003302  D003               	goto	l14880
  8845  003304                     l14878:
  8846                           
  8847                           ;main.c: 1367: sendVSCPDriverAck();
  8848  003304  EC5E  F027         	call	_sendVSCPDriverAck	;wreg free
  8849                           
  8850                           ;main.c: 1368: }
  8851  003308  D06B               	goto	l14954
  8852  00330A                     l14880:
  8853                           
  8854                           ; BSR set to: 1
  8855                           ;main.c: 1370: else if (1 ==
  8856                           ;main.c: 1371: cmdbuf[ 0 ]) {
  8857  00330A  0529               	decf	_cmdbuf& (0+255),w,b
  8858  00330C  E103               	bnz	l14884
  8859  00330E                     l14882:
  8860                           
  8861                           ;main.c: 1372: sendVSCPDriverNack();
  8862  00330E  ECAE  F027         	call	_sendVSCPDriverNack	;wreg free
  8863                           
  8864                           ;main.c: 1373: }
  8865  003312  D066               	goto	l14954
  8866  003314                     l14884:
  8867                           
  8868                           ; BSR set to: 1
  8869                           ;main.c: 1375: else if (2 ==
  8870                           ;main.c: 1376: cmdbuf[ 0 ]) {
  8871  003314  5129               	movf	_cmdbuf& (0+255),w,b
  8872  003316  0A02               	xorlw	2
  8873  003318  E105               	bnz	l14892
  8874                           
  8875                           ; BSR set to: 1
  8876                           ;main.c: 1377: if ( receiveVSCPModeCanalMsg() ) {
  8877  00331A  ECB6  F022         	call	_receiveVSCPModeCanalMsg	;wreg free
  8878  00331E  0900               	iorlw	0
  8879  003320  E1F1               	bnz	l14878
  8880  003322  D7F5               	goto	l14882
  8881  003324                     l14892:
  8882                           
  8883                           ; BSR set to: 1
  8884                           ;main.c: 1385: else if (6 ==
  8885                           ;main.c: 1386: cmdbuf[ 0 ]) {
  8886  003324  5129               	movf	_cmdbuf& (0+255),w,b
  8887  003326  0A06               	xorlw	6
  8888  003328  E103               	bnz	l14900
  8889                           
  8890                           ; BSR set to: 1
  8891                           ;main.c: 1387: if (receiveVSCPModeMultiCanalMsg()) {
  8892  00332A  EC6C  F02F         	call	_receiveVSCPModeMultiCanalMsg	;wreg free
  8893  00332E  D7F7               	goto	L5
  8894  003330                     l14900:
  8895                           
  8896                           ; BSR set to: 1
  8897                           ;main.c: 1395: else if (6 ==
  8898                           ;main.c: 1396: cmdbuf[ 0 ]) {
  8899  003330  5129               	movf	_cmdbuf& (0+255),w,b
  8900  003332  0A06               	xorlw	6
  8901  003334  E0EC               	bz	l14882
  8902                           
  8903                           ; BSR set to: 1
  8904                           ;main.c: 1400: else if (3 ==
  8905                           ;main.c: 1401: cmdbuf[ 0 ]) {
  8906  003336  5129               	movf	_cmdbuf& (0+255),w,b
  8907  003338  0A03               	xorlw	3
  8908  00333A  E0E9               	bz	l14882
  8909                           
  8910                           ; BSR set to: 1
  8911                           ;main.c: 1405: else if (4 ==
  8912                           ;main.c: 1406: cmdbuf[ 0 ]) {
  8913  00333C  5129               	movf	_cmdbuf& (0+255),w,b
  8914  00333E  0A04               	xorlw	4
  8915  003340  E0E6               	bz	l14882
  8916                           
  8917                           ; BSR set to: 1
  8918                           ;main.c: 1410: else if (8 ==
  8919                           ;main.c: 1411: cmdbuf[ 0 ]) {
  8920  003342  5129               	movf	_cmdbuf& (0+255),w,b
  8921  003344  0A08               	xorlw	8
  8922  003346  E107               	bnz	l14918
  8923                           
  8924                           ; BSR set to: 1
  8925                           ;main.c: 1412: caps.maxVscpFrames = cmdbuf[ 5 ];
  8926  003348  C12E  F1ED         	movff	_cmdbuf+5,_caps
  8927                           
  8928                           ;main.c: 1413: caps.maxCanalFrames = cmdbuf[ 5 + 1 ];
  8929  00334C  C12F  F1EE         	movff	_cmdbuf+6,_caps+1
  8930                           
  8931                           ; BSR set to: 1
  8932                           ;main.c: 1414: sendVSCPModeCapabilities();
  8933  003350  EC00  F026         	call	_sendVSCPModeCapabilities	;wreg free
  8934                           
  8935                           ;main.c: 1415: }
  8936  003354  D045               	goto	l14954
  8937  003356                     l14918:
  8938                           
  8939                           ; BSR set to: 1
  8940                           ;main.c: 1417: else if (255 ==
  8941                           ;main.c: 1418: cmdbuf[ 0 ]) {
  8942  003356  2929               	incf	_cmdbuf& (0+255),w,b
  8943  003358  E140               	bnz	l14952
  8944                           
  8945                           ; BSR set to: 1
  8946                           ;main.c: 1420: if (cmdbuf[ 5 ] ==
  8947                           ;main.c: 1421: 0) {
  8948  00335A  672E               	tstfsz	(_cmdbuf+5)& (0+255),b
  8949  00335C  D006               	goto	l14924
  8950                           
  8951                           ; BSR set to: 1
  8952                           ;main.c: 1422: sendVSCPDriverCommandReply(0, 0);
  8953  00335E  0E00               	movlw	0
  8954  003360  0100               	movlb	0	; () banked
  8955  003362  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8956  003364  EC9E  F023         	call	_sendVSCPDriverCommandReply
  8957                           
  8958                           ;main.c: 1423: }
  8959  003368  D03B               	goto	l14954
  8960  00336A                     l14924:
  8961                           
  8962                           ; BSR set to: 1
  8963                           ;main.c: 1425: else if (cmdbuf[ 5 ] ==
  8964                           ;main.c: 1426: 1) {
  8965  00336A  052E               	decf	(_cmdbuf+5)& (0+255),w,b
  8966  00336C  E109               	bnz	l14930
  8967                           
  8968                           ; BSR set to: 1
  8969                           ;main.c: 1427: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  8970  00336E  0E00               	movlw	0
  8971  003370  EC1E  F02F         	call	_ECANSetOperationMode
  8972                           
  8973                           ; BSR set to: 0
  8974                           ;main.c: 1428: sendVSCPDriverCommandReply(0, 1);
  8975  003374  0E01               	movlw	1
  8976  003376  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8977  003378  0E00               	movlw	0
  8978  00337A  EC9E  F023         	call	_sendVSCPDriverCommandReply
  8979                           
  8980                           ;main.c: 1429: }
  8981  00337E  D030               	goto	l14954
  8982  003380                     l14930:
  8983                           
  8984                           ; BSR set to: 1
  8985                           ;main.c: 1431: else if (cmdbuf[ 5 ] ==
  8986                           ;main.c: 1432: 2) {
  8987  003380  512E               	movf	(_cmdbuf+5)& (0+255),w,b
  8988  003382  0A02               	xorlw	2
  8989  003384  E109               	bnz	l14936
  8990                           
  8991                           ; BSR set to: 1
  8992                           ;main.c: 1433: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  8993  003386  0E40               	movlw	64
  8994  003388  EC1E  F02F         	call	_ECANSetOperationMode
  8995                           
  8996                           ; BSR set to: 0
  8997                           ;main.c: 1434: sendVSCPDriverCommandReply(0, 2);
  8998  00338C  0E02               	movlw	2
  8999  00338E  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9000  003390  0E00               	movlw	0
  9001  003392  EC9E  F023         	call	_sendVSCPDriverCommandReply
  9002                           
  9003                           ;main.c: 1435: }
  9004  003396  D024               	goto	l14954
  9005  003398                     l14936:
  9006                           
  9007                           ; BSR set to: 1
  9008                           ;main.c: 1437: else if (cmdbuf[ 5 ] ==
  9009                           ;main.c: 1438: 3) {
  9010  003398  512E               	movf	(_cmdbuf+5)& (0+255),w,b
  9011  00339A  0A03               	xorlw	3
  9012  00339C  E109               	bnz	l14942
  9013                           
  9014                           ; BSR set to: 1
  9015                           ;main.c: 1439: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  9016  00339E  0E60               	movlw	96
  9017  0033A0  EC1E  F02F         	call	_ECANSetOperationMode
  9018                           
  9019                           ; BSR set to: 0
  9020                           ;main.c: 1440: sendVSCPDriverCommandReply(0, 3);
  9021  0033A4  0E03               	movlw	3
  9022  0033A6  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9023  0033A8  0E00               	movlw	0
  9024  0033AA  EC9E  F023         	call	_sendVSCPDriverCommandReply
  9025                           
  9026                           ;main.c: 1441: }
  9027  0033AE  D018               	goto	l14954
  9028  0033B0                     l14942:
  9029                           
  9030                           ; BSR set to: 1
  9031                           ;main.c: 1443: else if (cmdbuf[ 5 ] ==
  9032                           ;main.c: 1444: 4) {
  9033  0033B0  512E               	movf	(_cmdbuf+5)& (0+255),w,b
  9034  0033B2  0A04               	xorlw	4
  9035  0033B4  E109               	bnz	l14948
  9036                           
  9037                           ; BSR set to: 1
  9038                           ;main.c: 1445: ECANSetOperationMode(0x20);
  9039  0033B6  0E20               	movlw	32
  9040  0033B8  EC1E  F02F         	call	_ECANSetOperationMode
  9041                           
  9042                           ; BSR set to: 0
  9043                           ;main.c: 1446: sendVSCPDriverCommandReply(0, 4);
  9044  0033BC  0E04               	movlw	4
  9045  0033BE  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9046  0033C0  0E00               	movlw	0
  9047  0033C2  EC9E  F023         	call	_sendVSCPDriverCommandReply
  9048                           
  9049                           ;main.c: 1447: }
  9050  0033C6  D00C               	goto	l14954
  9051  0033C8                     l14948:
  9052                           
  9053                           ; BSR set to: 1
  9054                           ;main.c: 1449: else if (cmdbuf[ 5 ] ==
  9055                           ;main.c: 1450: 5) {
  9056  0033C8  512E               	movf	(_cmdbuf+5)& (0+255),w,b
  9057  0033CA  0A05               	xorlw	5
  9058  0033CC  E109               	bnz	l14954
  9059                           
  9060                           ; BSR set to: 1
  9061                           ;main.c: 1451: sendVSCPDriverCommandReply(0, 0);
  9062  0033CE  0E00               	movlw	0
  9063  0033D0  0100               	movlb	0	; () banked
  9064  0033D2  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  9065  0033D4  EC9E  F023         	call	_sendVSCPDriverCommandReply
  9066  0033D8  D003               	goto	l14954
  9067  0033DA                     l14952:
  9068                           
  9069                           ; BSR set to: 1
  9070                           ;main.c: 1456: else {
  9071                           ;main.c: 1458: sendVSCPDriverErrorFrame(2);
  9072  0033DA  0E02               	movlw	2
  9073  0033DC  ECA1  F025         	call	_sendVSCPDriverErrorFrame
  9074  0033E0                     l14954:
  9075                           
  9076                           ;main.c: 1459: }
  9077                           ;main.c: 1462: pos = 0;
  9078  0033E0  6A33               	clrf	_pos,c
  9079                           
  9080                           ;main.c: 1463: stateVscpDriver = 0;
  9081  0033E2  6A36               	clrf	_stateVscpDriver,c
  9082  0033E4                     l14958:
  9083                           
  9084                           ;main.c: 1465: }
  9085                           ;main.c: 1467: }
  9086                           ;main.c: 1470: (INTCONbits.GIE = 1);
  9087  0033E4  8EF2               	bsf	intcon,7,c	;volatile
  9088  0033E6                     l727:
  9089  0033E6  0012               	return	
  9090  0033E8                     __end_of_doModeVscp:
  9091                           	opt stack 0
  9092                           tblptru	equ	0xFF8
  9093                           tblptrh	equ	0xFF7
  9094                           tblptrl	equ	0xFF6
  9095                           tablat	equ	0xFF5
  9096                           prodh	equ	0xFF4
  9097                           prodl	equ	0xFF3
  9098                           intcon	equ	0xFF2
  9099                           indf0	equ	0xFEF
  9100                           postinc0	equ	0xFEE
  9101                           fsr0h	equ	0xFEA
  9102                           fsr0l	equ	0xFE9
  9103                           wreg	equ	0xFE8
  9104                           indf1	equ	0xFE7
  9105                           postinc1	equ	0xFE6
  9106                           postdec1	equ	0xFE5
  9107                           fsr1h	equ	0xFE2
  9108                           fsr1l	equ	0xFE1
  9109                           indf2	equ	0xFDF
  9110                           postinc2	equ	0xFDE
  9111                           postdec2	equ	0xFDD
  9112                           plusw2	equ	0xFDB
  9113                           fsr2h	equ	0xFDA
  9114                           fsr2l	equ	0xFD9
  9115                           status	equ	0xFD8
  9116                           
  9117 ;; *************** function _sendVSCPDriverErrorFrame *****************
  9118 ;; Defined at:
  9119 ;;		line 1731 in file "main.c"
  9120 ;; Parameters:    Size  Location     Type
  9121 ;;  errorcode       1    wreg     unsigned char 
  9122 ;; Auto vars:     Size  Location     Type
  9123 ;;  errorcode       1   15[BANK0 ] unsigned char 
  9124 ;;  crc             1   16[BANK0 ] unsigned char 
  9125 ;; Return value:  Size  Location     Type
  9126 ;;		None               void
  9127 ;; Registers used:
  9128 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9129 ;; Tracked objects:
  9130 ;;		On entry : F/1
  9131 ;;		On exit  : 0/0
  9132 ;;		Unchanged: 0/0
  9133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9134 ;;      Params:         0       0       0       0       0       0       0
  9135 ;;      Locals:         0       2       0       0       0       0       0
  9136 ;;      Temps:          0       0       0       0       0       0       0
  9137 ;;      Totals:         0       2       0       0       0       0       0
  9138 ;;Total ram usage:        2 bytes
  9139 ;; Hardware stack levels used:    1
  9140 ;; Hardware stack levels required when called:    6
  9141 ;; This function calls:
  9142 ;;		_WriteUSART
  9143 ;;		_sendEscapedUartData
  9144 ;;		_crc8
  9145 ;; This function is called by:
  9146 ;;		_doModeVscp
  9147 ;; This function uses a non-reentrant model
  9148 ;;
  9149                           
  9150                           	psect	text8
  9151  004B42                     __ptext8:
  9152                           	opt stack 0
  9153  004B42                     _sendVSCPDriverErrorFrame:
  9154                           	opt stack 23
  9155                           
  9156                           ;incstack = 0
  9157                           ;incstack = 0
  9158                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
  9159  004B42  CFE8 F06F          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
  9160                           
  9161                           ; BSR set to: 1
  9162                           ;main.c: 1732: uint8_t crc = 0;
  9163  004B46  0100               	movlb	0	; () banked
  9164  004B48  6B70               	clrf	sendVSCPDriverErrorFrame@crc& (0+255),b
  9165  004B4A                     l845:
  9166  004B4A  A2AC               	btfss	4012,1,c	;volatile
  9167  004B4C  D7FE               	goto	l845
  9168                           
  9169                           ;main.c: 1736: WriteUSART(0x10);
  9170  004B4E  0E10               	movlw	16
  9171  004B50  EC36  F02F         	call	_WriteUSART
  9172  004B54                     l848:
  9173  004B54  A2AC               	btfss	4012,1,c	;volatile
  9174  004B56  D7FE               	goto	l848
  9175                           
  9176                           ;main.c: 1738: WriteUSART(0x02);
  9177  004B58  0E02               	movlw	2
  9178  004B5A  EC36  F02F         	call	_WriteUSART
  9179  004B5E                     l851:
  9180  004B5E  A2AC               	btfss	4012,1,c	;volatile
  9181  004B60  D7FE               	goto	l851
  9182                           
  9183                           ;main.c: 1742: WriteUSART(253);
  9184  004B62  0EFD               	movlw	253
  9185  004B64  EC36  F02F         	call	_WriteUSART
  9186                           
  9187                           ;main.c: 1743: crc8(&crc, 253);
  9188  004B68  0100               	movlb	0	; () banked
  9189  004B6A  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9190  004B6C  6F68               	movwf	(?_crc8+1)& (0+255),b
  9191  004B6E  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9192  004B70  6F67               	movwf	?_crc8& (0+255),b
  9193  004B72  0EFD               	movlw	253
  9194  004B74  6F69               	movwf	(?_crc8+2)& (0+255),b
  9195  004B76  EC49  F02E         	call	_crc8	;wreg free
  9196  004B7A                     l854:
  9197  004B7A  A2AC               	btfss	4012,1,c	;volatile
  9198  004B7C  D7FE               	goto	l854
  9199                           
  9200                           ;main.c: 1747: WriteUSART(0);
  9201  004B7E  0E00               	movlw	0
  9202  004B80  EC36  F02F         	call	_WriteUSART
  9203                           
  9204                           ;main.c: 1748: crc8(&crc, 0);
  9205  004B84  D836               	call	PL100	;call to abstracted procedure
  9206  004B86  EC49  F02E         	call	_crc8	;wreg free
  9207                           
  9208                           ; BSR set to: 0
  9209                           ;main.c: 1751: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9210  004B8A  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9211  004B8C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9212  004B8E  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9213  004B90  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9214  004B92  0101               	movlb	1	; () banked
  9215  004B94  512B               	movf	(_cmdbuf+2)& (0+255),w,b
  9216  004B96  ECB7  F02B         	call	_sendEscapedUartData
  9217  004B9A                     l857:
  9218  004B9A  A2AC               	btfss	4012,1,c	;volatile
  9219  004B9C  D7FE               	goto	l857
  9220                           
  9221                           ;main.c: 1755: WriteUSART(0);
  9222  004B9E  0E00               	movlw	0
  9223  004BA0  EC36  F02F         	call	_WriteUSART
  9224                           
  9225                           ;main.c: 1756: crc8(&crc, 0);
  9226  004BA4  D826               	call	PL100	;call to abstracted procedure
  9227  004BA6  EC49  F02E         	call	_crc8	;wreg free
  9228  004BAA                     l860:
  9229  004BAA  A2AC               	btfss	4012,1,c	;volatile
  9230  004BAC  D7FE               	goto	l860
  9231                           
  9232                           ;main.c: 1758: WriteUSART(1);
  9233  004BAE  0E01               	movlw	1
  9234  004BB0  EC36  F02F         	call	_WriteUSART
  9235                           
  9236                           ;main.c: 1759: crc8(&crc, 1);
  9237  004BB4  0100               	movlb	0	; () banked
  9238  004BB6  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9239  004BB8  6F68               	movwf	(?_crc8+1)& (0+255),b
  9240  004BBA  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9241  004BBC  6F67               	movwf	?_crc8& (0+255),b
  9242  004BBE  0E01               	movlw	1
  9243  004BC0  6F69               	movwf	(?_crc8+2)& (0+255),b
  9244  004BC2  EC49  F02E         	call	_crc8	;wreg free
  9245                           
  9246                           ; BSR set to: 0
  9247                           ;main.c: 1762: sendEscapedUartData(errorcode, &crc);
  9248  004BC6  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9249  004BC8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9250  004BCA  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9251  004BCC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9252  004BCE  516F               	movf	sendVSCPDriverErrorFrame@errorcode& (0+255),w,b
  9253  004BD0  ECB7  F02B         	call	_sendEscapedUartData
  9254                           
  9255                           ; BSR set to: 0
  9256                           ;main.c: 1765: sendEscapedUartData(crc, (0));
  9257  004BD4  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9258  004BD6  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9259  004BD8  5170               	movf	sendVSCPDriverErrorFrame@crc& (0+255),w,b
  9260  004BDA  ECB7  F02B         	call	_sendEscapedUartData
  9261  004BDE                     l863:
  9262  004BDE  A2AC               	btfss	4012,1,c	;volatile
  9263  004BE0  D7FE               	goto	l863
  9264                           
  9265                           ;main.c: 1769: WriteUSART(0x10);
  9266  004BE2  0E10               	movlw	16
  9267  004BE4  EC36  F02F         	call	_WriteUSART
  9268  004BE8                     l866:
  9269  004BE8  A2AC               	btfss	4012,1,c	;volatile
  9270  004BEA  D7FE               	goto	l866
  9271                           
  9272                           ;main.c: 1771: WriteUSART(0x03);
  9273  004BEC  0E03               	movlw	3
  9274  004BEE  EF36  F02F         	goto	_WriteUSART
  9275  004BF2                     __end_of_sendVSCPDriverErrorFrame:
  9276                           	opt stack 0
  9277  004BF2                     PL100:
  9278                           	opt stack 23
  9279  004BF2  0100               	movlb	0	; () banked
  9280  004BF4  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9281  004BF6  6F68               	movwf	(?_crc8+1)& (0+255),b
  9282  004BF8  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9283  004BFA  6F67               	movwf	?_crc8& (0+255),b
  9284  004BFC  6B69               	clrf	(?_crc8+2)& (0+255),b
  9285  004BFE  0C00               	retlw	0
  9286  004C00                     __end_ofPL100:
  9287                           	opt stack 0
  9288                           tblptru	equ	0xFF8
  9289                           tblptrh	equ	0xFF7
  9290                           tblptrl	equ	0xFF6
  9291                           tablat	equ	0xFF5
  9292                           prodh	equ	0xFF4
  9293                           prodl	equ	0xFF3
  9294                           intcon	equ	0xFF2
  9295                           indf0	equ	0xFEF
  9296                           postinc0	equ	0xFEE
  9297                           fsr0h	equ	0xFEA
  9298                           fsr0l	equ	0xFE9
  9299                           wreg	equ	0xFE8
  9300                           indf1	equ	0xFE7
  9301                           postinc1	equ	0xFE6
  9302                           postdec1	equ	0xFE5
  9303                           fsr1h	equ	0xFE2
  9304                           fsr1l	equ	0xFE1
  9305                           indf2	equ	0xFDF
  9306                           postinc2	equ	0xFDE
  9307                           postdec2	equ	0xFDD
  9308                           plusw2	equ	0xFDB
  9309                           fsr2h	equ	0xFDA
  9310                           fsr2l	equ	0xFD9
  9311                           status	equ	0xFD8
  9312                           
  9313 ;; *************** function _sendVSCPDriverCommandReply *****************
  9314 ;; Defined at:
  9315 ;;		line 1868 in file "main.c"
  9316 ;; Parameters:    Size  Location     Type
  9317 ;;  cmdReplyCode    1    wreg     unsigned char 
  9318 ;;  cmdCode         1   15[BANK0 ] unsigned char 
  9319 ;; Auto vars:     Size  Location     Type
  9320 ;;  cmdReplyCode    1   16[BANK0 ] unsigned char 
  9321 ;;  crc             1   17[BANK0 ] unsigned char 
  9322 ;; Return value:  Size  Location     Type
  9323 ;;		None               void
  9324 ;; Registers used:
  9325 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9326 ;; Tracked objects:
  9327 ;;		On entry : F/0
  9328 ;;		On exit  : 0/0
  9329 ;;		Unchanged: 0/0
  9330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9331 ;;      Params:         0       1       0       0       0       0       0
  9332 ;;      Locals:         0       2       0       0       0       0       0
  9333 ;;      Temps:          0       0       0       0       0       0       0
  9334 ;;      Totals:         0       3       0       0       0       0       0
  9335 ;;Total ram usage:        3 bytes
  9336 ;; Hardware stack levels used:    1
  9337 ;; Hardware stack levels required when called:    6
  9338 ;; This function calls:
  9339 ;;		_WriteUSART
  9340 ;;		_sendEscapedUartData
  9341 ;;		_crc8
  9342 ;; This function is called by:
  9343 ;;		_doModeVscp
  9344 ;; This function uses a non-reentrant model
  9345 ;;
  9346                           
  9347                           	psect	text9
  9348  00473C                     __ptext9:
  9349                           	opt stack 0
  9350  00473C                     _sendVSCPDriverCommandReply:
  9351                           	opt stack 23
  9352                           
  9353                           ;incstack = 0
  9354                           ;incstack = 0
  9355                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
  9356  00473C  CFE8 F070          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
  9357                           
  9358                           ; BSR set to: 0
  9359                           ;main.c: 1869: uint8_t crc = 0;
  9360  004740  6B71               	clrf	sendVSCPDriverCommandReply@crc& (0+255),b
  9361  004742                     l926:
  9362                           
  9363                           ; BSR set to: 0
  9364  004742  A2AC               	btfss	4012,1,c	;volatile
  9365  004744  D7FE               	goto	l926
  9366                           
  9367                           ; BSR set to: 0
  9368                           ;main.c: 1873: WriteUSART(0x10);
  9369  004746  0E10               	movlw	16
  9370  004748  EC36  F02F         	call	_WriteUSART
  9371  00474C                     l929:
  9372  00474C  A2AC               	btfss	4012,1,c	;volatile
  9373  00474E  D7FE               	goto	l929
  9374                           
  9375                           ;main.c: 1875: WriteUSART(0x02);
  9376  004750  0E02               	movlw	2
  9377  004752  EC36  F02F         	call	_WriteUSART
  9378  004756                     l932:
  9379  004756  A2AC               	btfss	4012,1,c	;volatile
  9380  004758  D7FE               	goto	l932
  9381                           
  9382                           ;main.c: 1879: WriteUSART(254);
  9383  00475A  0EFE               	movlw	254
  9384  00475C  EC36  F02F         	call	_WriteUSART
  9385                           
  9386                           ;main.c: 1880: crc8(&crc, 254);
  9387  004760  0100               	movlb	0	; () banked
  9388  004762  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9389  004764  6F68               	movwf	(?_crc8+1)& (0+255),b
  9390  004766  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9391  004768  6F67               	movwf	?_crc8& (0+255),b
  9392  00476A  0EFE               	movlw	254
  9393  00476C  6F69               	movwf	(?_crc8+2)& (0+255),b
  9394  00476E  EC49  F02E         	call	_crc8	;wreg free
  9395  004772                     l935:
  9396                           
  9397                           ; BSR set to: 0
  9398  004772  A2AC               	btfss	4012,1,c	;volatile
  9399  004774  D7FE               	goto	l935
  9400                           
  9401                           ; BSR set to: 0
  9402                           ;main.c: 1884: WriteUSART(0);
  9403  004776  0E00               	movlw	0
  9404  004778  EC36  F02F         	call	_WriteUSART
  9405                           
  9406                           ;main.c: 1885: crc8(&crc, 0);
  9407  00477C  D841               	call	PL88	;call to abstracted procedure
  9408  00477E  EC49  F02E         	call	_crc8	;wreg free
  9409                           
  9410                           ; BSR set to: 0
  9411                           ;main.c: 1888: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9412  004782  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9413  004784  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9414  004786  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9415  004788  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9416  00478A  0101               	movlb	1	; () banked
  9417  00478C  512B               	movf	(_cmdbuf+2)& (0+255),w,b
  9418  00478E  ECB7  F02B         	call	_sendEscapedUartData
  9419  004792                     l938:
  9420                           
  9421                           ; BSR set to: 0
  9422  004792  A2AC               	btfss	4012,1,c	;volatile
  9423  004794  D7FE               	goto	l938
  9424                           
  9425                           ; BSR set to: 0
  9426                           ;main.c: 1892: WriteUSART(0);
  9427  004796  0E00               	movlw	0
  9428  004798  EC36  F02F         	call	_WriteUSART
  9429                           
  9430                           ;main.c: 1893: crc8(&crc, 0);
  9431  00479C  D831               	call	PL88	;call to abstracted procedure
  9432  00479E  EC49  F02E         	call	_crc8	;wreg free
  9433  0047A2                     l941:
  9434                           
  9435                           ; BSR set to: 0
  9436  0047A2  A2AC               	btfss	4012,1,c	;volatile
  9437  0047A4  D7FE               	goto	l941
  9438                           
  9439                           ; BSR set to: 0
  9440                           ;main.c: 1895: WriteUSART(2);
  9441  0047A6  0E02               	movlw	2
  9442  0047A8  EC36  F02F         	call	_WriteUSART
  9443                           
  9444                           ;main.c: 1896: crc8(&crc, 2);
  9445  0047AC  0100               	movlb	0	; () banked
  9446  0047AE  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9447  0047B0  6F68               	movwf	(?_crc8+1)& (0+255),b
  9448  0047B2  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9449  0047B4  6F67               	movwf	?_crc8& (0+255),b
  9450  0047B6  0E02               	movlw	2
  9451  0047B8  6F69               	movwf	(?_crc8+2)& (0+255),b
  9452  0047BA  EC49  F02E         	call	_crc8	;wreg free
  9453  0047BE                     l944:
  9454                           
  9455                           ; BSR set to: 0
  9456  0047BE  A2AC               	btfss	4012,1,c	;volatile
  9457  0047C0  D7FE               	goto	l944
  9458                           
  9459                           ; BSR set to: 0
  9460                           ;main.c: 1900: sendEscapedUartData(cmdReplyCode, &crc);
  9461  0047C2  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9462  0047C4  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9463  0047C6  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9464  0047C8  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9465  0047CA  5170               	movf	sendVSCPDriverCommandReply@cmdReplyCode& (0+255),w,b
  9466  0047CC  ECB7  F02B         	call	_sendEscapedUartData
  9467  0047D0                     l947:
  9468                           
  9469                           ; BSR set to: 0
  9470  0047D0  A2AC               	btfss	4012,1,c	;volatile
  9471  0047D2  D7FE               	goto	l947
  9472                           
  9473                           ; BSR set to: 0
  9474                           ;main.c: 1904: sendEscapedUartData(cmdCode, &crc);
  9475  0047D4  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9476  0047D6  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9477  0047D8  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9478  0047DA  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9479  0047DC  516F               	movf	sendVSCPDriverCommandReply@cmdCode& (0+255),w,b
  9480  0047DE  ECB7  F02B         	call	_sendEscapedUartData
  9481                           
  9482                           ;main.c: 1907: sendEscapedUartData(crc, (0));
  9483  0047E2  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9484  0047E4  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9485  0047E6  5171               	movf	sendVSCPDriverCommandReply@crc& (0+255),w,b
  9486  0047E8  ECB7  F02B         	call	_sendEscapedUartData
  9487  0047EC                     l950:
  9488                           
  9489                           ; BSR set to: 0
  9490  0047EC  A2AC               	btfss	4012,1,c	;volatile
  9491  0047EE  D7FE               	goto	l950
  9492                           
  9493                           ; BSR set to: 0
  9494                           ;main.c: 1911: WriteUSART(0x10);
  9495  0047F0  0E10               	movlw	16
  9496  0047F2  EC36  F02F         	call	_WriteUSART
  9497  0047F6                     l953:
  9498  0047F6  A2AC               	btfss	4012,1,c	;volatile
  9499  0047F8  D7FE               	goto	l953
  9500                           
  9501                           ;main.c: 1913: WriteUSART(0x03);
  9502  0047FA  0E03               	movlw	3
  9503  0047FC  EF36  F02F         	goto	_WriteUSART
  9504  004800                     __end_of_sendVSCPDriverCommandReply:
  9505                           	opt stack 0
  9506  004800                     PL88:
  9507                           	opt stack 23
  9508  004800  0100               	movlb	0	; () banked
  9509  004802  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9510  004804  6F68               	movwf	(?_crc8+1)& (0+255),b
  9511  004806  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9512  004808  6F67               	movwf	?_crc8& (0+255),b
  9513  00480A  6B69               	clrf	(?_crc8+2)& (0+255),b
  9514  00480C  0C00               	retlw	0
  9515  00480E                     __end_ofPL88:
  9516                           	opt stack 0
  9517                           tblptru	equ	0xFF8
  9518                           tblptrh	equ	0xFF7
  9519                           tblptrl	equ	0xFF6
  9520                           tablat	equ	0xFF5
  9521                           prodh	equ	0xFF4
  9522                           prodl	equ	0xFF3
  9523                           intcon	equ	0xFF2
  9524                           indf0	equ	0xFEF
  9525                           postinc0	equ	0xFEE
  9526                           fsr0h	equ	0xFEA
  9527                           fsr0l	equ	0xFE9
  9528                           wreg	equ	0xFE8
  9529                           indf1	equ	0xFE7
  9530                           postinc1	equ	0xFE6
  9531                           postdec1	equ	0xFE5
  9532                           fsr1h	equ	0xFE2
  9533                           fsr1l	equ	0xFE1
  9534                           indf2	equ	0xFDF
  9535                           postinc2	equ	0xFDE
  9536                           postdec2	equ	0xFDD
  9537                           plusw2	equ	0xFDB
  9538                           fsr2h	equ	0xFDA
  9539                           fsr2l	equ	0xFD9
  9540                           status	equ	0xFD8
  9541                           
  9542 ;; *************** function _sendVSCPModeCapabilities *****************
  9543 ;; Defined at:
  9544 ;;		line 2237 in file "main.c"
  9545 ;; Parameters:    Size  Location     Type
  9546 ;;		None
  9547 ;; Auto vars:     Size  Location     Type
  9548 ;;  crc             1   15[BANK0 ] unsigned char 
  9549 ;; Return value:  Size  Location     Type
  9550 ;;                  1    wreg      enum E15660
  9551 ;; Registers used:
  9552 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9553 ;; Tracked objects:
  9554 ;;		On entry : F/1
  9555 ;;		On exit  : 0/0
  9556 ;;		Unchanged: 0/0
  9557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9558 ;;      Params:         0       0       0       0       0       0       0
  9559 ;;      Locals:         0       1       0       0       0       0       0
  9560 ;;      Temps:          0       0       0       0       0       0       0
  9561 ;;      Totals:         0       1       0       0       0       0       0
  9562 ;;Total ram usage:        1 bytes
  9563 ;; Hardware stack levels used:    1
  9564 ;; Hardware stack levels required when called:    6
  9565 ;; This function calls:
  9566 ;;		_WriteUSART
  9567 ;;		_sendEscapedUartData
  9568 ;;		_crc8
  9569 ;; This function is called by:
  9570 ;;		_doModeVscp
  9571 ;; This function uses a non-reentrant model
  9572 ;;
  9573                           
  9574                           	psect	text10
  9575  004C00                     __ptext10:
  9576                           	opt stack 0
  9577  004C00                     _sendVSCPModeCapabilities:
  9578                           	opt stack 23
  9579                           
  9580                           ; BSR set to: 1
  9581                           ;main.c: 2238: uint8_t crc = 0;
  9582                           
  9583                           ;incstack = 0
  9584                           ;incstack = 0
  9585  004C00  0100               	movlb	0	; () banked
  9586  004C02  6B6F               	clrf	sendVSCPModeCapabilities@crc& (0+255),b
  9587  004C04                     l1075:
  9588  004C04  A2AC               	btfss	4012,1,c	;volatile
  9589  004C06  D7FE               	goto	l1075
  9590                           
  9591                           ;main.c: 2242: WriteUSART(0x10);
  9592  004C08  0E10               	movlw	16
  9593  004C0A  EC36  F02F         	call	_WriteUSART
  9594  004C0E                     l1078:
  9595  004C0E  A2AC               	btfss	4012,1,c	;volatile
  9596  004C10  D7FE               	goto	l1078
  9597                           
  9598                           ;main.c: 2244: WriteUSART(0x02);
  9599  004C12  0E02               	movlw	2
  9600  004C14  EC36  F02F         	call	_WriteUSART
  9601  004C18                     l1081:
  9602  004C18  A2AC               	btfss	4012,1,c	;volatile
  9603  004C1A  D7FE               	goto	l1081
  9604                           
  9605                           ;main.c: 2248: WriteUSART(9);
  9606  004C1C  0E09               	movlw	9
  9607  004C1E  EC36  F02F         	call	_WriteUSART
  9608                           
  9609                           ;main.c: 2249: crc8(&crc, 9);
  9610  004C22  0100               	movlb	0	; () banked
  9611  004C24  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9612  004C26  6F68               	movwf	(?_crc8+1)& (0+255),b
  9613  004C28  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9614  004C2A  6F67               	movwf	?_crc8& (0+255),b
  9615  004C2C  0E09               	movlw	9
  9616  004C2E  6F69               	movwf	(?_crc8+2)& (0+255),b
  9617  004C30  EC49  F02E         	call	_crc8	;wreg free
  9618  004C34                     l1084:
  9619  004C34  A2AC               	btfss	4012,1,c	;volatile
  9620  004C36  D7FE               	goto	l1084
  9621                           
  9622                           ;main.c: 2253: WriteUSART(0);
  9623  004C38  0E00               	movlw	0
  9624  004C3A  EC36  F02F         	call	_WriteUSART
  9625                           
  9626                           ;main.c: 2254: crc8(&crc, 0);
  9627  004C3E  0100               	movlb	0	; () banked
  9628  004C40  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9629  004C42  6F68               	movwf	(?_crc8+1)& (0+255),b
  9630  004C44  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9631  004C46  6F67               	movwf	?_crc8& (0+255),b
  9632  004C48  0E00               	movlw	0
  9633  004C4A  6B69               	clrf	(?_crc8+2)& (0+255),b
  9634  004C4C  EC49  F02E         	call	_crc8	;wreg free
  9635                           
  9636                           ; BSR set to: 0
  9637                           ;main.c: 2257: sendEscapedUartData(sequencyno, &crc );
  9638  004C50  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9639  004C52  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9640  004C54  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9641  004C56  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9642  004C58  5035               	movf	_sequencyno,w,c
  9643  004C5A  ECB7  F02B         	call	_sendEscapedUartData
  9644                           
  9645                           ; BSR set to: 0
  9646                           ;main.c: 2258: sequencyno++;
  9647  004C5E  2A35               	incf	_sequencyno,f,c
  9648                           
  9649                           ; BSR set to: 0
  9650                           ;main.c: 2261: sendEscapedUartData( 0, &crc );
  9651  004C60  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9652  004C62  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9653  004C64  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9654  004C66  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9655  004C68  0E00               	movlw	0
  9656  004C6A  ECB7  F02B         	call	_sendEscapedUartData
  9657                           
  9658                           ; BSR set to: 0
  9659                           ;main.c: 2262: sendEscapedUartData( 2, &crc );
  9660  004C6E  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9661  004C70  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9662  004C72  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9663  004C74  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9664  004C76  0E02               	movlw	2
  9665  004C78  ECB7  F02B         	call	_sendEscapedUartData
  9666                           
  9667                           ; BSR set to: 0
  9668                           ;main.c: 2265: sendEscapedUartData( 1, &crc );
  9669  004C7C  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9670  004C7E  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9671  004C80  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9672  004C82  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9673  004C84  0E01               	movlw	1
  9674  004C86  ECB7  F02B         	call	_sendEscapedUartData
  9675                           
  9676                           ; BSR set to: 0
  9677                           ;main.c: 2266: sendEscapedUartData( 0, &crc );
  9678  004C8A  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9679  004C8C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9680  004C8E  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9681  004C90  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9682  004C92  0E00               	movlw	0
  9683  004C94  ECB7  F02B         	call	_sendEscapedUartData
  9684                           
  9685                           ; BSR set to: 0
  9686                           ;main.c: 2269: sendEscapedUartData(crc, (0));
  9687  004C98  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9688  004C9A  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9689  004C9C  516F               	movf	sendVSCPModeCapabilities@crc& (0+255),w,b
  9690  004C9E  ECB7  F02B         	call	_sendEscapedUartData
  9691  004CA2                     l1087:
  9692  004CA2  A2AC               	btfss	4012,1,c	;volatile
  9693  004CA4  D7FE               	goto	l1087
  9694                           
  9695                           ;main.c: 2273: WriteUSART(0x10);
  9696  004CA6  0E10               	movlw	16
  9697  004CA8  EC36  F02F         	call	_WriteUSART
  9698  004CAC                     l1090:
  9699  004CAC  A2AC               	btfss	4012,1,c	;volatile
  9700  004CAE  D7FE               	goto	l1090
  9701                           
  9702                           ;main.c: 2275: WriteUSART(0x03);
  9703  004CB0  0E03               	movlw	3
  9704  004CB2  EF36  F02F         	goto	_WriteUSART
  9705  004CB6                     __end_of_sendVSCPModeCapabilities:
  9706                           	opt stack 0
  9707                           tblptru	equ	0xFF8
  9708                           tblptrh	equ	0xFF7
  9709                           tblptrl	equ	0xFF6
  9710                           tablat	equ	0xFF5
  9711                           prodh	equ	0xFF4
  9712                           prodl	equ	0xFF3
  9713                           intcon	equ	0xFF2
  9714                           indf0	equ	0xFEF
  9715                           postinc0	equ	0xFEE
  9716                           fsr0h	equ	0xFEA
  9717                           fsr0l	equ	0xFE9
  9718                           wreg	equ	0xFE8
  9719                           indf1	equ	0xFE7
  9720                           postinc1	equ	0xFE6
  9721                           postdec1	equ	0xFE5
  9722                           fsr1h	equ	0xFE2
  9723                           fsr1l	equ	0xFE1
  9724                           indf2	equ	0xFDF
  9725                           postinc2	equ	0xFDE
  9726                           postdec2	equ	0xFDD
  9727                           plusw2	equ	0xFDB
  9728                           fsr2h	equ	0xFDA
  9729                           fsr2l	equ	0xFD9
  9730                           status	equ	0xFD8
  9731                           
  9732 ;; *************** function _receiveVSCPModeMultiCanalMsg *****************
  9733 ;; Defined at:
  9734 ;;		line 2371 in file "main.c"
  9735 ;; Parameters:    Size  Location     Type
  9736 ;;		None
  9737 ;; Auto vars:     Size  Location     Type
  9738 ;;		None
  9739 ;; Return value:  Size  Location     Type
  9740 ;;                  1    wreg      enum E15660
  9741 ;; Registers used:
  9742 ;;		wreg
  9743 ;; Tracked objects:
  9744 ;;		On entry : F/1
  9745 ;;		On exit  : F/1
  9746 ;;		Unchanged: F/0
  9747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9748 ;;      Params:         0       0       0       0       0       0       0
  9749 ;;      Locals:         0       0       0       0       0       0       0
  9750 ;;      Temps:          0       0       0       0       0       0       0
  9751 ;;      Totals:         0       0       0       0       0       0       0
  9752 ;;Total ram usage:        0 bytes
  9753 ;; Hardware stack levels used:    1
  9754 ;; Hardware stack levels required when called:    3
  9755 ;; This function calls:
  9756 ;;		Nothing
  9757 ;; This function is called by:
  9758 ;;		_doModeVscp
  9759 ;; This function uses a non-reentrant model
  9760 ;;
  9761                           
  9762                           	psect	text11
  9763  005ED8                     __ptext11:
  9764                           	opt stack 0
  9765  005ED8                     _receiveVSCPModeMultiCanalMsg:
  9766                           	opt stack 26
  9767                           
  9768                           ; BSR set to: 1
  9769                           
  9770                           ; BSR set to: 1
  9771                           ;main.c: 2373: return 0;
  9772                           
  9773                           ;incstack = 0
  9774                           ;incstack = 0
  9775  005ED8  0C00               	retlw	0
  9776  005EDA                     __end_of_receiveVSCPModeMultiCanalMsg:
  9777                           	opt stack 0
  9778                           tblptru	equ	0xFF8
  9779                           tblptrh	equ	0xFF7
  9780                           tblptrl	equ	0xFF6
  9781                           tablat	equ	0xFF5
  9782                           prodh	equ	0xFF4
  9783                           prodl	equ	0xFF3
  9784                           intcon	equ	0xFF2
  9785                           indf0	equ	0xFEF
  9786                           postinc0	equ	0xFEE
  9787                           fsr0h	equ	0xFEA
  9788                           fsr0l	equ	0xFE9
  9789                           wreg	equ	0xFE8
  9790                           indf1	equ	0xFE7
  9791                           postinc1	equ	0xFE6
  9792                           postdec1	equ	0xFE5
  9793                           fsr1h	equ	0xFE2
  9794                           fsr1l	equ	0xFE1
  9795                           indf2	equ	0xFDF
  9796                           postinc2	equ	0xFDE
  9797                           postdec2	equ	0xFDD
  9798                           plusw2	equ	0xFDB
  9799                           fsr2h	equ	0xFDA
  9800                           fsr2l	equ	0xFD9
  9801                           status	equ	0xFD8
  9802                           
  9803 ;; *************** function _receiveVSCPModeCanalMsg *****************
  9804 ;; Defined at:
  9805 ;;		line 2347 in file "main.c"
  9806 ;; Parameters:    Size  Location     Type
  9807 ;;		None
  9808 ;; Auto vars:     Size  Location     Type
  9809 ;;  data            8   76[BANK0 ] unsigned char [8]
  9810 ;;  id              4   84[BANK0 ] unsigned long 
  9811 ;;  dlc             1   88[BANK0 ] unsigned char 
  9812 ;; Return value:  Size  Location     Type
  9813 ;;                  1    wreg      enum E15660
  9814 ;; Registers used:
  9815 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9816 ;; Tracked objects:
  9817 ;;		On entry : F/1
  9818 ;;		On exit  : E/0
  9819 ;;		Unchanged: 0/0
  9820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9821 ;;      Params:         0       0       0       0       0       0       0
  9822 ;;      Locals:         0      13       0       0       0       0       0
  9823 ;;      Temps:          0      20       0       0       0       0       0
  9824 ;;      Totals:         0      33       0       0       0       0       0
  9825 ;;Total ram usage:       33 bytes
  9826 ;; Hardware stack levels used:    1
  9827 ;; Hardware stack levels required when called:    6
  9828 ;; This function calls:
  9829 ;;		_memcpy
  9830 ;;		_sendCANFrame
  9831 ;; This function is called by:
  9832 ;;		_doModeVscp
  9833 ;; This function uses a non-reentrant model
  9834 ;;
  9835                           
  9836                           	psect	text12
  9837  00456C                     __ptext12:
  9838                           	opt stack 0
  9839  00456C                     _receiveVSCPModeCanalMsg:
  9840                           	opt stack 23
  9841                           
  9842                           ; BSR set to: 1
  9843                           ;main.c: 2348: uint32_t id;
  9844                           ;main.c: 2349: uint8_t dlc;
  9845                           ;main.c: 2350: uint8_t data[8];
  9846                           ;main.c: 2352: id = ((uint32_t) cmdbuf[5] << 26) |
  9847                           ;main.c: 2353: ((uint32_t) cmdbuf[5 + 1] << 16) |
  9848                           ;main.c: 2354: ((uint32_t) cmdbuf[5 + 2] << 8) |
  9849                           ;main.c: 2355: cmdbuf[5 + 3];
  9850                           
  9851                           ; BSR set to: 1
  9852                           ;incstack = 0
  9853                           ;incstack = 0
  9854  00456C  C130  F098         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
  9855  004570  0100               	movlb	0	; () banked
  9856  004572  6B99               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9857  004574  6B9A               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
  9858  004576  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
  9859  004578  C09A  F09B         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
  9860  00457C  C099  F09A         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
  9861  004580  C098  F099         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
  9862  004584  6B98               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
  9863  004586  C12F  F09C         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
  9864  00458A  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9865  00458C  6B9E               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
  9866  00458E  6B9F               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
  9867  004590  C09D  F09F         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
  9868  004594  C09C  F09E         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
  9869  004598  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9870  00459A  6B9C               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
  9871  00459C  C12E  F0A0         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
  9872  0045A0  6BA1               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
  9873  0045A2  6BA2               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
  9874  0045A4  6BA3               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
  9875  0045A6  0E1A               	movlw	26
  9876  0045A8                     u22375:
  9877  0045A8  90D8               	bcf	status,0,c
  9878  0045AA  37A0               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
  9879  0045AC  37A1               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
  9880  0045AE  37A2               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
  9881  0045B0  37A3               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
  9882  0045B2  2EE8               	decfsz	wreg,f,c
  9883  0045B4  D7F9               	goto	u22375
  9884  0045B6  519C               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
  9885  0045B8  11A0               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
  9886  0045BA  6FA4               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
  9887  0045BC  519D               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
  9888  0045BE  11A1               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
  9889  0045C0  6FA5               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
  9890  0045C2  519E               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
  9891  0045C4  11A2               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
  9892  0045C6  6FA6               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
  9893  0045C8  519F               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
  9894  0045CA  11A3               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
  9895  0045CC  6FA7               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
  9896  0045CE  5198               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
  9897  0045D0  11A4               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
  9898  0045D2  6FA8               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
  9899  0045D4  5199               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
  9900  0045D6  11A5               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
  9901  0045D8  6FA9               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
  9902  0045DA  519A               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
  9903  0045DC  11A6               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
  9904  0045DE  6FAA               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
  9905  0045E0  519B               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
  9906  0045E2  11A7               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
  9907  0045E4  6FAB               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
  9908  0045E6  0101               	movlb	1	; () banked
  9909  0045E8  5131               	movf	(_cmdbuf+8)& (0+255),w,b
  9910  0045EA  0100               	movlb	0	; () banked
  9911  0045EC  11A8               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
  9912  0045EE  6FB4               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
  9913  0045F0  51A9               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
  9914  0045F2  6FB5               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
  9915  0045F4  51AA               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
  9916  0045F6  6FB6               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
  9917  0045F8  51AB               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
  9918  0045FA  6FB7               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
  9919                           
  9920                           ;main.c: 2356: dlc = ( cmdbuf[4] - 4 ) & 0x07;
  9921  0045FC  0101               	movlb	1	; () banked
  9922  0045FE  512D               	movf	(_cmdbuf+4)& (0+255),w,b
  9923  004600  0FFC               	addlw	252
  9924  004602  0B07               	andlw	7
  9925  004604  0100               	movlb	0	; () banked
  9926  004606  6FB8               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9927                           
  9928                           ; BSR set to: 0
  9929                           ;main.c: 2357: if ( dlc > 8 ) {
  9930  004608  0E08               	movlw	8
  9931  00460A  65B8               	cpfsgt	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9932  00460C  D002               	goto	l16498
  9933                           
  9934                           ; BSR set to: 0
  9935                           ;main.c: 2358: return 0;
  9936  00460E  0E00               	movlw	0
  9937  004610  D021               	goto	l1128
  9938  004612                     l16498:
  9939                           
  9940                           ; BSR set to: 0
  9941                           ;main.c: 2359: }
  9942                           ;main.c: 2360: memcpy( data, cmdbuf + 5 + 4, dlc );
  9943  004612  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9944  004614  6F61               	movwf	(?_memcpy+1)& (0+255),b
  9945  004616  0EAC               	movlw	low receiveVSCPModeCanalMsg@data
  9946  004618  6F60               	movwf	?_memcpy& (0+255),b
  9947  00461A  0E32               	movlw	low (_cmdbuf+9)
  9948  00461C  6F98               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
  9949  00461E  0E01               	movlw	high (_cmdbuf+9)
  9950  004620  6F99               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9951  004622  C098  F062         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
  9952  004626  C099  F063         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
  9953  00462A  C0B8  F064         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
  9954  00462E  6B65               	clrf	(?_memcpy+5)& (0+255),b
  9955  004630  EC52  F02D         	call	_memcpy	;wreg free
  9956                           
  9957                           ; BSR set to: 0
  9958                           ;main.c: 2362: return sendCANFrame(id, dlc, data);
  9959  004634  C0B4  F091         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
  9960  004638  C0B5  F092         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
  9961  00463C  C0B6  F093         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
  9962  004640  C0B7  F094         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
  9963  004644  C0B8  F095         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
  9964  004648  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9965  00464A  6F97               	movwf	(?_sendCANFrame+6)& (0+255),b
  9966  00464C  0EAC               	movlw	low receiveVSCPModeCanalMsg@data
  9967  00464E  6F96               	movwf	(?_sendCANFrame+5)& (0+255),b
  9968  004650  EC10  F02E         	call	_sendCANFrame	;wreg free
  9969  004654                     l1128:
  9970  004654  0012               	return	
  9971  004656                     __end_of_receiveVSCPModeCanalMsg:
  9972                           	opt stack 0
  9973                           tblptru	equ	0xFF8
  9974                           tblptrh	equ	0xFF7
  9975                           tblptrl	equ	0xFF6
  9976                           tablat	equ	0xFF5
  9977                           prodh	equ	0xFF4
  9978                           prodl	equ	0xFF3
  9979                           intcon	equ	0xFF2
  9980                           indf0	equ	0xFEF
  9981                           postinc0	equ	0xFEE
  9982                           fsr0h	equ	0xFEA
  9983                           fsr0l	equ	0xFE9
  9984                           wreg	equ	0xFE8
  9985                           indf1	equ	0xFE7
  9986                           postinc1	equ	0xFE6
  9987                           postdec1	equ	0xFE5
  9988                           fsr1h	equ	0xFE2
  9989                           fsr1l	equ	0xFE1
  9990                           indf2	equ	0xFDF
  9991                           postinc2	equ	0xFDE
  9992                           postdec2	equ	0xFDD
  9993                           plusw2	equ	0xFDB
  9994                           fsr2h	equ	0xFDA
  9995                           fsr2l	equ	0xFD9
  9996                           status	equ	0xFD8
  9997                           
  9998 ;; *************** function _memcpy *****************
  9999 ;; Defined at:
 10000 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
 10001 ;; Parameters:    Size  Location     Type
 10002 ;;  d1              2    0[BANK0 ] PTR void 
 10003 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 10004 ;;  s1              2    2[BANK0 ] PTR const void 
 10005 ;;		 -> vscpData(8), cmdbuf(80), 
 10006 ;;  n               2    4[BANK0 ] unsigned int 
 10007 ;; Auto vars:     Size  Location     Type
 10008 ;;  s               2    8[BANK0 ] PTR const unsigned char 
 10009 ;;		 -> vscpData(8), cmdbuf(80), 
 10010 ;;  d               2    6[BANK0 ] PTR unsigned char 
 10011 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 10012 ;; Return value:  Size  Location     Type
 10013 ;;                  2    0[BANK0 ] PTR void 
 10014 ;; Registers used:
 10015 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10016 ;; Tracked objects:
 10017 ;;		On entry : F/0
 10018 ;;		On exit  : F/0
 10019 ;;		Unchanged: 0/0
 10020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10021 ;;      Params:         0       6       0       0       0       0       0
 10022 ;;      Locals:         0       4       0       0       0       0       0
 10023 ;;      Temps:          0       0       0       0       0       0       0
 10024 ;;      Totals:         0      10       0       0       0       0       0
 10025 ;;Total ram usage:       10 bytes
 10026 ;; Hardware stack levels used:    1
 10027 ;; Hardware stack levels required when called:    3
 10028 ;; This function calls:
 10029 ;;		Nothing
 10030 ;; This function is called by:
 10031 ;;		_doModeSLCAN
 10032 ;;		_receiveVSCPModeCanalMsg
 10033 ;; This function uses a non-reentrant model
 10034 ;;
 10035                           
 10036                           	psect	text13
 10037  005AA4                     __ptext13:
 10038                           	opt stack 0
 10039  005AA4                     _memcpy:
 10040                           	opt stack 26
 10041                           
 10042                           ; BSR set to: 0
 10043                           
 10044                           ;incstack = 0
 10045                           ;incstack = 0
 10046  005AA4  C062  F068         	movff	memcpy@s1,memcpy@s
 10047  005AA8  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
 10048  005AAC  C060  F066         	movff	memcpy@d1,memcpy@d
 10049  005AB0  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
 10050  005AB4  D00E               	goto	l13308
 10051  005AB6                     l13302:
 10052                           
 10053                           ; BSR set to: 0
 10054  005AB6  C068  FFD9         	movff	memcpy@s,fsr2l
 10055  005ABA  C069  FFDA         	movff	memcpy@s+1,fsr2h
 10056  005ABE  C066  FFE1         	movff	memcpy@d,fsr1l
 10057  005AC2  C067  FFE2         	movff	memcpy@d+1,fsr1h
 10058  005AC6  CFDF FFE7          	movff	indf2,indf1
 10059                           
 10060                           ; BSR set to: 0
 10061  005ACA  4B68               	infsnz	memcpy@s& (0+255),f,b
 10062  005ACC  2B69               	incf	(memcpy@s+1)& (0+255),f,b
 10063                           
 10064                           ; BSR set to: 0
 10065  005ACE  4B66               	infsnz	memcpy@d& (0+255),f,b
 10066  005AD0  2B67               	incf	(memcpy@d+1)& (0+255),f,b
 10067  005AD2                     l13308:
 10068                           
 10069                           ; BSR set to: 0
 10070  005AD2  0764               	decf	memcpy@n& (0+255),f,b
 10071  005AD4  A0D8               	btfss	status,0,c
 10072  005AD6  0765               	decf	(memcpy@n+1)& (0+255),f,b
 10073  005AD8  0100               	movlb	0	; () banked
 10074  005ADA  2964               	incf	memcpy@n& (0+255),w,b
 10075  005ADC  B4D8               	btfsc	status,2,c
 10076  005ADE  2965               	incf	(memcpy@n+1)& (0+255),w,b
 10077  005AE0  B4D8               	btfsc	status,2,c
 10078                           
 10079                           ; BSR set to: 0
 10080  005AE2  0012               	return	
 10081  005AE4  D7E8               	goto	l13302
 10082  005AE6                     __end_of_memcpy:
 10083                           	opt stack 0
 10084                           tblptru	equ	0xFF8
 10085                           tblptrh	equ	0xFF7
 10086                           tblptrl	equ	0xFF6
 10087                           tablat	equ	0xFF5
 10088                           prodh	equ	0xFF4
 10089                           prodl	equ	0xFF3
 10090                           intcon	equ	0xFF2
 10091                           indf0	equ	0xFEF
 10092                           postinc0	equ	0xFEE
 10093                           fsr0h	equ	0xFEA
 10094                           fsr0l	equ	0xFE9
 10095                           wreg	equ	0xFE8
 10096                           indf1	equ	0xFE7
 10097                           postinc1	equ	0xFE6
 10098                           postdec1	equ	0xFE5
 10099                           fsr1h	equ	0xFE2
 10100                           fsr1l	equ	0xFE1
 10101                           indf2	equ	0xFDF
 10102                           postinc2	equ	0xFDE
 10103                           postdec2	equ	0xFDD
 10104                           plusw2	equ	0xFDB
 10105                           fsr2h	equ	0xFDA
 10106                           fsr2l	equ	0xFD9
 10107                           status	equ	0xFD8
 10108                           
 10109 ;; *************** function _sendVSCPDriverAck *****************
 10110 ;; Defined at:
 10111 ;;		line 1779 in file "main.c"
 10112 ;; Parameters:    Size  Location     Type
 10113 ;;		None
 10114 ;; Auto vars:     Size  Location     Type
 10115 ;;  crc             1   15[BANK0 ] unsigned char 
 10116 ;; Return value:  Size  Location     Type
 10117 ;;		None               void
 10118 ;; Registers used:
 10119 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10120 ;; Tracked objects:
 10121 ;;		On entry : E/1
 10122 ;;		On exit  : 0/0
 10123 ;;		Unchanged: 0/0
 10124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10125 ;;      Params:         0       0       0       0       0       0       0
 10126 ;;      Locals:         0       1       0       0       0       0       0
 10127 ;;      Temps:          0       0       0       0       0       0       0
 10128 ;;      Totals:         0       1       0       0       0       0       0
 10129 ;;Total ram usage:        1 bytes
 10130 ;; Hardware stack levels used:    1
 10131 ;; Hardware stack levels required when called:    6
 10132 ;; This function calls:
 10133 ;;		_WriteUSART
 10134 ;;		_sendEscapedUartData
 10135 ;;		_crc8
 10136 ;; This function is called by:
 10137 ;;		_doModeVscp
 10138 ;; This function uses a non-reentrant model
 10139 ;;
 10140                           
 10141                           	psect	text14
 10142  004EBC                     __ptext14:
 10143                           	opt stack 0
 10144  004EBC                     _sendVSCPDriverAck:
 10145                           	opt stack 23
 10146                           
 10147                           ;main.c: 1780: uint8_t crc = 0;
 10148                           
 10149                           ; BSR set to: 0
 10150                           ;incstack = 0
 10151                           ;incstack = 0
 10152  004EBC  0100               	movlb	0	; () banked
 10153  004EBE  6B6F               	clrf	sendVSCPDriverAck@crc& (0+255),b
 10154  004EC0                     l872:
 10155  004EC0  A2AC               	btfss	4012,1,c	;volatile
 10156  004EC2  D7FE               	goto	l872
 10157                           
 10158                           ;main.c: 1784: WriteUSART(0x10);
 10159  004EC4  0E10               	movlw	16
 10160  004EC6  EC36  F02F         	call	_WriteUSART
 10161  004ECA                     l875:
 10162  004ECA  A2AC               	btfss	4012,1,c	;volatile
 10163  004ECC  D7FE               	goto	l875
 10164                           
 10165                           ;main.c: 1786: WriteUSART(0x02);
 10166  004ECE  0E02               	movlw	2
 10167  004ED0  EC36  F02F         	call	_WriteUSART
 10168  004ED4                     l878:
 10169  004ED4  A2AC               	btfss	4012,1,c	;volatile
 10170  004ED6  D7FE               	goto	l878
 10171                           
 10172                           ;main.c: 1790: WriteUSART(251);
 10173  004ED8  0EFB               	movlw	251
 10174  004EDA  EC36  F02F         	call	_WriteUSART
 10175                           
 10176                           ;main.c: 1791: crc8(&crc, 251);
 10177  004EDE  0100               	movlb	0	; () banked
 10178  004EE0  0E00               	movlw	high sendVSCPDriverAck@crc
 10179  004EE2  6F68               	movwf	(?_crc8+1)& (0+255),b
 10180  004EE4  0E6F               	movlw	low sendVSCPDriverAck@crc
 10181  004EE6  6F67               	movwf	?_crc8& (0+255),b
 10182  004EE8  0EFB               	movlw	251
 10183  004EEA  6F69               	movwf	(?_crc8+2)& (0+255),b
 10184  004EEC  EC49  F02E         	call	_crc8	;wreg free
 10185  004EF0                     l881:
 10186  004EF0  A2AC               	btfss	4012,1,c	;volatile
 10187  004EF2  D7FE               	goto	l881
 10188                           
 10189                           ;main.c: 1795: WriteUSART(0);
 10190  004EF4  0E00               	movlw	0
 10191  004EF6  EC36  F02F         	call	_WriteUSART
 10192                           
 10193                           ;main.c: 1796: crc8(&crc, 0);
 10194  004EFA  D829               	call	PL44	;call to abstracted procedure
 10195  004EFC  EC49  F02E         	call	_crc8	;wreg free
 10196                           
 10197                           ; BSR set to: 0
 10198                           ;main.c: 1799: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10199  004F00  0E00               	movlw	high sendVSCPDriverAck@crc
 10200  004F02  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10201  004F04  0E6F               	movlw	low sendVSCPDriverAck@crc
 10202  004F06  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10203  004F08  0101               	movlb	1	; () banked
 10204  004F0A  512B               	movf	(_cmdbuf+2)& (0+255),w,b
 10205  004F0C  ECB7  F02B         	call	_sendEscapedUartData
 10206  004F10                     l884:
 10207  004F10  A2AC               	btfss	4012,1,c	;volatile
 10208  004F12  D7FE               	goto	l884
 10209                           
 10210                           ;main.c: 1803: WriteUSART(0);
 10211  004F14  0E00               	movlw	0
 10212  004F16  EC36  F02F         	call	_WriteUSART
 10213                           
 10214                           ;main.c: 1804: crc8(&crc, 0);
 10215  004F1A  D819               	call	PL44	;call to abstracted procedure
 10216  004F1C  EC49  F02E         	call	_crc8	;wreg free
 10217  004F20                     l887:
 10218  004F20  A2AC               	btfss	4012,1,c	;volatile
 10219  004F22  D7FE               	goto	l887
 10220                           
 10221                           ;main.c: 1806: WriteUSART(0);
 10222  004F24  0E00               	movlw	0
 10223  004F26  EC36  F02F         	call	_WriteUSART
 10224                           
 10225                           ;main.c: 1807: crc8(&crc, 0);
 10226  004F2A  D811               	call	PL44	;call to abstracted procedure
 10227  004F2C  EC49  F02E         	call	_crc8	;wreg free
 10228                           
 10229                           ; BSR set to: 0
 10230                           ;main.c: 1810: sendEscapedUartData(crc, (0));
 10231  004F30  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10232  004F32  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10233  004F34  516F               	movf	sendVSCPDriverAck@crc& (0+255),w,b
 10234  004F36  ECB7  F02B         	call	_sendEscapedUartData
 10235  004F3A                     l890:
 10236  004F3A  A2AC               	btfss	4012,1,c	;volatile
 10237  004F3C  D7FE               	goto	l890
 10238                           
 10239                           ;main.c: 1814: WriteUSART(0x10);
 10240  004F3E  0E10               	movlw	16
 10241  004F40  EC36  F02F         	call	_WriteUSART
 10242  004F44                     l893:
 10243  004F44  A2AC               	btfss	4012,1,c	;volatile
 10244  004F46  D7FE               	goto	l893
 10245                           
 10246                           ;main.c: 1816: WriteUSART(0x03);
 10247  004F48  0E03               	movlw	3
 10248  004F4A  EF36  F02F         	goto	_WriteUSART
 10249  004F4E                     __end_of_sendVSCPDriverAck:
 10250                           	opt stack 0
 10251  004F4E                     PL44:
 10252                           	opt stack 23
 10253  004F4E  0100               	movlb	0	; () banked
 10254  004F50  0E00               	movlw	high sendVSCPDriverAck@crc
 10255  004F52  6F68               	movwf	(?_crc8+1)& (0+255),b
 10256  004F54  0E6F               	movlw	low sendVSCPDriverAck@crc
 10257  004F56  6F67               	movwf	?_crc8& (0+255),b
 10258  004F58  6B69               	clrf	(?_crc8+2)& (0+255),b
 10259  004F5A  0C00               	retlw	0
 10260  004F5C                     __end_ofPL44:
 10261                           	opt stack 0
 10262                           tblptru	equ	0xFF8
 10263                           tblptrh	equ	0xFF7
 10264                           tblptrl	equ	0xFF6
 10265                           tablat	equ	0xFF5
 10266                           prodh	equ	0xFF4
 10267                           prodl	equ	0xFF3
 10268                           intcon	equ	0xFF2
 10269                           indf0	equ	0xFEF
 10270                           postinc0	equ	0xFEE
 10271                           fsr0h	equ	0xFEA
 10272                           fsr0l	equ	0xFE9
 10273                           wreg	equ	0xFE8
 10274                           indf1	equ	0xFE7
 10275                           postinc1	equ	0xFE6
 10276                           postdec1	equ	0xFE5
 10277                           fsr1h	equ	0xFE2
 10278                           fsr1l	equ	0xFE1
 10279                           indf2	equ	0xFDF
 10280                           postinc2	equ	0xFDE
 10281                           postdec2	equ	0xFDD
 10282                           plusw2	equ	0xFDB
 10283                           fsr2h	equ	0xFDA
 10284                           fsr2l	equ	0xFD9
 10285                           status	equ	0xFD8
 10286                           
 10287 ;; *************** function _sendVSCPDriverNack *****************
 10288 ;; Defined at:
 10289 ;;		line 1823 in file "main.c"
 10290 ;; Parameters:    Size  Location     Type
 10291 ;;		None
 10292 ;; Auto vars:     Size  Location     Type
 10293 ;;  crc             1   15[BANK0 ] unsigned char 
 10294 ;; Return value:  Size  Location     Type
 10295 ;;		None               void
 10296 ;; Registers used:
 10297 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10298 ;; Tracked objects:
 10299 ;;		On entry : E/0
 10300 ;;		On exit  : 0/0
 10301 ;;		Unchanged: 0/0
 10302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10303 ;;      Params:         0       0       0       0       0       0       0
 10304 ;;      Locals:         0       1       0       0       0       0       0
 10305 ;;      Temps:          0       0       0       0       0       0       0
 10306 ;;      Totals:         0       1       0       0       0       0       0
 10307 ;;Total ram usage:        1 bytes
 10308 ;; Hardware stack levels used:    1
 10309 ;; Hardware stack levels required when called:    6
 10310 ;; This function calls:
 10311 ;;		_WriteUSART
 10312 ;;		_sendEscapedUartData
 10313 ;;		_crc8
 10314 ;; This function is called by:
 10315 ;;		_doModeVscp
 10316 ;; This function uses a non-reentrant model
 10317 ;;
 10318                           
 10319                           	psect	text15
 10320  004F5C                     __ptext15:
 10321                           	opt stack 0
 10322  004F5C                     _sendVSCPDriverNack:
 10323                           	opt stack 23
 10324                           
 10325                           ;main.c: 1824: uint8_t crc = 0;
 10326                           
 10327                           ;incstack = 0
 10328                           ;incstack = 0
 10329  004F5C  0100               	movlb	0	; () banked
 10330  004F5E  6B6F               	clrf	sendVSCPDriverNack@crc& (0+255),b
 10331  004F60                     l899:
 10332  004F60  A2AC               	btfss	4012,1,c	;volatile
 10333  004F62  D7FE               	goto	l899
 10334                           
 10335                           ;main.c: 1828: WriteUSART(0x10);
 10336  004F64  0E10               	movlw	16
 10337  004F66  EC36  F02F         	call	_WriteUSART
 10338  004F6A                     l902:
 10339  004F6A  A2AC               	btfss	4012,1,c	;volatile
 10340  004F6C  D7FE               	goto	l902
 10341                           
 10342                           ;main.c: 1830: WriteUSART(0x02);
 10343  004F6E  0E02               	movlw	2
 10344  004F70  EC36  F02F         	call	_WriteUSART
 10345  004F74                     l905:
 10346  004F74  A2AC               	btfss	4012,1,c	;volatile
 10347  004F76  D7FE               	goto	l905
 10348                           
 10349                           ;main.c: 1834: WriteUSART(252);
 10350  004F78  0EFC               	movlw	252
 10351  004F7A  EC36  F02F         	call	_WriteUSART
 10352                           
 10353                           ;main.c: 1835: crc8(&crc, 252);
 10354  004F7E  0100               	movlb	0	; () banked
 10355  004F80  0E00               	movlw	high sendVSCPDriverNack@crc
 10356  004F82  6F68               	movwf	(?_crc8+1)& (0+255),b
 10357  004F84  0E6F               	movlw	low sendVSCPDriverNack@crc
 10358  004F86  6F67               	movwf	?_crc8& (0+255),b
 10359  004F88  0EFC               	movlw	252
 10360  004F8A  6F69               	movwf	(?_crc8+2)& (0+255),b
 10361  004F8C  EC49  F02E         	call	_crc8	;wreg free
 10362  004F90                     l908:
 10363  004F90  A2AC               	btfss	4012,1,c	;volatile
 10364  004F92  D7FE               	goto	l908
 10365                           
 10366                           ;main.c: 1839: WriteUSART(0);
 10367  004F94  0E00               	movlw	0
 10368  004F96  EC36  F02F         	call	_WriteUSART
 10369                           
 10370                           ;main.c: 1840: crc8(&crc, 0);
 10371  004F9A  D829               	call	PL48	;call to abstracted procedure
 10372  004F9C  EC49  F02E         	call	_crc8	;wreg free
 10373                           
 10374                           ; BSR set to: 0
 10375                           ;main.c: 1843: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10376  004FA0  0E00               	movlw	high sendVSCPDriverNack@crc
 10377  004FA2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10378  004FA4  0E6F               	movlw	low sendVSCPDriverNack@crc
 10379  004FA6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10380  004FA8  0101               	movlb	1	; () banked
 10381  004FAA  512B               	movf	(_cmdbuf+2)& (0+255),w,b
 10382  004FAC  ECB7  F02B         	call	_sendEscapedUartData
 10383  004FB0                     l911:
 10384  004FB0  A2AC               	btfss	4012,1,c	;volatile
 10385  004FB2  D7FE               	goto	l911
 10386                           
 10387                           ;main.c: 1847: WriteUSART(0);
 10388  004FB4  0E00               	movlw	0
 10389  004FB6  EC36  F02F         	call	_WriteUSART
 10390                           
 10391                           ;main.c: 1848: crc8(&crc, 0);
 10392  004FBA  D819               	call	PL48	;call to abstracted procedure
 10393  004FBC  EC49  F02E         	call	_crc8	;wreg free
 10394  004FC0                     l914:
 10395  004FC0  A2AC               	btfss	4012,1,c	;volatile
 10396  004FC2  D7FE               	goto	l914
 10397                           
 10398                           ;main.c: 1850: WriteUSART(0);
 10399  004FC4  0E00               	movlw	0
 10400  004FC6  EC36  F02F         	call	_WriteUSART
 10401                           
 10402                           ;main.c: 1851: crc8(&crc, 0);
 10403  004FCA  D811               	call	PL48	;call to abstracted procedure
 10404  004FCC  EC49  F02E         	call	_crc8	;wreg free
 10405                           
 10406                           ; BSR set to: 0
 10407                           ;main.c: 1854: sendEscapedUartData(crc, (0));
 10408  004FD0  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10409  004FD2  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10410  004FD4  516F               	movf	sendVSCPDriverNack@crc& (0+255),w,b
 10411  004FD6  ECB7  F02B         	call	_sendEscapedUartData
 10412  004FDA                     l917:
 10413  004FDA  A2AC               	btfss	4012,1,c	;volatile
 10414  004FDC  D7FE               	goto	l917
 10415                           
 10416                           ;main.c: 1858: WriteUSART(0x10);
 10417  004FDE  0E10               	movlw	16
 10418  004FE0  EC36  F02F         	call	_WriteUSART
 10419  004FE4                     l920:
 10420  004FE4  A2AC               	btfss	4012,1,c	;volatile
 10421  004FE6  D7FE               	goto	l920
 10422                           
 10423                           ;main.c: 1860: WriteUSART(0x03);
 10424  004FE8  0E03               	movlw	3
 10425  004FEA  EF36  F02F         	goto	_WriteUSART
 10426  004FEE                     __end_of_sendVSCPDriverNack:
 10427                           	opt stack 0
 10428  004FEE                     PL48:
 10429                           	opt stack 23
 10430  004FEE  0100               	movlb	0	; () banked
 10431  004FF0  0E00               	movlw	high sendVSCPDriverNack@crc
 10432  004FF2  6F68               	movwf	(?_crc8+1)& (0+255),b
 10433  004FF4  0E6F               	movlw	low sendVSCPDriverNack@crc
 10434  004FF6  6F67               	movwf	?_crc8& (0+255),b
 10435  004FF8  6B69               	clrf	(?_crc8+2)& (0+255),b
 10436  004FFA  0C00               	retlw	0
 10437  004FFC                     __end_ofPL48:
 10438                           	opt stack 0
 10439                           tblptru	equ	0xFF8
 10440                           tblptrh	equ	0xFF7
 10441                           tblptrl	equ	0xFF6
 10442                           tablat	equ	0xFF5
 10443                           prodh	equ	0xFF4
 10444                           prodl	equ	0xFF3
 10445                           intcon	equ	0xFF2
 10446                           indf0	equ	0xFEF
 10447                           postinc0	equ	0xFEE
 10448                           fsr0h	equ	0xFEA
 10449                           fsr0l	equ	0xFE9
 10450                           wreg	equ	0xFE8
 10451                           indf1	equ	0xFE7
 10452                           postinc1	equ	0xFE6
 10453                           postdec1	equ	0xFE5
 10454                           fsr1h	equ	0xFE2
 10455                           fsr1l	equ	0xFE1
 10456                           indf2	equ	0xFDF
 10457                           postinc2	equ	0xFDE
 10458                           postdec2	equ	0xFDD
 10459                           plusw2	equ	0xFDB
 10460                           fsr2h	equ	0xFDA
 10461                           fsr2l	equ	0xFD9
 10462                           status	equ	0xFD8
 10463                           
 10464 ;; *************** function _calcCRC *****************
 10465 ;; Defined at:
 10466 ;;		line 2583 in file "main.c"
 10467 ;; Parameters:    Size  Location     Type
 10468 ;;  p               2   12[BANK0 ] PTR unsigned char 
 10469 ;;		 -> cmdbuf(80), 
 10470 ;;  len             1   14[BANK0 ] unsigned char 
 10471 ;; Auto vars:     Size  Location     Type
 10472 ;;  crc             1   16[BANK0 ] unsigned char 
 10473 ;;  j               1   15[BANK0 ] unsigned char 
 10474 ;; Return value:  Size  Location     Type
 10475 ;;                  1    wreg      unsigned char 
 10476 ;; Registers used:
 10477 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10478 ;; Tracked objects:
 10479 ;;		On entry : F/0
 10480 ;;		On exit  : F/0
 10481 ;;		Unchanged: 0/0
 10482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10483 ;;      Params:         0       3       0       0       0       0       0
 10484 ;;      Locals:         0       2       0       0       0       0       0
 10485 ;;      Temps:          0       0       0       0       0       0       0
 10486 ;;      Totals:         0       5       0       0       0       0       0
 10487 ;;Total ram usage:        5 bytes
 10488 ;; Hardware stack levels used:    1
 10489 ;; Hardware stack levels required when called:    5
 10490 ;; This function calls:
 10491 ;;		_crc8
 10492 ;; This function is called by:
 10493 ;;		_doModeVscp
 10494 ;; This function uses a non-reentrant model
 10495 ;;
 10496                           
 10497                           	psect	text16
 10498  005D2E                     __ptext16:
 10499                           	opt stack 0
 10500  005D2E                     _calcCRC:
 10501                           	opt stack 24
 10502                           
 10503                           ; BSR set to: 0
 10504                           ;main.c: 2584: uint8_t j;
 10505                           ;main.c: 2585: uint8_t crc = 0;
 10506                           
 10507                           ;incstack = 0
 10508                           ;incstack = 0
 10509  005D2E  6B70               	clrf	calcCRC@crc& (0+255),b
 10510                           
 10511                           ;main.c: 2587: for (j = 0; j < len; j++) {
 10512  005D30  6B6F               	clrf	calcCRC@j& (0+255),b
 10513  005D32  D00F               	goto	l16424
 10514  005D34                     l16420:
 10515                           
 10516                           ; BSR set to: 0
 10517                           ;main.c: 2588: crc8(&crc, p[j]);
 10518  005D34  0E00               	movlw	high calcCRC@crc
 10519  005D36  6F68               	movwf	(?_crc8+1)& (0+255),b
 10520  005D38  0E70               	movlw	low calcCRC@crc
 10521  005D3A  6F67               	movwf	?_crc8& (0+255),b
 10522  005D3C  516F               	movf	calcCRC@j& (0+255),w,b
 10523  005D3E  256C               	addwf	calcCRC@p& (0+255),w,b
 10524  005D40  6ED9               	movwf	fsr2l,c
 10525  005D42  0E00               	movlw	0
 10526  005D44  216D               	addwfc	(calcCRC@p+1)& (0+255),w,b
 10527  005D46  6EDA               	movwf	fsr2h,c
 10528  005D48  50DF               	movf	indf2,w,c
 10529  005D4A  6F69               	movwf	(?_crc8+2)& (0+255),b
 10530  005D4C  EC49  F02E         	call	_crc8	;wreg free
 10531                           
 10532                           ; BSR set to: 0
 10533  005D50  2B6F               	incf	calcCRC@j& (0+255),f,b
 10534  005D52                     l16424:
 10535                           
 10536                           ; BSR set to: 0
 10537  005D52  516E               	movf	calcCRC@len& (0+255),w,b
 10538  005D54  5D6F               	subwf	calcCRC@j& (0+255),w,b
 10539  005D56  E3EE               	bnc	l16420
 10540                           
 10541                           ; BSR set to: 0
 10542                           ;main.c: 2589: }
 10543                           ;main.c: 2591: return crc;
 10544  005D58  5170               	movf	calcCRC@crc& (0+255),w,b
 10545                           
 10546                           ; BSR set to: 0
 10547  005D5A  0012               	return	
 10548  005D5C                     __end_of_calcCRC:
 10549                           	opt stack 0
 10550                           tblptru	equ	0xFF8
 10551                           tblptrh	equ	0xFF7
 10552                           tblptrl	equ	0xFF6
 10553                           tablat	equ	0xFF5
 10554                           prodh	equ	0xFF4
 10555                           prodl	equ	0xFF3
 10556                           intcon	equ	0xFF2
 10557                           indf0	equ	0xFEF
 10558                           postinc0	equ	0xFEE
 10559                           fsr0h	equ	0xFEA
 10560                           fsr0l	equ	0xFE9
 10561                           wreg	equ	0xFE8
 10562                           indf1	equ	0xFE7
 10563                           postinc1	equ	0xFE6
 10564                           postdec1	equ	0xFE5
 10565                           fsr1h	equ	0xFE2
 10566                           fsr1l	equ	0xFE1
 10567                           indf2	equ	0xFDF
 10568                           postinc2	equ	0xFDE
 10569                           postdec2	equ	0xFDD
 10570                           plusw2	equ	0xFDB
 10571                           fsr2h	equ	0xFDA
 10572                           fsr2l	equ	0xFD9
 10573                           status	equ	0xFD8
 10574                           
 10575 ;; *************** function _receiveSendEventCANAL *****************
 10576 ;; Defined at:
 10577 ;;		line 1975 in file "main.c"
 10578 ;; Parameters:    Size  Location     Type
 10579 ;;		None
 10580 ;; Auto vars:     Size  Location     Type
 10581 ;;  crc             1   33[BANK0 ] unsigned char 
 10582 ;;  data            8   19[BANK0 ] unsigned char [8]
 10583 ;;  id              4   28[BANK0 ] unsigned long 
 10584 ;;  dlc             1   32[BANK0 ] unsigned char 
 10585 ;;  i               1   27[BANK0 ] unsigned char 
 10586 ;; Return value:  Size  Location     Type
 10587 ;;                  1    wreg      enum E15660
 10588 ;; Registers used:
 10589 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10590 ;; Tracked objects:
 10591 ;;		On entry : F/1
 10592 ;;		On exit  : 0/0
 10593 ;;		Unchanged: 0/0
 10594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10595 ;;      Params:         0       0       0       0       0       0       0
 10596 ;;      Locals:         0      15       0       0       0       0       0
 10597 ;;      Temps:          0       0       0       0       0       0       0
 10598 ;;      Totals:         0      15       0       0       0       0       0
 10599 ;;Total ram usage:       15 bytes
 10600 ;; Hardware stack levels used:    1
 10601 ;; Hardware stack levels required when called:    6
 10602 ;; This function calls:
 10603 ;;		_WriteUSART
 10604 ;;		_sendEscapedUartData
 10605 ;;		_crc8
 10606 ;;		_getCANFrame
 10607 ;; This function is called by:
 10608 ;;		_doModeVscp
 10609 ;; This function uses a non-reentrant model
 10610 ;;
 10611                           
 10612                           	psect	text17
 10613  003BC8                     __ptext17:
 10614                           	opt stack 0
 10615  003BC8                     _receiveSendEventCANAL:
 10616                           	opt stack 23
 10617                           
 10618                           ; BSR set to: 1
 10619                           ;main.c: 1976: uint8_t i;
 10620                           ;main.c: 1977: uint32_t id;
 10621                           ;main.c: 1978: uint8_t dlc;
 10622                           ;main.c: 1979: uint8_t data[8];
 10623                           ;main.c: 1981: if ( getCANFrame( &id, &dlc, &data ) ) {
 10624                           
 10625                           ; BSR set to: 0
 10626                           ;incstack = 0
 10627                           ;incstack = 0
 10628  003BC8  0100               	movlb	0	; () banked
 10629  003BCA  0E00               	movlw	high receiveSendEventCANAL@dlc
 10630  003BCC  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
 10631  003BCE  0E80               	movlw	low receiveSendEventCANAL@dlc
 10632  003BD0  6F6E               	movwf	?_getCANFrame& (0+255),b
 10633  003BD2  0E00               	movlw	high receiveSendEventCANAL@data
 10634  003BD4  6F71               	movwf	(?_getCANFrame+3)& (0+255),b
 10635  003BD6  0E73               	movlw	low receiveSendEventCANAL@data
 10636  003BD8  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
 10637  003BDA  0E7C               	movlw	receiveSendEventCANAL@id& (0+255)
 10638  003BDC  ECB6  F026         	call	_getCANFrame
 10639  003BE0  0900               	iorlw	0
 10640  003BE2  E101 D092          	bz	l1015
 10641                           
 10642                           ; BSR set to: 0
 10643                           ;main.c: 1983: uint8_t crc = 0;
 10644  003BE6  6B81               	clrf	receiveSendEventCANAL@crc& (0+255),b
 10645                           
 10646                           ; BSR set to: 0
 10647                           ;main.c: 1986: cntRxFrames++;
 10648  003BE8  0101               	movlb	1	; () banked
 10649  003BEA  2B0C               	incf	_cntRxFrames& (0+255),f,b
 10650  003BEC  0E00               	movlw	0
 10651  003BEE  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10652  003BF0  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10653  003BF2  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10654                           
 10655                           ;main.c: 1987: cntRxBytes += dlc;
 10656  003BF4  0100               	movlb	0	; () banked
 10657  003BF6  5180               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10658  003BF8  0101               	movlb	1	; () banked
 10659  003BFA  2708               	addwf	_cntRxBytes& (0+255),f,b
 10660  003BFC  0E00               	movlw	0
 10661  003BFE  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10662  003C00  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10663  003C02  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10664  003C04                     l994:
 10665                           
 10666                           ; BSR set to: 1
 10667  003C04  A2AC               	btfss	4012,1,c	;volatile
 10668  003C06  D7FE               	goto	l994
 10669                           
 10670                           ; BSR set to: 1
 10671                           ;main.c: 1991: WriteUSART(0x10);
 10672  003C08  0E10               	movlw	16
 10673  003C0A  EC36  F02F         	call	_WriteUSART
 10674  003C0E                     l997:
 10675  003C0E  A2AC               	btfss	4012,1,c	;volatile
 10676  003C10  D7FE               	goto	l997
 10677                           
 10678                           ;main.c: 1993: WriteUSART(0x02);
 10679  003C12  0E02               	movlw	2
 10680  003C14  EC36  F02F         	call	_WriteUSART
 10681  003C18                     l1000:
 10682  003C18  A2AC               	btfss	4012,1,c	;volatile
 10683  003C1A  D7FE               	goto	l1000
 10684                           
 10685                           ;main.c: 1997: WriteUSART(2);
 10686  003C1C  0E02               	movlw	2
 10687  003C1E  EC36  F02F         	call	_WriteUSART
 10688                           
 10689                           ;main.c: 1998: crc8(&crc, 2);
 10690  003C22  0100               	movlb	0	; () banked
 10691  003C24  0E00               	movlw	high receiveSendEventCANAL@crc
 10692  003C26  6F68               	movwf	(?_crc8+1)& (0+255),b
 10693  003C28  0E81               	movlw	low receiveSendEventCANAL@crc
 10694  003C2A  6F67               	movwf	?_crc8& (0+255),b
 10695  003C2C  0E02               	movlw	2
 10696  003C2E  6F69               	movwf	(?_crc8+2)& (0+255),b
 10697  003C30  EC49  F02E         	call	_crc8	;wreg free
 10698  003C34                     l1003:
 10699  003C34  A2AC               	btfss	4012,1,c	;volatile
 10700  003C36  D7FE               	goto	l1003
 10701                           
 10702                           ;main.c: 2002: WriteUSART(0);
 10703  003C38  0E00               	movlw	0
 10704  003C3A  EC36  F02F         	call	_WriteUSART
 10705                           
 10706                           ;main.c: 2003: crc8(&crc, 0);
 10707  003C3E  0100               	movlb	0	; () banked
 10708  003C40  0E00               	movlw	high receiveSendEventCANAL@crc
 10709  003C42  6F68               	movwf	(?_crc8+1)& (0+255),b
 10710  003C44  0E81               	movlw	low receiveSendEventCANAL@crc
 10711  003C46  6F67               	movwf	?_crc8& (0+255),b
 10712  003C48  0E00               	movlw	0
 10713  003C4A  6B69               	clrf	(?_crc8+2)& (0+255),b
 10714  003C4C  EC49  F02E         	call	_crc8	;wreg free
 10715                           
 10716                           ; BSR set to: 0
 10717                           ;main.c: 2006: sendEscapedUartData(sequencyno, &crc);
 10718  003C50  0E00               	movlw	high receiveSendEventCANAL@crc
 10719  003C52  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10720  003C54  0E81               	movlw	low receiveSendEventCANAL@crc
 10721  003C56  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10722  003C58  5035               	movf	_sequencyno,w,c
 10723  003C5A  ECB7  F02B         	call	_sendEscapedUartData
 10724                           
 10725                           ; BSR set to: 0
 10726                           ;main.c: 2007: sequencyno++;
 10727  003C5E  2A35               	incf	_sequencyno,f,c
 10728                           
 10729                           ; BSR set to: 0
 10730                           ;main.c: 2010: sendEscapedUartData(0, &crc);
 10731  003C60  0E00               	movlw	high receiveSendEventCANAL@crc
 10732  003C62  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10733  003C64  0E81               	movlw	low receiveSendEventCANAL@crc
 10734  003C66  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10735  003C68  0E00               	movlw	0
 10736  003C6A  ECB7  F02B         	call	_sendEscapedUartData
 10737                           
 10738                           ; BSR set to: 0
 10739                           ;main.c: 2011: sendEscapedUartData(5 + dlc, &crc);
 10740  003C6E  0E00               	movlw	high receiveSendEventCANAL@crc
 10741  003C70  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10742  003C72  0E81               	movlw	low receiveSendEventCANAL@crc
 10743  003C74  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10744  003C76  5180               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10745  003C78  0F05               	addlw	5
 10746  003C7A  ECB7  F02B         	call	_sendEscapedUartData
 10747                           
 10748                           ; BSR set to: 0
 10749                           ;main.c: 2017: sendEscapedUartData( ((id >> 24) & 0xff), &crc);
 10750  003C7E  0E00               	movlw	high receiveSendEventCANAL@crc
 10751  003C80  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10752  003C82  0E81               	movlw	low receiveSendEventCANAL@crc
 10753  003C84  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10754  003C86  0100               	movlb	0	; () banked
 10755  003C88  517F               	movf	(receiveSendEventCANAL@id+3)& (0+255),w,b
 10756  003C8A  ECB7  F02B         	call	_sendEscapedUartData
 10757                           
 10758                           ; BSR set to: 0
 10759                           ;main.c: 2018: sendEscapedUartData(((id >> 16) & 0xff), &crc);
 10760  003C8E  0E00               	movlw	high receiveSendEventCANAL@crc
 10761  003C90  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10762  003C92  0E81               	movlw	low receiveSendEventCANAL@crc
 10763  003C94  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10764  003C96  0100               	movlb	0	; () banked
 10765  003C98  517E               	movf	(receiveSendEventCANAL@id+2)& (0+255),w,b
 10766  003C9A  ECB7  F02B         	call	_sendEscapedUartData
 10767                           
 10768                           ; BSR set to: 0
 10769                           ;main.c: 2019: sendEscapedUartData(((id >> 8) & 0xff), &crc);
 10770  003C9E  0E00               	movlw	high receiveSendEventCANAL@crc
 10771  003CA0  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10772  003CA2  0E81               	movlw	low receiveSendEventCANAL@crc
 10773  003CA4  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10774  003CA6  0100               	movlb	0	; () banked
 10775  003CA8  517D               	movf	(receiveSendEventCANAL@id+1)& (0+255),w,b
 10776  003CAA  ECB7  F02B         	call	_sendEscapedUartData
 10777                           
 10778                           ; BSR set to: 0
 10779                           ;main.c: 2020: sendEscapedUartData((id & 0xff), &crc);
 10780  003CAE  0E00               	movlw	high receiveSendEventCANAL@crc
 10781  003CB0  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10782  003CB2  0E81               	movlw	low receiveSendEventCANAL@crc
 10783  003CB4  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10784  003CB6  517C               	movf	receiveSendEventCANAL@id& (0+255),w,b
 10785  003CB8  ECB7  F02B         	call	_sendEscapedUartData
 10786                           
 10787                           ; BSR set to: 0
 10788                           ;main.c: 2023: sendEscapedUartData(dlc, &crc);
 10789  003CBC  0E00               	movlw	high receiveSendEventCANAL@crc
 10790  003CBE  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10791  003CC0  0E81               	movlw	low receiveSendEventCANAL@crc
 10792  003CC2  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10793  003CC4  5180               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10794  003CC6  ECB7  F02B         	call	_sendEscapedUartData
 10795                           
 10796                           ; BSR set to: 0
 10797                           ;main.c: 2026: for (i = 0; i < dlc; i++) {
 10798  003CCA  6B7B               	clrf	receiveSendEventCANAL@i& (0+255),b
 10799  003CCC  D00C               	goto	l16408
 10800  003CCE                     l16404:
 10801                           
 10802                           ; BSR set to: 0
 10803                           ;main.c: 2027: sendEscapedUartData( data[ i ], &crc );
 10804  003CCE  0E00               	movlw	high receiveSendEventCANAL@crc
 10805  003CD0  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10806  003CD2  0E81               	movlw	low receiveSendEventCANAL@crc
 10807  003CD4  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10808  003CD6  517B               	movf	receiveSendEventCANAL@i& (0+255),w,b
 10809  003CD8  0F73               	addlw	low receiveSendEventCANAL@data
 10810  003CDA  6ED9               	movwf	fsr2l,c
 10811  003CDC  6ADA               	clrf	fsr2h,c
 10812  003CDE  50DF               	movf	indf2,w,c
 10813  003CE0  ECB7  F02B         	call	_sendEscapedUartData
 10814                           
 10815                           ; BSR set to: 0
 10816  003CE4  2B7B               	incf	receiveSendEventCANAL@i& (0+255),f,b
 10817  003CE6                     l16408:
 10818                           
 10819                           ; BSR set to: 0
 10820  003CE6  5180               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10821  003CE8  5D7B               	subwf	receiveSendEventCANAL@i& (0+255),w,b
 10822  003CEA  E3F1               	bnc	l16404
 10823                           
 10824                           ; BSR set to: 0
 10825                           ;main.c: 2028: }
 10826                           ;main.c: 2033: sendEscapedUartData(crc, (0));
 10827  003CEC  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10828  003CEE  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10829  003CF0  5181               	movf	receiveSendEventCANAL@crc& (0+255),w,b
 10830  003CF2  ECB7  F02B         	call	_sendEscapedUartData
 10831  003CF6                     l1009:
 10832  003CF6  A2AC               	btfss	4012,1,c	;volatile
 10833  003CF8  D7FE               	goto	l1009
 10834                           
 10835                           ;main.c: 2037: WriteUSART(0x10);
 10836  003CFA  0E10               	movlw	16
 10837  003CFC  EC36  F02F         	call	_WriteUSART
 10838  003D00                     l1012:
 10839  003D00  A2AC               	btfss	4012,1,c	;volatile
 10840  003D02  D7FE               	goto	l1012
 10841                           
 10842                           ;main.c: 2039: WriteUSART(0x03);
 10843  003D04  0E03               	movlw	3
 10844  003D06  EC36  F02F         	call	_WriteUSART
 10845  003D0A                     l1015:
 10846  003D0A  0012               	return	
 10847  003D0C                     __end_of_receiveSendEventCANAL:
 10848                           	opt stack 0
 10849                           tblptru	equ	0xFF8
 10850                           tblptrh	equ	0xFF7
 10851                           tblptrl	equ	0xFF6
 10852                           tablat	equ	0xFF5
 10853                           prodh	equ	0xFF4
 10854                           prodl	equ	0xFF3
 10855                           intcon	equ	0xFF2
 10856                           indf0	equ	0xFEF
 10857                           postinc0	equ	0xFEE
 10858                           fsr0h	equ	0xFEA
 10859                           fsr0l	equ	0xFE9
 10860                           wreg	equ	0xFE8
 10861                           indf1	equ	0xFE7
 10862                           postinc1	equ	0xFE6
 10863                           postdec1	equ	0xFE5
 10864                           fsr1h	equ	0xFE2
 10865                           fsr1l	equ	0xFE1
 10866                           indf2	equ	0xFDF
 10867                           postinc2	equ	0xFDE
 10868                           postdec2	equ	0xFDD
 10869                           plusw2	equ	0xFDB
 10870                           fsr2h	equ	0xFDA
 10871                           fsr2l	equ	0xFD9
 10872                           status	equ	0xFD8
 10873                           
 10874 ;; *************** function _receiveSendMultiEventCANAL *****************
 10875 ;; Defined at:
 10876 ;;		line 2052 in file "main.c"
 10877 ;; Parameters:    Size  Location     Type
 10878 ;;		None
 10879 ;; Auto vars:     Size  Location     Type
 10880 ;;  crc             1   34[BANK0 ] unsigned char 
 10881 ;;  data            8   19[BANK0 ] unsigned char [8]
 10882 ;;  id              4   29[BANK0 ] unsigned long 
 10883 ;;  pos             1   35[BANK0 ] unsigned char 
 10884 ;;  dlc             1   33[BANK0 ] unsigned char 
 10885 ;;  i               1   28[BANK0 ] unsigned char 
 10886 ;;  msgcount        1   27[BANK0 ] unsigned char 
 10887 ;; Return value:  Size  Location     Type
 10888 ;;                  1    wreg      enum E15660
 10889 ;; Registers used:
 10890 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10891 ;; Tracked objects:
 10892 ;;		On entry : F/1
 10893 ;;		On exit  : 0/0
 10894 ;;		Unchanged: 0/0
 10895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10896 ;;      Params:         0       0       0       0       0       0       0
 10897 ;;      Locals:         0      17       0       0       0       0       0
 10898 ;;      Temps:          0       0       0       0       0       0       0
 10899 ;;      Totals:         0      17       0       0       0       0       0
 10900 ;;Total ram usage:       17 bytes
 10901 ;; Hardware stack levels used:    1
 10902 ;; Hardware stack levels required when called:    6
 10903 ;; This function calls:
 10904 ;;		_WriteUSART
 10905 ;;		_sendEscapedUartData
 10906 ;;		_crc8
 10907 ;;		_getCANFrame
 10908 ;; This function is called by:
 10909 ;;		_doModeVscp
 10910 ;; This function uses a non-reentrant model
 10911 ;;
 10912                           
 10913                           	psect	text18
 10914  0038D2                     __ptext18:
 10915                           	opt stack 0
 10916  0038D2                     _receiveSendMultiEventCANAL:
 10917                           	opt stack 23
 10918                           
 10919                           ; BSR set to: 1
 10920                           ;main.c: 2053: uint8_t i;
 10921                           ;main.c: 2054: uint8_t pos=0;
 10922                           
 10923                           ;incstack = 0
 10924                           ;incstack = 0
 10925  0038D2  0100               	movlb	0	; () banked
 10926  0038D4  6B83               	clrf	receiveSendMultiEventCANAL@pos& (0+255),b
 10927                           
 10928                           ;main.c: 2055: uint8_t msgcount=0;
 10929  0038D6  6B7B               	clrf	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10930                           
 10931                           ; BSR set to: 0
 10932                           ;main.c: 2056: uint32_t id;
 10933                           ;main.c: 2057: uint8_t dlc;
 10934                           ;main.c: 2058: uint8_t data[8];
 10935                           ;main.c: 2060: if ( getCANFrame( &id, &dlc, &data ) ) {
 10936  0038D8  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 10937  0038DA  D8B6               	call	PL80	;call to abstracted procedure
 10938  0038DC  ECB6  F026         	call	_getCANFrame
 10939  0038E0  0900               	iorlw	0
 10940  0038E2  E101 D0A8          	bz	l1047
 10941                           
 10942                           ; BSR set to: 0
 10943                           ;main.c: 2062: uint8_t crc = 0;
 10944  0038E6  6B82               	clrf	receiveSendMultiEventCANAL@crc& (0+255),b
 10945                           
 10946                           ; BSR set to: 0
 10947                           ;main.c: 2065: cntRxFrames++;
 10948  0038E8  0101               	movlb	1	; () banked
 10949  0038EA  2B0C               	incf	_cntRxFrames& (0+255),f,b
 10950  0038EC  0E00               	movlw	0
 10951  0038EE  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10952  0038F0  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10953  0038F2  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10954                           
 10955                           ;main.c: 2066: cntRxBytes += dlc;
 10956  0038F4  0100               	movlb	0	; () banked
 10957  0038F6  5181               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10958  0038F8  0101               	movlb	1	; () banked
 10959  0038FA  2708               	addwf	_cntRxBytes& (0+255),f,b
 10960  0038FC  0E00               	movlw	0
 10961  0038FE  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10962  003900  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10963  003902  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10964  003904                     l1019:
 10965                           
 10966                           ; BSR set to: 1
 10967  003904  A2AC               	btfss	4012,1,c	;volatile
 10968  003906  D7FE               	goto	l1019
 10969                           
 10970                           ; BSR set to: 1
 10971                           ;main.c: 2070: WriteUSART(0x10);
 10972  003908  0E10               	movlw	16
 10973  00390A  EC36  F02F         	call	_WriteUSART
 10974  00390E                     l1022:
 10975  00390E  A2AC               	btfss	4012,1,c	;volatile
 10976  003910  D7FE               	goto	l1022
 10977                           
 10978                           ;main.c: 2072: WriteUSART(0x02);
 10979  003912  0E02               	movlw	2
 10980  003914  EC36  F02F         	call	_WriteUSART
 10981  003918                     l1025:
 10982  003918  A2AC               	btfss	4012,1,c	;volatile
 10983  00391A  D7FE               	goto	l1025
 10984                           
 10985                           ;main.c: 2076: WriteUSART(6);
 10986  00391C  0E06               	movlw	6
 10987  00391E  EC36  F02F         	call	_WriteUSART
 10988                           
 10989                           ;main.c: 2077: crc8(&crc, 6);
 10990  003922  0100               	movlb	0	; () banked
 10991  003924  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10992  003926  6F68               	movwf	(?_crc8+1)& (0+255),b
 10993  003928  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 10994  00392A  6F67               	movwf	?_crc8& (0+255),b
 10995  00392C  0E06               	movlw	6
 10996  00392E  6F69               	movwf	(?_crc8+2)& (0+255),b
 10997  003930  EC49  F02E         	call	_crc8	;wreg free
 10998  003934                     l1028:
 10999  003934  A2AC               	btfss	4012,1,c	;volatile
 11000  003936  D7FE               	goto	l1028
 11001                           
 11002                           ;main.c: 2081: WriteUSART(0);
 11003  003938  0E00               	movlw	0
 11004  00393A  EC36  F02F         	call	_WriteUSART
 11005                           
 11006                           ;main.c: 2082: crc8(&crc, 0);
 11007  00393E  0100               	movlb	0	; () banked
 11008  003940  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11009  003942  6F68               	movwf	(?_crc8+1)& (0+255),b
 11010  003944  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11011  003946  6F67               	movwf	?_crc8& (0+255),b
 11012  003948  0E00               	movlw	0
 11013  00394A  6B69               	clrf	(?_crc8+2)& (0+255),b
 11014  00394C  EC49  F02E         	call	_crc8	;wreg free
 11015                           
 11016                           ; BSR set to: 0
 11017                           ;main.c: 2085: sendEscapedUartData(sequencyno, &crc);
 11018  003950  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11019  003952  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11020  003954  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11021  003956  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 11022  003958  5035               	movf	_sequencyno,w,c
 11023  00395A  ECB7  F02B         	call	_sendEscapedUartData
 11024                           
 11025                           ; BSR set to: 0
 11026                           ;main.c: 2086: sequencyno++;
 11027  00395E  2A35               	incf	_sequencyno,f,c
 11028  003960                     l16310:
 11029                           
 11030                           ; BSR set to: 0
 11031                           ;main.c: 2096: wrkbuf[ pos ] = (id >> 24) & 0xff;
 11032  003960  0E79               	movlw	low _wrkbuf
 11033  003962  0100               	movlb	0	; () banked
 11034  003964  2583               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11035  003966  6ED9               	movwf	fsr2l,c
 11036  003968  6ADA               	clrf	fsr2h,c
 11037  00396A  0E01               	movlw	high _wrkbuf
 11038  00396C  22DA               	addwfc	fsr2h,f,c
 11039  00396E  C080  FFDF         	movff	receiveSendMultiEventCANAL@id+3,indf2
 11040                           
 11041                           ; BSR set to: 0
 11042                           ;main.c: 2097: pos++;
 11043                           
 11044                           ; BSR set to: 0
 11045                           ;main.c: 2098: wrkbuf[ pos ] = (id >> 16) & 0xff;
 11046  003972  D862               	call	PL26	;call to abstracted procedure
 11047  003974  C07F  FFDF         	movff	receiveSendMultiEventCANAL@id+2,indf2
 11048                           
 11049                           ; BSR set to: 0
 11050                           ;main.c: 2099: pos++;
 11051                           
 11052                           ; BSR set to: 0
 11053                           ;main.c: 2100: wrkbuf[ pos ] = (id >> 8) & 0xff;
 11054  003978  D85F               	call	PL26	;call to abstracted procedure
 11055  00397A  C07E  FFDF         	movff	receiveSendMultiEventCANAL@id+1,indf2
 11056                           
 11057                           ; BSR set to: 0
 11058                           ;main.c: 2101: pos++;
 11059                           
 11060                           ; BSR set to: 0
 11061                           ;main.c: 2102: wrkbuf[ pos ] = id & 0xff;
 11062  00397E  D85C               	call	PL26	;call to abstracted procedure
 11063  003980  C07D  FFDF         	movff	receiveSendMultiEventCANAL@id,indf2
 11064                           
 11065                           ; BSR set to: 0
 11066                           ;main.c: 2103: pos++;
 11067                           
 11068                           ; BSR set to: 0
 11069                           ;main.c: 2106: wrkbuf[ pos ] = dlc;
 11070  003984  D859               	call	PL26	;call to abstracted procedure
 11071  003986  C081  FFDF         	movff	receiveSendMultiEventCANAL@dlc,indf2
 11072                           
 11073                           ; BSR set to: 0
 11074                           ;main.c: 2107: pos++;
 11075  00398A  2B83               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 11076                           
 11077                           ; BSR set to: 0
 11078                           ;main.c: 2110: for (i = 0; i < dlc; i++) {
 11079  00398C  6B7C               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 11080  00398E  D00F               	goto	l16338
 11081  003990                     l16332:
 11082                           
 11083                           ; BSR set to: 0
 11084                           ;main.c: 2111: wrkbuf[ pos ] = data[ i ];
 11085  003990  517C               	movf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11086  003992  0F73               	addlw	low receiveSendMultiEventCANAL@data
 11087  003994  6ED9               	movwf	fsr2l,c
 11088  003996  6ADA               	clrf	fsr2h,c
 11089  003998  0E79               	movlw	low _wrkbuf
 11090  00399A  0100               	movlb	0	; () banked
 11091  00399C  2583               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11092  00399E  6EE1               	movwf	fsr1l,c
 11093  0039A0  6AE2               	clrf	fsr1h,c
 11094  0039A2  0E01               	movlw	high _wrkbuf
 11095  0039A4  22E2               	addwfc	fsr1h,f,c
 11096  0039A6  CFDF FFE7          	movff	indf2,indf1
 11097                           
 11098                           ; BSR set to: 1
 11099                           ;main.c: 2112: pos++;
 11100  0039AA  2B83               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 11101                           
 11102                           ; BSR set to: 0
 11103  0039AC  2B7C               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 11104  0039AE                     l16338:
 11105                           
 11106                           ; BSR set to: 0
 11107  0039AE  5181               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 11108  0039B0  5D7C               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11109  0039B2  E3EE               	bnc	l16332
 11110                           
 11111                           ; BSR set to: 0
 11112                           ;main.c: 2113: }
 11113                           ;main.c: 2115: msgcount++;
 11114  0039B4  2B7B               	incf	receiveSendMultiEventCANAL@msgcount& (0+255),f,b
 11115                           
 11116                           ; BSR set to: 0
 11117                           ;main.c: 2117: } while ( ( msgcount < caps.maxCanalFrames ) &&
 11118                           ;main.c: 2118: ( msgcount < 5 ) &&
 11119                           ;main.c: 2119: getCANFrame( &id, &dlc, &data ) );
 11120  0039B6  0101               	movlb	1	; () banked
 11121  0039B8  51EE               	movf	(_caps+1)& (0+255),w,b
 11122  0039BA  0100               	movlb	0	; () banked
 11123  0039BC  617B               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 11124  0039BE  D009               	goto	l16348
 11125                           
 11126                           ; BSR set to: 0
 11127  0039C0  0E05               	movlw	5
 11128  0039C2  617B               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 11129  0039C4  D006               	goto	l16348
 11130                           
 11131                           ; BSR set to: 0
 11132  0039C6  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 11133  0039C8  D83F               	call	PL80	;call to abstracted procedure
 11134  0039CA  ECB6  F026         	call	_getCANFrame
 11135  0039CE  0900               	iorlw	0
 11136  0039D0  E1C7               	bnz	l16310
 11137  0039D2                     l16348:
 11138                           
 11139                           ; BSR set to: 0
 11140                           ;main.c: 2124: sendEscapedUartData(0, &crc);
 11141  0039D2  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11142  0039D4  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11143  0039D6  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11144  0039D8  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 11145  0039DA  0E00               	movlw	0
 11146  0039DC  ECB7  F02B         	call	_sendEscapedUartData
 11147                           
 11148                           ;main.c: 2125: sendEscapedUartData(pos, &crc);
 11149  0039E0  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11150  0039E2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11151  0039E4  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11152  0039E6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 11153  0039E8  5183               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11154  0039EA  ECB7  F02B         	call	_sendEscapedUartData
 11155                           
 11156                           ; BSR set to: 0
 11157                           ;main.c: 2128: for (i = 0; i < pos; i++) {
 11158  0039EE  6B7C               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 11159  0039F0  D010               	goto	l16356
 11160  0039F2                     l16352:
 11161                           
 11162                           ; BSR set to: 0
 11163                           ;main.c: 2129: sendEscapedUartData( wrkbuf[ i ], &crc);
 11164  0039F2  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11165  0039F4  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11166  0039F6  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11167  0039F8  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 11168  0039FA  0E79               	movlw	low _wrkbuf
 11169  0039FC  0100               	movlb	0	; () banked
 11170  0039FE  257C               	addwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11171  003A00  6ED9               	movwf	fsr2l,c
 11172  003A02  6ADA               	clrf	fsr2h,c
 11173  003A04  0101               	movlb	1	; () banked
 11174  003A06  0E01               	movlw	high _wrkbuf
 11175  003A08  22DA               	addwfc	fsr2h,f,c
 11176  003A0A  50DF               	movf	indf2,w,c
 11177  003A0C  ECB7  F02B         	call	_sendEscapedUartData
 11178                           
 11179                           ; BSR set to: 0
 11180  003A10  2B7C               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 11181  003A12                     l16356:
 11182                           
 11183                           ; BSR set to: 0
 11184  003A12  5183               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11185  003A14  5D7C               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11186  003A16  E3ED               	bnc	l16352
 11187                           
 11188                           ; BSR set to: 0
 11189                           ;main.c: 2130: }
 11190                           ;main.c: 2133: sendEscapedUartData(crc, (0));
 11191  003A18  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 11192  003A1A  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 11193  003A1C  5182               	movf	receiveSendMultiEventCANAL@crc& (0+255),w,b
 11194  003A1E  ECB7  F02B         	call	_sendEscapedUartData
 11195  003A22                     l1041:
 11196  003A22  A2AC               	btfss	4012,1,c	;volatile
 11197  003A24  D7FE               	goto	l1041
 11198                           
 11199                           ;main.c: 2137: WriteUSART(0x10);
 11200  003A26  0E10               	movlw	16
 11201  003A28  EC36  F02F         	call	_WriteUSART
 11202  003A2C                     l1044:
 11203  003A2C  A2AC               	btfss	4012,1,c	;volatile
 11204  003A2E  D7FE               	goto	l1044
 11205                           
 11206                           ;main.c: 2139: WriteUSART(0x03);
 11207  003A30  0E03               	movlw	3
 11208  003A32  EC36  F02F         	call	_WriteUSART
 11209  003A36                     l1047:
 11210  003A36  0012               	return	
 11211  003A38                     __end_of_receiveSendMultiEventCANAL:
 11212                           	opt stack 0
 11213  003A38                     PL26:
 11214                           	opt stack 23
 11215  003A38  2B83               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 11216  003A3A  0E79               	movlw	low _wrkbuf
 11217  003A3C  2583               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11218  003A3E  6ED9               	movwf	fsr2l,c
 11219  003A40  6ADA               	clrf	fsr2h,c
 11220  003A42  0E01               	movlw	high _wrkbuf
 11221  003A44  22DA               	addwfc	fsr2h,f,c
 11222  003A46  0012               	return	
 11223  003A48                     __end_ofPL26:
 11224                           	opt stack 0
 11225  003A48                     PL80:
 11226                           	opt stack 23
 11227  003A48  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
 11228  003A4A  0E81               	movlw	low receiveSendMultiEventCANAL@dlc
 11229  003A4C  6F6E               	movwf	?_getCANFrame& (0+255),b
 11230  003A4E  0E00               	movlw	high receiveSendMultiEventCANAL@data
 11231  003A50  6F71               	movwf	(?_getCANFrame+3)& (0+255),b
 11232  003A52  0E73               	movlw	low receiveSendMultiEventCANAL@data
 11233  003A54  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
 11234  003A56  0E7D               	movlw	receiveSendMultiEventCANAL@id& (0+255)
 11235  003A58  0012               	return	
 11236  003A5A                     __end_ofPL80:
 11237                           	opt stack 0
 11238                           tblptru	equ	0xFF8
 11239                           tblptrh	equ	0xFF7
 11240                           tblptrl	equ	0xFF6
 11241                           tablat	equ	0xFF5
 11242                           prodh	equ	0xFF4
 11243                           prodl	equ	0xFF3
 11244                           intcon	equ	0xFF2
 11245                           indf0	equ	0xFEF
 11246                           postinc0	equ	0xFEE
 11247                           fsr0h	equ	0xFEA
 11248                           fsr0l	equ	0xFE9
 11249                           wreg	equ	0xFE8
 11250                           indf1	equ	0xFE7
 11251                           postinc1	equ	0xFE6
 11252                           postdec1	equ	0xFE5
 11253                           fsr1h	equ	0xFE2
 11254                           fsr1l	equ	0xFE1
 11255                           indf2	equ	0xFDF
 11256                           postinc2	equ	0xFDE
 11257                           postdec2	equ	0xFDD
 11258                           plusw2	equ	0xFDB
 11259                           fsr2h	equ	0xFDA
 11260                           fsr2l	equ	0xFD9
 11261                           status	equ	0xFD8
 11262                           
 11263 ;; *************** function _sendEscapedUartData *****************
 11264 ;; Defined at:
 11265 ;;		line 1705 in file "main.c"
 11266 ;; Parameters:    Size  Location     Type
 11267 ;;  c               1    wreg     unsigned char 
 11268 ;;  pcrc            2   12[BANK0 ] PTR unsigned char 
 11269 ;;		 -> sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), receiveSendEven
      +tCANAL@crc(1), 
 11270 ;;		 -> sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame
      +@crc(1), 
 11271 ;;		 -> NULL(0), 
 11272 ;; Auto vars:     Size  Location     Type
 11273 ;;  c               1   14[BANK0 ] unsigned char 
 11274 ;; Return value:  Size  Location     Type
 11275 ;;		None               void
 11276 ;; Registers used:
 11277 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11278 ;; Tracked objects:
 11279 ;;		On entry : E/1
 11280 ;;		On exit  : F/0
 11281 ;;		Unchanged: 0/0
 11282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11283 ;;      Params:         0       2       0       0       0       0       0
 11284 ;;      Locals:         0       1       0       0       0       0       0
 11285 ;;      Temps:          0       0       0       0       0       0       0
 11286 ;;      Totals:         0       3       0       0       0       0       0
 11287 ;;Total ram usage:        3 bytes
 11288 ;; Hardware stack levels used:    1
 11289 ;; Hardware stack levels required when called:    5
 11290 ;; This function calls:
 11291 ;;		_WriteUSART
 11292 ;;		_crc8
 11293 ;; This function is called by:
 11294 ;;		_sendVSCPDriverErrorFrame
 11295 ;;		_sendVSCPDriverAck
 11296 ;;		_sendVSCPDriverNack
 11297 ;;		_sendVSCPDriverCommandReply
 11298 ;;		_receiveSendEventCANAL
 11299 ;;		_receiveSendMultiEventCANAL
 11300 ;;		_sendVSCPModeCapabilities
 11301 ;; This function uses a non-reentrant model
 11302 ;;
 11303                           
 11304                           	psect	text19
 11305  00576E                     __ptext19:
 11306                           	opt stack 0
 11307  00576E                     _sendEscapedUartData:
 11308                           	opt stack 23
 11309                           
 11310                           ;incstack = 0
 11311                           ;incstack = 0
 11312                           ;sendEscapedUartData@c stored from wreg
 11313  00576E  CFE8 F06E          	movff	wreg,sendEscapedUartData@c
 11314                           
 11315                           ;main.c: 1706: if (0x10 == c) {
 11316  005772  0100               	movlb	0	; () banked
 11317  005774  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11318  005776  0A10               	xorlw	16
 11319  005778  E117               	bnz	l838
 11320  00577A                     l830:
 11321  00577A  A2AC               	btfss	4012,1,c	;volatile
 11322  00577C  D7FE               	goto	l830
 11323                           
 11324                           ;main.c: 1709: WriteUSART(0x10);
 11325  00577E  0E10               	movlw	16
 11326  005780  EC36  F02F         	call	_WriteUSART
 11327  005784                     l833:
 11328  005784  A2AC               	btfss	4012,1,c	;volatile
 11329  005786  D7FE               	goto	l833
 11330                           
 11331                           ;main.c: 1713: WriteUSART(0x10);
 11332  005788  0E10               	movlw	16
 11333  00578A  EC36  F02F         	call	_WriteUSART
 11334                           
 11335                           ;main.c: 1714: if ((0) != pcrc) crc8(pcrc, 0x10);
 11336  00578E  0100               	movlb	0	; () banked
 11337  005790  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11338  005792  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11339  005794  E01B               	bz	l842
 11340                           
 11341                           ; BSR set to: 0
 11342  005796  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11343  00579A  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11344  00579E  0E10               	movlw	16
 11345  0057A0  6F69               	movwf	(?_crc8+2)& (0+255),b
 11346  0057A2  EC49  F02E         	call	_crc8	;wreg free
 11347  0057A6  D012               	goto	l842
 11348  0057A8                     l838:
 11349  0057A8  A2AC               	btfss	4012,1,c	;volatile
 11350  0057AA  D7FE               	goto	l838
 11351                           
 11352                           ;main.c: 1720: WriteUSART(c);
 11353  0057AC  0100               	movlb	0	; () banked
 11354  0057AE  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11355  0057B0  EC36  F02F         	call	_WriteUSART
 11356                           
 11357                           ;main.c: 1721: if ((0) != pcrc) crc8(pcrc, c);
 11358  0057B4  0100               	movlb	0	; () banked
 11359  0057B6  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11360  0057B8  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11361  0057BA  E008               	bz	l842
 11362                           
 11363                           ; BSR set to: 0
 11364  0057BC  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11365  0057C0  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11366  0057C4  C06E  F069         	movff	sendEscapedUartData@c,?_crc8+2
 11367  0057C8  EC49  F02E         	call	_crc8	;wreg free
 11368  0057CC                     l842:
 11369                           
 11370                           ; BSR set to: 0
 11371  0057CC  0012               	return	
 11372  0057CE                     __end_of_sendEscapedUartData:
 11373                           	opt stack 0
 11374                           tblptru	equ	0xFF8
 11375                           tblptrh	equ	0xFF7
 11376                           tblptrl	equ	0xFF6
 11377                           tablat	equ	0xFF5
 11378                           prodh	equ	0xFF4
 11379                           prodl	equ	0xFF3
 11380                           intcon	equ	0xFF2
 11381                           indf0	equ	0xFEF
 11382                           postinc0	equ	0xFEE
 11383                           fsr0h	equ	0xFEA
 11384                           fsr0l	equ	0xFE9
 11385                           wreg	equ	0xFE8
 11386                           indf1	equ	0xFE7
 11387                           postinc1	equ	0xFE6
 11388                           postdec1	equ	0xFE5
 11389                           fsr1h	equ	0xFE2
 11390                           fsr1l	equ	0xFE1
 11391                           indf2	equ	0xFDF
 11392                           postinc2	equ	0xFDE
 11393                           postdec2	equ	0xFDD
 11394                           plusw2	equ	0xFDB
 11395                           fsr2h	equ	0xFDA
 11396                           fsr2l	equ	0xFD9
 11397                           status	equ	0xFD8
 11398                           
 11399 ;; *************** function _crc8 *****************
 11400 ;; Defined at:
 11401 ;;		line 47 in file "crc8.c"
 11402 ;; Parameters:    Size  Location     Type
 11403 ;;  crc             2    7[BANK0 ] PTR unsigned char 
 11404 ;;		 -> calcCRC@crc(1), sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), 
 11405 ;;		 -> receiveSendEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@cr
      +c(1), 
 11406 ;;		 -> sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 11407 ;;  m               1    9[BANK0 ] unsigned char 
 11408 ;; Auto vars:     Size  Location     Type
 11409 ;;		None
 11410 ;; Return value:  Size  Location     Type
 11411 ;;		None               void
 11412 ;; Registers used:
 11413 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11414 ;; Tracked objects:
 11415 ;;		On entry : F/0
 11416 ;;		On exit  : F/0
 11417 ;;		Unchanged: 0/0
 11418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11419 ;;      Params:         0       3       0       0       0       0       0
 11420 ;;      Locals:         0       0       0       0       0       0       0
 11421 ;;      Temps:          0       2       0       0       0       0       0
 11422 ;;      Totals:         0       5       0       0       0       0       0
 11423 ;;Total ram usage:        5 bytes
 11424 ;; Hardware stack levels used:    1
 11425 ;; Hardware stack levels required when called:    4
 11426 ;; This function calls:
 11427 ;;		_init_crc8
 11428 ;; This function is called by:
 11429 ;;		_sendEscapedUartData
 11430 ;;		_sendVSCPDriverErrorFrame
 11431 ;;		_sendVSCPDriverAck
 11432 ;;		_sendVSCPDriverNack
 11433 ;;		_sendVSCPDriverCommandReply
 11434 ;;		_receiveSendEventCANAL
 11435 ;;		_receiveSendMultiEventCANAL
 11436 ;;		_sendVSCPModeCapabilities
 11437 ;;		_calcCRC
 11438 ;; This function uses a non-reentrant model
 11439 ;;
 11440                           
 11441                           	psect	text20
 11442  005C92                     __ptext20:
 11443                           	opt stack 0
 11444  005C92                     _crc8:
 11445                           	opt stack 24
 11446                           
 11447                           ; BSR set to: 0
 11448                           ;crc8.c: 48: if ( !made_table ) {
 11449                           
 11450                           ; BSR set to: 0
 11451                           ;incstack = 0
 11452                           ;incstack = 0
 11453  005C92  5023               	movf	_made_table+1,w,c
 11454  005C94  1022               	iorwf	_made_table,w,c
 11455  005C96  B4D8               	btfsc	status,2,c
 11456                           
 11457                           ; BSR set to: 0
 11458                           ;crc8.c: 49: init_crc8();
 11459  005C98  ECED  F02A         	call	_init_crc8	;wreg free
 11460                           
 11461                           ; BSR set to: 0
 11462                           ;crc8.c: 50: }
 11463                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 11464  005C9C  C067  FFD9         	movff	crc8@crc,fsr2l
 11465  005CA0  C068  FFDA         	movff	crc8@crc+1,fsr2h
 11466  005CA4  50DF               	movf	indf2,w,c
 11467  005CA6  1969               	xorwf	crc8@m& (0+255),w,b
 11468  005CA8  6F6A               	movwf	??_crc8& (0+255),b
 11469  005CAA  6B6B               	clrf	(??_crc8+1)& (0+255),b
 11470  005CAC  0E00               	movlw	low _crc8_table
 11471  005CAE  0100               	movlb	0	; () banked
 11472  005CB0  256A               	addwf	??_crc8& (0+255),w,b
 11473  005CB2  6ED9               	movwf	fsr2l,c
 11474  005CB4  0E03               	movlw	high _crc8_table
 11475  005CB6  216B               	addwfc	(??_crc8+1)& (0+255),w,b
 11476  005CB8  6EDA               	movwf	fsr2h,c
 11477  005CBA  C067  FFE1         	movff	crc8@crc,fsr1l
 11478  005CBE  C068  FFE2         	movff	crc8@crc+1,fsr1h
 11479  005CC2  CFDF FFE7          	movff	indf2,indf1
 11480                           
 11481                           ; BSR set to: 0
 11482  005CC6  0012               	return	
 11483  005CC8                     __end_of_crc8:
 11484                           	opt stack 0
 11485                           tblptru	equ	0xFF8
 11486                           tblptrh	equ	0xFF7
 11487                           tblptrl	equ	0xFF6
 11488                           tablat	equ	0xFF5
 11489                           prodh	equ	0xFF4
 11490                           prodl	equ	0xFF3
 11491                           intcon	equ	0xFF2
 11492                           indf0	equ	0xFEF
 11493                           postinc0	equ	0xFEE
 11494                           fsr0h	equ	0xFEA
 11495                           fsr0l	equ	0xFE9
 11496                           wreg	equ	0xFE8
 11497                           indf1	equ	0xFE7
 11498                           postinc1	equ	0xFE6
 11499                           postdec1	equ	0xFE5
 11500                           fsr1h	equ	0xFE2
 11501                           fsr1l	equ	0xFE1
 11502                           indf2	equ	0xFDF
 11503                           postinc2	equ	0xFDE
 11504                           postdec2	equ	0xFDD
 11505                           plusw2	equ	0xFDB
 11506                           fsr2h	equ	0xFDA
 11507                           fsr2l	equ	0xFD9
 11508                           status	equ	0xFD8
 11509                           
 11510 ;; *************** function _init_crc8 *****************
 11511 ;; Defined at:
 11512 ;;		line 25 in file "crc8.c"
 11513 ;; Parameters:    Size  Location     Type
 11514 ;;		None
 11515 ;; Auto vars:     Size  Location     Type
 11516 ;;  i               2    5[BANK0 ] int 
 11517 ;;  j               2    2[BANK0 ] int 
 11518 ;;  crc             1    4[BANK0 ] unsigned char 
 11519 ;; Return value:  Size  Location     Type
 11520 ;;		None               void
 11521 ;; Registers used:
 11522 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11523 ;; Tracked objects:
 11524 ;;		On entry : F/0
 11525 ;;		On exit  : F/0
 11526 ;;		Unchanged: 0/0
 11527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11528 ;;      Params:         0       0       0       0       0       0       0
 11529 ;;      Locals:         0       7       0       0       0       0       0
 11530 ;;      Temps:          0       0       0       0       0       0       0
 11531 ;;      Totals:         0       7       0       0       0       0       0
 11532 ;;Total ram usage:        7 bytes
 11533 ;; Hardware stack levels used:    1
 11534 ;; Hardware stack levels required when called:    3
 11535 ;; This function calls:
 11536 ;;		Nothing
 11537 ;; This function is called by:
 11538 ;;		_main
 11539 ;;		_crc8
 11540 ;; This function uses a non-reentrant model
 11541 ;;
 11542                           
 11543                           	psect	text21
 11544  0055DA                     __ptext21:
 11545                           	opt stack 0
 11546  0055DA                     _init_crc8:
 11547                           	opt stack 24
 11548                           
 11549                           ; BSR set to: 0
 11550                           ;crc8.c: 26: int i,j;
 11551                           ;crc8.c: 27: unsigned char crc;
 11552                           ;crc8.c: 29: if (!made_table) {
 11553                           
 11554                           ; BSR set to: 0
 11555                           ;incstack = 0
 11556                           ;incstack = 0
 11557  0055DA  5023               	movf	_made_table+1,w,c
 11558  0055DC  1022               	iorwf	_made_table,w,c
 11559  0055DE  E131               	bnz	l1627
 11560                           
 11561                           ; BSR set to: 0
 11562                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 11563  0055E0  6B65               	clrf	init_crc8@i& (0+255),b
 11564  0055E2  6B66               	clrf	(init_crc8@i+1)& (0+255),b
 11565  0055E4                     l1619:
 11566                           
 11567                           ; BSR set to: 0
 11568                           ;crc8.c: 31: crc = i;
 11569  0055E4  C065  F064         	movff	init_crc8@i,init_crc8@crc
 11570                           
 11571                           ;crc8.c: 32: for (j=0; j<8; j++) {
 11572  0055E8  6B62               	clrf	init_crc8@j& (0+255),b
 11573  0055EA  6B63               	clrf	(init_crc8@j+1)& (0+255),b
 11574  0055EC                     l1621:
 11575                           
 11576                           ; BSR set to: 0
 11577                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 11578  0055EC  BF64               	btfsc	init_crc8@crc& (0+255),7,b
 11579  0055EE  D003               	goto	l10484
 11580                           
 11581                           ; BSR set to: 0
 11582  0055F0  6B60               	clrf	_init_crc8$2067& (0+255),b
 11583  0055F2  6B61               	clrf	(_init_crc8$2067+1)& (0+255),b
 11584  0055F4  D003               	goto	l10486
 11585  0055F6                     l10484:
 11586                           
 11587                           ; BSR set to: 0
 11588  0055F6  6B61               	clrf	(_init_crc8$2067+1)& (0+255),b
 11589  0055F8  0E07               	movlw	7
 11590  0055FA  6F60               	movwf	_init_crc8$2067& (0+255),b
 11591  0055FC                     l10486:
 11592                           
 11593                           ; BSR set to: 0
 11594  0055FC  5164               	movf	init_crc8@crc& (0+255),w,b
 11595  0055FE  2564               	addwf	init_crc8@crc& (0+255),w,b
 11596  005600  1960               	xorwf	_init_crc8$2067& (0+255),w,b
 11597  005602  6F64               	movwf	init_crc8@crc& (0+255),b
 11598                           
 11599                           ; BSR set to: 0
 11600  005604  4B62               	infsnz	init_crc8@j& (0+255),f,b
 11601  005606  2B63               	incf	(init_crc8@j+1)& (0+255),f,b
 11602                           
 11603                           ; BSR set to: 0
 11604  005608  5163               	movf	(init_crc8@j+1)& (0+255),w,b
 11605  00560A  0A80               	xorlw	128
 11606  00560C  0F80               	addlw	-128
 11607  00560E  0E08               	movlw	8
 11608  005610  B4D8               	btfsc	status,2,c
 11609  005612  5D62               	subwf	init_crc8@j& (0+255),w,b
 11610  005614  E3EB               	bnc	l1621
 11611                           
 11612                           ; BSR set to: 0
 11613                           ;crc8.c: 34: }
 11614                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 11615  005616  0E00               	movlw	low _crc8_table
 11616  005618  0100               	movlb	0	; () banked
 11617  00561A  2565               	addwf	init_crc8@i& (0+255),w,b
 11618  00561C  6ED9               	movwf	fsr2l,c
 11619  00561E  0E03               	movlw	high _crc8_table
 11620  005620  2166               	addwfc	(init_crc8@i+1)& (0+255),w,b
 11621  005622  6EDA               	movwf	fsr2h,c
 11622  005624  C064  FFDF         	movff	init_crc8@crc,indf2
 11623                           
 11624                           ; BSR set to: 0
 11625  005628  4B65               	infsnz	init_crc8@i& (0+255),f,b
 11626  00562A  2B66               	incf	(init_crc8@i+1)& (0+255),f,b
 11627                           
 11628                           ; BSR set to: 0
 11629  00562C  5166               	movf	(init_crc8@i+1)& (0+255),w,b
 11630  00562E  0A80               	xorlw	128
 11631  005630  0F7F               	addlw	-129
 11632  005632  0E00               	movlw	0
 11633  005634  B4D8               	btfsc	status,2,c
 11634  005636  5D65               	subwf	init_crc8@i& (0+255),w,b
 11635  005638  E3D5               	bnc	l1619
 11636                           
 11637                           ; BSR set to: 0
 11638                           ;crc8.c: 37: }
 11639                           ;crc8.c: 38: made_table=1;
 11640  00563A  0E00               	movlw	0
 11641  00563C  6E23               	movwf	_made_table+1,c
 11642  00563E  0E01               	movlw	1
 11643  005640  6E22               	movwf	_made_table,c
 11644  005642                     l1627:
 11645                           
 11646                           ; BSR set to: 0
 11647  005642  0012               	return	
 11648  005644                     __end_of_init_crc8:
 11649                           	opt stack 0
 11650                           tblptru	equ	0xFF8
 11651                           tblptrh	equ	0xFF7
 11652                           tblptrl	equ	0xFF6
 11653                           tablat	equ	0xFF5
 11654                           prodh	equ	0xFF4
 11655                           prodl	equ	0xFF3
 11656                           intcon	equ	0xFF2
 11657                           indf0	equ	0xFEF
 11658                           postinc0	equ	0xFEE
 11659                           fsr0h	equ	0xFEA
 11660                           fsr0l	equ	0xFE9
 11661                           wreg	equ	0xFE8
 11662                           indf1	equ	0xFE7
 11663                           postinc1	equ	0xFE6
 11664                           postdec1	equ	0xFE5
 11665                           fsr1h	equ	0xFE2
 11666                           fsr1l	equ	0xFE1
 11667                           indf2	equ	0xFDF
 11668                           postinc2	equ	0xFDE
 11669                           postdec2	equ	0xFDD
 11670                           plusw2	equ	0xFDB
 11671                           fsr2h	equ	0xFDA
 11672                           fsr2l	equ	0xFD9
 11673                           status	equ	0xFD8
 11674                           
 11675 ;; *************** function _doModeVerbose *****************
 11676 ;; Defined at:
 11677 ;;		line 584 in file "main.c"
 11678 ;; Parameters:    Size  Location     Type
 11679 ;;		None
 11680 ;; Auto vars:     Size  Location     Type
 11681 ;;  preg            2    6[BANK2 ] PTR unsigned char 
 11682 ;;		 -> STR_124(2), STR_122(2), STR_120(2), STR_118(2), 
 11683 ;;		 -> STR_115(2), STR_111(2), STR_109(2), STR_107(2), 
 11684 ;;		 -> STR_105(2), STR_102(2), STR_85(2), STR_83(2), 
 11685 ;;		 -> STR_81(2), STR_54(2), STR_52(2), STR_50(2), 
 11686 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11687 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11688 ;;  preg            2    4[BANK2 ] PTR unsigned char 
 11689 ;;		 -> STR_124(2), STR_122(2), STR_120(2), STR_118(2), 
 11690 ;;		 -> STR_115(2), STR_111(2), STR_109(2), STR_107(2), 
 11691 ;;		 -> STR_105(2), STR_102(2), STR_85(2), STR_83(2), 
 11692 ;;		 -> STR_81(2), STR_54(2), STR_52(2), STR_50(2), 
 11693 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11694 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11695 ;;  id              4   41[BANK2 ] unsigned long 
 11696 ;;  p               2   67[BANK2 ] PTR unsigned char 
 11697 ;;		 -> NULL(0), cmdbuf(80), 
 11698 ;;  mask_class      2   10[BANK2 ] unsigned short 
 11699 ;;  maskno          1   46[BANK2 ] unsigned char 
 11700 ;;  mask_nodeid     1   17[BANK2 ] unsigned char 
 11701 ;;  mask_type       1   16[BANK2 ] unsigned char 
 11702 ;;  mask_priorit    1   15[BANK2 ] unsigned char 
 11703 ;;  id              4    0[BANK2 ] unsigned long 
 11704 ;;  p               2   65[BANK2 ] PTR unsigned char 
 11705 ;;		 -> NULL(0), cmdbuf(80), 
 11706 ;;  filter_class    2    8[BANK2 ] unsigned short 
 11707 ;;  filterno        1   45[BANK2 ] unsigned char 
 11708 ;;  filter_nodei    1   14[BANK2 ] unsigned char 
 11709 ;;  filter_type     1   13[BANK2 ] unsigned char 
 11710 ;;  filter_prior    1   12[BANK2 ] unsigned char 
 11711 ;;  nodeid          1   54[BANK2 ] unsigned char 
 11712 ;;  p               2   60[BANK2 ] PTR unsigned char 
 11713 ;;		 -> NULL(0), cmdbuf(80), 
 11714 ;;  nodeid          1   51[BANK2 ] unsigned char 
 11715 ;;  value           1   48[BANK2 ] unsigned char 
 11716 ;;  reg             1   40[BANK2 ] unsigned char 
 11717 ;;  page            1   39[BANK2 ] unsigned char 
 11718 ;;  p               2   58[BANK2 ] PTR unsigned char 
 11719 ;;		 -> NULL(0), cmdbuf(80), 
 11720 ;;  value           1   57[BANK2 ] unsigned char 
 11721 ;;  i               1   55[BANK2 ] unsigned char 
 11722 ;;  reg             1   53[BANK2 ] unsigned char 
 11723 ;;  page            1   52[BANK2 ] unsigned char 
 11724 ;;  nodeid          1   50[BANK2 ] unsigned char 
 11725 ;;  count           1   49[BANK2 ] unsigned char 
 11726 ;;  rv              1   38[BANK2 ] enum E15660
 11727 ;;  p               2   63[BANK2 ] PTR unsigned char 
 11728 ;;		 -> NULL(0), cmdbuf(80), 
 11729 ;;  ifmode          1   62[BANK2 ] enum E16362
 11730 ;;  c               1   56[BANK2 ] unsigned char 
 11731 ;;  i               1   47[BANK2 ] unsigned char 
 11732 ;; Return value:  Size  Location     Type
 11733 ;;		None               void
 11734 ;; Registers used:
 11735 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11736 ;; Tracked objects:
 11737 ;;		On entry : F/1
 11738 ;;		On exit  : 0/0
 11739 ;;		Unchanged: 0/0
 11740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11741 ;;      Params:         0       0       0       0       0       0       0
 11742 ;;      Locals:         0       0       0      69       0       0       0
 11743 ;;      Temps:          0      20       0       0       0       0       0
 11744 ;;      Totals:         0      20       0      69       0       0       0
 11745 ;;Total ram usage:       89 bytes
 11746 ;; Hardware stack levels used:    1
 11747 ;; Hardware stack levels required when called:   10
 11748 ;; This function calls:
 11749 ;;		_vscp_restoreDefaults
 11750 ;;		_putsUSART
 11751 ;;		_printFirmwareVersion
 11752 ;;		_fifo_read
 11753 ;;		_ECANSetOperationMode
 11754 ;;		_setFilter
 11755 ;;		__CANIDToRegs
 11756 ;;		_Busy_eep
 11757 ;;		_Write_b_eep
 11758 ;;		_receivePrintEventVerbose
 11759 ;;		_WriteUSART
 11760 ;;		_stristr
 11761 ;;		_strtok
 11762 ;;		_atoi
 11763 ;;		_memset
 11764 ;;		_sendVSCPFrame
 11765 ;;		_printStatistics
 11766 ;;		_printErrors
 11767 ;;		_printHelp
 11768 ;;		_findNodes
 11769 ;;		_strcpy
 11770 ;;		_strchr
 11771 ;;		_readRegisterExtended
 11772 ;;		_sprintf
 11773 ;;		_printBinary
 11774 ;;		_writeRegisterExtended
 11775 ;;		_printNodeFirmwareVersion
 11776 ;;		_printGUID
 11777 ;;		_printMDF
 11778 ;; This function is called by:
 11779 ;;		_main
 11780 ;; This function uses a non-reentrant model
 11781 ;;
 11782                           
 11783                           	psect	text22
 11784  0002FE                     __ptext22:
 11785                           	opt stack 0
 11786  0002FE                     _doModeVerbose:
 11787                           	opt stack 20
 11788                           
 11789                           ; BSR set to: 1
 11790                           ;main.c: 585: uint8_t c;
 11791                           ;main.c: 586: uint8_t i;
 11792                           ;main.c: 589: if (!bSilent) {
 11793                           
 11794                           ; BSR set to: 0
 11795                           ;incstack = 0
 11796                           ;incstack = 0
 11797  0002FE  662F               	tstfsz	_bSilent,c
 11798  000300  D002               	goto	l14084
 11799                           
 11800                           ; BSR set to: 1
 11801                           ;main.c: 590: receivePrintEventVerbose();
 11802  000302  ECF9  F013         	call	_receivePrintEventVerbose	;wreg free
 11803  000306                     l14084:
 11804                           
 11805                           ;main.c: 591: }
 11806                           ;main.c: 594: (INTCONbits.GIE = 0);
 11807  000306  9EF2               	bcf	intcon,7,c	;volatile
 11808                           
 11809                           ;main.c: 596: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
 11810  000308  0E01               	movlw	high _serialInputFifo
 11811  00030A  0100               	movlb	0	; () banked
 11812  00030C  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 11813  00030E  0ED9               	movlw	low _serialInputFifo
 11814  000310  6F60               	movwf	?_fifo_read& (0+255),b
 11815  000312  0E02               	movlw	high doModeVerbose@c
 11816  000314  6F63               	movwf	(?_fifo_read+3)& (0+255),b
 11817  000316  0EB8               	movlw	low doModeVerbose@c
 11818  000318  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 11819  00031A  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 11820  00031C  0E01               	movlw	1
 11821  00031E  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 11822  000320  EC07  F024         	call	_fifo_read	;wreg free
 11823  000324  0560               	decf	?_fifo_read& (0+255),w,b
 11824  000326  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 11825  000328  E002 EF40  F00C    	bnz	l14802
 11826                           
 11827                           ; BSR set to: 0
 11828                           ;main.c: 599: (INTCONbits.GIE = 1);
 11829  00032E  8EF2               	bsf	intcon,7,c	;volatile
 11830                           
 11831                           ; BSR set to: 0
 11832                           ;main.c: 602: if ( bLocalEcho ) {
 11833  000330  502D               	movf	_bLocalEcho,w,c
 11834  000332  E00F               	bz	l14098
 11835                           
 11836                           ; BSR set to: 0
 11837                           ;main.c: 603: WriteUSART( c );
 11838  000334  0102               	movlb	2	; () banked
 11839  000336  51B8               	movf	doModeVerbose@c& (0+255),w,b
 11840  000338  EC36  F02F         	call	_WriteUSART
 11841  00033C                     l496:
 11842  00033C  A2AC               	btfss	4012,1,c	;volatile
 11843  00033E  D7FE               	goto	l496
 11844                           
 11845                           ;main.c: 605: if ( 0x0d == c ) {
 11846  000340  0102               	movlb	2	; () banked
 11847  000342  51B8               	movf	doModeVerbose@c& (0+255),w,b
 11848  000344  0A0D               	xorlw	13
 11849  000346  E105               	bnz	l14098
 11850                           
 11851                           ; BSR set to: 2
 11852                           ;main.c: 606: WriteUSART( 0x0a );
 11853  000348  0E0A               	movlw	10
 11854  00034A  EC36  F02F         	call	_WriteUSART
 11855  00034E                     l500:
 11856  00034E  A2AC               	btfss	4012,1,c	;volatile
 11857  000350  D7FE               	goto	l500
 11858  000352                     l14098:
 11859                           
 11860                           ;main.c: 608: }
 11861                           ;main.c: 609: }
 11862                           ;main.c: 612: cmdbuf[ pos++ ] = c;
 11863  000352  0E29               	movlw	low _cmdbuf
 11864  000354  2433               	addwf	_pos,w,c
 11865  000356  6ED9               	movwf	fsr2l,c
 11866  000358  6ADA               	clrf	fsr2h,c
 11867  00035A  0E01               	movlw	high _cmdbuf
 11868  00035C  22DA               	addwfc	fsr2h,f,c
 11869  00035E  0102               	movlb	2	; () banked
 11870  000360  C2B8  FFDF         	movff	doModeVerbose@c,indf2
 11871                           
 11872                           ; BSR set to: 2
 11873  000364  2A33               	incf	_pos,f,c
 11874                           
 11875                           ; BSR set to: 2
 11876                           ;main.c: 613: if (pos >= sizeof( cmdbuf ) ) {
 11877  000366  0E4F               	movlw	79
 11878  000368  6433               	cpfsgt	_pos,c
 11879  00036A  D001               	goto	l14106
 11880                           
 11881                           ; BSR set to: 2
 11882                           ;main.c: 616: pos = 0;
 11883  00036C  6A33               	clrf	_pos,c
 11884  00036E                     l14106:
 11885                           
 11886                           ; BSR set to: 2
 11887                           ;main.c: 617: }
 11888                           ;main.c: 620: if (0x0d == c) {
 11889  00036E  51B8               	movf	doModeVerbose@c& (0+255),w,b
 11890  000370  0A0D               	xorlw	13
 11891  000372  E002 EF40  F00C    	bnz	l14802
 11892                           
 11893                           ; BSR set to: 2
 11894                           ;main.c: 622: cmdbuf[ pos ] = 0;
 11895  000378  0E29               	movlw	low _cmdbuf
 11896  00037A  2433               	addwf	_pos,w,c
 11897  00037C  6ED9               	movwf	fsr2l,c
 11898  00037E  6ADA               	clrf	fsr2h,c
 11899  000380  0E01               	movlw	high _cmdbuf
 11900  000382  22DA               	addwfc	fsr2h,f,c
 11901  000384  6ADF               	clrf	indf2,c
 11902                           
 11903                           ; BSR set to: 1
 11904                           ;main.c: 625: if (cmdbuf == stristr(cmdbuf, "BOOT")) {
 11905  000386  0100               	movlb	0	; () banked
 11906  000388  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11907  00038A  0E29               	movlw	low _cmdbuf
 11908  00038C  6F6D               	movwf	?_stristr& (0+255),b
 11909  00038E  0E7F               	movlw	high STR_6
 11910  000390  6F70               	movwf	(?_stristr+3)& (0+255),b
 11911  000392  0EC5               	movlw	low STR_6
 11912  000394  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11913  000396  EC3B  F02A         	call	_stristr	;wreg free
 11914  00039A  0E29               	movlw	low _cmdbuf
 11915  00039C  6FCC               	movwf	??_doModeVerbose& (0+255),b
 11916  00039E  0E01               	movlw	high _cmdbuf
 11917  0003A0  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 11918  0003A2  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11919  0003A4  E102               	bnz	u18655
 11920  0003A6  516D               	movf	?_stristr& (0+255),w,b
 11921  0003A8  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 11922  0003AA                     u18655:
 11923  0003AA  E112               	bnz	l14118
 11924                           
 11925                           ; BSR set to: 0
 11926                           ;main.c: 626: putsUSART((char *) "Will enter bootloader now...\r\n");
 11927  0003AC  0E7A               	movlw	high STR_7
 11928  0003AE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11929  0003B0  0E83               	movlw	low STR_7
 11930  0003B2  6F61               	movwf	?_putsUSART& (0+255),b
 11931  0003B4  EC41  F02C         	call	_putsUSART	;wreg free
 11932                           
 11933                           ;main.c: 627: (Busy_eep(), Write_b_eep(0x00,0xFF));
 11934  0003B8  EC68  F02F         	call	_Busy_eep	;wreg free
 11935  0003BC  0100               	movlb	0	; () banked
 11936  0003BE  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 11937  0003C0  6B60               	clrf	?_Write_b_eep& (0+255),b
 11938  0003C2  0EFF               	movlw	255
 11939  0003C4  6962               	setf	(?_Write_b_eep+2)& (0+255),b
 11940  0003C6  EC64  F02E         	call	_Write_b_eep	;wreg free
 11941  0003CA  00FF               	reset		;# 
 11942                           
 11943                           ;main.c: 629: }
 11944  0003CC  EF33  F00C         	goto	l14798
 11945  0003D0                     l14118:
 11946                           
 11947                           ; BSR set to: 0
 11948                           ;main.c: 631: else if (cmdbuf == stristr(cmdbuf, "OPEN")) {
 11949  0003D0  ECDD  F00C         	call	PL70	;call to abstracted procedure
 11950  0003D4  EC3B  F02A         	call	_stristr	;wreg free
 11951  0003D8  0E29               	movlw	low _cmdbuf
 11952  0003DA  6FCC               	movwf	??_doModeVerbose& (0+255),b
 11953  0003DC  0E01               	movlw	high _cmdbuf
 11954  0003DE  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 11955  0003E0  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11956  0003E2  E102               	bnz	u18665
 11957  0003E4  516D               	movf	?_stristr& (0+255),w,b
 11958  0003E6  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 11959  0003E8                     u18665:
 11960  0003E8  E10C               	bnz	l14126
 11961                           
 11962                           ; BSR set to: 0
 11963                           ;main.c: 632: bSilent = 0;
 11964  0003EA  6A2F               	clrf	_bSilent,c
 11965                           
 11966                           ; BSR set to: 0
 11967                           ;main.c: 633: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11968  0003EC  0E00               	movlw	0
 11969  0003EE  EC1E  F02F         	call	_ECANSetOperationMode
 11970                           
 11971                           ; BSR set to: 0
 11972                           ;main.c: 634: putsUSART((char *) "+OK\r\n");
 11973  0003F2  0E7F               	movlw	high STR_9
 11974  0003F4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11975  0003F6  0E69               	movlw	low STR_9
 11976  0003F8  6F61               	movwf	?_putsUSART& (0+255),b
 11977  0003FA  EC41  F02C         	call	_putsUSART	;wreg free
 11978                           
 11979                           ;main.c: 635: }
 11980  0003FE  EF33  F00C         	goto	l14798
 11981  000402                     l14126:
 11982                           
 11983                           ; BSR set to: 0
 11984                           ;main.c: 637: else if (cmdbuf == stristr(cmdbuf, "SILENT")) {
 11985  000402  0E01               	movlw	high _cmdbuf
 11986  000404  ECE7  F00C         	call	PL78	;call to abstracted procedure
 11987  000408  EC3B  F02A         	call	_stristr	;wreg free
 11988  00040C  0E29               	movlw	low _cmdbuf
 11989  00040E  6FCC               	movwf	??_doModeVerbose& (0+255),b
 11990  000410  0E01               	movlw	high _cmdbuf
 11991  000412  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 11992  000414  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11993  000416  E102               	bnz	u18675
 11994  000418  516D               	movf	?_stristr& (0+255),w,b
 11995  00041A  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 11996  00041C                     u18675:
 11997  00041C  E10D               	bnz	l14134
 11998                           
 11999                           ; BSR set to: 0
 12000                           ;main.c: 638: bSilent = 1;
 12001  00041E  0E01               	movlw	1
 12002  000420  6E2F               	movwf	_bSilent,c
 12003                           
 12004                           ; BSR set to: 0
 12005                           ;main.c: 639: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 12006  000422  0E00               	movlw	0
 12007  000424  EC1E  F02F         	call	_ECANSetOperationMode
 12008                           
 12009                           ; BSR set to: 0
 12010                           ;main.c: 640: putsUSART((char *) "+OK\r\n");
 12011  000428  0E7F               	movlw	high STR_9
 12012  00042A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12013  00042C  0E69               	movlw	low STR_9
 12014  00042E  6F61               	movwf	?_putsUSART& (0+255),b
 12015  000430  EC41  F02C         	call	_putsUSART	;wreg free
 12016                           
 12017                           ;main.c: 641: }
 12018  000434  EF33  F00C         	goto	l14798
 12019  000438                     l14134:
 12020                           
 12021                           ; BSR set to: 0
 12022                           ;main.c: 643: else if (cmdbuf == stristr(cmdbuf, "CLOSE")) {
 12023  000438  0E01               	movlw	high _cmdbuf
 12024  00043A  0100               	movlb	0	; () banked
 12025  00043C  ECF0  F00C         	call	PL90	;call to abstracted procedure
 12026  000440  EC3B  F02A         	call	_stristr	;wreg free
 12027  000444  0E29               	movlw	low _cmdbuf
 12028  000446  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12029  000448  0E01               	movlw	high _cmdbuf
 12030  00044A  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12031  00044C  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12032  00044E  E102               	bnz	u18685
 12033  000450  516D               	movf	?_stristr& (0+255),w,b
 12034  000452  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12035  000454                     u18685:
 12036  000454  E10D               	bnz	l14142
 12037                           
 12038                           ; BSR set to: 0
 12039                           ;main.c: 644: bSilent = 1;
 12040  000456  0E01               	movlw	1
 12041  000458  6E2F               	movwf	_bSilent,c
 12042                           
 12043                           ; BSR set to: 0
 12044                           ;main.c: 645: ECANSetOperationMode(0x20);
 12045  00045A  0E20               	movlw	32
 12046  00045C  EC1E  F02F         	call	_ECANSetOperationMode
 12047                           
 12048                           ; BSR set to: 0
 12049                           ;main.c: 646: putsUSART((char *) "+OK\r\n");
 12050  000460  0E7F               	movlw	high STR_9
 12051  000462  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12052  000464  0E69               	movlw	low STR_9
 12053  000466  6F61               	movwf	?_putsUSART& (0+255),b
 12054  000468  EC41  F02C         	call	_putsUSART	;wreg free
 12055                           
 12056                           ;main.c: 647: }
 12057  00046C  EF33  F00C         	goto	l14798
 12058  000470                     l14142:
 12059                           
 12060                           ; BSR set to: 0
 12061                           ;main.c: 649: else if (cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 12062  000470  0E01               	movlw	high _cmdbuf
 12063  000472  0100               	movlb	0	; () banked
 12064  000474  EC00  F00D         	call	PL102	;call to abstracted procedure
 12065  000478  EC3B  F02A         	call	_stristr	;wreg free
 12066  00047C  0E29               	movlw	low _cmdbuf
 12067  00047E  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12068  000480  0E01               	movlw	high _cmdbuf
 12069  000482  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12070  000484  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12071  000486  E102               	bnz	u18695
 12072  000488  516D               	movf	?_stristr& (0+255),w,b
 12073  00048A  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12074  00048C                     u18695:
 12075  00048C  E10C               	bnz	l14150
 12076                           
 12077                           ; BSR set to: 0
 12078                           ;main.c: 650: bSilent = 0;
 12079  00048E  6A2F               	clrf	_bSilent,c
 12080                           
 12081                           ; BSR set to: 0
 12082                           ;main.c: 651: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 12083  000490  0E40               	movlw	64
 12084  000492  EC1E  F02F         	call	_ECANSetOperationMode
 12085                           
 12086                           ; BSR set to: 0
 12087                           ;main.c: 652: putsUSART((char *) "+OK\r\n");
 12088  000496  0E7F               	movlw	high STR_9
 12089  000498  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12090  00049A  0E69               	movlw	low STR_9
 12091  00049C  6F61               	movwf	?_putsUSART& (0+255),b
 12092  00049E  EC41  F02C         	call	_putsUSART	;wreg free
 12093                           
 12094                           ;main.c: 653: }
 12095  0004A2  EF33  F00C         	goto	l14798
 12096  0004A6                     l14150:
 12097                           
 12098                           ; BSR set to: 0
 12099                           ;main.c: 655: else if (cmdbuf == stristr(cmdbuf, "LISTEN")) {
 12100  0004A6  0E01               	movlw	high _cmdbuf
 12101  0004A8  0100               	movlb	0	; () banked
 12102  0004AA  ECF8  F00C         	call	PL98	;call to abstracted procedure
 12103  0004AE  EC3B  F02A         	call	_stristr	;wreg free
 12104  0004B2  0E29               	movlw	low _cmdbuf
 12105  0004B4  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12106  0004B6  0E01               	movlw	high _cmdbuf
 12107  0004B8  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12108  0004BA  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12109  0004BC  E102               	bnz	u18705
 12110  0004BE  516D               	movf	?_stristr& (0+255),w,b
 12111  0004C0  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12112  0004C2                     u18705:
 12113  0004C2  E10C               	bnz	l14158
 12114                           
 12115                           ; BSR set to: 0
 12116                           ;main.c: 656: bSilent = 0;
 12117  0004C4  6A2F               	clrf	_bSilent,c
 12118                           
 12119                           ; BSR set to: 0
 12120                           ;main.c: 657: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 12121  0004C6  0E60               	movlw	96
 12122  0004C8  EC1E  F02F         	call	_ECANSetOperationMode
 12123                           
 12124                           ; BSR set to: 0
 12125                           ;main.c: 658: putsUSART((char *) "+OK\r\n");
 12126  0004CC  0E7F               	movlw	high STR_9
 12127  0004CE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12128  0004D0  0E69               	movlw	low STR_9
 12129  0004D2  6F61               	movwf	?_putsUSART& (0+255),b
 12130  0004D4  EC41  F02C         	call	_putsUSART	;wreg free
 12131                           
 12132                           ;main.c: 659: }
 12133  0004D8  EF33  F00C         	goto	l14798
 12134  0004DC                     l14158:
 12135                           
 12136                           ; BSR set to: 0
 12137                           ;main.c: 661: else if (cmdbuf == stristr(cmdbuf, "VERSION")) {
 12138  0004DC  0E01               	movlw	high _cmdbuf
 12139  0004DE  0100               	movlb	0	; () banked
 12140  0004E0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12141  0004E2  0E29               	movlw	low _cmdbuf
 12142  0004E4  6F6D               	movwf	?_stristr& (0+255),b
 12143  0004E6  0E7E               	movlw	high STR_18
 12144  0004E8  6F70               	movwf	(?_stristr+3)& (0+255),b
 12145  0004EA  0EF7               	movlw	low STR_18
 12146  0004EC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12147  0004EE  EC3B  F02A         	call	_stristr	;wreg free
 12148  0004F2  0E29               	movlw	low _cmdbuf
 12149  0004F4  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12150  0004F6  0E01               	movlw	high _cmdbuf
 12151  0004F8  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12152  0004FA  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12153  0004FC  E102               	bnz	u18715
 12154  0004FE  516D               	movf	?_stristr& (0+255),w,b
 12155  000500  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12156  000502                     u18715:
 12157  000502  E10B               	bnz	l14164
 12158                           
 12159                           ; BSR set to: 0
 12160                           ;main.c: 662: printFirmwareVersion();
 12161  000504  EC2E  F029         	call	_printFirmwareVersion	;wreg free
 12162                           
 12163                           ;main.c: 663: putsUSART((char *) "+OK\r\n");
 12164  000508  0E7F               	movlw	high STR_9
 12165  00050A  0100               	movlb	0	; () banked
 12166  00050C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12167  00050E  0E69               	movlw	low STR_9
 12168  000510  6F61               	movwf	?_putsUSART& (0+255),b
 12169  000512  EC41  F02C         	call	_putsUSART	;wreg free
 12170                           
 12171                           ;main.c: 664: }
 12172  000516  EF33  F00C         	goto	l14798
 12173  00051A                     l14164:
 12174                           
 12175                           ; BSR set to: 0
 12176                           ;main.c: 666: else if (cmdbuf == stristr(cmdbuf, "IFMODE")) {
 12177  00051A  0E01               	movlw	high _cmdbuf
 12178  00051C  0100               	movlb	0	; () banked
 12179  00051E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12180  000520  0E29               	movlw	low _cmdbuf
 12181  000522  6F6D               	movwf	?_stristr& (0+255),b
 12182  000524  0E7F               	movlw	high STR_20
 12183  000526  6F70               	movwf	(?_stristr+3)& (0+255),b
 12184  000528  0E32               	movlw	low STR_20
 12185  00052A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12186  00052C  EC3B  F02A         	call	_stristr	;wreg free
 12187  000530  0E29               	movlw	low _cmdbuf
 12188  000532  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12189  000534  0E01               	movlw	high _cmdbuf
 12190  000536  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12191  000538  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12192  00053A  E102               	bnz	u18725
 12193  00053C  516D               	movf	?_stristr& (0+255),w,b
 12194  00053E  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12195  000540                     u18725:
 12196  000540  E165               	bnz	l14200
 12197                           
 12198                           ; BSR set to: 0
 12199                           ;main.c: 667: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 12200  000542  506F               	movf	3951,w,c	;volatile
 12201  000544  0BE0               	andlw	224
 12202  000546  0102               	movlb	2	; () banked
 12203  000548  6FBE               	movwf	doModeVerbose@ifmode& (0+255),b
 12204                           
 12205                           ; BSR set to: 2
 12206                           ;main.c: 668: if ((ECAN_OP_MODE_NORMAL == ifmode) & !bSilent) {
 12207  00054A  67BE               	tstfsz	doModeVerbose@ifmode& (0+255),b
 12208  00054C  D00B               	goto	l14174
 12209                           
 12210                           ; BSR set to: 2
 12211  00054E  662F               	tstfsz	_bSilent,c
 12212  000550  D009               	goto	l14174
 12213                           
 12214                           ; BSR set to: 2
 12215                           ;main.c: 669: putsUSART((char *) "+OK - Normal mode\r\n");
 12216  000552  0E7D               	movlw	high STR_21
 12217  000554  0100               	movlb	0	; () banked
 12218  000556  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12219  000558  0E32               	movlw	low STR_21
 12220  00055A  6F61               	movwf	?_putsUSART& (0+255),b
 12221  00055C  EC41  F02C         	call	_putsUSART	;wreg free
 12222                           
 12223                           ;main.c: 670: }
 12224  000560  EF33  F00C         	goto	l14798
 12225  000564                     l14174:
 12226                           
 12227                           ; BSR set to: 2
 12228                           ;main.c: 671: else if ((ECAN_OP_MODE_NORMAL == ifmode) & bSilent) {
 12229  000564  51BE               	movf	doModeVerbose@ifmode& (0+255),w,b
 12230  000566  0E01               	movlw	1
 12231  000568  A4D8               	btfss	status,2,c
 12232  00056A  0E00               	movlw	0
 12233  00056C  142F               	andwf	_bSilent,w,c
 12234  00056E  E009               	bz	l14178
 12235                           
 12236                           ; BSR set to: 2
 12237                           ;main.c: 672: putsUSART((char *) "+OK - Silent mode\r\n");
 12238  000570  0E7D               	movlw	high STR_22
 12239  000572  0100               	movlb	0	; () banked
 12240  000574  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12241  000576  0E46               	movlw	low STR_22
 12242  000578  6F61               	movwf	?_putsUSART& (0+255),b
 12243  00057A  EC41  F02C         	call	_putsUSART	;wreg free
 12244                           
 12245                           ;main.c: 673: }
 12246  00057E  EF33  F00C         	goto	l14798
 12247  000582                     l14178:
 12248                           
 12249                           ; BSR set to: 2
 12250                           ;main.c: 674: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 12251  000582  51BE               	movf	doModeVerbose@ifmode& (0+255),w,b
 12252  000584  0A20               	xorlw	32
 12253  000586  E109               	bnz	l14182
 12254                           
 12255                           ; BSR set to: 2
 12256                           ;main.c: 675: putsUSART((char *) "+OK - Sleep mode\r\n");
 12257  000588  0E7D               	movlw	high STR_23
 12258  00058A  0100               	movlb	0	; () banked
 12259  00058C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12260  00058E  0E82               	movlw	low STR_23
 12261  000590  6F61               	movwf	?_putsUSART& (0+255),b
 12262  000592  EC41  F02C         	call	_putsUSART	;wreg free
 12263                           
 12264                           ;main.c: 676: }
 12265  000596  EF33  F00C         	goto	l14798
 12266  00059A                     l14182:
 12267                           
 12268                           ; BSR set to: 2
 12269                           ;main.c: 677: else if (ECAN_OP_MODE_LOOP == ifmode) {
 12270  00059A  51BE               	movf	doModeVerbose@ifmode& (0+255),w,b
 12271  00059C  0A40               	xorlw	64
 12272  00059E  E109               	bnz	l14186
 12273                           
 12274                           ; BSR set to: 2
 12275                           ;main.c: 678: putsUSART((char *) "+OK - Loopback mode\r\n");
 12276  0005A0  0E7C               	movlw	high STR_24
 12277  0005A2  0100               	movlb	0	; () banked
 12278  0005A4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12279  0005A6  0EB5               	movlw	low STR_24
 12280  0005A8  6F61               	movwf	?_putsUSART& (0+255),b
 12281  0005AA  EC41  F02C         	call	_putsUSART	;wreg free
 12282                           
 12283                           ;main.c: 679: }
 12284  0005AE  EF33  F00C         	goto	l14798
 12285  0005B2                     l14186:
 12286                           
 12287                           ; BSR set to: 2
 12288                           ;main.c: 680: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 12289  0005B2  51BE               	movf	doModeVerbose@ifmode& (0+255),w,b
 12290  0005B4  0A60               	xorlw	96
 12291  0005B6  E109               	bnz	l14190
 12292                           
 12293                           ; BSR set to: 2
 12294                           ;main.c: 681: putsUSART((char *) "+OK - Listen only mode\r\n");
 12295  0005B8  0E7B               	movlw	high STR_25
 12296  0005BA  0100               	movlb	0	; () banked
 12297  0005BC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12298  0005BE  0E65               	movlw	low STR_25
 12299  0005C0  6F61               	movwf	?_putsUSART& (0+255),b
 12300  0005C2  EC41  F02C         	call	_putsUSART	;wreg free
 12301                           
 12302                           ;main.c: 682: }
 12303  0005C6  EF33  F00C         	goto	l14798
 12304  0005CA                     l14190:
 12305                           
 12306                           ; BSR set to: 2
 12307                           ;main.c: 683: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 12308  0005CA  51BE               	movf	doModeVerbose@ifmode& (0+255),w,b
 12309  0005CC  0A80               	xorlw	128
 12310  0005CE  E109               	bnz	l14194
 12311                           
 12312                           ; BSR set to: 2
 12313                           ;main.c: 684: putsUSART((char *) "+OK - Closed mode\r\n");
 12314  0005D0  0E7D               	movlw	high STR_26
 12315  0005D2  0100               	movlb	0	; () banked
 12316  0005D4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12317  0005D6  0E1E               	movlw	low STR_26
 12318  0005D8  6F61               	movwf	?_putsUSART& (0+255),b
 12319  0005DA  EC41  F02C         	call	_putsUSART	;wreg free
 12320                           
 12321                           ;main.c: 685: }
 12322  0005DE  EF33  F00C         	goto	l14798
 12323  0005E2                     l14194:
 12324                           
 12325                           ; BSR set to: 2
 12326                           ;main.c: 686: else if (ECAN_OP_MODE_BITS == ifmode) {
 12327  0005E2  51BE               	movf	doModeVerbose@ifmode& (0+255),w,b
 12328  0005E4  0AE0               	xorlw	224
 12329  0005E6  E109               	bnz	l14198
 12330                           
 12331                           ; BSR set to: 2
 12332                           ;main.c: 687: putsUSART((char *) "+OK - Bits mode\r\n");
 12333  0005E8  0E7D               	movlw	high STR_27
 12334  0005EA  0100               	movlb	0	; () banked
 12335  0005EC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12336  0005EE  0E95               	movlw	low STR_27
 12337  0005F0  6F61               	movwf	?_putsUSART& (0+255),b
 12338  0005F2  EC41  F02C         	call	_putsUSART	;wreg free
 12339                           
 12340                           ;main.c: 688: }
 12341  0005F6  EF33  F00C         	goto	l14798
 12342  0005FA                     l14198:
 12343                           
 12344                           ; BSR set to: 2
 12345                           ;main.c: 689: else {
 12346                           ;main.c: 690: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 12347  0005FA  0E7B               	movlw	high STR_28
 12348  0005FC  0100               	movlb	0	; () banked
 12349  0005FE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12350  000600  0EF8               	movlw	low STR_28
 12351  000602  6F61               	movwf	?_putsUSART& (0+255),b
 12352  000604  EC41  F02C         	call	_putsUSART	;wreg free
 12353  000608  EF33  F00C         	goto	l14798
 12354  00060C                     l14200:
 12355                           
 12356                           ; BSR set to: 0
 12357                           ;main.c: 695: else if (cmdbuf == stristr(cmdbuf, "TX")) {
 12358  00060C  0E01               	movlw	high _cmdbuf
 12359  00060E  0100               	movlb	0	; () banked
 12360  000610  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12361  000612  0E29               	movlw	low _cmdbuf
 12362  000614  6F6D               	movwf	?_stristr& (0+255),b
 12363  000616  0E7F               	movlw	high STR_29
 12364  000618  6F70               	movwf	(?_stristr+3)& (0+255),b
 12365  00061A  0EEB               	movlw	low STR_29
 12366  00061C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12367  00061E  EC3B  F02A         	call	_stristr	;wreg free
 12368  000622  0E29               	movlw	low _cmdbuf
 12369  000624  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12370  000626  0E01               	movlw	high _cmdbuf
 12371  000628  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12372  00062A  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12373  00062C  E102               	bnz	u18825
 12374  00062E  516D               	movf	?_stristr& (0+255),w,b
 12375  000630  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12376  000632                     u18825:
 12377  000632  E001 D0CF          	bnz	l14254
 12378                           
 12379                           ; BSR set to: 0
 12380                           ;main.c: 697: char *p = strtok(cmdbuf, ",");
 12381  000636  EC99  F00C         	call	PL30	;call to abstracted procedure
 12382  00063A  ECE5  F028         	call	_strtok	;wreg free
 12383  00063E  C06C  F2BF         	movff	?_strtok,doModeVerbose@p
 12384  000642  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p+1
 12385                           
 12386                           ; BSR set to: 0
 12387                           ;main.c: 700: vscpPriority = 3;
 12388  000646  0E03               	movlw	3
 12389  000648  6E3C               	movwf	_vscpPriority,c
 12390                           
 12391                           ; BSR set to: 0
 12392                           ;main.c: 701: if ((0) != p) {
 12393  00064A  0102               	movlb	2	; () banked
 12394  00064C  51C0               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12395  00064E  11BF               	iorwf	doModeVerbose@p& (0+255),w,b
 12396  000650  E008               	bz	l14210
 12397                           
 12398                           ; BSR set to: 2
 12399                           ;main.c: 702: vscpPriority = atoi(p);
 12400  000652  C2BF  F066         	movff	doModeVerbose@p,?_atoi
 12401  000656  C2C0  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12402  00065A  EC43  F020         	call	_atoi	;wreg free
 12403  00065E  5166               	movf	?_atoi& (0+255),w,b
 12404  000660  6E3C               	movwf	_vscpPriority,c
 12405  000662                     l14210:
 12406                           
 12407                           ;main.c: 703: }
 12408                           ;main.c: 706: vscpClass = 0;
 12409  000662  6A37               	clrf	_vscpClass,c
 12410  000664  6A38               	clrf	_vscpClass+1,c
 12411                           
 12412                           ;main.c: 707: if ((0) != (p = strtok((0), ","))) {
 12413  000666  EC5D  F00C         	call	PL6	;call to abstracted procedure
 12414  00066A  ECE5  F028         	call	_strtok	;wreg free
 12415  00066E  C06C  F2BF         	movff	?_strtok,doModeVerbose@p
 12416  000672  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p+1
 12417  000676  0102               	movlb	2	; () banked
 12418  000678  51C0               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12419  00067A  11BF               	iorwf	doModeVerbose@p& (0+255),w,b
 12420  00067C  E00A               	bz	l14216
 12421                           
 12422                           ; BSR set to: 2
 12423                           ;main.c: 708: vscpClass = atoi(p);
 12424  00067E  C2BF  F066         	movff	doModeVerbose@p,?_atoi
 12425  000682  C2C0  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12426  000686  EC43  F020         	call	_atoi	;wreg free
 12427  00068A  C066  F037         	movff	?_atoi,_vscpClass
 12428  00068E  C067  F038         	movff	?_atoi+1,_vscpClass+1
 12429  000692                     l14216:
 12430                           
 12431                           ;main.c: 709: }
 12432                           ;main.c: 712: vscpType = 0;
 12433  000692  6A3E               	clrf	_vscpType,c
 12434                           
 12435                           ;main.c: 713: if ((0) != (p = strtok((0), ","))) {
 12436  000694  EC5D  F00C         	call	PL6	;call to abstracted procedure
 12437  000698  ECE5  F028         	call	_strtok	;wreg free
 12438  00069C  C06C  F2BF         	movff	?_strtok,doModeVerbose@p
 12439  0006A0  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p+1
 12440  0006A4  0102               	movlb	2	; () banked
 12441  0006A6  51C0               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12442  0006A8  11BF               	iorwf	doModeVerbose@p& (0+255),w,b
 12443  0006AA  E008               	bz	l14222
 12444                           
 12445                           ; BSR set to: 2
 12446                           ;main.c: 714: vscpType = atoi(p);
 12447  0006AC  C2BF  F066         	movff	doModeVerbose@p,?_atoi
 12448  0006B0  C2C0  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12449  0006B4  EC43  F020         	call	_atoi	;wreg free
 12450  0006B8  5166               	movf	?_atoi& (0+255),w,b
 12451  0006BA  6E3E               	movwf	_vscpType,c
 12452  0006BC                     l14222:
 12453                           
 12454                           ;main.c: 715: }
 12455                           ;main.c: 718: vscpNodeId = 0;
 12456  0006BC  6A3B               	clrf	_vscpNodeId,c
 12457                           
 12458                           ;main.c: 719: if ((0) != (p = strtok((0), ","))) {
 12459  0006BE  EC5D  F00C         	call	PL6	;call to abstracted procedure
 12460  0006C2  ECE5  F028         	call	_strtok	;wreg free
 12461  0006C6  C06C  F2BF         	movff	?_strtok,doModeVerbose@p
 12462  0006CA  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p+1
 12463  0006CE  0102               	movlb	2	; () banked
 12464  0006D0  51C0               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12465  0006D2  11BF               	iorwf	doModeVerbose@p& (0+255),w,b
 12466  0006D4  E008               	bz	l14228
 12467                           
 12468                           ; BSR set to: 2
 12469                           ;main.c: 720: vscpNodeId = atoi(p);
 12470  0006D6  C2BF  F066         	movff	doModeVerbose@p,?_atoi
 12471  0006DA  C2C0  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12472  0006DE  EC43  F020         	call	_atoi	;wreg free
 12473  0006E2  5166               	movf	?_atoi& (0+255),w,b
 12474  0006E4  6E3B               	movwf	_vscpNodeId,c
 12475  0006E6                     l14228:
 12476                           
 12477                           ;main.c: 721: }
 12478                           ;main.c: 724: vscpSize = 0;
 12479  0006E6  6A3D               	clrf	_vscpSize,c
 12480                           
 12481                           ;main.c: 725: if ((0) != (p = strtok((0), ","))) {
 12482  0006E8  EC5D  F00C         	call	PL6	;call to abstracted procedure
 12483  0006EC  ECE5  F028         	call	_strtok	;wreg free
 12484  0006F0  C06C  F2BF         	movff	?_strtok,doModeVerbose@p
 12485  0006F4  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p+1
 12486  0006F8  0102               	movlb	2	; () banked
 12487  0006FA  51C0               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12488  0006FC  11BF               	iorwf	doModeVerbose@p& (0+255),w,b
 12489  0006FE  E008               	bz	l14234
 12490                           
 12491                           ; BSR set to: 2
 12492                           ;main.c: 726: vscpSize = atoi(p);
 12493  000700  C2BF  F066         	movff	doModeVerbose@p,?_atoi
 12494  000704  C2C0  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12495  000708  EC43  F020         	call	_atoi	;wreg free
 12496  00070C  5166               	movf	?_atoi& (0+255),w,b
 12497  00070E  6E3D               	movwf	_vscpSize,c
 12498  000710                     l14234:
 12499                           
 12500                           ;main.c: 727: }
 12501                           ;main.c: 729: memset( vscpData, 0, 8 );
 12502  000710  0E01               	movlw	high _vscpData
 12503  000712  0100               	movlb	0	; () banked
 12504  000714  6F61               	movwf	(?_memset+1)& (0+255),b
 12505  000716  0EE1               	movlw	low _vscpData
 12506  000718  6F60               	movwf	?_memset& (0+255),b
 12507  00071A  6B63               	clrf	(?_memset+3)& (0+255),b
 12508  00071C  6B62               	clrf	(?_memset+2)& (0+255),b
 12509  00071E  6B65               	clrf	(?_memset+5)& (0+255),b
 12510  000720  0E08               	movlw	8
 12511  000722  6F64               	movwf	(?_memset+4)& (0+255),b
 12512  000724  ECC5  F02E         	call	_memset	;wreg free
 12513                           
 12514                           ; BSR set to: 0
 12515                           ;main.c: 730: for (i = 0; i < vscpSize; i++) {
 12516  000728  0102               	movlb	2	; () banked
 12517  00072A  6BAF               	clrf	doModeVerbose@i& (0+255),b
 12518  00072C  D01D               	goto	l14244
 12519  00072E                     l14238:
 12520                           
 12521                           ; BSR set to: 2
 12522                           ;main.c: 731: if ((0) != (p = strtok((0), ","))) {
 12523  00072E  EC5D  F00C         	call	PL6	;call to abstracted procedure
 12524  000732  ECE5  F028         	call	_strtok	;wreg free
 12525  000736  C06C  F2BF         	movff	?_strtok,doModeVerbose@p
 12526  00073A  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p+1
 12527  00073E  0102               	movlb	2	; () banked
 12528  000740  51C0               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12529  000742  11BF               	iorwf	doModeVerbose@p& (0+255),w,b
 12530  000744  E014               	bz	l14246
 12531                           
 12532                           ; BSR set to: 2
 12533                           ;main.c: 732: vscpData[ i ] = atoi(p);
 12534  000746  0EE1               	movlw	low _vscpData
 12535  000748  25AF               	addwf	doModeVerbose@i& (0+255),w,b
 12536  00074A  6ED9               	movwf	fsr2l,c
 12537  00074C  6ADA               	clrf	fsr2h,c
 12538  00074E  0101               	movlb	1	; () banked
 12539  000750  0E01               	movlw	high _vscpData
 12540  000752  22DA               	addwfc	fsr2h,f,c
 12541  000754  C2BF  F066         	movff	doModeVerbose@p,?_atoi
 12542  000758  C2C0  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12543  00075C  EC43  F020         	call	_atoi	;wreg free
 12544  000760  5166               	movf	?_atoi& (0+255),w,b
 12545  000762  6EDF               	movwf	indf2,c
 12546                           
 12547                           ; BSR set to: 0
 12548                           
 12549                           ;main.c: 733: }
 12550  000764  0102               	movlb	2	; () banked
 12551  000766  2BAF               	incf	doModeVerbose@i& (0+255),f,b
 12552  000768                     l14244:
 12553                           
 12554                           ; BSR set to: 2
 12555  000768  503D               	movf	_vscpSize,w,c
 12556  00076A  5DAF               	subwf	doModeVerbose@i& (0+255),w,b
 12557  00076C  E3E0               	bnc	l14238
 12558  00076E                     l14246:
 12559                           
 12560                           ; BSR set to: 2
 12561                           ;main.c: 736: }
 12562                           ;main.c: 737: }
 12563                           ;main.c: 739: if ( sendVSCPFrame(vscpClass,
 12564                           ;main.c: 740: vscpType,
 12565                           ;main.c: 741: vscpNodeId,
 12566                           ;main.c: 742: vscpPriority,
 12567                           ;main.c: 743: vscpSize,
 12568                           ;main.c: 744: vscpData ) ) {
 12569  00076E  C037  F098         	movff	_vscpClass,?_sendVSCPFrame
 12570  000772  C038  F099         	movff	_vscpClass+1,?_sendVSCPFrame+1
 12571  000776  C03E  F09A         	movff	_vscpType,?_sendVSCPFrame+2
 12572  00077A  C03B  F09B         	movff	_vscpNodeId,?_sendVSCPFrame+3
 12573  00077E  C03C  F09C         	movff	_vscpPriority,?_sendVSCPFrame+4
 12574  000782  C03D  F09D         	movff	_vscpSize,?_sendVSCPFrame+5
 12575  000786  0E01               	movlw	high _vscpData
 12576  000788  0100               	movlb	0	; () banked
 12577  00078A  6F9F               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 12578  00078C  0EE1               	movlw	low _vscpData
 12579  00078E  6F9E               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 12580  000790  EC5B  F026         	call	_sendVSCPFrame	;wreg free
 12581  000794  0900               	iorlw	0
 12582  000796  E015               	bz	l14252
 12583                           
 12584                           ;main.c: 746: cntTxFrames++;
 12585  000798  0101               	movlb	1	; () banked
 12586  00079A  2B14               	incf	_cntTxFrames& (0+255),f,b
 12587  00079C  0E00               	movlw	0
 12588  00079E  2315               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 12589  0007A0  2316               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 12590  0007A2  2317               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 12591                           
 12592                           ;main.c: 747: cntTxBytes += vscpSize;
 12593  0007A4  503D               	movf	_vscpSize,w,c
 12594  0007A6  2710               	addwf	_cntTxBytes& (0+255),f,b
 12595  0007A8  0E00               	movlw	0
 12596  0007AA  2311               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 12597  0007AC  2312               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 12598  0007AE  2313               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 12599                           
 12600                           ; BSR set to: 1
 12601                           ;main.c: 748: putsUSART((char *) "+OK\r\n");
 12602  0007B0  0E7F               	movlw	high STR_9
 12603  0007B2  0100               	movlb	0	; () banked
 12604  0007B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12605  0007B6  0E69               	movlw	low STR_9
 12606  0007B8  6F61               	movwf	?_putsUSART& (0+255),b
 12607  0007BA  EC41  F02C         	call	_putsUSART	;wreg free
 12608                           
 12609                           ;main.c: 749: }
 12610  0007BE  EF33  F00C         	goto	l14798
 12611  0007C2                     l14252:
 12612                           
 12613                           ;main.c: 750: else {
 12614                           ;main.c: 751: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 12615  0007C2  0E7A               	movlw	high STR_37
 12616  0007C4  0100               	movlb	0	; () banked
 12617  0007C6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12618  0007C8  0E00               	movlw	low STR_37
 12619  0007CA  6F61               	movwf	?_putsUSART& (0+255),b
 12620  0007CC  EC41  F02C         	call	_putsUSART	;wreg free
 12621  0007D0  EF33  F00C         	goto	l14798
 12622  0007D4                     l14254:
 12623                           
 12624                           ; BSR set to: 0
 12625                           ;main.c: 755: else if (cmdbuf == stristr(cmdbuf, "RX")) {
 12626  0007D4  0E01               	movlw	high _cmdbuf
 12627  0007D6  0100               	movlb	0	; () banked
 12628  0007D8  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12629  0007DA  0E29               	movlw	low _cmdbuf
 12630  0007DC  6F6D               	movwf	?_stristr& (0+255),b
 12631  0007DE  0E7F               	movlw	high STR_38
 12632  0007E0  6F70               	movwf	(?_stristr+3)& (0+255),b
 12633  0007E2  0EE8               	movlw	low STR_38
 12634  0007E4  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12635  0007E6  EC3B  F02A         	call	_stristr	;wreg free
 12636  0007EA  0E29               	movlw	low _cmdbuf
 12637  0007EC  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12638  0007EE  0E01               	movlw	high _cmdbuf
 12639  0007F0  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12640  0007F2  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12641  0007F4  E102               	bnz	u18915
 12642  0007F6  516D               	movf	?_stristr& (0+255),w,b
 12643  0007F8  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12644  0007FA                     u18915:
 12645  0007FA  E116               	bnz	l14262
 12646                           
 12647                           ; BSR set to: 0
 12648                           ;main.c: 756: if (receivePrintEventVerbose()) {
 12649  0007FC  ECF9  F013         	call	_receivePrintEventVerbose	;wreg free
 12650  000800  0900               	iorlw	0
 12651  000802  E009               	bz	l14260
 12652                           
 12653                           ;main.c: 757: putsUSART((char *) "+OK\r\n");
 12654  000804  0E7F               	movlw	high STR_9
 12655  000806  0100               	movlb	0	; () banked
 12656  000808  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12657  00080A  0E69               	movlw	low STR_9
 12658  00080C  6F61               	movwf	?_putsUSART& (0+255),b
 12659  00080E  EC41  F02C         	call	_putsUSART	;wreg free
 12660                           
 12661                           ;main.c: 758: }
 12662  000812  EF33  F00C         	goto	l14798
 12663  000816                     l14260:
 12664                           
 12665                           ;main.c: 759: else {
 12666                           ;main.c: 760: putsUSART((char *) "+OK - no events\r\n");
 12667  000816  0E7D               	movlw	high STR_40
 12668  000818  0100               	movlb	0	; () banked
 12669  00081A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12670  00081C  0EA7               	movlw	low STR_40
 12671  00081E  6F61               	movwf	?_putsUSART& (0+255),b
 12672  000820  EC41  F02C         	call	_putsUSART	;wreg free
 12673  000824  EF33  F00C         	goto	l14798
 12674  000828                     l14262:
 12675                           
 12676                           ; BSR set to: 0
 12677                           ;main.c: 764: else if (cmdbuf == stristr(cmdbuf, "STAT")) {
 12678  000828  0E01               	movlw	high _cmdbuf
 12679  00082A  0100               	movlb	0	; () banked
 12680  00082C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12681  00082E  0E29               	movlw	low _cmdbuf
 12682  000830  6F6D               	movwf	?_stristr& (0+255),b
 12683  000832  0E7F               	movlw	high STR_41
 12684  000834  6F70               	movwf	(?_stristr+3)& (0+255),b
 12685  000836  0EC0               	movlw	low STR_41
 12686  000838  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12687  00083A  EC3B  F02A         	call	_stristr	;wreg free
 12688  00083E  0E29               	movlw	low _cmdbuf
 12689  000840  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12690  000842  0E01               	movlw	high _cmdbuf
 12691  000844  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12692  000846  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12693  000848  E102               	bnz	u18935
 12694  00084A  516D               	movf	?_stristr& (0+255),w,b
 12695  00084C  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12696  00084E                     u18935:
 12697  00084E  E10B               	bnz	l14268
 12698                           
 12699                           ; BSR set to: 0
 12700                           ;main.c: 765: printStatistics();
 12701  000850  ECD3  F01A         	call	_printStatistics	;wreg free
 12702                           
 12703                           ;main.c: 766: putsUSART((char *) "+OK\r\n");
 12704  000854  0E7F               	movlw	high STR_9
 12705  000856  0100               	movlb	0	; () banked
 12706  000858  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12707  00085A  0E69               	movlw	low STR_9
 12708  00085C  6F61               	movwf	?_putsUSART& (0+255),b
 12709  00085E  EC41  F02C         	call	_putsUSART	;wreg free
 12710                           
 12711                           ;main.c: 767: }
 12712  000862  EF33  F00C         	goto	l14798
 12713  000866                     l14268:
 12714                           
 12715                           ; BSR set to: 0
 12716                           ;main.c: 769: else if (cmdbuf == stristr(cmdbuf, "ERR")) {
 12717  000866  0E01               	movlw	high _cmdbuf
 12718  000868  0100               	movlb	0	; () banked
 12719  00086A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12720  00086C  0E29               	movlw	low _cmdbuf
 12721  00086E  6F6D               	movwf	?_stristr& (0+255),b
 12722  000870  0E7F               	movlw	high STR_43
 12723  000872  6F70               	movwf	(?_stristr+3)& (0+255),b
 12724  000874  0ED6               	movlw	low STR_43
 12725  000876  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12726  000878  EC3B  F02A         	call	_stristr	;wreg free
 12727  00087C  0E29               	movlw	low _cmdbuf
 12728  00087E  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12729  000880  0E01               	movlw	high _cmdbuf
 12730  000882  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12731  000884  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12732  000886  E102               	bnz	u18945
 12733  000888  516D               	movf	?_stristr& (0+255),w,b
 12734  00088A  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12735  00088C                     u18945:
 12736  00088C  E10B               	bnz	l14274
 12737                           
 12738                           ; BSR set to: 0
 12739                           ;main.c: 770: printErrors();
 12740  00088E  EC95  F012         	call	_printErrors	;wreg free
 12741                           
 12742                           ;main.c: 771: putsUSART((char *) "+OK\r\n");
 12743  000892  0E7F               	movlw	high STR_9
 12744  000894  0100               	movlb	0	; () banked
 12745  000896  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12746  000898  0E69               	movlw	low STR_9
 12747  00089A  6F61               	movwf	?_putsUSART& (0+255),b
 12748  00089C  EC41  F02C         	call	_putsUSART	;wreg free
 12749                           
 12750                           ;main.c: 772: }
 12751  0008A0  EF33  F00C         	goto	l14798
 12752  0008A4                     l14274:
 12753                           
 12754                           ; BSR set to: 0
 12755                           ;main.c: 774: else if (cmdbuf == stristr(cmdbuf, "HELP")) {
 12756  0008A4  0E01               	movlw	high _cmdbuf
 12757  0008A6  0100               	movlb	0	; () banked
 12758  0008A8  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12759  0008AA  0E29               	movlw	low _cmdbuf
 12760  0008AC  6F6D               	movwf	?_stristr& (0+255),b
 12761  0008AE  0E7F               	movlw	high STR_45
 12762  0008B0  6F70               	movwf	(?_stristr+3)& (0+255),b
 12763  0008B2  0EBB               	movlw	low STR_45
 12764  0008B4  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12765  0008B6  EC3B  F02A         	call	_stristr	;wreg free
 12766  0008BA  0E29               	movlw	low _cmdbuf
 12767  0008BC  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12768  0008BE  0E01               	movlw	high _cmdbuf
 12769  0008C0  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12770  0008C2  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12771  0008C4  E102               	bnz	u18955
 12772  0008C6  516D               	movf	?_stristr& (0+255),w,b
 12773  0008C8  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12774  0008CA                     u18955:
 12775  0008CA  E10B               	bnz	l14278
 12776                           
 12777                           ; BSR set to: 0
 12778                           ;main.c: 775: printHelp();
 12779  0008CC  ECF4  F019         	call	_printHelp	;wreg free
 12780                           
 12781                           ;main.c: 776: putsUSART((char *) "+OK\r\n");
 12782  0008D0  0E7F               	movlw	high STR_9
 12783  0008D2  0100               	movlb	0	; () banked
 12784  0008D4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12785  0008D6  0E69               	movlw	low STR_9
 12786  0008D8  6F61               	movwf	?_putsUSART& (0+255),b
 12787  0008DA  EC41  F02C         	call	_putsUSART	;wreg free
 12788                           
 12789                           ;main.c: 777: }
 12790  0008DE  EF33  F00C         	goto	l14798
 12791  0008E2                     l14278:
 12792                           
 12793                           ; BSR set to: 0
 12794                           ;main.c: 779: else if (cmdbuf == stristr(cmdbuf, "FIND")) {
 12795  0008E2  0E01               	movlw	high _cmdbuf
 12796  0008E4  0100               	movlb	0	; () banked
 12797  0008E6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12798  0008E8  0E29               	movlw	low _cmdbuf
 12799  0008EA  6F6D               	movwf	?_stristr& (0+255),b
 12800  0008EC  0E7F               	movlw	high STR_47
 12801  0008EE  6F70               	movwf	(?_stristr+3)& (0+255),b
 12802  0008F0  0E98               	movlw	low STR_47
 12803  0008F2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12804  0008F4  EC3B  F02A         	call	_stristr	;wreg free
 12805  0008F8  0E29               	movlw	low _cmdbuf
 12806  0008FA  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12807  0008FC  0E01               	movlw	high _cmdbuf
 12808  0008FE  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12809  000900  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12810  000902  E102               	bnz	u18965
 12811  000904  516D               	movf	?_stristr& (0+255),w,b
 12812  000906  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12813  000908                     u18965:
 12814  000908  E10B               	bnz	l14284
 12815                           
 12816                           ; BSR set to: 0
 12817                           ;main.c: 780: findNodes();
 12818  00090A  EC3E  F022         	call	_findNodes	;wreg free
 12819                           
 12820                           ;main.c: 781: putsUSART((char *) "+OK\r\n");
 12821  00090E  0E7F               	movlw	high STR_9
 12822  000910  0100               	movlb	0	; () banked
 12823  000912  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12824  000914  0E69               	movlw	low STR_9
 12825  000916  6F61               	movwf	?_putsUSART& (0+255),b
 12826  000918  EC41  F02C         	call	_putsUSART	;wreg free
 12827                           
 12828                           ;main.c: 782: }
 12829  00091C  EF33  F00C         	goto	l14798
 12830  000920                     l14284:
 12831                           
 12832                           ; BSR set to: 0
 12833                           ;main.c: 785: else if (cmdbuf == stristr(cmdbuf, "RREG")) {
 12834  000920  0E01               	movlw	high _cmdbuf
 12835  000922  0100               	movlb	0	; () banked
 12836  000924  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12837  000926  0E29               	movlw	low _cmdbuf
 12838  000928  6F6D               	movwf	?_stristr& (0+255),b
 12839  00092A  0E7F               	movlw	high STR_49
 12840  00092C  6F70               	movwf	(?_stristr+3)& (0+255),b
 12841  00092E  0E9D               	movlw	low STR_49
 12842  000930  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12843  000932  EC3B  F02A         	call	_stristr	;wreg free
 12844  000936  0E29               	movlw	low _cmdbuf
 12845  000938  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12846  00093A  0E01               	movlw	high _cmdbuf
 12847  00093C  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12848  00093E  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12849  000940  E102               	bnz	u18975
 12850  000942  516D               	movf	?_stristr& (0+255),w,b
 12851  000944  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12852  000946                     u18975:
 12853  000946  E001 D205          	bnz	l14434
 12854                           
 12855                           ; BSR set to: 0
 12856                           ;main.c: 787: uint8_t i;
 12857                           ;main.c: 788: uint8_t nodeid;
 12858                           ;main.c: 789: uint8_t page = 0;
 12859  00094A  0102               	movlb	2	; () banked
 12860  00094C  6BB4               	clrf	doModeVerbose@page& (0+255),b
 12861                           
 12862                           ; BSR set to: 2
 12863                           ;main.c: 790: uint8_t reg;
 12864                           ;main.c: 791: uint8_t value;
 12865                           ;main.c: 792: uint8_t count = 1;
 12866  00094E  0E01               	movlw	1
 12867  000950  6FB1               	movwf	doModeVerbose@count& (0+255),b
 12868                           
 12869                           ; BSR set to: 2
 12870                           ;main.c: 794: strcpy(cmdbuf, cmdbuf + 5);
 12871  000952  EC42  F00C         	call	PL2	;call to abstracted procedure
 12872  000956  ECAE  F02E         	call	_strcpy	;wreg free
 12873                           
 12874                           ; BSR set to: 0
 12875                           ;main.c: 795: char *p = strtok(cmdbuf, " ");
 12876  00095A  0E01               	movlw	high _cmdbuf
 12877  00095C  ECA3  F00C         	call	PL34	;call to abstracted procedure
 12878  000960  ECE5  F028         	call	_strtok	;wreg free
 12879  000964  C06C  F2BA         	movff	?_strtok,doModeVerbose@p_1199
 12880  000968  C06D  F2BB         	movff	?_strtok+1,doModeVerbose@p_1199+1
 12881                           
 12882                           ; BSR set to: 0
 12883                           ;main.c: 796: if ((0) != p) {
 12884  00096C  0102               	movlb	2	; () banked
 12885  00096E  51BB               	movf	(doModeVerbose@p_1199+1)& (0+255),w,b
 12886  000970  11BA               	iorwf	doModeVerbose@p_1199& (0+255),w,b
 12887  000972  E00A               	bz	l14298
 12888                           
 12889                           ; BSR set to: 2
 12890                           ;main.c: 797: nodeid = atoi(p);
 12891  000974  C2BA  F066         	movff	doModeVerbose@p_1199,?_atoi
 12892  000978  C2BB  F067         	movff	doModeVerbose@p_1199+1,?_atoi+1
 12893  00097C  EC43  F020         	call	_atoi	;wreg free
 12894  000980  5166               	movf	?_atoi& (0+255),w,b
 12895  000982  0102               	movlb	2	; () banked
 12896  000984  6FB2               	movwf	doModeVerbose@nodeid& (0+255),b
 12897                           
 12898                           ;main.c: 798: }
 12899  000986  D009               	goto	l14302
 12900  000988                     l14298:
 12901                           
 12902                           ; BSR set to: 2
 12903                           ;main.c: 799: else {
 12904                           ;main.c: 800: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 12905  000988  0E7B               	movlw	high STR_51
 12906  00098A  0100               	movlb	0	; () banked
 12907  00098C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12908  00098E  0EE0               	movlw	low STR_51
 12909  000990  6F61               	movwf	?_putsUSART& (0+255),b
 12910  000992  EC41  F02C         	call	_putsUSART	;wreg free
 12911  000996  EF41  F00C         	goto	l564
 12912  00099A                     l14302:
 12913                           
 12914                           ; BSR set to: 2
 12915                           ;main.c: 802: }
 12916                           ;main.c: 804: if ((0) != (p = strtok((0), " "))) {
 12917  00099A  EC91  F00C         	call	PL24	;call to abstracted procedure
 12918  00099E  ECE5  F028         	call	_strtok	;wreg free
 12919  0009A2  C06C  F2BA         	movff	?_strtok,doModeVerbose@p_1199
 12920  0009A6  C06D  F2BB         	movff	?_strtok+1,doModeVerbose@p_1199+1
 12921  0009AA  0102               	movlb	2	; () banked
 12922  0009AC  51BB               	movf	(doModeVerbose@p_1199+1)& (0+255),w,b
 12923  0009AE  11BA               	iorwf	doModeVerbose@p_1199& (0+255),w,b
 12924  0009B0  E034               	bz	l14310
 12925                           
 12926                           ; BSR set to: 2
 12927                           ;main.c: 806: char *preg;
 12928                           ;main.c: 807: if (preg = strchr(p, ':')) {
 12929  0009B2  C2BA  F060         	movff	doModeVerbose@p_1199,?_strchr
 12930  0009B6  C2BB  F061         	movff	doModeVerbose@p_1199+1,?_strchr+1
 12931  0009BA  0100               	movlb	0	; () banked
 12932  0009BC  6B63               	clrf	(?_strchr+3)& (0+255),b
 12933  0009BE  0E3A               	movlw	58
 12934  0009C0  6F62               	movwf	(?_strchr+2)& (0+255),b
 12935  0009C2  EC55  F02B         	call	_strchr	;wreg free
 12936  0009C6  C060  F284         	movff	?_strchr,doModeVerbose@preg
 12937  0009CA  C061  F285         	movff	?_strchr+1,doModeVerbose@preg+1
 12938  0009CE  0102               	movlb	2	; () banked
 12939  0009D0  5185               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 12940  0009D2  1184               	iorwf	doModeVerbose@preg& (0+255),w,b
 12941  0009D4  E018               	bz	l14308
 12942                           
 12943                           ; BSR set to: 2
 12944                           ;main.c: 808: page = atoi(p);
 12945  0009D6  C2BA  F066         	movff	doModeVerbose@p_1199,?_atoi
 12946  0009DA  C2BB  F067         	movff	doModeVerbose@p_1199+1,?_atoi+1
 12947  0009DE  EC43  F020         	call	_atoi	;wreg free
 12948  0009E2  5166               	movf	?_atoi& (0+255),w,b
 12949  0009E4  0102               	movlb	2	; () banked
 12950  0009E6  6FB4               	movwf	doModeVerbose@page& (0+255),b
 12951                           
 12952                           ;main.c: 809: reg = atoi(preg + 1);
 12953  0009E8  2984               	incf	doModeVerbose@preg& (0+255),w,b
 12954  0009EA  0100               	movlb	0	; () banked
 12955  0009EC  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12956  0009EE  0E00               	movlw	0
 12957  0009F0  0102               	movlb	2	; () banked
 12958  0009F2  2185               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 12959  0009F4  0100               	movlb	0	; () banked
 12960  0009F6  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12961  0009F8  C0CC  F066         	movff	??_doModeVerbose,?_atoi
 12962  0009FC  C0CD  F067         	movff	??_doModeVerbose+1,?_atoi+1
 12963  000A00  EC43  F020         	call	_atoi	;wreg free
 12964  000A04  D006               	goto	L6
 12965  000A06                     l14308:
 12966                           
 12967                           ; BSR set to: 2
 12968                           ;main.c: 811: else {
 12969                           ;main.c: 812: reg = atoi(p);
 12970  000A06  C2BA  F066         	movff	doModeVerbose@p_1199,?_atoi
 12971  000A0A  C2BB  F067         	movff	doModeVerbose@p_1199+1,?_atoi+1
 12972  000A0E  EC43  F020         	call	_atoi	;wreg free
 12973  000A12                     L6:
 12974  000A12  5166               	movf	?_atoi& (0+255),w,b
 12975  000A14  0102               	movlb	2	; () banked
 12976  000A16  6FB5               	movwf	doModeVerbose@reg& (0+255),b
 12977  000A18  D009               	goto	l14314
 12978  000A1A                     l14310:
 12979                           
 12980                           ; BSR set to: 2
 12981                           ;main.c: 816: else {
 12982                           ;main.c: 817: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 12983  000A1A  0E7A               	movlw	high STR_53
 12984  000A1C  0100               	movlb	0	; () banked
 12985  000A1E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12986  000A20  0E42               	movlw	low STR_53
 12987  000A22  6F61               	movwf	?_putsUSART& (0+255),b
 12988  000A24  EC41  F02C         	call	_putsUSART	;wreg free
 12989  000A28  EF41  F00C         	goto	l564
 12990  000A2C                     l14314:
 12991                           
 12992                           ; BSR set to: 2
 12993                           ;main.c: 819: }
 12994                           ;main.c: 822: if ((0) != (p = strtok((0), " "))) {
 12995  000A2C  EC91  F00C         	call	PL24	;call to abstracted procedure
 12996  000A30  ECE5  F028         	call	_strtok	;wreg free
 12997  000A34  C06C  F2BA         	movff	?_strtok,doModeVerbose@p_1199
 12998  000A38  C06D  F2BB         	movff	?_strtok+1,doModeVerbose@p_1199+1
 12999  000A3C  0102               	movlb	2	; () banked
 13000  000A3E  51BB               	movf	(doModeVerbose@p_1199+1)& (0+255),w,b
 13001  000A40  11BA               	iorwf	doModeVerbose@p_1199& (0+255),w,b
 13002  000A42  E00D               	bz	l569
 13003                           
 13004                           ; BSR set to: 2
 13005                           ;main.c: 823: count = atoi(p);
 13006  000A44  C2BA  F066         	movff	doModeVerbose@p_1199,?_atoi
 13007  000A48  C2BB  F067         	movff	doModeVerbose@p_1199+1,?_atoi+1
 13008  000A4C  EC43  F020         	call	_atoi	;wreg free
 13009  000A50  5166               	movf	?_atoi& (0+255),w,b
 13010  000A52  0102               	movlb	2	; () banked
 13011  000A54  6FB1               	movwf	doModeVerbose@count& (0+255),b
 13012                           
 13013                           ; BSR set to: 2
 13014                           ;main.c: 824: if (0 == count) count = 1;
 13015  000A56  67B1               	tstfsz	doModeVerbose@count& (0+255),b
 13016  000A58  D002               	goto	l569
 13017                           
 13018                           ; BSR set to: 2
 13019  000A5A  0E01               	movlw	1
 13020  000A5C  6FB1               	movwf	doModeVerbose@count& (0+255),b
 13021  000A5E                     l569:
 13022                           
 13023                           ; BSR set to: 2
 13024                           ;main.c: 825: }
 13025                           ;main.c: 827: BOOL rv = 1;
 13026  000A5E  0E01               	movlw	1
 13027  000A60  6FA6               	movwf	doModeVerbose@rv& (0+255),b
 13028                           
 13029                           ; BSR set to: 2
 13030                           ;main.c: 828: for (i = 0; i < count; i++) {
 13031  000A62  6BB7               	clrf	doModeVerbose@i_1193& (0+255),b
 13032  000A64  D15F               	goto	l14426
 13033  000A66                     l14324:
 13034                           
 13035                           ; BSR set to: 2
 13036                           ;main.c: 830: if (readRegisterExtended(nodeid,
 13037                           ;main.c: 831: page,
 13038                           ;main.c: 832: (reg + i) & 0xff,
 13039                           ;main.c: 833: rwtimeout,
 13040                           ;main.c: 834: &value)) {
 13041  000A66  0100               	movlb	0	; () banked
 13042  000A68  C2B4  F0B8         	movff	doModeVerbose@page,?_readRegisterExtended
 13043  000A6C  6BB9               	clrf	(?_readRegisterExtended+1)& (0+255),b
 13044  000A6E  0102               	movlb	2	; () banked
 13045  000A70  51B5               	movf	doModeVerbose@reg& (0+255),w,b
 13046  000A72  25B7               	addwf	doModeVerbose@i_1193& (0+255),w,b
 13047  000A74  0100               	movlb	0	; () banked
 13048  000A76  6FBA               	movwf	(?_readRegisterExtended+2)& (0+255),b
 13049  000A78  C034  F0BB         	movff	_rwtimeout,?_readRegisterExtended+3
 13050  000A7C  6BBC               	clrf	(?_readRegisterExtended+4)& (0+255),b
 13051  000A7E  0E02               	movlw	high doModeVerbose@value
 13052  000A80  6FBE               	movwf	(?_readRegisterExtended+6)& (0+255),b
 13053  000A82  0EB9               	movlw	low doModeVerbose@value
 13054  000A84  6FBD               	movwf	(?_readRegisterExtended+5)& (0+255),b
 13055  000A86  0102               	movlb	2	; () banked
 13056  000A88  51B2               	movf	doModeVerbose@nodeid& (0+255),w,b
 13057  000A8A  ECC5  F021         	call	_readRegisterExtended
 13058  000A8E  0900               	iorlw	0
 13059  000A90  E101 D0C8          	bz	l573
 13060                           
 13061                           ;main.c: 835: putsUSART((char *) "+OK - nodeid=");
 13062  000A94  0E7E               	movlw	high STR_55
 13063  000A96  0100               	movlb	0	; () banked
 13064  000A98  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13065  000A9A  0E3B               	movlw	low STR_55
 13066  000A9C  6F61               	movwf	?_putsUSART& (0+255),b
 13067  000A9E  EC41  F02C         	call	_putsUSART	;wreg free
 13068                           
 13069                           ;main.c: 836: sprintf(wrkbuf, bHex ? "0x%02X - " : "%d - ", nodeid);
 13070  000AA2  662B               	tstfsz	_bHex,c
 13071  000AA4  D005               	goto	l14332
 13072  000AA6  0E7F               	movlw	high STR_57
 13073  000AA8  0102               	movlb	2	; () banked
 13074  000AAA  6F93               	movwf	(_doModeVerbose$1211+1)& (0+255),b
 13075  000AAC  0E6F               	movlw	low STR_57
 13076  000AAE  D004               	goto	L7
 13077  000AB0                     l14332:
 13078  000AB0  0E7E               	movlw	high STR_56
 13079  000AB2  0102               	movlb	2	; () banked
 13080  000AB4  6F93               	movwf	(_doModeVerbose$1211+1)& (0+255),b
 13081  000AB6  0E6B               	movlw	low STR_56
 13082  000AB8                     L7:
 13083  000AB8  6F92               	movwf	_doModeVerbose$1211& (0+255),b
 13084                           
 13085                           ; BSR set to: 2
 13086  000ABA  0E01               	movlw	high _wrkbuf
 13087  000ABC  0100               	movlb	0	; () banked
 13088  000ABE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13089  000AC0  0E79               	movlw	low _wrkbuf
 13090  000AC2  6F76               	movwf	?_sprintf& (0+255),b
 13091  000AC4  C292  F078         	movff	_doModeVerbose$1211,?_sprintf+2
 13092  000AC8  C293  F079         	movff	_doModeVerbose$1211+1,?_sprintf+3
 13093  000ACC  C2B2  F07A         	movff	doModeVerbose@nodeid,?_sprintf+4
 13094  000AD0  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13095  000AD2  EC08  F00D         	call	_sprintf	;wreg free
 13096                           
 13097                           ; BSR set to: 0
 13098                           ;main.c: 837: putsUSART(wrkbuf);
 13099  000AD6  0E01               	movlw	high _wrkbuf
 13100  000AD8  0100               	movlb	0	; () banked
 13101  000ADA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13102  000ADC  0E79               	movlw	low _wrkbuf
 13103  000ADE  6F61               	movwf	?_putsUSART& (0+255),b
 13104  000AE0  EC41  F02C         	call	_putsUSART	;wreg free
 13105                           
 13106                           ;main.c: 838: putsUSART((char *) "Value for reg ");
 13107  000AE4  0E7E               	movlw	high STR_58
 13108  000AE6  0100               	movlb	0	; () banked
 13109  000AE8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13110  000AEA  0E1E               	movlw	low STR_58
 13111  000AEC  6F61               	movwf	?_putsUSART& (0+255),b
 13112  000AEE  EC41  F02C         	call	_putsUSART	;wreg free
 13113                           
 13114                           ;main.c: 839: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 13115  000AF2  662B               	tstfsz	_bHex,c
 13116  000AF4  D005               	goto	l14344
 13117  000AF6  0E7F               	movlw	high STR_60
 13118  000AF8  0102               	movlb	2	; () banked
 13119  000AFA  6F95               	movwf	(_doModeVerbose$1216+1)& (0+255),b
 13120  000AFC  0EEE               	movlw	low STR_60
 13121  000AFE  D004               	goto	L8
 13122  000B00                     l14344:
 13123  000B00  0E7F               	movlw	high STR_59
 13124  000B02  0102               	movlb	2	; () banked
 13125  000B04  6F95               	movwf	(_doModeVerbose$1216+1)& (0+255),b
 13126  000B06  0E4E               	movlw	low STR_59
 13127  000B08                     L8:
 13128  000B08  6F94               	movwf	_doModeVerbose$1216& (0+255),b
 13129                           
 13130                           ; BSR set to: 2
 13131  000B0A  0E01               	movlw	high _wrkbuf
 13132  000B0C  0100               	movlb	0	; () banked
 13133  000B0E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13134  000B10  0E79               	movlw	low _wrkbuf
 13135  000B12  6F76               	movwf	?_sprintf& (0+255),b
 13136  000B14  C294  F078         	movff	_doModeVerbose$1216,?_sprintf+2
 13137  000B18  C295  F079         	movff	_doModeVerbose$1216+1,?_sprintf+3
 13138  000B1C  C2B4  F07A         	movff	doModeVerbose@page,?_sprintf+4
 13139  000B20  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13140  000B22  EC08  F00D         	call	_sprintf	;wreg free
 13141                           
 13142                           ; BSR set to: 0
 13143                           ;main.c: 840: putsUSART(wrkbuf);
 13144  000B26  0E01               	movlw	high _wrkbuf
 13145  000B28  0100               	movlb	0	; () banked
 13146  000B2A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13147  000B2C  0E79               	movlw	low _wrkbuf
 13148  000B2E  6F61               	movwf	?_putsUSART& (0+255),b
 13149  000B30  EC41  F02C         	call	_putsUSART	;wreg free
 13150                           
 13151                           ;main.c: 841: WriteUSART(':');
 13152  000B34  0E3A               	movlw	58
 13153  000B36  EC36  F02F         	call	_WriteUSART
 13154  000B3A                     l582:
 13155  000B3A  A2AC               	btfss	4012,1,c	;volatile
 13156  000B3C  D7FE               	goto	l582
 13157                           
 13158                           ;main.c: 843: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 13159  000B3E  662B               	tstfsz	_bHex,c
 13160  000B40  D005               	goto	l14354
 13161  000B42  0E7F               	movlw	high STR_60
 13162  000B44  0102               	movlb	2	; () banked
 13163  000B46  6F97               	movwf	(_doModeVerbose$1220+1)& (0+255),b
 13164  000B48  0EEE               	movlw	low STR_60
 13165  000B4A  D004               	goto	L9
 13166  000B4C                     l14354:
 13167  000B4C  0E7F               	movlw	high STR_59
 13168  000B4E  0102               	movlb	2	; () banked
 13169  000B50  6F97               	movwf	(_doModeVerbose$1220+1)& (0+255),b
 13170  000B52  0E4E               	movlw	low STR_59
 13171  000B54                     L9:
 13172  000B54  6F96               	movwf	_doModeVerbose$1220& (0+255),b
 13173                           
 13174                           ; BSR set to: 2
 13175  000B56  0E01               	movlw	high _wrkbuf
 13176  000B58  0100               	movlb	0	; () banked
 13177  000B5A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13178  000B5C  0E79               	movlw	low _wrkbuf
 13179  000B5E  6F76               	movwf	?_sprintf& (0+255),b
 13180  000B60  C296  F078         	movff	_doModeVerbose$1220,?_sprintf+2
 13181  000B64  C297  F079         	movff	_doModeVerbose$1220+1,?_sprintf+3
 13182  000B68  ECAC  F00C         	call	PL38	;call to abstracted procedure
 13183  000B6C  EC08  F00D         	call	_sprintf	;wreg free
 13184                           
 13185                           ; BSR set to: 0
 13186                           ;main.c: 844: putsUSART(wrkbuf);
 13187  000B70  0E01               	movlw	high _wrkbuf
 13188  000B72  0100               	movlb	0	; () banked
 13189  000B74  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13190  000B76  0E79               	movlw	low _wrkbuf
 13191  000B78  6F61               	movwf	?_putsUSART& (0+255),b
 13192  000B7A  EC41  F02C         	call	_putsUSART	;wreg free
 13193                           
 13194                           ;main.c: 845: putsUSART((char *) " = ");
 13195  000B7E  0E7E               	movlw	high (STR_266+4)
 13196  000B80  0100               	movlb	0	; () banked
 13197  000B82  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13198  000B84  0ED3               	movlw	low (STR_266+4)
 13199  000B86  6F61               	movwf	?_putsUSART& (0+255),b
 13200  000B88  EC41  F02C         	call	_putsUSART	;wreg free
 13201                           
 13202                           ;main.c: 846: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", value);
 13203  000B8C  662B               	tstfsz	_bHex,c
 13204  000B8E  D005               	goto	l14366
 13205  000B90  0E7F               	movlw	high STR_60
 13206  000B92  0102               	movlb	2	; () banked
 13207  000B94  6F99               	movwf	(_doModeVerbose$1225+1)& (0+255),b
 13208  000B96  0EEE               	movlw	low STR_60
 13209  000B98  D004               	goto	L10
 13210  000B9A                     l14366:
 13211  000B9A  0E7F               	movlw	high STR_59
 13212  000B9C  0102               	movlb	2	; () banked
 13213  000B9E  6F99               	movwf	(_doModeVerbose$1225+1)& (0+255),b
 13214  000BA0  0E4E               	movlw	low STR_59
 13215  000BA2                     L10:
 13216  000BA2  6F98               	movwf	_doModeVerbose$1225& (0+255),b
 13217                           
 13218                           ; BSR set to: 2
 13219  000BA4  0E01               	movlw	high _wrkbuf
 13220  000BA6  0100               	movlb	0	; () banked
 13221  000BA8  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13222  000BAA  0E79               	movlw	low _wrkbuf
 13223  000BAC  6F76               	movwf	?_sprintf& (0+255),b
 13224  000BAE  C298  F078         	movff	_doModeVerbose$1225,?_sprintf+2
 13225  000BB2  C299  F079         	movff	_doModeVerbose$1225+1,?_sprintf+3
 13226  000BB6  C2B9  F07A         	movff	doModeVerbose@value,?_sprintf+4
 13227  000BBA  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13228  000BBC  EC08  F00D         	call	_sprintf	;wreg free
 13229                           
 13230                           ; BSR set to: 0
 13231                           ;main.c: 847: putsUSART(wrkbuf);
 13232  000BC0  0E01               	movlw	high _wrkbuf
 13233  000BC2  0100               	movlb	0	; () banked
 13234  000BC4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13235  000BC6  0E79               	movlw	low _wrkbuf
 13236  000BC8  6F61               	movwf	?_putsUSART& (0+255),b
 13237  000BCA  EC41  F02C         	call	_putsUSART	;wreg free
 13238  000BCE                     l593:
 13239  000BCE  A2AC               	btfss	4012,1,c	;volatile
 13240  000BD0  D7FE               	goto	l593
 13241                           
 13242                           ;main.c: 849: putsUSART("\t\'");
 13243  000BD2  0E7F               	movlw	high STR_66
 13244  000BD4  0100               	movlb	0	; () banked
 13245  000BD6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13246  000BD8  0EE2               	movlw	low STR_66
 13247  000BDA  6F61               	movwf	?_putsUSART& (0+255),b
 13248  000BDC  EC41  F02C         	call	_putsUSART	;wreg free
 13249                           
 13250                           ;main.c: 850: if ((value > 32) && (value < 127)) {
 13251  000BE0  0E20               	movlw	32
 13252  000BE2  0102               	movlb	2	; () banked
 13253  000BE4  65B9               	cpfsgt	doModeVerbose@value& (0+255),b
 13254  000BE6  D007               	goto	l14380
 13255                           
 13256                           ; BSR set to: 2
 13257  000BE8  0E7F               	movlw	127
 13258  000BEA  61B9               	cpfslt	doModeVerbose@value& (0+255),b
 13259  000BEC  D004               	goto	l14380
 13260                           
 13261                           ; BSR set to: 2
 13262                           ;main.c: 851: WriteUSART(value);
 13263  000BEE  51B9               	movf	doModeVerbose@value& (0+255),w,b
 13264  000BF0  EC36  F02F         	call	_WriteUSART
 13265                           
 13266                           ;main.c: 852: }
 13267  000BF4  D003               	goto	l598
 13268  000BF6                     l14380:
 13269                           
 13270                           ; BSR set to: 2
 13271                           ;main.c: 853: else {
 13272                           ;main.c: 854: WriteUSART('.');
 13273  000BF6  0E2E               	movlw	46
 13274  000BF8  EC36  F02F         	call	_WriteUSART
 13275  000BFC                     l598:
 13276  000BFC  A2AC               	btfss	4012,1,c	;volatile
 13277  000BFE  D7FE               	goto	l598
 13278                           
 13279                           ;main.c: 857: putsUSART("\' \t");
 13280  000C00  0E7F               	movlw	high STR_67
 13281  000C02  0100               	movlb	0	; () banked
 13282  000C04  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13283  000C06  0ECA               	movlw	low STR_67
 13284  000C08  6F61               	movwf	?_putsUSART& (0+255),b
 13285  000C0A  EC41  F02C         	call	_putsUSART	;wreg free
 13286                           
 13287                           ;main.c: 858: printBinary(value);
 13288  000C0E  0102               	movlb	2	; () banked
 13289  000C10  51B9               	movf	doModeVerbose@value& (0+255),w,b
 13290  000C12  ECC4  F02C         	call	_printBinary
 13291                           
 13292                           ; BSR set to: 0
 13293                           ;main.c: 859: putsUSART((char *) "\r\n");
 13294  000C16  0E74               	movlw	high (STR_220+50)
 13295  000C18  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13296  000C1A  0E72               	movlw	low (STR_220+50)
 13297  000C1C  6F61               	movwf	?_putsUSART& (0+255),b
 13298  000C1E  EC41  F02C         	call	_putsUSART	;wreg free
 13299                           
 13300                           ;main.c: 860: }
 13301  000C22  D07E               	goto	l14424
 13302  000C24                     l573:
 13303                           
 13304                           ;main.c: 861: else {
 13305                           ;main.c: 862: rv = 0;
 13306  000C24  0102               	movlb	2	; () banked
 13307  000C26  6BA6               	clrf	doModeVerbose@rv& (0+255),b
 13308                           
 13309                           ; BSR set to: 2
 13310                           ;main.c: 863: putsUSART((char *) "-ERROR - nodeid=");
 13311  000C28  0E7D               	movlw	high STR_69
 13312  000C2A  0100               	movlb	0	; () banked
 13313  000C2C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13314  000C2E  0EFE               	movlw	low STR_69
 13315  000C30  6F61               	movwf	?_putsUSART& (0+255),b
 13316  000C32  EC41  F02C         	call	_putsUSART	;wreg free
 13317                           
 13318                           ;main.c: 864: sprintf(wrkbuf, bHex ? "0x%02X - " : "%d - ", nodeid);
 13319  000C36  662B               	tstfsz	_bHex,c
 13320  000C38  D005               	goto	l14394
 13321  000C3A  0E7F               	movlw	high STR_57
 13322  000C3C  0102               	movlb	2	; () banked
 13323  000C3E  6F9B               	movwf	(_doModeVerbose$1233+1)& (0+255),b
 13324  000C40  0E6F               	movlw	low STR_57
 13325  000C42  D004               	goto	L11
 13326  000C44                     l14394:
 13327  000C44  0E7E               	movlw	high STR_56
 13328  000C46  0102               	movlb	2	; () banked
 13329  000C48  6F9B               	movwf	(_doModeVerbose$1233+1)& (0+255),b
 13330  000C4A  0E6B               	movlw	low STR_56
 13331  000C4C                     L11:
 13332  000C4C  6F9A               	movwf	_doModeVerbose$1233& (0+255),b
 13333                           
 13334                           ; BSR set to: 2
 13335  000C4E  0E01               	movlw	high _wrkbuf
 13336  000C50  0100               	movlb	0	; () banked
 13337  000C52  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13338  000C54  0E79               	movlw	low _wrkbuf
 13339  000C56  6F76               	movwf	?_sprintf& (0+255),b
 13340  000C58  C29A  F078         	movff	_doModeVerbose$1233,?_sprintf+2
 13341  000C5C  C29B  F079         	movff	_doModeVerbose$1233+1,?_sprintf+3
 13342  000C60  C2B2  F07A         	movff	doModeVerbose@nodeid,?_sprintf+4
 13343  000C64  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13344  000C66  EC08  F00D         	call	_sprintf	;wreg free
 13345                           
 13346                           ; BSR set to: 0
 13347                           ;main.c: 865: putsUSART(wrkbuf);
 13348  000C6A  0E01               	movlw	high _wrkbuf
 13349  000C6C  0100               	movlb	0	; () banked
 13350  000C6E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13351  000C70  0E79               	movlw	low _wrkbuf
 13352  000C72  6F61               	movwf	?_putsUSART& (0+255),b
 13353  000C74  EC41  F02C         	call	_putsUSART	;wreg free
 13354                           
 13355                           ;main.c: 866: putsUSART((char *) "Unable to read register ");
 13356  000C78  0E7B               	movlw	high STR_72
 13357  000C7A  0100               	movlb	0	; () banked
 13358  000C7C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13359  000C7E  0E97               	movlw	low STR_72
 13360  000C80  6F61               	movwf	?_putsUSART& (0+255),b
 13361  000C82  EC41  F02C         	call	_putsUSART	;wreg free
 13362  000C86                     l606:
 13363  000C86  A2AC               	btfss	4012,1,c	;volatile
 13364  000C88  D7FE               	goto	l606
 13365                           
 13366                           ;main.c: 868: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 13367  000C8A  662B               	tstfsz	_bHex,c
 13368  000C8C  D005               	goto	l14404
 13369  000C8E  0E7F               	movlw	high STR_60
 13370  000C90  0102               	movlb	2	; () banked
 13371  000C92  6F9D               	movwf	(_doModeVerbose$1238+1)& (0+255),b
 13372  000C94  0EEE               	movlw	low STR_60
 13373  000C96  D004               	goto	L12
 13374  000C98                     l14404:
 13375  000C98  0E7F               	movlw	high STR_59
 13376  000C9A  0102               	movlb	2	; () banked
 13377  000C9C  6F9D               	movwf	(_doModeVerbose$1238+1)& (0+255),b
 13378  000C9E  0E4E               	movlw	low STR_59
 13379  000CA0                     L12:
 13380  000CA0  6F9C               	movwf	_doModeVerbose$1238& (0+255),b
 13381                           
 13382                           ; BSR set to: 2
 13383  000CA2  0E01               	movlw	high _wrkbuf
 13384  000CA4  0100               	movlb	0	; () banked
 13385  000CA6  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13386  000CA8  0E79               	movlw	low _wrkbuf
 13387  000CAA  6F76               	movwf	?_sprintf& (0+255),b
 13388  000CAC  C29C  F078         	movff	_doModeVerbose$1238,?_sprintf+2
 13389  000CB0  C29D  F079         	movff	_doModeVerbose$1238+1,?_sprintf+3
 13390  000CB4  C2B4  F07A         	movff	doModeVerbose@page,?_sprintf+4
 13391  000CB8  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13392  000CBA  EC08  F00D         	call	_sprintf	;wreg free
 13393                           
 13394                           ; BSR set to: 0
 13395                           ;main.c: 869: putsUSART(wrkbuf);
 13396  000CBE  0E01               	movlw	high _wrkbuf
 13397  000CC0  0100               	movlb	0	; () banked
 13398  000CC2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13399  000CC4  0E79               	movlw	low _wrkbuf
 13400  000CC6  6F61               	movwf	?_putsUSART& (0+255),b
 13401  000CC8  EC41  F02C         	call	_putsUSART	;wreg free
 13402                           
 13403                           ;main.c: 870: WriteUSART(':');
 13404  000CCC  0E3A               	movlw	58
 13405  000CCE  EC36  F02F         	call	_WriteUSART
 13406                           
 13407                           ;main.c: 871: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 13408  000CD2  662B               	tstfsz	_bHex,c
 13409  000CD4  D005               	goto	l14416
 13410  000CD6  0E7F               	movlw	high STR_60
 13411  000CD8  0102               	movlb	2	; () banked
 13412  000CDA  6F9F               	movwf	(_doModeVerbose$1242+1)& (0+255),b
 13413  000CDC  0EEE               	movlw	low STR_60
 13414  000CDE  D004               	goto	L13
 13415  000CE0                     l14416:
 13416  000CE0  0E7F               	movlw	high STR_59
 13417  000CE2  0102               	movlb	2	; () banked
 13418  000CE4  6F9F               	movwf	(_doModeVerbose$1242+1)& (0+255),b
 13419  000CE6  0E4E               	movlw	low STR_59
 13420  000CE8                     L13:
 13421  000CE8  6F9E               	movwf	_doModeVerbose$1242& (0+255),b
 13422                           
 13423                           ; BSR set to: 2
 13424  000CEA  0E01               	movlw	high _wrkbuf
 13425  000CEC  0100               	movlb	0	; () banked
 13426  000CEE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13427  000CF0  0E79               	movlw	low _wrkbuf
 13428  000CF2  6F76               	movwf	?_sprintf& (0+255),b
 13429  000CF4  C29E  F078         	movff	_doModeVerbose$1242,?_sprintf+2
 13430  000CF8  C29F  F079         	movff	_doModeVerbose$1242+1,?_sprintf+3
 13431  000CFC  ECAC  F00C         	call	PL38	;call to abstracted procedure
 13432  000D00  EC08  F00D         	call	_sprintf	;wreg free
 13433                           
 13434                           ; BSR set to: 0
 13435                           ;main.c: 872: putsUSART(wrkbuf);
 13436  000D04  0E01               	movlw	high _wrkbuf
 13437  000D06  0100               	movlb	0	; () banked
 13438  000D08  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13439  000D0A  0E79               	movlw	low _wrkbuf
 13440  000D0C  6F61               	movwf	?_putsUSART& (0+255),b
 13441  000D0E  EC41  F02C         	call	_putsUSART	;wreg free
 13442                           
 13443                           ;main.c: 874: putsUSART((char *) "\r\n");
 13444  000D12  0E74               	movlw	high (STR_220+50)
 13445  000D14  0100               	movlb	0	; () banked
 13446  000D16  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13447  000D18  0E72               	movlw	low (STR_220+50)
 13448  000D1A  6F61               	movwf	?_putsUSART& (0+255),b
 13449  000D1C  EC41  F02C         	call	_putsUSART	;wreg free
 13450  000D20                     l14424:
 13451  000D20  0102               	movlb	2	; () banked
 13452  000D22  2BB7               	incf	doModeVerbose@i_1193& (0+255),f,b
 13453  000D24                     l14426:
 13454                           
 13455                           ; BSR set to: 2
 13456  000D24  51B1               	movf	doModeVerbose@count& (0+255),w,b
 13457  000D26  5DB7               	subwf	doModeVerbose@i_1193& (0+255),w,b
 13458  000D28  E201 D69D          	bnc	l14324
 13459                           
 13460                           ; BSR set to: 2
 13461                           ;main.c: 875: }
 13462                           ;main.c: 876: }
 13463                           ;main.c: 878: if (rv) {
 13464  000D2C  51A6               	movf	doModeVerbose@rv& (0+255),w,b
 13465  000D2E  E009               	bz	l14432
 13466                           
 13467                           ; BSR set to: 2
 13468                           ;main.c: 879: putsUSART((char *) "+OK\r\n");
 13469  000D30  0E7F               	movlw	high STR_9
 13470  000D32  0100               	movlb	0	; () banked
 13471  000D34  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13472  000D36  0E69               	movlw	low STR_9
 13473  000D38  6F61               	movwf	?_putsUSART& (0+255),b
 13474  000D3A  EC41  F02C         	call	_putsUSART	;wreg free
 13475                           
 13476                           ;main.c: 880: }
 13477  000D3E  EF33  F00C         	goto	l14798
 13478  000D42                     l14432:
 13479                           
 13480                           ; BSR set to: 2
 13481                           ;main.c: 881: else {
 13482                           ;main.c: 882: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 13483  000D42  0E74               	movlw	high STR_79
 13484  000D44  0100               	movlb	0	; () banked
 13485  000D46  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13486  000D48  0E0A               	movlw	low STR_79
 13487  000D4A  6F61               	movwf	?_putsUSART& (0+255),b
 13488  000D4C  EC41  F02C         	call	_putsUSART	;wreg free
 13489  000D50  EF33  F00C         	goto	l14798
 13490  000D54                     l14434:
 13491                           
 13492                           ; BSR set to: 0
 13493                           ;main.c: 888: else if (cmdbuf == stristr(cmdbuf, "WREG")) {
 13494  000D54  0E01               	movlw	high _cmdbuf
 13495  000D56  0100               	movlb	0	; () banked
 13496  000D58  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13497  000D5A  0E29               	movlw	low _cmdbuf
 13498  000D5C  6F6D               	movwf	?_stristr& (0+255),b
 13499  000D5E  0E7F               	movlw	high STR_80
 13500  000D60  6F70               	movwf	(?_stristr+3)& (0+255),b
 13501  000D62  0EA2               	movlw	low STR_80
 13502  000D64  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13503  000D66  EC3B  F02A         	call	_stristr	;wreg free
 13504  000D6A  0E29               	movlw	low _cmdbuf
 13505  000D6C  6FCC               	movwf	??_doModeVerbose& (0+255),b
 13506  000D6E  0E01               	movlw	high _cmdbuf
 13507  000D70  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 13508  000D72  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13509  000D74  E102               	bnz	u19195
 13510  000D76  516D               	movf	?_stristr& (0+255),w,b
 13511  000D78  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 13512  000D7A                     u19195:
 13513  000D7A  E001 D0FC          	bnz	l14494
 13514                           
 13515                           ; BSR set to: 0
 13516                           ;main.c: 890: uint8_t nodeid;
 13517                           ;main.c: 891: uint8_t page = 0;
 13518  000D7E  0102               	movlb	2	; () banked
 13519  000D80  6BA7               	clrf	doModeVerbose@page_1248& (0+255),b
 13520                           
 13521                           ; BSR set to: 2
 13522                           ;main.c: 892: uint8_t reg;
 13523                           ;main.c: 893: uint8_t value;
 13524                           ;main.c: 895: strcpy(cmdbuf, cmdbuf + 5);
 13525  000D82  EC42  F00C         	call	PL2	;call to abstracted procedure
 13526  000D86  ECAE  F02E         	call	_strcpy	;wreg free
 13527                           
 13528                           ; BSR set to: 0
 13529                           ;main.c: 896: char *p = strtok(cmdbuf, " ");
 13530  000D8A  0E01               	movlw	high _cmdbuf
 13531  000D8C  ECA3  F00C         	call	PL34	;call to abstracted procedure
 13532  000D90  ECE5  F028         	call	_strtok	;wreg free
 13533  000D94  C06C  F2BC         	movff	?_strtok,doModeVerbose@p_1251
 13534  000D98  C06D  F2BD         	movff	?_strtok+1,doModeVerbose@p_1251+1
 13535                           
 13536                           ; BSR set to: 0
 13537                           ;main.c: 897: if ((0) != p) {
 13538  000D9C  0102               	movlb	2	; () banked
 13539  000D9E  51BD               	movf	(doModeVerbose@p_1251+1)& (0+255),w,b
 13540  000DA0  11BC               	iorwf	doModeVerbose@p_1251& (0+255),w,b
 13541  000DA2  E00A               	bz	l14446
 13542                           
 13543                           ; BSR set to: 2
 13544                           ;main.c: 898: nodeid = atoi(p);
 13545  000DA4  C2BC  F066         	movff	doModeVerbose@p_1251,?_atoi
 13546  000DA8  C2BD  F067         	movff	doModeVerbose@p_1251+1,?_atoi+1
 13547  000DAC  EC43  F020         	call	_atoi	;wreg free
 13548  000DB0  5166               	movf	?_atoi& (0+255),w,b
 13549  000DB2  0102               	movlb	2	; () banked
 13550  000DB4  6FB3               	movwf	doModeVerbose@nodeid_1247& (0+255),b
 13551                           
 13552                           ;main.c: 899: }
 13553  000DB6  D009               	goto	l14450
 13554  000DB8                     l14446:
 13555                           
 13556                           ; BSR set to: 2
 13557                           ;main.c: 900: else {
 13558                           ;main.c: 901: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 13559  000DB8  0E7B               	movlw	high STR_51
 13560  000DBA  0100               	movlb	0	; () banked
 13561  000DBC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13562  000DBE  0EE0               	movlw	low STR_51
 13563  000DC0  6F61               	movwf	?_putsUSART& (0+255),b
 13564  000DC2  EC41  F02C         	call	_putsUSART	;wreg free
 13565  000DC6  EF41  F00C         	goto	l564
 13566  000DCA                     l14450:
 13567                           
 13568                           ; BSR set to: 2
 13569                           ;main.c: 903: }
 13570                           ;main.c: 905: if ( (0) != ( p = strtok((0), " ") ) ) {
 13571  000DCA  EC91  F00C         	call	PL24	;call to abstracted procedure
 13572  000DCE  ECE5  F028         	call	_strtok	;wreg free
 13573  000DD2  C06C  F2BC         	movff	?_strtok,doModeVerbose@p_1251
 13574  000DD6  C06D  F2BD         	movff	?_strtok+1,doModeVerbose@p_1251+1
 13575  000DDA  0102               	movlb	2	; () banked
 13576  000DDC  51BD               	movf	(doModeVerbose@p_1251+1)& (0+255),w,b
 13577  000DDE  11BC               	iorwf	doModeVerbose@p_1251& (0+255),w,b
 13578  000DE0  E034               	bz	l14458
 13579                           
 13580                           ; BSR set to: 2
 13581                           ;main.c: 907: char *preg;
 13582                           ;main.c: 908: if (preg = strchr(p, ':')) {
 13583  000DE2  C2BC  F060         	movff	doModeVerbose@p_1251,?_strchr
 13584  000DE6  C2BD  F061         	movff	doModeVerbose@p_1251+1,?_strchr+1
 13585  000DEA  0100               	movlb	0	; () banked
 13586  000DEC  6B63               	clrf	(?_strchr+3)& (0+255),b
 13587  000DEE  0E3A               	movlw	58
 13588  000DF0  6F62               	movwf	(?_strchr+2)& (0+255),b
 13589  000DF2  EC55  F02B         	call	_strchr	;wreg free
 13590  000DF6  C060  F286         	movff	?_strchr,doModeVerbose@preg_1255
 13591  000DFA  C061  F287         	movff	?_strchr+1,doModeVerbose@preg_1255+1
 13592  000DFE  0102               	movlb	2	; () banked
 13593  000E00  5187               	movf	(doModeVerbose@preg_1255+1)& (0+255),w,b
 13594  000E02  1186               	iorwf	doModeVerbose@preg_1255& (0+255),w,b
 13595  000E04  E018               	bz	l14456
 13596                           
 13597                           ; BSR set to: 2
 13598                           ;main.c: 909: page = atoi(p);
 13599  000E06  C2BC  F066         	movff	doModeVerbose@p_1251,?_atoi
 13600  000E0A  C2BD  F067         	movff	doModeVerbose@p_1251+1,?_atoi+1
 13601  000E0E  EC43  F020         	call	_atoi	;wreg free
 13602  000E12  5166               	movf	?_atoi& (0+255),w,b
 13603  000E14  0102               	movlb	2	; () banked
 13604  000E16  6FA7               	movwf	doModeVerbose@page_1248& (0+255),b
 13605                           
 13606                           ;main.c: 910: reg = atoi(preg + 1);
 13607  000E18  2986               	incf	doModeVerbose@preg_1255& (0+255),w,b
 13608  000E1A  0100               	movlb	0	; () banked
 13609  000E1C  6FCC               	movwf	??_doModeVerbose& (0+255),b
 13610  000E1E  0E00               	movlw	0
 13611  000E20  0102               	movlb	2	; () banked
 13612  000E22  2187               	addwfc	(doModeVerbose@preg_1255+1)& (0+255),w,b
 13613  000E24  0100               	movlb	0	; () banked
 13614  000E26  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 13615  000E28  C0CC  F066         	movff	??_doModeVerbose,?_atoi
 13616  000E2C  C0CD  F067         	movff	??_doModeVerbose+1,?_atoi+1
 13617  000E30  EC43  F020         	call	_atoi	;wreg free
 13618  000E34  D006               	goto	L14
 13619  000E36                     l14456:
 13620                           
 13621                           ; BSR set to: 2
 13622                           ;main.c: 912: else {
 13623                           ;main.c: 913: reg = atoi(p);
 13624  000E36  C2BC  F066         	movff	doModeVerbose@p_1251,?_atoi
 13625  000E3A  C2BD  F067         	movff	doModeVerbose@p_1251+1,?_atoi+1
 13626  000E3E  EC43  F020         	call	_atoi	;wreg free
 13627  000E42                     L14:
 13628  000E42  5166               	movf	?_atoi& (0+255),w,b
 13629  000E44  0102               	movlb	2	; () banked
 13630  000E46  6FA8               	movwf	doModeVerbose@reg_1249& (0+255),b
 13631  000E48  D009               	goto	l14462
 13632  000E4A                     l14458:
 13633                           
 13634                           ; BSR set to: 2
 13635                           ;main.c: 917: else {
 13636                           ;main.c: 918: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 13637  000E4A  0E7A               	movlw	high STR_53
 13638  000E4C  0100               	movlb	0	; () banked
 13639  000E4E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13640  000E50  0E42               	movlw	low STR_53
 13641  000E52  6F61               	movwf	?_putsUSART& (0+255),b
 13642  000E54  EC41  F02C         	call	_putsUSART	;wreg free
 13643  000E58  EF41  F00C         	goto	l564
 13644  000E5C                     l14462:
 13645                           
 13646                           ; BSR set to: 2
 13647                           ;main.c: 920: }
 13648                           ;main.c: 923: if ((0) != (p = strtok((0), " "))) {
 13649  000E5C  EC91  F00C         	call	PL24	;call to abstracted procedure
 13650  000E60  ECE5  F028         	call	_strtok	;wreg free
 13651  000E64  C06C  F2BC         	movff	?_strtok,doModeVerbose@p_1251
 13652  000E68  C06D  F2BD         	movff	?_strtok+1,doModeVerbose@p_1251+1
 13653  000E6C  0102               	movlb	2	; () banked
 13654  000E6E  51BD               	movf	(doModeVerbose@p_1251+1)& (0+255),w,b
 13655  000E70  11BC               	iorwf	doModeVerbose@p_1251& (0+255),w,b
 13656  000E72  E00A               	bz	l14466
 13657                           
 13658                           ; BSR set to: 2
 13659                           ;main.c: 924: value = atoi(p);
 13660  000E74  C2BC  F066         	movff	doModeVerbose@p_1251,?_atoi
 13661  000E78  C2BD  F067         	movff	doModeVerbose@p_1251+1,?_atoi+1
 13662  000E7C  EC43  F020         	call	_atoi	;wreg free
 13663  000E80  5166               	movf	?_atoi& (0+255),w,b
 13664  000E82  0102               	movlb	2	; () banked
 13665  000E84  6FB0               	movwf	doModeVerbose@value_1250& (0+255),b
 13666                           
 13667                           ;main.c: 925: }
 13668  000E86  D009               	goto	l14470
 13669  000E88                     l14466:
 13670                           
 13671                           ; BSR set to: 2
 13672                           ;main.c: 926: else {
 13673                           ;main.c: 927: putsUSART((char *) "-ERROR - Need a value\r\n");
 13674  000E88  0E7C               	movlw	high STR_86
 13675  000E8A  0100               	movlb	0	; () banked
 13676  000E8C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13677  000E8E  0E10               	movlw	low STR_86
 13678  000E90  6F61               	movwf	?_putsUSART& (0+255),b
 13679  000E92  EC41  F02C         	call	_putsUSART	;wreg free
 13680  000E96  EF41  F00C         	goto	l564
 13681  000E9A                     l14470:
 13682                           
 13683                           ; BSR set to: 2
 13684                           ;main.c: 929: }
 13685                           ;main.c: 931: if (writeRegisterExtended(nodeid,
 13686                           ;main.c: 932: page,
 13687                           ;main.c: 933: reg,
 13688                           ;main.c: 934: rwtimeout,
 13689                           ;main.c: 935: &value)) {
 13690  000E9A  0100               	movlb	0	; () banked
 13691  000E9C  C2A7  F0B8         	movff	doModeVerbose@page_1248,?_writeRegisterExtended
 13692  000EA0  6BB9               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 13693  000EA2  C2A8  F0BA         	movff	doModeVerbose@reg_1249,?_writeRegisterExtended+2
 13694  000EA6  C034  F0BB         	movff	_rwtimeout,?_writeRegisterExtended+3
 13695  000EAA  6BBC               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 13696  000EAC  0E02               	movlw	high doModeVerbose@value_1250
 13697  000EAE  6FBE               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 13698  000EB0  0EB0               	movlw	low doModeVerbose@value_1250
 13699  000EB2  6FBD               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 13700  000EB4  0102               	movlb	2	; () banked
 13701  000EB6  51B3               	movf	doModeVerbose@nodeid_1247& (0+255),w,b
 13702  000EB8  EC47  F021         	call	_writeRegisterExtended
 13703  000EBC  0900               	iorlw	0
 13704  000EBE  E031               	bz	l14484
 13705                           
 13706                           ;main.c: 936: putsUSART((char *) "+OK - Value written successfully for ");
 13707  000EC0  0E78               	movlw	high STR_87
 13708  000EC2  0100               	movlb	0	; () banked
 13709  000EC4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13710  000EC6  0EBD               	movlw	low STR_87
 13711  000EC8  6F61               	movwf	?_putsUSART& (0+255),b
 13712  000ECA  EC41  F02C         	call	_putsUSART	;wreg free
 13713                           
 13714                           ;main.c: 937: putsUSART((char *) "nodeid=");
 13715  000ECE  0E7E               	movlw	high (STR_55+6)
 13716  000ED0  0100               	movlb	0	; () banked
 13717  000ED2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13718  000ED4  0E41               	movlw	low (STR_55+6)
 13719  000ED6  6F61               	movwf	?_putsUSART& (0+255),b
 13720  000ED8  EC41  F02C         	call	_putsUSART	;wreg free
 13721                           
 13722                           ;main.c: 938: sprintf(wrkbuf, bHex ? "0x%02X\n" : "%d\n", nodeid);
 13723  000EDC  662B               	tstfsz	_bHex,c
 13724  000EDE  D005               	goto	l14478
 13725  000EE0  0E7F               	movlw	high STR_90
 13726  000EE2  0102               	movlb	2	; () banked
 13727  000EE4  6FA1               	movwf	(_doModeVerbose$1264+1)& (0+255),b
 13728  000EE6  0ED2               	movlw	low STR_90
 13729  000EE8  D004               	goto	L15
 13730  000EEA                     l14478:
 13731  000EEA  0E7E               	movlw	high STR_89
 13732  000EEC  0102               	movlb	2	; () banked
 13733  000EEE  6FA1               	movwf	(_doModeVerbose$1264+1)& (0+255),b
 13734  000EF0  0EC7               	movlw	low STR_89
 13735  000EF2                     L15:
 13736  000EF2  6FA0               	movwf	_doModeVerbose$1264& (0+255),b
 13737                           
 13738                           ; BSR set to: 2
 13739  000EF4  0E01               	movlw	high _wrkbuf
 13740  000EF6  0100               	movlb	0	; () banked
 13741  000EF8  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13742  000EFA  0E79               	movlw	low _wrkbuf
 13743  000EFC  6F76               	movwf	?_sprintf& (0+255),b
 13744  000EFE  C2A0  F078         	movff	_doModeVerbose$1264,?_sprintf+2
 13745  000F02  C2A1  F079         	movff	_doModeVerbose$1264+1,?_sprintf+3
 13746  000F06  C2B3  F07A         	movff	doModeVerbose@nodeid_1247,?_sprintf+4
 13747  000F0A  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13748  000F0C  EC08  F00D         	call	_sprintf	;wreg free
 13749                           
 13750                           ; BSR set to: 0
 13751                           ;main.c: 939: putsUSART(wrkbuf);
 13752  000F10  0E01               	movlw	high _wrkbuf
 13753  000F12  0100               	movlb	0	; () banked
 13754  000F14  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13755  000F16  0E79               	movlw	low _wrkbuf
 13756  000F18  6F61               	movwf	?_putsUSART& (0+255),b
 13757  000F1A  EC41  F02C         	call	_putsUSART	;wreg free
 13758                           
 13759                           ;main.c: 940: }
 13760  000F1E  EF33  F00C         	goto	l14798
 13761  000F22                     l14484:
 13762                           
 13763                           ;main.c: 941: else {
 13764                           ;main.c: 942: putsUSART((char *) "-ERROR - Failed to write value for ");
 13765  000F22  0E79               	movlw	high STR_91
 13766  000F24  0100               	movlb	0	; () banked
 13767  000F26  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13768  000F28  0E76               	movlw	low STR_91
 13769  000F2A  6F61               	movwf	?_putsUSART& (0+255),b
 13770  000F2C  EC41  F02C         	call	_putsUSART	;wreg free
 13771                           
 13772                           ;main.c: 943: putsUSART((char *) "nodeid=");
 13773  000F30  0E7E               	movlw	high (STR_55+6)
 13774  000F32  0100               	movlb	0	; () banked
 13775  000F34  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13776  000F36  0E41               	movlw	low (STR_55+6)
 13777  000F38  6F61               	movwf	?_putsUSART& (0+255),b
 13778  000F3A  EC41  F02C         	call	_putsUSART	;wreg free
 13779                           
 13780                           ;main.c: 944: sprintf(wrkbuf, bHex ? "0x%02X\n" : "%d\n", nodeid);
 13781  000F3E  662B               	tstfsz	_bHex,c
 13782  000F40  D005               	goto	l14490
 13783  000F42  0E7F               	movlw	high STR_90
 13784  000F44  0102               	movlb	2	; () banked
 13785  000F46  6FA3               	movwf	(_doModeVerbose$1270+1)& (0+255),b
 13786  000F48  0ED2               	movlw	low STR_90
 13787  000F4A  D004               	goto	L16
 13788  000F4C                     l14490:
 13789  000F4C  0E7E               	movlw	high STR_89
 13790  000F4E  0102               	movlb	2	; () banked
 13791  000F50  6FA3               	movwf	(_doModeVerbose$1270+1)& (0+255),b
 13792  000F52  0EC7               	movlw	low STR_89
 13793  000F54                     L16:
 13794  000F54  6FA2               	movwf	_doModeVerbose$1270& (0+255),b
 13795                           
 13796                           ; BSR set to: 2
 13797  000F56  0E01               	movlw	high _wrkbuf
 13798  000F58  0100               	movlb	0	; () banked
 13799  000F5A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13800  000F5C  0E79               	movlw	low _wrkbuf
 13801  000F5E  6F76               	movwf	?_sprintf& (0+255),b
 13802  000F60  C2A2  F078         	movff	_doModeVerbose$1270,?_sprintf+2
 13803  000F64  C2A3  F079         	movff	_doModeVerbose$1270+1,?_sprintf+3
 13804  000F68  C2B3  F07A         	movff	doModeVerbose@nodeid_1247,?_sprintf+4
 13805  000F6C  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13806  000F6E  EC08  F00D         	call	_sprintf	;wreg free
 13807                           
 13808                           ; BSR set to: 0
 13809                           ;main.c: 945: }
 13810                           ;main.c: 947: }
 13811  000F72  EF33  F00C         	goto	l14798
 13812  000F76                     l14494:
 13813                           
 13814                           ; BSR set to: 0
 13815                           ;main.c: 950: else if (cmdbuf == stristr(cmdbuf, "INFO")) {
 13816  000F76  0E01               	movlw	high _cmdbuf
 13817  000F78  0100               	movlb	0	; () banked
 13818  000F7A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13819  000F7C  0E29               	movlw	low _cmdbuf
 13820  000F7E  6F6D               	movwf	?_stristr& (0+255),b
 13821  000F80  0E7F               	movlw	high STR_95
 13822  000F82  6F70               	movwf	(?_stristr+3)& (0+255),b
 13823  000F84  0EB1               	movlw	low STR_95
 13824  000F86  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13825  000F88  EC3B  F02A         	call	_stristr	;wreg free
 13826  000F8C  0E29               	movlw	low _cmdbuf
 13827  000F8E  6FCC               	movwf	??_doModeVerbose& (0+255),b
 13828  000F90  0E01               	movlw	high _cmdbuf
 13829  000F92  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 13830  000F94  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13831  000F96  E102               	bnz	u19275
 13832  000F98  516D               	movf	?_stristr& (0+255),w,b
 13833  000F9A  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 13834  000F9C                     u19275:
 13835  000F9C  E152               	bnz	l14522
 13836                           
 13837                           ; BSR set to: 0
 13838                           ;main.c: 951: uint8_t nodeid;
 13839                           ;main.c: 953: strcpy(cmdbuf, cmdbuf + 5);
 13840  000F9E  EC42  F00C         	call	PL2	;call to abstracted procedure
 13841  000FA2  ECAE  F02E         	call	_strcpy	;wreg free
 13842                           
 13843                           ; BSR set to: 0
 13844                           ;main.c: 954: nodeid = atoi(cmdbuf);
 13845  000FA6  0E01               	movlw	high _cmdbuf
 13846  000FA8  0100               	movlb	0	; () banked
 13847  000FAA  6F67               	movwf	(?_atoi+1)& (0+255),b
 13848  000FAC  0E29               	movlw	low _cmdbuf
 13849  000FAE  6F66               	movwf	?_atoi& (0+255),b
 13850  000FB0  EC43  F020         	call	_atoi	;wreg free
 13851  000FB4  5166               	movf	?_atoi& (0+255),w,b
 13852  000FB6  0102               	movlb	2	; () banked
 13853  000FB8  6FB6               	movwf	doModeVerbose@nodeid_1272& (0+255),b
 13854                           
 13855                           ; BSR set to: 2
 13856                           ;main.c: 956: putsUSART((char *) "Info for node id = ");
 13857  000FBA  0E7D               	movlw	high STR_96
 13858  000FBC  0100               	movlb	0	; () banked
 13859  000FBE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13860  000FC0  0E5A               	movlw	low STR_96
 13861  000FC2  6F61               	movwf	?_putsUSART& (0+255),b
 13862  000FC4  EC41  F02C         	call	_putsUSART	;wreg free
 13863                           
 13864                           ;main.c: 957: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", nodeid);
 13865  000FC8  662B               	tstfsz	_bHex,c
 13866  000FCA  D005               	goto	l14506
 13867  000FCC  0E7F               	movlw	high STR_60
 13868  000FCE  0102               	movlb	2	; () banked
 13869  000FD0  6FA5               	movwf	(_doModeVerbose$1277+1)& (0+255),b
 13870  000FD2  0EEE               	movlw	low STR_60
 13871  000FD4  D004               	goto	L17
 13872  000FD6                     l14506:
 13873  000FD6  0E7F               	movlw	high STR_59
 13874  000FD8  0102               	movlb	2	; () banked
 13875  000FDA  6FA5               	movwf	(_doModeVerbose$1277+1)& (0+255),b
 13876  000FDC  0E4E               	movlw	low STR_59
 13877  000FDE                     L17:
 13878  000FDE  6FA4               	movwf	_doModeVerbose$1277& (0+255),b
 13879                           
 13880                           ; BSR set to: 2
 13881  000FE0  0E01               	movlw	high _wrkbuf
 13882  000FE2  0100               	movlb	0	; () banked
 13883  000FE4  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13884  000FE6  0E79               	movlw	low _wrkbuf
 13885  000FE8  6F76               	movwf	?_sprintf& (0+255),b
 13886  000FEA  C2A4  F078         	movff	_doModeVerbose$1277,?_sprintf+2
 13887  000FEE  C2A5  F079         	movff	_doModeVerbose$1277+1,?_sprintf+3
 13888  000FF2  C2B6  F07A         	movff	doModeVerbose@nodeid_1272,?_sprintf+4
 13889  000FF6  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13890  000FF8  EC08  F00D         	call	_sprintf	;wreg free
 13891                           
 13892                           ; BSR set to: 0
 13893                           ;main.c: 958: putsUSART(wrkbuf);
 13894  000FFC  0E01               	movlw	high _wrkbuf
 13895  000FFE  0100               	movlb	0	; () banked
 13896  001000  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13897  001002  0E79               	movlw	low _wrkbuf
 13898  001004  6F61               	movwf	?_putsUSART& (0+255),b
 13899  001006  EC41  F02C         	call	_putsUSART	;wreg free
 13900                           
 13901                           ;main.c: 959: putsUSART((char *) "\r\n");
 13902  00100A  0E74               	movlw	high (STR_220+50)
 13903  00100C  0100               	movlb	0	; () banked
 13904  00100E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13905  001010  0E72               	movlw	low (STR_220+50)
 13906  001012  6F61               	movwf	?_putsUSART& (0+255),b
 13907  001014  EC41  F02C         	call	_putsUSART	;wreg free
 13908                           
 13909                           ;main.c: 960: printNodeFirmwareVersion(nodeid);
 13910  001018  0102               	movlb	2	; () banked
 13911  00101A  51B6               	movf	doModeVerbose@nodeid_1272& (0+255),w,b
 13912  00101C  ECD8  F024         	call	_printNodeFirmwareVersion
 13913                           
 13914                           ;main.c: 961: printGUID(nodeid);
 13915  001020  0102               	movlb	2	; () banked
 13916  001022  51B6               	movf	doModeVerbose@nodeid_1272& (0+255),w,b
 13917  001024  ECC6  F020         	call	_printGUID
 13918                           
 13919                           ;main.c: 962: printMDF(nodeid);
 13920  001028  0102               	movlb	2	; () banked
 13921  00102A  51B6               	movf	doModeVerbose@nodeid_1272& (0+255),w,b
 13922  00102C  EC9B  F028         	call	_printMDF
 13923                           
 13924                           ;main.c: 963: putsUSART((char *) "+OK\r\n");
 13925  001030  0E7F               	movlw	high STR_9
 13926  001032  0100               	movlb	0	; () banked
 13927  001034  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13928  001036  0E69               	movlw	low STR_9
 13929  001038  6F61               	movwf	?_putsUSART& (0+255),b
 13930  00103A  EC41  F02C         	call	_putsUSART	;wreg free
 13931                           
 13932                           ;main.c: 964: }
 13933  00103E  EF33  F00C         	goto	l14798
 13934  001042                     l14522:
 13935                           
 13936                           ; BSR set to: 0
 13937                           ;main.c: 968: else if (cmdbuf == stristr(cmdbuf, "FILTER")) {
 13938  001042  0E01               	movlw	high _cmdbuf
 13939  001044  0100               	movlb	0	; () banked
 13940  001046  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13941  001048  0E29               	movlw	low _cmdbuf
 13942  00104A  6F6D               	movwf	?_stristr& (0+255),b
 13943  00104C  0E7F               	movlw	high STR_101
 13944  00104E  6F70               	movwf	(?_stristr+3)& (0+255),b
 13945  001050  0E40               	movlw	low STR_101
 13946  001052  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13947  001054  EC3B  F02A         	call	_stristr	;wreg free
 13948  001058  0E29               	movlw	low _cmdbuf
 13949  00105A  6FCC               	movwf	??_doModeVerbose& (0+255),b
 13950  00105C  0E01               	movlw	high _cmdbuf
 13951  00105E  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 13952  001060  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13953  001062  E102               	bnz	u19295
 13954  001064  516D               	movf	?_stristr& (0+255),w,b
 13955  001066  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 13956  001068                     u19295:
 13957  001068  E001 D0D7          	bnz	l14592
 13958                           
 13959                           ; BSR set to: 0
 13960                           ;main.c: 970: uint8_t filterno;
 13961                           ;main.c: 971: uint8_t filter_priority;
 13962                           ;main.c: 972: uint16_t filter_class;
 13963                           ;main.c: 973: uint8_t filter_type;
 13964                           ;main.c: 974: uint8_t filter_nodeid;
 13965                           ;main.c: 976: strcpy(cmdbuf, cmdbuf + 8);
 13966  00106C  0E01               	movlw	high _cmdbuf
 13967  00106E  EC50  F00C         	call	PL4	;call to abstracted procedure
 13968  001072  ECAE  F02E         	call	_strcpy	;wreg free
 13969                           
 13970                           ; BSR set to: 0
 13971                           ;main.c: 977: char *p = strtok(cmdbuf, ",");
 13972  001076  EC99  F00C         	call	PL30	;call to abstracted procedure
 13973  00107A  ECE5  F028         	call	_strtok	;wreg free
 13974  00107E  C06C  F2C1         	movff	?_strtok,doModeVerbose@p_1286
 13975  001082  C06D  F2C2         	movff	?_strtok+1,doModeVerbose@p_1286+1
 13976                           
 13977                           ; BSR set to: 0
 13978                           ;main.c: 978: if ((0) != p) {
 13979  001086  0102               	movlb	2	; () banked
 13980  001088  51C2               	movf	(doModeVerbose@p_1286+1)& (0+255),w,b
 13981  00108A  11C1               	iorwf	doModeVerbose@p_1286& (0+255),w,b
 13982  00108C  E014               	bz	l14538
 13983                           
 13984                           ; BSR set to: 2
 13985                           ;main.c: 979: filterno = atoi(p);
 13986  00108E  C2C1  F066         	movff	doModeVerbose@p_1286,?_atoi
 13987  001092  C2C2  F067         	movff	doModeVerbose@p_1286+1,?_atoi+1
 13988  001096  EC43  F020         	call	_atoi	;wreg free
 13989  00109A  5166               	movf	?_atoi& (0+255),w,b
 13990  00109C  0102               	movlb	2	; () banked
 13991  00109E  6FAD               	movwf	doModeVerbose@filterno& (0+255),b
 13992                           
 13993                           ; BSR set to: 2
 13994                           ;main.c: 980: if (filterno > 15) {
 13995  0010A0  0E0F               	movlw	15
 13996  0010A2  65AD               	cpfsgt	doModeVerbose@filterno& (0+255),b
 13997  0010A4  D010               	goto	l14542
 13998                           
 13999                           ; BSR set to: 2
 14000                           ;main.c: 981: putsUSART((char *) "-ERROR - Filter number can only be set to a value betw
      +                          een 0-15.\r\n");
 14001  0010A6  0E71               	movlw	high STR_103
 14002  0010A8  0100               	movlb	0	; () banked
 14003  0010AA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14004  0010AC  0ECA               	movlw	low STR_103
 14005  0010AE  6F61               	movwf	?_putsUSART& (0+255),b
 14006  0010B0  EC41  F02C         	call	_putsUSART	;wreg free
 14007  0010B4  D3E6               	goto	l564
 14008  0010B6                     l14538:
 14009                           
 14010                           ; BSR set to: 2
 14011                           ;main.c: 985: else {
 14012                           ;main.c: 986: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 14013  0010B6  0E77               	movlw	high STR_104
 14014  0010B8  0100               	movlb	0	; () banked
 14015  0010BA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14016  0010BC  0EAD               	movlw	low STR_104
 14017  0010BE  6F61               	movwf	?_putsUSART& (0+255),b
 14018  0010C0  EC41  F02C         	call	_putsUSART	;wreg free
 14019  0010C4  D3DE               	goto	l564
 14020  0010C6                     l14542:
 14021                           
 14022                           ; BSR set to: 2
 14023                           ;main.c: 988: }
 14024                           ;main.c: 991: p = strtok((0), ",");
 14025  0010C6  DBF9               	call	PL6	;call to abstracted procedure
 14026  0010C8  ECE5  F028         	call	_strtok	;wreg free
 14027  0010CC  C06C  F2C1         	movff	?_strtok,doModeVerbose@p_1286
 14028  0010D0  C06D  F2C2         	movff	?_strtok+1,doModeVerbose@p_1286+1
 14029                           
 14030                           ; BSR set to: 0
 14031                           ;main.c: 992: if ((0) != p) {
 14032  0010D4  0102               	movlb	2	; () banked
 14033  0010D6  51C2               	movf	(doModeVerbose@p_1286+1)& (0+255),w,b
 14034  0010D8  11C1               	iorwf	doModeVerbose@p_1286& (0+255),w,b
 14035  0010DA  E00A               	bz	l14548
 14036                           
 14037                           ; BSR set to: 2
 14038                           ;main.c: 993: filter_priority = atoi(p);
 14039  0010DC  C2C1  F066         	movff	doModeVerbose@p_1286,?_atoi
 14040  0010E0  C2C2  F067         	movff	doModeVerbose@p_1286+1,?_atoi+1
 14041  0010E4  EC43  F020         	call	_atoi	;wreg free
 14042  0010E8  5166               	movf	?_atoi& (0+255),w,b
 14043  0010EA  0102               	movlb	2	; () banked
 14044  0010EC  6F8C               	movwf	doModeVerbose@filter_priority& (0+255),b
 14045                           
 14046                           ;main.c: 994: }
 14047  0010EE  D008               	goto	l14552
 14048  0010F0                     l14548:
 14049                           
 14050                           ; BSR set to: 2
 14051                           ;main.c: 995: else {
 14052                           ;main.c: 996: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 14053  0010F0  0E76               	movlw	high STR_106
 14054  0010F2  0100               	movlb	0	; () banked
 14055  0010F4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14056  0010F6  0EE2               	movlw	low STR_106
 14057  0010F8  6F61               	movwf	?_putsUSART& (0+255),b
 14058  0010FA  EC41  F02C         	call	_putsUSART	;wreg free
 14059  0010FE  D3C1               	goto	l564
 14060  001100                     l14552:
 14061                           
 14062                           ; BSR set to: 2
 14063                           ;main.c: 998: }
 14064                           ;main.c: 1001: p = strtok((0), ",");
 14065  001100  DBDC               	call	PL6	;call to abstracted procedure
 14066  001102  ECE5  F028         	call	_strtok	;wreg free
 14067  001106  C06C  F2C1         	movff	?_strtok,doModeVerbose@p_1286
 14068  00110A  C06D  F2C2         	movff	?_strtok+1,doModeVerbose@p_1286+1
 14069                           
 14070                           ; BSR set to: 0
 14071                           ;main.c: 1002: if ((0) != p) {
 14072  00110E  0102               	movlb	2	; () banked
 14073  001110  51C2               	movf	(doModeVerbose@p_1286+1)& (0+255),w,b
 14074  001112  11C1               	iorwf	doModeVerbose@p_1286& (0+255),w,b
 14075  001114  E00B               	bz	l14558
 14076                           
 14077                           ; BSR set to: 2
 14078                           ;main.c: 1003: filter_class = atoi(p);
 14079  001116  C2C1  F066         	movff	doModeVerbose@p_1286,?_atoi
 14080  00111A  C2C2  F067         	movff	doModeVerbose@p_1286+1,?_atoi+1
 14081  00111E  EC43  F020         	call	_atoi	;wreg free
 14082  001122  C066  F288         	movff	?_atoi,doModeVerbose@filter_class
 14083  001126  C067  F289         	movff	?_atoi+1,doModeVerbose@filter_class+1
 14084                           
 14085                           ;main.c: 1004: }
 14086  00112A  D008               	goto	l14562
 14087  00112C                     l14558:
 14088                           
 14089                           ; BSR set to: 2
 14090                           ;main.c: 1005: else {
 14091                           ;main.c: 1006: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 14092  00112C  0E78               	movlw	high STR_108
 14093  00112E  0100               	movlb	0	; () banked
 14094  001130  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14095  001132  0E49               	movlw	low STR_108
 14096  001134  6F61               	movwf	?_putsUSART& (0+255),b
 14097  001136  EC41  F02C         	call	_putsUSART	;wreg free
 14098  00113A  D3A3               	goto	l564
 14099  00113C                     l14562:
 14100                           
 14101                           ; BSR set to: 0
 14102                           ;main.c: 1008: }
 14103                           ;main.c: 1011: p = strtok((0), ",");
 14104  00113C  DBC6               	call	PL8	;call to abstracted procedure
 14105  00113E  ECE5  F028         	call	_strtok	;wreg free
 14106  001142  C06C  F2C1         	movff	?_strtok,doModeVerbose@p_1286
 14107  001146  C06D  F2C2         	movff	?_strtok+1,doModeVerbose@p_1286+1
 14108                           
 14109                           ; BSR set to: 0
 14110                           ;main.c: 1012: if ((0) != p) {
 14111  00114A  0102               	movlb	2	; () banked
 14112  00114C  51C2               	movf	(doModeVerbose@p_1286+1)& (0+255),w,b
 14113  00114E  11C1               	iorwf	doModeVerbose@p_1286& (0+255),w,b
 14114  001150  E00A               	bz	l14568
 14115                           
 14116                           ; BSR set to: 2
 14117                           ;main.c: 1013: filter_type = atoi(p);
 14118  001152  C2C1  F066         	movff	doModeVerbose@p_1286,?_atoi
 14119  001156  C2C2  F067         	movff	doModeVerbose@p_1286+1,?_atoi+1
 14120  00115A  EC43  F020         	call	_atoi	;wreg free
 14121  00115E  5166               	movf	?_atoi& (0+255),w,b
 14122  001160  0102               	movlb	2	; () banked
 14123  001162  6F8D               	movwf	doModeVerbose@filter_type& (0+255),b
 14124                           
 14125                           ;main.c: 1014: }
 14126  001164  D008               	goto	l14572
 14127  001166                     l14568:
 14128                           
 14129                           ; BSR set to: 2
 14130                           ;main.c: 1015: else {
 14131                           ;main.c: 1016: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 14132  001166  0E78               	movlw	high STR_110
 14133  001168  0100               	movlb	0	; () banked
 14134  00116A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14135  00116C  0E97               	movlw	low STR_110
 14136  00116E  6F61               	movwf	?_putsUSART& (0+255),b
 14137  001170  EC41  F02C         	call	_putsUSART	;wreg free
 14138  001174  D386               	goto	l564
 14139  001176                     l14572:
 14140                           
 14141                           ; BSR set to: 2
 14142                           ;main.c: 1018: }
 14143                           ;main.c: 1021: p = strtok((0), ",");
 14144  001176  DBA1               	call	PL6	;call to abstracted procedure
 14145  001178  ECE5  F028         	call	_strtok	;wreg free
 14146  00117C  C06C  F2C1         	movff	?_strtok,doModeVerbose@p_1286
 14147  001180  C06D  F2C2         	movff	?_strtok+1,doModeVerbose@p_1286+1
 14148                           
 14149                           ; BSR set to: 0
 14150                           ;main.c: 1022: if ((0) != p) {
 14151  001184  0102               	movlb	2	; () banked
 14152  001186  51C2               	movf	(doModeVerbose@p_1286+1)& (0+255),w,b
 14153  001188  11C1               	iorwf	doModeVerbose@p_1286& (0+255),w,b
 14154  00118A  E00A               	bz	l14578
 14155                           
 14156                           ; BSR set to: 2
 14157                           ;main.c: 1023: filter_nodeid = atoi(p);
 14158  00118C  C2C1  F066         	movff	doModeVerbose@p_1286,?_atoi
 14159  001190  C2C2  F067         	movff	doModeVerbose@p_1286+1,?_atoi+1
 14160  001194  EC43  F020         	call	_atoi	;wreg free
 14161  001198  5166               	movf	?_atoi& (0+255),w,b
 14162  00119A  0102               	movlb	2	; () banked
 14163  00119C  6F8E               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 14164                           
 14165                           ;main.c: 1024: }
 14166  00119E  D008               	goto	l14582
 14167  0011A0                     l14578:
 14168                           
 14169                           ; BSR set to: 2
 14170                           ;main.c: 1025: else {
 14171                           ;main.c: 1026: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 14172  0011A0  0E77               	movlw	high STR_112
 14173  0011A2  0100               	movlb	0	; () banked
 14174  0011A4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14175  0011A6  0E0C               	movlw	low STR_112
 14176  0011A8  6F61               	movwf	?_putsUSART& (0+255),b
 14177  0011AA  EC41  F02C         	call	_putsUSART	;wreg free
 14178  0011AE  D369               	goto	l564
 14179  0011B0                     l14582:
 14180                           
 14181                           ; BSR set to: 2
 14182                           ;main.c: 1028: }
 14183                           ;main.c: 1031: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 14184  0011B0  0E80               	movlw	128
 14185  0011B2  EC1E  F02F         	call	_ECANSetOperationMode
 14186                           
 14187                           ; BSR set to: 0
 14188                           ;main.c: 1033: uint32_t id = ((uint32_t) filter_priority << 26) |
 14189                           ;main.c: 1034: ((uint32_t) filter_class << 16) |
 14190                           ;main.c: 1035: ((uint32_t) filter_type << 8) |
 14191                           ;main.c: 1036: filter_nodeid;
 14192  0011B6  C28D  F0CC         	movff	doModeVerbose@filter_type,??_doModeVerbose
 14193  0011BA  DBDB               	call	PL40	;call to abstracted procedure
 14194  0011BC  5188               	movf	doModeVerbose@filter_class& (0+255),w,b
 14195  0011BE  0100               	movlb	0	; () banked
 14196  0011C0  6FD0               	movwf	(??_doModeVerbose+4)& (0+255),b
 14197  0011C2  0102               	movlb	2	; () banked
 14198  0011C4  5189               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 14199  0011C6  DBEE               	call	PL62	;call to abstracted procedure
 14200  0011C8  C28C  F0D4         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 14201  0011CC  DB85               	call	PL10	;call to abstracted procedure
 14202  0011CE  518E               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 14203  0011D0  0100               	movlb	0	; () banked
 14204  0011D2  11DC               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 14205  0011D4  0102               	movlb	2	; () banked
 14206  0011D6  6F80               	movwf	doModeVerbose@id& (0+255),b
 14207  0011D8  0100               	movlb	0	; () banked
 14208  0011DA  51DD               	movf	(??_doModeVerbose+17)& (0+255),w,b
 14209  0011DC  0102               	movlb	2	; () banked
 14210  0011DE  6F81               	movwf	(doModeVerbose@id+1)& (0+255),b
 14211  0011E0  0100               	movlb	0	; () banked
 14212  0011E2  51DE               	movf	(??_doModeVerbose+18)& (0+255),w,b
 14213  0011E4  0102               	movlb	2	; () banked
 14214  0011E6  6F82               	movwf	(doModeVerbose@id+2)& (0+255),b
 14215  0011E8  0100               	movlb	0	; () banked
 14216  0011EA  51DF               	movf	(??_doModeVerbose+19)& (0+255),w,b
 14217  0011EC  0102               	movlb	2	; () banked
 14218  0011EE  6F83               	movwf	(doModeVerbose@id+3)& (0+255),b
 14219                           
 14220                           ; BSR set to: 2
 14221                           ;main.c: 1037: setFilter(filterno, id);
 14222  0011F0  C280  F062         	movff	doModeVerbose@id,?_setFilter
 14223  0011F4  C281  F063         	movff	doModeVerbose@id+1,?_setFilter+1
 14224  0011F8  C282  F064         	movff	doModeVerbose@id+2,?_setFilter+2
 14225  0011FC  C283  F065         	movff	doModeVerbose@id+3,?_setFilter+3
 14226  001200  51AD               	movf	doModeVerbose@filterno& (0+255),w,b
 14227  001202  EC3C  F017         	call	_setFilter
 14228                           
 14229                           ; BSR set to: 0
 14230                           ;main.c: 1040: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 14231  001206  0E00               	movlw	0
 14232  001208  EC1E  F02F         	call	_ECANSetOperationMode
 14233                           
 14234                           ; BSR set to: 0
 14235                           ;main.c: 1042: putsUSART((char *) "+OK\r\n");
 14236  00120C  0E7F               	movlw	high STR_9
 14237  00120E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14238  001210  0E69               	movlw	low STR_9
 14239  001212  6F61               	movwf	?_putsUSART& (0+255),b
 14240  001214  EC41  F02C         	call	_putsUSART	;wreg free
 14241                           
 14242                           ;main.c: 1043: }
 14243  001218  D326               	goto	l14798
 14244  00121A                     l14592:
 14245                           
 14246                           ; BSR set to: 0
 14247                           ;main.c: 1047: else if (cmdbuf == stristr(cmdbuf, "MASK")) {
 14248  00121A  0E01               	movlw	high _cmdbuf
 14249  00121C  0100               	movlb	0	; () banked
 14250  00121E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14251  001220  0E29               	movlw	low _cmdbuf
 14252  001222  6F6D               	movwf	?_stristr& (0+255),b
 14253  001224  0E7F               	movlw	high STR_114
 14254  001226  6F70               	movwf	(?_stristr+3)& (0+255),b
 14255  001228  0EA7               	movlw	low STR_114
 14256  00122A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14257  00122C  EC3B  F02A         	call	_stristr	;wreg free
 14258  001230  0E29               	movlw	low _cmdbuf
 14259  001232  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14260  001234  0E01               	movlw	high _cmdbuf
 14261  001236  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14262  001238  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14263  00123A  E102               	bnz	u19375
 14264  00123C  516D               	movf	?_stristr& (0+255),w,b
 14265  00123E  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 14266  001240                     u19375:
 14267  001240  E001 D0DC          	bnz	l14666
 14268                           
 14269                           ; BSR set to: 0
 14270                           ;main.c: 1049: uint8_t maskno;
 14271                           ;main.c: 1050: uint8_t mask_priority;
 14272                           ;main.c: 1051: uint16_t mask_class;
 14273                           ;main.c: 1052: uint8_t mask_type;
 14274                           ;main.c: 1053: uint8_t mask_nodeid;
 14275                           ;main.c: 1055: strcpy(cmdbuf, cmdbuf + 8);
 14276  001244  0E01               	movlw	high _cmdbuf
 14277  001246  DB2C               	call	PL4	;call to abstracted procedure
 14278  001248  ECAE  F02E         	call	_strcpy	;wreg free
 14279                           
 14280                           ; BSR set to: 0
 14281                           ;main.c: 1056: char *p = strtok(cmdbuf, ",");
 14282  00124C  DB72               	call	PL30	;call to abstracted procedure
 14283  00124E  ECE5  F028         	call	_strtok	;wreg free
 14284  001252  C06C  F2C3         	movff	?_strtok,doModeVerbose@p_1306
 14285  001256  C06D  F2C4         	movff	?_strtok+1,doModeVerbose@p_1306+1
 14286                           
 14287                           ; BSR set to: 0
 14288                           ;main.c: 1057: if ((0) != p) {
 14289  00125A  0102               	movlb	2	; () banked
 14290  00125C  51C4               	movf	(doModeVerbose@p_1306+1)& (0+255),w,b
 14291  00125E  11C3               	iorwf	doModeVerbose@p_1306& (0+255),w,b
 14292  001260  E014               	bz	l14608
 14293                           
 14294                           ; BSR set to: 2
 14295                           ;main.c: 1058: maskno = atoi(p);
 14296  001262  C2C3  F066         	movff	doModeVerbose@p_1306,?_atoi
 14297  001266  C2C4  F067         	movff	doModeVerbose@p_1306+1,?_atoi+1
 14298  00126A  EC43  F020         	call	_atoi	;wreg free
 14299  00126E  5166               	movf	?_atoi& (0+255),w,b
 14300  001270  0102               	movlb	2	; () banked
 14301  001272  6FAE               	movwf	doModeVerbose@maskno& (0+255),b
 14302                           
 14303                           ; BSR set to: 2
 14304                           ;main.c: 1059: if (maskno > 1) {
 14305  001274  0E01               	movlw	1
 14306  001276  65AE               	cpfsgt	doModeVerbose@maskno& (0+255),b
 14307  001278  D010               	goto	l14612
 14308                           
 14309                           ; BSR set to: 2
 14310                           ;main.c: 1060: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 14311  00127A  0E74               	movlw	high STR_116
 14312  00127C  0100               	movlb	0	; () banked
 14313  00127E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14314  001280  0EDC               	movlw	low STR_116
 14315  001282  6F61               	movwf	?_putsUSART& (0+255),b
 14316  001284  EC41  F02C         	call	_putsUSART	;wreg free
 14317  001288  D2FC               	goto	l564
 14318  00128A                     l14608:
 14319                           
 14320                           ; BSR set to: 2
 14321                           ;main.c: 1064: else {
 14322                           ;main.c: 1065: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 14323  00128A  0E78               	movlw	high STR_117
 14324  00128C  0100               	movlb	0	; () banked
 14325  00128E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14326  001290  0EE3               	movlw	low STR_117
 14327  001292  6F61               	movwf	?_putsUSART& (0+255),b
 14328  001294  EC41  F02C         	call	_putsUSART	;wreg free
 14329  001298  D2F4               	goto	l564
 14330  00129A                     l14612:
 14331                           
 14332                           ; BSR set to: 2
 14333                           ;main.c: 1067: }
 14334                           ;main.c: 1070: p = strtok((0), ",");
 14335  00129A  DB0F               	call	PL6	;call to abstracted procedure
 14336  00129C  ECE5  F028         	call	_strtok	;wreg free
 14337  0012A0  C06C  F2C3         	movff	?_strtok,doModeVerbose@p_1306
 14338  0012A4  C06D  F2C4         	movff	?_strtok+1,doModeVerbose@p_1306+1
 14339                           
 14340                           ; BSR set to: 0
 14341                           ;main.c: 1071: if ((0) != p) {
 14342  0012A8  0102               	movlb	2	; () banked
 14343  0012AA  51C4               	movf	(doModeVerbose@p_1306+1)& (0+255),w,b
 14344  0012AC  11C3               	iorwf	doModeVerbose@p_1306& (0+255),w,b
 14345  0012AE  E00A               	bz	l14618
 14346                           
 14347                           ; BSR set to: 2
 14348                           ;main.c: 1072: mask_priority = atoi(p);
 14349  0012B0  C2C3  F066         	movff	doModeVerbose@p_1306,?_atoi
 14350  0012B4  C2C4  F067         	movff	doModeVerbose@p_1306+1,?_atoi+1
 14351  0012B8  EC43  F020         	call	_atoi	;wreg free
 14352  0012BC  5166               	movf	?_atoi& (0+255),w,b
 14353  0012BE  0102               	movlb	2	; () banked
 14354  0012C0  6F8F               	movwf	doModeVerbose@mask_priority& (0+255),b
 14355                           
 14356                           ;main.c: 1073: }
 14357  0012C2  D008               	goto	l14622
 14358  0012C4                     l14618:
 14359                           
 14360                           ; BSR set to: 2
 14361                           ;main.c: 1074: else {
 14362                           ;main.c: 1075: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 14363  0012C4  0E77               	movlw	high STR_119
 14364  0012C6  0100               	movlb	0	; () banked
 14365  0012C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14366  0012CA  0E5D               	movlw	low STR_119
 14367  0012CC  6F61               	movwf	?_putsUSART& (0+255),b
 14368  0012CE  EC41  F02C         	call	_putsUSART	;wreg free
 14369  0012D2  D2D7               	goto	l564
 14370  0012D4                     l14622:
 14371                           
 14372                           ; BSR set to: 2
 14373                           ;main.c: 1077: }
 14374                           ;main.c: 1080: p = strtok((0), ",");
 14375  0012D4  DAF2               	call	PL6	;call to abstracted procedure
 14376  0012D6  ECE5  F028         	call	_strtok	;wreg free
 14377  0012DA  C06C  F2C3         	movff	?_strtok,doModeVerbose@p_1306
 14378  0012DE  C06D  F2C4         	movff	?_strtok+1,doModeVerbose@p_1306+1
 14379                           
 14380                           ; BSR set to: 0
 14381                           ;main.c: 1081: if ((0) != p) {
 14382  0012E2  0102               	movlb	2	; () banked
 14383  0012E4  51C4               	movf	(doModeVerbose@p_1306+1)& (0+255),w,b
 14384  0012E6  11C3               	iorwf	doModeVerbose@p_1306& (0+255),w,b
 14385  0012E8  E00B               	bz	l14628
 14386                           
 14387                           ; BSR set to: 2
 14388                           ;main.c: 1082: mask_class = atoi(p);
 14389  0012EA  C2C3  F066         	movff	doModeVerbose@p_1306,?_atoi
 14390  0012EE  C2C4  F067         	movff	doModeVerbose@p_1306+1,?_atoi+1
 14391  0012F2  EC43  F020         	call	_atoi	;wreg free
 14392  0012F6  C066  F28A         	movff	?_atoi,doModeVerbose@mask_class
 14393  0012FA  C067  F28B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 14394                           
 14395                           ;main.c: 1083: }
 14396  0012FE  D008               	goto	l14632
 14397  001300                     l14628:
 14398                           
 14399                           ; BSR set to: 2
 14400                           ;main.c: 1084: else {
 14401                           ;main.c: 1085: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 14402  001300  0E79               	movlw	high STR_121
 14403  001302  0100               	movlb	0	; () banked
 14404  001304  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14405  001306  0E2D               	movlw	low STR_121
 14406  001308  6F61               	movwf	?_putsUSART& (0+255),b
 14407  00130A  EC41  F02C         	call	_putsUSART	;wreg free
 14408  00130E  D2B9               	goto	l564
 14409  001310                     l14632:
 14410                           
 14411                           ; BSR set to: 0
 14412                           ;main.c: 1087: }
 14413                           ;main.c: 1090: p = strtok((0), ",");
 14414  001310  DADC               	call	PL8	;call to abstracted procedure
 14415  001312  ECE5  F028         	call	_strtok	;wreg free
 14416  001316  C06C  F2C3         	movff	?_strtok,doModeVerbose@p_1306
 14417  00131A  C06D  F2C4         	movff	?_strtok+1,doModeVerbose@p_1306+1
 14418                           
 14419                           ; BSR set to: 0
 14420                           ;main.c: 1091: if ((0) != p) {
 14421  00131E  0102               	movlb	2	; () banked
 14422  001320  51C4               	movf	(doModeVerbose@p_1306+1)& (0+255),w,b
 14423  001322  11C3               	iorwf	doModeVerbose@p_1306& (0+255),w,b
 14424  001324  E00A               	bz	l14638
 14425                           
 14426                           ; BSR set to: 2
 14427                           ;main.c: 1092: mask_type = atoi(p);
 14428  001326  C2C3  F066         	movff	doModeVerbose@p_1306,?_atoi
 14429  00132A  C2C4  F067         	movff	doModeVerbose@p_1306+1,?_atoi+1
 14430  00132E  EC43  F020         	call	_atoi	;wreg free
 14431  001332  5166               	movf	?_atoi& (0+255),w,b
 14432  001334  0102               	movlb	2	; () banked
 14433  001336  6F90               	movwf	doModeVerbose@mask_type& (0+255),b
 14434                           
 14435                           ;main.c: 1093: }
 14436  001338  D008               	goto	l14642
 14437  00133A                     l14638:
 14438                           
 14439                           ; BSR set to: 2
 14440                           ;main.c: 1094: else {
 14441                           ;main.c: 1095: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 14442  00133A  0E79               	movlw	high STR_123
 14443  00133C  0100               	movlb	0	; () banked
 14444  00133E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14445  001340  0E52               	movlw	low STR_123
 14446  001342  6F61               	movwf	?_putsUSART& (0+255),b
 14447  001344  EC41  F02C         	call	_putsUSART	;wreg free
 14448  001348  D29C               	goto	l564
 14449  00134A                     l14642:
 14450                           
 14451                           ; BSR set to: 2
 14452                           ;main.c: 1097: }
 14453                           ;main.c: 1100: p = strtok((0), ",");
 14454  00134A  DAB7               	call	PL6	;call to abstracted procedure
 14455  00134C  ECE5  F028         	call	_strtok	;wreg free
 14456  001350  C06C  F2C3         	movff	?_strtok,doModeVerbose@p_1306
 14457  001354  C06D  F2C4         	movff	?_strtok+1,doModeVerbose@p_1306+1
 14458                           
 14459                           ; BSR set to: 0
 14460                           ;main.c: 1101: if ((0) != p) {
 14461  001358  0102               	movlb	2	; () banked
 14462  00135A  51C4               	movf	(doModeVerbose@p_1306+1)& (0+255),w,b
 14463  00135C  11C3               	iorwf	doModeVerbose@p_1306& (0+255),w,b
 14464  00135E  E00A               	bz	l14648
 14465                           
 14466                           ; BSR set to: 2
 14467                           ;main.c: 1102: mask_nodeid = atoi(p);
 14468  001360  C2C3  F066         	movff	doModeVerbose@p_1306,?_atoi
 14469  001364  C2C4  F067         	movff	doModeVerbose@p_1306+1,?_atoi+1
 14470  001368  EC43  F020         	call	_atoi	;wreg free
 14471  00136C  5166               	movf	?_atoi& (0+255),w,b
 14472  00136E  0102               	movlb	2	; () banked
 14473  001370  6F91               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 14474                           
 14475                           ;main.c: 1103: }
 14476  001372  D008               	goto	l14652
 14477  001374                     l14648:
 14478                           
 14479                           ; BSR set to: 2
 14480                           ;main.c: 1104: else {
 14481                           ;main.c: 1105: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 14482  001374  0E78               	movlw	high STR_125
 14483  001376  0100               	movlb	0	; () banked
 14484  001378  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14485  00137A  0E22               	movlw	low STR_125
 14486  00137C  6F61               	movwf	?_putsUSART& (0+255),b
 14487  00137E  EC41  F02C         	call	_putsUSART	;wreg free
 14488  001382  D27F               	goto	l564
 14489  001384                     l14652:
 14490                           
 14491                           ; BSR set to: 2
 14492                           ;main.c: 1107: }
 14493                           ;main.c: 1108: uint32_t id = ((uint32_t) mask_priority << 26) |
 14494                           ;main.c: 1109: ((uint32_t) mask_class << 16) |
 14495                           ;main.c: 1110: ((uint32_t) mask_type << 8) |
 14496                           ;main.c: 1111: mask_nodeid;
 14497  001384  C290  F0CC         	movff	doModeVerbose@mask_type,??_doModeVerbose
 14498  001388  DAF4               	call	PL40	;call to abstracted procedure
 14499  00138A  518A               	movf	doModeVerbose@mask_class& (0+255),w,b
 14500  00138C  0100               	movlb	0	; () banked
 14501  00138E  6FD0               	movwf	(??_doModeVerbose+4)& (0+255),b
 14502  001390  0102               	movlb	2	; () banked
 14503  001392  518B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 14504  001394  DB07               	call	PL62	;call to abstracted procedure
 14505  001396  C28F  F0D4         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 14506  00139A  DA9E               	call	PL10	;call to abstracted procedure
 14507  00139C  5191               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 14508  00139E  0100               	movlb	0	; () banked
 14509  0013A0  11DC               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 14510  0013A2  0102               	movlb	2	; () banked
 14511  0013A4  6FA9               	movwf	doModeVerbose@id_1318& (0+255),b
 14512  0013A6  0100               	movlb	0	; () banked
 14513  0013A8  51DD               	movf	(??_doModeVerbose+17)& (0+255),w,b
 14514  0013AA  0102               	movlb	2	; () banked
 14515  0013AC  6FAA               	movwf	(doModeVerbose@id_1318+1)& (0+255),b
 14516  0013AE  0100               	movlb	0	; () banked
 14517  0013B0  51DE               	movf	(??_doModeVerbose+18)& (0+255),w,b
 14518  0013B2  0102               	movlb	2	; () banked
 14519  0013B4  6FAB               	movwf	(doModeVerbose@id_1318+2)& (0+255),b
 14520  0013B6  0100               	movlb	0	; () banked
 14521  0013B8  51DF               	movf	(??_doModeVerbose+19)& (0+255),w,b
 14522  0013BA  0102               	movlb	2	; () banked
 14523  0013BC  6FAC               	movwf	(doModeVerbose@id_1318+3)& (0+255),b
 14524                           
 14525                           ; BSR set to: 2
 14526                           ;main.c: 1114: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 14527  0013BE  0E80               	movlw	128
 14528  0013C0  EC1E  F02F         	call	_ECANSetOperationMode
 14529                           
 14530                           ; BSR set to: 0
 14531                           ;main.c: 1116: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 14532                           ;main.c: 1117: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 14533  0013C4  0102               	movlb	2	; () banked
 14534  0013C6  51AE               	movf	doModeVerbose@maskno& (0+255),w,b
 14535  0013C8  E008               	bz	l14660
 14536                           
 14537                           ; BSR set to: 2
 14538  0013CA  0E0F               	movlw	15	;volatile
 14539  0013CC  0100               	movlb	0	; () banked
 14540  0013CE  6F63               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14541  0013D0  0E18               	movlw	24	;volatile
 14542  0013D2  DADC               	call	PL52	;call to abstracted procedure
 14543  0013D4  ECB9  F01F         	call	__CANIDToRegs	;wreg free
 14544  0013D8  D007               	goto	l14662
 14545  0013DA                     l14660:
 14546                           
 14547                           ; BSR set to: 2
 14548  0013DA  0E0F               	movlw	15	;volatile
 14549  0013DC  0100               	movlb	0	; () banked
 14550  0013DE  6F63               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14551  0013E0  0E1C               	movlw	28	;volatile
 14552  0013E2  DAD4               	call	PL52	;call to abstracted procedure
 14553  0013E4  ECB9  F01F         	call	__CANIDToRegs	;wreg free
 14554  0013E8                     l14662:
 14555                           
 14556                           ; BSR set to: 0
 14557                           ;main.c: 1120: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 14558  0013E8  0E00               	movlw	0
 14559  0013EA  EC1E  F02F         	call	_ECANSetOperationMode
 14560                           
 14561                           ; BSR set to: 0
 14562                           ;main.c: 1122: putsUSART((char *) "+OK\r\n");
 14563  0013EE  0E7F               	movlw	high STR_9
 14564  0013F0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14565  0013F2  0E69               	movlw	low STR_9
 14566  0013F4  6F61               	movwf	?_putsUSART& (0+255),b
 14567  0013F6  EC41  F02C         	call	_putsUSART	;wreg free
 14568                           
 14569                           ;main.c: 1124: }
 14570  0013FA  D235               	goto	l14798
 14571  0013FC                     l14666:
 14572                           
 14573                           ; BSR set to: 0
 14574                           ;main.c: 1134: else if (cmdbuf == stristr(cmdbuf, "SET ")) {
 14575  0013FC  0E01               	movlw	high _cmdbuf
 14576  0013FE  0100               	movlb	0	; () banked
 14577  001400  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14578  001402  0E29               	movlw	low _cmdbuf
 14579  001404  6F6D               	movwf	?_stristr& (0+255),b
 14580  001406  0E7F               	movlw	high STR_127
 14581  001408  6F70               	movwf	(?_stristr+3)& (0+255),b
 14582  00140A  0E93               	movlw	low STR_127
 14583  00140C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14584  00140E  EC3B  F02A         	call	_stristr	;wreg free
 14585  001412  0E29               	movlw	low _cmdbuf
 14586  001414  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14587  001416  0E01               	movlw	high _cmdbuf
 14588  001418  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14589  00141A  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14590  00141C  E102               	bnz	u19465
 14591  00141E  516D               	movf	?_stristr& (0+255),w,b
 14592  001420  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 14593  001422                     u19465:
 14594  001422  E001 D20D          	bnz	l14792
 14595                           
 14596                           ; BSR set to: 0
 14597                           ;main.c: 1137: strcpy(cmdbuf, cmdbuf + 4);
 14598  001426  0E01               	movlw	high _cmdbuf
 14599  001428  0100               	movlb	0	; () banked
 14600  00142A  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14601  00142C  0E29               	movlw	low _cmdbuf
 14602  00142E  6F60               	movwf	?_strcpy& (0+255),b
 14603  001430  0E2D               	movlw	low (_cmdbuf+4)
 14604  001432  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14605  001434  0E01               	movlw	high (_cmdbuf+4)
 14606  001436  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14607  001438  C0CC  F062         	movff	??_doModeVerbose,?_strcpy+2
 14608  00143C  C0CD  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14609  001440  ECAE  F02E         	call	_strcpy	;wreg free
 14610                           
 14611                           ; BSR set to: 0
 14612                           ;main.c: 1140: if (cmdbuf == stristr(cmdbuf, "HEX")) {
 14613  001444  0E01               	movlw	high _cmdbuf
 14614  001446  0100               	movlb	0	; () banked
 14615  001448  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14616  00144A  0E29               	movlw	low _cmdbuf
 14617  00144C  6F6D               	movwf	?_stristr& (0+255),b
 14618  00144E  0E7F               	movlw	high STR_128
 14619  001450  6F70               	movwf	(?_stristr+3)& (0+255),b
 14620  001452  0EDA               	movlw	low STR_128
 14621  001454  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14622  001456  EC3B  F02A         	call	_stristr	;wreg free
 14623  00145A  0E29               	movlw	low _cmdbuf
 14624  00145C  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14625  00145E  0E01               	movlw	high _cmdbuf
 14626  001460  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14627  001462  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14628  001464  E102               	bnz	u19475
 14629  001466  516D               	movf	?_stristr& (0+255),w,b
 14630  001468  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 14631  00146A                     u19475:
 14632  00146A  E114               	bnz	l14678
 14633                           
 14634                           ; BSR set to: 0
 14635                           ;main.c: 1141: bHex = 1;
 14636  00146C  0E01               	movlw	1
 14637  00146E  6E2B               	movwf	_bHex,c
 14638                           
 14639                           ; BSR set to: 0
 14640                           ;main.c: 1142: (Busy_eep(), Write_b_eep(0x06,1));
 14641  001470  EC68  F02F         	call	_Busy_eep	;wreg free
 14642  001474  0100               	movlb	0	; () banked
 14643  001476  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14644  001478  0E06               	movlw	6
 14645  00147A  6F60               	movwf	?_Write_b_eep& (0+255),b
 14646  00147C  0E01               	movlw	1
 14647  00147E  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14648  001480  EC64  F02E         	call	_Write_b_eep	;wreg free
 14649                           
 14650                           ;main.c: 1143: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 14651  001484  0E76               	movlw	high STR_129
 14652  001486  0100               	movlb	0	; () banked
 14653  001488  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14654  00148A  0EB6               	movlw	low STR_129
 14655  00148C  6F61               	movwf	?_putsUSART& (0+255),b
 14656  00148E  EC41  F02C         	call	_putsUSART	;wreg free
 14657                           
 14658                           ;main.c: 1144: }
 14659  001492  D1E9               	goto	l14798
 14660  001494                     l14678:
 14661                           
 14662                           ; BSR set to: 0
 14663                           ;main.c: 1146: else if (cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 14664  001494  0E01               	movlw	high _cmdbuf
 14665  001496  0100               	movlb	0	; () banked
 14666  001498  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14667  00149A  0E29               	movlw	low _cmdbuf
 14668  00149C  6F6D               	movwf	?_stristr& (0+255),b
 14669  00149E  0E7E               	movlw	high STR_130
 14670  0014A0  6F70               	movwf	(?_stristr+3)& (0+255),b
 14671  0014A2  0EEF               	movlw	low STR_130
 14672  0014A4  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14673  0014A6  EC3B  F02A         	call	_stristr	;wreg free
 14674  0014AA  0E29               	movlw	low _cmdbuf
 14675  0014AC  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14676  0014AE  0E01               	movlw	high _cmdbuf
 14677  0014B0  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14678  0014B2  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14679  0014B4  E102               	bnz	u19485
 14680  0014B6  516D               	movf	?_stristr& (0+255),w,b
 14681  0014B8  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 14682  0014BA                     u19485:
 14683  0014BA  E113               	bnz	l14688
 14684                           
 14685                           ; BSR set to: 0
 14686                           ;main.c: 1147: bHex = 0;
 14687  0014BC  6A2B               	clrf	_bHex,c
 14688                           
 14689                           ; BSR set to: 0
 14690                           ;main.c: 1148: (Busy_eep(), Write_b_eep(0x06,0));
 14691  0014BE  EC68  F02F         	call	_Busy_eep	;wreg free
 14692  0014C2  0100               	movlb	0	; () banked
 14693  0014C4  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14694  0014C6  0E06               	movlw	6
 14695  0014C8  6F60               	movwf	?_Write_b_eep& (0+255),b
 14696  0014CA  0E00               	movlw	0
 14697  0014CC  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 14698  0014CE  EC64  F02E         	call	_Write_b_eep	;wreg free
 14699                           
 14700                           ;main.c: 1149: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 14701  0014D2  0E77               	movlw	high STR_131
 14702  0014D4  0100               	movlb	0	; () banked
 14703  0014D6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14704  0014D8  0E85               	movlw	low STR_131
 14705  0014DA  6F61               	movwf	?_putsUSART& (0+255),b
 14706  0014DC  EC41  F02C         	call	_putsUSART	;wreg free
 14707                           
 14708                           ;main.c: 1150: }
 14709  0014E0  D1C2               	goto	l14798
 14710  0014E2                     l14688:
 14711                           
 14712                           ; BSR set to: 0
 14713                           ;main.c: 1151: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 14714  0014E2  0E01               	movlw	high _cmdbuf
 14715  0014E4  0100               	movlb	0	; () banked
 14716  0014E6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14717  0014E8  0E29               	movlw	low _cmdbuf
 14718  0014EA  6F6D               	movwf	?_stristr& (0+255),b
 14719  0014EC  0E7E               	movlw	high STR_132
 14720  0014EE  6F70               	movwf	(?_stristr+3)& (0+255),b
 14721  0014F0  0E55               	movlw	low STR_132
 14722  0014F2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14723  0014F4  EC3B  F02A         	call	_stristr	;wreg free
 14724  0014F8  516E               	movf	(?_stristr+1)& (0+255),w,b
 14725  0014FA  116D               	iorwf	?_stristr& (0+255),w,b
 14726  0014FC  E02E               	bz	l14702
 14727                           
 14728                           ; BSR set to: 0
 14729                           ;main.c: 1152: strcpy(cmdbuf, cmdbuf + 10);
 14730  0014FE  0E01               	movlw	high _cmdbuf
 14731  001500  0100               	movlb	0	; () banked
 14732  001502  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14733  001504  0E29               	movlw	low _cmdbuf
 14734  001506  6F60               	movwf	?_strcpy& (0+255),b
 14735  001508  0E33               	movlw	low (_cmdbuf+10)
 14736  00150A  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14737  00150C  0E01               	movlw	high (_cmdbuf+10)
 14738  00150E  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14739  001510  C0CC  F062         	movff	??_doModeVerbose,?_strcpy+2
 14740  001514  C0CD  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14741  001518  ECAE  F02E         	call	_strcpy	;wreg free
 14742                           
 14743                           ; BSR set to: 0
 14744                           ;main.c: 1153: rwtimeout = atoi(cmdbuf);
 14745  00151C  0E01               	movlw	high _cmdbuf
 14746  00151E  0100               	movlb	0	; () banked
 14747  001520  6F67               	movwf	(?_atoi+1)& (0+255),b
 14748  001522  0E29               	movlw	low _cmdbuf
 14749  001524  6F66               	movwf	?_atoi& (0+255),b
 14750  001526  EC43  F020         	call	_atoi	;wreg free
 14751  00152A  5166               	movf	?_atoi& (0+255),w,b
 14752  00152C  6E34               	movwf	_rwtimeout,c
 14753                           
 14754                           ; BSR set to: 0
 14755                           ;main.c: 1154: if (rwtimeout < 20u) {
 14756  00152E  0E14               	movlw	20
 14757  001530  6034               	cpfslt	_rwtimeout,c
 14758  001532  D001               	goto	l14698
 14759                           
 14760                           ; BSR set to: 0
 14761                           ;main.c: 1155: rwtimeout = 20u;
 14762  001534  6E34               	movwf	_rwtimeout,c
 14763  001536                     l14698:
 14764                           
 14765                           ; BSR set to: 0
 14766                           ;main.c: 1156: }
 14767                           ;main.c: 1157: (Busy_eep(), Write_b_eep(0x09,rwtimeout));
 14768  001536  EC68  F02F         	call	_Busy_eep	;wreg free
 14769  00153A  0100               	movlb	0	; () banked
 14770  00153C  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14771  00153E  0E09               	movlw	9
 14772  001540  6F60               	movwf	?_Write_b_eep& (0+255),b
 14773  001542  C034  F062         	movff	_rwtimeout,?_Write_b_eep+2
 14774  001546  EC64  F02E         	call	_Write_b_eep	;wreg free
 14775                           
 14776                           ;main.c: 1158: putsUSART((char *) "+OK\r\n");
 14777  00154A  0E7F               	movlw	high STR_9
 14778  00154C  0100               	movlb	0	; () banked
 14779  00154E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14780  001550  0E69               	movlw	low STR_9
 14781  001552  6F61               	movwf	?_putsUSART& (0+255),b
 14782  001554  EC41  F02C         	call	_putsUSART	;wreg free
 14783                           
 14784                           ;main.c: 1159: }
 14785  001558  D186               	goto	l14798
 14786  00155A                     l14702:
 14787                           
 14788                           ; BSR set to: 0
 14789                           ;main.c: 1161: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 14790  00155A  0E01               	movlw	high _cmdbuf
 14791  00155C  0100               	movlb	0	; () banked
 14792  00155E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14793  001560  0E29               	movlw	low _cmdbuf
 14794  001562  6F6D               	movwf	?_stristr& (0+255),b
 14795  001564  0E7E               	movlw	high STR_134
 14796  001566  6F70               	movwf	(?_stristr+3)& (0+255),b
 14797  001568  0E93               	movlw	low STR_134
 14798  00156A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14799  00156C  EC3B  F02A         	call	_stristr	;wreg free
 14800  001570  516E               	movf	(?_stristr+1)& (0+255),w,b
 14801  001572  116D               	iorwf	?_stristr& (0+255),w,b
 14802  001574  E061               	bz	l14736
 14803                           
 14804                           ; BSR set to: 0
 14805                           ;main.c: 1162: strcpy(cmdbuf, cmdbuf + 8);
 14806  001576  0E01               	movlw	high _cmdbuf
 14807  001578  D993               	call	PL4	;call to abstracted procedure
 14808  00157A  ECAE  F02E         	call	_strcpy	;wreg free
 14809                           
 14810                           ; BSR set to: 0
 14811                           ;main.c: 1163: if (0 != stristr(cmdbuf, "CLOSE")) {
 14812  00157E  0E01               	movlw	high _cmdbuf
 14813  001580  0100               	movlb	0	; () banked
 14814  001582  DA2E               	call	PL90	;call to abstracted procedure
 14815  001584  EC3B  F02A         	call	_stristr	;wreg free
 14816  001588  516E               	movf	(?_stristr+1)& (0+255),w,b
 14817  00158A  116D               	iorwf	?_stristr& (0+255),w,b
 14818  00158C  E00B               	bz	l14712
 14819                           
 14820                           ; BSR set to: 0
 14821                           ;main.c: 1164: (Busy_eep(), Write_b_eep(0x07,0));
 14822  00158E  EC68  F02F         	call	_Busy_eep	;wreg free
 14823  001592  0100               	movlb	0	; () banked
 14824  001594  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14825  001596  0E07               	movlw	7
 14826  001598  6F60               	movwf	?_Write_b_eep& (0+255),b
 14827  00159A  0E00               	movlw	0
 14828  00159C  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 14829  00159E  EC64  F02E         	call	_Write_b_eep	;wreg free
 14830                           
 14831                           ;main.c: 1165: }
 14832  0015A2  D161               	goto	l14798
 14833  0015A4                     l14712:
 14834                           
 14835                           ; BSR set to: 0
 14836                           ;main.c: 1166: else if (0 != stristr(cmdbuf, "OPEN")) {
 14837  0015A4  DA0A               	call	PL70	;call to abstracted procedure
 14838  0015A6  EC3B  F02A         	call	_stristr	;wreg free
 14839  0015AA  516E               	movf	(?_stristr+1)& (0+255),w,b
 14840  0015AC  116D               	iorwf	?_stristr& (0+255),w,b
 14841  0015AE  E00B               	bz	l14718
 14842                           
 14843                           ; BSR set to: 0
 14844                           ;main.c: 1167: (Busy_eep(), Write_b_eep(0x07,1));
 14845  0015B0  EC68  F02F         	call	_Busy_eep	;wreg free
 14846  0015B4  0100               	movlb	0	; () banked
 14847  0015B6  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14848  0015B8  0E07               	movlw	7
 14849  0015BA  6F60               	movwf	?_Write_b_eep& (0+255),b
 14850  0015BC  0E01               	movlw	1
 14851  0015BE  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14852  0015C0  EC64  F02E         	call	_Write_b_eep	;wreg free
 14853                           
 14854                           ;main.c: 1168: }
 14855  0015C4  D150               	goto	l14798
 14856  0015C6                     l14718:
 14857                           
 14858                           ; BSR set to: 0
 14859                           ;main.c: 1169: else if (0 != stristr(cmdbuf, "SILENT")) {
 14860  0015C6  0E01               	movlw	high _cmdbuf
 14861  0015C8  DA02               	call	PL78	;call to abstracted procedure
 14862  0015CA  EC3B  F02A         	call	_stristr	;wreg free
 14863  0015CE  516E               	movf	(?_stristr+1)& (0+255),w,b
 14864  0015D0  116D               	iorwf	?_stristr& (0+255),w,b
 14865  0015D2  E00B               	bz	l14724
 14866                           
 14867                           ; BSR set to: 0
 14868                           ;main.c: 1170: (Busy_eep(), Write_b_eep(0x07,2));
 14869  0015D4  EC68  F02F         	call	_Busy_eep	;wreg free
 14870  0015D8  0100               	movlb	0	; () banked
 14871  0015DA  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14872  0015DC  0E07               	movlw	7
 14873  0015DE  6F60               	movwf	?_Write_b_eep& (0+255),b
 14874  0015E0  0E02               	movlw	2
 14875  0015E2  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14876  0015E4  EC64  F02E         	call	_Write_b_eep	;wreg free
 14877                           
 14878                           ;main.c: 1171: }
 14879  0015E8  D13E               	goto	l14798
 14880  0015EA                     l14724:
 14881                           
 14882                           ; BSR set to: 0
 14883                           ;main.c: 1172: else if (0 != stristr(cmdbuf, "LISTEN")) {
 14884  0015EA  0E01               	movlw	high _cmdbuf
 14885  0015EC  0100               	movlb	0	; () banked
 14886  0015EE  DA00               	call	PL98	;call to abstracted procedure
 14887  0015F0  EC3B  F02A         	call	_stristr	;wreg free
 14888  0015F4  516E               	movf	(?_stristr+1)& (0+255),w,b
 14889  0015F6  116D               	iorwf	?_stristr& (0+255),w,b
 14890  0015F8  E00B               	bz	l14730
 14891                           
 14892                           ; BSR set to: 0
 14893                           ;main.c: 1173: (Busy_eep(), Write_b_eep(0x07,3));
 14894  0015FA  EC68  F02F         	call	_Busy_eep	;wreg free
 14895  0015FE  0100               	movlb	0	; () banked
 14896  001600  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14897  001602  0E07               	movlw	7
 14898  001604  6F60               	movwf	?_Write_b_eep& (0+255),b
 14899  001606  0E03               	movlw	3
 14900  001608  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14901  00160A  EC64  F02E         	call	_Write_b_eep	;wreg free
 14902                           
 14903                           ;main.c: 1174: }
 14904  00160E  D12B               	goto	l14798
 14905  001610                     l14730:
 14906                           
 14907                           ; BSR set to: 0
 14908                           ;main.c: 1175: else if (0 != stristr(cmdbuf, "LOOPBACK")) {
 14909  001610  0E01               	movlw	high _cmdbuf
 14910  001612  0100               	movlb	0	; () banked
 14911  001614  D9F5               	call	PL102	;call to abstracted procedure
 14912  001616  EC3B  F02A         	call	_stristr	;wreg free
 14913  00161A  516E               	movf	(?_stristr+1)& (0+255),w,b
 14914  00161C  116D               	iorwf	?_stristr& (0+255),w,b
 14915  00161E  E101 D122          	bz	l14798
 14916                           
 14917                           ; BSR set to: 0
 14918                           ;main.c: 1176: (Busy_eep(), Write_b_eep(0x07,4));
 14919  001622  EC68  F02F         	call	_Busy_eep	;wreg free
 14920  001626  0100               	movlb	0	; () banked
 14921  001628  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14922  00162A  0E07               	movlw	7
 14923  00162C  6F60               	movwf	?_Write_b_eep& (0+255),b
 14924  00162E  0E04               	movlw	4
 14925  001630  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14926  001632  EC64  F02E         	call	_Write_b_eep	;wreg free
 14927  001636  D117               	goto	l14798
 14928  001638                     l14736:
 14929                           
 14930                           ; BSR set to: 0
 14931                           ;main.c: 1179: else if (0 != stristr(cmdbuf, "MODE ")) {
 14932  001638  0E01               	movlw	high _cmdbuf
 14933  00163A  0100               	movlb	0	; () banked
 14934  00163C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14935  00163E  0E29               	movlw	low _cmdbuf
 14936  001640  6F6D               	movwf	?_stristr& (0+255),b
 14937  001642  0E7F               	movlw	high STR_140
 14938  001644  6F70               	movwf	(?_stristr+3)& (0+255),b
 14939  001646  0E75               	movlw	low STR_140
 14940  001648  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14941  00164A  EC3B  F02A         	call	_stristr	;wreg free
 14942  00164E  516E               	movf	(?_stristr+1)& (0+255),w,b
 14943  001650  116D               	iorwf	?_stristr& (0+255),w,b
 14944  001652  E06C               	bz	l14766
 14945                           
 14946                           ; BSR set to: 0
 14947                           ;main.c: 1180: strcpy(cmdbuf, cmdbuf + 5);
 14948  001654  D917               	call	PL2	;call to abstracted procedure
 14949  001656  ECAE  F02E         	call	_strcpy	;wreg free
 14950                           
 14951                           ; BSR set to: 0
 14952                           ;main.c: 1181: if (0 != stristr(cmdbuf, "VERBOSE")) {
 14953  00165A  0E01               	movlw	high _cmdbuf
 14954  00165C  0100               	movlb	0	; () banked
 14955  00165E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14956  001660  0E29               	movlw	low _cmdbuf
 14957  001662  6F6D               	movwf	?_stristr& (0+255),b
 14958  001664  0E7E               	movlw	high STR_141
 14959  001666  6F70               	movwf	(?_stristr+3)& (0+255),b
 14960  001668  0EE7               	movlw	low STR_141
 14961  00166A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14962  00166C  EC3B  F02A         	call	_stristr	;wreg free
 14963  001670  516E               	movf	(?_stristr+1)& (0+255),w,b
 14964  001672  116D               	iorwf	?_stristr& (0+255),w,b
 14965  001674  E014               	bz	l14750
 14966                           
 14967                           ; BSR set to: 0
 14968                           ;main.c: 1182: mode = 0;
 14969  001676  0101               	movlb	1	; () banked
 14970  001678  6B28               	clrf	_mode& (0+255),b
 14971                           
 14972                           ; BSR set to: 1
 14973                           ;main.c: 1183: (Busy_eep(), Write_b_eep(0x03,0));
 14974  00167A  EC68  F02F         	call	_Busy_eep	;wreg free
 14975  00167E  0100               	movlb	0	; () banked
 14976  001680  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14977  001682  0E03               	movlw	3
 14978  001684  6F60               	movwf	?_Write_b_eep& (0+255),b
 14979  001686  0E00               	movlw	0
 14980  001688  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 14981  00168A  EC64  F02E         	call	_Write_b_eep	;wreg free
 14982                           
 14983                           ;main.c: 1184: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 14984  00168E  0E7A               	movlw	high STR_142
 14985  001690  0100               	movlb	0	; () banked
 14986  001692  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14987  001694  0EDE               	movlw	low STR_142
 14988  001696  6F61               	movwf	?_putsUSART& (0+255),b
 14989  001698  EC41  F02C         	call	_putsUSART	;wreg free
 14990                           
 14991                           ;main.c: 1185: }
 14992  00169C  D0E4               	goto	l14798
 14993  00169E                     l14750:
 14994                           
 14995                           ; BSR set to: 0
 14996                           ;main.c: 1186: else if (0 != stristr(cmdbuf, "VSCP")) {
 14997  00169E  0E01               	movlw	high _cmdbuf
 14998  0016A0  0100               	movlb	0	; () banked
 14999  0016A2  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15000  0016A4  0E29               	movlw	low _cmdbuf
 15001  0016A6  6F6D               	movwf	?_stristr& (0+255),b
 15002  0016A8  0E7F               	movlw	high STR_143
 15003  0016AA  6F70               	movwf	(?_stristr+3)& (0+255),b
 15004  0016AC  0EB6               	movlw	low STR_143
 15005  0016AE  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15006  0016B0  EC3B  F02A         	call	_stristr	;wreg free
 15007  0016B4  516E               	movf	(?_stristr+1)& (0+255),w,b
 15008  0016B6  116D               	iorwf	?_stristr& (0+255),w,b
 15009  0016B8  E015               	bz	l14758
 15010                           
 15011                           ; BSR set to: 0
 15012                           ;main.c: 1187: mode = 1;
 15013  0016BA  0E01               	movlw	1
 15014  0016BC  0101               	movlb	1	; () banked
 15015  0016BE  6F28               	movwf	_mode& (0+255),b
 15016                           
 15017                           ; BSR set to: 1
 15018                           ;main.c: 1188: (Busy_eep(), Write_b_eep(0x03,1));
 15019  0016C0  EC68  F02F         	call	_Busy_eep	;wreg free
 15020  0016C4  0100               	movlb	0	; () banked
 15021  0016C6  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15022  0016C8  0E03               	movlw	3
 15023  0016CA  6F60               	movwf	?_Write_b_eep& (0+255),b
 15024  0016CC  0E01               	movlw	1
 15025  0016CE  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 15026  0016D0  EC64  F02E         	call	_Write_b_eep	;wreg free
 15027                           
 15028                           ;main.c: 1189: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 15029  0016D4  0E7A               	movlw	high STR_144
 15030  0016D6  0100               	movlb	0	; () banked
 15031  0016D8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15032  0016DA  0E63               	movlw	low STR_144
 15033  0016DC  6F61               	movwf	?_putsUSART& (0+255),b
 15034  0016DE  EC41  F02C         	call	_putsUSART	;wreg free
 15035                           
 15036                           ;main.c: 1190: }
 15037  0016E2  D0C1               	goto	l14798
 15038  0016E4                     l14758:
 15039                           
 15040                           ; BSR set to: 0
 15041                           ;main.c: 1191: else if (0 != stristr(cmdbuf, "SLCAN")) {
 15042  0016E4  0E01               	movlw	high _cmdbuf
 15043  0016E6  0100               	movlb	0	; () banked
 15044  0016E8  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15045  0016EA  0E29               	movlw	low _cmdbuf
 15046  0016EC  6F6D               	movwf	?_stristr& (0+255),b
 15047  0016EE  0E7F               	movlw	high STR_145
 15048  0016F0  6F70               	movwf	(?_stristr+3)& (0+255),b
 15049  0016F2  0E8D               	movlw	low STR_145
 15050  0016F4  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15051  0016F6  EC3B  F02A         	call	_stristr	;wreg free
 15052  0016FA  516E               	movf	(?_stristr+1)& (0+255),w,b
 15053  0016FC  116D               	iorwf	?_stristr& (0+255),w,b
 15054  0016FE  E101 D0B2          	bz	l14798
 15055                           
 15056                           ; BSR set to: 0
 15057                           ;main.c: 1192: mode = 2;
 15058  001702  0E02               	movlw	2
 15059  001704  0101               	movlb	1	; () banked
 15060  001706  6F28               	movwf	_mode& (0+255),b
 15061                           
 15062                           ; BSR set to: 1
 15063                           ;main.c: 1193: (Busy_eep(), Write_b_eep(0x03,2));
 15064  001708  EC68  F02F         	call	_Busy_eep	;wreg free
 15065  00170C  0100               	movlb	0	; () banked
 15066  00170E  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15067  001710  0E03               	movlw	3
 15068  001712  6F60               	movwf	?_Write_b_eep& (0+255),b
 15069  001714  0E02               	movlw	2
 15070  001716  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 15071  001718  EC64  F02E         	call	_Write_b_eep	;wreg free
 15072                           
 15073                           ;main.c: 1194: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 15074  00171C  0E7B               	movlw	high STR_146
 15075  00171E  0100               	movlb	0	; () banked
 15076  001720  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15077  001722  0E4B               	movlw	low STR_146
 15078  001724  6F61               	movwf	?_putsUSART& (0+255),b
 15079  001726  EC41  F02C         	call	_putsUSART	;wreg free
 15080  00172A  D09D               	goto	l14798
 15081  00172C                     l14766:
 15082                           
 15083                           ; BSR set to: 0
 15084                           ;main.c: 1198: else if (0 != stristr(cmdbuf, "FILTER ")) {
 15085  00172C  0E01               	movlw	high _cmdbuf
 15086  00172E  0100               	movlb	0	; () banked
 15087  001730  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15088  001732  0E29               	movlw	low _cmdbuf
 15089  001734  6F6D               	movwf	?_stristr& (0+255),b
 15090  001736  0E7E               	movlw	high STR_147
 15091  001738  6F70               	movwf	(?_stristr+3)& (0+255),b
 15092  00173A  0ED7               	movlw	low STR_147
 15093  00173C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15094  00173E  EC3B  F02A         	call	_stristr	;wreg free
 15095  001742  516E               	movf	(?_stristr+1)& (0+255),w,b
 15096  001744  116D               	iorwf	?_stristr& (0+255),w,b
 15097  001746  E010               	bz	l14770
 15098                           
 15099                           ; BSR set to: 0
 15100                           ;main.c: 1199: strcpy(cmdbuf, cmdbuf + 7);
 15101  001748  0E01               	movlw	high _cmdbuf
 15102  00174A  0100               	movlb	0	; () banked
 15103  00174C  6F61               	movwf	(?_strcpy+1)& (0+255),b
 15104  00174E  0E29               	movlw	low _cmdbuf
 15105  001750  6F60               	movwf	?_strcpy& (0+255),b
 15106  001752  0E30               	movlw	low (_cmdbuf+7)
 15107  001754  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15108  001756  0E01               	movlw	high (_cmdbuf+7)
 15109  001758  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15110  00175A  C0CC  F062         	movff	??_doModeVerbose,?_strcpy+2
 15111  00175E  C0CD  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 15112  001762  ECAE  F02E         	call	_strcpy	;wreg free
 15113                           
 15114                           ;main.c: 1201: }
 15115  001766  D07F               	goto	l14798
 15116  001768                     l14770:
 15117                           
 15118                           ; BSR set to: 0
 15119                           ;main.c: 1203: else if (0 != stristr(cmdbuf, "MASK ")) {
 15120  001768  0E01               	movlw	high _cmdbuf
 15121  00176A  0100               	movlb	0	; () banked
 15122  00176C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15123  00176E  0E29               	movlw	low _cmdbuf
 15124  001770  6F6D               	movwf	?_stristr& (0+255),b
 15125  001772  0E7F               	movlw	high STR_148
 15126  001774  6F70               	movwf	(?_stristr+3)& (0+255),b
 15127  001776  0E7B               	movlw	low STR_148
 15128  001778  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15129  00177A  EC3B  F02A         	call	_stristr	;wreg free
 15130  00177E  516E               	movf	(?_stristr+1)& (0+255),w,b
 15131  001780  116D               	iorwf	?_stristr& (0+255),w,b
 15132  001782  E004               	bz	l14774
 15133                           
 15134                           ; BSR set to: 0
 15135                           ;main.c: 1204: strcpy(cmdbuf, cmdbuf + 5);
 15136  001784  D87F               	call	PL2	;call to abstracted procedure
 15137  001786  ECAE  F02E         	call	_strcpy	;wreg free
 15138                           
 15139                           ;main.c: 1205: }
 15140  00178A  D06D               	goto	l14798
 15141  00178C                     l14774:
 15142                           
 15143                           ; BSR set to: 0
 15144                           ;main.c: 1207: else if (cmdbuf == stristr(cmdbuf, "ECHO ")) {
 15145  00178C  0E01               	movlw	high _cmdbuf
 15146  00178E  0100               	movlb	0	; () banked
 15147  001790  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15148  001792  0E29               	movlw	low _cmdbuf
 15149  001794  6F6D               	movwf	?_stristr& (0+255),b
 15150  001796  0E7F               	movlw	high STR_149
 15151  001798  6F70               	movwf	(?_stristr+3)& (0+255),b
 15152  00179A  0E81               	movlw	low STR_149
 15153  00179C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15154  00179E  EC3B  F02A         	call	_stristr	;wreg free
 15155  0017A2  0E29               	movlw	low _cmdbuf
 15156  0017A4  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15157  0017A6  0E01               	movlw	high _cmdbuf
 15158  0017A8  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15159  0017AA  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 15160  0017AC  E102               	bnz	u19635
 15161  0017AE  516D               	movf	?_stristr& (0+255),w,b
 15162  0017B0  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 15163  0017B2                     u19635:
 15164  0017B2  E114               	bnz	l14782
 15165                           
 15166                           ; BSR set to: 0
 15167                           ;main.c: 1208: strcpy(cmdbuf, cmdbuf + 5);
 15168  0017B4  D867               	call	PL2	;call to abstracted procedure
 15169  0017B6  ECAE  F02E         	call	_strcpy	;wreg free
 15170                           
 15171                           ; BSR set to: 0
 15172                           ;main.c: 1209: if (0 != stristr(cmdbuf, "ON")) {
 15173  0017BA  0E01               	movlw	high _cmdbuf
 15174  0017BC  0100               	movlb	0	; () banked
 15175  0017BE  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15176  0017C0  0E29               	movlw	low _cmdbuf
 15177  0017C2  6F6D               	movwf	?_stristr& (0+255),b
 15178  0017C4  0E7E               	movlw	high (STR_18+5)
 15179  0017C6  6F70               	movwf	(?_stristr+3)& (0+255),b
 15180  0017C8  0EFC               	movlw	low (STR_18+5)
 15181  0017CA  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15182  0017CC  EC3B  F02A         	call	_stristr	;wreg free
 15183  0017D0  516E               	movf	(?_stristr+1)& (0+255),w,b
 15184  0017D2  116D               	iorwf	?_stristr& (0+255),w,b
 15185  0017D4  E048               	bz	l14798
 15186                           
 15187                           ; BSR set to: 0
 15188                           ;main.c: 1210: bLocalEcho = 1;
 15189  0017D6  0E01               	movlw	1
 15190  0017D8  6E2D               	movwf	_bLocalEcho,c
 15191  0017DA  D045               	goto	l14798
 15192  0017DC                     l14782:
 15193                           
 15194                           ; BSR set to: 0
 15195                           ;main.c: 1214: else if (cmdbuf == stristr(cmdbuf, "DEFAULTS")) {
 15196  0017DC  0E01               	movlw	high _cmdbuf
 15197  0017DE  0100               	movlb	0	; () banked
 15198  0017E0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15199  0017E2  0E29               	movlw	low _cmdbuf
 15200  0017E4  6F6D               	movwf	?_stristr& (0+255),b
 15201  0017E6  0E7E               	movlw	high STR_151
 15202  0017E8  6F70               	movwf	(?_stristr+3)& (0+255),b
 15203  0017EA  0EAE               	movlw	low STR_151
 15204  0017EC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15205  0017EE  EC3B  F02A         	call	_stristr	;wreg free
 15206  0017F2  0E29               	movlw	low _cmdbuf
 15207  0017F4  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15208  0017F6  0E01               	movlw	high _cmdbuf
 15209  0017F8  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15210  0017FA  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 15211  0017FC  E102               	bnz	u19655
 15212  0017FE  516D               	movf	?_stristr& (0+255),w,b
 15213  001800  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 15214  001802                     u19655:
 15215  001802  E103               	bnz	l14786
 15216                           
 15217                           ; BSR set to: 0
 15218                           ;main.c: 1215: vscp_restoreDefaults();
 15219  001804  EC64  F02F         	call	_vscp_restoreDefaults	;wreg free
 15220                           
 15221                           ;main.c: 1216: }
 15222  001808  D02E               	goto	l14798
 15223  00180A                     l14786:
 15224                           
 15225                           ; BSR set to: 0
 15226                           ;main.c: 1218: else if (cmdbuf == stristr(cmdbuf, "?")) {
 15227  00180A  0E01               	movlw	high _cmdbuf
 15228  00180C  0100               	movlb	0	; () banked
 15229  00180E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15230  001810  0E29               	movlw	low _cmdbuf
 15231  001812  6F6D               	movwf	?_stristr& (0+255),b
 15232  001814  0E7F               	movlw	high STR_152
 15233  001816  6F70               	movwf	(?_stristr+3)& (0+255),b
 15234  001818  0EFD               	movlw	low STR_152
 15235  00181A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15236  00181C  EC3B  F02A         	call	_stristr	;wreg free
 15237  001820  0E29               	movlw	low _cmdbuf
 15238  001822  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15239  001824  0E01               	movlw	high _cmdbuf
 15240  001826  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15241  001828  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 15242  00182A  E102               	bnz	u19665
 15243  00182C  516D               	movf	?_stristr& (0+255),w,b
 15244  00182E  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 15245  001830                     u19665:
 15246  001830  E01A               	bz	l14798
 15247                           
 15248                           ; BSR set to: 0
 15249                           ;main.c: 1221: else {
 15250                           ;main.c: 1222: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 15251  001832  0E7A               	movlw	high STR_153
 15252  001834  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15253  001836  0E21               	movlw	low STR_153
 15254  001838  6F61               	movwf	?_putsUSART& (0+255),b
 15255  00183A  EC41  F02C         	call	_putsUSART	;wreg free
 15256  00183E  D013               	goto	l14798
 15257  001840                     l14792:
 15258                           
 15259                           ; BSR set to: 0
 15260                           ;main.c: 1226: else {
 15261                           ;main.c: 1227: if ( 0x0d == cmdbuf[ 0 ] ) {
 15262  001840  0101               	movlb	1	; () banked
 15263  001842  5129               	movf	_cmdbuf& (0+255),w,b
 15264  001844  0A0D               	xorlw	13
 15265  001846  E108               	bnz	l14796
 15266                           
 15267                           ; BSR set to: 1
 15268                           ;main.c: 1228: putsUSART((char *) "+OK\r\n");
 15269  001848  0E7F               	movlw	high STR_9
 15270  00184A  0100               	movlb	0	; () banked
 15271  00184C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15272  00184E  0E69               	movlw	low STR_9
 15273  001850  6F61               	movwf	?_putsUSART& (0+255),b
 15274  001852  EC41  F02C         	call	_putsUSART	;wreg free
 15275                           
 15276                           ;main.c: 1229: }
 15277  001856  D007               	goto	l14798
 15278  001858                     l14796:
 15279                           
 15280                           ; BSR set to: 1
 15281                           ;main.c: 1230: else {
 15282                           ;main.c: 1231: putsUSART((char *) "-ERROR - Unknown command\r\n");
 15283  001858  0E7B               	movlw	high STR_155
 15284  00185A  0100               	movlb	0	; () banked
 15285  00185C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15286  00185E  0E15               	movlw	low STR_155
 15287  001860  6F61               	movwf	?_putsUSART& (0+255),b
 15288  001862  EC41  F02C         	call	_putsUSART	;wreg free
 15289  001866                     l14798:
 15290                           
 15291                           ;main.c: 1232: }
 15292                           ;main.c: 1233: }
 15293                           ;main.c: 1235: memset( cmdbuf, 0, sizeof( cmdbuf ) );
 15294  001866  0E01               	movlw	high _cmdbuf
 15295  001868  0100               	movlb	0	; () banked
 15296  00186A  6F61               	movwf	(?_memset+1)& (0+255),b
 15297  00186C  0E29               	movlw	low _cmdbuf
 15298  00186E  6F60               	movwf	?_memset& (0+255),b
 15299  001870  6B63               	clrf	(?_memset+3)& (0+255),b
 15300  001872  6B62               	clrf	(?_memset+2)& (0+255),b
 15301  001874  6B65               	clrf	(?_memset+5)& (0+255),b
 15302  001876  0E50               	movlw	80
 15303  001878  6F64               	movwf	(?_memset+4)& (0+255),b
 15304  00187A  ECC5  F02E         	call	_memset	;wreg free
 15305                           
 15306                           ; BSR set to: 0
 15307                           ;main.c: 1236: pos = 0;
 15308  00187E  6A33               	clrf	_pos,c
 15309  001880                     l14802:
 15310                           
 15311                           ;main.c: 1237: }
 15312                           ;main.c: 1238: }
 15313                           ;main.c: 1241: (INTCONbits.GIE = 1);
 15314  001880  8EF2               	bsf	intcon,7,c	;volatile
 15315  001882                     l564:
 15316  001882  0012               	return	
 15317  001884                     __end_of_doModeVerbose:
 15318                           	opt stack 0
 15319  001884                     PL2:
 15320                           	opt stack 20
 15321  001884  0E01               	movlw	high _cmdbuf
 15322  001886  0100               	movlb	0	; () banked
 15323  001888  6F61               	movwf	(?_strcpy+1)& (0+255),b
 15324  00188A  0E29               	movlw	low _cmdbuf
 15325  00188C  6F60               	movwf	?_strcpy& (0+255),b
 15326  00188E  0E2E               	movlw	low (_cmdbuf+5)
 15327  001890  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15328  001892  0E01               	movlw	high (_cmdbuf+5)
 15329  001894  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15330  001896  C0CC  F062         	movff	??_doModeVerbose,?_strcpy+2
 15331  00189A  C0CD  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 15332  00189E  0012               	return	
 15333  0018A0                     __end_ofPL2:
 15334                           	opt stack 0
 15335  0018A0                     PL4:
 15336                           	opt stack 20
 15337  0018A0  0100               	movlb	0	; () banked
 15338  0018A2  6F61               	movwf	(?_strcpy+1)& (0+255),b
 15339  0018A4  0E29               	movlw	low _cmdbuf
 15340  0018A6  6F60               	movwf	?_strcpy& (0+255),b
 15341  0018A8  0E31               	movlw	low (_cmdbuf+8)
 15342  0018AA  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15343  0018AC  0E01               	movlw	high (_cmdbuf+8)
 15344  0018AE  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15345  0018B0  C0CC  F062         	movff	??_doModeVerbose,?_strcpy+2
 15346  0018B4  C0CD  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 15347  0018B8  0012               	return	
 15348  0018BA                     __end_ofPL4:
 15349                           	opt stack 0
 15350  0018BA                     PL6:
 15351                           	opt stack 20
 15352  0018BA  0100               	movlb	0	; () banked
 15353  0018BC  6B6D               	clrf	(?_strtok+1)& (0+255),b
 15354  0018BE  6B6C               	clrf	?_strtok& (0+255),b
 15355  0018C0  0E7F               	movlw	high STR_30
 15356  0018C2  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15357  0018C4  0EF5               	movlw	low STR_30
 15358  0018C6  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15359  0018C8  0012               	return	
 15360  0018CA                     __end_ofPL6:
 15361                           	opt stack 0
 15362  0018CA                     PL8:
 15363                           	opt stack 20
 15364  0018CA  6B6D               	clrf	(?_strtok+1)& (0+255),b
 15365  0018CC  6B6C               	clrf	?_strtok& (0+255),b
 15366  0018CE  0E7F               	movlw	high STR_30
 15367  0018D0  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15368  0018D2  0EF5               	movlw	low STR_30
 15369  0018D4  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15370  0018D6  0012               	return	
 15371  0018D8                     __end_ofPL8:
 15372                           	opt stack 0
 15373  0018D8                     PL10:
 15374                           	opt stack 20
 15375  0018D8  6BD5               	clrf	(??_doModeVerbose+9)& (0+255),b
 15376  0018DA  6BD6               	clrf	(??_doModeVerbose+10)& (0+255),b
 15377  0018DC  6BD7               	clrf	(??_doModeVerbose+11)& (0+255),b
 15378  0018DE  0E1A               	movlw	26
 15379  0018E0                     u19365:
 15380  0018E0  90D8               	bcf	status,0,c
 15381  0018E2  37D4               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 15382  0018E4  37D5               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 15383  0018E6  37D6               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 15384  0018E8  37D7               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 15385  0018EA  2EE8               	decfsz	wreg,f,c
 15386  0018EC  D7F9               	goto	u19365
 15387  0018EE  51D0               	movf	(??_doModeVerbose+4)& (0+255),w,b
 15388  0018F0  11D4               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 15389  0018F2  6FD8               	movwf	(??_doModeVerbose+12)& (0+255),b
 15390  0018F4  51D1               	movf	(??_doModeVerbose+5)& (0+255),w,b
 15391  0018F6  11D5               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 15392  0018F8  6FD9               	movwf	(??_doModeVerbose+13)& (0+255),b
 15393  0018FA  51D2               	movf	(??_doModeVerbose+6)& (0+255),w,b
 15394  0018FC  11D6               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 15395  0018FE  6FDA               	movwf	(??_doModeVerbose+14)& (0+255),b
 15396  001900  51D3               	movf	(??_doModeVerbose+7)& (0+255),w,b
 15397  001902  11D7               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 15398  001904  6FDB               	movwf	(??_doModeVerbose+15)& (0+255),b
 15399  001906  51CC               	movf	??_doModeVerbose& (0+255),w,b
 15400  001908  11D8               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 15401  00190A  6FDC               	movwf	(??_doModeVerbose+16)& (0+255),b
 15402  00190C  51CD               	movf	(??_doModeVerbose+1)& (0+255),w,b
 15403  00190E  11D9               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 15404  001910  6FDD               	movwf	(??_doModeVerbose+17)& (0+255),b
 15405  001912  51CE               	movf	(??_doModeVerbose+2)& (0+255),w,b
 15406  001914  11DA               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 15407  001916  6FDE               	movwf	(??_doModeVerbose+18)& (0+255),b
 15408  001918  51CF               	movf	(??_doModeVerbose+3)& (0+255),w,b
 15409  00191A  11DB               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 15410  00191C  6FDF               	movwf	(??_doModeVerbose+19)& (0+255),b
 15411  00191E  0102               	movlb	2	; () banked
 15412  001920  0012               	return	
 15413  001922                     __end_ofPL10:
 15414                           	opt stack 0
 15415  001922                     PL24:
 15416                           	opt stack 20
 15417  001922  0100               	movlb	0	; () banked
 15418  001924  6B6D               	clrf	(?_strtok+1)& (0+255),b
 15419  001926  6B6C               	clrf	?_strtok& (0+255),b
 15420  001928  0E7E               	movlw	high (STR_56+8)
 15421  00192A  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15422  00192C  0E73               	movlw	low (STR_56+8)
 15423  00192E  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15424  001930  0012               	return	
 15425  001932                     __end_ofPL24:
 15426                           	opt stack 0
 15427  001932                     PL30:
 15428                           	opt stack 20
 15429  001932  0E01               	movlw	high _cmdbuf
 15430  001934  0100               	movlb	0	; () banked
 15431  001936  6F6D               	movwf	(?_strtok+1)& (0+255),b
 15432  001938  0E29               	movlw	low _cmdbuf
 15433  00193A  6F6C               	movwf	?_strtok& (0+255),b
 15434  00193C  0E7F               	movlw	high STR_30
 15435  00193E  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15436  001940  0EF5               	movlw	low STR_30
 15437  001942  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15438  001944  0012               	return	
 15439  001946                     __end_ofPL30:
 15440                           	opt stack 0
 15441  001946                     PL34:
 15442                           	opt stack 20
 15443  001946  0100               	movlb	0	; () banked
 15444  001948  6F6D               	movwf	(?_strtok+1)& (0+255),b
 15445  00194A  0E29               	movlw	low _cmdbuf
 15446  00194C  6F6C               	movwf	?_strtok& (0+255),b
 15447  00194E  0E7E               	movlw	high (STR_56+8)
 15448  001950  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15449  001952  0E73               	movlw	low (STR_56+8)
 15450  001954  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15451  001956  0012               	return	
 15452  001958                     __end_ofPL34:
 15453                           	opt stack 0
 15454  001958                     PL38:
 15455                           	opt stack 20
 15456  001958  0102               	movlb	2	; () banked
 15457  00195A  51B7               	movf	doModeVerbose@i_1193& (0+255),w,b
 15458  00195C  C2B5  F0CC         	movff	doModeVerbose@reg,??_doModeVerbose
 15459  001960  0100               	movlb	0	; () banked
 15460  001962  6BCD               	clrf	(??_doModeVerbose+1)& (0+255),b
 15461  001964  27CC               	addwf	??_doModeVerbose& (0+255),f,b
 15462  001966  0E00               	movlw	0
 15463  001968  23CD               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 15464  00196A  51CC               	movf	??_doModeVerbose& (0+255),w,b
 15465  00196C  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 15466  00196E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 15467  001970  0012               	return	
 15468  001972                     __end_ofPL38:
 15469                           	opt stack 0
 15470  001972                     PL40:
 15471                           	opt stack 20
 15472  001972  0100               	movlb	0	; () banked
 15473  001974  6BCD               	clrf	(??_doModeVerbose+1)& (0+255),b
 15474  001976  6BCE               	clrf	(??_doModeVerbose+2)& (0+255),b
 15475  001978  6BCF               	clrf	(??_doModeVerbose+3)& (0+255),b
 15476  00197A  C0CE  F0CF         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 15477  00197E  C0CD  F0CE         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 15478  001982  C0CC  F0CD         	movff	??_doModeVerbose,??_doModeVerbose+1
 15479  001986  6BCC               	clrf	??_doModeVerbose& (0+255),b
 15480  001988  0102               	movlb	2	; () banked
 15481  00198A  0012               	return	
 15482  00198C                     __end_ofPL40:
 15483                           	opt stack 0
 15484  00198C                     PL52:
 15485                           	opt stack 20
 15486  00198C  6F62               	movwf	?__CANIDToRegs& (0+255),b
 15487  00198E  C2A9  F064         	movff	doModeVerbose@id_1318,?__CANIDToRegs+2
 15488  001992  C2AA  F065         	movff	doModeVerbose@id_1318+1,?__CANIDToRegs+3
 15489  001996  C2AB  F066         	movff	doModeVerbose@id_1318+2,?__CANIDToRegs+4
 15490  00199A  C2AC  F067         	movff	doModeVerbose@id_1318+3,?__CANIDToRegs+5
 15491  00199E  0E01               	movlw	1
 15492  0019A0  6F68               	movwf	(?__CANIDToRegs+6)& (0+255),b
 15493  0019A2  0C01               	retlw	1
 15494  0019A4                     __end_ofPL52:
 15495                           	opt stack 0
 15496  0019A4                     PL62:
 15497                           	opt stack 20
 15498  0019A4  0100               	movlb	0	; () banked
 15499  0019A6  6FD1               	movwf	(??_doModeVerbose+5)& (0+255),b
 15500  0019A8  6BD2               	clrf	(??_doModeVerbose+6)& (0+255),b
 15501  0019AA  6BD3               	clrf	(??_doModeVerbose+7)& (0+255),b
 15502  0019AC  C0D1  F0D3         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 15503  0019B0  C0D0  F0D2         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 15504  0019B4  6BD1               	clrf	(??_doModeVerbose+5)& (0+255),b
 15505  0019B6  6BD0               	clrf	(??_doModeVerbose+4)& (0+255),b
 15506  0019B8  0012               	return	
 15507  0019BA                     __end_ofPL62:
 15508                           	opt stack 0
 15509  0019BA                     PL70:
 15510                           	opt stack 20
 15511  0019BA  0E01               	movlw	high _cmdbuf
 15512  0019BC  0100               	movlb	0	; () banked
 15513  0019BE  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15514  0019C0  0E29               	movlw	low _cmdbuf
 15515  0019C2  6F6D               	movwf	?_stristr& (0+255),b
 15516  0019C4  0E7F               	movlw	high STR_8
 15517  0019C6  6F70               	movwf	(?_stristr+3)& (0+255),b
 15518  0019C8  0EAC               	movlw	low STR_8
 15519  0019CA  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15520  0019CC  0012               	return	
 15521  0019CE                     __end_ofPL70:
 15522                           	opt stack 0
 15523  0019CE                     PL78:
 15524                           	opt stack 20
 15525  0019CE  0100               	movlb	0	; () banked
 15526  0019D0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15527  0019D2  0E29               	movlw	low _cmdbuf
 15528  0019D4  6F6D               	movwf	?_stristr& (0+255),b
 15529  0019D6  0E7F               	movlw	high STR_10
 15530  0019D8  6F70               	movwf	(?_stristr+3)& (0+255),b
 15531  0019DA  0E47               	movlw	low STR_10
 15532  0019DC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15533  0019DE  0012               	return	
 15534  0019E0                     __end_ofPL78:
 15535                           	opt stack 0
 15536  0019E0                     PL90:
 15537                           	opt stack 20
 15538  0019E0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15539  0019E2  0E29               	movlw	low _cmdbuf
 15540  0019E4  6F6D               	movwf	?_stristr& (0+255),b
 15541  0019E6  0E7F               	movlw	high STR_12
 15542  0019E8  6F70               	movwf	(?_stristr+3)& (0+255),b
 15543  0019EA  0E87               	movlw	low STR_12
 15544  0019EC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15545  0019EE  0012               	return	
 15546  0019F0                     __end_ofPL90:
 15547                           	opt stack 0
 15548  0019F0                     PL98:
 15549                           	opt stack 20
 15550  0019F0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15551  0019F2  0E29               	movlw	low _cmdbuf
 15552  0019F4  6F6D               	movwf	?_stristr& (0+255),b
 15553  0019F6  0E7F               	movlw	high STR_16
 15554  0019F8  6F70               	movwf	(?_stristr+3)& (0+255),b
 15555  0019FA  0E39               	movlw	low STR_16
 15556  0019FC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15557  0019FE  0012               	return	
 15558  001A00                     __end_ofPL98:
 15559                           	opt stack 0
 15560  001A00                     PL102:
 15561                           	opt stack 20
 15562  001A00  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15563  001A02  0E29               	movlw	low _cmdbuf
 15564  001A04  6F6D               	movwf	?_stristr& (0+255),b
 15565  001A06  0E7E               	movlw	high STR_14
 15566  001A08  6F70               	movwf	(?_stristr+3)& (0+255),b
 15567  001A0A  0EA5               	movlw	low STR_14
 15568  001A0C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15569  001A0E  0012               	return	
 15570  001A10                     __end_ofPL102:
 15571                           	opt stack 0
 15572                           tblptru	equ	0xFF8
 15573                           tblptrh	equ	0xFF7
 15574                           tblptrl	equ	0xFF6
 15575                           tablat	equ	0xFF5
 15576                           prodh	equ	0xFF4
 15577                           prodl	equ	0xFF3
 15578                           intcon	equ	0xFF2
 15579                           indf0	equ	0xFEF
 15580                           postinc0	equ	0xFEE
 15581                           fsr0h	equ	0xFEA
 15582                           fsr0l	equ	0xFE9
 15583                           wreg	equ	0xFE8
 15584                           indf1	equ	0xFE7
 15585                           postinc1	equ	0xFE6
 15586                           postdec1	equ	0xFE5
 15587                           fsr1h	equ	0xFE2
 15588                           fsr1l	equ	0xFE1
 15589                           indf2	equ	0xFDF
 15590                           postinc2	equ	0xFDE
 15591                           postdec2	equ	0xFDD
 15592                           plusw2	equ	0xFDB
 15593                           fsr2h	equ	0xFDA
 15594                           fsr2l	equ	0xFD9
 15595                           status	equ	0xFD8
 15596                           
 15597 ;; *************** function _writeRegisterExtended *****************
 15598 ;; Defined at:
 15599 ;;		line 2532 in file "main.c"
 15600 ;; Parameters:    Size  Location     Type
 15601 ;;  nodeid          1    wreg     unsigned char 
 15602 ;;  page            2   88[BANK0 ] unsigned short 
 15603 ;;  reg             1   90[BANK0 ] unsigned char 
 15604 ;;  timeout         2   91[BANK0 ] unsigned short 
 15605 ;;  value           2   93[BANK0 ] PTR unsigned char 
 15606 ;;		 -> doModeVerbose@value_1250(1), 
 15607 ;; Auto vars:     Size  Location     Type
 15608 ;;  nodeid          1   99[BANK0 ] unsigned char 
 15609 ;; Return value:  Size  Location     Type
 15610 ;;                  1    wreg      enum E15660
 15611 ;; Registers used:
 15612 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15613 ;; Tracked objects:
 15614 ;;		On entry : F/2
 15615 ;;		On exit  : E/0
 15616 ;;		Unchanged: 0/0
 15617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15618 ;;      Params:         0       7       0       0       0       0       0
 15619 ;;      Locals:         0       1       0       0       0       0       0
 15620 ;;      Temps:          0       4       0       0       0       0       0
 15621 ;;      Totals:         0      12       0       0       0       0       0
 15622 ;;Total ram usage:       12 bytes
 15623 ;; Hardware stack levels used:    1
 15624 ;; Hardware stack levels required when called:    7
 15625 ;; This function calls:
 15626 ;;		_sendVSCPFrame
 15627 ;;		_getVSCPFrame
 15628 ;; This function is called by:
 15629 ;;		_doModeVerbose
 15630 ;; This function uses a non-reentrant model
 15631 ;;
 15632                           
 15633                           	psect	text23
 15634  00428E                     __ptext23:
 15635                           	opt stack 0
 15636  00428E                     _writeRegisterExtended:
 15637                           	opt stack 22
 15638                           
 15639                           ;incstack = 0
 15640                           ;incstack = 0
 15641                           ;writeRegisterExtended@nodeid stored from wreg
 15642  00428E  CFE8 F0C3          	movff	wreg,writeRegisterExtended@nodeid
 15643                           
 15644                           ; BSR set to: 2
 15645                           ;main.c: 2533: vscpData[ 0 ] = nodeid;
 15646  004292  C0C3  F1E1         	movff	writeRegisterExtended@nodeid,_vscpData
 15647                           
 15648                           ; BSR set to: 2
 15649                           ;main.c: 2534: vscpData[ 1 ] = page >> 8;
 15650  004296  0100               	movlb	0	; () banked
 15651  004298  51B9               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15652  00429A  0101               	movlb	1	; () banked
 15653  00429C  6FE2               	movwf	(_vscpData+1)& (0+255),b
 15654                           
 15655                           ; BSR set to: 1
 15656                           ;main.c: 2535: vscpData[ 2 ] = page & 0xff;
 15657  00429E  C0B8  F1E3         	movff	writeRegisterExtended@page,_vscpData+2
 15658                           
 15659                           ; BSR set to: 1
 15660                           ;main.c: 2536: vscpData[ 3 ] = reg;
 15661  0042A2  C0BA  F1E4         	movff	writeRegisterExtended@reg,_vscpData+3
 15662                           
 15663                           ; BSR set to: 1
 15664                           ;main.c: 2537: vscpData[ 4 ] = *value;
 15665  0042A6  C0BD  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15666  0042AA  C0BE  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15667  0042AE  50DF               	movf	indf2,w,c
 15668  0042B0  6FE5               	movwf	(_vscpData+4)& (0+255),b
 15669                           
 15670                           ; BSR set to: 1
 15671                           ;main.c: 2539: if (sendVSCPFrame(0,
 15672                           ;main.c: 2540: 38,
 15673                           ;main.c: 2541: 0,
 15674                           ;main.c: 2542: 0,
 15675                           ;main.c: 2543: 5,
 15676                           ;main.c: 2544: vscpData)) {
 15677  0042B2  0100               	movlb	0	; () banked
 15678  0042B4  6B99               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15679  0042B6  6B98               	clrf	?_sendVSCPFrame& (0+255),b
 15680  0042B8  0E26               	movlw	38
 15681  0042BA  6F9A               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15682  0042BC  6B9B               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15683  0042BE  6B9C               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15684  0042C0  0E05               	movlw	5
 15685  0042C2  6F9D               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15686  0042C4  0E01               	movlw	high _vscpData
 15687  0042C6  6F9F               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 15688  0042C8  0EE1               	movlw	low _vscpData
 15689  0042CA  6F9E               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15690  0042CC  EC5B  F026         	call	_sendVSCPFrame	;wreg free
 15691  0042D0  0900               	iorlw	0
 15692  0042D2  E059               	bz	l16194
 15693                           
 15694                           ;main.c: 2546: timekeeper = 0;
 15695  0042D4  0101               	movlb	1	; () banked
 15696  0042D6  6B18               	clrf	_timekeeper& (0+255),b	;volatile
 15697  0042D8  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 15698  0042DA  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 15699  0042DC  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 15700                           
 15701                           ;main.c: 2547: while (timekeeper < timeout) {
 15702  0042DE  D03C               	goto	l16192
 15703  0042E0                     l1163:
 15704                           
 15705                           ; BSR set to: 1
 15706  0042E0  0004               	clrwdt		;# 
 15707                           
 15708                           ;main.c: 2551: if (getVSCPFrame(&vscpClass,
 15709                           ;main.c: 2552: &vscpType,
 15710                           ;main.c: 2553: &vscpNodeId,
 15711                           ;main.c: 2554: &vscpPriority,
 15712                           ;main.c: 2555: &vscpSize,
 15713                           ;main.c: 2556: vscpData)) {
 15714  0042E2  0E3E               	movlw	low _vscpType
 15715  0042E4  0100               	movlb	0	; () banked
 15716  0042E6  6F73               	movwf	?_getVSCPFrame& (0+255),b
 15717  0042E8  0E3B               	movlw	low _vscpNodeId
 15718  0042EA  6F74               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15719  0042EC  0E3C               	movlw	low _vscpPriority
 15720  0042EE  6F75               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15721  0042F0  0E3D               	movlw	low _vscpSize
 15722  0042F2  6F76               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15723  0042F4  0E01               	movlw	high _vscpData
 15724  0042F6  6F78               	movwf	(?_getVSCPFrame+5)& (0+255),b
 15725  0042F8  0EE1               	movlw	low _vscpData
 15726  0042FA  6F77               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15727  0042FC  0E37               	movlw	_vscpClass& (0+255)
 15728  0042FE  EC77  F029         	call	_getVSCPFrame
 15729  004302  0900               	iorlw	0
 15730  004304  E029               	bz	l16192
 15731                           
 15732                           ; BSR set to: 0
 15733                           ;main.c: 2558: if ((nodeid == vscpNodeId) &&
 15734                           ;main.c: 2559: (5 == vscpSize) &&
 15735                           ;main.c: 2560: (0 == vscpData[ 0 ]) &&
 15736                           ;main.c: 2561: ((page >> 8) == vscpData[ 1 ]) &&
 15737                           ;main.c: 2562: ((page & 0xff) == vscpData[ 2 ]) &&
 15738                           ;main.c: 2563: (reg == vscpData[ 3 ]) &&
 15739                           ;main.c: 2564: (*value == vscpData[ 4 ])) {
 15740  004306  503B               	movf	_vscpNodeId,w,c
 15741  004308  63C3               	cpfseq	writeRegisterExtended@nodeid& (0+255),b
 15742  00430A  D026               	goto	l16192
 15743                           
 15744                           ; BSR set to: 0
 15745  00430C  503D               	movf	_vscpSize,w,c
 15746  00430E  0A05               	xorlw	5
 15747  004310  E123               	bnz	l16192
 15748                           
 15749                           ; BSR set to: 0
 15750  004312  0101               	movlb	1	; () banked
 15751  004314  67E1               	tstfsz	_vscpData& (0+255),b
 15752  004316  D020               	goto	l16192
 15753                           
 15754                           ; BSR set to: 1
 15755  004318  0100               	movlb	0	; () banked
 15756  00431A  51B9               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15757  00431C  0101               	movlb	1	; () banked
 15758  00431E  19E2               	xorwf	(_vscpData+1)& (0+255),w,b
 15759  004320  E11B               	bnz	l16192
 15760                           
 15761                           ; BSR set to: 1
 15762  004322  0100               	movlb	0	; () banked
 15763  004324  51B8               	movf	writeRegisterExtended@page& (0+255),w,b
 15764  004326  EE21  F0E3         	lfsr	2,_vscpData+2
 15765  00432A  62DF               	cpfseq	indf2,c
 15766  00432C  D015               	goto	l16192
 15767                           
 15768                           ; BSR set to: 1
 15769  00432E  51BA               	movf	writeRegisterExtended@reg& (0+255),w,b
 15770  004330  0101               	movlb	1	; () banked
 15771  004332  EE21  F0E4         	lfsr	2,_vscpData+3
 15772  004336  62DF               	cpfseq	indf2,c
 15773  004338  D00F               	goto	l16192
 15774                           
 15775                           ; BSR set to: 1
 15776  00433A  51E5               	movf	(_vscpData+4)& (0+255),w,b
 15777  00433C  C0BD  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15778  004340  C0BE  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15779  004344  62DF               	cpfseq	indf2,c
 15780  004346  D008               	goto	l16192
 15781                           
 15782                           ; BSR set to: 1
 15783                           ;main.c: 2565: *value = vscpData[ 1 ];
 15784  004348  C0BD  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15785  00434C  C0BE  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15786  004350  C1E2  FFDF         	movff	_vscpData+1,indf2
 15787                           
 15788                           ; BSR set to: 1
 15789                           ;main.c: 2566: return 1;
 15790  004354  0E01               	movlw	1
 15791  004356  D018               	goto	l1166
 15792  004358                     l16192:
 15793  004358  0100               	movlb	0	; () banked
 15794  00435A  51BB               	movf	writeRegisterExtended@timeout& (0+255),w,b
 15795  00435C  6FBF               	movwf	??_writeRegisterExtended& (0+255),b
 15796  00435E  51BC               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 15797  004360  6FC0               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 15798  004362  6BC1               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 15799  004364  6BC2               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 15800  004366  51BF               	movf	??_writeRegisterExtended& (0+255),w,b
 15801  004368  0101               	movlb	1	; () banked
 15802  00436A  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
 15803  00436C  0100               	movlb	0	; () banked
 15804  00436E  51C0               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 15805  004370  0101               	movlb	1	; () banked
 15806  004372  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 15807  004374  0100               	movlb	0	; () banked
 15808  004376  51C1               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 15809  004378  0101               	movlb	1	; () banked
 15810  00437A  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 15811  00437C  0100               	movlb	0	; () banked
 15812  00437E  51C2               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 15813  004380  0101               	movlb	1	; () banked
 15814  004382  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 15815  004384  E3AD               	bnc	l1163
 15816  004386                     l16194:
 15817                           
 15818                           ;main.c: 2567: }
 15819                           ;main.c: 2569: }
 15820                           ;main.c: 2571: }
 15821                           ;main.c: 2573: }
 15822                           ;main.c: 2575: return 0;
 15823  004386  0E00               	movlw	0
 15824  004388                     l1166:
 15825  004388  0012               	return	
 15826  00438A                     __end_of_writeRegisterExtended:
 15827                           	opt stack 0
 15828                           tblptru	equ	0xFF8
 15829                           tblptrh	equ	0xFF7
 15830                           tblptrl	equ	0xFF6
 15831                           tablat	equ	0xFF5
 15832                           prodh	equ	0xFF4
 15833                           prodl	equ	0xFF3
 15834                           intcon	equ	0xFF2
 15835                           indf0	equ	0xFEF
 15836                           postinc0	equ	0xFEE
 15837                           fsr0h	equ	0xFEA
 15838                           fsr0l	equ	0xFE9
 15839                           wreg	equ	0xFE8
 15840                           indf1	equ	0xFE7
 15841                           postinc1	equ	0xFE6
 15842                           postdec1	equ	0xFE5
 15843                           fsr1h	equ	0xFE2
 15844                           fsr1l	equ	0xFE1
 15845                           indf2	equ	0xFDF
 15846                           postinc2	equ	0xFDE
 15847                           postdec2	equ	0xFDD
 15848                           plusw2	equ	0xFDB
 15849                           fsr2h	equ	0xFDA
 15850                           fsr2l	equ	0xFD9
 15851                           status	equ	0xFD8
 15852                           
 15853 ;; *************** function _printBinary *****************
 15854 ;; Defined at:
 15855 ;;		line 2619 in file "main.c"
 15856 ;; Parameters:    Size  Location     Type
 15857 ;;  value           1    wreg     unsigned char 
 15858 ;; Auto vars:     Size  Location     Type
 15859 ;;  value           1    3[BANK0 ] unsigned char 
 15860 ;;  i               2    4[BANK0 ] int 
 15861 ;; Return value:  Size  Location     Type
 15862 ;;		None               void
 15863 ;; Registers used:
 15864 ;;		wreg, status,2, status,0, cstack
 15865 ;; Tracked objects:
 15866 ;;		On entry : F/2
 15867 ;;		On exit  : F/0
 15868 ;;		Unchanged: 0/0
 15869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15870 ;;      Params:         0       0       0       0       0       0       0
 15871 ;;      Locals:         0       3       0       0       0       0       0
 15872 ;;      Temps:          0       2       0       0       0       0       0
 15873 ;;      Totals:         0       5       0       0       0       0       0
 15874 ;;Total ram usage:        5 bytes
 15875 ;; Hardware stack levels used:    1
 15876 ;; Hardware stack levels required when called:    4
 15877 ;; This function calls:
 15878 ;;		_WriteUSART
 15879 ;; This function is called by:
 15880 ;;		_doModeVerbose
 15881 ;; This function uses a non-reentrant model
 15882 ;;
 15883                           
 15884                           	psect	text24
 15885  005988                     __ptext24:
 15886                           	opt stack 0
 15887  005988                     _printBinary:
 15888                           	opt stack 25
 15889                           
 15890                           ;incstack = 0
 15891                           ;incstack = 0
 15892                           ;printBinary@value stored from wreg
 15893  005988  CFE8 F063          	movff	wreg,printBinary@value
 15894                           
 15895                           ; BSR set to: 2
 15896                           ;main.c: 2620: int i;
 15897                           ;main.c: 2622: for (i = 7; i >= 0; i--) {
 15898  00598C  0100               	movlb	0	; () banked
 15899  00598E  6B65               	clrf	(printBinary@i+1)& (0+255),b
 15900  005990  0E07               	movlw	7
 15901  005992  6F64               	movwf	printBinary@i& (0+255),b
 15902  005994                     l16144:
 15903                           
 15904                           ; BSR set to: 0
 15905                           ;main.c: 2623: if (value & (1 << i)) {
 15906  005994  C064  F061         	movff	printBinary@i,??_printBinary
 15907  005998  0E01               	movlw	1
 15908  00599A  6F62               	movwf	(??_printBinary+1)& (0+255),b
 15909  00599C  2B61               	incf	??_printBinary& (0+255),f,b
 15910  00599E  D002               	goto	u21764
 15911  0059A0                     u21765:
 15912  0059A0  90D8               	bcf	status,0,c
 15913  0059A2  3762               	rlcf	(??_printBinary+1)& (0+255),f,b
 15914  0059A4                     u21764:
 15915  0059A4  2F61               	decfsz	??_printBinary& (0+255),f,b
 15916  0059A6  D7FC               	goto	u21765
 15917  0059A8  5162               	movf	(??_printBinary+1)& (0+255),w,b
 15918  0059AA  1563               	andwf	printBinary@value& (0+255),w,b
 15919  0059AC  E006               	bz	l1186
 15920  0059AE                     l1182:
 15921  0059AE  A2AC               	btfss	4012,1,c	;volatile
 15922  0059B0  D7FE               	goto	l1182
 15923                           
 15924                           ;main.c: 2625: WriteUSART('1');
 15925  0059B2  0E31               	movlw	49
 15926  0059B4  EC36  F02F         	call	_WriteUSART
 15927                           
 15928                           ;main.c: 2626: } else {
 15929  0059B8  D005               	goto	l16152
 15930  0059BA                     l1186:
 15931  0059BA  A2AC               	btfss	4012,1,c	;volatile
 15932  0059BC  D7FE               	goto	l1186
 15933                           
 15934                           ;main.c: 2628: WriteUSART('0');
 15935  0059BE  0E30               	movlw	48
 15936  0059C0  EC36  F02F         	call	_WriteUSART
 15937  0059C4                     l16152:
 15938  0059C4  0100               	movlb	0	; () banked
 15939  0059C6  0764               	decf	printBinary@i& (0+255),f,b
 15940  0059C8  A0D8               	btfss	status,0,c
 15941  0059CA  0765               	decf	(printBinary@i+1)& (0+255),f,b
 15942                           
 15943                           ; BSR set to: 0
 15944  0059CC  BF65               	btfsc	(printBinary@i+1)& (0+255),7,b
 15945                           
 15946                           ; BSR set to: 0
 15947  0059CE  0012               	return	
 15948  0059D0  D7E1               	goto	l16144
 15949  0059D2                     __end_of_printBinary:
 15950                           	opt stack 0
 15951                           tblptru	equ	0xFF8
 15952                           tblptrh	equ	0xFF7
 15953                           tblptrl	equ	0xFF6
 15954                           tablat	equ	0xFF5
 15955                           prodh	equ	0xFF4
 15956                           prodl	equ	0xFF3
 15957                           intcon	equ	0xFF2
 15958                           indf0	equ	0xFEF
 15959                           postinc0	equ	0xFEE
 15960                           fsr0h	equ	0xFEA
 15961                           fsr0l	equ	0xFE9
 15962                           wreg	equ	0xFE8
 15963                           indf1	equ	0xFE7
 15964                           postinc1	equ	0xFE6
 15965                           postdec1	equ	0xFE5
 15966                           fsr1h	equ	0xFE2
 15967                           fsr1l	equ	0xFE1
 15968                           indf2	equ	0xFDF
 15969                           postinc2	equ	0xFDE
 15970                           postdec2	equ	0xFDD
 15971                           plusw2	equ	0xFDB
 15972                           fsr2h	equ	0xFDA
 15973                           fsr2l	equ	0xFD9
 15974                           status	equ	0xFD8
 15975                           
 15976 ;; *************** function _readRegisterExtended *****************
 15977 ;; Defined at:
 15978 ;;		line 2431 in file "main.c"
 15979 ;; Parameters:    Size  Location     Type
 15980 ;;  nodeid          1    wreg     unsigned char 
 15981 ;;  page            2   88[BANK0 ] unsigned short 
 15982 ;;  reg             1   90[BANK0 ] unsigned char 
 15983 ;;  timeout         2   91[BANK0 ] unsigned short 
 15984 ;;  value           2   93[BANK0 ] PTR unsigned char 
 15985 ;;		 -> doModeVerbose@value(1), 
 15986 ;; Auto vars:     Size  Location     Type
 15987 ;;  nodeid          1   99[BANK0 ] unsigned char 
 15988 ;; Return value:  Size  Location     Type
 15989 ;;                  1    wreg      enum E15660
 15990 ;; Registers used:
 15991 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15992 ;; Tracked objects:
 15993 ;;		On entry : F/2
 15994 ;;		On exit  : E/0
 15995 ;;		Unchanged: 0/0
 15996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15997 ;;      Params:         0       7       0       0       0       0       0
 15998 ;;      Locals:         0       1       0       0       0       0       0
 15999 ;;      Temps:          0       4       0       0       0       0       0
 16000 ;;      Totals:         0      12       0       0       0       0       0
 16001 ;;Total ram usage:       12 bytes
 16002 ;; Hardware stack levels used:    1
 16003 ;; Hardware stack levels required when called:    7
 16004 ;; This function calls:
 16005 ;;		_sendVSCPFrame
 16006 ;;		_getVSCPFrame
 16007 ;; This function is called by:
 16008 ;;		_doModeVerbose
 16009 ;; This function uses a non-reentrant model
 16010 ;;
 16011                           
 16012                           	psect	text25
 16013  00438A                     __ptext25:
 16014                           	opt stack 0
 16015  00438A                     _readRegisterExtended:
 16016                           	opt stack 22
 16017                           
 16018                           ; BSR set to: 0
 16019                           ;incstack = 0
 16020                           ;incstack = 0
 16021                           ;readRegisterExtended@nodeid stored from wreg
 16022  00438A  CFE8 F0C3          	movff	wreg,readRegisterExtended@nodeid
 16023                           
 16024                           ; BSR set to: 2
 16025                           ;main.c: 2432: vscpData[ 0 ] = nodeid;
 16026  00438E  C0C3  F1E1         	movff	readRegisterExtended@nodeid,_vscpData
 16027                           
 16028                           ; BSR set to: 2
 16029                           ;main.c: 2433: vscpData[ 1 ] = page >> 8;
 16030  004392  0100               	movlb	0	; () banked
 16031  004394  51B9               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 16032  004396  0101               	movlb	1	; () banked
 16033  004398  6FE2               	movwf	(_vscpData+1)& (0+255),b
 16034                           
 16035                           ; BSR set to: 1
 16036                           ;main.c: 2434: vscpData[ 2 ] = page & 0xff;
 16037  00439A  C0B8  F1E3         	movff	readRegisterExtended@page,_vscpData+2
 16038                           
 16039                           ; BSR set to: 1
 16040                           ;main.c: 2435: vscpData[ 3 ] = reg;
 16041  00439E  C0BA  F1E4         	movff	readRegisterExtended@reg,_vscpData+3
 16042                           
 16043                           ; BSR set to: 1
 16044                           ;main.c: 2436: vscpData[ 4 ] = 1;
 16045  0043A2  0E01               	movlw	1
 16046  0043A4  6FE5               	movwf	(_vscpData+4)& (0+255),b
 16047                           
 16048                           ; BSR set to: 1
 16049                           ;main.c: 2438: if (sendVSCPFrame(0,
 16050                           ;main.c: 2439: 37,
 16051                           ;main.c: 2440: 0,
 16052                           ;main.c: 2441: 0,
 16053                           ;main.c: 2442: 5,
 16054                           ;main.c: 2443: vscpData)) {
 16055  0043A6  0100               	movlb	0	; () banked
 16056  0043A8  6B99               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 16057  0043AA  6B98               	clrf	?_sendVSCPFrame& (0+255),b
 16058  0043AC  0E25               	movlw	37
 16059  0043AE  6F9A               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 16060  0043B0  6B9B               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 16061  0043B2  6B9C               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 16062  0043B4  0E05               	movlw	5
 16063  0043B6  6F9D               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 16064  0043B8  0E01               	movlw	high _vscpData
 16065  0043BA  6F9F               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 16066  0043BC  0EE1               	movlw	low _vscpData
 16067  0043BE  6F9E               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 16068  0043C0  EC5B  F026         	call	_sendVSCPFrame	;wreg free
 16069  0043C4  0900               	iorlw	0
 16070  0043C6  E058               	bz	l15792
 16071                           
 16072                           ;main.c: 2445: timekeeper = 0;
 16073  0043C8  0101               	movlb	1	; () banked
 16074  0043CA  6B18               	clrf	_timekeeper& (0+255),b	;volatile
 16075  0043CC  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 16076  0043CE  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 16077  0043D0  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 16078                           
 16079                           ;main.c: 2446: while (timekeeper < timeout) {
 16080  0043D2  D03B               	goto	l15790
 16081  0043D4                     l1145:
 16082                           
 16083                           ; BSR set to: 1
 16084  0043D4  0004               	clrwdt		;# 
 16085                           
 16086                           ;main.c: 2450: if (getVSCPFrame(&vscpClass,
 16087                           ;main.c: 2451: &vscpType,
 16088                           ;main.c: 2452: &vscpNodeId,
 16089                           ;main.c: 2453: &vscpPriority,
 16090                           ;main.c: 2454: &vscpSize,
 16091                           ;main.c: 2455: vscpData)) {
 16092  0043D6  0E3E               	movlw	low _vscpType
 16093  0043D8  0100               	movlb	0	; () banked
 16094  0043DA  6F73               	movwf	?_getVSCPFrame& (0+255),b
 16095  0043DC  0E3B               	movlw	low _vscpNodeId
 16096  0043DE  6F74               	movwf	(?_getVSCPFrame+1)& (0+255),b
 16097  0043E0  0E3C               	movlw	low _vscpPriority
 16098  0043E2  6F75               	movwf	(?_getVSCPFrame+2)& (0+255),b
 16099  0043E4  0E3D               	movlw	low _vscpSize
 16100  0043E6  6F76               	movwf	(?_getVSCPFrame+3)& (0+255),b
 16101  0043E8  0E01               	movlw	high _vscpData
 16102  0043EA  6F78               	movwf	(?_getVSCPFrame+5)& (0+255),b
 16103  0043EC  0EE1               	movlw	low _vscpData
 16104  0043EE  6F77               	movwf	(?_getVSCPFrame+4)& (0+255),b
 16105  0043F0  0E37               	movlw	_vscpClass& (0+255)
 16106  0043F2  EC77  F029         	call	_getVSCPFrame
 16107  0043F6  0900               	iorlw	0
 16108  0043F8  E028               	bz	l15790
 16109                           
 16110                           ; BSR set to: 0
 16111                           ;main.c: 2456: if ((nodeid == vscpNodeId) &&
 16112                           ;main.c: 2457: (0 == vscpClass) &&
 16113                           ;main.c: 2458: (39 == vscpType) &&
 16114                           ;main.c: 2459: (5 == vscpSize) &&
 16115                           ;main.c: 2460: (0 == vscpData[ 0 ]) &&
 16116                           ;main.c: 2461: ((page >> 8) == vscpData[ 1 ]) &&
 16117                           ;main.c: 2462: ((page & 0xff) == vscpData[ 2 ]) &&
 16118                           ;main.c: 2463: (reg == vscpData[ 3 ])) {
 16119  0043FA  503B               	movf	_vscpNodeId,w,c
 16120  0043FC  63C3               	cpfseq	readRegisterExtended@nodeid& (0+255),b
 16121  0043FE  D025               	goto	l15790
 16122                           
 16123                           ; BSR set to: 0
 16124  004400  5038               	movf	_vscpClass+1,w,c
 16125  004402  1037               	iorwf	_vscpClass,w,c
 16126  004404  E122               	bnz	l15790
 16127                           
 16128                           ; BSR set to: 0
 16129  004406  503E               	movf	_vscpType,w,c
 16130  004408  0A27               	xorlw	39
 16131  00440A  E11F               	bnz	l15790
 16132                           
 16133                           ; BSR set to: 0
 16134  00440C  503D               	movf	_vscpSize,w,c
 16135  00440E  0A05               	xorlw	5
 16136  004410  E11C               	bnz	l15790
 16137                           
 16138                           ; BSR set to: 0
 16139  004412  0101               	movlb	1	; () banked
 16140  004414  67E1               	tstfsz	_vscpData& (0+255),b
 16141  004416  D019               	goto	l15790
 16142                           
 16143                           ; BSR set to: 1
 16144  004418  0100               	movlb	0	; () banked
 16145  00441A  51B9               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 16146  00441C  0101               	movlb	1	; () banked
 16147  00441E  19E2               	xorwf	(_vscpData+1)& (0+255),w,b
 16148  004420  E114               	bnz	l15790
 16149                           
 16150                           ; BSR set to: 1
 16151  004422  0100               	movlb	0	; () banked
 16152  004424  51B8               	movf	readRegisterExtended@page& (0+255),w,b
 16153  004426  EE21  F0E3         	lfsr	2,_vscpData+2
 16154  00442A  62DF               	cpfseq	indf2,c
 16155  00442C  D00E               	goto	l15790
 16156                           
 16157                           ; BSR set to: 1
 16158  00442E  51BA               	movf	readRegisterExtended@reg& (0+255),w,b
 16159  004430  0101               	movlb	1	; () banked
 16160  004432  EE21  F0E4         	lfsr	2,_vscpData+3
 16161  004436  62DF               	cpfseq	indf2,c
 16162  004438  D008               	goto	l15790
 16163                           
 16164                           ; BSR set to: 1
 16165                           ;main.c: 2464: *value = vscpData[ 4 ];
 16166  00443A  C0BD  FFD9         	movff	readRegisterExtended@value,fsr2l
 16167  00443E  C0BE  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 16168  004442  C1E5  FFDF         	movff	_vscpData+4,indf2
 16169                           
 16170                           ; BSR set to: 1
 16171                           ;main.c: 2465: return 1;
 16172  004446  0E01               	movlw	1
 16173  004448  D018               	goto	l1148
 16174  00444A                     l15790:
 16175  00444A  0100               	movlb	0	; () banked
 16176  00444C  51BB               	movf	readRegisterExtended@timeout& (0+255),w,b
 16177  00444E  6FBF               	movwf	??_readRegisterExtended& (0+255),b
 16178  004450  51BC               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 16179  004452  6FC0               	movwf	(??_readRegisterExtended+1)& (0+255),b
 16180  004454  6BC1               	clrf	(??_readRegisterExtended+2)& (0+255),b
 16181  004456  6BC2               	clrf	(??_readRegisterExtended+3)& (0+255),b
 16182  004458  51BF               	movf	??_readRegisterExtended& (0+255),w,b
 16183  00445A  0101               	movlb	1	; () banked
 16184  00445C  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
 16185  00445E  0100               	movlb	0	; () banked
 16186  004460  51C0               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 16187  004462  0101               	movlb	1	; () banked
 16188  004464  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 16189  004466  0100               	movlb	0	; () banked
 16190  004468  51C1               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 16191  00446A  0101               	movlb	1	; () banked
 16192  00446C  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 16193  00446E  0100               	movlb	0	; () banked
 16194  004470  51C2               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 16195  004472  0101               	movlb	1	; () banked
 16196  004474  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 16197  004476  E3AE               	bnc	l1145
 16198  004478                     l15792:
 16199                           
 16200                           ;main.c: 2466: }
 16201                           ;main.c: 2467: }
 16202                           ;main.c: 2468: }
 16203                           ;main.c: 2469: }
 16204                           ;main.c: 2471: return 0;
 16205  004478  0E00               	movlw	0
 16206  00447A                     l1148:
 16207  00447A  0012               	return	
 16208  00447C                     __end_of_readRegisterExtended:
 16209                           	opt stack 0
 16210                           tblptru	equ	0xFF8
 16211                           tblptrh	equ	0xFF7
 16212                           tblptrl	equ	0xFF6
 16213                           tablat	equ	0xFF5
 16214                           prodh	equ	0xFF4
 16215                           prodl	equ	0xFF3
 16216                           intcon	equ	0xFF2
 16217                           indf0	equ	0xFEF
 16218                           postinc0	equ	0xFEE
 16219                           fsr0h	equ	0xFEA
 16220                           fsr0l	equ	0xFE9
 16221                           wreg	equ	0xFE8
 16222                           indf1	equ	0xFE7
 16223                           postinc1	equ	0xFE6
 16224                           postdec1	equ	0xFE5
 16225                           fsr1h	equ	0xFE2
 16226                           fsr1l	equ	0xFE1
 16227                           indf2	equ	0xFDF
 16228                           postinc2	equ	0xFDE
 16229                           postdec2	equ	0xFDD
 16230                           plusw2	equ	0xFDB
 16231                           fsr2h	equ	0xFDA
 16232                           fsr2l	equ	0xFD9
 16233                           status	equ	0xFD8
 16234                           
 16235 ;; *************** function _strcpy *****************
 16236 ;; Defined at:
 16237 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 16238 ;; Parameters:    Size  Location     Type
 16239 ;;  to              2    0[BANK0 ] PTR unsigned char 
 16240 ;;		 -> cmdbuf(80), 
 16241 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 16242 ;;		 -> cmdbuf(80), 
 16243 ;; Auto vars:     Size  Location     Type
 16244 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 16245 ;;		 -> cmdbuf(80), 
 16246 ;; Return value:  Size  Location     Type
 16247 ;;                  2    0[BANK0 ] PTR unsigned char 
 16248 ;; Registers used:
 16249 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16250 ;; Tracked objects:
 16251 ;;		On entry : F/0
 16252 ;;		On exit  : F/0
 16253 ;;		Unchanged: 0/0
 16254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16255 ;;      Params:         0       4       0       0       0       0       0
 16256 ;;      Locals:         0       2       0       0       0       0       0
 16257 ;;      Temps:          0       0       0       0       0       0       0
 16258 ;;      Totals:         0       6       0       0       0       0       0
 16259 ;;Total ram usage:        6 bytes
 16260 ;; Hardware stack levels used:    1
 16261 ;; Hardware stack levels required when called:    3
 16262 ;; This function calls:
 16263 ;;		Nothing
 16264 ;; This function is called by:
 16265 ;;		_doModeVerbose
 16266 ;; This function uses a non-reentrant model
 16267 ;;
 16268                           
 16269                           	psect	text26
 16270  005D5C                     __ptext26:
 16271                           	opt stack 0
 16272  005D5C                     _strcpy:
 16273                           	opt stack 26
 16274                           
 16275                           ; BSR set to: 0
 16276                           
 16277                           ;incstack = 0
 16278                           ;incstack = 0
 16279  005D5C  C060  F064         	movff	strcpy@to,strcpy@cp
 16280  005D60  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 16281  005D64  D004               	goto	l12344
 16282  005D66                     l12342:
 16283                           
 16284                           ; BSR set to: 0
 16285  005D66  4B64               	infsnz	strcpy@cp& (0+255),f,b
 16286  005D68  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 16287  005D6A  4B62               	infsnz	strcpy@from& (0+255),f,b
 16288  005D6C  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 16289  005D6E                     l12344:
 16290                           
 16291                           ; BSR set to: 0
 16292  005D6E  C062  FFD9         	movff	strcpy@from,fsr2l
 16293  005D72  C063  FFDA         	movff	strcpy@from+1,fsr2h
 16294  005D76  C064  FFE1         	movff	strcpy@cp,fsr1l
 16295  005D7A  C065  FFE2         	movff	strcpy@cp+1,fsr1h
 16296  005D7E  CFDF FFE7          	movff	indf2,indf1
 16297  005D82  50E7               	movf	indf1,w,c
 16298  005D84  B4D8               	btfsc	status,2,c
 16299                           
 16300                           ; BSR set to: 0
 16301  005D86  0012               	return	
 16302  005D88  D7EE               	goto	l12342
 16303  005D8A                     __end_of_strcpy:
 16304                           	opt stack 0
 16305                           tblptru	equ	0xFF8
 16306                           tblptrh	equ	0xFF7
 16307                           tblptrl	equ	0xFF6
 16308                           tablat	equ	0xFF5
 16309                           prodh	equ	0xFF4
 16310                           prodl	equ	0xFF3
 16311                           intcon	equ	0xFF2
 16312                           indf0	equ	0xFEF
 16313                           postinc0	equ	0xFEE
 16314                           fsr0h	equ	0xFEA
 16315                           fsr0l	equ	0xFE9
 16316                           wreg	equ	0xFE8
 16317                           indf1	equ	0xFE7
 16318                           postinc1	equ	0xFE6
 16319                           postdec1	equ	0xFE5
 16320                           fsr1h	equ	0xFE2
 16321                           fsr1l	equ	0xFE1
 16322                           indf2	equ	0xFDF
 16323                           postinc2	equ	0xFDE
 16324                           postdec2	equ	0xFDD
 16325                           plusw2	equ	0xFDB
 16326                           fsr2h	equ	0xFDA
 16327                           fsr2l	equ	0xFD9
 16328                           status	equ	0xFD8
 16329                           
 16330 ;; *************** function _findNodes *****************
 16331 ;; Defined at:
 16332 ;;		line 2770 in file "main.c"
 16333 ;; Parameters:    Size  Location     Type
 16334 ;;		None
 16335 ;; Auto vars:     Size  Location     Type
 16336 ;;  i               1  107[BANK0 ] unsigned char 
 16337 ;;  value           1  106[BANK0 ] unsigned char 
 16338 ;;  nFound          1  105[BANK0 ] unsigned char 
 16339 ;; Return value:  Size  Location     Type
 16340 ;;		None               void
 16341 ;; Registers used:
 16342 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16343 ;; Tracked objects:
 16344 ;;		On entry : F/0
 16345 ;;		On exit  : 0/0
 16346 ;;		Unchanged: 0/0
 16347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16348 ;;      Params:         0       0       0       0       0       0       0
 16349 ;;      Locals:         0       5       0       0       0       0       0
 16350 ;;      Temps:          0       0       0       0       0       0       0
 16351 ;;      Totals:         0       5       0       0       0       0       0
 16352 ;;Total ram usage:        5 bytes
 16353 ;; Hardware stack levels used:    1
 16354 ;; Hardware stack levels required when called:    9
 16355 ;; This function calls:
 16356 ;;		_putsUSART
 16357 ;;		_printNodeFirmwareVersion
 16358 ;;		_printGUID
 16359 ;;		_printMDF
 16360 ;;		_itoa
 16361 ;;		_readRegister
 16362 ;; This function is called by:
 16363 ;;		_doModeVerbose
 16364 ;; This function uses a non-reentrant model
 16365 ;;
 16366                           
 16367                           	psect	text27
 16368  00447C                     __ptext27:
 16369                           	opt stack 0
 16370  00447C                     _findNodes:
 16371                           	opt stack 20
 16372                           
 16373                           ; BSR set to: 0
 16374                           ;main.c: 2771: uint8_t nFound = 0;
 16375                           
 16376                           ; BSR set to: 0
 16377                           ;incstack = 0
 16378                           ;incstack = 0
 16379  00447C  6BC9               	clrf	findNodes@nFound& (0+255),b
 16380                           
 16381                           ; BSR set to: 0
 16382                           ;main.c: 2772: uint8_t i;
 16383                           ;main.c: 2773: uint8_t value;
 16384                           ;main.c: 2775: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16385  00447E  0E71               	movlw	high STR_261
 16386  004480  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16387  004482  0E44               	movlw	low STR_261
 16388  004484  6F61               	movwf	?_putsUSART& (0+255),b
 16389  004486  EC41  F02C         	call	_putsUSART	;wreg free
 16390                           
 16391                           ;main.c: 2777: for (i = 1; i != 0; i++) {
 16392  00448A  0E01               	movlw	1
 16393  00448C  0100               	movlb	0	; () banked
 16394  00448E  6FCB               	movwf	findNodes@i& (0+255),b
 16395  004490                     l1247:
 16396                           
 16397                           ; BSR set to: 0
 16398  004490  0004               	clrwdt		;# 
 16399                           
 16400                           ;main.c: 2781: if (readRegister(i,
 16401                           ;main.c: 2782: 0xE0,
 16402                           ;main.c: 2783: rwtimeout,
 16403                           ;main.c: 2784: &value)) {
 16404  004492  0EE0               	movlw	224
 16405  004494  0100               	movlb	0	; () banked
 16406  004496  6FB8               	movwf	?_readRegister& (0+255),b
 16407  004498  C034  F0B9         	movff	_rwtimeout,?_readRegister+1
 16408  00449C  6BBA               	clrf	(?_readRegister+2)& (0+255),b
 16409  00449E  0ECA               	movlw	low findNodes@value
 16410  0044A0  6FBB               	movwf	(?_readRegister+3)& (0+255),b
 16411  0044A2  51CB               	movf	findNodes@i& (0+255),w,b
 16412  0044A4  EC3F  F025         	call	_readRegister
 16413  0044A8  0900               	iorlw	0
 16414  0044AA  E042               	bz	l15742
 16415                           
 16416                           ;main.c: 2785: putsUSART((char *) "Node found with node id = ");
 16417  0044AC  0E7B               	movlw	high STR_262
 16418  0044AE  0100               	movlb	0	; () banked
 16419  0044B0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16420  0044B2  0E30               	movlw	low STR_262
 16421  0044B4  6F61               	movwf	?_putsUSART& (0+255),b
 16422  0044B6  EC41  F02C         	call	_putsUSART	;wreg free
 16423                           
 16424                           ;main.c: 2786: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 16425  0044BA  662B               	tstfsz	_bHex,c
 16426  0044BC  D004               	goto	l15724
 16427  0044BE  0100               	movlb	0	; () banked
 16428  0044C0  6BC8               	clrf	(_findNodes$1578+1)& (0+255),b
 16429  0044C2  0E0A               	movlw	10
 16430  0044C4  D003               	goto	L18
 16431  0044C6                     l15724:
 16432  0044C6  0100               	movlb	0	; () banked
 16433  0044C8  6BC8               	clrf	(_findNodes$1578+1)& (0+255),b
 16434  0044CA  0E10               	movlw	16
 16435  0044CC                     L18:
 16436  0044CC  6FC7               	movwf	_findNodes$1578& (0+255),b
 16437                           
 16438                           ; BSR set to: 0
 16439  0044CE  0E01               	movlw	high _wrkbuf
 16440  0044D0  0100               	movlb	0	; () banked
 16441  0044D2  6F71               	movwf	(?_itoa+1)& (0+255),b
 16442  0044D4  0E79               	movlw	low _wrkbuf
 16443  0044D6  6F70               	movwf	?_itoa& (0+255),b
 16444  0044D8  C03B  F072         	movff	_vscpNodeId,?_itoa+2
 16445  0044DC  6B73               	clrf	(?_itoa+3)& (0+255),b
 16446  0044DE  C0C7  F074         	movff	_findNodes$1578,?_itoa+4
 16447  0044E2  C0C8  F075         	movff	_findNodes$1578+1,?_itoa+5
 16448  0044E6  EC2D  F02E         	call	_itoa	;wreg free
 16449                           
 16450                           ; BSR set to: 0
 16451                           ;main.c: 2787: putsUSART(wrkbuf);
 16452  0044EA  0E01               	movlw	high _wrkbuf
 16453  0044EC  0100               	movlb	0	; () banked
 16454  0044EE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16455  0044F0  0E79               	movlw	low _wrkbuf
 16456  0044F2  6F61               	movwf	?_putsUSART& (0+255),b
 16457  0044F4  EC41  F02C         	call	_putsUSART	;wreg free
 16458                           
 16459                           ;main.c: 2788: putsUSART((char *) "\r\n");
 16460  0044F8  0E74               	movlw	high (STR_220+50)
 16461  0044FA  0100               	movlb	0	; () banked
 16462  0044FC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16463  0044FE  0E72               	movlw	low (STR_220+50)
 16464  004500  6F61               	movwf	?_putsUSART& (0+255),b
 16465  004502  EC41  F02C         	call	_putsUSART	;wreg free
 16466                           
 16467                           ;main.c: 2789: printNodeFirmwareVersion(i);
 16468  004506  0100               	movlb	0	; () banked
 16469  004508  51CB               	movf	findNodes@i& (0+255),w,b
 16470  00450A  ECD8  F024         	call	_printNodeFirmwareVersion
 16471                           
 16472                           ;main.c: 2790: printGUID(i);
 16473  00450E  0100               	movlb	0	; () banked
 16474  004510  51CB               	movf	findNodes@i& (0+255),w,b
 16475  004512  ECC6  F020         	call	_printGUID
 16476                           
 16477                           ;main.c: 2791: printMDF(i);
 16478  004516  0100               	movlb	0	; () banked
 16479  004518  51CB               	movf	findNodes@i& (0+255),w,b
 16480  00451A  EC9B  F028         	call	_printMDF
 16481                           
 16482                           ;main.c: 2792: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16483  00451E  0E71               	movlw	high STR_261
 16484  004520  0100               	movlb	0	; () banked
 16485  004522  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16486  004524  0E44               	movlw	low STR_261
 16487  004526  6F61               	movwf	?_putsUSART& (0+255),b
 16488  004528  EC41  F02C         	call	_putsUSART	;wreg free
 16489                           
 16490                           ;main.c: 2793: nFound++;
 16491  00452C  0100               	movlb	0	; () banked
 16492  00452E  2BC9               	incf	findNodes@nFound& (0+255),f,b
 16493  004530                     l15742:
 16494  004530  0100               	movlb	0	; () banked
 16495  004532  2BCB               	incf	findNodes@i& (0+255),f,b
 16496                           
 16497                           ; BSR set to: 0
 16498  004534  67CB               	tstfsz	findNodes@i& (0+255),b
 16499  004536  D7AC               	goto	l1247
 16500                           
 16501                           ; BSR set to: 0
 16502                           ;main.c: 2794: }
 16503                           ;main.c: 2796: }
 16504                           ;main.c: 2798: itoa(wrkbuf, nFound, 10);
 16505  004538  0E01               	movlw	high _wrkbuf
 16506  00453A  6F71               	movwf	(?_itoa+1)& (0+255),b
 16507  00453C  0E79               	movlw	low _wrkbuf
 16508  00453E  6F70               	movwf	?_itoa& (0+255),b
 16509  004540  C0C9  F072         	movff	findNodes@nFound,?_itoa+2
 16510  004544  6B73               	clrf	(?_itoa+3)& (0+255),b
 16511  004546  6B75               	clrf	(?_itoa+5)& (0+255),b
 16512  004548  0E0A               	movlw	10
 16513  00454A  6F74               	movwf	(?_itoa+4)& (0+255),b
 16514  00454C  EC2D  F02E         	call	_itoa	;wreg free
 16515                           
 16516                           ; BSR set to: 0
 16517                           ;main.c: 2799: putsUSART(wrkbuf);
 16518  004550  0E01               	movlw	high _wrkbuf
 16519  004552  0100               	movlb	0	; () banked
 16520  004554  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16521  004556  0E79               	movlw	low _wrkbuf
 16522  004558  6F61               	movwf	?_putsUSART& (0+255),b
 16523  00455A  EC41  F02C         	call	_putsUSART	;wreg free
 16524                           
 16525                           ;main.c: 2800: putsUSART((char *) " nodes found\r\n");
 16526  00455E  0E7E               	movlw	high STR_265
 16527  004560  0100               	movlb	0	; () banked
 16528  004562  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16529  004564  0E0F               	movlw	low STR_265
 16530  004566  6F61               	movwf	?_putsUSART& (0+255),b
 16531  004568  EF41  F02C         	goto	_putsUSART	;wreg free
 16532  00456C                     __end_of_findNodes:
 16533                           	opt stack 0
 16534                           tblptru	equ	0xFF8
 16535                           tblptrh	equ	0xFF7
 16536                           tblptrl	equ	0xFF6
 16537                           tablat	equ	0xFF5
 16538                           prodh	equ	0xFF4
 16539                           prodl	equ	0xFF3
 16540                           intcon	equ	0xFF2
 16541                           indf0	equ	0xFEF
 16542                           postinc0	equ	0xFEE
 16543                           fsr0h	equ	0xFEA
 16544                           fsr0l	equ	0xFE9
 16545                           wreg	equ	0xFE8
 16546                           indf1	equ	0xFE7
 16547                           postinc1	equ	0xFE6
 16548                           postdec1	equ	0xFE5
 16549                           fsr1h	equ	0xFE2
 16550                           fsr1l	equ	0xFE1
 16551                           indf2	equ	0xFDF
 16552                           postinc2	equ	0xFDE
 16553                           postdec2	equ	0xFDD
 16554                           plusw2	equ	0xFDB
 16555                           fsr2h	equ	0xFDA
 16556                           fsr2l	equ	0xFD9
 16557                           status	equ	0xFD8
 16558                           
 16559 ;; *************** function _printMDF *****************
 16560 ;; Defined at:
 16561 ;;		line 2851 in file "main.c"
 16562 ;; Parameters:    Size  Location     Type
 16563 ;;  nodeid          1    wreg     unsigned char 
 16564 ;; Auto vars:     Size  Location     Type
 16565 ;;  nodeid          1   97[BANK0 ] unsigned char 
 16566 ;;  p               2   99[BANK0 ] PTR unsigned char 
 16567 ;;		 -> wrkbuf(80), 
 16568 ;;  i               1  101[BANK0 ] unsigned char 
 16569 ;;  value           1   98[BANK0 ] unsigned char 
 16570 ;; Return value:  Size  Location     Type
 16571 ;;		None               void
 16572 ;; Registers used:
 16573 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16574 ;; Tracked objects:
 16575 ;;		On entry : D/2
 16576 ;;		On exit  : 0/0
 16577 ;;		Unchanged: 0/0
 16578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16579 ;;      Params:         0       0       0       0       0       0       0
 16580 ;;      Locals:         0       5       0       0       0       0       0
 16581 ;;      Temps:          0       0       0       0       0       0       0
 16582 ;;      Totals:         0       5       0       0       0       0       0
 16583 ;;Total ram usage:        5 bytes
 16584 ;; Hardware stack levels used:    1
 16585 ;; Hardware stack levels required when called:    8
 16586 ;; This function calls:
 16587 ;;		_putsUSART
 16588 ;;		_memset
 16589 ;;		_readRegister
 16590 ;; This function is called by:
 16591 ;;		_doModeVerbose
 16592 ;;		_findNodes
 16593 ;; This function uses a non-reentrant model
 16594 ;;
 16595                           
 16596                           	psect	text28
 16597  005136                     __ptext28:
 16598                           	opt stack 0
 16599  005136                     _printMDF:
 16600                           	opt stack 21
 16601                           
 16602                           ;incstack = 0
 16603                           ;incstack = 0
 16604                           ;printMDF@nodeid stored from wreg
 16605  005136  CFE8 F0C1          	movff	wreg,printMDF@nodeid
 16606                           
 16607                           ;main.c: 2852: uint8_t i;
 16608                           ;main.c: 2853: uint8_t value;
 16609                           ;main.c: 2854: char *p = wrkbuf;
 16610  00513A  0E01               	movlw	high _wrkbuf
 16611  00513C  0100               	movlb	0	; () banked
 16612  00513E  6FC4               	movwf	(printMDF@p+1)& (0+255),b
 16613  005140  0E79               	movlw	low _wrkbuf
 16614  005142  6FC3               	movwf	printMDF@p& (0+255),b
 16615                           
 16616                           ; BSR set to: 0
 16617                           ;main.c: 2855: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 16618  005144  0E01               	movlw	high _wrkbuf
 16619  005146  6F61               	movwf	(?_memset+1)& (0+255),b
 16620  005148  0E79               	movlw	low _wrkbuf
 16621  00514A  6F60               	movwf	?_memset& (0+255),b
 16622  00514C  6B63               	clrf	(?_memset+3)& (0+255),b
 16623  00514E  6B62               	clrf	(?_memset+2)& (0+255),b
 16624  005150  6B65               	clrf	(?_memset+5)& (0+255),b
 16625  005152  0E50               	movlw	80
 16626  005154  6F64               	movwf	(?_memset+4)& (0+255),b
 16627  005156  ECC5  F02E         	call	_memset	;wreg free
 16628                           
 16629                           ; BSR set to: 0
 16630                           ;main.c: 2856: putsUSART((char *) "MDF = http://");
 16631  00515A  0E7E               	movlw	high STR_271
 16632  00515C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16633  00515E  0E2D               	movlw	low STR_271
 16634  005160  6F61               	movwf	?_putsUSART& (0+255),b
 16635  005162  EC41  F02C         	call	_putsUSART	;wreg free
 16636                           
 16637                           ;main.c: 2858: for (i = 0; i < 32; i++) {
 16638  005166  0100               	movlb	0	; () banked
 16639  005168  6BC5               	clrf	printMDF@i& (0+255),b
 16640  00516A                     l16270:
 16641                           
 16642                           ; BSR set to: 0
 16643                           ;main.c: 2859: if (readRegister(nodeid,
 16644                           ;main.c: 2860: 0xE0 + i,
 16645                           ;main.c: 2861: rwtimeout,
 16646                           ;main.c: 2862: &value)) {
 16647  00516A  51C5               	movf	printMDF@i& (0+255),w,b
 16648  00516C  0FE0               	addlw	224
 16649  00516E  6FB8               	movwf	?_readRegister& (0+255),b
 16650  005170  C034  F0B9         	movff	_rwtimeout,?_readRegister+1
 16651  005174  6BBA               	clrf	(?_readRegister+2)& (0+255),b
 16652  005176  0EC2               	movlw	low printMDF@value
 16653  005178  6FBB               	movwf	(?_readRegister+3)& (0+255),b
 16654  00517A  51C1               	movf	printMDF@nodeid& (0+255),w,b
 16655  00517C  EC3F  F025         	call	_readRegister
 16656  005180  0900               	iorlw	0
 16657  005182  E00A               	bz	l16276
 16658                           
 16659                           ;main.c: 2863: *p = value;
 16660  005184  C0C3  FFD9         	movff	printMDF@p,fsr2l
 16661  005188  C0C4  FFDA         	movff	printMDF@p+1,fsr2h
 16662  00518C  C0C2  FFDF         	movff	printMDF@value,indf2
 16663  005190                     l16274:
 16664                           
 16665                           ;main.c: 2864: p++;
 16666  005190  0100               	movlb	0	; () banked
 16667  005192  4BC3               	infsnz	printMDF@p& (0+255),f,b
 16668  005194  2BC4               	incf	(printMDF@p+1)& (0+255),f,b
 16669                           
 16670                           ;main.c: 2866: }
 16671  005196  D007               	goto	l16280
 16672  005198                     l16276:
 16673                           
 16674                           ;main.c: 2867: else {
 16675                           ;main.c: 2868: *p = '?';
 16676  005198  C0C3  FFD9         	movff	printMDF@p,fsr2l
 16677  00519C  C0C4  FFDA         	movff	printMDF@p+1,fsr2h
 16678  0051A0  0E3F               	movlw	63
 16679  0051A2  6EDF               	movwf	indf2,c
 16680  0051A4  D7F5               	goto	l16274
 16681  0051A6                     l16280:
 16682                           
 16683                           ; BSR set to: 0
 16684  0051A6  2BC5               	incf	printMDF@i& (0+255),f,b
 16685                           
 16686                           ; BSR set to: 0
 16687  0051A8  0E1F               	movlw	31
 16688  0051AA  65C5               	cpfsgt	printMDF@i& (0+255),b
 16689  0051AC  D7DE               	goto	l16270
 16690                           
 16691                           ; BSR set to: 0
 16692                           ;main.c: 2870: }
 16693                           ;main.c: 2871: }
 16694                           ;main.c: 2873: putsUSART(wrkbuf);
 16695  0051AE  0E01               	movlw	high _wrkbuf
 16696  0051B0  0100               	movlb	0	; () banked
 16697  0051B2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16698  0051B4  0E79               	movlw	low _wrkbuf
 16699  0051B6  6F61               	movwf	?_putsUSART& (0+255),b
 16700  0051B8  EC41  F02C         	call	_putsUSART	;wreg free
 16701                           
 16702                           ;main.c: 2874: putsUSART((char *) "\r\n");
 16703  0051BC  0E74               	movlw	high (STR_220+50)
 16704  0051BE  0100               	movlb	0	; () banked
 16705  0051C0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16706  0051C2  0E72               	movlw	low (STR_220+50)
 16707  0051C4  6F61               	movwf	?_putsUSART& (0+255),b
 16708  0051C6  EF41  F02C         	goto	_putsUSART	;wreg free
 16709  0051CA                     __end_of_printMDF:
 16710                           	opt stack 0
 16711                           tblptru	equ	0xFF8
 16712                           tblptrh	equ	0xFF7
 16713                           tblptrl	equ	0xFF6
 16714                           tablat	equ	0xFF5
 16715                           prodh	equ	0xFF4
 16716                           prodl	equ	0xFF3
 16717                           intcon	equ	0xFF2
 16718                           indf0	equ	0xFEF
 16719                           postinc0	equ	0xFEE
 16720                           fsr0h	equ	0xFEA
 16721                           fsr0l	equ	0xFE9
 16722                           wreg	equ	0xFE8
 16723                           indf1	equ	0xFE7
 16724                           postinc1	equ	0xFE6
 16725                           postdec1	equ	0xFE5
 16726                           fsr1h	equ	0xFE2
 16727                           fsr1l	equ	0xFE1
 16728                           indf2	equ	0xFDF
 16729                           postinc2	equ	0xFDE
 16730                           postdec2	equ	0xFDD
 16731                           plusw2	equ	0xFDB
 16732                           fsr2h	equ	0xFDA
 16733                           fsr2l	equ	0xFD9
 16734                           status	equ	0xFD8
 16735                           
 16736 ;; *************** function _printGUID *****************
 16737 ;; Defined at:
 16738 ;;		line 2810 in file "main.c"
 16739 ;; Parameters:    Size  Location     Type
 16740 ;;  nodeid          1    wreg     unsigned char 
 16741 ;; Auto vars:     Size  Location     Type
 16742 ;;  nodeid          1   97[BANK0 ] unsigned char 
 16743 ;;  buf             3   98[BANK0 ] unsigned char [3]
 16744 ;;  i               1  102[BANK0 ] unsigned char 
 16745 ;;  value           1  101[BANK0 ] unsigned char 
 16746 ;; Return value:  Size  Location     Type
 16747 ;;		None               void
 16748 ;; Registers used:
 16749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16750 ;; Tracked objects:
 16751 ;;		On entry : D/2
 16752 ;;		On exit  : 0/0
 16753 ;;		Unchanged: 0/0
 16754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16755 ;;      Params:         0       0       0       0       0       0       0
 16756 ;;      Locals:         0       6       0       0       0       0       0
 16757 ;;      Temps:          0       0       0       0       0       0       0
 16758 ;;      Totals:         0       6       0       0       0       0       0
 16759 ;;Total ram usage:        6 bytes
 16760 ;; Hardware stack levels used:    1
 16761 ;; Hardware stack levels required when called:    8
 16762 ;; This function calls:
 16763 ;;		_putsUSART
 16764 ;;		_memset
 16765 ;;		_strlen
 16766 ;;		_itoa
 16767 ;;		_readRegister
 16768 ;;		_strcat
 16769 ;; This function is called by:
 16770 ;;		_doModeVerbose
 16771 ;;		_findNodes
 16772 ;; This function uses a non-reentrant model
 16773 ;;
 16774                           
 16775                           	psect	text29
 16776  00418C                     __ptext29:
 16777                           	opt stack 0
 16778  00418C                     _printGUID:
 16779                           	opt stack 21
 16780                           
 16781                           ;incstack = 0
 16782                           ;incstack = 0
 16783                           ;printGUID@nodeid stored from wreg
 16784  00418C  CFE8 F0C1          	movff	wreg,printGUID@nodeid
 16785                           
 16786                           ;main.c: 2811: uint8_t i;
 16787                           ;main.c: 2812: uint8_t value;
 16788                           ;main.c: 2813: char buf[3];
 16789                           ;main.c: 2815: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 16790  004190  0E01               	movlw	high _wrkbuf
 16791  004192  0100               	movlb	0	; () banked
 16792  004194  6F61               	movwf	(?_memset+1)& (0+255),b
 16793  004196  0E79               	movlw	low _wrkbuf
 16794  004198  6F60               	movwf	?_memset& (0+255),b
 16795  00419A  6B63               	clrf	(?_memset+3)& (0+255),b
 16796  00419C  6B62               	clrf	(?_memset+2)& (0+255),b
 16797  00419E  6B65               	clrf	(?_memset+5)& (0+255),b
 16798  0041A0  0E50               	movlw	80
 16799  0041A2  6F64               	movwf	(?_memset+4)& (0+255),b
 16800  0041A4  ECC5  F02E         	call	_memset	;wreg free
 16801                           
 16802                           ; BSR set to: 0
 16803                           ;main.c: 2816: putsUSART((char *) "GUID = ");
 16804  0041A8  0E7E               	movlw	high STR_266
 16805  0041AA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16806  0041AC  0ECF               	movlw	low STR_266
 16807  0041AE  6F61               	movwf	?_putsUSART& (0+255),b
 16808  0041B0  EC41  F02C         	call	_putsUSART	;wreg free
 16809                           
 16810                           ;main.c: 2818: for (i = 0; i < 16; i++) {
 16811  0041B4  0100               	movlb	0	; () banked
 16812  0041B6  6BC6               	clrf	printGUID@i& (0+255),b
 16813  0041B8                     l16236:
 16814                           
 16815                           ; BSR set to: 0
 16816                           ;main.c: 2819: if (readRegister(nodeid,
 16817                           ;main.c: 2820: 0xD0 + i,
 16818                           ;main.c: 2821: rwtimeout,
 16819                           ;main.c: 2822: &value)) {
 16820  0041B8  51C6               	movf	printGUID@i& (0+255),w,b
 16821  0041BA  0FD0               	addlw	208
 16822  0041BC  6FB8               	movwf	?_readRegister& (0+255),b
 16823  0041BE  C034  F0B9         	movff	_rwtimeout,?_readRegister+1
 16824  0041C2  6BBA               	clrf	(?_readRegister+2)& (0+255),b
 16825  0041C4  0EC5               	movlw	low printGUID@value
 16826  0041C6  6FBB               	movwf	(?_readRegister+3)& (0+255),b
 16827  0041C8  51C1               	movf	printGUID@nodeid& (0+255),w,b
 16828  0041CA  EC3F  F025         	call	_readRegister
 16829  0041CE  0900               	iorlw	0
 16830  0041D0  E029               	bz	l16246
 16831                           
 16832                           ;main.c: 2823: itoa(buf, value, 16);
 16833  0041D2  0100               	movlb	0	; () banked
 16834  0041D4  0E00               	movlw	high printGUID@buf
 16835  0041D6  6F71               	movwf	(?_itoa+1)& (0+255),b
 16836  0041D8  0EC2               	movlw	low printGUID@buf
 16837  0041DA  6F70               	movwf	?_itoa& (0+255),b
 16838  0041DC  C0C5  F072         	movff	printGUID@value,?_itoa+2
 16839  0041E0  6B73               	clrf	(?_itoa+3)& (0+255),b
 16840  0041E2  6B75               	clrf	(?_itoa+5)& (0+255),b
 16841  0041E4  0E10               	movlw	16
 16842  0041E6  6F74               	movwf	(?_itoa+4)& (0+255),b
 16843  0041E8  EC2D  F02E         	call	_itoa	;wreg free
 16844                           
 16845                           ; BSR set to: 0
 16846                           ;main.c: 2824: if (1 == strlen(buf)) {
 16847  0041EC  0E00               	movlw	high printGUID@buf
 16848  0041EE  6F61               	movwf	(?_strlen+1)& (0+255),b
 16849  0041F0  0EC2               	movlw	low printGUID@buf
 16850  0041F2  6F60               	movwf	?_strlen& (0+255),b
 16851  0041F4  EC73  F02D         	call	_strlen	;wreg free
 16852  0041F8  0560               	decf	?_strlen& (0+255),w,b
 16853  0041FA  1161               	iorwf	(?_strlen+1)& (0+255),w,b
 16854  0041FC  E10F               	bnz	l16244
 16855                           
 16856                           ; BSR set to: 0
 16857                           ;main.c: 2825: strcat(wrkbuf, "0");
 16858  0041FE  0E01               	movlw	high _wrkbuf
 16859  004200  0100               	movlb	0	; () banked
 16860  004202  6F61               	movwf	(?_strcat+1)& (0+255),b
 16861  004204  0E79               	movlw	low _wrkbuf
 16862  004206  6F60               	movwf	?_strcat& (0+255),b
 16863  004208  0E7F               	movlw	high STR_267
 16864  00420A  6F63               	movwf	(?_strcat+3)& (0+255),b
 16865  00420C  0EF9               	movlw	low STR_267
 16866  00420E  6F62               	movwf	(?_strcat+2)& (0+255),b
 16867  004210  EC15  F02C         	call	_strcat	;wreg free
 16868                           
 16869                           ;main.c: 2826: strcat(wrkbuf, buf);
 16870  004214  D832               	call	PL76	;call to abstracted procedure
 16871  004216  EC15  F02C         	call	_strcat	;wreg free
 16872                           
 16873                           ;main.c: 2827: } else {
 16874  00421A  D00F               	goto	l16248
 16875  00421C                     l16244:
 16876                           
 16877                           ; BSR set to: 0
 16878                           ;main.c: 2828: strcat(wrkbuf, buf);
 16879  00421C  D82E               	call	PL76	;call to abstracted procedure
 16880  00421E  EC15  F02C         	call	_strcat	;wreg free
 16881  004222  D00B               	goto	l16248
 16882  004224                     l16246:
 16883                           
 16884                           ;main.c: 2832: strcat(wrkbuf, "--");
 16885  004224  0E01               	movlw	high _wrkbuf
 16886  004226  0100               	movlb	0	; () banked
 16887  004228  6F61               	movwf	(?_strcat+1)& (0+255),b
 16888  00422A  0E79               	movlw	low _wrkbuf
 16889  00422C  6F60               	movwf	?_strcat& (0+255),b
 16890  00422E  0E7F               	movlw	high STR_268
 16891  004230  6F63               	movwf	(?_strcat+3)& (0+255),b
 16892  004232  0EE5               	movlw	low STR_268
 16893  004234  6F62               	movwf	(?_strcat+2)& (0+255),b
 16894  004236  EC15  F02C         	call	_strcat	;wreg free
 16895  00423A                     l16248:
 16896                           
 16897                           ;main.c: 2833: }
 16898                           ;main.c: 2835: if (i < 15) {
 16899  00423A  0E0F               	movlw	15
 16900  00423C  0100               	movlb	0	; () banked
 16901  00423E  61C6               	cpfslt	printGUID@i& (0+255),b
 16902  004240  D00A               	goto	l16252
 16903                           
 16904                           ; BSR set to: 0
 16905                           ;main.c: 2836: strcat(wrkbuf, ":");
 16906  004242  0E01               	movlw	high _wrkbuf
 16907  004244  6F61               	movwf	(?_strcat+1)& (0+255),b
 16908  004246  0E79               	movlw	low _wrkbuf
 16909  004248  6F60               	movwf	?_strcat& (0+255),b
 16910  00424A  0E7F               	movlw	high STR_269
 16911  00424C  6F63               	movwf	(?_strcat+3)& (0+255),b
 16912  00424E  0EFB               	movlw	low STR_269
 16913  004250  6F62               	movwf	(?_strcat+2)& (0+255),b
 16914  004252  EC15  F02C         	call	_strcat	;wreg free
 16915  004256                     l16252:
 16916  004256  0100               	movlb	0	; () banked
 16917  004258  2BC6               	incf	printGUID@i& (0+255),f,b
 16918                           
 16919                           ; BSR set to: 0
 16920  00425A  0E0F               	movlw	15
 16921  00425C  65C6               	cpfsgt	printGUID@i& (0+255),b
 16922  00425E  D7AC               	goto	l16236
 16923                           
 16924                           ; BSR set to: 0
 16925                           ;main.c: 2837: }
 16926                           ;main.c: 2839: }
 16927                           ;main.c: 2841: putsUSART(wrkbuf);
 16928  004260  0E01               	movlw	high _wrkbuf
 16929  004262  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16930  004264  0E79               	movlw	low _wrkbuf
 16931  004266  6F61               	movwf	?_putsUSART& (0+255),b
 16932  004268  EC41  F02C         	call	_putsUSART	;wreg free
 16933                           
 16934                           ;main.c: 2842: putsUSART((char *) "\r\n");
 16935  00426C  0E74               	movlw	high (STR_220+50)
 16936  00426E  0100               	movlb	0	; () banked
 16937  004270  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16938  004272  0E72               	movlw	low (STR_220+50)
 16939  004274  6F61               	movwf	?_putsUSART& (0+255),b
 16940  004276  EF41  F02C         	goto	_putsUSART	;wreg free
 16941  00427A                     __end_of_printGUID:
 16942                           	opt stack 0
 16943  00427A                     PL76:
 16944                           	opt stack 21
 16945  00427A  0E01               	movlw	high _wrkbuf
 16946  00427C  0100               	movlb	0	; () banked
 16947  00427E  6F61               	movwf	(?_strcat+1)& (0+255),b
 16948  004280  0E79               	movlw	low _wrkbuf
 16949  004282  6F60               	movwf	?_strcat& (0+255),b
 16950  004284  0E00               	movlw	high printGUID@buf
 16951  004286  6F63               	movwf	(?_strcat+3)& (0+255),b
 16952  004288  0EC2               	movlw	low printGUID@buf
 16953  00428A  6F62               	movwf	(?_strcat+2)& (0+255),b
 16954  00428C  0012               	return	
 16955  00428E                     __end_ofPL76:
 16956                           	opt stack 0
 16957                           tblptru	equ	0xFF8
 16958                           tblptrh	equ	0xFF7
 16959                           tblptrl	equ	0xFF6
 16960                           tablat	equ	0xFF5
 16961                           prodh	equ	0xFF4
 16962                           prodl	equ	0xFF3
 16963                           intcon	equ	0xFF2
 16964                           indf0	equ	0xFEF
 16965                           postinc0	equ	0xFEE
 16966                           fsr0h	equ	0xFEA
 16967                           fsr0l	equ	0xFE9
 16968                           wreg	equ	0xFE8
 16969                           indf1	equ	0xFE7
 16970                           postinc1	equ	0xFE6
 16971                           postdec1	equ	0xFE5
 16972                           fsr1h	equ	0xFE2
 16973                           fsr1l	equ	0xFE1
 16974                           indf2	equ	0xFDF
 16975                           postinc2	equ	0xFDE
 16976                           postdec2	equ	0xFDD
 16977                           plusw2	equ	0xFDB
 16978                           fsr2h	equ	0xFDA
 16979                           fsr2l	equ	0xFD9
 16980                           status	equ	0xFD8
 16981                           
 16982 ;; *************** function _printNodeFirmwareVersion *****************
 16983 ;; Defined at:
 16984 ;;		line 2882 in file "main.c"
 16985 ;; Parameters:    Size  Location     Type
 16986 ;;  nodeid          1    wreg     unsigned char 
 16987 ;; Auto vars:     Size  Location     Type
 16988 ;;  nodeid          1   97[BANK0 ] unsigned char 
 16989 ;;  buf             3   98[BANK0 ] unsigned char [3]
 16990 ;;  i               1  102[BANK0 ] unsigned char 
 16991 ;;  value           1  101[BANK0 ] unsigned char 
 16992 ;; Return value:  Size  Location     Type
 16993 ;;		None               void
 16994 ;; Registers used:
 16995 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16996 ;; Tracked objects:
 16997 ;;		On entry : D/2
 16998 ;;		On exit  : 0/0
 16999 ;;		Unchanged: 0/0
 17000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17001 ;;      Params:         0       0       0       0       0       0       0
 17002 ;;      Locals:         0       6       0       0       0       0       0
 17003 ;;      Temps:          0       0       0       0       0       0       0
 17004 ;;      Totals:         0       6       0       0       0       0       0
 17005 ;;Total ram usage:        6 bytes
 17006 ;; Hardware stack levels used:    1
 17007 ;; Hardware stack levels required when called:    8
 17008 ;; This function calls:
 17009 ;;		_putsUSART
 17010 ;;		_memset
 17011 ;;		_itoa
 17012 ;;		_readRegister
 17013 ;;		_strcat
 17014 ;; This function is called by:
 17015 ;;		_doModeVerbose
 17016 ;;		_findNodes
 17017 ;; This function uses a non-reentrant model
 17018 ;;
 17019                           
 17020                           	psect	text30
 17021  0049B0                     __ptext30:
 17022                           	opt stack 0
 17023  0049B0                     _printNodeFirmwareVersion:
 17024                           	opt stack 21
 17025                           
 17026                           ;incstack = 0
 17027                           ;incstack = 0
 17028                           ;printNodeFirmwareVersion@nodeid stored from wreg
 17029  0049B0  CFE8 F0C1          	movff	wreg,printNodeFirmwareVersion@nodeid
 17030                           
 17031                           ;main.c: 2883: uint8_t i;
 17032                           ;main.c: 2884: uint8_t value;
 17033                           ;main.c: 2885: char buf[3];
 17034                           ;main.c: 2887: memset( wrkbuf, 0, sizeof(wrkbuf) );
 17035  0049B4  0E01               	movlw	high _wrkbuf
 17036  0049B6  0100               	movlb	0	; () banked
 17037  0049B8  6F61               	movwf	(?_memset+1)& (0+255),b
 17038  0049BA  0E79               	movlw	low _wrkbuf
 17039  0049BC  6F60               	movwf	?_memset& (0+255),b
 17040  0049BE  6B63               	clrf	(?_memset+3)& (0+255),b
 17041  0049C0  6B62               	clrf	(?_memset+2)& (0+255),b
 17042  0049C2  6B65               	clrf	(?_memset+5)& (0+255),b
 17043  0049C4  0E50               	movlw	80
 17044  0049C6  6F64               	movwf	(?_memset+4)& (0+255),b
 17045  0049C8  ECC5  F02E         	call	_memset	;wreg free
 17046                           
 17047                           ; BSR set to: 0
 17048                           ;main.c: 2888: putsUSART((char *) "Firmware version = ");
 17049  0049CC  0E7D               	movlw	high STR_273
 17050  0049CE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17051  0049D0  0E6E               	movlw	low STR_273
 17052  0049D2  6F61               	movwf	?_putsUSART& (0+255),b
 17053  0049D4  EC41  F02C         	call	_putsUSART	;wreg free
 17054                           
 17055                           ;main.c: 2890: for (i = 0; i < 3; i++) {
 17056  0049D8  0100               	movlb	0	; () banked
 17057  0049DA  6BC6               	clrf	printNodeFirmwareVersion@i& (0+255),b
 17058  0049DC                     l16208:
 17059                           
 17060                           ; BSR set to: 0
 17061                           ;main.c: 2891: if (readRegister(nodeid,
 17062                           ;main.c: 2892: 0x94 + i,
 17063                           ;main.c: 2893: rwtimeout,
 17064                           ;main.c: 2894: &value)) {
 17065  0049DC  51C6               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 17066  0049DE  0F94               	addlw	148
 17067  0049E0  6FB8               	movwf	?_readRegister& (0+255),b
 17068  0049E2  C034  F0B9         	movff	_rwtimeout,?_readRegister+1
 17069  0049E6  6BBA               	clrf	(?_readRegister+2)& (0+255),b
 17070  0049E8  0EC5               	movlw	low printNodeFirmwareVersion@value
 17071  0049EA  6FBB               	movwf	(?_readRegister+3)& (0+255),b
 17072  0049EC  51C1               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 17073  0049EE  EC3F  F025         	call	_readRegister
 17074  0049F2  0900               	iorlw	0
 17075  0049F4  E019               	bz	l16214
 17076                           
 17077                           ;main.c: 2895: itoa(buf, value, 16);
 17078  0049F6  0100               	movlb	0	; () banked
 17079  0049F8  0E00               	movlw	high printNodeFirmwareVersion@buf
 17080  0049FA  6F71               	movwf	(?_itoa+1)& (0+255),b
 17081  0049FC  0EC2               	movlw	low printNodeFirmwareVersion@buf
 17082  0049FE  6F70               	movwf	?_itoa& (0+255),b
 17083  004A00  C0C5  F072         	movff	printNodeFirmwareVersion@value,?_itoa+2
 17084  004A04  6B73               	clrf	(?_itoa+3)& (0+255),b
 17085  004A06  6B75               	clrf	(?_itoa+5)& (0+255),b
 17086  004A08  0E10               	movlw	16
 17087  004A0A  6F74               	movwf	(?_itoa+4)& (0+255),b
 17088  004A0C  EC2D  F02E         	call	_itoa	;wreg free
 17089                           
 17090                           ; BSR set to: 0
 17091                           ;main.c: 2896: strcat(wrkbuf, buf);
 17092  004A10  0E01               	movlw	high _wrkbuf
 17093  004A12  0100               	movlb	0	; () banked
 17094  004A14  6F61               	movwf	(?_strcat+1)& (0+255),b
 17095  004A16  0E79               	movlw	low _wrkbuf
 17096  004A18  6F60               	movwf	?_strcat& (0+255),b
 17097  004A1A  0E00               	movlw	high printNodeFirmwareVersion@buf
 17098  004A1C  6F63               	movwf	(?_strcat+3)& (0+255),b
 17099  004A1E  0EC2               	movlw	low printNodeFirmwareVersion@buf
 17100  004A20  6F62               	movwf	(?_strcat+2)& (0+255),b
 17101  004A22  EC15  F02C         	call	_strcat	;wreg free
 17102                           
 17103                           ;main.c: 2897: }
 17104  004A26  D00B               	goto	l16216
 17105  004A28                     l16214:
 17106                           
 17107                           ;main.c: 2898: else {
 17108                           ;main.c: 2899: strcat(wrkbuf, "?");
 17109  004A28  0E01               	movlw	high _wrkbuf
 17110  004A2A  0100               	movlb	0	; () banked
 17111  004A2C  6F61               	movwf	(?_strcat+1)& (0+255),b
 17112  004A2E  0E79               	movlw	low _wrkbuf
 17113  004A30  6F60               	movwf	?_strcat& (0+255),b
 17114  004A32  0E7F               	movlw	high STR_152
 17115  004A34  6F63               	movwf	(?_strcat+3)& (0+255),b
 17116  004A36  0EFD               	movlw	low STR_152
 17117  004A38  6F62               	movwf	(?_strcat+2)& (0+255),b
 17118  004A3A  EC15  F02C         	call	_strcat	;wreg free
 17119  004A3E                     l16216:
 17120                           
 17121                           ;main.c: 2900: }
 17122                           ;main.c: 2902: if (i < 2) {
 17123  004A3E  0E02               	movlw	2
 17124  004A40  0100               	movlb	0	; () banked
 17125  004A42  61C6               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 17126  004A44  D00A               	goto	l16220
 17127                           
 17128                           ; BSR set to: 0
 17129                           ;main.c: 2903: strcat(wrkbuf, ".");
 17130  004A46  0E01               	movlw	high _wrkbuf
 17131  004A48  6F61               	movwf	(?_strcat+1)& (0+255),b
 17132  004A4A  0E79               	movlw	low _wrkbuf
 17133  004A4C  6F60               	movwf	?_strcat& (0+255),b
 17134  004A4E  0E7F               	movlw	high STR_275
 17135  004A50  6F63               	movwf	(?_strcat+3)& (0+255),b
 17136  004A52  0EF7               	movlw	low STR_275
 17137  004A54  6F62               	movwf	(?_strcat+2)& (0+255),b
 17138  004A56  EC15  F02C         	call	_strcat	;wreg free
 17139  004A5A                     l16220:
 17140  004A5A  0100               	movlb	0	; () banked
 17141  004A5C  2BC6               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 17142                           
 17143                           ; BSR set to: 0
 17144  004A5E  0E02               	movlw	2
 17145  004A60  65C6               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 17146  004A62  D7BC               	goto	l16208
 17147                           
 17148                           ; BSR set to: 0
 17149                           ;main.c: 2904: }
 17150                           ;main.c: 2906: }
 17151                           ;main.c: 2908: putsUSART(wrkbuf);
 17152  004A64  0E01               	movlw	high _wrkbuf
 17153  004A66  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17154  004A68  0E79               	movlw	low _wrkbuf
 17155  004A6A  6F61               	movwf	?_putsUSART& (0+255),b
 17156  004A6C  EC41  F02C         	call	_putsUSART	;wreg free
 17157                           
 17158                           ;main.c: 2909: putsUSART((char *) "\r\n");
 17159  004A70  0E74               	movlw	high (STR_220+50)
 17160  004A72  0100               	movlb	0	; () banked
 17161  004A74  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17162  004A76  0E72               	movlw	low (STR_220+50)
 17163  004A78  6F61               	movwf	?_putsUSART& (0+255),b
 17164  004A7A  EF41  F02C         	goto	_putsUSART	;wreg free
 17165  004A7E                     __end_of_printNodeFirmwareVersion:
 17166                           	opt stack 0
 17167                           tblptru	equ	0xFF8
 17168                           tblptrh	equ	0xFF7
 17169                           tblptrl	equ	0xFF6
 17170                           tablat	equ	0xFF5
 17171                           prodh	equ	0xFF4
 17172                           prodl	equ	0xFF3
 17173                           intcon	equ	0xFF2
 17174                           indf0	equ	0xFEF
 17175                           postinc0	equ	0xFEE
 17176                           fsr0h	equ	0xFEA
 17177                           fsr0l	equ	0xFE9
 17178                           wreg	equ	0xFE8
 17179                           indf1	equ	0xFE7
 17180                           postinc1	equ	0xFE6
 17181                           postdec1	equ	0xFE5
 17182                           fsr1h	equ	0xFE2
 17183                           fsr1l	equ	0xFE1
 17184                           indf2	equ	0xFDF
 17185                           postinc2	equ	0xFDE
 17186                           postdec2	equ	0xFDD
 17187                           plusw2	equ	0xFDB
 17188                           fsr2h	equ	0xFDA
 17189                           fsr2l	equ	0xFD9
 17190                           status	equ	0xFD8
 17191                           
 17192 ;; *************** function _strcat *****************
 17193 ;; Defined at:
 17194 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 17195 ;; Parameters:    Size  Location     Type
 17196 ;;  to              2    0[BANK0 ] PTR unsigned char 
 17197 ;;		 -> wrkbuf(80), 
 17198 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 17199 ;;		 -> STR_275(2), STR_274(2), printNodeFirmwareVersion@buf(3), STR_269(2), 
 17200 ;;		 -> STR_268(3), STR_267(2), printGUID@buf(3), 
 17201 ;; Auto vars:     Size  Location     Type
 17202 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 17203 ;;		 -> wrkbuf(80), 
 17204 ;; Return value:  Size  Location     Type
 17205 ;;                  2    0[BANK0 ] PTR unsigned char 
 17206 ;; Registers used:
 17207 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17208 ;; Tracked objects:
 17209 ;;		On entry : F/0
 17210 ;;		On exit  : 0/0
 17211 ;;		Unchanged: 0/0
 17212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17213 ;;      Params:         0       4       0       0       0       0       0
 17214 ;;      Locals:         0       2       0       0       0       0       0
 17215 ;;      Temps:          0       0       0       0       0       0       0
 17216 ;;      Totals:         0       6       0       0       0       0       0
 17217 ;;Total ram usage:        6 bytes
 17218 ;; Hardware stack levels used:    1
 17219 ;; Hardware stack levels required when called:    3
 17220 ;; This function calls:
 17221 ;;		Nothing
 17222 ;; This function is called by:
 17223 ;;		_printGUID
 17224 ;;		_printNodeFirmwareVersion
 17225 ;; This function uses a non-reentrant model
 17226 ;;
 17227                           
 17228                           	psect	text31
 17229  00582A                     __ptext31:
 17230                           	opt stack 0
 17231  00582A                     _strcat:
 17232                           	opt stack 25
 17233                           
 17234                           ; BSR set to: 0
 17235                           
 17236                           ;incstack = 0
 17237                           ;incstack = 0
 17238  00582A  C060  F064         	movff	strcat@to,strcat@cp
 17239  00582E  C061  F065         	movff	strcat@to+1,strcat@cp+1
 17240  005832  D002               	goto	l13480
 17241  005834                     l13478:
 17242                           
 17243                           ; BSR set to: 0
 17244  005834  4B64               	infsnz	strcat@cp& (0+255),f,b
 17245  005836  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 17246  005838                     l13480:
 17247                           
 17248                           ; BSR set to: 0
 17249  005838  C064  FFD9         	movff	strcat@cp,fsr2l
 17250  00583C  C065  FFDA         	movff	strcat@cp+1,fsr2h
 17251  005840  50DF               	movf	indf2,w,c
 17252  005842  E006               	bz	l13484
 17253  005844  D7F7               	goto	l13478
 17254  005846                     l13482:
 17255  005846  0100               	movlb	0	; () banked
 17256  005848  4B64               	infsnz	strcat@cp& (0+255),f,b
 17257  00584A  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 17258  00584C  4B62               	infsnz	strcat@from& (0+255),f,b
 17259  00584E  2B63               	incf	(strcat@from+1)& (0+255),f,b
 17260  005850                     l13484:
 17261                           
 17262                           ; BSR set to: 0
 17263  005850  C062  FFF6         	movff	strcat@from,tblptrl
 17264  005854  C063  FFF7         	movff	strcat@from+1,tblptrh
 17265  005858  6AF8               	clrf	tblptru,c
 17266  00585A  C064  FFD9         	movff	strcat@cp,fsr2l
 17267  00585E  C065  FFDA         	movff	strcat@cp+1,fsr2h
 17268  005862  0E05               	movlw	(high __ramtop+-1)
 17269  005864  64F7               	cpfsgt	tblptrh,c
 17270  005866  D003               	bra	u17587
 17271  005868  0008               	tblrd		*
 17272  00586A  50F5               	movf	tablat,w,c
 17273  00586C  D005               	bra	u17580
 17274  00586E                     u17587:
 17275  00586E  CFF6 FFE9          	movff	tblptrl,fsr0l
 17276  005872  CFF7 FFEA          	movff	tblptrh,fsr0h
 17277  005876  50EF               	movf	indf0,w,c
 17278  005878                     u17580:
 17279  005878  6EDF               	movwf	indf2,c
 17280  00587A  50DF               	movf	indf2,w,c
 17281  00587C  B4D8               	btfsc	status,2,c
 17282  00587E  0012               	return	
 17283  005880  D7E2               	goto	l13482
 17284  005882                     __end_of_strcat:
 17285                           	opt stack 0
 17286                           tblptru	equ	0xFF8
 17287                           tblptrh	equ	0xFF7
 17288                           tblptrl	equ	0xFF6
 17289                           tablat	equ	0xFF5
 17290                           prodh	equ	0xFF4
 17291                           prodl	equ	0xFF3
 17292                           intcon	equ	0xFF2
 17293                           indf0	equ	0xFEF
 17294                           postinc0	equ	0xFEE
 17295                           fsr0h	equ	0xFEA
 17296                           fsr0l	equ	0xFE9
 17297                           wreg	equ	0xFE8
 17298                           indf1	equ	0xFE7
 17299                           postinc1	equ	0xFE6
 17300                           postdec1	equ	0xFE5
 17301                           fsr1h	equ	0xFE2
 17302                           fsr1l	equ	0xFE1
 17303                           indf2	equ	0xFDF
 17304                           postinc2	equ	0xFDE
 17305                           postdec2	equ	0xFDD
 17306                           plusw2	equ	0xFDB
 17307                           fsr2h	equ	0xFDA
 17308                           fsr2l	equ	0xFD9
 17309                           status	equ	0xFD8
 17310                           
 17311 ;; *************** function _readRegister *****************
 17312 ;; Defined at:
 17313 ;;		line 2385 in file "main.c"
 17314 ;; Parameters:    Size  Location     Type
 17315 ;;  nodeid          1    wreg     unsigned char 
 17316 ;;  reg             1   88[BANK0 ] unsigned char 
 17317 ;;  timeout         2   89[BANK0 ] unsigned short 
 17318 ;;  value           1   91[BANK0 ] PTR unsigned char 
 17319 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 17320 ;; Auto vars:     Size  Location     Type
 17321 ;;  nodeid          1   96[BANK0 ] unsigned char 
 17322 ;; Return value:  Size  Location     Type
 17323 ;;                  1    wreg      enum E15660
 17324 ;; Registers used:
 17325 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17326 ;; Tracked objects:
 17327 ;;		On entry : F/0
 17328 ;;		On exit  : E/0
 17329 ;;		Unchanged: 0/0
 17330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17331 ;;      Params:         0       4       0       0       0       0       0
 17332 ;;      Locals:         0       1       0       0       0       0       0
 17333 ;;      Temps:          0       4       0       0       0       0       0
 17334 ;;      Totals:         0       9       0       0       0       0       0
 17335 ;;Total ram usage:        9 bytes
 17336 ;; Hardware stack levels used:    1
 17337 ;; Hardware stack levels required when called:    7
 17338 ;; This function calls:
 17339 ;;		_sendVSCPFrame
 17340 ;;		_getVSCPFrame
 17341 ;; This function is called by:
 17342 ;;		_findNodes
 17343 ;;		_printGUID
 17344 ;;		_printMDF
 17345 ;;		_printNodeFirmwareVersion
 17346 ;; This function uses a non-reentrant model
 17347 ;;
 17348                           
 17349                           	psect	text32
 17350  004A7E                     __ptext32:
 17351                           	opt stack 0
 17352  004A7E                     _readRegister:
 17353                           	opt stack 21
 17354                           
 17355                           ;incstack = 0
 17356                           ;incstack = 0
 17357                           ;readRegister@nodeid stored from wreg
 17358  004A7E  CFE8 F0C0          	movff	wreg,readRegister@nodeid
 17359                           
 17360                           ; BSR set to: 0
 17361                           ;main.c: 2386: vscpData[ 0 ] = nodeid;
 17362  004A82  C0C0  F1E1         	movff	readRegister@nodeid,_vscpData
 17363                           
 17364                           ; BSR set to: 0
 17365                           ;main.c: 2387: vscpData[ 1 ] = reg;
 17366  004A86  C0B8  F1E2         	movff	readRegister@reg,_vscpData+1
 17367                           
 17368                           ; BSR set to: 0
 17369                           ;main.c: 2389: if (sendVSCPFrame(0,
 17370                           ;main.c: 2390: 9,
 17371                           ;main.c: 2391: 0,
 17372                           ;main.c: 2392: 0,
 17373                           ;main.c: 2393: 2,
 17374                           ;main.c: 2394: vscpData)) {
 17375  004A8A  6B99               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 17376  004A8C  6B98               	clrf	?_sendVSCPFrame& (0+255),b
 17377  004A8E  0E09               	movlw	9
 17378  004A90  6F9A               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 17379  004A92  6B9B               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 17380  004A94  6B9C               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 17381  004A96  0E02               	movlw	2
 17382  004A98  6F9D               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 17383  004A9A  0E01               	movlw	high _vscpData
 17384  004A9C  0100               	movlb	0	; () banked
 17385  004A9E  6F9F               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 17386  004AA0  0EE1               	movlw	low _vscpData
 17387  004AA2  6F9E               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 17388  004AA4  EC5B  F026         	call	_sendVSCPFrame	;wreg free
 17389  004AA8  0900               	iorlw	0
 17390  004AAA  E049               	bz	l16788
 17391                           
 17392                           ;main.c: 2396: timekeeper = 0;
 17393  004AAC  0101               	movlb	1	; () banked
 17394  004AAE  6B18               	clrf	_timekeeper& (0+255),b	;volatile
 17395  004AB0  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 17396  004AB2  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 17397  004AB4  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 17398                           
 17399                           ;main.c: 2397: while (timekeeper < timeout) {
 17400  004AB6  D02C               	goto	l16786
 17401  004AB8                     l1136:
 17402                           
 17403                           ; BSR set to: 1
 17404  004AB8  0004               	clrwdt		;# 
 17405                           
 17406                           ;main.c: 2401: if (getVSCPFrame(&vscpClass,
 17407                           ;main.c: 2402: &vscpType,
 17408                           ;main.c: 2403: &vscpNodeId,
 17409                           ;main.c: 2404: &vscpPriority,
 17410                           ;main.c: 2405: &vscpSize,
 17411                           ;main.c: 2406: vscpData)) {
 17412  004ABA  0E3E               	movlw	low _vscpType
 17413  004ABC  0100               	movlb	0	; () banked
 17414  004ABE  6F73               	movwf	?_getVSCPFrame& (0+255),b
 17415  004AC0  0E3B               	movlw	low _vscpNodeId
 17416  004AC2  6F74               	movwf	(?_getVSCPFrame+1)& (0+255),b
 17417  004AC4  0E3C               	movlw	low _vscpPriority
 17418  004AC6  6F75               	movwf	(?_getVSCPFrame+2)& (0+255),b
 17419  004AC8  0E3D               	movlw	low _vscpSize
 17420  004ACA  6F76               	movwf	(?_getVSCPFrame+3)& (0+255),b
 17421  004ACC  0E01               	movlw	high _vscpData
 17422  004ACE  6F78               	movwf	(?_getVSCPFrame+5)& (0+255),b
 17423  004AD0  0EE1               	movlw	low _vscpData
 17424  004AD2  6F77               	movwf	(?_getVSCPFrame+4)& (0+255),b
 17425  004AD4  0E37               	movlw	_vscpClass& (0+255)
 17426  004AD6  EC77  F029         	call	_getVSCPFrame
 17427  004ADA  0900               	iorlw	0
 17428  004ADC  E019               	bz	l16786
 17429                           
 17430                           ; BSR set to: 0
 17431                           ;main.c: 2407: if ((nodeid == vscpNodeId) &&
 17432                           ;main.c: 2408: (0 == vscpClass) &&
 17433                           ;main.c: 2409: (10 == vscpType) &&
 17434                           ;main.c: 2410: (2 == vscpSize) &&
 17435                           ;main.c: 2411: (reg == vscpData[ 0 ])) {
 17436  004ADE  503B               	movf	_vscpNodeId,w,c
 17437  004AE0  63C0               	cpfseq	readRegister@nodeid& (0+255),b
 17438  004AE2  D016               	goto	l16786
 17439                           
 17440                           ; BSR set to: 0
 17441  004AE4  5038               	movf	_vscpClass+1,w,c
 17442  004AE6  1037               	iorwf	_vscpClass,w,c
 17443  004AE8  E113               	bnz	l16786
 17444                           
 17445                           ; BSR set to: 0
 17446  004AEA  503E               	movf	_vscpType,w,c
 17447  004AEC  0A0A               	xorlw	10
 17448  004AEE  E110               	bnz	l16786
 17449                           
 17450                           ; BSR set to: 0
 17451  004AF0  503D               	movf	_vscpSize,w,c
 17452  004AF2  0A02               	xorlw	2
 17453  004AF4  E10D               	bnz	l16786
 17454                           
 17455                           ; BSR set to: 0
 17456  004AF6  0101               	movlb	1	; () banked
 17457  004AF8  51E1               	movf	_vscpData& (0+255),w,b
 17458  004AFA  0100               	movlb	0	; () banked
 17459  004AFC  63B8               	cpfseq	readRegister@reg& (0+255),b
 17460  004AFE  D008               	goto	l16786
 17461                           
 17462                           ; BSR set to: 0
 17463                           ;main.c: 2412: *value = vscpData[ 1 ];
 17464  004B00  51BB               	movf	readRegister@value& (0+255),w,b
 17465  004B02  6ED9               	movwf	fsr2l,c
 17466  004B04  6ADA               	clrf	fsr2h,c
 17467  004B06  0101               	movlb	1	; () banked
 17468  004B08  C1E2  FFDF         	movff	_vscpData+1,indf2
 17469                           
 17470                           ; BSR set to: 1
 17471                           ;main.c: 2413: return 1;
 17472  004B0C  0E01               	movlw	1
 17473  004B0E  D018               	goto	l1139
 17474  004B10                     l16786:
 17475  004B10  0100               	movlb	0	; () banked
 17476  004B12  51B9               	movf	readRegister@timeout& (0+255),w,b
 17477  004B14  6FBC               	movwf	??_readRegister& (0+255),b
 17478  004B16  51BA               	movf	(readRegister@timeout+1)& (0+255),w,b
 17479  004B18  6FBD               	movwf	(??_readRegister+1)& (0+255),b
 17480  004B1A  6BBE               	clrf	(??_readRegister+2)& (0+255),b
 17481  004B1C  6BBF               	clrf	(??_readRegister+3)& (0+255),b
 17482  004B1E  51BC               	movf	??_readRegister& (0+255),w,b
 17483  004B20  0101               	movlb	1	; () banked
 17484  004B22  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
 17485  004B24  0100               	movlb	0	; () banked
 17486  004B26  51BD               	movf	(??_readRegister+1)& (0+255),w,b
 17487  004B28  0101               	movlb	1	; () banked
 17488  004B2A  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 17489  004B2C  0100               	movlb	0	; () banked
 17490  004B2E  51BE               	movf	(??_readRegister+2)& (0+255),w,b
 17491  004B30  0101               	movlb	1	; () banked
 17492  004B32  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 17493  004B34  0100               	movlb	0	; () banked
 17494  004B36  51BF               	movf	(??_readRegister+3)& (0+255),w,b
 17495  004B38  0101               	movlb	1	; () banked
 17496  004B3A  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 17497  004B3C  E3BD               	bnc	l1136
 17498  004B3E                     l16788:
 17499                           
 17500                           ;main.c: 2414: }
 17501                           ;main.c: 2415: }
 17502                           ;main.c: 2416: }
 17503                           ;main.c: 2417: }
 17504                           ;main.c: 2419: return 0;
 17505  004B3E  0E00               	movlw	0
 17506  004B40                     l1139:
 17507  004B40  0012               	return	
 17508  004B42                     __end_of_readRegister:
 17509                           	opt stack 0
 17510                           tblptru	equ	0xFF8
 17511                           tblptrh	equ	0xFF7
 17512                           tblptrl	equ	0xFF6
 17513                           tablat	equ	0xFF5
 17514                           prodh	equ	0xFF4
 17515                           prodl	equ	0xFF3
 17516                           intcon	equ	0xFF2
 17517                           indf0	equ	0xFEF
 17518                           postinc0	equ	0xFEE
 17519                           fsr0h	equ	0xFEA
 17520                           fsr0l	equ	0xFE9
 17521                           wreg	equ	0xFE8
 17522                           indf1	equ	0xFE7
 17523                           postinc1	equ	0xFE6
 17524                           postdec1	equ	0xFE5
 17525                           fsr1h	equ	0xFE2
 17526                           fsr1l	equ	0xFE1
 17527                           indf2	equ	0xFDF
 17528                           postinc2	equ	0xFDE
 17529                           postdec2	equ	0xFDD
 17530                           plusw2	equ	0xFDB
 17531                           fsr2h	equ	0xFDA
 17532                           fsr2l	equ	0xFD9
 17533                           status	equ	0xFD8
 17534                           
 17535 ;; *************** function _sendVSCPFrame *****************
 17536 ;; Defined at:
 17537 ;;		line 3106 in file "main.c"
 17538 ;; Parameters:    Size  Location     Type
 17539 ;;  vscpclass       2   56[BANK0 ] unsigned short 
 17540 ;;  vscptype        1   58[BANK0 ] unsigned char 
 17541 ;;  nodeid          1   59[BANK0 ] unsigned char 
 17542 ;;  priority        1   60[BANK0 ] unsigned char 
 17543 ;;  size            1   61[BANK0 ] unsigned char 
 17544 ;;  pData           2   62[BANK0 ] PTR unsigned char 
 17545 ;;		 -> vscpData(8), 
 17546 ;; Auto vars:     Size  Location     Type
 17547 ;;  id              4   84[BANK0 ] unsigned long 
 17548 ;; Return value:  Size  Location     Type
 17549 ;;                  1    wreg      unsigned char 
 17550 ;; Registers used:
 17551 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17552 ;; Tracked objects:
 17553 ;;		On entry : F/0
 17554 ;;		On exit  : E/0
 17555 ;;		Unchanged: 0/0
 17556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17557 ;;      Params:         0       8       0       0       0       0       0
 17558 ;;      Locals:         0       4       0       0       0       0       0
 17559 ;;      Temps:          0      20       0       0       0       0       0
 17560 ;;      Totals:         0      32       0       0       0       0       0
 17561 ;;Total ram usage:       32 bytes
 17562 ;; Hardware stack levels used:    1
 17563 ;; Hardware stack levels required when called:    6
 17564 ;; This function calls:
 17565 ;;		_sendCANFrame
 17566 ;; This function is called by:
 17567 ;;		_doModeVerbose
 17568 ;;		_readRegister
 17569 ;;		_readRegisterExtended
 17570 ;;		_writeRegisterExtended
 17571 ;; This function uses a non-reentrant model
 17572 ;;
 17573                           
 17574                           	psect	text33
 17575  004CB6                     __ptext33:
 17576                           	opt stack 0
 17577  004CB6                     _sendVSCPFrame:
 17578                           	opt stack 21
 17579                           
 17580                           ; BSR set to: 0
 17581                           ;main.c: 3107: uint32_t id = ((uint32_t) priority << 26) |
 17582                           ;main.c: 3108: ((uint32_t) vscpclass << 16) |
 17583                           ;main.c: 3109: ((uint32_t) vscptype << 8) |
 17584                           ;main.c: 3110: nodeid;
 17585                           
 17586                           ;incstack = 0
 17587                           ;incstack = 0
 17588  004CB6  C09A  F0A0         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 17589  004CBA  6BA1               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 17590  004CBC  6BA2               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 17591  004CBE  6BA3               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 17592  004CC0  C0A2  F0A3         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 17593  004CC4  C0A1  F0A2         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 17594  004CC8  C0A0  F0A1         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 17595  004CCC  6BA0               	clrf	??_sendVSCPFrame& (0+255),b
 17596  004CCE  5198               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 17597  004CD0  6FA4               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 17598  004CD2  5199               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 17599  004CD4  6FA5               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 17600  004CD6  6BA6               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 17601  004CD8  6BA7               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 17602  004CDA  C0A5  F0A7         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 17603  004CDE  C0A4  F0A6         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 17604  004CE2  6BA5               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 17605  004CE4  6BA4               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 17606  004CE6  C09C  F0A8         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 17607  004CEA  6BA9               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 17608  004CEC  6BAA               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 17609  004CEE  6BAB               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 17610  004CF0  0E1A               	movlw	26
 17611  004CF2                     u20845:
 17612  004CF2  90D8               	bcf	status,0,c
 17613  004CF4  37A8               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 17614  004CF6  37A9               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 17615  004CF8  37AA               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 17616  004CFA  37AB               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 17617  004CFC  2EE8               	decfsz	wreg,f,c
 17618  004CFE  D7F9               	goto	u20845
 17619  004D00  51A4               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 17620  004D02  11A8               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 17621  004D04  6FAC               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 17622  004D06  51A5               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 17623  004D08  11A9               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 17624  004D0A  6FAD               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 17625  004D0C  51A6               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 17626  004D0E  11AA               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 17627  004D10  6FAE               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 17628  004D12  51A7               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 17629  004D14  11AB               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 17630  004D16  6FAF               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 17631  004D18  51A0               	movf	??_sendVSCPFrame& (0+255),w,b
 17632  004D1A  11AC               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 17633  004D1C  6FB0               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 17634  004D1E  51A1               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 17635  004D20  11AD               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 17636  004D22  6FB1               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 17637  004D24  51A2               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 17638  004D26  11AE               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 17639  004D28  6FB2               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 17640  004D2A  51A3               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 17641  004D2C  11AF               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 17642  004D2E  6FB3               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 17643  004D30  519B               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 17644  004D32  11B0               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 17645  004D34  6FB4               	movwf	sendVSCPFrame@id& (0+255),b
 17646  004D36  51B1               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 17647  004D38  6FB5               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 17648  004D3A  51B2               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 17649  004D3C  6FB6               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 17650  004D3E  51B3               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 17651  004D40  6FB7               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 17652                           
 17653                           ; BSR set to: 0
 17654                           ;main.c: 3112: if (!sendCANFrame(id, size, pData)) {
 17655  004D42  C0B4  F091         	movff	sendVSCPFrame@id,?_sendCANFrame
 17656  004D46  C0B5  F092         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 17657  004D4A  C0B6  F093         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 17658  004D4E  C0B7  F094         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 17659  004D52  C09D  F095         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 17660  004D56  C09E  F096         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 17661  004D5A  C09F  F097         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 17662  004D5E  EC10  F02E         	call	_sendCANFrame	;wreg free
 17663  004D62  0900               	iorlw	0
 17664                           
 17665                           ;main.c: 3114: return 0;
 17666  004D64  0E00               	movlw	0
 17667  004D66  A4D8               	btfss	status,2,c
 17668                           
 17669                           ;main.c: 3115: }
 17670                           ;main.c: 3117: return 1;
 17671  004D68  0E01               	movlw	1
 17672  004D6A  0012               	return	
 17673  004D6C                     __end_of_sendVSCPFrame:
 17674                           	opt stack 0
 17675                           tblptru	equ	0xFF8
 17676                           tblptrh	equ	0xFF7
 17677                           tblptrl	equ	0xFF6
 17678                           tablat	equ	0xFF5
 17679                           prodh	equ	0xFF4
 17680                           prodl	equ	0xFF3
 17681                           intcon	equ	0xFF2
 17682                           indf0	equ	0xFEF
 17683                           postinc0	equ	0xFEE
 17684                           fsr0h	equ	0xFEA
 17685                           fsr0l	equ	0xFE9
 17686                           wreg	equ	0xFE8
 17687                           indf1	equ	0xFE7
 17688                           postinc1	equ	0xFE6
 17689                           postdec1	equ	0xFE5
 17690                           fsr1h	equ	0xFE2
 17691                           fsr1l	equ	0xFE1
 17692                           indf2	equ	0xFDF
 17693                           postinc2	equ	0xFDE
 17694                           postdec2	equ	0xFDD
 17695                           plusw2	equ	0xFDB
 17696                           fsr2h	equ	0xFDA
 17697                           fsr2l	equ	0xFD9
 17698                           status	equ	0xFD8
 17699                           
 17700 ;; *************** function _sendCANFrame *****************
 17701 ;; Defined at:
 17702 ;;		line 3152 in file "main.c"
 17703 ;; Parameters:    Size  Location     Type
 17704 ;;  id              4   49[BANK0 ] unsigned long 
 17705 ;;  dlc             1   53[BANK0 ] unsigned char 
 17706 ;;  pdata           2   54[BANK0 ] PTR unsigned char 
 17707 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17708 ;; Auto vars:     Size  Location     Type
 17709 ;;		None
 17710 ;; Return value:  Size  Location     Type
 17711 ;;                  1    wreg      unsigned char 
 17712 ;; Registers used:
 17713 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17714 ;; Tracked objects:
 17715 ;;		On entry : F/0
 17716 ;;		On exit  : E/0
 17717 ;;		Unchanged: 0/0
 17718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17719 ;;      Params:         0       7       0       0       0       0       0
 17720 ;;      Locals:         0       0       0       0       0       0       0
 17721 ;;      Temps:          0       0       0       0       0       0       0
 17722 ;;      Totals:         0       7       0       0       0       0       0
 17723 ;;Total ram usage:        7 bytes
 17724 ;; Hardware stack levels used:    1
 17725 ;; Hardware stack levels required when called:    5
 17726 ;; This function calls:
 17727 ;;		_ECANSendMessage
 17728 ;; This function is called by:
 17729 ;;		_doModeSLCAN
 17730 ;;		_receiveVSCPModeCanalMsg
 17731 ;;		_sendVSCPFrame
 17732 ;; This function uses a non-reentrant model
 17733 ;;
 17734                           
 17735                           	psect	text34
 17736  005C20                     __ptext34:
 17737                           	opt stack 0
 17738  005C20                     _sendCANFrame:
 17739                           	opt stack 24
 17740                           
 17741                           ; BSR set to: 0
 17742                           ;main.c: 3153: if (!ECANSendMessage(id, pdata, dlc, ECAN_TX_XTD_FRAME)) {
 17743                           
 17744                           ;incstack = 0
 17745                           ;incstack = 0
 17746  005C20  C091  F06C         	movff	sendCANFrame@id,?_ECANSendMessage
 17747  005C24  C092  F06D         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 17748  005C28  C093  F06E         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 17749  005C2C  C094  F06F         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 17750  005C30  C096  F070         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 17751  005C34  C097  F071         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 17752  005C38  C095  F072         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 17753  005C3C  0E20               	movlw	32
 17754  005C3E  6F73               	movwf	(?_ECANSendMessage+7)& (0+255),b
 17755  005C40  EC2D  F01D         	call	_ECANSendMessage	;wreg free
 17756  005C44  0900               	iorlw	0
 17757  005C46  E107               	bnz	l16694
 17758                           
 17759                           ; BSR set to: 0
 17760                           ;main.c: 3155: can_transmitOverruns++;
 17761  005C48  0101               	movlb	1	; () banked
 17762  005C4A  2B04               	incf	_can_transmitOverruns& (0+255),f,b
 17763  005C4C  0E00               	movlw	0
 17764  005C4E  2305               	addwfc	(_can_transmitOverruns+1)& (0+255),f,b
 17765  005C50  2306               	addwfc	(_can_transmitOverruns+2)& (0+255),f,b
 17766  005C52  2307               	addwfc	(_can_transmitOverruns+3)& (0+255),f,b
 17767                           
 17768                           ; BSR set to: 1
 17769                           ;main.c: 3156: return 0;
 17770  005C54  D001               	goto	l1335
 17771  005C56                     l16694:
 17772                           
 17773                           ; BSR set to: 0
 17774                           ;main.c: 3157: }
 17775                           ;main.c: 3159: return 1;
 17776  005C56  0E01               	movlw	1
 17777  005C58                     l1335:
 17778  005C58  0012               	return	
 17779  005C5A                     __end_of_sendCANFrame:
 17780                           	opt stack 0
 17781                           tblptru	equ	0xFF8
 17782                           tblptrh	equ	0xFF7
 17783                           tblptrl	equ	0xFF6
 17784                           tablat	equ	0xFF5
 17785                           prodh	equ	0xFF4
 17786                           prodl	equ	0xFF3
 17787                           intcon	equ	0xFF2
 17788                           indf0	equ	0xFEF
 17789                           postinc0	equ	0xFEE
 17790                           fsr0h	equ	0xFEA
 17791                           fsr0l	equ	0xFE9
 17792                           wreg	equ	0xFE8
 17793                           indf1	equ	0xFE7
 17794                           postinc1	equ	0xFE6
 17795                           postdec1	equ	0xFE5
 17796                           fsr1h	equ	0xFE2
 17797                           fsr1l	equ	0xFE1
 17798                           indf2	equ	0xFDF
 17799                           postinc2	equ	0xFDE
 17800                           postdec2	equ	0xFDD
 17801                           plusw2	equ	0xFDB
 17802                           fsr2h	equ	0xFDA
 17803                           fsr2l	equ	0xFD9
 17804                           status	equ	0xFD8
 17805                           
 17806 ;; *************** function _ECANSendMessage *****************
 17807 ;; Defined at:
 17808 ;;		line 617 in file "ECAN.c"
 17809 ;; Parameters:    Size  Location     Type
 17810 ;;  id              4   12[BANK0 ] unsigned long 
 17811 ;;  data            2   16[BANK0 ] PTR unsigned char 
 17812 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17813 ;;  dataLen         1   18[BANK0 ] unsigned char 
 17814 ;;  msgFlags        1   19[BANK0 ] enum E16306
 17815 ;; Auto vars:     Size  Location     Type
 17816 ;;  pb             18   21[BANK0 ] PTR unsigned char [9]
 17817 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17818 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17819 ;;		 -> B0CON(1), 
 17820 ;;  ptr             2   47[BANK0 ] PTR unsigned char 
 17821 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17822 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17823 ;;		 -> B0CON(1), 
 17824 ;;  tempPtr         2   43[BANK0 ] PTR unsigned char 
 17825 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17826 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17827 ;;		 -> B0CON(1), 
 17828 ;;  i               1   46[BANK0 ] unsigned char 
 17829 ;;  temp            1   45[BANK0 ] unsigned char 
 17830 ;;  tempBSEL0       1   42[BANK0 ] struct .
 17831 ;;  j               1   41[BANK0 ] unsigned char 
 17832 ;;  buffers         1   40[BANK0 ] unsigned char 
 17833 ;;  mode            1   39[BANK0 ] unsigned char 
 17834 ;; Return value:  Size  Location     Type
 17835 ;;                  1    wreg      enum E15660
 17836 ;; Registers used:
 17837 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17838 ;; Tracked objects:
 17839 ;;		On entry : F/0
 17840 ;;		On exit  : F/0
 17841 ;;		Unchanged: 0/0
 17842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17843 ;;      Params:         0       8       0       0       0       0       0
 17844 ;;      Locals:         0      28       0       0       0       0       0
 17845 ;;      Temps:          0       1       0       0       0       0       0
 17846 ;;      Totals:         0      37       0       0       0       0       0
 17847 ;;Total ram usage:       37 bytes
 17848 ;; Hardware stack levels used:    1
 17849 ;; Hardware stack levels required when called:    4
 17850 ;; This function calls:
 17851 ;;		__CANIDToRegs
 17852 ;; This function is called by:
 17853 ;;		_sendCANFrame
 17854 ;; This function uses a non-reentrant model
 17855 ;;
 17856                           
 17857                           	psect	text35
 17858  003A5A                     __ptext35:
 17859                           	opt stack 0
 17860  003A5A                     _ECANSendMessage:
 17861                           	opt stack 24
 17862                           
 17863                           ; BSR set to: 0
 17864                           ;ECAN.c: 619: BYTE mode;
 17865                           ;ECAN.c: 620: BYTE buffers;
 17866                           ;ECAN.c: 628: BYTE i,j;
 17867                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 17868                           ;ECAN.c: 630: BYTE* pb[9];
 17869                           ;ECAN.c: 631: BYTE temp;
 17870                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 17871                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 17872                           
 17873                           ;incstack = 0
 17874                           ;incstack = 0
 17875  003A5A  0E0F               	movlw	15	;volatile
 17876  003A5C  0100               	movlb	0	; () banked
 17877  003A5E  6F76               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 17878  003A60  0E40               	movlw	64	;volatile
 17879  003A62  6F75               	movwf	ECANSendMessage@pb& (0+255),b
 17880                           
 17881                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 17882  003A64  0E0F               	movlw	15	;volatile
 17883  003A66  6F78               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 17884  003A68  0E30               	movlw	48	;volatile
 17885  003A6A  6F77               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 17886                           
 17887                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 17888  003A6C  0E0F               	movlw	15	;volatile
 17889  003A6E  6F7A               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 17890  003A70  0E20               	movlw	32	;volatile
 17891  003A72  6F79               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 17892                           
 17893                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 17894  003A74  0E0E               	movlw	14	;volatile
 17895  003A76  6F7C               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 17896  003A78  0E20               	movlw	32	;volatile
 17897  003A7A  6F7B               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 17898                           
 17899                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 17900  003A7C  0E0E               	movlw	14	;volatile
 17901  003A7E  6F7E               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 17902  003A80  0E30               	movlw	48	;volatile
 17903  003A82  6F7D               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 17904                           
 17905                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 17906  003A84  0E0E               	movlw	14	;volatile
 17907  003A86  6F80               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 17908  003A88  0E40               	movlw	64	;volatile
 17909  003A8A  6F7F               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 17910                           
 17911                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 17912  003A8C  0E0E               	movlw	14	;volatile
 17913  003A8E  6F82               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 17914  003A90  0E50               	movlw	80	;volatile
 17915  003A92  6F81               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 17916                           
 17917                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 17918  003A94  0E0E               	movlw	14	;volatile
 17919  003A96  6F84               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 17920  003A98  0E60               	movlw	96	;volatile
 17921  003A9A  6F83               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 17922                           
 17923                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 17924  003A9C  0E0E               	movlw	14	;volatile
 17925  003A9E  6F86               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 17926  003AA0  0E70               	movlw	112	;volatile
 17927  003AA2  6F85               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 17928                           
 17929                           ; BSR set to: 0
 17930                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 17931  003AA4  5077               	movf	3959,w,c	;volatile
 17932  003AA6  0BC0               	andlw	192
 17933  003AA8  6F87               	movwf	ECANSendMessage@mode& (0+255),b
 17934                           
 17935                           ; BSR set to: 0
 17936                           ;ECAN.c: 660: if ( mode == 0x00 )
 17937  003AAA  6787               	tstfsz	ECANSendMessage@mode& (0+255),b
 17938  003AAC  D002               	goto	l16800
 17939                           
 17940                           ; BSR set to: 0
 17941                           ;ECAN.c: 661: buffers = 2;
 17942  003AAE  0E02               	movlw	2
 17943  003AB0  D001               	goto	L19
 17944  003AB2                     l16800:
 17945                           
 17946                           ; BSR set to: 0
 17947                           ;ECAN.c: 662: else
 17948                           ;ECAN.c: 663: buffers = 8;
 17949  003AB2  0E08               	movlw	8
 17950  003AB4                     L19:
 17951  003AB4  6F88               	movwf	ECANSendMessage@buffers& (0+255),b
 17952                           
 17953                           ; BSR set to: 0
 17954                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 17955  003AB6  010D               	movlb	13	; () banked
 17956  003AB8  90D8               	bcf	status,0,c
 17957  003ABA  31F8               	rrcf	248,w,b	;volatile
 17958  003ABC  0100               	movlb	0	; () banked
 17959  003ABE  6F8A               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 17960                           
 17961                           ; BSR set to: 0
 17962                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 17963  003AC0  6B8E               	clrf	ECANSendMessage@i& (0+255),b
 17964  003AC2  D07D               	goto	l16860
 17965  003AC4                     l16806:
 17966                           
 17967                           ; BSR set to: 0
 17968                           ;ECAN.c: 688: {
 17969                           ;ECAN.c: 693: ptr = pb[i];
 17970  003AC4  518E               	movf	ECANSendMessage@i& (0+255),w,b
 17971  003AC6  0D02               	mullw	2
 17972  003AC8  50F3               	movf	prodl,w,c
 17973  003ACA  0F75               	addlw	low ECANSendMessage@pb
 17974  003ACC  6ED9               	movwf	fsr2l,c
 17975  003ACE  6ADA               	clrf	fsr2h,c
 17976  003AD0  CFDE F08F          	movff	postinc2,ECANSendMessage@ptr
 17977  003AD4  CFDD F090          	movff	postdec2,ECANSendMessage@ptr+1
 17978                           
 17979                           ; BSR set to: 0
 17980                           ;ECAN.c: 694: tempPtr = ptr;
 17981  003AD8  C08F  F08B         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 17982  003ADC  C090  F08C         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 17983                           
 17984                           ; BSR set to: 0
 17985                           ;ECAN.c: 702: if ( i > 2 )
 17986  003AE0  0E02               	movlw	2
 17987  003AE2  658E               	cpfsgt	ECANSendMessage@i& (0+255),b
 17988  003AE4  D004               	goto	l16818
 17989                           
 17990                           ; BSR set to: 0
 17991                           ;ECAN.c: 703: {
 17992                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 17993  003AE6  90D8               	bcf	status,0,c
 17994  003AE8  338A               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 17995                           
 17996                           ; BSR set to: 0
 17997                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 17998  003AEA  A18A               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 17999  003AEC  D067               	goto	l16858
 18000  003AEE                     l16818:
 18001                           
 18002                           ; BSR set to: 0
 18003                           ;ECAN.c: 714: }
 18004                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 18005  003AEE  C08F  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 18006  003AF2  C090  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 18007  003AF6  50DF               	movf	indf2,w,c
 18008  003AF8  6F74               	movwf	??_ECANSendMessage& (0+255),b
 18009  003AFA  B774               	btfsc	??_ECANSendMessage& (0+255),3,b
 18010  003AFC  D05F               	goto	l16858
 18011                           
 18012                           ; BSR set to: 0
 18013                           ;ECAN.c: 721: {
 18014                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 18015  003AFE  C08F  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 18016  003B02  C090  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 18017  003B06  0EFC               	movlw	252
 18018  003B08  16DF               	andwf	indf2,f,c
 18019                           
 18020                           ; BSR set to: 0
 18021                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 18022  003B0A  C073  F074         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 18023  003B0E  0E03               	movlw	3
 18024  003B10  1774               	andwf	??_ECANSendMessage& (0+255),f,b
 18025  003B12  C08F  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 18026  003B16  C090  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 18027  003B1A  5174               	movf	??_ECANSendMessage& (0+255),w,b
 18028  003B1C  12DF               	iorwf	indf2,f,c
 18029                           
 18030                           ; BSR set to: 0
 18031                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 18032  003B1E  AD73               	btfss	ECANSendMessage@msgFlags& (0+255),6,b
 18033  003B20  D004               	goto	l1503
 18034                           
 18035                           ; BSR set to: 0
 18036                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 18037  003B22  5172               	movf	ECANSendMessage@dataLen& (0+255),w,b
 18038  003B24  0940               	iorlw	64
 18039  003B26  6F8D               	movwf	ECANSendMessage@temp& (0+255),b
 18040  003B28  D002               	goto	l16828
 18041  003B2A                     l1503:
 18042                           
 18043                           ; BSR set to: 0
 18044                           ;ECAN.c: 729: else
 18045                           ;ECAN.c: 730: temp = dataLen;
 18046  003B2A  C072  F08D         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 18047  003B2E                     l16828:
 18048                           
 18049                           ; BSR set to: 0
 18050                           ;ECAN.c: 732: *(ptr+5) = temp;
 18051  003B2E  EE20 F005          	lfsr	2,5
 18052  003B32  518F               	movf	ECANSendMessage@ptr& (0+255),w,b
 18053  003B34  26D9               	addwf	fsr2l,f,c
 18054  003B36  5190               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 18055  003B38  22DA               	addwfc	fsr2h,f,c
 18056  003B3A  C08D  FFDF         	movff	ECANSendMessage@temp,indf2
 18057                           
 18058                           ; BSR set to: 0
 18059                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 18060  003B3E  AB73               	btfss	ECANSendMessage@msgFlags& (0+255),5,b
 18061  003B40  D003               	goto	l1505
 18062                           
 18063                           ; BSR set to: 0
 18064                           ;ECAN.c: 736: temp = 1;
 18065  003B42  0E01               	movlw	1
 18066  003B44  6F8D               	movwf	ECANSendMessage@temp& (0+255),b
 18067  003B46  D001               	goto	l16834
 18068  003B48                     l1505:
 18069                           
 18070                           ; BSR set to: 0
 18071                           ;ECAN.c: 738: else
 18072                           ;ECAN.c: 739: temp = 0;
 18073  003B48  6B8D               	clrf	ECANSendMessage@temp& (0+255),b
 18074  003B4A                     l16834:
 18075                           
 18076                           ; BSR set to: 0
 18077                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 18078  003B4A  298F               	incf	ECANSendMessage@ptr& (0+255),w,b
 18079  003B4C  6F62               	movwf	?__CANIDToRegs& (0+255),b
 18080  003B4E  0E00               	movlw	0
 18081  003B50  2190               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 18082  003B52  6F63               	movwf	(?__CANIDToRegs+1)& (0+255),b
 18083  003B54  C06C  F064         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 18084  003B58  C06D  F065         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 18085  003B5C  C06E  F066         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 18086  003B60  C06F  F067         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 18087  003B64  C08D  F068         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 18088  003B68  ECB9  F01F         	call	__CANIDToRegs	;wreg free
 18089                           
 18090                           ; BSR set to: 0
 18091                           ;ECAN.c: 745: ptr += 6;
 18092  003B6C  0E06               	movlw	6
 18093  003B6E  278F               	addwf	ECANSendMessage@ptr& (0+255),f,b
 18094  003B70  0E00               	movlw	0
 18095  003B72  2390               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 18096                           
 18097                           ; BSR set to: 0
 18098                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 18099  003B74  6B89               	clrf	ECANSendMessage@j& (0+255),b
 18100  003B76  D00F               	goto	l16848
 18101  003B78                     l16840:
 18102                           
 18103                           ; BSR set to: 0
 18104                           ;ECAN.c: 748: *ptr++ = *data++;
 18105  003B78  C070  FFD9         	movff	ECANSendMessage@data,fsr2l
 18106  003B7C  C071  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 18107  003B80  C08F  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 18108  003B84  C090  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 18109  003B88  CFDF FFE7          	movff	indf2,indf1
 18110                           
 18111                           ; BSR set to: 0
 18112  003B8C  4B70               	infsnz	ECANSendMessage@data& (0+255),f,b
 18113  003B8E  2B71               	incf	(ECANSendMessage@data+1)& (0+255),f,b
 18114                           
 18115                           ; BSR set to: 0
 18116  003B90  4B8F               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 18117  003B92  2B90               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 18118                           
 18119                           ; BSR set to: 0
 18120  003B94  2B89               	incf	ECANSendMessage@j& (0+255),f,b
 18121  003B96                     l16848:
 18122                           
 18123                           ; BSR set to: 0
 18124  003B96  5172               	movf	ECANSendMessage@dataLen& (0+255),w,b
 18125  003B98  5D89               	subwf	ECANSendMessage@j& (0+255),w,b
 18126  003B9A  E3EE               	bnc	l16840
 18127                           
 18128                           ; BSR set to: 0
 18129                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 18130  003B9C  C08B  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 18131  003BA0  C08C  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 18132  003BA4  50DF               	movf	indf2,w,c
 18133  003BA6  6F74               	movwf	??_ECANSendMessage& (0+255),b
 18134  003BA8  B574               	btfsc	??_ECANSendMessage& (0+255),2,b
 18135  003BAA  D006               	goto	l16854
 18136                           
 18137                           ; BSR set to: 0
 18138                           ;ECAN.c: 753: *tempPtr |= 0x08;
 18139  003BAC  C08B  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 18140  003BB0  C08C  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 18141  003BB4  0E00               	movlw	0
 18142  003BB6  86DB               	bsf	plusw2,3,c
 18143  003BB8                     l16854:
 18144                           
 18145                           ; BSR set to: 0
 18146                           ;ECAN.c: 755: return TRUE;
 18147  003BB8  0E01               	movlw	1
 18148  003BBA  D005               	goto	l1511
 18149  003BBC                     l16858:
 18150                           
 18151                           ; BSR set to: 0
 18152  003BBC  2B8E               	incf	ECANSendMessage@i& (0+255),f,b
 18153  003BBE                     l16860:
 18154                           
 18155                           ; BSR set to: 0
 18156  003BBE  5188               	movf	ECANSendMessage@buffers& (0+255),w,b
 18157  003BC0  5D8E               	subwf	ECANSendMessage@i& (0+255),w,b
 18158  003BC2  E380               	bnc	l16806
 18159                           
 18160                           ; BSR set to: 0
 18161                           ;ECAN.c: 756: }
 18162                           ;ECAN.c: 757: }
 18163                           ;ECAN.c: 760: return FALSE;
 18164  003BC4  0E00               	movlw	0
 18165  003BC6                     l1511:
 18166                           
 18167                           ; BSR set to: 0
 18168  003BC6  0012               	return	
 18169  003BC8                     __end_of_ECANSendMessage:
 18170                           	opt stack 0
 18171                           tblptru	equ	0xFF8
 18172                           tblptrh	equ	0xFF7
 18173                           tblptrl	equ	0xFF6
 18174                           tablat	equ	0xFF5
 18175                           prodh	equ	0xFF4
 18176                           prodl	equ	0xFF3
 18177                           intcon	equ	0xFF2
 18178                           indf0	equ	0xFEF
 18179                           postinc0	equ	0xFEE
 18180                           fsr0h	equ	0xFEA
 18181                           fsr0l	equ	0xFE9
 18182                           wreg	equ	0xFE8
 18183                           indf1	equ	0xFE7
 18184                           postinc1	equ	0xFE6
 18185                           postdec1	equ	0xFE5
 18186                           fsr1h	equ	0xFE2
 18187                           fsr1l	equ	0xFE1
 18188                           indf2	equ	0xFDF
 18189                           postinc2	equ	0xFDE
 18190                           postdec2	equ	0xFDD
 18191                           plusw2	equ	0xFDB
 18192                           fsr2h	equ	0xFDA
 18193                           fsr2l	equ	0xFD9
 18194                           status	equ	0xFD8
 18195                           
 18196 ;; *************** function _memset *****************
 18197 ;; Defined at:
 18198 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 18199 ;; Parameters:    Size  Location     Type
 18200 ;;  p1              2    0[BANK0 ] PTR void 
 18201 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18202 ;;  c               2    2[BANK0 ] int 
 18203 ;;  n               2    4[BANK0 ] unsigned int 
 18204 ;; Auto vars:     Size  Location     Type
 18205 ;;  p               2    6[BANK0 ] PTR unsigned char 
 18206 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18207 ;; Return value:  Size  Location     Type
 18208 ;;                  2    0[BANK0 ] PTR void 
 18209 ;; Registers used:
 18210 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18211 ;; Tracked objects:
 18212 ;;		On entry : F/0
 18213 ;;		On exit  : F/0
 18214 ;;		Unchanged: 0/0
 18215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18216 ;;      Params:         0       6       0       0       0       0       0
 18217 ;;      Locals:         0       2       0       0       0       0       0
 18218 ;;      Temps:          0       0       0       0       0       0       0
 18219 ;;      Totals:         0       8       0       0       0       0       0
 18220 ;;Total ram usage:        8 bytes
 18221 ;; Hardware stack levels used:    1
 18222 ;; Hardware stack levels required when called:    3
 18223 ;; This function calls:
 18224 ;;		Nothing
 18225 ;; This function is called by:
 18226 ;;		_doModeVerbose
 18227 ;;		_doModeSLCAN
 18228 ;;		_printGUID
 18229 ;;		_printMDF
 18230 ;;		_printNodeFirmwareVersion
 18231 ;; This function uses a non-reentrant model
 18232 ;;
 18233                           
 18234                           	psect	text36
 18235  005D8A                     __ptext36:
 18236                           	opt stack 0
 18237  005D8A                     _memset:
 18238                           	opt stack 26
 18239                           
 18240                           ; BSR set to: 0
 18241                           
 18242                           ; BSR set to: 0
 18243                           ;incstack = 0
 18244                           ;incstack = 0
 18245  005D8A  C060  F066         	movff	memset@p1,memset@p
 18246  005D8E  C061  F067         	movff	memset@p1+1,memset@p+1
 18247  005D92  D008               	goto	l12116
 18248  005D94                     l12112:
 18249                           
 18250                           ; BSR set to: 0
 18251  005D94  C066  FFD9         	movff	memset@p,fsr2l
 18252  005D98  C067  FFDA         	movff	memset@p+1,fsr2h
 18253  005D9C  C062  FFDF         	movff	memset@c,indf2
 18254                           
 18255                           ; BSR set to: 0
 18256  005DA0  4B66               	infsnz	memset@p& (0+255),f,b
 18257  005DA2  2B67               	incf	(memset@p+1)& (0+255),f,b
 18258  005DA4                     l12116:
 18259                           
 18260                           ; BSR set to: 0
 18261  005DA4  0764               	decf	memset@n& (0+255),f,b
 18262  005DA6  A0D8               	btfss	status,0,c
 18263  005DA8  0765               	decf	(memset@n+1)& (0+255),f,b
 18264  005DAA  0100               	movlb	0	; () banked
 18265  005DAC  2964               	incf	memset@n& (0+255),w,b
 18266  005DAE  B4D8               	btfsc	status,2,c
 18267  005DB0  2965               	incf	(memset@n+1)& (0+255),w,b
 18268  005DB2  B4D8               	btfsc	status,2,c
 18269                           
 18270                           ; BSR set to: 0
 18271  005DB4  0012               	return	
 18272  005DB6  D7EE               	goto	l12112
 18273  005DB8                     __end_of_memset:
 18274                           	opt stack 0
 18275                           tblptru	equ	0xFF8
 18276                           tblptrh	equ	0xFF7
 18277                           tblptrl	equ	0xFF6
 18278                           tablat	equ	0xFF5
 18279                           prodh	equ	0xFF4
 18280                           prodl	equ	0xFF3
 18281                           intcon	equ	0xFF2
 18282                           indf0	equ	0xFEF
 18283                           postinc0	equ	0xFEE
 18284                           fsr0h	equ	0xFEA
 18285                           fsr0l	equ	0xFE9
 18286                           wreg	equ	0xFE8
 18287                           indf1	equ	0xFE7
 18288                           postinc1	equ	0xFE6
 18289                           postdec1	equ	0xFE5
 18290                           fsr1h	equ	0xFE2
 18291                           fsr1l	equ	0xFE1
 18292                           indf2	equ	0xFDF
 18293                           postinc2	equ	0xFDE
 18294                           postdec2	equ	0xFDD
 18295                           plusw2	equ	0xFDB
 18296                           fsr2h	equ	0xFDA
 18297                           fsr2l	equ	0xFD9
 18298                           status	equ	0xFD8
 18299                           
 18300 ;; *************** function _printHelp *****************
 18301 ;; Defined at:
 18302 ;;		line 2729 in file "main.c"
 18303 ;; Parameters:    Size  Location     Type
 18304 ;;		None
 18305 ;; Auto vars:     Size  Location     Type
 18306 ;;		None
 18307 ;; Return value:  Size  Location     Type
 18308 ;;		None               void
 18309 ;; Registers used:
 18310 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18311 ;; Tracked objects:
 18312 ;;		On entry : F/0
 18313 ;;		On exit  : 0/0
 18314 ;;		Unchanged: 0/0
 18315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18316 ;;      Params:         0       0       0       0       0       0       0
 18317 ;;      Locals:         0       0       0       0       0       0       0
 18318 ;;      Temps:          0       0       0       0       0       0       0
 18319 ;;      Totals:         0       0       0       0       0       0       0
 18320 ;;Total ram usage:        0 bytes
 18321 ;; Hardware stack levels used:    1
 18322 ;; Hardware stack levels required when called:    5
 18323 ;; This function calls:
 18324 ;;		_putsUSART
 18325 ;; This function is called by:
 18326 ;;		_doModeVerbose
 18327 ;; This function uses a non-reentrant model
 18328 ;;
 18329                           
 18330                           	psect	text37
 18331  0033E8                     __ptext37:
 18332                           	opt stack 0
 18333  0033E8                     _printHelp:
 18334                           	opt stack 24
 18335                           
 18336                           ; BSR set to: 0
 18337                           ;main.c: 2730: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 18338                           
 18339                           ; BSR set to: 0
 18340                           ;incstack = 0
 18341                           ;incstack = 0
 18342  0033E8  0E77               	movlw	high STR_229
 18343  0033EA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18344  0033EC  0EFB               	movlw	low STR_229
 18345  0033EE  6F61               	movwf	?_putsUSART& (0+255),b
 18346  0033F0  EC41  F02C         	call	_putsUSART	;wreg free
 18347                           
 18348                           ;main.c: 2731: putsUSART((char *) "------------------------------------\r\n");
 18349  0033F4  0E71               	movlw	high (STR_261+28)
 18350  0033F6  0100               	movlb	0	; () banked
 18351  0033F8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18352  0033FA  0E60               	movlw	low (STR_261+28)
 18353  0033FC  6F61               	movwf	?_putsUSART& (0+255),b
 18354  0033FE  EC41  F02C         	call	_putsUSART	;wreg free
 18355                           
 18356                           ;main.c: 2732: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 18357  003402  0E7A               	movlw	high STR_231
 18358  003404  0100               	movlb	0	; () banked
 18359  003406  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18360  003408  0EFA               	movlw	low STR_231
 18361  00340A  6F61               	movwf	?_putsUSART& (0+255),b
 18362  00340C  EC41  F02C         	call	_putsUSART	;wreg free
 18363                           
 18364                           ;main.c: 2733: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 18365  003410  0E76               	movlw	high STR_232
 18366  003412  0100               	movlb	0	; () banked
 18367  003414  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18368  003416  0E8A               	movlw	low STR_232
 18369  003418  6F61               	movwf	?_putsUSART& (0+255),b
 18370  00341A  EC41  F02C         	call	_putsUSART	;wreg free
 18371                           
 18372                           ;main.c: 2734: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 18373  00341E  0E76               	movlw	high STR_233
 18374  003420  0100               	movlb	0	; () banked
 18375  003422  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18376  003424  0E30               	movlw	low STR_233
 18377  003426  6F61               	movwf	?_putsUSART& (0+255),b
 18378  003428  EC41  F02C         	call	_putsUSART	;wreg free
 18379                           
 18380                           ;main.c: 2735: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 18381  00342C  0E74               	movlw	high STR_234
 18382  00342E  0100               	movlb	0	; () banked
 18383  003430  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18384  003432  0EA9               	movlw	low STR_234
 18385  003434  6F61               	movwf	?_putsUSART& (0+255),b
 18386  003436  EC41  F02C         	call	_putsUSART	;wreg free
 18387                           
 18388                           ;main.c: 2736: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 18389  00343A  0E75               	movlw	high STR_235
 18390  00343C  0100               	movlb	0	; () banked
 18391  00343E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18392  003440  0E0E               	movlw	low STR_235
 18393  003442  6F61               	movwf	?_putsUSART& (0+255),b
 18394  003444  EC41  F02C         	call	_putsUSART	;wreg free
 18395                           
 18396                           ;main.c: 2737: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 18397  003448  0E7A               	movlw	high STR_236
 18398  00344A  0100               	movlb	0	; () banked
 18399  00344C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18400  00344E  0EA2               	movlw	low STR_236
 18401  003450  6F61               	movwf	?_putsUSART& (0+255),b
 18402  003452  EC41  F02C         	call	_putsUSART	;wreg free
 18403                           
 18404                           ;main.c: 2738: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 18405  003456  0E75               	movlw	high STR_237
 18406  003458  0100               	movlb	0	; () banked
 18407  00345A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18408  00345C  0E40               	movlw	low STR_237
 18409  00345E  6F61               	movwf	?_putsUSART& (0+255),b
 18410  003460  EC41  F02C         	call	_putsUSART	;wreg free
 18411                           
 18412                           ;main.c: 2739: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 18413  003464  0E76               	movlw	high STR_238
 18414  003466  0100               	movlb	0	; () banked
 18415  003468  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18416  00346A  0E5E               	movlw	low STR_238
 18417  00346C  6F61               	movwf	?_putsUSART& (0+255),b
 18418  00346E  EC41  F02C         	call	_putsUSART	;wreg free
 18419                           
 18420                           ;main.c: 2740: putsUSART((char *) "TX - Send CAN frame .\r\n");
 18421  003472  0E7B               	movlw	high STR_239
 18422  003474  0100               	movlb	0	; () banked
 18423  003476  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18424  003478  0EB0               	movlw	low STR_239
 18425  00347A  6F61               	movwf	?_putsUSART& (0+255),b
 18426  00347C  EC41  F02C         	call	_putsUSART	;wreg free
 18427                           
 18428                           ;main.c: 2741: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 18429  003480  0E72               	movlw	high STR_240
 18430  003482  0100               	movlb	0	; () banked
 18431  003484  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18432  003486  0EF7               	movlw	low STR_240
 18433  003488  6F61               	movwf	?_putsUSART& (0+255),b
 18434  00348A  EC41  F02C         	call	_putsUSART	;wreg free
 18435                           
 18436                           ;main.c: 2742: putsUSART((char *) "RX - Read CAN frame.\r\n");
 18437  00348E  0E7C               	movlw	high STR_241
 18438  003490  0100               	movlb	0	; () banked
 18439  003492  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18440  003494  0E70               	movlw	low STR_241
 18441  003496  6F61               	movwf	?_putsUSART& (0+255),b
 18442  003498  EC41  F02C         	call	_putsUSART	;wreg free
 18443                           
 18444                           ;main.c: 2743: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 18445  00349C  0E79               	movlw	high STR_242
 18446  00349E  0100               	movlb	0	; () banked
 18447  0034A0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18448  0034A2  0EDF               	movlw	low STR_242
 18449  0034A4  6F61               	movwf	?_putsUSART& (0+255),b
 18450  0034A6  EC41  F02C         	call	_putsUSART	;wreg free
 18451                           
 18452                           ;main.c: 2744: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 18453  0034AA  0E77               	movlw	high STR_243
 18454  0034AC  0100               	movlb	0	; () banked
 18455  0034AE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18456  0034B0  0ED4               	movlw	low STR_243
 18457  0034B2  6F61               	movwf	?_putsUSART& (0+255),b
 18458  0034B4  EC41  F02C         	call	_putsUSART	;wreg free
 18459                           
 18460                           ;main.c: 2745: putsUSART((char *) "HELP - Display this help information.\r\n");
 18461  0034B8  0E77               	movlw	high STR_244
 18462  0034BA  0100               	movlb	0	; () banked
 18463  0034BC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18464  0034BE  0E35               	movlw	low STR_244
 18465  0034C0  6F61               	movwf	?_putsUSART& (0+255),b
 18466  0034C2  EC41  F02C         	call	_putsUSART	;wreg free
 18467                           
 18468                           ;main.c: 2746: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 18469  0034C6  0E76               	movlw	high STR_245
 18470  0034C8  0100               	movlb	0	; () banked
 18471  0034CA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18472  0034CC  0E01               	movlw	low STR_245
 18473  0034CE  6F61               	movwf	?_putsUSART& (0+255),b
 18474  0034D0  EC41  F02C         	call	_putsUSART	;wreg free
 18475                           
 18476                           ;main.c: 2747: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg nodeid 
      +                          [page:]reg [count]).\r\n");
 18477  0034D4  0E70               	movlw	high STR_246
 18478  0034D6  0100               	movlb	0	; () banked
 18479  0034D8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18480  0034DA  0E67               	movlw	low STR_246
 18481  0034DC  6F61               	movwf	?_putsUSART& (0+255),b
 18482  0034DE  EC41  F02C         	call	_putsUSART	;wreg free
 18483                           
 18484                           ;main.c: 2748: putsUSART((char *) "WREG - Write register of node (Format: wreg nodeid [p
      +                          age:]reg content).\r\n");
 18485  0034E2  0E70               	movlw	high STR_247
 18486  0034E4  0100               	movlb	0	; () banked
 18487  0034E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18488  0034E8  0EB3               	movlw	low STR_247
 18489  0034EA  6F61               	movwf	?_putsUSART& (0+255),b
 18490  0034EC  EC41  F02C         	call	_putsUSART	;wreg free
 18491                           
 18492                           ;main.c: 2749: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 18493  0034F0  0E70               	movlw	high STR_248
 18494  0034F2  0100               	movlb	0	; () banked
 18495  0034F4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18496  0034F6  0E1A               	movlw	low STR_248
 18497  0034F8  6F61               	movwf	?_putsUSART& (0+255),b
 18498  0034FA  EC41  F02C         	call	_putsUSART	;wreg free
 18499                           
 18500                           ;main.c: 2750: putsUSART((char *) "FILTER - Set filter .\r\n");
 18501  0034FE  0E7B               	movlw	high STR_249
 18502  003500  0100               	movlb	0	; () banked
 18503  003502  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18504  003504  0EC8               	movlw	low STR_249
 18505  003506  6F61               	movwf	?_putsUSART& (0+255),b
 18506  003508  EC41  F02C         	call	_putsUSART	;wreg free
 18507                           
 18508                           ;main.c: 2751: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 18509  00350C  0E6F               	movlw	high STR_250
 18510  00350E  0100               	movlb	0	; () banked
 18511  003510  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18512  003512  0ECC               	movlw	low STR_250
 18513  003514  6F61               	movwf	?_putsUSART& (0+255),b
 18514  003516  EC41  F02C         	call	_putsUSART	;wreg free
 18515                           
 18516                           ;main.c: 2752: putsUSART((char *) "MASK - Set mask .\r\n");
 18517  00351A  0E7C               	movlw	high STR_251
 18518  00351C  0100               	movlb	0	; () banked
 18519  00351E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18520  003520  0EF6               	movlw	low STR_251
 18521  003522  6F61               	movwf	?_putsUSART& (0+255),b
 18522  003524  EC41  F02C         	call	_putsUSART	;wreg free
 18523                           
 18524                           ;main.c: 2753: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 18525  003528  0E70               	movlw	high STR_252
 18526  00352A  0100               	movlb	0	; () banked
 18527  00352C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18528  00352E  0EFD               	movlw	low STR_252
 18529  003530  6F61               	movwf	?_putsUSART& (0+255),b
 18530  003532  EC41  F02C         	call	_putsUSART	;wreg free
 18531                           
 18532                           ;main.c: 2754: putsUSART((char *) "SET - Persistent functionality.\r\n");
 18533  003536  0E79               	movlw	high STR_253
 18534  003538  0100               	movlb	0	; () banked
 18535  00353A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18536  00353C  0EBD               	movlw	low STR_253
 18537  00353E  6F61               	movwf	?_putsUSART& (0+255),b
 18538  003540  EC41  F02C         	call	_putsUSART	;wreg free
 18539                           
 18540                           ;main.c: 2755: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 18541  003544  0E75               	movlw	high STR_254
 18542  003546  0100               	movlb	0	; () banked
 18543  003548  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18544  00354A  0ED2               	movlw	low STR_254
 18545  00354C  6F61               	movwf	?_putsUSART& (0+255),b
 18546  00354E  EC41  F02C         	call	_putsUSART	;wreg free
 18547                           
 18548                           ;main.c: 2756: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 18549  003552  0E75               	movlw	high STR_255
 18550  003554  0100               	movlb	0	; () banked
 18551  003556  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18552  003558  0EA3               	movlw	low STR_255
 18553  00355A  6F61               	movwf	?_putsUSART& (0+255),b
 18554  00355C  EC41  F02C         	call	_putsUSART	;wreg free
 18555                           
 18556                           ;main.c: 2757: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=20 ms .\r\n");
 18557  003560  0E71               	movlw	high STR_256
 18558  003562  0100               	movlb	0	; () banked
 18559  003564  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18560  003566  0E87               	movlw	low STR_256
 18561  003568  6F61               	movwf	?_putsUSART& (0+255),b
 18562  00356A  EC41  F02C         	call	_putsUSART	;wreg free
 18563                           
 18564                           ;main.c: 2758: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 18565  00356E  0E75               	movlw	high STR_257
 18566  003570  0100               	movlb	0	; () banked
 18567  003572  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18568  003574  0E72               	movlw	low STR_257
 18569  003576  6F61               	movwf	?_putsUSART& (0+255),b
 18570  003578  EC41  F02C         	call	_putsUSART	;wreg free
 18571                           
 18572                           ;main.c: 2759: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 18573  00357C  0E73               	movlw	high STR_258
 18574  00357E  0100               	movlb	0	; () banked
 18575  003580  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18576  003582  0E66               	movlw	low STR_258
 18577  003584  6F61               	movwf	?_putsUSART& (0+255),b
 18578  003586  EC41  F02C         	call	_putsUSART	;wreg free
 18579                           
 18580                           ;main.c: 2760: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 18581  00358A  0E72               	movlw	high STR_259
 18582  00358C  0100               	movlb	0	; () banked
 18583  00358E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18584  003590  0E0C               	movlw	low STR_259
 18585  003592  6F61               	movwf	?_putsUSART& (0+255),b
 18586  003594  EC41  F02C         	call	_putsUSART	;wreg free
 18587                           
 18588                           ;main.c: 2761: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 18589  003598  0E78               	movlw	high STR_260
 18590  00359A  0100               	movlb	0	; () banked
 18591  00359C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18592  00359E  0E70               	movlw	low STR_260
 18593  0035A0  6F61               	movwf	?_putsUSART& (0+255),b
 18594  0035A2  EF41  F02C         	goto	_putsUSART	;wreg free
 18595  0035A6                     __end_of_printHelp:
 18596                           	opt stack 0
 18597                           tblptru	equ	0xFF8
 18598                           tblptrh	equ	0xFF7
 18599                           tblptrl	equ	0xFF6
 18600                           tablat	equ	0xFF5
 18601                           prodh	equ	0xFF4
 18602                           prodl	equ	0xFF3
 18603                           intcon	equ	0xFF2
 18604                           indf0	equ	0xFEF
 18605                           postinc0	equ	0xFEE
 18606                           fsr0h	equ	0xFEA
 18607                           fsr0l	equ	0xFE9
 18608                           wreg	equ	0xFE8
 18609                           indf1	equ	0xFE7
 18610                           postinc1	equ	0xFE6
 18611                           postdec1	equ	0xFE5
 18612                           fsr1h	equ	0xFE2
 18613                           fsr1l	equ	0xFE1
 18614                           indf2	equ	0xFDF
 18615                           postinc2	equ	0xFDE
 18616                           postdec2	equ	0xFDD
 18617                           plusw2	equ	0xFDB
 18618                           fsr2h	equ	0xFDA
 18619                           fsr2l	equ	0xFD9
 18620                           status	equ	0xFD8
 18621                           
 18622 ;; *************** function _printErrors *****************
 18623 ;; Defined at:
 18624 ;;		line 2665 in file "main.c"
 18625 ;; Parameters:    Size  Location     Type
 18626 ;;		None
 18627 ;; Auto vars:     Size  Location     Type
 18628 ;;		None
 18629 ;; Return value:  Size  Location     Type
 18630 ;;		None               void
 18631 ;; Registers used:
 18632 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18633 ;; Tracked objects:
 18634 ;;		On entry : F/0
 18635 ;;		On exit  : 0/0
 18636 ;;		Unchanged: 0/0
 18637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18638 ;;      Params:         0       0       0       0       0       0       0
 18639 ;;      Locals:         0      12       0       0       0       0       0
 18640 ;;      Temps:          0       0       0       0       0       0       0
 18641 ;;      Totals:         0      12       0       0       0       0       0
 18642 ;;Total ram usage:       12 bytes
 18643 ;; Hardware stack levels used:    1
 18644 ;; Hardware stack levels required when called:    5
 18645 ;; This function calls:
 18646 ;;		_putsUSART
 18647 ;;		_sprintf
 18648 ;; This function is called by:
 18649 ;;		_doModeVerbose
 18650 ;; This function uses a non-reentrant model
 18651 ;;
 18652                           
 18653                           	psect	text38
 18654  00252A                     __ptext38:
 18655                           	opt stack 0
 18656  00252A                     _printErrors:
 18657                           	opt stack 24
 18658                           
 18659                           ; BSR set to: 0
 18660                           ;main.c: 2666: putsUSART((char *) "CAN Receive overruns: ");
 18661                           
 18662                           ;incstack = 0
 18663                           ;incstack = 0
 18664  00252A  0E7C               	movlw	high STR_199
 18665  00252C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18666  00252E  0E87               	movlw	low STR_199
 18667  002530  6F61               	movwf	?_putsUSART& (0+255),b
 18668  002532  EC41  F02C         	call	_putsUSART	;wreg free
 18669                           
 18670                           ;main.c: 2667: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns);
 18671  002536  662B               	tstfsz	_bHex,c
 18672  002538  D005               	goto	l15604
 18673  00253A  0E7F               	movlw	high STR_185
 18674  00253C  0100               	movlb	0	; () banked
 18675  00253E  6F95               	movwf	(_printErrors$1501+1)& (0+255),b
 18676  002540  0EDE               	movlw	low STR_185
 18677  002542  D004               	goto	L20
 18678  002544                     l15604:
 18679  002544  0E7E               	movlw	high STR_200
 18680  002546  0100               	movlb	0	; () banked
 18681  002548  6F95               	movwf	(_printErrors$1501+1)& (0+255),b
 18682  00254A  0EFF               	movlw	low STR_200
 18683  00254C                     L20:
 18684  00254C  6F94               	movwf	_printErrors$1501& (0+255),b
 18685                           
 18686                           ; BSR set to: 0
 18687  00254E  0E01               	movlw	high _wrkbuf
 18688  002550  0100               	movlb	0	; () banked
 18689  002552  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18690  002554  0E79               	movlw	low _wrkbuf
 18691  002556  6F76               	movwf	?_sprintf& (0+255),b
 18692  002558  C094  F078         	movff	_printErrors$1501,?_sprintf+2
 18693  00255C  C095  F079         	movff	_printErrors$1501+1,?_sprintf+3
 18694  002560  C100  F07A         	movff	_can_receiveOverruns,?_sprintf+4
 18695  002564  C101  F07B         	movff	_can_receiveOverruns+1,?_sprintf+5
 18696  002568  C102  F07C         	movff	_can_receiveOverruns+2,?_sprintf+6
 18697  00256C  C103  F07D         	movff	_can_receiveOverruns+3,?_sprintf+7
 18698  002570  EC08  F00D         	call	_sprintf	;wreg free
 18699                           
 18700                           ; BSR set to: 0
 18701                           ;main.c: 2668: putsUSART(wrkbuf);
 18702  002574  0E01               	movlw	high _wrkbuf
 18703  002576  0100               	movlb	0	; () banked
 18704  002578  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18705  00257A  0E79               	movlw	low _wrkbuf
 18706  00257C  6F61               	movwf	?_putsUSART& (0+255),b
 18707  00257E  EC41  F02C         	call	_putsUSART	;wreg free
 18708                           
 18709                           ;main.c: 2669: putsUSART((char *) "\r\n");
 18710  002582  0E74               	movlw	high (STR_220+50)
 18711  002584  0100               	movlb	0	; () banked
 18712  002586  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18713  002588  0E72               	movlw	low (STR_220+50)
 18714  00258A  6F61               	movwf	?_putsUSART& (0+255),b
 18715  00258C  EC41  F02C         	call	_putsUSART	;wreg free
 18716                           
 18717                           ;main.c: 2671: putsUSART((char *) "CAN Transmit overruns: ");
 18718  002590  0E7C               	movlw	high STR_203
 18719  002592  0100               	movlb	0	; () banked
 18720  002594  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18721  002596  0E58               	movlw	low STR_203
 18722  002598  6F61               	movwf	?_putsUSART& (0+255),b
 18723  00259A  EC41  F02C         	call	_putsUSART	;wreg free
 18724                           
 18725                           ;main.c: 2672: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns);
 18726  00259E  662B               	tstfsz	_bHex,c
 18727  0025A0  D005               	goto	l15618
 18728  0025A2  0E7F               	movlw	high STR_185
 18729  0025A4  0100               	movlb	0	; () banked
 18730  0025A6  6F97               	movwf	(_printErrors$1507+1)& (0+255),b
 18731  0025A8  0EDE               	movlw	low STR_185
 18732  0025AA  D004               	goto	L21
 18733  0025AC                     l15618:
 18734  0025AC  0E7E               	movlw	high STR_200
 18735  0025AE  0100               	movlb	0	; () banked
 18736  0025B0  6F97               	movwf	(_printErrors$1507+1)& (0+255),b
 18737  0025B2  0EFF               	movlw	low STR_200
 18738  0025B4                     L21:
 18739  0025B4  6F96               	movwf	_printErrors$1507& (0+255),b
 18740                           
 18741                           ; BSR set to: 0
 18742  0025B6  0E01               	movlw	high _wrkbuf
 18743  0025B8  0100               	movlb	0	; () banked
 18744  0025BA  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18745  0025BC  0E79               	movlw	low _wrkbuf
 18746  0025BE  6F76               	movwf	?_sprintf& (0+255),b
 18747  0025C0  C096  F078         	movff	_printErrors$1507,?_sprintf+2
 18748  0025C4  C097  F079         	movff	_printErrors$1507+1,?_sprintf+3
 18749  0025C8  C104  F07A         	movff	_can_transmitOverruns,?_sprintf+4
 18750  0025CC  C105  F07B         	movff	_can_transmitOverruns+1,?_sprintf+5
 18751  0025D0  C106  F07C         	movff	_can_transmitOverruns+2,?_sprintf+6
 18752  0025D4  C107  F07D         	movff	_can_transmitOverruns+3,?_sprintf+7
 18753  0025D8  EC08  F00D         	call	_sprintf	;wreg free
 18754                           
 18755                           ; BSR set to: 0
 18756                           ;main.c: 2673: putsUSART(wrkbuf);
 18757  0025DC  0E01               	movlw	high _wrkbuf
 18758  0025DE  0100               	movlb	0	; () banked
 18759  0025E0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18760  0025E2  0E79               	movlw	low _wrkbuf
 18761  0025E4  6F61               	movwf	?_putsUSART& (0+255),b
 18762  0025E6  EC41  F02C         	call	_putsUSART	;wreg free
 18763                           
 18764                           ;main.c: 2674: putsUSART((char *) "\r\n");
 18765  0025EA  0E74               	movlw	high (STR_220+50)
 18766  0025EC  0100               	movlb	0	; () banked
 18767  0025EE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18768  0025F0  0E72               	movlw	low (STR_220+50)
 18769  0025F2  6F61               	movwf	?_putsUSART& (0+255),b
 18770  0025F4  EC41  F02C         	call	_putsUSART	;wreg free
 18771                           
 18772                           ;main.c: 2676: putsUSART((char *) "UART Receive overruns: ");
 18773  0025F8  0E7C               	movlw	high STR_207
 18774  0025FA  0100               	movlb	0	; () banked
 18775  0025FC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18776  0025FE  0E40               	movlw	low STR_207
 18777  002600  6F61               	movwf	?_putsUSART& (0+255),b
 18778  002602  EC41  F02C         	call	_putsUSART	;wreg free
 18779                           
 18780                           ;main.c: 2677: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns);
 18781  002606  662B               	tstfsz	_bHex,c
 18782  002608  D005               	goto	l15632
 18783  00260A  0E7F               	movlw	high STR_185
 18784  00260C  0100               	movlb	0	; () banked
 18785  00260E  6F99               	movwf	(_printErrors$1513+1)& (0+255),b
 18786  002610  0EDE               	movlw	low STR_185
 18787  002612  D004               	goto	L22
 18788  002614                     l15632:
 18789  002614  0E7E               	movlw	high STR_200
 18790  002616  0100               	movlb	0	; () banked
 18791  002618  6F99               	movwf	(_printErrors$1513+1)& (0+255),b
 18792  00261A  0EFF               	movlw	low STR_200
 18793  00261C                     L22:
 18794  00261C  6F98               	movwf	_printErrors$1513& (0+255),b
 18795                           
 18796                           ; BSR set to: 0
 18797  00261E  0E01               	movlw	high _wrkbuf
 18798  002620  0100               	movlb	0	; () banked
 18799  002622  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18800  002624  0E79               	movlw	low _wrkbuf
 18801  002626  6F76               	movwf	?_sprintf& (0+255),b
 18802  002628  C098  F078         	movff	_printErrors$1513,?_sprintf+2
 18803  00262C  C099  F079         	movff	_printErrors$1513+1,?_sprintf+3
 18804  002630  C120  F07A         	movff	_uart_receiveOverruns,?_sprintf+4
 18805  002634  C121  F07B         	movff	_uart_receiveOverruns+1,?_sprintf+5
 18806  002638  C122  F07C         	movff	_uart_receiveOverruns+2,?_sprintf+6
 18807  00263C  C123  F07D         	movff	_uart_receiveOverruns+3,?_sprintf+7
 18808  002640  EC08  F00D         	call	_sprintf	;wreg free
 18809                           
 18810                           ; BSR set to: 0
 18811                           ;main.c: 2678: putsUSART(wrkbuf);
 18812  002644  0E01               	movlw	high _wrkbuf
 18813  002646  0100               	movlb	0	; () banked
 18814  002648  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18815  00264A  0E79               	movlw	low _wrkbuf
 18816  00264C  6F61               	movwf	?_putsUSART& (0+255),b
 18817  00264E  EC41  F02C         	call	_putsUSART	;wreg free
 18818                           
 18819                           ;main.c: 2679: putsUSART((char *) "\r\n");
 18820  002652  0E74               	movlw	high (STR_220+50)
 18821  002654  0100               	movlb	0	; () banked
 18822  002656  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18823  002658  0E72               	movlw	low (STR_220+50)
 18824  00265A  6F61               	movwf	?_putsUSART& (0+255),b
 18825  00265C  EC41  F02C         	call	_putsUSART	;wreg free
 18826                           
 18827                           ;main.c: 2681: putsUSART((char *) "UART Receive overruns: ");
 18828  002660  0E7C               	movlw	high STR_207
 18829  002662  0100               	movlb	0	; () banked
 18830  002664  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18831  002666  0E40               	movlw	low STR_207
 18832  002668  6F61               	movwf	?_putsUSART& (0+255),b
 18833  00266A  EC41  F02C         	call	_putsUSART	;wreg free
 18834                           
 18835                           ;main.c: 2682: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns);
 18836  00266E  662B               	tstfsz	_bHex,c
 18837  002670  D005               	goto	l15646
 18838  002672  0E7F               	movlw	high STR_185
 18839  002674  0100               	movlb	0	; () banked
 18840  002676  6F9B               	movwf	(_printErrors$1519+1)& (0+255),b
 18841  002678  0EDE               	movlw	low STR_185
 18842  00267A  D004               	goto	L23
 18843  00267C                     l15646:
 18844  00267C  0E7E               	movlw	high STR_200
 18845  00267E  0100               	movlb	0	; () banked
 18846  002680  6F9B               	movwf	(_printErrors$1519+1)& (0+255),b
 18847  002682  0EFF               	movlw	low STR_200
 18848  002684                     L23:
 18849  002684  6F9A               	movwf	_printErrors$1519& (0+255),b
 18850                           
 18851                           ; BSR set to: 0
 18852  002686  0E01               	movlw	high _wrkbuf
 18853  002688  0100               	movlb	0	; () banked
 18854  00268A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18855  00268C  0E79               	movlw	low _wrkbuf
 18856  00268E  6F76               	movwf	?_sprintf& (0+255),b
 18857  002690  C09A  F078         	movff	_printErrors$1519,?_sprintf+2
 18858  002694  C09B  F079         	movff	_printErrors$1519+1,?_sprintf+3
 18859  002698  C124  F07A         	movff	_uart_transmitOverruns,?_sprintf+4
 18860  00269C  C125  F07B         	movff	_uart_transmitOverruns+1,?_sprintf+5
 18861  0026A0  C126  F07C         	movff	_uart_transmitOverruns+2,?_sprintf+6
 18862  0026A4  C127  F07D         	movff	_uart_transmitOverruns+3,?_sprintf+7
 18863  0026A8  EC08  F00D         	call	_sprintf	;wreg free
 18864                           
 18865                           ; BSR set to: 0
 18866                           ;main.c: 2683: putsUSART(wrkbuf);
 18867  0026AC  0E01               	movlw	high _wrkbuf
 18868  0026AE  0100               	movlb	0	; () banked
 18869  0026B0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18870  0026B2  0E79               	movlw	low _wrkbuf
 18871  0026B4  6F61               	movwf	?_putsUSART& (0+255),b
 18872  0026B6  EC41  F02C         	call	_putsUSART	;wreg free
 18873                           
 18874                           ;main.c: 2684: putsUSART((char *) "\r\n");
 18875  0026BA  0E74               	movlw	high (STR_220+50)
 18876  0026BC  0100               	movlb	0	; () banked
 18877  0026BE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18878  0026C0  0E72               	movlw	low (STR_220+50)
 18879  0026C2  6F61               	movwf	?_putsUSART& (0+255),b
 18880  0026C4  EC41  F02C         	call	_putsUSART	;wreg free
 18881                           
 18882                           ;main.c: 2686: putsUSART((char *) "Transmit Error Counter: ");
 18883  0026C8  0E7B               	movlw	high STR_215
 18884  0026CA  0100               	movlb	0	; () banked
 18885  0026CC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18886  0026CE  0E7E               	movlw	low STR_215
 18887  0026D0  6F61               	movwf	?_putsUSART& (0+255),b
 18888  0026D2  EC41  F02C         	call	_putsUSART	;wreg free
 18889                           
 18890                           ;main.c: 2687: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT);
 18891  0026D6  662B               	tstfsz	_bHex,c
 18892  0026D8  D005               	goto	l15660
 18893  0026DA  0E7F               	movlw	high STR_60
 18894  0026DC  0100               	movlb	0	; () banked
 18895  0026DE  6F9D               	movwf	(_printErrors$1525+1)& (0+255),b
 18896  0026E0  0EEE               	movlw	low STR_60
 18897  0026E2  D004               	goto	L24
 18898  0026E4                     l15660:
 18899  0026E4  0E7F               	movlw	high STR_59
 18900  0026E6  0100               	movlb	0	; () banked
 18901  0026E8  6F9D               	movwf	(_printErrors$1525+1)& (0+255),b
 18902  0026EA  0E4E               	movlw	low STR_59
 18903  0026EC                     L24:
 18904  0026EC  6F9C               	movwf	_printErrors$1525& (0+255),b
 18905                           
 18906                           ; BSR set to: 0
 18907  0026EE  0E01               	movlw	high _wrkbuf
 18908  0026F0  0100               	movlb	0	; () banked
 18909  0026F2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18910  0026F4  0E79               	movlw	low _wrkbuf
 18911  0026F6  6F76               	movwf	?_sprintf& (0+255),b
 18912  0026F8  C09C  F078         	movff	_printErrors$1525,?_sprintf+2
 18913  0026FC  C09D  F079         	movff	_printErrors$1525+1,?_sprintf+3
 18914  002700  CF76 F07A          	movff	3958,?_sprintf+4	;volatile
 18915  002704  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 18916  002706  EC08  F00D         	call	_sprintf	;wreg free
 18917                           
 18918                           ; BSR set to: 0
 18919                           ;main.c: 2688: putsUSART(wrkbuf);
 18920  00270A  0E01               	movlw	high _wrkbuf
 18921  00270C  0100               	movlb	0	; () banked
 18922  00270E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18923  002710  0E79               	movlw	low _wrkbuf
 18924  002712  6F61               	movwf	?_putsUSART& (0+255),b
 18925  002714  EC41  F02C         	call	_putsUSART	;wreg free
 18926                           
 18927                           ;main.c: 2689: putsUSART((char *) "\r\n");
 18928  002718  0E74               	movlw	high (STR_220+50)
 18929  00271A  0100               	movlb	0	; () banked
 18930  00271C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18931  00271E  0E72               	movlw	low (STR_220+50)
 18932  002720  6F61               	movwf	?_putsUSART& (0+255),b
 18933  002722  EC41  F02C         	call	_putsUSART	;wreg free
 18934                           
 18935                           ;main.c: 2691: if (COMSTATbits.TXWARN) {
 18936  002726  A474               	btfss	3956,2,c	;volatile
 18937  002728  D007               	goto	l15672
 18938                           
 18939                           ;main.c: 2692: putsUSART((char *) "Transmitter in Error State Warning (128 > TERRCNT ? 9
      +                          6)\r\n");
 18940  00272A  0E72               	movlw	high STR_219
 18941  00272C  0100               	movlb	0	; () banked
 18942  00272E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18943  002730  0E4A               	movlw	low STR_219
 18944  002732  6F61               	movwf	?_putsUSART& (0+255),b
 18945  002734  EC41  F02C         	call	_putsUSART	;wreg free
 18946  002738                     l15672:
 18947                           
 18948                           ;main.c: 2693: }
 18949                           ;main.c: 2695: if (COMSTATbits.TXBO) {
 18950  002738  AA74               	btfss	3956,5,c	;volatile
 18951  00273A  D007               	goto	l15676
 18952                           
 18953                           ;main.c: 2696: putsUSART((char *) "Transmitter in Error State Bus OFF (TERRCNT ? 256)\r\
      +                          n");
 18954  00273C  0E74               	movlw	high STR_220
 18955  00273E  0100               	movlb	0	; () banked
 18956  002740  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18957  002742  0E40               	movlw	low STR_220
 18958  002744  6F61               	movwf	?_putsUSART& (0+255),b
 18959  002746  EC41  F02C         	call	_putsUSART	;wreg free
 18960  00274A                     l15676:
 18961                           
 18962                           ;main.c: 2697: }
 18963                           ;main.c: 2699: if (COMSTATbits.TXBP) {
 18964  00274A  A874               	btfss	3956,4,c	;volatile
 18965  00274C  D007               	goto	l1233
 18966                           
 18967                           ;main.c: 2700: putsUSART((char *) "Transmitter in Error State Bus Passive (TERRCNT ? 128
      +                          )\r\n");
 18968  00274E  0E72               	movlw	high STR_221
 18969  002750  0100               	movlb	0	; () banked
 18970  002752  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18971  002754  0EBE               	movlw	low STR_221
 18972  002756  6F61               	movwf	?_putsUSART& (0+255),b
 18973  002758  EC41  F02C         	call	_putsUSART	;wreg free
 18974  00275C                     l1233:
 18975                           
 18976                           ;main.c: 2701: }
 18977                           ;main.c: 2704: putsUSART((char *) "Receive Error Counter: ");
 18978  00275C  0E7C               	movlw	high STR_222
 18979  00275E  0100               	movlb	0	; () banked
 18980  002760  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18981  002762  0E28               	movlw	low STR_222
 18982  002764  6F61               	movwf	?_putsUSART& (0+255),b
 18983  002766  EC41  F02C         	call	_putsUSART	;wreg free
 18984                           
 18985                           ;main.c: 2705: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT);
 18986  00276A  662B               	tstfsz	_bHex,c
 18987  00276C  D005               	goto	l15684
 18988  00276E  0E7F               	movlw	high STR_60
 18989  002770  0100               	movlb	0	; () banked
 18990  002772  6F9F               	movwf	(_printErrors$1534+1)& (0+255),b
 18991  002774  0EEE               	movlw	low STR_60
 18992  002776  D004               	goto	L25
 18993  002778                     l15684:
 18994  002778  0E7F               	movlw	high STR_59
 18995  00277A  0100               	movlb	0	; () banked
 18996  00277C  6F9F               	movwf	(_printErrors$1534+1)& (0+255),b
 18997  00277E  0E4E               	movlw	low STR_59
 18998  002780                     L25:
 18999  002780  6F9E               	movwf	_printErrors$1534& (0+255),b
 19000                           
 19001                           ; BSR set to: 0
 19002  002782  0E01               	movlw	high _wrkbuf
 19003  002784  0100               	movlb	0	; () banked
 19004  002786  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19005  002788  0E79               	movlw	low _wrkbuf
 19006  00278A  6F76               	movwf	?_sprintf& (0+255),b
 19007  00278C  C09E  F078         	movff	_printErrors$1534,?_sprintf+2
 19008  002790  C09F  F079         	movff	_printErrors$1534+1,?_sprintf+3
 19009  002794  CF75 F07A          	movff	3957,?_sprintf+4	;volatile
 19010  002798  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 19011  00279A  EC08  F00D         	call	_sprintf	;wreg free
 19012                           
 19013                           ; BSR set to: 0
 19014                           ;main.c: 2706: putsUSART(wrkbuf);
 19015  00279E  0E01               	movlw	high _wrkbuf
 19016  0027A0  0100               	movlb	0	; () banked
 19017  0027A2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19018  0027A4  0E79               	movlw	low _wrkbuf
 19019  0027A6  6F61               	movwf	?_putsUSART& (0+255),b
 19020  0027A8  EC41  F02C         	call	_putsUSART	;wreg free
 19021                           
 19022                           ;main.c: 2707: putsUSART((char *) "\r\n");
 19023  0027AC  0E74               	movlw	high (STR_220+50)
 19024  0027AE  0100               	movlb	0	; () banked
 19025  0027B0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19026  0027B2  0E72               	movlw	low (STR_220+50)
 19027  0027B4  6F61               	movwf	?_putsUSART& (0+255),b
 19028  0027B6  EC41  F02C         	call	_putsUSART	;wreg free
 19029                           
 19030                           ;main.c: 2709: if (COMSTATbits.RXWARN) {
 19031  0027BA  A274               	btfss	3956,1,c	;volatile
 19032  0027BC  D007               	goto	l15696
 19033                           
 19034                           ;main.c: 2710: putsUSART((char *) "Receiver in Error State Warning (128 > RERRCNT ? 96)\
      +                          r\n");
 19035  0027BE  0E73               	movlw	high STR_226
 19036  0027C0  0100               	movlb	0	; () banked
 19037  0027C2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19038  0027C4  0E2F               	movlw	low STR_226
 19039  0027C6  6F61               	movwf	?_putsUSART& (0+255),b
 19040  0027C8  EC41  F02C         	call	_putsUSART	;wreg free
 19041  0027CC                     l15696:
 19042                           
 19043                           ;main.c: 2711: }
 19044                           ;main.c: 2713: if (COMSTATbits.RXBP) {
 19045  0027CC  A674               	btfss	3956,3,c	;volatile
 19046  0027CE  D007               	goto	l15700
 19047                           
 19048                           ;main.c: 2714: putsUSART((char *) "Receiver in Error State Bus Passive (RERRCNT ? 128)\r
      +                          \n");
 19049  0027D0  0E73               	movlw	high STR_227
 19050  0027D2  0100               	movlb	0	; () banked
 19051  0027D4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19052  0027D6  0ED4               	movlw	low STR_227
 19053  0027D8  6F61               	movwf	?_putsUSART& (0+255),b
 19054  0027DA  EC41  F02C         	call	_putsUSART	;wreg free
 19055  0027DE                     l15700:
 19056                           
 19057                           ;main.c: 2715: }
 19058                           ;main.c: 2717: if (COMSTATbits.EWARN) {
 19059  0027DE  A074               	btfss	3956,0,c	;volatile
 19060  0027E0  D007               	goto	l1241
 19061                           
 19062                           ;main.c: 2718: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 19063  0027E2  0E74               	movlw	high STR_228
 19064  0027E4  0100               	movlb	0	; () banked
 19065  0027E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19066  0027E8  0E75               	movlw	low STR_228
 19067  0027EA  6F61               	movwf	?_putsUSART& (0+255),b
 19068  0027EC  EC41  F02C         	call	_putsUSART	;wreg free
 19069  0027F0                     l1241:
 19070  0027F0  0012               	return	
 19071  0027F2                     __end_of_printErrors:
 19072                           	opt stack 0
 19073                           tblptru	equ	0xFF8
 19074                           tblptrh	equ	0xFF7
 19075                           tblptrl	equ	0xFF6
 19076                           tablat	equ	0xFF5
 19077                           prodh	equ	0xFF4
 19078                           prodl	equ	0xFF3
 19079                           intcon	equ	0xFF2
 19080                           indf0	equ	0xFEF
 19081                           postinc0	equ	0xFEE
 19082                           fsr0h	equ	0xFEA
 19083                           fsr0l	equ	0xFE9
 19084                           wreg	equ	0xFE8
 19085                           indf1	equ	0xFE7
 19086                           postinc1	equ	0xFE6
 19087                           postdec1	equ	0xFE5
 19088                           fsr1h	equ	0xFE2
 19089                           fsr1l	equ	0xFE1
 19090                           indf2	equ	0xFDF
 19091                           postinc2	equ	0xFDE
 19092                           postdec2	equ	0xFDD
 19093                           plusw2	equ	0xFDB
 19094                           fsr2h	equ	0xFDA
 19095                           fsr2l	equ	0xFD9
 19096                           status	equ	0xFD8
 19097                           
 19098 ;; *************** function _printStatistics *****************
 19099 ;; Defined at:
 19100 ;;		line 2638 in file "main.c"
 19101 ;; Parameters:    Size  Location     Type
 19102 ;;		None
 19103 ;; Auto vars:     Size  Location     Type
 19104 ;;		None
 19105 ;; Return value:  Size  Location     Type
 19106 ;;		None               void
 19107 ;; Registers used:
 19108 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19109 ;; Tracked objects:
 19110 ;;		On entry : F/0
 19111 ;;		On exit  : 0/0
 19112 ;;		Unchanged: 0/0
 19113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19114 ;;      Params:         0       0       0       0       0       0       0
 19115 ;;      Locals:         0       8       0       0       0       0       0
 19116 ;;      Temps:          0       0       0       0       0       0       0
 19117 ;;      Totals:         0       8       0       0       0       0       0
 19118 ;;Total ram usage:        8 bytes
 19119 ;; Hardware stack levels used:    1
 19120 ;; Hardware stack levels required when called:    5
 19121 ;; This function calls:
 19122 ;;		_putsUSART
 19123 ;;		_sprintf
 19124 ;; This function is called by:
 19125 ;;		_doModeVerbose
 19126 ;; This function uses a non-reentrant model
 19127 ;;
 19128                           
 19129                           	psect	text39
 19130  0035A6                     __ptext39:
 19131                           	opt stack 0
 19132  0035A6                     _printStatistics:
 19133                           	opt stack 24
 19134                           
 19135                           ; BSR set to: 0
 19136                           ;main.c: 2639: putsUSART((char *) "Sent CAN frames: ");
 19137                           
 19138                           ;incstack = 0
 19139                           ;incstack = 0
 19140  0035A6  0E7D               	movlw	high STR_183
 19141  0035A8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19142  0035AA  0EB9               	movlw	low STR_183
 19143  0035AC  6F61               	movwf	?_putsUSART& (0+255),b
 19144  0035AE  EC41  F02C         	call	_putsUSART	;wreg free
 19145                           
 19146                           ;main.c: 2640: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames);
 19147  0035B2  662B               	tstfsz	_bHex,c
 19148  0035B4  D005               	goto	l15548
 19149  0035B6  0E7F               	movlw	high STR_185
 19150  0035B8  0100               	movlb	0	; () banked
 19151  0035BA  6F95               	movwf	(_printStatistics$1476+1)& (0+255),b
 19152  0035BC  0EDE               	movlw	low STR_185
 19153  0035BE  D004               	goto	L26
 19154  0035C0                     l15548:
 19155  0035C0  0E7F               	movlw	high STR_184
 19156  0035C2  0100               	movlb	0	; () banked
 19157  0035C4  6F95               	movwf	(_printStatistics$1476+1)& (0+255),b
 19158  0035C6  0E5C               	movlw	low STR_184
 19159  0035C8                     L26:
 19160  0035C8  6F94               	movwf	_printStatistics$1476& (0+255),b
 19161                           
 19162                           ; BSR set to: 0
 19163  0035CA  0E01               	movlw	high _wrkbuf
 19164  0035CC  0100               	movlb	0	; () banked
 19165  0035CE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19166  0035D0  0E79               	movlw	low _wrkbuf
 19167  0035D2  6F76               	movwf	?_sprintf& (0+255),b
 19168  0035D4  C094  F078         	movff	_printStatistics$1476,?_sprintf+2
 19169  0035D8  C095  F079         	movff	_printStatistics$1476+1,?_sprintf+3
 19170  0035DC  C114  F07A         	movff	_cntTxFrames,?_sprintf+4
 19171  0035E0  C115  F07B         	movff	_cntTxFrames+1,?_sprintf+5
 19172  0035E4  C116  F07C         	movff	_cntTxFrames+2,?_sprintf+6
 19173  0035E8  C117  F07D         	movff	_cntTxFrames+3,?_sprintf+7
 19174  0035EC  EC08  F00D         	call	_sprintf	;wreg free
 19175                           
 19176                           ; BSR set to: 0
 19177                           ;main.c: 2641: putsUSART(wrkbuf);
 19178  0035F0  0E01               	movlw	high _wrkbuf
 19179  0035F2  0100               	movlb	0	; () banked
 19180  0035F4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19181  0035F6  0E79               	movlw	low _wrkbuf
 19182  0035F8  6F61               	movwf	?_putsUSART& (0+255),b
 19183  0035FA  EC41  F02C         	call	_putsUSART	;wreg free
 19184                           
 19185                           ;main.c: 2642: putsUSART((char *) "\r\n");
 19186  0035FE  0E74               	movlw	high (STR_220+50)
 19187  003600  0100               	movlb	0	; () banked
 19188  003602  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19189  003604  0E72               	movlw	low (STR_220+50)
 19190  003606  6F61               	movwf	?_putsUSART& (0+255),b
 19191  003608  EC41  F02C         	call	_putsUSART	;wreg free
 19192                           
 19193                           ;main.c: 2644: putsUSART((char *) "Sent CAN bytes: ");
 19194  00360C  0E7D               	movlw	high STR_187
 19195  00360E  0100               	movlb	0	; () banked
 19196  003610  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19197  003612  0EED               	movlw	low STR_187
 19198  003614  6F61               	movwf	?_putsUSART& (0+255),b
 19199  003616  EC41  F02C         	call	_putsUSART	;wreg free
 19200                           
 19201                           ;main.c: 2645: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes);
 19202  00361A  662B               	tstfsz	_bHex,c
 19203  00361C  D005               	goto	l15562
 19204  00361E  0E7F               	movlw	high STR_185
 19205  003620  0100               	movlb	0	; () banked
 19206  003622  6F97               	movwf	(_printStatistics$1482+1)& (0+255),b
 19207  003624  0EDE               	movlw	low STR_185
 19208  003626  D004               	goto	L27
 19209  003628                     l15562:
 19210  003628  0E7F               	movlw	high STR_184
 19211  00362A  0100               	movlb	0	; () banked
 19212  00362C  6F97               	movwf	(_printStatistics$1482+1)& (0+255),b
 19213  00362E  0E5C               	movlw	low STR_184
 19214  003630                     L27:
 19215  003630  6F96               	movwf	_printStatistics$1482& (0+255),b
 19216                           
 19217                           ; BSR set to: 0
 19218  003632  0E01               	movlw	high _wrkbuf
 19219  003634  0100               	movlb	0	; () banked
 19220  003636  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19221  003638  0E79               	movlw	low _wrkbuf
 19222  00363A  6F76               	movwf	?_sprintf& (0+255),b
 19223  00363C  C096  F078         	movff	_printStatistics$1482,?_sprintf+2
 19224  003640  C097  F079         	movff	_printStatistics$1482+1,?_sprintf+3
 19225  003644  C110  F07A         	movff	_cntTxBytes,?_sprintf+4
 19226  003648  C111  F07B         	movff	_cntTxBytes+1,?_sprintf+5
 19227  00364C  C112  F07C         	movff	_cntTxBytes+2,?_sprintf+6
 19228  003650  C113  F07D         	movff	_cntTxBytes+3,?_sprintf+7
 19229  003654  EC08  F00D         	call	_sprintf	;wreg free
 19230                           
 19231                           ; BSR set to: 0
 19232                           ;main.c: 2646: putsUSART(wrkbuf);
 19233  003658  0E01               	movlw	high _wrkbuf
 19234  00365A  0100               	movlb	0	; () banked
 19235  00365C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19236  00365E  0E79               	movlw	low _wrkbuf
 19237  003660  6F61               	movwf	?_putsUSART& (0+255),b
 19238  003662  EC41  F02C         	call	_putsUSART	;wreg free
 19239                           
 19240                           ;main.c: 2647: putsUSART((char *) "\r\n");
 19241  003666  0E74               	movlw	high (STR_220+50)
 19242  003668  0100               	movlb	0	; () banked
 19243  00366A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19244  00366C  0E72               	movlw	low (STR_220+50)
 19245  00366E  6F61               	movwf	?_putsUSART& (0+255),b
 19246  003670  EC41  F02C         	call	_putsUSART	;wreg free
 19247                           
 19248                           ;main.c: 2649: putsUSART((char *) "Received CAN frames: ");
 19249  003674  0E7C               	movlw	high STR_191
 19250  003676  0100               	movlb	0	; () banked
 19251  003678  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19252  00367A  0ECB               	movlw	low STR_191
 19253  00367C  6F61               	movwf	?_putsUSART& (0+255),b
 19254  00367E  EC41  F02C         	call	_putsUSART	;wreg free
 19255                           
 19256                           ;main.c: 2650: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames);
 19257  003682  662B               	tstfsz	_bHex,c
 19258  003684  D005               	goto	l15576
 19259  003686  0E7F               	movlw	high STR_185
 19260  003688  0100               	movlb	0	; () banked
 19261  00368A  6F99               	movwf	(_printStatistics$1488+1)& (0+255),b
 19262  00368C  0EDE               	movlw	low STR_185
 19263  00368E  D004               	goto	L28
 19264  003690                     l15576:
 19265  003690  0E7F               	movlw	high STR_184
 19266  003692  0100               	movlb	0	; () banked
 19267  003694  6F99               	movwf	(_printStatistics$1488+1)& (0+255),b
 19268  003696  0E5C               	movlw	low STR_184
 19269  003698                     L28:
 19270  003698  6F98               	movwf	_printStatistics$1488& (0+255),b
 19271                           
 19272                           ; BSR set to: 0
 19273  00369A  0E01               	movlw	high _wrkbuf
 19274  00369C  0100               	movlb	0	; () banked
 19275  00369E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19276  0036A0  0E79               	movlw	low _wrkbuf
 19277  0036A2  6F76               	movwf	?_sprintf& (0+255),b
 19278  0036A4  C098  F078         	movff	_printStatistics$1488,?_sprintf+2
 19279  0036A8  C099  F079         	movff	_printStatistics$1488+1,?_sprintf+3
 19280  0036AC  C10C  F07A         	movff	_cntRxFrames,?_sprintf+4
 19281  0036B0  C10D  F07B         	movff	_cntRxFrames+1,?_sprintf+5
 19282  0036B4  C10E  F07C         	movff	_cntRxFrames+2,?_sprintf+6
 19283  0036B8  C10F  F07D         	movff	_cntRxFrames+3,?_sprintf+7
 19284  0036BC  EC08  F00D         	call	_sprintf	;wreg free
 19285                           
 19286                           ; BSR set to: 0
 19287                           ;main.c: 2651: putsUSART(wrkbuf);
 19288  0036C0  0E01               	movlw	high _wrkbuf
 19289  0036C2  0100               	movlb	0	; () banked
 19290  0036C4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19291  0036C6  0E79               	movlw	low _wrkbuf
 19292  0036C8  6F61               	movwf	?_putsUSART& (0+255),b
 19293  0036CA  EC41  F02C         	call	_putsUSART	;wreg free
 19294                           
 19295                           ;main.c: 2652: putsUSART((char *) "\r\n");
 19296  0036CE  0E74               	movlw	high (STR_220+50)
 19297  0036D0  0100               	movlb	0	; () banked
 19298  0036D2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19299  0036D4  0E72               	movlw	low (STR_220+50)
 19300  0036D6  6F61               	movwf	?_putsUSART& (0+255),b
 19301  0036D8  EC41  F02C         	call	_putsUSART	;wreg free
 19302                           
 19303                           ;main.c: 2654: putsUSART((char *) "Received CAN bytes: ");
 19304  0036DC  0E7C               	movlw	high STR_195
 19305  0036DE  0100               	movlb	0	; () banked
 19306  0036E0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19307  0036E2  0EE1               	movlw	low STR_195
 19308  0036E4  6F61               	movwf	?_putsUSART& (0+255),b
 19309  0036E6  EC41  F02C         	call	_putsUSART	;wreg free
 19310                           
 19311                           ;main.c: 2655: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes);
 19312  0036EA  662B               	tstfsz	_bHex,c
 19313  0036EC  D005               	goto	l15590
 19314  0036EE  0E7F               	movlw	high STR_185
 19315  0036F0  0100               	movlb	0	; () banked
 19316  0036F2  6F9B               	movwf	(_printStatistics$1494+1)& (0+255),b
 19317  0036F4  0EDE               	movlw	low STR_185
 19318  0036F6  D004               	goto	L29
 19319  0036F8                     l15590:
 19320  0036F8  0E7F               	movlw	high STR_184
 19321  0036FA  0100               	movlb	0	; () banked
 19322  0036FC  6F9B               	movwf	(_printStatistics$1494+1)& (0+255),b
 19323  0036FE  0E5C               	movlw	low STR_184
 19324  003700                     L29:
 19325  003700  6F9A               	movwf	_printStatistics$1494& (0+255),b
 19326                           
 19327                           ; BSR set to: 0
 19328  003702  0E01               	movlw	high _wrkbuf
 19329  003704  0100               	movlb	0	; () banked
 19330  003706  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19331  003708  0E79               	movlw	low _wrkbuf
 19332  00370A  6F76               	movwf	?_sprintf& (0+255),b
 19333  00370C  C09A  F078         	movff	_printStatistics$1494,?_sprintf+2
 19334  003710  C09B  F079         	movff	_printStatistics$1494+1,?_sprintf+3
 19335  003714  C108  F07A         	movff	_cntRxBytes,?_sprintf+4
 19336  003718  C109  F07B         	movff	_cntRxBytes+1,?_sprintf+5
 19337  00371C  C10A  F07C         	movff	_cntRxBytes+2,?_sprintf+6
 19338  003720  C10B  F07D         	movff	_cntRxBytes+3,?_sprintf+7
 19339  003724  EC08  F00D         	call	_sprintf	;wreg free
 19340                           
 19341                           ; BSR set to: 0
 19342                           ;main.c: 2656: putsUSART(wrkbuf);
 19343  003728  0E01               	movlw	high _wrkbuf
 19344  00372A  0100               	movlb	0	; () banked
 19345  00372C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19346  00372E  0E79               	movlw	low _wrkbuf
 19347  003730  6F61               	movwf	?_putsUSART& (0+255),b
 19348  003732  EC41  F02C         	call	_putsUSART	;wreg free
 19349                           
 19350                           ;main.c: 2657: putsUSART((char *) "\r\n");
 19351  003736  0E74               	movlw	high (STR_220+50)
 19352  003738  0100               	movlb	0	; () banked
 19353  00373A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19354  00373C  0E72               	movlw	low (STR_220+50)
 19355  00373E  6F61               	movwf	?_putsUSART& (0+255),b
 19356  003740  EF41  F02C         	goto	_putsUSART	;wreg free
 19357  003744                     __end_of_printStatistics:
 19358                           	opt stack 0
 19359                           tblptru	equ	0xFF8
 19360                           tblptrh	equ	0xFF7
 19361                           tblptrl	equ	0xFF6
 19362                           tablat	equ	0xFF5
 19363                           prodh	equ	0xFF4
 19364                           prodl	equ	0xFF3
 19365                           intcon	equ	0xFF2
 19366                           indf0	equ	0xFEF
 19367                           postinc0	equ	0xFEE
 19368                           fsr0h	equ	0xFEA
 19369                           fsr0l	equ	0xFE9
 19370                           wreg	equ	0xFE8
 19371                           indf1	equ	0xFE7
 19372                           postinc1	equ	0xFE6
 19373                           postdec1	equ	0xFE5
 19374                           fsr1h	equ	0xFE2
 19375                           fsr1l	equ	0xFE1
 19376                           indf2	equ	0xFDF
 19377                           postinc2	equ	0xFDE
 19378                           postdec2	equ	0xFDD
 19379                           plusw2	equ	0xFDB
 19380                           fsr2h	equ	0xFDA
 19381                           fsr2l	equ	0xFD9
 19382                           status	equ	0xFD8
 19383                           
 19384 ;; *************** function _atoi *****************
 19385 ;; Defined at:
 19386 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 19387 ;; Parameters:    Size  Location     Type
 19388 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 19389 ;;		 -> STR_124(2), STR_122(2), STR_120(2), STR_118(2), 
 19390 ;;		 -> STR_115(2), STR_111(2), STR_109(2), STR_107(2), 
 19391 ;;		 -> STR_105(2), STR_102(2), STR_85(2), STR_83(2), 
 19392 ;;		 -> STR_81(2), STR_54(2), STR_52(2), STR_50(2), 
 19393 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19394 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 19395 ;; Auto vars:     Size  Location     Type
 19396 ;;  a               2   11[BANK0 ] int 
 19397 ;;  sign            1   10[BANK0 ] unsigned char 
 19398 ;; Return value:  Size  Location     Type
 19399 ;;                  2    6[BANK0 ] int 
 19400 ;; Registers used:
 19401 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19402 ;; Tracked objects:
 19403 ;;		On entry : C/2
 19404 ;;		On exit  : F/0
 19405 ;;		Unchanged: 0/0
 19406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19407 ;;      Params:         0       2       0       0       0       0       0
 19408 ;;      Locals:         0       3       0       0       0       0       0
 19409 ;;      Temps:          0       2       0       0       0       0       0
 19410 ;;      Totals:         0       7       0       0       0       0       0
 19411 ;;Total ram usage:        7 bytes
 19412 ;; Hardware stack levels used:    1
 19413 ;; Hardware stack levels required when called:    4
 19414 ;; This function calls:
 19415 ;;		_isdigit
 19416 ;;		___wmul
 19417 ;; This function is called by:
 19418 ;;		_doModeVerbose
 19419 ;; This function uses a non-reentrant model
 19420 ;;
 19421                           
 19422                           	psect	text40
 19423  004086                     __ptext40:
 19424                           	opt stack 0
 19425  004086                     _atoi:
 19426                           	opt stack 25
 19427                           
 19428                           ;incstack = 0
 19429                           ;incstack = 0
 19430  004086  D003               	goto	l15508
 19431  004088                     l15506:
 19432  004088  0100               	movlb	0	; () banked
 19433  00408A  4B66               	infsnz	atoi@s& (0+255),f,b
 19434  00408C  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19435  00408E                     l15508:
 19436  00408E  0100               	movlb	0	; () banked
 19437  004090  D876               	call	PL18	;call to abstracted procedure
 19438  004092  64EA               	cpfsgt	fsr0h,c
 19439  004094  D003               	bra	u20727
 19440  004096  6EEA               	movwf	fsr0h,c
 19441  004098  50EF               	movf	indf0,w,c
 19442  00409A  D003               	bra	u20720
 19443  00409C                     u20727:
 19444  00409C  6EF7               	movwf	tblptrh,c
 19445  00409E  0008               	tblrd		*
 19446  0040A0  50F5               	movf	tablat,w,c
 19447  0040A2                     u20720:
 19448  0040A2  0A20               	xorlw	32
 19449  0040A4  E0F1               	bz	l15506
 19450  0040A6  0100               	movlb	0	; () banked
 19451  0040A8  D86A               	call	PL18	;call to abstracted procedure
 19452  0040AA  64EA               	cpfsgt	fsr0h,c
 19453  0040AC  D003               	bra	u20747
 19454  0040AE  6EEA               	movwf	fsr0h,c
 19455  0040B0  50EF               	movf	indf0,w,c
 19456  0040B2  D003               	bra	u20740
 19457  0040B4                     u20747:
 19458  0040B4  6EF7               	movwf	tblptrh,c
 19459  0040B6  0008               	tblrd		*
 19460  0040B8  50F5               	movf	tablat,w,c
 19461  0040BA                     u20740:
 19462  0040BA  0A09               	xorlw	9
 19463  0040BC  E0E5               	bz	l15506
 19464  0040BE  0100               	movlb	0	; () banked
 19465  0040C0  6B6B               	clrf	atoi@a& (0+255),b
 19466  0040C2  6B6C               	clrf	(atoi@a+1)& (0+255),b
 19467  0040C4  6B6A               	clrf	atoi@sign& (0+255),b
 19468                           
 19469                           ; BSR set to: 0
 19470  0040C6  D85B               	call	PL18	;call to abstracted procedure
 19471  0040C8  64EA               	cpfsgt	fsr0h,c
 19472  0040CA  D003               	bra	u20767
 19473  0040CC  6EEA               	movwf	fsr0h,c
 19474  0040CE  50EF               	movf	indf0,w,c
 19475  0040D0  D003               	bra	u20760
 19476  0040D2                     u20767:
 19477  0040D2  6EF7               	movwf	tblptrh,c
 19478  0040D4  0008               	tblrd		*
 19479  0040D6  50F5               	movf	tablat,w,c
 19480  0040D8                     u20760:
 19481  0040D8  0A2D               	xorlw	45
 19482  0040DA  E103               	bnz	l15516
 19483  0040DC  0100               	movlb	0	; () banked
 19484  0040DE  2B6A               	incf	atoi@sign& (0+255),f,b
 19485  0040E0  D00D               	goto	L30
 19486  0040E2                     l15516:
 19487  0040E2  0100               	movlb	0	; () banked
 19488  0040E4  D84C               	call	PL18	;call to abstracted procedure
 19489  0040E6  64EA               	cpfsgt	fsr0h,c
 19490  0040E8  D003               	bra	u20787
 19491  0040EA  6EEA               	movwf	fsr0h,c
 19492  0040EC  50EF               	movf	indf0,w,c
 19493  0040EE  D003               	bra	u20780
 19494  0040F0                     u20787:
 19495  0040F0  6EF7               	movwf	tblptrh,c
 19496  0040F2  0008               	tblrd		*
 19497  0040F4  50F5               	movf	tablat,w,c
 19498  0040F6                     u20780:
 19499  0040F6  0A2B               	xorlw	43
 19500  0040F8  E121               	bnz	l15524
 19501  0040FA                     l15518:
 19502  0040FA  0100               	movlb	0	; () banked
 19503  0040FC                     L30:
 19504  0040FC  4B66               	infsnz	atoi@s& (0+255),f,b
 19505  0040FE  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19506  004100  D01D               	goto	l15524
 19507  004102                     l15520:
 19508                           
 19509                           ; BSR set to: 0
 19510  004102  C06B  F060         	movff	atoi@a,?___wmul
 19511  004106  C06C  F061         	movff	atoi@a+1,?___wmul+1
 19512  00410A  6B63               	clrf	(?___wmul+3)& (0+255),b
 19513  00410C  0E0A               	movlw	10
 19514  00410E  6F62               	movwf	(?___wmul+2)& (0+255),b
 19515  004110  EC7E  F02E         	call	___wmul	;wreg free
 19516  004114  D834               	call	PL18	;call to abstracted procedure
 19517  004116  64EA               	cpfsgt	fsr0h,c
 19518  004118  D003               	bra	u20807
 19519  00411A  6EEA               	movwf	fsr0h,c
 19520  00411C  50EF               	movf	indf0,w,c
 19521  00411E  D003               	bra	u20800
 19522  004120                     u20807:
 19523  004120  6EF7               	movwf	tblptrh,c
 19524  004122  0008               	tblrd		*
 19525  004124  50F5               	movf	tablat,w,c
 19526  004126                     u20800:
 19527  004126  0100               	movlb	0	; () banked
 19528  004128  2760               	addwf	?___wmul& (0+255),f,b
 19529  00412A  0E00               	movlw	0
 19530  00412C  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 19531  00412E  0ED0               	movlw	208
 19532  004130  2560               	addwf	?___wmul& (0+255),w,b
 19533  004132  6F6B               	movwf	atoi@a& (0+255),b
 19534  004134  0EFF               	movlw	255
 19535  004136  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19536  004138  6F6C               	movwf	(atoi@a+1)& (0+255),b
 19537  00413A  D7DF               	goto	l15518
 19538  00413C                     l15524:
 19539  00413C  0100               	movlb	0	; () banked
 19540  00413E  D81F               	call	PL18	;call to abstracted procedure
 19541  004140  64EA               	cpfsgt	fsr0h,c
 19542  004142  D003               	bra	u20817
 19543  004144  6EEA               	movwf	fsr0h,c
 19544  004146  50EF               	movf	indf0,w,c
 19545  004148  D003               	bra	u20810
 19546  00414A                     u20817:
 19547  00414A  6EF7               	movwf	tblptrh,c
 19548  00414C  0008               	tblrd		*
 19549  00414E  50F5               	movf	tablat,w,c
 19550  004150                     u20810:
 19551  004150  ECF0  F02E         	call	_isdigit
 19552  004154  E2D6               	bc	l15520
 19553                           
 19554                           ; BSR set to: 0
 19555  004156  516A               	movf	atoi@sign& (0+255),w,b
 19556  004158  E00D               	bz	l2126
 19557                           
 19558                           ; BSR set to: 0
 19559  00415A  C06B  F068         	movff	atoi@a,??_atoi
 19560  00415E  C06C  F069         	movff	atoi@a+1,??_atoi+1
 19561  004162  1F68               	comf	??_atoi& (0+255),f,b
 19562  004164  1F69               	comf	(??_atoi+1)& (0+255),f,b
 19563  004166  4B68               	infsnz	??_atoi& (0+255),f,b
 19564  004168  2B69               	incf	(??_atoi+1)& (0+255),f,b
 19565  00416A  C068  F066         	movff	??_atoi,?_atoi
 19566  00416E  C069  F067         	movff	??_atoi+1,?_atoi+1
 19567  004172  D004               	goto	l2127
 19568  004174                     l2126:
 19569                           
 19570                           ; BSR set to: 0
 19571  004174  C06B  F066         	movff	atoi@a,?_atoi
 19572  004178  C06C  F067         	movff	atoi@a+1,?_atoi+1
 19573  00417C                     l2127:
 19574                           
 19575                           ; BSR set to: 0
 19576  00417C  0012               	return	
 19577  00417E                     __end_of_atoi:
 19578                           	opt stack 0
 19579  00417E                     PL18:
 19580                           	opt stack 25
 19581  00417E  5166               	movf	atoi@s& (0+255),w,b
 19582  004180  6EF6               	movwf	tblptrl,c
 19583  004182  6EE9               	movwf	fsr0l,c
 19584  004184  0E05               	movlw	(high __ramtop+-1)
 19585  004186  6EEA               	movwf	fsr0h,c
 19586  004188  5167               	movf	(atoi@s+1)& (0+255),w,b
 19587  00418A  0012               	return	
 19588  00418C                     __end_ofPL18:
 19589                           	opt stack 0
 19590                           tblptru	equ	0xFF8
 19591                           tblptrh	equ	0xFF7
 19592                           tblptrl	equ	0xFF6
 19593                           tablat	equ	0xFF5
 19594                           prodh	equ	0xFF4
 19595                           prodl	equ	0xFF3
 19596                           intcon	equ	0xFF2
 19597                           indf0	equ	0xFEF
 19598                           postinc0	equ	0xFEE
 19599                           fsr0h	equ	0xFEA
 19600                           fsr0l	equ	0xFE9
 19601                           wreg	equ	0xFE8
 19602                           indf1	equ	0xFE7
 19603                           postinc1	equ	0xFE6
 19604                           postdec1	equ	0xFE5
 19605                           fsr1h	equ	0xFE2
 19606                           fsr1l	equ	0xFE1
 19607                           indf2	equ	0xFDF
 19608                           postinc2	equ	0xFDE
 19609                           postdec2	equ	0xFDD
 19610                           plusw2	equ	0xFDB
 19611                           fsr2h	equ	0xFDA
 19612                           fsr2l	equ	0xFD9
 19613                           status	equ	0xFD8
 19614                           
 19615 ;; *************** function _strtok *****************
 19616 ;; Defined at:
 19617 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 19618 ;; Parameters:    Size  Location     Type
 19619 ;;  s1              2   12[BANK0 ] PTR unsigned char 
 19620 ;;		 -> NULL(0), cmdbuf(80), 
 19621 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
 19622 ;;		 -> STR_124(2), STR_122(2), STR_120(2), STR_118(2), 
 19623 ;;		 -> STR_115(2), STR_111(2), STR_109(2), STR_107(2), 
 19624 ;;		 -> STR_105(2), STR_102(2), STR_85(2), STR_83(2), 
 19625 ;;		 -> STR_81(2), STR_54(2), STR_52(2), STR_50(2), 
 19626 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19627 ;;		 -> STR_31(2), STR_30(2), 
 19628 ;; Auto vars:     Size  Location     Type
 19629 ;;		None
 19630 ;; Return value:  Size  Location     Type
 19631 ;;                  2   12[BANK0 ] PTR unsigned char 
 19632 ;; Registers used:
 19633 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19634 ;; Tracked objects:
 19635 ;;		On entry : F/0
 19636 ;;		On exit  : F/0
 19637 ;;		Unchanged: 0/0
 19638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19639 ;;      Params:         0       4       0       0       0       0       0
 19640 ;;      Locals:         0       0       0       0       0       0       0
 19641 ;;      Temps:          0       0       0       0       0       0       0
 19642 ;;      Totals:         0       4       0       0       0       0       0
 19643 ;;Total ram usage:        4 bytes
 19644 ;; Hardware stack levels used:    1
 19645 ;; Hardware stack levels required when called:    5
 19646 ;; This function calls:
 19647 ;;		_strspn
 19648 ;;		_strcspn
 19649 ;; This function is called by:
 19650 ;;		_doModeVerbose
 19651 ;; This function uses a non-reentrant model
 19652 ;;
 19653                           
 19654                           	psect	text41
 19655  0051CA                     __ptext41:
 19656                           	opt stack 0
 19657  0051CA                     _strtok:
 19658                           	opt stack 24
 19659                           
 19660                           ; BSR set to: 0
 19661                           
 19662                           ; BSR set to: 0
 19663                           ;incstack = 0
 19664                           ;incstack = 0
 19665  0051CA  516D               	movf	(strtok@s1+1)& (0+255),w,b
 19666  0051CC  116C               	iorwf	strtok@s1& (0+255),w,b
 19667  0051CE  E104               	bnz	l12066
 19668                           
 19669                           ; BSR set to: 0
 19670  0051D0  C026  F06C         	movff	strtok@sp,strtok@s1
 19671  0051D4  C027  F06D         	movff	strtok@sp+1,strtok@s1+1
 19672  0051D8                     l12066:
 19673                           
 19674                           ; BSR set to: 0
 19675  0051D8  516D               	movf	(strtok@s1+1)& (0+255),w,b
 19676  0051DA  116C               	iorwf	strtok@s1& (0+255),w,b
 19677  0051DC  E016               	bz	L31
 19678                           
 19679                           ; BSR set to: 0
 19680                           
 19681                           ; BSR set to: 0
 19682  0051DE  C06C  F066         	movff	strtok@s1,?_strspn
 19683  0051E2  C06D  F067         	movff	strtok@s1+1,?_strspn+1
 19684  0051E6  C06E  F068         	movff	strtok@s2,?_strspn+2
 19685  0051EA  C06F  F069         	movff	strtok@s2+1,?_strspn+3
 19686  0051EE  EC30  F02D         	call	_strspn	;wreg free
 19687  0051F2  5166               	movf	?_strspn& (0+255),w,b
 19688  0051F4  276C               	addwf	strtok@s1& (0+255),f,b
 19689  0051F6  5167               	movf	(?_strspn+1)& (0+255),w,b
 19690  0051F8  236D               	addwfc	(strtok@s1+1)& (0+255),f,b
 19691                           
 19692                           ; BSR set to: 0
 19693  0051FA  C06C  FFD9         	movff	strtok@s1,fsr2l
 19694  0051FE  C06D  FFDA         	movff	strtok@s1+1,fsr2h
 19695  005202  50DF               	movf	indf2,w,c
 19696  005204  E105               	bnz	l12076
 19697                           
 19698                           ; BSR set to: 0
 19699  005206  6A26               	clrf	strtok@sp,c
 19700  005208  6A27               	clrf	strtok@sp+1,c
 19701  00520A                     L31:
 19702  00520A  6B6C               	clrf	?_strtok& (0+255),b
 19703  00520C  6B6D               	clrf	(?_strtok+1)& (0+255),b
 19704  00520E  D025               	goto	l2619
 19705  005210                     l12076:
 19706                           
 19707                           ; BSR set to: 0
 19708  005210  C06C  F066         	movff	strtok@s1,?_strcspn
 19709  005214  C06D  F067         	movff	strtok@s1+1,?_strcspn+1
 19710  005218  C06E  F068         	movff	strtok@s2,?_strcspn+2
 19711  00521C  C06F  F069         	movff	strtok@s2+1,?_strcspn+3
 19712  005220  EC0E  F02D         	call	_strcspn	;wreg free
 19713  005224  5166               	movf	?_strcspn& (0+255),w,b
 19714  005226  256C               	addwf	strtok@s1& (0+255),w,b
 19715  005228  6E26               	movwf	strtok@sp,c
 19716  00522A  5167               	movf	(?_strcspn+1)& (0+255),w,b
 19717  00522C  216D               	addwfc	(strtok@s1+1)& (0+255),w,b
 19718  00522E  6E27               	movwf	strtok@sp+1,c
 19719                           
 19720                           ; BSR set to: 0
 19721  005230  C026  FFD9         	movff	strtok@sp,fsr2l
 19722  005234  C027  FFDA         	movff	strtok@sp+1,fsr2h
 19723  005238  50DF               	movf	indf2,w,c
 19724  00523A  E009               	bz	l2621
 19725                           
 19726                           ; BSR set to: 0
 19727  00523C  C026  FFD9         	movff	strtok@sp,fsr2l
 19728  005240  C027  FFDA         	movff	strtok@sp+1,fsr2h
 19729  005244  0E00               	movlw	0
 19730  005246  6EDF               	movwf	indf2,c
 19731                           
 19732                           ; BSR set to: 0
 19733  005248  4A26               	infsnz	strtok@sp,f,c
 19734  00524A  2A27               	incf	strtok@sp+1,f,c
 19735  00524C  D002               	goto	l2622
 19736  00524E                     l2621:
 19737                           
 19738                           ; BSR set to: 0
 19739  00524E  6A26               	clrf	strtok@sp,c
 19740  005250  6A27               	clrf	strtok@sp+1,c
 19741  005252                     l2622:
 19742                           
 19743                           ; BSR set to: 0
 19744  005252  C06C  F06C         	movff	strtok@s1,?_strtok
 19745  005256  C06D  F06D         	movff	strtok@s1+1,?_strtok+1
 19746  00525A                     l2619:
 19747                           
 19748                           ; BSR set to: 0
 19749  00525A  0012               	return	
 19750  00525C                     __end_of_strtok:
 19751                           	opt stack 0
 19752                           tblptru	equ	0xFF8
 19753                           tblptrh	equ	0xFF7
 19754                           tblptrl	equ	0xFF6
 19755                           tablat	equ	0xFF5
 19756                           prodh	equ	0xFF4
 19757                           prodl	equ	0xFF3
 19758                           intcon	equ	0xFF2
 19759                           indf0	equ	0xFEF
 19760                           postinc0	equ	0xFEE
 19761                           fsr0h	equ	0xFEA
 19762                           fsr0l	equ	0xFE9
 19763                           wreg	equ	0xFE8
 19764                           indf1	equ	0xFE7
 19765                           postinc1	equ	0xFE6
 19766                           postdec1	equ	0xFE5
 19767                           fsr1h	equ	0xFE2
 19768                           fsr1l	equ	0xFE1
 19769                           indf2	equ	0xFDF
 19770                           postinc2	equ	0xFDE
 19771                           postdec2	equ	0xFDD
 19772                           plusw2	equ	0xFDB
 19773                           fsr2h	equ	0xFDA
 19774                           fsr2l	equ	0xFD9
 19775                           status	equ	0xFD8
 19776                           
 19777 ;; *************** function _strcspn *****************
 19778 ;; Defined at:
 19779 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 19780 ;; Parameters:    Size  Location     Type
 19781 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19782 ;;		 -> NULL(0), cmdbuf(80), 
 19783 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19784 ;;		 -> STR_124(2), STR_122(2), STR_120(2), STR_118(2), 
 19785 ;;		 -> STR_115(2), STR_111(2), STR_109(2), STR_107(2), 
 19786 ;;		 -> STR_105(2), STR_102(2), STR_85(2), STR_83(2), 
 19787 ;;		 -> STR_81(2), STR_54(2), STR_52(2), STR_50(2), 
 19788 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19789 ;;		 -> STR_31(2), STR_30(2), 
 19790 ;; Auto vars:     Size  Location     Type
 19791 ;;  i               2   10[BANK0 ] unsigned int 
 19792 ;; Return value:  Size  Location     Type
 19793 ;;                  2    6[BANK0 ] unsigned int 
 19794 ;; Registers used:
 19795 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19796 ;; Tracked objects:
 19797 ;;		On entry : F/0
 19798 ;;		On exit  : F/0
 19799 ;;		Unchanged: 0/0
 19800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19801 ;;      Params:         0       4       0       0       0       0       0
 19802 ;;      Locals:         0       2       0       0       0       0       0
 19803 ;;      Temps:          0       0       0       0       0       0       0
 19804 ;;      Totals:         0       6       0       0       0       0       0
 19805 ;;Total ram usage:        6 bytes
 19806 ;; Hardware stack levels used:    1
 19807 ;; Hardware stack levels required when called:    4
 19808 ;; This function calls:
 19809 ;;		_strchr
 19810 ;; This function is called by:
 19811 ;;		_strtok
 19812 ;; This function uses a non-reentrant model
 19813 ;;
 19814                           
 19815                           	psect	text42
 19816  005A1C                     __ptext42:
 19817                           	opt stack 0
 19818  005A1C                     _strcspn:
 19819                           	opt stack 24
 19820                           
 19821                           ; BSR set to: 0
 19822                           
 19823                           ; BSR set to: 0
 19824                           ;incstack = 0
 19825                           ;incstack = 0
 19826  005A1C  6B6A               	clrf	strcspn@i& (0+255),b
 19827  005A1E  6B6B               	clrf	(strcspn@i+1)& (0+255),b
 19828  005A20  D004               	goto	l13752
 19829  005A22                     l13750:
 19830                           
 19831                           ; BSR set to: 0
 19832  005A22  4B66               	infsnz	strcspn@s1& (0+255),f,b
 19833  005A24  2B67               	incf	(strcspn@s1+1)& (0+255),f,b
 19834  005A26  4B6A               	infsnz	strcspn@i& (0+255),f,b
 19835  005A28  2B6B               	incf	(strcspn@i+1)& (0+255),f,b
 19836  005A2A                     l13752:
 19837                           
 19838                           ; BSR set to: 0
 19839  005A2A  C066  FFD9         	movff	strcspn@s1,fsr2l
 19840  005A2E  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 19841  005A32  50DF               	movf	indf2,w,c
 19842  005A34  E010               	bz	l2646
 19843                           
 19844                           ; BSR set to: 0
 19845  005A36  C068  F060         	movff	strcspn@s2,?_strchr
 19846  005A3A  C069  F061         	movff	strcspn@s2+1,?_strchr+1
 19847  005A3E  C066  FFD9         	movff	strcspn@s1,fsr2l
 19848  005A42  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 19849  005A46  50DF               	movf	indf2,w,c
 19850  005A48  6F62               	movwf	(?_strchr+2)& (0+255),b
 19851  005A4A  6B63               	clrf	(?_strchr+3)& (0+255),b
 19852  005A4C  EC55  F02B         	call	_strchr	;wreg free
 19853  005A50  5161               	movf	(?_strchr+1)& (0+255),w,b
 19854  005A52  1160               	iorwf	?_strchr& (0+255),w,b
 19855  005A54  E0E6               	bz	l13750
 19856  005A56                     l2646:
 19857                           
 19858                           ; BSR set to: 0
 19859  005A56  C06A  F066         	movff	strcspn@i,?_strcspn
 19860  005A5A  C06B  F067         	movff	strcspn@i+1,?_strcspn+1
 19861                           
 19862                           ; BSR set to: 0
 19863  005A5E  0012               	return	
 19864  005A60                     __end_of_strcspn:
 19865                           	opt stack 0
 19866                           tblptru	equ	0xFF8
 19867                           tblptrh	equ	0xFF7
 19868                           tblptrl	equ	0xFF6
 19869                           tablat	equ	0xFF5
 19870                           prodh	equ	0xFF4
 19871                           prodl	equ	0xFF3
 19872                           intcon	equ	0xFF2
 19873                           indf0	equ	0xFEF
 19874                           postinc0	equ	0xFEE
 19875                           fsr0h	equ	0xFEA
 19876                           fsr0l	equ	0xFE9
 19877                           wreg	equ	0xFE8
 19878                           indf1	equ	0xFE7
 19879                           postinc1	equ	0xFE6
 19880                           postdec1	equ	0xFE5
 19881                           fsr1h	equ	0xFE2
 19882                           fsr1l	equ	0xFE1
 19883                           indf2	equ	0xFDF
 19884                           postinc2	equ	0xFDE
 19885                           postdec2	equ	0xFDD
 19886                           plusw2	equ	0xFDB
 19887                           fsr2h	equ	0xFDA
 19888                           fsr2l	equ	0xFD9
 19889                           status	equ	0xFD8
 19890                           
 19891 ;; *************** function _strspn *****************
 19892 ;; Defined at:
 19893 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 19894 ;; Parameters:    Size  Location     Type
 19895 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19896 ;;		 -> NULL(0), cmdbuf(80), 
 19897 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19898 ;;		 -> STR_124(2), STR_122(2), STR_120(2), STR_118(2), 
 19899 ;;		 -> STR_115(2), STR_111(2), STR_109(2), STR_107(2), 
 19900 ;;		 -> STR_105(2), STR_102(2), STR_85(2), STR_83(2), 
 19901 ;;		 -> STR_81(2), STR_54(2), STR_52(2), STR_50(2), 
 19902 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19903 ;;		 -> STR_31(2), STR_30(2), 
 19904 ;; Auto vars:     Size  Location     Type
 19905 ;;  i               2   10[BANK0 ] unsigned int 
 19906 ;; Return value:  Size  Location     Type
 19907 ;;                  2    6[BANK0 ] unsigned int 
 19908 ;; Registers used:
 19909 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19910 ;; Tracked objects:
 19911 ;;		On entry : F/0
 19912 ;;		On exit  : F/0
 19913 ;;		Unchanged: 0/0
 19914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19915 ;;      Params:         0       4       0       0       0       0       0
 19916 ;;      Locals:         0       2       0       0       0       0       0
 19917 ;;      Temps:          0       0       0       0       0       0       0
 19918 ;;      Totals:         0       6       0       0       0       0       0
 19919 ;;Total ram usage:        6 bytes
 19920 ;; Hardware stack levels used:    1
 19921 ;; Hardware stack levels required when called:    4
 19922 ;; This function calls:
 19923 ;;		_strchr
 19924 ;; This function is called by:
 19925 ;;		_strtok
 19926 ;; This function uses a non-reentrant model
 19927 ;;
 19928                           
 19929                           	psect	text43
 19930  005A60                     __ptext43:
 19931                           	opt stack 0
 19932  005A60                     _strspn:
 19933                           	opt stack 24
 19934                           
 19935                           ; BSR set to: 0
 19936                           
 19937                           ; BSR set to: 0
 19938                           ;incstack = 0
 19939                           ;incstack = 0
 19940  005A60  6B6A               	clrf	strspn@i& (0+255),b
 19941  005A62  6B6B               	clrf	(strspn@i+1)& (0+255),b
 19942  005A64  D004               	goto	l13744
 19943  005A66                     l13742:
 19944                           
 19945                           ; BSR set to: 0
 19946  005A66  4B66               	infsnz	strspn@s1& (0+255),f,b
 19947  005A68  2B67               	incf	(strspn@s1+1)& (0+255),f,b
 19948  005A6A  4B6A               	infsnz	strspn@i& (0+255),f,b
 19949  005A6C  2B6B               	incf	(strspn@i+1)& (0+255),f,b
 19950  005A6E                     l13744:
 19951                           
 19952                           ; BSR set to: 0
 19953  005A6E  C066  FFD9         	movff	strspn@s1,fsr2l
 19954  005A72  C067  FFDA         	movff	strspn@s1+1,fsr2h
 19955  005A76  50DF               	movf	indf2,w,c
 19956  005A78  E010               	bz	l2665
 19957                           
 19958                           ; BSR set to: 0
 19959  005A7A  C068  F060         	movff	strspn@s2,?_strchr
 19960  005A7E  C069  F061         	movff	strspn@s2+1,?_strchr+1
 19961  005A82  C066  FFD9         	movff	strspn@s1,fsr2l
 19962  005A86  C067  FFDA         	movff	strspn@s1+1,fsr2h
 19963  005A8A  50DF               	movf	indf2,w,c
 19964  005A8C  6F62               	movwf	(?_strchr+2)& (0+255),b
 19965  005A8E  6B63               	clrf	(?_strchr+3)& (0+255),b
 19966  005A90  EC55  F02B         	call	_strchr	;wreg free
 19967  005A94  5161               	movf	(?_strchr+1)& (0+255),w,b
 19968  005A96  1160               	iorwf	?_strchr& (0+255),w,b
 19969  005A98  E1E6               	bnz	l13742
 19970  005A9A                     l2665:
 19971                           
 19972                           ; BSR set to: 0
 19973  005A9A  C06A  F066         	movff	strspn@i,?_strspn
 19974  005A9E  C06B  F067         	movff	strspn@i+1,?_strspn+1
 19975                           
 19976                           ; BSR set to: 0
 19977  005AA2  0012               	return	
 19978  005AA4                     __end_of_strspn:
 19979                           	opt stack 0
 19980                           tblptru	equ	0xFF8
 19981                           tblptrh	equ	0xFF7
 19982                           tblptrl	equ	0xFF6
 19983                           tablat	equ	0xFF5
 19984                           prodh	equ	0xFF4
 19985                           prodl	equ	0xFF3
 19986                           intcon	equ	0xFF2
 19987                           indf0	equ	0xFEF
 19988                           postinc0	equ	0xFEE
 19989                           fsr0h	equ	0xFEA
 19990                           fsr0l	equ	0xFE9
 19991                           wreg	equ	0xFE8
 19992                           indf1	equ	0xFE7
 19993                           postinc1	equ	0xFE6
 19994                           postdec1	equ	0xFE5
 19995                           fsr1h	equ	0xFE2
 19996                           fsr1l	equ	0xFE1
 19997                           indf2	equ	0xFDF
 19998                           postinc2	equ	0xFDE
 19999                           postdec2	equ	0xFDD
 20000                           plusw2	equ	0xFDB
 20001                           fsr2h	equ	0xFDA
 20002                           fsr2l	equ	0xFD9
 20003                           status	equ	0xFD8
 20004                           
 20005 ;; *************** function _strchr *****************
 20006 ;; Defined at:
 20007 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 20008 ;; Parameters:    Size  Location     Type
 20009 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 20010 ;;		 -> STR_124(2), STR_122(2), STR_120(2), STR_118(2), 
 20011 ;;		 -> STR_115(2), STR_111(2), STR_109(2), STR_107(2), 
 20012 ;;		 -> STR_105(2), STR_102(2), STR_85(2), STR_83(2), 
 20013 ;;		 -> STR_81(2), STR_54(2), STR_52(2), STR_50(2), 
 20014 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20015 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 20016 ;;  chr             2    2[BANK0 ] int 
 20017 ;; Auto vars:     Size  Location     Type
 20018 ;;		None
 20019 ;; Return value:  Size  Location     Type
 20020 ;;                  2    0[BANK0 ] PTR unsigned char 
 20021 ;; Registers used:
 20022 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20023 ;; Tracked objects:
 20024 ;;		On entry : F/0
 20025 ;;		On exit  : F/0
 20026 ;;		Unchanged: 0/0
 20027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20028 ;;      Params:         0       4       0       0       0       0       0
 20029 ;;      Locals:         0       0       0       0       0       0       0
 20030 ;;      Temps:          0       2       0       0       0       0       0
 20031 ;;      Totals:         0       6       0       0       0       0       0
 20032 ;;Total ram usage:        6 bytes
 20033 ;; Hardware stack levels used:    1
 20034 ;; Hardware stack levels required when called:    3
 20035 ;; This function calls:
 20036 ;;		Nothing
 20037 ;; This function is called by:
 20038 ;;		_doModeVerbose
 20039 ;;		_strcspn
 20040 ;;		_strspn
 20041 ;; This function uses a non-reentrant model
 20042 ;;
 20043                           
 20044                           	psect	text44
 20045  0056AA                     __ptext44:
 20046                           	opt stack 0
 20047  0056AA                     _strchr:
 20048                           	opt stack 26
 20049  0056AA                     l2567:
 20050                           
 20051                           ; BSR set to: 0
 20052  0056AA  0100               	movlb	0	; () banked
 20053  0056AC  5160               	movf	strchr@ptr& (0+255),w,b
 20054  0056AE  6EF6               	movwf	tblptrl,c
 20055  0056B0  6EE9               	movwf	fsr0l,c
 20056  0056B2  0E05               	movlw	(high __ramtop+-1)
 20057  0056B4  6EEA               	movwf	fsr0h,c
 20058  0056B6  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20059  0056B8  64EA               	cpfsgt	fsr0h,c
 20060  0056BA  D003               	bra	u15507
 20061  0056BC  6EEA               	movwf	fsr0h,c
 20062  0056BE  50EF               	movf	indf0,w,c
 20063  0056C0  D003               	bra	u15500
 20064  0056C2                     u15507:
 20065  0056C2  6EF7               	movwf	tblptrh,c
 20066  0056C4  0008               	tblrd		*
 20067  0056C6  50F5               	movf	tablat,w,c
 20068  0056C8                     u15500:
 20069  0056C8  0100               	movlb	0	; () banked
 20070  0056CA  1962               	xorwf	strchr@chr& (0+255),w,b
 20071  0056CC  E105               	bnz	l12350
 20072                           
 20073                           ; BSR set to: 0
 20074  0056CE  C060  F060         	movff	strchr@ptr,?_strchr
 20075  0056D2  C061  F061         	movff	strchr@ptr+1,?_strchr+1
 20076  0056D6  D019               	goto	l2569
 20077  0056D8                     l12350:
 20078                           
 20079                           ; BSR set to: 0
 20080  0056D8  5160               	movf	strchr@ptr& (0+255),w,b
 20081  0056DA  6F64               	movwf	??_strchr& (0+255),b
 20082  0056DC  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20083  0056DE  6F65               	movwf	(??_strchr+1)& (0+255),b
 20084  0056E0  4B60               	infsnz	strchr@ptr& (0+255),f,b
 20085  0056E2  2B61               	incf	(strchr@ptr+1)& (0+255),f,b
 20086  0056E4  5164               	movf	??_strchr& (0+255),w,b
 20087  0056E6  6EF6               	movwf	tblptrl,c
 20088  0056E8  6EE9               	movwf	fsr0l,c
 20089  0056EA  0E05               	movlw	(high __ramtop+-1)
 20090  0056EC  6EEA               	movwf	fsr0h,c
 20091  0056EE  5165               	movf	(??_strchr+1)& (0+255),w,b
 20092  0056F0  64EA               	cpfsgt	fsr0h,c
 20093  0056F2  D003               	bra	u15527
 20094  0056F4  6EEA               	movwf	fsr0h,c
 20095  0056F6  50EF               	movf	indf0,w,c
 20096  0056F8  D003               	bra	u15520
 20097  0056FA                     u15527:
 20098  0056FA  6EF7               	movwf	tblptrh,c
 20099  0056FC  0008               	tblrd		*
 20100  0056FE  50F5               	movf	tablat,w,c
 20101  005700                     u15520:
 20102  005700  0900               	iorlw	0
 20103  005702  E1D3               	bnz	l2567
 20104  005704  0100               	movlb	0	; () banked
 20105  005706  6B60               	clrf	?_strchr& (0+255),b
 20106  005708  6B61               	clrf	(?_strchr+1)& (0+255),b
 20107  00570A                     l2569:
 20108                           
 20109                           ; BSR set to: 0
 20110  00570A  0012               	return	
 20111  00570C                     __end_of_strchr:
 20112                           	opt stack 0
 20113                           tblptru	equ	0xFF8
 20114                           tblptrh	equ	0xFF7
 20115                           tblptrl	equ	0xFF6
 20116                           tablat	equ	0xFF5
 20117                           prodh	equ	0xFF4
 20118                           prodl	equ	0xFF3
 20119                           intcon	equ	0xFF2
 20120                           indf0	equ	0xFEF
 20121                           postinc0	equ	0xFEE
 20122                           fsr0h	equ	0xFEA
 20123                           fsr0l	equ	0xFE9
 20124                           wreg	equ	0xFE8
 20125                           indf1	equ	0xFE7
 20126                           postinc1	equ	0xFE6
 20127                           postdec1	equ	0xFE5
 20128                           fsr1h	equ	0xFE2
 20129                           fsr1l	equ	0xFE1
 20130                           indf2	equ	0xFDF
 20131                           postinc2	equ	0xFDE
 20132                           postdec2	equ	0xFDD
 20133                           plusw2	equ	0xFDB
 20134                           fsr2h	equ	0xFDA
 20135                           fsr2l	equ	0xFD9
 20136                           status	equ	0xFD8
 20137                           
 20138 ;; *************** function _stristr *****************
 20139 ;; Defined at:
 20140 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 20141 ;; Parameters:    Size  Location     Type
 20142 ;;  s1              2   13[BANK0 ] PTR const unsigned char 
 20143 ;;		 -> NULL(0), cmdbuf(80), 
 20144 ;;  s2              2   15[BANK0 ] PTR const unsigned char 
 20145 ;;		 -> STR_152(2), STR_151(9), STR_150(3), STR_149(6), 
 20146 ;;		 -> STR_148(6), STR_147(8), STR_145(6), STR_143(5), 
 20147 ;;		 -> STR_141(8), STR_140(6), STR_139(9), STR_138(7), 
 20148 ;;		 -> STR_137(7), STR_136(5), STR_135(6), STR_134(9), 
 20149 ;;		 -> STR_132(11), STR_130(8), STR_128(4), STR_127(5), 
 20150 ;;		 -> STR_114(5), STR_101(7), STR_95(5), STR_80(5), 
 20151 ;;		 -> STR_49(5), STR_47(5), STR_45(5), STR_43(4), 
 20152 ;;		 -> STR_41(5), STR_38(3), STR_29(3), STR_20(7), 
 20153 ;;		 -> STR_18(8), STR_16(7), STR_14(9), STR_12(6), 
 20154 ;;		 -> STR_10(7), STR_8(5), STR_6(5), 
 20155 ;; Auto vars:     Size  Location     Type
 20156 ;;		None
 20157 ;; Return value:  Size  Location     Type
 20158 ;;                  2   13[BANK0 ] PTR unsigned char 
 20159 ;; Registers used:
 20160 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20161 ;; Tracked objects:
 20162 ;;		On entry : F/0
 20163 ;;		On exit  : F/0
 20164 ;;		Unchanged: 0/0
 20165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20166 ;;      Params:         0       4       0       0       0       0       0
 20167 ;;      Locals:         0       0       0       0       0       0       0
 20168 ;;      Temps:          0       0       0       0       0       0       0
 20169 ;;      Totals:         0       4       0       0       0       0       0
 20170 ;;Total ram usage:        4 bytes
 20171 ;; Hardware stack levels used:    1
 20172 ;; Hardware stack levels required when called:    5
 20173 ;; This function calls:
 20174 ;;		_strlen
 20175 ;;		_strnicmp
 20176 ;;		_strichr
 20177 ;; This function is called by:
 20178 ;;		_doModeVerbose
 20179 ;; This function uses a non-reentrant model
 20180 ;;
 20181                           
 20182                           	psect	text45
 20183  005476                     __ptext45:
 20184                           	opt stack 0
 20185  005476                     _stristr:
 20186                           	opt stack 24
 20187                           
 20188                           ; BSR set to: 0
 20189                           
 20190                           ; BSR set to: 0
 20191                           ;incstack = 0
 20192                           ;incstack = 0
 20193  005476  D02F               	goto	l15500
 20194  005478                     l15494:
 20195                           
 20196                           ; BSR set to: 0
 20197  005478  C06D  F064         	movff	stristr@s1,?_strnicmp
 20198  00547C  C06E  F065         	movff	stristr@s1+1,?_strnicmp+1
 20199  005480  C06F  F066         	movff	stristr@s2,?_strnicmp+2
 20200  005484  C070  F067         	movff	stristr@s2+1,?_strnicmp+3
 20201  005488  C06F  F060         	movff	stristr@s2,?_strlen
 20202  00548C  C070  F061         	movff	stristr@s2+1,?_strlen+1
 20203  005490  EC73  F02D         	call	_strlen	;wreg free
 20204  005494  C060  F068         	movff	?_strlen,?_strnicmp+4
 20205  005498  C061  F069         	movff	?_strlen+1,?_strnicmp+5
 20206  00549C  EC22  F02B         	call	_strnicmp	;wreg free
 20207  0054A0  5165               	movf	(?_strnicmp+1)& (0+255),w,b
 20208  0054A2  1164               	iorwf	?_strnicmp& (0+255),w,b
 20209  0054A4  E105               	bnz	l15498
 20210                           
 20211                           ; BSR set to: 0
 20212  0054A6  C06D  F06D         	movff	stristr@s1,?_stristr
 20213  0054AA  C06E  F06E         	movff	stristr@s1+1,?_stristr+1
 20214  0054AE  D01E               	goto	l2588
 20215  0054B0                     l15498:
 20216                           
 20217                           ; BSR set to: 0
 20218  0054B0  296D               	incf	stristr@s1& (0+255),w,b
 20219  0054B2  6F61               	movwf	?_strichr& (0+255),b
 20220  0054B4  0E00               	movlw	0
 20221  0054B6  216E               	addwfc	(stristr@s1+1)& (0+255),w,b
 20222  0054B8  6F62               	movwf	(?_strichr+1)& (0+255),b
 20223  0054BA  C06F  FFF6         	movff	stristr@s2,tblptrl
 20224  0054BE  C070  FFF7         	movff	stristr@s2+1,tblptrh
 20225  0054C2  0008               	tblrd		*
 20226  0054C4  50F5               	movf	tablat,w,c
 20227  0054C6  6F63               	movwf	(?_strichr+2)& (0+255),b
 20228  0054C8  6B64               	clrf	(?_strichr+3)& (0+255),b
 20229  0054CA  ECD2  F02D         	call	_strichr	;wreg free
 20230  0054CE  C061  F06D         	movff	?_strichr,stristr@s1
 20231  0054D2  C062  F06E         	movff	?_strichr+1,stristr@s1+1
 20232  0054D6                     l15500:
 20233                           
 20234                           ; BSR set to: 0
 20235  0054D6  516E               	movf	(stristr@s1+1)& (0+255),w,b
 20236  0054D8  116D               	iorwf	stristr@s1& (0+255),w,b
 20237  0054DA  E006               	bz	l2591
 20238                           
 20239                           ; BSR set to: 0
 20240  0054DC  C06D  FFD9         	movff	stristr@s1,fsr2l
 20241  0054E0  C06E  FFDA         	movff	stristr@s1+1,fsr2h
 20242  0054E4  50DF               	movf	indf2,w,c
 20243  0054E6  E1C8               	bnz	l15494
 20244  0054E8                     l2591:
 20245                           
 20246                           ; BSR set to: 0
 20247  0054E8  6B6D               	clrf	?_stristr& (0+255),b
 20248  0054EA  6B6E               	clrf	(?_stristr+1)& (0+255),b
 20249  0054EC                     l2588:
 20250                           
 20251                           ; BSR set to: 0
 20252  0054EC  0012               	return	
 20253  0054EE                     __end_of_stristr:
 20254                           	opt stack 0
 20255                           tblptru	equ	0xFF8
 20256                           tblptrh	equ	0xFF7
 20257                           tblptrl	equ	0xFF6
 20258                           tablat	equ	0xFF5
 20259                           prodh	equ	0xFF4
 20260                           prodl	equ	0xFF3
 20261                           intcon	equ	0xFF2
 20262                           indf0	equ	0xFEF
 20263                           postinc0	equ	0xFEE
 20264                           fsr0h	equ	0xFEA
 20265                           fsr0l	equ	0xFE9
 20266                           wreg	equ	0xFE8
 20267                           indf1	equ	0xFE7
 20268                           postinc1	equ	0xFE6
 20269                           postdec1	equ	0xFE5
 20270                           fsr1h	equ	0xFE2
 20271                           fsr1l	equ	0xFE1
 20272                           indf2	equ	0xFDF
 20273                           postinc2	equ	0xFDE
 20274                           postdec2	equ	0xFDD
 20275                           plusw2	equ	0xFDB
 20276                           fsr2h	equ	0xFDA
 20277                           fsr2l	equ	0xFD9
 20278                           status	equ	0xFD8
 20279                           
 20280 ;; *************** function _strichr *****************
 20281 ;; Defined at:
 20282 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 20283 ;; Parameters:    Size  Location     Type
 20284 ;;  ptr             2    1[BANK0 ] PTR const unsigned char 
 20285 ;;		 -> NULL(0), cmdbuf(80), 
 20286 ;;  chr             2    3[BANK0 ] int 
 20287 ;; Auto vars:     Size  Location     Type
 20288 ;;		None
 20289 ;; Return value:  Size  Location     Type
 20290 ;;                  2    1[BANK0 ] PTR unsigned char 
 20291 ;; Registers used:
 20292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20293 ;; Tracked objects:
 20294 ;;		On entry : F/0
 20295 ;;		On exit  : F/0
 20296 ;;		Unchanged: 0/0
 20297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20298 ;;      Params:         0       4       0       0       0       0       0
 20299 ;;      Locals:         0       0       0       0       0       0       0
 20300 ;;      Temps:          0       0       0       0       0       0       0
 20301 ;;      Totals:         0       4       0       0       0       0       0
 20302 ;;Total ram usage:        4 bytes
 20303 ;; Hardware stack levels used:    1
 20304 ;; Hardware stack levels required when called:    4
 20305 ;; This function calls:
 20306 ;;		_toupper
 20307 ;; This function is called by:
 20308 ;;		_stristr
 20309 ;; This function uses a non-reentrant model
 20310 ;;
 20311                           
 20312                           	psect	text46
 20313  005BA4                     __ptext46:
 20314                           	opt stack 0
 20315  005BA4                     _strichr:
 20316                           	opt stack 24
 20317                           
 20318                           ; BSR set to: 0
 20319                           
 20320                           ; BSR set to: 0
 20321                           ;incstack = 0
 20322                           ;incstack = 0
 20323  005BA4  5163               	movf	strichr@chr& (0+255),w,b
 20324  005BA6  EC2B  F02F         	call	_toupper
 20325  005BAA  6F63               	movwf	strichr@chr& (0+255),b
 20326  005BAC  6B64               	clrf	(strichr@chr+1)& (0+255),b
 20327  005BAE  D010               	goto	l16990
 20328  005BB0                     l16984:
 20329                           
 20330                           ; BSR set to: 0
 20331  005BB0  C061  FFD9         	movff	strichr@ptr,fsr2l
 20332  005BB4  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20333  005BB8  50DF               	movf	indf2,w,c
 20334  005BBA  EC2B  F02F         	call	_toupper
 20335  005BBE  1963               	xorwf	strichr@chr& (0+255),w,b
 20336  005BC0  E105               	bnz	l16988
 20337                           
 20338                           ; BSR set to: 0
 20339  005BC2  C061  F061         	movff	strichr@ptr,?_strichr
 20340  005BC6  C062  F062         	movff	strichr@ptr+1,?_strichr+1
 20341  005BCA  D00A               	goto	l2655
 20342  005BCC                     l16988:
 20343                           
 20344                           ; BSR set to: 0
 20345  005BCC  4B61               	infsnz	strichr@ptr& (0+255),f,b
 20346  005BCE  2B62               	incf	(strichr@ptr+1)& (0+255),f,b
 20347  005BD0                     l16990:
 20348                           
 20349                           ; BSR set to: 0
 20350  005BD0  C061  FFD9         	movff	strichr@ptr,fsr2l
 20351  005BD4  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20352  005BD8  50DF               	movf	indf2,w,c
 20353  005BDA  E1EA               	bnz	l16984
 20354                           
 20355                           ; BSR set to: 0
 20356  005BDC  6B61               	clrf	?_strichr& (0+255),b
 20357  005BDE  6B62               	clrf	(?_strichr+1)& (0+255),b
 20358  005BE0                     l2655:
 20359                           
 20360                           ; BSR set to: 0
 20361  005BE0  0012               	return	
 20362  005BE2                     __end_of_strichr:
 20363                           	opt stack 0
 20364                           tblptru	equ	0xFF8
 20365                           tblptrh	equ	0xFF7
 20366                           tblptrl	equ	0xFF6
 20367                           tablat	equ	0xFF5
 20368                           prodh	equ	0xFF4
 20369                           prodl	equ	0xFF3
 20370                           intcon	equ	0xFF2
 20371                           indf0	equ	0xFEF
 20372                           postinc0	equ	0xFEE
 20373                           fsr0h	equ	0xFEA
 20374                           fsr0l	equ	0xFE9
 20375                           wreg	equ	0xFE8
 20376                           indf1	equ	0xFE7
 20377                           postinc1	equ	0xFE6
 20378                           postdec1	equ	0xFE5
 20379                           fsr1h	equ	0xFE2
 20380                           fsr1l	equ	0xFE1
 20381                           indf2	equ	0xFDF
 20382                           postinc2	equ	0xFDE
 20383                           postdec2	equ	0xFDD
 20384                           plusw2	equ	0xFDB
 20385                           fsr2h	equ	0xFDA
 20386                           fsr2l	equ	0xFD9
 20387                           status	equ	0xFD8
 20388                           
 20389 ;; *************** function _strnicmp *****************
 20390 ;; Defined at:
 20391 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 20392 ;; Parameters:    Size  Location     Type
 20393 ;;  s1              2    4[BANK0 ] PTR const unsigned char 
 20394 ;;		 -> NULL(0), cmdbuf(80), 
 20395 ;;  s2              2    6[BANK0 ] PTR const unsigned char 
 20396 ;;		 -> STR_152(2), STR_151(9), STR_150(3), STR_149(6), 
 20397 ;;		 -> STR_148(6), STR_147(8), STR_145(6), STR_143(5), 
 20398 ;;		 -> STR_141(8), STR_140(6), STR_139(9), STR_138(7), 
 20399 ;;		 -> STR_137(7), STR_136(5), STR_135(6), STR_134(9), 
 20400 ;;		 -> STR_132(11), STR_130(8), STR_128(4), STR_127(5), 
 20401 ;;		 -> STR_114(5), STR_101(7), STR_95(5), STR_80(5), 
 20402 ;;		 -> STR_49(5), STR_47(5), STR_45(5), STR_43(4), 
 20403 ;;		 -> STR_41(5), STR_38(3), STR_29(3), STR_20(7), 
 20404 ;;		 -> STR_18(8), STR_16(7), STR_14(9), STR_12(6), 
 20405 ;;		 -> STR_10(7), STR_8(5), STR_6(5), 
 20406 ;;  len             2    8[BANK0 ] unsigned int 
 20407 ;; Auto vars:     Size  Location     Type
 20408 ;;  r               1   12[BANK0 ] char 
 20409 ;; Return value:  Size  Location     Type
 20410 ;;                  2    4[BANK0 ] int 
 20411 ;; Registers used:
 20412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20413 ;; Tracked objects:
 20414 ;;		On entry : F/0
 20415 ;;		On exit  : F/0
 20416 ;;		Unchanged: 0/0
 20417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20418 ;;      Params:         0       6       0       0       0       0       0
 20419 ;;      Locals:         0       1       0       0       0       0       0
 20420 ;;      Temps:          0       2       0       0       0       0       0
 20421 ;;      Totals:         0       9       0       0       0       0       0
 20422 ;;Total ram usage:        9 bytes
 20423 ;; Hardware stack levels used:    1
 20424 ;; Hardware stack levels required when called:    4
 20425 ;; This function calls:
 20426 ;;		_toupper
 20427 ;; This function is called by:
 20428 ;;		_stristr
 20429 ;; This function uses a non-reentrant model
 20430 ;;
 20431                           
 20432                           	psect	text47
 20433  005644                     __ptext47:
 20434                           	opt stack 0
 20435  005644                     _strnicmp:
 20436                           	opt stack 24
 20437                           
 20438                           ; BSR set to: 0
 20439                           
 20440                           ; BSR set to: 0
 20441                           ;incstack = 0
 20442                           ;incstack = 0
 20443  005644  D027               	goto	l16980
 20444  005646                     l16970:
 20445                           
 20446                           ; BSR set to: 0
 20447  005646  C066  FFF6         	movff	strnicmp@s2,tblptrl
 20448  00564A  C067  FFF7         	movff	strnicmp@s2+1,tblptrh
 20449  00564E  0008               	tblrd		*
 20450  005650  50F5               	movf	tablat,w,c
 20451  005652  EC2B  F02F         	call	_toupper
 20452  005656  6F6A               	movwf	??_strnicmp& (0+255),b
 20453  005658  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20454  00565C  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20455  005660  50DF               	movf	indf2,w,c
 20456  005662  EC2B  F02F         	call	_toupper
 20457  005666  6F6B               	movwf	(??_strnicmp+1)& (0+255),b
 20458  005668  516A               	movf	??_strnicmp& (0+255),w,b
 20459  00566A  5D6B               	subwf	(??_strnicmp+1)& (0+255),w,b
 20460  00566C  6F6C               	movwf	strnicmp@r& (0+255),b
 20461  00566E  0100               	movlb	0	; () banked
 20462  005670  676C               	tstfsz	strnicmp@r& (0+255),b
 20463  005672  D006               	goto	l16974
 20464                           
 20465                           ; BSR set to: 0
 20466  005674  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20467  005678  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20468  00567C  50DF               	movf	indf2,w,c
 20469  00567E  E106               	bnz	l16978
 20470  005680                     l16974:
 20471                           
 20472                           ; BSR set to: 0
 20473  005680  516C               	movf	strnicmp@r& (0+255),w,b
 20474  005682  6F64               	movwf	?_strnicmp& (0+255),b
 20475  005684  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20476  005686  BF64               	btfsc	?_strnicmp& (0+255),7,b
 20477  005688  0765               	decf	(?_strnicmp+1)& (0+255),f,b
 20478  00568A  D00E               	goto	l2607
 20479  00568C                     l16978:
 20480                           
 20481                           ; BSR set to: 0
 20482  00568C  4B64               	infsnz	strnicmp@s1& (0+255),f,b
 20483  00568E  2B65               	incf	(strnicmp@s1+1)& (0+255),f,b
 20484  005690  4B66               	infsnz	strnicmp@s2& (0+255),f,b
 20485  005692  2B67               	incf	(strnicmp@s2+1)& (0+255),f,b
 20486  005694                     l16980:
 20487                           
 20488                           ; BSR set to: 0
 20489  005694  0768               	decf	strnicmp@len& (0+255),f,b
 20490  005696  A0D8               	btfss	status,0,c
 20491  005698  0769               	decf	(strnicmp@len+1)& (0+255),f,b
 20492  00569A  0100               	movlb	0	; () banked
 20493  00569C  2968               	incf	strnicmp@len& (0+255),w,b
 20494  00569E  B4D8               	btfsc	status,2,c
 20495  0056A0  2969               	incf	(strnicmp@len+1)& (0+255),w,b
 20496  0056A2  E1D1               	bnz	l16970
 20497                           
 20498                           ; BSR set to: 0
 20499  0056A4  6B64               	clrf	?_strnicmp& (0+255),b
 20500  0056A6  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20501  0056A8                     l2607:
 20502                           
 20503                           ; BSR set to: 0
 20504  0056A8  0012               	return	
 20505  0056AA                     __end_of_strnicmp:
 20506                           	opt stack 0
 20507                           tblptru	equ	0xFF8
 20508                           tblptrh	equ	0xFF7
 20509                           tblptrl	equ	0xFF6
 20510                           tablat	equ	0xFF5
 20511                           prodh	equ	0xFF4
 20512                           prodl	equ	0xFF3
 20513                           intcon	equ	0xFF2
 20514                           indf0	equ	0xFEF
 20515                           postinc0	equ	0xFEE
 20516                           fsr0h	equ	0xFEA
 20517                           fsr0l	equ	0xFE9
 20518                           wreg	equ	0xFE8
 20519                           indf1	equ	0xFE7
 20520                           postinc1	equ	0xFE6
 20521                           postdec1	equ	0xFE5
 20522                           fsr1h	equ	0xFE2
 20523                           fsr1l	equ	0xFE1
 20524                           indf2	equ	0xFDF
 20525                           postinc2	equ	0xFDE
 20526                           postdec2	equ	0xFDD
 20527                           plusw2	equ	0xFDB
 20528                           fsr2h	equ	0xFDA
 20529                           fsr2l	equ	0xFD9
 20530                           status	equ	0xFD8
 20531                           
 20532 ;; *************** function _toupper *****************
 20533 ;; Defined at:
 20534 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 20535 ;; Parameters:    Size  Location     Type
 20536 ;;  c               1    wreg     unsigned char 
 20537 ;; Auto vars:     Size  Location     Type
 20538 ;;  c               1    0[BANK0 ] unsigned char 
 20539 ;; Return value:  Size  Location     Type
 20540 ;;                  1    wreg      unsigned char 
 20541 ;; Registers used:
 20542 ;;		wreg, status,2, status,0
 20543 ;; Tracked objects:
 20544 ;;		On entry : F/0
 20545 ;;		On exit  : F/0
 20546 ;;		Unchanged: 0/0
 20547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20548 ;;      Params:         0       0       0       0       0       0       0
 20549 ;;      Locals:         0       1       0       0       0       0       0
 20550 ;;      Temps:          0       0       0       0       0       0       0
 20551 ;;      Totals:         0       1       0       0       0       0       0
 20552 ;;Total ram usage:        1 bytes
 20553 ;; Hardware stack levels used:    1
 20554 ;; Hardware stack levels required when called:    3
 20555 ;; This function calls:
 20556 ;;		Nothing
 20557 ;; This function is called by:
 20558 ;;		_strnicmp
 20559 ;;		_strichr
 20560 ;; This function uses a non-reentrant model
 20561 ;;
 20562                           
 20563                           	psect	text48
 20564  005E56                     __ptext48:
 20565                           	opt stack 0
 20566  005E56                     _toupper:
 20567                           	opt stack 24
 20568                           
 20569                           ; BSR set to: 0
 20570                           ;incstack = 0
 20571                           ;incstack = 0
 20572                           ;toupper@c stored from wreg
 20573  005E56  CFE8 F060          	movff	wreg,toupper@c
 20574                           
 20575                           ; BSR set to: 0
 20576  005E5A  0E7B               	movlw	123
 20577  005E5C  6160               	cpfslt	toupper@c& (0+255),b
 20578  005E5E  D004               	goto	l16998
 20579                           
 20580                           ; BSR set to: 0
 20581  005E60  0E60               	movlw	96
 20582  005E62  6560               	cpfsgt	toupper@c& (0+255),b
 20583  005E64  D001               	goto	l16998
 20584                           
 20585                           ; BSR set to: 0
 20586  005E66  9B60               	bcf	toupper@c& (0+255),5,b
 20587  005E68                     l16998:
 20588                           
 20589                           ; BSR set to: 0
 20590  005E68  5160               	movf	toupper@c& (0+255),w,b
 20591                           
 20592                           ; BSR set to: 0
 20593  005E6A  0012               	return	
 20594  005E6C                     __end_of_toupper:
 20595                           	opt stack 0
 20596                           tblptru	equ	0xFF8
 20597                           tblptrh	equ	0xFF7
 20598                           tblptrl	equ	0xFF6
 20599                           tablat	equ	0xFF5
 20600                           prodh	equ	0xFF4
 20601                           prodl	equ	0xFF3
 20602                           intcon	equ	0xFF2
 20603                           indf0	equ	0xFEF
 20604                           postinc0	equ	0xFEE
 20605                           fsr0h	equ	0xFEA
 20606                           fsr0l	equ	0xFE9
 20607                           wreg	equ	0xFE8
 20608                           indf1	equ	0xFE7
 20609                           postinc1	equ	0xFE6
 20610                           postdec1	equ	0xFE5
 20611                           fsr1h	equ	0xFE2
 20612                           fsr1l	equ	0xFE1
 20613                           indf2	equ	0xFDF
 20614                           postinc2	equ	0xFDE
 20615                           postdec2	equ	0xFDD
 20616                           plusw2	equ	0xFDB
 20617                           fsr2h	equ	0xFDA
 20618                           fsr2l	equ	0xFD9
 20619                           status	equ	0xFD8
 20620                           
 20621 ;; *************** function _strlen *****************
 20622 ;; Defined at:
 20623 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 20624 ;; Parameters:    Size  Location     Type
 20625 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 20626 ;;		 -> printGUID@buf(3), STR_152(2), STR_151(9), STR_150(3), 
 20627 ;;		 -> STR_149(6), STR_148(6), STR_147(8), STR_145(6), 
 20628 ;;		 -> STR_143(5), STR_141(8), STR_140(6), STR_139(9), 
 20629 ;;		 -> STR_138(7), STR_137(7), STR_136(5), STR_135(6), 
 20630 ;;		 -> STR_134(9), STR_132(11), STR_130(8), STR_128(4), 
 20631 ;;		 -> STR_127(5), STR_114(5), STR_101(7), STR_95(5), 
 20632 ;;		 -> STR_80(5), wrkbuf(80), STR_49(5), STR_47(5), 
 20633 ;;		 -> STR_45(5), STR_43(4), STR_41(5), STR_38(3), 
 20634 ;;		 -> STR_29(3), STR_20(7), STR_18(8), STR_16(7), 
 20635 ;;		 -> STR_14(9), STR_12(6), STR_10(7), STR_8(5), 
 20636 ;;		 -> STR_6(5), cmdbuf(80), 
 20637 ;; Auto vars:     Size  Location     Type
 20638 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
 20639 ;;		 -> printGUID@buf(3), STR_152(2), STR_151(9), STR_150(3), 
 20640 ;;		 -> STR_149(6), STR_148(6), STR_147(8), STR_145(6), 
 20641 ;;		 -> STR_143(5), STR_141(8), STR_140(6), STR_139(9), 
 20642 ;;		 -> STR_138(7), STR_137(7), STR_136(5), STR_135(6), 
 20643 ;;		 -> STR_134(9), STR_132(11), STR_130(8), STR_128(4), 
 20644 ;;		 -> STR_127(5), STR_114(5), STR_101(7), STR_95(5), 
 20645 ;;		 -> STR_80(5), wrkbuf(80), STR_49(5), STR_47(5), 
 20646 ;;		 -> STR_45(5), STR_43(4), STR_41(5), STR_38(3), 
 20647 ;;		 -> STR_29(3), STR_20(7), STR_18(8), STR_16(7), 
 20648 ;;		 -> STR_14(9), STR_12(6), STR_10(7), STR_8(5), 
 20649 ;;		 -> STR_6(5), cmdbuf(80), 
 20650 ;; Return value:  Size  Location     Type
 20651 ;;                  2    0[BANK0 ] unsigned int 
 20652 ;; Registers used:
 20653 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20654 ;; Tracked objects:
 20655 ;;		On entry : F/0
 20656 ;;		On exit  : F/0
 20657 ;;		Unchanged: 0/0
 20658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20659 ;;      Params:         0       2       0       0       0       0       0
 20660 ;;      Locals:         0       2       0       0       0       0       0
 20661 ;;      Temps:          0       0       0       0       0       0       0
 20662 ;;      Totals:         0       4       0       0       0       0       0
 20663 ;;Total ram usage:        4 bytes
 20664 ;; Hardware stack levels used:    1
 20665 ;; Hardware stack levels required when called:    3
 20666 ;; This function calls:
 20667 ;;		Nothing
 20668 ;; This function is called by:
 20669 ;;		_doModeSLCAN
 20670 ;;		_receiveSendEventSLCAN
 20671 ;;		_printGUID
 20672 ;;		_hexStringToBytes
 20673 ;;		_stristr
 20674 ;; This function uses a non-reentrant model
 20675 ;;
 20676                           
 20677                           	psect	text49
 20678  005AE6                     __ptext49:
 20679                           	opt stack 0
 20680  005AE6                     _strlen:
 20681                           	opt stack 25
 20682                           
 20683                           ; BSR set to: 0
 20684                           
 20685                           ; BSR set to: 0
 20686                           ;incstack = 0
 20687                           ;incstack = 0
 20688  005AE6  C060  F062         	movff	strlen@s,strlen@cp
 20689  005AEA  C061  F063         	movff	strlen@s+1,strlen@cp+1
 20690  005AEE  D003               	goto	l13274
 20691  005AF0                     l13272:
 20692  005AF0  0100               	movlb	0	; () banked
 20693  005AF2  4B62               	infsnz	strlen@cp& (0+255),f,b
 20694  005AF4  2B63               	incf	(strlen@cp+1)& (0+255),f,b
 20695  005AF6                     l13274:
 20696                           
 20697                           ; BSR set to: 0
 20698  005AF6  5162               	movf	strlen@cp& (0+255),w,b
 20699  005AF8  6EF6               	movwf	tblptrl,c
 20700  005AFA  6EE9               	movwf	fsr0l,c
 20701  005AFC  0E05               	movlw	(high __ramtop+-1)
 20702  005AFE  6EEA               	movwf	fsr0h,c
 20703  005B00  5163               	movf	(strlen@cp+1)& (0+255),w,b
 20704  005B02  64EA               	cpfsgt	fsr0h,c
 20705  005B04  D003               	bra	u17247
 20706  005B06  6EEA               	movwf	fsr0h,c
 20707  005B08  50EF               	movf	indf0,w,c
 20708  005B0A  D003               	bra	u17240
 20709  005B0C                     u17247:
 20710  005B0C  6EF7               	movwf	tblptrh,c
 20711  005B0E  0008               	tblrd		*
 20712  005B10  50F5               	movf	tablat,w,c
 20713  005B12                     u17240:
 20714  005B12  0900               	iorlw	0
 20715  005B14  E1ED               	bnz	l13272
 20716  005B16  0100               	movlb	0	; () banked
 20717  005B18  5160               	movf	strlen@s& (0+255),w,b
 20718  005B1A  5D62               	subwf	strlen@cp& (0+255),w,b
 20719  005B1C  6F60               	movwf	?_strlen& (0+255),b
 20720  005B1E  5161               	movf	(strlen@s+1)& (0+255),w,b
 20721  005B20  5963               	subwfb	(strlen@cp+1)& (0+255),w,b
 20722  005B22  6F61               	movwf	(?_strlen+1)& (0+255),b
 20723                           
 20724                           ; BSR set to: 0
 20725  005B24  0012               	return	
 20726  005B26                     __end_of_strlen:
 20727                           	opt stack 0
 20728                           tblptru	equ	0xFF8
 20729                           tblptrh	equ	0xFF7
 20730                           tblptrl	equ	0xFF6
 20731                           tablat	equ	0xFF5
 20732                           prodh	equ	0xFF4
 20733                           prodl	equ	0xFF3
 20734                           intcon	equ	0xFF2
 20735                           indf0	equ	0xFEF
 20736                           postinc0	equ	0xFEE
 20737                           fsr0h	equ	0xFEA
 20738                           fsr0l	equ	0xFE9
 20739                           wreg	equ	0xFE8
 20740                           indf1	equ	0xFE7
 20741                           postinc1	equ	0xFE6
 20742                           postdec1	equ	0xFE5
 20743                           fsr1h	equ	0xFE2
 20744                           fsr1l	equ	0xFE1
 20745                           indf2	equ	0xFDF
 20746                           postinc2	equ	0xFDE
 20747                           postdec2	equ	0xFDD
 20748                           plusw2	equ	0xFDB
 20749                           fsr2h	equ	0xFDA
 20750                           fsr2l	equ	0xFD9
 20751                           status	equ	0xFD8
 20752                           
 20753 ;; *************** function _receivePrintEventVerbose *****************
 20754 ;; Defined at:
 20755 ;;		line 1921 in file "main.c"
 20756 ;; Parameters:    Size  Location     Type
 20757 ;;		None
 20758 ;; Auto vars:     Size  Location     Type
 20759 ;;  i               1   69[BANK0 ] unsigned char 
 20760 ;; Return value:  Size  Location     Type
 20761 ;;                  1    wreg      enum E15660
 20762 ;; Registers used:
 20763 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20764 ;; Tracked objects:
 20765 ;;		On entry : E/1
 20766 ;;		On exit  : 0/0
 20767 ;;		Unchanged: 0/0
 20768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20769 ;;      Params:         0       0       0       0       0       0       0
 20770 ;;      Locals:         0      13       0       0       0       0       0
 20771 ;;      Temps:          0       5       0       0       0       0       0
 20772 ;;      Totals:         0      18       0       0       0       0       0
 20773 ;;Total ram usage:       18 bytes
 20774 ;; Hardware stack levels used:    1
 20775 ;; Hardware stack levels required when called:    6
 20776 ;; This function calls:
 20777 ;;		_putsUSART
 20778 ;;		_sprintf
 20779 ;;		_getVSCPFrame
 20780 ;; This function is called by:
 20781 ;;		_doModeVerbose
 20782 ;; This function uses a non-reentrant model
 20783 ;;
 20784                           
 20785                           	psect	text50
 20786  0027F2                     __ptext50:
 20787                           	opt stack 0
 20788  0027F2                     _receivePrintEventVerbose:
 20789                           	opt stack 23
 20790                           
 20791                           ;main.c: 1922: uint8_t i;
 20792                           ;main.c: 1924: if (getVSCPFrame(&vscpClass,
 20793                           ;main.c: 1925: &vscpType,
 20794                           ;main.c: 1926: &vscpNodeId,
 20795                           ;main.c: 1927: &vscpPriority,
 20796                           ;main.c: 1928: &vscpSize,
 20797                           ;main.c: 1929: vscpData)) {
 20798                           
 20799                           ; BSR set to: 0
 20800                           ;incstack = 0
 20801                           ;incstack = 0
 20802  0027F2  0E3E               	movlw	low _vscpType
 20803  0027F4  0100               	movlb	0	; () banked
 20804  0027F6  6F73               	movwf	?_getVSCPFrame& (0+255),b
 20805  0027F8  0E3B               	movlw	low _vscpNodeId
 20806  0027FA  6F74               	movwf	(?_getVSCPFrame+1)& (0+255),b
 20807  0027FC  0E3C               	movlw	low _vscpPriority
 20808  0027FE  6F75               	movwf	(?_getVSCPFrame+2)& (0+255),b
 20809  002800  0E3D               	movlw	low _vscpSize
 20810  002802  6F76               	movwf	(?_getVSCPFrame+3)& (0+255),b
 20811  002804  0E01               	movlw	high _vscpData
 20812  002806  6F78               	movwf	(?_getVSCPFrame+5)& (0+255),b
 20813  002808  0EE1               	movlw	low _vscpData
 20814  00280A  6F77               	movwf	(?_getVSCPFrame+4)& (0+255),b
 20815  00280C  0E37               	movlw	_vscpClass& (0+255)
 20816  00280E  EC77  F029         	call	_getVSCPFrame
 20817  002812  0900               	iorlw	0
 20818  002814  E101 D135          	bz	l15480
 20819                           
 20820                           ; BSR set to: 0
 20821                           ;main.c: 1932: cntRxFrames++;
 20822  002818  0101               	movlb	1	; () banked
 20823  00281A  2B0C               	incf	_cntRxFrames& (0+255),f,b
 20824  00281C  0E00               	movlw	0
 20825  00281E  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 20826  002820  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 20827  002822  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 20828                           
 20829                           ;main.c: 1933: cntRxBytes += vscpSize;
 20830  002824  503D               	movf	_vscpSize,w,c
 20831  002826  2708               	addwf	_cntRxBytes& (0+255),f,b
 20832  002828  0E00               	movlw	0
 20833  00282A  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 20834  00282C  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 20835  00282E  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 20836                           
 20837                           ; BSR set to: 1
 20838                           ;main.c: 1935: putsUSART((char *) "<Prio=");
 20839  002830  0E7F               	movlw	high STR_162
 20840  002832  0100               	movlb	0	; () banked
 20841  002834  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20842  002836  0E2B               	movlw	low STR_162
 20843  002838  6F61               	movwf	?_putsUSART& (0+255),b
 20844  00283A  EC41  F02C         	call	_putsUSART	;wreg free
 20845                           
 20846                           ;main.c: 1936: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority);
 20847  00283E  662B               	tstfsz	_bHex,c
 20848  002840  D005               	goto	l15398
 20849  002842  0E7F               	movlw	high STR_60
 20850  002844  0100               	movlb	0	; () banked
 20851  002846  6F9A               	movwf	(_receivePrintEventVerbose$1383+1)& (0+255),b
 20852  002848  0EEE               	movlw	low STR_60
 20853  00284A  D004               	goto	L32
 20854  00284C                     l15398:
 20855  00284C  0E7F               	movlw	high STR_59
 20856  00284E  0100               	movlb	0	; () banked
 20857  002850  6F9A               	movwf	(_receivePrintEventVerbose$1383+1)& (0+255),b
 20858  002852  0E4E               	movlw	low STR_59
 20859  002854                     L32:
 20860  002854  6F99               	movwf	_receivePrintEventVerbose$1383& (0+255),b
 20861                           
 20862                           ; BSR set to: 0
 20863  002856  0E01               	movlw	high _wrkbuf
 20864  002858  0100               	movlb	0	; () banked
 20865  00285A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20866  00285C  0E79               	movlw	low _wrkbuf
 20867  00285E  6F76               	movwf	?_sprintf& (0+255),b
 20868  002860  C099  F078         	movff	_receivePrintEventVerbose$1383,?_sprintf+2
 20869  002864  C09A  F079         	movff	_receivePrintEventVerbose$1383+1,?_sprintf+3
 20870  002868  C03C  F07A         	movff	_vscpPriority,?_sprintf+4
 20871  00286C  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 20872  00286E  EC08  F00D         	call	_sprintf	;wreg free
 20873                           
 20874                           ; BSR set to: 0
 20875                           ;main.c: 1937: putsUSART(wrkbuf);
 20876  002872  0E01               	movlw	high _wrkbuf
 20877  002874  0100               	movlb	0	; () banked
 20878  002876  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20879  002878  0E79               	movlw	low _wrkbuf
 20880  00287A  6F61               	movwf	?_putsUSART& (0+255),b
 20881  00287C  EC41  F02C         	call	_putsUSART	;wreg free
 20882                           
 20883                           ;main.c: 1938: putsUSART((char *) ",class=");
 20884  002880  0E7E               	movlw	high STR_165
 20885  002882  0100               	movlb	0	; () banked
 20886  002884  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20887  002886  0EDF               	movlw	low STR_165
 20888  002888  6F61               	movwf	?_putsUSART& (0+255),b
 20889  00288A  EC41  F02C         	call	_putsUSART	;wreg free
 20890                           
 20891                           ;main.c: 1939: sprintf(wrkbuf, bHex ? "0x%04X" : "%d", vscpClass);
 20892  00288E  662B               	tstfsz	_bHex,c
 20893  002890  D005               	goto	l15410
 20894  002892  0E7F               	movlw	high STR_60
 20895  002894  0100               	movlb	0	; () banked
 20896  002896  6F9C               	movwf	(_receivePrintEventVerbose$1388+1)& (0+255),b
 20897  002898  0EEE               	movlw	low STR_60
 20898  00289A  D004               	goto	L33
 20899  00289C                     l15410:
 20900  00289C  0E7F               	movlw	high STR_166
 20901  00289E  0100               	movlb	0	; () banked
 20902  0028A0  6F9C               	movwf	(_receivePrintEventVerbose$1388+1)& (0+255),b
 20903  0028A2  0E55               	movlw	low STR_166
 20904  0028A4                     L33:
 20905  0028A4  6F9B               	movwf	_receivePrintEventVerbose$1388& (0+255),b
 20906                           
 20907                           ; BSR set to: 0
 20908  0028A6  0E01               	movlw	high _wrkbuf
 20909  0028A8  0100               	movlb	0	; () banked
 20910  0028AA  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20911  0028AC  0E79               	movlw	low _wrkbuf
 20912  0028AE  6F76               	movwf	?_sprintf& (0+255),b
 20913  0028B0  C09B  F078         	movff	_receivePrintEventVerbose$1388,?_sprintf+2
 20914  0028B4  C09C  F079         	movff	_receivePrintEventVerbose$1388+1,?_sprintf+3
 20915  0028B8  C037  F07A         	movff	_vscpClass,?_sprintf+4
 20916  0028BC  C038  F07B         	movff	_vscpClass+1,?_sprintf+5
 20917  0028C0  EC08  F00D         	call	_sprintf	;wreg free
 20918                           
 20919                           ; BSR set to: 0
 20920                           ;main.c: 1940: putsUSART(wrkbuf);
 20921  0028C4  0E01               	movlw	high _wrkbuf
 20922  0028C6  0100               	movlb	0	; () banked
 20923  0028C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20924  0028CA  0E79               	movlw	low _wrkbuf
 20925  0028CC  6F61               	movwf	?_putsUSART& (0+255),b
 20926  0028CE  EC41  F02C         	call	_putsUSART	;wreg free
 20927                           
 20928                           ;main.c: 1941: putsUSART((char *) ",type=");
 20929  0028D2  0E7F               	movlw	high STR_168
 20930  0028D4  0100               	movlb	0	; () banked
 20931  0028D6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20932  0028D8  0E1D               	movlw	low STR_168
 20933  0028DA  6F61               	movwf	?_putsUSART& (0+255),b
 20934  0028DC  EC41  F02C         	call	_putsUSART	;wreg free
 20935                           
 20936                           ;main.c: 1942: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpType);
 20937  0028E0  662B               	tstfsz	_bHex,c
 20938  0028E2  D005               	goto	l15422
 20939  0028E4  0E7F               	movlw	high STR_60
 20940  0028E6  0100               	movlb	0	; () banked
 20941  0028E8  6F9E               	movwf	(_receivePrintEventVerbose$1393+1)& (0+255),b
 20942  0028EA  0EEE               	movlw	low STR_60
 20943  0028EC  D004               	goto	L34
 20944  0028EE                     l15422:
 20945  0028EE  0E7F               	movlw	high STR_59
 20946  0028F0  0100               	movlb	0	; () banked
 20947  0028F2  6F9E               	movwf	(_receivePrintEventVerbose$1393+1)& (0+255),b
 20948  0028F4  0E4E               	movlw	low STR_59
 20949  0028F6                     L34:
 20950  0028F6  6F9D               	movwf	_receivePrintEventVerbose$1393& (0+255),b
 20951                           
 20952                           ; BSR set to: 0
 20953  0028F8  0E01               	movlw	high _wrkbuf
 20954  0028FA  0100               	movlb	0	; () banked
 20955  0028FC  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20956  0028FE  0E79               	movlw	low _wrkbuf
 20957  002900  6F76               	movwf	?_sprintf& (0+255),b
 20958  002902  C09D  F078         	movff	_receivePrintEventVerbose$1393,?_sprintf+2
 20959  002906  C09E  F079         	movff	_receivePrintEventVerbose$1393+1,?_sprintf+3
 20960  00290A  C03E  F07A         	movff	_vscpType,?_sprintf+4
 20961  00290E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 20962  002910  EC08  F00D         	call	_sprintf	;wreg free
 20963                           
 20964                           ; BSR set to: 0
 20965                           ;main.c: 1943: putsUSART(wrkbuf);
 20966  002914  0E01               	movlw	high _wrkbuf
 20967  002916  0100               	movlb	0	; () banked
 20968  002918  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20969  00291A  0E79               	movlw	low _wrkbuf
 20970  00291C  6F61               	movwf	?_putsUSART& (0+255),b
 20971  00291E  EC41  F02C         	call	_putsUSART	;wreg free
 20972                           
 20973                           ;main.c: 1944: putsUSART((char *) ",nodeid=");
 20974  002922  0E7E               	movlw	high STR_171
 20975  002924  0100               	movlb	0	; () banked
 20976  002926  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20977  002928  0E9C               	movlw	low STR_171
 20978  00292A  6F61               	movwf	?_putsUSART& (0+255),b
 20979  00292C  EC41  F02C         	call	_putsUSART	;wreg free
 20980                           
 20981                           ;main.c: 1945: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId);
 20982  002930  662B               	tstfsz	_bHex,c
 20983  002932  D005               	goto	l15434
 20984  002934  0E7F               	movlw	high STR_60
 20985  002936  0100               	movlb	0	; () banked
 20986  002938  6FA0               	movwf	(_receivePrintEventVerbose$1398+1)& (0+255),b
 20987  00293A  0EEE               	movlw	low STR_60
 20988  00293C  D004               	goto	L35
 20989  00293E                     l15434:
 20990  00293E  0E7F               	movlw	high STR_59
 20991  002940  0100               	movlb	0	; () banked
 20992  002942  6FA0               	movwf	(_receivePrintEventVerbose$1398+1)& (0+255),b
 20993  002944  0E4E               	movlw	low STR_59
 20994  002946                     L35:
 20995  002946  6F9F               	movwf	_receivePrintEventVerbose$1398& (0+255),b
 20996                           
 20997                           ; BSR set to: 0
 20998  002948  0E01               	movlw	high _wrkbuf
 20999  00294A  0100               	movlb	0	; () banked
 21000  00294C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21001  00294E  0E79               	movlw	low _wrkbuf
 21002  002950  6F76               	movwf	?_sprintf& (0+255),b
 21003  002952  C09F  F078         	movff	_receivePrintEventVerbose$1398,?_sprintf+2
 21004  002956  C0A0  F079         	movff	_receivePrintEventVerbose$1398+1,?_sprintf+3
 21005  00295A  C03B  F07A         	movff	_vscpNodeId,?_sprintf+4
 21006  00295E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21007  002960  EC08  F00D         	call	_sprintf	;wreg free
 21008                           
 21009                           ; BSR set to: 0
 21010                           ;main.c: 1946: putsUSART(wrkbuf);
 21011  002964  0E01               	movlw	high _wrkbuf
 21012  002966  0100               	movlb	0	; () banked
 21013  002968  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21014  00296A  0E79               	movlw	low _wrkbuf
 21015  00296C  6F61               	movwf	?_putsUSART& (0+255),b
 21016  00296E  EC41  F02C         	call	_putsUSART	;wreg free
 21017                           
 21018                           ;main.c: 1947: putsUSART((char *) ",size=");
 21019  002972  0E7F               	movlw	high STR_174
 21020  002974  0100               	movlb	0	; () banked
 21021  002976  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21022  002978  0E24               	movlw	low STR_174
 21023  00297A  6F61               	movwf	?_putsUSART& (0+255),b
 21024  00297C  EC41  F02C         	call	_putsUSART	;wreg free
 21025                           
 21026                           ;main.c: 1948: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpSize);
 21027  002980  662B               	tstfsz	_bHex,c
 21028  002982  D005               	goto	l15446
 21029  002984  0E7F               	movlw	high STR_60
 21030  002986  0100               	movlb	0	; () banked
 21031  002988  6FA2               	movwf	(_receivePrintEventVerbose$1403+1)& (0+255),b
 21032  00298A  0EEE               	movlw	low STR_60
 21033  00298C  D004               	goto	L36
 21034  00298E                     l15446:
 21035  00298E  0E7F               	movlw	high STR_59
 21036  002990  0100               	movlb	0	; () banked
 21037  002992  6FA2               	movwf	(_receivePrintEventVerbose$1403+1)& (0+255),b
 21038  002994  0E4E               	movlw	low STR_59
 21039  002996                     L36:
 21040  002996  6FA1               	movwf	_receivePrintEventVerbose$1403& (0+255),b
 21041                           
 21042                           ; BSR set to: 0
 21043  002998  0E01               	movlw	high _wrkbuf
 21044  00299A  0100               	movlb	0	; () banked
 21045  00299C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21046  00299E  0E79               	movlw	low _wrkbuf
 21047  0029A0  6F76               	movwf	?_sprintf& (0+255),b
 21048  0029A2  C0A1  F078         	movff	_receivePrintEventVerbose$1403,?_sprintf+2
 21049  0029A6  C0A2  F079         	movff	_receivePrintEventVerbose$1403+1,?_sprintf+3
 21050  0029AA  C03D  F07A         	movff	_vscpSize,?_sprintf+4
 21051  0029AE  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21052  0029B0  EC08  F00D         	call	_sprintf	;wreg free
 21053                           
 21054                           ; BSR set to: 0
 21055                           ;main.c: 1949: putsUSART(wrkbuf);
 21056  0029B4  0E01               	movlw	high _wrkbuf
 21057  0029B6  0100               	movlb	0	; () banked
 21058  0029B8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21059  0029BA  0E79               	movlw	low _wrkbuf
 21060  0029BC  6F61               	movwf	?_putsUSART& (0+255),b
 21061  0029BE  EC41  F02C         	call	_putsUSART	;wreg free
 21062                           
 21063                           ;main.c: 1950: if (vscpSize > 0) {
 21064  0029C2  503D               	movf	_vscpSize,w,c
 21065  0029C4  E04E               	bz	l15474
 21066                           
 21067                           ;main.c: 1951: putsUSART((char *) ",Data=");
 21068  0029C6  0E7F               	movlw	high STR_177
 21069  0029C8  0100               	movlb	0	; () banked
 21070  0029CA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21071  0029CC  0E16               	movlw	low STR_177
 21072  0029CE  6F61               	movwf	?_putsUSART& (0+255),b
 21073  0029D0  EC41  F02C         	call	_putsUSART	;wreg free
 21074                           
 21075                           ;main.c: 1952: for (i = 0; i < vscpSize; i++) {
 21076  0029D4  0100               	movlb	0	; () banked
 21077  0029D6  6BA5               	clrf	receivePrintEventVerbose@i& (0+255),b
 21078  0029D8  D040               	goto	l15472
 21079  0029DA                     l982:
 21080                           
 21081                           ; BSR set to: 0
 21082                           ;main.c: 1954: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i]);
 21083  0029DA  662B               	tstfsz	_bHex,c
 21084  0029DC  D004               	goto	l15460
 21085                           
 21086                           ; BSR set to: 0
 21087  0029DE  0E7F               	movlw	high STR_60
 21088  0029E0  6FA4               	movwf	(_receivePrintEventVerbose$1408+1)& (0+255),b
 21089  0029E2  0EEE               	movlw	low STR_60
 21090  0029E4  D003               	goto	L37
 21091  0029E6                     l15460:
 21092                           
 21093                           ; BSR set to: 0
 21094  0029E6  0E7F               	movlw	high STR_59
 21095  0029E8  6FA4               	movwf	(_receivePrintEventVerbose$1408+1)& (0+255),b
 21096  0029EA  0E4E               	movlw	low STR_59
 21097  0029EC                     L37:
 21098  0029EC  6FA3               	movwf	_receivePrintEventVerbose$1408& (0+255),b
 21099                           
 21100                           ; BSR set to: 0
 21101  0029EE  0E01               	movlw	high _wrkbuf
 21102  0029F0  0100               	movlb	0	; () banked
 21103  0029F2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21104  0029F4  0E79               	movlw	low _wrkbuf
 21105  0029F6  6F76               	movwf	?_sprintf& (0+255),b
 21106  0029F8  C0A3  F078         	movff	_receivePrintEventVerbose$1408,?_sprintf+2
 21107  0029FC  C0A4  F079         	movff	_receivePrintEventVerbose$1408+1,?_sprintf+3
 21108  002A00  0EE1               	movlw	low _vscpData
 21109  002A02  25A5               	addwf	receivePrintEventVerbose@i& (0+255),w,b
 21110  002A04  6ED9               	movwf	fsr2l,c
 21111  002A06  6ADA               	clrf	fsr2h,c
 21112  002A08  0E01               	movlw	high _vscpData
 21113  002A0A  22DA               	addwfc	fsr2h,f,c
 21114  002A0C  50DF               	movf	indf2,w,c
 21115  002A0E  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 21116  002A10  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21117  002A12  EC08  F00D         	call	_sprintf	;wreg free
 21118                           
 21119                           ; BSR set to: 0
 21120                           ;main.c: 1955: putsUSART(wrkbuf);
 21121  002A16  0E01               	movlw	high _wrkbuf
 21122  002A18  0100               	movlb	0	; () banked
 21123  002A1A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21124  002A1C  0E79               	movlw	low _wrkbuf
 21125  002A1E  6F61               	movwf	?_putsUSART& (0+255),b
 21126  002A20  EC41  F02C         	call	_putsUSART	;wreg free
 21127                           
 21128                           ;main.c: 1956: if (i < (vscpSize - 1)) {
 21129  002A24  0EFF               	movlw	255
 21130  002A26  243D               	addwf	_vscpSize,w,c
 21131  002A28  0100               	movlb	0	; () banked
 21132  002A2A  6F94               	movwf	??_receivePrintEventVerbose& (0+255),b
 21133  002A2C  6B95               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 21134  002A2E  0EFF               	movlw	255
 21135  002A30  2395               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 21136  002A32  51A5               	movf	receivePrintEventVerbose@i& (0+255),w,b
 21137  002A34  6F96               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 21138  002A36  6B97               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 21139  002A38  5197               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 21140  002A3A  0A80               	xorlw	128
 21141  002A3C  6F98               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 21142  002A3E  5194               	movf	??_receivePrintEventVerbose& (0+255),w,b
 21143  002A40  5D96               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 21144  002A42  5195               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 21145  002A44  0A80               	xorlw	128
 21146  002A46  5998               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 21147  002A48  E206               	bc	l15470
 21148                           
 21149                           ; BSR set to: 0
 21150                           ;main.c: 1957: putsUSART((char *) ",");
 21151  002A4A  0E7F               	movlw	high STR_30
 21152  002A4C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21153  002A4E  0EF5               	movlw	low STR_30
 21154  002A50  6F61               	movwf	?_putsUSART& (0+255),b
 21155  002A52  EC41  F02C         	call	_putsUSART	;wreg free
 21156  002A56                     l15470:
 21157  002A56  0100               	movlb	0	; () banked
 21158  002A58  2BA5               	incf	receivePrintEventVerbose@i& (0+255),f,b
 21159  002A5A                     l15472:
 21160                           
 21161                           ; BSR set to: 0
 21162  002A5A  503D               	movf	_vscpSize,w,c
 21163  002A5C  5DA5               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 21164  002A5E  E208               	bc	l989
 21165  002A60  D7BC               	goto	l982
 21166  002A62                     l15474:
 21167                           
 21168                           ;main.c: 1961: putsUSART((char *) ",Data=none");
 21169  002A62  0E7E               	movlw	high STR_181
 21170  002A64  0100               	movlb	0	; () banked
 21171  002A66  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21172  002A68  0E60               	movlw	low STR_181
 21173  002A6A  6F61               	movwf	?_putsUSART& (0+255),b
 21174  002A6C  EC41  F02C         	call	_putsUSART	;wreg free
 21175  002A70                     l989:
 21176                           
 21177                           ;main.c: 1962: }
 21178                           ;main.c: 1963: putsUSART((char *) ">\r\n");
 21179  002A70  0E7F               	movlw	high STR_182
 21180  002A72  0100               	movlb	0	; () banked
 21181  002A74  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21182  002A76  0ECE               	movlw	low STR_182
 21183  002A78  6F61               	movwf	?_putsUSART& (0+255),b
 21184  002A7A  EC41  F02C         	call	_putsUSART	;wreg free
 21185                           
 21186                           ;main.c: 1964: return 1;
 21187  002A7E  0E01               	movlw	1
 21188  002A80  D001               	goto	l990
 21189  002A82                     l15480:
 21190                           
 21191                           ; BSR set to: 0
 21192                           ;main.c: 1965: }
 21193                           ;main.c: 1967: return 0;
 21194  002A82  0E00               	movlw	0
 21195  002A84                     l990:
 21196  002A84  0012               	return	
 21197  002A86                     __end_of_receivePrintEventVerbose:
 21198                           	opt stack 0
 21199                           tblptru	equ	0xFF8
 21200                           tblptrh	equ	0xFF7
 21201                           tblptrl	equ	0xFF6
 21202                           tablat	equ	0xFF5
 21203                           prodh	equ	0xFF4
 21204                           prodl	equ	0xFF3
 21205                           intcon	equ	0xFF2
 21206                           indf0	equ	0xFEF
 21207                           postinc0	equ	0xFEE
 21208                           fsr0h	equ	0xFEA
 21209                           fsr0l	equ	0xFE9
 21210                           wreg	equ	0xFE8
 21211                           indf1	equ	0xFE7
 21212                           postinc1	equ	0xFE6
 21213                           postdec1	equ	0xFE5
 21214                           fsr1h	equ	0xFE2
 21215                           fsr1l	equ	0xFE1
 21216                           indf2	equ	0xFDF
 21217                           postinc2	equ	0xFDE
 21218                           postdec2	equ	0xFDD
 21219                           plusw2	equ	0xFDB
 21220                           fsr2h	equ	0xFDA
 21221                           fsr2l	equ	0xFD9
 21222                           status	equ	0xFD8
 21223                           
 21224 ;; *************** function _getVSCPFrame *****************
 21225 ;; Defined at:
 21226 ;;		line 3131 in file "main.c"
 21227 ;; Parameters:    Size  Location     Type
 21228 ;;  pvscpclass      1    wreg     PTR unsigned short 
 21229 ;;		 -> vscpClass(2), 
 21230 ;;  pvscptype       1   19[BANK0 ] PTR unsigned char 
 21231 ;;		 -> vscpType(1), 
 21232 ;;  pNodeId         1   20[BANK0 ] PTR unsigned char 
 21233 ;;		 -> vscpNodeId(1), 
 21234 ;;  pPriority       1   21[BANK0 ] PTR unsigned char 
 21235 ;;		 -> vscpPriority(1), 
 21236 ;;  pSize           1   22[BANK0 ] PTR unsigned char 
 21237 ;;		 -> vscpSize(1), 
 21238 ;;  pData           2   23[BANK0 ] PTR unsigned char 
 21239 ;;		 -> vscpData(8), 
 21240 ;; Auto vars:     Size  Location     Type
 21241 ;;  pvscpclass      1   29[BANK0 ] PTR unsigned short 
 21242 ;;		 -> vscpClass(2), 
 21243 ;;  id              4   30[BANK0 ] unsigned long 
 21244 ;; Return value:  Size  Location     Type
 21245 ;;                  1    wreg      unsigned char 
 21246 ;; Registers used:
 21247 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21248 ;; Tracked objects:
 21249 ;;		On entry : F/0
 21250 ;;		On exit  : F/0
 21251 ;;		Unchanged: 0/0
 21252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21253 ;;      Params:         0       6       0       0       0       0       0
 21254 ;;      Locals:         0       5       0       0       0       0       0
 21255 ;;      Temps:          0       4       0       0       0       0       0
 21256 ;;      Totals:         0      15       0       0       0       0       0
 21257 ;;Total ram usage:       15 bytes
 21258 ;; Hardware stack levels used:    1
 21259 ;; Hardware stack levels required when called:    5
 21260 ;; This function calls:
 21261 ;;		_getCANFrame
 21262 ;; This function is called by:
 21263 ;;		_receivePrintEventVerbose
 21264 ;;		_readRegister
 21265 ;;		_readRegisterExtended
 21266 ;;		_writeRegisterExtended
 21267 ;; This function uses a non-reentrant model
 21268 ;;
 21269                           
 21270                           	psect	text51
 21271  0052EE                     __ptext51:
 21272                           	opt stack 0
 21273  0052EE                     _getVSCPFrame:
 21274                           	opt stack 22
 21275                           
 21276                           ;incstack = 0
 21277                           ;incstack = 0
 21278                           ;getVSCPFrame@pvscpclass stored from wreg
 21279  0052EE  CFE8 F07D          	movff	wreg,getVSCPFrame@pvscpclass
 21280                           
 21281                           ; BSR set to: 0
 21282                           ;main.c: 3132: uint32_t id;
 21283                           ;main.c: 3134: if (!getCANFrame(&id, pSize, pData)) {
 21284  0052F2  C076  F06E         	movff	getVSCPFrame@pSize,?_getCANFrame
 21285  0052F6  0E0F               	movlw	15
 21286  0052F8  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
 21287  0052FA  0E5F               	movlw	__accesstop+-1
 21288  0052FC  656E               	cpfsgt	?_getCANFrame& (0+255),b
 21289  0052FE  6B6F               	clrf	(?_getCANFrame+1)& (0+255),b
 21290  005300  C077  F070         	movff	getVSCPFrame@pData,?_getCANFrame+2
 21291  005304  C078  F071         	movff	getVSCPFrame@pData+1,?_getCANFrame+3
 21292  005308  0E7E               	movlw	getVSCPFrame@id& (0+255)
 21293  00530A  ECB6  F026         	call	_getCANFrame
 21294  00530E  0900               	iorlw	0
 21295  005310  E102               	bnz	l13352
 21296                           
 21297                           ; BSR set to: 0
 21298                           ;main.c: 3135: return 0;
 21299  005312  0E00               	movlw	0
 21300  005314  D02F               	goto	l1331
 21301  005316                     l13352:
 21302                           
 21303                           ; BSR set to: 0
 21304                           ;main.c: 3136: }
 21305                           ;main.c: 3138: *pNodeId = id & 0x0ff;
 21306  005316  5174               	movf	getVSCPFrame@pNodeId& (0+255),w,b
 21307  005318  6ED9               	movwf	fsr2l,c
 21308  00531A  6ADA               	clrf	fsr2h,c
 21309  00531C  C07E  FFDF         	movff	getVSCPFrame@id,indf2
 21310                           
 21311                           ;main.c: 3139: *pvscptype = (id >> 8) & 0xff;
 21312  005320  5173               	movf	getVSCPFrame@pvscptype& (0+255),w,b
 21313  005322  6ED9               	movwf	fsr2l,c
 21314  005324  6ADA               	clrf	fsr2h,c
 21315  005326  C07F  FFDF         	movff	getVSCPFrame@id+1,indf2
 21316                           
 21317                           ; BSR set to: 0
 21318                           ;main.c: 3140: *pvscpclass = (id >> 16) & 0x1ff;
 21319  00532A  0100               	movlb	0	; () banked
 21320  00532C  5180               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 21321  00532E  6F79               	movwf	??_getVSCPFrame& (0+255),b
 21322  005330  0E01               	movlw	1
 21323  005332  1581               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 21324  005334  6F7A               	movwf	(??_getVSCPFrame+1)& (0+255),b
 21325  005336  517D               	movf	getVSCPFrame@pvscpclass& (0+255),w,b
 21326  005338  6ED9               	movwf	fsr2l,c
 21327  00533A  6ADA               	clrf	fsr2h,c
 21328  00533C  C079  FFDE         	movff	??_getVSCPFrame,postinc2
 21329  005340  C07A  FFDD         	movff	??_getVSCPFrame+1,postdec2
 21330                           
 21331                           ; BSR set to: 0
 21332                           ;main.c: 3141: *pPriority = (uint16_t) (0x07 & (id >> 26));
 21333  005344  5175               	movf	getVSCPFrame@pPriority& (0+255),w,b
 21334  005346  6ED9               	movwf	fsr2l,c
 21335  005348  6ADA               	clrf	fsr2h,c
 21336  00534A  C07E  F079         	movff	getVSCPFrame@id,??_getVSCPFrame
 21337  00534E  C07F  F07A         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 21338  005352  C080  F07B         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 21339  005356  C081  F07C         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 21340  00535A  0E1B               	movlw	27
 21341  00535C  D005               	goto	u17390
 21342  00535E                     u17395:
 21343  00535E  90D8               	bcf	status,0,c
 21344  005360  337C               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 21345  005362  337B               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 21346  005364  337A               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 21347  005366  3379               	rrcf	??_getVSCPFrame& (0+255),f,b
 21348  005368                     u17390:
 21349  005368  2EE8               	decfsz	wreg,f,c
 21350  00536A  D7F9               	goto	u17395
 21351  00536C  5179               	movf	??_getVSCPFrame& (0+255),w,b
 21352  00536E  0B07               	andlw	7
 21353  005370  6EDF               	movwf	indf2,c
 21354                           
 21355                           ; BSR set to: 0
 21356                           ;main.c: 3143: return 1;
 21357  005372  0E01               	movlw	1
 21358  005374                     l1331:
 21359                           
 21360                           ; BSR set to: 0
 21361  005374  0012               	return	
 21362  005376                     __end_of_getVSCPFrame:
 21363                           	opt stack 0
 21364                           tblptru	equ	0xFF8
 21365                           tblptrh	equ	0xFF7
 21366                           tblptrl	equ	0xFF6
 21367                           tablat	equ	0xFF5
 21368                           prodh	equ	0xFF4
 21369                           prodl	equ	0xFF3
 21370                           intcon	equ	0xFF2
 21371                           indf0	equ	0xFEF
 21372                           postinc0	equ	0xFEE
 21373                           fsr0h	equ	0xFEA
 21374                           fsr0l	equ	0xFE9
 21375                           wreg	equ	0xFE8
 21376                           indf1	equ	0xFE7
 21377                           postinc1	equ	0xFE6
 21378                           postdec1	equ	0xFE5
 21379                           fsr1h	equ	0xFE2
 21380                           fsr1l	equ	0xFE1
 21381                           indf2	equ	0xFDF
 21382                           postinc2	equ	0xFDE
 21383                           postdec2	equ	0xFDD
 21384                           plusw2	equ	0xFDB
 21385                           fsr2h	equ	0xFDA
 21386                           fsr2l	equ	0xFD9
 21387                           status	equ	0xFD8
 21388                           
 21389 ;; *************** function _getCANFrame *****************
 21390 ;; Defined at:
 21391 ;;		line 3167 in file "main.c"
 21392 ;; Parameters:    Size  Location     Type
 21393 ;;  pid             1    wreg     PTR unsigned long 
 21394 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21395 ;;  pdlc            2   14[BANK0 ] PTR unsigned char 
 21396 ;;		 -> receiveSendEventSLCAN@dlc(1), receiveSendMultiEventCANAL@dlc(1), receiveSendEventCANAL@dlc(1), vscpSize(1), 
 21397 ;;  pdata           2   16[BANK0 ] PTR unsigned char 
 21398 ;;		 -> receiveSendMultiEventCANAL@data(8), receiveSendEventCANAL@data(8), vscpData(8), 
 21399 ;; Auto vars:     Size  Location     Type
 21400 ;;  pid             1   18[BANK0 ] PTR unsigned long 
 21401 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21402 ;; Return value:  Size  Location     Type
 21403 ;;                  1    wreg      unsigned char 
 21404 ;; Registers used:
 21405 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21406 ;; Tracked objects:
 21407 ;;		On entry : F/0
 21408 ;;		On exit  : F/0
 21409 ;;		Unchanged: 0/0
 21410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21411 ;;      Params:         0       4       0       0       0       0       0
 21412 ;;      Locals:         0       1       0       0       0       0       0
 21413 ;;      Temps:          0       0       0       0       0       0       0
 21414 ;;      Totals:         0       5       0       0       0       0       0
 21415 ;;Total ram usage:        5 bytes
 21416 ;; Hardware stack levels used:    1
 21417 ;; Hardware stack levels required when called:    4
 21418 ;; This function calls:
 21419 ;;		_fifo_read
 21420 ;; This function is called by:
 21421 ;;		_receiveSendEventCANAL
 21422 ;;		_receiveSendMultiEventCANAL
 21423 ;;		_receiveSendEventSLCAN
 21424 ;;		_getVSCPFrame
 21425 ;; This function uses a non-reentrant model
 21426 ;;
 21427                           
 21428                           	psect	text52
 21429  004D6C                     __ptext52:
 21430                           	opt stack 0
 21431  004D6C                     _getCANFrame:
 21432                           	opt stack 24
 21433                           
 21434                           ; BSR set to: 0
 21435                           ;incstack = 0
 21436                           ;incstack = 0
 21437                           ;getCANFrame@pid stored from wreg
 21438  004D6C  CFE8 F072          	movff	wreg,getCANFrame@pid
 21439                           
 21440                           ; BSR set to: 0
 21441                           ;main.c: 3188: if ( fifo_canrxcount ) {
 21442  004D70  5030               	movf	_fifo_canrxcount,w,c	;volatile
 21443  004D72  E013               	bz	l13370
 21444                           
 21445                           ; BSR set to: 0
 21446                           ;main.c: 3191: (INTCONbits.GIE = 0);
 21447  004D74  9EF2               	bcf	intcon,7,c	;volatile
 21448                           
 21449                           ; BSR set to: 0
 21450                           ;main.c: 3192: if ( 4 != fifo_read( &canInputFifo, (uint8_t *)pid, 4 ) ) {
 21451  004D76  0E01               	movlw	high _canInputFifo
 21452  004D78  0100               	movlb	0	; () banked
 21453  004D7A  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21454  004D7C  0EC9               	movlw	low _canInputFifo
 21455  004D7E  6F60               	movwf	?_fifo_read& (0+255),b
 21456  004D80  C072  F062         	movff	getCANFrame@pid,?_fifo_read+2
 21457  004D84  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21458  004D86  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21459  004D88  0E04               	movlw	4
 21460  004D8A  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21461  004D8C  EC07  F024         	call	_fifo_read	;wreg free
 21462  004D90  5160               	movf	?_fifo_read& (0+255),w,b
 21463  004D92  0A04               	xorlw	4
 21464  004D94  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21465  004D96  E003               	bz	l13374
 21466  004D98                     l13368:
 21467                           
 21468                           ; BSR set to: 0
 21469                           ;main.c: 3193: (INTCONbits.GIE = 1);
 21470  004D98  8EF2               	bsf	intcon,7,c	;volatile
 21471  004D9A                     l13370:
 21472                           
 21473                           ; BSR set to: 0
 21474                           ;main.c: 3194: return 0;
 21475  004D9A  0E00               	movlw	0
 21476  004D9C  D03A               	goto	l1340
 21477  004D9E                     l13374:
 21478                           
 21479                           ; BSR set to: 0
 21480                           ;main.c: 3195: }
 21481                           ;main.c: 3198: if ( 1 != fifo_read( &canInputFifo, pdlc, 1 ) ) {
 21482  004D9E  0E01               	movlw	high _canInputFifo
 21483  004DA0  0100               	movlb	0	; () banked
 21484  004DA2  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21485  004DA4  0EC9               	movlw	low _canInputFifo
 21486  004DA6  6F60               	movwf	?_fifo_read& (0+255),b
 21487  004DA8  C06E  F062         	movff	getCANFrame@pdlc,?_fifo_read+2
 21488  004DAC  C06F  F063         	movff	getCANFrame@pdlc+1,?_fifo_read+3
 21489  004DB0  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21490  004DB2  0E01               	movlw	1
 21491  004DB4  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21492  004DB6  EC07  F024         	call	_fifo_read	;wreg free
 21493  004DBA  0560               	decf	?_fifo_read& (0+255),w,b
 21494  004DBC  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21495  004DBE  E1EC               	bnz	l13368
 21496                           
 21497                           ; BSR set to: 0
 21498                           ;main.c: 3201: }
 21499                           ;main.c: 3204: if ( *pdlc > 8 ) {
 21500  004DC0  C06E  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21501  004DC4  C06F  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21502  004DC8  0E08               	movlw	8
 21503  004DCA  64DF               	cpfsgt	indf2,c
 21504  004DCC  D005               	goto	l13386
 21505                           
 21506                           ; BSR set to: 0
 21507                           ;main.c: 3205: *pdlc = 0;
 21508  004DCE  C06E  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21509  004DD2  C06F  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21510  004DD6  6ADF               	clrf	indf2,c
 21511  004DD8                     l13386:
 21512                           
 21513                           ; BSR set to: 0
 21514                           ;main.c: 3206: }
 21515                           ;main.c: 3209: if ( *pdlc != fifo_read( &canInputFifo, pdata, *pdlc ) ) {
 21516  004DD8  0E01               	movlw	high _canInputFifo
 21517  004DDA  0100               	movlb	0	; () banked
 21518  004DDC  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21519  004DDE  0EC9               	movlw	low _canInputFifo
 21520  004DE0  6F60               	movwf	?_fifo_read& (0+255),b
 21521  004DE2  C070  F062         	movff	getCANFrame@pdata,?_fifo_read+2
 21522  004DE6  C071  F063         	movff	getCANFrame@pdata+1,?_fifo_read+3
 21523  004DEA  C06E  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21524  004DEE  C06F  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21525  004DF2  50DF               	movf	indf2,w,c
 21526  004DF4  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21527  004DF6  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21528  004DF8  EC07  F024         	call	_fifo_read	;wreg free
 21529  004DFC  C06E  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21530  004E00  C06F  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21531  004E04  50DF               	movf	indf2,w,c
 21532  004E06  1960               	xorwf	?_fifo_read& (0+255),w,b
 21533  004E08  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21534  004E0A  E1C6               	bnz	l13368
 21535                           
 21536                           ; BSR set to: 0
 21537                           ;main.c: 3212: }
 21538                           ;main.c: 3214: fifo_canrxcount--;
 21539  004E0C  0630               	decf	_fifo_canrxcount,f,c	;volatile
 21540                           
 21541                           ; BSR set to: 0
 21542                           ;main.c: 3216: (INTCONbits.GIE = 1);
 21543  004E0E  8EF2               	bsf	intcon,7,c	;volatile
 21544                           
 21545                           ; BSR set to: 0
 21546                           ;main.c: 3218: return 1;
 21547  004E10  0E01               	movlw	1
 21548  004E12                     l1340:
 21549                           
 21550                           ; BSR set to: 0
 21551  004E12  0012               	return	
 21552  004E14                     __end_of_getCANFrame:
 21553                           	opt stack 0
 21554                           tblptru	equ	0xFF8
 21555                           tblptrh	equ	0xFF7
 21556                           tblptrl	equ	0xFF6
 21557                           tablat	equ	0xFF5
 21558                           prodh	equ	0xFF4
 21559                           prodl	equ	0xFF3
 21560                           intcon	equ	0xFF2
 21561                           indf0	equ	0xFEF
 21562                           postinc0	equ	0xFEE
 21563                           fsr0h	equ	0xFEA
 21564                           fsr0l	equ	0xFE9
 21565                           wreg	equ	0xFE8
 21566                           indf1	equ	0xFE7
 21567                           postinc1	equ	0xFE6
 21568                           postdec1	equ	0xFE5
 21569                           fsr1h	equ	0xFE2
 21570                           fsr1l	equ	0xFE1
 21571                           indf2	equ	0xFDF
 21572                           postinc2	equ	0xFDE
 21573                           postdec2	equ	0xFDD
 21574                           plusw2	equ	0xFDB
 21575                           fsr2h	equ	0xFDA
 21576                           fsr2l	equ	0xFD9
 21577                           status	equ	0xFD8
 21578                           
 21579 ;; *************** function _fifo_read *****************
 21580 ;; Defined at:
 21581 ;;		line 29 in file "fifo.c"
 21582 ;; Parameters:    Size  Location     Type
 21583 ;;  f               2    0[BANK0 ] PTR struct .
 21584 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 21585 ;;  buf             2    2[BANK0 ] PTR const void 
 21586 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21587 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21588 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21589 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21590 ;;  nbytes          2    4[BANK0 ] unsigned short 
 21591 ;; Auto vars:     Size  Location     Type
 21592 ;;  i               2   12[BANK0 ] unsigned short 
 21593 ;;  p               2   10[BANK0 ] PTR unsigned char 
 21594 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21595 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21596 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21597 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21598 ;; Return value:  Size  Location     Type
 21599 ;;                  2    0[BANK0 ] unsigned short 
 21600 ;; Registers used:
 21601 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 21602 ;; Tracked objects:
 21603 ;;		On entry : F/0
 21604 ;;		On exit  : F/0
 21605 ;;		Unchanged: 0/0
 21606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21607 ;;      Params:         0       6       0       0       0       0       0
 21608 ;;      Locals:         0       4       0       0       0       0       0
 21609 ;;      Temps:          0       4       0       0       0       0       0
 21610 ;;      Totals:         0      14       0       0       0       0       0
 21611 ;;Total ram usage:       14 bytes
 21612 ;; Hardware stack levels used:    1
 21613 ;; Hardware stack levels required when called:    3
 21614 ;; This function calls:
 21615 ;;		Nothing
 21616 ;; This function is called by:
 21617 ;;		_main
 21618 ;;		_doModeVerbose
 21619 ;;		_doModeVscp
 21620 ;;		_doModeSLCAN
 21621 ;;		_getCANFrame
 21622 ;; This function uses a non-reentrant model
 21623 ;;
 21624                           
 21625                           	psect	text53
 21626  00480E                     __ptext53:
 21627                           	opt stack 0
 21628  00480E                     _fifo_read:
 21629                           	opt stack 24
 21630                           
 21631                           ; BSR set to: 0
 21632                           ;fifo.c: 30: uint16_t i;
 21633                           ;fifo.c: 31: uint8_t *p;
 21634                           ;fifo.c: 32: p = buf;
 21635                           
 21636                           ; BSR set to: 0
 21637                           ;incstack = 0
 21638                           ;incstack = 0
 21639  00480E  C062  F06A         	movff	fifo_read@buf,fifo_read@p
 21640  004812  C063  F06B         	movff	fifo_read@buf+1,fifo_read@p+1
 21641                           
 21642                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 21643  004816  6B6C               	clrf	fifo_read@i& (0+255),b
 21644  004818  6B6D               	clrf	(fifo_read@i+1)& (0+255),b
 21645  00481A  D04A               	goto	l10616
 21646  00481C                     l10602:
 21647                           
 21648                           ; BSR set to: 0
 21649                           ;fifo.c: 36: if ( f->tail != f->head ) {
 21650  00481C  EE20 F002          	lfsr	2,2
 21651  004820  D851               	call	PL36	;call to abstracted procedure
 21652  004822  18E5               	xorwf	postdec1,w,c
 21653  004824  CFDF FFE8          	movff	indf2,wreg
 21654  004828  B4D8               	btfsc	status,2,c
 21655  00482A  18E7               	xorwf	indf1,w,c
 21656  00482C  E03A               	bz	l1591
 21657                           
 21658                           ; BSR set to: 0
 21659                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 21660  00482E  EE20 F004          	lfsr	2,4
 21661  004832  5160               	movf	fifo_read@f& (0+255),w,b
 21662  004834  26D9               	addwf	fsr2l,f,c
 21663  004836  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21664  004838  22DA               	addwfc	fsr2h,f,c
 21665  00483A  CFDE F066          	movff	postinc2,??_fifo_read
 21666  00483E  CFDD F067          	movff	postdec2,??_fifo_read+1
 21667  004842  C060  FFD9         	movff	fifo_read@f,fsr2l
 21668  004846  C061  FFDA         	movff	fifo_read@f+1,fsr2h
 21669  00484A  CFDE F068          	movff	postinc2,??_fifo_read+2
 21670  00484E  CFDD F069          	movff	postdec2,??_fifo_read+3
 21671  004852  5166               	movf	??_fifo_read& (0+255),w,b
 21672  004854  2568               	addwf	(??_fifo_read+2)& (0+255),w,b
 21673  004856  6ED9               	movwf	fsr2l,c
 21674  004858  5167               	movf	(??_fifo_read+1)& (0+255),w,b
 21675  00485A  2169               	addwfc	(??_fifo_read+3)& (0+255),w,b
 21676  00485C  6EDA               	movwf	fsr2h,c
 21677  00485E  C06A  FFE1         	movff	fifo_read@p,fsr1l
 21678  004862  C06B  FFE2         	movff	fifo_read@p+1,fsr1h
 21679  004866  CFDF FFE7          	movff	indf2,indf1
 21680                           
 21681                           ; BSR set to: 0
 21682  00486A  4B6A               	infsnz	fifo_read@p& (0+255),f,b
 21683  00486C  2B6B               	incf	(fifo_read@p+1)& (0+255),f,b
 21684                           
 21685                           ; BSR set to: 0
 21686                           ;fifo.c: 38: f->tail++;
 21687  00486E  EE20 F004          	lfsr	2,4
 21688  004872  5160               	movf	fifo_read@f& (0+255),w,b
 21689  004874  26D9               	addwf	fsr2l,f,c
 21690  004876  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21691  004878  22DA               	addwfc	fsr2h,f,c
 21692  00487A  2ADE               	incf	postinc2,f,c
 21693  00487C  0E00               	movlw	0
 21694  00487E  22DD               	addwfc	postdec2,f,c
 21695                           
 21696                           ; BSR set to: 0
 21697                           ;fifo.c: 39: if (f->tail >= f->size) {
 21698  004880  EE20 F006          	lfsr	2,6
 21699  004884  D81F               	call	PL36	;call to abstracted procedure
 21700  004886  5CE5               	subwf	postdec1,w,c
 21701  004888  E102               	bnz	u12905
 21702  00488A  50DF               	movf	indf2,w,c
 21703  00488C  5CE7               	subwf	indf1,w,c
 21704  00488E                     u12905:
 21705  00488E  E30E               	bnc	l10614
 21706                           
 21707                           ; BSR set to: 0
 21708                           ;fifo.c: 40: f->tail = 0;
 21709  004890  EE20 F004          	lfsr	2,4
 21710  004894  5160               	movf	fifo_read@f& (0+255),w,b
 21711  004896  26D9               	addwf	fsr2l,f,c
 21712  004898  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21713  00489A  22DA               	addwfc	fsr2h,f,c
 21714  00489C  6ADE               	clrf	postinc2,c
 21715  00489E  6ADD               	clrf	postdec2,c
 21716  0048A0  D005               	goto	l10614
 21717  0048A2                     l1591:
 21718                           
 21719                           ; BSR set to: 0
 21720                           ;fifo.c: 43: else {
 21721                           ;fifo.c: 44: return i;
 21722  0048A2  C06C  F060         	movff	fifo_read@i,?_fifo_read
 21723  0048A6  C06D  F061         	movff	fifo_read@i+1,?_fifo_read+1
 21724  0048AA  D00B               	goto	l1594
 21725  0048AC                     l10614:
 21726                           
 21727                           ; BSR set to: 0
 21728  0048AC  4B6C               	infsnz	fifo_read@i& (0+255),f,b
 21729  0048AE  2B6D               	incf	(fifo_read@i+1)& (0+255),f,b
 21730  0048B0                     l10616:
 21731                           
 21732                           ; BSR set to: 0
 21733  0048B0  5164               	movf	fifo_read@nbytes& (0+255),w,b
 21734  0048B2  5D6C               	subwf	fifo_read@i& (0+255),w,b
 21735  0048B4  5165               	movf	(fifo_read@nbytes+1)& (0+255),w,b
 21736  0048B6  596D               	subwfb	(fifo_read@i+1)& (0+255),w,b
 21737  0048B8  E3B1               	bnc	l10602
 21738                           
 21739                           ; BSR set to: 0
 21740                           ;fifo.c: 45: }
 21741                           ;fifo.c: 47: }
 21742                           ;fifo.c: 49: return nbytes;
 21743  0048BA  C064  F060         	movff	fifo_read@nbytes,?_fifo_read
 21744  0048BE  C065  F061         	movff	fifo_read@nbytes+1,?_fifo_read+1
 21745  0048C2                     l1594:
 21746                           
 21747                           ; BSR set to: 0
 21748  0048C2  0012               	return	
 21749  0048C4                     __end_of_fifo_read:
 21750                           	opt stack 0
 21751  0048C4                     PL36:
 21752                           	opt stack 24
 21753  0048C4  5160               	movf	fifo_read@f& (0+255),w,b
 21754  0048C6  26D9               	addwf	fsr2l,f,c
 21755  0048C8  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21756  0048CA  22DA               	addwfc	fsr2h,f,c
 21757  0048CC  EE10 F004          	lfsr	1,4
 21758  0048D0  5160               	movf	fifo_read@f& (0+255),w,b
 21759  0048D2  26E1               	addwf	fsr1l,f,c
 21760  0048D4  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21761  0048D6  22E2               	addwfc	fsr1h,f,c
 21762  0048D8  52E6               	movf	postinc1,f,c
 21763  0048DA  52DE               	movf	postinc2,f,c
 21764  0048DC  50DD               	movf	postdec2,w,c
 21765  0048DE  0012               	return	
 21766  0048E0                     __end_ofPL36:
 21767                           	opt stack 0
 21768                           tblptru	equ	0xFF8
 21769                           tblptrh	equ	0xFF7
 21770                           tblptrl	equ	0xFF6
 21771                           tablat	equ	0xFF5
 21772                           prodh	equ	0xFF4
 21773                           prodl	equ	0xFF3
 21774                           intcon	equ	0xFF2
 21775                           indf0	equ	0xFEF
 21776                           postinc0	equ	0xFEE
 21777                           fsr0h	equ	0xFEA
 21778                           fsr0l	equ	0xFE9
 21779                           wreg	equ	0xFE8
 21780                           indf1	equ	0xFE7
 21781                           postinc1	equ	0xFE6
 21782                           postdec1	equ	0xFE5
 21783                           fsr1h	equ	0xFE2
 21784                           fsr1l	equ	0xFE1
 21785                           indf2	equ	0xFDF
 21786                           postinc2	equ	0xFDE
 21787                           postdec2	equ	0xFDD
 21788                           plusw2	equ	0xFDB
 21789                           fsr2h	equ	0xFDA
 21790                           fsr2l	equ	0xFD9
 21791                           status	equ	0xFD8
 21792                           
 21793 ;; *************** function _sprintf *****************
 21794 ;; Defined at:
 21795 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 21796 ;; Parameters:    Size  Location     Type
 21797 ;;  sp              2   22[BANK0 ] PTR unsigned char 
 21798 ;;		 -> wrkbuf(80), 
 21799 ;;  f               2   24[BANK0 ] PTR const unsigned char 
 21800 ;;		 -> STR_224(3), STR_223(7), STR_217(3), STR_216(7), 
 21801 ;;		 -> STR_213(4), STR_212(8), STR_209(4), STR_208(8), 
 21802 ;;		 -> STR_205(4), STR_204(8), STR_201(4), STR_200(8), 
 21803 ;;		 -> STR_197(4), STR_196(7), STR_193(4), STR_192(7), 
 21804 ;;		 -> STR_189(4), STR_188(7), STR_185(4), STR_184(7), 
 21805 ;;		 -> STR_179(3), STR_178(7), STR_176(3), STR_175(7), 
 21806 ;;		 -> STR_173(3), STR_172(7), STR_170(3), STR_169(7), 
 21807 ;;		 -> STR_167(3), STR_166(7), STR_164(3), STR_163(7), 
 21808 ;;		 -> STR_98(3), STR_97(7), STR_94(4), STR_93(8), 
 21809 ;;		 -> STR_90(4), STR_89(8), STR_76(3), STR_75(7), 
 21810 ;;		 -> STR_74(3), STR_73(7), STR_71(6), STR_70(10), 
 21811 ;;		 -> STR_65(3), STR_64(7), STR_62(3), STR_61(7), 
 21812 ;;		 -> STR_60(3), STR_59(7), STR_57(6), STR_56(10), 
 21813 ;; Auto vars:     Size  Location     Type
 21814 ;;  idx             1   33[BANK0 ] unsigned char 
 21815 ;;  _val            4   45[BANK0 ] struct .
 21816 ;;  flag            2   50[BANK0 ] unsigned short 
 21817 ;;  width           2   43[BANK0 ] int 
 21818 ;;  prec            2   41[BANK0 ] int 
 21819 ;;  c               1   49[BANK0 ] char 
 21820 ;;  ap              1   40[BANK0 ] PTR void [1]
 21821 ;;		 -> ?_sprintf(2), 
 21822 ;; Return value:  Size  Location     Type
 21823 ;;                  2   22[BANK0 ] int 
 21824 ;; Registers used:
 21825 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21826 ;; Tracked objects:
 21827 ;;		On entry : F/0
 21828 ;;		On exit  : F/0
 21829 ;;		Unchanged: 0/0
 21830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21831 ;;      Params:         0       8       0       0       0       0       0
 21832 ;;      Locals:         0      19       0       0       0       0       0
 21833 ;;      Temps:          0       3       0       0       0       0       0
 21834 ;;      Totals:         0      30       0       0       0       0       0
 21835 ;;Total ram usage:       30 bytes
 21836 ;; Hardware stack levels used:    1
 21837 ;; Hardware stack levels required when called:    4
 21838 ;; This function calls:
 21839 ;;		_isdigit
 21840 ;;		___lldiv
 21841 ;;		___llmod
 21842 ;;		___wmul
 21843 ;; This function is called by:
 21844 ;;		_doModeVerbose
 21845 ;;		_receivePrintEventVerbose
 21846 ;;		_printStatistics
 21847 ;;		_printErrors
 21848 ;; This function uses a non-reentrant model
 21849 ;;
 21850                           
 21851                           	psect	text54
 21852  001A10                     __ptext54:
 21853                           	opt stack 0
 21854  001A10                     _sprintf:
 21855                           	opt stack 25
 21856                           
 21857                           ; BSR set to: 0
 21858                           ;doprnt.c: 494: va_list ap;
 21859                           ;doprnt.c: 499: signed char c;
 21860                           ;doprnt.c: 501: int width;
 21861                           ;doprnt.c: 504: int prec;
 21862                           ;doprnt.c: 508: unsigned short flag;
 21863                           ;doprnt.c: 527: union {
 21864                           ;doprnt.c: 528: unsigned long _val;
 21865                           ;doprnt.c: 529: struct {
 21866                           ;doprnt.c: 530: const char * _cp;
 21867                           ;doprnt.c: 531: unsigned _len;
 21868                           ;doprnt.c: 532: } _str;
 21869                           ;doprnt.c: 533: } _val;
 21870                           ;doprnt.c: 542: *ap = __va_start();
 21871                           
 21872                           ; BSR set to: 0
 21873                           ;incstack = 0
 21874                           ;incstack = 0
 21875  001A10  0E7A               	movlw	low (?_sprintf+4)
 21876  001A12  6F88               	movwf	sprintf@ap& (0+255),b
 21877                           
 21878                           ;doprnt.c: 545: while(c = *f++) {
 21879  001A14  D32C               	goto	l16132
 21880  001A16                     l15798:
 21881                           
 21882                           ; BSR set to: 0
 21883                           ;doprnt.c: 547: if(c != '%')
 21884  001A16  5191               	movf	sprintf@c& (0+255),w,b
 21885  001A18  0A25               	xorlw	37
 21886  001A1A  E009               	bz	l1678
 21887                           
 21888                           ; BSR set to: 0
 21889                           ;doprnt.c: 549: {
 21890                           ;doprnt.c: 550: ((*sp++ = (c)));
 21891  001A1C  C076  FFD9         	movff	sprintf@sp,fsr2l
 21892  001A20  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 21893  001A24  C091  FFDF         	movff	sprintf@c,indf2
 21894                           
 21895                           ; BSR set to: 0
 21896  001A28  4B76               	infsnz	sprintf@sp& (0+255),f,b
 21897  001A2A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 21898                           
 21899                           ;doprnt.c: 551: continue;
 21900  001A2C  D320               	goto	l16132
 21901  001A2E                     l1678:
 21902                           
 21903                           ; BSR set to: 0
 21904                           ;doprnt.c: 552: }
 21905                           ;doprnt.c: 555: width = 0;
 21906  001A2E  6B8B               	clrf	sprintf@width& (0+255),b
 21907  001A30  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 21908                           
 21909                           ;doprnt.c: 557: flag = 0;
 21910  001A32  6B92               	clrf	sprintf@flag& (0+255),b
 21911  001A34  6B93               	clrf	(sprintf@flag+1)& (0+255),b
 21912  001A36  D009               	goto	l15814
 21913  001A38                     l15804:
 21914                           
 21915                           ; BSR set to: 0
 21916                           ;doprnt.c: 563: flag |= 0x08;
 21917  001A38  8792               	bsf	sprintf@flag& (0+255),3,b
 21918  001A3A  D005               	goto	L38
 21919  001A3C                     l15806:
 21920                           
 21921                           ; BSR set to: 0
 21922                           ;doprnt.c: 570: flag |= 0x01;
 21923  001A3C  8192               	bsf	sprintf@flag& (0+255),0,b
 21924  001A3E  D003               	goto	L38
 21925  001A40                     l15808:
 21926                           
 21927                           ; BSR set to: 0
 21928                           ;doprnt.c: 583: flag |= 0x800;
 21929  001A40  8793               	bsf	(sprintf@flag+1)& (0+255),3,b
 21930  001A42  D001               	goto	L38
 21931  001A44                     l15810:
 21932                           
 21933                           ; BSR set to: 0
 21934                           ;doprnt.c: 589: flag |= 0x04;
 21935  001A44  8592               	bsf	sprintf@flag& (0+255),2,b
 21936  001A46                     L38:
 21937                           
 21938                           ;doprnt.c: 590: f++;
 21939  001A46  4B78               	infsnz	sprintf@f& (0+255),f,b
 21940  001A48  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 21941  001A4A                     l15814:
 21942                           
 21943                           ; BSR set to: 0
 21944  001A4A  C078  FFF6         	movff	sprintf@f,tblptrl
 21945  001A4E  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21946  001A52  0008               	tblrd		*
 21947  001A54  50F5               	movf	tablat,w,c
 21948                           
 21949                           ; Switch size 1, requested type "space"
 21950                           ; Number of cases is 4, Range of values is 32 to 48
 21951                           ; switch strategies available:
 21952                           ; Name         Instructions Cycles
 21953                           ; simple_byte           13     7 (average)
 21954                           ;	Chosen strategy is simple_byte
 21955  001A56  0A20               	xorlw	32	; case 32
 21956  001A58  E0F1               	bz	l15806
 21957  001A5A  0A03               	xorlw	3	; case 35
 21958  001A5C  E0F1               	bz	l15808
 21959  001A5E  0A0E               	xorlw	14	; case 45
 21960  001A60  E0EB               	bz	l15804
 21961  001A62  0A1D               	xorlw	29	; case 48
 21962  001A64  E0EF               	bz	l15810
 21963                           
 21964                           ; BSR set to: 0
 21965                           ;doprnt.c: 602: if(flag & 0x08)
 21966  001A66  B792               	btfsc	sprintf@flag& (0+255),3,b
 21967                           
 21968                           ; BSR set to: 0
 21969                           ;doprnt.c: 603: flag &= ~0x04;
 21970  001A68  9592               	bcf	sprintf@flag& (0+255),2,b
 21971                           
 21972                           ; BSR set to: 0
 21973                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 21974  001A6A  C078  FFF6         	movff	sprintf@f,tblptrl
 21975  001A6E  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21976  001A72  0008               	tblrd		*
 21977  001A74  50F5               	movf	tablat,w,c
 21978  001A76  ECF0  F02E         	call	_isdigit
 21979  001A7A  E325               	bnc	l15830
 21980                           
 21981                           ; BSR set to: 0
 21982                           ;doprnt.c: 607: width = 0;
 21983  001A7C  6B8B               	clrf	sprintf@width& (0+255),b
 21984  001A7E  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 21985  001A80                     l15822:
 21986                           
 21987                           ; BSR set to: 0
 21988                           ;doprnt.c: 609: width *= 10;
 21989  001A80  C08B  F060         	movff	sprintf@width,?___wmul
 21990  001A84  C08C  F061         	movff	sprintf@width+1,?___wmul+1
 21991  001A88  6B63               	clrf	(?___wmul+3)& (0+255),b
 21992  001A8A  0E0A               	movlw	10
 21993  001A8C  6F62               	movwf	(?___wmul+2)& (0+255),b
 21994  001A8E  EC7E  F02E         	call	___wmul	;wreg free
 21995  001A92  C060  F08B         	movff	?___wmul,sprintf@width
 21996  001A96  C061  F08C         	movff	?___wmul+1,sprintf@width+1
 21997                           
 21998                           ; BSR set to: 0
 21999                           ;doprnt.c: 610: width += *f++ - '0';
 22000  001A9A  C078  FFF6         	movff	sprintf@f,tblptrl
 22001  001A9E  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22002  001AA2  0008               	tblrd		*
 22003  001AA4  CFF5 F07E          	movff	tablat,??_sprintf
 22004  001AA8  0ED0               	movlw	208
 22005  001AAA  257E               	addwf	??_sprintf& (0+255),w,b
 22006  001AAC  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 22007  001AAE  6B80               	clrf	(??_sprintf+2)& (0+255),b
 22008  001AB0  0EFF               	movlw	255
 22009  001AB2  2380               	addwfc	(??_sprintf+2)& (0+255),f,b
 22010  001AB4  517F               	movf	(??_sprintf+1)& (0+255),w,b
 22011  001AB6  278B               	addwf	sprintf@width& (0+255),f,b
 22012  001AB8  5180               	movf	(??_sprintf+2)& (0+255),w,b
 22013  001ABA  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22014                           
 22015                           ; BSR set to: 0
 22016                           
 22017                           ; BSR set to: 0
 22018                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 22019  001ABC  DB36               	call	PL84	;call to abstracted procedure
 22020  001ABE  ECF0  F02E         	call	_isdigit
 22021  001AC2  E314               	bnc	l15838
 22022  001AC4  D7DD               	goto	l15822
 22023  001AC6                     l15830:
 22024                           
 22025                           ; BSR set to: 0
 22026  001AC6  C078  FFF6         	movff	sprintf@f,tblptrl
 22027  001ACA  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22028  001ACE  0008               	tblrd		*
 22029  001AD0  50F5               	movf	tablat,w,c
 22030  001AD2  0A2A               	xorlw	42
 22031  001AD4  E10B               	bnz	l15838
 22032                           
 22033                           ; BSR set to: 0
 22034                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 22035  001AD6  5188               	movf	sprintf@ap& (0+255),w,b
 22036  001AD8  6ED9               	movwf	fsr2l,c
 22037  001ADA  6ADA               	clrf	fsr2h,c
 22038  001ADC  CFDE F08B          	movff	postinc2,sprintf@width
 22039  001AE0  CFDD F08C          	movff	postdec2,sprintf@width+1
 22040                           
 22041                           ; BSR set to: 0
 22042  001AE4  0E02               	movlw	2
 22043  001AE6  2788               	addwf	sprintf@ap& (0+255),f,b
 22044                           
 22045                           ; BSR set to: 0
 22046                           ;doprnt.c: 615: f++;
 22047  001AE8  4B78               	infsnz	sprintf@f& (0+255),f,b
 22048  001AEA  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22049  001AEC                     l15838:
 22050                           
 22051                           ; BSR set to: 0
 22052                           ;doprnt.c: 617: }
 22053                           ;doprnt.c: 620: if(*f == '.') {
 22054  001AEC  C078  FFF6         	movff	sprintf@f,tblptrl
 22055  001AF0  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22056  001AF4  0008               	tblrd		*
 22057  001AF6  50F5               	movf	tablat,w,c
 22058  001AF8  0A2E               	xorlw	46
 22059  001AFA  E137               	bnz	l1694
 22060                           
 22061                           ; BSR set to: 0
 22062                           ;doprnt.c: 621: flag |= 0x4000;
 22063  001AFC  8D93               	bsf	(sprintf@flag+1)& (0+255),6,b
 22064                           
 22065                           ;doprnt.c: 622: f++;
 22066                           
 22067                           ; BSR set to: 0
 22068                           ;doprnt.c: 624: if(*f == '*') {
 22069  001AFE  DB15               	call	PL84	;call to abstracted procedure
 22070  001B00  0A2A               	xorlw	42
 22071  001B02  E10C               	bnz	l1695
 22072                           
 22073                           ; BSR set to: 0
 22074                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 22075  001B04  5188               	movf	sprintf@ap& (0+255),w,b
 22076  001B06  6ED9               	movwf	fsr2l,c
 22077  001B08  6ADA               	clrf	fsr2h,c
 22078  001B0A  CFDE F089          	movff	postinc2,sprintf@prec
 22079  001B0E  CFDD F08A          	movff	postdec2,sprintf@prec+1
 22080                           
 22081                           ; BSR set to: 0
 22082  001B12  0E02               	movlw	2
 22083  001B14  2788               	addwf	sprintf@ap& (0+255),f,b
 22084                           
 22085                           ; BSR set to: 0
 22086                           ;doprnt.c: 626: f++;
 22087  001B16  4B78               	infsnz	sprintf@f& (0+255),f,b
 22088  001B18  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22089                           
 22090                           ;doprnt.c: 627: } else
 22091  001B1A  D088               	goto	l15908
 22092  001B1C                     l1695:
 22093                           
 22094                           ; BSR set to: 0
 22095                           ;doprnt.c: 629: {
 22096                           ;doprnt.c: 630: prec = 0;
 22097  001B1C  6B89               	clrf	sprintf@prec& (0+255),b
 22098  001B1E  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22099                           
 22100                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 22101  001B20  D01A               	goto	l15854
 22102  001B22                     l15850:
 22103                           
 22104                           ; BSR set to: 0
 22105                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 22106  001B22  C089  F060         	movff	sprintf@prec,?___wmul
 22107  001B26  C08A  F061         	movff	sprintf@prec+1,?___wmul+1
 22108  001B2A  6B63               	clrf	(?___wmul+3)& (0+255),b
 22109  001B2C  0E0A               	movlw	10
 22110  001B2E  6F62               	movwf	(?___wmul+2)& (0+255),b
 22111  001B30  EC7E  F02E         	call	___wmul	;wreg free
 22112  001B34  C078  FFF6         	movff	sprintf@f,tblptrl
 22113  001B38  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22114  001B3C  0008               	tblrd		*
 22115  001B3E  50F5               	movf	tablat,w,c
 22116  001B40  2760               	addwf	?___wmul& (0+255),f,b
 22117  001B42  0E00               	movlw	0
 22118  001B44  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22119  001B46  0ED0               	movlw	208
 22120  001B48  2560               	addwf	?___wmul& (0+255),w,b
 22121  001B4A  6F89               	movwf	sprintf@prec& (0+255),b
 22122  001B4C  0EFF               	movlw	255
 22123  001B4E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 22124  001B50  6F8A               	movwf	(sprintf@prec+1)& (0+255),b
 22125                           
 22126                           ; BSR set to: 0
 22127  001B52  4B78               	infsnz	sprintf@f& (0+255),f,b
 22128  001B54  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22129  001B56                     l15854:
 22130                           
 22131                           ; BSR set to: 0
 22132  001B56  C078  FFF6         	movff	sprintf@f,tblptrl
 22133  001B5A  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22134  001B5E  0008               	tblrd		*
 22135  001B60  50F5               	movf	tablat,w,c
 22136  001B62  ECF0  F02E         	call	_isdigit
 22137  001B66  E362               	bnc	l15908
 22138  001B68  D7DC               	goto	l15850
 22139  001B6A                     l1694:
 22140                           
 22141                           ; BSR set to: 0
 22142                           ;doprnt.c: 635: prec = 0;
 22143  001B6A  6B89               	clrf	sprintf@prec& (0+255),b
 22144  001B6C  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22145  001B6E  D05E               	goto	l15908
 22146  001B70                     l15856:
 22147                           
 22148                           ; BSR set to: 0
 22149                           ;doprnt.c: 652: flag |= 0x10;
 22150  001B70  8992               	bsf	sprintf@flag& (0+255),4,b
 22151                           
 22152                           ;doprnt.c: 653: goto loop;
 22153  001B72  D05C               	goto	l15908
 22154  001B74                     l15858:
 22155                           
 22156                           ; BSR set to: 0
 22157                           ;doprnt.c: 700: flag |= 0x40;
 22158  001B74  8D92               	bsf	sprintf@flag& (0+255),6,b
 22159                           
 22160                           ;doprnt.c: 702: break;
 22161  001B76  D06F               	goto	l15910
 22162  001B78                     l15860:
 22163                           
 22164                           ; BSR set to: 0
 22165                           ;doprnt.c: 723: flag |= 0x20;
 22166  001B78  8B92               	bsf	sprintf@flag& (0+255),5,b
 22167  001B7A                     l1711:
 22168                           
 22169                           ; BSR set to: 0
 22170                           ;doprnt.c: 730: flag |= 0x80;
 22171  001B7A  8F92               	bsf	sprintf@flag& (0+255),7,b
 22172                           
 22173                           ;doprnt.c: 732: break;
 22174  001B7C  D06C               	goto	l15910
 22175  001B7E                     l15862:
 22176                           
 22177                           ; BSR set to: 0
 22178                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 22179  001B7E  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22180  001B80  1189               	iorwf	sprintf@prec& (0+255),w,b
 22181  001B82  E009               	bz	l15868
 22182                           
 22183                           ; BSR set to: 0
 22184  001B84  518E               	movf	(sprintf@_val+1)& (0+255),w,b
 22185  001B86  5D89               	subwf	sprintf@prec& (0+255),w,b
 22186  001B88  518F               	movf	(sprintf@_val+2)& (0+255),w,b
 22187  001B8A  598A               	subwfb	(sprintf@prec+1)& (0+255),w,b
 22188  001B8C  E204               	bc	l15868
 22189                           
 22190                           ; BSR set to: 0
 22191                           ;doprnt.c: 763: _val._str._len = prec;
 22192  001B8E  C089  F08E         	movff	sprintf@prec,sprintf@_val+1
 22193  001B92  C08A  F08F         	movff	sprintf@prec+1,sprintf@_val+2
 22194  001B96                     l15868:
 22195                           
 22196                           ; BSR set to: 0
 22197                           ;doprnt.c: 766: if(width > _val._str._len)
 22198  001B96  518B               	movf	sprintf@width& (0+255),w,b
 22199  001B98  5D8E               	subwf	(sprintf@_val+1)& (0+255),w,b
 22200  001B9A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22201  001B9C  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22202  001B9E  E207               	bc	l1714
 22203                           
 22204                           ; BSR set to: 0
 22205                           ;doprnt.c: 767: width -= _val._str._len;
 22206  001BA0  EE20  F08E         	lfsr	2,sprintf@_val+1
 22207  001BA4  50DE               	movf	postinc2,w,c
 22208  001BA6  5F8B               	subwf	sprintf@width& (0+255),f,b
 22209  001BA8  50DD               	movf	postdec2,w,c
 22210  001BAA  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22211  001BAC  D002               	goto	l1715
 22212  001BAE                     l1714:
 22213                           
 22214                           ; BSR set to: 0
 22215                           ;doprnt.c: 768: else
 22216                           ;doprnt.c: 769: width = 0;
 22217  001BAE  6B8B               	clrf	sprintf@width& (0+255),b
 22218  001BB0  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22219  001BB2                     l1715:
 22220                           
 22221                           ; BSR set to: 0
 22222                           ;doprnt.c: 771: if(!(flag & 0x08))
 22223  001BB2  A792               	btfss	sprintf@flag& (0+255),3,b
 22224  001BB4  D004               	goto	l15878
 22225  001BB6  D015               	goto	l15886
 22226  001BB8                     l15874:
 22227                           
 22228                           ; BSR set to: 0
 22229                           ;doprnt.c: 774: ((*sp++ = (' ')));
 22230  001BB8  DAB1               	call	PL64	;call to abstracted procedure
 22231                           
 22232                           ; BSR set to: 0
 22233  001BBA  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22234  001BBC  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22235  001BBE                     l15878:
 22236                           
 22237                           ; BSR set to: 0
 22238  001BBE  078B               	decf	sprintf@width& (0+255),f,b
 22239  001BC0  DAC2               	call	PL110	;call to abstracted procedure
 22240  001BC2  B4D8               	btfsc	status,2,c
 22241  001BC4  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22242  001BC6  E00D               	bz	l15886
 22243  001BC8  D7F7               	goto	l15874
 22244  001BCA                     l15880:
 22245                           
 22246                           ; BSR set to: 0
 22247                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 22248  001BCA  518D               	movf	sprintf@_val& (0+255),w,b
 22249  001BCC  6ED9               	movwf	fsr2l,c
 22250  001BCE  6ADA               	clrf	fsr2h,c
 22251  001BD0  C076  FFE1         	movff	sprintf@sp,fsr1l
 22252  001BD4  C077  FFE2         	movff	sprintf@sp+1,fsr1h
 22253  001BD8  CFDF FFE7          	movff	indf2,indf1
 22254                           
 22255                           ; BSR set to: 0
 22256  001BDC  2B8D               	incf	sprintf@_val& (0+255),f,b
 22257                           
 22258                           ; BSR set to: 0
 22259  001BDE  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22260  001BE0  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22261  001BE2                     l15886:
 22262                           
 22263                           ; BSR set to: 0
 22264  001BE2  078E               	decf	(sprintf@_val+1)& (0+255),f,b
 22265  001BE4  A0D8               	btfss	status,0,c
 22266  001BE6  078F               	decf	(sprintf@_val+2)& (0+255),f,b
 22267  001BE8  0100               	movlb	0	; () banked
 22268  001BEA  298E               	incf	(sprintf@_val+1)& (0+255),w,b
 22269  001BEC  B4D8               	btfsc	status,2,c
 22270  001BEE  298F               	incf	(sprintf@_val+2)& (0+255),w,b
 22271  001BF0  E1EC               	bnz	l15880
 22272                           
 22273                           ; BSR set to: 0
 22274                           ;doprnt.c: 779: if(flag & 0x08)
 22275  001BF2  B792               	btfsc	sprintf@flag& (0+255),3,b
 22276  001BF4  D004               	goto	l15894
 22277  001BF6  D23B               	goto	l16132
 22278  001BF8                     l15890:
 22279                           
 22280                           ; BSR set to: 0
 22281                           ;doprnt.c: 781: ((*sp++ = (' ')));
 22282  001BF8  DA91               	call	PL64	;call to abstracted procedure
 22283                           
 22284                           ; BSR set to: 0
 22285  001BFA  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22286  001BFC  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22287  001BFE                     l15894:
 22288                           
 22289                           ; BSR set to: 0
 22290  001BFE  078B               	decf	sprintf@width& (0+255),f,b
 22291  001C00  DAA2               	call	PL110	;call to abstracted procedure
 22292  001C02  B4D8               	btfsc	status,2,c
 22293  001C04  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22294  001C06  E101 D232          	bz	l16132
 22295  001C0A  D7F6               	goto	l15890
 22296  001C0C                     l15896:
 22297                           
 22298                           ; BSR set to: 0
 22299                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 22300  001C0C  5188               	movf	sprintf@ap& (0+255),w,b
 22301  001C0E  6ED9               	movwf	fsr2l,c
 22302  001C10  6ADA               	clrf	fsr2h,c
 22303  001C12  50DF               	movf	indf2,w,c
 22304  001C14  6F91               	movwf	sprintf@c& (0+255),b
 22305                           
 22306                           ; BSR set to: 0
 22307  001C16  0E02               	movlw	2
 22308  001C18  2788               	addwf	sprintf@ap& (0+255),f,b
 22309  001C1A                     l15900:
 22310                           
 22311                           ; BSR set to: 0
 22312                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 22313  001C1A  0E91               	movlw	low sprintf@c
 22314  001C1C  6F8D               	movwf	sprintf@_val& (0+255),b
 22315                           
 22316                           ; BSR set to: 0
 22317                           ;doprnt.c: 815: _val._str._len = 1;
 22318  001C1E  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22319  001C20  0E01               	movlw	1
 22320  001C22  6F8E               	movwf	(sprintf@_val+1)& (0+255),b
 22321                           
 22322                           ;doprnt.c: 816: goto dostring;
 22323  001C24  D7AC               	goto	l15862
 22324  001C26                     l15904:
 22325                           
 22326                           ; BSR set to: 0
 22327                           ;doprnt.c: 827: flag |= 0xC0;
 22328  001C26  0EC0               	movlw	192
 22329  001C28  1392               	iorwf	sprintf@flag& (0+255),f,b
 22330                           
 22331                           ;doprnt.c: 828: break;
 22332  001C2A  D015               	goto	l15910
 22333  001C2C                     l15908:
 22334                           
 22335                           ; BSR set to: 0
 22336  001C2C  DA6C               	call	PL60	;call to abstracted procedure
 22337  001C2E  5191               	movf	sprintf@c& (0+255),w,b
 22338                           
 22339                           ; Switch size 1, requested type "space"
 22340                           ; Number of cases is 9, Range of values is 0 to 120
 22341                           ; switch strategies available:
 22342                           ; Name         Instructions Cycles
 22343                           ; simple_byte           28    15 (average)
 22344                           ;	Chosen strategy is simple_byte
 22345  001C30  E101 D220          	bz	l16134
 22346  001C34  0A58               	xorlw	88	; case 88
 22347  001C36  E0A0               	bz	l15860
 22348  001C38  0A3B               	xorlw	59	; case 99
 22349  001C3A  E0E8               	bz	l15896
 22350  001C3C  0A07               	xorlw	7	; case 100
 22351  001C3E  E00B               	bz	l15910
 22352  001C40  0A0D               	xorlw	13	; case 105
 22353  001C42  E009               	bz	l15910
 22354  001C44  0A05               	xorlw	5	; case 108
 22355  001C46  E094               	bz	l15856
 22356  001C48  0A03               	xorlw	3	; case 111
 22357  001C4A  E094               	bz	l15858
 22358  001C4C  0A1A               	xorlw	26	; case 117
 22359  001C4E  E0EB               	bz	l15904
 22360  001C50  0A0D               	xorlw	13	; case 120
 22361  001C52  E093               	bz	l1711
 22362  001C54  D7E2               	goto	l15900
 22363  001C56                     l15910:
 22364                           
 22365                           ; BSR set to: 0
 22366                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 22367  001C56  5192               	movf	sprintf@flag& (0+255),w,b
 22368  001C58  0BC0               	andlw	192
 22369  001C5A  E120               	bnz	l1730
 22370                           
 22371                           ; BSR set to: 0
 22372                           ;doprnt.c: 1260: {
 22373                           ;doprnt.c: 1262: if(flag & 0x10)
 22374  001C5C  A992               	btfss	sprintf@flag& (0+255),4,b
 22375  001C5E  D003               	goto	l15918
 22376                           
 22377                           ; BSR set to: 0
 22378                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 22379  001C60  5188               	movf	sprintf@ap& (0+255),w,b
 22380                           
 22381                           ; BSR set to: 0
 22382  001C62  DA46               	call	PL50	;call to abstracted procedure
 22383  001C64  D00D               	goto	L39
 22384  001C66                     l15918:
 22385                           
 22386                           ; BSR set to: 0
 22387                           ;doprnt.c: 1264: else
 22388                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 22389  001C66  5188               	movf	sprintf@ap& (0+255),w,b
 22390  001C68  6ED9               	movwf	fsr2l,c
 22391  001C6A  6ADA               	clrf	fsr2h,c
 22392  001C6C  CFDE F08D          	movff	postinc2,sprintf@_val
 22393  001C70  CFDD F08E          	movff	postdec2,sprintf@_val+1
 22394  001C74  0E00               	movlw	0
 22395  001C76  BF8E               	btfsc	(sprintf@_val+1)& (0+255),7,b
 22396  001C78  0EFF               	movlw	-1
 22397  001C7A  6F8F               	movwf	(sprintf@_val+2)& (0+255),b
 22398  001C7C  6F90               	movwf	(sprintf@_val+3)& (0+255),b
 22399                           
 22400                           ; BSR set to: 0
 22401  001C7E  0E02               	movlw	2
 22402  001C80                     L39:
 22403  001C80  2788               	addwf	sprintf@ap& (0+255),f,b
 22404                           
 22405                           ; BSR set to: 0
 22406                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 22407  001C82  AF90               	btfss	(sprintf@_val+3)& (0+255),7,b
 22408  001C84  D01F               	goto	l15936
 22409                           
 22410                           ; BSR set to: 0
 22411                           ;doprnt.c: 1269: flag |= 0x03;
 22412  001C86  0E03               	movlw	3
 22413  001C88  1392               	iorwf	sprintf@flag& (0+255),f,b
 22414                           
 22415                           ; BSR set to: 0
 22416                           ;doprnt.c: 1270: _val._val = -_val._val;
 22417  001C8A  1F90               	comf	(sprintf@_val+3)& (0+255),f,b
 22418  001C8C  1F8F               	comf	(sprintf@_val+2)& (0+255),f,b
 22419  001C8E  1F8E               	comf	(sprintf@_val+1)& (0+255),f,b
 22420  001C90  6D8D               	negf	sprintf@_val& (0+255),b
 22421  001C92  0E00               	movlw	0
 22422  001C94  238E               	addwfc	(sprintf@_val+1)& (0+255),f,b
 22423  001C96  238F               	addwfc	(sprintf@_val+2)& (0+255),f,b
 22424  001C98  2390               	addwfc	(sprintf@_val+3)& (0+255),f,b
 22425  001C9A  D014               	goto	l15936
 22426  001C9C                     l1730:
 22427                           
 22428                           ; BSR set to: 0
 22429                           ;doprnt.c: 1275: else
 22430                           ;doprnt.c: 1280: {
 22431                           ;doprnt.c: 1288: if(flag & 0x10)
 22432  001C9C  A992               	btfss	sprintf@flag& (0+255),4,b
 22433  001C9E  D003               	goto	l15932
 22434                           
 22435                           ; BSR set to: 0
 22436                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 22437  001CA0  5188               	movf	sprintf@ap& (0+255),w,b
 22438                           
 22439                           ; BSR set to: 0
 22440  001CA2  DA26               	call	PL50	;call to abstracted procedure
 22441  001CA4  D00E               	goto	L40
 22442  001CA6                     l15932:
 22443                           
 22444                           ; BSR set to: 0
 22445                           ;doprnt.c: 1290: else
 22446                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22447  001CA6  5188               	movf	sprintf@ap& (0+255),w,b
 22448  001CA8  6ED9               	movwf	fsr2l,c
 22449  001CAA  6ADA               	clrf	fsr2h,c
 22450  001CAC  CFDE F07E          	movff	postinc2,??_sprintf
 22451  001CB0  CFDD F07F          	movff	postdec2,??_sprintf+1
 22452  001CB4  C07E  F08D         	movff	??_sprintf,sprintf@_val
 22453  001CB8  C07F  F08E         	movff	??_sprintf+1,sprintf@_val+1
 22454  001CBC  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22455  001CBE  6B90               	clrf	(sprintf@_val+3)& (0+255),b
 22456                           
 22457                           ; BSR set to: 0
 22458  001CC0  0E02               	movlw	2
 22459  001CC2                     L40:
 22460  001CC2  2788               	addwf	sprintf@ap& (0+255),f,b
 22461  001CC4                     l15936:
 22462                           
 22463                           ; BSR set to: 0
 22464                           ;doprnt.c: 1294: }
 22465                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 22466  001CC4  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22467  001CC6  1189               	iorwf	sprintf@prec& (0+255),w,b
 22468  001CC8  E15C               	bnz	l15986
 22469                           
 22470                           ; BSR set to: 0
 22471  001CCA  5190               	movf	(sprintf@_val+3)& (0+255),w,b
 22472  001CCC  118D               	iorwf	sprintf@_val& (0+255),w,b
 22473  001CCE  118E               	iorwf	(sprintf@_val+1)& (0+255),w,b
 22474  001CD0  118F               	iorwf	(sprintf@_val+2)& (0+255),w,b
 22475  001CD2  E157               	bnz	l15986
 22476                           
 22477                           ; BSR set to: 0
 22478                           ;doprnt.c: 1298: prec++;
 22479  001CD4  4B89               	infsnz	sprintf@prec& (0+255),f,b
 22480  001CD6  2B8A               	incf	(sprintf@prec+1)& (0+255),f,b
 22481  001CD8  D054               	goto	l15986
 22482  001CDA                     l15942:
 22483                           
 22484                           ; BSR set to: 0
 22485                           ;doprnt.c: 1309: case 0xC0:
 22486                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22487  001CDA  0E01               	movlw	1
 22488  001CDC  6F91               	movwf	sprintf@c& (0+255),b
 22489  001CDE                     l15944:
 22490                           
 22491                           ; BSR set to: 0
 22492  001CDE  5191               	movf	sprintf@c& (0+255),w,b
 22493  001CE0  0A0A               	xorlw	10
 22494  001CE2  E058               	bz	l15988
 22495                           
 22496                           ; BSR set to: 0
 22497                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 22498  001CE4  5191               	movf	sprintf@c& (0+255),w,b
 22499  001CE6  0D04               	mullw	4
 22500  001CE8  0E84               	movlw	low _dpowers
 22501  001CEA  24F3               	addwf	prodl,w,c
 22502  001CEC  6EF6               	movwf	tblptrl,c
 22503  001CEE  0E6F               	movlw	high _dpowers
 22504  001CF0  20F4               	addwfc	prodh,w,c
 22505  001CF2  6EF7               	movwf	tblptrh,c
 22506  001CF4  0009               	tblrd		*+
 22507  001CF6  50F5               	movf	tablat,w,c
 22508  001CF8  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22509  001CFA  0009               	tblrd		*+
 22510  001CFC  50F5               	movf	tablat,w,c
 22511  001CFE  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22512  001D00  0009               	tblrd		*+
 22513  001D02  50F5               	movf	tablat,w,c
 22514  001D04  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22515  001D06  0009               	tblrd		*+
 22516  001D08  50F5               	movf	tablat,w,c
 22517  001D0A  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22518  001D0C  E343               	bnc	l15988
 22519                           
 22520                           ; BSR set to: 0
 22521  001D0E  2B91               	incf	sprintf@c& (0+255),f,b
 22522  001D10  D7E6               	goto	l15944
 22523  001D12                     l15956:
 22524                           
 22525                           ; BSR set to: 0
 22526                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 22527  001D12  0E01               	movlw	1
 22528  001D14  6F91               	movwf	sprintf@c& (0+255),b
 22529  001D16                     l15958:
 22530                           
 22531                           ; BSR set to: 0
 22532  001D16  5191               	movf	sprintf@c& (0+255),w,b
 22533  001D18  0A08               	xorlw	8
 22534  001D1A  E03C               	bz	l15988
 22535                           
 22536                           ; BSR set to: 0
 22537                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 22538  001D1C  5191               	movf	sprintf@c& (0+255),w,b
 22539  001D1E  0D04               	mullw	4
 22540  001D20  0EAC               	movlw	low _hexpowers
 22541  001D22  24F3               	addwf	prodl,w,c
 22542  001D24  6EF6               	movwf	tblptrl,c
 22543  001D26  0E6F               	movlw	high _hexpowers
 22544  001D28  20F4               	addwfc	prodh,w,c
 22545  001D2A  6EF7               	movwf	tblptrh,c
 22546  001D2C  0009               	tblrd		*+
 22547  001D2E  50F5               	movf	tablat,w,c
 22548  001D30  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22549  001D32  0009               	tblrd		*+
 22550  001D34  50F5               	movf	tablat,w,c
 22551  001D36  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22552  001D38  0009               	tblrd		*+
 22553  001D3A  50F5               	movf	tablat,w,c
 22554  001D3C  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22555  001D3E  0009               	tblrd		*+
 22556  001D40  50F5               	movf	tablat,w,c
 22557  001D42  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22558  001D44  E327               	bnc	l15988
 22559                           
 22560                           ; BSR set to: 0
 22561  001D46  2B91               	incf	sprintf@c& (0+255),f,b
 22562  001D48  D7E6               	goto	l15958
 22563  001D4A                     l15970:
 22564                           
 22565                           ; BSR set to: 0
 22566                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 22567  001D4A  0E01               	movlw	1
 22568  001D4C  6F91               	movwf	sprintf@c& (0+255),b
 22569  001D4E                     l15972:
 22570                           
 22571                           ; BSR set to: 0
 22572  001D4E  5191               	movf	sprintf@c& (0+255),w,b
 22573  001D50  0A0C               	xorlw	12
 22574  001D52  E020               	bz	l15988
 22575                           
 22576                           ; BSR set to: 0
 22577                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 22578  001D54  5191               	movf	sprintf@c& (0+255),w,b
 22579  001D56  0D04               	mullw	4
 22580  001D58  0E54               	movlw	low _octpowers
 22581  001D5A  24F3               	addwf	prodl,w,c
 22582  001D5C  6EF6               	movwf	tblptrl,c
 22583  001D5E  0E6F               	movlw	high _octpowers
 22584  001D60  20F4               	addwfc	prodh,w,c
 22585  001D62  6EF7               	movwf	tblptrh,c
 22586  001D64  0009               	tblrd		*+
 22587  001D66  50F5               	movf	tablat,w,c
 22588  001D68  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22589  001D6A  0009               	tblrd		*+
 22590  001D6C  50F5               	movf	tablat,w,c
 22591  001D6E  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22592  001D70  0009               	tblrd		*+
 22593  001D72  50F5               	movf	tablat,w,c
 22594  001D74  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22595  001D76  0009               	tblrd		*+
 22596  001D78  50F5               	movf	tablat,w,c
 22597  001D7A  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22598  001D7C  E30B               	bnc	l15988
 22599                           
 22600                           ; BSR set to: 0
 22601  001D7E  2B91               	incf	sprintf@c& (0+255),f,b
 22602  001D80  D7E6               	goto	l15972
 22603  001D82                     l15986:
 22604                           
 22605                           ; BSR set to: 0
 22606  001D82  5192               	movf	sprintf@flag& (0+255),w,b
 22607  001D84  0BC0               	andlw	192
 22608                           
 22609                           ; Switch size 1, requested type "space"
 22610                           ; Number of cases is 4, Range of values is 0 to 192
 22611                           ; switch strategies available:
 22612                           ; Name         Instructions Cycles
 22613                           ; simple_byte           13     7 (average)
 22614                           ;	Chosen strategy is simple_byte
 22615  001D86  E0A9               	bz	l15942
 22616  001D88  0A40               	xorlw	64	; case 64
 22617  001D8A  E0DF               	bz	l15970
 22618  001D8C  0AC0               	xorlw	192	; case 128
 22619  001D8E  E0C1               	bz	l15956
 22620  001D90  0A40               	xorlw	64	; case 192
 22621  001D92  E0A3               	bz	l15942
 22622  001D94                     l15988:
 22623                           
 22624                           ; BSR set to: 0
 22625                           ;doprnt.c: 1346: if(c < prec)
 22626  001D94  0E80               	movlw	128
 22627  001D96  BF91               	btfsc	sprintf@c& (0+255),7,b
 22628  001D98  0E7F               	movlw	127
 22629  001D9A  6F7E               	movwf	??_sprintf& (0+255),b
 22630  001D9C  5189               	movf	sprintf@prec& (0+255),w,b
 22631  001D9E  5D91               	subwf	sprintf@c& (0+255),w,b
 22632  001DA0  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22633  001DA2  0A80               	xorlw	128
 22634  001DA4  597E               	subwfb	??_sprintf& (0+255),w,b
 22635  001DA6  E203               	bc	l15992
 22636                           
 22637                           ; BSR set to: 0
 22638                           ;doprnt.c: 1347: c = prec;
 22639  001DA8  C089  F091         	movff	sprintf@prec,sprintf@c
 22640  001DAC  D00F               	goto	l15996
 22641  001DAE                     l15992:
 22642                           
 22643                           ; BSR set to: 0
 22644                           ;doprnt.c: 1348: else if(prec < c)
 22645  001DAE  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22646  001DB0  0A80               	xorlw	128
 22647  001DB2  6F7E               	movwf	??_sprintf& (0+255),b
 22648  001DB4  5191               	movf	sprintf@c& (0+255),w,b
 22649  001DB6  5D89               	subwf	sprintf@prec& (0+255),w,b
 22650  001DB8  0E80               	movlw	128
 22651  001DBA  BF91               	btfsc	sprintf@c& (0+255),7,b
 22652  001DBC  0E7F               	movlw	127
 22653  001DBE  597E               	subwfb	??_sprintf& (0+255),w,b
 22654  001DC0  E205               	bc	l15996
 22655                           
 22656                           ; BSR set to: 0
 22657                           ;doprnt.c: 1349: prec = c;
 22658  001DC2  5191               	movf	sprintf@c& (0+255),w,b
 22659  001DC4  6F89               	movwf	sprintf@prec& (0+255),b
 22660  001DC6  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22661  001DC8  BF89               	btfsc	sprintf@prec& (0+255),7,b
 22662  001DCA  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 22663  001DCC                     l15996:
 22664                           
 22665                           ; BSR set to: 0
 22666                           ;doprnt.c: 1352: if(width && flag & 0x03)
 22667  001DCC  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22668  001DCE  118B               	iorwf	sprintf@width& (0+255),w,b
 22669  001DD0  E006               	bz	l16002
 22670                           
 22671                           ; BSR set to: 0
 22672  001DD2  5192               	movf	sprintf@flag& (0+255),w,b
 22673  001DD4  0B03               	andlw	3
 22674  001DD6  E003               	bz	l16002
 22675                           
 22676                           ; BSR set to: 0
 22677                           ;doprnt.c: 1353: width--;
 22678  001DD8  078B               	decf	sprintf@width& (0+255),f,b
 22679  001DDA  A0D8               	btfss	status,0,c
 22680  001DDC  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22681  001DDE                     l16002:
 22682                           
 22683                           ; BSR set to: 0
 22684                           ;doprnt.c: 1355: if(flag & 0x4000) {
 22685  001DDE  AD93               	btfss	(sprintf@flag+1)& (0+255),6,b
 22686  001DE0  D010               	goto	l16008
 22687                           
 22688                           ; BSR set to: 0
 22689                           ;doprnt.c: 1356: if(width > prec)
 22690  001DE2  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22691  001DE4  0A80               	xorlw	128
 22692  001DE6  6F7E               	movwf	??_sprintf& (0+255),b
 22693  001DE8  518B               	movf	sprintf@width& (0+255),w,b
 22694  001DEA  5D89               	subwf	sprintf@prec& (0+255),w,b
 22695  001DEC  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22696  001DEE  0A80               	xorlw	128
 22697  001DF0  597E               	subwfb	??_sprintf& (0+255),w,b
 22698  001DF2  E205               	bc	l1758
 22699                           
 22700                           ; BSR set to: 0
 22701                           ;doprnt.c: 1357: width -= prec;
 22702  001DF4  5189               	movf	sprintf@prec& (0+255),w,b
 22703  001DF6  5F8B               	subwf	sprintf@width& (0+255),f,b
 22704  001DF8  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22705  001DFA  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22706  001DFC  D002               	goto	l16008
 22707  001DFE                     l1758:
 22708                           
 22709                           ; BSR set to: 0
 22710                           ;doprnt.c: 1358: else
 22711                           ;doprnt.c: 1359: width = 0;
 22712  001DFE  6B8B               	clrf	sprintf@width& (0+255),b
 22713  001E00  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22714  001E02                     l16008:
 22715                           
 22716                           ; BSR set to: 0
 22717                           ;doprnt.c: 1360: }
 22718                           ;doprnt.c: 1364: if((flag & (
 22719                           ;doprnt.c: 1366: 0x04|
 22720                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 22721  001E02  0EC4               	movlw	196
 22722  001E04  D94D               	call	PL16	;call to abstracted procedure
 22723  001E06  0E40               	movlw	64
 22724  001E08  B4D8               	btfsc	status,2,c
 22725  001E0A  197E               	xorwf	??_sprintf& (0+255),w,b
 22726  001E0C  E107               	bnz	l16014
 22727                           
 22728                           ; BSR set to: 0
 22729                           ;doprnt.c: 1369: if(width)
 22730  001E0E  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22731  001E10  118B               	iorwf	sprintf@width& (0+255),w,b
 22732  001E12  E018               	bz	l16020
 22733                           
 22734                           ; BSR set to: 0
 22735                           ;doprnt.c: 1370: width--;
 22736  001E14  078B               	decf	sprintf@width& (0+255),f,b
 22737  001E16  A0D8               	btfss	status,0,c
 22738  001E18  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22739  001E1A  D014               	goto	l16020
 22740  001E1C                     l16014:
 22741                           
 22742                           ; BSR set to: 0
 22743                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22744  001E1C  0EC0               	movlw	192
 22745  001E1E  D940               	call	PL16	;call to abstracted procedure
 22746  001E20  0E80               	movlw	128
 22747  001E22  B4D8               	btfsc	status,2,c
 22748  001E24  197E               	xorwf	??_sprintf& (0+255),w,b
 22749  001E26  E10E               	bnz	l16020
 22750                           
 22751                           ; BSR set to: 0
 22752                           ;doprnt.c: 1379: if(width > 2)
 22753  001E28  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22754  001E2A  0A80               	xorlw	128
 22755  001E2C  0F80               	addlw	-128
 22756  001E2E  0E03               	movlw	3
 22757  001E30  B4D8               	btfsc	status,2,c
 22758  001E32  5D8B               	subwf	sprintf@width& (0+255),w,b
 22759  001E34  E305               	bnc	l1764
 22760                           
 22761                           ; BSR set to: 0
 22762                           ;doprnt.c: 1380: width -= 2;
 22763  001E36  0EFE               	movlw	254
 22764  001E38  278B               	addwf	sprintf@width& (0+255),f,b
 22765  001E3A  0EFF               	movlw	255
 22766  001E3C  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22767  001E3E  D002               	goto	l16020
 22768  001E40                     l1764:
 22769                           
 22770                           ; BSR set to: 0
 22771                           ;doprnt.c: 1381: else
 22772                           ;doprnt.c: 1382: width = 0;
 22773  001E40  6B8B               	clrf	sprintf@width& (0+255),b
 22774  001E42  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22775  001E44                     l16020:
 22776                           
 22777                           ; BSR set to: 0
 22778                           ;doprnt.c: 1383: }
 22779                           ;doprnt.c: 1388: if(width > c)
 22780  001E44  0E80               	movlw	128
 22781  001E46  BF91               	btfsc	sprintf@c& (0+255),7,b
 22782  001E48  0E7F               	movlw	127
 22783  001E4A  6F7E               	movwf	??_sprintf& (0+255),b
 22784  001E4C  518B               	movf	sprintf@width& (0+255),w,b
 22785  001E4E  5D91               	subwf	sprintf@c& (0+255),w,b
 22786  001E50  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22787  001E52  0A80               	xorlw	128
 22788  001E54  597E               	subwfb	??_sprintf& (0+255),w,b
 22789  001E56  E207               	bc	l1766
 22790                           
 22791                           ; BSR set to: 0
 22792                           ;doprnt.c: 1389: width -= c;
 22793  001E58  5191               	movf	sprintf@c& (0+255),w,b
 22794  001E5A  5F8B               	subwf	sprintf@width& (0+255),f,b
 22795  001E5C  0E00               	movlw	0
 22796  001E5E  BF91               	btfsc	sprintf@c& (0+255),7,b
 22797  001E60  0EFF               	movlw	255
 22798  001E62  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22799  001E64  D002               	goto	l1767
 22800  001E66                     l1766:
 22801                           
 22802                           ; BSR set to: 0
 22803                           ;doprnt.c: 1390: else
 22804                           ;doprnt.c: 1391: width = 0;
 22805  001E66  6B8B               	clrf	sprintf@width& (0+255),b
 22806  001E68  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22807  001E6A                     l1767:
 22808                           
 22809                           ; BSR set to: 0
 22810                           ;doprnt.c: 1394: if(flag & 0x04) {
 22811  001E6A  A592               	btfss	sprintf@flag& (0+255),2,b
 22812  001E6C  D03C               	goto	l16058
 22813                           
 22814                           ; BSR set to: 0
 22815                           ;doprnt.c: 1399: if(flag & 0x03)
 22816  001E6E  5192               	movf	sprintf@flag& (0+255),w,b
 22817  001E70  0B03               	andlw	3
 22818  001E72  E009               	bz	l1769
 22819                           
 22820                           ; BSR set to: 0
 22821                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 22822  001E74  C076  FFD9         	movff	sprintf@sp,fsr2l
 22823  001E78  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22824  001E7C  0E2D               	movlw	45
 22825  001E7E  6EDF               	movwf	indf2,c
 22826  001E80                     l16028:
 22827                           
 22828                           ; BSR set to: 0
 22829  001E80  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22830  001E82  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22831  001E84  D022               	goto	l16050
 22832  001E86                     l1769:
 22833                           
 22834                           ; BSR set to: 0
 22835                           ;doprnt.c: 1403: else
 22836                           ;doprnt.c: 1406: if(flag & 0x01)
 22837  001E86  A192               	btfss	sprintf@flag& (0+255),0,b
 22838  001E88  D006               	goto	l16034
 22839                           
 22840                           ; BSR set to: 0
 22841                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 22842  001E8A  C076  FFD9         	movff	sprintf@sp,fsr2l
 22843  001E8E  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22844  001E92  0E20               	movlw	32
 22845  001E94  D7F4               	goto	L41
 22846  001E96                     l16034:
 22847                           
 22848                           ; BSR set to: 0
 22849                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22850  001E96  0EC0               	movlw	192
 22851  001E98  D903               	call	PL16	;call to abstracted procedure
 22852  001E9A  0E80               	movlw	128
 22853  001E9C  B4D8               	btfsc	status,2,c
 22854  001E9E  197E               	xorwf	??_sprintf& (0+255),w,b
 22855  001EA0  E114               	bnz	l16050
 22856                           
 22857                           ; BSR set to: 0
 22858                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 22859  001EA2  C076  FFD9         	movff	sprintf@sp,fsr2l
 22860  001EA6  D94A               	call	PL92	;call to abstracted procedure
 22861                           
 22862                           ; BSR set to: 0
 22863  001EA8  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22864  001EAA  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22865                           
 22866                           ; BSR set to: 0
 22867                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 22868  001EAC  BB92               	btfsc	sprintf@flag& (0+255),5,b
 22869  001EAE  D003               	goto	l16044
 22870                           
 22871                           ; BSR set to: 0
 22872  001EB0  6B83               	clrf	(_sprintf$2129+1)& (0+255),b
 22873  001EB2  0E78               	movlw	120
 22874  001EB4  D002               	goto	L42
 22875  001EB6                     l16044:
 22876                           
 22877                           ; BSR set to: 0
 22878  001EB6  6B83               	clrf	(_sprintf$2129+1)& (0+255),b
 22879  001EB8  0E58               	movlw	88
 22880  001EBA                     L42:
 22881  001EBA  6F82               	movwf	_sprintf$2129& (0+255),b
 22882                           
 22883                           ; BSR set to: 0
 22884  001EBC  C076  FFD9         	movff	sprintf@sp,fsr2l
 22885  001EC0  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22886  001EC4  C082  FFDF         	movff	_sprintf$2129,indf2
 22887  001EC8  D7DB               	goto	l16028
 22888  001ECA                     l16050:
 22889                           
 22890                           ; BSR set to: 0
 22891                           ;doprnt.c: 1419: }
 22892                           ;doprnt.c: 1422: if(width)
 22893  001ECA  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22894  001ECC  118B               	iorwf	sprintf@width& (0+255),w,b
 22895  001ECE  E101 D0B9          	bz	l16122
 22896                           
 22897                           ; BSR set to: 0
 22898                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 22899  001ED2  C076  FFD9         	movff	sprintf@sp,fsr2l
 22900  001ED6  D932               	call	PL92	;call to abstracted procedure
 22901                           
 22902                           ; BSR set to: 0
 22903  001ED8  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22904  001EDA  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22905                           
 22906                           ; BSR set to: 0
 22907                           ;doprnt.c: 1425: while(--width);
 22908  001EDC  078B               	decf	sprintf@width& (0+255),f,b
 22909  001EDE  A0D8               	btfss	status,0,c
 22910  001EE0  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22911  001EE2  0100               	movlb	0	; () banked
 22912  001EE4  D7F2               	goto	l16050
 22913  001EE6                     l16058:
 22914                           
 22915                           ; BSR set to: 0
 22916                           ;doprnt.c: 1429: {
 22917                           ;doprnt.c: 1431: if(width
 22918                           ;doprnt.c: 1433: && !(flag & 0x08)
 22919                           ;doprnt.c: 1435: )
 22920  001EE6  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22921  001EE8  118B               	iorwf	sprintf@width& (0+255),w,b
 22922  001EEA  A4D8               	btfss	status,2,c
 22923                           
 22924                           ; BSR set to: 0
 22925  001EEC  B792               	btfsc	sprintf@flag& (0+255),3,b
 22926  001EEE  D004               	goto	l16068
 22927  001EF0                     l16062:
 22928                           
 22929                           ; BSR set to: 0
 22930                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 22931  001EF0  C076  FFD9         	movff	sprintf@sp,fsr2l
 22932                           
 22933                           ; BSR set to: 0
 22934                           
 22935                           ; BSR set to: 0
 22936                           ;doprnt.c: 1438: while(--width);
 22937  001EF4  D8F0               	call	PL42	;call to abstracted procedure
 22938  001EF6  E1FC               	bnz	l16062
 22939  001EF8                     l16068:
 22940                           
 22941                           ; BSR set to: 0
 22942                           ;doprnt.c: 1445: if(flag & 0x03)
 22943  001EF8  5192               	movf	sprintf@flag& (0+255),w,b
 22944  001EFA  0B03               	andlw	3
 22945  001EFC  E009               	bz	l1785
 22946                           
 22947                           ; BSR set to: 0
 22948                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 22949  001EFE  C076  FFD9         	movff	sprintf@sp,fsr2l
 22950  001F02  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22951  001F06  0E2D               	movlw	45
 22952  001F08  6EDF               	movwf	indf2,c
 22953                           
 22954                           ; BSR set to: 0
 22955  001F0A  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22956  001F0C  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22957  001F0E  D008               	goto	l16078
 22958  001F10                     l1785:
 22959                           
 22960                           ; BSR set to: 0
 22961                           ;doprnt.c: 1450: else if(flag & 0x01)
 22962  001F10  A192               	btfss	sprintf@flag& (0+255),0,b
 22963  001F12  D006               	goto	l16078
 22964                           
 22965                           ; BSR set to: 0
 22966                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 22967  001F14  C076  FFD9         	movff	sprintf@sp,fsr2l
 22968  001F18  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22969  001F1C  0E20               	movlw	32
 22970  001F1E  D7F4               	goto	L43
 22971  001F20                     l16078:
 22972                           
 22973                           ; BSR set to: 0
 22974                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 22975  001F20  0EC0               	movlw	192
 22976  001F22  D8BE               	call	PL16	;call to abstracted procedure
 22977  001F24  0E40               	movlw	64
 22978  001F26  B4D8               	btfsc	status,2,c
 22979  001F28  197E               	xorwf	??_sprintf& (0+255),w,b
 22980  001F2A  E106               	bnz	l16084
 22981                           
 22982                           ; BSR set to: 0
 22983                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 22984  001F2C  C076  FFD9         	movff	sprintf@sp,fsr2l
 22985  001F30  D905               	call	PL92	;call to abstracted procedure
 22986  001F32                     l16082:
 22987                           
 22988                           ; BSR set to: 0
 22989  001F32  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22990  001F34  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22991  001F36  D086               	goto	l16122
 22992  001F38                     l16084:
 22993                           
 22994                           ; BSR set to: 0
 22995                           ;doprnt.c: 1457: else
 22996                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22997  001F38  0EC0               	movlw	192
 22998  001F3A  D8B2               	call	PL16	;call to abstracted procedure
 22999  001F3C  0E80               	movlw	128
 23000  001F3E  B4D8               	btfsc	status,2,c
 23001  001F40  197E               	xorwf	??_sprintf& (0+255),w,b
 23002  001F42  E001 D07F          	bnz	l16122
 23003                           
 23004                           ; BSR set to: 0
 23005                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 23006  001F46  C076  FFD9         	movff	sprintf@sp,fsr2l
 23007  001F4A  D8F8               	call	PL92	;call to abstracted procedure
 23008                           
 23009                           ; BSR set to: 0
 23010  001F4C  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23011  001F4E  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23012                           
 23013                           ; BSR set to: 0
 23014                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 23015  001F50  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23016  001F52  D003               	goto	l16094
 23017                           
 23018                           ; BSR set to: 0
 23019  001F54  6B85               	clrf	(_sprintf$2130+1)& (0+255),b
 23020  001F56  0E78               	movlw	120
 23021  001F58  D002               	goto	L44
 23022  001F5A                     l16094:
 23023                           
 23024                           ; BSR set to: 0
 23025  001F5A  6B85               	clrf	(_sprintf$2130+1)& (0+255),b
 23026  001F5C  0E58               	movlw	88
 23027  001F5E                     L44:
 23028  001F5E  6F84               	movwf	_sprintf$2130& (0+255),b
 23029                           
 23030                           ; BSR set to: 0
 23031  001F60  C076  FFD9         	movff	sprintf@sp,fsr2l
 23032  001F64  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23033  001F68  C084  FFDF         	movff	_sprintf$2130,indf2
 23034  001F6C  D7E2               	goto	l16082
 23035  001F6E                     l16100:
 23036                           
 23037                           ; BSR set to: 0
 23038                           ;doprnt.c: 1493: case 0xC0:
 23039                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 23040  001F6E  C089  F07E         	movff	sprintf@prec,??_sprintf
 23041  001F72  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23042  001F76  90D8               	bcf	status,0,c
 23043  001F78  377E               	rlcf	??_sprintf& (0+255),f,b
 23044  001F7A  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23045  001F7C  90D8               	bcf	status,0,c
 23046  001F7E  377E               	rlcf	??_sprintf& (0+255),f,b
 23047  001F80  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23048  001F82  0E84               	movlw	low _dpowers
 23049  001F84  257E               	addwf	??_sprintf& (0+255),w,b
 23050  001F86  6EF6               	movwf	tblptrl,c
 23051  001F88  0E6F               	movlw	high _dpowers
 23052  001F8A  D87B               	call	PL12	;call to abstracted procedure
 23053  001F8C  C08D  F060         	movff	sprintf@_val,?___lldiv
 23054  001F90  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23055  001F94  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23056  001F98  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23057  001F9C  EC77  F02A         	call	___lldiv	;wreg free
 23058  001FA0  C063  F070         	movff	?___lldiv+3,?___llmod+3
 23059  001FA4  C062  F06F         	movff	?___lldiv+2,?___llmod+2
 23060  001FA8  C061  F06E         	movff	?___lldiv+1,?___llmod+1
 23061  001FAC  C060  F06D         	movff	?___lldiv,?___llmod
 23062  001FB0  0E0A               	movlw	10
 23063  001FB2  6F71               	movwf	(?___llmod+4)& (0+255),b
 23064  001FB4  0E00               	movlw	0
 23065  001FB6  6B72               	clrf	(?___llmod+5)& (0+255),b
 23066  001FB8  6B73               	clrf	(?___llmod+6)& (0+255),b
 23067  001FBA  6B74               	clrf	(?___llmod+7)& (0+255),b
 23068  001FBC  EC86  F02B         	call	___llmod	;wreg free
 23069  001FC0  516D               	movf	?___llmod& (0+255),w,b
 23070  001FC2  D02D               	goto	L45
 23071  001FC4                     l16102:
 23072                           
 23073                           ; BSR set to: 0
 23074                           ;doprnt.c: 1506: {
 23075                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 23076  001FC4  D875               	call	PL20	;call to abstracted procedure
 23077  001FC6  0EAC               	movlw	low _hexpowers
 23078  001FC8  257E               	addwf	??_sprintf& (0+255),w,b
 23079  001FCA  6EF6               	movwf	tblptrl,c
 23080  001FCC  0E6F               	movlw	high _hexpowers
 23081  001FCE  D859               	call	PL12	;call to abstracted procedure
 23082  001FD0  EC77  F02A         	call	___lldiv	;wreg free
 23083  001FD4  5160               	movf	?___lldiv& (0+255),w,b
 23084  001FD6  0B0F               	andlw	15
 23085  001FD8  6F81               	movwf	sprintf@idx& (0+255),b
 23086                           
 23087                           ; BSR set to: 0
 23088                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 23089  001FDA  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23090  001FDC  D004               	goto	l16108
 23091                           
 23092                           ; BSR set to: 0
 23093  001FDE  0E7D               	movlw	high STR_287
 23094  001FE0  6F87               	movwf	(_sprintf$2136+1)& (0+255),b
 23095  001FE2  0EDC               	movlw	low STR_287
 23096  001FE4  D003               	goto	L46
 23097  001FE6                     l16108:
 23098                           
 23099                           ; BSR set to: 0
 23100  001FE6  0E7D               	movlw	high STR_286
 23101  001FE8  6F87               	movwf	(_sprintf$2136+1)& (0+255),b
 23102  001FEA  0ECB               	movlw	low STR_286
 23103  001FEC                     L46:
 23104  001FEC  6F86               	movwf	_sprintf$2136& (0+255),b
 23105                           
 23106                           ; BSR set to: 0
 23107  001FEE  5181               	movf	sprintf@idx& (0+255),w,b
 23108  001FF0  2586               	addwf	_sprintf$2136& (0+255),w,b
 23109  001FF2  6F7E               	movwf	??_sprintf& (0+255),b
 23110  001FF4  0E00               	movlw	0
 23111  001FF6  2187               	addwfc	(_sprintf$2136+1)& (0+255),w,b
 23112  001FF8  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23113  001FFA  C07E  FFF6         	movff	??_sprintf,tblptrl
 23114  001FFE  C07F  FFF7         	movff	??_sprintf+1,tblptrh
 23115  002002  0008               	tblrd		*
 23116  002004  CFF5 F091          	movff	tablat,sprintf@c
 23117                           
 23118                           ;doprnt.c: 1515: }
 23119                           ;doprnt.c: 1517: break;
 23120  002008  D016               	goto	l16118
 23121  00200A                     l16112:
 23122                           
 23123                           ; BSR set to: 0
 23124                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 23125  00200A  D852               	call	PL20	;call to abstracted procedure
 23126  00200C  0E54               	movlw	low _octpowers
 23127  00200E  257E               	addwf	??_sprintf& (0+255),w,b
 23128  002010  6EF6               	movwf	tblptrl,c
 23129  002012  0E6F               	movlw	high _octpowers
 23130  002014  D836               	call	PL12	;call to abstracted procedure
 23131  002016  EC77  F02A         	call	___lldiv	;wreg free
 23132  00201A  5160               	movf	?___lldiv& (0+255),w,b
 23133  00201C  0B07               	andlw	7
 23134  00201E                     L45:
 23135  00201E  0F30               	addlw	48
 23136  002020  6F91               	movwf	sprintf@c& (0+255),b
 23137                           
 23138                           ;doprnt.c: 1527: break;
 23139  002022  D009               	goto	l16118
 23140  002024                     l16116:
 23141                           
 23142                           ; BSR set to: 0
 23143  002024  5192               	movf	sprintf@flag& (0+255),w,b
 23144  002026  0BC0               	andlw	192
 23145                           
 23146                           ; Switch size 1, requested type "space"
 23147                           ; Number of cases is 4, Range of values is 0 to 192
 23148                           ; switch strategies available:
 23149                           ; Name         Instructions Cycles
 23150                           ; simple_byte           13     7 (average)
 23151                           ;	Chosen strategy is simple_byte
 23152  002028  E0A2               	bz	l16100
 23153  00202A  0A40               	xorlw	64	; case 64
 23154  00202C  E0EE               	bz	l16112
 23155  00202E  0AC0               	xorlw	192	; case 128
 23156  002030  E0C9               	bz	l16102
 23157  002032  0A40               	xorlw	64	; case 192
 23158  002034  E09C               	bz	l16100
 23159  002036                     l16118:
 23160                           
 23161                           ; BSR set to: 0
 23162                           ;doprnt.c: 1531: ((*sp++ = (c)));
 23163  002036  C076  FFD9         	movff	sprintf@sp,fsr2l
 23164  00203A  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23165  00203E  C091  FFDF         	movff	sprintf@c,indf2
 23166  002042  D777               	goto	l16082
 23167  002044                     l16122:
 23168                           
 23169                           ; BSR set to: 0
 23170  002044  0789               	decf	sprintf@prec& (0+255),f,b
 23171  002046  A0D8               	btfss	status,0,c
 23172  002048  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 23173  00204A  0100               	movlb	0	; () banked
 23174  00204C  2989               	incf	sprintf@prec& (0+255),w,b
 23175  00204E  B4D8               	btfsc	status,2,c
 23176  002050  298A               	incf	(sprintf@prec+1)& (0+255),w,b
 23177  002052  E1E8               	bnz	l16116
 23178                           
 23179                           ; BSR set to: 0
 23180                           ;doprnt.c: 1532: }
 23181                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 23182  002054  A792               	btfss	sprintf@flag& (0+255),3,b
 23183  002056  D00B               	goto	l16132
 23184                           
 23185                           ; BSR set to: 0
 23186  002058  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23187  00205A  0A80               	xorlw	128
 23188  00205C  0F80               	addlw	-128
 23189  00205E  0E01               	movlw	1
 23190  002060  B4D8               	btfsc	status,2,c
 23191  002062  5D8B               	subwf	sprintf@width& (0+255),w,b
 23192  002064  E304               	bnc	l16132
 23193  002066                     l16126:
 23194                           
 23195                           ; BSR set to: 0
 23196                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 23197  002066  C076  FFD9         	movff	sprintf@sp,fsr2l
 23198                           
 23199                           ; BSR set to: 0
 23200                           
 23201                           ; BSR set to: 0
 23202                           ;doprnt.c: 1538: while(--width);
 23203  00206A  D835               	call	PL42	;call to abstracted procedure
 23204  00206C  E1FC               	bnz	l16126
 23205  00206E                     l16132:
 23206                           
 23207                           ; BSR set to: 0
 23208  00206E  D84B               	call	PL60	;call to abstracted procedure
 23209  002070  6791               	tstfsz	sprintf@c& (0+255),b
 23210  002072  D4D1               	goto	l15798
 23211  002074                     l16134:
 23212                           
 23213                           ; BSR set to: 0
 23214                           ;doprnt.c: 1545: *sp = 0;
 23215  002074  C076  FFD9         	movff	sprintf@sp,fsr2l
 23216  002078  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23217  00207C  0E00               	movlw	0
 23218  00207E  6EDF               	movwf	indf2,c
 23219                           
 23220                           ; BSR set to: 0
 23221  002080  0C00               	retlw	0
 23222  002082                     __end_of_sprintf:
 23223                           	opt stack 0
 23224  002082                     PL12:
 23225                           	opt stack 25
 23226  002082  217F               	addwfc	(??_sprintf+1)& (0+255),w,b
 23227  002084  6EF7               	movwf	tblptrh,c
 23228  002086  0009               	tblrd		*+
 23229  002088  CFF5 F064          	movff	tablat,?___lldiv+4
 23230  00208C  0009               	tblrd		*+
 23231  00208E  CFF5 F065          	movff	tablat,?___lldiv+5
 23232  002092  0009               	tblrd		*+
 23233  002094  CFF5 F066          	movff	tablat,?___lldiv+6
 23234  002098  000A               	tblrd		*-
 23235  00209A  CFF5 F067          	movff	tablat,?___lldiv+7
 23236  00209E  0012               	return	
 23237  0020A0                     __end_ofPL12:
 23238                           	opt stack 0
 23239  0020A0                     PL16:
 23240                           	opt stack 25
 23241  0020A0  1592               	andwf	sprintf@flag& (0+255),w,b
 23242  0020A2  6F7E               	movwf	??_sprintf& (0+255),b
 23243  0020A4  0E08               	movlw	8
 23244  0020A6  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
 23245  0020A8  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23246  0020AA  517F               	movf	(??_sprintf+1)& (0+255),w,b
 23247  0020AC  0A08               	xorlw	8
 23248  0020AE  0012               	return	
 23249  0020B0                     __end_ofPL16:
 23250                           	opt stack 0
 23251  0020B0                     PL20:
 23252                           	opt stack 25
 23253  0020B0  C08D  F060         	movff	sprintf@_val,?___lldiv
 23254  0020B4  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23255  0020B8  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23256  0020BC  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23257  0020C0  C089  F07E         	movff	sprintf@prec,??_sprintf
 23258  0020C4  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23259  0020C8  90D8               	bcf	status,0,c
 23260  0020CA  377E               	rlcf	??_sprintf& (0+255),f,b
 23261  0020CC  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23262  0020CE  90D8               	bcf	status,0,c
 23263  0020D0  377E               	rlcf	??_sprintf& (0+255),f,b
 23264  0020D2  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23265  0020D4  0012               	return	
 23266  0020D6                     __end_ofPL20:
 23267                           	opt stack 0
 23268  0020D6                     PL42:
 23269                           	opt stack 25
 23270  0020D6  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23271  0020DA  0E20               	movlw	32
 23272  0020DC  6EDF               	movwf	indf2,c
 23273  0020DE  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23274  0020E0  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23275  0020E2  078B               	decf	sprintf@width& (0+255),f,b
 23276  0020E4  A0D8               	btfss	status,0,c
 23277  0020E6  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23278  0020E8  0100               	movlb	0	; () banked
 23279  0020EA  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23280  0020EC  118B               	iorwf	sprintf@width& (0+255),w,b
 23281  0020EE  0012               	return	
 23282  0020F0                     __end_ofPL42:
 23283                           	opt stack 0
 23284  0020F0                     PL50:
 23285                           	opt stack 25
 23286  0020F0  6ED9               	movwf	fsr2l,c
 23287  0020F2  6ADA               	clrf	fsr2h,c
 23288  0020F4  CFDE F08D          	movff	postinc2,sprintf@_val
 23289  0020F8  CFDE F08E          	movff	postinc2,sprintf@_val+1
 23290  0020FC  CFDE F08F          	movff	postinc2,sprintf@_val+2
 23291  002100  CFDE F090          	movff	postinc2,sprintf@_val+3
 23292  002104  0C04               	retlw	4
 23293  002106                     __end_ofPL50:
 23294                           	opt stack 0
 23295  002106                     PL60:
 23296                           	opt stack 25
 23297  002106  C078  FFF6         	movff	sprintf@f,tblptrl
 23298  00210A  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23299  00210E  4B78               	infsnz	sprintf@f& (0+255),f,b
 23300  002110  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23301  002112  0008               	tblrd		*
 23302  002114  CFF5 F091          	movff	tablat,sprintf@c
 23303  002118  0100               	movlb	0	; () banked
 23304  00211A  0012               	return	
 23305  00211C                     __end_ofPL60:
 23306                           	opt stack 0
 23307  00211C                     PL64:
 23308                           	opt stack 25
 23309  00211C  C076  FFD9         	movff	sprintf@sp,fsr2l
 23310  002120  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23311  002124  0E20               	movlw	32
 23312  002126  6EDF               	movwf	indf2,c
 23313  002128  0C20               	retlw	32
 23314  00212A                     __end_ofPL64:
 23315                           	opt stack 0
 23316  00212A                     PL84:
 23317                           	opt stack 25
 23318  00212A  4B78               	infsnz	sprintf@f& (0+255),f,b
 23319  00212C  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23320  00212E  C078  FFF6         	movff	sprintf@f,tblptrl
 23321  002132  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23322  002136  0008               	tblrd		*
 23323  002138  50F5               	movf	tablat,w,c
 23324  00213A  0012               	return	
 23325  00213C                     __end_ofPL84:
 23326                           	opt stack 0
 23327  00213C                     PL92:
 23328                           	opt stack 25
 23329  00213C  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23330  002140  0E30               	movlw	48
 23331  002142  6EDF               	movwf	indf2,c
 23332  002144  0C30               	retlw	48
 23333  002146                     __end_ofPL92:
 23334                           	opt stack 0
 23335  002146                     PL110:
 23336                           	opt stack 25
 23337  002146  A0D8               	btfss	status,0,c
 23338  002148  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23339  00214A  0100               	movlb	0	; () banked
 23340  00214C  298B               	incf	sprintf@width& (0+255),w,b
 23341  00214E  0012               	return	
 23342  002150                     __end_ofPL110:
 23343                           	opt stack 0
 23344                           tblptru	equ	0xFF8
 23345                           tblptrh	equ	0xFF7
 23346                           tblptrl	equ	0xFF6
 23347                           tablat	equ	0xFF5
 23348                           prodh	equ	0xFF4
 23349                           prodl	equ	0xFF3
 23350                           intcon	equ	0xFF2
 23351                           indf0	equ	0xFEF
 23352                           postinc0	equ	0xFEE
 23353                           fsr0h	equ	0xFEA
 23354                           fsr0l	equ	0xFE9
 23355                           wreg	equ	0xFE8
 23356                           indf1	equ	0xFE7
 23357                           postinc1	equ	0xFE6
 23358                           postdec1	equ	0xFE5
 23359                           fsr1h	equ	0xFE2
 23360                           fsr1l	equ	0xFE1
 23361                           indf2	equ	0xFDF
 23362                           postinc2	equ	0xFDE
 23363                           postdec2	equ	0xFDD
 23364                           plusw2	equ	0xFDB
 23365                           fsr2h	equ	0xFDA
 23366                           fsr2l	equ	0xFD9
 23367                           status	equ	0xFD8
 23368                           
 23369 ;; *************** function ___wmul *****************
 23370 ;; Defined at:
 23371 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 23372 ;; Parameters:    Size  Location     Type
 23373 ;;  multiplier      2    0[BANK0 ] unsigned int 
 23374 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 23375 ;; Auto vars:     Size  Location     Type
 23376 ;;  product         2    4[BANK0 ] unsigned int 
 23377 ;; Return value:  Size  Location     Type
 23378 ;;                  2    0[BANK0 ] unsigned int 
 23379 ;; Registers used:
 23380 ;;		wreg, status,2, status,0, prodl, prodh
 23381 ;; Tracked objects:
 23382 ;;		On entry : F/0
 23383 ;;		On exit  : F/0
 23384 ;;		Unchanged: 0/0
 23385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23386 ;;      Params:         0       4       0       0       0       0       0
 23387 ;;      Locals:         0       2       0       0       0       0       0
 23388 ;;      Temps:          0       0       0       0       0       0       0
 23389 ;;      Totals:         0       6       0       0       0       0       0
 23390 ;;Total ram usage:        6 bytes
 23391 ;; Hardware stack levels used:    1
 23392 ;; Hardware stack levels required when called:    3
 23393 ;; This function calls:
 23394 ;;		Nothing
 23395 ;; This function is called by:
 23396 ;;		_sprintf
 23397 ;;		_atoi
 23398 ;; This function uses a non-reentrant model
 23399 ;;
 23400                           
 23401                           	psect	text55
 23402  005CFC                     __ptext55:
 23403                           	opt stack 0
 23404  005CFC                     ___wmul:
 23405                           	opt stack 25
 23406                           
 23407                           ; BSR set to: 0
 23408                           
 23409                           ; BSR set to: 0
 23410                           ;incstack = 0
 23411                           ;incstack = 0
 23412  005CFC  5160               	movf	___wmul@multiplier& (0+255),w,b
 23413  005CFE  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23414  005D00  CFF3 F064          	movff	prodl,___wmul@product
 23415  005D04  CFF4 F065          	movff	prodh,___wmul@product+1
 23416  005D08  5160               	movf	___wmul@multiplier& (0+255),w,b
 23417  005D0A  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 23418  005D0C  D808               	call	PL94	;call to abstracted procedure
 23419  005D0E  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 23420  005D10  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23421  005D12  D805               	call	PL94	;call to abstracted procedure
 23422                           
 23423                           ; BSR set to: 0
 23424  005D14  C064  F060         	movff	___wmul@product,?___wmul
 23425  005D18  C065  F061         	movff	___wmul@product+1,?___wmul+1
 23426                           
 23427                           ; BSR set to: 0
 23428  005D1C  0012               	return	
 23429  005D1E                     __end_of___wmul:
 23430                           	opt stack 0
 23431  005D1E                     PL94:
 23432                           	opt stack 25
 23433  005D1E  CFF3 FFF4          	movff	prodl,prodh
 23434  005D22  6AF3               	clrf	prodl,c
 23435  005D24  50F3               	movf	prodl,w,c
 23436  005D26  2764               	addwf	___wmul@product& (0+255),f,b
 23437  005D28  50F4               	movf	prodh,w,c
 23438  005D2A  2365               	addwfc	(___wmul@product+1)& (0+255),f,b
 23439  005D2C  0012               	return	
 23440  005D2E                     __end_ofPL94:
 23441                           	opt stack 0
 23442                           tblptru	equ	0xFF8
 23443                           tblptrh	equ	0xFF7
 23444                           tblptrl	equ	0xFF6
 23445                           tablat	equ	0xFF5
 23446                           prodh	equ	0xFF4
 23447                           prodl	equ	0xFF3
 23448                           intcon	equ	0xFF2
 23449                           indf0	equ	0xFEF
 23450                           postinc0	equ	0xFEE
 23451                           fsr0h	equ	0xFEA
 23452                           fsr0l	equ	0xFE9
 23453                           wreg	equ	0xFE8
 23454                           indf1	equ	0xFE7
 23455                           postinc1	equ	0xFE6
 23456                           postdec1	equ	0xFE5
 23457                           fsr1h	equ	0xFE2
 23458                           fsr1l	equ	0xFE1
 23459                           indf2	equ	0xFDF
 23460                           postinc2	equ	0xFDE
 23461                           postdec2	equ	0xFDD
 23462                           plusw2	equ	0xFDB
 23463                           fsr2h	equ	0xFDA
 23464                           fsr2l	equ	0xFD9
 23465                           status	equ	0xFD8
 23466                           
 23467 ;; *************** function ___llmod *****************
 23468 ;; Defined at:
 23469 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 23470 ;; Parameters:    Size  Location     Type
 23471 ;;  dividend        4   13[BANK0 ] unsigned long 
 23472 ;;  divisor         4   17[BANK0 ] unsigned long 
 23473 ;; Auto vars:     Size  Location     Type
 23474 ;;  counter         1   21[BANK0 ] unsigned char 
 23475 ;; Return value:  Size  Location     Type
 23476 ;;                  4   13[BANK0 ] unsigned long 
 23477 ;; Registers used:
 23478 ;;		wreg, status,2, status,0
 23479 ;; Tracked objects:
 23480 ;;		On entry : F/0
 23481 ;;		On exit  : F/0
 23482 ;;		Unchanged: 0/0
 23483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23484 ;;      Params:         0       8       0       0       0       0       0
 23485 ;;      Locals:         0       1       0       0       0       0       0
 23486 ;;      Temps:          0       0       0       0       0       0       0
 23487 ;;      Totals:         0       9       0       0       0       0       0
 23488 ;;Total ram usage:        9 bytes
 23489 ;; Hardware stack levels used:    1
 23490 ;; Hardware stack levels required when called:    3
 23491 ;; This function calls:
 23492 ;;		Nothing
 23493 ;; This function is called by:
 23494 ;;		_sprintf
 23495 ;;		_ultoa
 23496 ;; This function uses a non-reentrant model
 23497 ;;
 23498                           
 23499                           	psect	text56
 23500  00570C                     __ptext56:
 23501                           	opt stack 0
 23502  00570C                     ___llmod:
 23503                           	opt stack 24
 23504                           
 23505                           ; BSR set to: 0
 23506                           
 23507                           ; BSR set to: 0
 23508                           ;incstack = 0
 23509                           ;incstack = 0
 23510  00570C  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23511  00570E  1171               	iorwf	___llmod@divisor& (0+255),w,b
 23512  005710  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 23513  005712  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 23514  005714  E023               	bz	l2443
 23515                           
 23516                           ; BSR set to: 0
 23517  005716  0E01               	movlw	1
 23518  005718  6F75               	movwf	___llmod@counter& (0+255),b
 23519  00571A  D006               	goto	l16942
 23520  00571C                     l16940:
 23521                           
 23522                           ; BSR set to: 0
 23523  00571C  90D8               	bcf	status,0,c
 23524  00571E  3771               	rlcf	___llmod@divisor& (0+255),f,b
 23525  005720  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 23526  005722  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 23527  005724  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 23528  005726  2B75               	incf	___llmod@counter& (0+255),f,b
 23529  005728                     l16942:
 23530                           
 23531                           ; BSR set to: 0
 23532  005728  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
 23533  00572A  D7F8               	goto	l16940
 23534  00572C                     l16944:
 23535                           
 23536                           ; BSR set to: 0
 23537  00572C  5171               	movf	___llmod@divisor& (0+255),w,b
 23538  00572E  5D6D               	subwf	___llmod@dividend& (0+255),w,b
 23539  005730  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23540  005732  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 23541  005734  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23542  005736  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 23543  005738  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23544  00573A  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 23545  00573C  E308               	bnc	l16948
 23546                           
 23547                           ; BSR set to: 0
 23548  00573E  5171               	movf	___llmod@divisor& (0+255),w,b
 23549  005740  5F6D               	subwf	___llmod@dividend& (0+255),f,b
 23550  005742  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23551  005744  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 23552  005746  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23553  005748  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 23554  00574A  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23555  00574C  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 23556  00574E                     l16948:
 23557                           
 23558                           ; BSR set to: 0
 23559  00574E  90D8               	bcf	status,0,c
 23560  005750  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 23561  005752  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 23562  005754  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 23563  005756  3371               	rrcf	___llmod@divisor& (0+255),f,b
 23564                           
 23565                           ; BSR set to: 0
 23566  005758  2F75               	decfsz	___llmod@counter& (0+255),f,b
 23567  00575A  D7E8               	goto	l16944
 23568  00575C                     l2443:
 23569                           
 23570                           ; BSR set to: 0
 23571  00575C  C06D  F06D         	movff	___llmod@dividend,?___llmod
 23572  005760  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
 23573  005764  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
 23574  005768  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
 23575                           
 23576                           ; BSR set to: 0
 23577  00576C  0012               	return	
 23578  00576E                     __end_of___llmod:
 23579                           	opt stack 0
 23580                           tblptru	equ	0xFF8
 23581                           tblptrh	equ	0xFF7
 23582                           tblptrl	equ	0xFF6
 23583                           tablat	equ	0xFF5
 23584                           prodh	equ	0xFF4
 23585                           prodl	equ	0xFF3
 23586                           intcon	equ	0xFF2
 23587                           indf0	equ	0xFEF
 23588                           postinc0	equ	0xFEE
 23589                           fsr0h	equ	0xFEA
 23590                           fsr0l	equ	0xFE9
 23591                           wreg	equ	0xFE8
 23592                           indf1	equ	0xFE7
 23593                           postinc1	equ	0xFE6
 23594                           postdec1	equ	0xFE5
 23595                           fsr1h	equ	0xFE2
 23596                           fsr1l	equ	0xFE1
 23597                           indf2	equ	0xFDF
 23598                           postinc2	equ	0xFDE
 23599                           postdec2	equ	0xFDD
 23600                           plusw2	equ	0xFDB
 23601                           fsr2h	equ	0xFDA
 23602                           fsr2l	equ	0xFD9
 23603                           status	equ	0xFD8
 23604                           
 23605 ;; *************** function ___lldiv *****************
 23606 ;; Defined at:
 23607 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 23608 ;; Parameters:    Size  Location     Type
 23609 ;;  dividend        4    0[BANK0 ] unsigned long 
 23610 ;;  divisor         4    4[BANK0 ] unsigned long 
 23611 ;; Auto vars:     Size  Location     Type
 23612 ;;  quotient        4    8[BANK0 ] unsigned long 
 23613 ;;  counter         1   12[BANK0 ] unsigned char 
 23614 ;; Return value:  Size  Location     Type
 23615 ;;                  4    0[BANK0 ] unsigned long 
 23616 ;; Registers used:
 23617 ;;		wreg, status,2, status,0
 23618 ;; Tracked objects:
 23619 ;;		On entry : F/0
 23620 ;;		On exit  : F/0
 23621 ;;		Unchanged: 0/0
 23622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23623 ;;      Params:         0       8       0       0       0       0       0
 23624 ;;      Locals:         0       5       0       0       0       0       0
 23625 ;;      Temps:          0       0       0       0       0       0       0
 23626 ;;      Totals:         0      13       0       0       0       0       0
 23627 ;;Total ram usage:       13 bytes
 23628 ;; Hardware stack levels used:    1
 23629 ;; Hardware stack levels required when called:    3
 23630 ;; This function calls:
 23631 ;;		Nothing
 23632 ;; This function is called by:
 23633 ;;		_sprintf
 23634 ;;		_ultoa
 23635 ;; This function uses a non-reentrant model
 23636 ;;
 23637                           
 23638                           	psect	text57
 23639  0054EE                     __ptext57:
 23640                           	opt stack 0
 23641  0054EE                     ___lldiv:
 23642                           	opt stack 24
 23643                           
 23644                           ; BSR set to: 0
 23645                           
 23646                           ; BSR set to: 0
 23647                           ;incstack = 0
 23648                           ;incstack = 0
 23649  0054EE  6B68               	clrf	___lldiv@quotient& (0+255),b
 23650  0054F0  6B69               	clrf	(___lldiv@quotient+1)& (0+255),b
 23651  0054F2  6B6A               	clrf	(___lldiv@quotient+2)& (0+255),b
 23652  0054F4  6B6B               	clrf	(___lldiv@quotient+3)& (0+255),b
 23653                           
 23654                           ; BSR set to: 0
 23655  0054F6  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23656  0054F8  1164               	iorwf	___lldiv@divisor& (0+255),w,b
 23657  0054FA  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 23658  0054FC  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 23659  0054FE  E029               	bz	l2433
 23660                           
 23661                           ; BSR set to: 0
 23662  005500  0E01               	movlw	1
 23663  005502  6F6C               	movwf	___lldiv@counter& (0+255),b
 23664  005504  D006               	goto	l13638
 23665  005506                     l13636:
 23666                           
 23667                           ; BSR set to: 0
 23668  005506  90D8               	bcf	status,0,c
 23669  005508  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 23670  00550A  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 23671  00550C  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 23672  00550E  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 23673  005510  2B6C               	incf	___lldiv@counter& (0+255),f,b
 23674  005512                     l13638:
 23675                           
 23676                           ; BSR set to: 0
 23677  005512  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 23678  005514  D7F8               	goto	l13636
 23679  005516                     l13640:
 23680                           
 23681                           ; BSR set to: 0
 23682  005516  90D8               	bcf	status,0,c
 23683  005518  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 23684  00551A  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 23685  00551C  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 23686  00551E  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 23687                           
 23688                           ; BSR set to: 0
 23689  005520  5164               	movf	___lldiv@divisor& (0+255),w,b
 23690  005522  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 23691  005524  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23692  005526  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 23693  005528  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23694  00552A  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 23695  00552C  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23696  00552E  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 23697  005530  E309               	bnc	l13648
 23698                           
 23699                           ; BSR set to: 0
 23700  005532  5164               	movf	___lldiv@divisor& (0+255),w,b
 23701  005534  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 23702  005536  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23703  005538  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 23704  00553A  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23705  00553C  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 23706  00553E  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23707  005540  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 23708                           
 23709                           ; BSR set to: 0
 23710  005542  8168               	bsf	___lldiv@quotient& (0+255),0,b
 23711  005544                     l13648:
 23712                           
 23713                           ; BSR set to: 0
 23714  005544  90D8               	bcf	status,0,c
 23715  005546  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 23716  005548  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 23717  00554A  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 23718  00554C  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 23719                           
 23720                           ; BSR set to: 0
 23721  00554E  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 23722  005550  D7E2               	goto	l13640
 23723  005552                     l2433:
 23724                           
 23725                           ; BSR set to: 0
 23726  005552  C068  F060         	movff	___lldiv@quotient,?___lldiv
 23727  005556  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 23728  00555A  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 23729  00555E  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 23730                           
 23731                           ; BSR set to: 0
 23732  005562  0012               	return	
 23733  005564                     __end_of___lldiv:
 23734                           	opt stack 0
 23735                           tblptru	equ	0xFF8
 23736                           tblptrh	equ	0xFF7
 23737                           tblptrl	equ	0xFF6
 23738                           tablat	equ	0xFF5
 23739                           prodh	equ	0xFF4
 23740                           prodl	equ	0xFF3
 23741                           intcon	equ	0xFF2
 23742                           indf0	equ	0xFEF
 23743                           postinc0	equ	0xFEE
 23744                           fsr0h	equ	0xFEA
 23745                           fsr0l	equ	0xFE9
 23746                           wreg	equ	0xFE8
 23747                           indf1	equ	0xFE7
 23748                           postinc1	equ	0xFE6
 23749                           postdec1	equ	0xFE5
 23750                           fsr1h	equ	0xFE2
 23751                           fsr1l	equ	0xFE1
 23752                           indf2	equ	0xFDF
 23753                           postinc2	equ	0xFDE
 23754                           postdec2	equ	0xFDD
 23755                           plusw2	equ	0xFDB
 23756                           fsr2h	equ	0xFDA
 23757                           fsr2l	equ	0xFD9
 23758                           status	equ	0xFD8
 23759                           
 23760 ;; *************** function _isdigit *****************
 23761 ;; Defined at:
 23762 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 23763 ;; Parameters:    Size  Location     Type
 23764 ;;  c               1    wreg     unsigned char 
 23765 ;; Auto vars:     Size  Location     Type
 23766 ;;  c               1    2[BANK0 ] unsigned char 
 23767 ;; Return value:  Size  Location     Type
 23768 ;;		None               void
 23769 ;; Registers used:
 23770 ;;		wreg, status,2, status,0
 23771 ;; Tracked objects:
 23772 ;;		On entry : 0/0
 23773 ;;		On exit  : F/0
 23774 ;;		Unchanged: 0/0
 23775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23776 ;;      Params:         0       0       0       0       0       0       0
 23777 ;;      Locals:         0       2       0       0       0       0       0
 23778 ;;      Temps:          0       1       0       0       0       0       0
 23779 ;;      Totals:         0       3       0       0       0       0       0
 23780 ;;Total ram usage:        3 bytes
 23781 ;; Hardware stack levels used:    1
 23782 ;; Hardware stack levels required when called:    3
 23783 ;; This function calls:
 23784 ;;		Nothing
 23785 ;; This function is called by:
 23786 ;;		_sprintf
 23787 ;;		_atoi
 23788 ;; This function uses a non-reentrant model
 23789 ;;
 23790                           
 23791                           	psect	text58
 23792  005DE0                     __ptext58:
 23793                           	opt stack 0
 23794  005DE0                     _isdigit:
 23795                           	opt stack 25
 23796                           
 23797                           ; BSR set to: 0
 23798                           ;incstack = 0
 23799                           ;incstack = 0
 23800                           ;isdigit@c stored from wreg
 23801  005DE0  CFE8 F062          	movff	wreg,isdigit@c
 23802  005DE4  0100               	movlb	0	; () banked
 23803  005DE6  6B61               	clrf	_isdigit$3096& (0+255),b
 23804                           
 23805                           ; BSR set to: 0
 23806  005DE8  0E3A               	movlw	58
 23807  005DEA  6162               	cpfslt	isdigit@c& (0+255),b
 23808  005DEC  D005               	goto	l16902
 23809                           
 23810                           ; BSR set to: 0
 23811  005DEE  0E2F               	movlw	47
 23812  005DF0  6562               	cpfsgt	isdigit@c& (0+255),b
 23813  005DF2  D002               	goto	l16902
 23814                           
 23815                           ; BSR set to: 0
 23816  005DF4  0E01               	movlw	1
 23817  005DF6  6F61               	movwf	_isdigit$3096& (0+255),b
 23818  005DF8                     l16902:
 23819                           
 23820                           ; BSR set to: 0
 23821  005DF8  C061  F060         	movff	_isdigit$3096,??_isdigit
 23822  005DFC  3160               	rrcf	??_isdigit& (0+255),w,b
 23823                           
 23824                           ; BSR set to: 0
 23825  005DFE  0012               	return	
 23826  005E00                     __end_of_isdigit:
 23827                           	opt stack 0
 23828                           tblptru	equ	0xFF8
 23829                           tblptrh	equ	0xFF7
 23830                           tblptrl	equ	0xFF6
 23831                           tablat	equ	0xFF5
 23832                           prodh	equ	0xFF4
 23833                           prodl	equ	0xFF3
 23834                           intcon	equ	0xFF2
 23835                           indf0	equ	0xFEF
 23836                           postinc0	equ	0xFEE
 23837                           fsr0h	equ	0xFEA
 23838                           fsr0l	equ	0xFE9
 23839                           wreg	equ	0xFE8
 23840                           indf1	equ	0xFE7
 23841                           postinc1	equ	0xFE6
 23842                           postdec1	equ	0xFE5
 23843                           fsr1h	equ	0xFE2
 23844                           fsr1l	equ	0xFE1
 23845                           indf2	equ	0xFDF
 23846                           postinc2	equ	0xFDE
 23847                           postdec2	equ	0xFDD
 23848                           plusw2	equ	0xFDB
 23849                           fsr2h	equ	0xFDA
 23850                           fsr2l	equ	0xFD9
 23851                           status	equ	0xFD8
 23852                           
 23853 ;; *************** function _printFirmwareVersion *****************
 23854 ;; Defined at:
 23855 ;;		line 2927 in file "main.c"
 23856 ;; Parameters:    Size  Location     Type
 23857 ;;		None
 23858 ;; Auto vars:     Size  Location     Type
 23859 ;;  wrkbuf         20   24[BANK0 ] unsigned char [20]
 23860 ;; Return value:  Size  Location     Type
 23861 ;;		None               void
 23862 ;; Registers used:
 23863 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23864 ;; Tracked objects:
 23865 ;;		On entry : 0/0
 23866 ;;		On exit  : 0/0
 23867 ;;		Unchanged: 0/0
 23868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23869 ;;      Params:         0       0       0       0       0       0       0
 23870 ;;      Locals:         0      20       0       0       0       0       0
 23871 ;;      Temps:          0       0       0       0       0       0       0
 23872 ;;      Totals:         0      20       0       0       0       0       0
 23873 ;;Total ram usage:       20 bytes
 23874 ;; Hardware stack levels used:    1
 23875 ;; Hardware stack levels required when called:    6
 23876 ;; This function calls:
 23877 ;;		_putsUSART
 23878 ;;		_WriteUSART
 23879 ;;		_itoa
 23880 ;; This function is called by:
 23881 ;;		_main
 23882 ;;		_doModeVerbose
 23883 ;; This function uses a non-reentrant model
 23884 ;;
 23885                           
 23886                           	psect	text59
 23887  00525C                     __ptext59:
 23888                           	opt stack 0
 23889  00525C                     _printFirmwareVersion:
 23890                           	opt stack 23
 23891                           
 23892                           ;main.c: 2928: char wrkbuf[20];
 23893                           ;main.c: 2929: putsUSART((char *) "Version: ");
 23894                           
 23895                           ; BSR set to: 0
 23896                           ;incstack = 0
 23897                           ;incstack = 0
 23898  00525C  0E7E               	movlw	high STR_277
 23899  00525E  0100               	movlb	0	; () banked
 23900  005260  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23901  005262  0E75               	movlw	low STR_277
 23902  005264  6F61               	movwf	?_putsUSART& (0+255),b
 23903  005266  EC41  F02C         	call	_putsUSART	;wreg free
 23904                           
 23905                           ;main.c: 2930: itoa(wrkbuf, 1, 10);
 23906  00526A  0100               	movlb	0	; () banked
 23907  00526C  D835               	call	PL58	;call to abstracted procedure
 23908  00526E  EC2D  F02E         	call	_itoa	;wreg free
 23909                           
 23910                           ; BSR set to: 0
 23911                           ;main.c: 2931: putsUSART(wrkbuf);
 23912  005272  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23913  005274  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23914  005276  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23915  005278  6F61               	movwf	?_putsUSART& (0+255),b
 23916  00527A  EC41  F02C         	call	_putsUSART	;wreg free
 23917  00527E                     l1285:
 23918  00527E  A2AC               	btfss	4012,1,c	;volatile
 23919  005280  D7FE               	goto	l1285
 23920                           
 23921                           ;main.c: 2933: WriteUSART('.');
 23922  005282  0E2E               	movlw	46
 23923  005284  EC36  F02F         	call	_WriteUSART
 23924                           
 23925                           ;main.c: 2934: itoa(wrkbuf, 1, 10);
 23926  005288  0100               	movlb	0	; () banked
 23927  00528A  D826               	call	PL58	;call to abstracted procedure
 23928  00528C  EC2D  F02E         	call	_itoa	;wreg free
 23929                           
 23930                           ; BSR set to: 0
 23931                           ;main.c: 2935: putsUSART(wrkbuf);
 23932  005290  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23933  005292  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23934  005294  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23935  005296  6F61               	movwf	?_putsUSART& (0+255),b
 23936  005298  EC41  F02C         	call	_putsUSART	;wreg free
 23937  00529C                     l1288:
 23938  00529C  A2AC               	btfss	4012,1,c	;volatile
 23939  00529E  D7FE               	goto	l1288
 23940                           
 23941                           ;main.c: 2937: WriteUSART('.');
 23942  0052A0  0E2E               	movlw	46
 23943  0052A2  EC36  F02F         	call	_WriteUSART
 23944                           
 23945                           ;main.c: 2938: itoa(wrkbuf, 0, 10);
 23946  0052A6  0100               	movlb	0	; () banked
 23947  0052A8  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23948  0052AA  6F71               	movwf	(?_itoa+1)& (0+255),b
 23949  0052AC  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23950  0052AE  6F70               	movwf	?_itoa& (0+255),b
 23951  0052B0  6B73               	clrf	(?_itoa+3)& (0+255),b
 23952  0052B2  6B72               	clrf	(?_itoa+2)& (0+255),b
 23953  0052B4  6B75               	clrf	(?_itoa+5)& (0+255),b
 23954  0052B6  0E0A               	movlw	10
 23955  0052B8  6F74               	movwf	(?_itoa+4)& (0+255),b
 23956  0052BA  EC2D  F02E         	call	_itoa	;wreg free
 23957                           
 23958                           ; BSR set to: 0
 23959                           ;main.c: 2939: putsUSART(wrkbuf);
 23960  0052BE  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23961  0052C0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23962  0052C2  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23963  0052C4  6F61               	movwf	?_putsUSART& (0+255),b
 23964  0052C6  EC41  F02C         	call	_putsUSART	;wreg free
 23965                           
 23966                           ;main.c: 2940: putsUSART((char *) "\r\n");
 23967  0052CA  0E74               	movlw	high (STR_220+50)
 23968  0052CC  0100               	movlb	0	; () banked
 23969  0052CE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23970  0052D0  0E72               	movlw	low (STR_220+50)
 23971  0052D2  6F61               	movwf	?_putsUSART& (0+255),b
 23972  0052D4  EF41  F02C         	goto	_putsUSART	;wreg free
 23973  0052D8                     __end_of_printFirmwareVersion:
 23974                           	opt stack 0
 23975  0052D8                     PL58:
 23976                           	opt stack 23
 23977  0052D8  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23978  0052DA  6F71               	movwf	(?_itoa+1)& (0+255),b
 23979  0052DC  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23980  0052DE  6F70               	movwf	?_itoa& (0+255),b
 23981  0052E0  6B73               	clrf	(?_itoa+3)& (0+255),b
 23982  0052E2  0E01               	movlw	1
 23983  0052E4  6F72               	movwf	(?_itoa+2)& (0+255),b
 23984  0052E6  6B75               	clrf	(?_itoa+5)& (0+255),b
 23985  0052E8  0E0A               	movlw	10
 23986  0052EA  6F74               	movwf	(?_itoa+4)& (0+255),b
 23987  0052EC  0C0A               	retlw	10
 23988  0052EE                     __end_ofPL58:
 23989                           	opt stack 0
 23990                           tblptru	equ	0xFF8
 23991                           tblptrh	equ	0xFF7
 23992                           tblptrl	equ	0xFF6
 23993                           tablat	equ	0xFF5
 23994                           prodh	equ	0xFF4
 23995                           prodl	equ	0xFF3
 23996                           intcon	equ	0xFF2
 23997                           indf0	equ	0xFEF
 23998                           postinc0	equ	0xFEE
 23999                           fsr0h	equ	0xFEA
 24000                           fsr0l	equ	0xFE9
 24001                           wreg	equ	0xFE8
 24002                           indf1	equ	0xFE7
 24003                           postinc1	equ	0xFE6
 24004                           postdec1	equ	0xFE5
 24005                           fsr1h	equ	0xFE2
 24006                           fsr1l	equ	0xFE1
 24007                           indf2	equ	0xFDF
 24008                           postinc2	equ	0xFDE
 24009                           postdec2	equ	0xFDD
 24010                           plusw2	equ	0xFDB
 24011                           fsr2h	equ	0xFDA
 24012                           fsr2l	equ	0xFD9
 24013                           status	equ	0xFD8
 24014                           
 24015 ;; *************** function _itoa *****************
 24016 ;; Defined at:
 24017 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24018 ;; Parameters:    Size  Location     Type
 24019 ;;  buf             2   16[BANK0 ] PTR unsigned char 
 24020 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24021 ;;  val             2   18[BANK0 ] int 
 24022 ;;  base            2   20[BANK0 ] int 
 24023 ;; Auto vars:     Size  Location     Type
 24024 ;;  cp              2    0        PTR unsigned char 
 24025 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24026 ;; Return value:  Size  Location     Type
 24027 ;;                  2   16[BANK0 ] PTR unsigned char 
 24028 ;; Registers used:
 24029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24030 ;; Tracked objects:
 24031 ;;		On entry : F/0
 24032 ;;		On exit  : F/0
 24033 ;;		Unchanged: 0/0
 24034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24035 ;;      Params:         0       6       0       0       0       0       0
 24036 ;;      Locals:         0       2       0       0       0       0       0
 24037 ;;      Temps:          0       0       0       0       0       0       0
 24038 ;;      Totals:         0       8       0       0       0       0       0
 24039 ;;Total ram usage:        8 bytes
 24040 ;; Hardware stack levels used:    1
 24041 ;; Hardware stack levels required when called:    5
 24042 ;; This function calls:
 24043 ;;		_utoa
 24044 ;; This function is called by:
 24045 ;;		_receiveSendEventSLCAN
 24046 ;;		_findNodes
 24047 ;;		_printGUID
 24048 ;;		_printNodeFirmwareVersion
 24049 ;;		_printFirmwareVersion
 24050 ;; This function uses a non-reentrant model
 24051 ;;
 24052                           
 24053                           	psect	text60
 24054  005C5A                     __ptext60:
 24055                           	opt stack 0
 24056  005C5A                     _itoa:
 24057                           	opt stack 23
 24058                           
 24059                           ; BSR set to: 0
 24060                           
 24061                           ;incstack = 0
 24062                           ;incstack = 0
 24063  005C5A  AF73               	btfss	(itoa@val+1)& (0+255),7,b
 24064  005C5C  D00C               	goto	l16756
 24065                           
 24066                           ; BSR set to: 0
 24067  005C5E  C070  FFD9         	movff	itoa@buf,fsr2l
 24068  005C62  C071  FFDA         	movff	itoa@buf+1,fsr2h
 24069  005C66  0E2D               	movlw	45
 24070  005C68  6EDF               	movwf	indf2,c
 24071                           
 24072                           ; BSR set to: 0
 24073  005C6A  4B70               	infsnz	itoa@buf& (0+255),f,b
 24074  005C6C  2B71               	incf	(itoa@buf+1)& (0+255),f,b
 24075                           
 24076                           ; BSR set to: 0
 24077  005C6E  6D72               	negf	itoa@val& (0+255),b
 24078  005C70  1F73               	comf	(itoa@val+1)& (0+255),f,b
 24079  005C72  B0D8               	btfsc	status,0,c
 24080  005C74  2B73               	incf	(itoa@val+1)& (0+255),f,b
 24081  005C76                     l16756:
 24082                           
 24083                           ; BSR set to: 0
 24084  005C76  C070  F067         	movff	itoa@buf,?_utoa
 24085  005C7A  C071  F068         	movff	itoa@buf+1,?_utoa+1
 24086  005C7E  C072  F069         	movff	itoa@val,?_utoa+2
 24087  005C82  C073  F06A         	movff	itoa@val+1,?_utoa+3
 24088  005C86  C074  F06B         	movff	itoa@base,?_utoa+4
 24089  005C8A  C075  F06C         	movff	itoa@base+1,?_utoa+5
 24090  005C8E  EFFE  F027         	goto	_utoa	;wreg free
 24091  005C92                     __end_of_itoa:
 24092                           	opt stack 0
 24093                           tblptru	equ	0xFF8
 24094                           tblptrh	equ	0xFF7
 24095                           tblptrl	equ	0xFF6
 24096                           tablat	equ	0xFF5
 24097                           prodh	equ	0xFF4
 24098                           prodl	equ	0xFF3
 24099                           intcon	equ	0xFF2
 24100                           indf0	equ	0xFEF
 24101                           postinc0	equ	0xFEE
 24102                           fsr0h	equ	0xFEA
 24103                           fsr0l	equ	0xFE9
 24104                           wreg	equ	0xFE8
 24105                           indf1	equ	0xFE7
 24106                           postinc1	equ	0xFE6
 24107                           postdec1	equ	0xFE5
 24108                           fsr1h	equ	0xFE2
 24109                           fsr1l	equ	0xFE1
 24110                           indf2	equ	0xFDF
 24111                           postinc2	equ	0xFDE
 24112                           postdec2	equ	0xFDD
 24113                           plusw2	equ	0xFDB
 24114                           fsr2h	equ	0xFDA
 24115                           fsr2l	equ	0xFD9
 24116                           status	equ	0xFD8
 24117                           
 24118 ;; *************** function _utoa *****************
 24119 ;; Defined at:
 24120 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24121 ;; Parameters:    Size  Location     Type
 24122 ;;  buf             2    7[BANK0 ] PTR unsigned char 
 24123 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24124 ;;  val             2    9[BANK0 ] unsigned int 
 24125 ;;  base            2   11[BANK0 ] int 
 24126 ;; Auto vars:     Size  Location     Type
 24127 ;;  v               2   13[BANK0 ] unsigned int 
 24128 ;;  c               1   15[BANK0 ] unsigned char 
 24129 ;; Return value:  Size  Location     Type
 24130 ;;                  2    7[BANK0 ] PTR unsigned char 
 24131 ;; Registers used:
 24132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24133 ;; Tracked objects:
 24134 ;;		On entry : F/0
 24135 ;;		On exit  : F/0
 24136 ;;		Unchanged: 0/0
 24137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24138 ;;      Params:         0       6       0       0       0       0       0
 24139 ;;      Locals:         0       3       0       0       0       0       0
 24140 ;;      Temps:          0       0       0       0       0       0       0
 24141 ;;      Totals:         0       9       0       0       0       0       0
 24142 ;;Total ram usage:        9 bytes
 24143 ;; Hardware stack levels used:    1
 24144 ;; Hardware stack levels required when called:    4
 24145 ;; This function calls:
 24146 ;;		___lwdiv
 24147 ;;		___lwmod
 24148 ;; This function is called by:
 24149 ;;		_itoa
 24150 ;; This function uses a non-reentrant model
 24151 ;;
 24152                           
 24153                           	psect	text61
 24154  004FFC                     __ptext61:
 24155                           	opt stack 0
 24156  004FFC                     _utoa:
 24157                           	opt stack 23
 24158                           
 24159                           ; BSR set to: 0
 24160                           
 24161                           ; BSR set to: 0
 24162                           ;incstack = 0
 24163                           ;incstack = 0
 24164  004FFC  C069  F06D         	movff	utoa@val,utoa@v
 24165  005000  C06A  F06E         	movff	utoa@val+1,utoa@v+1
 24166  005004                     l16908:
 24167                           
 24168                           ; BSR set to: 0
 24169  005004  C06D  F060         	movff	utoa@v,?___lwdiv
 24170  005008  C06E  F061         	movff	utoa@v+1,?___lwdiv+1
 24171  00500C  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24172  005010  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24173  005014  ECE9  F02C         	call	___lwdiv	;wreg free
 24174  005018  C060  F06D         	movff	?___lwdiv,utoa@v
 24175  00501C  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
 24176                           
 24177                           ; BSR set to: 0
 24178  005020  4B67               	infsnz	utoa@buf& (0+255),f,b
 24179  005022  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24180                           
 24181                           ; BSR set to: 0
 24182  005024  516E               	movf	(utoa@v+1)& (0+255),w,b
 24183  005026  116D               	iorwf	utoa@v& (0+255),w,b
 24184  005028  E1ED               	bnz	l16908
 24185                           
 24186                           ; BSR set to: 0
 24187  00502A  C067  FFD9         	movff	utoa@buf,fsr2l
 24188  00502E  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24189  005032  0E00               	movlw	0
 24190  005034  6ADF               	clrf	indf2,c
 24191                           
 24192                           ; BSR set to: 0
 24193  005036  0767               	decf	utoa@buf& (0+255),f,b
 24194  005038  A0D8               	btfss	status,0,c
 24195  00503A  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24196  00503C                     l16918:
 24197                           
 24198                           ; BSR set to: 0
 24199  00503C  C069  F060         	movff	utoa@val,?___lwmod
 24200  005040  C06A  F061         	movff	utoa@val+1,?___lwmod+1
 24201  005044  C06B  F062         	movff	utoa@base,?___lwmod+2
 24202  005048  C06C  F063         	movff	utoa@base+1,?___lwmod+3
 24203  00504C  ECF1  F02D         	call	___lwmod	;wreg free
 24204  005050  5160               	movf	?___lwmod& (0+255),w,b
 24205  005052  6F6F               	movwf	utoa@c& (0+255),b
 24206                           
 24207                           ; BSR set to: 0
 24208  005054  C069  F060         	movff	utoa@val,?___lwdiv
 24209  005058  C06A  F061         	movff	utoa@val+1,?___lwdiv+1
 24210  00505C  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24211  005060  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24212  005064  ECE9  F02C         	call	___lwdiv	;wreg free
 24213  005068  C060  F069         	movff	?___lwdiv,utoa@val
 24214  00506C  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
 24215                           
 24216                           ; BSR set to: 0
 24217  005070  0E09               	movlw	9
 24218  005072  656F               	cpfsgt	utoa@c& (0+255),b
 24219  005074  D002               	goto	l2402
 24220                           
 24221                           ; BSR set to: 0
 24222  005076  0E07               	movlw	7
 24223  005078  276F               	addwf	utoa@c& (0+255),f,b
 24224  00507A                     l2402:
 24225                           
 24226                           ; BSR set to: 0
 24227  00507A  0E30               	movlw	48
 24228  00507C  276F               	addwf	utoa@c& (0+255),f,b
 24229                           
 24230                           ; BSR set to: 0
 24231  00507E  C067  FFD9         	movff	utoa@buf,fsr2l
 24232  005082  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24233  005086  C06F  FFDF         	movff	utoa@c,indf2
 24234                           
 24235                           ; BSR set to: 0
 24236  00508A  0767               	decf	utoa@buf& (0+255),f,b
 24237  00508C  A0D8               	btfss	status,0,c
 24238  00508E  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24239                           
 24240                           ; BSR set to: 0
 24241  005090  516A               	movf	(utoa@val+1)& (0+255),w,b
 24242  005092  1169               	iorwf	utoa@val& (0+255),w,b
 24243  005094  E1D3               	bnz	l16918
 24244                           
 24245                           ; BSR set to: 0
 24246                           ;	Return value of _utoa is never used
 24247  005096  4B67               	infsnz	utoa@buf& (0+255),f,b
 24248  005098  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24249                           
 24250                           ; BSR set to: 0
 24251  00509A  0012               	return	
 24252  00509C                     __end_of_utoa:
 24253                           	opt stack 0
 24254                           tblptru	equ	0xFF8
 24255                           tblptrh	equ	0xFF7
 24256                           tblptrl	equ	0xFF6
 24257                           tablat	equ	0xFF5
 24258                           prodh	equ	0xFF4
 24259                           prodl	equ	0xFF3
 24260                           intcon	equ	0xFF2
 24261                           indf0	equ	0xFEF
 24262                           postinc0	equ	0xFEE
 24263                           fsr0h	equ	0xFEA
 24264                           fsr0l	equ	0xFE9
 24265                           wreg	equ	0xFE8
 24266                           indf1	equ	0xFE7
 24267                           postinc1	equ	0xFE6
 24268                           postdec1	equ	0xFE5
 24269                           fsr1h	equ	0xFE2
 24270                           fsr1l	equ	0xFE1
 24271                           indf2	equ	0xFDF
 24272                           postinc2	equ	0xFDE
 24273                           postdec2	equ	0xFDD
 24274                           plusw2	equ	0xFDB
 24275                           fsr2h	equ	0xFDA
 24276                           fsr2l	equ	0xFD9
 24277                           status	equ	0xFD8
 24278                           
 24279 ;; *************** function ___lwmod *****************
 24280 ;; Defined at:
 24281 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 24282 ;; Parameters:    Size  Location     Type
 24283 ;;  dividend        2    0[BANK0 ] unsigned int 
 24284 ;;  divisor         2    2[BANK0 ] unsigned int 
 24285 ;; Auto vars:     Size  Location     Type
 24286 ;;  counter         1    4[BANK0 ] unsigned char 
 24287 ;; Return value:  Size  Location     Type
 24288 ;;                  2    0[BANK0 ] unsigned int 
 24289 ;; Registers used:
 24290 ;;		wreg, status,2, status,0
 24291 ;; Tracked objects:
 24292 ;;		On entry : F/0
 24293 ;;		On exit  : F/0
 24294 ;;		Unchanged: 0/0
 24295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24296 ;;      Params:         0       4       0       0       0       0       0
 24297 ;;      Locals:         0       1       0       0       0       0       0
 24298 ;;      Temps:          0       0       0       0       0       0       0
 24299 ;;      Totals:         0       5       0       0       0       0       0
 24300 ;;Total ram usage:        5 bytes
 24301 ;; Hardware stack levels used:    1
 24302 ;; Hardware stack levels required when called:    3
 24303 ;; This function calls:
 24304 ;;		Nothing
 24305 ;; This function is called by:
 24306 ;;		_utoa
 24307 ;; This function uses a non-reentrant model
 24308 ;;
 24309                           
 24310                           	psect	text62
 24311  005BE2                     __ptext62:
 24312                           	opt stack 0
 24313  005BE2                     ___lwmod:
 24314                           	opt stack 23
 24315                           
 24316                           ; BSR set to: 0
 24317                           
 24318                           ; BSR set to: 0
 24319                           ;incstack = 0
 24320                           ;incstack = 0
 24321  005BE2  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24322  005BE4  1162               	iorwf	___lwmod@divisor& (0+255),w,b
 24323  005BE6  E017               	bz	l2526
 24324                           
 24325                           ; BSR set to: 0
 24326  005BE8  0E01               	movlw	1
 24327  005BEA  6F64               	movwf	___lwmod@counter& (0+255),b
 24328  005BEC  D004               	goto	l16958
 24329  005BEE                     l16956:
 24330                           
 24331                           ; BSR set to: 0
 24332  005BEE  90D8               	bcf	status,0,c
 24333  005BF0  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 24334  005BF2  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 24335  005BF4  2B64               	incf	___lwmod@counter& (0+255),f,b
 24336  005BF6                     l16958:
 24337                           
 24338                           ; BSR set to: 0
 24339  005BF6  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 24340  005BF8  D7FA               	goto	l16956
 24341  005BFA                     l16960:
 24342                           
 24343                           ; BSR set to: 0
 24344  005BFA  5162               	movf	___lwmod@divisor& (0+255),w,b
 24345  005BFC  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 24346  005BFE  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24347  005C00  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 24348  005C02  E304               	bnc	l16964
 24349                           
 24350                           ; BSR set to: 0
 24351  005C04  5162               	movf	___lwmod@divisor& (0+255),w,b
 24352  005C06  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 24353  005C08  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24354  005C0A  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 24355  005C0C                     l16964:
 24356                           
 24357                           ; BSR set to: 0
 24358  005C0C  90D8               	bcf	status,0,c
 24359  005C0E  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 24360  005C10  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 24361                           
 24362                           ; BSR set to: 0
 24363  005C12  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 24364  005C14  D7F2               	goto	l16960
 24365  005C16                     l2526:
 24366                           
 24367                           ; BSR set to: 0
 24368  005C16  C060  F060         	movff	___lwmod@dividend,?___lwmod
 24369  005C1A  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 24370                           
 24371                           ; BSR set to: 0
 24372  005C1E  0012               	return	
 24373  005C20                     __end_of___lwmod:
 24374                           	opt stack 0
 24375                           tblptru	equ	0xFF8
 24376                           tblptrh	equ	0xFF7
 24377                           tblptrl	equ	0xFF6
 24378                           tablat	equ	0xFF5
 24379                           prodh	equ	0xFF4
 24380                           prodl	equ	0xFF3
 24381                           intcon	equ	0xFF2
 24382                           indf0	equ	0xFEF
 24383                           postinc0	equ	0xFEE
 24384                           fsr0h	equ	0xFEA
 24385                           fsr0l	equ	0xFE9
 24386                           wreg	equ	0xFE8
 24387                           indf1	equ	0xFE7
 24388                           postinc1	equ	0xFE6
 24389                           postdec1	equ	0xFE5
 24390                           fsr1h	equ	0xFE2
 24391                           fsr1l	equ	0xFE1
 24392                           indf2	equ	0xFDF
 24393                           postinc2	equ	0xFDE
 24394                           postdec2	equ	0xFDD
 24395                           plusw2	equ	0xFDB
 24396                           fsr2h	equ	0xFDA
 24397                           fsr2l	equ	0xFD9
 24398                           status	equ	0xFD8
 24399                           
 24400 ;; *************** function ___lwdiv *****************
 24401 ;; Defined at:
 24402 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 24403 ;; Parameters:    Size  Location     Type
 24404 ;;  dividend        2    0[BANK0 ] unsigned int 
 24405 ;;  divisor         2    2[BANK0 ] unsigned int 
 24406 ;; Auto vars:     Size  Location     Type
 24407 ;;  quotient        2    5[BANK0 ] unsigned int 
 24408 ;;  counter         1    4[BANK0 ] unsigned char 
 24409 ;; Return value:  Size  Location     Type
 24410 ;;                  2    0[BANK0 ] unsigned int 
 24411 ;; Registers used:
 24412 ;;		wreg, status,2, status,0
 24413 ;; Tracked objects:
 24414 ;;		On entry : F/0
 24415 ;;		On exit  : F/0
 24416 ;;		Unchanged: 0/0
 24417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24418 ;;      Params:         0       4       0       0       0       0       0
 24419 ;;      Locals:         0       3       0       0       0       0       0
 24420 ;;      Temps:          0       0       0       0       0       0       0
 24421 ;;      Totals:         0       7       0       0       0       0       0
 24422 ;;Total ram usage:        7 bytes
 24423 ;; Hardware stack levels used:    1
 24424 ;; Hardware stack levels required when called:    3
 24425 ;; This function calls:
 24426 ;;		Nothing
 24427 ;; This function is called by:
 24428 ;;		_utoa
 24429 ;; This function uses a non-reentrant model
 24430 ;;
 24431                           
 24432                           	psect	text63
 24433  0059D2                     __ptext63:
 24434                           	opt stack 0
 24435  0059D2                     ___lwdiv:
 24436                           	opt stack 23
 24437                           
 24438                           ; BSR set to: 0
 24439                           
 24440                           ; BSR set to: 0
 24441                           ;incstack = 0
 24442                           ;incstack = 0
 24443  0059D2  6B65               	clrf	___lwdiv@quotient& (0+255),b
 24444  0059D4  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
 24445                           
 24446                           ; BSR set to: 0
 24447  0059D6  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24448  0059D8  1162               	iorwf	___lwdiv@divisor& (0+255),w,b
 24449  0059DA  E01B               	bz	l2516
 24450                           
 24451                           ; BSR set to: 0
 24452  0059DC  0E01               	movlw	1
 24453  0059DE  6F64               	movwf	___lwdiv@counter& (0+255),b
 24454  0059E0  D004               	goto	l13676
 24455  0059E2                     l13674:
 24456                           
 24457                           ; BSR set to: 0
 24458  0059E2  90D8               	bcf	status,0,c
 24459  0059E4  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 24460  0059E6  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 24461  0059E8  2B64               	incf	___lwdiv@counter& (0+255),f,b
 24462  0059EA                     l13676:
 24463                           
 24464                           ; BSR set to: 0
 24465  0059EA  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 24466  0059EC  D7FA               	goto	l13674
 24467  0059EE                     l13678:
 24468                           
 24469                           ; BSR set to: 0
 24470  0059EE  90D8               	bcf	status,0,c
 24471  0059F0  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 24472  0059F2  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 24473                           
 24474                           ; BSR set to: 0
 24475  0059F4  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24476  0059F6  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 24477  0059F8  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24478  0059FA  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 24479  0059FC  E305               	bnc	l13686
 24480                           
 24481                           ; BSR set to: 0
 24482  0059FE  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24483  005A00  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 24484  005A02  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24485  005A04  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 24486                           
 24487                           ; BSR set to: 0
 24488  005A06  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 24489  005A08                     l13686:
 24490                           
 24491                           ; BSR set to: 0
 24492  005A08  90D8               	bcf	status,0,c
 24493  005A0A  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 24494  005A0C  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 24495                           
 24496                           ; BSR set to: 0
 24497  005A0E  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 24498  005A10  D7EE               	goto	l13678
 24499  005A12                     l2516:
 24500                           
 24501                           ; BSR set to: 0
 24502  005A12  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 24503  005A16  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 24504                           
 24505                           ; BSR set to: 0
 24506  005A1A  0012               	return	
 24507  005A1C                     __end_of___lwdiv:
 24508                           	opt stack 0
 24509                           tblptru	equ	0xFF8
 24510                           tblptrh	equ	0xFF7
 24511                           tblptrl	equ	0xFF6
 24512                           tablat	equ	0xFF5
 24513                           prodh	equ	0xFF4
 24514                           prodl	equ	0xFF3
 24515                           intcon	equ	0xFF2
 24516                           indf0	equ	0xFEF
 24517                           postinc0	equ	0xFEE
 24518                           fsr0h	equ	0xFEA
 24519                           fsr0l	equ	0xFE9
 24520                           wreg	equ	0xFE8
 24521                           indf1	equ	0xFE7
 24522                           postinc1	equ	0xFE6
 24523                           postdec1	equ	0xFE5
 24524                           fsr1h	equ	0xFE2
 24525                           fsr1l	equ	0xFE1
 24526                           indf2	equ	0xFDF
 24527                           postinc2	equ	0xFDE
 24528                           postdec2	equ	0xFDD
 24529                           plusw2	equ	0xFDB
 24530                           fsr2h	equ	0xFDA
 24531                           fsr2l	equ	0xFD9
 24532                           status	equ	0xFD8
 24533                           
 24534 ;; *************** function _vscp_restoreDefaults *****************
 24535 ;; Defined at:
 24536 ;;		line 2917 in file "main.c"
 24537 ;; Parameters:    Size  Location     Type
 24538 ;;		None
 24539 ;; Auto vars:     Size  Location     Type
 24540 ;;		None
 24541 ;; Return value:  Size  Location     Type
 24542 ;;		None               void
 24543 ;; Registers used:
 24544 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24545 ;; Tracked objects:
 24546 ;;		On entry : 0/0
 24547 ;;		On exit  : F/0
 24548 ;;		Unchanged: 0/0
 24549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24550 ;;      Params:         0       0       0       0       0       0       0
 24551 ;;      Locals:         0       0       0       0       0       0       0
 24552 ;;      Temps:          0       0       0       0       0       0       0
 24553 ;;      Totals:         0       0       0       0       0       0       0
 24554 ;;Total ram usage:        0 bytes
 24555 ;; Hardware stack levels used:    1
 24556 ;; Hardware stack levels required when called:    5
 24557 ;; This function calls:
 24558 ;;		_init_app_ram
 24559 ;;		_init_app_eeprom
 24560 ;; This function is called by:
 24561 ;;		_main
 24562 ;;		_doModeVerbose
 24563 ;; This function uses a non-reentrant model
 24564 ;;
 24565                           
 24566                           	psect	text64
 24567  005EC8                     __ptext64:
 24568                           	opt stack 0
 24569  005EC8                     _vscp_restoreDefaults:
 24570                           	opt stack 24
 24571                           
 24572                           ;main.c: 2918: init_app_eeprom();
 24573                           
 24574                           ; BSR set to: 0
 24575                           ;incstack = 0
 24576                           ;incstack = 0
 24577  005EC8  EC70  F024         	call	_init_app_eeprom	;wreg free
 24578                           
 24579                           ;main.c: 2919: init_app_ram();
 24580  005ECC  EF2B  F018         	goto	_init_app_ram	;wreg free
 24581  005ED0                     __end_of_vscp_restoreDefaults:
 24582                           	opt stack 0
 24583                           tblptru	equ	0xFF8
 24584                           tblptrh	equ	0xFF7
 24585                           tblptrl	equ	0xFF6
 24586                           tablat	equ	0xFF5
 24587                           prodh	equ	0xFF4
 24588                           prodl	equ	0xFF3
 24589                           intcon	equ	0xFF2
 24590                           indf0	equ	0xFEF
 24591                           postinc0	equ	0xFEE
 24592                           fsr0h	equ	0xFEA
 24593                           fsr0l	equ	0xFE9
 24594                           wreg	equ	0xFE8
 24595                           indf1	equ	0xFE7
 24596                           postinc1	equ	0xFE6
 24597                           postdec1	equ	0xFE5
 24598                           fsr1h	equ	0xFE2
 24599                           fsr1l	equ	0xFE1
 24600                           indf2	equ	0xFDF
 24601                           postinc2	equ	0xFDE
 24602                           postdec2	equ	0xFDD
 24603                           plusw2	equ	0xFDB
 24604                           fsr2h	equ	0xFDA
 24605                           fsr2l	equ	0xFD9
 24606                           status	equ	0xFD8
 24607                           
 24608 ;; *************** function _init_app_eeprom *****************
 24609 ;; Defined at:
 24610 ;;		line 555 in file "main.c"
 24611 ;; Parameters:    Size  Location     Type
 24612 ;;		None
 24613 ;; Auto vars:     Size  Location     Type
 24614 ;;  i               1    4[BANK0 ] unsigned char 
 24615 ;; Return value:  Size  Location     Type
 24616 ;;		None               void
 24617 ;; Registers used:
 24618 ;;		wreg, status,2, status,0, cstack
 24619 ;; Tracked objects:
 24620 ;;		On entry : 0/0
 24621 ;;		On exit  : 0/0
 24622 ;;		Unchanged: 0/0
 24623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24624 ;;      Params:         0       0       0       0       0       0       0
 24625 ;;      Locals:         0       1       0       0       0       0       0
 24626 ;;      Temps:          0       0       0       0       0       0       0
 24627 ;;      Totals:         0       1       0       0       0       0       0
 24628 ;;Total ram usage:        1 bytes
 24629 ;; Hardware stack levels used:    1
 24630 ;; Hardware stack levels required when called:    4
 24631 ;; This function calls:
 24632 ;;		_Busy_eep
 24633 ;;		_Write_b_eep
 24634 ;; This function is called by:
 24635 ;;		_vscp_restoreDefaults
 24636 ;; This function uses a non-reentrant model
 24637 ;;
 24638                           
 24639                           	psect	text65
 24640  0048E0                     __ptext65:
 24641                           	opt stack 0
 24642  0048E0                     _init_app_eeprom:
 24643                           	opt stack 24
 24644                           
 24645                           ;main.c: 556: uint8_t i;
 24646                           ;main.c: 558: (Busy_eep(), Write_b_eep(0x01,0x55));
 24647                           
 24648                           ; BSR set to: 0
 24649                           ;incstack = 0
 24650                           ;incstack = 0
 24651  0048E0  EC68  F02F         	call	_Busy_eep	;wreg free
 24652  0048E4  0100               	movlb	0	; () banked
 24653  0048E6  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 24654  0048E8  0E01               	movlw	1
 24655  0048EA  6F60               	movwf	?_Write_b_eep& (0+255),b
 24656  0048EC  0E55               	movlw	85
 24657  0048EE  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 24658  0048F0  EC64  F02E         	call	_Write_b_eep	;wreg free
 24659                           
 24660                           ;main.c: 559: (Busy_eep(), Write_b_eep(0x02,0xAA));
 24661  0048F4  EC68  F02F         	call	_Busy_eep	;wreg free
 24662  0048F8  0100               	movlb	0	; () banked
 24663  0048FA  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 24664  0048FC  0E02               	movlw	2
 24665  0048FE  6F60               	movwf	?_Write_b_eep& (0+255),b
 24666  004900  0EAA               	movlw	170
 24667  004902  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 24668  004904  EC64  F02E         	call	_Write_b_eep	;wreg free
 24669                           
 24670                           ;main.c: 560: (Busy_eep(), Write_b_eep(0x03,0));
 24671  004908  EC68  F02F         	call	_Busy_eep	;wreg free
 24672  00490C  0100               	movlb	0	; () banked
 24673  00490E  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 24674  004910  0E03               	movlw	3
 24675  004912  6F60               	movwf	?_Write_b_eep& (0+255),b
 24676  004914  0E00               	movlw	0
 24677  004916  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 24678  004918  EC64  F02E         	call	_Write_b_eep	;wreg free
 24679                           
 24680                           ;main.c: 561: (Busy_eep(), Write_b_eep(0x05,0));
 24681  00491C  EC68  F02F         	call	_Busy_eep	;wreg free
 24682  004920  0100               	movlb	0	; () banked
 24683  004922  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 24684  004924  0E05               	movlw	5
 24685  004926  6F60               	movwf	?_Write_b_eep& (0+255),b
 24686  004928  0E00               	movlw	0
 24687  00492A  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 24688  00492C  EC64  F02E         	call	_Write_b_eep	;wreg free
 24689                           
 24690                           ;main.c: 562: (Busy_eep(), Write_b_eep(0x06,0));
 24691  004930  EC68  F02F         	call	_Busy_eep	;wreg free
 24692  004934  0100               	movlb	0	; () banked
 24693  004936  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 24694  004938  0E06               	movlw	6
 24695  00493A  6F60               	movwf	?_Write_b_eep& (0+255),b
 24696  00493C  0E00               	movlw	0
 24697  00493E  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 24698  004940  EC64  F02E         	call	_Write_b_eep	;wreg free
 24699                           
 24700                           ;main.c: 563: (Busy_eep(), Write_b_eep(0x09,20u));
 24701  004944  EC68  F02F         	call	_Busy_eep	;wreg free
 24702  004948  0100               	movlb	0	; () banked
 24703  00494A  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 24704  00494C  0E09               	movlw	9
 24705  00494E  6F60               	movwf	?_Write_b_eep& (0+255),b
 24706  004950  0E14               	movlw	20
 24707  004952  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 24708  004954  EC64  F02E         	call	_Write_b_eep	;wreg free
 24709                           
 24710                           ;main.c: 566: for (i = 0x20; i < (0x5C + 4); i++) {
 24711  004958  0E20               	movlw	32
 24712  00495A  0100               	movlb	0	; () banked
 24713  00495C  6F64               	movwf	init_app_eeprom@i& (0+255),b
 24714  00495E                     l15350:
 24715                           
 24716                           ; BSR set to: 0
 24717                           ;main.c: 567: (Busy_eep(), Write_b_eep(0x20,0xFF));
 24718  00495E  EC68  F02F         	call	_Busy_eep	;wreg free
 24719  004962  0100               	movlb	0	; () banked
 24720  004964  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 24721  004966  0E20               	movlw	32
 24722  004968  6F60               	movwf	?_Write_b_eep& (0+255),b
 24723  00496A  0EFF               	movlw	255
 24724  00496C  6962               	setf	(?_Write_b_eep+2)& (0+255),b
 24725  00496E  EC64  F02E         	call	_Write_b_eep	;wreg free
 24726  004972  0100               	movlb	0	; () banked
 24727  004974  2B64               	incf	init_app_eeprom@i& (0+255),f,b
 24728                           
 24729                           ; BSR set to: 0
 24730  004976  0E5F               	movlw	95
 24731  004978  6564               	cpfsgt	init_app_eeprom@i& (0+255),b
 24732  00497A  D7F1               	goto	l15350
 24733                           
 24734                           ; BSR set to: 0
 24735                           ;main.c: 568: }
 24736                           ;main.c: 571: for (i = 0x60; i < (0x64 + 4); i++) {
 24737  00497C  0E60               	movlw	96
 24738  00497E  6F64               	movwf	init_app_eeprom@i& (0+255),b
 24739  004980                     l15364:
 24740                           
 24741                           ; BSR set to: 0
 24742                           ;main.c: 572: (Busy_eep(), Write_b_eep(0x60,0x00));
 24743  004980  EC68  F02F         	call	_Busy_eep	;wreg free
 24744  004984  0100               	movlb	0	; () banked
 24745  004986  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 24746  004988  0E60               	movlw	96
 24747  00498A  6F60               	movwf	?_Write_b_eep& (0+255),b
 24748  00498C  0E00               	movlw	0
 24749  00498E  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 24750  004990  EC64  F02E         	call	_Write_b_eep	;wreg free
 24751  004994  0100               	movlb	0	; () banked
 24752  004996  2B64               	incf	init_app_eeprom@i& (0+255),f,b
 24753                           
 24754                           ; BSR set to: 0
 24755  004998  0E67               	movlw	103
 24756  00499A  6564               	cpfsgt	init_app_eeprom@i& (0+255),b
 24757  00499C  D7F1               	goto	l15364
 24758                           
 24759                           ; BSR set to: 0
 24760                           ;main.c: 573: }
 24761                           ;main.c: 575: (Busy_eep(), Write_b_eep(0x65,0));
 24762  00499E  EC68  F02F         	call	_Busy_eep	;wreg free
 24763  0049A2  0100               	movlb	0	; () banked
 24764  0049A4  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 24765  0049A6  0E65               	movlw	101
 24766  0049A8  6F60               	movwf	?_Write_b_eep& (0+255),b
 24767  0049AA  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 24768  0049AC  EF64  F02E         	goto	_Write_b_eep	;wreg free
 24769  0049B0                     __end_of_init_app_eeprom:
 24770                           	opt stack 0
 24771                           tblptru	equ	0xFF8
 24772                           tblptrh	equ	0xFF7
 24773                           tblptrl	equ	0xFF6
 24774                           tablat	equ	0xFF5
 24775                           prodh	equ	0xFF4
 24776                           prodl	equ	0xFF3
 24777                           intcon	equ	0xFF2
 24778                           indf0	equ	0xFEF
 24779                           postinc0	equ	0xFEE
 24780                           fsr0h	equ	0xFEA
 24781                           fsr0l	equ	0xFE9
 24782                           wreg	equ	0xFE8
 24783                           indf1	equ	0xFE7
 24784                           postinc1	equ	0xFE6
 24785                           postdec1	equ	0xFE5
 24786                           fsr1h	equ	0xFE2
 24787                           fsr1l	equ	0xFE1
 24788                           indf2	equ	0xFDF
 24789                           postinc2	equ	0xFDE
 24790                           postdec2	equ	0xFDD
 24791                           plusw2	equ	0xFDB
 24792                           fsr2h	equ	0xFDA
 24793                           fsr2l	equ	0xFD9
 24794                           status	equ	0xFD8
 24795                           
 24796 ;; *************** function _Write_b_eep *****************
 24797 ;; Defined at:
 24798 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 24799 ;; Parameters:    Size  Location     Type
 24800 ;;  badd            2    0[BANK0 ] unsigned int 
 24801 ;;  bdat            1    2[BANK0 ] unsigned char 
 24802 ;; Auto vars:     Size  Location     Type
 24803 ;;  GIE_BIT_VAL     1    3[BANK0 ] unsigned char 
 24804 ;; Return value:  Size  Location     Type
 24805 ;;		None               void
 24806 ;; Registers used:
 24807 ;;		wreg, status,2
 24808 ;; Tracked objects:
 24809 ;;		On entry : F/0
 24810 ;;		On exit  : 0/0
 24811 ;;		Unchanged: 0/0
 24812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24813 ;;      Params:         0       3       0       0       0       0       0
 24814 ;;      Locals:         0       1       0       0       0       0       0
 24815 ;;      Temps:          0       0       0       0       0       0       0
 24816 ;;      Totals:         0       4       0       0       0       0       0
 24817 ;;Total ram usage:        4 bytes
 24818 ;; Hardware stack levels used:    1
 24819 ;; Hardware stack levels required when called:    3
 24820 ;; This function calls:
 24821 ;;		Nothing
 24822 ;; This function is called by:
 24823 ;;		_init_app_eeprom
 24824 ;;		_doModeVerbose
 24825 ;;		_doModeSLCAN
 24826 ;; This function uses a non-reentrant model
 24827 ;;
 24828                           
 24829                           	psect	text66
 24830  005CC8                     __ptext66:
 24831                           	opt stack 0
 24832  005CC8                     _Write_b_eep:
 24833                           	opt stack 26
 24834                           
 24835                           ; BSR set to: 0
 24836                           
 24837                           ;incstack = 0
 24838                           ;incstack = 0
 24839  005CC8  C060  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 24840  005CCC  C062  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 24841  005CD0  9EA6               	bcf	4006,7,c	;volatile
 24842  005CD2  9CA6               	bcf	4006,6,c	;volatile
 24843  005CD4  84A6               	bsf	4006,2,c	;volatile
 24844                           
 24845                           ; BSR set to: 0
 24846  005CD6  0E00               	movlw	0
 24847  005CD8  BEF2               	btfsc	intcon,7,c	;volatile
 24848  005CDA  0E01               	movlw	1
 24849  005CDC  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 24850                           
 24851                           ; BSR set to: 0
 24852  005CDE  9EF2               	bcf	intcon,7,c	;volatile
 24853                           
 24854                           ; BSR set to: 0
 24855  005CE0  0E55               	movlw	85
 24856  005CE2  6EA7               	movwf	4007,c	;volatile
 24857                           
 24858                           ; BSR set to: 0
 24859  005CE4  0EAA               	movlw	170
 24860  005CE6  6EA7               	movwf	4007,c	;volatile
 24861                           
 24862                           ; BSR set to: 0
 24863  005CE8  82A6               	bsf	4006,1,c	;volatile
 24864  005CEA                     l1842:
 24865                           
 24866                           ; BSR set to: 0
 24867  005CEA  B2A6               	btfsc	4006,1,c	;volatile
 24868  005CEC  D7FE               	goto	l1842
 24869                           
 24870                           ; BSR set to: 0
 24871  005CEE  B163               	btfsc	Write_b_eep@GIE_BIT_VAL& (0+255),0,b
 24872  005CF0  D002               	bra	u20565
 24873  005CF2  9EF2               	bcf	intcon,7,c	;volatile
 24874  005CF4  D001               	bra	u20566
 24875  005CF6                     u20565:
 24876  005CF6  8EF2               	bsf	intcon,7,c	;volatile
 24877  005CF8                     u20566:
 24878  005CF8  94A6               	bcf	4006,2,c	;volatile
 24879  005CFA  0012               	return	
 24880  005CFC                     __end_of_Write_b_eep:
 24881                           	opt stack 0
 24882                           tblptru	equ	0xFF8
 24883                           tblptrh	equ	0xFF7
 24884                           tblptrl	equ	0xFF6
 24885                           tablat	equ	0xFF5
 24886                           prodh	equ	0xFF4
 24887                           prodl	equ	0xFF3
 24888                           intcon	equ	0xFF2
 24889                           indf0	equ	0xFEF
 24890                           postinc0	equ	0xFEE
 24891                           fsr0h	equ	0xFEA
 24892                           fsr0l	equ	0xFE9
 24893                           wreg	equ	0xFE8
 24894                           indf1	equ	0xFE7
 24895                           postinc1	equ	0xFE6
 24896                           postdec1	equ	0xFE5
 24897                           fsr1h	equ	0xFE2
 24898                           fsr1l	equ	0xFE1
 24899                           indf2	equ	0xFDF
 24900                           postinc2	equ	0xFDE
 24901                           postdec2	equ	0xFDD
 24902                           plusw2	equ	0xFDB
 24903                           fsr2h	equ	0xFDA
 24904                           fsr2l	equ	0xFD9
 24905                           status	equ	0xFD8
 24906                           
 24907 ;; *************** function _Busy_eep *****************
 24908 ;; Defined at:
 24909 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 24910 ;; Parameters:    Size  Location     Type
 24911 ;;		None
 24912 ;; Auto vars:     Size  Location     Type
 24913 ;;		None
 24914 ;; Return value:  Size  Location     Type
 24915 ;;		None               void
 24916 ;; Registers used:
 24917 ;;		None
 24918 ;; Tracked objects:
 24919 ;;		On entry : 0/1
 24920 ;;		On exit  : 0/0
 24921 ;;		Unchanged: 0/0
 24922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24923 ;;      Params:         0       0       0       0       0       0       0
 24924 ;;      Locals:         0       0       0       0       0       0       0
 24925 ;;      Temps:          0       0       0       0       0       0       0
 24926 ;;      Totals:         0       0       0       0       0       0       0
 24927 ;;Total ram usage:        0 bytes
 24928 ;; Hardware stack levels used:    1
 24929 ;; Hardware stack levels required when called:    3
 24930 ;; This function calls:
 24931 ;;		Nothing
 24932 ;; This function is called by:
 24933 ;;		_init_app_eeprom
 24934 ;;		_doModeVerbose
 24935 ;;		_doModeSLCAN
 24936 ;; This function uses a non-reentrant model
 24937 ;;
 24938                           
 24939                           	psect	text67
 24940  005ED0                     __ptext67:
 24941                           	opt stack 0
 24942  005ED0                     _Busy_eep:
 24943                           	opt stack 26
 24944  005ED0                     l1817:
 24945  005ED0  A2A6               	btfss	4006,1,c	;volatile
 24946  005ED2  0012               	return	
 24947  005ED4  D7FD               	goto	l1817
 24948  005ED6                     __end_of_Busy_eep:
 24949                           	opt stack 0
 24950                           tblptru	equ	0xFF8
 24951                           tblptrh	equ	0xFF7
 24952                           tblptrl	equ	0xFF6
 24953                           tablat	equ	0xFF5
 24954                           prodh	equ	0xFF4
 24955                           prodl	equ	0xFF3
 24956                           intcon	equ	0xFF2
 24957                           indf0	equ	0xFEF
 24958                           postinc0	equ	0xFEE
 24959                           fsr0h	equ	0xFEA
 24960                           fsr0l	equ	0xFE9
 24961                           wreg	equ	0xFE8
 24962                           indf1	equ	0xFE7
 24963                           postinc1	equ	0xFE6
 24964                           postdec1	equ	0xFE5
 24965                           fsr1h	equ	0xFE2
 24966                           fsr1l	equ	0xFE1
 24967                           indf2	equ	0xFDF
 24968                           postinc2	equ	0xFDE
 24969                           postdec2	equ	0xFDD
 24970                           plusw2	equ	0xFDB
 24971                           fsr2h	equ	0xFDA
 24972                           fsr2l	equ	0xFD9
 24973                           status	equ	0xFD8
 24974                           
 24975 ;; *************** function _printMode *****************
 24976 ;; Defined at:
 24977 ;;		line 2948 in file "main.c"
 24978 ;; Parameters:    Size  Location     Type
 24979 ;;		None
 24980 ;; Auto vars:     Size  Location     Type
 24981 ;;		None
 24982 ;; Return value:  Size  Location     Type
 24983 ;;		None               void
 24984 ;; Registers used:
 24985 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24986 ;; Tracked objects:
 24987 ;;		On entry : 0/0
 24988 ;;		On exit  : 0/0
 24989 ;;		Unchanged: 0/0
 24990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24991 ;;      Params:         0       0       0       0       0       0       0
 24992 ;;      Locals:         0       0       0       0       0       0       0
 24993 ;;      Temps:          0       0       0       0       0       0       0
 24994 ;;      Totals:         0       0       0       0       0       0       0
 24995 ;;Total ram usage:        0 bytes
 24996 ;; Hardware stack levels used:    1
 24997 ;; Hardware stack levels required when called:    5
 24998 ;; This function calls:
 24999 ;;		_putsUSART
 25000 ;; This function is called by:
 25001 ;;		_main
 25002 ;; This function uses a non-reentrant model
 25003 ;;
 25004                           
 25005                           	psect	text68
 25006  005376                     __ptext68:
 25007                           	opt stack 0
 25008  005376                     _printMode:
 25009                           	opt stack 25
 25010                           
 25011                           ;main.c: 2949: putsUSART((char *) "Mode: ");
 25012                           
 25013                           ;incstack = 0
 25014                           ;incstack = 0
 25015  005376  0E7F               	movlw	high STR_279
 25016  005378  0100               	movlb	0	; () banked
 25017  00537A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25018  00537C  0E0F               	movlw	low STR_279
 25019  00537E  6F61               	movwf	?_putsUSART& (0+255),b
 25020  005380  EC41  F02C         	call	_putsUSART	;wreg free
 25021                           
 25022                           ;main.c: 2950: if (0 == mode) {
 25023  005384  0101               	movlb	1	; () banked
 25024  005386  6728               	tstfsz	_mode& (0+255),b
 25025  005388  D008               	goto	l14062
 25026                           
 25027                           ; BSR set to: 1
 25028                           ;main.c: 2951: putsUSART((char *) "Verbose");
 25029  00538A  0E7F               	movlw	high STR_280
 25030  00538C  0100               	movlb	0	; () banked
 25031  00538E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25032  005390  0E07               	movlw	low STR_280
 25033  005392  6F61               	movwf	?_putsUSART& (0+255),b
 25034  005394  EC41  F02C         	call	_putsUSART	;wreg free
 25035                           
 25036                           ;main.c: 2952: } else if (1 == mode) {
 25037  005398  D027               	goto	l1295
 25038  00539A                     l14062:
 25039                           
 25040                           ; BSR set to: 1
 25041  00539A  0528               	decf	_mode& (0+255),w,b
 25042  00539C  E108               	bnz	l14066
 25043                           
 25044                           ; BSR set to: 1
 25045                           ;main.c: 2953: putsUSART((char *) "VSCP Driver");
 25046  00539E  0E7E               	movlw	high STR_281
 25047  0053A0  0100               	movlb	0	; () banked
 25048  0053A2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25049  0053A4  0E49               	movlw	low STR_281
 25050  0053A6  6F61               	movwf	?_putsUSART& (0+255),b
 25051  0053A8  EC41  F02C         	call	_putsUSART	;wreg free
 25052                           
 25053                           ;main.c: 2954: } else if (2 == mode) {
 25054  0053AC  D01D               	goto	l1295
 25055  0053AE                     l14066:
 25056                           
 25057                           ; BSR set to: 1
 25058  0053AE  5128               	movf	_mode& (0+255),w,b
 25059  0053B0  0A02               	xorlw	2
 25060  0053B2  E108               	bnz	l14070
 25061                           
 25062                           ; BSR set to: 1
 25063                           ;main.c: 2955: putsUSART((char *) "SL Driver");
 25064  0053B4  0E7E               	movlw	high STR_282
 25065  0053B6  0100               	movlb	0	; () banked
 25066  0053B8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25067  0053BA  0E89               	movlw	low STR_282
 25068  0053BC  6F61               	movwf	?_putsUSART& (0+255),b
 25069  0053BE  EC41  F02C         	call	_putsUSART	;wreg free
 25070                           
 25071                           ;main.c: 2956: } else if (3 == mode) {
 25072  0053C2  D012               	goto	l1295
 25073  0053C4                     l14070:
 25074                           
 25075                           ; BSR set to: 1
 25076  0053C4  5128               	movf	_mode& (0+255),w,b
 25077  0053C6  0A03               	xorlw	3
 25078  0053C8  E108               	bnz	l14074
 25079                           
 25080                           ; BSR set to: 1
 25081                           ;main.c: 2957: putsUSART((char *) "VSCP Node");
 25082  0053CA  0E7E               	movlw	high STR_283
 25083  0053CC  0100               	movlb	0	; () banked
 25084  0053CE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25085  0053D0  0E7F               	movlw	low STR_283
 25086  0053D2  6F61               	movwf	?_putsUSART& (0+255),b
 25087  0053D4  EC41  F02C         	call	_putsUSART	;wreg free
 25088                           
 25089                           ;main.c: 2958: } else {
 25090  0053D8  D007               	goto	l1295
 25091  0053DA                     l14074:
 25092                           
 25093                           ; BSR set to: 1
 25094                           ;main.c: 2959: putsUSART((char *) "Unknown (Verbose used)");
 25095  0053DA  0E7C               	movlw	high STR_284
 25096  0053DC  0100               	movlb	0	; () banked
 25097  0053DE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25098  0053E0  0E9E               	movlw	low STR_284
 25099  0053E2  6F61               	movwf	?_putsUSART& (0+255),b
 25100  0053E4  EC41  F02C         	call	_putsUSART	;wreg free
 25101  0053E8                     l1295:
 25102                           
 25103                           ;main.c: 2960: }
 25104                           ;main.c: 2961: putsUSART((char *) "\r\n");
 25105  0053E8  0E74               	movlw	high (STR_220+50)
 25106  0053EA  0100               	movlb	0	; () banked
 25107  0053EC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25108  0053EE  0E72               	movlw	low (STR_220+50)
 25109  0053F0  6F61               	movwf	?_putsUSART& (0+255),b
 25110  0053F2  EF41  F02C         	goto	_putsUSART	;wreg free
 25111  0053F6                     __end_of_printMode:
 25112                           	opt stack 0
 25113                           tblptru	equ	0xFF8
 25114                           tblptrh	equ	0xFF7
 25115                           tblptrl	equ	0xFF6
 25116                           tablat	equ	0xFF5
 25117                           prodh	equ	0xFF4
 25118                           prodl	equ	0xFF3
 25119                           intcon	equ	0xFF2
 25120                           indf0	equ	0xFEF
 25121                           postinc0	equ	0xFEE
 25122                           fsr0h	equ	0xFEA
 25123                           fsr0l	equ	0xFE9
 25124                           wreg	equ	0xFE8
 25125                           indf1	equ	0xFE7
 25126                           postinc1	equ	0xFE6
 25127                           postdec1	equ	0xFE5
 25128                           fsr1h	equ	0xFE2
 25129                           fsr1l	equ	0xFE1
 25130                           indf2	equ	0xFDF
 25131                           postinc2	equ	0xFDE
 25132                           postdec2	equ	0xFDD
 25133                           plusw2	equ	0xFDB
 25134                           fsr2h	equ	0xFDA
 25135                           fsr2l	equ	0xFD9
 25136                           status	equ	0xFD8
 25137                           
 25138 ;; *************** function _putsUSART *****************
 25139 ;; Defined at:
 25140 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 25141 ;; Parameters:    Size  Location     Type
 25142 ;;  data            2    1[BANK0 ] PTR unsigned char 
 25143 ;;		 -> STR_285(3), STR_284(23), STR_283(10), STR_282(10), 
 25144 ;;		 -> STR_281(12), STR_280(8), STR_279(7), STR_278(3), 
 25145 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_277(10), STR_276(3), STR_273(20), 
 25146 ;;		 -> STR_272(3), STR_271(14), STR_270(3), STR_266(8), 
 25147 ;;		 -> STR_265(15), STR_264(67), STR_263(3), STR_262(27), 
 25148 ;;		 -> STR_261(67), STR_260(39), STR_259(62), STR_258(55), 
 25149 ;;		 -> STR_257(49), STR_256(67), STR_255(47), STR_254(47), 
 25150 ;;		 -> STR_253(34), STR_252(71), STR_251(20), STR_250(78), 
 25151 ;;		 -> STR_249(24), STR_248(77), STR_247(74), STR_246(76), 
 25152 ;;		 -> STR_245(47), STR_244(40), STR_243(39), STR_242(33), 
 25153 ;;		 -> STR_241(23), STR_240(56), STR_239(24), STR_238(44), 
 25154 ;;		 -> STR_237(50), STR_236(31), STR_235(50), STR_234(51), 
 25155 ;;		 -> STR_233(46), STR_232(44), STR_231(27), STR_230(39), 
 25156 ;;		 -> STR_229(39), STR_228(52), STR_227(54), STR_226(55), 
 25157 ;;		 -> STR_225(3), STR_222(24), STR_221(57), STR_220(53), 
 25158 ;;		 -> STR_219(58), STR_218(3), STR_215(25), STR_214(3), 
 25159 ;;		 -> STR_211(24), STR_210(3), STR_207(24), STR_206(3), 
 25160 ;;		 -> STR_203(24), STR_202(3), STR_199(23), STR_198(3), 
 25161 ;;		 -> STR_195(21), STR_194(3), STR_191(22), STR_190(3), 
 25162 ;;		 -> STR_187(17), STR_186(3), STR_183(18), STR_182(4), 
 25163 ;;		 -> STR_181(11), STR_180(2), STR_177(7), STR_174(7), 
 25164 ;;		 -> STR_171(9), STR_168(7), STR_165(8), STR_162(7), 
 25165 ;;		 -> STR_161(2), STR_160(2), STR_159(6), STR_158(8), 
 25166 ;;		 -> STR_157(8), STR_156(20), STR_155(27), STR_154(6), 
 25167 ;;		 -> STR_153(33), STR_146(26), STR_144(32), STR_142(28), 
 25168 ;;		 -> STR_133(6), STR_131(40), STR_129(44), STR_126(6), 
 25169 ;;		 -> STR_125(39), STR_123(36), STR_121(37), STR_119(40), 
 25170 ;;		 -> STR_117(37), STR_116(50), STR_113(6), STR_112(41), 
 25171 ;;		 -> STR_110(38), STR_108(39), STR_106(42), STR_104(39), 
 25172 ;;		 -> STR_103(66), STR_100(6), STR_99(3), STR_96(20), 
 25173 ;;		 -> STR_92(8), STR_91(36), STR_88(8), STR_87(38), 
 25174 ;;		 -> STR_86(24), STR_84(33), STR_82(24), STR_79(54), 
 25175 ;;		 -> STR_78(6), STR_77(3), STR_72(25), STR_69(17), 
 25176 ;;		 -> STR_68(3), STR_67(4), STR_66(3), STR_63(4), 
 25177 ;;		 -> STR_58(15), wrkbuf(80), STR_55(14), STR_53(33), 
 25178 ;;		 -> STR_51(24), STR_48(6), STR_46(6), STR_44(6), 
 25179 ;;		 -> STR_42(6), STR_40(18), STR_39(6), STR_37(33), 
 25180 ;;		 -> STR_36(6), STR_28(24), STR_27(18), STR_26(20), 
 25181 ;;		 -> STR_25(25), STR_24(22), STR_23(19), STR_22(20), 
 25182 ;;		 -> STR_21(20), STR_19(6), STR_17(6), STR_15(6), 
 25183 ;;		 -> STR_13(6), STR_11(6), STR_9(6), STR_7(31), 
 25184 ;;		 -> STR_5(29), STR_4(55), STR_3(35), STR_2(58), 
 25185 ;;		 -> STR_1(37), 
 25186 ;; Auto vars:     Size  Location     Type
 25187 ;;		None
 25188 ;; Return value:  Size  Location     Type
 25189 ;;		None               void
 25190 ;; Registers used:
 25191 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 25192 ;; Tracked objects:
 25193 ;;		On entry : F/0
 25194 ;;		On exit  : 0/0
 25195 ;;		Unchanged: 0/0
 25196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25197 ;;      Params:         0       2       0       0       0       0       0
 25198 ;;      Locals:         0       0       0       0       0       0       0
 25199 ;;      Temps:          0       2       0       0       0       0       0
 25200 ;;      Totals:         0       4       0       0       0       0       0
 25201 ;;Total ram usage:        4 bytes
 25202 ;; Hardware stack levels used:    1
 25203 ;; Hardware stack levels required when called:    4
 25204 ;; This function calls:
 25205 ;;		_WriteUSART
 25206 ;; This function is called by:
 25207 ;;		_main
 25208 ;;		_doModeVerbose
 25209 ;;		_doModeSLCAN
 25210 ;;		_receivePrintEventVerbose
 25211 ;;		_receiveSendEventSLCAN
 25212 ;;		_printStatistics
 25213 ;;		_printErrors
 25214 ;;		_printHelp
 25215 ;;		_findNodes
 25216 ;;		_printGUID
 25217 ;;		_printMDF
 25218 ;;		_printNodeFirmwareVersion
 25219 ;;		_printFirmwareVersion
 25220 ;;		_printMode
 25221 ;; This function uses a non-reentrant model
 25222 ;;
 25223                           
 25224                           	psect	text69
 25225  005882                     __ptext69:
 25226                           	opt stack 0
 25227  005882                     _putsUSART:
 25228                           	opt stack 24
 25229  005882                     l1934:
 25230  005882  A2AC               	btfss	4012,1,c	;volatile
 25231  005884  D7FE               	goto	l1934
 25232  005886  0100               	movlb	0	; () banked
 25233  005888  5161               	movf	putsUSART@data& (0+255),w,b
 25234  00588A  6EF6               	movwf	tblptrl,c
 25235  00588C  6EE9               	movwf	fsr0l,c
 25236  00588E  0E05               	movlw	(high __ramtop+-1)
 25237  005890  6EEA               	movwf	fsr0h,c
 25238  005892  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 25239  005894  64EA               	cpfsgt	fsr0h,c
 25240  005896  D003               	bra	u18477
 25241  005898  6EEA               	movwf	fsr0h,c
 25242  00589A  50EF               	movf	indf0,w,c
 25243  00589C  D003               	bra	u18470
 25244  00589E                     u18477:
 25245  00589E  6EF7               	movwf	tblptrh,c
 25246  0058A0  0008               	tblrd		*
 25247  0058A2  50F5               	movf	tablat,w,c
 25248  0058A4                     u18470:
 25249  0058A4  EC36  F02F         	call	_WriteUSART
 25250  0058A8  0100               	movlb	0	; () banked
 25251  0058AA  5161               	movf	putsUSART@data& (0+255),w,b
 25252  0058AC  6F63               	movwf	??_putsUSART& (0+255),b
 25253  0058AE  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 25254  0058B0  6F64               	movwf	(??_putsUSART+1)& (0+255),b
 25255  0058B2  4B61               	infsnz	putsUSART@data& (0+255),f,b
 25256  0058B4  2B62               	incf	(putsUSART@data+1)& (0+255),f,b
 25257  0058B6  5163               	movf	??_putsUSART& (0+255),w,b
 25258  0058B8  6EF6               	movwf	tblptrl,c
 25259  0058BA  6EE9               	movwf	fsr0l,c
 25260  0058BC  0E05               	movlw	(high __ramtop+-1)
 25261  0058BE  6EEA               	movwf	fsr0h,c
 25262  0058C0  5164               	movf	(??_putsUSART+1)& (0+255),w,b
 25263  0058C2  64EA               	cpfsgt	fsr0h,c
 25264  0058C4  D003               	bra	u18487
 25265  0058C6  6EEA               	movwf	fsr0h,c
 25266  0058C8  50EF               	movf	indf0,w,c
 25267  0058CA  D003               	bra	u18480
 25268  0058CC                     u18487:
 25269  0058CC  6EF7               	movwf	tblptrh,c
 25270  0058CE  0008               	tblrd		*
 25271  0058D0  50F5               	movf	tablat,w,c
 25272  0058D2                     u18480:
 25273  0058D2  0900               	iorlw	0
 25274  0058D4  B4D8               	btfsc	status,2,c
 25275  0058D6  0012               	return	
 25276  0058D8  D7D4               	goto	l1934
 25277  0058DA                     __end_of_putsUSART:
 25278                           	opt stack 0
 25279                           tblptru	equ	0xFF8
 25280                           tblptrh	equ	0xFF7
 25281                           tblptrl	equ	0xFF6
 25282                           tablat	equ	0xFF5
 25283                           prodh	equ	0xFF4
 25284                           prodl	equ	0xFF3
 25285                           intcon	equ	0xFF2
 25286                           indf0	equ	0xFEF
 25287                           postinc0	equ	0xFEE
 25288                           fsr0h	equ	0xFEA
 25289                           fsr0l	equ	0xFE9
 25290                           wreg	equ	0xFE8
 25291                           indf1	equ	0xFE7
 25292                           postinc1	equ	0xFE6
 25293                           postdec1	equ	0xFE5
 25294                           fsr1h	equ	0xFE2
 25295                           fsr1l	equ	0xFE1
 25296                           indf2	equ	0xFDF
 25297                           postinc2	equ	0xFDE
 25298                           postdec2	equ	0xFDD
 25299                           plusw2	equ	0xFDB
 25300                           fsr2h	equ	0xFDA
 25301                           fsr2l	equ	0xFD9
 25302                           status	equ	0xFD8
 25303                           
 25304 ;; *************** function _WriteUSART *****************
 25305 ;; Defined at:
 25306 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 25307 ;; Parameters:    Size  Location     Type
 25308 ;;  data            1    wreg     unsigned char 
 25309 ;; Auto vars:     Size  Location     Type
 25310 ;;  data            1    0[BANK0 ] unsigned char 
 25311 ;; Return value:  Size  Location     Type
 25312 ;;		None               void
 25313 ;; Registers used:
 25314 ;;		wreg
 25315 ;; Tracked objects:
 25316 ;;		On entry : 0/1
 25317 ;;		On exit  : 0/0
 25318 ;;		Unchanged: 0/0
 25319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25320 ;;      Params:         0       0       0       0       0       0       0
 25321 ;;      Locals:         0       1       0       0       0       0       0
 25322 ;;      Temps:          0       0       0       0       0       0       0
 25323 ;;      Totals:         0       1       0       0       0       0       0
 25324 ;;Total ram usage:        1 bytes
 25325 ;; Hardware stack levels used:    1
 25326 ;; Hardware stack levels required when called:    3
 25327 ;; This function calls:
 25328 ;;		Nothing
 25329 ;; This function is called by:
 25330 ;;		_doModeVerbose
 25331 ;;		_sendEscapedUartData
 25332 ;;		_sendVSCPDriverErrorFrame
 25333 ;;		_sendVSCPDriverAck
 25334 ;;		_sendVSCPDriverNack
 25335 ;;		_sendVSCPDriverCommandReply
 25336 ;;		_receiveSendEventCANAL
 25337 ;;		_receiveSendMultiEventCANAL
 25338 ;;		_sendVSCPModeCapabilities
 25339 ;;		_receiveSendEventSLCAN
 25340 ;;		_printBinary
 25341 ;;		_printFirmwareVersion
 25342 ;;		_putsUSART
 25343 ;; This function uses a non-reentrant model
 25344 ;;
 25345                           
 25346                           	psect	text70
 25347  005E6C                     __ptext70:
 25348                           	opt stack 0
 25349  005E6C                     _WriteUSART:
 25350                           	opt stack 25
 25351                           
 25352                           ;incstack = 0
 25353                           ;incstack = 0
 25354                           ;WriteUSART@data stored from wreg
 25355  005E6C  CFE8 F060          	movff	wreg,WriteUSART@data
 25356  005E70  ACAC               	btfss	4012,6,c	;volatile
 25357  005E72  D003               	goto	l15490
 25358  005E74  90AC               	bcf	4012,0,c	;volatile
 25359  005E76  B228               	btfsc	_USART_Status,1,c
 25360  005E78  80AC               	bsf	4012,0,c	;volatile
 25361  005E7A                     l15490:
 25362  005E7A  C060  FFAD         	movff	WriteUSART@data,4013	;volatile
 25363  005E7E  0012               	return	
 25364  005E80                     __end_of_WriteUSART:
 25365                           	opt stack 0
 25366                           tblptru	equ	0xFF8
 25367                           tblptrh	equ	0xFF7
 25368                           tblptrl	equ	0xFF6
 25369                           tablat	equ	0xFF5
 25370                           prodh	equ	0xFF4
 25371                           prodl	equ	0xFF3
 25372                           intcon	equ	0xFF2
 25373                           indf0	equ	0xFEF
 25374                           postinc0	equ	0xFEE
 25375                           fsr0h	equ	0xFEA
 25376                           fsr0l	equ	0xFE9
 25377                           wreg	equ	0xFE8
 25378                           indf1	equ	0xFE7
 25379                           postinc1	equ	0xFE6
 25380                           postdec1	equ	0xFE5
 25381                           fsr1h	equ	0xFE2
 25382                           fsr1l	equ	0xFE1
 25383                           indf2	equ	0xFDF
 25384                           postinc2	equ	0xFDE
 25385                           postdec2	equ	0xFDD
 25386                           plusw2	equ	0xFDB
 25387                           fsr2h	equ	0xFDA
 25388                           fsr2l	equ	0xFD9
 25389                           status	equ	0xFD8
 25390                           
 25391 ;; *************** function _init *****************
 25392 ;; Defined at:
 25393 ;;		line 432 in file "main.c"
 25394 ;; Parameters:    Size  Location     Type
 25395 ;;		None
 25396 ;; Auto vars:     Size  Location     Type
 25397 ;;		None
 25398 ;; Return value:  Size  Location     Type
 25399 ;;		None               void
 25400 ;; Registers used:
 25401 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25402 ;; Tracked objects:
 25403 ;;		On entry : 0/0
 25404 ;;		On exit  : F/0
 25405 ;;		Unchanged: 0/0
 25406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25407 ;;      Params:         0       0       0       0       0       0       0
 25408 ;;      Locals:         0       0       0       0       0       0       0
 25409 ;;      Temps:          0       0       0       0       0       0       0
 25410 ;;      Totals:         0       0       0       0       0       0       0
 25411 ;;Total ram usage:        0 bytes
 25412 ;; Hardware stack levels used:    1
 25413 ;; Hardware stack levels required when called:    5
 25414 ;; This function calls:
 25415 ;;		_WriteTimer0
 25416 ;;		_init_app_ram
 25417 ;;		_OpenUSART
 25418 ;;		_OpenTimer0
 25419 ;;		_OpenTimer1
 25420 ;;		_WriteTimer1
 25421 ;;		_ECANInitialize
 25422 ;; This function is called by:
 25423 ;;		_main
 25424 ;; This function uses a non-reentrant model
 25425 ;;
 25426                           
 25427                           	psect	text71
 25428  0058DA                     __ptext71:
 25429                           	opt stack 0
 25430  0058DA                     _init:
 25431                           	opt stack 25
 25432                           
 25433                           ;main.c: 434: init_app_ram();
 25434                           
 25435                           ;incstack = 0
 25436                           ;incstack = 0
 25437  0058DA  EC2B  F018         	call	_init_app_ram	;wreg free
 25438                           
 25439                           ; BSR set to: 0
 25440                           ;main.c: 437: OSCCONbits.IRCF0 = 1;
 25441  0058DE  88D3               	bsf	4051,4,c	;volatile
 25442                           
 25443                           ; BSR set to: 0
 25444                           ;main.c: 438: OSCCONbits.IRCF1 = 1;
 25445  0058E0  8AD3               	bsf	4051,5,c	;volatile
 25446                           
 25447                           ; BSR set to: 0
 25448                           ;main.c: 439: OSCCONbits.IRCF2 = 1;
 25449  0058E2  8CD3               	bsf	4051,6,c	;volatile
 25450                           
 25451                           ; BSR set to: 0
 25452                           ;main.c: 440: OSCTUNEbits.PLLEN = 1;
 25453  0058E4  8C9B               	bsf	3995,6,c	;volatile
 25454                           
 25455                           ; BSR set to: 0
 25456                           ;main.c: 442: TRISBbits.RB2 = 0;
 25457  0058E6  9493               	bcf	3987,2,c	;volatile
 25458                           
 25459                           ; BSR set to: 0
 25460                           ;main.c: 443: TRISBbits.RB3 = 1;
 25461  0058E8  8693               	bsf	3987,3,c	;volatile
 25462                           
 25463                           ; BSR set to: 0
 25464                           ;main.c: 445: TRISCbits.RC1 = 0;
 25465  0058EA  9294               	bcf	3988,1,c	;volatile
 25466                           
 25467                           ; BSR set to: 0
 25468                           ;main.c: 446: TRISCbits.RC6 = 0;
 25469  0058EC  9C94               	bcf	3988,6,c	;volatile
 25470                           
 25471                           ; BSR set to: 0
 25472                           ;main.c: 447: TRISCbits.RC7 = 1;
 25473  0058EE  8E94               	bsf	3988,7,c	;volatile
 25474                           
 25475                           ; BSR set to: 0
 25476                           ;main.c: 451: OpenUSART( 0b01111111 &
 25477                           ;main.c: 452: 0b11111111 &
 25478                           ;main.c: 453: 0b11111110 &
 25479                           ;main.c: 454: 0b11111101 &
 25480                           ;main.c: 455: 0b11111111,
 25481                           ;main.c: 456: 21 );
 25482  0058F0  6B61               	clrf	(?_OpenUSART+1)& (0+255),b
 25483  0058F2  0E15               	movlw	21
 25484  0058F4  6F60               	movwf	?_OpenUSART& (0+255),b
 25485  0058F6  0E7C               	movlw	124
 25486  0058F8  ECE7  F02B         	call	_OpenUSART
 25487                           
 25488                           ; BSR set to: 0
 25489                           ;main.c: 458: RCIF = 0;
 25490  0058FC  9A9E               	bcf	3998,5,c	;volatile
 25491                           
 25492                           ; BSR set to: 0
 25493                           ;main.c: 459: RCIP = 0;
 25494  0058FE  9A9F               	bcf	3999,5,c	;volatile
 25495                           
 25496                           ; BSR set to: 0
 25497                           ;main.c: 460: RCIE = 1;
 25498  005900  8A9D               	bsf	3997,5,c	;volatile
 25499                           
 25500                           ; BSR set to: 0
 25501                           ;main.c: 461: PEIE = 1;
 25502  005902  8CF2               	bsf	intcon,6,c	;volatile
 25503                           
 25504                           ; BSR set to: 0
 25505                           ;main.c: 464: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 25506  005904  0E92               	movlw	146
 25507  005906  EC00  F02F         	call	_OpenTimer0
 25508                           
 25509                           ; BSR set to: 0
 25510                           ;main.c: 465: WriteTimer0(0xfb1d);
 25511  00590A  0EFB               	movlw	251
 25512  00590C  6F61               	movwf	(?_WriteTimer0+1)& (0+255),b
 25513  00590E  0E1D               	movlw	29
 25514  005910  6F60               	movwf	?_WriteTimer0& (0+255),b
 25515  005912  EC52  F02F         	call	_WriteTimer0	;wreg free
 25516                           
 25517                           ; BSR set to: 0
 25518                           ;main.c: 468: OpenTimer1( 0b11111101 & 0b11111111 & 0b11111111);
 25519  005916  0EFD               	movlw	253
 25520  005918  ECDC  F02E         	call	_OpenTimer1
 25521                           
 25522                           ; BSR set to: 0
 25523                           ;main.c: 469: WriteTimer1( 0x0000 );
 25524  00591C  0E00               	movlw	0
 25525  00591E  6B61               	clrf	(?_WriteTimer1+1)& (0+255),b
 25526  005920  6B60               	clrf	?_WriteTimer1& (0+255),b
 25527  005922  EC40  F02F         	call	_WriteTimer1	;wreg free
 25528                           
 25529                           ; BSR set to: 0
 25530                           ;main.c: 472: ECANInitialize();
 25531  005926  ECFB  F029         	call	_ECANInitialize	;wreg free
 25532                           
 25533                           ; BSR set to: 0
 25534                           ;main.c: 496: RXBnIE = 1;
 25535  00592A  82A3               	bsf	4003,1,c	;volatile
 25536                           
 25537                           ; BSR set to: 0
 25538                           ;main.c: 497: ERRIE = 1;
 25539  00592C  8AA3               	bsf	4003,5,c	;volatile
 25540                           
 25541                           ; BSR set to: 0
 25542                           ;main.c: 499: (INTCONbits.GIE = 1);
 25543  00592E  8EF2               	bsf	intcon,7,c	;volatile
 25544                           
 25545                           ; BSR set to: 0
 25546  005930  0012               	return	
 25547  005932                     __end_of_init:
 25548                           	opt stack 0
 25549                           tblptru	equ	0xFF8
 25550                           tblptrh	equ	0xFF7
 25551                           tblptrl	equ	0xFF6
 25552                           tablat	equ	0xFF5
 25553                           prodh	equ	0xFF4
 25554                           prodl	equ	0xFF3
 25555                           intcon	equ	0xFF2
 25556                           indf0	equ	0xFEF
 25557                           postinc0	equ	0xFEE
 25558                           fsr0h	equ	0xFEA
 25559                           fsr0l	equ	0xFE9
 25560                           wreg	equ	0xFE8
 25561                           indf1	equ	0xFE7
 25562                           postinc1	equ	0xFE6
 25563                           postdec1	equ	0xFE5
 25564                           fsr1h	equ	0xFE2
 25565                           fsr1l	equ	0xFE1
 25566                           indf2	equ	0xFDF
 25567                           postinc2	equ	0xFDE
 25568                           postdec2	equ	0xFDD
 25569                           plusw2	equ	0xFDB
 25570                           fsr2h	equ	0xFDA
 25571                           fsr2l	equ	0xFD9
 25572                           status	equ	0xFD8
 25573                           
 25574 ;; *************** function _ECANInitialize *****************
 25575 ;; Defined at:
 25576 ;;		line 168 in file "ECAN.c"
 25577 ;; Parameters:    Size  Location     Type
 25578 ;;		None
 25579 ;; Auto vars:     Size  Location     Type
 25580 ;;		None
 25581 ;; Return value:  Size  Location     Type
 25582 ;;		None               void
 25583 ;; Registers used:
 25584 ;;		wreg, status,2, status,0, cstack
 25585 ;; Tracked objects:
 25586 ;;		On entry : F/0
 25587 ;;		On exit  : F/0
 25588 ;;		Unchanged: 0/0
 25589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25590 ;;      Params:         0       0       0       0       0       0       0
 25591 ;;      Locals:         0       0       0       0       0       0       0
 25592 ;;      Temps:          0       0       0       0       0       0       0
 25593 ;;      Totals:         0       0       0       0       0       0       0
 25594 ;;Total ram usage:        0 bytes
 25595 ;; Hardware stack levels used:    1
 25596 ;; Hardware stack levels required when called:    4
 25597 ;; This function calls:
 25598 ;;		_ECANSetOperationMode
 25599 ;; This function is called by:
 25600 ;;		_init
 25601 ;; This function uses a non-reentrant model
 25602 ;;
 25603                           
 25604                           	psect	text72
 25605  0053F6                     __ptext72:
 25606                           	opt stack 0
 25607  0053F6                     _ECANInitialize:
 25608                           	opt stack 25
 25609                           
 25610                           ; BSR set to: 0
 25611                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 25612                           
 25613                           ; BSR set to: 0
 25614                           ;incstack = 0
 25615                           ;incstack = 0
 25616  0053F6  0E80               	movlw	128
 25617  0053F8  EC1E  F02F         	call	_ECANSetOperationMode
 25618                           
 25619                           ; BSR set to: 0
 25620                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 25621  0053FC  0E09               	movlw	9
 25622  0053FE  6E70               	movwf	3952,c	;volatile
 25623                           
 25624                           ; BSR set to: 0
 25625                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 25626  005400  0EFC               	movlw	252
 25627  005402  6E71               	movwf	3953,c	;volatile
 25628                           
 25629                           ; BSR set to: 0
 25630                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 25631                           ;ECAN.c: 181: (0 << 6) |
 25632                           ;ECAN.c: 182: (2-1);
 25633  005404  0E01               	movlw	1
 25634  005406  6E72               	movwf	3954,c	;volatile
 25635                           
 25636                           ; BSR set to: 0
 25637                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 25638  005408  0E20               	movlw	32
 25639  00540A  6E73               	movwf	3955,c	;volatile
 25640                           
 25641                           ; BSR set to: 0
 25642                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 25643  00540C  8E77               	bsf	3959,7,c	;volatile
 25644                           
 25645                           ; BSR set to: 0
 25646                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 25647  00540E  9C77               	bcf	3959,6,c	;volatile
 25648                           
 25649                           ; BSR set to: 0
 25650                           ;ECAN.c: 205: RXB0CON = 0;
 25651  005410  6A60               	clrf	3936,c	;volatile
 25652                           
 25653                           ; BSR set to: 0
 25654                           ;ECAN.c: 211: RXB1CON = 0;
 25655  005412  010F               	movlb	15	; () banked
 25656  005414  6B50               	clrf	80,b	;volatile
 25657                           
 25658                           ; BSR set to: 15
 25659                           ;ECAN.c: 221: B0CON = 0;
 25660  005416  010E               	movlb	14	; () banked
 25661  005418  6B20               	clrf	32,b	;volatile
 25662                           
 25663                           ; BSR set to: 14
 25664                           ;ECAN.c: 231: B1CON = 0;
 25665  00541A  6B30               	clrf	48,b	;volatile
 25666                           
 25667                           ; BSR set to: 14
 25668                           ;ECAN.c: 241: B2CON = 0;
 25669  00541C  6B40               	clrf	64,b	;volatile
 25670                           
 25671                           ; BSR set to: 14
 25672                           ;ECAN.c: 251: B3CON = 0;
 25673  00541E  6B50               	clrf	80,b	;volatile
 25674                           
 25675                           ; BSR set to: 14
 25676                           ;ECAN.c: 261: B4CON = 0;
 25677  005420  6B60               	clrf	96,b	;volatile
 25678                           
 25679                           ; BSR set to: 14
 25680                           ;ECAN.c: 271: B5CON = 0;
 25681  005422  6B70               	clrf	112,b	;volatile
 25682                           
 25683                           ; BSR set to: 14
 25684                           ;ECAN.c: 278: BSEL0 = 0 << 7 | 0 << 6 | 0 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 25685  005424  010D               	movlb	13	; () banked
 25686  005426  6BF8               	clrf	248,b	;volatile
 25687                           
 25688                           ; BSR set to: 13
 25689                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 25690  005428  010F               	movlb	15	; () banked
 25691  00542A  6B00               	clrf	0,b	;volatile
 25692                           
 25693                           ; BSR set to: 15
 25694  00542C  0E08               	movlw	8
 25695  00542E  6F01               	movwf	1,b	;volatile
 25696                           
 25697                           ; BSR set to: 15
 25698  005430  6B02               	clrf	2,b	;volatile
 25699                           
 25700                           ; BSR set to: 15
 25701  005432  6B03               	clrf	3,b	;volatile
 25702                           
 25703                           ; BSR set to: 15
 25704                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 25705  005434  0E01               	movlw	1
 25706  005436  010D               	movlb	13	; () banked
 25707  005438  6FD4               	movwf	212,b	;volatile
 25708                           
 25709                           ; BSR set to: 13
 25710                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 25711  00543A  6BD5               	clrf	213,b	;volatile
 25712                           
 25713                           ; BSR set to: 13
 25714                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 25715  00543C  6BE0               	clrf	224,b	;volatile
 25716                           
 25717                           ; BSR set to: 13
 25718                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 25719  00543E  0E11               	movlw	17
 25720  005440  6FE1               	movwf	225,b	;volatile
 25721                           
 25722                           ; BSR set to: 13
 25723                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 25724  005442  6FE2               	movwf	226,b	;volatile
 25725                           
 25726                           ; BSR set to: 13
 25727                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 25728  005444  6BE3               	clrf	227,b	;volatile
 25729                           
 25730                           ; BSR set to: 13
 25731                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 25732  005446  6BE4               	clrf	228,b	;volatile
 25733                           
 25734                           ; BSR set to: 13
 25735                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 25736  005448  6BE5               	clrf	229,b	;volatile
 25737                           
 25738                           ; BSR set to: 13
 25739                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 25740  00544A  6BE6               	clrf	230,b	;volatile
 25741                           
 25742                           ; BSR set to: 13
 25743                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 25744  00544C  6BE7               	clrf	231,b	;volatile
 25745                           
 25746                           ; BSR set to: 13
 25747                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 25748  00544E  0E54               	movlw	84
 25749  005450  6FF0               	movwf	240,b	;volatile
 25750                           
 25751                           ; BSR set to: 13
 25752                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 25753  005452  0E05               	movlw	5
 25754  005454  6FF1               	movwf	241,b	;volatile
 25755                           
 25756                           ; BSR set to: 13
 25757                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25758  005456  6BF2               	clrf	242,b	;volatile
 25759                           
 25760                           ; BSR set to: 13
 25761                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25762  005458  6BF2               	clrf	242,b	;volatile
 25763                           
 25764                           ; BSR set to: 13
 25765                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 25766  00545A  010F               	movlb	15	; () banked
 25767  00545C  6B18               	clrf	24,b	;volatile
 25768                           
 25769                           ; BSR set to: 15
 25770  00545E  6B19               	clrf	25,b	;volatile
 25771                           
 25772                           ; BSR set to: 15
 25773  005460  6B1A               	clrf	26,b	;volatile
 25774                           
 25775                           ; BSR set to: 15
 25776  005462  6B1B               	clrf	27,b	;volatile
 25777                           
 25778                           ; BSR set to: 15
 25779                           ;ECAN.c: 482: RXM0EXIDM = 1;
 25780  005464  8719               	bsf	25,3,b	;volatile
 25781                           
 25782                           ; BSR set to: 15
 25783                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 25784  005466  6B1C               	clrf	28,b	;volatile
 25785                           
 25786                           ; BSR set to: 15
 25787  005468  6B1D               	clrf	29,b	;volatile
 25788                           
 25789                           ; BSR set to: 15
 25790  00546A  6B1E               	clrf	30,b	;volatile
 25791                           
 25792                           ; BSR set to: 15
 25793  00546C  6B1F               	clrf	31,b	;volatile
 25794                           
 25795                           ; BSR set to: 15
 25796                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 25797  00546E  871D               	bsf	29,3,b	;volatile
 25798                           
 25799                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 25800  005470  0E20               	movlw	32
 25801  005472  EF1E  F02F         	goto	_ECANSetOperationMode
 25802  005476                     __end_of_ECANInitialize:
 25803                           	opt stack 0
 25804                           tblptru	equ	0xFF8
 25805                           tblptrh	equ	0xFF7
 25806                           tblptrl	equ	0xFF6
 25807                           tablat	equ	0xFF5
 25808                           prodh	equ	0xFF4
 25809                           prodl	equ	0xFF3
 25810                           intcon	equ	0xFF2
 25811                           indf0	equ	0xFEF
 25812                           postinc0	equ	0xFEE
 25813                           fsr0h	equ	0xFEA
 25814                           fsr0l	equ	0xFE9
 25815                           wreg	equ	0xFE8
 25816                           indf1	equ	0xFE7
 25817                           postinc1	equ	0xFE6
 25818                           postdec1	equ	0xFE5
 25819                           fsr1h	equ	0xFE2
 25820                           fsr1l	equ	0xFE1
 25821                           indf2	equ	0xFDF
 25822                           postinc2	equ	0xFDE
 25823                           postdec2	equ	0xFDD
 25824                           plusw2	equ	0xFDB
 25825                           fsr2h	equ	0xFDA
 25826                           fsr2l	equ	0xFD9
 25827                           status	equ	0xFD8
 25828                           
 25829 ;; *************** function _WriteTimer1 *****************
 25830 ;; Defined at:
 25831 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t1write.c"
 25832 ;; Parameters:    Size  Location     Type
 25833 ;;  timer1          2    0[BANK0 ] unsigned int 
 25834 ;; Auto vars:     Size  Location     Type
 25835 ;;  timer           2    2[BANK0 ] struct Timers
 25836 ;; Return value:  Size  Location     Type
 25837 ;;		None               void
 25838 ;; Registers used:
 25839 ;;		None
 25840 ;; Tracked objects:
 25841 ;;		On entry : F/0
 25842 ;;		On exit  : F/0
 25843 ;;		Unchanged: F/0
 25844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25845 ;;      Params:         0       2       0       0       0       0       0
 25846 ;;      Locals:         0       2       0       0       0       0       0
 25847 ;;      Temps:          0       0       0       0       0       0       0
 25848 ;;      Totals:         0       4       0       0       0       0       0
 25849 ;;Total ram usage:        4 bytes
 25850 ;; Hardware stack levels used:    1
 25851 ;; Hardware stack levels required when called:    3
 25852 ;; This function calls:
 25853 ;;		Nothing
 25854 ;; This function is called by:
 25855 ;;		_init
 25856 ;; This function uses a non-reentrant model
 25857 ;;
 25858                           
 25859                           	psect	text73
 25860  005E80                     __ptext73:
 25861                           	opt stack 0
 25862  005E80                     _WriteTimer1:
 25863                           	opt stack 26
 25864                           
 25865                           ; BSR set to: 0
 25866                           
 25867                           ; BSR set to: 0
 25868                           ;incstack = 0
 25869                           ;incstack = 0
 25870  005E80  C060  F062         	movff	WriteTimer1@timer1,WriteTimer1@timer
 25871  005E84  C061  F063         	movff	WriteTimer1@timer1+1,WriteTimer1@timer+1
 25872  005E88  C063  FFCF         	movff	WriteTimer1@timer+1,4047	;volatile
 25873  005E8C  C062  FFCE         	movff	WriteTimer1@timer,4046	;volatile
 25874                           
 25875                           ; BSR set to: 0
 25876  005E90  0012               	return	
 25877  005E92                     __end_of_WriteTimer1:
 25878                           	opt stack 0
 25879                           tblptru	equ	0xFF8
 25880                           tblptrh	equ	0xFF7
 25881                           tblptrl	equ	0xFF6
 25882                           tablat	equ	0xFF5
 25883                           prodh	equ	0xFF4
 25884                           prodl	equ	0xFF3
 25885                           intcon	equ	0xFF2
 25886                           indf0	equ	0xFEF
 25887                           postinc0	equ	0xFEE
 25888                           fsr0h	equ	0xFEA
 25889                           fsr0l	equ	0xFE9
 25890                           wreg	equ	0xFE8
 25891                           indf1	equ	0xFE7
 25892                           postinc1	equ	0xFE6
 25893                           postdec1	equ	0xFE5
 25894                           fsr1h	equ	0xFE2
 25895                           fsr1l	equ	0xFE1
 25896                           indf2	equ	0xFDF
 25897                           postinc2	equ	0xFDE
 25898                           postdec2	equ	0xFDD
 25899                           plusw2	equ	0xFDB
 25900                           fsr2h	equ	0xFDA
 25901                           fsr2l	equ	0xFD9
 25902                           status	equ	0xFD8
 25903                           
 25904 ;; *************** function _OpenTimer1 *****************
 25905 ;; Defined at:
 25906 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t1open.c"
 25907 ;; Parameters:    Size  Location     Type
 25908 ;;  config          1    wreg     unsigned char 
 25909 ;; Auto vars:     Size  Location     Type
 25910 ;;  config          1    0[BANK0 ] unsigned char 
 25911 ;; Return value:  Size  Location     Type
 25912 ;;		None               void
 25913 ;; Registers used:
 25914 ;;		wreg, status,2, status,0
 25915 ;; Tracked objects:
 25916 ;;		On entry : F/0
 25917 ;;		On exit  : F/0
 25918 ;;		Unchanged: 0/0
 25919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25920 ;;      Params:         0       0       0       0       0       0       0
 25921 ;;      Locals:         0       1       0       0       0       0       0
 25922 ;;      Temps:          0       0       0       0       0       0       0
 25923 ;;      Totals:         0       1       0       0       0       0       0
 25924 ;;Total ram usage:        1 bytes
 25925 ;; Hardware stack levels used:    1
 25926 ;; Hardware stack levels required when called:    3
 25927 ;; This function calls:
 25928 ;;		Nothing
 25929 ;; This function is called by:
 25930 ;;		_init
 25931 ;; This function uses a non-reentrant model
 25932 ;;
 25933                           
 25934                           	psect	text74
 25935  005DB8                     __ptext74:
 25936                           	opt stack 0
 25937  005DB8                     _OpenTimer1:
 25938                           	opt stack 26
 25939                           
 25940                           ; BSR set to: 0
 25941                           ;incstack = 0
 25942                           ;incstack = 0
 25943                           ;OpenTimer1@config stored from wreg
 25944  005DB8  CFE8 F060          	movff	wreg,OpenTimer1@config
 25945                           
 25946                           ; BSR set to: 0
 25947  005DBC  5160               	movf	OpenTimer1@config& (0+255),w,b
 25948  005DBE  0B7E               	andlw	126
 25949  005DC0  6ECD               	movwf	4045,c	;volatile
 25950                           
 25951                           ; BSR set to: 0
 25952  005DC2  AD60               	btfss	OpenTimer1@config& (0+255),6,b
 25953  005DC4  D002               	goto	l1882
 25954                           
 25955                           ; BSR set to: 0
 25956  005DC6  8ECD               	bsf	4045,7,c	;volatile
 25957  005DC8  D001               	goto	l1883
 25958  005DCA                     l1882:
 25959                           
 25960                           ; BSR set to: 0
 25961  005DCA  9ECD               	bcf	4045,7,c	;volatile
 25962  005DCC                     l1883:
 25963                           
 25964                           ; BSR set to: 0
 25965  005DCC  6ACF               	clrf	4047,c	;volatile
 25966  005DCE  6ACE               	clrf	4046,c	;volatile
 25967  005DD0  909E               	bcf	3998,0,c	;volatile
 25968  005DD2  AF60               	btfss	OpenTimer1@config& (0+255),7,b
 25969  005DD4  D002               	goto	l1884
 25970                           
 25971                           ; BSR set to: 0
 25972  005DD6  809D               	bsf	3997,0,c	;volatile
 25973  005DD8  D001               	goto	l1885
 25974  005DDA                     l1884:
 25975                           
 25976                           ; BSR set to: 0
 25977  005DDA  909D               	bcf	3997,0,c	;volatile
 25978  005DDC                     l1885:
 25979                           
 25980                           ; BSR set to: 0
 25981  005DDC  80CD               	bsf	4045,0,c	;volatile
 25982                           
 25983                           ; BSR set to: 0
 25984  005DDE  0012               	return	
 25985  005DE0                     __end_of_OpenTimer1:
 25986                           	opt stack 0
 25987                           tblptru	equ	0xFF8
 25988                           tblptrh	equ	0xFF7
 25989                           tblptrl	equ	0xFF6
 25990                           tablat	equ	0xFF5
 25991                           prodh	equ	0xFF4
 25992                           prodl	equ	0xFF3
 25993                           intcon	equ	0xFF2
 25994                           indf0	equ	0xFEF
 25995                           postinc0	equ	0xFEE
 25996                           fsr0h	equ	0xFEA
 25997                           fsr0l	equ	0xFE9
 25998                           wreg	equ	0xFE8
 25999                           indf1	equ	0xFE7
 26000                           postinc1	equ	0xFE6
 26001                           postdec1	equ	0xFE5
 26002                           fsr1h	equ	0xFE2
 26003                           fsr1l	equ	0xFE1
 26004                           indf2	equ	0xFDF
 26005                           postinc2	equ	0xFDE
 26006                           postdec2	equ	0xFDD
 26007                           plusw2	equ	0xFDB
 26008                           fsr2h	equ	0xFDA
 26009                           fsr2l	equ	0xFD9
 26010                           status	equ	0xFD8
 26011                           
 26012 ;; *************** function _OpenTimer0 *****************
 26013 ;; Defined at:
 26014 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 26015 ;; Parameters:    Size  Location     Type
 26016 ;;  config          1    wreg     unsigned char 
 26017 ;; Auto vars:     Size  Location     Type
 26018 ;;  config          1    0[BANK0 ] unsigned char 
 26019 ;; Return value:  Size  Location     Type
 26020 ;;		None               void
 26021 ;; Registers used:
 26022 ;;		wreg, status,2, status,0
 26023 ;; Tracked objects:
 26024 ;;		On entry : F/0
 26025 ;;		On exit  : F/0
 26026 ;;		Unchanged: 0/0
 26027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26028 ;;      Params:         0       0       0       0       0       0       0
 26029 ;;      Locals:         0       1       0       0       0       0       0
 26030 ;;      Temps:          0       0       0       0       0       0       0
 26031 ;;      Totals:         0       1       0       0       0       0       0
 26032 ;;Total ram usage:        1 bytes
 26033 ;; Hardware stack levels used:    1
 26034 ;; Hardware stack levels required when called:    3
 26035 ;; This function calls:
 26036 ;;		Nothing
 26037 ;; This function is called by:
 26038 ;;		_init
 26039 ;; This function uses a non-reentrant model
 26040 ;;
 26041                           
 26042                           	psect	text75
 26043  005E00                     __ptext75:
 26044                           	opt stack 0
 26045  005E00                     _OpenTimer0:
 26046                           	opt stack 26
 26047                           
 26048                           ; BSR set to: 0
 26049                           ;incstack = 0
 26050                           ;incstack = 0
 26051                           ;OpenTimer0@config stored from wreg
 26052  005E00  CFE8 F060          	movff	wreg,OpenTimer0@config
 26053                           
 26054                           ; BSR set to: 0
 26055  005E04  5160               	movf	OpenTimer0@config& (0+255),w,b
 26056  005E06  0B7F               	andlw	127
 26057  005E08  6ED5               	movwf	4053,c	;volatile
 26058                           
 26059                           ; BSR set to: 0
 26060  005E0A  6AD7               	clrf	4055,c	;volatile
 26061                           
 26062                           ; BSR set to: 0
 26063  005E0C  6AD6               	clrf	4054,c	;volatile
 26064                           
 26065                           ; BSR set to: 0
 26066  005E0E  94F2               	bcf	intcon,2,c	;volatile
 26067                           
 26068                           ; BSR set to: 0
 26069  005E10  AF60               	btfss	OpenTimer0@config& (0+255),7,b
 26070  005E12  D002               	goto	l1858
 26071                           
 26072                           ; BSR set to: 0
 26073  005E14  8AF2               	bsf	intcon,5,c	;volatile
 26074  005E16  D001               	goto	l1859
 26075  005E18                     l1858:
 26076                           
 26077                           ; BSR set to: 0
 26078  005E18  9AF2               	bcf	intcon,5,c	;volatile
 26079  005E1A                     l1859:
 26080                           
 26081                           ; BSR set to: 0
 26082  005E1A  8ED5               	bsf	4053,7,c	;volatile
 26083                           
 26084                           ; BSR set to: 0
 26085  005E1C  0012               	return	
 26086  005E1E                     __end_of_OpenTimer0:
 26087                           	opt stack 0
 26088                           tblptru	equ	0xFF8
 26089                           tblptrh	equ	0xFF7
 26090                           tblptrl	equ	0xFF6
 26091                           tablat	equ	0xFF5
 26092                           prodh	equ	0xFF4
 26093                           prodl	equ	0xFF3
 26094                           intcon	equ	0xFF2
 26095                           indf0	equ	0xFEF
 26096                           postinc0	equ	0xFEE
 26097                           fsr0h	equ	0xFEA
 26098                           fsr0l	equ	0xFE9
 26099                           wreg	equ	0xFE8
 26100                           indf1	equ	0xFE7
 26101                           postinc1	equ	0xFE6
 26102                           postdec1	equ	0xFE5
 26103                           fsr1h	equ	0xFE2
 26104                           fsr1l	equ	0xFE1
 26105                           indf2	equ	0xFDF
 26106                           postinc2	equ	0xFDE
 26107                           postdec2	equ	0xFDD
 26108                           plusw2	equ	0xFDB
 26109                           fsr2h	equ	0xFDA
 26110                           fsr2l	equ	0xFD9
 26111                           status	equ	0xFD8
 26112                           
 26113 ;; *************** function _OpenUSART *****************
 26114 ;; Defined at:
 26115 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 26116 ;; Parameters:    Size  Location     Type
 26117 ;;  config          1    wreg     unsigned char 
 26118 ;;  spbrg           2    0[BANK0 ] unsigned int 
 26119 ;; Auto vars:     Size  Location     Type
 26120 ;;  config          1    2[BANK0 ] unsigned char 
 26121 ;; Return value:  Size  Location     Type
 26122 ;;		None               void
 26123 ;; Registers used:
 26124 ;;		wreg, status,2
 26125 ;; Tracked objects:
 26126 ;;		On entry : F/0
 26127 ;;		On exit  : F/0
 26128 ;;		Unchanged: 0/0
 26129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26130 ;;      Params:         0       2       0       0       0       0       0
 26131 ;;      Locals:         0       1       0       0       0       0       0
 26132 ;;      Temps:          0       0       0       0       0       0       0
 26133 ;;      Totals:         0       3       0       0       0       0       0
 26134 ;;Total ram usage:        3 bytes
 26135 ;; Hardware stack levels used:    1
 26136 ;; Hardware stack levels required when called:    3
 26137 ;; This function calls:
 26138 ;;		Nothing
 26139 ;; This function is called by:
 26140 ;;		_init
 26141 ;; This function uses a non-reentrant model
 26142 ;;
 26143                           
 26144                           	psect	text76
 26145  0057CE                     __ptext76:
 26146                           	opt stack 0
 26147  0057CE                     _OpenUSART:
 26148                           	opt stack 26
 26149                           
 26150                           ; BSR set to: 0
 26151                           ;incstack = 0
 26152                           ;incstack = 0
 26153                           ;OpenUSART@config stored from wreg
 26154  0057CE  CFE8 F062          	movff	wreg,OpenUSART@config
 26155                           
 26156                           ; BSR set to: 0
 26157  0057D2  6AAC               	clrf	4012,c	;volatile
 26158  0057D4  6AAB               	clrf	4011,c	;volatile
 26159                           
 26160                           ; BSR set to: 0
 26161  0057D6  B162               	btfsc	OpenUSART@config& (0+255),0,b
 26162                           
 26163                           ; BSR set to: 0
 26164  0057D8  88AC               	bsf	4012,4,c	;volatile
 26165                           
 26166                           ; BSR set to: 0
 26167  0057DA  A362               	btfss	OpenUSART@config& (0+255),1,b
 26168  0057DC  D002               	goto	l15152
 26169                           
 26170                           ; BSR set to: 0
 26171  0057DE  8CAC               	bsf	4012,6,c	;volatile
 26172  0057E0  8CAB               	bsf	4011,6,c	;volatile
 26173  0057E2                     l15152:
 26174                           
 26175                           ; BSR set to: 0
 26176  0057E2  B562               	btfsc	OpenUSART@config& (0+255),2,b
 26177                           
 26178                           ; BSR set to: 0
 26179  0057E4  8EAC               	bsf	4012,7,c	;volatile
 26180                           
 26181                           ; BSR set to: 0
 26182  0057E6  A762               	btfss	OpenUSART@config& (0+255),3,b
 26183  0057E8  D002               	goto	l1917
 26184                           
 26185                           ; BSR set to: 0
 26186  0057EA  88AB               	bsf	4011,4,c	;volatile
 26187  0057EC  D001               	goto	l15160
 26188  0057EE                     l1917:
 26189                           
 26190                           ; BSR set to: 0
 26191  0057EE  8AAB               	bsf	4011,5,c	;volatile
 26192  0057F0                     l15160:
 26193                           
 26194                           ; BSR set to: 0
 26195  0057F0  B962               	btfsc	OpenUSART@config& (0+255),4,b
 26196                           
 26197                           ; BSR set to: 0
 26198  0057F2  84AC               	bsf	4012,2,c	;volatile
 26199                           
 26200                           ; BSR set to: 0
 26201  0057F4  989E               	bcf	3998,4,c	;volatile
 26202                           
 26203                           ; BSR set to: 0
 26204  0057F6  BB62               	btfsc	OpenUSART@config& (0+255),5,b
 26205                           
 26206                           ; BSR set to: 0
 26207  0057F8  86AB               	bsf	4011,3,c	;volatile
 26208                           
 26209                           ; BSR set to: 0
 26210  0057FA  AD62               	btfss	OpenUSART@config& (0+255),6,b
 26211  0057FC  D002               	goto	l1921
 26212                           
 26213                           ; BSR set to: 0
 26214  0057FE  8A9D               	bsf	3997,5,c	;volatile
 26215  005800  D001               	goto	l1922
 26216  005802                     l1921:
 26217                           
 26218                           ; BSR set to: 0
 26219  005802  9A9D               	bcf	3997,5,c	;volatile
 26220  005804                     l1922:
 26221                           
 26222                           ; BSR set to: 0
 26223  005804  9A9E               	bcf	3998,5,c	;volatile
 26224                           
 26225                           ; BSR set to: 0
 26226  005806  AF62               	btfss	OpenUSART@config& (0+255),7,b
 26227  005808  D002               	goto	l1923
 26228                           
 26229                           ; BSR set to: 0
 26230  00580A  889D               	bsf	3997,4,c	;volatile
 26231  00580C  D001               	goto	l1924
 26232  00580E                     l1923:
 26233                           
 26234                           ; BSR set to: 0
 26235  00580E  989D               	bcf	3997,4,c	;volatile
 26236  005810                     l1924:
 26237                           
 26238                           ; BSR set to: 0
 26239  005810  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 26240                           
 26241                           ; BSR set to: 0
 26242  005814  5161               	movf	(OpenUSART@spbrg+1)& (0+255),w,b
 26243  005816  6EB0               	movwf	4016,c	;volatile
 26244                           
 26245                           ; BSR set to: 0
 26246  005818  8AAC               	bsf	4012,5,c	;volatile
 26247                           
 26248                           ; BSR set to: 0
 26249  00581A  8EAB               	bsf	4011,7,c	;volatile
 26250                           
 26251                           ; BSR set to: 0
 26252  00581C  9C94               	bcf	3988,6,c	;volatile
 26253                           
 26254                           ; BSR set to: 0
 26255  00581E  8E94               	bsf	3988,7,c	;volatile
 26256                           
 26257                           ; BSR set to: 0
 26258  005820  B8AC               	btfsc	4012,4,c	;volatile
 26259                           
 26260                           ; BSR set to: 0
 26261  005822  BEAC               	btfsc	4012,7,c	;volatile
 26262  005824  D001               	goto	l1926
 26263                           
 26264                           ; BSR set to: 0
 26265  005826  8C94               	bsf	3988,6,c	;volatile
 26266  005828                     l1926:
 26267                           
 26268                           ; BSR set to: 0
 26269  005828  0012               	return	
 26270  00582A                     __end_of_OpenUSART:
 26271                           	opt stack 0
 26272                           tblptru	equ	0xFF8
 26273                           tblptrh	equ	0xFF7
 26274                           tblptrl	equ	0xFF6
 26275                           tablat	equ	0xFF5
 26276                           prodh	equ	0xFF4
 26277                           prodl	equ	0xFF3
 26278                           intcon	equ	0xFF2
 26279                           indf0	equ	0xFEF
 26280                           postinc0	equ	0xFEE
 26281                           fsr0h	equ	0xFEA
 26282                           fsr0l	equ	0xFE9
 26283                           wreg	equ	0xFE8
 26284                           indf1	equ	0xFE7
 26285                           postinc1	equ	0xFE6
 26286                           postdec1	equ	0xFE5
 26287                           fsr1h	equ	0xFE2
 26288                           fsr1l	equ	0xFE1
 26289                           indf2	equ	0xFDF
 26290                           postinc2	equ	0xFDE
 26291                           postdec2	equ	0xFDD
 26292                           plusw2	equ	0xFDB
 26293                           fsr2h	equ	0xFDA
 26294                           fsr2l	equ	0xFD9
 26295                           status	equ	0xFD8
 26296                           
 26297 ;; *************** function _init_app_ram *****************
 26298 ;; Defined at:
 26299 ;;		line 508 in file "main.c"
 26300 ;; Parameters:    Size  Location     Type
 26301 ;;		None
 26302 ;; Auto vars:     Size  Location     Type
 26303 ;;  i               1   25[BANK0 ] unsigned char 
 26304 ;; Return value:  Size  Location     Type
 26305 ;;		None               void
 26306 ;; Registers used:
 26307 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26308 ;; Tracked objects:
 26309 ;;		On entry : 0/0
 26310 ;;		On exit  : F/0
 26311 ;;		Unchanged: 0/0
 26312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26313 ;;      Params:         0       0       0       0       0       0       0
 26314 ;;      Locals:         0       1       0       0       0       0       0
 26315 ;;      Temps:          0       8       0       0       0       0       0
 26316 ;;      Totals:         0       9       0       0       0       0       0
 26317 ;;Total ram usage:        9 bytes
 26318 ;; Hardware stack levels used:    1
 26319 ;; Hardware stack levels required when called:    4
 26320 ;; This function calls:
 26321 ;;		_Read_b_eep
 26322 ;;		_ECANSetOperationMode
 26323 ;;		_setFilter
 26324 ;;		__CANIDToRegs
 26325 ;; This function is called by:
 26326 ;;		_init
 26327 ;;		_vscp_restoreDefaults
 26328 ;; This function uses a non-reentrant model
 26329 ;;
 26330                           
 26331                           	psect	text77
 26332  003056                     __ptext77:
 26333                           	opt stack 0
 26334  003056                     _init_app_ram:
 26335                           	opt stack 24
 26336                           
 26337                           ;main.c: 510: can_receiveOverruns = 0;
 26338                           
 26339                           ; BSR set to: 0
 26340                           ;incstack = 0
 26341                           ;incstack = 0
 26342  003056  0101               	movlb	1	; () banked
 26343  003058  6B00               	clrf	_can_receiveOverruns& (0+255),b
 26344  00305A  6B01               	clrf	(_can_receiveOverruns+1)& (0+255),b
 26345  00305C  6B02               	clrf	(_can_receiveOverruns+2)& (0+255),b
 26346  00305E  6B03               	clrf	(_can_receiveOverruns+3)& (0+255),b
 26347                           
 26348                           ;main.c: 511: can_transmitOverruns = 0;
 26349  003060  6B04               	clrf	_can_transmitOverruns& (0+255),b
 26350  003062  6B05               	clrf	(_can_transmitOverruns+1)& (0+255),b
 26351  003064  6B06               	clrf	(_can_transmitOverruns+2)& (0+255),b
 26352  003066  6B07               	clrf	(_can_transmitOverruns+3)& (0+255),b
 26353                           
 26354                           ;main.c: 512: uart_receiveOverruns = 0;
 26355  003068  6B20               	clrf	_uart_receiveOverruns& (0+255),b
 26356  00306A  6B21               	clrf	(_uart_receiveOverruns+1)& (0+255),b
 26357  00306C  6B22               	clrf	(_uart_receiveOverruns+2)& (0+255),b
 26358  00306E  6B23               	clrf	(_uart_receiveOverruns+3)& (0+255),b
 26359                           
 26360                           ;main.c: 513: uart_transmitOverruns = 0;
 26361  003070  6B24               	clrf	_uart_transmitOverruns& (0+255),b
 26362  003072  6B25               	clrf	(_uart_transmitOverruns+1)& (0+255),b
 26363  003074  6B26               	clrf	(_uart_transmitOverruns+2)& (0+255),b
 26364  003076  6B27               	clrf	(_uart_transmitOverruns+3)& (0+255),b
 26365                           
 26366                           ;main.c: 514: timer = 0;
 26367  003078  6B1C               	clrf	_timer& (0+255),b	;volatile
 26368  00307A  6B1D               	clrf	(_timer+1)& (0+255),b	;volatile
 26369  00307C  6B1E               	clrf	(_timer+2)& (0+255),b	;volatile
 26370  00307E  6B1F               	clrf	(_timer+3)& (0+255),b	;volatile
 26371                           
 26372                           ; BSR set to: 1
 26373                           ;main.c: 516: bHex = Read_b_eep(0x06);
 26374  003080  0100               	movlb	0	; () banked
 26375  003082  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26376  003084  0E06               	movlw	6
 26377  003086  6F60               	movwf	?_Read_b_eep& (0+255),b
 26378  003088  EC49  F02F         	call	_Read_b_eep	;wreg free
 26379  00308C  6E2B               	movwf	_bHex,c
 26380                           
 26381                           ;main.c: 517: mode = Read_b_eep(0x03);
 26382  00308E  0100               	movlb	0	; () banked
 26383  003090  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26384  003092  0E03               	movlw	3
 26385  003094  6F60               	movwf	?_Read_b_eep& (0+255),b
 26386  003096  EC49  F02F         	call	_Read_b_eep	;wreg free
 26387  00309A  0101               	movlb	1	; () banked
 26388  00309C  6F28               	movwf	_mode& (0+255),b
 26389                           
 26390                           ;main.c: 518: bLocalEcho = Read_b_eep(0x65);
 26391  00309E  0100               	movlb	0	; () banked
 26392  0030A0  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26393  0030A2  0E65               	movlw	101
 26394  0030A4  6F60               	movwf	?_Read_b_eep& (0+255),b
 26395  0030A6  EC49  F02F         	call	_Read_b_eep	;wreg free
 26396  0030AA  6E2D               	movwf	_bLocalEcho,c
 26397                           
 26398                           ;main.c: 520: rwtimeout = Read_b_eep(0x09);
 26399  0030AC  0100               	movlb	0	; () banked
 26400  0030AE  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26401  0030B0  0E09               	movlw	9
 26402  0030B2  6F60               	movwf	?_Read_b_eep& (0+255),b
 26403  0030B4  EC49  F02F         	call	_Read_b_eep	;wreg free
 26404  0030B8  6E34               	movwf	_rwtimeout,c
 26405                           
 26406                           ;main.c: 525: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 26407  0030BA  0E80               	movlw	128
 26408  0030BC  EC1E  F02F         	call	_ECANSetOperationMode
 26409                           
 26410                           ; BSR set to: 0
 26411                           ;main.c: 527: for (uint8_t i=0; i<15; i++ ) {
 26412  0030C0  6B79               	clrf	init_app_ram@i& (0+255),b
 26413  0030C2                     l15132:
 26414                           
 26415                           ; BSR set to: 0
 26416                           ;main.c: 528: setFilter( i,
 26417                           ;main.c: 529: ( Read_b_eep(0x20 + i*4) << 24 ) +
 26418                           ;main.c: 530: ( Read_b_eep(0x20 + 1 + i*4) << 16 ) +
 26419                           ;main.c: 531: ( Read_b_eep(0x20 + 2 + i*4) << 8 ) +
 26420                           ;main.c: 532: ( Read_b_eep(0x20 + 3 + i*4) ) );
 26421  0030C2  5179               	movf	init_app_ram@i& (0+255),w,b
 26422  0030C4  6F71               	movwf	??_init_app_ram& (0+255),b
 26423  0030C6  6B72               	clrf	(??_init_app_ram+1)& (0+255),b
 26424  0030C8  90D8               	bcf	status,0,c
 26425  0030CA  3771               	rlcf	??_init_app_ram& (0+255),f,b
 26426  0030CC  3772               	rlcf	(??_init_app_ram+1)& (0+255),f,b
 26427  0030CE  90D8               	bcf	status,0,c
 26428  0030D0  3771               	rlcf	??_init_app_ram& (0+255),f,b
 26429  0030D2  3772               	rlcf	(??_init_app_ram+1)& (0+255),f,b
 26430  0030D4  0E22               	movlw	34
 26431  0030D6  2571               	addwf	??_init_app_ram& (0+255),w,b
 26432  0030D8  6F60               	movwf	?_Read_b_eep& (0+255),b
 26433  0030DA  0E00               	movlw	0
 26434  0030DC  2172               	addwfc	(??_init_app_ram+1)& (0+255),w,b
 26435  0030DE  6F61               	movwf	(?_Read_b_eep+1)& (0+255),b
 26436  0030E0  EC49  F02F         	call	_Read_b_eep	;wreg free
 26437  0030E4  0100               	movlb	0	; () banked
 26438  0030E6  6F74               	movwf	(??_init_app_ram+3)& (0+255),b
 26439  0030E8  6B73               	clrf	(??_init_app_ram+2)& (0+255),b
 26440  0030EA  5179               	movf	init_app_ram@i& (0+255),w,b
 26441  0030EC  0D04               	mullw	4
 26442  0030EE  0E20               	movlw	32
 26443  0030F0  24F3               	addwf	prodl,w,c
 26444  0030F2  6F60               	movwf	?_Read_b_eep& (0+255),b
 26445  0030F4  0E00               	movlw	0
 26446  0030F6  20F4               	addwfc	prodh,w,c
 26447  0030F8  6F61               	movwf	(?_Read_b_eep+1)& (0+255),b
 26448  0030FA  EC49  F02F         	call	_Read_b_eep	;wreg free
 26449  0030FE  0100               	movlb	0	; () banked
 26450  003100  6F75               	movwf	(??_init_app_ram+4)& (0+255),b
 26451  003102  6B76               	clrf	(??_init_app_ram+5)& (0+255),b
 26452  003104  5179               	movf	init_app_ram@i& (0+255),w,b
 26453  003106  0D04               	mullw	4
 26454  003108  0E21               	movlw	33
 26455  00310A  24F3               	addwf	prodl,w,c
 26456  00310C  6F60               	movwf	?_Read_b_eep& (0+255),b
 26457  00310E  0E00               	movlw	0
 26458  003110  20F4               	addwfc	prodh,w,c
 26459  003112  6F61               	movwf	(?_Read_b_eep+1)& (0+255),b
 26460  003114  EC49  F02F         	call	_Read_b_eep	;wreg free
 26461  003118  0100               	movlb	0	; () banked
 26462  00311A  2775               	addwf	(??_init_app_ram+4)& (0+255),f,b
 26463  00311C  0E00               	movlw	0
 26464  00311E  2376               	addwfc	(??_init_app_ram+5)& (0+255),f,b
 26465  003120  5173               	movf	(??_init_app_ram+2)& (0+255),w,b
 26466  003122  2575               	addwf	(??_init_app_ram+4)& (0+255),w,b
 26467  003124  6F77               	movwf	(??_init_app_ram+6)& (0+255),b
 26468  003126  5174               	movf	(??_init_app_ram+3)& (0+255),w,b
 26469  003128  2176               	addwfc	(??_init_app_ram+5)& (0+255),w,b
 26470  00312A  6F78               	movwf	(??_init_app_ram+7)& (0+255),b
 26471  00312C  5179               	movf	init_app_ram@i& (0+255),w,b
 26472  00312E  0D04               	mullw	4
 26473  003130  0E23               	movlw	35
 26474  003132  24F3               	addwf	prodl,w,c
 26475  003134  6F60               	movwf	?_Read_b_eep& (0+255),b
 26476  003136  0E00               	movlw	0
 26477  003138  20F4               	addwfc	prodh,w,c
 26478  00313A  6F61               	movwf	(?_Read_b_eep+1)& (0+255),b
 26479  00313C  EC49  F02F         	call	_Read_b_eep	;wreg free
 26480  003140  0100               	movlb	0	; () banked
 26481  003142  2777               	addwf	(??_init_app_ram+6)& (0+255),f,b
 26482  003144  0E00               	movlw	0
 26483  003146  2378               	addwfc	(??_init_app_ram+7)& (0+255),f,b
 26484  003148  C077  F062         	movff	??_init_app_ram+6,?_setFilter
 26485  00314C  C078  F063         	movff	??_init_app_ram+7,?_setFilter+1
 26486  003150  BF63               	btfsc	(?_setFilter+1)& (0+255),7,b
 26487  003152  0EFF               	movlw	-1
 26488  003154  6F64               	movwf	(?_setFilter+2)& (0+255),b
 26489  003156  6F65               	movwf	(?_setFilter+3)& (0+255),b
 26490  003158  5179               	movf	init_app_ram@i& (0+255),w,b
 26491  00315A  EC3C  F017         	call	_setFilter
 26492                           
 26493                           ; BSR set to: 0
 26494  00315E  2B79               	incf	init_app_ram@i& (0+255),f,b
 26495                           
 26496                           ; BSR set to: 0
 26497  003160  0E0E               	movlw	14
 26498  003162  6579               	cpfsgt	init_app_ram@i& (0+255),b
 26499  003164  D7AE               	goto	l15132
 26500                           
 26501                           ; BSR set to: 0
 26502                           ;main.c: 533: }
 26503                           ;main.c: 535: _CANIDToRegs((BYTE*)&RXM0SIDH, ( Read_b_eep(0x60) << 24 ) + ( Read_b_eep(0
      +                          x60 + 1) << 16 ) + ( Read_b_eep(0x60 + 2) << 8 ) + ( Read_b_eep(0x60 + 3) ), 1);
 26504  003166  0E0F               	movlw	15	;volatile
 26505  003168  0100               	movlb	0	; () banked
 26506  00316A  6F63               	movwf	(?__CANIDToRegs+1)& (0+255),b
 26507  00316C  0E18               	movlw	24	;volatile
 26508  00316E  6F62               	movwf	?__CANIDToRegs& (0+255),b
 26509  003170  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26510  003172  0E62               	movlw	98
 26511  003174  6F60               	movwf	?_Read_b_eep& (0+255),b
 26512  003176  EC49  F02F         	call	_Read_b_eep	;wreg free
 26513  00317A  0100               	movlb	0	; () banked
 26514  00317C  6F72               	movwf	(??_init_app_ram+1)& (0+255),b
 26515  00317E  6B71               	clrf	??_init_app_ram& (0+255),b
 26516  003180  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26517  003182  0E60               	movlw	96
 26518  003184  6F60               	movwf	?_Read_b_eep& (0+255),b
 26519  003186  EC49  F02F         	call	_Read_b_eep	;wreg free
 26520  00318A  0100               	movlb	0	; () banked
 26521  00318C  6F73               	movwf	(??_init_app_ram+2)& (0+255),b
 26522  00318E  6B74               	clrf	(??_init_app_ram+3)& (0+255),b
 26523  003190  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26524  003192  0E61               	movlw	97
 26525  003194  6F60               	movwf	?_Read_b_eep& (0+255),b
 26526  003196  EC49  F02F         	call	_Read_b_eep	;wreg free
 26527  00319A  D83B               	call	PL56	;call to abstracted procedure
 26528  00319C  0E63               	movlw	99
 26529  00319E  6F60               	movwf	?_Read_b_eep& (0+255),b
 26530  0031A0  EC49  F02F         	call	_Read_b_eep	;wreg free
 26531  0031A4  D827               	call	PL32	;call to abstracted procedure
 26532  0031A6  ECB9  F01F         	call	__CANIDToRegs	;wreg free
 26533                           
 26534                           ;main.c: 541: _CANIDToRegs((BYTE*)&RXM1SIDH, ( Read_b_eep(0x64) << 24 ) + ( Read_b_eep(0
      +                          x64 + 1) << 16 ) + ( Read_b_eep(0x64 + 2) << 8 ) + ( Read_b_eep(0x64 + 3) ), 1);
 26535  0031AA  0E0F               	movlw	15	;volatile
 26536  0031AC  0100               	movlb	0	; () banked
 26537  0031AE  6F63               	movwf	(?__CANIDToRegs+1)& (0+255),b
 26538  0031B0  0E1C               	movlw	28	;volatile
 26539  0031B2  6F62               	movwf	?__CANIDToRegs& (0+255),b
 26540  0031B4  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26541  0031B6  0E66               	movlw	102
 26542  0031B8  6F60               	movwf	?_Read_b_eep& (0+255),b
 26543  0031BA  EC49  F02F         	call	_Read_b_eep	;wreg free
 26544  0031BE  0100               	movlb	0	; () banked
 26545  0031C0  6F72               	movwf	(??_init_app_ram+1)& (0+255),b
 26546  0031C2  6B71               	clrf	??_init_app_ram& (0+255),b
 26547  0031C4  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26548  0031C6  0E64               	movlw	100
 26549  0031C8  6F60               	movwf	?_Read_b_eep& (0+255),b
 26550  0031CA  EC49  F02F         	call	_Read_b_eep	;wreg free
 26551  0031CE  0100               	movlb	0	; () banked
 26552  0031D0  6F73               	movwf	(??_init_app_ram+2)& (0+255),b
 26553  0031D2  6B74               	clrf	(??_init_app_ram+3)& (0+255),b
 26554  0031D4  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26555  0031D6  0E65               	movlw	101
 26556  0031D8  6F60               	movwf	?_Read_b_eep& (0+255),b
 26557  0031DA  EC49  F02F         	call	_Read_b_eep	;wreg free
 26558  0031DE  D819               	call	PL56	;call to abstracted procedure
 26559  0031E0  0E67               	movlw	103
 26560  0031E2  6F60               	movwf	?_Read_b_eep& (0+255),b
 26561  0031E4  EC49  F02F         	call	_Read_b_eep	;wreg free
 26562  0031E8  D805               	call	PL32	;call to abstracted procedure
 26563  0031EA  ECB9  F01F         	call	__CANIDToRegs	;wreg free
 26564                           
 26565                           ; BSR set to: 0
 26566                           ;main.c: 547: ECANSetOperationMode(0x20);
 26567  0031EE  0E20               	movlw	32
 26568  0031F0  EF1E  F02F         	goto	_ECANSetOperationMode
 26569  0031F4                     __end_of_init_app_ram:
 26570                           	opt stack 0
 26571  0031F4                     PL32:
 26572                           	opt stack 24
 26573  0031F4  0100               	movlb	0	; () banked
 26574  0031F6  2775               	addwf	(??_init_app_ram+4)& (0+255),f,b
 26575  0031F8  0E00               	movlw	0
 26576  0031FA  2376               	addwfc	(??_init_app_ram+5)& (0+255),f,b
 26577  0031FC  C075  F064         	movff	??_init_app_ram+4,?__CANIDToRegs+2
 26578  003200  C076  F065         	movff	??_init_app_ram+5,?__CANIDToRegs+3
 26579  003204  BF65               	btfsc	(?__CANIDToRegs+3)& (0+255),7,b
 26580  003206  0EFF               	movlw	-1
 26581  003208  6F66               	movwf	(?__CANIDToRegs+4)& (0+255),b
 26582  00320A  6F67               	movwf	(?__CANIDToRegs+5)& (0+255),b
 26583  00320C  0E01               	movlw	1
 26584  00320E  6F68               	movwf	(?__CANIDToRegs+6)& (0+255),b
 26585  003210  0C01               	retlw	1
 26586  003212                     __end_ofPL32:
 26587                           	opt stack 0
 26588  003212                     PL56:
 26589                           	opt stack 24
 26590  003212  0100               	movlb	0	; () banked
 26591  003214  2773               	addwf	(??_init_app_ram+2)& (0+255),f,b
 26592  003216  0E00               	movlw	0
 26593  003218  2374               	addwfc	(??_init_app_ram+3)& (0+255),f,b
 26594  00321A  5171               	movf	??_init_app_ram& (0+255),w,b
 26595  00321C  2573               	addwf	(??_init_app_ram+2)& (0+255),w,b
 26596  00321E  6F75               	movwf	(??_init_app_ram+4)& (0+255),b
 26597  003220  5172               	movf	(??_init_app_ram+1)& (0+255),w,b
 26598  003222  2174               	addwfc	(??_init_app_ram+3)& (0+255),w,b
 26599  003224  6F76               	movwf	(??_init_app_ram+5)& (0+255),b
 26600  003226  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26601  003228  0012               	return	
 26602  00322A                     __end_ofPL56:
 26603                           	opt stack 0
 26604                           tblptru	equ	0xFF8
 26605                           tblptrh	equ	0xFF7
 26606                           tblptrl	equ	0xFF6
 26607                           tablat	equ	0xFF5
 26608                           prodh	equ	0xFF4
 26609                           prodl	equ	0xFF3
 26610                           intcon	equ	0xFF2
 26611                           indf0	equ	0xFEF
 26612                           postinc0	equ	0xFEE
 26613                           fsr0h	equ	0xFEA
 26614                           fsr0l	equ	0xFE9
 26615                           wreg	equ	0xFE8
 26616                           indf1	equ	0xFE7
 26617                           postinc1	equ	0xFE6
 26618                           postdec1	equ	0xFE5
 26619                           fsr1h	equ	0xFE2
 26620                           fsr1l	equ	0xFE1
 26621                           indf2	equ	0xFDF
 26622                           postinc2	equ	0xFDE
 26623                           postdec2	equ	0xFDD
 26624                           plusw2	equ	0xFDB
 26625                           fsr2h	equ	0xFDA
 26626                           fsr2l	equ	0xFD9
 26627                           status	equ	0xFD8
 26628                           
 26629 ;; *************** function __CANIDToRegs *****************
 26630 ;; Defined at:
 26631 ;;		line 1101 in file "ECAN.c"
 26632 ;; Parameters:    Size  Location     Type
 26633 ;;  ptr             2    2[BANK0 ] PTR unsigned char 
 26634 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 26635 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 26636 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 26637 ;;  val             4    4[BANK0 ] unsigned long 
 26638 ;;  type            1    8[BANK0 ] unsigned char 
 26639 ;; Auto vars:     Size  Location     Type
 26640 ;;  Value           1   11[BANK0 ] PTR struct _CAN_MESSAGE_
 26641 ;;		 -> _CANIDToRegs@val(4), 
 26642 ;; Return value:  Size  Location     Type
 26643 ;;		None               void
 26644 ;; Registers used:
 26645 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 26646 ;; Tracked objects:
 26647 ;;		On entry : F/0
 26648 ;;		On exit  : F/0
 26649 ;;		Unchanged: 0/0
 26650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26651 ;;      Params:         0       7       0       0       0       0       0
 26652 ;;      Locals:         0       1       0       0       0       0       0
 26653 ;;      Temps:          0       2       0       0       0       0       0
 26654 ;;      Totals:         0      10       0       0       0       0       0
 26655 ;;Total ram usage:       10 bytes
 26656 ;; Hardware stack levels used:    1
 26657 ;; Hardware stack levels required when called:    3
 26658 ;; This function calls:
 26659 ;;		Nothing
 26660 ;; This function is called by:
 26661 ;;		_init_app_ram
 26662 ;;		_doModeVerbose
 26663 ;;		_ECANSendMessage
 26664 ;; This function uses a non-reentrant model
 26665 ;;
 26666                           
 26667                           	psect	text78
 26668  003F72                     __ptext78:
 26669                           	opt stack 0
 26670  003F72                     __CANIDToRegs:
 26671                           	opt stack 24
 26672                           
 26673                           ; BSR set to: 0
 26674                           ;ECAN.c: 1102: CAN_MESSAGE_ID *Value;
 26675                           ;ECAN.c: 1104: Value = (CAN_MESSAGE_ID*)&val;
 26676                           
 26677                           ; BSR set to: 0
 26678                           ;incstack = 0
 26679                           ;incstack = 0
 26680  003F72  0E64               	movlw	low __CANIDToRegs@val
 26681  003F74  6F6B               	movwf	__CANIDToRegs@Value& (0+255),b
 26682                           
 26683                           ; BSR set to: 0
 26684                           ;ECAN.c: 1106: if ( type == 0 )
 26685  003F76  6768               	tstfsz	__CANIDToRegs@type& (0+255),b
 26686  003F78  D022               	goto	l15310
 26687                           
 26688                           ; BSR set to: 0
 26689                           ;ECAN.c: 1107: {
 26690                           ;ECAN.c: 1109: *ptr = Value->BYTES.BYTE_1 >> 3;
 26691  003F7A  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 26692  003F7C  6ED9               	movwf	fsr2l,c
 26693  003F7E  6ADA               	clrf	fsr2h,c
 26694  003F80  50DF               	movf	indf2,w,c
 26695  003F82  6F69               	movwf	??__CANIDToRegs& (0+255),b
 26696  003F84  90D8               	bcf	status,0,c
 26697  003F86  3369               	rrcf	??__CANIDToRegs& (0+255),f,b
 26698  003F88  90D8               	bcf	status,0,c
 26699  003F8A  3369               	rrcf	??__CANIDToRegs& (0+255),f,b
 26700  003F8C  90D8               	bcf	status,0,c
 26701  003F8E  3169               	rrcf	??__CANIDToRegs& (0+255),w,b
 26702                           
 26703                           ;ECAN.c: 1110: *ptr |= (Value->BYTES.BYTE_2 << 5);
 26704  003F90  D862               	call	PL54	;call to abstracted procedure
 26705  003F92  2AD9               	incf	fsr2l,f,c
 26706  003F94  6ADA               	clrf	fsr2h,c
 26707  003F96  D872               	call	PL108	;call to abstracted procedure
 26708  003F98                     u20505:
 26709  003F98  90D8               	bcf	status,0,c
 26710  003F9A  3769               	rlcf	??__CANIDToRegs& (0+255),f,b
 26711  003F9C  2F6A               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 26712  003F9E  D7FC               	goto	u20505
 26713  003FA0  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26714                           
 26715                           ; BSR set to: 0
 26716                           ;ECAN.c: 1111: ptr++;
 26717                           
 26718                           ; BSR set to: 0
 26719                           ;ECAN.c: 1112: *ptr = Value->BYTES.BYTE_1 << 5;
 26720  003FA4  D846               	call	PL28	;call to abstracted procedure
 26721  003FA6  D86A               	call	PL108	;call to abstracted procedure
 26722  003FA8                     u20515:
 26723  003FA8  90D8               	bcf	status,0,c
 26724  003FAA  3769               	rlcf	??__CANIDToRegs& (0+255),f,b
 26725  003FAC  2F6A               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 26726  003FAE  D7FC               	goto	u20515
 26727  003FB0  5169               	movf	??__CANIDToRegs& (0+255),w,b
 26728  003FB2  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26729  003FB6  C063  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 26730  003FBA  6EDF               	movwf	indf2,c
 26731                           
 26732                           ;ECAN.c: 1113: }
 26733  003FBC  D039               	goto	l1565
 26734  003FBE                     l15310:
 26735                           
 26736                           ; BSR set to: 0
 26737                           ;ECAN.c: 1114: else
 26738                           ;ECAN.c: 1115: {
 26739                           ;ECAN.c: 1117: *ptr = Value->BYTES.BYTE_3 >> 5;
 26740  003FBE  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 26741  003FC0  D842               	call	PL46	;call to abstracted procedure
 26742  003FC2  0E05               	movlw	5
 26743  003FC4  6F6A               	movwf	(??__CANIDToRegs+1)& (0+255),b
 26744  003FC6                     u20525:
 26745  003FC6  90D8               	bcf	status,0,c
 26746  003FC8  3369               	rrcf	??__CANIDToRegs& (0+255),f,b
 26747  003FCA  2F6A               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 26748  003FCC  D7FC               	goto	u20525
 26749  003FCE  5169               	movf	??__CANIDToRegs& (0+255),w,b
 26750                           
 26751                           ;ECAN.c: 1118: *ptr |= Value->BYTES.BYTE_4 << 3;
 26752  003FD0  D842               	call	PL54	;call to abstracted procedure
 26753  003FD2  0E03               	movlw	3
 26754  003FD4  D849               	call	PL66	;call to abstracted procedure
 26755  003FD6  3769               	rlcf	??__CANIDToRegs& (0+255),f,b
 26756  003FD8  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26757                           
 26758                           ; BSR set to: 0
 26759                           ;ECAN.c: 1119: ptr++;
 26760                           
 26761                           ; BSR set to: 0
 26762                           ;ECAN.c: 1120: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 26763  003FDC  D82A               	call	PL28	;call to abstracted procedure
 26764  003FDE  0E02               	movlw	2
 26765  003FE0  D843               	call	PL66	;call to abstracted procedure
 26766  003FE2  3569               	rlcf	??__CANIDToRegs& (0+255),w,b
 26767  003FE4  0BE0               	andlw	224
 26768  003FE6  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26769  003FEA  C063  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 26770  003FEE  6EDF               	movwf	indf2,c
 26771                           
 26772                           ; BSR set to: 0
 26773                           ;ECAN.c: 1122: *ptr |= 0b00001000;
 26774  003FF0  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26775  003FF4  C063  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 26776  003FF8  0E00               	movlw	0
 26777  003FFA  86DB               	bsf	plusw2,3,c
 26778                           
 26779                           ; BSR set to: 0
 26780                           ;ECAN.c: 1123: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 26781  003FFC  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 26782  003FFE  D823               	call	PL46	;call to abstracted procedure
 26783  004000  0E03               	movlw	3
 26784  004002  1769               	andwf	??__CANIDToRegs& (0+255),f,b
 26785  004004  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26786                           
 26787                           ;ECAN.c: 1124: ptr++;
 26788                           
 26789                           ; BSR set to: 0
 26790                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_2;
 26791  004008  D814               	call	PL28	;call to abstracted procedure
 26792  00400A  2AD9               	incf	fsr2l,f,c
 26793  00400C  6ADA               	clrf	fsr2h,c
 26794  00400E  C062  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 26795  004012  C063  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 26796  004016  CFDF FFE7          	movff	indf2,indf1
 26797                           
 26798                           ; BSR set to: 0
 26799                           ;ECAN.c: 1126: ptr++;
 26800  00401A  4B62               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 26801  00401C  2B63               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 26802                           
 26803                           ; BSR set to: 0
 26804                           ;ECAN.c: 1127: *ptr = Value->BYTES.BYTE_1;
 26805  00401E  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 26806  004020  6ED9               	movwf	fsr2l,c
 26807  004022  6ADA               	clrf	fsr2h,c
 26808  004024  C062  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 26809  004028  C063  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 26810  00402C  CFDF FFE7          	movff	indf2,indf1
 26811  004030                     l1565:
 26812                           
 26813                           ; BSR set to: 0
 26814  004030  0012               	return	
 26815  004032                     __end_of__CANIDToRegs:
 26816                           	opt stack 0
 26817  004032                     PL28:
 26818                           	opt stack 24
 26819  004032  C063  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 26820  004036  5169               	movf	??__CANIDToRegs& (0+255),w,b
 26821  004038  12DF               	iorwf	indf2,f,c
 26822  00403A  4B62               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 26823  00403C  2B63               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 26824  00403E  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 26825  004040  6ED9               	movwf	fsr2l,c
 26826  004042  6ADA               	clrf	fsr2h,c
 26827  004044  0012               	return	
 26828  004046                     __end_ofPL28:
 26829                           	opt stack 0
 26830  004046                     PL46:
 26831                           	opt stack 24
 26832  004046  6ED9               	movwf	fsr2l,c
 26833  004048  6ADA               	clrf	fsr2h,c
 26834  00404A  0E02               	movlw	2
 26835  00404C  26D9               	addwf	fsr2l,f,c
 26836  00404E  6ADA               	clrf	fsr2h,c
 26837  004050  50DF               	movf	indf2,w,c
 26838  004052  6F69               	movwf	??__CANIDToRegs& (0+255),b
 26839  004054  0012               	return	
 26840  004056                     __end_ofPL46:
 26841                           	opt stack 0
 26842  004056                     PL54:
 26843                           	opt stack 24
 26844  004056  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26845  00405A  C063  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 26846  00405E  6EDF               	movwf	indf2,c
 26847  004060  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 26848  004062  6ED9               	movwf	fsr2l,c
 26849  004064  6ADA               	clrf	fsr2h,c
 26850  004066  0012               	return	
 26851  004068                     __end_ofPL54:
 26852                           	opt stack 0
 26853  004068                     PL66:
 26854                           	opt stack 24
 26855  004068  26D9               	addwf	fsr2l,f,c
 26856  00406A  6ADA               	clrf	fsr2h,c
 26857  00406C  50DF               	movf	indf2,w,c
 26858  00406E  6F69               	movwf	??__CANIDToRegs& (0+255),b
 26859  004070  90D8               	bcf	status,0,c
 26860  004072  3769               	rlcf	??__CANIDToRegs& (0+255),f,b
 26861  004074  90D8               	bcf	status,0,c
 26862  004076  3769               	rlcf	??__CANIDToRegs& (0+255),f,b
 26863  004078  90D8               	bcf	status,0,c
 26864  00407A  0012               	return	
 26865  00407C                     __end_ofPL66:
 26866                           	opt stack 0
 26867  00407C                     PL108:
 26868                           	opt stack 24
 26869  00407C  50DF               	movf	indf2,w,c
 26870  00407E  6F69               	movwf	??__CANIDToRegs& (0+255),b
 26871  004080  0E05               	movlw	5
 26872  004082  6F6A               	movwf	(??__CANIDToRegs+1)& (0+255),b
 26873  004084  0C05               	retlw	5
 26874  004086                     __end_ofPL108:
 26875                           	opt stack 0
 26876                           tblptru	equ	0xFF8
 26877                           tblptrh	equ	0xFF7
 26878                           tblptrl	equ	0xFF6
 26879                           tablat	equ	0xFF5
 26880                           prodh	equ	0xFF4
 26881                           prodl	equ	0xFF3
 26882                           intcon	equ	0xFF2
 26883                           indf0	equ	0xFEF
 26884                           postinc0	equ	0xFEE
 26885                           fsr0h	equ	0xFEA
 26886                           fsr0l	equ	0xFE9
 26887                           wreg	equ	0xFE8
 26888                           indf1	equ	0xFE7
 26889                           postinc1	equ	0xFE6
 26890                           postdec1	equ	0xFE5
 26891                           fsr1h	equ	0xFE2
 26892                           fsr1l	equ	0xFE1
 26893                           indf2	equ	0xFDF
 26894                           postinc2	equ	0xFDE
 26895                           postdec2	equ	0xFDD
 26896                           plusw2	equ	0xFDB
 26897                           fsr2h	equ	0xFDA
 26898                           fsr2l	equ	0xFD9
 26899                           status	equ	0xFD8
 26900                           
 26901 ;; *************** function _setFilter *****************
 26902 ;; Defined at:
 26903 ;;		line 2969 in file "main.c"
 26904 ;; Parameters:    Size  Location     Type
 26905 ;;  filter          1    wreg     unsigned char 
 26906 ;;  val             4    2[BANK0 ] unsigned long 
 26907 ;; Auto vars:     Size  Location     Type
 26908 ;;  filter          1   12[BANK0 ] unsigned char 
 26909 ;;  eidl            1   16[BANK0 ] unsigned char 
 26910 ;;  eidh            1   15[BANK0 ] unsigned char 
 26911 ;;  sidl            1   14[BANK0 ] unsigned char 
 26912 ;;  sidh            1   13[BANK0 ] unsigned char 
 26913 ;; Return value:  Size  Location     Type
 26914 ;;		None               void
 26915 ;; Registers used:
 26916 ;;		wreg, status,2, status,0
 26917 ;; Tracked objects:
 26918 ;;		On entry : D/2
 26919 ;;		On exit  : F/0
 26920 ;;		Unchanged: 0/0
 26921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26922 ;;      Params:         0       4       0       0       0       0       0
 26923 ;;      Locals:         0       5       0       0       0       0       0
 26924 ;;      Temps:          0       6       0       0       0       0       0
 26925 ;;      Totals:         0      15       0       0       0       0       0
 26926 ;;Total ram usage:       15 bytes
 26927 ;; Hardware stack levels used:    1
 26928 ;; Hardware stack levels required when called:    3
 26929 ;; This function calls:
 26930 ;;		Nothing
 26931 ;; This function is called by:
 26932 ;;		_init_app_ram
 26933 ;;		_doModeVerbose
 26934 ;; This function uses a non-reentrant model
 26935 ;;
 26936                           
 26937                           	psect	text79
 26938  002E78                     __ptext79:
 26939                           	opt stack 0
 26940  002E78                     _setFilter:
 26941                           	opt stack 26
 26942                           
 26943                           ; BSR set to: 0
 26944                           ;incstack = 0
 26945                           ;incstack = 0
 26946                           ;setFilter@filter stored from wreg
 26947  002E78  CFE8 F06C          	movff	wreg,setFilter@filter
 26948                           
 26949                           ;main.c: 2970: uint8_t sidh = (long) val >> 21L;
 26950  002E7C  0E15               	movlw	21
 26951  002E7E  0100               	movlb	0	; () banked
 26952  002E80  6F66               	movwf	??_setFilter& (0+255),b
 26953  002E82  C062  F067         	movff	setFilter@val,??_setFilter+1
 26954  002E86  C063  F068         	movff	setFilter@val+1,??_setFilter+2
 26955  002E8A  C064  F069         	movff	setFilter@val+2,??_setFilter+3
 26956  002E8E  C065  F06A         	movff	setFilter@val+3,??_setFilter+4
 26957  002E92                     u14855:
 26958  002E92  6766               	tstfsz	??_setFilter& (0+255),b
 26959  002E94  D001               	goto	u14856
 26960  002E96  D007               	goto	u14857
 26961  002E98                     u14856:
 26962  002E98  356A               	rlcf	(??_setFilter+4)& (0+255),w,b
 26963  002E9A  336A               	rrcf	(??_setFilter+4)& (0+255),f,b
 26964  002E9C  3369               	rrcf	(??_setFilter+3)& (0+255),f,b
 26965  002E9E  3368               	rrcf	(??_setFilter+2)& (0+255),f,b
 26966  002EA0  3367               	rrcf	(??_setFilter+1)& (0+255),f,b
 26967  002EA2  2F66               	decfsz	??_setFilter& (0+255),f,b
 26968  002EA4  D7F6               	goto	u14855
 26969  002EA6                     u14857:
 26970  002EA6  5167               	movf	(??_setFilter+1)& (0+255),w,b
 26971  002EA8  6F6D               	movwf	setFilter@sidh& (0+255),b
 26972                           
 26973                           ;main.c: 2971: uint8_t sidl = (((long) val >> 13L) & 0xe0) |
 26974                           ;main.c: 2972: ((long) (val) & 0x03L) |
 26975                           ;main.c: 2973: 0x08;
 26976  002EAA  C062  F066         	movff	setFilter@val,??_setFilter
 26977  002EAE  0E03               	movlw	3
 26978  002EB0  1766               	andwf	??_setFilter& (0+255),f,b
 26979  002EB2  0E0D               	movlw	13
 26980  002EB4  6F67               	movwf	(??_setFilter+1)& (0+255),b
 26981  002EB6  C062  F068         	movff	setFilter@val,??_setFilter+2
 26982  002EBA  C063  F069         	movff	setFilter@val+1,??_setFilter+3
 26983  002EBE  C064  F06A         	movff	setFilter@val+2,??_setFilter+4
 26984  002EC2  C065  F06B         	movff	setFilter@val+3,??_setFilter+5
 26985  002EC6                     u14865:
 26986  002EC6  6767               	tstfsz	(??_setFilter+1)& (0+255),b
 26987  002EC8  D001               	goto	u14866
 26988  002ECA  D007               	goto	u14867
 26989  002ECC                     u14866:
 26990  002ECC  356B               	rlcf	(??_setFilter+5)& (0+255),w,b
 26991  002ECE  336B               	rrcf	(??_setFilter+5)& (0+255),f,b
 26992  002ED0  336A               	rrcf	(??_setFilter+4)& (0+255),f,b
 26993  002ED2  3369               	rrcf	(??_setFilter+3)& (0+255),f,b
 26994  002ED4  3368               	rrcf	(??_setFilter+2)& (0+255),f,b
 26995  002ED6  2F67               	decfsz	(??_setFilter+1)& (0+255),f,b
 26996  002ED8  D7F6               	goto	u14865
 26997  002EDA                     u14867:
 26998  002EDA  5168               	movf	(??_setFilter+2)& (0+255),w,b
 26999  002EDC  0BE0               	andlw	224
 27000  002EDE  1166               	iorwf	??_setFilter& (0+255),w,b
 27001  002EE0  0908               	iorlw	8
 27002  002EE2  6F6E               	movwf	setFilter@sidl& (0+255),b
 27003                           
 27004                           ; BSR set to: 0
 27005                           ;main.c: 2974: uint8_t eidh = (long) val >> 8L;
 27006  002EE4  C063  F06F         	movff	setFilter@val+1,setFilter@eidh
 27007                           
 27008                           ; BSR set to: 0
 27009                           ;main.c: 2975: uint8_t eidl = val;
 27010  002EE8  C062  F070         	movff	setFilter@val,setFilter@eidl
 27011                           
 27012                           ;main.c: 2977: switch (filter) {
 27013  002EEC  D090               	goto	l11854
 27014  002EEE                     l1306:
 27015                           
 27016                           ; BSR set to: 0
 27017                           ;main.c: 2980: RXF0SIDH = sidh;
 27018  002EEE  C06D  FF00         	movff	setFilter@sidh,3840	;volatile
 27019                           
 27020                           ;main.c: 2981: RXF0SIDL = sidl;
 27021  002EF2  C06E  FF01         	movff	setFilter@sidl,3841	;volatile
 27022                           
 27023                           ;main.c: 2982: RXF0EIDH = eidh;
 27024  002EF6  C06F  FF02         	movff	setFilter@eidh,3842	;volatile
 27025                           
 27026                           ;main.c: 2983: RXF0EIDL = eidl;
 27027  002EFA  C070  FF03         	movff	setFilter@eidl,3843	;volatile
 27028                           
 27029                           ;main.c: 2984: break;
 27030  002EFE  D0AA               	goto	l1323
 27031  002F00                     l1308:
 27032                           
 27033                           ; BSR set to: 0
 27034                           ;main.c: 2987: RXF1SIDH = sidh;
 27035  002F00  C06D  FF04         	movff	setFilter@sidh,3844	;volatile
 27036                           
 27037                           ;main.c: 2988: RXF1SIDL = sidl;
 27038  002F04  C06E  FF05         	movff	setFilter@sidl,3845	;volatile
 27039                           
 27040                           ;main.c: 2989: RXF1EIDH = eidh;
 27041  002F08  C06F  FF06         	movff	setFilter@eidh,3846	;volatile
 27042                           
 27043                           ;main.c: 2990: RXF1EIDL = eidl;
 27044  002F0C  C070  FF07         	movff	setFilter@eidl,3847	;volatile
 27045                           
 27046                           ;main.c: 2991: break;
 27047  002F10  D0A1               	goto	l1323
 27048  002F12                     l1309:
 27049                           
 27050                           ; BSR set to: 0
 27051                           ;main.c: 2994: RXF2SIDH = sidh;
 27052  002F12  C06D  FF08         	movff	setFilter@sidh,3848	;volatile
 27053                           
 27054                           ;main.c: 2995: RXF2SIDL = sidl;
 27055  002F16  C06E  FF09         	movff	setFilter@sidl,3849	;volatile
 27056                           
 27057                           ;main.c: 2996: RXF2EIDH = eidh;
 27058  002F1A  C06F  FF0A         	movff	setFilter@eidh,3850	;volatile
 27059                           
 27060                           ;main.c: 2997: RXF2EIDL = eidl;
 27061  002F1E  C070  FF0B         	movff	setFilter@eidl,3851	;volatile
 27062                           
 27063                           ;main.c: 2998: break;
 27064  002F22  D098               	goto	l1323
 27065  002F24                     l1310:
 27066                           
 27067                           ; BSR set to: 0
 27068                           ;main.c: 3001: RXF3SIDH = sidh;
 27069  002F24  C06D  FF0C         	movff	setFilter@sidh,3852	;volatile
 27070                           
 27071                           ;main.c: 3002: RXF3SIDL = sidl;
 27072  002F28  C06E  FF0D         	movff	setFilter@sidl,3853	;volatile
 27073                           
 27074                           ;main.c: 3003: RXF3EIDH = eidh;
 27075  002F2C  C06F  FF0E         	movff	setFilter@eidh,3854	;volatile
 27076                           
 27077                           ;main.c: 3004: RXF3EIDL = eidl;
 27078  002F30  C070  FF0F         	movff	setFilter@eidl,3855	;volatile
 27079                           
 27080                           ;main.c: 3005: break;
 27081  002F34  D08F               	goto	l1323
 27082  002F36                     l1311:
 27083                           
 27084                           ; BSR set to: 0
 27085                           ;main.c: 3008: RXF4SIDH = sidh;
 27086  002F36  C06D  FF10         	movff	setFilter@sidh,3856	;volatile
 27087                           
 27088                           ;main.c: 3009: RXF4SIDL = sidl;
 27089  002F3A  C06E  FF11         	movff	setFilter@sidl,3857	;volatile
 27090                           
 27091                           ;main.c: 3010: RXF4EIDH = eidh;
 27092  002F3E  C06F  FF12         	movff	setFilter@eidh,3858	;volatile
 27093                           
 27094                           ;main.c: 3011: RXF4EIDL = eidl;
 27095  002F42  C070  FF13         	movff	setFilter@eidl,3859	;volatile
 27096                           
 27097                           ;main.c: 3012: break;
 27098  002F46  D086               	goto	l1323
 27099  002F48                     l1312:
 27100                           
 27101                           ; BSR set to: 0
 27102                           ;main.c: 3015: RXF5SIDH = sidh;
 27103  002F48  C06D  FF14         	movff	setFilter@sidh,3860	;volatile
 27104                           
 27105                           ;main.c: 3016: RXF5SIDL = sidl;
 27106  002F4C  C06E  FF15         	movff	setFilter@sidl,3861	;volatile
 27107                           
 27108                           ;main.c: 3017: RXF5EIDH = eidh;
 27109  002F50  C06F  FF16         	movff	setFilter@eidh,3862	;volatile
 27110                           
 27111                           ;main.c: 3018: RXF5EIDL = eidl;
 27112  002F54  C070  FF17         	movff	setFilter@eidl,3863	;volatile
 27113                           
 27114                           ;main.c: 3019: break;
 27115  002F58  D07D               	goto	l1323
 27116  002F5A                     l1313:
 27117                           
 27118                           ; BSR set to: 0
 27119                           ;main.c: 3022: RXF6SIDH = sidh;
 27120  002F5A  C06D  FD60         	movff	setFilter@sidh,3424	;volatile
 27121                           
 27122                           ;main.c: 3023: RXF6SIDL = sidl;
 27123  002F5E  C06E  FD61         	movff	setFilter@sidl,3425	;volatile
 27124                           
 27125                           ;main.c: 3024: RXF6EIDH = eidh;
 27126  002F62  C06F  FD62         	movff	setFilter@eidh,3426	;volatile
 27127                           
 27128                           ;main.c: 3025: RXF6EIDL = eidl;
 27129  002F66  C070  FD63         	movff	setFilter@eidl,3427	;volatile
 27130                           
 27131                           ;main.c: 3026: break;
 27132  002F6A  D074               	goto	l1323
 27133  002F6C                     l1314:
 27134                           
 27135                           ; BSR set to: 0
 27136                           ;main.c: 3029: RXF7SIDH = sidh;
 27137  002F6C  C06D  FD64         	movff	setFilter@sidh,3428	;volatile
 27138                           
 27139                           ;main.c: 3030: RXF7SIDL = sidl;
 27140  002F70  C06E  FD65         	movff	setFilter@sidl,3429	;volatile
 27141                           
 27142                           ;main.c: 3031: RXF7EIDH = eidh;
 27143  002F74  C06F  FD66         	movff	setFilter@eidh,3430	;volatile
 27144                           
 27145                           ;main.c: 3032: RXF7EIDL = eidl;
 27146  002F78  C070  FD67         	movff	setFilter@eidl,3431	;volatile
 27147                           
 27148                           ;main.c: 3033: break;
 27149  002F7C  D06B               	goto	l1323
 27150  002F7E                     l1315:
 27151                           
 27152                           ; BSR set to: 0
 27153                           ;main.c: 3036: RXF8SIDH = sidh;
 27154  002F7E  C06D  FD68         	movff	setFilter@sidh,3432	;volatile
 27155                           
 27156                           ;main.c: 3037: RXF8SIDL = sidl;
 27157  002F82  C06E  FD69         	movff	setFilter@sidl,3433	;volatile
 27158                           
 27159                           ;main.c: 3038: RXF8EIDH = eidh;
 27160  002F86  C06F  FD6A         	movff	setFilter@eidh,3434	;volatile
 27161                           
 27162                           ;main.c: 3039: RXF8EIDL = eidl;
 27163  002F8A  C070  FD6B         	movff	setFilter@eidl,3435	;volatile
 27164                           
 27165                           ;main.c: 3040: break;
 27166  002F8E  D062               	goto	l1323
 27167  002F90                     l1316:
 27168                           
 27169                           ; BSR set to: 0
 27170                           ;main.c: 3043: RXF9SIDH = sidh;
 27171  002F90  C06D  FD70         	movff	setFilter@sidh,3440	;volatile
 27172                           
 27173                           ;main.c: 3044: RXF9SIDL = sidl;
 27174  002F94  C06E  FD71         	movff	setFilter@sidl,3441	;volatile
 27175                           
 27176                           ;main.c: 3045: RXF9EIDH = eidh;
 27177  002F98  C06F  FD72         	movff	setFilter@eidh,3442	;volatile
 27178                           
 27179                           ;main.c: 3046: RXF9EIDL = eidl;
 27180  002F9C  C070  FD73         	movff	setFilter@eidl,3443	;volatile
 27181                           
 27182                           ;main.c: 3047: break;
 27183  002FA0  D059               	goto	l1323
 27184  002FA2                     l1317:
 27185                           
 27186                           ; BSR set to: 0
 27187                           ;main.c: 3050: RXF10SIDH = sidh;
 27188  002FA2  C06D  FD74         	movff	setFilter@sidh,3444	;volatile
 27189                           
 27190                           ;main.c: 3051: RXF10SIDL = sidl;
 27191  002FA6  C06E  FD75         	movff	setFilter@sidl,3445	;volatile
 27192                           
 27193                           ;main.c: 3052: RXF10EIDH = eidh;
 27194  002FAA  C06F  FD76         	movff	setFilter@eidh,3446	;volatile
 27195                           
 27196                           ;main.c: 3053: RXF10EIDL = eidl;
 27197  002FAE  C070  FD77         	movff	setFilter@eidl,3447	;volatile
 27198                           
 27199                           ;main.c: 3054: break;
 27200  002FB2  D050               	goto	l1323
 27201  002FB4                     l1318:
 27202                           
 27203                           ; BSR set to: 0
 27204                           ;main.c: 3057: RXF11SIDH = sidh;
 27205  002FB4  C06D  FD78         	movff	setFilter@sidh,3448	;volatile
 27206                           
 27207                           ;main.c: 3058: RXF11SIDL = sidl;
 27208  002FB8  C06E  FD79         	movff	setFilter@sidl,3449	;volatile
 27209                           
 27210                           ;main.c: 3059: RXF11EIDH = eidh;
 27211  002FBC  C06F  FD7A         	movff	setFilter@eidh,3450	;volatile
 27212                           
 27213                           ;main.c: 3060: RXF11EIDL = eidl;
 27214  002FC0  C070  FD7B         	movff	setFilter@eidl,3451	;volatile
 27215                           
 27216                           ;main.c: 3061: break;
 27217  002FC4  D047               	goto	l1323
 27218  002FC6                     l1319:
 27219                           
 27220                           ; BSR set to: 0
 27221                           ;main.c: 3064: RXF12SIDH = sidh;
 27222  002FC6  C06D  FD80         	movff	setFilter@sidh,3456	;volatile
 27223                           
 27224                           ;main.c: 3065: RXF12SIDL = sidl;
 27225  002FCA  C06E  FD81         	movff	setFilter@sidl,3457	;volatile
 27226                           
 27227                           ;main.c: 3066: RXF12EIDH = eidh;
 27228  002FCE  C06F  FD82         	movff	setFilter@eidh,3458	;volatile
 27229                           
 27230                           ;main.c: 3067: RXF12EIDL = eidl;
 27231  002FD2  C070  FD83         	movff	setFilter@eidl,3459	;volatile
 27232                           
 27233                           ;main.c: 3068: break;
 27234  002FD6  D03E               	goto	l1323
 27235  002FD8                     l1320:
 27236                           
 27237                           ; BSR set to: 0
 27238                           ;main.c: 3071: RXF13SIDH = sidh;
 27239  002FD8  C06D  FD84         	movff	setFilter@sidh,3460	;volatile
 27240                           
 27241                           ;main.c: 3072: RXF13SIDL = sidl;
 27242  002FDC  C06E  FD85         	movff	setFilter@sidl,3461	;volatile
 27243                           
 27244                           ;main.c: 3073: RXF13EIDH = eidh;
 27245  002FE0  C06F  FD86         	movff	setFilter@eidh,3462	;volatile
 27246                           
 27247                           ;main.c: 3074: RXF13EIDL = eidl;
 27248  002FE4  C070  FD87         	movff	setFilter@eidl,3463	;volatile
 27249                           
 27250                           ;main.c: 3075: break;
 27251  002FE8  D035               	goto	l1323
 27252  002FEA                     l1321:
 27253                           
 27254                           ; BSR set to: 0
 27255                           ;main.c: 3078: RXF14SIDH = sidh;
 27256  002FEA  C06D  FD88         	movff	setFilter@sidh,3464	;volatile
 27257                           
 27258                           ;main.c: 3079: RXF14SIDL = sidl;
 27259  002FEE  C06E  FD89         	movff	setFilter@sidl,3465	;volatile
 27260                           
 27261                           ;main.c: 3080: RXF14EIDH = eidh;
 27262  002FF2  C06F  FD8A         	movff	setFilter@eidh,3466	;volatile
 27263                           
 27264                           ;main.c: 3081: RXF14EIDL = eidl;
 27265  002FF6  C070  FD8B         	movff	setFilter@eidl,3467	;volatile
 27266                           
 27267                           ;main.c: 3082: break;
 27268  002FFA  D02C               	goto	l1323
 27269  002FFC                     l1322:
 27270                           
 27271                           ; BSR set to: 0
 27272                           ;main.c: 3085: RXF15SIDH = sidh;
 27273  002FFC  C06D  FD90         	movff	setFilter@sidh,3472	;volatile
 27274                           
 27275                           ;main.c: 3086: RXF15SIDL = sidl;
 27276  003000  C06E  FD91         	movff	setFilter@sidl,3473	;volatile
 27277                           
 27278                           ;main.c: 3087: RXF15EIDH = eidh;
 27279  003004  C06F  FD92         	movff	setFilter@eidh,3474	;volatile
 27280                           
 27281                           ;main.c: 3088: RXF15EIDL = eidl;
 27282  003008  C070  FD93         	movff	setFilter@eidl,3475	;volatile
 27283                           
 27284                           ;main.c: 3089: break;
 27285  00300C  D023               	goto	l1323
 27286  00300E                     l11854:
 27287                           
 27288                           ; BSR set to: 0
 27289  00300E  516C               	movf	setFilter@filter& (0+255),w,b
 27290                           
 27291                           ; Switch size 1, requested type "space"
 27292                           ; Number of cases is 16, Range of values is 0 to 15
 27293                           ; switch strategies available:
 27294                           ; Name         Instructions Cycles
 27295                           ; simple_byte           49    25 (average)
 27296                           ;	Chosen strategy is simple_byte
 27297  003010  E101 D76D          	bz	l1306
 27298  003014  0A01               	xorlw	1	; case 1
 27299  003016  E101 D773          	bz	l1308
 27300  00301A  0A03               	xorlw	3	; case 2
 27301  00301C  E101 D779          	bz	l1309
 27302  003020  0A01               	xorlw	1	; case 3
 27303  003022  E080               	bz	l1310
 27304  003024  0A07               	xorlw	7	; case 4
 27305  003026  E087               	bz	l1311
 27306  003028  0A01               	xorlw	1	; case 5
 27307  00302A  E08E               	bz	l1312
 27308  00302C  0A03               	xorlw	3	; case 6
 27309  00302E  E095               	bz	l1313
 27310  003030  0A01               	xorlw	1	; case 7
 27311  003032  E09C               	bz	l1314
 27312  003034  0A0F               	xorlw	15	; case 8
 27313  003036  E0A3               	bz	l1315
 27314  003038  0A01               	xorlw	1	; case 9
 27315  00303A  E0AA               	bz	l1316
 27316  00303C  0A03               	xorlw	3	; case 10
 27317  00303E  E0B1               	bz	l1317
 27318  003040  0A01               	xorlw	1	; case 11
 27319  003042  E0B8               	bz	l1318
 27320  003044  0A07               	xorlw	7	; case 12
 27321  003046  E0BF               	bz	l1319
 27322  003048  0A01               	xorlw	1	; case 13
 27323  00304A  E0C6               	bz	l1320
 27324  00304C  0A03               	xorlw	3	; case 14
 27325  00304E  E0CD               	bz	l1321
 27326  003050  0A01               	xorlw	1	; case 15
 27327  003052  E0D4               	bz	l1322
 27328  003054                     l1323:
 27329                           
 27330                           ; BSR set to: 0
 27331  003054  0012               	return	
 27332  003056                     __end_of_setFilter:
 27333                           	opt stack 0
 27334                           tblptru	equ	0xFF8
 27335                           tblptrh	equ	0xFF7
 27336                           tblptrl	equ	0xFF6
 27337                           tablat	equ	0xFF5
 27338                           prodh	equ	0xFF4
 27339                           prodl	equ	0xFF3
 27340                           intcon	equ	0xFF2
 27341                           indf0	equ	0xFEF
 27342                           postinc0	equ	0xFEE
 27343                           fsr0h	equ	0xFEA
 27344                           fsr0l	equ	0xFE9
 27345                           wreg	equ	0xFE8
 27346                           indf1	equ	0xFE7
 27347                           postinc1	equ	0xFE6
 27348                           postdec1	equ	0xFE5
 27349                           fsr1h	equ	0xFE2
 27350                           fsr1l	equ	0xFE1
 27351                           indf2	equ	0xFDF
 27352                           postinc2	equ	0xFDE
 27353                           postdec2	equ	0xFDD
 27354                           plusw2	equ	0xFDB
 27355                           fsr2h	equ	0xFDA
 27356                           fsr2l	equ	0xFD9
 27357                           status	equ	0xFD8
 27358                           
 27359 ;; *************** function _ECANSetOperationMode *****************
 27360 ;; Defined at:
 27361 ;;		line 1014 in file "ECAN.c"
 27362 ;; Parameters:    Size  Location     Type
 27363 ;;  mode            1    wreg     enum E16337
 27364 ;; Auto vars:     Size  Location     Type
 27365 ;;  mode            1    0[BANK0 ] enum E16337
 27366 ;; Return value:  Size  Location     Type
 27367 ;;		None               void
 27368 ;; Registers used:
 27369 ;;		wreg, status,2, status,0
 27370 ;; Tracked objects:
 27371 ;;		On entry : 0/1
 27372 ;;		On exit  : F/0
 27373 ;;		Unchanged: 0/0
 27374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27375 ;;      Params:         0       0       0       0       0       0       0
 27376 ;;      Locals:         0       1       0       0       0       0       0
 27377 ;;      Temps:          0       0       0       0       0       0       0
 27378 ;;      Totals:         0       1       0       0       0       0       0
 27379 ;;Total ram usage:        1 bytes
 27380 ;; Hardware stack levels used:    1
 27381 ;; Hardware stack levels required when called:    3
 27382 ;; This function calls:
 27383 ;;		Nothing
 27384 ;; This function is called by:
 27385 ;;		_main
 27386 ;;		_init_app_ram
 27387 ;;		_doModeVerbose
 27388 ;;		_doModeVscp
 27389 ;;		_doModeSLCAN
 27390 ;;		_ECANInitialize
 27391 ;; This function uses a non-reentrant model
 27392 ;;
 27393                           
 27394                           	psect	text80
 27395  005E3C                     __ptext80:
 27396                           	opt stack 0
 27397  005E3C                     _ECANSetOperationMode:
 27398                           	opt stack 26
 27399                           
 27400                           ; BSR set to: 0
 27401                           ;incstack = 0
 27402                           ;incstack = 0
 27403                           ;ECANSetOperationMode@mode stored from wreg
 27404  005E3C  CFE8 F060          	movff	wreg,ECANSetOperationMode@mode
 27405                           
 27406                           ;ECAN.c: 1015: CANCON &= 0x1F;
 27407  005E40  0E1F               	movlw	31
 27408  005E42  166F               	andwf	3951,f,c	;volatile
 27409                           
 27410                           ;ECAN.c: 1016: CANCON |= mode;
 27411  005E44  0100               	movlb	0	; () banked
 27412  005E46  5160               	movf	ECANSetOperationMode@mode& (0+255),w,b
 27413  005E48  126F               	iorwf	3951,f,c	;volatile
 27414  005E4A                     l14078:
 27415                           
 27416                           ; BSR set to: 0
 27417  005E4A  506F               	movf	3951,w,c	;volatile
 27418  005E4C  0BE0               	andlw	224
 27419  005E4E  1960               	xorwf	ECANSetOperationMode@mode& (0+255),w,b
 27420  005E50  B4D8               	btfsc	status,2,c
 27421                           
 27422                           ; BSR set to: 0
 27423  005E52  0012               	return	
 27424  005E54  D7FA               	goto	l14078
 27425  005E56                     __end_of_ECANSetOperationMode:
 27426                           	opt stack 0
 27427                           tblptru	equ	0xFF8
 27428                           tblptrh	equ	0xFF7
 27429                           tblptrl	equ	0xFF6
 27430                           tablat	equ	0xFF5
 27431                           prodh	equ	0xFF4
 27432                           prodl	equ	0xFF3
 27433                           intcon	equ	0xFF2
 27434                           indf0	equ	0xFEF
 27435                           postinc0	equ	0xFEE
 27436                           fsr0h	equ	0xFEA
 27437                           fsr0l	equ	0xFE9
 27438                           wreg	equ	0xFE8
 27439                           indf1	equ	0xFE7
 27440                           postinc1	equ	0xFE6
 27441                           postdec1	equ	0xFE5
 27442                           fsr1h	equ	0xFE2
 27443                           fsr1l	equ	0xFE1
 27444                           indf2	equ	0xFDF
 27445                           postinc2	equ	0xFDE
 27446                           postdec2	equ	0xFDD
 27447                           plusw2	equ	0xFDB
 27448                           fsr2h	equ	0xFDA
 27449                           fsr2l	equ	0xFD9
 27450                           status	equ	0xFD8
 27451                           
 27452 ;; *************** function _Read_b_eep *****************
 27453 ;; Defined at:
 27454 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 27455 ;; Parameters:    Size  Location     Type
 27456 ;;  badd            2    0[BANK0 ] unsigned int 
 27457 ;; Auto vars:     Size  Location     Type
 27458 ;;		None
 27459 ;; Return value:  Size  Location     Type
 27460 ;;                  1    wreg      unsigned char 
 27461 ;; Registers used:
 27462 ;;		wreg, status,2
 27463 ;; Tracked objects:
 27464 ;;		On entry : F/0
 27465 ;;		On exit  : 0/0
 27466 ;;		Unchanged: 0/0
 27467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27468 ;;      Params:         0       2       0       0       0       0       0
 27469 ;;      Locals:         0       0       0       0       0       0       0
 27470 ;;      Temps:          0       0       0       0       0       0       0
 27471 ;;      Totals:         0       2       0       0       0       0       0
 27472 ;;Total ram usage:        2 bytes
 27473 ;; Hardware stack levels used:    1
 27474 ;; Hardware stack levels required when called:    3
 27475 ;; This function calls:
 27476 ;;		Nothing
 27477 ;; This function is called by:
 27478 ;;		_main
 27479 ;;		_init_app_ram
 27480 ;; This function uses a non-reentrant model
 27481 ;;
 27482                           
 27483                           	psect	text81
 27484  005E92                     __ptext81:
 27485                           	opt stack 0
 27486  005E92                     _Read_b_eep:
 27487                           	opt stack 24
 27488                           
 27489                           ; BSR set to: 0
 27490                           
 27491                           ; BSR set to: 0
 27492                           ;incstack = 0
 27493                           ;incstack = 0
 27494  005E92  C060  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 27495  005E96  9CA6               	bcf	4006,6,c	;volatile
 27496  005E98  9EA6               	bcf	4006,7,c	;volatile
 27497  005E9A  80A6               	bsf	4006,0,c	;volatile
 27498  005E9C  F000               	nop		;# 
 27499  005E9E  F000               	nop		;# 
 27500  005EA0  50A8               	movf	4008,w,c	;volatile
 27501  005EA2  0012               	return	
 27502  005EA4                     __end_of_Read_b_eep:
 27503                           	opt stack 0
 27504                           tblptru	equ	0xFF8
 27505                           tblptrh	equ	0xFF7
 27506                           tblptrl	equ	0xFF6
 27507                           tablat	equ	0xFF5
 27508                           prodh	equ	0xFF4
 27509                           prodl	equ	0xFF3
 27510                           intcon	equ	0xFF2
 27511                           indf0	equ	0xFEF
 27512                           postinc0	equ	0xFEE
 27513                           fsr0h	equ	0xFEA
 27514                           fsr0l	equ	0xFE9
 27515                           wreg	equ	0xFE8
 27516                           indf1	equ	0xFE7
 27517                           postinc1	equ	0xFE6
 27518                           postdec1	equ	0xFE5
 27519                           fsr1h	equ	0xFE2
 27520                           fsr1l	equ	0xFE1
 27521                           indf2	equ	0xFDF
 27522                           postinc2	equ	0xFDE
 27523                           postdec2	equ	0xFDD
 27524                           plusw2	equ	0xFDB
 27525                           fsr2h	equ	0xFDA
 27526                           fsr2l	equ	0xFD9
 27527                           status	equ	0xFD8
 27528                           
 27529 ;; *************** function _WriteTimer0 *****************
 27530 ;; Defined at:
 27531 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 27532 ;; Parameters:    Size  Location     Type
 27533 ;;  timer0          2    0[BANK0 ] unsigned int 
 27534 ;; Auto vars:     Size  Location     Type
 27535 ;;  timer           2    2[BANK0 ] struct Timers
 27536 ;; Return value:  Size  Location     Type
 27537 ;;		None               void
 27538 ;; Registers used:
 27539 ;;		None
 27540 ;; Tracked objects:
 27541 ;;		On entry : F/0
 27542 ;;		On exit  : F/0
 27543 ;;		Unchanged: F/0
 27544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27545 ;;      Params:         0       2       0       0       0       0       0
 27546 ;;      Locals:         0       2       0       0       0       0       0
 27547 ;;      Temps:          0       0       0       0       0       0       0
 27548 ;;      Totals:         0       4       0       0       0       0       0
 27549 ;;Total ram usage:        4 bytes
 27550 ;; Hardware stack levels used:    1
 27551 ;; Hardware stack levels required when called:    3
 27552 ;; This function calls:
 27553 ;;		Nothing
 27554 ;; This function is called by:
 27555 ;;		_init
 27556 ;; This function uses a non-reentrant model
 27557 ;;
 27558                           
 27559                           	psect	text82
 27560  005EA4                     __ptext82:
 27561                           	opt stack 0
 27562  005EA4                     _WriteTimer0:
 27563                           	opt stack 26
 27564                           
 27565                           ; BSR set to: 0
 27566                           
 27567                           ;incstack = 0
 27568                           ;incstack = 0
 27569  005EA4  C060  F062         	movff	WriteTimer0@timer0,WriteTimer0@timer
 27570  005EA8  C061  F063         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 27571  005EAC  C063  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 27572  005EB0  C062  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 27573                           
 27574                           ; BSR set to: 0
 27575  005EB4  0012               	return	
 27576  005EB6                     __end_of_WriteTimer0:
 27577                           	opt stack 0
 27578                           tblptru	equ	0xFF8
 27579                           tblptrh	equ	0xFF7
 27580                           tblptrl	equ	0xFF6
 27581                           tablat	equ	0xFF5
 27582                           prodh	equ	0xFF4
 27583                           prodl	equ	0xFF3
 27584                           intcon	equ	0xFF2
 27585                           indf0	equ	0xFEF
 27586                           postinc0	equ	0xFEE
 27587                           fsr0h	equ	0xFEA
 27588                           fsr0l	equ	0xFE9
 27589                           wreg	equ	0xFE8
 27590                           indf1	equ	0xFE7
 27591                           postinc1	equ	0xFE6
 27592                           postdec1	equ	0xFE5
 27593                           fsr1h	equ	0xFE2
 27594                           fsr1l	equ	0xFE1
 27595                           indf2	equ	0xFDF
 27596                           postinc2	equ	0xFDE
 27597                           postdec2	equ	0xFDD
 27598                           plusw2	equ	0xFDB
 27599                           fsr2h	equ	0xFDA
 27600                           fsr2l	equ	0xFD9
 27601                           status	equ	0xFD8
 27602                           
 27603 ;; *************** function _fifo_init *****************
 27604 ;; Defined at:
 27605 ;;		line 14 in file "fifo.c"
 27606 ;; Parameters:    Size  Location     Type
 27607 ;;  f               2    0[BANK0 ] PTR struct .
 27608 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 27609 ;;  buf             2    2[BANK0 ] PTR const void 
 27610 ;;		 -> can_inputBuffer(494), serial_inputBuffer(128), 
 27611 ;;  size            2    4[BANK0 ] unsigned short 
 27612 ;; Auto vars:     Size  Location     Type
 27613 ;;		None
 27614 ;; Return value:  Size  Location     Type
 27615 ;;		None               void
 27616 ;; Registers used:
 27617 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 27618 ;; Tracked objects:
 27619 ;;		On entry : F/0
 27620 ;;		On exit  : F/0
 27621 ;;		Unchanged: 0/0
 27622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27623 ;;      Params:         0       6       0       0       0       0       0
 27624 ;;      Locals:         0       0       0       0       0       0       0
 27625 ;;      Temps:          0       0       0       0       0       0       0
 27626 ;;      Totals:         0       6       0       0       0       0       0
 27627 ;;Total ram usage:        6 bytes
 27628 ;; Hardware stack levels used:    1
 27629 ;; Hardware stack levels required when called:    3
 27630 ;; This function calls:
 27631 ;;		Nothing
 27632 ;; This function is called by:
 27633 ;;		_main
 27634 ;; This function uses a non-reentrant model
 27635 ;;
 27636                           
 27637                           	psect	text83
 27638  005B26                     __ptext83:
 27639                           	opt stack 0
 27640  005B26                     _fifo_init:
 27641                           	opt stack 27
 27642                           
 27643                           ; BSR set to: 0
 27644                           ;fifo.c: 15: f->head = 0;
 27645                           
 27646                           ; BSR set to: 0
 27647                           ;incstack = 0
 27648                           ;incstack = 0
 27649  005B26  EE20 F002          	lfsr	2,2
 27650  005B2A  D816               	call	PL106	;call to abstracted procedure
 27651                           
 27652                           ;fifo.c: 16: f->tail = 0;
 27653  005B2C  EE20 F004          	lfsr	2,4
 27654  005B30  D813               	call	PL106	;call to abstracted procedure
 27655                           
 27656                           ;fifo.c: 17: f->size = size;
 27657  005B32  EE20 F006          	lfsr	2,6
 27658  005B36  5160               	movf	fifo_init@f& (0+255),w,b
 27659  005B38  26D9               	addwf	fsr2l,f,c
 27660  005B3A  5161               	movf	(fifo_init@f+1)& (0+255),w,b
 27661  005B3C  22DA               	addwfc	fsr2h,f,c
 27662  005B3E  C064  FFDE         	movff	fifo_init@size,postinc2
 27663  005B42  C065  FFDD         	movff	fifo_init@size+1,postdec2
 27664                           
 27665                           ; BSR set to: 0
 27666                           ;fifo.c: 18: f->buf = buf;
 27667  005B46  C060  FFD9         	movff	fifo_init@f,fsr2l
 27668  005B4A  C061  FFDA         	movff	fifo_init@f+1,fsr2h
 27669  005B4E  C062  FFDE         	movff	fifo_init@buf,postinc2
 27670  005B52  C063  FFDD         	movff	fifo_init@buf+1,postdec2
 27671                           
 27672                           ; BSR set to: 0
 27673  005B56  0012               	return	
 27674  005B58                     __end_of_fifo_init:
 27675                           	opt stack 0
 27676  005B58                     PL106:
 27677                           	opt stack 27
 27678  005B58  5160               	movf	fifo_init@f& (0+255),w,b
 27679  005B5A  26D9               	addwf	fsr2l,f,c
 27680  005B5C  5161               	movf	(fifo_init@f+1)& (0+255),w,b
 27681  005B5E  22DA               	addwfc	fsr2h,f,c
 27682  005B60  6ADE               	clrf	postinc2,c
 27683  005B62  6ADD               	clrf	postdec2,c
 27684  005B64  0012               	return	
 27685  005B66                     __end_ofPL106:
 27686                           	opt stack 0
 27687                           tblptru	equ	0xFF8
 27688                           tblptrh	equ	0xFF7
 27689                           tblptrl	equ	0xFF6
 27690                           tablat	equ	0xFF5
 27691                           prodh	equ	0xFF4
 27692                           prodl	equ	0xFF3
 27693                           intcon	equ	0xFF2
 27694                           indf0	equ	0xFEF
 27695                           postinc0	equ	0xFEE
 27696                           fsr0h	equ	0xFEA
 27697                           fsr0l	equ	0xFE9
 27698                           wreg	equ	0xFE8
 27699                           indf1	equ	0xFE7
 27700                           postinc1	equ	0xFE6
 27701                           postdec1	equ	0xFE5
 27702                           fsr1h	equ	0xFE2
 27703                           fsr1l	equ	0xFE1
 27704                           indf2	equ	0xFDF
 27705                           postinc2	equ	0xFDE
 27706                           postdec2	equ	0xFDD
 27707                           plusw2	equ	0xFDB
 27708                           fsr2h	equ	0xFDA
 27709                           fsr2l	equ	0xFD9
 27710                           status	equ	0xFD8
 27711                           
 27712 ;; *************** function _Interrupt *****************
 27713 ;; Defined at:
 27714 ;;		line 145 in file "main.c"
 27715 ;; Parameters:    Size  Location     Type
 27716 ;;		None
 27717 ;; Auto vars:     Size  Location     Type
 27718 ;;  fail            1   32[COMRAM] unsigned char 
 27719 ;;  c               1   31[COMRAM] unsigned char 
 27720 ;; Return value:  Size  Location     Type
 27721 ;;		None               void
 27722 ;; Registers used:
 27723 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27724 ;; Tracked objects:
 27725 ;;		On entry : 0/0
 27726 ;;		On exit  : 0/0
 27727 ;;		Unchanged: 0/0
 27728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27729 ;;      Params:         0       0       0       0       0       0       0
 27730 ;;      Locals:         2       0       0       0       0       0       0
 27731 ;;      Temps:          9       0       0       0       0       0       0
 27732 ;;      Totals:        11       0       0       0       0       0       0
 27733 ;;Total ram usage:       11 bytes
 27734 ;; Hardware stack levels used:    1
 27735 ;; Hardware stack levels required when called:    2
 27736 ;; This function calls:
 27737 ;;		_ReadUSART
 27738 ;;		_fifo_write
 27739 ;;		_ECANReceiveMessage
 27740 ;;		_fifo_getFree
 27741 ;;		i1_WriteTimer0
 27742 ;; This function is called by:
 27743 ;;		Interrupt level 1
 27744 ;; This function uses a non-reentrant model
 27745 ;;
 27746                           
 27747                           	psect	intcodelo
 27748  000018                     __pintcodelo:
 27749                           	opt stack 0
 27750  000018                     _Interrupt:
 27751                           	opt stack 20
 27752                           
 27753                           ; BSR set to: 0
 27754                           ;incstack = 0
 27755  000018  CFD8 F019          	movff	status,??_Interrupt+2
 27756  00001C  CFE8 F01A          	movff	wreg,??_Interrupt+3
 27757  000020  CFE0 F01B          	movff	bsr,??_Interrupt+4
 27758  000024  CFE1 F01C          	movff	fsr1l,??_Interrupt+5
 27759  000028  CFE2 F01D          	movff	fsr1h,??_Interrupt+6
 27760  00002C  CFD9 F01E          	movff	fsr2l,??_Interrupt+7
 27761  000030  CFDA F01F          	movff	fsr2h,??_Interrupt+8
 27762  000034                     
 27763                           ;main.c: 146: uint8_t c;
 27764                           ;main.c: 149: if ( 1 == PIR1bits.RCIF ) {
 27765  000034  AA9E               	btfss	3998,5,c	;volatile
 27766  000036  D001               	goto	i1u1803_21
 27767  000038  D001               	goto	i1u1803_20
 27768  00003A                     i1u1803_21:
 27769  00003A  D02B               	goto	i1l405
 27770  00003C                     i1u1803_20:
 27771  00003C                     
 27772                           ;main.c: 151: c = ReadUSART();
 27773  00003C  EC0F  F02F         	call	_ReadUSART	;wreg free
 27774  000040  6E20               	movwf	Interrupt@c,c
 27775  000042                     
 27776                           ;main.c: 153: if ( 1 != fifo_write( &serialInputFifo, &c, 1 ) ) {
 27777  000042  0101               	movlb	1	; () banked
 27778  000044  0E01               	movlw	high _serialInputFifo
 27779  000046  6E02               	movwf	?_fifo_write+1,c
 27780  000048  0ED9               	movlw	low _serialInputFifo
 27781  00004A  6E01               	movwf	?_fifo_write,c
 27782  00004C  0E20               	movlw	low Interrupt@c
 27783  00004E  6E03               	movwf	?_fifo_write+2,c
 27784  000050  0E00               	movlw	high Interrupt@c
 27785  000052  6E04               	movwf	?_fifo_write+3,c
 27786  000054  0E0F               	movlw	15
 27787  000056  6E04               	movwf	?_fifo_write+3,c
 27788  000058  0E5F               	movlw	__accesstop+-1
 27789  00005A  6403               	cpfsgt	?_fifo_write+2,c
 27790  00005C  6A04               	clrf	?_fifo_write+3,c
 27791  00005E  0E01               	movlw	1
 27792  000060  6E05               	movwf	?_fifo_write+4,c
 27793  000062  0E00               	movlw	0
 27794  000064  6E06               	movwf	?_fifo_write+5,c
 27795  000066  0E00               	movlw	0
 27796  000068  6E07               	movwf	?_fifo_write+6,c
 27797  00006A  0E00               	movlw	0
 27798  00006C  6E08               	movwf	?_fifo_write+7,c
 27799  00006E  EC23  F01F         	call	_fifo_write	;wreg free
 27800  000072  0401               	decf	?_fifo_write,w,c
 27801  000074  1002               	iorwf	?_fifo_write+1,w,c
 27802  000076  B4D8               	btfsc	status,2,c
 27803  000078  D001               	goto	i1u1804_21
 27804  00007A  D001               	goto	i1u1804_20
 27805  00007C                     i1u1804_21:
 27806  00007C  D008               	goto	i1l13772
 27807  00007E                     i1u1804_20:
 27808  00007E                     
 27809                           ; BSR set to: 1
 27810                           ;main.c: 155: uart_receiveOverruns++;
 27811  00007E  0E01               	movlw	1
 27812  000080  2720               	addwf	_uart_receiveOverruns& (0+255),f,b
 27813  000082  0E00               	movlw	0
 27814  000084  2321               	addwfc	(_uart_receiveOverruns+1)& (0+255),f,b
 27815  000086  0E00               	movlw	0
 27816  000088  2322               	addwfc	(_uart_receiveOverruns+2)& (0+255),f,b
 27817  00008A  0E00               	movlw	0
 27818  00008C  2323               	addwfc	(_uart_receiveOverruns+3)& (0+255),f,b
 27819  00008E                     i1l13772:
 27820                           
 27821                           ; BSR set to: 1
 27822                           ;main.c: 156: }
 27823                           ;main.c: 159: PIR1bits.RCIF = 0;
 27824  00008E  9A9E               	bcf	3998,5,c	;volatile
 27825                           
 27826                           ;main.c: 161: }
 27827  000090  D07D               	goto	i1l407
 27828  000092                     i1l405:
 27829                           
 27830                           ;main.c: 163: else if (1 == INTCONbits.TMR0IF) {
 27831  000092  A4F2               	btfss	intcon,2,c	;volatile
 27832  000094  D001               	goto	i1u1805_21
 27833  000096  D001               	goto	i1u1805_20
 27834  000098                     i1u1805_21:
 27835  000098  D079               	goto	i1l407
 27836  00009A                     i1u1805_20:
 27837  00009A                     
 27838                           ;main.c: 165: WriteTimer0(0xfb1d);
 27839  00009A  0EFB               	movlw	251
 27840  00009C  6E02               	movwf	?i1_WriteTimer0+1,c
 27841  00009E  0E1D               	movlw	29
 27842  0000A0  6E01               	movwf	?i1_WriteTimer0,c
 27843  0000A2  EC5B  F02F         	call	i1_WriteTimer0	;wreg free
 27844  0000A6                     
 27845                           ;main.c: 167: timer++;
 27846  0000A6  0E01               	movlw	1
 27847  0000A8  0101               	movlb	1	; () banked
 27848  0000AA  271C               	addwf	_timer& (0+255),f,b	;volatile
 27849  0000AC  0E00               	movlw	0
 27850  0000AE  231D               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 27851  0000B0  0E00               	movlw	0
 27852  0000B2  231E               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 27853  0000B4  0E00               	movlw	0
 27854  0000B6  231F               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 27855  0000B8                     
 27856                           ; BSR set to: 1
 27857                           ;main.c: 168: timekeeper++;
 27858  0000B8  0E01               	movlw	1
 27859  0000BA  2718               	addwf	_timekeeper& (0+255),f,b	;volatile
 27860  0000BC  0E00               	movlw	0
 27861  0000BE  2319               	addwfc	(_timekeeper+1)& (0+255),f,b	;volatile
 27862  0000C0  0E00               	movlw	0
 27863  0000C2  231A               	addwfc	(_timekeeper+2)& (0+255),f,b	;volatile
 27864  0000C4  0E00               	movlw	0
 27865  0000C6  231B               	addwfc	(_timekeeper+3)& (0+255),f,b	;volatile
 27866  0000C8                     
 27867                           ; BSR set to: 1
 27868                           ;main.c: 171: status_led_cnt++;
 27869  0000C8  4A24               	infsnz	_status_led_cnt,f,c	;volatile
 27870  0000CA  2A25               	incf	_status_led_cnt+1,f,c	;volatile
 27871  0000CC                     
 27872                           ; BSR set to: 1
 27873                           ;main.c: 172: if ((2 == ledFunctionality) &&
 27874                           ;main.c: 173: (status_led_cnt > 1000)) {
 27875  0000CC  5031               	movf	_ledFunctionality,w,c
 27876  0000CE  0A02               	xorlw	2
 27877  0000D0  A4D8               	btfss	status,2,c
 27878  0000D2  D001               	goto	i1u1806_21
 27879  0000D4  D001               	goto	i1u1806_20
 27880  0000D6                     i1u1806_21:
 27881  0000D6  D00C               	goto	i1l13788
 27882  0000D8                     i1u1806_20:
 27883  0000D8                     
 27884                           ; BSR set to: 1
 27885  0000D8  0EE9               	movlw	233
 27886  0000DA  5C24               	subwf	_status_led_cnt,w,c	;volatile
 27887  0000DC  0E03               	movlw	3
 27888  0000DE  5825               	subwfb	_status_led_cnt+1,w,c	;volatile
 27889  0000E0  A0D8               	btfss	status,0,c
 27890  0000E2  D001               	goto	i1u1807_21
 27891  0000E4  D001               	goto	i1u1807_20
 27892  0000E6                     i1u1807_21:
 27893  0000E6  D004               	goto	i1l13788
 27894  0000E8                     i1u1807_20:
 27895  0000E8                     i1l13786:
 27896                           
 27897                           ; BSR set to: 1
 27898                           ;main.c: 174: LATC1 = ~LATC1;
 27899  0000E8  728B               	btg	3979,1,c	;volatile
 27900                           
 27901                           ;main.c: 175: status_led_cnt = 0;
 27902  0000EA  6A24               	clrf	_status_led_cnt,c	;volatile
 27903  0000EC  6A25               	clrf	_status_led_cnt+1,c	;volatile
 27904                           
 27905                           ;main.c: 176: }
 27906  0000EE  D04D               	goto	i1l410
 27907  0000F0                     i1l13788:
 27908                           
 27909                           ; BSR set to: 1
 27910                           ;main.c: 177: else if ((3 == ledFunctionality) &&
 27911                           ;main.c: 178: (status_led_cnt > 400)) {
 27912  0000F0  5031               	movf	_ledFunctionality,w,c
 27913  0000F2  0A03               	xorlw	3
 27914  0000F4  A4D8               	btfss	status,2,c
 27915  0000F6  D001               	goto	i1u1808_21
 27916  0000F8  D001               	goto	i1u1808_20
 27917  0000FA                     i1u1808_21:
 27918  0000FA  D009               	goto	i1l13794
 27919  0000FC                     i1u1808_20:
 27920  0000FC                     
 27921                           ; BSR set to: 1
 27922  0000FC  0E91               	movlw	145
 27923  0000FE  5C24               	subwf	_status_led_cnt,w,c	;volatile
 27924  000100  0E01               	movlw	1
 27925  000102  5825               	subwfb	_status_led_cnt+1,w,c	;volatile
 27926  000104  A0D8               	btfss	status,0,c
 27927  000106  D001               	goto	i1u1809_21
 27928  000108  D001               	goto	i1u1809_20
 27929  00010A                     i1u1809_21:
 27930  00010A  D001               	goto	i1l13794
 27931  00010C                     i1u1809_20:
 27932  00010C  D7ED               	goto	i1l13786
 27933  00010E                     i1l13794:
 27934                           
 27935                           ; BSR set to: 1
 27936                           ;main.c: 182: else if ((4 == ledFunctionality) &&
 27937                           ;main.c: 183: (status_led_cnt > 100)) {
 27938  00010E  5031               	movf	_ledFunctionality,w,c
 27939  000110  0A04               	xorlw	4
 27940  000112  A4D8               	btfss	status,2,c
 27941  000114  D001               	goto	i1u1810_21
 27942  000116  D001               	goto	i1u1810_20
 27943  000118                     i1u1810_21:
 27944  000118  D009               	goto	i1l13800
 27945  00011A                     i1u1810_20:
 27946  00011A                     
 27947                           ; BSR set to: 1
 27948  00011A  0E65               	movlw	101
 27949  00011C  5C24               	subwf	_status_led_cnt,w,c	;volatile
 27950  00011E  0E00               	movlw	0
 27951  000120  5825               	subwfb	_status_led_cnt+1,w,c	;volatile
 27952  000122  A0D8               	btfss	status,0,c
 27953  000124  D001               	goto	i1u1811_21
 27954  000126  D001               	goto	i1u1811_20
 27955  000128                     i1u1811_21:
 27956  000128  D001               	goto	i1l13800
 27957  00012A                     i1u1811_20:
 27958  00012A  D7DE               	goto	i1l13786
 27959  00012C                     i1l13800:
 27960                           
 27961                           ; BSR set to: 1
 27962                           ;main.c: 187: else if ((5 == ledFunctionality) &&
 27963                           ;main.c: 188: (status_led_cnt > 70)) {
 27964  00012C  5031               	movf	_ledFunctionality,w,c
 27965  00012E  0A05               	xorlw	5
 27966  000130  A4D8               	btfss	status,2,c
 27967  000132  D001               	goto	i1u1812_21
 27968  000134  D001               	goto	i1u1812_20
 27969  000136                     i1u1812_21:
 27970  000136  D009               	goto	i1l13806
 27971  000138                     i1u1812_20:
 27972  000138                     
 27973                           ; BSR set to: 1
 27974  000138  0E47               	movlw	71
 27975  00013A  5C24               	subwf	_status_led_cnt,w,c	;volatile
 27976  00013C  0E00               	movlw	0
 27977  00013E  5825               	subwfb	_status_led_cnt+1,w,c	;volatile
 27978  000140  A0D8               	btfss	status,0,c
 27979  000142  D001               	goto	i1u1813_21
 27980  000144  D001               	goto	i1u1813_20
 27981  000146                     i1u1813_21:
 27982  000146  D001               	goto	i1l13806
 27983  000148                     i1u1813_20:
 27984  000148  D7CF               	goto	i1l13786
 27985  00014A                     i1l13806:
 27986                           
 27987                           ; BSR set to: 1
 27988                           ;main.c: 192: else if ((6 == ledFunctionality) &&
 27989                           ;main.c: 193: (status_led_cnt > 40)) {
 27990  00014A  5031               	movf	_ledFunctionality,w,c
 27991  00014C  0A06               	xorlw	6
 27992  00014E  A4D8               	btfss	status,2,c
 27993  000150  D001               	goto	i1u1814_21
 27994  000152  D001               	goto	i1u1814_20
 27995  000154                     i1u1814_21:
 27996  000154  D009               	goto	i1l13812
 27997  000156                     i1u1814_20:
 27998  000156                     
 27999                           ; BSR set to: 1
 28000  000156  0E29               	movlw	41
 28001  000158  5C24               	subwf	_status_led_cnt,w,c	;volatile
 28002  00015A  0E00               	movlw	0
 28003  00015C  5825               	subwfb	_status_led_cnt+1,w,c	;volatile
 28004  00015E  A0D8               	btfss	status,0,c
 28005  000160  D001               	goto	i1u1815_21
 28006  000162  D001               	goto	i1u1815_20
 28007  000164                     i1u1815_21:
 28008  000164  D001               	goto	i1l13812
 28009  000166                     i1u1815_20:
 28010  000166  D7C0               	goto	i1l13786
 28011  000168                     i1l13812:
 28012                           
 28013                           ; BSR set to: 1
 28014                           ;main.c: 197: else if (1 == ledFunctionality) {
 28015  000168  0431               	decf	_ledFunctionality,w,c
 28016  00016A  A4D8               	btfss	status,2,c
 28017  00016C  D001               	goto	i1u1816_21
 28018  00016E  D001               	goto	i1u1816_20
 28019  000170                     i1u1816_21:
 28020  000170  D004               	goto	i1l419
 28021  000172                     i1u1816_20:
 28022  000172                     
 28023                           ; BSR set to: 1
 28024                           ;main.c: 198: LATC1 = 1;
 28025  000172  828B               	bsf	3979,1,c	;volatile
 28026                           
 28027                           ;main.c: 199: status_led_cnt = 0;
 28028  000174  6A24               	clrf	_status_led_cnt,c	;volatile
 28029  000176  6A25               	clrf	_status_led_cnt+1,c	;volatile
 28030                           
 28031                           ;main.c: 200: }
 28032  000178  D008               	goto	i1l410
 28033  00017A                     i1l419:
 28034                           
 28035                           ; BSR set to: 1
 28036                           ;main.c: 201: else if (0 == ledFunctionality) {
 28037  00017A  6631               	tstfsz	_ledFunctionality,c
 28038  00017C  D001               	goto	i1u1817_21
 28039  00017E  D001               	goto	i1u1817_20
 28040  000180                     i1u1817_21:
 28041  000180  D004               	goto	i1l416
 28042  000182                     i1u1817_20:
 28043  000182                     
 28044                           ; BSR set to: 1
 28045                           ;main.c: 202: LATC1 = 0;
 28046  000182  928B               	bcf	3979,1,c	;volatile
 28047                           
 28048                           ;main.c: 203: status_led_cnt = 0;
 28049  000184  6A24               	clrf	_status_led_cnt,c	;volatile
 28050  000186  6A25               	clrf	_status_led_cnt+1,c	;volatile
 28051  000188  D000               	goto	i1l410
 28052  00018A                     i1l416:
 28053  00018A                     i1l410:
 28054                           
 28055                           ; BSR set to: 1
 28056                           ;main.c: 204: }
 28057                           ;main.c: 206: INTCONbits.TMR0IF = 0;
 28058  00018A  94F2               	bcf	intcon,2,c	;volatile
 28059  00018C                     i1l407:
 28060                           
 28061                           ;main.c: 207: }
 28062                           ;main.c: 210: if ( 1 == IRXIF ) {
 28063  00018C  AEA4               	btfss	4004,7,c	;volatile
 28064  00018E  D001               	goto	i1u1818_21
 28065  000190  D001               	goto	i1u1818_20
 28066  000192                     i1u1818_21:
 28067  000192  D001               	goto	i1l422
 28068  000194                     i1u1818_20:
 28069  000194                     
 28070                           ;main.c: 212: IRXIF = 0;
 28071  000194  9EA4               	bcf	4004,7,c	;volatile
 28072  000196                     i1l422:
 28073                           
 28074                           ;main.c: 213: }
 28075                           ;main.c: 216: if ( RXBnIF ) {
 28076  000196  A2A4               	btfss	4004,1,c	;volatile
 28077  000198  D001               	goto	i1u1819_21
 28078  00019A  D001               	goto	i1u1819_20
 28079  00019C                     i1u1819_21:
 28080  00019C  D09F               	goto	i1l435
 28081  00019E                     i1u1819_20:
 28082  00019E                     
 28083                           ;main.c: 218: if ( ECANReceiveMessage((unsigned long *)&id,
 28084                           ;main.c: 219: (BYTE*)&data,
 28085                           ;main.c: 220: (BYTE*)&dlc,
 28086                           ;main.c: 221: &flags) ) {
 28087  00019E  0101               	movlb	1	; () banked
 28088  0001A0  0E01               	movlw	high _id
 28089  0001A2  6E0B               	movwf	?_ECANReceiveMessage+1,c
 28090  0001A4  0EE9               	movlw	low _id
 28091  0001A6  6E0A               	movwf	?_ECANReceiveMessage,c
 28092  0001A8  0E01               	movlw	high _data
 28093  0001AA  6E0D               	movwf	?_ECANReceiveMessage+3,c
 28094  0001AC  0ED1               	movlw	low _data
 28095  0001AE  6E0C               	movwf	?_ECANReceiveMessage+2,c
 28096  0001B0  0E39               	movlw	low _dlc
 28097  0001B2  6E0E               	movwf	?_ECANReceiveMessage+4,c
 28098  0001B4  0E3A               	movlw	low _flags
 28099  0001B6  6E0F               	movwf	?_ECANReceiveMessage+5,c
 28100  0001B8  EC43  F015         	call	_ECANReceiveMessage	;wreg free
 28101  0001BC  0900               	iorlw	0
 28102  0001BE  B4D8               	btfsc	status,2,c
 28103  0001C0  D001               	goto	i1u1820_21
 28104  0001C2  D001               	goto	i1u1820_20
 28105  0001C4                     i1u1820_21:
 28106  0001C4  D08A               	goto	i1l13854
 28107  0001C6                     i1u1820_20:
 28108  0001C6                     
 28109                           ;main.c: 224: if ( flags & ECAN_RX_OVERFLOW ) {
 28110  0001C6  A63A               	btfss	_flags,3,c
 28111  0001C8  D001               	goto	i1u1821_21
 28112  0001CA  D001               	goto	i1u1821_20
 28113  0001CC                     i1u1821_21:
 28114  0001CC  D00E               	goto	i1l425
 28115  0001CE                     i1u1821_20:
 28116  0001CE                     
 28117                           ;main.c: 225: if ( flags & ECAN_RX_XTD_FRAME ) can_receiveOverruns++;
 28118  0001CE  AA3A               	btfss	_flags,5,c
 28119  0001D0  D001               	goto	i1u1822_21
 28120  0001D2  D001               	goto	i1u1822_20
 28121  0001D4                     i1u1822_21:
 28122  0001D4  D082               	goto	i1l13854
 28123  0001D6                     i1u1822_20:
 28124  0001D6                     i1l13826:
 28125  0001D6  0E01               	movlw	1
 28126  0001D8  0101               	movlb	1	; () banked
 28127  0001DA  2700               	addwf	_can_receiveOverruns& (0+255),f,b
 28128  0001DC  0E00               	movlw	0
 28129  0001DE  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 28130  0001E0  0E00               	movlw	0
 28131  0001E2  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 28132  0001E4  0E00               	movlw	0
 28133  0001E6  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 28134  0001E8  D078               	goto	i1l13854
 28135  0001EA                     i1l425:
 28136                           
 28137                           ;main.c: 227: else if ( !( flags & ECAN_RX_RTR_FRAME ) &&
 28138                           ;main.c: 228: ( flags & ECAN_RX_XTD_FRAME ) ) {
 28139  0001EA  BC3A               	btfsc	_flags,6,c
 28140  0001EC  D001               	goto	i1u1823_21
 28141  0001EE  D001               	goto	i1u1823_20
 28142  0001F0                     i1u1823_21:
 28143  0001F0  D074               	goto	i1l13854
 28144  0001F2                     i1u1823_20:
 28145  0001F2  AA3A               	btfss	_flags,5,c
 28146  0001F4  D001               	goto	i1u1824_21
 28147  0001F6  D001               	goto	i1u1824_20
 28148  0001F8                     i1u1824_21:
 28149  0001F8  D070               	goto	i1l13854
 28150  0001FA                     i1u1824_20:
 28151  0001FA                     
 28152                           ;main.c: 230: if ( ( fifo_getFree( &canInputFifo ) >= (5+dlc) ) ) {
 28153  0001FA  5039               	movf	_dlc,w,c
 28154  0001FC  6E17               	movwf	??_Interrupt& (0+255),c
 28155  0001FE  6A18               	clrf	(??_Interrupt+1)& (0+255),c
 28156  000200  0E05               	movlw	5
 28157  000202  2617               	addwf	??_Interrupt,f,c
 28158  000204  0E00               	movlw	0
 28159  000206  2218               	addwfc	??_Interrupt+1,f,c
 28160  000208  0101               	movlb	1	; () banked
 28161  00020A  0E01               	movlw	high _canInputFifo
 28162  00020C  6E02               	movwf	?_fifo_getFree+1,c
 28163  00020E  0EC9               	movlw	low _canInputFifo
 28164  000210  6E01               	movwf	?_fifo_getFree,c
 28165  000212  EC0A  F027         	call	_fifo_getFree	;wreg free
 28166  000216  5017               	movf	??_Interrupt,w,c
 28167  000218  5C01               	subwf	?_fifo_getFree,w,c
 28168  00021A  5018               	movf	??_Interrupt+1,w,c
 28169  00021C  5802               	subwfb	?_fifo_getFree+1,w,c
 28170  00021E  A0D8               	btfss	status,0,c
 28171  000220  D001               	goto	i1u1825_21
 28172  000222  D001               	goto	i1u1825_20
 28173  000224                     i1u1825_21:
 28174  000224  D7D8               	goto	i1l13826
 28175  000226                     i1u1825_20:
 28176  000226                     
 28177                           ; BSR set to: 1
 28178                           ;main.c: 231: uint8_t fail = 0;
 28179  000226  6A21               	clrf	Interrupt@fail,c
 28180  000228                     
 28181                           ; BSR set to: 1
 28182                           ;main.c: 232: if ( 4 != fifo_write( &canInputFifo, (uint8_t *)&id, 4 ) ) {
 28183  000228  0E01               	movlw	high _canInputFifo
 28184  00022A  6E02               	movwf	?_fifo_write+1,c
 28185  00022C  0EC9               	movlw	low _canInputFifo
 28186  00022E  6E01               	movwf	?_fifo_write,c
 28187  000230  0E01               	movlw	high _id
 28188  000232  6E04               	movwf	?_fifo_write+3,c
 28189  000234  0EE9               	movlw	low _id
 28190  000236  6E03               	movwf	?_fifo_write+2,c
 28191  000238  0E04               	movlw	4
 28192  00023A  6E05               	movwf	?_fifo_write+4,c
 28193  00023C  0E00               	movlw	0
 28194  00023E  6E06               	movwf	?_fifo_write+5,c
 28195  000240  0E00               	movlw	0
 28196  000242  6E07               	movwf	?_fifo_write+6,c
 28197  000244  0E00               	movlw	0
 28198  000246  6E08               	movwf	?_fifo_write+7,c
 28199  000248  EC23  F01F         	call	_fifo_write	;wreg free
 28200  00024C  5001               	movf	?_fifo_write,w,c
 28201  00024E  0A04               	xorlw	4
 28202  000250  1002               	iorwf	?_fifo_write+1,w,c
 28203  000252  B4D8               	btfsc	status,2,c
 28204  000254  D001               	goto	i1u1826_21
 28205  000256  D001               	goto	i1u1826_20
 28206  000258                     i1u1826_21:
 28207  000258  D002               	goto	i1l13838
 28208  00025A                     i1u1826_20:
 28209  00025A                     
 28210                           ; BSR set to: 1
 28211                           ;main.c: 233: fail = 1;
 28212  00025A  0E01               	movlw	1
 28213  00025C  6E21               	movwf	Interrupt@fail,c
 28214  00025E                     i1l13838:
 28215                           
 28216                           ; BSR set to: 1
 28217                           ;main.c: 234: }
 28218                           ;main.c: 235: if ( 1 != fifo_write( &canInputFifo, &dlc, 1 ) ) {
 28219  00025E  0E01               	movlw	high _canInputFifo
 28220  000260  6E02               	movwf	?_fifo_write+1,c
 28221  000262  0EC9               	movlw	low _canInputFifo
 28222  000264  6E01               	movwf	?_fifo_write,c
 28223  000266  0E39               	movlw	low _dlc
 28224  000268  6E03               	movwf	?_fifo_write+2,c
 28225  00026A  0E00               	movlw	high _dlc
 28226  00026C  6E04               	movwf	?_fifo_write+3,c
 28227  00026E  0E0F               	movlw	15
 28228  000270  6E04               	movwf	?_fifo_write+3,c
 28229  000272  0E5F               	movlw	__accesstop+-1
 28230  000274  6403               	cpfsgt	?_fifo_write+2,c
 28231  000276  6A04               	clrf	?_fifo_write+3,c
 28232  000278  0E01               	movlw	1
 28233  00027A  6E05               	movwf	?_fifo_write+4,c
 28234  00027C  0E00               	movlw	0
 28235  00027E  6E06               	movwf	?_fifo_write+5,c
 28236  000280  0E00               	movlw	0
 28237  000282  6E07               	movwf	?_fifo_write+6,c
 28238  000284  0E00               	movlw	0
 28239  000286  6E08               	movwf	?_fifo_write+7,c
 28240  000288  EC23  F01F         	call	_fifo_write	;wreg free
 28241  00028C  0401               	decf	?_fifo_write,w,c
 28242  00028E  1002               	iorwf	?_fifo_write+1,w,c
 28243  000290  B4D8               	btfsc	status,2,c
 28244  000292  D001               	goto	i1u1827_21
 28245  000294  D001               	goto	i1u1827_20
 28246  000296                     i1u1827_21:
 28247  000296  D002               	goto	i1l13842
 28248  000298                     i1u1827_20:
 28249  000298                     
 28250                           ; BSR set to: 1
 28251                           ;main.c: 236: fail = 1;
 28252  000298  0E01               	movlw	1
 28253  00029A  6E21               	movwf	Interrupt@fail,c
 28254  00029C                     i1l13842:
 28255                           
 28256                           ; BSR set to: 1
 28257                           ;main.c: 237: }
 28258                           ;main.c: 238: if ( dlc != fifo_write( &canInputFifo, (uint8_t *)&data, dlc ) ) {
 28259  00029C  0E01               	movlw	high _canInputFifo
 28260  00029E  6E02               	movwf	?_fifo_write+1,c
 28261  0002A0  0EC9               	movlw	low _canInputFifo
 28262  0002A2  6E01               	movwf	?_fifo_write,c
 28263  0002A4  0E01               	movlw	high _data
 28264  0002A6  6E04               	movwf	?_fifo_write+3,c
 28265  0002A8  0ED1               	movlw	low _data
 28266  0002AA  6E03               	movwf	?_fifo_write+2,c
 28267  0002AC  5039               	movf	_dlc,w,c
 28268  0002AE  6E05               	movwf	?_fifo_write+4,c
 28269  0002B0  6A06               	clrf	?_fifo_write+5,c
 28270  0002B2  6A07               	clrf	?_fifo_write+6,c
 28271  0002B4  6A08               	clrf	?_fifo_write+7,c
 28272  0002B6  EC23  F01F         	call	_fifo_write	;wreg free
 28273  0002BA  5039               	movf	_dlc,w,c
 28274  0002BC  1801               	xorwf	?_fifo_write,w,c
 28275  0002BE  1002               	iorwf	?_fifo_write+1,w,c
 28276  0002C0  B4D8               	btfsc	status,2,c
 28277  0002C2  D001               	goto	i1u1828_21
 28278  0002C4  D001               	goto	i1u1828_20
 28279  0002C6                     i1u1828_21:
 28280  0002C6  D002               	goto	i1l13846
 28281  0002C8                     i1u1828_20:
 28282  0002C8                     
 28283                           ; BSR set to: 1
 28284                           ;main.c: 239: fail = 1;
 28285  0002C8  0E01               	movlw	1
 28286  0002CA  6E21               	movwf	Interrupt@fail,c
 28287  0002CC                     i1l13846:
 28288                           
 28289                           ; BSR set to: 1
 28290                           ;main.c: 240: }
 28291                           ;main.c: 242: fifo_canrxcount++;
 28292  0002CC  2A30               	incf	_fifo_canrxcount,f,c	;volatile
 28293  0002CE                     
 28294                           ; BSR set to: 1
 28295                           ;main.c: 244: if ( fail ) {
 28296  0002CE  5021               	movf	Interrupt@fail,w,c
 28297  0002D0  B4D8               	btfsc	status,2,c
 28298  0002D2  D001               	goto	i1u1829_21
 28299  0002D4  D001               	goto	i1u1829_20
 28300  0002D6                     i1u1829_21:
 28301  0002D6  D001               	goto	i1l13854
 28302  0002D8                     i1u1829_20:
 28303  0002D8  D77E               	goto	i1l13826
 28304  0002DA                     i1l13854:
 28305                           
 28306                           ;main.c: 251: }
 28307                           ;main.c: 253: }
 28308                           ;main.c: 255: }
 28309                           ;main.c: 258: RXBnIF = 0;
 28310  0002DA  92A4               	bcf	4004,1,c	;volatile
 28311  0002DC                     i1l435:
 28312  0002DC  C01F  FFDA         	movff	??_Interrupt+8,fsr2h
 28313  0002E0  C01E  FFD9         	movff	??_Interrupt+7,fsr2l
 28314  0002E4  C01D  FFE2         	movff	??_Interrupt+6,fsr1h
 28315  0002E8  C01C  FFE1         	movff	??_Interrupt+5,fsr1l
 28316  0002EC  C01B  FFE0         	movff	??_Interrupt+4,bsr
 28317  0002F0  C01A  FFE8         	movff	??_Interrupt+3,wreg
 28318  0002F4  C019  FFD8         	movff	??_Interrupt+2,status
 28319  0002F8  0010               	retfie	
 28320  0002FA                     __end_of_Interrupt:
 28321                           	opt stack 0
 28322                           tblptru	equ	0xFF8
 28323                           tblptrh	equ	0xFF7
 28324                           tblptrl	equ	0xFF6
 28325                           tablat	equ	0xFF5
 28326                           prodh	equ	0xFF4
 28327                           prodl	equ	0xFF3
 28328                           intcon	equ	0xFF2
 28329                           indf0	equ	0xFEF
 28330                           postinc0	equ	0xFEE
 28331                           fsr0h	equ	0xFEA
 28332                           fsr0l	equ	0xFE9
 28333                           wreg	equ	0xFE8
 28334                           indf1	equ	0xFE7
 28335                           postinc1	equ	0xFE6
 28336                           postdec1	equ	0xFE5
 28337                           fsr1h	equ	0xFE2
 28338                           fsr1l	equ	0xFE1
 28339                           bsr	equ	0xFE0
 28340                           indf2	equ	0xFDF
 28341                           postinc2	equ	0xFDE
 28342                           postdec2	equ	0xFDD
 28343                           plusw2	equ	0xFDB
 28344                           fsr2h	equ	0xFDA
 28345                           fsr2l	equ	0xFD9
 28346                           status	equ	0xFD8
 28347                           
 28348 ;; *************** function i1_WriteTimer0 *****************
 28349 ;; Defined at:
 28350 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 28351 ;; Parameters:    Size  Location     Type
 28352 ;;  timer0          2    0[COMRAM] unsigned int 
 28353 ;; Auto vars:     Size  Location     Type
 28354 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 28355 ;; Return value:  Size  Location     Type
 28356 ;;		None               void
 28357 ;; Registers used:
 28358 ;;		None
 28359 ;; Tracked objects:
 28360 ;;		On entry : 0/0
 28361 ;;		On exit  : 0/0
 28362 ;;		Unchanged: 0/0
 28363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28364 ;;      Params:         2       0       0       0       0       0       0
 28365 ;;      Locals:         2       0       0       0       0       0       0
 28366 ;;      Temps:          0       0       0       0       0       0       0
 28367 ;;      Totals:         4       0       0       0       0       0       0
 28368 ;;Total ram usage:        4 bytes
 28369 ;; Hardware stack levels used:    1
 28370 ;; This function calls:
 28371 ;;		Nothing
 28372 ;; This function is called by:
 28373 ;;		_Interrupt
 28374 ;; This function uses a non-reentrant model
 28375 ;;
 28376                           
 28377                           	psect	text85
 28378  005EB6                     __ptext85:
 28379                           	opt stack 0
 28380  005EB6                     i1_WriteTimer0:
 28381                           	opt stack 21
 28382                           
 28383                           ;incstack = 0
 28384                           ;incstack = 0
 28385  005EB6  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 28386  005EBA  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 28387  005EBE  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 28388  005EC2  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 28389  005EC6  0012               	return	
 28390  005EC8                     __end_ofi1_WriteTimer0:
 28391                           	opt stack 0
 28392                           tblptru	equ	0xFF8
 28393                           tblptrh	equ	0xFF7
 28394                           tblptrl	equ	0xFF6
 28395                           tablat	equ	0xFF5
 28396                           prodh	equ	0xFF4
 28397                           prodl	equ	0xFF3
 28398                           intcon	equ	0xFF2
 28399                           indf0	equ	0xFEF
 28400                           postinc0	equ	0xFEE
 28401                           fsr0h	equ	0xFEA
 28402                           fsr0l	equ	0xFE9
 28403                           wreg	equ	0xFE8
 28404                           indf1	equ	0xFE7
 28405                           postinc1	equ	0xFE6
 28406                           postdec1	equ	0xFE5
 28407                           fsr1h	equ	0xFE2
 28408                           fsr1l	equ	0xFE1
 28409                           bsr	equ	0xFE0
 28410                           indf2	equ	0xFDF
 28411                           postinc2	equ	0xFDE
 28412                           postdec2	equ	0xFDD
 28413                           plusw2	equ	0xFDB
 28414                           fsr2h	equ	0xFDA
 28415                           fsr2l	equ	0xFD9
 28416                           status	equ	0xFD8
 28417                           
 28418 ;; *************** function _fifo_getFree *****************
 28419 ;; Defined at:
 28420 ;;		line 97 in file "fifo.c"
 28421 ;; Parameters:    Size  Location     Type
 28422 ;;  f               2    0[COMRAM] PTR struct .
 28423 ;;		 -> canInputFifo(8), 
 28424 ;; Auto vars:     Size  Location     Type
 28425 ;;		None
 28426 ;; Return value:  Size  Location     Type
 28427 ;;                  2    0[COMRAM] unsigned short 
 28428 ;; Registers used:
 28429 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28430 ;; Tracked objects:
 28431 ;;		On entry : F/1
 28432 ;;		On exit  : F/1
 28433 ;;		Unchanged: F/0
 28434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28435 ;;      Params:         2       0       0       0       0       0       0
 28436 ;;      Locals:         0       0       0       0       0       0       0
 28437 ;;      Temps:          8       0       0       0       0       0       0
 28438 ;;      Totals:        10       0       0       0       0       0       0
 28439 ;;Total ram usage:       10 bytes
 28440 ;; Hardware stack levels used:    1
 28441 ;; This function calls:
 28442 ;;		Nothing
 28443 ;; This function is called by:
 28444 ;;		_Interrupt
 28445 ;; This function uses a non-reentrant model
 28446 ;;
 28447                           
 28448                           	psect	text86
 28449  004E14                     __ptext86:
 28450                           	opt stack 0
 28451  004E14                     _fifo_getFree:
 28452                           	opt stack 21
 28453                           
 28454                           ; BSR set to: 1
 28455                           ;fifo.c: 98: if (f->head < f->tail) {
 28456                           
 28457                           ;incstack = 0
 28458                           ;incstack = 0
 28459  004E14  EE20 F004          	lfsr	2,4
 28460  004E18  5001               	movf	fifo_getFree@f,w,c
 28461  004E1A  26D9               	addwf	fsr2l,f,c
 28462  004E1C  5002               	movf	fifo_getFree@f+1,w,c
 28463  004E1E  22DA               	addwfc	fsr2h,f,c
 28464  004E20  EE10 F002          	lfsr	1,2
 28465  004E24  5001               	movf	fifo_getFree@f,w,c
 28466  004E26  26E1               	addwf	fsr1l,f,c
 28467  004E28  5002               	movf	fifo_getFree@f+1,w,c
 28468  004E2A  22E2               	addwfc	fsr1h,f,c
 28469  004E2C  52E6               	movf	postinc1,f,c
 28470  004E2E  52DE               	movf	postinc2,f,c
 28471  004E30  50DD               	movf	postdec2,w,c
 28472  004E32  5CE5               	subwf	postdec1,w,c
 28473  004E34  E102               	bnz	i1u654_25
 28474  004E36  50DF               	movf	indf2,w,c
 28475  004E38  5CE7               	subwf	indf1,w,c
 28476  004E3A                     i1u654_25:
 28477  004E3A  E213               	bc	i1l6660
 28478                           
 28479                           ; BSR set to: 1
 28480                           ;fifo.c: 99: return (f->tail - f->head);
 28481  004E3C  EE20 F002          	lfsr	2,2
 28482  004E40  D834               	call	PL82	;call to abstracted procedure
 28483  004E42  EE20 F004          	lfsr	2,4
 28484  004E46  5001               	movf	fifo_getFree@f,w,c
 28485  004E48  26D9               	addwf	fsr2l,f,c
 28486  004E4A  5002               	movf	fifo_getFree@f+1,w,c
 28487  004E4C  22DA               	addwfc	fsr2h,f,c
 28488  004E4E  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 28489  004E52  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 28490  004E56  5003               	movf	??_fifo_getFree,w,c
 28491  004E58  5C05               	subwf	??_fifo_getFree+2,w,c
 28492  004E5A  6E01               	movwf	?_fifo_getFree,c
 28493  004E5C  5004               	movf	??_fifo_getFree+1,w,c
 28494  004E5E  5806               	subwfb	??_fifo_getFree+3,w,c
 28495  004E60  D022               	goto	L47
 28496  004E62                     i1l6660:
 28497                           
 28498                           ; BSR set to: 1
 28499                           ;fifo.c: 101: else {
 28500                           ;fifo.c: 102: return (f->size + (f->tail - f->head));
 28501  004E62  EE20 F004          	lfsr	2,4
 28502  004E66  D821               	call	PL82	;call to abstracted procedure
 28503  004E68  EE20 F002          	lfsr	2,2
 28504  004E6C  5001               	movf	fifo_getFree@f,w,c
 28505  004E6E  26D9               	addwf	fsr2l,f,c
 28506  004E70  5002               	movf	fifo_getFree@f+1,w,c
 28507  004E72  22DA               	addwfc	fsr2h,f,c
 28508  004E74  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 28509  004E78  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 28510  004E7C  EE20 F006          	lfsr	2,6
 28511  004E80  5001               	movf	fifo_getFree@f,w,c
 28512  004E82  26D9               	addwf	fsr2l,f,c
 28513  004E84  5002               	movf	fifo_getFree@f+1,w,c
 28514  004E86  22DA               	addwfc	fsr2h,f,c
 28515  004E88  CFDE F007          	movff	postinc2,??_fifo_getFree+4
 28516  004E8C  CFDD F008          	movff	postdec2,??_fifo_getFree+5
 28517  004E90  5005               	movf	??_fifo_getFree+2,w,c
 28518  004E92  5C07               	subwf	??_fifo_getFree+4,w,c
 28519  004E94  6E09               	movwf	(??_fifo_getFree+6)& (0+255),c
 28520  004E96  5006               	movf	??_fifo_getFree+3,w,c
 28521  004E98  5808               	subwfb	??_fifo_getFree+5,w,c
 28522  004E9A  6E0A               	movwf	(??_fifo_getFree+7)& (0+255),c
 28523  004E9C  5003               	movf	??_fifo_getFree,w,c
 28524  004E9E  2409               	addwf	??_fifo_getFree+6,w,c
 28525  004EA0  6E01               	movwf	?_fifo_getFree,c
 28526  004EA2  5004               	movf	??_fifo_getFree+1,w,c
 28527  004EA4  200A               	addwfc	??_fifo_getFree+7,w,c
 28528  004EA6                     L47:
 28529  004EA6  6E02               	movwf	?_fifo_getFree+1,c
 28530                           
 28531                           ; BSR set to: 1
 28532  004EA8  0012               	return	
 28533  004EAA                     __end_of_fifo_getFree:
 28534                           	opt stack 0
 28535  004EAA                     PL82:
 28536                           	opt stack 21
 28537  004EAA  5001               	movf	fifo_getFree@f,w,c
 28538  004EAC  26D9               	addwf	fsr2l,f,c
 28539  004EAE  5002               	movf	fifo_getFree@f+1,w,c
 28540  004EB0  22DA               	addwfc	fsr2h,f,c
 28541  004EB2  CFDE F003          	movff	postinc2,??_fifo_getFree
 28542  004EB6  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 28543  004EBA  0012               	return	
 28544  004EBC                     __end_ofPL82:
 28545                           	opt stack 0
 28546                           tblptru	equ	0xFF8
 28547                           tblptrh	equ	0xFF7
 28548                           tblptrl	equ	0xFF6
 28549                           tablat	equ	0xFF5
 28550                           prodh	equ	0xFF4
 28551                           prodl	equ	0xFF3
 28552                           intcon	equ	0xFF2
 28553                           indf0	equ	0xFEF
 28554                           postinc0	equ	0xFEE
 28555                           fsr0h	equ	0xFEA
 28556                           fsr0l	equ	0xFE9
 28557                           wreg	equ	0xFE8
 28558                           indf1	equ	0xFE7
 28559                           postinc1	equ	0xFE6
 28560                           postdec1	equ	0xFE5
 28561                           fsr1h	equ	0xFE2
 28562                           fsr1l	equ	0xFE1
 28563                           bsr	equ	0xFE0
 28564                           indf2	equ	0xFDF
 28565                           postinc2	equ	0xFDE
 28566                           postdec2	equ	0xFDD
 28567                           plusw2	equ	0xFDB
 28568                           fsr2h	equ	0xFDA
 28569                           fsr2l	equ	0xFD9
 28570                           status	equ	0xFD8
 28571                           
 28572 ;; *************** function _ECANReceiveMessage *****************
 28573 ;; Defined at:
 28574 ;;		line 803 in file "ECAN.c"
 28575 ;; Parameters:    Size  Location     Type
 28576 ;;  id              2    9[COMRAM] PTR unsigned long 
 28577 ;;		 -> id(4), 
 28578 ;;  data            2   11[COMRAM] PTR unsigned char 
 28579 ;;		 -> data(8), 
 28580 ;;  dataLen         1   13[COMRAM] PTR unsigned char 
 28581 ;;		 -> dlc(1), 
 28582 ;;  msgFlags        1   14[COMRAM] PTR enum E16324
 28583 ;;		 -> flags(1), 
 28584 ;; Auto vars:     Size  Location     Type
 28585 ;;  ptr             2   20[COMRAM] PTR unsigned char 
 28586 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28587 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28588 ;;  savedPtr        2   15[COMRAM] PTR unsigned char 
 28589 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28590 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28591 ;;  temp            1   19[COMRAM] struct .
 28592 ;;  mode            1   18[COMRAM] unsigned char 
 28593 ;;  i               1   17[COMRAM] unsigned char 
 28594 ;; Return value:  Size  Location     Type
 28595 ;;                  1    wreg      enum E15660
 28596 ;; Registers used:
 28597 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 28598 ;; Tracked objects:
 28599 ;;		On entry : F/1
 28600 ;;		On exit  : 0/0
 28601 ;;		Unchanged: 0/0
 28602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28603 ;;      Params:         6       0       0       0       0       0       0
 28604 ;;      Locals:         7       0       0       0       0       0       0
 28605 ;;      Temps:          0       0       0       0       0       0       0
 28606 ;;      Totals:        13       0       0       0       0       0       0
 28607 ;;Total ram usage:       13 bytes
 28608 ;; Hardware stack levels used:    1
 28609 ;; Hardware stack levels required when called:    1
 28610 ;; This function calls:
 28611 ;;		__ECANPointBuffer
 28612 ;;		__RegsToCANID
 28613 ;; This function is called by:
 28614 ;;		_Interrupt
 28615 ;; This function uses a non-reentrant model
 28616 ;;
 28617                           
 28618                           	psect	text87
 28619  002A86                     __ptext87:
 28620                           	opt stack 0
 28621  002A86                     _ECANReceiveMessage:
 28622                           	opt stack 20
 28623                           
 28624                           ; BSR set to: 1
 28625                           ;ECAN.c: 805: BYTE mode;
 28626                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 28627                           ;ECAN.c: 809: char i;
 28628                           ;ECAN.c: 810: BYTE_VAL temp;
 28629                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 28630                           
 28631                           ; BSR set to: 1
 28632                           ;incstack = 0
 28633                           ;incstack = 0
 28634  002A86  6A29               	clrf	__ECANRxFilterHitInfo,c
 28635                           
 28636                           ; BSR set to: 1
 28637                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 28638  002A88  5077               	movf	3959,w,c	;volatile
 28639  002A8A  0BC0               	andlw	192
 28640  002A8C  6E13               	movwf	ECANReceiveMessage@mode,c
 28641                           
 28642                           ; BSR set to: 1
 28643                           ;ECAN.c: 816: if ( mode == 0x00 )
 28644  002A8E  6613               	tstfsz	ECANReceiveMessage@mode,c
 28645  002A90  D032               	goto	i1l10142
 28646                           
 28647                           ; BSR set to: 1
 28648                           ;ECAN.c: 822: {
 28649                           ;ECAN.c: 824: if ( RXB0FUL )
 28650  002A92  AE60               	btfss	3936,7,c	;volatile
 28651  002A94  D012               	goto	i1l1516
 28652                           
 28653                           ; BSR set to: 1
 28654                           ;ECAN.c: 825: {
 28655                           ;ECAN.c: 827: RXB0IF = 0;
 28656  002A96  90A4               	bcf	4004,0,c	;volatile
 28657                           
 28658                           ;ECAN.c: 830: if ( RXB0OVFL )
 28659  002A98  AE74               	btfss	3956,7,c	;volatile
 28660  002A9A  D006               	goto	i1l10118
 28661                           
 28662                           ; BSR set to: 1
 28663                           ;ECAN.c: 831: {
 28664                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 28665  002A9C  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28666  002A9E  6ED9               	movwf	fsr2l,c
 28667  002AA0  6ADA               	clrf	fsr2h,c
 28668  002AA2  0E00               	movlw	0
 28669  002AA4  86DB               	bsf	plusw2,3,c
 28670                           
 28671                           ; BSR set to: 1
 28672                           ;ECAN.c: 833: RXB0OVFL = 0;
 28673  002AA6  9E74               	bcf	3956,7,c	;volatile
 28674  002AA8                     i1l10118:
 28675                           
 28676                           ; BSR set to: 1
 28677                           ;ECAN.c: 834: }
 28678                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 28679  002AA8  A060               	btfss	3936,0,c	;volatile
 28680  002AAA  D002               	bra	i1u1206_25
 28681  002AAC  8029               	bsf	__ECANRxFilterHitInfo,0,c
 28682  002AAE  D001               	bra	i1u1206_27
 28683  002AB0                     i1u1206_25:
 28684  002AB0  9029               	bcf	__ECANRxFilterHitInfo,0,c
 28685  002AB2                     i1u1206_27:
 28686                           
 28687                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 28688  002AB2  0E0F               	movlw	15	;volatile
 28689  002AB4  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28690  002AB6  0E60               	movlw	96	;volatile
 28691  002AB8  D01A               	goto	L48
 28692  002ABA                     i1l1516:
 28693                           
 28694                           ; BSR set to: 1
 28695                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 28696  002ABA  010F               	movlb	15	; () banked
 28697  002ABC  AF50               	btfss	80,7,b	;volatile
 28698  002ABE  D019               	goto	i1l10136
 28699                           
 28700                           ; BSR set to: 15
 28701                           ;ECAN.c: 842: {
 28702                           ;ECAN.c: 844: RXB1IF = 0;
 28703  002AC0  92A4               	bcf	4004,1,c	;volatile
 28704                           
 28705                           ;ECAN.c: 847: if ( RXB1OVFL )
 28706  002AC2  AC74               	btfss	3956,6,c	;volatile
 28707  002AC4  D006               	goto	i1l10128
 28708                           
 28709                           ; BSR set to: 15
 28710                           ;ECAN.c: 848: {
 28711                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 28712  002AC6  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28713  002AC8  6ED9               	movwf	fsr2l,c
 28714  002ACA  6ADA               	clrf	fsr2h,c
 28715  002ACC  0E00               	movlw	0
 28716  002ACE  86DB               	bsf	plusw2,3,c
 28717                           
 28718                           ; BSR set to: 15
 28719                           ;ECAN.c: 850: RXB1OVFL = 0;
 28720  002AD0  9C74               	bcf	3956,6,c	;volatile
 28721  002AD2                     i1l10128:
 28722                           
 28723                           ; BSR set to: 15
 28724                           ;ECAN.c: 851: }
 28725                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 28726  002AD2  5150               	movf	80,w,b	;volatile
 28727  002AD4  0B07               	andlw	7
 28728  002AD6  6E29               	movwf	__ECANRxFilterHitInfo,c
 28729                           
 28730                           ; BSR set to: 15
 28731                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 28732  002AD8  0E02               	movlw	2
 28733  002ADA  6029               	cpfslt	__ECANRxFilterHitInfo,c
 28734  002ADC  D005               	goto	i1l10134
 28735                           
 28736                           ; BSR set to: 15
 28737                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 28738  002ADE  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28739  002AE0  6ED9               	movwf	fsr2l,c
 28740  002AE2  6ADA               	clrf	fsr2h,c
 28741  002AE4  0E00               	movlw	0
 28742  002AE6  8EDB               	bsf	plusw2,7,c
 28743  002AE8                     i1l10134:
 28744                           
 28745                           ; BSR set to: 15
 28746                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 28747  002AE8  0E0F               	movlw	15	;volatile
 28748  002AEA  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28749  002AEC  0E50               	movlw	80	;volatile
 28750  002AEE                     L48:
 28751  002AEE  6E15               	movwf	ECANReceiveMessage@ptr,c
 28752                           
 28753                           ;ECAN.c: 860: }
 28754  002AF0  D065               	goto	i1l10196
 28755  002AF2                     i1l10136:
 28756                           
 28757                           ;ECAN.c: 861: else
 28758                           ;ECAN.c: 862: return FALSE;
 28759  002AF2  0E00               	movlw	0
 28760  002AF4  D0C6               	goto	i1l1523
 28761  002AF6                     i1l10142:
 28762                           
 28763                           ; BSR set to: 1
 28764                           ;ECAN.c: 869: else if ( mode == 0x40 )
 28765  002AF6  5013               	movf	ECANReceiveMessage@mode,w,c
 28766  002AF8  0A40               	xorlw	64
 28767  002AFA  E146               	bnz	i1l1526
 28768                           
 28769                           ; BSR set to: 1
 28770                           ;ECAN.c: 875: {
 28771                           ;ECAN.c: 876: if ( RXB0FUL )
 28772  002AFC  AE60               	btfss	3936,7,c	;volatile
 28773  002AFE  D004               	goto	i1l1527
 28774                           
 28775                           ; BSR set to: 1
 28776                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 28777  002B00  0E0F               	movlw	15	;volatile
 28778  002B02  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28779  002B04  0E60               	movlw	96	;volatile
 28780  002B06  D03E               	goto	L55
 28781  002B08                     i1l1527:
 28782                           
 28783                           ; BSR set to: 1
 28784                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 28785  002B08  010F               	movlb	15	; () banked
 28786  002B0A  AF50               	btfss	80,7,b	;volatile
 28787  002B0C  D004               	goto	i1l1529
 28788                           
 28789                           ; BSR set to: 15
 28790                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 28791  002B0E  0E0F               	movlw	15	;volatile
 28792  002B10  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28793  002B12  0E50               	movlw	80	;volatile
 28794  002B14  D037               	goto	L55
 28795  002B16                     i1l1529:
 28796                           
 28797                           ; BSR set to: 15
 28798                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 28799  002B16  010D               	movlb	13
 28800  002B18  B5F8               	btfsc	248,2,b	;volatile
 28801  002B1A  D007               	goto	i1l1531
 28802  002B1C  010E               	movlb	14
 28803  002B1E  AF20               	btfss	32,7,b	;volatile
 28804  002B20  D004               	goto	i1l1531
 28805                           
 28806                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 28807  002B22  0E0E               	movlw	14	;volatile
 28808  002B24  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28809  002B26  0E20               	movlw	32	;volatile
 28810  002B28  D02D               	goto	L55
 28811  002B2A                     i1l1531:
 28812                           
 28813                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 28814  002B2A  010D               	movlb	13
 28815  002B2C  B7F8               	btfsc	248,3,b	;volatile
 28816  002B2E  D007               	goto	i1l1533
 28817  002B30  010E               	movlb	14
 28818  002B32  AF30               	btfss	48,7,b	;volatile
 28819  002B34  D004               	goto	i1l1533
 28820                           
 28821                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 28822  002B36  0E0E               	movlw	14	;volatile
 28823  002B38  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28824  002B3A  0E30               	movlw	48	;volatile
 28825  002B3C  D023               	goto	L55
 28826  002B3E                     i1l1533:
 28827                           
 28828                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 28829  002B3E  010D               	movlb	13
 28830  002B40  B9F8               	btfsc	248,4,b	;volatile
 28831  002B42  D007               	goto	i1l1535
 28832  002B44  010E               	movlb	14
 28833  002B46  AF40               	btfss	64,7,b	;volatile
 28834  002B48  D004               	goto	i1l1535
 28835                           
 28836                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 28837  002B4A  0E0E               	movlw	14	;volatile
 28838  002B4C  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28839  002B4E  0E40               	movlw	64	;volatile
 28840  002B50  D019               	goto	L55
 28841  002B52                     i1l1535:
 28842                           
 28843                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 28844  002B52  010D               	movlb	13
 28845  002B54  BBF8               	btfsc	248,5,b	;volatile
 28846  002B56  D005               	goto	i1l1537
 28847  002B58  010E               	movlb	14
 28848  002B5A  AF50               	btfss	80,7,b	;volatile
 28849  002B5C  D002               	goto	i1l1537
 28850                           
 28851                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 28852  002B5E  0E0E               	movlw	14	;volatile
 28853  002B60  D7D7               	goto	L56
 28854  002B62                     i1l1537:
 28855                           
 28856                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 28857  002B62  010D               	movlb	13
 28858  002B64  BDF8               	btfsc	248,6,b	;volatile
 28859  002B66  D005               	goto	i1l1539
 28860  002B68  010E               	movlb	14
 28861  002B6A  AF60               	btfss	96,7,b	;volatile
 28862  002B6C  D002               	goto	i1l1539
 28863                           
 28864                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 28865  002B6E  0E0E               	movlw	14	;volatile
 28866  002B70  D7C8               	goto	L57
 28867  002B72                     i1l1539:
 28868                           
 28869                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 28870  002B72  010D               	movlb	13
 28871  002B74  BFF8               	btfsc	248,7,b	;volatile
 28872  002B76  D7BD               	goto	i1l10136
 28873  002B78  010E               	movlb	14
 28874  002B7A  AF70               	btfss	112,7,b	;volatile
 28875  002B7C  D7BA               	goto	i1l10136
 28876                           
 28877                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 28878  002B7E  0E0E               	movlw	14	;volatile
 28879  002B80  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28880  002B82  0E70               	movlw	112	;volatile
 28881  002B84                     L55:
 28882  002B84  6E15               	movwf	ECANReceiveMessage@ptr,c
 28883  002B86  D00A               	goto	i1l10186
 28884  002B88                     i1l1526:
 28885                           
 28886                           ; BSR set to: 1
 28887                           ;ECAN.c: 910: else
 28888                           ;ECAN.c: 915: {
 28889                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 28890  002B88  AE74               	btfss	3956,7,c	;volatile
 28891  002B8A  D7B3               	goto	i1l10136
 28892                           
 28893                           ; BSR set to: 1
 28894                           ;ECAN.c: 919: {
 28895                           ;ECAN.c: 920: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 28896  002B8C  506F               	movf	3951,w,c	;volatile
 28897  002B8E  0B07               	andlw	7
 28898  002B90  ECB2  F02A         	call	__ECANPointBuffer
 28899  002B94  C001  F015         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 28900  002B98  C002  F016         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 28901  002B9C                     i1l10186:
 28902                           
 28903                           ;ECAN.c: 932: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 28904  002B9C  C015  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 28905  002BA0  C016  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 28906  002BA4  50DF               	movf	indf2,w,c
 28907  002BA6  0B1F               	andlw	31
 28908  002BA8  6E29               	movwf	__ECANRxFilterHitInfo,c
 28909                           
 28910                           ;ECAN.c: 934: RXB1IF = 0;
 28911  002BAA  92A4               	bcf	4004,1,c	;volatile
 28912                           
 28913                           ;ECAN.c: 936: if ( RXB1OVFL )
 28914  002BAC  AC74               	btfss	3956,6,c	;volatile
 28915  002BAE  D006               	goto	i1l10196
 28916                           
 28917                           ;ECAN.c: 937: {
 28918                           ;ECAN.c: 938: *msgFlags |= ECAN_RX_OVERFLOW;
 28919  002BB0  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28920  002BB2  6ED9               	movwf	fsr2l,c
 28921  002BB4  6ADA               	clrf	fsr2h,c
 28922  002BB6  0E00               	movlw	0
 28923  002BB8  86DB               	bsf	plusw2,3,c
 28924                           
 28925                           ;ECAN.c: 939: RXB1OVFL = 0;
 28926  002BBA  9C74               	bcf	3956,6,c	;volatile
 28927  002BBC                     i1l10196:
 28928                           
 28929                           ;ECAN.c: 944: savedPtr = ptr;
 28930  002BBC  C015  F010         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 28931  002BC0  C016  F011         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 28932                           
 28933                           ;ECAN.c: 945: *msgFlags = 0;
 28934  002BC4  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28935  002BC6  6ED9               	movwf	fsr2l,c
 28936  002BC8  6ADA               	clrf	fsr2h,c
 28937  002BCA  6ADF               	clrf	indf2,c
 28938                           
 28939                           ;ECAN.c: 948: temp.Val = *(ptr+5);
 28940  002BCC  EE20 F005          	lfsr	2,5
 28941  002BD0  D859               	call	PL104	;call to abstracted procedure
 28942                           
 28943                           ;ECAN.c: 949: *dataLen = temp.Val & 0b00001111;
 28944  002BD2  500E               	movf	ECANReceiveMessage@dataLen,w,c
 28945  002BD4  6ED9               	movwf	fsr2l,c
 28946  002BD6  6ADA               	clrf	fsr2h,c
 28947  002BD8  5014               	movf	ECANReceiveMessage@temp,w,c
 28948  002BDA  0B0F               	andlw	15
 28949  002BDC  6EDF               	movwf	indf2,c
 28950                           
 28951                           ;ECAN.c: 952: if ( temp.bits.b6 )
 28952  002BDE  AC14               	btfss	ECANReceiveMessage@temp,6,c
 28953  002BE0  D005               	goto	i1l1547
 28954                           
 28955                           ;ECAN.c: 953: *msgFlags |= ECAN_RX_RTR_FRAME;
 28956  002BE2  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28957  002BE4  6ED9               	movwf	fsr2l,c
 28958  002BE6  6ADA               	clrf	fsr2h,c
 28959  002BE8  0E00               	movlw	0
 28960  002BEA  8CDB               	bsf	plusw2,6,c
 28961  002BEC                     i1l1547:
 28962                           
 28963                           ;ECAN.c: 956: temp.Val = *(ptr+2);
 28964  002BEC  EE20 F002          	lfsr	2,2
 28965  002BF0  D849               	call	PL104	;call to abstracted procedure
 28966                           
 28967                           ;ECAN.c: 957: if ( temp.bits.b3 )
 28968  002BF2  A614               	btfss	ECANReceiveMessage@temp,3,c
 28969  002BF4  D008               	goto	i1l1548
 28970                           
 28971                           ;ECAN.c: 958: {
 28972                           ;ECAN.c: 959: *msgFlags |= ECAN_RX_XTD_FRAME;
 28973  002BF6  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28974  002BF8  6ED9               	movwf	fsr2l,c
 28975  002BFA  6ADA               	clrf	fsr2h,c
 28976  002BFC  0E00               	movlw	0
 28977  002BFE  8ADB               	bsf	plusw2,5,c
 28978                           
 28979                           ;ECAN.c: 960: temp.Val = 1;
 28980  002C00  0E01               	movlw	1
 28981  002C02  6E14               	movwf	ECANReceiveMessage@temp,c
 28982                           
 28983                           ;ECAN.c: 961: }
 28984  002C04  D001               	goto	i1l10214
 28985  002C06                     i1l1548:
 28986                           
 28987                           ;ECAN.c: 962: else
 28988                           ;ECAN.c: 963: temp.Val = 0;
 28989  002C06  6A14               	clrf	ECANReceiveMessage@temp,c
 28990  002C08                     i1l10214:
 28991                           
 28992                           ;ECAN.c: 965: _RegsToCANID(ptr+1, id, temp.Val);
 28993  002C08  2815               	incf	ECANReceiveMessage@ptr,w,c
 28994  002C0A  6E01               	movwf	?__RegsToCANID,c
 28995  002C0C  0E00               	movlw	0
 28996  002C0E  2016               	addwfc	ECANReceiveMessage@ptr+1,w,c
 28997  002C10  6E02               	movwf	?__RegsToCANID+1,c
 28998  002C12  C00A  F003         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 28999  002C16  C00B  F004         	movff	ECANReceiveMessage@id+1,?__RegsToCANID+3
 29000  002C1A  C014  F005         	movff	ECANReceiveMessage@temp,?__RegsToCANID+4
 29001  002C1E  EC86  F01E         	call	__RegsToCANID	;wreg free
 29002                           
 29003                           ;ECAN.c: 968: ptr += 6;
 29004  002C22  0E06               	movlw	6
 29005  002C24  2615               	addwf	ECANReceiveMessage@ptr,f,c
 29006  002C26  0E00               	movlw	0
 29007  002C28  2216               	addwfc	ECANReceiveMessage@ptr+1,f,c
 29008                           
 29009                           ;ECAN.c: 969: temp.Val = *dataLen;
 29010  002C2A  500E               	movf	ECANReceiveMessage@dataLen,w,c
 29011  002C2C  6ED9               	movwf	fsr2l,c
 29012  002C2E  6ADA               	clrf	fsr2h,c
 29013  002C30  50DF               	movf	indf2,w,c
 29014  002C32  6E14               	movwf	ECANReceiveMessage@temp,c
 29015                           
 29016                           ;ECAN.c: 970: for ( i = 0; i < temp.Val; i++ )
 29017  002C34  6A12               	clrf	ECANReceiveMessage@i,c
 29018  002C36  D00F               	goto	i1l10230
 29019  002C38                     i1l10222:
 29020                           
 29021                           ;ECAN.c: 971: *data++ = *ptr++;
 29022  002C38  C015  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 29023  002C3C  C016  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 29024  002C40  C00C  FFE1         	movff	ECANReceiveMessage@data,fsr1l
 29025  002C44  C00D  FFE2         	movff	ECANReceiveMessage@data+1,fsr1h
 29026  002C48  CFDF FFE7          	movff	indf2,indf1
 29027  002C4C  4A15               	infsnz	ECANReceiveMessage@ptr,f,c
 29028  002C4E  2A16               	incf	ECANReceiveMessage@ptr+1,f,c
 29029  002C50  4A0C               	infsnz	ECANReceiveMessage@data,f,c
 29030  002C52  2A0D               	incf	ECANReceiveMessage@data+1,f,c
 29031  002C54  2A12               	incf	ECANReceiveMessage@i,f,c
 29032  002C56                     i1l10230:
 29033  002C56  5014               	movf	ECANReceiveMessage@temp,w,c
 29034  002C58  5C12               	subwf	ECANReceiveMessage@i,w,c
 29035  002C5A  E3EE               	bnc	i1l10222
 29036                           
 29037                           ;ECAN.c: 974: if ( IRXIF )
 29038  002C5C  AEA4               	btfss	4004,7,c	;volatile
 29039  002C5E  D006               	goto	i1l10236
 29040                           
 29041                           ;ECAN.c: 975: {
 29042                           ;ECAN.c: 976: *msgFlags |= ECAN_RX_INVALID_MSG;
 29043  002C60  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 29044  002C62  6ED9               	movwf	fsr2l,c
 29045  002C64  6ADA               	clrf	fsr2h,c
 29046  002C66  0E00               	movlw	0
 29047  002C68  88DB               	bsf	plusw2,4,c
 29048                           
 29049                           ;ECAN.c: 977: IRXIF = 0;
 29050  002C6A  9EA4               	bcf	4004,7,c	;volatile
 29051  002C6C                     i1l10236:
 29052                           
 29053                           ;ECAN.c: 978: }
 29054                           ;ECAN.c: 981: *savedPtr &= 0x7f;
 29055  002C6C  C010  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 29056  002C70  C011  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 29057  002C74  0E7F               	movlw	127
 29058  002C76  16DF               	andwf	indf2,f,c
 29059                           
 29060                           ;ECAN.c: 985: if ( mode == 0x80 )
 29061  002C78  5013               	movf	ECANReceiveMessage@mode,w,c
 29062  002C7A  0A80               	xorlw	128
 29063  002C7C  B4D8               	btfsc	status,2,c
 29064                           
 29065                           ;ECAN.c: 986: FIFOEMPTY = 0;
 29066  002C7E  9E74               	bcf	3956,7,c	;volatile
 29067                           
 29068                           ;ECAN.c: 992: return TRUE;
 29069  002C80  0E01               	movlw	1
 29070  002C82                     i1l1523:
 29071  002C82  0012               	return	
 29072  002C84                     __end_of_ECANReceiveMessage:
 29073                           	opt stack 0
 29074  002C84                     PL104:
 29075                           	opt stack 20
 29076  002C84  5015               	movf	ECANReceiveMessage@ptr,w,c
 29077  002C86  26D9               	addwf	fsr2l,f,c
 29078  002C88  5016               	movf	ECANReceiveMessage@ptr+1,w,c
 29079  002C8A  22DA               	addwfc	fsr2h,f,c
 29080  002C8C  50DF               	movf	indf2,w,c
 29081  002C8E  6E14               	movwf	ECANReceiveMessage@temp,c
 29082  002C90  0012               	return	
 29083  002C92                     __end_ofPL104:
 29084                           	opt stack 0
 29085                           tblptru	equ	0xFF8
 29086                           tblptrh	equ	0xFF7
 29087                           tblptrl	equ	0xFF6
 29088                           tablat	equ	0xFF5
 29089                           prodh	equ	0xFF4
 29090                           prodl	equ	0xFF3
 29091                           intcon	equ	0xFF2
 29092                           indf0	equ	0xFEF
 29093                           postinc0	equ	0xFEE
 29094                           fsr0h	equ	0xFEA
 29095                           fsr0l	equ	0xFE9
 29096                           wreg	equ	0xFE8
 29097                           indf1	equ	0xFE7
 29098                           postinc1	equ	0xFE6
 29099                           postdec1	equ	0xFE5
 29100                           fsr1h	equ	0xFE2
 29101                           fsr1l	equ	0xFE1
 29102                           bsr	equ	0xFE0
 29103                           indf2	equ	0xFDF
 29104                           postinc2	equ	0xFDE
 29105                           postdec2	equ	0xFDD
 29106                           plusw2	equ	0xFDB
 29107                           fsr2h	equ	0xFDA
 29108                           fsr2l	equ	0xFD9
 29109                           status	equ	0xFD8
 29110                           
 29111 ;; *************** function __RegsToCANID *****************
 29112 ;; Defined at:
 29113 ;;		line 1158 in file "ECAN.c"
 29114 ;; Parameters:    Size  Location     Type
 29115 ;;  ptr             2    0[COMRAM] PTR unsigned char 
 29116 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 29117 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 29118 ;;  val             2    2[COMRAM] PTR unsigned long 
 29119 ;;		 -> id(4), 
 29120 ;;  type            1    4[COMRAM] unsigned char 
 29121 ;; Auto vars:     Size  Location     Type
 29122 ;;  Value           2    7[COMRAM] PTR struct _CAN_MESSAGE_
 29123 ;;		 -> id(4), 
 29124 ;; Return value:  Size  Location     Type
 29125 ;;		None               void
 29126 ;; Registers used:
 29127 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 29128 ;; Tracked objects:
 29129 ;;		On entry : 0/1
 29130 ;;		On exit  : 0/0
 29131 ;;		Unchanged: 0/0
 29132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29133 ;;      Params:         5       0       0       0       0       0       0
 29134 ;;      Locals:         2       0       0       0       0       0       0
 29135 ;;      Temps:          2       0       0       0       0       0       0
 29136 ;;      Totals:         9       0       0       0       0       0       0
 29137 ;;Total ram usage:        9 bytes
 29138 ;; Hardware stack levels used:    1
 29139 ;; This function calls:
 29140 ;;		Nothing
 29141 ;; This function is called by:
 29142 ;;		_ECANReceiveMessage
 29143 ;; This function uses a non-reentrant model
 29144 ;;
 29145                           
 29146                           	psect	text88
 29147  003D0C                     __ptext88:
 29148                           	opt stack 0
 29149  003D0C                     __RegsToCANID:
 29150                           	opt stack 20
 29151                           
 29152                           ;ECAN.c: 1159: CAN_MESSAGE_ID *Value;
 29153                           ;ECAN.c: 1161: Value = (CAN_MESSAGE_ID*)val;
 29154                           
 29155                           ;incstack = 0
 29156                           ;incstack = 0
 29157  003D0C  C003  F008         	movff	__RegsToCANID@val,__RegsToCANID@Value
 29158  003D10  C004  F009         	movff	__RegsToCANID@val+1,__RegsToCANID@Value+1
 29159                           
 29160                           ;ECAN.c: 1163: if ( type == 0 )
 29161  003D14  6605               	tstfsz	__RegsToCANID@type,c
 29162  003D16  D038               	goto	i1l9886
 29163                           
 29164                           ;ECAN.c: 1164: {
 29165                           ;ECAN.c: 1166: Value->BYTES.BYTE_1 = (*ptr << 3);
 29166  003D18  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 29167  003D1C  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 29168  003D20  50DF               	movf	indf2,w,c
 29169  003D22  6E06               	movwf	??__RegsToCANID& (0+255),c
 29170  003D24  90D8               	bcf	status,0,c
 29171  003D26  3606               	rlcf	??__RegsToCANID,f,c
 29172  003D28  90D8               	bcf	status,0,c
 29173  003D2A  3606               	rlcf	??__RegsToCANID,f,c
 29174  003D2C  90D8               	bcf	status,0,c
 29175  003D2E  3406               	rlcf	??__RegsToCANID,w,c
 29176  003D30  C008  FFD9         	movff	__RegsToCANID@Value,fsr2l
 29177  003D34  C009  FFDA         	movff	__RegsToCANID@Value+1,fsr2h
 29178  003D38  6EDF               	movwf	indf2,c
 29179                           
 29180                           ;ECAN.c: 1167: Value->BYTES.BYTE_2 = *ptr >> 5;
 29181  003D3A  EE20 F001          	lfsr	2,1
 29182  003D3E  D864               	call	PL22	;call to abstracted procedure
 29183  003D40  0E05               	movlw	5
 29184  003D42  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 29185  003D44                     i1u1166_25:
 29186  003D44  90D8               	bcf	status,0,c
 29187  003D46  3206               	rrcf	??__RegsToCANID,f,c
 29188  003D48  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 29189  003D4A  D7FC               	goto	i1u1166_25
 29190  003D4C  5006               	movf	??__RegsToCANID,w,c
 29191                           
 29192                           ;ECAN.c: 1168: ptr++;
 29193                           
 29194                           ;ECAN.c: 1169: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 29195  003D4E  D871               	call	PL72	;call to abstracted procedure
 29196  003D50  0E05               	movlw	5
 29197  003D52  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 29198  003D54                     i1u1167_25:
 29199  003D54  90D8               	bcf	status,0,c
 29200  003D56  3206               	rrcf	??__RegsToCANID,f,c
 29201  003D58  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 29202  003D5A  D7FC               	goto	i1u1167_25
 29203  003D5C  C008  FFD9         	movff	__RegsToCANID@Value,fsr2l
 29204  003D60  C009  FFDA         	movff	__RegsToCANID@Value+1,fsr2h
 29205  003D64  5006               	movf	??__RegsToCANID,w,c
 29206  003D66  12DF               	iorwf	indf2,f,c
 29207                           
 29208                           ;ECAN.c: 1170: Value->BYTES.BYTE_3 = 0x00;
 29209  003D68  EE20 F002          	lfsr	2,2
 29210  003D6C  5008               	movf	__RegsToCANID@Value,w,c
 29211  003D6E  26D9               	addwf	fsr2l,f,c
 29212  003D70  5009               	movf	__RegsToCANID@Value+1,w,c
 29213  003D72  22DA               	addwfc	fsr2h,f,c
 29214  003D74  6ADF               	clrf	indf2,c
 29215                           
 29216                           ;ECAN.c: 1171: Value->BYTES.BYTE_4 = 0x00;
 29217  003D76  EE20 F003          	lfsr	2,3
 29218  003D7A  5008               	movf	__RegsToCANID@Value,w,c
 29219  003D7C  26D9               	addwf	fsr2l,f,c
 29220  003D7E  5009               	movf	__RegsToCANID@Value+1,w,c
 29221  003D80  22DA               	addwfc	fsr2h,f,c
 29222  003D82  0E00               	movlw	0
 29223  003D84  6EDF               	movwf	indf2,c
 29224                           
 29225                           ;ECAN.c: 1172: }
 29226  003D86  D03F               	goto	i1l1570
 29227  003D88                     i1l9886:
 29228                           
 29229                           ;ECAN.c: 1173: else
 29230                           ;ECAN.c: 1174: {
 29231                           ;ECAN.c: 1176: Value->BYTES.BYTE_3 = (*ptr << 5);
 29232  003D88  EE20 F002          	lfsr	2,2
 29233  003D8C  D83D               	call	PL22	;call to abstracted procedure
 29234  003D8E  0E05               	movlw	5
 29235  003D90  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 29236  003D92                     i1u1168_25:
 29237  003D92  90D8               	bcf	status,0,c
 29238  003D94  3606               	rlcf	??__RegsToCANID,f,c
 29239  003D96  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 29240  003D98  D7FC               	goto	i1u1168_25
 29241  003D9A  5006               	movf	??__RegsToCANID,w,c
 29242  003D9C  6EDF               	movwf	indf2,c
 29243                           
 29244                           ;ECAN.c: 1177: Value->BYTES.BYTE_4 = (*ptr >> 3);
 29245  003D9E  EE20 F003          	lfsr	2,3
 29246  003DA2  D832               	call	PL22	;call to abstracted procedure
 29247  003DA4  90D8               	bcf	status,0,c
 29248  003DA6  3206               	rrcf	??__RegsToCANID,f,c
 29249  003DA8  90D8               	bcf	status,0,c
 29250  003DAA  3206               	rrcf	??__RegsToCANID,f,c
 29251  003DAC  90D8               	bcf	status,0,c
 29252  003DAE  3006               	rrcf	??__RegsToCANID,w,c
 29253                           
 29254                           ;ECAN.c: 1178: ptr++;
 29255                           
 29256                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 29257  003DB0  D840               	call	PL72	;call to abstracted procedure
 29258  003DB2  0E03               	movlw	3
 29259  003DB4  D834               	call	PL68	;call to abstracted procedure
 29260                           
 29261                           ;ECAN.c: 1181: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 29262  003DB6  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 29263  003DBA  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 29264  003DBE  50DF               	movf	indf2,w,c
 29265  003DC0  6E06               	movwf	??__RegsToCANID& (0+255),c
 29266  003DC2  90D8               	bcf	status,0,c
 29267  003DC4  3206               	rrcf	??__RegsToCANID,f,c
 29268  003DC6  90D8               	bcf	status,0,c
 29269  003DC8  3206               	rrcf	??__RegsToCANID,f,c
 29270  003DCA  90D8               	bcf	status,0,c
 29271  003DCC  3206               	rrcf	??__RegsToCANID,f,c
 29272  003DCE  0E1C               	movlw	28
 29273  003DD0  D826               	call	PL68	;call to abstracted procedure
 29274                           
 29275                           ;ECAN.c: 1182: ptr++;
 29276  003DD2  4A01               	infsnz	__RegsToCANID@ptr,f,c
 29277  003DD4  2A02               	incf	__RegsToCANID@ptr+1,f,c
 29278                           
 29279                           ;ECAN.c: 1183: Value->BYTES.BYTE_2 = *ptr;
 29280  003DD6  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 29281  003DDA  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 29282  003DDE  EE10 F001          	lfsr	1,1
 29283  003DE2  5008               	movf	__RegsToCANID@Value,w,c
 29284  003DE4  26E1               	addwf	fsr1l,f,c
 29285  003DE6  5009               	movf	__RegsToCANID@Value+1,w,c
 29286  003DE8  22E2               	addwfc	fsr1h,f,c
 29287  003DEA  CFDF FFE7          	movff	indf2,indf1
 29288                           
 29289                           ;ECAN.c: 1184: ptr++;
 29290  003DEE  4A01               	infsnz	__RegsToCANID@ptr,f,c
 29291  003DF0  2A02               	incf	__RegsToCANID@ptr+1,f,c
 29292                           
 29293                           ;ECAN.c: 1185: Value->BYTES.BYTE_1 = *ptr;
 29294  003DF2  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 29295  003DF6  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 29296  003DFA  C008  FFE1         	movff	__RegsToCANID@Value,fsr1l
 29297  003DFE  C009  FFE2         	movff	__RegsToCANID@Value+1,fsr1h
 29298  003E02  CFDF FFE7          	movff	indf2,indf1
 29299  003E06                     i1l1570:
 29300  003E06  0012               	return	
 29301  003E08                     __end_of__RegsToCANID:
 29302                           	opt stack 0
 29303  003E08                     PL22:
 29304                           	opt stack 20
 29305  003E08  5008               	movf	__RegsToCANID@Value,w,c
 29306  003E0A  26D9               	addwf	fsr2l,f,c
 29307  003E0C  5009               	movf	__RegsToCANID@Value+1,w,c
 29308  003E0E  22DA               	addwfc	fsr2h,f,c
 29309  003E10  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 29310  003E14  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 29311  003E18  50E7               	movf	indf1,w,c
 29312  003E1A  6E06               	movwf	??__RegsToCANID& (0+255),c
 29313  003E1C  0012               	return	
 29314  003E1E                     __end_ofPL22:
 29315                           	opt stack 0
 29316  003E1E                     PL68:
 29317                           	opt stack 20
 29318  003E1E  1606               	andwf	??__RegsToCANID,f,c
 29319  003E20  EE20 F002          	lfsr	2,2
 29320  003E24  5008               	movf	__RegsToCANID@Value,w,c
 29321  003E26  26D9               	addwf	fsr2l,f,c
 29322  003E28  5009               	movf	__RegsToCANID@Value+1,w,c
 29323  003E2A  22DA               	addwfc	fsr2h,f,c
 29324  003E2C  5006               	movf	??__RegsToCANID,w,c
 29325  003E2E  12DF               	iorwf	indf2,f,c
 29326  003E30  0012               	return	
 29327  003E32                     __end_ofPL68:
 29328                           	opt stack 0
 29329  003E32                     PL72:
 29330                           	opt stack 20
 29331  003E32  6EDF               	movwf	indf2,c
 29332  003E34  4A01               	infsnz	__RegsToCANID@ptr,f,c
 29333  003E36  2A02               	incf	__RegsToCANID@ptr+1,f,c
 29334  003E38  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 29335  003E3C  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 29336  003E40  50DF               	movf	indf2,w,c
 29337  003E42  6E06               	movwf	??__RegsToCANID& (0+255),c
 29338  003E44  0012               	return	
 29339  003E46                     __end_ofPL72:
 29340                           	opt stack 0
 29341                           tblptru	equ	0xFF8
 29342                           tblptrh	equ	0xFF7
 29343                           tblptrl	equ	0xFF6
 29344                           tablat	equ	0xFF5
 29345                           prodh	equ	0xFF4
 29346                           prodl	equ	0xFF3
 29347                           intcon	equ	0xFF2
 29348                           indf0	equ	0xFEF
 29349                           postinc0	equ	0xFEE
 29350                           fsr0h	equ	0xFEA
 29351                           fsr0l	equ	0xFE9
 29352                           wreg	equ	0xFE8
 29353                           indf1	equ	0xFE7
 29354                           postinc1	equ	0xFE6
 29355                           postdec1	equ	0xFE5
 29356                           fsr1h	equ	0xFE2
 29357                           fsr1l	equ	0xFE1
 29358                           bsr	equ	0xFE0
 29359                           indf2	equ	0xFDF
 29360                           postinc2	equ	0xFDE
 29361                           postdec2	equ	0xFDD
 29362                           plusw2	equ	0xFDB
 29363                           fsr2h	equ	0xFDA
 29364                           fsr2l	equ	0xFD9
 29365                           status	equ	0xFD8
 29366                           
 29367 ;; *************** function __ECANPointBuffer *****************
 29368 ;; Defined at:
 29369 ;;		line 1209 in file "ECAN.c"
 29370 ;; Parameters:    Size  Location     Type
 29371 ;;  b               1    wreg     unsigned char 
 29372 ;; Auto vars:     Size  Location     Type
 29373 ;;  b               1    3[COMRAM] unsigned char 
 29374 ;;  pt              2    4[COMRAM] PTR unsigned char 
 29375 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 29376 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 29377 ;; Return value:  Size  Location     Type
 29378 ;;                  2    0[COMRAM] PTR unsigned char 
 29379 ;; Registers used:
 29380 ;;		wreg, status,2, status,0
 29381 ;; Tracked objects:
 29382 ;;		On entry : F/1
 29383 ;;		On exit  : 0/0
 29384 ;;		Unchanged: 0/0
 29385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29386 ;;      Params:         3       0       0       0       0       0       0
 29387 ;;      Locals:         3       0       0       0       0       0       0
 29388 ;;      Temps:          0       0       0       0       0       0       0
 29389 ;;      Totals:         6       0       0       0       0       0       0
 29390 ;;Total ram usage:        6 bytes
 29391 ;; Hardware stack levels used:    1
 29392 ;; This function calls:
 29393 ;;		Nothing
 29394 ;; This function is called by:
 29395 ;;		_ECANReceiveMessage
 29396 ;; This function uses a non-reentrant model
 29397 ;;
 29398                           
 29399                           	psect	text89
 29400  005564                     __ptext89:
 29401                           	opt stack 0
 29402  005564                     __ECANPointBuffer:
 29403                           	opt stack 20
 29404                           
 29405                           ;incstack = 0
 29406                           ;incstack = 0
 29407                           ;__ECANPointBuffer@b stored from wreg
 29408  005564  CFE8 F004          	movff	wreg,__ECANPointBuffer@b
 29409                           
 29410                           ; BSR set to: 1
 29411                           ;ECAN.c: 1210: BYTE* pt;
 29412                           ;ECAN.c: 1212: switch(b)
 29413  005568  D024               	goto	i1l9870
 29414  00556A                     i1l9852:
 29415                           
 29416                           ; BSR set to: 1
 29417                           ;ECAN.c: 1215: pt=(BYTE*)&RXB0CON;
 29418  00556A  0E0F               	movlw	15	;volatile
 29419  00556C  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29420  00556E  0E60               	movlw	96	;volatile
 29421  005570  D01E               	goto	L64
 29422  005572                     i1l9854:
 29423                           
 29424                           ; BSR set to: 1
 29425                           ;ECAN.c: 1218: pt=(BYTE*)&RXB1CON;
 29426  005572  010F               	movlb	15	; () banked
 29427  005574  0E0F               	movlw	15	;volatile
 29428  005576  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29429  005578  0E50               	movlw	80	;volatile
 29430  00557A  D019               	goto	L64
 29431  00557C                     i1l9856:
 29432                           
 29433                           ; BSR set to: 1
 29434                           ;ECAN.c: 1221: pt=(BYTE*)&B0CON;
 29435  00557C  010E               	movlb	14	; () banked
 29436  00557E  0E0E               	movlw	14	;volatile
 29437  005580  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29438  005582  0E20               	movlw	32	;volatile
 29439  005584  D014               	goto	L64
 29440  005586                     i1l9858:
 29441                           
 29442                           ; BSR set to: 1
 29443                           ;ECAN.c: 1224: pt=(BYTE*)&B1CON;
 29444  005586  010E               	movlb	14	; () banked
 29445  005588  0E0E               	movlw	14	;volatile
 29446  00558A  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29447  00558C  0E30               	movlw	48	;volatile
 29448  00558E  D00F               	goto	L64
 29449  005590                     i1l9860:
 29450                           
 29451                           ; BSR set to: 1
 29452                           ;ECAN.c: 1227: pt=(BYTE*)&B2CON;
 29453  005590  010E               	movlb	14	; () banked
 29454  005592  0E0E               	movlw	14	;volatile
 29455  005594  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29456  005596  0E40               	movlw	64	;volatile
 29457  005598  D00A               	goto	L64
 29458  00559A                     i1l9862:
 29459                           
 29460                           ; BSR set to: 1
 29461                           ;ECAN.c: 1230: pt=(BYTE*)&B3CON;
 29462  00559A  010E               	movlb	14	; () banked
 29463  00559C  0E0E               	movlw	14	;volatile
 29464  00559E  D7EB               	goto	L65
 29465  0055A0                     i1l9864:
 29466                           
 29467                           ; BSR set to: 1
 29468                           ;ECAN.c: 1233: pt=(BYTE*)&B4CON;
 29469  0055A0  010E               	movlb	14	; () banked
 29470  0055A2  0E0E               	movlw	14	;volatile
 29471  0055A4  D7E3               	goto	L66
 29472  0055A6                     i1l9866:
 29473                           
 29474                           ; BSR set to: 1
 29475                           ;ECAN.c: 1236: pt=(BYTE*)&B5CON;
 29476  0055A6  010E               	movlb	14	; () banked
 29477  0055A8  0E0E               	movlw	14	;volatile
 29478  0055AA  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29479  0055AC  0E70               	movlw	112	;volatile
 29480  0055AE                     L64:
 29481  0055AE  6E05               	movwf	__ECANPointBuffer@pt,c
 29482                           
 29483                           ;ECAN.c: 1237: break;
 29484  0055B0  D00F               	goto	i1l1575
 29485  0055B2                     i1l9870:
 29486                           
 29487                           ; BSR set to: 1
 29488  0055B2  5004               	movf	__ECANPointBuffer@b,w,c
 29489                           
 29490                           ; Switch size 1, requested type "space"
 29491                           ; Number of cases is 7, Range of values is 0 to 6
 29492                           ; switch strategies available:
 29493                           ; Name         Instructions Cycles
 29494                           ; simple_byte           22    12 (average)
 29495                           ;	Chosen strategy is simple_byte
 29496  0055B4  E0DA               	bz	i1l9852
 29497  0055B6  0A01               	xorlw	1	; case 1
 29498  0055B8  E0DC               	bz	i1l9854
 29499  0055BA  0A03               	xorlw	3	; case 2
 29500  0055BC  E0DF               	bz	i1l9856
 29501  0055BE  0A01               	xorlw	1	; case 3
 29502  0055C0  E0E2               	bz	i1l9858
 29503  0055C2  0A07               	xorlw	7	; case 4
 29504  0055C4  E0E5               	bz	i1l9860
 29505  0055C6  0A01               	xorlw	1	; case 5
 29506  0055C8  E0E8               	bz	i1l9862
 29507  0055CA  0A03               	xorlw	3	; case 6
 29508  0055CC  E0E9               	bz	i1l9864
 29509  0055CE  D7EB               	goto	i1l9866
 29510  0055D0                     i1l1575:
 29511                           
 29512                           ;ECAN.c: 1239: return (pt);
 29513  0055D0  C005  F001         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 29514  0055D4  C006  F002         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 29515  0055D8  0012               	return	
 29516  0055DA                     __end_of__ECANPointBuffer:
 29517                           	opt stack 0
 29518                           tblptru	equ	0xFF8
 29519                           tblptrh	equ	0xFF7
 29520                           tblptrl	equ	0xFF6
 29521                           tablat	equ	0xFF5
 29522                           prodh	equ	0xFF4
 29523                           prodl	equ	0xFF3
 29524                           intcon	equ	0xFF2
 29525                           indf0	equ	0xFEF
 29526                           postinc0	equ	0xFEE
 29527                           fsr0h	equ	0xFEA
 29528                           fsr0l	equ	0xFE9
 29529                           wreg	equ	0xFE8
 29530                           indf1	equ	0xFE7
 29531                           postinc1	equ	0xFE6
 29532                           postdec1	equ	0xFE5
 29533                           fsr1h	equ	0xFE2
 29534                           fsr1l	equ	0xFE1
 29535                           bsr	equ	0xFE0
 29536                           indf2	equ	0xFDF
 29537                           postinc2	equ	0xFDE
 29538                           postdec2	equ	0xFDD
 29539                           plusw2	equ	0xFDB
 29540                           fsr2h	equ	0xFDA
 29541                           fsr2l	equ	0xFD9
 29542                           status	equ	0xFD8
 29543                           
 29544 ;; *************** function _fifo_write *****************
 29545 ;; Defined at:
 29546 ;;		line 61 in file "fifo.c"
 29547 ;; Parameters:    Size  Location     Type
 29548 ;;  f               2    0[COMRAM] PTR struct .
 29549 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 29550 ;;  buf             2    2[COMRAM] PTR const void 
 29551 ;;		 -> dlc(1), data(8), id(4), Interrupt@c(1), 
 29552 ;;  nbytes          4    4[COMRAM] unsigned long 
 29553 ;; Auto vars:     Size  Location     Type
 29554 ;;  i               4   14[COMRAM] unsigned long 
 29555 ;;  p               2   12[COMRAM] PTR const unsigned char 
 29556 ;;		 -> dlc(1), data(8), id(4), Interrupt@c(1), 
 29557 ;; Return value:  Size  Location     Type
 29558 ;;                  2    0[COMRAM] unsigned short 
 29559 ;; Registers used:
 29560 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 29561 ;; Tracked objects:
 29562 ;;		On entry : F/1
 29563 ;;		On exit  : F/1
 29564 ;;		Unchanged: F/0
 29565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29566 ;;      Params:         8       0       0       0       0       0       0
 29567 ;;      Locals:         6       0       0       0       0       0       0
 29568 ;;      Temps:          4       0       0       0       0       0       0
 29569 ;;      Totals:        18       0       0       0       0       0       0
 29570 ;;Total ram usage:       18 bytes
 29571 ;; Hardware stack levels used:    1
 29572 ;; This function calls:
 29573 ;;		Nothing
 29574 ;; This function is called by:
 29575 ;;		_Interrupt
 29576 ;; This function uses a non-reentrant model
 29577 ;;
 29578                           
 29579                           	psect	text90
 29580  003E46                     __ptext90:
 29581                           	opt stack 0
 29582  003E46                     _fifo_write:
 29583                           	opt stack 21
 29584                           
 29585                           ; BSR set to: 1
 29586                           ;fifo.c: 62: uint32_t i;
 29587                           ;fifo.c: 63: const uint8_t *p;
 29588                           ;fifo.c: 64: p = buf;
 29589                           
 29590                           ;incstack = 0
 29591                           ;incstack = 0
 29592  003E46  C003  F00D         	movff	fifo_write@buf,fifo_write@p
 29593  003E4A  C004  F00E         	movff	fifo_write@buf+1,fifo_write@p+1
 29594                           
 29595                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 29596  003E4E  6A0F               	clrf	fifo_write@i,c
 29597  003E50  6A10               	clrf	fifo_write@i+1,c
 29598  003E52  6A11               	clrf	fifo_write@i+2,c
 29599  003E54  6A12               	clrf	fifo_write@i+3,c
 29600  003E56  D068               	goto	i1l6648
 29601  003E58                     i1l6628:
 29602                           
 29603                           ; BSR set to: 1
 29604                           ;fifo.c: 69: if ( ( (f->head + 1) == f->tail) ||
 29605                           ;fifo.c: 70: (((f->head + 1) == f->size) && (f->tail == 0))) {
 29606  003E58  EE20 F004          	lfsr	2,4
 29607  003E5C  5001               	movf	fifo_write@f,w,c
 29608  003E5E  D872               	call	PL14	;call to abstracted procedure
 29609  003E60  E102               	bnz	i1u649_25
 29610  003E62  5009               	movf	??_fifo_write,w,c
 29611  003E64  180B               	xorwf	??_fifo_write+2,w,c
 29612  003E66                     i1u649_25:
 29613  003E66  E011               	bz	i1l1602
 29614                           
 29615                           ; BSR set to: 1
 29616  003E68  EE20 F006          	lfsr	2,6
 29617  003E6C  5001               	movf	fifo_write@f,w,c
 29618  003E6E  D86A               	call	PL14	;call to abstracted procedure
 29619  003E70  E102               	bnz	i1u650_25
 29620  003E72  5009               	movf	??_fifo_write,w,c
 29621  003E74  180B               	xorwf	??_fifo_write+2,w,c
 29622  003E76                     i1u650_25:
 29623  003E76  E10E               	bnz	i1l6636
 29624                           
 29625                           ; BSR set to: 1
 29626  003E78  EE20 F004          	lfsr	2,4
 29627  003E7C  5001               	movf	fifo_write@f,w,c
 29628  003E7E  26D9               	addwf	fsr2l,f,c
 29629  003E80  5002               	movf	fifo_write@f+1,w,c
 29630  003E82  22DA               	addwfc	fsr2h,f,c
 29631  003E84  50DE               	movf	postinc2,w,c
 29632  003E86  10DD               	iorwf	postdec2,w,c
 29633  003E88  E105               	bnz	i1l6636
 29634  003E8A                     i1l1602:
 29635                           
 29636                           ; BSR set to: 1
 29637                           ;fifo.c: 71: return i;
 29638  003E8A  C00F  F001         	movff	fifo_write@i,?_fifo_write
 29639  003E8E  C010  F002         	movff	fifo_write@i+1,?_fifo_write+1
 29640  003E92  D057               	goto	i1l1603
 29641  003E94                     i1l6636:
 29642                           
 29643                           ; BSR set to: 1
 29644                           ;fifo.c: 73: else {
 29645                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 29646  003E94  C00D  FFD9         	movff	fifo_write@p,fsr2l
 29647  003E98  C00E  FFDA         	movff	fifo_write@p+1,fsr2h
 29648  003E9C  EE10 F002          	lfsr	1,2
 29649  003EA0  5001               	movf	fifo_write@f,w,c
 29650  003EA2  26E1               	addwf	fsr1l,f,c
 29651  003EA4  5002               	movf	fifo_write@f+1,w,c
 29652  003EA6  22E2               	addwfc	fsr1h,f,c
 29653  003EA8  CFE6 F009          	movff	postinc1,??_fifo_write
 29654  003EAC  CFE5 F00A          	movff	postdec1,??_fifo_write+1
 29655  003EB0  C001  FFE1         	movff	fifo_write@f,fsr1l
 29656  003EB4  C002  FFE2         	movff	fifo_write@f+1,fsr1h
 29657  003EB8  CFE6 F00B          	movff	postinc1,??_fifo_write+2
 29658  003EBC  CFE5 F00C          	movff	postdec1,??_fifo_write+3
 29659  003EC0  5009               	movf	??_fifo_write,w,c
 29660  003EC2  240B               	addwf	??_fifo_write+2,w,c
 29661  003EC4  6EE1               	movwf	fsr1l,c
 29662  003EC6  500A               	movf	??_fifo_write+1,w,c
 29663  003EC8  200C               	addwfc	??_fifo_write+3,w,c
 29664  003ECA  6EE2               	movwf	fsr1h,c
 29665  003ECC  CFDF FFE7          	movff	indf2,indf1
 29666                           
 29667                           ; BSR set to: 1
 29668  003ED0  4A0D               	infsnz	fifo_write@p,f,c
 29669  003ED2  2A0E               	incf	fifo_write@p+1,f,c
 29670                           
 29671                           ; BSR set to: 1
 29672                           ;fifo.c: 75: f->head++;
 29673  003ED4  EE20 F002          	lfsr	2,2
 29674  003ED8  5001               	movf	fifo_write@f,w,c
 29675  003EDA  26D9               	addwf	fsr2l,f,c
 29676  003EDC  5002               	movf	fifo_write@f+1,w,c
 29677  003EDE  22DA               	addwfc	fsr2h,f,c
 29678  003EE0  2ADE               	incf	postinc2,f,c
 29679  003EE2  0E00               	movlw	0
 29680  003EE4  22DD               	addwfc	postdec2,f,c
 29681                           
 29682                           ; BSR set to: 1
 29683                           ;fifo.c: 77: if (f->head >= f->size) {
 29684  003EE6  EE20 F006          	lfsr	2,6
 29685  003EEA  5001               	movf	fifo_write@f,w,c
 29686  003EEC  26D9               	addwf	fsr2l,f,c
 29687  003EEE  5002               	movf	fifo_write@f+1,w,c
 29688  003EF0  22DA               	addwfc	fsr2h,f,c
 29689  003EF2  EE10 F002          	lfsr	1,2
 29690  003EF6  5001               	movf	fifo_write@f,w,c
 29691  003EF8  26E1               	addwf	fsr1l,f,c
 29692  003EFA  5002               	movf	fifo_write@f+1,w,c
 29693  003EFC  22E2               	addwfc	fsr1h,f,c
 29694  003EFE  52E6               	movf	postinc1,f,c
 29695  003F00  52DE               	movf	postinc2,f,c
 29696  003F02  50DD               	movf	postdec2,w,c
 29697  003F04  5CE5               	subwf	postdec1,w,c
 29698  003F06  E102               	bnz	i1u652_25
 29699  003F08  50DF               	movf	indf2,w,c
 29700  003F0A  5CE7               	subwf	indf1,w,c
 29701  003F0C                     i1u652_25:
 29702  003F0C  E308               	bnc	i1l6646
 29703                           
 29704                           ; BSR set to: 1
 29705                           ;fifo.c: 78: f->head = 0;
 29706  003F0E  EE20 F002          	lfsr	2,2
 29707  003F12  5001               	movf	fifo_write@f,w,c
 29708  003F14  26D9               	addwf	fsr2l,f,c
 29709  003F16  5002               	movf	fifo_write@f+1,w,c
 29710  003F18  22DA               	addwfc	fsr2h,f,c
 29711  003F1A  6ADE               	clrf	postinc2,c
 29712  003F1C  6ADD               	clrf	postdec2,c
 29713  003F1E                     i1l6646:
 29714                           
 29715                           ; BSR set to: 1
 29716  003F1E  2A0F               	incf	fifo_write@i,f,c
 29717  003F20  0E00               	movlw	0
 29718  003F22  2210               	addwfc	fifo_write@i+1,f,c
 29719  003F24  2211               	addwfc	fifo_write@i+2,f,c
 29720  003F26  2212               	addwfc	fifo_write@i+3,f,c
 29721  003F28                     i1l6648:
 29722                           
 29723                           ; BSR set to: 1
 29724  003F28  5005               	movf	fifo_write@nbytes,w,c
 29725  003F2A  5C0F               	subwf	fifo_write@i,w,c
 29726  003F2C  5006               	movf	fifo_write@nbytes+1,w,c
 29727  003F2E  5810               	subwfb	fifo_write@i+1,w,c
 29728  003F30  5007               	movf	fifo_write@nbytes+2,w,c
 29729  003F32  5811               	subwfb	fifo_write@i+2,w,c
 29730  003F34  5008               	movf	fifo_write@nbytes+3,w,c
 29731  003F36  5812               	subwfb	fifo_write@i+3,w,c
 29732  003F38  E38F               	bnc	i1l6628
 29733                           
 29734                           ; BSR set to: 1
 29735                           ;fifo.c: 79: }
 29736                           ;fifo.c: 80: }
 29737                           ;fifo.c: 82: }
 29738                           ;fifo.c: 84: return nbytes;
 29739  003F3A  C005  F001         	movff	fifo_write@nbytes,?_fifo_write
 29740  003F3E  C006  F002         	movff	fifo_write@nbytes+1,?_fifo_write+1
 29741  003F42                     i1l1603:
 29742                           
 29743                           ; BSR set to: 1
 29744  003F42  0012               	return	
 29745  003F44                     __end_of_fifo_write:
 29746                           	opt stack 0
 29747  003F44                     PL14:
 29748                           	opt stack 21
 29749  003F44  26D9               	addwf	fsr2l,f,c
 29750  003F46  5002               	movf	fifo_write@f+1,w,c
 29751  003F48  22DA               	addwfc	fsr2h,f,c
 29752  003F4A  CFDE F009          	movff	postinc2,??_fifo_write
 29753  003F4E  CFDD F00A          	movff	postdec2,??_fifo_write+1
 29754  003F52  EE20 F002          	lfsr	2,2
 29755  003F56  5001               	movf	fifo_write@f,w,c
 29756  003F58  26D9               	addwf	fsr2l,f,c
 29757  003F5A  5002               	movf	fifo_write@f+1,w,c
 29758  003F5C  22DA               	addwfc	fsr2h,f,c
 29759  003F5E  CFDE F00B          	movff	postinc2,??_fifo_write+2
 29760  003F62  CFDD F00C          	movff	postdec2,??_fifo_write+3
 29761  003F66  2A0B               	incf	??_fifo_write+2,f,c
 29762  003F68  0E00               	movlw	0
 29763  003F6A  220C               	addwfc	??_fifo_write+3,f,c
 29764  003F6C  500A               	movf	??_fifo_write+1,w,c
 29765  003F6E  180C               	xorwf	??_fifo_write+3,w,c
 29766  003F70  0012               	return	
 29767  003F72                     __end_ofPL14:
 29768                           	opt stack 0
 29769                           tblptru	equ	0xFF8
 29770                           tblptrh	equ	0xFF7
 29771                           tblptrl	equ	0xFF6
 29772                           tablat	equ	0xFF5
 29773                           prodh	equ	0xFF4
 29774                           prodl	equ	0xFF3
 29775                           intcon	equ	0xFF2
 29776                           indf0	equ	0xFEF
 29777                           postinc0	equ	0xFEE
 29778                           fsr0h	equ	0xFEA
 29779                           fsr0l	equ	0xFE9
 29780                           wreg	equ	0xFE8
 29781                           indf1	equ	0xFE7
 29782                           postinc1	equ	0xFE6
 29783                           postdec1	equ	0xFE5
 29784                           fsr1h	equ	0xFE2
 29785                           fsr1l	equ	0xFE1
 29786                           bsr	equ	0xFE0
 29787                           indf2	equ	0xFDF
 29788                           postinc2	equ	0xFDE
 29789                           postdec2	equ	0xFDD
 29790                           plusw2	equ	0xFDB
 29791                           fsr2h	equ	0xFDA
 29792                           fsr2l	equ	0xFD9
 29793                           status	equ	0xFD8
 29794                           
 29795 ;; *************** function _ReadUSART *****************
 29796 ;; Defined at:
 29797 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 29798 ;; Parameters:    Size  Location     Type
 29799 ;;		None
 29800 ;; Auto vars:     Size  Location     Type
 29801 ;;  data            1    0[COMRAM] unsigned char 
 29802 ;; Return value:  Size  Location     Type
 29803 ;;                  1    wreg      unsigned char 
 29804 ;; Registers used:
 29805 ;;		wreg, status,2, status,0
 29806 ;; Tracked objects:
 29807 ;;		On entry : 0/0
 29808 ;;		On exit  : 0/0
 29809 ;;		Unchanged: 0/0
 29810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29811 ;;      Params:         0       0       0       0       0       0       0
 29812 ;;      Locals:         1       0       0       0       0       0       0
 29813 ;;      Temps:          0       0       0       0       0       0       0
 29814 ;;      Totals:         1       0       0       0       0       0       0
 29815 ;;Total ram usage:        1 bytes
 29816 ;; Hardware stack levels used:    1
 29817 ;; This function calls:
 29818 ;;		Nothing
 29819 ;; This function is called by:
 29820 ;;		_Interrupt
 29821 ;; This function uses a non-reentrant model
 29822 ;;
 29823                           
 29824                           	psect	text91
 29825  005E1E                     __ptext91:
 29826                           	opt stack 0
 29827  005E1E                     _ReadUSART:
 29828                           	opt stack 21
 29829                           
 29830                           ; BSR set to: 1
 29831                           ;incstack = 0
 29832                           ;incstack = 0
 29833  005E1E  0EF2               	movlw	242
 29834  005E20  1628               	andwf	_USART_Status,f,c
 29835  005E22  ACAB               	btfss	4011,6,c	;volatile
 29836  005E24  D003               	goto	i1l1947
 29837  005E26  9028               	bcf	_USART_Status,0,c
 29838  005E28  B0AB               	btfsc	4011,0,c	;volatile
 29839  005E2A  8028               	bsf	_USART_Status,0,c
 29840  005E2C                     i1l1947:
 29841  005E2C  B4AB               	btfsc	4011,2,c	;volatile
 29842  005E2E  8428               	bsf	_USART_Status,2,c
 29843  005E30  B2AB               	btfsc	4011,1,c	;volatile
 29844  005E32  8628               	bsf	_USART_Status,3,c
 29845  005E34  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 29846  005E38  5001               	movf	ReadUSART@data,w,c
 29847  005E3A  0012               	return	
 29848  005E3C                     __end_of_ReadUSART:
 29849                           	opt stack 0
 29850                           tblptru	equ	0xFF8
 29851                           tblptrh	equ	0xFF7
 29852                           tblptrl	equ	0xFF6
 29853                           tablat	equ	0xFF5
 29854                           prodh	equ	0xFF4
 29855                           prodl	equ	0xFF3
 29856                           intcon	equ	0xFF2
 29857                           indf0	equ	0xFEF
 29858                           postinc0	equ	0xFEE
 29859                           fsr0h	equ	0xFEA
 29860                           fsr0l	equ	0xFE9
 29861                           wreg	equ	0xFE8
 29862                           indf1	equ	0xFE7
 29863                           postinc1	equ	0xFE6
 29864                           postdec1	equ	0xFE5
 29865                           fsr1h	equ	0xFE2
 29866                           fsr1l	equ	0xFE1
 29867                           bsr	equ	0xFE0
 29868                           indf2	equ	0xFDF
 29869                           postinc2	equ	0xFDE
 29870                           postdec2	equ	0xFDD
 29871                           plusw2	equ	0xFDB
 29872                           fsr2h	equ	0xFDA
 29873                           fsr2l	equ	0xFD9
 29874                           status	equ	0xFD8
 29875                           tblptru	equ	0xFF8
 29876                           tblptrh	equ	0xFF7
 29877                           tblptrl	equ	0xFF6
 29878                           tablat	equ	0xFF5
 29879                           prodh	equ	0xFF4
 29880                           prodl	equ	0xFF3
 29881                           intcon	equ	0xFF2
 29882                           indf0	equ	0xFEF
 29883                           postinc0	equ	0xFEE
 29884                           fsr0h	equ	0xFEA
 29885                           fsr0l	equ	0xFE9
 29886                           wreg	equ	0xFE8
 29887                           indf1	equ	0xFE7
 29888                           postinc1	equ	0xFE6
 29889                           postdec1	equ	0xFE5
 29890                           fsr1h	equ	0xFE2
 29891                           fsr1l	equ	0xFE1
 29892                           bsr	equ	0xFE0
 29893                           indf2	equ	0xFDF
 29894                           postinc2	equ	0xFDE
 29895                           postdec2	equ	0xFDD
 29896                           plusw2	equ	0xFDB
 29897                           fsr2h	equ	0xFDA
 29898                           fsr2l	equ	0xFD9
 29899                           status	equ	0xFD8
 29900                           
 29901                           	psect	rparam
 29902  0000                     tblptru	equ	0xFF8
 29903                           tblptrh	equ	0xFF7
 29904                           tblptrl	equ	0xFF6
 29905                           tablat	equ	0xFF5
 29906                           prodh	equ	0xFF4
 29907                           prodl	equ	0xFF3
 29908                           intcon	equ	0xFF2
 29909                           indf0	equ	0xFEF
 29910                           postinc0	equ	0xFEE
 29911                           fsr0h	equ	0xFEA
 29912                           fsr0l	equ	0xFE9
 29913                           wreg	equ	0xFE8
 29914                           indf1	equ	0xFE7
 29915                           postinc1	equ	0xFE6
 29916                           postdec1	equ	0xFE5
 29917                           fsr1h	equ	0xFE2
 29918                           fsr1l	equ	0xFE1
 29919                           bsr	equ	0xFE0
 29920                           indf2	equ	0xFDF
 29921                           postinc2	equ	0xFDE
 29922                           postdec2	equ	0xFDD
 29923                           plusw2	equ	0xFDB
 29924                           fsr2h	equ	0xFDA
 29925                           fsr2l	equ	0xFD9
 29926                           status	equ	0xFD8
 29927                           tblptru	equ	0xFF8
 29928                           tblptrh	equ	0xFF7
 29929                           tblptrl	equ	0xFF6
 29930                           tablat	equ	0xFF5
 29931                           prodh	equ	0xFF4
 29932                           prodl	equ	0xFF3
 29933                           intcon	equ	0xFF2
 29934                           indf0	equ	0xFEF
 29935                           postinc0	equ	0xFEE
 29936                           fsr0h	equ	0xFEA
 29937                           fsr0l	equ	0xFE9
 29938                           wreg	equ	0xFE8
 29939                           indf1	equ	0xFE7
 29940                           postinc1	equ	0xFE6
 29941                           postdec1	equ	0xFE5
 29942                           fsr1h	equ	0xFE2
 29943                           fsr1l	equ	0xFE1
 29944                           bsr	equ	0xFE0
 29945                           indf2	equ	0xFDF
 29946                           postinc2	equ	0xFDE
 29947                           postdec2	equ	0xFDD
 29948                           plusw2	equ	0xFDB
 29949                           fsr2h	equ	0xFDA
 29950                           fsr2l	equ	0xFD9
 29951                           status	equ	0xFD8


Data Sizes:
    Strings     4147
    Constant    120
    Data        0
    BSS         1144
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     33      62
    BANK0           160    135     135
    BANK1           256      0     239
    BANK2           256     69     197
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?___llmod	unsigned long  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_152(CODE[2]), STR_151(CODE[9]), STR_150(CODE[3]), 
		 -> STR_149(CODE[6]), STR_148(CODE[6]), STR_147(CODE[8]), STR_145(CODE[6]), 
		 -> STR_143(CODE[5]), STR_141(CODE[8]), STR_140(CODE[6]), STR_139(CODE[9]), 
		 -> STR_138(CODE[7]), STR_137(CODE[7]), STR_136(CODE[5]), STR_135(CODE[6]), 
		 -> STR_134(CODE[9]), STR_132(CODE[11]), STR_130(CODE[8]), STR_128(CODE[4]), 
		 -> STR_127(CODE[5]), STR_114(CODE[5]), STR_101(CODE[7]), STR_95(CODE[5]), 
		 -> STR_80(CODE[5]), wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), 
		 -> STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), 
		 -> STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), 
		 -> STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), 
		 -> STR_6(CODE[5]), cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_124(CODE[2]), STR_122(CODE[2]), STR_120(CODE[2]), STR_118(CODE[2]), 
		 -> STR_115(CODE[2]), STR_111(CODE[2]), STR_109(CODE[2]), STR_107(CODE[2]), 
		 -> STR_105(CODE[2]), STR_102(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_read	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?_fifo_getFree	unsigned short  size(2) Largest target is 0

    ?_fifo_write	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_124(CODE[2]), STR_122(CODE[2]), STR_120(CODE[2]), STR_118(CODE[2]), 
		 -> STR_115(CODE[2]), STR_111(CODE[2]), STR_109(CODE[2]), STR_107(CODE[2]), 
		 -> STR_105(CODE[2]), STR_102(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_124(CODE[2]), STR_122(CODE[2]), STR_120(CODE[2]), STR_118(CODE[2]), 
		 -> STR_115(CODE[2]), STR_111(CODE[2]), STR_109(CODE[2]), STR_107(CODE[2]), 
		 -> STR_105(CODE[2]), STR_102(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_124(CODE[2]), STR_122(CODE[2]), STR_120(CODE[2]), STR_118(CODE[2]), 
		 -> STR_115(CODE[2]), STR_111(CODE[2]), STR_109(CODE[2]), STR_107(CODE[2]), 
		 -> STR_105(CODE[2]), STR_102(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_152(CODE[2]), STR_151(CODE[9]), STR_150(CODE[3]), STR_149(CODE[6]), 
		 -> STR_148(CODE[6]), STR_147(CODE[8]), STR_145(CODE[6]), STR_143(CODE[5]), 
		 -> STR_141(CODE[8]), STR_140(CODE[6]), STR_139(CODE[9]), STR_138(CODE[7]), 
		 -> STR_137(CODE[7]), STR_136(CODE[5]), STR_135(CODE[6]), STR_134(CODE[9]), 
		 -> STR_132(CODE[11]), STR_130(CODE[8]), STR_128(CODE[4]), STR_127(CODE[5]), 
		 -> STR_114(CODE[5]), STR_101(CODE[7]), STR_95(CODE[5]), STR_80(CODE[5]), 
		 -> STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), 
		 -> STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), 
		 -> STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), 
		 -> STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_152(CODE[2]), STR_151(CODE[9]), STR_150(CODE[3]), 
		 -> STR_149(CODE[6]), STR_148(CODE[6]), STR_147(CODE[8]), STR_145(CODE[6]), 
		 -> STR_143(CODE[5]), STR_141(CODE[8]), STR_140(CODE[6]), STR_139(CODE[9]), 
		 -> STR_138(CODE[7]), STR_137(CODE[7]), STR_136(CODE[5]), STR_135(CODE[6]), 
		 -> STR_134(CODE[9]), STR_132(CODE[11]), STR_130(CODE[8]), STR_128(CODE[4]), 
		 -> STR_127(CODE[5]), STR_114(CODE[5]), STR_101(CODE[7]), STR_95(CODE[5]), 
		 -> STR_80(CODE[5]), wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), 
		 -> STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), 
		 -> STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), 
		 -> STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), 
		 -> STR_6(CODE[5]), cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_152(CODE[2]), STR_151(CODE[9]), STR_150(CODE[3]), 
		 -> STR_149(CODE[6]), STR_148(CODE[6]), STR_147(CODE[8]), STR_145(CODE[6]), 
		 -> STR_143(CODE[5]), STR_141(CODE[8]), STR_140(CODE[6]), STR_139(CODE[9]), 
		 -> STR_138(CODE[7]), STR_137(CODE[7]), STR_136(CODE[5]), STR_135(CODE[6]), 
		 -> STR_134(CODE[9]), STR_132(CODE[11]), STR_130(CODE[8]), STR_128(CODE[4]), 
		 -> STR_127(CODE[5]), STR_114(CODE[5]), STR_101(CODE[7]), STR_95(CODE[5]), 
		 -> STR_80(CODE[5]), wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), 
		 -> STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), 
		 -> STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), 
		 -> STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), 
		 -> STR_6(CODE[5]), cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_152(CODE[2]), STR_151(CODE[9]), STR_150(CODE[3]), STR_149(CODE[6]), 
		 -> STR_148(CODE[6]), STR_147(CODE[8]), STR_145(CODE[6]), STR_143(CODE[5]), 
		 -> STR_141(CODE[8]), STR_140(CODE[6]), STR_139(CODE[9]), STR_138(CODE[7]), 
		 -> STR_137(CODE[7]), STR_136(CODE[5]), STR_135(CODE[6]), STR_134(CODE[9]), 
		 -> STR_132(CODE[11]), STR_130(CODE[8]), STR_128(CODE[4]), STR_127(CODE[5]), 
		 -> STR_114(CODE[5]), STR_101(CODE[7]), STR_95(CODE[5]), STR_80(CODE[5]), 
		 -> STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), 
		 -> STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), 
		 -> STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), 
		 -> STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_124(CODE[2]), STR_122(CODE[2]), STR_120(CODE[2]), STR_118(CODE[2]), 
		 -> STR_115(CODE[2]), STR_111(CODE[2]), STR_109(CODE[2]), STR_107(CODE[2]), 
		 -> STR_105(CODE[2]), STR_102(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_275(CODE[2]), STR_274(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_269(CODE[2]), 
		 -> STR_268(CODE[3]), STR_267(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_124(CODE[2]), STR_122(CODE[2]), STR_120(CODE[2]), STR_118(CODE[2]), 
		 -> STR_115(CODE[2]), STR_111(CODE[2]), STR_109(CODE[2]), STR_107(CODE[2]), 
		 -> STR_105(CODE[2]), STR_102(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_285(CODE[3]), STR_284(CODE[23]), STR_283(CODE[10]), STR_282(CODE[10]), 
		 -> STR_281(CODE[12]), STR_280(CODE[8]), STR_279(CODE[7]), STR_278(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_277(CODE[10]), STR_276(CODE[3]), STR_273(CODE[20]), 
		 -> STR_272(CODE[3]), STR_271(CODE[14]), STR_270(CODE[3]), STR_266(CODE[8]), 
		 -> STR_265(CODE[15]), STR_264(CODE[67]), STR_263(CODE[3]), STR_262(CODE[27]), 
		 -> STR_261(CODE[67]), STR_260(CODE[39]), STR_259(CODE[62]), STR_258(CODE[55]), 
		 -> STR_257(CODE[49]), STR_256(CODE[67]), STR_255(CODE[47]), STR_254(CODE[47]), 
		 -> STR_253(CODE[34]), STR_252(CODE[71]), STR_251(CODE[20]), STR_250(CODE[78]), 
		 -> STR_249(CODE[24]), STR_248(CODE[77]), STR_247(CODE[74]), STR_246(CODE[76]), 
		 -> STR_245(CODE[47]), STR_244(CODE[40]), STR_243(CODE[39]), STR_242(CODE[33]), 
		 -> STR_241(CODE[23]), STR_240(CODE[56]), STR_239(CODE[24]), STR_238(CODE[44]), 
		 -> STR_237(CODE[50]), STR_236(CODE[31]), STR_235(CODE[50]), STR_234(CODE[51]), 
		 -> STR_233(CODE[46]), STR_232(CODE[44]), STR_231(CODE[27]), STR_230(CODE[39]), 
		 -> STR_229(CODE[39]), STR_228(CODE[52]), STR_227(CODE[54]), STR_226(CODE[55]), 
		 -> STR_225(CODE[3]), STR_222(CODE[24]), STR_221(CODE[57]), STR_220(CODE[53]), 
		 -> STR_219(CODE[58]), STR_218(CODE[3]), STR_215(CODE[25]), STR_214(CODE[3]), 
		 -> STR_211(CODE[24]), STR_210(CODE[3]), STR_207(CODE[24]), STR_206(CODE[3]), 
		 -> STR_203(CODE[24]), STR_202(CODE[3]), STR_199(CODE[23]), STR_198(CODE[3]), 
		 -> STR_195(CODE[21]), STR_194(CODE[3]), STR_191(CODE[22]), STR_190(CODE[3]), 
		 -> STR_187(CODE[17]), STR_186(CODE[3]), STR_183(CODE[18]), STR_182(CODE[4]), 
		 -> STR_181(CODE[11]), STR_180(CODE[2]), STR_177(CODE[7]), STR_174(CODE[7]), 
		 -> STR_171(CODE[9]), STR_168(CODE[7]), STR_165(CODE[8]), STR_162(CODE[7]), 
		 -> STR_161(CODE[2]), STR_160(CODE[2]), STR_159(CODE[6]), STR_158(CODE[8]), 
		 -> STR_157(CODE[8]), STR_156(CODE[20]), STR_155(CODE[27]), STR_154(CODE[6]), 
		 -> STR_153(CODE[33]), STR_146(CODE[26]), STR_144(CODE[32]), STR_142(CODE[28]), 
		 -> STR_133(CODE[6]), STR_131(CODE[40]), STR_129(CODE[44]), STR_126(CODE[6]), 
		 -> STR_125(CODE[39]), STR_123(CODE[36]), STR_121(CODE[37]), STR_119(CODE[40]), 
		 -> STR_117(CODE[37]), STR_116(CODE[50]), STR_113(CODE[6]), STR_112(CODE[41]), 
		 -> STR_110(CODE[38]), STR_108(CODE[39]), STR_106(CODE[42]), STR_104(CODE[39]), 
		 -> STR_103(CODE[66]), STR_100(CODE[6]), STR_99(CODE[3]), STR_96(CODE[20]), 
		 -> STR_92(CODE[8]), STR_91(CODE[36]), STR_88(CODE[8]), STR_87(CODE[38]), 
		 -> STR_86(CODE[24]), STR_84(CODE[33]), STR_82(CODE[24]), STR_79(CODE[54]), 
		 -> STR_78(CODE[6]), STR_77(CODE[3]), STR_72(CODE[25]), STR_69(CODE[17]), 
		 -> STR_68(CODE[3]), STR_67(CODE[4]), STR_66(CODE[3]), STR_63(CODE[4]), 
		 -> STR_58(CODE[15]), wrkbuf(BANK1[80]), STR_55(CODE[14]), STR_53(CODE[33]), 
		 -> STR_51(CODE[24]), STR_48(CODE[6]), STR_46(CODE[6]), STR_44(CODE[6]), 
		 -> STR_42(CODE[6]), STR_40(CODE[18]), STR_39(CODE[6]), STR_37(CODE[33]), 
		 -> STR_36(CODE[6]), STR_28(CODE[24]), STR_27(CODE[18]), STR_26(CODE[20]), 
		 -> STR_25(CODE[25]), STR_24(CODE[22]), STR_23(CODE[19]), STR_22(CODE[20]), 
		 -> STR_21(CODE[20]), STR_19(CODE[6]), STR_17(CODE[6]), STR_15(CODE[6]), 
		 -> STR_13(CODE[6]), STR_11(CODE[6]), STR_9(CODE[6]), STR_7(CODE[31]), 
		 -> STR_5(CODE[29]), STR_4(CODE[55]), STR_3(CODE[35]), STR_2(CODE[58]), 
		 -> STR_1(CODE[37]), 

    sprintf$2136	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_287(CODE[17]), STR_286(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_224(CODE[3]), STR_223(CODE[7]), STR_217(CODE[3]), STR_216(CODE[7]), 
		 -> STR_213(CODE[4]), STR_212(CODE[8]), STR_209(CODE[4]), STR_208(CODE[8]), 
		 -> STR_205(CODE[4]), STR_204(CODE[8]), STR_201(CODE[4]), STR_200(CODE[8]), 
		 -> STR_197(CODE[4]), STR_196(CODE[7]), STR_193(CODE[4]), STR_192(CODE[7]), 
		 -> STR_189(CODE[4]), STR_188(CODE[7]), STR_185(CODE[4]), STR_184(CODE[7]), 
		 -> STR_179(CODE[3]), STR_178(CODE[7]), STR_176(CODE[3]), STR_175(CODE[7]), 
		 -> STR_173(CODE[3]), STR_172(CODE[7]), STR_170(CODE[3]), STR_169(CODE[7]), 
		 -> STR_167(CODE[3]), STR_166(CODE[7]), STR_164(CODE[3]), STR_163(CODE[7]), 
		 -> STR_98(CODE[3]), STR_97(CODE[7]), STR_94(CODE[4]), STR_93(CODE[8]), 
		 -> STR_90(CODE[4]), STR_89(CODE[8]), STR_76(CODE[3]), STR_75(CODE[7]), 
		 -> STR_74(CODE[3]), STR_73(CODE[7]), STR_71(CODE[6]), STR_70(CODE[10]), 
		 -> STR_65(CODE[3]), STR_64(CODE[7]), STR_62(CODE[3]), STR_61(CODE[7]), 
		 -> STR_60(CODE[3]), STR_59(CODE[7]), STR_57(CODE[6]), STR_56(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2116$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(BANK0[1]), sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), 
		 -> receiveSendEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), 
		 -> sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_getFree@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_write@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_write@buf	PTR const void  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(BANK1[4]), Interrupt@c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(BANK1[4]), Interrupt@c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_read@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_read@buf	PTR const void  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(COMRAM[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(COMRAM[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR const void  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(2) Largest target is 4
		 -> id(BANK1[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(2) Largest target is 4
		 -> id(BANK1[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(BANK0[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> data(BANK1[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(2) Largest target is 4
		 -> id(BANK1[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> dlc(COMRAM[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveSendMultiEventCANAL@data(BANK0[8]), receiveSendEventCANAL@data(BANK0[8]), vscpData(BANK1[8]), 

    getCANFrame@pdlc	PTR unsigned char  size(2) Largest target is 1
		 -> receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendEventCANAL@dlc(BANK0[1]), vscpSize(COMRAM[1]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 1
		 -> vscpPriority(COMRAM[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 2
		 -> vscpClass(COMRAM[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 1
		 -> vscpType(COMRAM[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 1
		 -> vscpNodeId(COMRAM[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 1
		 -> vscpSize(COMRAM[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1534	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_224(CODE[3]), STR_223(CODE[7]), 

    printErrors$1525	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_217(CODE[3]), STR_216(CODE[7]), 

    printErrors$1519	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_213(CODE[4]), STR_212(CODE[8]), 

    printErrors$1513	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_209(CODE[4]), STR_208(CODE[8]), 

    printErrors$1507	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_205(CODE[4]), STR_204(CODE[8]), 

    printErrors$1501	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_201(CODE[4]), STR_200(CODE[8]), 

    printStatistics$1494	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_197(CODE[4]), STR_196(CODE[7]), 

    printStatistics$1488	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_193(CODE[4]), STR_192(CODE[7]), 

    printStatistics$1482	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_189(CODE[4]), STR_188(CODE[7]), 

    printStatistics$1476	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_185(CODE[4]), STR_184(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1250(BANK2[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value(BANK2[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1408	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_179(CODE[3]), STR_178(CODE[7]), 

    receivePrintEventVerbose$1403	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_176(CODE[3]), STR_175(CODE[7]), 

    receivePrintEventVerbose$1398	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_173(CODE[3]), STR_172(CODE[7]), 

    receivePrintEventVerbose$1393	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_170(CODE[3]), STR_169(CODE[7]), 

    receivePrintEventVerbose$1388	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_167(CODE[3]), STR_166(CODE[7]), 

    receivePrintEventVerbose$1383	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_164(CODE[3]), STR_163(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), receiveSendEventCANAL@crc(BANK0[1]), 
		 -> sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), 
		 -> NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    doModeVerbose@p_1306	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1286	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1277	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_98(CODE[3]), STR_97(CODE[7]), 

    doModeVerbose$1270	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_94(CODE[4]), STR_93(CODE[8]), 

    doModeVerbose$1264	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_90(CODE[4]), STR_89(CODE[8]), 

    doModeVerbose@preg_1255	PTR unsigned char  size(2) Largest target is 80
		 -> STR_124(CODE[2]), STR_122(CODE[2]), STR_120(CODE[2]), STR_118(CODE[2]), 
		 -> STR_115(CODE[2]), STR_111(CODE[2]), STR_109(CODE[2]), STR_107(CODE[2]), 
		 -> STR_105(CODE[2]), STR_102(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1251	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1242	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_76(CODE[3]), STR_75(CODE[7]), 

    doModeVerbose$1238	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_74(CODE[3]), STR_73(CODE[7]), 

    doModeVerbose$1233	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_71(CODE[6]), STR_70(CODE[10]), 

    doModeVerbose$1225	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_65(CODE[3]), STR_64(CODE[7]), 

    doModeVerbose$1220	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_62(CODE[3]), STR_61(CODE[7]), 

    doModeVerbose$1216	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_60(CODE[3]), STR_59(CODE[7]), 

    doModeVerbose$1211	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_57(CODE[6]), STR_56(CODE[10]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_124(CODE[2]), STR_122(CODE[2]), STR_120(CODE[2]), STR_118(CODE[2]), 
		 -> STR_115(CODE[2]), STR_111(CODE[2]), STR_109(CODE[2]), STR_107(CODE[2]), 
		 -> STR_105(CODE[2]), STR_102(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_124(CODE[2]), STR_122(CODE[2]), STR_120(CODE[2]), STR_118(CODE[2]), 
		 -> STR_115(CODE[2]), STR_111(CODE[2]), STR_109(CODE[2]), STR_107(CODE[2]), 
		 -> STR_105(CODE[2]), STR_102(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1199	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    canInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    S27$buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    serialInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID

Critical Paths under _main in BANK0

    _main->_doModeVerbose
    _doModeSLCAN->_sendCANFrame
    _hexStringToBytes->_strlen
    _receiveSendEventSLCAN->_ultoa
    _ultoa->___llmod
    _doModeVscp->_receiveVSCPModeCanalMsg
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPModeCapabilities->_sendEscapedUartData
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _calcCRC->_crc8
    _receiveSendEventCANAL->_getCANFrame
    _receiveSendMultiEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _crc8->_init_crc8
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _printBinary->_WriteUSART
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _strichr->_toupper
    _strnicmp->_strlen
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _vscp_restoreDefaults->_init_app_ram
    _init_app_eeprom->_Write_b_eep
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_setFilter
    __CANIDToRegs->_Read_b_eep
    _setFilter->_Read_b_eep

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  145837
                                            128 BANK0      7     2      5
                          _fifo_init
                          _init_crc8
                         _Read_b_eep
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
               _ECANSetOperationMode
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0    9774
                                             56 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
               _ECANSetOperationMode
                           _Busy_eep
                        _Write_b_eep
                             _memset
              _receiveSendEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5    1000
                                              4 BANK0     14     9      5
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     378
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventSLCAN                               10    10      0    4227
                                             35 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8    1173
                                             22 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           1     1      0   19790
                                             89 BANK0      1     1      0
                          _fifo_read
               _ECANSetOperationMode
         _receiveSendMultiEventCANAL
              _receiveSendEventCANAL
                            _calcCRC
                 _sendVSCPDriverNack
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
       _receiveVSCPModeMultiCanalMsg
           _sendVSCPModeCapabilities
         _sendVSCPDriverCommandReply
           _sendVSCPDriverErrorFrame
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1658
                                             15 BANK0      2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    1742
                                             15 BANK0      3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPModeCapabilities                             1     1      0    1658
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeMultiCanalMsg                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    3234
                                             56 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     174
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1574
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1574
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     748
                                             12 BANK0      5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventCANAL                               15    15      0    3161
                                             19 BANK0     15    15      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (2) _receiveSendMultiEventCANAL                          17    17      0    3605
                                             19 BANK0     17    17      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     796
                                             12 BANK0      3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     460
                                              7 BANK0      5     2      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     334
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       89    89      0  104492
                                            108 BANK0     20    20      0
                                              0 BANK2     69    69      0
               _vscp_restoreDefaults
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
               _ECANSetOperationMode
                          _setFilter
                       __CANIDToRegs
                           _Busy_eep
                        _Write_b_eep
           _receivePrintEventVerbose
                         _WriteUSART
                            _stristr
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    4592
                                             88 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     222
                                              1 BANK0      5     5      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    4508
                                             88 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     109
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            5     5      0   24970
                                            103 BANK0      5     5      0
                          _putsUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    4981
                                             97 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    6909
                                             97 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    6689
                                             97 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     143
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    4340
                                             88 BANK0      9     5      4
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    3078
                                             56 BANK0     32    24      8
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    2778
                                             49 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    2652
                                             12 BANK0     37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     137
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    7391
                                             52 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    7283
                                             52 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     838
                                              6 BANK0      7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4     799
                                             12 BANK0      4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     257
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     257
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     124
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4    1186
                                             13 BANK0      4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     354
                                              1 BANK0      4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     360
                                              4 BANK0      9     3      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0     132
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     130
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            18    18      0    8539
                                             52 BANK0     18    18      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        15     9      6    1010
                                             19 BANK0     15     9      6
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          5     1      4     663
                                             14 BANK0      5     1      4
                          _fifo_read
 ---------------------------------------------------------------------------------
 (4) _fifo_read                                           14     8      6     446
                                              0 BANK0     14     8      6
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    6941
                                             22 BANK0     30    22      8
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     232
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     324
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     241
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0     138
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    1967
                                             24 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1499
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6    1179
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     324
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     241
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _vscp_restoreDefaults                                 0     0      0    3899
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (3) _init_app_eeprom                                      1     1      0     330
                                              4 BANK0      1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3     138
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2     126
                                              1 BANK0      4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      42
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    4486
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                         _OpenTimer1
                        _WriteTimer1
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      84
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _WriteTimer1                                          4     2      2      99
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer1                                           1     1      0     126
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      84
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     420
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _init_app_ram                                         9     9      0    3569
                                             17 BANK0      9     9      0
                         _Read_b_eep
               _ECANSetOperationMode
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     966
                                              2 BANK0     10     3      7
                         _Read_b_eep (ARG)
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           15    11      4    2182
                                              2 BANK0     15    11      4
                         _Read_b_eep (ARG)
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      84
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Read_b_eep                                           2     0      2      31
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     104
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            6     0      6     186
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                           11    11      0    2084
                                             22 COMRAM    11    11      0
                          _ReadUSART
                         _fifo_write
                 _ECANReceiveMessage
                       _fifo_getFree
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     269
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _fifo_getFree                                       10     8      2     154
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (10) _ECANReceiveMessage                                 13     7      6    1180
                                              9 COMRAM    13     7      6
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (11) __RegsToCANID                                        9     4      5     489
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (11) __ECANPointBuffer                                    6     3      3      52
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         18    10      8     378
                                              0 COMRAM    18    10      8
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_init
   _init_crc8
   _Read_b_eep
   _vscp_restoreDefaults
     _init_app_ram
       _Read_b_eep
       _ECANSetOperationMode
       _setFilter
         _Read_b_eep (ARG)
       __CANIDToRegs
         _Read_b_eep (ARG)
     _init_app_eeprom
       _Busy_eep
       _Write_b_eep
   _init
     _WriteTimer0
     _init_app_ram
       _Read_b_eep
       _ECANSetOperationMode
       _setFilter
         _Read_b_eep (ARG)
       __CANIDToRegs
         _Read_b_eep (ARG)
     _OpenUSART
     _OpenTimer0
     _OpenTimer1
     _WriteTimer1
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _ECANSetOperationMode
   _doModeVerbose
     _vscp_restoreDefaults
       _init_app_ram
         _Read_b_eep
         _ECANSetOperationMode
         _setFilter
           _Read_b_eep (ARG)
         __CANIDToRegs
           _Read_b_eep (ARG)
       _init_app_eeprom
         _Busy_eep
         _Write_b_eep
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _ECANSetOperationMode
     _setFilter
       _Read_b_eep (ARG)
     __CANIDToRegs
       _Read_b_eep (ARG)
     _Busy_eep
     _Write_b_eep
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _WriteUSART
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
             _Read_b_eep (ARG)
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
                   _Read_b_eep (ARG)
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
                   _Read_b_eep (ARG)
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
                   _Read_b_eep (ARG)
           _getVSCPFrame
             _getCANFrame
               _fifo_read
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _strcpy
     _strchr
     _readRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
               _Read_b_eep (ARG)
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _sprintf
       _isdigit
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
               _Read_b_eep (ARG)
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _receiveSendMultiEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _receiveSendEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
             _Read_b_eep (ARG)
     _receiveVSCPModeMultiCanalMsg
     _sendVSCPModeCapabilities
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _ECANSetOperationMode
     _Busy_eep
     _Write_b_eep
     _memset
     _receiveSendEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _fifo_read
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
           _Read_b_eep (ARG)
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   _ECANReceiveMessage
     __ECANPointBuffer
     __RegsToCANID
   _fifo_getFree
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     1EE      16       32.2%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     45      C5       9       77.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      EF       7       93.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     87      87       5       84.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     21      3E       1       65.3%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       E       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     379       3        0.0%
DATA                 0      0     575      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Tue Oct 06 17:16:33 2015

        ??_receiveVSCPModeMultiCanalMsg 0022                   __end_of_doModeVerbose 1884  
                          printBinary@i 0064                             fifo_write@f 0001  
                           fifo_write@i 000F                             fifo_write@p 000D  
                        ??_fifo_getFree 0003                   __end_of_sendVSCPFrame 4D6C  
            doModeVerbose@filter_nodeid 028E                                      PL2 1884  
                                    PL4 18A0                                      PL6 18BA  
                                    PL8 18CA                                      _id 01E9  
                                    bsr 000FE0                     ___wmul@multiplicand 0062  
                           __CFG_BORV$3 000000                  __end_of_doModeVscpNode 5ED8  
                                   PL10 18D8                                     PL20 20B0  
                                   PL12 2082                                     PL30 1932  
                                   PL22 3E08                                     PL14 3F44  
                                   PL40 1972                                     PL32 31F4  
                                   PL24 1922                                     PL16 20A0  
                                   PL50 20F0                                     PL42 20D6  
                                   PL34 1946                                     PL26 3A38  
                                   PL18 417E                                     PL60 2106  
                                   PL52 198C                                     PL44 4F4E  
                                   PL36 48C4                                     PL28 4032  
                                   PL70 19BA                                     PL62 19A4  
                                   PL54 4056                                     PL46 4046  
                                   PL38 1958                                     PL80 3A48  
                                   PL72 3E32                                     PL64 211C  
                                   PL56 3212                                     PL48 4FEE  
                                   PL90 19E0                                     PL82 4EAA  
                                   PL74 4728                                     PL66 4068  
                                   PL58 52D8                                     PL92 213C  
                                   PL84 212A                                     PL76 427A  
                                   PL68 3E1E                                     PL94 5D1E  
                                   PL86 251E                                     PL78 19CE  
                                   PL96 38C4                                     PL88 4800  
                                   PL98 19F0                 sendEscapedUartData@pcrc 006C  
                                   l500 034E                                     l451 2DD8  
                                   l443 2D64                                     l452 2DE2  
                                   l444 2DA6                                     l606 0C86  
                                   l454 2E12                                     l455 2E1C  
                                   l464 2E4A                                     l448 2DC2  
                                   l457 2E28                                     l722 3274  
                                   l564 1882                                     l740 32FE  
                                   l573 0C24                                     l813 2410  
                                   l582 0B3A                                     l830 577A  
                                   l902 4F6A                                     l911 4FB0  
                                   l727 33E6                                     l496 033C  
                                   l920 4FE4                                     l593 0BCE  
                                   l569 0A5E                                     l833 5784  
                                   l905 4F74                                     l842 57CC  
                                   l914 4FC0                                     l851 4B5E  
                                   l908 4F90                                     l932 4756  
                                   l860 4BAA                                     l917 4FDA  
                                   l941 47A2                                     l845 4B4A  
                                   l598 0BFC                                     l838 57A8  
                                   l950 47EC                                     l926 4742  
                                   l854 4B7A                                     l935 4772  
                                   l863 4BDE                                     l872 4EC0  
                                   l944 47BE                                     l848 4B54  
                                   l881 4EF0                                     l953 47F6  
                                   l929 474C                                     l857 4B9A  
                                   l890 4F3A                                     l938 4792  
                                   l866 4BE8                                     l778 251C  
                                   l875 4ECA                                     l947 47D0  
                                   l884 4F10                                     l788 2212  
                                   l893 4F44                                     l990 2A84  
                                   l982 29DA                                     l878 4ED4  
                                   l887 4F20                                     l994 3C04  
                                   l899 4F60                                     l989 2A70  
                                   l997 3C0E                            __CFG_CPB$OFF 000000  
                        getVSCPFrame@id 007E                           fifo_write@buf 0003  
                 ?_vscp_restoreDefaults 0001                    __size_of_WriteTimer0 0012  
                  __size_of_WriteTimer1 0012                                     _dlc 0039  
                                   _pos 0033                    __size_of_Write_b_eep 0034  
        __size_of_writeRegisterExtended 00FC                                     wreg 000FE8  
         __end_of_writeRegisterExtended 438A                                    PL100 4BF2  
                                  PL110 2146                                    PL102 1A00  
                                  PL104 2C84                                    PL106 5B58  
                                  PL108 407C                            __CFG_LVP$OFF 000000  
                          __CFG_WDT$OFF 000000                                    l1000 3C18  
                                  l1003 3C34                                    l1012 3D00  
                                  l1022 390E                                    l1102 37B0  
                                  l1015 3D0A                                    l1111 3838  
                                  l1041 3A22                                    l1025 3918  
                                  l1009 3CF6                                    l1121 38B8  
                                  l1105 37E8                                    l1019 3904  
                                  l1044 3A2C                                    l1028 3934  
                                  l1124 38C2                                    l1310 2F24  
                                  l1118 389A                                    l1311 2F36  
                                  l1047 3A36                                    l1320 2FD8  
                                  l1312 2F48                                    l1136 4AB8  
                                  l1128 4654                                    l1321 2FEA  
                                  l1313 2F5A                                    l1241 27F0  
                                  l1233 275C                                    l1145 43D4  
                                  l1081 4C18                                    l1322 2FFC  
                                  l1314 2F6C                                    l1306 2EEE  
                                  l1090 4CAC                                    l1315 2F7E  
                                  l1323 3054                                    l1331 5374  
                                  l1139 4B40                                    l1163 42E0  
                                  l1075 4C04                                    l1316 2F90  
                                  l1308 2F00                                    l1340 4E12  
                                  l1148 447A                                    l1084 4C34  
                                  l1317 2FA2                                    l1309 2F12  
                                  l1318 2FB4                                    l2126 4174  
                                  l1182 59AE                                    l1166 4388  
                                  l1078 4C0E                                    l1319 2FC6  
                                  l2127 417C                                    l1511 3BC6  
                                  l1503 3B2A                                    l1335 5C58  
                                  l1247 4490                                    l1087 4CA2  
                                  l1505 3B48                                    l1097 377E  
                                  l2402 507A                                    l1186 59BA  
                                  l1285 527E                                    l1621 55EC  
                                  l2501 4704                                    l1295 53E8  
                                  l1711 1B7A                                    l1288 529C  
                                  l2433 5552                                    l1641 5BA2  
                                  l1730 1C9C                                    l1714 1BAE  
                                  l2443 575C                                    l1715 1BB2  
                                  l1619 55E4                                    l1627 5642  
                                  l2516 5A12                                    l1565 4030  
                                  l2621 524E                                    l2526 5C16  
                                  l2622 5252                                    l1646 50CE  
                                  l1591 48A2                                    l2607 56A8  
                                  l1647 5134                                    l1921 5802  
                                  l1817 5ED0                                    l1922 5804  
                                  l1842 5CEA                                    l1594 48C2  
                                  l1923 580E                                    l2619 525A  
                                  l1924 5810                                    l1764 1E40  
                                  l1917 57EE                                    l1926 5828  
                                  l1934 5882                                    l1766 1E66  
                                  l1758 1DFE                                    l1694 1B6A  
                                  l1678 1A2E                                    l2646 5A56  
                                  l1767 1E6A                                    l1695 1B1C  
                                  l2655 5BE0                                    l2591 54E8  
                                  l2567 56AA                                    l1785 1F10  
                                  l1769 1E86                                    l2569 570A  
                                  l2665 5A9A                                    l1858 5E18  
                                  l1882 5DCA                                    l1859 5E1A  
                                  l1883 5DCC                                    l1884 5DDA  
                                  l2588 54EC                                    l1885 5DDC  
                                  STR_1 7908                                    STR_2 7284  
                                  STR_3 799A                                    STR_4 739D  
                                  STR_5 7AC1                                    STR_6 7FC5  
                                  STR_7 7A83                                    STR_8 7FAC  
                                  STR_9 7F69                                    _PEIE 007F96  
                        sendCANFrame@id 0091                                    _RCIE 007CED  
                                  _RCIF 007CF5                                    _RCIP 007CFD  
                      ??_ECANInitialize 0022                                    _bDLE 002A  
                          __CFG_PWRT$ON 000000              __end_of_sendVSCPDriverNack 4FEE  
                                  _bHex 002B            doModeVerbose@filter_priority 028C  
                                  _crc8 5C92                                    _data 01D1  
                                  _caps 01ED                                    _atoi 4086  
                                  _main 2C92                                    _init 58DA  
                                  _mode 0128                                    _itoa 5C5A  
                                  fsr0h 000FEA                                    fsr1h 000FE2  
                                  indf0 000FEF                                    fsr0l 000FE9  
                                  fsr2h 000FDA                                    indf1 000FE7  
                                  fsr1l 000FE1                                    indf2 000FDF  
                                  fsr2l 000FD9                                    _utoa 4FFC  
                   i1WriteTimer0@timer0 0001                                    prodh 000FF4  
                                  prodl 000FF3                                    start 02FA  
                          _sprintf$2130 0084                            _sprintf$2136 0086  
                          _sprintf$2129 0082            receiveSendMultiEventCANAL@id 007D  
             ECANReceiveMessage@dataLen 000E      __end_of_receiveSendMultiEventCANAL 3A38  
            _receiveSendMultiEventCANAL 38D2                      doModeVerbose@count 02B1  
                 getVSCPFrame@pPriority 0075                      doModeVerbose@value 02B9  
                  __end_of_getVSCPFrame 5376                        __RegsToCANID@val 0003  
                      __RegsToCANID@ptr 0001                    __size_of_getCANFrame 00A8  
              ?_receiveVSCPModeCanalMsg 0001                         ?_doModeVscpNode 0001  
                                 l12112 5D94                                   _B0CON 000E20  
                                 l10602 481C                                   l12116 5DA4  
                                 l10614 48AC                                   l10616 48B0  
                                 _B1CON 000E30                                   l12066 51D8  
                                 l12076 5210                                   l10484 55F6  
                                 l12350 56D8                                   l12342 5D66  
                                 l10486 55FC                                   l13302 5AB6  
                                 l12344 5D6E                                   l14200 060C  
                                 l15000 221C                                   _B2CON 000E40  
                                 l14210 0662                                   l14106 036E  
                                 l13308 5AD2                                   l15100 246A  
                                 l15012 2248                                   l14070 53C4  
                                 l14062 539A                                   l14310 0A1A  
                                 l14302 099A                                   l14222 06BC  
                                 l14150 04A6                                   l14142 0470  
                                 l14134 0438                                   l14126 0402  
                                 l14118 03D0                                   l15022 226C  
                                 l13352 5316                                   l13272 5AF0  
                                 l14216 0692                                   l15112 24F4  
                                 _B3CON 000E50                                   l14074 53DA  
                                 l14066 53AE                                   l16002 1DDE  
                                 l13370 4D9A                                   l13274 5AF6  
                                 l14314 0A2C                                   l14234 0710  
                                 l15114 2500                                   l15106 2482  
                                 l15132 30C2                                   l16100 1F6E  
                                 l16020 1E44                                   l14404 0C98  
                                 l14332 0AB0                                   l14324 0A66  
                                 l14308 0A06                                   l14260 0816  
                                 l14252 07C2                                   l14244 0768  
                                 l14228 06E6                                   l14164 051A  
                                 l14084 0306                                   l15108 24E0  
                                 l14078 5E4A                                   l11854 300E  
                                 l15310 3FBE                                   l16102 1FC4  
                                 l16014 1E1C                                   l13374 4D9E  
                                 l14262 0828                                   l14246 076E  
                                 l14238 072E                                   l14254 07D4  
                                 l14190 05CA                                   l14182 059A  
                                 l14174 0564                                   l14158 04DC  
                                 l15046 2386                                   l15038 230E  
                                 l15118 251A                                   l15160 57F0  
                                 l15152 57E2                                   l13640 5516  
                                 l16112 200A                                   l16008 1E02  
                                 l13368 4D98                                   l13480 5838  
                                 l14432 0D42                                   l14416 0CE0  
                                 l14424 0D20                                   l14344 0B00  
                                 l15080 242E                                   l15056 23B0  
                                 _B4CON 000E60                                   l16122 2044  
                                 l16034 1E96                                   l16050 1ECA  
                                 l13386 4DD8                                   l15410 289C  
                                 l13482 5846                                   l14506 0FD6  
                                 l14522 1042                                   l14450 0DCA  
                                 l14354 0B4C                                   l14426 0D24  
                                 l14434 0D54                                   l14274 08A4  
                                 l14194 05E2                                   l14186 05B2  
                                 l14178 0582                                   l14098 0352  
                                 l15090 244E                                   l13636 5506  
                                 l16116 2024                                   l16108 1FE6  
                                 l16044 1EB6                                   l16028 1E80  
                                 l16132 206E                                   l15500 54D6  
                                 l13484 5850                                   l16220 4A5A  
                                 l14612 129A                                   l14380 0BF6  
                                 l14284 0920                                   l14268 0866  
                                 l15076 2416                                   l15068 23F0  
                                 l15350 495E                                   l13638 5512  
                                 l16126 2066                                   l16118 2036  
                                 l16062 1EF0                                   l16134 2074  
                                 l15422 28EE                                   l13742 5A66  
                                 l13750 5A22                                   l13478 5834  
                                 l16214 4A28                                   l14702 155A  
                                 l14622 12D4                                   l14542 10C6  
                                 l14470 0E9A                                   l14462 0E5C  
                                 l14446 0DB8                                   l14366 0B9A  
                                 l14278 08E2                                   l14198 05FA  
                                 l16310 3960                                   l13648 5544  
                                 l13744 5A6E                                   l13752 5A2A  
                                 l15520 4102                                   l16216 4A3E  
                                 l16208 49DC                                   l16152 59C4  
                                 l16144 5994                                   l14712 15A4  
                                 l14632 1310                                   l14608 128A  
                                 l14552 1100                                   l14456 0E36  
                                 _B5CON 000E70                                   l13674 59E2  
                                 l16082 1F32                                   l16058 1EE6  
                                 l15434 293E                                   l15506 4088  
                                 l14730 1610                                   l14642 134A  
                                 l14618 12C4                                   l14562 113C  
                                 l14538 10B6                                   l14490 0F4C  
                                 l14466 0E88                                   l14458 0E4A  
                                 l14394 0C44                                   l14298 0988  
                                 l14802 1880                                   l14810 3240  
                                 l15364 4980                                   l13676 59EA  
                                 l16084 1F38                                   l16068 1EF8  
                                 l15460 29E6                                   l15524 413C  
                                 l15516 40E2                                   l15508 408E  
                                 l15700 27DE                                   l15604 2544  
                                 l16252 4256                                   l16244 421C  
                                 l16236 41B8                                   l14724 15EA  
                                 l14660 13DA                                   l14652 1384  
                                 l14628 1300                                   l14572 1176  
                                 l14548 10F0                                   l14484 0F22  
                                 l16332 3990                                   l16404 3CCE  
                                 l16420 5D34                                   l14900 3330  
                                 l13940 2DEC                                   l13932 2DCC  
                                 l13686 5A08                                   l13678 59EE  
                                 l16094 1F5A                                   l16078 1F20  
                                 l15470 2A56                                   l15446 298E  
                                 l15518 40FA                                   l16246 4224  
                                 l16270 516A                                   l14750 169E  
                                 l14718 15C6                                   l14662 13E8  
                                 l14638 133A                                   l14582 11B0  
                                 l14558 112C                                   l14478 0EEA  
                                 l14494 0F76                                   l13950 2E24  
                                 l13926 2DA8                                   l15472 2A5A  
                                 l15480 2A82                                   l15632 2614  
                                 l16248 423A                                   l16280 51A6  
                                 l16192 4358                                   l14736 1638  
                                 l14648 1374                                   l14568 1166  
                                 l14592 121A                                   l16352 39F2  
                                 l16408 3CE6                                   l16424 5D52  
                                 l14832 3292                                   l14808 323C  
                                 l13944 2DF4                                   l13928 2DBC  
                                 l15490 5E7A                                   l15810 1A44  
                                 l15474 2A62                                   l15562 3628  
                                 l15618 25AC                                   l16274 5190  
                                 l16194 4386                                   l14770 1768  
                                 l14666 13FC                                   l14578 11A0  
                                 l16338 39AE                                   l14930 3380  
                                 l14842 32A8                                   l13970 2E5A  
                                 l13962 2E42                                   l15900 1C1A  
                                 l15804 1A38                                   l15548 35C0  
                                 l15660 26E4                                   l16276 5198  
                                 l15724 44C6                                   l16356 3A12  
                                 l16348 39D2                                   l14924 336A  
                                 l14852 32D0                                   l14828 328C  
                                 l13972 2E60                                   l15910 1C56  
                                 l15822 1A80                                   l15830 1AC6  
                                 l15806 1A3C                                   l15814 1A4A  
                                 l15398 284C                                   l15494 5478  
                                 l15590 36F8                                   l15646 267C  
                                 l15742 4530                                   l14782 17DC  
                                 l14774 178C                                   l14758 16E4  
                                 l14766 172C                                   l14678 1494  
                                 l14942 33B0                                   l14918 3356  
                                 l16630 37FC                                   l13894 2CF6  
                                 ?_crc8 0067                                   l15904 1C26  
                                 l15808 1A40                                   l15576 3690  
                                 l15672 2738                                   l16800 3AB2  
                                 l14688 14E2                                   l14792 1840  
                                 l14936 3398                                   l14952 33DA  
                                 l14880 330A                                   l13976 2E6C  
                                 l13968 2E56                                   l15850 1B22  
                                 l15498 54B0                                   l14786 180A  
                                 l14698 1536                                   l14882 330E  
                                 l14954 33E0                                   l16642 3856  
                                 l15932 1CA6                                   l15860 1B78  
                                 l15908 1C2C                                   l15684 2778  
                                 l15676 274A                                   l14796 1858  
                                 l14948 33C8                                   l14892 3324  
                                 l14884 3314                                   l14868 32D8  
                                 l16724 4666                                   l16902 5DF8  
                                 l15942 1CDA                                   l15918 1C66  
                                 l15862 1B7E                                   l15854 1B56  
                                 l15838 1AEC                                   l16806 3AC4  
                                 l15790 444A                                   l14798 1866  
                                 l14878 3304                                   l14958 33E4  
                                 l16734 46AA                                   l16638 3842  
                                 l14990 21E8                                   l14982 21C0  
                                 l15944 1CDE                                   l15936 1CC4  
                                 l15880 1BCA                                   l15856 1B70  
                                 l15696 27CC                                   l16840 3B78  
                                 l15792 4478                                   l16680 5120  
                                 l14984 21C4                                   l15970 1D4A  
                                 l15890 1BF8                                   l15874 1BB8  
                                 l15858 1B74                                   l16834 3B4A  
                                 l16818 3AEE                                   l16498 4612  
                                 l16674 50DC                                   l14978 219E  
                                 l16908 5004                                   l16756 5C76  
                                 l16940 571C                                   l15972 1D4E  
                                 l15956 1D12                                   l15868 1B96  
                                 l16828 3B2E                                   l16860 3BBE  
                                 l14996 220C                                   l16918 503C  
                                 l16942 5728                                   l15958 1D16  
                                 l15894 1BFE                                   l15878 1BBE  
                                 l15886 1BE2                                   l15798 1A16  
                                 l16854 3BB8                                   l16694 5C56  
                                 l16960 5BFA                                   l16944 572C  
                                 l15992 1DAE                                   l15896 1C0C  
                                 l16848 3B96                                   l15986 1D82  
                                 l16970 5646                                   l16858 3BBC  
                                 l16786 4B10                                   l16890 5BA0  
                                 l16882 5B8E                                   l16874 5B7C  
                  __size_of_doModeSLCAN 03CE                                   l16964 5C0C  
                                 l16956 5BEE                                   l16948 574E  
                                 l15996 1DCC                                   l15988 1D94  
                                 l16980 5694                                   l16788 4B3E  
                                 l16958 5BF6                                   l16974 5680  
                                 l16990 5BD0                                   l16984 5BB0  
                                 l16978 568C                                   l16988 5BCC  
                                 l16998 5E68                                   ?_atoi 0066  
                                 ?_main 00E0                                   ?_init 0001  
                                 ?_itoa 0070                           i1_WriteTimer0 5EB6  
                                 _EEADR 000FA9                                   STR_10 7F47  
                                 STR_11 7F69                                   STR_12 7F87  
                                 STR_20 7F32                                   STR_13 7F69  
                                 STR_21 7D32                                   STR_30 7FF5  
                                 STR_14 7EA5                                   STR_22 7D46  
                                 STR_15 7F69                                   STR_31 7FF5  
                                 STR_23 7D82                                   STR_32 7FF5  
                                 STR_16 7F39                                   STR_40 7DA7  
                                 STR_24 7CB5                                   STR_17 7F69  
                                 STR_33 7FF5                                   STR_41 7FC0  
                                 STR_25 7B65                                   STR_42 7F69  
                                 STR_50 7E73                                   STR_34 7FF5  
                                 STR_18 7EF7                                   STR_26 7D1E  
                                 STR_19 7F69                                   STR_35 7FF5  
                                 STR_43 7FD6                                   STR_27 7D95  
                                 STR_51 7BE0                                   STR_44 7F69  
                                 STR_36 7F69                                   STR_52 7E73  
                                 STR_60 7FEE                                   STR_28 7BF8  
                                 STR_61 7F4E                                   STR_29 7FEB  
                                 STR_45 7FBB                                   STR_53 7A42  
                                 STR_37 7A00                                   STR_46 7F69  
                                 STR_54 7E73                                   STR_70 7E6B  
                                 STR_62 7FEE                                   STR_38 7FE8  
                                 STR_39 7F69                                   STR_71 7F6F  
                                 STR_63 7ED3                                   STR_47 7F98  
                                 STR_55 7E3B                                   STR_48 7F69  
                                 STR_64 7F4E                                   STR_80 7FA2  
                                 STR_56 7E6B                                   STR_72 7B97  
                                 STR_81 7E73                                   STR_73 7F4E  
                                 STR_65 7FEE                                   STR_49 7F9D  
                                 STR_57 7F6F                                   STR_82 7BE0  
                                 STR_74 7FEE                                   STR_66 7FE2  
                                 STR_90 7FD2                                   STR_58 7E1E  
                                 STR_83 7E73                                   STR_75 7F4E  
                                 STR_67 7FCA                                   STR_59 7F4E  
                                 STR_91 7976                                   STR_68 7472  
                                 STR_84 7A42                                   STR_92 7E41  
                                 STR_76 7FEE                                   STR_77 7472  
                                 STR_93 7EC7                                   STR_85 7E73  
                                 STR_69 7DFE                                   STR_78 7F69  
                                 STR_94 7FD2                                   STR_86 7C10  
                                 STR_95 7FB1                                   STR_87 78BD  
                                 STR_79 740A                                   STR_88 7E41  
                                 STR_96 7D5A                                   STR_97 7F4E  
                                 STR_89 7EC7                                   STR_98 7FEE  
                                 STR_99 7472            __end_of_printFirmwareVersion 52D8  
                                 _BSEL0 000DF8                         __end_of___lldiv 5564  
                                 ?_utoa 0067                         __end_of_calcCRC 5D5C  
                                 _T0CON 000FD5                                   u20140 22DA  
                                 u20150 22E4                                   u20160 22EE  
                                 _T1CON 000FCD                         __end_of___llmod 576E  
                                 u20145 22D8                                   u20155 22E2  
                                 u20165 22EC                                   u20505 3F98  
                                 u20515 3FA8                                   u20525 3FC6  
                                 _LATC1 007C59                                   u20800 4126  
                                 u20720 40A2                                   u20810 4150  
                                 u20740 40BA                                   u20565 5CF6  
                                 u20566 5CF8                                   u20807 4120  
                                 u20727 409C                                   u20760 40D8  
                                 u12905 488E                                   u20817 414A  
                                 u20747 40B4                                   u23307 2D04  
                                 u15500 56C8                                   u20780 40F6  
                                 u20845 4CF2                                   u20767 40D2  
                                 u22375 45A8                                   u15520 5700  
                                 u15507 56C2                                   u20787 40F0  
                                 u21764 59A4                                   u21765 59A0  
                                 u15527 56FA                                   u17240 5B12  
                                 u14855 2E92                                   u17247 5B0C  
                                 u14856 2E98                                   u14865 2EC6  
                                 u14857 2EA6                                   u14866 2ECC  
                                 u14867 2EDA                                   u17390 5368  
                       __end_of___lwdiv 5A1C                                   u17395 535E  
                                 u17580 5878                                   u18470 58A4  
                                 _ERRIE 007D1D                                   u18480 58D2  
                                 u18705 04C2                                   u17587 586E  
                                 u19275 0F9C                                   u19195 0D7A  
                                 u18715 0502                                   u18477 589E  
                                 u19365 18E0                                   u18725 0540  
                                 u18487 58CC                                   u19375 1240  
                                 u19295 1068                                   u18655 03AA  
                                 u19465 1422                                   u18825 0632  
                                 u18665 03E8                                   u19635 17B2  
                                 u19475 146A                                   u18915 07FA  
                                 u18675 041C                                   u19485 14BA  
                                 u18685 0454                                   u19655 1802  
                                 u18935 084E                                   u18695 048C  
                          _vscpPriority 003C                                   u19665 1830  
                                 u18945 088C                                   i1l410 018A  
                                 u19770 32AE                                   u18955 08CA  
                                 i1l405 0092                                   u18965 0908  
                                 i1l422 0196                                   i1l407 018C  
                                 u18975 0946                                   i1l416 018A  
                                 i1l425 01EA                         __end_of___lwmod 5C20  
                                 i1l435 02DC                                   i1l419 017A  
                       sendCANFrame@dlc 0095                                   _MSEL0 000DF0  
                                 _MSEL1 000DF1                                   _MSEL2 000DF2  
                                 _RCREG 000FAE                                   _IRXIF 007D27  
                                 _RCSTA 000FAB                        printBinary@value 0063  
                                 _TMR0H 000FD7                                   _TMR1H 000FCF  
                                 _TMR0L 000FD6                                   _TMR1L 000FCE  
                                 _SPBRG 000FAF                writeRegisterExtended@reg 00BA  
                                 _TXREG 000FAD                                   _TXSTA 000FAC  
                        __CFG_EBTR0$OFF 000000                          __CFG_EBTR1$OFF 000000  
                        __CFG_EBTR2$OFF 000000                          __CFG_EBTR3$OFF 000000  
                                 _bOpen 002E                 readRegisterExtended@reg 00BA  
                         __CFG_WRTD$OFF 000000                          Read_b_eep@badd 0060  
                        __CFG_EBTRB$OFF 000000                        _hexStringToBytes 509C  
                                 crc8@m 0069                                   _flags 003A  
                       __end_of_dpowers 6FAC                  Write_b_eep@GIE_BIT_VAL 0063  
                       __end_of_isdigit 5E00                                   _timer 011C  
                                 atoi@a 006B                                   atoi@s 0066  
                                 main@c 00E6                                   _ultoa 4656  
                            Interrupt@c 0020              ??_printNodeFirmwareVersion 0022  
                      _printErrors$1501 0094                        _printErrors$1513 0098  
                      _printErrors$1507 0096                        _printErrors$1525 009C  
                      _printErrors$1534 009E                        _printErrors$1519 009A  
                                 tablat 000FF5                 ??_receiveSendEventCANAL 0022  
           __end_of_sendEscapedUartData 57CE                                   plusw2 000FDB  
                                 utoa@c 006F                                   utoa@v 006D  
                                 status 000FD8                         __end_of_sprintf 2082  
               ??_receiveSendEventSLCAN 0083                         __end_of_strichr 5BE2  
                       __end_of_strcspn 5A60                         __end_of_toupper 5E6C  
                       __end_of_stristr 54EE                            __end_ofPL100 4C00  
                          __end_ofPL110 2150                            __end_ofPL102 1A10  
                          __end_ofPL104 2C92                            __end_ofPL106 5B66  
                          __end_ofPL108 4086       __size_of_receivePrintEventVerbose 0294  
                   doModeVerbose@i_1193 02B7               ?_receivePrintEventVerbose 0001  
                   doModeVerbose@p_1306 02C3                     doModeVerbose@p_1251 02BC  
                   doModeVerbose@p_1286 02C1                     doModeVerbose@p_1199 02BA  
                        WriteUSART@data 0060                    _ECANSetOperationMode 5E3C  
                          _canInputFifo 01C9                         __initialization 5932  
                doModeVerbose@page_1248 02A7           receiveSendMultiEventCANAL@dlc 0081  
                          __end_of_crc8 5CC8           receiveSendMultiEventCANAL@crc 0082  
                          __end_of_atoi 417E           receiveSendMultiEventCANAL@pos 0083  
                          __end_of_main 2E78                            __end_of_init 5932  
                          __end_of_itoa 5C92                            __end_of_utoa 509C  
                   doModeVerbose@ifmode 02BE                              _Read_b_eep 5E92  
                   doModeVerbose@maskno 02AE                        __end_of_Busy_eep 5ED6  
                   doModeVerbose@nodeid 02B2                           doModeSLCAN@id 009F  
                        __CFG_OSC$HSPLL 000000                           doModeSLCAN@rv 00A5  
                     ??_ECANSendMessage 0074                          ?i1_WriteTimer0 0001  
            writeRegisterExtended@value 00BD                                  ??_crc8 006A  
                 getVSCPFrame@pvscptype 0073                                  ??_atoi 0068  
                ??_vscp_restoreDefaults 0022                                  ??_main 00E5  
                     readRegister@value 00BB                                  ??_init 0022  
                                ??_itoa 0022                                  ??_utoa 0022  
                doModeVerbose@mask_type 0290                           __activetblptr 000002  
                       _stateVscpDriver 0036                       __RegsToCANID@type 0005  
                  _can_transmitOverruns 0104              ECANReceiveMessage@msgFlags 000F  
                         ?_readRegister 00B8               __size_of__ECANPointBuffer 0076  
                                _B0TXEN 006FC2                                  _B1TXEN 006FC3  
                                _B2TXEN 006FC4                  doModeVerbose@preg_1255 0286  
                                _B3TXEN 006FC5                                  _B4TXEN 006FC6  
                                _B5TXEN 006FC7             readRegisterExtended@timeout 00BB  
            ECANReceiveMessage@savedPtr 0010                                  _CANCON 000F6F  
                      ___llmod@dividend 006D                                  STR_100 7F69  
                                STR_101 7F40                                  STR_102 7FF5  
                                STR_110 7897                                  STR_111 7FF5  
                                STR_103 71CA                                  STR_120 7FF5  
                                STR_200 7EFF                                  STR_104 77AD  
                                STR_112 770C                                  STR_113 7F69  
                                STR_105 7FF5                                  STR_201 7FDE  
                                STR_121 792D                                  STR_210 7472  
                                STR_202 7472                                  STR_122 7FF5  
                                STR_114 7FA7                                  STR_130 7EEF  
                                STR_106 76E2                                  STR_211 7C40  
                                STR_115 7FF5                                  STR_107 7FF5  
                                STR_203 7C58                                  STR_123 7952  
                                STR_131 7785                                  STR_124 7FF5  
                                STR_212 7EFF                                  STR_204 7EFF  
                                STR_140 7F75                                  STR_132 7E55  
                                STR_108 7849                                  STR_116 74DC  
                                STR_220 7440                                  STR_133 7F69  
                                STR_109 7FF5                                  STR_213 7FDE  
                                STR_205 7FDE                                  STR_141 7EE7  
                                STR_117 78E3                                  STR_125 7822  
                                STR_221 72BE                                  STR_214 7472  
                                STR_206 7472                                  STR_230 7160  
                                STR_126 7F69                                  STR_118 7FF5  
                                STR_150 7EFC                                  STR_134 7E93  
                                STR_222 7C28                                  STR_142 7ADE  
                                STR_135 7F87                                  STR_223 7F4E  
                                STR_143 7FB6                                  STR_127 7F93  
                                STR_151 7EAE                                  STR_207 7C40  
                                STR_215 7B7E                                  STR_231 7AFA  
                                STR_119 775D                                  STR_136 7FAC  
                                STR_216 7F4E                                  STR_208 7EFF  
                                STR_224 7FEE                                  STR_152 7FFD  
                                STR_160 7FF3                                  STR_128 7FDA  
                                STR_144 7A63                                  STR_232 768A  
                                STR_240 72F7                                  STR_225 7472  
                                STR_137 7F47                                  STR_217 7FEE  
                                STR_209 7FDE                                  STR_161 7FF1  
                                STR_145 7F8D                                  STR_241 7C70  
                                STR_153 7A21                                  STR_129 76B6  
                                STR_233 7630                                  STR_218 7472  
                                STR_154 7F69                                  STR_138 7F39  
                                STR_170 7FEE                                  STR_162 7F2B  
                                STR_146 7B4B                                  STR_242 79DF  
                                STR_234 74A9                                  STR_226 732F  
                                STR_250 6FCC                                  STR_139 7EA5  
                                STR_163 7F4E                                  STR_147 7ED7  
                                STR_171 7E9C                                  STR_251 7CF6  
                                STR_155 7B15                                  STR_243 77D4  
                                STR_235 750E                                  STR_227 73D4  
                                STR_219 724A                                  STR_180 7FF5  
                                STR_172 7F4E                                  STR_164 7FEE  
                                STR_148 7F7B                                  STR_156 7D0A  
                                STR_236 7AA2                                  STR_260 7870  
                                STR_244 7735                                  STR_228 7475  
                                STR_252 70FD                                  STR_173 7FEE  
                                STR_149 7F81                                  STR_165 7EDF  
                                STR_157 7EB7                                  STR_181 7E60  
                                STR_253 79BD                                  STR_229 77FB  
                                STR_245 7601                                  STR_237 7540  
                                STR_261 7144                                  _EEDATA 000FA8  
                                STR_270 7472                                  STR_190 7472  
                                STR_182 7FCE                                  STR_166 7F55  
                                STR_174 7F24                                  STR_158 7EBF  
                                STR_262 7B30                                  STR_238 765E  
                                STR_254 75D2                                  STR_246 7067  
                                STR_263 7472                                  STR_175 7F4E  
                                STR_167 7FEE                                  STR_159 7F63  
                                STR_271 7E2D                                  STR_183 7DB9  
                                STR_191 7CCB                                  STR_239 7BB0  
                                STR_255 75A3                                  STR_247 70B3  
                                STR_272 7472                                  STR_264 7144  
                                STR_192 7F5C                                  STR_176 7FEE  
                                STR_184 7F5C                                  STR_168 7F1D  
                                STR_280 7F07                                  STR_256 7187  
                                STR_248 701A                                  STR_169 7F4E  
                                STR_193 7FDE                                  STR_185 7FDE  
                                STR_177 7F16                                  STR_281 7E49  
                                STR_265 7E0F                                  STR_273 7D6E  
                                STR_249 7BC8                                  STR_257 7572  
                                STR_194 7472                                  STR_186 7472  
                                STR_274 7FFD                                  STR_178 7F4E  
                                STR_266 7ECF                                  STR_282 7E89  
                                STR_258 7366                                  STR_179 7FEE  
                                STR_267 7FF9                                  STR_275 7FF7  
                                STR_283 7E7F                                  STR_187 7DED  
                                STR_195 7CE1                                  STR_259 720C  
                                STR_276 7472                                  STR_196 7F5C  
                                STR_188 7F5C                                  STR_268 7FE5  
                                STR_284 7C9E                                  STR_285 7472  
                                STR_197 7FDE                                  STR_189 7FDE  
                                STR_269 7FFB                                  STR_277 7E75  
                                STR_278 7472                                  STR_198 7472  
                                STR_286 7DCB                                  STR_279 7F0F  
                                STR_287 7DDC                                  STR_199 7C87  
                                _EECON2 000FA7            __end_of_readRegisterExtended 447C  
                                _CIOCON 000F73                                  ?_ultoa 0076  
          ??_sendVSCPDriverCommandReply 0022                    __end_of_fifo_getFree 4EAA  
                         ?_init_app_ram 0001                                  i1l1602 3E8A  
                                i1l1603 3F42                                  i1l1531 2B2A  
                                i1l1523 2C82                                  i1l1516 2ABA  
                                _MDSEL0 007BBE                                  i1l1533 2B3E  
                                _MDSEL1 007BBF                                  i1l1526 2B88  
                                i1l1535 2B52                                  i1l1527 2B08  
                                i1l1537 2B62                                  i1l1529 2B16  
                                i1l1570 3E06                                  i1l1547 2BEC  
                                i1l1539 2B72                                  i1l1548 2C06  
                                i1l1575 55D0                                  i1l1947 5E2C  
                            _OpenTimer0 5E00                              _OpenTimer1 5DB8  
                                i1l6636 3E94                                  i1l6628 3E58  
                                i1l6660 4E62                                  i1l6646 3F1E  
                                i1l6648 3F28                                  i1l9860 5590  
                                i1l9852 556A                                  i1l9862 559A  
                                i1l9854 5572                                  i1l9870 55B2  
                                i1l9864 55A0                                  i1l9856 557C  
                                i1l9866 55A6                                  i1l9858 5586  
                                i1l9886 3D88                         _init_app_eeprom 48E0  
                    __size_of_ReadUSART 001E                                  _RXB0IF 007D20  
                                _RXB1IF 007D21                                  _SPBRGH 000FB0  
                ECANReceiveMessage@data 000C                  ECANReceiveMessage@mode 0013  
                ECANReceiveMessage@temp 0014                                  _RXBnIE 007D19  
                                _RXBnIF 007D21                       getVSCPFrame@pData 0077  
            ??_sendVSCPDriverErrorFrame 0022                       getVSCPFrame@pSize 0076  
                    _doModeVerbose$1211 0292                      _doModeVerbose$1220 0296  
                    _doModeVerbose$1216 0294                      _doModeVerbose$1233 029A  
                    _doModeVerbose$1225 0298                      _doModeVerbose$1242 029E  
                    _doModeVerbose$1270 02A2                      _doModeVerbose$1238 029C  
                    _doModeVerbose$1264 02A0                      _doModeVerbose$1277 02A4  
                 ?_ECANSetOperationMode 0001                      __CANIDToRegs@Value 006B  
                    __size_of_Interrupt 02E2                              _bLocalEcho 002D  
              readRegisterExtended@page 00B8                      __size_of_OpenUSART 005C  
                      fifo_write@nbytes 0005                          getCANFrame@pid 0072  
                                ___wmul 5CFC                              _bInitiated 002C  
                        __CFG_STVREN$ON 000000                               ??___lldiv 0022  
                             ??_calcCRC 0022                                  _cmdbuf 0129  
                             ??___llmod 0022                        OpenTimer0@config 0060  
                receiveSendEventCANAL@i 007B                               ??___lwdiv 0022  
                             ??___lwmod 0022           _receivePrintEventVerbose$1403 00A1  
         _receivePrintEventVerbose$1408 00A3           _receivePrintEventVerbose$1383 0099  
                      OpenTimer1@config 0060           _receivePrintEventVerbose$1393 009D  
         _receivePrintEventVerbose$1388 009B           _receivePrintEventVerbose$1398 009F  
                                _memcpy 5AA4                                  _memset 5D8A  
                                clear_0 593A                                  clear_1 594E  
                                clear_2 5960                                  clear_3 596C  
                                clear_4 5978                           ?_sendCANFrame 0091  
                                _strcat 582A                                  _strchr 56AA  
                                _strcpy 5D5C                                  _strlen 5AE6  
                                _wrkbuf 0179                                  _strtok 51CA  
                                _strspn 5A60     __size_of_sendVSCPDriverCommandReply 00C4  
                             ??_isdigit 0060                  receiveSendEventSLCAN@i 008B  
                      __end_of_printMDF 51CA                            __mediumconst 6F54  
                        ??_readRegister 00BC                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                          ?_printBinary 0001                 __size_of_nibbleFromChar 003E  
                                ultoa@c 0082                                  ultoa@v 007E  
                          ?_printErrors 0001                               ??_sprintf 007E  
                             ??_strichr 0022                               ??_strcspn 0022  
                             ??_toupper 0022                          ??_init_app_ram 0071  
                             ??_stristr 0022              ??_sendVSCPModeCapabilities 0022  
            doModeVerbose@mask_priority 028F                        __end_of_strnicmp 56AA  
                            __accesstop 0060                 __end_of__initialization 597E  
                  _printFirmwareVersion 525C                   __size_of_getVSCPFrame 0088  
             receiveSendEventCANAL@data 0073                    doModeVerbose@id_1318 02A9  
                            _WriteUSART 5E6C                          __pcstackCOMRAM 0001  
              __size_of_printStatistics 019E                    _printStatistics$1482 0096  
                  _printStatistics$1476 0094                    _printStatistics$1494 009A  
                  _printStatistics$1488 0098                   _uart_transmitOverruns 0124  
                           ?_Read_b_eep 0060                         ??i1_WriteTimer0 0003  
                         __end_of_ultoa 4728                              __end_ofPL2 18A0  
                            __end_ofPL4 18BA                              __end_ofPL6 18CA  
                            __end_ofPL8 18D8                          ??_sendCANFrame 0022  
                     __end_of_ReadUSART 5E3C                           ?__RegsToCANID 0001  
           __size_of_ECANReceiveMessage 01FE                      sendVSCPFrame@pData 009E  
                       readRegister@reg 00B8                    sendVSCPDriverAck@crc 006F  
                    __size_of_findNodes 00F0                          doModeSLCAN@dlc 00A3  
                    __size_of_fifo_init 0032                      __size_of_fifo_read 00B6  
                getVSCPFrame@pvscpclass 007D                         _fifo_canrxcount 0030  
               __end_of_init_app_eeprom 49B0                       __end_of_Interrupt 02FA  
                         ReadUSART@data 0001                      readRegister@nodeid 00C0  
                        _status_led_cnt 0024                      __RegsToCANID@Value 0008  
                            _crc8_table 0300                       __end_of_OpenUSART 582A  
               doModeVerbose@mask_class 028A               printNodeFirmwareVersion@i 00C6  
                       setFilter@filter 006C                            sprintf@width 008B  
      __end_of_printNodeFirmwareVersion 4A7E                              _doModeVscp 322A  
                               ??_ultoa 0022                            _getVSCPFrame 52EE  
                            __pbssBANK1 0100                              __pbssBANK2 0200  
                            __pbssBANK3 0300                             ?_OpenTimer0 0001  
                           ?_OpenTimer1 0001                              calcCRC@crc 0070  
                             ?_Busy_eep 0001                              calcCRC@len 006E  
                 ?_printFirmwareVersion 0001                  ??_ECANSetOperationMode 0022  
                    __size_of_init_crc8 006A                           setFilter@eidh 006F  
                         setFilter@eidl 0070                           setFilter@sidh 006D  
                         setFilter@sidl 006E                        ??_doModeVscpNode 0022  
                            _nTimeStamp 0032             ?_receiveSendMultiEventCANAL 0001  
              __end_of_hexStringToBytes 5136                ECANSetOperationMode@mode 0060  
                               ?___wmul 0060                      __size_of_setFilter 01DE  
                               _B0RXFUL 007107                                 _B1RXFUL 007187  
                  __ECANRxFilterHitInfo 0029                                 _B2RXFUL 007207  
                               _B3RXFUL 007287                                 _B4RXFUL 007307  
                    _sendVSCPDriverNack 4F5C                                 _B5RXFUL 007387  
                      WriteTimer0@timer 0062                           putsUSART@data 0061  
                  _readRegisterExtended 438A                                 ?_memcpy 0060  
                               _ECANCON 000F77                                 ?_memset 0060  
                      WriteTimer1@timer 0062                           ??_WriteTimer0 0022  
                         ??_WriteTimer1 0022                          ??__RegsToCANID 0006  
                         ??_Write_b_eep 0022                   sendVSCPFrame@priority 009C  
                               _BRGCON1 000F70                                 _BRGCON2 000F71  
                               _BRGCON3 000F72                                 ?_strcat 0060  
                               ?_strchr 0060                                 ?_strcpy 0060  
                               ?_strlen 0060                                 ?_strtok 006C  
                               ?_strspn 0066                              _cntRxBytes 0108  
                            _cntTxBytes 0110                                 i1l10222 2C38  
                               i1l10230 2C56                                 i1l10214 2C08  
                               i1l10134 2AE8                                 i1l10118 2AA8  
                               i1l10142 2AF6                                 i1l10128 2AD2  
                               i1l10136 2AF2                                 i1l10236 2C6C  
                               i1l10186 2B9C                                 i1l10196 2BBC  
                    __size_of_printGUID 00EE                     ?_sendVSCPDriverNack 0001  
                               i1l13800 012C                                 i1l13802 0138  
                               i1l13820 019E                                 i1l13812 0168  
                               i1l13830 01FA                                 i1l13822 01C6  
                               i1l13814 0172                                 i1l13806 014A  
                               i1l13840 0298                                 i1l13832 0226  
                               i1l13824 01CE                                 i1l13816 0182  
                               i1l13808 0156                                 i1l13842 029C  
                               i1l13834 0228                                 i1l13826 01D6  
                               i1l13818 0194                                 i1l13770 007E  
                               i1l13844 02C8                                 i1l13836 025A  
                               i1l13828 01F2                                 i1l13780 00C8  
                               i1l13772 008E                                 i1l13764 0034  
                               i1l13846 02CC                                 i1l13838 025E  
                               i1l13854 02DA                                 i1l13790 00FC  
                               i1l13782 00CC                                 i1l13774 009A  
                               i1l13766 003C                                 i1l13848 02CE  
                               i1l13784 00D8                                 i1l13776 00A6  
                               i1l13768 0042                                 i1l13794 010E  
                               i1l13786 00E8                                 i1l13778 00B8  
                               i1l13796 011A                                 i1l13788 00F0  
                            _fifo_write 3E46                      __size_of_printHelp 01BE  
                    __size_of_printMode 0080                   sendVSCPFrame@vscptype 009A  
                 __size_of_fifo_getFree 0096                 doModeVerbose@value_1250 02B0  
                     sendCANFrame@pdata 0096                              _made_table 0022  
                               _RXB0CON 000F60                                 _RXB1CON 000F50  
                               _RXB0FUL 007B07                        __ECANPointBuffer 5564  
                               _TXB0CON 000F40                                 _TXB1CON 000F30  
                               _TXB2CON 000F20                      __size_of_putsUSART 0058  
    __end_of_sendVSCPDriverCommandReply 4800              _sendVSCPDriverCommandReply 473C  
                               _RXFCON0 000DD4                                 _RXFCON1 000DD5  
                 _writeRegisterExtended 428E        __size_of_receiveVSCPModeCanalMsg 00EA  
                __size_of_doModeVerbose 1586                    sendEscapedUartData@c 006E  
                __size_of_sendVSCPFrame 00B6                     __size_of_Read_b_eep 0012  
                            ??_Busy_eep 0022        __end_of_sendVSCPDriverErrorFrame 4BF2  
        __size_of_receiveSendEventCANAL 0144           __end_of_receiveSendEventCANAL 3D0C  
                  ??_sendVSCPDriverNack 0022              printFirmwareVersion@wrkbuf 0078  
        __size_of_receiveSendEventSLCAN 0180                         _ECANSendMessage 3A5A  
         __end_of_receiveSendEventSLCAN 38C4                                 __Hparam 0000  
                     __end_of_findNodes 456C                                 __Lparam 0000  
                     __end_of_fifo_init 5B58                       __end_of_fifo_read 48C4  
                         ??_getCANFrame 0022                             ?_WriteUSART 0001  
            receiveVSCPModeCanalMsg@dlc 00B8                    __end_of_readRegister 4B42  
                             ?_printMDF 0001                                 _bSilent 002F  
             receiveVSCPModeCanalMsg@id 00B4                           ??_doModeSLCAN 0098  
                               ___lldiv 54EE                         __size_of___wmul 0022  
                               _calcCRC 5D2E                         getCANFrame@pdlc 006E  
                               ___llmod 570C                                 ___lwdiv 59D2  
                             _FIFOEMPTY 007BA7                                 ___lwmod 5BE2  
                 ?_readRegisterExtended 00B8             printNodeFirmwareVersion@buf 00C2  
                  __end_of_init_app_ram 31F4                            _fifo_getFree 4E14  
                          init_crc8@crc 0064                                 __pcinit 5932  
                       __size_of_memcpy 0042                         __size_of_memset 002E  
                               __ramtop 0600                     __size_of_OpenTimer0 001E  
                   __size_of_OpenTimer1 0028                               ?_strnicmp 0064  
                               __ptext0 2C92                                 __ptext1 5ED6  
                               __ptext2 2150                                 __ptext3 509C  
                               __ptext4 5B66                 receiveSendEventCANAL@id 007C  
                               __ptext5 3744                                 __ptext6 4656  
                               __ptext7 322A                                 __ptext8 4B42  
                               __ptext9 473C                                 crc8@crc 0067  
         printNodeFirmwareVersion@value 00C5                       ??_printStatistics 0022  
                             _T0CONbits 000FD5                         __size_of_strcat 0058  
                       __size_of_strchr 0062                         __size_of_strcpy 002E  
                       __size_of_strlen 0040                       __end_of_hexpowers 6FCC  
                             _T1CONbits 000FCD                         __size_of_strtok 0092  
                       __size_of_strspn 0044                                 _dpowers 6F84  
                     __end_of_init_crc8 5644                                 _isdigit 5DE0  
        printNodeFirmwareVersion@nodeid 00C1                     __end_of_WriteTimer0 5EB6  
                   __end_of_WriteTimer1 5E92                          _nibbleFromChar 5B66  
                      ?_init_app_eeprom 0001                     __end_of_Write_b_eep 5CFC  
                               _sprintf 1A10        __end_of_sendVSCPModeCapabilities 4CB6  
                     __end_of_setFilter 3056                                 _strichr 5BA4  
                        doModeVerbose@c 02B8                          doModeVerbose@i 02AF  
                        doModeVerbose@p 02BF                                 _strcspn 5A1C  
                               _toupper 5E56                             ?_doModeVscp 0001  
                               _stristr 5476                    __size_of_printBinary 004A  
                  end_of_initialization 597E                       __end_of_octpowers 6F84  
                  __size_of_printErrors 02C8                                 memcpy@d 0066  
                               memcpy@n 0064                                 memcpy@s 0068  
                ??_printFirmwareVersion 0022                                 itoa@buf 0070  
                               memset@c 0062                                 itoa@val 0072  
                               memset@n 0064                               i1u1206_25 2AB0  
                               memset@p 0066                               i1u1206_27 2AB2  
                         __Lmediumconst 6F54                    __end_of_sendCANFrame 5C5A  
                             i1u1166_25 3D44                               i1u1167_25 3D54  
                             i1u1168_25 3D92                               i1u1810_20 011A  
                             i1u1810_21 0118                               i1u1811_20 012A  
                             i1u1803_20 003C                               i1u1811_21 0128  
                             i1u1803_21 003A                               i1u1820_20 01C6  
                             i1u1812_20 0138                               i1u1804_20 007E  
                             i1u1820_21 01C4                               i1u1812_21 0136  
                             i1u1804_21 007C                               i1u1821_20 01CE  
                             i1u1813_20 0148                               i1u1805_20 009A  
                             i1u1821_21 01CC                               i1u1813_21 0146  
                             i1u1805_21 0098                               i1u1822_20 01D6  
                             i1u1814_20 0156                               i1u1806_20 00D8  
                             i1u1822_21 01D4                               i1u1814_21 0154  
                             i1u1806_21 00D6                               i1u1823_20 01F2  
                             i1u1815_20 0166                               i1u1807_20 00E8  
                             i1u1823_21 01F0                               i1u1815_21 0164  
                             i1u1807_21 00E6                               i1u1824_20 01FA  
                             i1u1816_20 0172                               i1u1808_20 00FC  
                             i1u1824_21 01F8                               i1u1816_21 0170  
                             i1u1808_21 00FA                               i1u1825_20 0226  
                             i1u1817_20 0182                               i1u1809_20 010C  
                             i1u1825_21 0224                               i1u1817_21 0180  
                             i1u1809_21 010A                               i1u1826_20 025A  
                             i1u1818_20 0194                               i1u1826_21 0258  
                             i1u1818_21 0192                               i1u1827_20 0298  
                             i1u1819_20 019E                               i1u1827_21 0296  
                             i1u1819_21 019C                               i1u1828_20 02C8  
                             i1u1828_21 02C6                               i1u1829_20 02D8  
                             i1u1829_21 02D6                     _can_receiveOverruns 0100  
               receiveSendEventSLCAN@id 0086                       __end_of_printGUID 427A  
                       ___lldiv@divisor 0064                       __end_of_printHelp 35A6  
                       ___lldiv@counter 006C                       __end_of_printMode 53F6  
                     ECANSendMessage@id 006C                       ECANSendMessage@pb 0075  
          __size_of_sendEscapedUartData 0060                               _RXF10EIDH 000D76  
                             _RXF10EIDL 000D77                               _RXF11EIDH 000D7A  
                             _RXF11EIDL 000D7B                              ??_printMDF 0022  
                             _RXF12EIDH 000D82                               _RCSTAbits 000FAB  
                             _RXF12EIDL 000D83                               _RXF13EIDH 000D86  
                             _RXF13EIDL 000D87                               _RXF14EIDH 000D8A  
                             _RXF14EIDL 000D8B                               _RXF15EIDH 000D92  
                             _RXF15EIDL 000D93                               _RXF10SIDH 000D74  
                             _RXF10SIDL 000D75                               _RXF11SIDH 000D78  
                             _RXF11SIDL 000D79                               _RXF12SIDH 000D80  
                             _RXF12SIDL 000D81                                 postdec1 000FE5  
                               postdec2 000FDD                               _RXF13SIDH 000D84  
                             _RXF13SIDL 000D85                               _RXF14SIDH 000D88  
                             _RXF14SIDL 000D89                 __size_of_ECANInitialize 0080  
                             _RXF15SIDH 000D90                               _RXF15SIDL 000D91  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                       __end_of_putsUSART 58DA  
                    __ECANPointBuffer@b 0004                           _doModeVerbose 02FE  
                               utoa@buf 0067       __size_of_printNodeFirmwareVersion 00CE  
                               utoa@val 0069               ?_printNodeFirmwareVersion 0001  
                         _sendVSCPFrame 4CB6                                 strlen@s 0060  
                            _sequencyno 0035                              _timekeeper 0118  
                             _RXM0EXIDM 0078CB                                 strspn@i 006A  
                            ??_strnicmp 006A                     __end_of_getCANFrame 4E14  
                            findNodes@i 00CB                  __end_of_nibbleFromChar 5BA4  
                   __end_of_doModeSLCAN 251E                             ?_fifo_write 0001  
                            fifo_init@f 0060           __size_of_vscp_restoreDefaults 0008  
                            fifo_read@f 0060                              fifo_read@i 006C  
                            fifo_read@p 006A                               _TRISBbits 000F93  
                             _TRISCbits 000F94                  ?_writeRegisterExtended 00B8  
     sendVSCPDriverCommandReply@cmdCode 006F                     __size_of_WriteUSART 0014  
           sendVSCPModeCapabilities@crc 006F                 __end_of_ECANSendMessage 3BC8  
                  _uart_receiveOverruns 0120                _receivePrintEventVerbose 27F2  
                            _vscpNodeId 003B                           ?__CANIDToRegs 0062  
                  __end_of__RegsToCANID 3E08                               _TXSTAbits 000FAC  
                    i1WriteTimer0@timer 0003                       doModeVerbose@page 02B4  
                     doModeVerbose@preg 0284                          _init_crc8$2067 0060  
                ??_readRegisterExtended 00BF                          ?_doModeVerbose 0001  
                          ??_Read_b_eep 0022                          ?_sendVSCPFrame 0098  
                        __end_of___wmul 5D1E                     __size_of_doModeVscp 01BE  
                           _WriteTimer0 5EA4                             _WriteTimer1 5E80  
                           _Write_b_eep 5CC8                          __end_of_memcpy 5AE6  
                        __end_of_memset 5DB8       __size_of_sendVSCPDriverErrorFrame 00B0  
             ?_sendVSCPDriverErrorFrame 0001                         ?_nibbleFromChar 0001  
                        __end_of_strcat 5882                          __end_of_strchr 570C  
                        __end_of_strcpy 5D8A                          __end_of_strlen 5B26  
              doModeVerbose@filter_type 028D                          __end_of_strtok 525C  
                        __end_of_strspn 5AA4                             __end_ofPL10 1922  
                           __end_ofPL20 20D6                             __end_ofPL12 20A0  
                           __end_ofPL30 1946                             __end_ofPL22 3E1E  
                           __end_ofPL14 3F72                             __end_ofPL40 198C  
                           __end_ofPL32 3212                             __end_ofPL24 1932  
                           __end_ofPL16 20B0                             __end_ofPL50 2106  
                           __end_ofPL42 20F0                             __end_ofPL34 1958  
                           __end_ofPL26 3A48                             __end_ofPL18 418C  
                           __end_ofPL60 211C                             __end_ofPL52 19A4  
                           __end_ofPL44 4F5C                             __end_ofPL36 48E0  
                           __end_ofPL28 4046                             __end_ofPL70 19CE  
                           __end_ofPL62 19BA                             __end_ofPL54 4068  
                           __end_ofPL46 4056                             __end_ofPL38 1972  
                           __end_ofPL80 3A5A                             __end_ofPL72 3E46  
                           __end_ofPL64 212A                             __end_ofPL56 322A  
                           __end_ofPL48 4FFC                             __end_ofPL90 19F0  
                           __end_ofPL82 4EBC                             __end_ofPL74 473C  
                           __end_ofPL66 407C                             __end_ofPL58 52EE  
                           __end_ofPL92 2146                             __end_ofPL84 213C  
                           __end_ofPL76 428E                             __end_ofPL68 3E32  
                           __end_ofPL94 5D2E                             __end_ofPL86 252A  
                           __end_ofPL78 19E0                             __end_ofPL96 38D2  
                           __end_ofPL88 480E                             __end_ofPL98 1A00  
                   start_initialization 5932                               _ReadUSART 5E1E  
                       findNodes@nFound 00C9                   doModeVerbose@reg_1249 02A8  
                 doModeVerbose@filterno 02AD                 _receiveVSCPModeCanalMsg 456C  
                   __CFG_BOREN$BOACTIVE 000000                            doModeSLCAN@c 00A4  
                          ??_OpenTimer0 0022                            ??_OpenTimer1 0022  
sendVSCPDriverCommandReply@cmdReplyCode 0070                               _Interrupt 0018  
                        ??__CANIDToRegs 0069              readRegisterExtended@nodeid 00C3  
                             _OpenUSART 57CE                      __end_of_Read_b_eep 5EA4  
                   sendVSCPFrame@nodeid 009B                         ___llmod@divisor 0071  
                 __size_of_readRegister 00C4                         ___llmod@counter 0075  
                     __size_of_Busy_eep 0006                   ECANReceiveMessage@ptr 0015  
                   __size_of_fifo_write 00FE                   __size_of_init_app_ram 019E  
                        _findNodes$1578 00C7                __end_of__ECANPointBuffer 55DA  
                     __CANIDToRegs@type 0068                              init_crc8@i 0065  
                            init_crc8@j 0062                             _getCANFrame 4D6C  
                              ??___wmul 0022       __size_of_sendVSCPModeCapabilities 00B6  
                     ?_hexStringToBytes 0064                             _doModeSLCAN 2150  
             ?_sendVSCPModeCapabilities 0001              __end_of_ECANReceiveMessage 2C84  
                              ??_memcpy 0022                     readRegister@timeout 00B9  
                              ??_memset 0022                   sendVSCPDriverNack@crc 006F  
              doModeVerbose@mask_nodeid 0291                   __end_ofi1_WriteTimer0 5EC8  
                    ??_hexStringToBytes 0069                                ??_strcat 0022  
                              ??_strchr 0064                                ??_strcpy 0022  
                              ??_strlen 0022                      __end_of_OpenTimer0 5E1E  
                    __end_of_OpenTimer1 5DE0                                ??_strtok 0022  
                              ??_strspn 0022                             __pbssBIGRAM 0400  
                           __pbssCOMRAM 0022                              ?_ReadUSART 0001  
                         __pcstackBANK0 0060                           __pcstackBANK2 0280  
                   __end_of__stringdata 7FFF                            _readRegister 4A7E  
                          _isdigit$3096 0061                   __size_of_sendCANFrame 003A  
           ?_sendVSCPDriverCommandReply 006F             sendVSCPDriverErrorFrame@crc 0070  
                      ?_ECANSendMessage 006C                       sendVSCPFrame@size 009D  
                          _init_app_ram 3056                              ?_Interrupt 0001  
                            ?_OpenUSART 0060                             sprintf@_val 008D  
                           sprintf@flag 0092                             sprintf@prec 0089  
                             __pnvBANK1 01ED                        _ledFunctionality 0031  
              doModeVerbose@nodeid_1247 02B3                doModeVerbose@nodeid_1272 02B6  
                          setFilter@val 0062                        ___lwdiv@dividend 0060  
                       ??_doModeVerbose 00CC           __size_of_ECANSetOperationMode 001A  
                       _printStatistics 35A6                            ??_WriteUSART 0022  
                       ??_sendVSCPFrame 00A0                          _ECANInitialize 53F6  
                     _sendVSCPDriverAck 4EBC                           __pmediumconst 6F54  
                              ?___lldiv 0060                                ?_calcCRC 006C  
                              ?___llmod 006D                               _findNodes 447C  
                              ?___lwdiv 0060                                ?___lwmod 0060  
                             _fifo_init 5B26                               _fifo_read 480E  
                    ?_sendVSCPDriverAck 0001                       __size_of_printMDF 0094  
                           __pintcodelo 0018                            _sendCANFrame 5C20  
                     WriteTimer0@timer0 0060                             _COMSTATbits 000F74  
                     WriteTimer1@timer1 0060                                ?_isdigit 0001  
             ??_receiveVSCPModeCanalMsg 0098                     ??_sendVSCPDriverAck 0022  
                     __size_of_strnicmp 0066                         printGUID@nodeid 00C1  
                   _sendEscapedUartData 576E                               _hexpowers 6FAC  
                      ___lwdiv@quotient 0065                               _init_crc8 55DA  
                 __size_of__RegsToCANID 00FC               doModeVerbose@filter_class 0288  
                              ?_sprintf 0076                                ?_strichr 0061  
                           _cntRxFrames 010C                            ??_doModeVscp 0022  
                              ?_strcspn 0066                                ?_toupper 0001  
                              ?_stristr 006D                      __end_of_WriteUSART 5E80  
                        __size_of_ultoa 00D2                             _cntTxFrames 0114  
                       _can_inputBuffer 0400                          ___wmul@product 0064  
                sendVSCPFrame@vscpclass 0098                               _setFilter 2E78  
                           strnicmp@len 0068                               _octpowers 6F54  
                              _PIE1bits 000F9D             __size_of_sendVSCPDriverNack 0092  
                __end_of_ECANInitialize 5476               __end_of_sendVSCPDriverAck 4F4E  
                              i1u650_25 3E76                                i1u652_25 3F0C  
                              i1u654_25 4E3A                                i1u649_25 3E66  
                              _PIR1bits 000F9E                   _receiveSendEventCANAL 3BC8  
                      ECANSendMessage@i 008E                        ECANSendMessage@j 0089  
                  ?_sendEscapedUartData 006C                   _receiveSendEventSLCAN 3744  
                              _RXF0EIDH 000F02                                _RXF0EIDL 000F03  
                              _RXB0OVFL 007BA7                                _RXF1EIDH 000F06  
                              _RXF1EIDL 000F07                                _RXB1OVFL 007BA6  
                              _RXF2EIDH 000F0A                                _RXF2EIDL 000F0B  
                              _RXF3EIDH 000F0E                                _RXF3EIDL 000F0F  
                              _RXF4EIDH 000F12                                _RXF4EIDL 000F13  
                              _RXF5EIDH 000F16                                _RXF5EIDL 000F17  
                              _RXF6EIDH 000D62             receiveSendMultiEventCANAL@i 007C  
                              _RXF6EIDL 000D63                       hexStringToBytes@i 0070  
                              _RXF7EIDH 000D66                                _RXF0SIDH 000F00  
                     hexStringToBytes@p 006E                                _RXF7EIDL 000D67  
                              _RXF0SIDL 000F01                               _printGUID 418C  
                              _RXF8EIDH 000D6A                                _RXF1SIDH 000F04  
                              _RXF8EIDL 000D6B                                _RXF1SIDL 000F05  
                              _RXF9EIDH 000D72                                _RXF2SIDH 000F08  
                              _RXF9EIDL 000D73                                _RXF2SIDL 000F09  
                              _RXF3SIDH 000F0C                                _RXF3SIDL 000F0D  
                            printGUID@i 00C6                                _RXF4SIDH 000F10  
                              _RXF4SIDL 000F11                                _RXF5SIDH 000F14  
                              _RXF5SIDL 000F15                                _RXF6SIDH 000D60  
                              _RXF6SIDL 000D61                                _RXM0EIDH 000F1A  
                              _RXF7SIDH 000D64                                _RXM0EIDL 000F1B  
                              _RXF7SIDL 000D65                                _RXM1EIDH 000F1E  
                              _RXF8SIDH 000D68                                _RXM1EIDL 000F1F  
                              _RXF8SIDL 000D69                                _RXF9SIDH 000D70  
                              _RXF9SIDL 000D71                                _RXFBCON0 000DE0  
                              _RXFBCON1 000DE1                                _RXFBCON2 000DE2  
                              _RXFBCON3 000DE3                                _RXFBCON4 000DE4  
                              _RXFBCON5 000DE5                                _RXFBCON6 000DE6  
                              _RXFBCON7 000DE7                              ?_findNodes 0001  
                             _printHelp 33E8                                _RXM0SIDH 000F18  
                              _RXM0SIDL 000F19                                _RXM1SIDH 000F1C  
                              _RXM1SIDL 000F1D                               _printMode 5376  
                            ?_fifo_init 0060                              ?_fifo_read 0060  
                              _RXERRCNT 000F75                      __end_of_doModeVscp 33E8  
                              _TXERRCNT 000F76                    __end_of__CANIDToRegs 4032  
                             _putsUSART 5882                             __stringdata 6FCC  
                     ___wmul@multiplier 0060                            __RegsToCANID 3D0C  
                             _vscpClass 0037                 ??_writeRegisterExtended 00BF  
                       Write_b_eep@badd 0060                         Write_b_eep@bdat 0062  
                          ??_fifo_write 0009                 __size_of_doModeVscpNode 0002  
            ??_receivePrintEventVerbose 0094                             ??_ReadUSART 0001  
                   getVSCPFrame@pNodeId 0074                           ??_printBinary 0061  
                      doModeVerbose@reg 02B5                           ??_printErrors 0022  
                            ?_init_crc8 0001                      _serial_inputBuffer 0200  
                             _rwtimeout 0034               writeRegisterExtended@page 00B8  
  __end_of_receiveVSCPModeMultiCanalMsg 5EDA   __size_of_receiveVSCPModeMultiCanalMsg 0002  
          _receiveVSCPModeMultiCanalMsg 5ED8                             ??_Interrupt 0017  
               __end_of_printStatistics 3744                             ??_OpenUSART 0022  
          writeRegisterExtended@timeout 00BB                                _Busy_eep 5ED0  
              __size_of_init_app_eeprom 00D0                              ?_setFilter 0062  
                       OpenUSART@config 0062                          findNodes@value 00CA  
          __end_of_vscp_restoreDefaults 5ED0                              _EECON1bits 000FA6  
         __size_of_printFirmwareVersion 007C         __end_of_receiveVSCPModeCanalMsg 4656  
                       ?_ECANInitialize 0001                                __Hrparam 0000  
                  ECANReceiveMessage@id 000A                   ??_sendEscapedUartData 0022  
                              __Lrparam 0000                        __CANIDToRegs@val 0064  
                    __end_of_fifo_write 3F44                        __CANIDToRegs@ptr 0062  
           receiveVSCPModeCanalMsg@data 00AC                              ?_printGUID 0001  
                           doModeVscp@c 00B9                              ?_printHelp 0001  
                            ?_printMode 0001                         nibbleFromChar@c 0060  
                      ??_nibbleFromChar 0022                        __size_of___lldiv 0076  
                      __size_of_calcCRC 002E                        __size_of___llmod 0062  
                      __size_of___lwdiv 004A                        __size_of___lwmod 003E  
                          ?_WriteTimer0 0060                            ?_WriteTimer1 0060  
                      getCANFrame@pdata 0070                            ?_Write_b_eep 0060  
                            ?_putsUSART 0061                         fifo_read@nbytes 0064  
                            sprintf@idx 0081                   hexStringToBytes@inhex 0067  
                              calcCRC@j 006F                                calcCRC@p 006C  
                            strcat@from 0062                        __size_of_isdigit 0020  
                       ___lwdiv@divisor 0062                         ___lwdiv@counter 0064  
                              __ptext10 4C00                                __ptext11 5ED8  
                              __ptext20 5C92                                __ptext12 456C  
                              __ptext21 55DA                                __ptext13 5AA4  
                              __ptext30 49B0                                __ptext22 02FE  
                              __ptext14 4EBC                                __ptext31 582A  
                              __ptext23 428E                                __ptext15 4F5C  
                              __ptext40 4086                                __ptext32 4A7E  
                              __ptext24 5988                                __ptext16 5D2E  
                              __ptext41 51CA                                __ptext33 4CB6  
                              __ptext25 438A                                __ptext17 3BC8  
                              __ptext50 27F2                                __ptext42 5A1C  
                              __ptext34 5C20                                __ptext26 5D5C  
                              __ptext18 38D2                                __ptext51 52EE  
                              __ptext43 5A60                                __ptext35 3A5A  
                              __ptext27 447C                                __ptext19 576E  
                              __ptext60 5C5A                                __ptext52 4D6C  
                              __ptext44 56AA                                __ptext36 5D8A  
                              __ptext28 5136                                __ptext61 4FFC  
                              __ptext53 480E                                __ptext45 5476  
                              __ptext37 33E8                                __ptext29 418C  
                              __ptext70 5E6C                                __ptext62 5BE2  
                              __ptext54 1A10                                __ptext46 5BA4  
                              __ptext38 252A                                __ptext71 58DA  
                              __ptext63 59D2                                __ptext55 5CFC  
                              __ptext47 5644                                __ptext39 35A6  
                              __ptext80 5E3C                                __ptext72 53F6  
                              __ptext64 5EC8                                __ptext56 570C  
                              __ptext48 5E56                                __ptext81 5E92  
                              __ptext73 5E80                                __ptext65 48E0  
                              __ptext57 54EE                                __ptext49 5AE6  
                              __ptext90 3E46                                __ptext82 5EA4  
                              __ptext74 5DB8                                __ptext66 5CC8  
                              __ptext58 5DE0                                __ptext91 5E1E  
                              __ptext83 5B26                                __ptext75 5E00  
                              __ptext67 5ED0                                __ptext59 525C  
                              __ptext76 57CE                                __ptext68 5376  
                              __ptext85 5EB6                                __ptext77 3056  
                              __ptext69 5882                                __ptext86 4E14  
                              __ptext78 3F72                                __ptext87 2A86  
                              __ptext79 2E78                                __ptext88 3D0C  
                              __ptext89 5564                receiveSendEventCANAL@dlc 0080  
              receiveSendEventCANAL@crc 0081                          printMDF@nodeid 00C1  
                         ?_getVSCPFrame 0073                              strichr@chr 0063  
                      __size_of_sprintf 0672                              strichr@ptr 0061  
                      __size_of_strichr 003E                        __size_of_strcspn 0044  
                      __size_of_toupper 0016                        __size_of_stristr 0078  
                            strcpy@from 0062                          printGUID@value 00C5  
                   __end_of_printBinary 59D2                           __size_of_crc8 0036  
                         __size_of_atoi 00F8                           __size_of_main 01E6  
                         __size_of_init 0058                           __size_of_itoa 0038  
         ?_receiveVSCPModeMultiCanalMsg 0001                     __end_of_printErrors 27F2  
                         __size_of_utoa 00A0                  ?_receiveSendEventCANAL 0001  
                            strnicmp@s1 0064                              strnicmp@s2 0066  
                         init_app_ram@i 0079              __size_of_sendVSCPDriverAck 0092  
        receiveSendMultiEventCANAL@data 0073                  ?_receiveSendEventSLCAN 0001  
              _printNodeFirmwareVersion 49B0                     ECANSendMessage@data 0070  
              ECANSendMessage@tempBSEL0 008A                                _printMDF 5136  
                             printMDF@i 00C5                               printMDF@p 00C3  
                          ?_getCANFrame 006E                     ECANSendMessage@mode 0087  
                   ECANSendMessage@temp 008D                       ?__ECANPointBuffer 0001  
          ??_receiveSendMultiEventCANAL 0022                                atoi@sign 006A  
                           ??_findNodes 0022                            ?_doModeSLCAN 0001  
                           ??_fifo_init 0022                             ??_fifo_read 0066  
                              _vscpData 01E1           __size_of_readRegisterExtended 00F2  
                              main@argc 00E0                                main@argv 00E2  
                              _vscpSize 003D                      ??__ECANPointBuffer 0004  
                              _vscpType 003E                             _RXB0FILHIT0 007B00  
     sendVSCPDriverErrorFrame@errorcode 006F                         doModeVerbose@id 0280  
                       doModeVerbose@rv 02A6                                _strnicmp 5644  
                      init_app_eeprom@i 0064             writeRegisterExtended@nodeid 00C3  
                         Interrupt@fail 0021                         _serialInputFifo 01D9  
                           _RXB1CONbits 000F50                             _OSCTUNEbits 000F9B  
                            _INTCONbits 000FF2                          OpenUSART@spbrg 0060  
                   ECANReceiveMessage@i 0012                                memcpy@d1 0060  
                              memcpy@s1 0062               receivePrintEventVerbose@i 00A5  
                              itoa@base 0074                                isdigit@c 0062  
                    _ECANReceiveMessage 2A86                                memset@p1 0060  
                           ??_init_crc8 0022                               ultoa@base 007C  
                        ??_getVSCPFrame 0079               __size_of_hexStringToBytes 009A  
                       sendVSCPFrame@id 00B4                                intlevel1 0000  
                             sprintf@ap 0088                               sprintf@sp 0076  
                  hexStringToBytes@size 0066                               strchr@chr 0062  
                      ?_printStatistics 0001                receiveSendEventSLCAN@dlc 008A  
                      ___lwmod@dividend 0060                               strchr@ptr 0060  
                   ?_ECANReceiveMessage 000A                        ___lldiv@dividend 0060  
                           ??_setFilter 0066                           printMDF@value 00C2  
   __size_of_receiveSendMultiEventCANAL 0166                           fifo_getFree@f 0001  
                             strcspn@s1 0066                               strcspn@s2 0068  
    receiveSendMultiEventCANAL@msgcount 007B                 ECANSendMessage@msgFlags 0073  
                            _OSCCONbits 000FD3                               strnicmp@r 006C  
                             stristr@s1 006D                               stristr@s2 006F  
                    ECANSendMessage@ptr 008F                       ??_init_app_eeprom 0022  
                 __size_of__CANIDToRegs 00C0                             ??_printGUID 0022  
                           ??_printHelp 0022                             ??_printMode 0022  
              _sendVSCPDriverErrorFrame 4B42                           ?_fifo_getFree 0001  
                ECANSendMessage@dataLen 0072                     __ECANPointBuffer@pt 0005  
                  ??_ECANReceiveMessage 0010                             ??_putsUSART 0063  
                              utoa@base 006B                                ultoa@buf 0076  
                              ultoa@val 0078                           fifo_init@size 0064  
                              sprintf@c 0091                                sprintf@f 0078  
                   hexStringToBytes@buf 0064                                strcat@cp 0064  
                   hexStringToBytes@len 006C                          _doModeVscpNode 5ED6  
                              strcat@to 0060        __end_of_receivePrintEventVerbose 2A86  
                ECANSendMessage@buffers 0088                        ___lldiv@quotient 0068  
                       ___lwmod@divisor 0062            __end_of_ECANSetOperationMode 5E56  
                  _vscp_restoreDefaults 5EC8                            printGUID@buf 00C2  
                              strcpy@cp 0064                                strlen@cp 0062  
                              strcpy@to 0060                         ___lwmod@counter 0064  
                              strcspn@i 006A                                toupper@c 0060  
                           _printBinary 5988                                strtok@s1 006C  
                              strtok@s2 006E                                strspn@s1 0066  
                              strspn@s2 0068                              _RXM1EXIDEN 0078EB  
                              strtok@sp 0026                  ECANSendMessage@tempPtr 008B  
                           _printErrors 252A                            fifo_init@buf 0062  
                          fifo_read@buf 0062           sendVSCPDriverCommandReply@crc 0071  
                          __CANIDToRegs 3F72                  __size_ofi1_WriteTimer0 0012  
                          _USART_Status 0028               readRegisterExtended@value 00BD  
              _sendVSCPModeCapabilities 4C00                __size_of_ECANSendMessage 016E  
