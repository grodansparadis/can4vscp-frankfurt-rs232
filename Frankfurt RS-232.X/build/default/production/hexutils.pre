
# 1 "hexutils.c"

# 34 "../../../../../vscp_firmware/pic/common\inttypes.h"
typedef long long int64_t;




typedef long int32_t;



typedef short int16_t;



typedef char int8_t;




typedef unsigned long long uint64_t;




typedef unsigned long uint32_t;



typedef unsigned short uint16_t;



typedef unsigned char uint8_t;

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.21\include\string.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;


extern int errno;

# 22
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 35
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 27 "C:\Program Files (x86)\Microchip\xc8\v1.21\include\stdlib.h"
typedef struct {
int rem;
int quot;
} div_t;
typedef struct {
unsigned rem;
unsigned quot;
} udiv_t;
typedef struct {
long quot;
long rem;
} ldiv_t;
typedef struct {
unsigned long quot;
unsigned long rem;
} uldiv_t;

# 65
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);
extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);




extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);

extern void abort(void);
extern void exit(int);
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);


extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);




extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

extern char * ftoa(float f, int * status);

# 15 "hexutils.h"
static uint8_t nibbleFromChar(char c);
uint8_t hexStringToBytes(uint8_t *buf, uint8_t size, char *inhex);
static char nibbleToChar(uint8_t nibble);
uint8_t bytesToHexString(uint8_t *buf, uint8_t size, uint8_t *bytes, uint8_t buflen);

# 15 "hexutils.c"
static uint8_t nibbleFromChar(char c)
{
if(c >= '0' && c <= '9') return c - '0';
if(c >= 'a' && c <= 'f') return c - 'a' + 10;
if(c >= 'A' && c <= 'F') return c - 'A' + 10;
return 255;
}

# 30
uint8_t hexStringToBytes(uint8_t *buf, uint8_t size, char *inhex)
{
uint8_t *p;
int len, i;

len = strlen(inhex) / 2;
if ( len > size ) return 0;
for (i=0, p = (uint8_t *)inhex; i<len; i++) {
buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p+1));
p += 2;
}

return i;
}

static char byteMap[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
static int byteMapLen = sizeof(byteMap);

# 55
static char nibbleToChar(uint8_t nibble)
{
if (nibble < byteMapLen) return byteMap[nibble];
return '*';
}

# 67
uint8_t bytesToHexString( uint8_t *buf, uint8_t size, uint8_t *bytes, uint8_t buflen)
{
int i;

if ( size < (buflen*2 + 1) ) return 0;
for (i=0; i<buflen; i++) {
buf[i*2] = nibbleToChar(bytes[i] >> 4);
buf[i*2+1] = nibbleToChar(bytes[i] & 0x0f);
}
buf[i] = '\0';
return i;
}
