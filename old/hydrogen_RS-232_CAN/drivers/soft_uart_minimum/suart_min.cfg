/************************************************************************************
 Title  :   CONFIGURATION file for the SOFTWARE UART MINIMUM FUNCTIONS (softuart.cfg)
 Author:    Chris efstathiou hendrix@otenet.gr
 Date:      03/Oct/2002
 Software:  AVR-GCC with AVR-AS
 Target:    any AVR device
 Comments:  This software is FREE.

************************************************************************************/
/*
IMPORTANT: You must use ports that have registers located below 0x3f
           when you compile for the MEGA128 otherwise the driver will not work!
           Thats because the assembly file uses the in/out/sbi etc. instructions.

*/

/*
The "SUART_START_BIT_DETECTION" selects one from 3 different stop bit detection method.
0 leaves "SUART_STOP_BITS" + 1/2 bits time for rx data processing,
1 leaves exactly "SUART_STOP_BITS" bits time for rx data processing
and 2 leaves 1/2 bit time for rx data processing.
Default is 0 but if you have problems with receiving try the other options also.

IMPORTANT! make sure that interrupts are disabled when receiving or transmitting 
           at high baudrates, otherwise the software uart timing will be incorrect!
*/

#ifndef SUART_MIN_CFG
#define SUART_MIN_CFG

/*#####################################################################################################*/
/*###############################  START OF CONFIGURATION BLOCK   #####################################*/
/*#####################################################################################################*/
#ifndef F_CPU
#define    F_CPU                     3686400   /* CLOCK FREQUENCY IN HERTZ  */
#endif

#define    SUART_BAUDRATE             115200    /* Desired baudrate */
                                 
#define    SUART_TIMEOUT_ENABLED      1
#define    SUART_TIMEOUT_TIME_MS      5000       /* valid only if SUART_TIMEOUT_ENABLED=1 */
                                    
#define    SOFT_UART_RX_PORT          D         /* Receive pin port is PORTD */
#define    SUART_RX_PIN               0         /* Receive pin is 0 */

#define    SOFT_UART_TX_PORT          D         /* Transmit pin port is PORTD */
#define    SUART_TX_PIN               1         /* Transmit pin is 1 */

#define    SUART_STOP_BITS            1         /* Number of stop bits (1, 2, ...) */
#define    SUART_STOP_BIT_DETECTION   0         /* 0,1 or 2 (differnet st0p bit detection methods) */

#define    SUART_WILL_USE_A_TIMER     0         /* 1 if you will use a 8 bit timer, 0=no timer */
#define    SUART_USE_TIMER            0         /* 0 for timer 0, 2 for timer 2 */

#define    RX_TERMINATION_CHAR        '\r'

#define    SUART_USE_RS232_LOGIC      0          /* Produces inverted uart logic */

/*#####################################################################################################*/
/*##############################  END OF CONFIGURATION BLOCK   ########################################*/
/*#####################################################################################################*/

#define SUART_RX_PORT_IS_IO    1
#define SUART_TX_PORT_IS_IO    1

/* MACRO DEFINITIONS */
#ifndef CONCAT1
#define CONCAT1(a, b) CONCAT2(a, b)
#endif
#ifndef CONCAT2
#define CONCAT2(a, b) a ## b
#endif

/* REGISTER NAME FORMING */
#define SUART_RX_OUT_REG    CONCAT1(PORT, SOFT_UART_RX_PORT)
#define SUART_RX_DDR_REG    CONCAT1(DDR,  SOFT_UART_RX_PORT)
#define SUART_RX_PIN_REG    CONCAT1(PIN,  SOFT_UART_RX_PORT)

#define SUART_TX_OUT_REG    CONCAT1(PORT, SOFT_UART_TX_PORT)
#define SUART_TX_DDR_REG    CONCAT1(DDR,  SOFT_UART_TX_PORT)
#define SUART_TX_PIN_REG    CONCAT1(PIN,  SOFT_UART_TX_PORT)

#if SUART_TIMEOUT_ENABLED == 1

#define SUART_TIMEOUT_LOOPS          (SUART_TIMEOUT_TIME_MS*(F_CPU/8000) )

#if SUART_TIMEOUT_LOOPS <= 0 

#undef SUART_TIMEOUT_LOOPS
#define SUART_TIMEOUT_LOOPS   1

#endif

#endif  /* #if SUART_TIMEOUT_ENABLED == 1 */

#if   SUART_STOP_BIT_DETECTION == 0 
#define  SUART_AVAILABLE_CPU_CYCLES  (((F_CPU/SUART_BAUDRATE)*SUART_STOP_BITS)+((F_CPU/SUART_BAUDRATE)/2) ) 
#elif SUART_STOP_BIT_DETECTION == 1
#define  SUART_AVAILABLE_CPU_CYCLES  ((F_CPU/SUART_BAUDRATE)*SUART_STOP_BITS ) 
#elif SUART_STOP_BIT_DETECTION == 2
#define  SUART_AVAILABLE_CPU_CYCLES  ((F_CPU/SUART_BAUDRATE)/2 )
#endif

                                                       

/* BAUDRATE TIMING SETTINGS */
/*111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111*/
#if   SUART_WILL_USE_A_TIMER == 0 
/*111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111*/

#define SUART_CORRECTION_FACTOR        8
#define SUART_DELAY_OVERHEAD           3

#define TEMP_SUART_DELAY_ACCURATE      ( ((F_CPU/(SUART_BAUDRATE/10))-(SUART_CORRECTION_FACTOR*10))/6 )  
#define TEMP_SUART_DELAY_REAL          ( ((F_CPU/SUART_BAUDRATE)-SUART_CORRECTION_FACTOR)/6 )

#if   ( TEMP_SUART_DELAY_ACCURATE - (TEMP_SUART_DELAY_REAL*10)  ) == 0  

#define SUART_DELAY1  (TEMP_SUART_DELAY_REAL-(SUART_DELAY_OVERHEAD/3))  
#define SUART_DELAY2  TEMP_SUART_DELAY_REAL  
#define SUART_DELAY3  TEMP_SUART_DELAY_REAL 

#elif   ( TEMP_SUART_DELAY_ACCURATE - (TEMP_SUART_DELAY_REAL*10)  ) >= 1 && \
        ( TEMP_SUART_DELAY_ACCURATE - (TEMP_SUART_DELAY_REAL*10)  ) <= 3 

#define SUART_DELAY1  ((TEMP_SUART_DELAY_REAL+1)-(SUART_DELAY_OVERHEAD/3))   
#define SUART_DELAY2  TEMP_SUART_DELAY_REAL 
#define SUART_DELAY3  TEMP_SUART_DELAY_REAL 

#elif   ( TEMP_SUART_DELAY_ACCURATE - (TEMP_SUART_DELAY_REAL*10)  ) >= 4 && \
        ( TEMP_SUART_DELAY_ACCURATE - (TEMP_SUART_DELAY_REAL*10)  ) <= 6 

#define SUART_DELAY1  ((TEMP_SUART_DELAY_REAL+1)-(SUART_DELAY_OVERHEAD/3))   
#define SUART_DELAY2  (TEMP_SUART_DELAY_REAL+1) 
#define SUART_DELAY3  TEMP_SUART_DELAY_REAL 

#elif   ( TEMP_SUART_DELAY_ACCURATE - (TEMP_SUART_DELAY_REAL*10)  ) >= 7 && \
        ( TEMP_SUART_DELAY_ACCURATE - (TEMP_SUART_DELAY_REAL*10)  ) <= 9 

#define SUART_DELAY1  ((TEMP_SUART_DELAY_REAL+1)-(SUART_DELAY_OVERHEAD/3))   
#define SUART_DELAY2  (TEMP_SUART_DELAY_REAL+1) 
#define SUART_DELAY3  (TEMP_SUART_DELAY_REAL+1) 


#endif



/*111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111*/
#elif SUART_WILL_USE_A_TIMER == 1  
/*111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111*/

/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/
#if defined(__AVR_ATmega103__) || defined(__AVR_ATmega128__) || \
    defined(__AVR_ATmega8535__) || defined(__AVR_ATmega8515__)
/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/

#define NUMBER_OF_8_BIT_TIMERS 2

#if SUART_USE_TIMER == 0  || NUMBER_OF_8_BIT_TIMERS == 1

#define TIMER_DIV_BY_1      ( (1<<0) )
#define TIMER_DIV_BY_8      ( (1<<1) )
#define TIMER_DIV_BY_32     ( (1<<1)|(1<<0) )
#define TIMER_DIV_BY_64     ( (1<<2) )
#define TIMER_DIV_BY_128    ( (1<<2)|(1<<0) )
#define TIMER_DIV_BY_256    ( (1<<2)|(1<<1) )
#define TIMER_DIV_BY_1024   ( (1<<2)|(1<<1)|(1<<0) )

#define SUART_TCNT          TCNT0
#define SUART_TCCR          TCCR0
#define SUART_TOIE          TOIE0
#define SUART_OCIE          OCIE0

#elif SUART_USE_TIMER == 2 && NUMBER_OF_8_BIT_TIMERS >= 2

#define TIMER_DIV_BY_1      ( (1<<0) )
#define TIMER_DIV_BY_8      ( (1<<1) )
#define TIMER_DIV_BY_32     0
#define TIMER_DIV_BY_64     ( (1<<1)|(1<<0) )
#define TIMER_DIV_BY_128    0
#define TIMER_DIV_BY_256    ( (1<<2) )
#define TIMER_DIV_BY_1024   ( (1<<2)|(1<<0) )

#define SUART_TCNT          TCNT2
#define SUART_TCCR          TCCR2
#define SUART_TOIE          TOIE2
#define SUART_OCIE          OCIE2


#endif

/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/
#elif  defined(__AVR_ATmega8__) || defined(__AVR_ATmega16__) || defined(__AVR_ATmega32__) || \
       defined(__AVR_ATmega64__) || defined(__AVR_ATmega323__) 
/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/

#define NUMBER_OF_8_BIT_TIMERS 2

#if SUART_USE_TIMER == 0  || NUMBER_OF_8_BIT_TIMERS == 1

#define TIMER_DIV_BY_1      ( (1<<0) )
#define TIMER_DIV_BY_8      ( (1<<1) )
#define TIMER_DIV_BY_32     ( (1<<1)|(1<<0) )
#define TIMER_DIV_BY_64     0
#define TIMER_DIV_BY_128    0
#define TIMER_DIV_BY_256    ( (1<<2) )
#define TIMER_DIV_BY_1024   ( (1<<2)|(1<<0) )

#define SUART_TCNT          TCNT0
#define SUART_TCCR          TCCR0
#define SUART_TOIE          TOIE0
#define SUART_OCIE          OCIE0

#elif SUART_USE_TIMER == 2 && NUMBER_OF_8_BIT_TIMERS >= 2

#define TIMER_DIV_BY_1      ( (1<<0) )
#define TIMER_DIV_BY_8      ( (1<<1) )
#define TIMER_DIV_BY_32     ( (1<<1)|(1<<0) )
#define TIMER_DIV_BY_64     ( (1<<2) )
#define TIMER_DIV_BY_128    ( (1<<2)|(1<<0) )
#define TIMER_DIV_BY_256    ( (1<<2)|(1<<1) )
#define TIMER_DIV_BY_1024   ( (1<<2)|(1<<1)|(1<<0) )

#define SUART_TCNT          TCNT2
#define SUART_TCCR          TCCR2
#define SUART_TOIE          TOIE2
#define SUART_OCIE          OCIE2

                         
#endif

/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/
#elif  defined(__AVR_ATmega161__) || defined(__AVR_ATmega163__) || defined(__AVR_AT90S8515__) || \
       defined(__AVR_AT90S8535__) || defined(__AVR_AT90S4434__)  
/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/

#define NUMBER_OF_8_BIT_TIMERS 2

#if SUART_USE_TIMER == 0  || NUMBER_OF_8_BIT_TIMERS == 1

#define TIMER_DIV_BY_1      ( (1<<0) )
#define TIMER_DIV_BY_8      ( (1<<1) )
#define TIMER_DIV_BY_32     0
#define TIMER_DIV_BY_64     ( (1<<1)|(1<<0) )
#define TIMER_DIV_BY_128    0
#define TIMER_DIV_BY_256    ( (1<<2) )
#define TIMER_DIV_BY_1024   ( (1<<2)|(1<<0) )

#define SUART_TCNT          TCNT0
#define SUART_TCCR          TCCR0
#define SUART_TOIE          TOIE0
#if defined(__AVR_ATmega161__)
#define SUART_OCIE          OCIE0
#else
#define SUART_OCIE          0
#endif

#elif SUART_USE_TIMER == 2 && NUMBER_OF_8_BIT_TIMERS >= 2

#define TIMER_DIV_BY_1      ( (1<<0) )
#define TIMER_DIV_BY_8      ( (1<<1) )
#define TIMER_DIV_BY_32     ( (1<<1)|(1<<0) )
#define TIMER_DIV_BY_64     ( (1<<2) )
#define TIMER_DIV_BY_128    ( (1<<2)|(1<<0) )
#define TIMER_DIV_BY_256    ( (1<<2)|(1<<1) )
#define TIMER_DIV_BY_1024   ( (1<<2)|(1<<1)|(1<<0) )

#define SUART_TCNT           TCNT2
#define SUART_TCCR           TCCR2
#define SUART_TOIE           TOIE2
#define SUART_OCIE           OCIE2

                         
#endif


/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/
#elif  defined(__AVR_AT90S4433__) 
/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/

#define NUMBER_OF_8_BIT_TIMERS 1

#if SUART_USE_TIMER > 0
#undef SUART_USE_TIMER
#warning " THERE IS NOT SUCH AN 8 BIT TIMER. WILL USE TIMER 0 "
#define SUART_USE_TIMER 0
#endif

#define TIMER_DIV_BY_1      ( (1<<0) )
#define TIMER_DIV_BY_8      ( (1<<1) )
#define TIMER_DIV_BY_32     0
#define TIMER_DIV_BY_64     ( (1<<1)|(1<<0) )
#define TIMER_DIV_BY_128    0
#define TIMER_DIV_BY_256    ( (1<<2) )
#define TIMER_DIV_BY_1024   ( (1<<2)|(1<<0) )

#define SUART_TCNT          TCNT0
#define SUART_TCCR          TCCR0
#define SUART_TOIE          TOIE0
#define SUART_OCIE          OCIE0

/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/
#elif defined(TCNT0)
/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/

#if SUART_USE_TIMER > 0
#undef SUART_USE_TIMER
#warning " THERE IS NOT SUCH AN 8 BIT TIMER. WILL USE TIMER 0 "
#define SUART_USE_TIMER 0
#endif

#define TIMER_DIV_BY_1      ( (1<<0) )
#define TIMER_DIV_BY_8      ( (1<<1) )
#define TIMER_DIV_BY_32     0
#define TIMER_DIV_BY_64     ( (1<<1)|(1<<0) )
#define TIMER_DIV_BY_128    0
#define TIMER_DIV_BY_256    ( (1<<2) )
#define TIMER_DIV_BY_1024   ( (1<<2)|(1<<0) )

#define SUART_TCNT          TCNT0
#define SUART_TCCR          TCCR0
#define SUART_TOIE          TOIE0
#define SUART_OCIE          0

/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/
#endif
/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/

#define SUART_CORRECTION_FACTOR              16
#define SUART_DELAY_OVERHEAD                 0

#define SUART_BAUDRATE_DELAY                 ( F_CPU/SUART_BAUDRATE )


#if     SUART_BAUDRATE_DELAY <= 255
#define PRESCALER_VALUE                       TIMER_DIV_BY_1
#define TIMER_DIVISION_FACTOR                 1

#elif   SUART_BAUDRATE_DELAY <= (255*8)
#define PRESCALER_VALUE                       TIMER_DIV_BY_8
#define TIMER_DIVISION_FACTOR                 8

#elif   SUART_BAUDRATE_DELAY <= (255*32) && TIMER0_DIV_BY_32 > 0
#define PRESCALER_VALUE                       TIMER_DIV_BY_32
#define TIMER_DIVISION_FACTOR                 32

#elif   SUART_BAUDRATE_DELAY <= (255*64) && TIMER_DIV_BY_64 >  0
#define PRESCALER_VALUE                       TIMER_DIV_BY_64
#define TIMER_DIVISION_FACTOR                 64

#elif   SUART_BAUDRATE_DELAY <= (255*128) && TIMER_DIV_BY_128 > 0
#define PRESCALER_VALUE                       TIMER_DIV_BY_128
#define TIMER_DIVISION_FACTOR                 128

#elif   SUART_BAUDRATE_DELAY <= (255*255)
#define PRESCALER_VALUE                       TIMER_DIV_BY_256
#define TIMER_DIVISION_FACTOR                 256

#elif   SUART_BAUDRATE_DELAY <= (255*1024)
#define PRESCALER_VALUE                       TIMER_DIV_BY_1024
#define TIMER_DIVISION_FACTOR                 1024

#else 
#error " BAUDRATE TOO LOW "

#endif

#define TIME_1_BIT      ( (SUART_BAUDRATE_DELAY-SUART_CORRECTION_FACTOR)/TIMER_DIVISION_FACTOR )
#define TIME_HALF_BIT   ( ((SUART_BAUDRATE_DELAY-SUART_DELAY_OVERHEAD)/2)/TIMER_DIVISION_FACTOR )


/*111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111*/   
#endif  /* #elif SUART_WILL_USE_A_TIMER == 1 */
/*111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111*/




#endif   /* SUART_MIN_CFG */
/*######################################################################################################*/
/*                                         T H E   E N D                                                */
/*######################################################################################################*/

